

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Aug 03 13:41:11 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	cinit,global,class=CODE,merge=1,delta=2
    23                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    28                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    29                           	psect	clrtext,global,class=CODE,delta=2
    30                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    31                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    32                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    33                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    34                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    35                           	psect	text1,local,class=CODE,merge=1,delta=2
    36                           	psect	text2,local,class=CODE,merge=1,delta=2
    37                           	psect	text3,local,class=CODE,merge=1,delta=2
    38                           	psect	text4,local,class=CODE,merge=1,delta=2
    39                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text6,local,class=CODE,merge=1,delta=2
    41                           	psect	text7,local,class=CODE,merge=1,delta=2
    42                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text9,local,class=CODE,merge=1,delta=2
    44                           	psect	text10,local,class=CODE,merge=1,delta=2
    45                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text12,local,class=CODE,merge=1,delta=2
    47                           	psect	text13,local,class=CODE,merge=1,delta=2
    48                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text15,local,class=CODE,merge=1,delta=2
    50                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text18,local,class=CODE,merge=1,delta=2
    53                           	psect	text19,local,class=CODE,merge=1,delta=2
    54                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text22,local,class=CODE,merge=1,delta=2
    57                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text33,local,class=CODE,merge=1,delta=2
    68                           	psect	text34,local,class=CODE,merge=1,delta=2
    69                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	intentry,global,class=CODE,delta=2
    76                           	psect	text42,local,class=CODE,merge=1,delta=2
    77                           	psect	text43,local,class=CODE,merge=1,delta=2
    78                           	psect	text44,local,class=CODE,merge=1,delta=2
    79                           	psect	text45,local,class=CODE,merge=1,delta=2
    80                           	psect	text46,local,class=CODE,merge=1,delta=2
    81                           	psect	text47,local,class=CODE,merge=1,delta=2
    82                           	psect	text48,local,class=CODE,merge=1,delta=2
    83                           	psect	text49,local,class=CODE,merge=1,delta=2
    84                           	psect	text50,local,class=CODE,merge=1,delta=2
    85                           	psect	text51,local,class=CODE,merge=1,delta=2
    86                           	psect	text52,local,class=CODE,merge=1,delta=2
    87                           	psect	text53,local,class=CODE,merge=1,delta=2
    88                           	psect	text54,local,class=CODE,merge=1,delta=2
    89                           	psect	text55,local,class=CODE,merge=1,delta=2
    90                           	psect	text56,local,class=CODE,merge=1,delta=2
    91                           	dabs	1,0x7E,2
    92  0000                     
    93                           ; Version 2.00
    94                           ; Generated 27/05/2018 GMT
    95                           ; 
    96                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC16LF18325 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     	;# 
   128  0001                     	;# 
   129  0002                     	;# 
   130  0003                     	;# 
   131  0004                     	;# 
   132  0005                     	;# 
   133  0006                     	;# 
   134  0007                     	;# 
   135  0008                     	;# 
   136  0009                     	;# 
   137  000A                     	;# 
   138  000B                     	;# 
   139  000C                     	;# 
   140  000E                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0016                     	;# 
   150  0017                     	;# 
   151  0018                     	;# 
   152  0019                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001C                     	;# 
   157  001D                     	;# 
   158  001E                     	;# 
   159  001F                     	;# 
   160  008C                     	;# 
   161  008E                     	;# 
   162  0090                     	;# 
   163  0091                     	;# 
   164  0092                     	;# 
   165  0093                     	;# 
   166  0094                     	;# 
   167  0097                     	;# 
   168  009B                     	;# 
   169  009B                     	;# 
   170  009C                     	;# 
   171  009D                     	;# 
   172  009E                     	;# 
   173  009F                     	;# 
   174  010C                     	;# 
   175  010E                     	;# 
   176  0111                     	;# 
   177  0112                     	;# 
   178  0113                     	;# 
   179  0114                     	;# 
   180  0115                     	;# 
   181  0116                     	;# 
   182  0117                     	;# 
   183  0118                     	;# 
   184  0119                     	;# 
   185  018C                     	;# 
   186  018E                     	;# 
   187  0199                     	;# 
   188  0199                     	;# 
   189  0199                     	;# 
   190  019A                     	;# 
   191  019A                     	;# 
   192  019A                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019C                     	;# 
   199  019C                     	;# 
   200  019C                     	;# 
   201  019D                     	;# 
   202  019D                     	;# 
   203  019D                     	;# 
   204  019E                     	;# 
   205  019E                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  019F                     	;# 
   210  019F                     	;# 
   211  019F                     	;# 
   212  020C                     	;# 
   213  020E                     	;# 
   214  0211                     	;# 
   215  0211                     	;# 
   216  0212                     	;# 
   217  0212                     	;# 
   218  0213                     	;# 
   219  0213                     	;# 
   220  0214                     	;# 
   221  0214                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0215                     	;# 
   225  0215                     	;# 
   226  0216                     	;# 
   227  0216                     	;# 
   228  0217                     	;# 
   229  0217                     	;# 
   230  0219                     	;# 
   231  021A                     	;# 
   232  021B                     	;# 
   233  021C                     	;# 
   234  021D                     	;# 
   235  021D                     	;# 
   236  021E                     	;# 
   237  021F                     	;# 
   238  028C                     	;# 
   239  028E                     	;# 
   240  0291                     	;# 
   241  0291                     	;# 
   242  0292                     	;# 
   243  0293                     	;# 
   244  0294                     	;# 
   245  0295                     	;# 
   246  0295                     	;# 
   247  0296                     	;# 
   248  0297                     	;# 
   249  0298                     	;# 
   250  029F                     	;# 
   251  030C                     	;# 
   252  030E                     	;# 
   253  0311                     	;# 
   254  0311                     	;# 
   255  0312                     	;# 
   256  0313                     	;# 
   257  0314                     	;# 
   258  0315                     	;# 
   259  0315                     	;# 
   260  0316                     	;# 
   261  0317                     	;# 
   262  0318                     	;# 
   263  038C                     	;# 
   264  038E                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  0393                     	;# 
   268  0397                     	;# 
   269  0398                     	;# 
   270  0399                     	;# 
   271  039A                     	;# 
   272  039C                     	;# 
   273  039D                     	;# 
   274  039E                     	;# 
   275  039F                     	;# 
   276  0411                     	;# 
   277  0411                     	;# 
   278  0412                     	;# 
   279  0413                     	;# 
   280  0414                     	;# 
   281  0415                     	;# 
   282  0416                     	;# 
   283  0417                     	;# 
   284  0418                     	;# 
   285  0418                     	;# 
   286  0419                     	;# 
   287  041A                     	;# 
   288  041B                     	;# 
   289  041C                     	;# 
   290  041D                     	;# 
   291  041E                     	;# 
   292  041F                     	;# 
   293  0498                     	;# 
   294  0498                     	;# 
   295  0499                     	;# 
   296  049A                     	;# 
   297  049B                     	;# 
   298  049B                     	;# 
   299  049C                     	;# 
   300  049D                     	;# 
   301  049E                     	;# 
   302  049F                     	;# 
   303  0617                     	;# 
   304  0618                     	;# 
   305  0619                     	;# 
   306  0619                     	;# 
   307  061A                     	;# 
   308  061B                     	;# 
   309  061C                     	;# 
   310  061C                     	;# 
   311  061F                     	;# 
   312  0691                     	;# 
   313  0692                     	;# 
   314  0693                     	;# 
   315  0694                     	;# 
   316  0695                     	;# 
   317  0696                     	;# 
   318  0697                     	;# 
   319  0698                     	;# 
   320  0699                     	;# 
   321  0711                     	;# 
   322  0712                     	;# 
   323  0713                     	;# 
   324  0714                     	;# 
   325  0715                     	;# 
   326  0716                     	;# 
   327  0717                     	;# 
   328  0718                     	;# 
   329  0719                     	;# 
   330  0891                     	;# 
   331  0891                     	;# 
   332  0891                     	;# 
   333  0891                     	;# 
   334  0891                     	;# 
   335  0891                     	;# 
   336  0892                     	;# 
   337  0892                     	;# 
   338  0892                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0893                     	;# 
   342  0893                     	;# 
   343  0893                     	;# 
   344  0893                     	;# 
   345  0894                     	;# 
   346  0894                     	;# 
   347  0894                     	;# 
   348  0895                     	;# 
   349  0895                     	;# 
   350  0895                     	;# 
   351  0896                     	;# 
   352  0896                     	;# 
   353  0896                     	;# 
   354  089B                     	;# 
   355  0911                     	;# 
   356  0912                     	;# 
   357  0913                     	;# 
   358  0914                     	;# 
   359  0915                     	;# 
   360  0916                     	;# 
   361  0918                     	;# 
   362  0919                     	;# 
   363  091A                     	;# 
   364  091B                     	;# 
   365  091C                     	;# 
   366  091D                     	;# 
   367  091E                     	;# 
   368  091F                     	;# 
   369  0E0F                     	;# 
   370  0E10                     	;# 
   371  0E11                     	;# 
   372  0E12                     	;# 
   373  0E13                     	;# 
   374  0E14                     	;# 
   375  0E15                     	;# 
   376  0E16                     	;# 
   377  0E17                     	;# 
   378  0E18                     	;# 
   379  0E19                     	;# 
   380  0E1A                     	;# 
   381  0E1B                     	;# 
   382  0E1C                     	;# 
   383  0E1D                     	;# 
   384  0E1E                     	;# 
   385  0E1F                     	;# 
   386  0E20                     	;# 
   387  0E21                     	;# 
   388  0E22                     	;# 
   389  0E24                     	;# 
   390  0E25                     	;# 
   391  0E28                     	;# 
   392  0E29                     	;# 
   393  0E2A                     	;# 
   394  0E2B                     	;# 
   395  0E2C                     	;# 
   396  0E2D                     	;# 
   397  0E2E                     	;# 
   398  0E2F                     	;# 
   399  0E90                     	;# 
   400  0E91                     	;# 
   401  0E92                     	;# 
   402  0E94                     	;# 
   403  0E95                     	;# 
   404  0EA0                     	;# 
   405  0EA1                     	;# 
   406  0EA2                     	;# 
   407  0EA3                     	;# 
   408  0EA4                     	;# 
   409  0EA5                     	;# 
   410  0F0F                     	;# 
   411  0F10                     	;# 
   412  0F11                     	;# 
   413  0F12                     	;# 
   414  0F13                     	;# 
   415  0F14                     	;# 
   416  0F15                     	;# 
   417  0F16                     	;# 
   418  0F17                     	;# 
   419  0F18                     	;# 
   420  0F19                     	;# 
   421  0F1A                     	;# 
   422  0F1B                     	;# 
   423  0F1C                     	;# 
   424  0F1D                     	;# 
   425  0F1E                     	;# 
   426  0F1F                     	;# 
   427  0F20                     	;# 
   428  0F21                     	;# 
   429  0F22                     	;# 
   430  0F23                     	;# 
   431  0F24                     	;# 
   432  0F25                     	;# 
   433  0F26                     	;# 
   434  0F27                     	;# 
   435  0F28                     	;# 
   436  0F29                     	;# 
   437  0F2A                     	;# 
   438  0F2B                     	;# 
   439  0F2C                     	;# 
   440  0F2D                     	;# 
   441  0F2E                     	;# 
   442  0F2F                     	;# 
   443  0F30                     	;# 
   444  0F31                     	;# 
   445  0F32                     	;# 
   446  0F33                     	;# 
   447  0F34                     	;# 
   448  0F35                     	;# 
   449  0F36                     	;# 
   450  0F37                     	;# 
   451  0FE4                     	;# 
   452  0FE5                     	;# 
   453  0FE6                     	;# 
   454  0FE7                     	;# 
   455  0FE8                     	;# 
   456  0FE9                     	;# 
   457  0FEA                     	;# 
   458  0FEB                     	;# 
   459  0FED                     	;# 
   460  0FEE                     	;# 
   461  0FEF                     	;# 
   462  0000                     	;# 
   463  0001                     	;# 
   464  0002                     	;# 
   465  0003                     	;# 
   466  0004                     	;# 
   467  0005                     	;# 
   468  0006                     	;# 
   469  0007                     	;# 
   470  0008                     	;# 
   471  0009                     	;# 
   472  000A                     	;# 
   473  000B                     	;# 
   474  000C                     	;# 
   475  000E                     	;# 
   476  0010                     	;# 
   477  0011                     	;# 
   478  0012                     	;# 
   479  0013                     	;# 
   480  0014                     	;# 
   481  0015                     	;# 
   482  0015                     	;# 
   483  0016                     	;# 
   484  0016                     	;# 
   485  0017                     	;# 
   486  0018                     	;# 
   487  0019                     	;# 
   488  0019                     	;# 
   489  001A                     	;# 
   490  001B                     	;# 
   491  001C                     	;# 
   492  001D                     	;# 
   493  001E                     	;# 
   494  001F                     	;# 
   495  008C                     	;# 
   496  008E                     	;# 
   497  0090                     	;# 
   498  0091                     	;# 
   499  0092                     	;# 
   500  0093                     	;# 
   501  0094                     	;# 
   502  0097                     	;# 
   503  009B                     	;# 
   504  009B                     	;# 
   505  009C                     	;# 
   506  009D                     	;# 
   507  009E                     	;# 
   508  009F                     	;# 
   509  010C                     	;# 
   510  010E                     	;# 
   511  0111                     	;# 
   512  0112                     	;# 
   513  0113                     	;# 
   514  0114                     	;# 
   515  0115                     	;# 
   516  0116                     	;# 
   517  0117                     	;# 
   518  0118                     	;# 
   519  0119                     	;# 
   520  018C                     	;# 
   521  018E                     	;# 
   522  0199                     	;# 
   523  0199                     	;# 
   524  0199                     	;# 
   525  019A                     	;# 
   526  019A                     	;# 
   527  019A                     	;# 
   528  019B                     	;# 
   529  019B                     	;# 
   530  019B                     	;# 
   531  019B                     	;# 
   532  019B                     	;# 
   533  019C                     	;# 
   534  019C                     	;# 
   535  019C                     	;# 
   536  019D                     	;# 
   537  019D                     	;# 
   538  019D                     	;# 
   539  019E                     	;# 
   540  019E                     	;# 
   541  019E                     	;# 
   542  019F                     	;# 
   543  019F                     	;# 
   544  019F                     	;# 
   545  019F                     	;# 
   546  019F                     	;# 
   547  020C                     	;# 
   548  020E                     	;# 
   549  0211                     	;# 
   550  0211                     	;# 
   551  0212                     	;# 
   552  0212                     	;# 
   553  0213                     	;# 
   554  0213                     	;# 
   555  0214                     	;# 
   556  0214                     	;# 
   557  0215                     	;# 
   558  0215                     	;# 
   559  0215                     	;# 
   560  0215                     	;# 
   561  0216                     	;# 
   562  0216                     	;# 
   563  0217                     	;# 
   564  0217                     	;# 
   565  0219                     	;# 
   566  021A                     	;# 
   567  021B                     	;# 
   568  021C                     	;# 
   569  021D                     	;# 
   570  021D                     	;# 
   571  021E                     	;# 
   572  021F                     	;# 
   573  028C                     	;# 
   574  028E                     	;# 
   575  0291                     	;# 
   576  0291                     	;# 
   577  0292                     	;# 
   578  0293                     	;# 
   579  0294                     	;# 
   580  0295                     	;# 
   581  0295                     	;# 
   582  0296                     	;# 
   583  0297                     	;# 
   584  0298                     	;# 
   585  029F                     	;# 
   586  030C                     	;# 
   587  030E                     	;# 
   588  0311                     	;# 
   589  0311                     	;# 
   590  0312                     	;# 
   591  0313                     	;# 
   592  0314                     	;# 
   593  0315                     	;# 
   594  0315                     	;# 
   595  0316                     	;# 
   596  0317                     	;# 
   597  0318                     	;# 
   598  038C                     	;# 
   599  038E                     	;# 
   600  0391                     	;# 
   601  0392                     	;# 
   602  0393                     	;# 
   603  0397                     	;# 
   604  0398                     	;# 
   605  0399                     	;# 
   606  039A                     	;# 
   607  039C                     	;# 
   608  039D                     	;# 
   609  039E                     	;# 
   610  039F                     	;# 
   611  0411                     	;# 
   612  0411                     	;# 
   613  0412                     	;# 
   614  0413                     	;# 
   615  0414                     	;# 
   616  0415                     	;# 
   617  0416                     	;# 
   618  0417                     	;# 
   619  0418                     	;# 
   620  0418                     	;# 
   621  0419                     	;# 
   622  041A                     	;# 
   623  041B                     	;# 
   624  041C                     	;# 
   625  041D                     	;# 
   626  041E                     	;# 
   627  041F                     	;# 
   628  0498                     	;# 
   629  0498                     	;# 
   630  0499                     	;# 
   631  049A                     	;# 
   632  049B                     	;# 
   633  049B                     	;# 
   634  049C                     	;# 
   635  049D                     	;# 
   636  049E                     	;# 
   637  049F                     	;# 
   638  0617                     	;# 
   639  0618                     	;# 
   640  0619                     	;# 
   641  0619                     	;# 
   642  061A                     	;# 
   643  061B                     	;# 
   644  061C                     	;# 
   645  061C                     	;# 
   646  061F                     	;# 
   647  0691                     	;# 
   648  0692                     	;# 
   649  0693                     	;# 
   650  0694                     	;# 
   651  0695                     	;# 
   652  0696                     	;# 
   653  0697                     	;# 
   654  0698                     	;# 
   655  0699                     	;# 
   656  0711                     	;# 
   657  0712                     	;# 
   658  0713                     	;# 
   659  0714                     	;# 
   660  0715                     	;# 
   661  0716                     	;# 
   662  0717                     	;# 
   663  0718                     	;# 
   664  0719                     	;# 
   665  0891                     	;# 
   666  0891                     	;# 
   667  0891                     	;# 
   668  0891                     	;# 
   669  0891                     	;# 
   670  0891                     	;# 
   671  0892                     	;# 
   672  0892                     	;# 
   673  0892                     	;# 
   674  0893                     	;# 
   675  0893                     	;# 
   676  0893                     	;# 
   677  0893                     	;# 
   678  0893                     	;# 
   679  0893                     	;# 
   680  0894                     	;# 
   681  0894                     	;# 
   682  0894                     	;# 
   683  0895                     	;# 
   684  0895                     	;# 
   685  0895                     	;# 
   686  0896                     	;# 
   687  0896                     	;# 
   688  0896                     	;# 
   689  089B                     	;# 
   690  0911                     	;# 
   691  0912                     	;# 
   692  0913                     	;# 
   693  0914                     	;# 
   694  0915                     	;# 
   695  0916                     	;# 
   696  0918                     	;# 
   697  0919                     	;# 
   698  091A                     	;# 
   699  091B                     	;# 
   700  091C                     	;# 
   701  091D                     	;# 
   702  091E                     	;# 
   703  091F                     	;# 
   704  0E0F                     	;# 
   705  0E10                     	;# 
   706  0E11                     	;# 
   707  0E12                     	;# 
   708  0E13                     	;# 
   709  0E14                     	;# 
   710  0E15                     	;# 
   711  0E16                     	;# 
   712  0E17                     	;# 
   713  0E18                     	;# 
   714  0E19                     	;# 
   715  0E1A                     	;# 
   716  0E1B                     	;# 
   717  0E1C                     	;# 
   718  0E1D                     	;# 
   719  0E1E                     	;# 
   720  0E1F                     	;# 
   721  0E20                     	;# 
   722  0E21                     	;# 
   723  0E22                     	;# 
   724  0E24                     	;# 
   725  0E25                     	;# 
   726  0E28                     	;# 
   727  0E29                     	;# 
   728  0E2A                     	;# 
   729  0E2B                     	;# 
   730  0E2C                     	;# 
   731  0E2D                     	;# 
   732  0E2E                     	;# 
   733  0E2F                     	;# 
   734  0E90                     	;# 
   735  0E91                     	;# 
   736  0E92                     	;# 
   737  0E94                     	;# 
   738  0E95                     	;# 
   739  0EA0                     	;# 
   740  0EA1                     	;# 
   741  0EA2                     	;# 
   742  0EA3                     	;# 
   743  0EA4                     	;# 
   744  0EA5                     	;# 
   745  0F0F                     	;# 
   746  0F10                     	;# 
   747  0F11                     	;# 
   748  0F12                     	;# 
   749  0F13                     	;# 
   750  0F14                     	;# 
   751  0F15                     	;# 
   752  0F16                     	;# 
   753  0F17                     	;# 
   754  0F18                     	;# 
   755  0F19                     	;# 
   756  0F1A                     	;# 
   757  0F1B                     	;# 
   758  0F1C                     	;# 
   759  0F1D                     	;# 
   760  0F1E                     	;# 
   761  0F1F                     	;# 
   762  0F20                     	;# 
   763  0F21                     	;# 
   764  0F22                     	;# 
   765  0F23                     	;# 
   766  0F24                     	;# 
   767  0F25                     	;# 
   768  0F26                     	;# 
   769  0F27                     	;# 
   770  0F28                     	;# 
   771  0F29                     	;# 
   772  0F2A                     	;# 
   773  0F2B                     	;# 
   774  0F2C                     	;# 
   775  0F2D                     	;# 
   776  0F2E                     	;# 
   777  0F2F                     	;# 
   778  0F30                     	;# 
   779  0F31                     	;# 
   780  0F32                     	;# 
   781  0F33                     	;# 
   782  0F34                     	;# 
   783  0F35                     	;# 
   784  0F36                     	;# 
   785  0F37                     	;# 
   786  0FE4                     	;# 
   787  0FE5                     	;# 
   788  0FE6                     	;# 
   789  0FE7                     	;# 
   790  0FE8                     	;# 
   791  0FE9                     	;# 
   792  0FEA                     	;# 
   793  0FEB                     	;# 
   794  0FED                     	;# 
   795  0FEE                     	;# 
   796  0FEF                     	;# 
   797  0000                     	;# 
   798  0001                     	;# 
   799  0002                     	;# 
   800  0003                     	;# 
   801  0004                     	;# 
   802  0005                     	;# 
   803  0006                     	;# 
   804  0007                     	;# 
   805  0008                     	;# 
   806  0009                     	;# 
   807  000A                     	;# 
   808  000B                     	;# 
   809  000C                     	;# 
   810  000E                     	;# 
   811  0010                     	;# 
   812  0011                     	;# 
   813  0012                     	;# 
   814  0013                     	;# 
   815  0014                     	;# 
   816  0015                     	;# 
   817  0015                     	;# 
   818  0016                     	;# 
   819  0016                     	;# 
   820  0017                     	;# 
   821  0018                     	;# 
   822  0019                     	;# 
   823  0019                     	;# 
   824  001A                     	;# 
   825  001B                     	;# 
   826  001C                     	;# 
   827  001D                     	;# 
   828  001E                     	;# 
   829  001F                     	;# 
   830  008C                     	;# 
   831  008E                     	;# 
   832  0090                     	;# 
   833  0091                     	;# 
   834  0092                     	;# 
   835  0093                     	;# 
   836  0094                     	;# 
   837  0097                     	;# 
   838  009B                     	;# 
   839  009B                     	;# 
   840  009C                     	;# 
   841  009D                     	;# 
   842  009E                     	;# 
   843  009F                     	;# 
   844  010C                     	;# 
   845  010E                     	;# 
   846  0111                     	;# 
   847  0112                     	;# 
   848  0113                     	;# 
   849  0114                     	;# 
   850  0115                     	;# 
   851  0116                     	;# 
   852  0117                     	;# 
   853  0118                     	;# 
   854  0119                     	;# 
   855  018C                     	;# 
   856  018E                     	;# 
   857  0199                     	;# 
   858  0199                     	;# 
   859  0199                     	;# 
   860  019A                     	;# 
   861  019A                     	;# 
   862  019A                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019C                     	;# 
   869  019C                     	;# 
   870  019C                     	;# 
   871  019D                     	;# 
   872  019D                     	;# 
   873  019D                     	;# 
   874  019E                     	;# 
   875  019E                     	;# 
   876  019E                     	;# 
   877  019F                     	;# 
   878  019F                     	;# 
   879  019F                     	;# 
   880  019F                     	;# 
   881  019F                     	;# 
   882  020C                     	;# 
   883  020E                     	;# 
   884  0211                     	;# 
   885  0211                     	;# 
   886  0212                     	;# 
   887  0212                     	;# 
   888  0213                     	;# 
   889  0213                     	;# 
   890  0214                     	;# 
   891  0214                     	;# 
   892  0215                     	;# 
   893  0215                     	;# 
   894  0215                     	;# 
   895  0215                     	;# 
   896  0216                     	;# 
   897  0216                     	;# 
   898  0217                     	;# 
   899  0217                     	;# 
   900  0219                     	;# 
   901  021A                     	;# 
   902  021B                     	;# 
   903  021C                     	;# 
   904  021D                     	;# 
   905  021D                     	;# 
   906  021E                     	;# 
   907  021F                     	;# 
   908  028C                     	;# 
   909  028E                     	;# 
   910  0291                     	;# 
   911  0291                     	;# 
   912  0292                     	;# 
   913  0293                     	;# 
   914  0294                     	;# 
   915  0295                     	;# 
   916  0295                     	;# 
   917  0296                     	;# 
   918  0297                     	;# 
   919  0298                     	;# 
   920  029F                     	;# 
   921  030C                     	;# 
   922  030E                     	;# 
   923  0311                     	;# 
   924  0311                     	;# 
   925  0312                     	;# 
   926  0313                     	;# 
   927  0314                     	;# 
   928  0315                     	;# 
   929  0315                     	;# 
   930  0316                     	;# 
   931  0317                     	;# 
   932  0318                     	;# 
   933  038C                     	;# 
   934  038E                     	;# 
   935  0391                     	;# 
   936  0392                     	;# 
   937  0393                     	;# 
   938  0397                     	;# 
   939  0398                     	;# 
   940  0399                     	;# 
   941  039A                     	;# 
   942  039C                     	;# 
   943  039D                     	;# 
   944  039E                     	;# 
   945  039F                     	;# 
   946  0411                     	;# 
   947  0411                     	;# 
   948  0412                     	;# 
   949  0413                     	;# 
   950  0414                     	;# 
   951  0415                     	;# 
   952  0416                     	;# 
   953  0417                     	;# 
   954  0418                     	;# 
   955  0418                     	;# 
   956  0419                     	;# 
   957  041A                     	;# 
   958  041B                     	;# 
   959  041C                     	;# 
   960  041D                     	;# 
   961  041E                     	;# 
   962  041F                     	;# 
   963  0498                     	;# 
   964  0498                     	;# 
   965  0499                     	;# 
   966  049A                     	;# 
   967  049B                     	;# 
   968  049B                     	;# 
   969  049C                     	;# 
   970  049D                     	;# 
   971  049E                     	;# 
   972  049F                     	;# 
   973  0617                     	;# 
   974  0618                     	;# 
   975  0619                     	;# 
   976  0619                     	;# 
   977  061A                     	;# 
   978  061B                     	;# 
   979  061C                     	;# 
   980  061C                     	;# 
   981  061F                     	;# 
   982  0691                     	;# 
   983  0692                     	;# 
   984  0693                     	;# 
   985  0694                     	;# 
   986  0695                     	;# 
   987  0696                     	;# 
   988  0697                     	;# 
   989  0698                     	;# 
   990  0699                     	;# 
   991  0711                     	;# 
   992  0712                     	;# 
   993  0713                     	;# 
   994  0714                     	;# 
   995  0715                     	;# 
   996  0716                     	;# 
   997  0717                     	;# 
   998  0718                     	;# 
   999  0719                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0891                     	;# 
  1003  0891                     	;# 
  1004  0891                     	;# 
  1005  0891                     	;# 
  1006  0892                     	;# 
  1007  0892                     	;# 
  1008  0892                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0893                     	;# 
  1012  0893                     	;# 
  1013  0893                     	;# 
  1014  0893                     	;# 
  1015  0894                     	;# 
  1016  0894                     	;# 
  1017  0894                     	;# 
  1018  0895                     	;# 
  1019  0895                     	;# 
  1020  0895                     	;# 
  1021  0896                     	;# 
  1022  0896                     	;# 
  1023  0896                     	;# 
  1024  089B                     	;# 
  1025  0911                     	;# 
  1026  0912                     	;# 
  1027  0913                     	;# 
  1028  0914                     	;# 
  1029  0915                     	;# 
  1030  0916                     	;# 
  1031  0918                     	;# 
  1032  0919                     	;# 
  1033  091A                     	;# 
  1034  091B                     	;# 
  1035  091C                     	;# 
  1036  091D                     	;# 
  1037  091E                     	;# 
  1038  091F                     	;# 
  1039  0E0F                     	;# 
  1040  0E10                     	;# 
  1041  0E11                     	;# 
  1042  0E12                     	;# 
  1043  0E13                     	;# 
  1044  0E14                     	;# 
  1045  0E15                     	;# 
  1046  0E16                     	;# 
  1047  0E17                     	;# 
  1048  0E18                     	;# 
  1049  0E19                     	;# 
  1050  0E1A                     	;# 
  1051  0E1B                     	;# 
  1052  0E1C                     	;# 
  1053  0E1D                     	;# 
  1054  0E1E                     	;# 
  1055  0E1F                     	;# 
  1056  0E20                     	;# 
  1057  0E21                     	;# 
  1058  0E22                     	;# 
  1059  0E24                     	;# 
  1060  0E25                     	;# 
  1061  0E28                     	;# 
  1062  0E29                     	;# 
  1063  0E2A                     	;# 
  1064  0E2B                     	;# 
  1065  0E2C                     	;# 
  1066  0E2D                     	;# 
  1067  0E2E                     	;# 
  1068  0E2F                     	;# 
  1069  0E90                     	;# 
  1070  0E91                     	;# 
  1071  0E92                     	;# 
  1072  0E94                     	;# 
  1073  0E95                     	;# 
  1074  0EA0                     	;# 
  1075  0EA1                     	;# 
  1076  0EA2                     	;# 
  1077  0EA3                     	;# 
  1078  0EA4                     	;# 
  1079  0EA5                     	;# 
  1080  0F0F                     	;# 
  1081  0F10                     	;# 
  1082  0F11                     	;# 
  1083  0F12                     	;# 
  1084  0F13                     	;# 
  1085  0F14                     	;# 
  1086  0F15                     	;# 
  1087  0F16                     	;# 
  1088  0F17                     	;# 
  1089  0F18                     	;# 
  1090  0F19                     	;# 
  1091  0F1A                     	;# 
  1092  0F1B                     	;# 
  1093  0F1C                     	;# 
  1094  0F1D                     	;# 
  1095  0F1E                     	;# 
  1096  0F1F                     	;# 
  1097  0F20                     	;# 
  1098  0F21                     	;# 
  1099  0F22                     	;# 
  1100  0F23                     	;# 
  1101  0F24                     	;# 
  1102  0F25                     	;# 
  1103  0F26                     	;# 
  1104  0F27                     	;# 
  1105  0F28                     	;# 
  1106  0F29                     	;# 
  1107  0F2A                     	;# 
  1108  0F2B                     	;# 
  1109  0F2C                     	;# 
  1110  0F2D                     	;# 
  1111  0F2E                     	;# 
  1112  0F2F                     	;# 
  1113  0F30                     	;# 
  1114  0F31                     	;# 
  1115  0F32                     	;# 
  1116  0F33                     	;# 
  1117  0F34                     	;# 
  1118  0F35                     	;# 
  1119  0F36                     	;# 
  1120  0F37                     	;# 
  1121  0FE4                     	;# 
  1122  0FE5                     	;# 
  1123  0FE6                     	;# 
  1124  0FE7                     	;# 
  1125  0FE8                     	;# 
  1126  0FE9                     	;# 
  1127  0FEA                     	;# 
  1128  0FEB                     	;# 
  1129  0FED                     	;# 
  1130  0FEE                     	;# 
  1131  0FEF                     	;# 
  1132  0000                     	;# 
  1133  0001                     	;# 
  1134  0002                     	;# 
  1135  0003                     	;# 
  1136  0004                     	;# 
  1137  0005                     	;# 
  1138  0006                     	;# 
  1139  0007                     	;# 
  1140  0008                     	;# 
  1141  0009                     	;# 
  1142  000A                     	;# 
  1143  000B                     	;# 
  1144  000C                     	;# 
  1145  000E                     	;# 
  1146  0010                     	;# 
  1147  0011                     	;# 
  1148  0012                     	;# 
  1149  0013                     	;# 
  1150  0014                     	;# 
  1151  0015                     	;# 
  1152  0015                     	;# 
  1153  0016                     	;# 
  1154  0016                     	;# 
  1155  0017                     	;# 
  1156  0018                     	;# 
  1157  0019                     	;# 
  1158  0019                     	;# 
  1159  001A                     	;# 
  1160  001B                     	;# 
  1161  001C                     	;# 
  1162  001D                     	;# 
  1163  001E                     	;# 
  1164  001F                     	;# 
  1165  008C                     	;# 
  1166  008E                     	;# 
  1167  0090                     	;# 
  1168  0091                     	;# 
  1169  0092                     	;# 
  1170  0093                     	;# 
  1171  0094                     	;# 
  1172  0097                     	;# 
  1173  009B                     	;# 
  1174  009B                     	;# 
  1175  009C                     	;# 
  1176  009D                     	;# 
  1177  009E                     	;# 
  1178  009F                     	;# 
  1179  010C                     	;# 
  1180  010E                     	;# 
  1181  0111                     	;# 
  1182  0112                     	;# 
  1183  0113                     	;# 
  1184  0114                     	;# 
  1185  0115                     	;# 
  1186  0116                     	;# 
  1187  0117                     	;# 
  1188  0118                     	;# 
  1189  0119                     	;# 
  1190  018C                     	;# 
  1191  018E                     	;# 
  1192  0199                     	;# 
  1193  0199                     	;# 
  1194  0199                     	;# 
  1195  019A                     	;# 
  1196  019A                     	;# 
  1197  019A                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019B                     	;# 
  1203  019C                     	;# 
  1204  019C                     	;# 
  1205  019C                     	;# 
  1206  019D                     	;# 
  1207  019D                     	;# 
  1208  019D                     	;# 
  1209  019E                     	;# 
  1210  019E                     	;# 
  1211  019E                     	;# 
  1212  019F                     	;# 
  1213  019F                     	;# 
  1214  019F                     	;# 
  1215  019F                     	;# 
  1216  019F                     	;# 
  1217  020C                     	;# 
  1218  020E                     	;# 
  1219  0211                     	;# 
  1220  0211                     	;# 
  1221  0212                     	;# 
  1222  0212                     	;# 
  1223  0213                     	;# 
  1224  0213                     	;# 
  1225  0214                     	;# 
  1226  0214                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0215                     	;# 
  1230  0215                     	;# 
  1231  0216                     	;# 
  1232  0216                     	;# 
  1233  0217                     	;# 
  1234  0217                     	;# 
  1235  0219                     	;# 
  1236  021A                     	;# 
  1237  021B                     	;# 
  1238  021C                     	;# 
  1239  021D                     	;# 
  1240  021D                     	;# 
  1241  021E                     	;# 
  1242  021F                     	;# 
  1243  028C                     	;# 
  1244  028E                     	;# 
  1245  0291                     	;# 
  1246  0291                     	;# 
  1247  0292                     	;# 
  1248  0293                     	;# 
  1249  0294                     	;# 
  1250  0295                     	;# 
  1251  0295                     	;# 
  1252  0296                     	;# 
  1253  0297                     	;# 
  1254  0298                     	;# 
  1255  029F                     	;# 
  1256  030C                     	;# 
  1257  030E                     	;# 
  1258  0311                     	;# 
  1259  0311                     	;# 
  1260  0312                     	;# 
  1261  0313                     	;# 
  1262  0314                     	;# 
  1263  0315                     	;# 
  1264  0315                     	;# 
  1265  0316                     	;# 
  1266  0317                     	;# 
  1267  0318                     	;# 
  1268  038C                     	;# 
  1269  038E                     	;# 
  1270  0391                     	;# 
  1271  0392                     	;# 
  1272  0393                     	;# 
  1273  0397                     	;# 
  1274  0398                     	;# 
  1275  0399                     	;# 
  1276  039A                     	;# 
  1277  039C                     	;# 
  1278  039D                     	;# 
  1279  039E                     	;# 
  1280  039F                     	;# 
  1281  0411                     	;# 
  1282  0411                     	;# 
  1283  0412                     	;# 
  1284  0413                     	;# 
  1285  0414                     	;# 
  1286  0415                     	;# 
  1287  0416                     	;# 
  1288  0417                     	;# 
  1289  0418                     	;# 
  1290  0418                     	;# 
  1291  0419                     	;# 
  1292  041A                     	;# 
  1293  041B                     	;# 
  1294  041C                     	;# 
  1295  041D                     	;# 
  1296  041E                     	;# 
  1297  041F                     	;# 
  1298  0498                     	;# 
  1299  0498                     	;# 
  1300  0499                     	;# 
  1301  049A                     	;# 
  1302  049B                     	;# 
  1303  049B                     	;# 
  1304  049C                     	;# 
  1305  049D                     	;# 
  1306  049E                     	;# 
  1307  049F                     	;# 
  1308  0617                     	;# 
  1309  0618                     	;# 
  1310  0619                     	;# 
  1311  0619                     	;# 
  1312  061A                     	;# 
  1313  061B                     	;# 
  1314  061C                     	;# 
  1315  061C                     	;# 
  1316  061F                     	;# 
  1317  0691                     	;# 
  1318  0692                     	;# 
  1319  0693                     	;# 
  1320  0694                     	;# 
  1321  0695                     	;# 
  1322  0696                     	;# 
  1323  0697                     	;# 
  1324  0698                     	;# 
  1325  0699                     	;# 
  1326  0711                     	;# 
  1327  0712                     	;# 
  1328  0713                     	;# 
  1329  0714                     	;# 
  1330  0715                     	;# 
  1331  0716                     	;# 
  1332  0717                     	;# 
  1333  0718                     	;# 
  1334  0719                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0891                     	;# 
  1338  0891                     	;# 
  1339  0891                     	;# 
  1340  0891                     	;# 
  1341  0892                     	;# 
  1342  0892                     	;# 
  1343  0892                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0893                     	;# 
  1347  0893                     	;# 
  1348  0893                     	;# 
  1349  0893                     	;# 
  1350  0894                     	;# 
  1351  0894                     	;# 
  1352  0894                     	;# 
  1353  0895                     	;# 
  1354  0895                     	;# 
  1355  0895                     	;# 
  1356  0896                     	;# 
  1357  0896                     	;# 
  1358  0896                     	;# 
  1359  089B                     	;# 
  1360  0911                     	;# 
  1361  0912                     	;# 
  1362  0913                     	;# 
  1363  0914                     	;# 
  1364  0915                     	;# 
  1365  0916                     	;# 
  1366  0918                     	;# 
  1367  0919                     	;# 
  1368  091A                     	;# 
  1369  091B                     	;# 
  1370  091C                     	;# 
  1371  091D                     	;# 
  1372  091E                     	;# 
  1373  091F                     	;# 
  1374  0E0F                     	;# 
  1375  0E10                     	;# 
  1376  0E11                     	;# 
  1377  0E12                     	;# 
  1378  0E13                     	;# 
  1379  0E14                     	;# 
  1380  0E15                     	;# 
  1381  0E16                     	;# 
  1382  0E17                     	;# 
  1383  0E18                     	;# 
  1384  0E19                     	;# 
  1385  0E1A                     	;# 
  1386  0E1B                     	;# 
  1387  0E1C                     	;# 
  1388  0E1D                     	;# 
  1389  0E1E                     	;# 
  1390  0E1F                     	;# 
  1391  0E20                     	;# 
  1392  0E21                     	;# 
  1393  0E22                     	;# 
  1394  0E24                     	;# 
  1395  0E25                     	;# 
  1396  0E28                     	;# 
  1397  0E29                     	;# 
  1398  0E2A                     	;# 
  1399  0E2B                     	;# 
  1400  0E2C                     	;# 
  1401  0E2D                     	;# 
  1402  0E2E                     	;# 
  1403  0E2F                     	;# 
  1404  0E90                     	;# 
  1405  0E91                     	;# 
  1406  0E92                     	;# 
  1407  0E94                     	;# 
  1408  0E95                     	;# 
  1409  0EA0                     	;# 
  1410  0EA1                     	;# 
  1411  0EA2                     	;# 
  1412  0EA3                     	;# 
  1413  0EA4                     	;# 
  1414  0EA5                     	;# 
  1415  0F0F                     	;# 
  1416  0F10                     	;# 
  1417  0F11                     	;# 
  1418  0F12                     	;# 
  1419  0F13                     	;# 
  1420  0F14                     	;# 
  1421  0F15                     	;# 
  1422  0F16                     	;# 
  1423  0F17                     	;# 
  1424  0F18                     	;# 
  1425  0F19                     	;# 
  1426  0F1A                     	;# 
  1427  0F1B                     	;# 
  1428  0F1C                     	;# 
  1429  0F1D                     	;# 
  1430  0F1E                     	;# 
  1431  0F1F                     	;# 
  1432  0F20                     	;# 
  1433  0F21                     	;# 
  1434  0F22                     	;# 
  1435  0F23                     	;# 
  1436  0F24                     	;# 
  1437  0F25                     	;# 
  1438  0F26                     	;# 
  1439  0F27                     	;# 
  1440  0F28                     	;# 
  1441  0F29                     	;# 
  1442  0F2A                     	;# 
  1443  0F2B                     	;# 
  1444  0F2C                     	;# 
  1445  0F2D                     	;# 
  1446  0F2E                     	;# 
  1447  0F2F                     	;# 
  1448  0F30                     	;# 
  1449  0F31                     	;# 
  1450  0F32                     	;# 
  1451  0F33                     	;# 
  1452  0F34                     	;# 
  1453  0F35                     	;# 
  1454  0F36                     	;# 
  1455  0F37                     	;# 
  1456  0FE4                     	;# 
  1457  0FE5                     	;# 
  1458  0FE6                     	;# 
  1459  0FE7                     	;# 
  1460  0FE8                     	;# 
  1461  0FE9                     	;# 
  1462  0FEA                     	;# 
  1463  0FEB                     	;# 
  1464  0FED                     	;# 
  1465  0FEE                     	;# 
  1466  0FEF                     	;# 
  1467  0000                     	;# 
  1468  0001                     	;# 
  1469  0002                     	;# 
  1470  0003                     	;# 
  1471  0004                     	;# 
  1472  0005                     	;# 
  1473  0006                     	;# 
  1474  0007                     	;# 
  1475  0008                     	;# 
  1476  0009                     	;# 
  1477  000A                     	;# 
  1478  000B                     	;# 
  1479  000C                     	;# 
  1480  000E                     	;# 
  1481  0010                     	;# 
  1482  0011                     	;# 
  1483  0012                     	;# 
  1484  0013                     	;# 
  1485  0014                     	;# 
  1486  0015                     	;# 
  1487  0015                     	;# 
  1488  0016                     	;# 
  1489  0016                     	;# 
  1490  0017                     	;# 
  1491  0018                     	;# 
  1492  0019                     	;# 
  1493  0019                     	;# 
  1494  001A                     	;# 
  1495  001B                     	;# 
  1496  001C                     	;# 
  1497  001D                     	;# 
  1498  001E                     	;# 
  1499  001F                     	;# 
  1500  008C                     	;# 
  1501  008E                     	;# 
  1502  0090                     	;# 
  1503  0091                     	;# 
  1504  0092                     	;# 
  1505  0093                     	;# 
  1506  0094                     	;# 
  1507  0097                     	;# 
  1508  009B                     	;# 
  1509  009B                     	;# 
  1510  009C                     	;# 
  1511  009D                     	;# 
  1512  009E                     	;# 
  1513  009F                     	;# 
  1514  010C                     	;# 
  1515  010E                     	;# 
  1516  0111                     	;# 
  1517  0112                     	;# 
  1518  0113                     	;# 
  1519  0114                     	;# 
  1520  0115                     	;# 
  1521  0116                     	;# 
  1522  0117                     	;# 
  1523  0118                     	;# 
  1524  0119                     	;# 
  1525  018C                     	;# 
  1526  018E                     	;# 
  1527  0199                     	;# 
  1528  0199                     	;# 
  1529  0199                     	;# 
  1530  019A                     	;# 
  1531  019A                     	;# 
  1532  019A                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019B                     	;# 
  1538  019C                     	;# 
  1539  019C                     	;# 
  1540  019C                     	;# 
  1541  019D                     	;# 
  1542  019D                     	;# 
  1543  019D                     	;# 
  1544  019E                     	;# 
  1545  019E                     	;# 
  1546  019E                     	;# 
  1547  019F                     	;# 
  1548  019F                     	;# 
  1549  019F                     	;# 
  1550  019F                     	;# 
  1551  019F                     	;# 
  1552  020C                     	;# 
  1553  020E                     	;# 
  1554  0211                     	;# 
  1555  0211                     	;# 
  1556  0212                     	;# 
  1557  0212                     	;# 
  1558  0213                     	;# 
  1559  0213                     	;# 
  1560  0214                     	;# 
  1561  0214                     	;# 
  1562  0215                     	;# 
  1563  0215                     	;# 
  1564  0215                     	;# 
  1565  0215                     	;# 
  1566  0216                     	;# 
  1567  0216                     	;# 
  1568  0217                     	;# 
  1569  0217                     	;# 
  1570  0219                     	;# 
  1571  021A                     	;# 
  1572  021B                     	;# 
  1573  021C                     	;# 
  1574  021D                     	;# 
  1575  021D                     	;# 
  1576  021E                     	;# 
  1577  021F                     	;# 
  1578  028C                     	;# 
  1579  028E                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0294                     	;# 
  1585  0295                     	;# 
  1586  0295                     	;# 
  1587  0296                     	;# 
  1588  0297                     	;# 
  1589  0298                     	;# 
  1590  029F                     	;# 
  1591  030C                     	;# 
  1592  030E                     	;# 
  1593  0311                     	;# 
  1594  0311                     	;# 
  1595  0312                     	;# 
  1596  0313                     	;# 
  1597  0314                     	;# 
  1598  0315                     	;# 
  1599  0315                     	;# 
  1600  0316                     	;# 
  1601  0317                     	;# 
  1602  0318                     	;# 
  1603  038C                     	;# 
  1604  038E                     	;# 
  1605  0391                     	;# 
  1606  0392                     	;# 
  1607  0393                     	;# 
  1608  0397                     	;# 
  1609  0398                     	;# 
  1610  0399                     	;# 
  1611  039A                     	;# 
  1612  039C                     	;# 
  1613  039D                     	;# 
  1614  039E                     	;# 
  1615  039F                     	;# 
  1616  0411                     	;# 
  1617  0411                     	;# 
  1618  0412                     	;# 
  1619  0413                     	;# 
  1620  0414                     	;# 
  1621  0415                     	;# 
  1622  0416                     	;# 
  1623  0417                     	;# 
  1624  0418                     	;# 
  1625  0418                     	;# 
  1626  0419                     	;# 
  1627  041A                     	;# 
  1628  041B                     	;# 
  1629  041C                     	;# 
  1630  041D                     	;# 
  1631  041E                     	;# 
  1632  041F                     	;# 
  1633  0498                     	;# 
  1634  0498                     	;# 
  1635  0499                     	;# 
  1636  049A                     	;# 
  1637  049B                     	;# 
  1638  049B                     	;# 
  1639  049C                     	;# 
  1640  049D                     	;# 
  1641  049E                     	;# 
  1642  049F                     	;# 
  1643  0617                     	;# 
  1644  0618                     	;# 
  1645  0619                     	;# 
  1646  0619                     	;# 
  1647  061A                     	;# 
  1648  061B                     	;# 
  1649  061C                     	;# 
  1650  061C                     	;# 
  1651  061F                     	;# 
  1652  0691                     	;# 
  1653  0692                     	;# 
  1654  0693                     	;# 
  1655  0694                     	;# 
  1656  0695                     	;# 
  1657  0696                     	;# 
  1658  0697                     	;# 
  1659  0698                     	;# 
  1660  0699                     	;# 
  1661  0711                     	;# 
  1662  0712                     	;# 
  1663  0713                     	;# 
  1664  0714                     	;# 
  1665  0715                     	;# 
  1666  0716                     	;# 
  1667  0717                     	;# 
  1668  0718                     	;# 
  1669  0719                     	;# 
  1670  0891                     	;# 
  1671  0891                     	;# 
  1672  0891                     	;# 
  1673  0891                     	;# 
  1674  0891                     	;# 
  1675  0891                     	;# 
  1676  0892                     	;# 
  1677  0892                     	;# 
  1678  0892                     	;# 
  1679  0893                     	;# 
  1680  0893                     	;# 
  1681  0893                     	;# 
  1682  0893                     	;# 
  1683  0893                     	;# 
  1684  0893                     	;# 
  1685  0894                     	;# 
  1686  0894                     	;# 
  1687  0894                     	;# 
  1688  0895                     	;# 
  1689  0895                     	;# 
  1690  0895                     	;# 
  1691  0896                     	;# 
  1692  0896                     	;# 
  1693  0896                     	;# 
  1694  089B                     	;# 
  1695  0911                     	;# 
  1696  0912                     	;# 
  1697  0913                     	;# 
  1698  0914                     	;# 
  1699  0915                     	;# 
  1700  0916                     	;# 
  1701  0918                     	;# 
  1702  0919                     	;# 
  1703  091A                     	;# 
  1704  091B                     	;# 
  1705  091C                     	;# 
  1706  091D                     	;# 
  1707  091E                     	;# 
  1708  091F                     	;# 
  1709  0E0F                     	;# 
  1710  0E10                     	;# 
  1711  0E11                     	;# 
  1712  0E12                     	;# 
  1713  0E13                     	;# 
  1714  0E14                     	;# 
  1715  0E15                     	;# 
  1716  0E16                     	;# 
  1717  0E17                     	;# 
  1718  0E18                     	;# 
  1719  0E19                     	;# 
  1720  0E1A                     	;# 
  1721  0E1B                     	;# 
  1722  0E1C                     	;# 
  1723  0E1D                     	;# 
  1724  0E1E                     	;# 
  1725  0E1F                     	;# 
  1726  0E20                     	;# 
  1727  0E21                     	;# 
  1728  0E22                     	;# 
  1729  0E24                     	;# 
  1730  0E25                     	;# 
  1731  0E28                     	;# 
  1732  0E29                     	;# 
  1733  0E2A                     	;# 
  1734  0E2B                     	;# 
  1735  0E2C                     	;# 
  1736  0E2D                     	;# 
  1737  0E2E                     	;# 
  1738  0E2F                     	;# 
  1739  0E90                     	;# 
  1740  0E91                     	;# 
  1741  0E92                     	;# 
  1742  0E94                     	;# 
  1743  0E95                     	;# 
  1744  0EA0                     	;# 
  1745  0EA1                     	;# 
  1746  0EA2                     	;# 
  1747  0EA3                     	;# 
  1748  0EA4                     	;# 
  1749  0EA5                     	;# 
  1750  0F0F                     	;# 
  1751  0F10                     	;# 
  1752  0F11                     	;# 
  1753  0F12                     	;# 
  1754  0F13                     	;# 
  1755  0F14                     	;# 
  1756  0F15                     	;# 
  1757  0F16                     	;# 
  1758  0F17                     	;# 
  1759  0F18                     	;# 
  1760  0F19                     	;# 
  1761  0F1A                     	;# 
  1762  0F1B                     	;# 
  1763  0F1C                     	;# 
  1764  0F1D                     	;# 
  1765  0F1E                     	;# 
  1766  0F1F                     	;# 
  1767  0F20                     	;# 
  1768  0F21                     	;# 
  1769  0F22                     	;# 
  1770  0F23                     	;# 
  1771  0F24                     	;# 
  1772  0F25                     	;# 
  1773  0F26                     	;# 
  1774  0F27                     	;# 
  1775  0F28                     	;# 
  1776  0F29                     	;# 
  1777  0F2A                     	;# 
  1778  0F2B                     	;# 
  1779  0F2C                     	;# 
  1780  0F2D                     	;# 
  1781  0F2E                     	;# 
  1782  0F2F                     	;# 
  1783  0F30                     	;# 
  1784  0F31                     	;# 
  1785  0F32                     	;# 
  1786  0F33                     	;# 
  1787  0F34                     	;# 
  1788  0F35                     	;# 
  1789  0F36                     	;# 
  1790  0F37                     	;# 
  1791  0FE4                     	;# 
  1792  0FE5                     	;# 
  1793  0FE6                     	;# 
  1794  0FE7                     	;# 
  1795  0FE8                     	;# 
  1796  0FE9                     	;# 
  1797  0FEA                     	;# 
  1798  0FEB                     	;# 
  1799  0FED                     	;# 
  1800  0FEE                     	;# 
  1801  0FEF                     	;# 
  1802                           
  1803                           	psect	idataBANK1
  1804  0003                     __pidataBANK1:	
  1805                           
  1806                           ;initializer for _romData
  1807  0003  3420               	retlw	low (_romDataMap| (0+512))
  1808                           
  1809                           	psect	stringtext1
  1810  1800                     __pstringtext1:	
  1811  1800                     _dpowers:	
  1812  1800  3401               	retlw	1
  1813  1801  3400               	retlw	0
  1814  1802  3400               	retlw	0
  1815  1803  3400               	retlw	0
  1816  1804  340A               	retlw	10
  1817  1805  3400               	retlw	0
  1818  1806  3400               	retlw	0
  1819  1807  3400               	retlw	0
  1820  1808  3464               	retlw	100
  1821  1809  3400               	retlw	0
  1822  180A  3400               	retlw	0
  1823  180B  3400               	retlw	0
  1824  180C  34E8               	retlw	232
  1825  180D  3403               	retlw	3
  1826  180E  3400               	retlw	0
  1827  180F  3400               	retlw	0
  1828  1810  3410               	retlw	16
  1829  1811  3427               	retlw	39
  1830  1812  3400               	retlw	0
  1831  1813  3400               	retlw	0
  1832  1814  34A0               	retlw	160
  1833  1815  3486               	retlw	134
  1834  1816  3401               	retlw	1
  1835  1817  3400               	retlw	0
  1836  1818  3440               	retlw	64
  1837  1819  3442               	retlw	66
  1838  181A  340F               	retlw	15
  1839  181B  3400               	retlw	0
  1840  181C  3480               	retlw	128
  1841  181D  3496               	retlw	150
  1842  181E  3498               	retlw	152
  1843  181F  3400               	retlw	0
  1844  1820  3400               	retlw	0
  1845  1821  34E1               	retlw	225
  1846  1822  34F5               	retlw	245
  1847  1823  3405               	retlw	5
  1848  1824  3400               	retlw	0
  1849  1825  34CA               	retlw	202
  1850  1826  349A               	retlw	154
  1851  1827  343B               	retlw	59
  1852  1828                     __end_of_dpowers:	
  1853                           
  1854                           	psect	stringtext2
  1855  1834                     __pstringtext2:	
  1856  1834                     _statuses:	
  1857  1834  3400               	retlw	0
  1858  1835  3401               	retlw	1
  1859  1836  3402               	retlw	2
  1860  1837  3403               	retlw	3
  1861  1838  3400               	retlw	0
  1862  1839  3401               	retlw	1
  1863  183A  3402               	retlw	2
  1864  183B  3403               	retlw	3
  1865  183C  3404               	retlw	4
  1866  183D  3405               	retlw	5
  1867  183E                     __end_of_statuses:	
  1868                           
  1869                           	psect	stringtext3
  1870  184B                     __pstringtext3:	
  1871  184B                     _n_ADDRESS_P0:	
  1872  184B  34AD               	retlw	173
  1873  184C  3487               	retlw	135
  1874  184D  3466               	retlw	102
  1875  184E  34BC               	retlw	188
  1876  184F  34BB               	retlw	187
  1877  1850                     __end_of_n_ADDRESS_P0:	
  1878                           
  1879                           	psect	stringtext4
  1880  1828                     __pstringtext4:	
  1881  1828                     _n_ADDRESS_MUL:	
  1882  1828  3421               	retlw	33
  1883  1829                     __end_of_n_ADDRESS_MUL:	
  1884  000B                     _INTCONbits	set	11
  1885  0010                     _PIR0bits	set	16
  1886  000E                     _PORTCbits	set	14
  1887  000C                     _PORTAbits	set	12
  1888  009E                     _ADCON1bits	set	158
  1889  009C                     _ADRESH	set	156
  1890  009B                     _ADRESL	set	155
  1891  009D                     _ADCON0bits	set	157
  1892  0097                     _WDTCONbits	set	151
  1893  0090                     _PIE0bits	set	144
  1894  008E                     _TRISCbits	set	142
  1895  008C                     _TRISAbits	set	140
  1896  0117                     _FVRCONbits	set	279
  1897  018E                     _ANSELCbits	set	398
  1898  018C                     _ANSELAbits	set	396
  1899  018E                     _ANSELC	set	398
  1900  018C                     _ANSELA	set	396
  1901  020C                     _WPUAbits	set	524
  1902  020E                     _WPUC	set	526
  1903  020C                     _WPUA	set	524
  1904  0211                     _SSP1BUF	set	529
  1905  0214                     _SSP1STATbits	set	532
  1906  0215                     _SSP1CON1bits	set	533
  1907  028C                     _ODCONAbits	set	652
  1908  028E                     _ODCONC	set	654
  1909  028C                     _ODCONA	set	652
  1910  038E                     _INLVLC	set	910
  1911  038C                     _INLVLA	set	908
  1912  0919                     _OSCCON1bits	set	2329
  1913  0EA0                     _RC0PPSbits	set	3744
  1914  0EA2                     _RC2PPSbits	set	3746
  1915  0EA1                     _RC1PPSbits	set	3745
  1916  1829                     STR_14:	
  1917  1829  3425               	retlw	37	;'%'
  1918  182A  346C               	retlw	108	;'l'
  1919  182B  3475               	retlw	117	;'u'
  1920  182C  342E               	retlw	46	;'.'
  1921  182D  3425               	retlw	37	;'%'
  1922  182E  3436               	retlw	54	;'6'
  1923  182F  342E               	retlw	46	;'.'
  1924  1830  3436               	retlw	54	;'6'
  1925  1831  346C               	retlw	108	;'l'
  1926  1832  3475               	retlw	117	;'u'
  1927  1833  3400               	retlw	0
  1928                           
  1929                           	psect	stringtext5
  1930  183E                     __pstringtext5:	
  1931  183E                     STR_6:	
  1932  183E  3441               	retlw	65	;'A'
  1933  183F  344E               	retlw	78	;'N'
  1934  1840  3443               	retlw	67	;'C'
  1935  1841  3433               	retlw	51	;'3'
  1936  1842  346D               	retlw	109	;'m'
  1937  1843  3456               	retlw	86	;'V'
  1938  1844  3400               	retlw	0
  1939                           
  1940                           	psect	stringtext6
  1941  1845                     __pstringtext6:	
  1942  1845                     STR_10:	
  1943  1845  3452               	retlw	82	;'R'
  1944  1846  3446               	retlw	70	;'F'
  1945  1847  3450               	retlw	80	;'P'
  1946  1848  3457               	retlw	87	;'W'
  1947  1849  3452               	retlw	82	;'R'
  1948  184A  3400               	retlw	0
  1949                           
  1950                           	psect	stringtext7
  1951  1850                     __pstringtext7:	
  1952  1850                     STR_3:	
  1953  1850  3444               	retlw	68	;'D'
  1954  1851  3442               	retlw	66	;'B'
  1955  1852  3447               	retlw	71	;'G'
  1956  1853  3431               	retlw	49	;'1'
  1957  1854  3400               	retlw	0
  1958                           
  1959                           	psect	stringtext8
  1960  1855                     __pstringtext8:	
  1961  1855                     STR_5:	
  1962  1855  3444               	retlw	68	;'D'
  1963  1856  3442               	retlw	66	;'B'
  1964  1857  3447               	retlw	71	;'G'
  1965  1858  3432               	retlw	50	;'2'
  1966  1859  3400               	retlw	0
  1967                           
  1968                           	psect	stringtext9
  1969  185A                     __pstringtext9:	
  1970  185A                     STR_7:	
  1971  185A  3444               	retlw	68	;'D'
  1972  185B  3442               	retlw	66	;'B'
  1973  185C  3447               	retlw	71	;'G'
  1974  185D  3433               	retlw	51	;'3'
  1975  185E  3400               	retlw	0
  1976                           
  1977                           	psect	stringtext10
  1978  185F                     __pstringtext10:	
  1979  185F                     STR_9:	
  1980  185F  3444               	retlw	68	;'D'
  1981  1860  3442               	retlw	66	;'B'
  1982  1861  3447               	retlw	71	;'G'
  1983  1862  3434               	retlw	52	;'4'
  1984  1863  3400               	retlw	0
  1985                           
  1986                           	psect	stringtext11
  1987  1864                     __pstringtext11:	
  1988  1864                     STR_11:	
  1989  1864  3444               	retlw	68	;'D'
  1990  1865  3442               	retlw	66	;'B'
  1991  1866  3447               	retlw	71	;'G'
  1992  1867  3435               	retlw	53	;'5'
  1993  1868  3400               	retlw	0
  1994                           
  1995                           	psect	stringtext12
  1996  1869                     __pstringtext12:	
  1997  1869                     STR_8:	
  1998  1869  3454               	retlw	84	;'T'
  1999  186A  3445               	retlw	69	;'E'
  2000  186B  344D               	retlw	77	;'M'
  2001  186C  3450               	retlw	80	;'P'
  2002  186D  3400               	retlw	0
  2003                           
  2004                           	psect	stringtext13
  2005  186E                     __pstringtext13:	
  2006  186E                     STR_4:	
  2007  186E  3456               	retlw	86	;'V'
  2008  186F  3442               	retlw	66	;'B'
  2009  1870  3441               	retlw	65	;'A'
  2010  1871  3454               	retlw	84	;'T'
  2011  1872  3400               	retlw	0
  2012                           
  2013                           	psect	stringtext14
  2014  1873                     __pstringtext14:	
  2015  1873                     STR_13:	
  2016  1873  3442               	retlw	66	;'B'
  2017  1874  344F               	retlw	79	;'O'
  2018  1875  344F               	retlw	79	;'O'
  2019  1876  3454               	retlw	84	;'T'
  2020  1877  3400               	retlw	0
  2021                           
  2022                           	psect	stringtext15
  2023  1878                     __pstringtext15:	
  2024  1878                     STR_12:	
  2025  1878  3455               	retlw	85	;'U'
  2026  1879  3457               	retlw	87	;'W'
  2027  187A  3454               	retlw	84	;'T'
  2028  187B  3400               	retlw	0
  2029                           
  2030                           	psect	stringtext16
  2031  187C                     __pstringtext16:	
  2032  187C                     STR_1:	
  2033  187C  342F               	retlw	47	;'/'
  2034  187D  3400               	retlw	0
  2035                           
  2036                           	psect	stringtext17
  2037  0000                     __pstringtext17:	
  2038  187C                     
  2039                           ; #config settings
  2040  0000                     
  2041                           	psect	cinit
  2042  0011                     start_initialization:	
  2043  0011                     __initialization:	
  2044                           
  2045                           ; Initialize objects allocated to BANK1
  2046  0011  0021               	movlb	1	; select bank1
  2047  0012  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  2048  0015  00EB               	movwf	__pdataBANK1& (0+127)
  2049                           
  2050                           ; Clear objects allocated to COMMON
  2051  0016  01FD               	clrf	__pbssCOMMON& (0+127)
  2052                           
  2053                           ; Clear objects allocated to BANK1
  2054  0017  01E7               	clrf	__pbssBANK1& (0+127)
  2055  0018  01E8               	clrf	(__pbssBANK1+1)& (0+127)
  2056  0019  01E9               	clrf	(__pbssBANK1+2)& (0+127)
  2057  001A  01EA               	clrf	(__pbssBANK1+3)& (0+127)
  2058                           
  2059                           ; Clear objects allocated to BANK2
  2060  001B  3051               	movlw	low __pbssBANK2
  2061  001C  0084               	movwf	4
  2062  001D  3001               	movlw	high __pbssBANK2
  2063  001E  0085               	movwf	5
  2064  001F  3015               	movlw	21
  2065  0020  3194  2470  3180   	fcall	clear_ram0
  2066                           
  2067                           ; Clear objects allocated to BANK3
  2068  0023  30A0               	movlw	low __pbssBANK3
  2069  0024  0084               	movwf	4
  2070  0025  3001               	movlw	high __pbssBANK3
  2071  0026  0085               	movwf	5
  2072  0027  3042               	movlw	66
  2073  0028  3194  2470  3180   	fcall	clear_ram0
  2074                           
  2075                           ; Clear objects allocated to BANK4
  2076  002B  3020               	movlw	low __pbssBANK4
  2077  002C  0084               	movwf	4
  2078  002D  3002               	movlw	high __pbssBANK4
  2079  002E  0085               	movwf	5
  2080  002F  301C               	movlw	28
  2081  0030  3194  2470         	fcall	clear_ram0
  2082  0032                     end_of_initialization:	
  2083                           ;End of C runtime variable initialization code
  2084                           
  2085  0032                     __end_of__initialization:	
  2086  0032  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2087  0033  0020               	movlb	0
  2088  0034  318A  2ABB         	ljmp	_main	;jump to C main() function
  2089                           
  2090                           	psect	bssCOMMON
  2091  007D                     __pbssCOMMON:	
  2092  007D                     _sleepLoop:	
  2093  007D                     	ds	1
  2094                           
  2095                           	psect	bssBANK1
  2096  00E7                     __pbssBANK1:	
  2097  00E7                     _status:	
  2098  00E7                     	ds	4
  2099                           
  2100                           	psect	dataBANK1
  2101  00EB                     __pdataBANK1:	
  2102  00EB                     _romData:	
  2103  00EB                     	ds	1
  2104                           
  2105                           	psect	bssBANK2
  2106  0151                     __pbssBANK2:	
  2107  0151                     _counter:	
  2108  0151                     	ds	4
  2109  0155                     ftoa@buf:	
  2110  0155                     	ds	17
  2111                           
  2112                           	psect	bssBANK3
  2113  01A0                     __pbssBANK3:	
  2114  01A0                     _RXPacket:	
  2115  01A0                     	ds	33
  2116  01C1                     _TXPacket:	
  2117  01C1                     	ds	33
  2118                           
  2119                           	psect	bssBANK4
  2120  0220                     __pbssBANK4:	
  2121  0220                     _romDataMap:	
  2122  0220                     	ds	28
  2123                           
  2124                           	psect	clrtext
  2125  1470                     clear_ram0:	
  2126                           ;	Called with FSR0 containing the base address, and
  2127                           ;	WREG with the size to clear
  2128                           
  2129  1470  0064               	clrwdt	;clear the watchdog before getting into this loop
  2130  1471                     clrloop0:	
  2131  1471  0180               	clrf	0	;clear RAM location pointed to by FSR
  2132  1472  3101               	addfsr 0,1
  2133  1473  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2134  1474  2C71               	goto	clrloop0	;have we reached the end yet?
  2135  1475  3400               	retlw	0	;all done for this memory range, return
  2136                           
  2137                           	psect	cstackBANK2
  2138  0120                     __pcstackBANK2:	
  2139  0120                     loop@vt:	
  2140                           
  2141                           ; 3 bytes @ 0x0
  2142  0120                     	ds	3
  2143  0123                     loop@ta:	
  2144                           
  2145                           ; 3 bytes @ 0x3
  2146  0123                     	ds	3
  2147  0126                     _loop$1963:	
  2148                           
  2149                           ; 3 bytes @ 0x6
  2150  0126                     	ds	3
  2151  0129                     _loop$1964:	
  2152                           
  2153                           ; 3 bytes @ 0x9
  2154  0129                     	ds	3
  2155  012C                     loop@rfSetup:	
  2156                           
  2157                           ; 1 bytes @ 0xC
  2158  012C                     	ds	1
  2159  012D                     _loop$1962:	
  2160                           
  2161                           ; 3 bytes @ 0xD
  2162  012D                     	ds	3
  2163  0130                     loop@packet:	
  2164                           
  2165                           ; 33 bytes @ 0x10
  2166  0130                     	ds	33
  2167                           
  2168                           	psect	cstackBANK1
  2169  00A0                     __pcstackBANK1:	
  2170  00A0                     ___fttol@sign1:	
  2171                           
  2172                           ; 1 bytes @ 0x0
  2173  00A0                     	ds	1
  2174  00A1                     ___fttol@lval:	
  2175                           
  2176                           ; 4 bytes @ 0x1
  2177  00A1                     	ds	4
  2178  00A5                     ___fttol@exp1:	
  2179                           
  2180                           ; 1 bytes @ 0x5
  2181  00A5                     	ds	1
  2182  00A6                     ?_ftoa:	
  2183  00A6                     ftoa@f:	
  2184                           ; 1 bytes @ 0x6
  2185                           
  2186                           
  2187                           ; 3 bytes @ 0x6
  2188  00A6                     	ds	3
  2189  00A9                     ftoa@status:	
  2190                           
  2191                           ; 1 bytes @ 0x9
  2192  00A9                     	ds	1
  2193  00AA                     ftoa@rem:	
  2194                           
  2195                           ; 4 bytes @ 0xA
  2196  00AA                     	ds	4
  2197  00AE                     ftoa@l:	
  2198                           
  2199                           ; 4 bytes @ 0xE
  2200  00AE                     	ds	4
  2201  00B2                     ftoa@cp:	
  2202                           
  2203                           ; 1 bytes @ 0x12
  2204  00B2                     	ds	1
  2205  00B3                     ?_strcat:	
  2206  00B3                     strcat@to:	
  2207                           ; 2 bytes @ 0x13
  2208                           
  2209                           
  2210                           ; 2 bytes @ 0x13
  2211  00B3                     	ds	2
  2212  00B5                     strcat@from:	
  2213                           
  2214                           ; 2 bytes @ 0x15
  2215  00B5                     	ds	2
  2216  00B7                     strcat@cp:	
  2217                           
  2218                           ; 2 bytes @ 0x17
  2219  00B7                     	ds	2
  2220  00B9                     ?_sendMessage:	
  2221  00B9                     sendMessage@packet:	
  2222                           ; 1 bytes @ 0x19
  2223                           
  2224                           
  2225                           ; 2 bytes @ 0x19
  2226  00B9                     	ds	2
  2227  00BB                     sendMessage@topic:	
  2228                           
  2229                           ; 2 bytes @ 0x1B
  2230  00BB                     	ds	2
  2231  00BD                     sendMessage@value:	
  2232                           
  2233                           ; 3 bytes @ 0x1D
  2234  00BD                     	ds	3
  2235  00C0                     ??_sendMessage:	
  2236                           
  2237                           ; 1 bytes @ 0x20
  2238  00C0                     	ds	1
  2239  00C1                     sendMessage@status:	
  2240                           
  2241                           ; 2 bytes @ 0x21
  2242  00C1                     	ds	2
  2243  00C3                     ??_loop:	
  2244                           
  2245                           ; 1 bytes @ 0x23
  2246  00C3                     	ds	1
  2247  00C4                     ??_main:	
  2248                           
  2249                           ; 1 bytes @ 0x24
  2250  00C4                     	ds	1
  2251  00C5                     main@pipe:	
  2252                           
  2253                           ; 1 bytes @ 0x25
  2254  00C5                     	ds	1
  2255  00C6                     main@packet:	
  2256                           
  2257                           ; 33 bytes @ 0x26
  2258  00C6                     	ds	33
  2259                           
  2260                           	psect	cstackCOMMON
  2261  0070                     __pcstackCOMMON:	
  2262  0070                     ?_isdigit:	
  2263  0070                     ?_nrf24l01ISR:	
  2264                           ; 1 bit 
  2265                           
  2266  0070                     ?_nrf24l01Init:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0070                     ?_nrf24l01SetTXPipe:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0070                     ?_nrf24l01Service:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0070                     ?_nrf24l01CELow:	
  2276                           ; 1 bytes @ 0x0
  2277                           
  2278  0070                     ??_nrf24l01CELow:	
  2279                           ; 1 bytes @ 0x0
  2280                           
  2281  0070                     ?_nrf24l01CEHigh:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  0070                     ??_nrf24l01CEHigh:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  0070                     ?_nrf24l01CSLow:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0070                     ??_nrf24l01CSLow:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0070                     ?_nrf24l01CSHigh:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0070                     ??_nrf24l01CSHigh:	
  2297                           ; 1 bytes @ 0x0
  2298                           
  2299  0070                     ?_nrf24l01InterfaceInit:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0070                     ?_nrf24l01SPISend:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0070                     ??_nrf24l01SPISend:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0070                     ?_nrf24l01SPIStart:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0070                     ??_nrf24l01SPIStart:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0070                     ?_nrf24l01SPIEnd:	
  2315                           ; 1 bytes @ 0x0
  2316                           
  2317  0070                     ??_nrf24l01SPIEnd:	
  2318                           ; 1 bytes @ 0x0
  2319                           
  2320  0070                     ?_enableInterrupts:	
  2321                           ; 1 bytes @ 0x0
  2322                           
  2323  0070                     ??_enableInterrupts:	
  2324                           ; 1 bytes @ 0x0
  2325                           
  2326  0070                     ?_ISR:	
  2327                           ; 1 bytes @ 0x0
  2328                           
  2329  0070                     ?_doWDTSleep:	
  2330                           ; 1 bytes @ 0x0
  2331                           
  2332  0070                     ?_loop:	
  2333                           ; 1 bytes @ 0x0
  2334                           
  2335  0070                     ?_nrf24l01GetPipe:	
  2336                           ; 1 bytes @ 0x0
  2337                           
  2338  0070                     ?_main:	
  2339                           ; 1 bytes @ 0x0
  2340                           
  2341  0070                     ?_nrf24l01SetRXMode:	
  2342                           ; 1 bytes @ 0x0
  2343                           
  2344  0070                     ?_nrf24l01SetRXPipe:	
  2345                           ; 1 bytes @ 0x0
  2346                           
  2347  0070                     ?_nrf24l01InitRegisters:	
  2348                           ; 1 bytes @ 0x0
  2349                           
  2350  0070                     ?i1_nrf24l01SetRXMode:	
  2351                           ; 1 bytes @ 0x0
  2352                           
  2353  0070                     ?i1_nrf24l01Service:	
  2354                           ; 1 bytes @ 0x0
  2355                           
  2356  0070                     ?i1_memset:	
  2357                           ; 1 bytes @ 0x0
  2358                           
  2359  0070                     ?i1_strcmp:	
  2360                           ; 1 bytes @ 0x0
  2361                           
  2362  0070                     ?i1_strlen:	
  2363                           ; 2 bytes @ 0x0
  2364                           
  2365  0070                     nrf24l01SPISend@data:	
  2366                           ; 2 bytes @ 0x0
  2367                           
  2368  0070                     enableInterrupts@enable:	
  2369                           ; 1 bytes @ 0x0
  2370                           
  2371  0070                     i1strcmp@s2:	
  2372                           ; 1 bytes @ 0x0
  2373                           
  2374  0070                     i1memset@p1:	
  2375                           ; 1 bytes @ 0x0
  2376                           
  2377  0070                     i1strlen@s:	
  2378                           ; 2 bytes @ 0x0
  2379                           
  2380                           
  2381                           ; 2 bytes @ 0x0
  2382  0070                     	ds	1
  2383  0071                     ?i1_nrf24l01Send:	
  2384  0071                     i1nrf24l01Send@data:	
  2385                           ; 1 bytes @ 0x1
  2386                           
  2387                           
  2388                           ; 1 bytes @ 0x1
  2389  0071                     	ds	1
  2390  0072                     ??i1_nrf24l01Send:	
  2391  0072                     ??i1_strcmp:	
  2392                           ; 1 bytes @ 0x2
  2393                           
  2394  0072                     ??i1_strlen:	
  2395                           ; 1 bytes @ 0x2
  2396                           
  2397  0072                     i1memset@c:	
  2398                           ; 1 bytes @ 0x2
  2399                           
  2400                           
  2401                           ; 2 bytes @ 0x2
  2402  0072                     	ds	1
  2403  0073                     i1nrf24l01Send@command:	
  2404  0073                     i1strcmp@r:	
  2405                           ; 1 bytes @ 0x3
  2406                           
  2407                           
  2408                           ; 1 bytes @ 0x3
  2409  0073                     	ds	1
  2410  0074                     ??i1_nrf24l01SetRXMode:	
  2411  0074                     i1strcmp@s1:	
  2412                           ; 1 bytes @ 0x4
  2413                           
  2414  0074                     i1memset@n:	
  2415                           ; 1 bytes @ 0x4
  2416                           
  2417  0074                     i1strlen@cp:	
  2418                           ; 2 bytes @ 0x4
  2419                           
  2420                           
  2421                           ; 2 bytes @ 0x4
  2422  0074                     	ds	1
  2423  0075                     i1nrf24l01SetRXMode@rxMode:	
  2424                           
  2425                           ; 1 bytes @ 0x5
  2426  0075                     	ds	1
  2427  0076                     ??i1_memset:	
  2428  0076                     i1memset@p:	
  2429                           ; 1 bytes @ 0x6
  2430                           
  2431                           
  2432                           ; 2 bytes @ 0x6
  2433  0076                     	ds	2
  2434  0078                     ??i1_nrf24l01Service:	
  2435                           
  2436                           ; 1 bytes @ 0x8
  2437  0078                     	ds	2
  2438  007A                     i1nrf24l01Service@width:	
  2439                           
  2440                           ; 1 bytes @ 0xA
  2441  007A                     	ds	1
  2442  007B                     i1nrf24l01Service@i:	
  2443                           
  2444                           ; 1 bytes @ 0xB
  2445  007B                     	ds	1
  2446  007C                     ??_nrf24l01ISR:	
  2447                           
  2448                           ; 1 bytes @ 0xC
  2449  007C                     	ds	1
  2450  007D                     ??_ISR:	
  2451                           
  2452                           	psect	cstackBANK0
  2453  0020                     __pcstackBANK0:	
  2454                           ; 1 bytes @ 0xD
  2455                           
  2456  0020                     ?___ftge:	
  2457  0020                     ?_nrf24l01Send:	
  2458                           ; 1 bit 
  2459                           
  2460  0020                     ??_isdigit:	
  2461                           ; 1 bytes @ 0x0
  2462                           
  2463  0020                     ??_nrf24l01InterfaceInit:	
  2464                           ; 1 bytes @ 0x0
  2465                           
  2466  0020                     ??_doWDTSleep:	
  2467                           ; 1 bytes @ 0x0
  2468                           
  2469  0020                     ?___bmul:	
  2470                           ; 1 bytes @ 0x0
  2471                           
  2472  0020                     ?_memset:	
  2473                           ; 1 bytes @ 0x0
  2474                           
  2475  0020                     ?_strcpy:	
  2476                           ; 2 bytes @ 0x0
  2477                           
  2478  0020                     ?_strlen:	
  2479                           ; 2 bytes @ 0x0
  2480                           
  2481  0020                     ?_strcmp:	
  2482                           ; 2 bytes @ 0x0
  2483                           
  2484  0020                     ?___wmul:	
  2485                           ; 2 bytes @ 0x0
  2486                           
  2487  0020                     ?___lwmod:	
  2488                           ; 2 bytes @ 0x0
  2489                           
  2490  0020                     ?___ftpack:	
  2491                           ; 2 bytes @ 0x0
  2492                           
  2493  0020                     ?___lldiv:	
  2494                           ; 3 bytes @ 0x0
  2495                           
  2496  0020                     nrf24l01Send@data:	
  2497                           ; 4 bytes @ 0x0
  2498                           
  2499  0020                     ___bmul@multiplicand:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0020                     _isdigit$1712:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0020                     strcmp@s2:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0020                     ___wmul@multiplier:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0020                     ___lwmod@divisor:	
  2512                           ; 2 bytes @ 0x0
  2513                           
  2514  0020                     memset@p1:	
  2515                           ; 2 bytes @ 0x0
  2516                           
  2517  0020                     strcpy@to:	
  2518                           ; 2 bytes @ 0x0
  2519                           
  2520  0020                     strlen@s:	
  2521                           ; 2 bytes @ 0x0
  2522                           
  2523  0020                     ___ftpack@arg:	
  2524                           ; 2 bytes @ 0x0
  2525                           
  2526  0020                     ___ftge@ff1:	
  2527                           ; 3 bytes @ 0x0
  2528                           
  2529  0020                     ___lldiv@divisor:	
  2530                           ; 3 bytes @ 0x0
  2531                           
  2532                           
  2533                           ; 4 bytes @ 0x0
  2534  0020                     	ds	1
  2535  0021                     ??_nrf24l01Send:	
  2536  0021                     ??___bmul:	
  2537                           ; 1 bytes @ 0x1
  2538                           
  2539  0021                     doWDTSleep@wdtps:	
  2540                           ; 1 bytes @ 0x1
  2541                           
  2542  0021                     isdigit@c:	
  2543                           ; 1 bytes @ 0x1
  2544                           
  2545                           
  2546                           ; 1 bytes @ 0x1
  2547  0021                     	ds	1
  2548  0022                     ??_strlen:	
  2549  0022                     ??_strcmp:	
  2550                           ; 1 bytes @ 0x2
  2551                           
  2552  0022                     ?_sleep:	
  2553                           ; 1 bytes @ 0x2
  2554                           
  2555  0022                     nrf24l01Send@command:	
  2556                           ; 1 bytes @ 0x2
  2557                           
  2558  0022                     ___bmul@product:	
  2559                           ; 1 bytes @ 0x2
  2560                           
  2561  0022                     sleep@milliseconds:	
  2562                           ; 1 bytes @ 0x2
  2563                           
  2564  0022                     ___wmul@multiplicand:	
  2565                           ; 2 bytes @ 0x2
  2566                           
  2567  0022                     ___lwmod@dividend:	
  2568                           ; 2 bytes @ 0x2
  2569                           
  2570  0022                     memset@c:	
  2571                           ; 2 bytes @ 0x2
  2572                           
  2573  0022                     strcpy@from:	
  2574                           ; 2 bytes @ 0x2
  2575                           
  2576                           
  2577                           ; 2 bytes @ 0x2
  2578  0022                     	ds	1
  2579  0023                     ??_nrf24l01SetRXMode:	
  2580  0023                     ??_nrf24l01SetRXPipe:	
  2581                           ; 1 bytes @ 0x3
  2582                           
  2583  0023                     ___bmul@multiplier:	
  2584                           ; 1 bytes @ 0x3
  2585                           
  2586  0023                     ___ftpack@exp:	
  2587                           ; 1 bytes @ 0x3
  2588                           
  2589  0023                     strcmp@r:	
  2590                           ; 1 bytes @ 0x3
  2591                           
  2592  0023                     ___ftge@ff2:	
  2593                           ; 1 bytes @ 0x3
  2594                           
  2595                           
  2596                           ; 3 bytes @ 0x3
  2597  0023                     	ds	1
  2598  0024                     ??_strcpy:	
  2599  0024                     ??_nrf24l01SetTXPipe:	
  2600                           ; 1 bytes @ 0x4
  2601                           
  2602  0024                     ??_sleep:	
  2603                           ; 1 bytes @ 0x4
  2604                           
  2605  0024                     ??___wmul:	
  2606                           ; 1 bytes @ 0x4
  2607                           
  2608  0024                     ??___lwmod:	
  2609                           ; 1 bytes @ 0x4
  2610                           
  2611  0024                     nrf24l01SetRXMode@rxMode:	
  2612                           ; 1 bytes @ 0x4
  2613                           
  2614  0024                     ___ftpack@sign:	
  2615                           ; 1 bytes @ 0x4
  2616                           
  2617  0024                     strcmp@s1:	
  2618                           ; 1 bytes @ 0x4
  2619                           
  2620  0024                     ___wmul@product:	
  2621                           ; 1 bytes @ 0x4
  2622                           
  2623  0024                     memset@n:	
  2624                           ; 2 bytes @ 0x4
  2625                           
  2626  0024                     strcpy@cp:	
  2627                           ; 2 bytes @ 0x4
  2628                           
  2629  0024                     strlen@cp:	
  2630                           ; 2 bytes @ 0x4
  2631                           
  2632  0024                     ___lldiv@dividend:	
  2633                           ; 2 bytes @ 0x4
  2634                           
  2635                           
  2636                           ; 4 bytes @ 0x4
  2637  0024                     	ds	1
  2638  0025                     ??___ftpack:	
  2639  0025                     nrf24l01SetRXPipe@pipe:	
  2640                           ; 1 bytes @ 0x5
  2641                           
  2642  0025                     ___lwmod@counter:	
  2643                           ; 1 bytes @ 0x5
  2644                           
  2645                           
  2646                           ; 1 bytes @ 0x5
  2647  0025                     	ds	1
  2648  0026                     ??_memset:	
  2649  0026                     ??_nrf24l01GetPipe:	
  2650                           ; 1 bytes @ 0x6
  2651                           
  2652  0026                     ??___ftge:	
  2653                           ; 1 bytes @ 0x6
  2654                           
  2655  0026                     nrf24l01SetTXPipe@pipe:	
  2656                           ; 1 bytes @ 0x6
  2657                           
  2658  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2659                           ; 1 bytes @ 0x6
  2660                           
  2661  0026                     memset@p:	
  2662                           ; 1 bytes @ 0x6
  2663                           
  2664                           
  2665                           ; 2 bytes @ 0x6
  2666  0026                     	ds	1
  2667  0027                     ??_nrf24l01InitRegisters:	
  2668                           
  2669                           ; 1 bytes @ 0x7
  2670  0027                     	ds	1
  2671  0028                     ??_nrf24l01Service:	
  2672  0028                     ??___lldiv:	
  2673                           ; 1 bytes @ 0x8
  2674                           
  2675  0028                     ?___awtoft:	
  2676                           ; 1 bytes @ 0x8
  2677                           
  2678  0028                     ?___lbtoft:	
  2679                           ; 3 bytes @ 0x8
  2680                           
  2681  0028                     ?___lltoft:	
  2682                           ; 3 bytes @ 0x8
  2683                           
  2684  0028                     ?___lwtoft:	
  2685                           ; 3 bytes @ 0x8
  2686                           
  2687  0028                     nrf24l01GetPipe@pipe:	
  2688                           ; 3 bytes @ 0x8
  2689                           
  2690  0028                     ___awtoft@c:	
  2691                           ; 1 bytes @ 0x8
  2692                           
  2693  0028                     ___lwtoft@c:	
  2694                           ; 2 bytes @ 0x8
  2695                           
  2696  0028                     ___lltoft@c:	
  2697                           ; 2 bytes @ 0x8
  2698                           
  2699                           
  2700                           ; 4 bytes @ 0x8
  2701  0028                     	ds	1
  2702  0029                     nrf24l01GetPipe@name:	
  2703  0029                     nrf24l01InitRegisters@channel:	
  2704                           ; 1 bytes @ 0x9
  2705                           
  2706  0029                     ___lldiv@quotient:	
  2707                           ; 1 bytes @ 0x9
  2708                           
  2709                           
  2710                           ; 4 bytes @ 0x9
  2711  0029                     	ds	1
  2712  002A                     nrf24l01GetPipe@i:	
  2713  002A                     nrf24l01Service@width:	
  2714                           ; 1 bytes @ 0xA
  2715                           
  2716  002A                     nrf24l01InitRegisters@setupAW:	
  2717                           ; 1 bytes @ 0xA
  2718                           
  2719                           
  2720                           ; 1 bytes @ 0xA
  2721  002A                     	ds	1
  2722  002B                     ??___awtoft:	
  2723  002B                     ??___lbtoft:	
  2724                           ; 1 bytes @ 0xB
  2725                           
  2726  002B                     ??___lwtoft:	
  2727                           ; 1 bytes @ 0xB
  2728                           
  2729  002B                     nrf24l01Service@i:	
  2730                           ; 1 bytes @ 0xB
  2731                           
  2732  002B                     nrf24l01InitRegisters@feature:	
  2733                           ; 1 bytes @ 0xB
  2734                           
  2735                           
  2736                           ; 1 bytes @ 0xB
  2737  002B                     	ds	1
  2738  002C                     ?_nrf24l01SendPacket:	
  2739  002C                     ??___lltoft:	
  2740                           ; 1 bytes @ 0xC
  2741                           
  2742  002C                     nrf24l01InitRegisters@rfSetup:	
  2743                           ; 1 bytes @ 0xC
  2744                           
  2745  002C                     nrf24l01SendPacket@txPacket:	
  2746                           ; 1 bytes @ 0xC
  2747                           
  2748                           
  2749                           ; 2 bytes @ 0xC
  2750  002C                     	ds	1
  2751  002D                     nrf24l01InitRegisters@enAA:	
  2752  002D                     ___lldiv@counter:	
  2753                           ; 1 bytes @ 0xD
  2754                           
  2755  002D                     ___awtoft@sign:	
  2756                           ; 1 bytes @ 0xD
  2757                           
  2758  002D                     ___lltoft@exp:	
  2759                           ; 1 bytes @ 0xD
  2760                           
  2761                           
  2762                           ; 1 bytes @ 0xD
  2763  002D                     	ds	1
  2764  002E                     ??_nrf24l01SendPacket:	
  2765  002E                     ?___ftadd:	
  2766                           ; 1 bytes @ 0xE
  2767                           
  2768  002E                     ?___llmod:	
  2769                           ; 3 bytes @ 0xE
  2770                           
  2771  002E                     nrf24l01InitRegisters@DynPD:	
  2772                           ; 4 bytes @ 0xE
  2773                           
  2774  002E                     ___ftadd@f1:	
  2775                           ; 1 bytes @ 0xE
  2776                           
  2777  002E                     ___llmod@divisor:	
  2778                           ; 3 bytes @ 0xE
  2779                           
  2780                           
  2781                           ; 4 bytes @ 0xE
  2782  002E                     	ds	1
  2783  002F                     ___lbtoft@c:	
  2784  002F                     nrf24l01InitRegisters@i:	
  2785                           ; 1 bytes @ 0xF
  2786                           
  2787                           
  2788                           ; 2 bytes @ 0xF
  2789  002F                     	ds	2
  2790  0031                     ??_nrf24l01Init:	
  2791  0031                     ___ftadd@f2:	
  2792                           ; 1 bytes @ 0x11
  2793                           
  2794                           
  2795                           ; 3 bytes @ 0x11
  2796  0031                     	ds	1
  2797  0032                     ___llmod@dividend:	
  2798                           
  2799                           ; 4 bytes @ 0x12
  2800  0032                     	ds	2
  2801  0034                     ??___ftadd:	
  2802                           
  2803                           ; 1 bytes @ 0x14
  2804  0034                     	ds	2
  2805  0036                     ??___llmod:	
  2806                           
  2807                           ; 1 bytes @ 0x16
  2808  0036                     	ds	1
  2809  0037                     ___llmod@counter:	
  2810                           
  2811                           ; 1 bytes @ 0x17
  2812  0037                     	ds	1
  2813  0038                     ?_sprintf:	
  2814  0038                     ___ftadd@sign:	
  2815                           ; 2 bytes @ 0x18
  2816                           
  2817  0038                     sprintf@f:	
  2818                           ; 1 bytes @ 0x18
  2819                           
  2820                           
  2821                           ; 2 bytes @ 0x18
  2822  0038                     	ds	1
  2823  0039                     ___ftadd@exp2:	
  2824                           
  2825                           ; 1 bytes @ 0x19
  2826  0039                     	ds	1
  2827  003A                     ___ftadd@exp1:	
  2828                           
  2829                           ; 1 bytes @ 0x1A
  2830  003A                     	ds	1
  2831  003B                     ?___ftdiv:	
  2832  003B                     ?___ftsub:	
  2833                           ; 3 bytes @ 0x1B
  2834                           
  2835  003B                     ___ftdiv@f2:	
  2836                           ; 3 bytes @ 0x1B
  2837                           
  2838  003B                     ___ftsub@f2:	
  2839                           ; 3 bytes @ 0x1B
  2840                           
  2841                           
  2842                           ; 3 bytes @ 0x1B
  2843  003B                     	ds	3
  2844  003E                     ___ftdiv@f1:	
  2845  003E                     ___ftsub@f1:	
  2846                           ; 3 bytes @ 0x1E
  2847                           
  2848                           
  2849                           ; 3 bytes @ 0x1E
  2850  003E                     	ds	3
  2851  0041                     ??___ftdiv:	
  2852  0041                     ??___ftsub:	
  2853                           ; 1 bytes @ 0x21
  2854                           
  2855                           
  2856                           ; 1 bytes @ 0x21
  2857  0041                     	ds	1
  2858  0042                     ??_sprintf:	
  2859                           
  2860                           ; 1 bytes @ 0x22
  2861  0042                     	ds	3
  2862  0045                     ___ftdiv@cntr:	
  2863                           
  2864                           ; 1 bytes @ 0x25
  2865  0045                     	ds	1
  2866  0046                     ___ftdiv@f3:	
  2867                           
  2868                           ; 3 bytes @ 0x26
  2869  0046                     	ds	2
  2870  0048                     sprintf@flag:	
  2871                           
  2872                           ; 1 bytes @ 0x28
  2873  0048                     	ds	1
  2874  0049                     sprintf@ap:	
  2875  0049                     ___ftdiv@exp:	
  2876                           ; 1 bytes @ 0x29
  2877                           
  2878                           
  2879                           ; 1 bytes @ 0x29
  2880  0049                     	ds	1
  2881  004A                     ___ftdiv@sign:	
  2882  004A                     sprintf@val:	
  2883                           ; 1 bytes @ 0x2A
  2884                           
  2885                           
  2886                           ; 4 bytes @ 0x2A
  2887  004A                     	ds	1
  2888  004B                     ?_getADCValue:	
  2889                           
  2890                           ; 3 bytes @ 0x2B
  2891  004B                     	ds	3
  2892  004E                     ??_getADCValue:	
  2893  004E                     sprintf@sp:	
  2894                           ; 1 bytes @ 0x2E
  2895                           
  2896                           
  2897                           ; 1 bytes @ 0x2E
  2898  004E                     	ds	1
  2899  004F                     sprintf@width:	
  2900                           
  2901                           ; 2 bytes @ 0x2F
  2902  004F                     	ds	2
  2903  0051                     getADCValue@adcLoop:	
  2904  0051                     sprintf@prec:	
  2905                           ; 2 bytes @ 0x31
  2906                           
  2907                           
  2908                           ; 2 bytes @ 0x31
  2909  0051                     	ds	2
  2910  0053                     getADCValue@channel:	
  2911  0053                     sprintf@c:	
  2912                           ; 1 bytes @ 0x33
  2913                           
  2914                           
  2915                           ; 1 bytes @ 0x33
  2916  0053                     	ds	1
  2917  0054                     getADCValue@adcSum:	
  2918                           
  2919                           ; 3 bytes @ 0x34
  2920  0054                     	ds	3
  2921  0057                     ?___ftmul:	
  2922  0057                     ?___ftneg:	
  2923                           ; 3 bytes @ 0x37
  2924                           
  2925  0057                     ___ftmul@f1:	
  2926                           ; 3 bytes @ 0x37
  2927                           
  2928  0057                     ___ftneg@f1:	
  2929                           ; 3 bytes @ 0x37
  2930                           
  2931                           
  2932                           ; 3 bytes @ 0x37
  2933  0057                     	ds	3
  2934  005A                     ??___ftneg:	
  2935  005A                     ___ftmul@f2:	
  2936                           ; 1 bytes @ 0x3A
  2937                           
  2938                           
  2939                           ; 3 bytes @ 0x3A
  2940  005A                     	ds	3
  2941  005D                     ??___ftmul:	
  2942                           
  2943                           ; 1 bytes @ 0x3D
  2944  005D                     	ds	4
  2945  0061                     ___ftmul@exp:	
  2946                           
  2947                           ; 1 bytes @ 0x41
  2948  0061                     	ds	1
  2949  0062                     ___ftmul@f3_as_product:	
  2950                           
  2951                           ; 3 bytes @ 0x42
  2952  0062                     	ds	3
  2953  0065                     ___ftmul@cntr:	
  2954                           
  2955                           ; 1 bytes @ 0x45
  2956  0065                     	ds	1
  2957  0066                     ___ftmul@sign:	
  2958                           
  2959                           ; 1 bytes @ 0x46
  2960  0066                     	ds	1
  2961  0067                     ?___fttol:	
  2962  0067                     ___fttol@f1:	
  2963                           ; 4 bytes @ 0x47
  2964                           
  2965                           
  2966                           ; 3 bytes @ 0x47
  2967  0067                     	ds	4
  2968  006B                     ??___fttol:	
  2969                           
  2970                           ; 1 bytes @ 0x4B
  2971  006B                     	ds	4
  2972  006F                     ??_ftoa:	
  2973                           
  2974                           ; 1 bytes @ 0x4F
  2975  006F                     	ds	1
  2976  0070                     ??_strcat:	
  2977                           
  2978                           	psect	maintext
  2979  0ABB                     __pmaintext:	
  2980                           ; 1 bytes @ 0x50
  2981 ;;
  2982 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2983 ;;
  2984 ;; *************** function _main *****************
  2985 ;; Defined at:
  2986 ;;		line 178 in file "main.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  packet         33   38[BANK1 ] struct .
  2991 ;;  pipe            1   37[BANK1 ] unsigned char 
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : B1F/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3002 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3003 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3004 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3005 ;;Total ram usage:       35 bytes
  3006 ;; Hardware stack levels required when called:   15
  3007 ;; This function calls:
  3008 ;;		___lwtoft
  3009 ;;		_loop
  3010 ;;		_nrf24l01GetPipe
  3011 ;;		_nrf24l01Init
  3012 ;;		_nrf24l01SetTXPipe
  3013 ;;		_sendMessage
  3014 ;;		_strcpy
  3015 ;; This function is called by:
  3016 ;;		Startup code after reset
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           
  3021                           ;psect for function _main
  3022  0ABB                     _main:	
  3023                           
  3024                           ;main.c: 181: ANSELA = 0x00;
  3025                           
  3026                           ;incstack = 0
  3027                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3028  0ABB  0023               	movlb	3	; select bank3
  3029  0ABC  018C               	clrf	12	;volatile
  3030                           
  3031                           ;main.c: 182: ANSELC = 0x00;
  3032  0ABD  018E               	clrf	14	;volatile
  3033                           
  3034                           ;main.c: 184: ODCONA = 0x00;
  3035  0ABE  0025               	movlb	5	; select bank5
  3036  0ABF  018C               	clrf	12	;volatile
  3037                           
  3038                           ;main.c: 185: ODCONC = 0x00;
  3039  0AC0  018E               	clrf	14	;volatile
  3040                           
  3041                           ;main.c: 190: INLVLA = 0x00;
  3042  0AC1  0027               	movlb	7	; select bank7
  3043  0AC2  018C               	clrf	12	;volatile
  3044                           
  3045                           ;main.c: 191: INLVLC = 0x00;
  3046  0AC3  018E               	clrf	14	;volatile
  3047                           
  3048                           ;main.c: 193: WPUA = 0x00;
  3049  0AC4  0024               	movlb	4	; select bank4
  3050  0AC5  018C               	clrf	12	;volatile
  3051                           
  3052                           ;main.c: 194: WPUC = 0x00;
  3053  0AC6  018E               	clrf	14	;volatile
  3054                           
  3055                           ;main.c: 196: TRISCbits.TRISC5 = 0;
  3056  0AC7  0021               	movlb	1	; select bank1
  3057  0AC8  128E               	bcf	14,5	;volatile
  3058                           
  3059                           ;main.c: 197: TRISCbits.TRISC4 = 0;
  3060  0AC9  120E               	bcf	14,4	;volatile
  3061                           
  3062                           ;main.c: 199: PORTCbits.RC4 = 0;
  3063  0ACA  0020               	movlb	0	; select bank0
  3064  0ACB  120E               	bcf	14,4	;volatile
  3065                           
  3066                           ;main.c: 206: INTCONbits.PEIE = 0;
  3067  0ACC  130B               	bcf	11,6	;volatile
  3068                           
  3069                           ;main.c: 207: INTCONbits.GIE = 0;
  3070  0ACD  138B               	bcf	11,7	;volatile
  3071                           
  3072                           ;main.c: 209: OSCCON1bits.NOSC = 0b000;
  3073  0ACE  308F               	movlw	-113
  3074  0ACF  0032               	movlb	18	; select bank18
  3075  0AD0  0599               	andwf	25,f	;volatile
  3076                           
  3077                           ;main.c: 210: OSCCON1bits.NDIV = 0b000;
  3078  0AD1  30F0               	movlw	-16
  3079  0AD2  0599               	andwf	25,f	;volatile
  3080                           
  3081                           ;main.c: 212: _delay((unsigned long)((10)*(32000000/4000.0)));
  3082  0AD3  3068               	movlw	104
  3083  0AD4  0021               	movlb	1	; select bank1
  3084  0AD5  00C4               	movwf	??_main^(0+128)
  3085  0AD6  30E4               	movlw	228
  3086  0AD7                     u4017:	
  3087  0AD7  0B89               	decfsz	9,f
  3088  0AD8  2AD7               	goto	u4017
  3089  0AD9  0BC4               	decfsz	??_main^(0+128),f
  3090  0ADA  2AD7               	goto	u4017
  3091  0ADB  0000               	nop
  3092                           
  3093                           ;main.c: 216: strcpy(romData->name, "UWT");
  3094  0ADC  0021               	movlb	1	; select bank1
  3095  0ADD  086B               	movf	_romData^(0+128),w
  3096  0ADE  3E01               	addlw	1
  3097  0ADF  0020               	movlb	0	; select bank0
  3098  0AE0  00A0               	movwf	strcpy@to
  3099  0AE1  3002               	movlw	2
  3100  0AE2  00A1               	movwf	strcpy@to+1
  3101  0AE3  3078               	movlw	low (STR_12| (0+32768))
  3102  0AE4  00A2               	movwf	strcpy@from
  3103  0AE5  3098               	movlw	high (STR_12| (0+32768))
  3104  0AE6  00A3               	movwf	strcpy@from+1
  3105  0AE7  3195  2557  318A   	fcall	_strcpy
  3106                           
  3107                           ;main.c: 218: nrf24l01Init();
  3108  0AEA  3188  2047  318A   	fcall	_nrf24l01Init
  3109                           
  3110                           ;main.c: 220: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3111  0AED  0021               	movlb	1	; select bank1
  3112  0AEE  086B               	movf	_romData^(0+128),w
  3113  0AEF  3E01               	addlw	1
  3114  0AF0  3197  278C  318A   	fcall	_nrf24l01GetPipe
  3115  0AF3  0021               	movlb	1	; select bank1
  3116  0AF4  00C4               	movwf	??_main^(0+128)
  3117  0AF5  0844               	movf	??_main^(0+128),w
  3118  0AF6  00C5               	movwf	main@pipe^(0+128)
  3119                           
  3120                           ;main.c: 221: nrf24l01SetTXPipe(pipe);
  3121  0AF7  0845               	movf	main@pipe^(0+128),w
  3122  0AF8  3188  208A  318A   	fcall	_nrf24l01SetTXPipe
  3123                           
  3124                           ;main.c: 226: ADCON0bits.ADON = 0;
  3125  0AFB  0021               	movlb	1	; select bank1
  3126  0AFC  101D               	bcf	29,0	;volatile
  3127                           
  3128                           ;main.c: 229: PORTAbits.RA4 = 0;
  3129  0AFD  0020               	movlb	0	; select bank0
  3130  0AFE  120C               	bcf	12,4	;volatile
  3131                           
  3132                           ;main.c: 230: TRISAbits.TRISA4 = 1;
  3133  0AFF  0021               	movlb	1	; select bank1
  3134  0B00  160C               	bsf	12,4	;volatile
  3135                           
  3136                           ;main.c: 231: WPUAbits.WPUA4 = 0;
  3137  0B01  0024               	movlb	4	; select bank4
  3138  0B02  120C               	bcf	12,4	;volatile
  3139                           
  3140                           ;main.c: 232: ODCONAbits.ODCA4 = 1;
  3141  0B03  0025               	movlb	5	; select bank5
  3142  0B04  160C               	bsf	12,4	;volatile
  3143                           
  3144                           ;main.c: 233: ANSELAbits.ANSA4 = 1;
  3145  0B05  0023               	movlb	3	; select bank3
  3146  0B06  160C               	bsf	12,4	;volatile
  3147                           
  3148                           ;main.c: 236: ANSELCbits.ANSC3 = 1;
  3149  0B07  158E               	bsf	14,3	;volatile
  3150                           
  3151                           ;main.c: 237: TRISCbits.TRISC3 = 1;
  3152  0B08  0021               	movlb	1	; select bank1
  3153  0B09  158E               	bsf	14,3	;volatile
  3154                           
  3155                           ;main.c: 240: FVRCONbits.TSEN = 1;
  3156  0B0A  0022               	movlb	2	; select bank2
  3157  0B0B  1697               	bsf	23,5	;volatile
  3158                           
  3159                           ;main.c: 241: FVRCONbits.TSRNG = 1;
  3160  0B0C  1617               	bsf	23,4	;volatile
  3161                           
  3162                           ;main.c: 244: FVRCONbits.FVREN = 0;
  3163  0B0D  1397               	bcf	23,7	;volatile
  3164                           
  3165                           ;main.c: 245: FVRCONbits.ADFVR = 0b10;
  3166  0B0E  0817               	movf	23,w	;volatile
  3167  0B0F  39FC               	andlw	-4
  3168  0B10  3802               	iorlw	2
  3169  0B11  0097               	movwf	23	;volatile
  3170                           
  3171                           ;main.c: 247: ADCON1bits.ADCS = 0b111;
  3172  0B12  3070               	movlw	112
  3173  0B13  0021               	movlb	1	; select bank1
  3174  0B14  049E               	iorwf	30,f	;volatile
  3175                           
  3176                           ;main.c: 248: ADCON1bits.ADFM = 1;
  3177  0B15  179E               	bsf	30,7	;volatile
  3178                           
  3179                           ;main.c: 249: ADCON1bits.ADPREF = 0b11;
  3180  0B16  3003               	movlw	3
  3181  0B17  049E               	iorwf	30,f	;volatile
  3182                           
  3183                           ;main.c: 250: ADCON1bits.ADNREF = 0b00;
  3184  0B18  111E               	bcf	30,2	;volatile
  3185                           
  3186                           ;main.c: 253: ADCON0bits.CHS = 3;
  3187  0B19  081D               	movf	29,w	;volatile
  3188  0B1A  3903               	andlw	-253
  3189  0B1B  380C               	iorlw	12
  3190  0B1C  009D               	movwf	29	;volatile
  3191                           
  3192                           ;main.c: 258: TRISAbits.TRISA2 = 1;
  3193  0B1D  150C               	bsf	12,2	;volatile
  3194                           
  3195                           ;main.c: 259: PIE0bits.INTE = 1;
  3196  0B1E  1410               	bsf	16,0	;volatile
  3197                           
  3198                           ;main.c: 260: INTCONbits.INTEDG = 0;
  3199  0B1F  100B               	bcf	11,0	;volatile
  3200                           
  3201                           ;main.c: 263: TRISAbits.TRISA5 = 0;
  3202  0B20  128C               	bcf	12,5	;volatile
  3203                           
  3204                           ;main.c: 264: PORTAbits.RA5 = 0;
  3205  0B21  0020               	movlb	0	; select bank0
  3206  0B22  128C               	bcf	12,5	;volatile
  3207                           
  3208                           ;main.c: 267: INTCONbits.PEIE = 1;
  3209  0B23  170B               	bsf	11,6	;volatile
  3210                           
  3211                           ;main.c: 268: INTCONbits.GIE = 1;
  3212  0B24  178B               	bsf	11,7	;volatile
  3213                           
  3214                           ;main.c: 270: nrf24l01Packet_t packet;;main.c: 272: sendMessage(&packet, "BOOT", romData
      +                          ->bootMode);
  3215  0B25  30C6               	movlw	low main@packet
  3216  0B26  0021               	movlb	1	; select bank1
  3217  0B27  00B9               	movwf	sendMessage@packet^(0+128)
  3218  0B28  3000               	movlw	high main@packet
  3219  0B29  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  3220  0B2A  3073               	movlw	low (STR_13| (0+32768))
  3221  0B2B  00BB               	movwf	sendMessage@topic^(0+128)
  3222  0B2C  3098               	movlw	high (STR_13| (0+32768))
  3223  0B2D  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  3224  0B2E  086B               	movf	_romData^(0+128),w
  3225  0B2F  3E11               	addlw	17
  3226  0B30  0086               	movwf	6
  3227  0B31  3002               	movlw	2	; select bank4/5
  3228  0B32  0087               	movwf	7
  3229  0B33  3F40               	moviw [0]fsr1
  3230  0B34  0020               	movlb	0	; select bank0
  3231  0B35  00A8               	movwf	___lwtoft@c
  3232  0B36  3F41               	moviw [1]fsr1
  3233  0B37  00A9               	movwf	___lwtoft@c+1
  3234  0B38  3194  24C4  318A   	fcall	___lwtoft
  3235  0B3B  0020               	movlb	0	; select bank0
  3236  0B3C  0828               	movf	?___lwtoft,w
  3237  0B3D  0021               	movlb	1	; select bank1
  3238  0B3E  00BD               	movwf	sendMessage@value^(0+128)
  3239  0B3F  0020               	movlb	0	; select bank0
  3240  0B40  0829               	movf	?___lwtoft+1,w
  3241  0B41  0021               	movlb	1	; select bank1
  3242  0B42  00BE               	movwf	(sendMessage@value+1)^(0+128)
  3243  0B43  0020               	movlb	0	; select bank0
  3244  0B44  082A               	movf	?___lwtoft+2,w
  3245  0B45  0021               	movlb	1	; select bank1
  3246  0B46  00BF               	movwf	(sendMessage@value+2)^(0+128)
  3247  0B47  318A  2231  318A   	fcall	_sendMessage
  3248  0B4A                     l3873:	
  3249                           ;main.c: 274: while(1){
  3250                           
  3251                           
  3252                           ;main.c: 275: loop();
  3253  0B4A  3180  2036  318A   	fcall	_loop
  3254  0B4D  2B4A               	goto	l3873
  3255  0B4E                     __end_of_main:	
  3256                           ;main.c: 276: };main.c: 278: return;
  3257                           
  3258                           
  3259                           	psect	text1
  3260  0847                     __ptext1:	
  3261 ;; *************** function _nrf24l01Init *****************
  3262 ;; Defined at:
  3263 ;;		line 480 in file "nrf24l01.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;		None
  3266 ;; Auto vars:     Size  Location     Type
  3267 ;;		None
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  1    wreg      void 
  3270 ;; Registers used:
  3271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3279 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3280 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3281 ;;Total ram usage:        2 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:   12
  3284 ;; This function calls:
  3285 ;;		_nrf24l01CEHigh
  3286 ;;		_nrf24l01CELow
  3287 ;;		_nrf24l01InitRegisters
  3288 ;;		_nrf24l01InterfaceInit
  3289 ;; This function is called by:
  3290 ;;		_main
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293                           
  3294                           
  3295                           ;psect for function _nrf24l01Init
  3296  0847                     _nrf24l01Init:	
  3297                           
  3298                           ;nrf24l01.c: 483: nrf24l01InterfaceInit();
  3299                           
  3300                           ;incstack = 0
  3301                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3302  0847  3195  25CA  3188   	fcall	_nrf24l01InterfaceInit
  3303                           
  3304                           ;nrf24l01.c: 488: nrf24l01CELow();
  3305  084A  3194  246D  3188   	fcall	_nrf24l01CELow
  3306                           
  3307                           ;nrf24l01.c: 490: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3308  084D  3003               	movlw	3
  3309  084E  0020               	movlb	0	; select bank0
  3310  084F  00B2               	movwf	??_nrf24l01Init+1
  3311  0850  3008               	movlw	8
  3312  0851  00B1               	movwf	??_nrf24l01Init
  3313  0852  3077               	movlw	119
  3314  0853                     u4027:	
  3315  0853  0B89               	decfsz	9,f
  3316  0854  2853               	goto	u4027
  3317  0855  0BB1               	decfsz	??_nrf24l01Init,f
  3318  0856  2853               	goto	u4027
  3319  0857  0BB2               	decfsz	??_nrf24l01Init+1,f
  3320  0858  2853               	goto	u4027
  3321                           
  3322                           ;nrf24l01.c: 492: nrf24l01InitRegisters();
  3323  0859  318E  26E2  3188   	fcall	_nrf24l01InitRegisters
  3324                           
  3325                           ;nrf24l01.c: 494: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3326  085C  3003               	movlw	3
  3327  085D  0020               	movlb	0	; select bank0
  3328  085E  00B2               	movwf	??_nrf24l01Init+1
  3329  085F  3008               	movlw	8
  3330  0860  00B1               	movwf	??_nrf24l01Init
  3331  0861  3077               	movlw	119
  3332  0862                     u4037:	
  3333  0862  0B89               	decfsz	9,f
  3334  0863  2862               	goto	u4037
  3335  0864  0BB1               	decfsz	??_nrf24l01Init,f
  3336  0865  2862               	goto	u4037
  3337  0866  0BB2               	decfsz	??_nrf24l01Init+1,f
  3338  0867  2862               	goto	u4037
  3339                           
  3340                           ;nrf24l01.c: 496: nrf24l01CEHigh();
  3341  0868  3194  246A         	fcall	_nrf24l01CEHigh
  3342                           
  3343                           ;nrf24l01.c: 498: status.TX = statuses.TX.Idle;
  3344  086A  3034               	movlw	low (_statuses| (0+32768))
  3345  086B  0084               	movwf	4
  3346  086C  3098               	movlw	high (_statuses| (0+32768))
  3347  086D  0085               	movwf	5
  3348  086E  0800               	movf	0,w	;code access
  3349  086F  0020               	movlb	0	; select bank0
  3350  0870  00B1               	movwf	??_nrf24l01Init
  3351  0871  0021               	movlb	1	; select bank1
  3352  0872  0867               	movf	_status^(0+128),w	;volatile
  3353  0873  0020               	movlb	0	; select bank0
  3354  0874  0631               	xorwf	??_nrf24l01Init,w
  3355  0875  39F0               	andlw	-16
  3356  0876  0631               	xorwf	??_nrf24l01Init,w
  3357  0877  0021               	movlb	1	; select bank1
  3358  0878  00E7               	movwf	_status^(0+128)	;volatile
  3359                           
  3360                           ;nrf24l01.c: 499: status.RX = statuses.RX.Idle;
  3361  0879  3038               	movlw	low ((_statuses+4)| (0+32768))
  3362  087A  0084               	movwf	4
  3363  087B  3098               	movlw	high ((_statuses+4)| (0+32768))
  3364  087C  0085               	movwf	5
  3365  087D  0800               	movf	0,w	;code access
  3366  087E  0020               	movlb	0	; select bank0
  3367  087F  00B1               	movwf	??_nrf24l01Init
  3368  0880  0EB1               	swapf	??_nrf24l01Init,f
  3369  0881  0021               	movlb	1	; select bank1
  3370  0882  0867               	movf	_status^(0+128),w	;volatile
  3371  0883  0020               	movlb	0	; select bank0
  3372  0884  0631               	xorwf	??_nrf24l01Init,w
  3373  0885  390F               	andlw	-241
  3374  0886  0631               	xorwf	??_nrf24l01Init,w
  3375  0887  0021               	movlb	1	; select bank1
  3376  0888  00E7               	movwf	_status^(0+128)	;volatile
  3377  0889  0008               	return
  3378  088A                     __end_of_nrf24l01Init:	
  3379                           
  3380                           	psect	text2
  3381  15CA                     __ptext2:	
  3382 ;; *************** function _nrf24l01InterfaceInit *****************
  3383 ;; Defined at:
  3384 ;;		line 27 in file "interface.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;		None
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;		None
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  1    wreg      void 
  3391 ;; Registers used:
  3392 ;;		wreg, status,2, status,0
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3402 ;;Total ram usage:        0 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    7
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_nrf24l01Init
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           
  3413                           ;psect for function _nrf24l01InterfaceInit
  3414  15CA                     _nrf24l01InterfaceInit:	
  3415                           
  3416                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3417                           
  3418                           ;incstack = 0
  3419                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3420  15CA  0021               	movlb	1	; select bank1
  3421  15CB  100C               	bcf	12,0	;volatile
  3422                           
  3423                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3424  15CC  108C               	bcf	12,1	;volatile
  3425                           
  3426                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3427  15CD  148E               	bsf	14,1	;volatile
  3428                           
  3429                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3430  15CE  110E               	bcf	14,2	;volatile
  3431                           
  3432                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3433  15CF  100E               	bcf	14,0	;volatile
  3434                           
  3435                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3436  15D0  0024               	movlb	4	; select bank4
  3437  15D1  1295               	bcf	21,5	;volatile
  3438                           
  3439                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3440  15D2  003D               	movlb	29	; select bank29
  3441  15D3  0821               	movf	33,w	;volatile
  3442  15D4  39E0               	andlw	-32
  3443  15D5  3811               	iorlw	17
  3444  15D6  00A1               	movwf	33	;volatile
  3445                           
  3446                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3447  15D7  0822               	movf	34,w	;volatile
  3448  15D8  39E0               	andlw	-32
  3449  15D9  3819               	iorlw	25
  3450  15DA  00A2               	movwf	34	;volatile
  3451                           
  3452                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3453  15DB  0820               	movf	32,w	;volatile
  3454  15DC  39E0               	andlw	-32
  3455  15DD  3818               	iorlw	24
  3456  15DE  00A0               	movwf	32	;volatile
  3457                           
  3458                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3459  15DF  0024               	movlb	4	; select bank4
  3460  15E0  1215               	bcf	21,4	;volatile
  3461                           
  3462                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3463  15E1  1714               	bsf	20,6	;volatile
  3464                           
  3465                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0001;
  3466  15E2  0815               	movf	21,w	;volatile
  3467  15E3  39F0               	andlw	-16
  3468  15E4  3801               	iorlw	1
  3469  15E5  0095               	movwf	21	;volatile
  3470                           
  3471                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3472  15E6  1695               	bsf	21,5	;volatile
  3473  15E7  0008               	return
  3474  15E8                     __end_of_nrf24l01InterfaceInit:	
  3475                           
  3476                           	psect	text3
  3477  0EE2                     __ptext3:	
  3478 ;; *************** function _nrf24l01InitRegisters *****************
  3479 ;; Defined at:
  3480 ;;		line 380 in file "nrf24l01.c"
  3481 ;; Parameters:    Size  Location     Type
  3482 ;;		None
  3483 ;; Auto vars:     Size  Location     Type
  3484 ;;  i               2   15[BANK0 ] unsigned int 
  3485 ;;  DynPD           1   14[BANK0 ] struct .
  3486 ;;  enAA            1   13[BANK0 ] struct .
  3487 ;;  rfSetup         1   12[BANK0 ] struct .
  3488 ;;  feature         1   11[BANK0 ] struct .
  3489 ;;  setupAW         1   10[BANK0 ] struct .
  3490 ;;  channel         1    9[BANK0 ] struct .
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      void 
  3493 ;; Registers used:
  3494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3501 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3502 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3503 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3504 ;;Total ram usage:       10 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:   11
  3507 ;; This function calls:
  3508 ;;		___bmul
  3509 ;;		_nrf24l01SPIEnd
  3510 ;;		_nrf24l01SPISend
  3511 ;;		_nrf24l01SPIStart
  3512 ;;		_nrf24l01Send
  3513 ;;		_nrf24l01SetRXPipe
  3514 ;;		_nrf24l01SetTXPipe
  3515 ;; This function is called by:
  3516 ;;		_nrf24l01Init
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           
  3521                           ;psect for function _nrf24l01InitRegisters
  3522  0EE2                     _nrf24l01InitRegisters:	
  3523                           
  3524                           ;nrf24l01.c: 382: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3525                           
  3526                           ;incstack = 0
  3527                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3528  0EE2  0020               	movlb	0	; select bank0
  3529  0EE3  01A0               	clrf	nrf24l01Send@data
  3530  0EE4  3000               	movlw	0
  3531  0EE5  3196  2607  318E   	fcall	_nrf24l01Send
  3532  0EE8  0020               	movlb	0	; select bank0
  3533  0EE9  00A7               	movwf	??_nrf24l01InitRegisters
  3534  0EEA  0827               	movf	??_nrf24l01InitRegisters,w
  3535  0EEB  0021               	movlb	1	; select bank1
  3536  0EEC  00E9               	movwf	(_status^(0+128)+2)	;volatile
  3537                           
  3538                           ;nrf24l01.c: 384: status.configRegister.PWR_UP = 0;
  3539  0EED  10E9               	bcf	(_status^(0+128)+2),1	;volatile
  3540                           
  3541                           ;nrf24l01.c: 385: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3542  0EEE  0869               	movf	(_status^(0+128)+2),w	;volatile
  3543  0EEF  0020               	movlb	0	; select bank0
  3544  0EF0  00A7               	movwf	??_nrf24l01InitRegisters
  3545  0EF1  0827               	movf	??_nrf24l01InitRegisters,w
  3546  0EF2  00A0               	movwf	nrf24l01Send@data
  3547  0EF3  3020               	movlw	32
  3548  0EF4  3196  2607  318E   	fcall	_nrf24l01Send
  3549                           
  3550                           ;nrf24l01.c: 387: n_SETUP_AW_t setupAW;;nrf24l01.c: 388: setupAW.byte = 0x00;
  3551  0EF7  0020               	movlb	0	; select bank0
  3552  0EF8  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3553                           
  3554                           ;nrf24l01.c: 389: setupAW.AW = 0b11;
  3555  0EF9  3003               	movlw	3
  3556  0EFA  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3557                           
  3558                           ;nrf24l01.c: 390: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3559  0EFB  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3560  0EFC  00A7               	movwf	??_nrf24l01InitRegisters
  3561  0EFD  0827               	movf	??_nrf24l01InitRegisters,w
  3562  0EFE  00A0               	movwf	nrf24l01Send@data
  3563  0EFF  3023               	movlw	35
  3564  0F00  3196  2607  318E   	fcall	_nrf24l01Send
  3565                           
  3566                           ;nrf24l01.c: 393: n_RF_CH_t channel;;nrf24l01.c: 394: channel.RF_CH = 2;
  3567  0F03  0020               	movlb	0	; select bank0
  3568  0F04  0829               	movf	nrf24l01InitRegisters@channel,w
  3569  0F05  3980               	andlw	-128
  3570  0F06  3802               	iorlw	2
  3571  0F07  00A9               	movwf	nrf24l01InitRegisters@channel
  3572                           
  3573                           ;nrf24l01.c: 395: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3574  0F08  0829               	movf	nrf24l01InitRegisters@channel,w
  3575  0F09  00A7               	movwf	??_nrf24l01InitRegisters
  3576  0F0A  0827               	movf	??_nrf24l01InitRegisters,w
  3577  0F0B  00A0               	movwf	nrf24l01Send@data
  3578  0F0C  3025               	movlw	37
  3579  0F0D  3196  2607  318E   	fcall	_nrf24l01Send
  3580                           
  3581                           ;nrf24l01.c: 398: n_RF_SETUP_t rfSetup;;nrf24l01.c: 399: rfSetup.byte = 0x00;
  3582  0F10  0020               	movlb	0	; select bank0
  3583  0F11  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3584                           
  3585                           ;nrf24l01.c: 400: rfSetup.RF_DR_LOW = 0;
  3586  0F12  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3587                           
  3588                           ;nrf24l01.c: 401: rfSetup.RF_DR_HIGH = 1;
  3589  0F13  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3590                           
  3591                           ;nrf24l01.c: 402: rfSetup.RF_PWR = 3;
  3592  0F14  3006               	movlw	6
  3593  0F15  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3594                           
  3595                           ;nrf24l01.c: 403: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3596  0F16  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3597  0F17  00A7               	movwf	??_nrf24l01InitRegisters
  3598  0F18  0827               	movf	??_nrf24l01InitRegisters,w
  3599  0F19  00A0               	movwf	nrf24l01Send@data
  3600  0F1A  3026               	movlw	38
  3601  0F1B  3196  2607  318E   	fcall	_nrf24l01Send
  3602                           
  3603                           ;nrf24l01.c: 406: nrf24l01SetRXPipe(0xFF);
  3604  0F1E  30FF               	movlw	255
  3605  0F1F  3196  2627  318E   	fcall	_nrf24l01SetRXPipe
  3606                           
  3607                           ;nrf24l01.c: 409: n_EN_AA_t enAA;;nrf24l01.c: 410: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3608  0F22  0020               	movlb	0	; select bank0
  3609  0F23  01A0               	clrf	nrf24l01Send@data
  3610  0F24  3001               	movlw	1
  3611  0F25  3196  2607  318E   	fcall	_nrf24l01Send
  3612  0F28  0020               	movlb	0	; select bank0
  3613  0F29  00A7               	movwf	??_nrf24l01InitRegisters
  3614  0F2A  0827               	movf	??_nrf24l01InitRegisters,w
  3615  0F2B  00AD               	movwf	nrf24l01InitRegisters@enAA
  3616                           
  3617                           ;nrf24l01.c: 411: enAA.ENAA_P0 = 0;
  3618  0F2C  102D               	bcf	nrf24l01InitRegisters@enAA,0
  3619                           
  3620                           ;nrf24l01.c: 412: enAA.ENAA_P1 = 0;
  3621  0F2D  10AD               	bcf	nrf24l01InitRegisters@enAA,1
  3622                           
  3623                           ;nrf24l01.c: 413: enAA.ENAA_P2 = 0;
  3624  0F2E  112D               	bcf	nrf24l01InitRegisters@enAA,2
  3625                           
  3626                           ;nrf24l01.c: 414: enAA.ENAA_P3 = 0;
  3627  0F2F  11AD               	bcf	nrf24l01InitRegisters@enAA,3
  3628                           
  3629                           ;nrf24l01.c: 415: enAA.ENAA_P4 = 0;
  3630  0F30  122D               	bcf	nrf24l01InitRegisters@enAA,4
  3631                           
  3632                           ;nrf24l01.c: 416: enAA.ENAA_P5 = 0;
  3633  0F31  12AD               	bcf	nrf24l01InitRegisters@enAA,5
  3634                           
  3635                           ;nrf24l01.c: 417: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3636  0F32  082D               	movf	nrf24l01InitRegisters@enAA,w
  3637  0F33  00A7               	movwf	??_nrf24l01InitRegisters
  3638  0F34  0827               	movf	??_nrf24l01InitRegisters,w
  3639  0F35  00A0               	movwf	nrf24l01Send@data
  3640  0F36  3021               	movlw	33
  3641  0F37  3196  2607  318E   	fcall	_nrf24l01Send
  3642                           
  3643                           ;nrf24l01.c: 421: n_FEATURE_t feature;;nrf24l01.c: 422: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3644  0F3A  0020               	movlb	0	; select bank0
  3645  0F3B  01A0               	clrf	nrf24l01Send@data
  3646  0F3C  301D               	movlw	29
  3647  0F3D  3196  2607  318E   	fcall	_nrf24l01Send
  3648  0F40  0020               	movlb	0	; select bank0
  3649  0F41  00A7               	movwf	??_nrf24l01InitRegisters
  3650  0F42  0827               	movf	??_nrf24l01InitRegisters,w
  3651  0F43  00AB               	movwf	nrf24l01InitRegisters@feature
  3652                           
  3653                           ;nrf24l01.c: 423: feature.EN_DPL = 1;
  3654  0F44  152B               	bsf	nrf24l01InitRegisters@feature,2
  3655                           
  3656                           ;nrf24l01.c: 424: feature.EN_DYN_ACK = 1;
  3657  0F45  142B               	bsf	nrf24l01InitRegisters@feature,0
  3658                           
  3659                           ;nrf24l01.c: 425: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3660  0F46  082B               	movf	nrf24l01InitRegisters@feature,w
  3661  0F47  00A7               	movwf	??_nrf24l01InitRegisters
  3662  0F48  0827               	movf	??_nrf24l01InitRegisters,w
  3663  0F49  00A0               	movwf	nrf24l01Send@data
  3664  0F4A  303D               	movlw	61
  3665  0F4B  3196  2607  318E   	fcall	_nrf24l01Send
  3666                           
  3667                           ;nrf24l01.c: 427: n_DYNPD_t DynPD;;nrf24l01.c: 428: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3668  0F4E  0020               	movlb	0	; select bank0
  3669  0F4F  01A0               	clrf	nrf24l01Send@data
  3670  0F50  301C               	movlw	28
  3671  0F51  3196  2607  318E   	fcall	_nrf24l01Send
  3672  0F54  0020               	movlb	0	; select bank0
  3673  0F55  00A7               	movwf	??_nrf24l01InitRegisters
  3674  0F56  0827               	movf	??_nrf24l01InitRegisters,w
  3675  0F57  00AE               	movwf	nrf24l01InitRegisters@DynPD
  3676                           
  3677                           ;nrf24l01.c: 429: DynPD.DPL_P0 = 1;
  3678  0F58  142E               	bsf	nrf24l01InitRegisters@DynPD,0
  3679                           
  3680                           ;nrf24l01.c: 430: DynPD.DPL_P1 = 1;
  3681  0F59  14AE               	bsf	nrf24l01InitRegisters@DynPD,1
  3682                           
  3683                           ;nrf24l01.c: 431: DynPD.DPL_P2 = 1;
  3684  0F5A  152E               	bsf	nrf24l01InitRegisters@DynPD,2
  3685                           
  3686                           ;nrf24l01.c: 432: DynPD.DPL_P3 = 1;
  3687  0F5B  15AE               	bsf	nrf24l01InitRegisters@DynPD,3
  3688                           
  3689                           ;nrf24l01.c: 433: DynPD.DPL_P4 = 1;
  3690  0F5C  162E               	bsf	nrf24l01InitRegisters@DynPD,4
  3691                           
  3692                           ;nrf24l01.c: 434: DynPD.DPL_P5 = 1;
  3693  0F5D  16AE               	bsf	nrf24l01InitRegisters@DynPD,5
  3694                           
  3695                           ;nrf24l01.c: 435: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3696  0F5E  082E               	movf	nrf24l01InitRegisters@DynPD,w
  3697  0F5F  00A7               	movwf	??_nrf24l01InitRegisters
  3698  0F60  0827               	movf	??_nrf24l01InitRegisters,w
  3699  0F61  00A0               	movwf	nrf24l01Send@data
  3700  0F62  303C               	movlw	60
  3701  0F63  3196  2607  318E   	fcall	_nrf24l01Send
  3702                           
  3703                           ;nrf24l01.c: 438: unsigned int i;;nrf24l01.c: 439: for (i = 0; i < 6; i++){
  3704  0F66  0020               	movlb	0	; select bank0
  3705  0F67  01AF               	clrf	nrf24l01InitRegisters@i
  3706  0F68  01B0               	clrf	nrf24l01InitRegisters@i+1
  3707  0F69  3000               	movlw	0
  3708  0F6A  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3709  0F6B  3006               	movlw	6
  3710  0F6C  1903               	skipnz
  3711  0F6D  022F               	subwf	nrf24l01InitRegisters@i,w
  3712  0F6E  1803               	btfsc	3,0
  3713  0F6F  2FC9               	goto	l3175
  3714  0F70                     l3161:	
  3715                           
  3716                           ;nrf24l01.c: 441: nrf24l01SPIStart();
  3717  0F70  3194  2485  318E   	fcall	_nrf24l01SPIStart
  3718                           
  3719                           ;nrf24l01.c: 442: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3720  0F73  0020               	movlb	0	; select bank0
  3721  0F74  082F               	movf	nrf24l01InitRegisters@i,w
  3722  0F75  3E0A               	addlw	10
  3723  0F76  3820               	iorlw	32
  3724  0F77  3194  2496  318E   	fcall	_nrf24l01SPISend
  3725                           
  3726                           ;nrf24l01.c: 444: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3727  0F7A  304F               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3728  0F7B  0084               	movwf	4
  3729  0F7C  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3730  0F7D  0085               	movwf	5
  3731  0F7E  0800               	movf	0,w	;code access
  3732  0F7F  0020               	movlb	0	; select bank0
  3733  0F80  00A7               	movwf	??_nrf24l01InitRegisters
  3734  0F81  082F               	movf	nrf24l01InitRegisters@i,w
  3735  0F82  00A8               	movwf	??_nrf24l01InitRegisters+1
  3736  0F83  0828               	movf	??_nrf24l01InitRegisters+1,w
  3737  0F84  00A0               	movwf	___bmul@multiplicand
  3738  0F85  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3739  0F86  0084               	movwf	4
  3740  0F87  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3741  0F88  0085               	movwf	5
  3742  0F89  0800               	movf	0,w	;code access
  3743  0F8A  3194  24B2  318E   	fcall	___bmul
  3744  0F8D  0020               	movlb	0	; select bank0
  3745  0F8E  0727               	addwf	??_nrf24l01InitRegisters,w
  3746  0F8F  3194  2496  318E   	fcall	_nrf24l01SPISend
  3747                           
  3748                           ;nrf24l01.c: 446: if (i < 2){
  3749  0F92  3000               	movlw	0
  3750  0F93  0020               	movlb	0	; select bank0
  3751  0F94  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3752  0F95  3002               	movlw	2
  3753  0F96  1903               	skipnz
  3754  0F97  022F               	subwf	nrf24l01InitRegisters@i,w
  3755  0F98  1803               	skipnc
  3756  0F99  2FBA               	goto	l3169
  3757                           
  3758                           ;nrf24l01.c: 447: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3759  0F9A  304E               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3760  0F9B  0084               	movwf	4
  3761  0F9C  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3762  0F9D  0085               	movwf	5
  3763  0F9E  0800               	movf	0,w	;code access
  3764  0F9F  3194  2496  318E   	fcall	_nrf24l01SPISend
  3765                           
  3766                           ;nrf24l01.c: 448: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3767  0FA2  304D               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3768  0FA3  0084               	movwf	4
  3769  0FA4  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3770  0FA5  0085               	movwf	5
  3771  0FA6  0800               	movf	0,w	;code access
  3772  0FA7  3194  2496  318E   	fcall	_nrf24l01SPISend
  3773                           
  3774                           ;nrf24l01.c: 449: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3775  0FAA  304C               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3776  0FAB  0084               	movwf	4
  3777  0FAC  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3778  0FAD  0085               	movwf	5
  3779  0FAE  0800               	movf	0,w	;code access
  3780  0FAF  3194  2496  318E   	fcall	_nrf24l01SPISend
  3781                           
  3782                           ;nrf24l01.c: 450: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3783  0FB2  304B               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3784  0FB3  0084               	movwf	4
  3785  0FB4  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3786  0FB5  0085               	movwf	5
  3787  0FB6  0800               	movf	0,w	;code access
  3788  0FB7  3194  2496  318E   	fcall	_nrf24l01SPISend
  3789  0FBA                     l3169:	
  3790                           
  3791                           ;nrf24l01.c: 451: };nrf24l01.c: 453: nrf24l01SPIEnd();
  3792  0FBA  3194  2476  318E   	fcall	_nrf24l01SPIEnd
  3793  0FBD  3001               	movlw	1
  3794  0FBE  0020               	movlb	0	; select bank0
  3795  0FBF  07AF               	addwf	nrf24l01InitRegisters@i,f
  3796  0FC0  3000               	movlw	0
  3797  0FC1  3DB0               	addwfc	nrf24l01InitRegisters@i+1,f
  3798  0FC2  3000               	movlw	0
  3799  0FC3  0230               	subwf	nrf24l01InitRegisters@i+1,w
  3800  0FC4  3006               	movlw	6
  3801  0FC5  1903               	skipnz
  3802  0FC6  022F               	subwf	nrf24l01InitRegisters@i,w
  3803  0FC7  1C03               	skipc
  3804  0FC8  2F70               	goto	l3161
  3805  0FC9                     l3175:	
  3806                           
  3807                           ;nrf24l01.c: 454: };nrf24l01.c: 456: nrf24l01SetTXPipe(0);
  3808  0FC9  3000               	movlw	0
  3809  0FCA  3188  208A  318E   	fcall	_nrf24l01SetTXPipe
  3810                           
  3811                           ;nrf24l01.c: 460: status.statusRegister.byte = 0x00;
  3812  0FCD  0021               	movlb	1	; select bank1
  3813  0FCE  01E8               	clrf	(_status^(0+128)+1)	;volatile
  3814                           
  3815                           ;nrf24l01.c: 461: status.statusRegister.RX_DR = 1;
  3816  0FCF  1768               	bsf	(_status^(0+128)+1),6	;volatile
  3817                           
  3818                           ;nrf24l01.c: 462: status.statusRegister.TX_DS = 1;
  3819  0FD0  16E8               	bsf	(_status^(0+128)+1),5	;volatile
  3820                           
  3821                           ;nrf24l01.c: 463: status.statusRegister.MAX_RT = 1;
  3822  0FD1  1668               	bsf	(_status^(0+128)+1),4	;volatile
  3823                           
  3824                           ;nrf24l01.c: 464: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  3825  0FD2  0868               	movf	(_status^(0+128)+1),w	;volatile
  3826  0FD3  0020               	movlb	0	; select bank0
  3827  0FD4  00A7               	movwf	??_nrf24l01InitRegisters
  3828  0FD5  0827               	movf	??_nrf24l01InitRegisters,w
  3829  0FD6  00A0               	movwf	nrf24l01Send@data
  3830  0FD7  3027               	movlw	39
  3831  0FD8  3196  2607  318E   	fcall	_nrf24l01Send
  3832                           
  3833                           ;nrf24l01.c: 466: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  3834  0FDB  0020               	movlb	0	; select bank0
  3835  0FDC  01A0               	clrf	nrf24l01Send@data
  3836  0FDD  3007               	movlw	7
  3837  0FDE  3196  2607  318E   	fcall	_nrf24l01Send
  3838  0FE1  0020               	movlb	0	; select bank0
  3839  0FE2  00A7               	movwf	??_nrf24l01InitRegisters
  3840  0FE3  0827               	movf	??_nrf24l01InitRegisters,w
  3841  0FE4  0021               	movlb	1	; select bank1
  3842  0FE5  00E8               	movwf	(_status^(0+128)+1)	;volatile
  3843                           
  3844                           ;nrf24l01.c: 469: nrf24l01Send((unsigned) 0b11100001, 0);
  3845  0FE6  0020               	movlb	0	; select bank0
  3846  0FE7  01A0               	clrf	nrf24l01Send@data
  3847  0FE8  30E1               	movlw	225
  3848  0FE9  3196  2607  318E   	fcall	_nrf24l01Send
  3849                           
  3850                           ;nrf24l01.c: 470: nrf24l01Send((unsigned) 0b11100010, 0);
  3851  0FEC  0020               	movlb	0	; select bank0
  3852  0FED  01A0               	clrf	nrf24l01Send@data
  3853  0FEE  30E2               	movlw	226
  3854  0FEF  3196  2607  318E   	fcall	_nrf24l01Send
  3855                           
  3856                           ;nrf24l01.c: 473: status.configRegister.PRIM_RX = 0;
  3857  0FF2  0021               	movlb	1	; select bank1
  3858  0FF3  1069               	bcf	(_status^(0+128)+2),0	;volatile
  3859                           
  3860                           ;nrf24l01.c: 474: status.configRegister.EN_CRC = 1;
  3861  0FF4  15E9               	bsf	(_status^(0+128)+2),3	;volatile
  3862                           
  3863                           ;nrf24l01.c: 475: status.configRegister.CRCO = 1;
  3864  0FF5  1569               	bsf	(_status^(0+128)+2),2	;volatile
  3865                           
  3866                           ;nrf24l01.c: 476: status.configRegister.PWR_UP = 1;
  3867  0FF6  14E9               	bsf	(_status^(0+128)+2),1	;volatile
  3868                           
  3869                           ;nrf24l01.c: 477: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3870  0FF7  0869               	movf	(_status^(0+128)+2),w	;volatile
  3871  0FF8  0020               	movlb	0	; select bank0
  3872  0FF9  00A7               	movwf	??_nrf24l01InitRegisters
  3873  0FFA  0827               	movf	??_nrf24l01InitRegisters,w
  3874  0FFB  00A0               	movwf	nrf24l01Send@data
  3875  0FFC  3020               	movlw	32
  3876  0FFD  3196  2607         	fcall	_nrf24l01Send
  3877  0FFF  0008               	return
  3878  1000                     __end_of_nrf24l01InitRegisters:	
  3879                           
  3880                           	psect	text4
  3881  088A                     __ptext4:	
  3882 ;; *************** function _nrf24l01SetTXPipe *****************
  3883 ;; Defined at:
  3884 ;;		line 183 in file "nrf24l01.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;  pipe            1    wreg     unsigned char 
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;  pipe            1    6[BANK0 ] unsigned char 
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  1    wreg      void 
  3891 ;; Registers used:
  3892 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3900 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3901 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3902 ;;Total ram usage:        3 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; Hardware stack levels required when called:    9
  3905 ;; This function calls:
  3906 ;;		___bmul
  3907 ;;		_nrf24l01SPIEnd
  3908 ;;		_nrf24l01SPISend
  3909 ;;		_nrf24l01SPIStart
  3910 ;; This function is called by:
  3911 ;;		_main
  3912 ;;		_nrf24l01InitRegisters
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           
  3917                           ;psect for function _nrf24l01SetTXPipe
  3918  088A                     _nrf24l01SetTXPipe:	
  3919                           
  3920                           ;incstack = 0
  3921                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3922                           ;nrf24l01SetTXPipe@pipe stored from wreg
  3923  088A  0020               	movlb	0	; select bank0
  3924  088B  00A6               	movwf	nrf24l01SetTXPipe@pipe
  3925                           
  3926                           ;nrf24l01.c: 186: nrf24l01SPIStart();
  3927  088C  3194  2485  3188   	fcall	_nrf24l01SPIStart
  3928                           
  3929                           ;nrf24l01.c: 187: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  3930  088F  3030               	movlw	48
  3931  0890  3194  2496  3188   	fcall	_nrf24l01SPISend
  3932                           
  3933                           ;nrf24l01.c: 188: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  3934  0893  304F               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3935  0894  0084               	movwf	4
  3936  0895  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3937  0896  0085               	movwf	5
  3938  0897  0800               	movf	0,w	;code access
  3939  0898  0020               	movlb	0	; select bank0
  3940  0899  00A4               	movwf	??_nrf24l01SetTXPipe
  3941  089A  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3942  089B  0084               	movwf	4
  3943  089C  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3944  089D  0085               	movwf	5
  3945  089E  0800               	movf	0,w	;code access
  3946  089F  00A5               	movwf	??_nrf24l01SetTXPipe+1
  3947  08A0  0825               	movf	??_nrf24l01SetTXPipe+1,w
  3948  08A1  00A0               	movwf	___bmul@multiplicand
  3949  08A2  0826               	movf	nrf24l01SetTXPipe@pipe,w
  3950  08A3  3194  24B2  3188   	fcall	___bmul
  3951  08A6  0020               	movlb	0	; select bank0
  3952  08A7  0724               	addwf	??_nrf24l01SetTXPipe,w
  3953  08A8  3194  2496  3188   	fcall	_nrf24l01SPISend
  3954                           
  3955                           ;nrf24l01.c: 189: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3956  08AB  304E               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3957  08AC  0084               	movwf	4
  3958  08AD  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3959  08AE  0085               	movwf	5
  3960  08AF  0800               	movf	0,w	;code access
  3961  08B0  3194  2496  3188   	fcall	_nrf24l01SPISend
  3962                           
  3963                           ;nrf24l01.c: 190: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3964  08B3  304D               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3965  08B4  0084               	movwf	4
  3966  08B5  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3967  08B6  0085               	movwf	5
  3968  08B7  0800               	movf	0,w	;code access
  3969  08B8  3194  2496  3188   	fcall	_nrf24l01SPISend
  3970                           
  3971                           ;nrf24l01.c: 191: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3972  08BB  304C               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3973  08BC  0084               	movwf	4
  3974  08BD  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3975  08BE  0085               	movwf	5
  3976  08BF  0800               	movf	0,w	;code access
  3977  08C0  3194  2496  3188   	fcall	_nrf24l01SPISend
  3978                           
  3979                           ;nrf24l01.c: 192: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3980  08C3  304B               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3981  08C4  0084               	movwf	4
  3982  08C5  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3983  08C6  0085               	movwf	5
  3984  08C7  0800               	movf	0,w	;code access
  3985  08C8  3194  2496  3188   	fcall	_nrf24l01SPISend
  3986                           
  3987                           ;nrf24l01.c: 193: nrf24l01SPIEnd();
  3988  08CB  3194  2476         	fcall	_nrf24l01SPIEnd
  3989  08CD  0008               	return
  3990  08CE                     __end_of_nrf24l01SetTXPipe:	
  3991                           
  3992                           	psect	text5
  3993  14B2                     __ptext5:	
  3994 ;; *************** function ___bmul *****************
  3995 ;; Defined at:
  3996 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;  multiplier      1    wreg     unsigned char 
  3999 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4002 ;;  product         1    2[BANK0 ] unsigned char 
  4003 ;; Return value:  Size  Location     Type
  4004 ;;                  1    wreg      unsigned char 
  4005 ;; Registers used:
  4006 ;;		wreg, status,2, status,0
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4012 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4013 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;Total ram usage:        4 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:    7
  4019 ;; This function calls:
  4020 ;;		Nothing
  4021 ;; This function is called by:
  4022 ;;		_nrf24l01SetTXPipe
  4023 ;;		_nrf24l01InitRegisters
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           
  4028                           ;psect for function ___bmul
  4029  14B2                     ___bmul:	
  4030                           
  4031                           ;incstack = 0
  4032                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4033                           ;___bmul@multiplier stored from wreg
  4034  14B2  0020               	movlb	0	; select bank0
  4035  14B3  00A3               	movwf	___bmul@multiplier
  4036  14B4  01A2               	clrf	___bmul@product
  4037  14B5                     l2683:	
  4038  14B5  1C23               	btfss	___bmul@multiplier,0
  4039  14B6  2CBB               	goto	l2687
  4040  14B7  0820               	movf	___bmul@multiplicand,w
  4041  14B8  00A1               	movwf	??___bmul
  4042  14B9  0821               	movf	??___bmul,w
  4043  14BA  07A2               	addwf	___bmul@product,f
  4044  14BB                     l2687:	
  4045  14BB  1003               	clrc
  4046  14BC  0DA0               	rlf	___bmul@multiplicand,f
  4047  14BD  1003               	clrc
  4048  14BE  0CA3               	rrf	___bmul@multiplier,f
  4049  14BF  0823               	movf	___bmul@multiplier,w
  4050  14C0  1D03               	btfss	3,2
  4051  14C1  2CB5               	goto	l2683
  4052  14C2  0822               	movf	___bmul@product,w
  4053  14C3  0008               	return
  4054  14C4                     __end_of___bmul:	
  4055                           
  4056                           	psect	text6
  4057  1627                     __ptext6:	
  4058 ;; *************** function _nrf24l01SetRXPipe *****************
  4059 ;; Defined at:
  4060 ;;		line 196 in file "nrf24l01.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  pipe            1    wreg     unsigned char 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  pipe            1    5[BANK0 ] unsigned char 
  4065 ;;  enRXAddr        1    6[BANK0 ] struct .
  4066 ;; Return value:  Size  Location     Type
  4067 ;;                  1    wreg      void 
  4068 ;; Registers used:
  4069 ;;		wreg, status,2, status,0, pclath, cstack
  4070 ;; Tracked objects:
  4071 ;;		On entry : 0/0
  4072 ;;		On exit  : 0/0
  4073 ;;		Unchanged: 0/0
  4074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4076 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4077 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4078 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4079 ;;Total ram usage:        4 bytes
  4080 ;; Hardware stack levels used:    1
  4081 ;; Hardware stack levels required when called:   10
  4082 ;; This function calls:
  4083 ;;		_nrf24l01Send
  4084 ;; This function is called by:
  4085 ;;		_nrf24l01InitRegisters
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           
  4090                           ;psect for function _nrf24l01SetRXPipe
  4091  1627                     _nrf24l01SetRXPipe:	
  4092                           
  4093                           ;incstack = 0
  4094                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4095                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4096  1627  0020               	movlb	0	; select bank0
  4097  1628  00A5               	movwf	nrf24l01SetRXPipe@pipe
  4098                           
  4099                           ;nrf24l01.c: 198: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 200: if (pipe > 5){
  4100  1629  3006               	movlw	6
  4101  162A  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  4102  162B  1C03               	skipc
  4103  162C  2E34               	goto	l263
  4104                           
  4105                           ;nrf24l01.c: 201: enRXAddr.ERX_P0 = 1;
  4106  162D  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4107                           
  4108                           ;nrf24l01.c: 202: enRXAddr.ERX_P1 = 1;
  4109  162E  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4110                           
  4111                           ;nrf24l01.c: 203: enRXAddr.ERX_P2 = 1;
  4112  162F  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4113                           
  4114                           ;nrf24l01.c: 204: enRXAddr.ERX_P3 = 1;
  4115  1630  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4116                           
  4117                           ;nrf24l01.c: 205: enRXAddr.ERX_P4 = 1;
  4118  1631  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4119                           
  4120                           ;nrf24l01.c: 206: enRXAddr.ERX_P5 = 1;
  4121  1632  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4122                           
  4123                           ;nrf24l01.c: 207: }
  4124  1633  2E40               	goto	l2921
  4125  1634                     l263:	
  4126                           
  4127                           ;nrf24l01.c: 209: else{;nrf24l01.c: 210: enRXAddr.ERX_P0 = 1;
  4128  1634  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4129                           
  4130                           ;nrf24l01.c: 211: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4131  1635  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4132  1636  00A3               	movwf	??_nrf24l01SetRXPipe
  4133  1637  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4134  1638  2E3A               	goto	u3134
  4135  1639                     u3135:	
  4136  1639  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4137  163A                     u3134:	
  4138  163A  0B89               	decfsz	9,f
  4139  163B  2E39               	goto	u3135
  4140  163C  0823               	movf	??_nrf24l01SetRXPipe,w
  4141  163D  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4142  163E  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4143  163F  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4144  1640                     l2921:	
  4145                           
  4146                           ;nrf24l01.c: 212: };nrf24l01.c: 214: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4147  1640  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4148  1641  00A3               	movwf	??_nrf24l01SetRXPipe
  4149  1642  0823               	movf	??_nrf24l01SetRXPipe,w
  4150  1643  00A0               	movwf	nrf24l01Send@data
  4151  1644  3022               	movlw	34
  4152  1645  3196  2607         	fcall	_nrf24l01Send
  4153  1647  0008               	return
  4154  1648                     __end_of_nrf24l01SetRXPipe:	
  4155                           
  4156                           	psect	text7
  4157  178C                     __ptext7:	
  4158 ;; *************** function _nrf24l01GetPipe *****************
  4159 ;; Defined at:
  4160 ;;		line 166 in file "main.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;  name            1    wreg     PTR unsigned char 
  4163 ;;		 -> romDataMap(28), 
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4166 ;;		 -> romDataMap(28), 
  4167 ;;  i               1   10[BANK0 ] unsigned char 
  4168 ;;  pipe            1    8[BANK0 ] unsigned char 
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  1    wreg      unsigned char 
  4171 ;; Registers used:
  4172 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4179 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;Total ram usage:        5 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    8
  4185 ;; This function calls:
  4186 ;;		___lwmod
  4187 ;;		_strlen
  4188 ;; This function is called by:
  4189 ;;		_main
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           
  4194                           ;psect for function _nrf24l01GetPipe
  4195  178C                     _nrf24l01GetPipe:	
  4196                           
  4197                           ;incstack = 0
  4198                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4199                           ;nrf24l01GetPipe@name stored from wreg
  4200  178C  0020               	movlb	0	; select bank0
  4201  178D  00A9               	movwf	nrf24l01GetPipe@name
  4202                           
  4203                           ;main.c: 167: unsigned char pipe = 0;
  4204  178E  01A8               	clrf	nrf24l01GetPipe@pipe
  4205                           
  4206                           ;main.c: 168: unsigned char i = 0;
  4207  178F  01AA               	clrf	nrf24l01GetPipe@i
  4208                           
  4209                           ;main.c: 171: for (i = 0; i < strlen(name); i++){
  4210  1790  01AA               	clrf	nrf24l01GetPipe@i
  4211  1791                     l3785:	
  4212  1791  0829               	movf	nrf24l01GetPipe@name,w
  4213  1792  00A0               	movwf	strlen@s
  4214  1793  3002               	movlw	2
  4215  1794  00A1               	movwf	strlen@s+1
  4216  1795  3195  25E8  3197   	fcall	_strlen
  4217  1798  0020               	movlb	0	; select bank0
  4218  1799  082A               	movf	nrf24l01GetPipe@i,w
  4219  179A  00A6               	movwf	??_nrf24l01GetPipe
  4220  179B  01A7               	clrf	??_nrf24l01GetPipe+1
  4221  179C  0821               	movf	?_strlen+1,w
  4222  179D  0227               	subwf	??_nrf24l01GetPipe+1,w
  4223  179E  1D03               	skipz
  4224  179F  2FA2               	goto	u3995
  4225  17A0  0820               	movf	?_strlen,w
  4226  17A1  0226               	subwf	??_nrf24l01GetPipe,w
  4227  17A2                     u3995:	
  4228  17A2  1803               	btfsc	3,0
  4229  17A3  2FB4               	goto	l3787
  4230                           
  4231                           ;main.c: 172: pipe+= name[i];
  4232  17A4  082A               	movf	nrf24l01GetPipe@i,w
  4233  17A5  0729               	addwf	nrf24l01GetPipe@name,w
  4234  17A6  00A6               	movwf	??_nrf24l01GetPipe
  4235  17A7  0826               	movf	??_nrf24l01GetPipe,w
  4236  17A8  0086               	movwf	6
  4237  17A9  3002               	movlw	2	; select bank4/5
  4238  17AA  0087               	movwf	7
  4239  17AB  0801               	movf	1,w
  4240  17AC  00A7               	movwf	??_nrf24l01GetPipe+1
  4241  17AD  0827               	movf	??_nrf24l01GetPipe+1,w
  4242  17AE  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4243  17AF  3001               	movlw	1
  4244  17B0  00A6               	movwf	??_nrf24l01GetPipe
  4245  17B1  0826               	movf	??_nrf24l01GetPipe,w
  4246  17B2  07AA               	addwf	nrf24l01GetPipe@i,f
  4247  17B3  2F91               	goto	l3785
  4248  17B4                     l3787:	
  4249                           
  4250                           ;main.c: 173: };main.c: 175: return (unsigned) pipe % 6;
  4251  17B4  3006               	movlw	6
  4252  17B5  00A0               	movwf	___lwmod@divisor
  4253  17B6  3000               	movlw	0
  4254  17B7  00A1               	movwf	___lwmod@divisor+1
  4255  17B8  0828               	movf	nrf24l01GetPipe@pipe,w
  4256  17B9  00A6               	movwf	??_nrf24l01GetPipe
  4257  17BA  01A7               	clrf	??_nrf24l01GetPipe+1
  4258  17BB  0826               	movf	??_nrf24l01GetPipe,w
  4259  17BC  00A2               	movwf	___lwmod@dividend
  4260  17BD  0827               	movf	??_nrf24l01GetPipe+1,w
  4261  17BE  00A3               	movwf	___lwmod@dividend+1
  4262  17BF  3197  275F         	fcall	___lwmod
  4263  17C1  0020               	movlb	0	; select bank0
  4264  17C2  0820               	movf	?___lwmod,w
  4265  17C3  0008               	return
  4266  17C4                     __end_of_nrf24l01GetPipe:	
  4267                           
  4268                           	psect	text8
  4269  175F                     __ptext8:	
  4270 ;; *************** function ___lwmod *****************
  4271 ;; Defined at:
  4272 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  divisor         2    0[BANK0 ] unsigned int 
  4275 ;;  dividend        2    2[BANK0 ] unsigned int 
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;  counter         1    5[BANK0 ] unsigned char 
  4278 ;; Return value:  Size  Location     Type
  4279 ;;                  2    0[BANK0 ] unsigned int 
  4280 ;; Registers used:
  4281 ;;		wreg, status,2, status,0
  4282 ;; Tracked objects:
  4283 ;;		On entry : 0/0
  4284 ;;		On exit  : 0/0
  4285 ;;		Unchanged: 0/0
  4286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4287 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;Total ram usage:        6 bytes
  4292 ;; Hardware stack levels used:    1
  4293 ;; Hardware stack levels required when called:    7
  4294 ;; This function calls:
  4295 ;;		Nothing
  4296 ;; This function is called by:
  4297 ;;		_nrf24l01GetPipe
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           
  4302                           ;psect for function ___lwmod
  4303  175F                     ___lwmod:	
  4304                           
  4305                           ;incstack = 0
  4306                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4307  175F  0020               	movlb	0	; select bank0
  4308  1760  0820               	movf	___lwmod@divisor,w
  4309  1761  0421               	iorwf	___lwmod@divisor+1,w
  4310  1762  1903               	btfsc	3,2
  4311  1763  2F87               	goto	l3225
  4312  1764  01A5               	clrf	___lwmod@counter
  4313  1765  0AA5               	incf	___lwmod@counter,f
  4314  1766                     l3215:	
  4315  1766  1BA1               	btfsc	___lwmod@divisor+1,7
  4316  1767  2F72               	goto	l3217
  4317  1768  3001               	movlw	1
  4318  1769                     u3365:	
  4319  1769  35A0               	lslf	___lwmod@divisor,f
  4320  176A  0DA1               	rlf	___lwmod@divisor+1,f
  4321  176B  0B89               	decfsz	9,f
  4322  176C  2F69               	goto	u3365
  4323  176D  3001               	movlw	1
  4324  176E  00A4               	movwf	??___lwmod
  4325  176F  0824               	movf	??___lwmod,w
  4326  1770  07A5               	addwf	___lwmod@counter,f
  4327  1771  2F66               	goto	l3215
  4328  1772                     l3217:	
  4329  1772  0821               	movf	___lwmod@divisor+1,w
  4330  1773  0223               	subwf	___lwmod@dividend+1,w
  4331  1774  1D03               	skipz
  4332  1775  2F78               	goto	u3385
  4333  1776  0820               	movf	___lwmod@divisor,w
  4334  1777  0222               	subwf	___lwmod@dividend,w
  4335  1778                     u3385:	
  4336  1778  1C03               	skipc
  4337  1779  2F7E               	goto	l3221
  4338  177A  0820               	movf	___lwmod@divisor,w
  4339  177B  02A2               	subwf	___lwmod@dividend,f
  4340  177C  0821               	movf	___lwmod@divisor+1,w
  4341  177D  3BA3               	subwfb	___lwmod@dividend+1,f
  4342  177E                     l3221:	
  4343  177E  3001               	movlw	1
  4344  177F                     u3395:	
  4345  177F  36A1               	lsrf	___lwmod@divisor+1,f
  4346  1780  0CA0               	rrf	___lwmod@divisor,f
  4347  1781  0B89               	decfsz	9,f
  4348  1782  2F7F               	goto	u3395
  4349  1783  3001               	movlw	1
  4350  1784  02A5               	subwf	___lwmod@counter,f
  4351  1785  1D03               	btfss	3,2
  4352  1786  2F72               	goto	l3217
  4353  1787                     l3225:	
  4354  1787  0823               	movf	___lwmod@dividend+1,w
  4355  1788  00A1               	movwf	?___lwmod+1
  4356  1789  0822               	movf	___lwmod@dividend,w
  4357  178A  00A0               	movwf	?___lwmod
  4358  178B  0008               	return
  4359  178C                     __end_of___lwmod:	
  4360                           
  4361                           	psect	text9
  4362  0036                     __ptext9:	
  4363 ;; *************** function _loop *****************
  4364 ;; Defined at:
  4365 ;;		line 124 in file "main.c"
  4366 ;; Parameters:    Size  Location     Type
  4367 ;;		None
  4368 ;; Auto vars:     Size  Location     Type
  4369 ;;  packet         33   16[BANK2 ] struct .
  4370 ;;  ta              3    3[BANK2 ] float 
  4371 ;;  vt              3    0[BANK2 ] float 
  4372 ;;  rfSetup         1   12[BANK2 ] struct .
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  1    wreg      void 
  4375 ;; Registers used:
  4376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;      Locals:         0       0       0      49       0       0       0       0       0       0       0       0       
      +0       0
  4384 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;      Totals:         0       0       1      49       0       0       0       0       0       0       0       0       
      +0       0
  4386 ;;Total ram usage:       50 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; Hardware stack levels required when called:   14
  4389 ;; This function calls:
  4390 ;;		___ftadd
  4391 ;;		___ftdiv
  4392 ;;		___ftmul
  4393 ;;		___ftneg
  4394 ;;		___lbtoft
  4395 ;;		___lltoft
  4396 ;;		_getADCValue
  4397 ;;		_nrf24l01Send
  4398 ;;		_sendMessage
  4399 ;; This function is called by:
  4400 ;;		_main
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           
  4405                           ;psect for function _loop
  4406  0036                     _loop:	
  4407                           
  4408                           ;main.c: 126: nrf24l01Packet_t packet;;main.c: 128: sendMessage(&packet, "DBG1", counter
      +                          );
  4409                           
  4410                           ;incstack = 0
  4411                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4412  0036  0022               	movlb	2	; select bank2
  4413  0037  0854               	movf	(_counter+3)^(0+256),w
  4414  0038  0020               	movlb	0	; select bank0
  4415  0039  00AB               	movwf	___lltoft@c+3
  4416  003A  0022               	movlb	2	; select bank2
  4417  003B  0853               	movf	(_counter+2)^(0+256),w
  4418  003C  0020               	movlb	0	; select bank0
  4419  003D  00AA               	movwf	___lltoft@c+2
  4420  003E  0022               	movlb	2	; select bank2
  4421  003F  0852               	movf	(_counter+1)^(0+256),w
  4422  0040  0020               	movlb	0	; select bank0
  4423  0041  00A9               	movwf	___lltoft@c+1
  4424  0042  0022               	movlb	2	; select bank2
  4425  0043  0851               	movf	_counter^(0+256),w
  4426  0044  0020               	movlb	0	; select bank0
  4427  0045  00A8               	movwf	___lltoft@c
  4428  0046  3197  2709  3180   	fcall	___lltoft
  4429  0049  0020               	movlb	0	; select bank0
  4430  004A  0828               	movf	?___lltoft,w
  4431  004B  0022               	movlb	2	; select bank2
  4432  004C  00AD               	movwf	_loop$1962^(0+256)
  4433  004D  0020               	movlb	0	; select bank0
  4434  004E  0829               	movf	?___lltoft+1,w
  4435  004F  0022               	movlb	2	; select bank2
  4436  0050  00AE               	movwf	(_loop$1962+1)^(0+256)
  4437  0051  0020               	movlb	0	; select bank0
  4438  0052  082A               	movf	?___lltoft+2,w
  4439  0053  0022               	movlb	2	; select bank2
  4440  0054  00AF               	movwf	(_loop$1962+2)^(0+256)
  4441                           
  4442                           ;main.c: 126: nrf24l01Packet_t packet;;main.c: 128: sendMessage(&packet, "DBG1", counter
      +                          );
  4443  0055  3030               	movlw	low loop@packet
  4444  0056  0021               	movlb	1	; select bank1
  4445  0057  00B9               	movwf	sendMessage@packet^(0+128)
  4446  0058  3001               	movlw	high loop@packet
  4447  0059  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4448  005A  3050               	movlw	low (STR_3| (0+32768))
  4449  005B  00BB               	movwf	sendMessage@topic^(0+128)
  4450  005C  3098               	movlw	high (STR_3| (0+32768))
  4451  005D  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4452  005E  0022               	movlb	2	; select bank2
  4453  005F  082D               	movf	_loop$1962^(0+256),w
  4454  0060  0021               	movlb	1	; select bank1
  4455  0061  00BD               	movwf	sendMessage@value^(0+128)
  4456  0062  0022               	movlb	2	; select bank2
  4457  0063  082E               	movf	(_loop$1962+1)^(0+256),w
  4458  0064  0021               	movlb	1	; select bank1
  4459  0065  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4460  0066  0022               	movlb	2	; select bank2
  4461  0067  082F               	movf	(_loop$1962+2)^(0+256),w
  4462  0068  0021               	movlb	1	; select bank1
  4463  0069  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4464  006A  318A  2231  3180   	fcall	_sendMessage
  4465                           
  4466                           ;main.c: 134: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4467  006D  30CF               	movlw	207
  4468  006E  0020               	movlb	0	; select bank0
  4469  006F  00D7               	movwf	___ftmul@f1
  4470  0070  3046               	movlw	70
  4471  0071  00D8               	movwf	___ftmul@f1+1
  4472  0072  3040               	movlw	64
  4473  0073  00D9               	movwf	___ftmul@f1+2
  4474  0074  3004               	movlw	4
  4475  0075  318B  23ED  3180   	fcall	_getADCValue
  4476  0078  0020               	movlb	0	; select bank0
  4477  0079  084B               	movf	?_getADCValue,w
  4478  007A  00DA               	movwf	___ftmul@f2
  4479  007B  084C               	movf	?_getADCValue+1,w
  4480  007C  00DB               	movwf	___ftmul@f2+1
  4481  007D  084D               	movf	?_getADCValue+2,w
  4482  007E  00DC               	movwf	___ftmul@f2+2
  4483  007F  318D  253C  3180   	fcall	___ftmul
  4484  0082  0020               	movlb	0	; select bank0
  4485  0083  0857               	movf	?___ftmul,w
  4486  0084  0022               	movlb	2	; select bank2
  4487  0085  00A6               	movwf	_loop$1963^(0+256)
  4488  0086  0020               	movlb	0	; select bank0
  4489  0087  0858               	movf	?___ftmul+1,w
  4490  0088  0022               	movlb	2	; select bank2
  4491  0089  00A7               	movwf	(_loop$1963+1)^(0+256)
  4492  008A  0020               	movlb	0	; select bank0
  4493  008B  0859               	movf	?___ftmul+2,w
  4494  008C  0022               	movlb	2	; select bank2
  4495  008D  00A8               	movwf	(_loop$1963+2)^(0+256)
  4496                           
  4497                           ;main.c: 134: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4498  008E  3030               	movlw	low loop@packet
  4499  008F  0021               	movlb	1	; select bank1
  4500  0090  00B9               	movwf	sendMessage@packet^(0+128)
  4501  0091  3001               	movlw	high loop@packet
  4502  0092  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4503  0093  306E               	movlw	low (STR_4| (0+32768))
  4504  0094  00BB               	movwf	sendMessage@topic^(0+128)
  4505  0095  3098               	movlw	high (STR_4| (0+32768))
  4506  0096  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4507  0097  0022               	movlb	2	; select bank2
  4508  0098  0826               	movf	_loop$1963^(0+256),w
  4509  0099  0021               	movlb	1	; select bank1
  4510  009A  00BD               	movwf	sendMessage@value^(0+128)
  4511  009B  0022               	movlb	2	; select bank2
  4512  009C  0827               	movf	(_loop$1963+1)^(0+256),w
  4513  009D  0021               	movlb	1	; select bank1
  4514  009E  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4515  009F  0022               	movlb	2	; select bank2
  4516  00A0  0828               	movf	(_loop$1963+2)^(0+256),w
  4517  00A1  0021               	movlb	1	; select bank1
  4518  00A2  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4519  00A3  318A  2231  3180   	fcall	_sendMessage
  4520                           
  4521                           ;main.c: 136: sendMessage(&packet, "DBG2", counter);
  4522  00A6  0022               	movlb	2	; select bank2
  4523  00A7  0854               	movf	(_counter+3)^(0+256),w
  4524  00A8  0020               	movlb	0	; select bank0
  4525  00A9  00AB               	movwf	___lltoft@c+3
  4526  00AA  0022               	movlb	2	; select bank2
  4527  00AB  0853               	movf	(_counter+2)^(0+256),w
  4528  00AC  0020               	movlb	0	; select bank0
  4529  00AD  00AA               	movwf	___lltoft@c+2
  4530  00AE  0022               	movlb	2	; select bank2
  4531  00AF  0852               	movf	(_counter+1)^(0+256),w
  4532  00B0  0020               	movlb	0	; select bank0
  4533  00B1  00A9               	movwf	___lltoft@c+1
  4534  00B2  0022               	movlb	2	; select bank2
  4535  00B3  0851               	movf	_counter^(0+256),w
  4536  00B4  0020               	movlb	0	; select bank0
  4537  00B5  00A8               	movwf	___lltoft@c
  4538  00B6  3197  2709  3180   	fcall	___lltoft
  4539  00B9  0020               	movlb	0	; select bank0
  4540  00BA  0828               	movf	?___lltoft,w
  4541  00BB  0022               	movlb	2	; select bank2
  4542  00BC  00AD               	movwf	_loop$1962^(0+256)
  4543  00BD  0020               	movlb	0	; select bank0
  4544  00BE  0829               	movf	?___lltoft+1,w
  4545  00BF  0022               	movlb	2	; select bank2
  4546  00C0  00AE               	movwf	(_loop$1962+1)^(0+256)
  4547  00C1  0020               	movlb	0	; select bank0
  4548  00C2  082A               	movf	?___lltoft+2,w
  4549  00C3  0022               	movlb	2	; select bank2
  4550  00C4  00AF               	movwf	(_loop$1962+2)^(0+256)
  4551                           
  4552                           ;main.c: 136: sendMessage(&packet, "DBG2", counter);
  4553  00C5  3030               	movlw	low loop@packet
  4554  00C6  0021               	movlb	1	; select bank1
  4555  00C7  00B9               	movwf	sendMessage@packet^(0+128)
  4556  00C8  3001               	movlw	high loop@packet
  4557  00C9  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4558  00CA  3055               	movlw	low (STR_5| (0+32768))
  4559  00CB  00BB               	movwf	sendMessage@topic^(0+128)
  4560  00CC  3098               	movlw	high (STR_5| (0+32768))
  4561  00CD  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4562  00CE  0022               	movlb	2	; select bank2
  4563  00CF  082D               	movf	_loop$1962^(0+256),w
  4564  00D0  0021               	movlb	1	; select bank1
  4565  00D1  00BD               	movwf	sendMessage@value^(0+128)
  4566  00D2  0022               	movlb	2	; select bank2
  4567  00D3  082E               	movf	(_loop$1962+1)^(0+256),w
  4568  00D4  0021               	movlb	1	; select bank1
  4569  00D5  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4570  00D6  0022               	movlb	2	; select bank2
  4571  00D7  082F               	movf	(_loop$1962+2)^(0+256),w
  4572  00D8  0021               	movlb	1	; select bank1
  4573  00D9  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4574  00DA  318A  2231  3180   	fcall	_sendMessage
  4575                           
  4576                           ;main.c: 139: sendMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4577  00DD  3030               	movlw	low loop@packet
  4578  00DE  0021               	movlb	1	; select bank1
  4579  00DF  00B9               	movwf	sendMessage@packet^(0+128)
  4580  00E0  3001               	movlw	high loop@packet
  4581  00E1  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4582  00E2  303E               	movlw	low (STR_6| (0+32768))
  4583  00E3  00BB               	movwf	sendMessage@topic^(0+128)
  4584  00E4  3098               	movlw	high (STR_6| (0+32768))
  4585  00E5  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4586  00E6  3013               	movlw	19
  4587  00E7  318B  23ED  3180   	fcall	_getADCValue
  4588  00EA  0020               	movlb	0	; select bank0
  4589  00EB  084B               	movf	?_getADCValue,w
  4590  00EC  0021               	movlb	1	; select bank1
  4591  00ED  00BD               	movwf	sendMessage@value^(0+128)
  4592  00EE  0020               	movlb	0	; select bank0
  4593  00EF  084C               	movf	?_getADCValue+1,w
  4594  00F0  0021               	movlb	1	; select bank1
  4595  00F1  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4596  00F2  0020               	movlb	0	; select bank0
  4597  00F3  084D               	movf	?_getADCValue+2,w
  4598  00F4  0021               	movlb	1	; select bank1
  4599  00F5  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4600  00F6  318A  2231  3180   	fcall	_sendMessage
  4601                           
  4602                           ;main.c: 142: sendMessage(&packet, "DBG3", counter);
  4603  00F9  0022               	movlb	2	; select bank2
  4604  00FA  0854               	movf	(_counter+3)^(0+256),w
  4605  00FB  0020               	movlb	0	; select bank0
  4606  00FC  00AB               	movwf	___lltoft@c+3
  4607  00FD  0022               	movlb	2	; select bank2
  4608  00FE  0853               	movf	(_counter+2)^(0+256),w
  4609  00FF  0020               	movlb	0	; select bank0
  4610  0100  00AA               	movwf	___lltoft@c+2
  4611  0101  0022               	movlb	2	; select bank2
  4612  0102  0852               	movf	(_counter+1)^(0+256),w
  4613  0103  0020               	movlb	0	; select bank0
  4614  0104  00A9               	movwf	___lltoft@c+1
  4615  0105  0022               	movlb	2	; select bank2
  4616  0106  0851               	movf	_counter^(0+256),w
  4617  0107  0020               	movlb	0	; select bank0
  4618  0108  00A8               	movwf	___lltoft@c
  4619  0109  3197  2709  3180   	fcall	___lltoft
  4620  010C  0020               	movlb	0	; select bank0
  4621  010D  0828               	movf	?___lltoft,w
  4622  010E  0022               	movlb	2	; select bank2
  4623  010F  00AD               	movwf	_loop$1962^(0+256)
  4624  0110  0020               	movlb	0	; select bank0
  4625  0111  0829               	movf	?___lltoft+1,w
  4626  0112  0022               	movlb	2	; select bank2
  4627  0113  00AE               	movwf	(_loop$1962+1)^(0+256)
  4628  0114  0020               	movlb	0	; select bank0
  4629  0115  082A               	movf	?___lltoft+2,w
  4630  0116  0022               	movlb	2	; select bank2
  4631  0117  00AF               	movwf	(_loop$1962+2)^(0+256)
  4632                           
  4633                           ;main.c: 142: sendMessage(&packet, "DBG3", counter);
  4634  0118  3030               	movlw	low loop@packet
  4635  0119  0021               	movlb	1	; select bank1
  4636  011A  00B9               	movwf	sendMessage@packet^(0+128)
  4637  011B  3001               	movlw	high loop@packet
  4638  011C  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4639  011D  305A               	movlw	low (STR_7| (0+32768))
  4640  011E  00BB               	movwf	sendMessage@topic^(0+128)
  4641  011F  3098               	movlw	high (STR_7| (0+32768))
  4642  0120  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4643  0121  0022               	movlb	2	; select bank2
  4644  0122  082D               	movf	_loop$1962^(0+256),w
  4645  0123  0021               	movlb	1	; select bank1
  4646  0124  00BD               	movwf	sendMessage@value^(0+128)
  4647  0125  0022               	movlb	2	; select bank2
  4648  0126  082E               	movf	(_loop$1962+1)^(0+256),w
  4649  0127  0021               	movlb	1	; select bank1
  4650  0128  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4651  0129  0022               	movlb	2	; select bank2
  4652  012A  082F               	movf	(_loop$1962+2)^(0+256),w
  4653  012B  0021               	movlb	1	; select bank1
  4654  012C  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4655  012D  318A  2231  3180   	fcall	_sendMessage
  4656                           
  4657                           ;main.c: 145: FVRCONbits.TSEN = 1;
  4658  0130  0022               	movlb	2	; select bank2
  4659  0131  1697               	bsf	23,5	;volatile
  4660                           
  4661                           ;main.c: 146: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4662  0132  303D               	movlw	61
  4663  0133  318B  23ED  3180   	fcall	_getADCValue
  4664  0136  0020               	movlb	0	; select bank0
  4665  0137  084B               	movf	?_getADCValue,w
  4666  0138  00D7               	movwf	___ftneg@f1
  4667  0139  084C               	movf	?_getADCValue+1,w
  4668  013A  00D8               	movwf	___ftneg@f1+1
  4669  013B  084D               	movf	?_getADCValue+2,w
  4670  013C  00D9               	movwf	___ftneg@f1+2
  4671  013D  3194  248D  3180   	fcall	___ftneg
  4672  0140  0020               	movlb	0	; select bank0
  4673  0141  0857               	movf	?___ftneg,w
  4674  0142  0022               	movlb	2	; select bank2
  4675  0143  00A9               	movwf	_loop$1964^(0+256)
  4676  0144  0020               	movlb	0	; select bank0
  4677  0145  0858               	movf	?___ftneg+1,w
  4678  0146  0022               	movlb	2	; select bank2
  4679  0147  00AA               	movwf	(_loop$1964+1)^(0+256)
  4680  0148  0020               	movlb	0	; select bank0
  4681  0149  0859               	movf	?___ftneg+2,w
  4682  014A  0022               	movlb	2	; select bank2
  4683  014B  00AB               	movwf	(_loop$1964+2)^(0+256)
  4684                           
  4685                           ;main.c: 146: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4686  014C  3000               	movlw	0
  4687  014D  0020               	movlb	0	; select bank0
  4688  014E  00BB               	movwf	___ftdiv@f2
  4689  014F  3000               	movlw	0
  4690  0150  00BC               	movwf	___ftdiv@f2+1
  4691  0151  3040               	movlw	64
  4692  0152  00BD               	movwf	___ftdiv@f2+2
  4693  0153  3012               	movlw	18
  4694  0154  00AE               	movwf	___ftadd@f1
  4695  0155  3003               	movlw	3
  4696  0156  00AF               	movwf	___ftadd@f1+1
  4697  0157  3040               	movlw	64
  4698  0158  00B0               	movwf	___ftadd@f1+2
  4699  0159  0022               	movlb	2	; select bank2
  4700  015A  0829               	movf	_loop$1964^(0+256),w
  4701  015B  0020               	movlb	0	; select bank0
  4702  015C  00B1               	movwf	___ftadd@f2
  4703  015D  0022               	movlb	2	; select bank2
  4704  015E  082A               	movf	(_loop$1964+1)^(0+256),w
  4705  015F  0020               	movlb	0	; select bank0
  4706  0160  00B2               	movwf	___ftadd@f2+1
  4707  0161  0022               	movlb	2	; select bank2
  4708  0162  082B               	movf	(_loop$1964+2)^(0+256),w
  4709  0163  0020               	movlb	0	; select bank0
  4710  0164  00B3               	movwf	___ftadd@f2+2
  4711  0165  3186  26E5  3180   	fcall	___ftadd
  4712  0168  0020               	movlb	0	; select bank0
  4713  0169  082E               	movf	?___ftadd,w
  4714  016A  00BE               	movwf	___ftdiv@f1
  4715  016B  082F               	movf	?___ftadd+1,w
  4716  016C  00BF               	movwf	___ftdiv@f1+1
  4717  016D  0830               	movf	?___ftadd+2,w
  4718  016E  00C0               	movwf	___ftdiv@f1+2
  4719  016F  318C  2493  3180   	fcall	___ftdiv
  4720  0172  0020               	movlb	0	; select bank0
  4721  0173  083B               	movf	?___ftdiv,w
  4722  0174  0022               	movlb	2	; select bank2
  4723  0175  00A0               	movwf	loop@vt^(0+256)
  4724  0176  0020               	movlb	0	; select bank0
  4725  0177  083C               	movf	?___ftdiv+1,w
  4726  0178  0022               	movlb	2	; select bank2
  4727  0179  00A1               	movwf	(loop@vt+1)^(0+256)
  4728  017A  0020               	movlb	0	; select bank0
  4729  017B  083D               	movf	?___ftdiv+2,w
  4730  017C  0022               	movlb	2	; select bank2
  4731  017D  00A2               	movwf	(loop@vt+2)^(0+256)
  4732                           
  4733                           ;main.c: 147: FVRCONbits.TSEN = 0;
  4734  017E  1297               	bcf	23,5	;volatile
  4735                           
  4736                           ;main.c: 152: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4737  017F  30A9               	movlw	169
  4738  0180  0020               	movlb	0	; select bank0
  4739  0181  00AE               	movwf	___ftadd@f1
  4740  0182  30D1               	movlw	209
  4741  0183  00AF               	movwf	___ftadd@f1+1
  4742  0184  3043               	movlw	67
  4743  0185  00B0               	movwf	___ftadd@f1+2
  4744  0186  3004               	movlw	4
  4745  0187  00BB               	movwf	___ftdiv@f2
  4746  0188  30AD               	movlw	173
  4747  0189  00BC               	movwf	___ftdiv@f2+1
  4748  018A  30BA               	movlw	186
  4749  018B  00BD               	movwf	___ftdiv@f2+2
  4750  018C  0022               	movlb	2	; select bank2
  4751  018D  0820               	movf	loop@vt^(0+256),w
  4752  018E  0020               	movlb	0	; select bank0
  4753  018F  00BE               	movwf	___ftdiv@f1
  4754  0190  0022               	movlb	2	; select bank2
  4755  0191  0821               	movf	(loop@vt+1)^(0+256),w
  4756  0192  0020               	movlb	0	; select bank0
  4757  0193  00BF               	movwf	___ftdiv@f1+1
  4758  0194  0022               	movlb	2	; select bank2
  4759  0195  0822               	movf	(loop@vt+2)^(0+256),w
  4760  0196  0020               	movlb	0	; select bank0
  4761  0197  00C0               	movwf	___ftdiv@f1+2
  4762  0198  318C  2493  3180   	fcall	___ftdiv
  4763  019B  0020               	movlb	0	; select bank0
  4764  019C  083B               	movf	?___ftdiv,w
  4765  019D  00B1               	movwf	___ftadd@f2
  4766  019E  083C               	movf	?___ftdiv+1,w
  4767  019F  00B2               	movwf	___ftadd@f2+1
  4768  01A0  083D               	movf	?___ftdiv+2,w
  4769  01A1  00B3               	movwf	___ftadd@f2+2
  4770  01A2  3186  26E5  3180   	fcall	___ftadd
  4771  01A5  0020               	movlb	0	; select bank0
  4772  01A6  082E               	movf	?___ftadd,w
  4773  01A7  0022               	movlb	2	; select bank2
  4774  01A8  00A3               	movwf	loop@ta^(0+256)
  4775  01A9  0020               	movlb	0	; select bank0
  4776  01AA  082F               	movf	?___ftadd+1,w
  4777  01AB  0022               	movlb	2	; select bank2
  4778  01AC  00A4               	movwf	(loop@ta+1)^(0+256)
  4779  01AD  0020               	movlb	0	; select bank0
  4780  01AE  0830               	movf	?___ftadd+2,w
  4781  01AF  0022               	movlb	2	; select bank2
  4782  01B0  00A5               	movwf	(loop@ta+2)^(0+256)
  4783                           
  4784                           ;main.c: 154: sendMessage(&packet, "TEMP", ta);
  4785  01B1  3030               	movlw	low loop@packet
  4786  01B2  0021               	movlb	1	; select bank1
  4787  01B3  00B9               	movwf	sendMessage@packet^(0+128)
  4788  01B4  3001               	movlw	high loop@packet
  4789  01B5  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4790  01B6  3069               	movlw	low (STR_8| (0+32768))
  4791  01B7  00BB               	movwf	sendMessage@topic^(0+128)
  4792  01B8  3098               	movlw	high (STR_8| (0+32768))
  4793  01B9  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4794  01BA  0022               	movlb	2	; select bank2
  4795  01BB  0823               	movf	loop@ta^(0+256),w
  4796  01BC  0021               	movlb	1	; select bank1
  4797  01BD  00BD               	movwf	sendMessage@value^(0+128)
  4798  01BE  0022               	movlb	2	; select bank2
  4799  01BF  0824               	movf	(loop@ta+1)^(0+256),w
  4800  01C0  0021               	movlb	1	; select bank1
  4801  01C1  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4802  01C2  0022               	movlb	2	; select bank2
  4803  01C3  0825               	movf	(loop@ta+2)^(0+256),w
  4804  01C4  0021               	movlb	1	; select bank1
  4805  01C5  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4806  01C6  318A  2231  3180   	fcall	_sendMessage
  4807                           
  4808                           ;main.c: 156: sendMessage(&packet, "DBG4", counter);
  4809  01C9  0022               	movlb	2	; select bank2
  4810  01CA  0854               	movf	(_counter+3)^(0+256),w
  4811  01CB  0020               	movlb	0	; select bank0
  4812  01CC  00AB               	movwf	___lltoft@c+3
  4813  01CD  0022               	movlb	2	; select bank2
  4814  01CE  0853               	movf	(_counter+2)^(0+256),w
  4815  01CF  0020               	movlb	0	; select bank0
  4816  01D0  00AA               	movwf	___lltoft@c+2
  4817  01D1  0022               	movlb	2	; select bank2
  4818  01D2  0852               	movf	(_counter+1)^(0+256),w
  4819  01D3  0020               	movlb	0	; select bank0
  4820  01D4  00A9               	movwf	___lltoft@c+1
  4821  01D5  0022               	movlb	2	; select bank2
  4822  01D6  0851               	movf	_counter^(0+256),w
  4823  01D7  0020               	movlb	0	; select bank0
  4824  01D8  00A8               	movwf	___lltoft@c
  4825  01D9  3197  2709  3180   	fcall	___lltoft
  4826  01DC  0020               	movlb	0	; select bank0
  4827  01DD  0828               	movf	?___lltoft,w
  4828  01DE  0022               	movlb	2	; select bank2
  4829  01DF  00AD               	movwf	_loop$1962^(0+256)
  4830  01E0  0020               	movlb	0	; select bank0
  4831  01E1  0829               	movf	?___lltoft+1,w
  4832  01E2  0022               	movlb	2	; select bank2
  4833  01E3  00AE               	movwf	(_loop$1962+1)^(0+256)
  4834  01E4  0020               	movlb	0	; select bank0
  4835  01E5  082A               	movf	?___lltoft+2,w
  4836  01E6  0022               	movlb	2	; select bank2
  4837  01E7  00AF               	movwf	(_loop$1962+2)^(0+256)
  4838                           
  4839                           ;main.c: 156: sendMessage(&packet, "DBG4", counter);
  4840  01E8  3030               	movlw	low loop@packet
  4841  01E9  0021               	movlb	1	; select bank1
  4842  01EA  00B9               	movwf	sendMessage@packet^(0+128)
  4843  01EB  3001               	movlw	high loop@packet
  4844  01EC  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4845  01ED  305F               	movlw	low (STR_9| (0+32768))
  4846  01EE  00BB               	movwf	sendMessage@topic^(0+128)
  4847  01EF  3098               	movlw	high (STR_9| (0+32768))
  4848  01F0  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4849  01F1  0022               	movlb	2	; select bank2
  4850  01F2  082D               	movf	_loop$1962^(0+256),w
  4851  01F3  0021               	movlb	1	; select bank1
  4852  01F4  00BD               	movwf	sendMessage@value^(0+128)
  4853  01F5  0022               	movlb	2	; select bank2
  4854  01F6  082E               	movf	(_loop$1962+1)^(0+256),w
  4855  01F7  0021               	movlb	1	; select bank1
  4856  01F8  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4857  01F9  0022               	movlb	2	; select bank2
  4858  01FA  082F               	movf	(_loop$1962+2)^(0+256),w
  4859  01FB  0021               	movlb	1	; select bank1
  4860  01FC  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4861  01FD  318A  2231  3180   	fcall	_sendMessage
  4862                           
  4863                           ;main.c: 158: n_RF_SETUP_t rfSetup;;main.c: 159: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4864  0200  0020               	movlb	0	; select bank0
  4865  0201  01A0               	clrf	nrf24l01Send@data
  4866  0202  3006               	movlw	6
  4867  0203  3196  2607  3180   	fcall	_nrf24l01Send
  4868  0206  0021               	movlb	1	; select bank1
  4869  0207  00C3               	movwf	??_loop^(0+128)
  4870  0208  0843               	movf	??_loop^(0+128),w
  4871  0209  0022               	movlb	2	; select bank2
  4872  020A  00AC               	movwf	loop@rfSetup^(0+256)
  4873                           
  4874                           ;main.c: 161: sendMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4875  020B  3030               	movlw	low loop@packet
  4876  020C  0021               	movlb	1	; select bank1
  4877  020D  00B9               	movwf	sendMessage@packet^(0+128)
  4878  020E  3001               	movlw	high loop@packet
  4879  020F  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4880  0210  3045               	movlw	low (STR_10| (0+32768))
  4881  0211  00BB               	movwf	sendMessage@topic^(0+128)
  4882  0212  3098               	movlw	high (STR_10| (0+32768))
  4883  0213  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4884  0214  0022               	movlb	2	; select bank2
  4885  0215  0C2C               	rrf	loop@rfSetup^(0+256),w
  4886  0216  3903               	andlw	3
  4887  0217  3195  253C  3180   	fcall	___lbtoft
  4888  021A  0020               	movlb	0	; select bank0
  4889  021B  0828               	movf	?___lbtoft,w
  4890  021C  0021               	movlb	1	; select bank1
  4891  021D  00BD               	movwf	sendMessage@value^(0+128)
  4892  021E  0020               	movlb	0	; select bank0
  4893  021F  0829               	movf	?___lbtoft+1,w
  4894  0220  0021               	movlb	1	; select bank1
  4895  0221  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4896  0222  0020               	movlb	0	; select bank0
  4897  0223  082A               	movf	?___lbtoft+2,w
  4898  0224  0021               	movlb	1	; select bank1
  4899  0225  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4900  0226  318A  2231  3180   	fcall	_sendMessage
  4901                           
  4902                           ;main.c: 163: sendMessage(&packet, "DBG5", counter);
  4903  0229  0022               	movlb	2	; select bank2
  4904  022A  0854               	movf	(_counter+3)^(0+256),w
  4905  022B  0020               	movlb	0	; select bank0
  4906  022C  00AB               	movwf	___lltoft@c+3
  4907  022D  0022               	movlb	2	; select bank2
  4908  022E  0853               	movf	(_counter+2)^(0+256),w
  4909  022F  0020               	movlb	0	; select bank0
  4910  0230  00AA               	movwf	___lltoft@c+2
  4911  0231  0022               	movlb	2	; select bank2
  4912  0232  0852               	movf	(_counter+1)^(0+256),w
  4913  0233  0020               	movlb	0	; select bank0
  4914  0234  00A9               	movwf	___lltoft@c+1
  4915  0235  0022               	movlb	2	; select bank2
  4916  0236  0851               	movf	_counter^(0+256),w
  4917  0237  0020               	movlb	0	; select bank0
  4918  0238  00A8               	movwf	___lltoft@c
  4919  0239  3197  2709  3180   	fcall	___lltoft
  4920  023C  0020               	movlb	0	; select bank0
  4921  023D  0828               	movf	?___lltoft,w
  4922  023E  0022               	movlb	2	; select bank2
  4923  023F  00AD               	movwf	_loop$1962^(0+256)
  4924  0240  0020               	movlb	0	; select bank0
  4925  0241  0829               	movf	?___lltoft+1,w
  4926  0242  0022               	movlb	2	; select bank2
  4927  0243  00AE               	movwf	(_loop$1962+1)^(0+256)
  4928  0244  0020               	movlb	0	; select bank0
  4929  0245  082A               	movf	?___lltoft+2,w
  4930  0246  0022               	movlb	2	; select bank2
  4931  0247  00AF               	movwf	(_loop$1962+2)^(0+256)
  4932                           
  4933                           ;main.c: 163: sendMessage(&packet, "DBG5", counter);
  4934  0248  3030               	movlw	low loop@packet
  4935  0249  0021               	movlb	1	; select bank1
  4936  024A  00B9               	movwf	sendMessage@packet^(0+128)
  4937  024B  3001               	movlw	high loop@packet
  4938  024C  00BA               	movwf	(sendMessage@packet+1)^(0+128)
  4939  024D  3064               	movlw	low (STR_11| (0+32768))
  4940  024E  00BB               	movwf	sendMessage@topic^(0+128)
  4941  024F  3098               	movlw	high (STR_11| (0+32768))
  4942  0250  00BC               	movwf	(sendMessage@topic^(0+128)+1)
  4943  0251  0022               	movlb	2	; select bank2
  4944  0252  082D               	movf	_loop$1962^(0+256),w
  4945  0253  0021               	movlb	1	; select bank1
  4946  0254  00BD               	movwf	sendMessage@value^(0+128)
  4947  0255  0022               	movlb	2	; select bank2
  4948  0256  082E               	movf	(_loop$1962+1)^(0+256),w
  4949  0257  0021               	movlb	1	; select bank1
  4950  0258  00BE               	movwf	(sendMessage@value+1)^(0+128)
  4951  0259  0022               	movlb	2	; select bank2
  4952  025A  082F               	movf	(_loop$1962+2)^(0+256),w
  4953  025B  0021               	movlb	1	; select bank1
  4954  025C  00BF               	movwf	(sendMessage@value+2)^(0+128)
  4955  025D  318A  2231         	fcall	_sendMessage
  4956  025F  0008               	return
  4957  0260                     __end_of_loop:	
  4958                           
  4959                           	psect	text10
  4960  0A31                     __ptext10:	
  4961 ;; *************** function _sendMessage *****************
  4962 ;; Defined at:
  4963 ;;		line 104 in file "main.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;  packet          2   25[BANK1 ] PTR struct .
  4966 ;;		 -> main@packet(33), loop@packet(33), 
  4967 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  4968 ;;		 -> STR_13(5), STR_11(5), STR_10(6), STR_9(5), 
  4969 ;;		 -> STR_8(5), STR_7(5), STR_6(7), STR_5(5), 
  4970 ;;		 -> STR_4(5), STR_3(5), 
  4971 ;;  value           3   29[BANK1 ] float 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;  status          2   33[BANK1 ] int 
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      void 
  4976 ;; Registers used:
  4977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4983 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  4987 ;;Total ram usage:       10 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:   13
  4990 ;; This function calls:
  4991 ;;		_ftoa
  4992 ;;		_memset
  4993 ;;		_nrf24l01SendPacket
  4994 ;;		_sleep
  4995 ;;		_strcat
  4996 ;;		_strcpy
  4997 ;; This function is called by:
  4998 ;;		_loop
  4999 ;;		_main
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           
  5004                           ;psect for function _sendMessage
  5005  0A31                     _sendMessage:	
  5006                           
  5007                           ;main.c: 106: int status;;main.c: 108: memset(packet->Message, 0, sizeof(packet->Message
      +                          ));
  5008                           
  5009                           ;incstack = 0
  5010                           ; Regs used in _sendMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5011  0A31  0021               	movlb	1	; select bank1
  5012  0A32  0839               	movf	sendMessage@packet^(0+128),w
  5013  0A33  3E01               	addlw	1
  5014  0A34  0020               	movlb	0	; select bank0
  5015  0A35  00A0               	movwf	memset@p1
  5016  0A36  3000               	movlw	0
  5017  0A37  0021               	movlb	1	; select bank1
  5018  0A38  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  5019  0A39  0020               	movlb	0	; select bank0
  5020  0A3A  00A1               	movwf	memset@p1+1
  5021  0A3B  3000               	movlw	0
  5022  0A3C  00A2               	movwf	memset@c
  5023  0A3D  00A3               	movwf	memset@c+1
  5024  0A3E  3020               	movlw	32
  5025  0A3F  00A4               	movwf	memset@n
  5026  0A40  3000               	movlw	0
  5027  0A41  00A5               	movwf	memset@n+1
  5028  0A42  3195  2508  318A   	fcall	_memset
  5029                           
  5030                           ;main.c: 109: strcpy(packet->Message, romData->name);
  5031  0A45  0021               	movlb	1	; select bank1
  5032  0A46  0839               	movf	sendMessage@packet^(0+128),w
  5033  0A47  3E01               	addlw	1
  5034  0A48  0020               	movlb	0	; select bank0
  5035  0A49  00A0               	movwf	strcpy@to
  5036  0A4A  3000               	movlw	0
  5037  0A4B  0021               	movlb	1	; select bank1
  5038  0A4C  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  5039  0A4D  0020               	movlb	0	; select bank0
  5040  0A4E  00A1               	movwf	strcpy@to+1
  5041  0A4F  0021               	movlb	1	; select bank1
  5042  0A50  086B               	movf	_romData^(0+128),w
  5043  0A51  3E01               	addlw	1
  5044  0A52  0020               	movlb	0	; select bank0
  5045  0A53  00A2               	movwf	strcpy@from
  5046  0A54  3002               	movlw	2
  5047  0A55  00A3               	movwf	strcpy@from+1
  5048  0A56  3195  2557  318A   	fcall	_strcpy
  5049                           
  5050                           ;main.c: 110: strcat(packet->Message, "/");
  5051  0A59  0021               	movlb	1	; select bank1
  5052  0A5A  0839               	movf	sendMessage@packet^(0+128),w
  5053  0A5B  3E01               	addlw	1
  5054  0A5C  00B3               	movwf	strcat@to^(0+128)
  5055  0A5D  3000               	movlw	0
  5056  0A5E  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  5057  0A5F  00B4               	movwf	(strcat@to+1)^(0+128)
  5058  0A60  307C               	movlw	low (STR_1| (0+32768))
  5059  0A61  00B5               	movwf	strcat@from^(0+128)
  5060  0A62  3098               	movlw	high (STR_1| (0+32768))
  5061  0A63  00B6               	movwf	(strcat@from^(0+128)+1)
  5062  0A64  3196  2691  318A   	fcall	_strcat
  5063                           
  5064                           ;main.c: 111: strcat(packet->Message, topic);
  5065  0A67  0021               	movlb	1	; select bank1
  5066  0A68  0839               	movf	sendMessage@packet^(0+128),w
  5067  0A69  3E01               	addlw	1
  5068  0A6A  00B3               	movwf	strcat@to^(0+128)
  5069  0A6B  3000               	movlw	0
  5070  0A6C  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  5071  0A6D  00B4               	movwf	(strcat@to+1)^(0+128)
  5072  0A6E  083C               	movf	(sendMessage@topic+1)^(0+128),w
  5073  0A6F  00B6               	movwf	(strcat@from+1)^(0+128)
  5074  0A70  083B               	movf	sendMessage@topic^(0+128),w
  5075  0A71  00B5               	movwf	strcat@from^(0+128)
  5076  0A72  3196  2691  318A   	fcall	_strcat
  5077                           
  5078                           ;main.c: 112: strcat(packet->Message, "/");
  5079  0A75  0021               	movlb	1	; select bank1
  5080  0A76  0839               	movf	sendMessage@packet^(0+128),w
  5081  0A77  3E01               	addlw	1
  5082  0A78  00B3               	movwf	strcat@to^(0+128)
  5083  0A79  3000               	movlw	0
  5084  0A7A  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  5085  0A7B  00B4               	movwf	(strcat@to+1)^(0+128)
  5086  0A7C  307C               	movlw	low (STR_1| (0+32768))
  5087  0A7D  00B5               	movwf	strcat@from^(0+128)
  5088  0A7E  3098               	movlw	high (STR_1| (0+32768))
  5089  0A7F  00B6               	movwf	(strcat@from^(0+128)+1)
  5090  0A80  3196  2691  318A   	fcall	_strcat
  5091                           
  5092                           ;main.c: 113: strcat(packet->Message, ftoa(value, &status));
  5093  0A83  0021               	movlb	1	; select bank1
  5094  0A84  0839               	movf	sendMessage@packet^(0+128),w
  5095  0A85  3E01               	addlw	1
  5096  0A86  00B3               	movwf	strcat@to^(0+128)
  5097  0A87  3000               	movlw	0
  5098  0A88  3D3A               	addwfc	(sendMessage@packet+1)^(0+128),w
  5099  0A89  00B4               	movwf	(strcat@to+1)^(0+128)
  5100  0A8A  083D               	movf	sendMessage@value^(0+128),w
  5101  0A8B  00A6               	movwf	ftoa@f^(0+128)
  5102  0A8C  083E               	movf	(sendMessage@value+1)^(0+128),w
  5103  0A8D  00A7               	movwf	(ftoa@f+1)^(0+128)
  5104  0A8E  083F               	movf	(sendMessage@value+2)^(0+128),w
  5105  0A8F  00A8               	movwf	(ftoa@f+2)^(0+128)
  5106  0A90  30C1               	movlw	(low (sendMessage@status| 0))& (0+255)
  5107  0A91  00C0               	movwf	??_sendMessage^(0+128)
  5108  0A92  0840               	movf	??_sendMessage^(0+128),w
  5109  0A93  00A9               	movwf	ftoa@status^(0+128)
  5110  0A94  318D  25F0  318A   	fcall	_ftoa
  5111  0A97  0021               	movlb	1	; select bank1
  5112  0A98  00B5               	movwf	strcat@from^(0+128)
  5113  0A99  3001               	movlw	1
  5114  0A9A  00B6               	movwf	(strcat@from+1)^(0+128)
  5115  0A9B  3196  2691  318A   	fcall	_strcat
  5116                           
  5117                           ;main.c: 115: packet->packetData.byte = 0;
  5118  0A9E  0021               	movlb	1	; select bank1
  5119  0A9F  0839               	movf	sendMessage@packet^(0+128),w
  5120  0AA0  0086               	movwf	6
  5121  0AA1  083A               	movf	(sendMessage@packet+1)^(0+128),w
  5122  0AA2  0087               	movwf	7
  5123  0AA3  0181               	clrf	1
  5124                           
  5125                           ;main.c: 116: packet->packetData.ACKRequest = 1;
  5126  0AA4  0839               	movf	sendMessage@packet^(0+128),w
  5127  0AA5  0086               	movwf	6
  5128  0AA6  083A               	movf	(sendMessage@packet+1)^(0+128),w
  5129  0AA7  0087               	movwf	7
  5130  0AA8  1501               	bsf	1,2
  5131                           
  5132                           ;main.c: 118: nrf24l01SendPacket(packet);
  5133  0AA9  083A               	movf	(sendMessage@packet+1)^(0+128),w
  5134  0AAA  0020               	movlb	0	; select bank0
  5135  0AAB  00AD               	movwf	nrf24l01SendPacket@txPacket+1
  5136  0AAC  0021               	movlb	1	; select bank1
  5137  0AAD  0839               	movf	sendMessage@packet^(0+128),w
  5138  0AAE  0020               	movlb	0	; select bank0
  5139  0AAF  00AC               	movwf	nrf24l01SendPacket@txPacket
  5140  0AB0  3188  20CE  318A   	fcall	_nrf24l01SendPacket
  5141                           
  5142                           ;main.c: 120: sleep(2000);
  5143  0AB3  30D0               	movlw	208
  5144  0AB4  0020               	movlb	0	; select bank0
  5145  0AB5  00A2               	movwf	sleep@milliseconds
  5146  0AB6  3007               	movlw	7
  5147  0AB7  00A3               	movwf	sleep@milliseconds+1
  5148  0AB8  3187  27DB         	fcall	_sleep
  5149  0ABA  0008               	return
  5150  0ABB                     __end_of_sendMessage:	
  5151                           
  5152                           	psect	text11
  5153  1691                     __ptext11:	
  5154 ;; *************** function _strcat *****************
  5155 ;; Defined at:
  5156 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;  to              2   19[BANK1 ] PTR unsigned char 
  5159 ;;		 -> main@packet(33), loop@packet(33), 
  5160 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  5161 ;;		 -> ftoa@buf(17), STR_13(5), STR_11(5), STR_10(6), 
  5162 ;;		 -> STR_9(5), STR_8(5), STR_7(5), STR_6(7), 
  5163 ;;		 -> STR_5(5), STR_4(5), STR_3(5), STR_2(2), 
  5164 ;;		 -> STR_1(2), 
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  5167 ;;		 -> main@packet(33), loop@packet(33), 
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  2   19[BANK1 ] PTR unsigned char 
  5170 ;; Registers used:
  5171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5177 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5178 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5180 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5181 ;;Total ram usage:        6 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    7
  5184 ;; This function calls:
  5185 ;;		Nothing
  5186 ;; This function is called by:
  5187 ;;		_sendMessage
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           
  5192                           ;psect for function _strcat
  5193  1691                     _strcat:	
  5194                           
  5195                           ;incstack = 0
  5196                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  5197  1691  0021               	movlb	1	; select bank1
  5198  1692  0834               	movf	(strcat@to+1)^(0+128),w
  5199  1693  00B8               	movwf	(strcat@cp+1)^(0+128)
  5200  1694  0833               	movf	strcat@to^(0+128),w
  5201  1695  00B7               	movwf	strcat@cp^(0+128)
  5202  1696                     l2857:	
  5203  1696  0837               	movf	strcat@cp^(0+128),w
  5204  1697  0086               	movwf	6
  5205  1698  0838               	movf	(strcat@cp+1)^(0+128),w
  5206  1699  0087               	movwf	7
  5207  169A  0801               	movf	1,w
  5208  169B  1903               	btfsc	3,2
  5209  169C  2EAA               	goto	l2861
  5210  169D  3001               	movlw	1
  5211  169E  07B7               	addwf	strcat@cp^(0+128),f
  5212  169F  3000               	movlw	0
  5213  16A0  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  5214  16A1  2E96               	goto	l2857
  5215  16A2                     l2859:	
  5216  16A2  3001               	movlw	1
  5217  16A3  07B7               	addwf	strcat@cp^(0+128),f
  5218  16A4  3000               	movlw	0
  5219  16A5  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  5220  16A6  3001               	movlw	1
  5221  16A7  07B5               	addwf	strcat@from^(0+128),f
  5222  16A8  3000               	movlw	0
  5223  16A9  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  5224  16AA                     l2861:	
  5225  16AA  0837               	movf	strcat@cp^(0+128),w
  5226  16AB  0086               	movwf	6
  5227  16AC  0838               	movf	(strcat@cp+1)^(0+128),w
  5228  16AD  0087               	movwf	7
  5229  16AE  0835               	movf	strcat@from^(0+128),w
  5230  16AF  0084               	movwf	4
  5231  16B0  0836               	movf	(strcat@from+1)^(0+128),w
  5232  16B1  0085               	movwf	5
  5233  16B2  0800               	movf	0,w	;code access
  5234  16B3  3FC0               	movwi [0]fsr1
  5235  16B4  0889               	movf	9,f
  5236  16B5  1903               	btfsc	3,2
  5237  16B6  0008               	return
  5238  16B7  2EA2               	goto	l2859
  5239  16B8                     __end_of_strcat:	
  5240                           ;	Return value of _strcat is never used
  5241                           
  5242                           
  5243                           	psect	text12
  5244  07DB                     __ptext12:	
  5245 ;; *************** function _sleep *****************
  5246 ;; Defined at:
  5247 ;;		line 78 in file "main.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;  milliseconds    2    2[BANK0 ] unsigned int 
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		wreg, status,2, status,0, pclath, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5261 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5263 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5264 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;Total ram usage:        4 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    8
  5268 ;; This function calls:
  5269 ;;		_doWDTSleep
  5270 ;; This function is called by:
  5271 ;;		_sendMessage
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           
  5276                           ;psect for function _sleep
  5277  07DB                     _sleep:	
  5278                           
  5279                           ;main.c: 81: milliseconds = (unsigned int) (milliseconds / (128 + 128));
  5280                           
  5281                           ;incstack = 0
  5282                           ; Regs used in _sleep: [wreg+status,2+status,0+pclath+cstack]
  5283  07DB  0020               	movlb	0	; select bank0
  5284  07DC  0823               	movf	sleep@milliseconds+1,w
  5285  07DD  00A5               	movwf	??_sleep+1
  5286  07DE  0822               	movf	sleep@milliseconds,w
  5287  07DF  00A4               	movwf	??_sleep
  5288  07E0  0825               	movf	??_sleep+1,w
  5289  07E1  00A4               	movwf	??_sleep
  5290  07E2  01A5               	clrf	??_sleep+1
  5291  07E3  0824               	movf	??_sleep,w
  5292  07E4  00A2               	movwf	sleep@milliseconds
  5293  07E5  0825               	movf	??_sleep+1,w
  5294  07E6  00A3               	movwf	sleep@milliseconds+1
  5295                           
  5296                           ;main.c: 84: milliseconds++;
  5297  07E7  3001               	movlw	1
  5298  07E8  07A2               	addwf	sleep@milliseconds,f
  5299  07E9  3000               	movlw	0
  5300  07EA  3DA3               	addwfc	sleep@milliseconds+1,f
  5301  07EB                     l2851:	
  5302                           ;main.c: 87: while (--milliseconds){
  5303                           
  5304  07EB  3001               	movlw	1
  5305  07EC  0020               	movlb	0	; select bank0
  5306  07ED  02A2               	subwf	sleep@milliseconds,f
  5307  07EE  3000               	movlw	0
  5308  07EF  3BA3               	subwfb	sleep@milliseconds+1,f
  5309  07F0  0822               	movf	sleep@milliseconds,w
  5310  07F1  0423               	iorwf	sleep@milliseconds+1,w
  5311  07F2  1903               	btfsc	3,2
  5312  07F3  0008               	return
  5313                           
  5314                           ;main.c: 93: doWDTSleep(0b00111);
  5315  07F4  3007               	movlw	7
  5316  07F5  3194  24D9  3187   	fcall	_doWDTSleep
  5317                           
  5318                           ;main.c: 99: doWDTSleep(0b00111);
  5319  07F8  3007               	movlw	7
  5320  07F9  3194  24D9  3187   	fcall	_doWDTSleep
  5321  07FC  2FEB               	goto	l2851
  5322  07FD                     __end_of_sleep:	
  5323                           
  5324                           	psect	text13
  5325  08CE                     __ptext13:	
  5326 ;; *************** function _nrf24l01SendPacket *****************
  5327 ;; Defined at:
  5328 ;;		line 220 in file "nrf24l01.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;  txPacket        2   12[BANK0 ] PTR struct .
  5331 ;;		 -> main@packet(33), loop@packet(33), 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;		None
  5334 ;; Return value:  Size  Location     Type
  5335 ;;                  1    wreg      void 
  5336 ;; Registers used:
  5337 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5338 ;; Tracked objects:
  5339 ;;		On entry : 0/0
  5340 ;;		On exit  : 0/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5343 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5345 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5346 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;Total ram usage:        4 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; Hardware stack levels required when called:   12
  5350 ;; This function calls:
  5351 ;;		_nrf24l01Service
  5352 ;;		_strcpy
  5353 ;; This function is called by:
  5354 ;;		_sendMessage
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           
  5359                           ;psect for function _nrf24l01SendPacket
  5360  08CE                     _nrf24l01SendPacket:	
  5361  08CE                     l3597:	
  5362                           ;nrf24l01.c: 222: while (status.TX != statuses.TX.Idle){
  5363                           
  5364                           ;incstack = 0
  5365                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5366                           
  5367  08CE  3034               	movlw	low (_statuses| (0+32768))
  5368  08CF  0084               	movwf	4
  5369  08D0  3098               	movlw	high (_statuses| (0+32768))
  5370  08D1  0085               	movwf	5
  5371  08D2  0800               	movf	0,w	;code access
  5372  08D3  0020               	movlb	0	; select bank0
  5373  08D4  00AE               	movwf	??_nrf24l01SendPacket
  5374  08D5  0021               	movlb	1	; select bank1
  5375  08D6  0867               	movf	_status^(0+128),w	;volatile
  5376  08D7  390F               	andlw	15
  5377  08D8  0020               	movlb	0	; select bank0
  5378  08D9  062E               	xorwf	??_nrf24l01SendPacket,w
  5379  08DA  1903               	btfsc	3,2
  5380  08DB  28E9               	goto	l3599
  5381                           
  5382                           ;nrf24l01.c: 223: _delay((unsigned long)((500)*(32000000/4000000.0)));
  5383  08DC  3006               	movlw	6
  5384  08DD  0020               	movlb	0	; select bank0
  5385  08DE  00AE               	movwf	??_nrf24l01SendPacket
  5386  08DF  3030               	movlw	48
  5387  08E0                     u4047:	
  5388  08E0  0B89               	decfsz	9,f
  5389  08E1  28E0               	goto	u4047
  5390  08E2  0BAE               	decfsz	??_nrf24l01SendPacket,f
  5391  08E3  28E0               	goto	u4047
  5392  08E4  0000               	nop
  5393                           
  5394                           ;nrf24l01.c: 224: nrf24l01Service();
  5395  08E5  3184  242D  3188   	fcall	_nrf24l01Service
  5396  08E8  28CE               	goto	l3597
  5397  08E9                     l3599:	
  5398                           
  5399                           ;nrf24l01.c: 225: };nrf24l01.c: 227: strcpy(TXPacket.Message, txPacket->Message);
  5400  08E9  30C2               	movlw	low (_TXPacket+1)
  5401  08EA  00A0               	movwf	strcpy@to
  5402  08EB  3001               	movlw	high (_TXPacket+1)
  5403  08EC  00A1               	movwf	strcpy@to+1
  5404  08ED  082C               	movf	nrf24l01SendPacket@txPacket,w
  5405  08EE  3E01               	addlw	1
  5406  08EF  00AE               	movwf	??_nrf24l01SendPacket
  5407  08F0  3000               	movlw	0
  5408  08F1  3D2D               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5409  08F2  00AF               	movwf	??_nrf24l01SendPacket+1
  5410  08F3  082E               	movf	??_nrf24l01SendPacket,w
  5411  08F4  00A2               	movwf	strcpy@from
  5412  08F5  082F               	movf	??_nrf24l01SendPacket+1,w
  5413  08F6  00A3               	movwf	strcpy@from+1
  5414  08F7  3195  2557  3188   	fcall	_strcpy
  5415                           
  5416                           ;nrf24l01.c: 228: TXPacket.packetData = txPacket->packetData;
  5417  08FA  0020               	movlb	0	; select bank0
  5418  08FB  082C               	movf	nrf24l01SendPacket@txPacket,w
  5419  08FC  0086               	movwf	6
  5420  08FD  082D               	movf	nrf24l01SendPacket@txPacket+1,w
  5421  08FE  0087               	movwf	7
  5422  08FF  0801               	movf	1,w
  5423  0900  00AE               	movwf	??_nrf24l01SendPacket
  5424  0901  082E               	movf	??_nrf24l01SendPacket,w
  5425  0902  0023               	movlb	3	; select bank3
  5426  0903  00C1               	movwf	_TXPacket^(0+384)
  5427                           
  5428                           ;nrf24l01.c: 230: status.TX = statuses.TX.Ready;
  5429  0904  3035               	movlw	low ((_statuses+1)| (0+32768))
  5430  0905  0084               	movwf	4
  5431  0906  3098               	movlw	high ((_statuses+1)| (0+32768))
  5432  0907  0085               	movwf	5
  5433  0908  0800               	movf	0,w	;code access
  5434  0909  0020               	movlb	0	; select bank0
  5435  090A  00AE               	movwf	??_nrf24l01SendPacket
  5436  090B  0021               	movlb	1	; select bank1
  5437  090C  0867               	movf	_status^(0+128),w	;volatile
  5438  090D  0020               	movlb	0	; select bank0
  5439  090E  062E               	xorwf	??_nrf24l01SendPacket,w
  5440  090F  39F0               	andlw	-16
  5441  0910  062E               	xorwf	??_nrf24l01SendPacket,w
  5442  0911  0021               	movlb	1	; select bank1
  5443  0912  00E7               	movwf	_status^(0+128)	;volatile
  5444                           
  5445                           ;nrf24l01.c: 232: nrf24l01Service();
  5446  0913  3184  242D         	fcall	_nrf24l01Service
  5447  0915  0008               	return
  5448  0916                     __end_of_nrf24l01SendPacket:	
  5449                           
  5450                           	psect	text14
  5451  1557                     __ptext14:	
  5452 ;; *************** function _strcpy *****************
  5453 ;; Defined at:
  5454 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5455 ;; Parameters:    Size  Location     Type
  5456 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5457 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5458 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5459 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5460 ;;		 -> STR_12(4), loop@packet(33), romDataMap(28), 
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5463 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5464 ;; Return value:  Size  Location     Type
  5465 ;;                  2    0[BANK0 ] PTR unsigned char 
  5466 ;; Registers used:
  5467 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  5468 ;; Tracked objects:
  5469 ;;		On entry : 0/0
  5470 ;;		On exit  : 0/0
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5473 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5474 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5476 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5477 ;;Total ram usage:        6 bytes
  5478 ;; Hardware stack levels used:    1
  5479 ;; Hardware stack levels required when called:    7
  5480 ;; This function calls:
  5481 ;;		Nothing
  5482 ;; This function is called by:
  5483 ;;		_sendMessage
  5484 ;;		_main
  5485 ;;		_nrf24l01SendPacket
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           
  5490                           ;psect for function _strcpy
  5491  1557                     _strcpy:	
  5492                           
  5493                           ;incstack = 0
  5494                           ; Regs used in _strcpy: [wreg-fsr1h+pclath]
  5495  1557  0020               	movlb	0	; select bank0
  5496  1558  0821               	movf	strcpy@to+1,w
  5497  1559  00A5               	movwf	strcpy@cp+1
  5498  155A  0820               	movf	strcpy@to,w
  5499  155B  00A4               	movwf	strcpy@cp
  5500  155C                     l2497:	
  5501  155C  0824               	movf	strcpy@cp,w
  5502  155D  0086               	movwf	6
  5503  155E  0825               	movf	strcpy@cp+1,w
  5504  155F  0087               	movwf	7
  5505  1560  0822               	movf	strcpy@from,w
  5506  1561  0084               	movwf	4
  5507  1562  0823               	movf	strcpy@from+1,w
  5508  1563  0085               	movwf	5
  5509  1564  0800               	movf	0,w	;code access
  5510  1565  3FC0               	movwi [0]fsr1
  5511  1566  0889               	movf	9,f
  5512  1567  1903               	btfsc	3,2
  5513  1568  0008               	return
  5514  1569  3001               	movlw	1
  5515  156A  07A4               	addwf	strcpy@cp,f
  5516  156B  3000               	movlw	0
  5517  156C  3DA5               	addwfc	strcpy@cp+1,f
  5518  156D  3001               	movlw	1
  5519  156E  07A2               	addwf	strcpy@from,f
  5520  156F  3000               	movlw	0
  5521  1570  3DA3               	addwfc	strcpy@from+1,f
  5522  1571  2D5C               	goto	l2497
  5523  1572                     __end_of_strcpy:	
  5524                           ;	Return value of _strcpy is never used
  5525                           
  5526                           
  5527                           	psect	text15
  5528  042D                     __ptext15:	
  5529 ;; *************** function _nrf24l01Service *****************
  5530 ;; Defined at:
  5531 ;;		line 276 in file "nrf24l01.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;		None
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;  width           1   10[BANK0 ] unsigned char 
  5536 ;;  i               1   11[BANK0 ] unsigned char 
  5537 ;; Return value:  Size  Location     Type
  5538 ;;                  1    wreg      void 
  5539 ;; Registers used:
  5540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5550 ;;Total ram usage:        4 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:   11
  5553 ;; This function calls:
  5554 ;;		_memset
  5555 ;;		_nrf24l01CEHigh
  5556 ;;		_nrf24l01CELow
  5557 ;;		_nrf24l01SPIEnd
  5558 ;;		_nrf24l01SPISend
  5559 ;;		_nrf24l01SPIStart
  5560 ;;		_nrf24l01Send
  5561 ;;		_nrf24l01SetRXMode
  5562 ;;		_strcmp
  5563 ;;		_strlen
  5564 ;; This function is called by:
  5565 ;;		_nrf24l01SendPacket
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           
  5570                           ;psect for function _nrf24l01Service
  5571  042D                     _nrf24l01Service:	
  5572                           
  5573                           ;nrf24l01.c: 278: unsigned char i;;nrf24l01.c: 280: if (status.TX == statuses.TX.Ready){
  5574                           
  5575                           ;incstack = 0
  5576                           ; Regs used in _nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5577  042D  3035               	movlw	low ((_statuses+1)| (0+32768))
  5578  042E  0084               	movwf	4
  5579  042F  3098               	movlw	high ((_statuses+1)| (0+32768))
  5580  0430  0085               	movwf	5
  5581  0431  0800               	movf	0,w	;code access
  5582  0432  0020               	movlb	0	; select bank0
  5583  0433  00A8               	movwf	??_nrf24l01Service
  5584  0434  0021               	movlb	1	; select bank1
  5585  0435  0867               	movf	_status^(0+128),w	;volatile
  5586  0436  390F               	andlw	15
  5587  0437  0020               	movlb	0	; select bank0
  5588  0438  0628               	xorwf	??_nrf24l01Service,w
  5589  0439  1D03               	skipz
  5590  043A  2C8E               	goto	l3535
  5591                           
  5592                           ;nrf24l01.c: 283: nrf24l01SetRXMode(0);
  5593  043B  3000               	movlw	0
  5594  043C  3197  2733  3184   	fcall	_nrf24l01SetRXMode
  5595                           
  5596                           ;nrf24l01.c: 286: nrf24l01SPIStart();
  5597  043F  3194  2485  3184   	fcall	_nrf24l01SPIStart
  5598                           
  5599                           ;nrf24l01.c: 289: nrf24l01SPISend((unsigned) 0b10110000);
  5600  0442  30B0               	movlw	176
  5601  0443  3194  2496  3184   	fcall	_nrf24l01SPISend
  5602                           
  5603                           ;nrf24l01.c: 291: nrf24l01SPISend(TXPacket.packetData.byte);
  5604  0446  0023               	movlb	3	; select bank3
  5605  0447  0841               	movf	_TXPacket^(0+384),w
  5606  0448  3194  2496  3184   	fcall	_nrf24l01SPISend
  5607                           
  5608                           ;nrf24l01.c: 294: for (i = 0; (i < strlen(TXPacket.Message)) && (i < 32); i++) {
  5609  044B  0020               	movlb	0	; select bank0
  5610  044C  01AB               	clrf	nrf24l01Service@i
  5611  044D  2C5C               	goto	l3521
  5612  044E                     l3517:	
  5613                           
  5614                           ;nrf24l01.c: 295: nrf24l01SPISend(TXPacket.Message[i]);
  5615  044E  082B               	movf	nrf24l01Service@i,w
  5616  044F  3EC2               	addlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5617  0450  0086               	movwf	6
  5618  0451  3001               	movlw	1	; select bank3/4
  5619  0452  0087               	movwf	7
  5620  0453  0801               	movf	1,w
  5621  0454  3194  2496  3184   	fcall	_nrf24l01SPISend
  5622  0457  3001               	movlw	1
  5623  0458  0020               	movlb	0	; select bank0
  5624  0459  00A8               	movwf	??_nrf24l01Service
  5625  045A  0828               	movf	??_nrf24l01Service,w
  5626  045B  07AB               	addwf	nrf24l01Service@i,f
  5627  045C                     l3521:	
  5628  045C  30C2               	movlw	low (_TXPacket+1)
  5629  045D  00A0               	movwf	strlen@s
  5630  045E  3001               	movlw	high (_TXPacket+1)
  5631  045F  00A1               	movwf	strlen@s+1
  5632  0460  3195  25E8  3184   	fcall	_strlen
  5633  0463  0020               	movlb	0	; select bank0
  5634  0464  082B               	movf	nrf24l01Service@i,w
  5635  0465  00A8               	movwf	??_nrf24l01Service
  5636  0466  01A9               	clrf	??_nrf24l01Service+1
  5637  0467  0821               	movf	?_strlen+1,w
  5638  0468  0229               	subwf	??_nrf24l01Service+1,w
  5639  0469  1D03               	skipz
  5640  046A  2C6D               	goto	u3675
  5641  046B  0820               	movf	?_strlen,w
  5642  046C  0228               	subwf	??_nrf24l01Service,w
  5643  046D                     u3675:	
  5644  046D  1803               	skipnc
  5645  046E  2C73               	goto	l3525
  5646  046F  3020               	movlw	32
  5647  0470  022B               	subwf	nrf24l01Service@i,w
  5648  0471  1C03               	skipc
  5649  0472  2C4E               	goto	l3517
  5650  0473                     l3525:	
  5651                           
  5652                           ;nrf24l01.c: 296: };nrf24l01.c: 299: nrf24l01SPIEnd();
  5653  0473  3194  2476  3184   	fcall	_nrf24l01SPIEnd
  5654                           
  5655                           ;nrf24l01.c: 302: status.TX = statuses.TX.Sending;
  5656  0476  3036               	movlw	low ((_statuses+2)| (0+32768))
  5657  0477  0084               	movwf	4
  5658  0478  3098               	movlw	high ((_statuses+2)| (0+32768))
  5659  0479  0085               	movwf	5
  5660  047A  0800               	movf	0,w	;code access
  5661  047B  0020               	movlb	0	; select bank0
  5662  047C  00A8               	movwf	??_nrf24l01Service
  5663  047D  0021               	movlb	1	; select bank1
  5664  047E  0867               	movf	_status^(0+128),w	;volatile
  5665  047F  0020               	movlb	0	; select bank0
  5666  0480  0628               	xorwf	??_nrf24l01Service,w
  5667  0481  39F0               	andlw	-16
  5668  0482  0628               	xorwf	??_nrf24l01Service,w
  5669  0483  0021               	movlb	1	; select bank1
  5670  0484  00E7               	movwf	_status^(0+128)	;volatile
  5671                           
  5672                           ;nrf24l01.c: 305: nrf24l01CEHigh();
  5673  0485  3194  246A  3184   	fcall	_nrf24l01CEHigh
  5674                           
  5675                           ;nrf24l01.c: 306: _delay((unsigned long)((12)*(32000000/4000000.0)));
  5676  0488  3020               	movlw	32
  5677  0489                     u4057:	
  5678  0489  0B89               	decfsz	9,f
  5679  048A  2C89               	goto	u4057
  5680                           
  5681                           ;nrf24l01.c: 307: nrf24l01CELow();
  5682  048B  3194  246D  3184   	fcall	_nrf24l01CELow
  5683  048E                     l3535:	
  5684                           
  5685                           ;nrf24l01.c: 308: };nrf24l01.c: 310: if (status.RX == statuses.RX.Pending){
  5686  048E  3039               	movlw	low ((_statuses+5)| (0+32768))
  5687  048F  0084               	movwf	4
  5688  0490  3098               	movlw	high ((_statuses+5)| (0+32768))
  5689  0491  0085               	movwf	5
  5690  0492  0800               	movf	0,w	;code access
  5691  0493  0020               	movlb	0	; select bank0
  5692  0494  00A8               	movwf	??_nrf24l01Service
  5693  0495  0021               	movlb	1	; select bank1
  5694  0496  0E67               	swapf	_status^(0+128),w	;volatile
  5695  0497  390F               	andlw	15
  5696  0498  0020               	movlb	0	; select bank0
  5697  0499  0628               	xorwf	??_nrf24l01Service,w
  5698  049A  1D03               	skipz
  5699  049B  2D1B               	goto	l3573
  5700                           
  5701                           ;nrf24l01.c: 313: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5702  049C  30A1               	movlw	low (_RXPacket+1)
  5703  049D  00A0               	movwf	memset@p1
  5704  049E  3001               	movlw	high (_RXPacket+1)
  5705  049F  00A1               	movwf	memset@p1+1
  5706  04A0  3000               	movlw	0
  5707  04A1  00A2               	movwf	memset@c
  5708  04A2  00A3               	movwf	memset@c+1
  5709  04A3  3020               	movlw	32
  5710  04A4  00A4               	movwf	memset@n
  5711  04A5  3000               	movlw	0
  5712  04A6  00A5               	movwf	memset@n+1
  5713  04A7  3195  2508  3184   	fcall	_memset
  5714                           
  5715                           ;nrf24l01.c: 314: RXPacket.packetData.byte = 0x00;
  5716  04AA  0023               	movlb	3	; select bank3
  5717  04AB  01A0               	clrf	_RXPacket^(0+384)
  5718                           
  5719                           ;nrf24l01.c: 317: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5720  04AC  0020               	movlb	0	; select bank0
  5721  04AD  01A0               	clrf	nrf24l01Send@data
  5722  04AE  3060               	movlw	96
  5723  04AF  3196  2607  3184   	fcall	_nrf24l01Send
  5724  04B2  0020               	movlb	0	; select bank0
  5725  04B3  00A8               	movwf	??_nrf24l01Service
  5726  04B4  0828               	movf	??_nrf24l01Service,w
  5727  04B5  00AA               	movwf	nrf24l01Service@width
  5728                           
  5729                           ;nrf24l01.c: 320: nrf24l01CELow();
  5730  04B6  3194  246D  3184   	fcall	_nrf24l01CELow
  5731                           
  5732                           ;nrf24l01.c: 323: nrf24l01SPIStart();
  5733  04B9  3194  2485  3184   	fcall	_nrf24l01SPIStart
  5734                           
  5735                           ;nrf24l01.c: 326: nrf24l01SPISend((unsigned) 0b01100001);
  5736  04BC  3061               	movlw	97
  5737  04BD  3194  2496  3184   	fcall	_nrf24l01SPISend
  5738                           
  5739                           ;nrf24l01.c: 329: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5740  04C0  3000               	movlw	0
  5741  04C1  3194  2496  3184   	fcall	_nrf24l01SPISend
  5742  04C4  0020               	movlb	0	; select bank0
  5743  04C5  00A8               	movwf	??_nrf24l01Service
  5744  04C6  0828               	movf	??_nrf24l01Service,w
  5745  04C7  0023               	movlb	3	; select bank3
  5746  04C8  00A0               	movwf	_RXPacket^(0+384)
  5747                           
  5748                           ;nrf24l01.c: 330: width--;
  5749  04C9  3001               	movlw	1
  5750  04CA  0020               	movlb	0	; select bank0
  5751  04CB  02AA               	subwf	nrf24l01Service@width,f
  5752                           
  5753                           ;nrf24l01.c: 332: for (i = 0; (i < width) && (i < 32); i++){
  5754  04CC  01AB               	clrf	nrf24l01Service@i
  5755  04CD  2CDF               	goto	l3559
  5756  04CE                     l3555:	
  5757                           
  5758                           ;nrf24l01.c: 334: RXPacket.Message[i] = nrf24l01SPISend(0);
  5759  04CE  3000               	movlw	0
  5760  04CF  3194  2496  3184   	fcall	_nrf24l01SPISend
  5761  04D2  0020               	movlb	0	; select bank0
  5762  04D3  00A8               	movwf	??_nrf24l01Service
  5763  04D4  082B               	movf	nrf24l01Service@i,w
  5764  04D5  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5765  04D6  0086               	movwf	6
  5766  04D7  3001               	movlw	1	; select bank3/4
  5767  04D8  0087               	movwf	7
  5768  04D9  0828               	movf	??_nrf24l01Service,w
  5769  04DA  0081               	movwf	1
  5770  04DB  3001               	movlw	1
  5771  04DC  00A8               	movwf	??_nrf24l01Service
  5772  04DD  0828               	movf	??_nrf24l01Service,w
  5773  04DE  07AB               	addwf	nrf24l01Service@i,f
  5774  04DF                     l3559:	
  5775  04DF  082A               	movf	nrf24l01Service@width,w
  5776  04E0  022B               	subwf	nrf24l01Service@i,w
  5777  04E1  1803               	skipnc
  5778  04E2  2CE7               	goto	l3563
  5779  04E3  3020               	movlw	32
  5780  04E4  022B               	subwf	nrf24l01Service@i,w
  5781  04E5  1C03               	skipc
  5782  04E6  2CCE               	goto	l3555
  5783  04E7                     l3563:	
  5784                           
  5785                           ;nrf24l01.c: 335: };nrf24l01.c: 338: nrf24l01SPIEnd();
  5786  04E7  3194  2476  3184   	fcall	_nrf24l01SPIEnd
  5787                           
  5788                           ;nrf24l01.c: 341: nrf24l01CEHigh();
  5789  04EA  3194  246A  3184   	fcall	_nrf24l01CEHigh
  5790                           
  5791                           ;nrf24l01.c: 344: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5792  04ED  0021               	movlb	1	; select bank1
  5793  04EE  0C68               	rrf	(_status^(0+128)+1),w	;volatile
  5794  04EF  3907               	andlw	7
  5795  04F0  0020               	movlb	0	; select bank0
  5796  04F1  00A8               	movwf	??_nrf24l01Service
  5797  04F2  0EA8               	swapf	??_nrf24l01Service,f
  5798  04F3  0023               	movlb	3	; select bank3
  5799  04F4  0820               	movf	_RXPacket^(0+384),w
  5800  04F5  0020               	movlb	0	; select bank0
  5801  04F6  0628               	xorwf	??_nrf24l01Service,w
  5802  04F7  398F               	andlw	-113
  5803  04F8  0628               	xorwf	??_nrf24l01Service,w
  5804  04F9  0023               	movlb	3	; select bank3
  5805  04FA  00A0               	movwf	_RXPacket^(0+384)
  5806                           
  5807                           ;nrf24l01.c: 347: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5808  04FB  0020               	movlb	0	; select bank0
  5809  04FC  01A0               	clrf	nrf24l01Send@data
  5810  04FD  3009               	movlw	9
  5811  04FE  3196  2607  3184   	fcall	_nrf24l01Send
  5812  0501  0020               	movlb	0	; select bank0
  5813  0502  00A8               	movwf	??_nrf24l01Service
  5814  0503  0023               	movlb	3	; select bank3
  5815  0504  0820               	movf	_RXPacket^(0+384),w
  5816  0505  0020               	movlb	0	; select bank0
  5817  0506  0628               	xorwf	??_nrf24l01Service,w
  5818  0507  39FE               	andlw	-2
  5819  0508  0628               	xorwf	??_nrf24l01Service,w
  5820  0509  0023               	movlb	3	; select bank3
  5821  050A  00A0               	movwf	_RXPacket^(0+384)
  5822                           
  5823                           ;nrf24l01.c: 349: status.RX = statuses.RX.Ready;
  5824  050B  303A               	movlw	low ((_statuses+6)| (0+32768))
  5825  050C  0084               	movwf	4
  5826  050D  3098               	movlw	high ((_statuses+6)| (0+32768))
  5827  050E  0085               	movwf	5
  5828  050F  0800               	movf	0,w	;code access
  5829  0510  0020               	movlb	0	; select bank0
  5830  0511  00A8               	movwf	??_nrf24l01Service
  5831  0512  0EA8               	swapf	??_nrf24l01Service,f
  5832  0513  0021               	movlb	1	; select bank1
  5833  0514  0867               	movf	_status^(0+128),w	;volatile
  5834  0515  0020               	movlb	0	; select bank0
  5835  0516  0628               	xorwf	??_nrf24l01Service,w
  5836  0517  390F               	andlw	-241
  5837  0518  0628               	xorwf	??_nrf24l01Service,w
  5838  0519  0021               	movlb	1	; select bank1
  5839  051A  00E7               	movwf	_status^(0+128)	;volatile
  5840  051B                     l3573:	
  5841                           
  5842                           ;nrf24l01.c: 350: };nrf24l01.c: 352: if (status.RX == statuses.RX.Ready){
  5843  051B  303A               	movlw	low ((_statuses+6)| (0+32768))
  5844  051C  0084               	movwf	4
  5845  051D  3098               	movlw	high ((_statuses+6)| (0+32768))
  5846  051E  0085               	movwf	5
  5847  051F  0800               	movf	0,w	;code access
  5848  0520  0020               	movlb	0	; select bank0
  5849  0521  00A8               	movwf	??_nrf24l01Service
  5850  0522  0021               	movlb	1	; select bank1
  5851  0523  0E67               	swapf	_status^(0+128),w	;volatile
  5852  0524  390F               	andlw	15
  5853  0525  0020               	movlb	0	; select bank0
  5854  0526  0628               	xorwf	??_nrf24l01Service,w
  5855  0527  1D03               	skipz
  5856  0528  2D65               	goto	l297
  5857                           
  5858                           ;nrf24l01.c: 355: if (RXPacket.packetData.IsACK){
  5859  0529  0023               	movlb	3	; select bank3
  5860  052A  1DA0               	btfss	_RXPacket^(0+384),3
  5861  052B  2D65               	goto	l297
  5862                           
  5863                           ;nrf24l01.c: 357: if (status.TX == statuses.TX.PendingACK){
  5864  052C  3037               	movlw	low ((_statuses+3)| (0+32768))
  5865  052D  0084               	movwf	4
  5866  052E  3098               	movlw	high ((_statuses+3)| (0+32768))
  5867  052F  0085               	movwf	5
  5868  0530  0800               	movf	0,w	;code access
  5869  0531  0020               	movlb	0	; select bank0
  5870  0532  00A8               	movwf	??_nrf24l01Service
  5871  0533  0021               	movlb	1	; select bank1
  5872  0534  0867               	movf	_status^(0+128),w	;volatile
  5873  0535  390F               	andlw	15
  5874  0536  0020               	movlb	0	; select bank0
  5875  0537  0628               	xorwf	??_nrf24l01Service,w
  5876  0538  1D03               	skipz
  5877  0539  2D65               	goto	l297
  5878                           
  5879                           ;nrf24l01.c: 359: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5880  053A  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5881  053B  00A8               	movwf	??_nrf24l01Service
  5882  053C  0828               	movf	??_nrf24l01Service,w
  5883  053D  00A0               	movwf	strcmp@s2
  5884  053E  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5885  053F  3196  26E0  3184   	fcall	_strcmp
  5886  0542  0020               	movlb	0	; select bank0
  5887  0543  0820               	movf	?_strcmp,w
  5888  0544  0421               	iorwf	?_strcmp+1,w
  5889  0545  1D03               	btfss	3,2
  5890  0546  2D65               	goto	l297
  5891                           
  5892                           ;nrf24l01.c: 360: status.TX = statuses.TX.Idle;
  5893  0547  3034               	movlw	low (_statuses| (0+32768))
  5894  0548  0084               	movwf	4
  5895  0549  3098               	movlw	high (_statuses| (0+32768))
  5896  054A  0085               	movwf	5
  5897  054B  0800               	movf	0,w	;code access
  5898  054C  00A8               	movwf	??_nrf24l01Service
  5899  054D  0021               	movlb	1	; select bank1
  5900  054E  0867               	movf	_status^(0+128),w	;volatile
  5901  054F  0020               	movlb	0	; select bank0
  5902  0550  0628               	xorwf	??_nrf24l01Service,w
  5903  0551  39F0               	andlw	-16
  5904  0552  0628               	xorwf	??_nrf24l01Service,w
  5905  0553  0021               	movlb	1	; select bank1
  5906  0554  00E7               	movwf	_status^(0+128)	;volatile
  5907                           
  5908                           ;nrf24l01.c: 361: status.RX = statuses.RX.Idle;
  5909  0555  3038               	movlw	low ((_statuses+4)| (0+32768))
  5910  0556  0084               	movwf	4
  5911  0557  3098               	movlw	high ((_statuses+4)| (0+32768))
  5912  0558  0085               	movwf	5
  5913  0559  0800               	movf	0,w	;code access
  5914  055A  0020               	movlb	0	; select bank0
  5915  055B  00A8               	movwf	??_nrf24l01Service
  5916  055C  0EA8               	swapf	??_nrf24l01Service,f
  5917  055D  0021               	movlb	1	; select bank1
  5918  055E  0867               	movf	_status^(0+128),w	;volatile
  5919  055F  0020               	movlb	0	; select bank0
  5920  0560  0628               	xorwf	??_nrf24l01Service,w
  5921  0561  390F               	andlw	-241
  5922  0562  0628               	xorwf	??_nrf24l01Service,w
  5923  0563  0021               	movlb	1	; select bank1
  5924  0564  00E7               	movwf	_status^(0+128)	;volatile
  5925  0565                     l297:	
  5926                           
  5927                           ;nrf24l01.c: 362: };nrf24l01.c: 363: };nrf24l01.c: 364: };nrf24l01.c: 367: };nrf24l01.c:
      +                           369: if (status.RX == statuses.RX.Ready){
  5928  0565  303A               	movlw	low ((_statuses+6)| (0+32768))
  5929  0566  0084               	movwf	4
  5930  0567  3098               	movlw	high ((_statuses+6)| (0+32768))
  5931  0568  0085               	movwf	5
  5932  0569  0800               	movf	0,w	;code access
  5933  056A  0020               	movlb	0	; select bank0
  5934  056B  00A8               	movwf	??_nrf24l01Service
  5935  056C  0021               	movlb	1	; select bank1
  5936  056D  0E67               	swapf	_status^(0+128),w	;volatile
  5937  056E  390F               	andlw	15
  5938  056F  0020               	movlb	0	; select bank0
  5939  0570  0628               	xorwf	??_nrf24l01Service,w
  5940  0571  1D03               	skipz
  5941  0572  2D7C               	goto	l3585
  5942                           
  5943                           ;nrf24l01.c: 370: counter++;
  5944  0573  3001               	movlw	1
  5945  0574  0022               	movlb	2	; select bank2
  5946  0575  07D1               	addwf	_counter^(0+256),f
  5947  0576  3000               	movlw	0
  5948  0577  3DD2               	addwfc	(_counter+1)^(0+256),f
  5949  0578  3000               	movlw	0
  5950  0579  3DD3               	addwfc	(_counter+2)^(0+256),f
  5951  057A  3000               	movlw	0
  5952  057B  3DD4               	addwfc	(_counter+3)^(0+256),f
  5953  057C                     l3585:	
  5954                           
  5955                           ;nrf24l01.c: 371: };nrf24l01.c: 373: if (status.TX == statuses.TX.PendingACK){
  5956  057C  3037               	movlw	low ((_statuses+3)| (0+32768))
  5957  057D  0084               	movwf	4
  5958  057E  3098               	movlw	high ((_statuses+3)| (0+32768))
  5959  057F  0085               	movwf	5
  5960  0580  0800               	movf	0,w	;code access
  5961  0581  0020               	movlb	0	; select bank0
  5962  0582  00A8               	movwf	??_nrf24l01Service
  5963  0583  0021               	movlb	1	; select bank1
  5964  0584  0867               	movf	_status^(0+128),w	;volatile
  5965  0585  390F               	andlw	15
  5966  0586  0020               	movlb	0	; select bank0
  5967  0587  0628               	xorwf	??_nrf24l01Service,w
  5968  0588  1D03               	skipz
  5969  0589  0008               	return
  5970                           
  5971                           ;nrf24l01.c: 374: if (!status.retryCount--){
  5972  058A  3001               	movlw	1
  5973  058B  0021               	movlb	1	; select bank1
  5974  058C  02EA               	subwf	(_status^(0+128)+3),f	;volatile
  5975  058D  0A6A               	incf	(_status^(0+128)+3),w	;volatile
  5976  058E  1D03               	btfss	3,2
  5977  058F  0008               	return
  5978                           
  5979                           ;nrf24l01.c: 375: status.TX = statuses.TX.Ready;
  5980  0590  3035               	movlw	low ((_statuses+1)| (0+32768))
  5981  0591  0084               	movwf	4
  5982  0592  3098               	movlw	high ((_statuses+1)| (0+32768))
  5983  0593  0085               	movwf	5
  5984  0594  0800               	movf	0,w	;code access
  5985  0595  0020               	movlb	0	; select bank0
  5986  0596  00A8               	movwf	??_nrf24l01Service
  5987  0597  0021               	movlb	1	; select bank1
  5988  0598  0867               	movf	_status^(0+128),w	;volatile
  5989  0599  0020               	movlb	0	; select bank0
  5990  059A  0628               	xorwf	??_nrf24l01Service,w
  5991  059B  39F0               	andlw	-16
  5992  059C  0628               	xorwf	??_nrf24l01Service,w
  5993  059D  0021               	movlb	1	; select bank1
  5994  059E  00E7               	movwf	_status^(0+128)	;volatile
  5995  059F  0008               	return
  5996  05A0                     __end_of_nrf24l01Service:	
  5997                           
  5998                           	psect	text16
  5999  15E8                     __ptext16:	
  6000 ;; *************** function _strlen *****************
  6001 ;; Defined at:
  6002 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  6005 ;;		 -> TXPacket.Message(32), TXPacket(33), romDataMap(28), 
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  6008 ;;		 -> TXPacket.Message(32), TXPacket(33), romDataMap(28), 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  2    0[BANK0 ] unsigned int 
  6011 ;; Registers used:
  6012 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6018 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6019 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6020 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6021 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;Total ram usage:        6 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    7
  6025 ;; This function calls:
  6026 ;;		Nothing
  6027 ;; This function is called by:
  6028 ;;		_nrf24l01GetPipe
  6029 ;;		_nrf24l01Service
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           
  6034                           ;psect for function _strlen
  6035  15E8                     _strlen:	
  6036                           
  6037                           ;incstack = 0
  6038                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  6039  15E8  0020               	movlb	0	; select bank0
  6040  15E9  0821               	movf	strlen@s+1,w
  6041  15EA  00A5               	movwf	strlen@cp+1
  6042  15EB  0820               	movf	strlen@s,w
  6043  15EC  00A4               	movwf	strlen@cp
  6044  15ED                     l3505:	
  6045  15ED  0824               	movf	strlen@cp,w
  6046  15EE  0086               	movwf	6
  6047  15EF  0825               	movf	strlen@cp+1,w
  6048  15F0  0087               	movwf	7
  6049  15F1  0801               	movf	1,w
  6050  15F2  1903               	btfsc	3,2
  6051  15F3  2DF9               	goto	l3507
  6052  15F4  3001               	movlw	1
  6053  15F5  07A4               	addwf	strlen@cp,f
  6054  15F6  3000               	movlw	0
  6055  15F7  3DA5               	addwfc	strlen@cp+1,f
  6056  15F8  2DED               	goto	l3505
  6057  15F9                     l3507:	
  6058  15F9  0920               	comf	strlen@s,w
  6059  15FA  00A2               	movwf	??_strlen
  6060  15FB  0921               	comf	strlen@s+1,w
  6061  15FC  00A3               	movwf	??_strlen+1
  6062  15FD  0AA2               	incf	??_strlen,f
  6063  15FE  1903               	skipnz
  6064  15FF  0AA3               	incf	??_strlen+1,f
  6065  1600  0824               	movf	strlen@cp,w
  6066  1601  0722               	addwf	??_strlen,w
  6067  1602  00A0               	movwf	?_strlen
  6068  1603  0825               	movf	strlen@cp+1,w
  6069  1604  3D23               	addwfc	??_strlen+1,w
  6070  1605  00A1               	movwf	?_strlen+1
  6071  1606  0008               	return
  6072  1607                     __end_of_strlen:	
  6073                           
  6074                           	psect	text17
  6075  16E0                     __ptext17:	
  6076 ;; *************** function _strcmp *****************
  6077 ;; Defined at:
  6078 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;  s1              1    wreg     PTR const unsigned char 
  6081 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  6082 ;;  s2              1    0[BANK0 ] PTR const unsigned char 
  6083 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  6084 ;; Auto vars:     Size  Location     Type
  6085 ;;  s1              1    4[BANK0 ] PTR const unsigned char 
  6086 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  6087 ;;  r               1    3[BANK0 ] char 
  6088 ;; Return value:  Size  Location     Type
  6089 ;;                  2    0[BANK0 ] int 
  6090 ;; Registers used:
  6091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6092 ;; Tracked objects:
  6093 ;;		On entry : 0/0
  6094 ;;		On exit  : 0/0
  6095 ;;		Unchanged: 0/0
  6096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6097 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6098 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6100 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6101 ;;Total ram usage:        5 bytes
  6102 ;; Hardware stack levels used:    1
  6103 ;; Hardware stack levels required when called:    7
  6104 ;; This function calls:
  6105 ;;		Nothing
  6106 ;; This function is called by:
  6107 ;;		_nrf24l01Service
  6108 ;; This function uses a non-reentrant model
  6109 ;;
  6110                           
  6111                           
  6112                           ;psect for function _strcmp
  6113  16E0                     _strcmp:	
  6114                           
  6115                           ;incstack = 0
  6116                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  6117                           ;strcmp@s1 stored from wreg
  6118  16E0  0020               	movlb	0	; select bank0
  6119  16E1  00A4               	movwf	strcmp@s1
  6120  16E2  2EEB               	goto	l2335
  6121  16E3                     l2331:	
  6122  16E3  3001               	movlw	1
  6123  16E4  00A2               	movwf	??_strcmp
  6124  16E5  0822               	movf	??_strcmp,w
  6125  16E6  07A4               	addwf	strcmp@s1,f
  6126  16E7  3001               	movlw	1
  6127  16E8  00A2               	movwf	??_strcmp
  6128  16E9  0822               	movf	??_strcmp,w
  6129  16EA  07A0               	addwf	strcmp@s2,f
  6130  16EB                     l2335:	
  6131  16EB  0824               	movf	strcmp@s1,w
  6132  16EC  0086               	movwf	6
  6133  16ED  3001               	movlw	1	; select bank2/3
  6134  16EE  0087               	movwf	7
  6135  16EF  0820               	movf	strcmp@s2,w
  6136  16F0  0084               	movwf	4
  6137  16F1  3001               	movlw	1	; select bank2/3
  6138  16F2  0085               	movwf	5
  6139  16F3  0300               	decf	0,w
  6140  16F4  3AFF               	xorlw	255
  6141  16F5  0701               	addwf	1,w
  6142  16F6  00A2               	movwf	??_strcmp
  6143  16F7  0822               	movf	??_strcmp,w
  6144  16F8  00A3               	movwf	strcmp@r
  6145  16F9  0823               	movf	strcmp@r,w
  6146  16FA  1D03               	btfss	3,2
  6147  16FB  2F03               	goto	l2339
  6148  16FC  0824               	movf	strcmp@s1,w
  6149  16FD  0086               	movwf	6
  6150  16FE  3001               	movlw	1	; select bank2/3
  6151  16FF  0087               	movwf	7
  6152  1700  0801               	movf	1,w
  6153  1701  1D03               	btfss	3,2
  6154  1702  2EE3               	goto	l2331
  6155  1703                     l2339:	
  6156  1703  0823               	movf	strcmp@r,w
  6157  1704  00A0               	movwf	?_strcmp
  6158  1705  01A1               	clrf	?_strcmp+1
  6159  1706  1BA0               	btfsc	?_strcmp,7
  6160  1707  03A1               	decf	?_strcmp+1,f
  6161  1708  0008               	return
  6162  1709                     __end_of_strcmp:	
  6163                           
  6164                           	psect	text18
  6165  1733                     __ptext18:	
  6166 ;; *************** function _nrf24l01SetRXMode *****************
  6167 ;; Defined at:
  6168 ;;		line 91 in file "nrf24l01.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;  rxMode          1    wreg     unsigned char 
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;  rxMode          1    4[BANK0 ] unsigned char 
  6173 ;; Return value:  Size  Location     Type
  6174 ;;                  1    wreg      void 
  6175 ;; Registers used:
  6176 ;;		wreg, status,2, status,0, pclath, cstack
  6177 ;; Tracked objects:
  6178 ;;		On entry : 0/0
  6179 ;;		On exit  : 0/0
  6180 ;;		Unchanged: 0/0
  6181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6186 ;;Total ram usage:        2 bytes
  6187 ;; Hardware stack levels used:    1
  6188 ;; Hardware stack levels required when called:   10
  6189 ;; This function calls:
  6190 ;;		_nrf24l01CEHigh
  6191 ;;		_nrf24l01CELow
  6192 ;;		_nrf24l01Send
  6193 ;; This function is called by:
  6194 ;;		_nrf24l01Service
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           
  6199                           ;psect for function _nrf24l01SetRXMode
  6200  1733                     _nrf24l01SetRXMode:	
  6201                           
  6202                           ;incstack = 0
  6203                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  6204                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6205  1733  0020               	movlb	0	; select bank0
  6206  1734  00A4               	movwf	nrf24l01SetRXMode@rxMode
  6207                           
  6208                           ;nrf24l01.c: 111: if (status.configRegister.PRIM_RX != rxMode){
  6209  1735  0021               	movlb	1	; select bank1
  6210  1736  0869               	movf	(_status^(0+128)+2),w	;volatile
  6211  1737  3901               	andlw	1
  6212  1738  0020               	movlb	0	; select bank0
  6213  1739  0624               	xorwf	nrf24l01SetRXMode@rxMode,w
  6214  173A  1903               	skipnz
  6215  173B  0008               	return
  6216                           
  6217                           ;nrf24l01.c: 114: nrf24l01CELow();
  6218  173C  3194  246D  3197   	fcall	_nrf24l01CELow
  6219                           
  6220                           ;nrf24l01.c: 118: status.configRegister.PRIM_RX = rxMode;
  6221  173F  0020               	movlb	0	; select bank0
  6222  1740  0C24               	rrf	nrf24l01SetRXMode@rxMode,w
  6223  1741  0021               	movlb	1	; select bank1
  6224  1742  1C03               	skipc
  6225  1743  1069               	bcf	(_status^(0+128)+2),0	;volatile
  6226  1744  1803               	skipnc
  6227  1745  1469               	bsf	(_status^(0+128)+2),0	;volatile
  6228                           
  6229                           ;nrf24l01.c: 119: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  6230  1746  0869               	movf	(_status^(0+128)+2),w	;volatile
  6231  1747  0020               	movlb	0	; select bank0
  6232  1748  00A3               	movwf	??_nrf24l01SetRXMode
  6233  1749  0823               	movf	??_nrf24l01SetRXMode,w
  6234  174A  00A0               	movwf	nrf24l01Send@data
  6235  174B  3020               	movlw	32
  6236  174C  3196  2607  3197   	fcall	_nrf24l01Send
  6237                           
  6238                           ;nrf24l01.c: 122: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6239  174F  30C0               	movlw	192
  6240  1750                     u4067:	
  6241  1750  3200               	nop2
  6242  1751  0B89               	decfsz	9,f
  6243  1752  2F50               	goto	u4067
  6244                           
  6245                           ;nrf24l01.c: 125: if (rxMode){
  6246  1753  0020               	movlb	0	; select bank0
  6247  1754  0824               	movf	nrf24l01SetRXMode@rxMode,w
  6248  1755  1903               	btfsc	3,2
  6249  1756  0008               	return
  6250                           
  6251                           ;nrf24l01.c: 126: nrf24l01CEHigh();
  6252  1757  3194  246A  3197   	fcall	_nrf24l01CEHigh
  6253                           
  6254                           ;nrf24l01.c: 127: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6255  175A  30C0               	movlw	192
  6256  175B                     u4077:	
  6257  175B  3200               	nop2
  6258  175C  0B89               	decfsz	9,f
  6259  175D  2F5B               	goto	u4077
  6260  175E  0008               	return
  6261  175F                     __end_of_nrf24l01SetRXMode:	
  6262                           
  6263                           	psect	text19
  6264  1607                     __ptext19:	
  6265 ;; *************** function _nrf24l01Send *****************
  6266 ;; Defined at:
  6267 ;;		line 46 in file "nrf24l01.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;  command         1    wreg     unsigned char 
  6270 ;;  data            1    0[BANK0 ] unsigned char 
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;  command         1    2[BANK0 ] unsigned char 
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      unsigned char 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2, status,0, pclath, cstack
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6282 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;Total ram usage:        3 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    9
  6289 ;; This function calls:
  6290 ;;		_enableInterrupts
  6291 ;;		_nrf24l01SPIEnd
  6292 ;;		_nrf24l01SPISend
  6293 ;;		_nrf24l01SPIStart
  6294 ;; This function is called by:
  6295 ;;		_loop
  6296 ;;		_nrf24l01SetRXMode
  6297 ;;		_nrf24l01SetRXPipe
  6298 ;;		_nrf24l01Service
  6299 ;;		_nrf24l01InitRegisters
  6300 ;;		_nrf24l01ChangeTXPower
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           
  6305                           ;psect for function _nrf24l01Send
  6306  1607                     _nrf24l01Send:	
  6307                           
  6308                           ;incstack = 0
  6309                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6310                           ;nrf24l01Send@command stored from wreg
  6311  1607  0020               	movlb	0	; select bank0
  6312  1608  00A2               	movwf	nrf24l01Send@command
  6313                           
  6314                           ;nrf24l01.c: 49: enableInterrupts(0);
  6315  1609  3000               	movlw	0
  6316  160A  3194  247D  3196   	fcall	_enableInterrupts
  6317                           
  6318                           ;nrf24l01.c: 52: nrf24l01SPIStart();
  6319  160D  3194  2485  3196   	fcall	_nrf24l01SPIStart
  6320                           
  6321                           ;nrf24l01.c: 55: nrf24l01SPISend(command);
  6322  1610  0020               	movlb	0	; select bank0
  6323  1611  0822               	movf	nrf24l01Send@command,w
  6324  1612  3194  2496  3196   	fcall	_nrf24l01SPISend
  6325                           
  6326                           ;nrf24l01.c: 58: data = nrf24l01SPISend(data);
  6327  1615  0020               	movlb	0	; select bank0
  6328  1616  0820               	movf	nrf24l01Send@data,w
  6329  1617  3194  2496  3196   	fcall	_nrf24l01SPISend
  6330  161A  0020               	movlb	0	; select bank0
  6331  161B  00A1               	movwf	??_nrf24l01Send
  6332  161C  0821               	movf	??_nrf24l01Send,w
  6333  161D  00A0               	movwf	nrf24l01Send@data
  6334                           
  6335                           ;nrf24l01.c: 61: nrf24l01SPIEnd();
  6336  161E  3194  2476  3196   	fcall	_nrf24l01SPIEnd
  6337                           
  6338                           ;nrf24l01.c: 64: enableInterrupts(1);
  6339  1621  3001               	movlw	1
  6340  1622  3194  247D         	fcall	_enableInterrupts
  6341                           
  6342                           ;nrf24l01.c: 66: return data;
  6343  1624  0020               	movlb	0	; select bank0
  6344  1625  0820               	movf	nrf24l01Send@data,w
  6345  1626  0008               	return
  6346  1627                     __end_of_nrf24l01Send:	
  6347                           
  6348                           	psect	text20
  6349  1508                     __ptext20:	
  6350 ;; *************** function _memset *****************
  6351 ;; Defined at:
  6352 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;  p1              2    0[BANK0 ] PTR void 
  6355 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6356 ;;  c               2    2[BANK0 ] int 
  6357 ;;  n               2    4[BANK0 ] unsigned int 
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;  p               2    6[BANK0 ] PTR unsigned char 
  6360 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6361 ;; Return value:  Size  Location     Type
  6362 ;;                  2    0[BANK0 ] PTR void 
  6363 ;; Registers used:
  6364 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6370 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;Total ram usage:        8 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; Hardware stack levels required when called:    7
  6377 ;; This function calls:
  6378 ;;		Nothing
  6379 ;; This function is called by:
  6380 ;;		_sendMessage
  6381 ;;		_nrf24l01Service
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           
  6386                           ;psect for function _memset
  6387  1508                     _memset:	
  6388                           
  6389                           ;incstack = 0
  6390                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6391  1508  0020               	movlb	0	; select bank0
  6392  1509  0821               	movf	memset@p1+1,w
  6393  150A  00A7               	movwf	memset@p+1
  6394  150B  0820               	movf	memset@p1,w
  6395  150C  00A6               	movwf	memset@p
  6396  150D                     l2301:	
  6397  150D  3001               	movlw	1
  6398  150E  02A4               	subwf	memset@n,f
  6399  150F  3000               	movlw	0
  6400  1510  3BA5               	subwfb	memset@n+1,f
  6401  1511  0A24               	incf	memset@n,w
  6402  1512  1903               	btfsc	3,2
  6403  1513  0A25               	incf	memset@n+1,w
  6404  1514  1903               	btfsc	3,2
  6405  1515  0008               	return
  6406  1516  0826               	movf	memset@p,w
  6407  1517  0086               	movwf	6
  6408  1518  0827               	movf	memset@p+1,w
  6409  1519  0087               	movwf	7
  6410  151A  0822               	movf	memset@c,w
  6411  151B  0081               	movwf	1
  6412  151C  3001               	movlw	1
  6413  151D  07A6               	addwf	memset@p,f
  6414  151E  3000               	movlw	0
  6415  151F  3DA7               	addwfc	memset@p+1,f
  6416  1520  2D0D               	goto	l2301
  6417  1521                     __end_of_memset:	
  6418                           ;	Return value of _memset is never used
  6419                           
  6420                           
  6421                           	psect	text21
  6422  0DF0                     __ptext21:	
  6423 ;; *************** function _ftoa *****************
  6424 ;; Defined at:
  6425 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;  f               3    6[BANK1 ] float 
  6428 ;;  status          1    9[BANK1 ] PTR int 
  6429 ;;		 -> sendMessage@status(2), 
  6430 ;; Auto vars:     Size  Location     Type
  6431 ;;  l               4   14[BANK1 ] unsigned long 
  6432 ;;  rem             4   10[BANK1 ] unsigned long 
  6433 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  6434 ;;		 -> ftoa@buf(17), 
  6435 ;; Return value:  Size  Location     Type
  6436 ;;                  1    wreg      PTR unsigned char 
  6437 ;; Registers used:
  6438 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6444 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;Total ram usage:       14 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:   10
  6451 ;; This function calls:
  6452 ;;		___ftge
  6453 ;;		___ftmul
  6454 ;;		___ftneg
  6455 ;;		___ftsub
  6456 ;;		___fttol
  6457 ;;		___lltoft
  6458 ;;		_sprintf
  6459 ;; This function is called by:
  6460 ;;		_sendMessage
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           
  6465                           ;psect for function _ftoa
  6466  0DF0                     _ftoa:	
  6467                           
  6468                           ;incstack = 0
  6469                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6470  0DF0  3055               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6471  0DF1  0020               	movlb	0	; select bank0
  6472  0DF2  00EF               	movwf	??_ftoa
  6473  0DF3  086F               	movf	??_ftoa,w
  6474  0DF4  0021               	movlb	1	; select bank1
  6475  0DF5  00B2               	movwf	ftoa@cp^(0+128)
  6476  0DF6  0826               	movf	ftoa@f^(0+128),w
  6477  0DF7  0020               	movlb	0	; select bank0
  6478  0DF8  00A0               	movwf	___ftge@ff1
  6479  0DF9  0021               	movlb	1	; select bank1
  6480  0DFA  0827               	movf	(ftoa@f+1)^(0+128),w
  6481  0DFB  0020               	movlb	0	; select bank0
  6482  0DFC  00A1               	movwf	___ftge@ff1+1
  6483  0DFD  0021               	movlb	1	; select bank1
  6484  0DFE  0828               	movf	(ftoa@f+2)^(0+128),w
  6485  0DFF  0020               	movlb	0	; select bank0
  6486  0E00  00A2               	movwf	___ftge@ff1+2
  6487  0E01  3000               	movlw	0
  6488  0E02  00A3               	movwf	___ftge@ff2
  6489  0E03  3000               	movlw	0
  6490  0E04  00A4               	movwf	___ftge@ff2+1
  6491  0E05  3000               	movlw	0
  6492  0E06  00A5               	movwf	___ftge@ff2+2
  6493  0E07  3197  27C4  318D   	fcall	___ftge
  6494  0E0A  1803               	btfsc	3,0
  6495  0E0B  2E36               	goto	l2873
  6496  0E0C  302D               	movlw	45
  6497  0E0D  0020               	movlb	0	; select bank0
  6498  0E0E  00EF               	movwf	??_ftoa
  6499  0E0F  0021               	movlb	1	; select bank1
  6500  0E10  0832               	movf	ftoa@cp^(0+128),w
  6501  0E11  0086               	movwf	6
  6502  0E12  3001               	movlw	1	; select bank2/3
  6503  0E13  0087               	movwf	7
  6504  0E14  0020               	movlb	0	; select bank0
  6505  0E15  086F               	movf	??_ftoa,w
  6506  0E16  0081               	movwf	1
  6507  0E17  3001               	movlw	1
  6508  0E18  00EF               	movwf	??_ftoa
  6509  0E19  086F               	movf	??_ftoa,w
  6510  0E1A  0021               	movlb	1	; select bank1
  6511  0E1B  07B2               	addwf	ftoa@cp^(0+128),f
  6512  0E1C  0826               	movf	ftoa@f^(0+128),w
  6513  0E1D  0020               	movlb	0	; select bank0
  6514  0E1E  00D7               	movwf	___ftneg@f1
  6515  0E1F  0021               	movlb	1	; select bank1
  6516  0E20  0827               	movf	(ftoa@f+1)^(0+128),w
  6517  0E21  0020               	movlb	0	; select bank0
  6518  0E22  00D8               	movwf	___ftneg@f1+1
  6519  0E23  0021               	movlb	1	; select bank1
  6520  0E24  0828               	movf	(ftoa@f+2)^(0+128),w
  6521  0E25  0020               	movlb	0	; select bank0
  6522  0E26  00D9               	movwf	___ftneg@f1+2
  6523  0E27  3194  248D  318D   	fcall	___ftneg
  6524  0E2A  0020               	movlb	0	; select bank0
  6525  0E2B  0857               	movf	?___ftneg,w
  6526  0E2C  0021               	movlb	1	; select bank1
  6527  0E2D  00A6               	movwf	ftoa@f^(0+128)
  6528  0E2E  0020               	movlb	0	; select bank0
  6529  0E2F  0858               	movf	?___ftneg+1,w
  6530  0E30  0021               	movlb	1	; select bank1
  6531  0E31  00A7               	movwf	(ftoa@f+1)^(0+128)
  6532  0E32  0020               	movlb	0	; select bank0
  6533  0E33  0859               	movf	?___ftneg+2,w
  6534  0E34  0021               	movlb	1	; select bank1
  6535  0E35  00A8               	movwf	(ftoa@f+2)^(0+128)
  6536  0E36                     l2873:	
  6537  0E36  0021               	movlb	1	; select bank1
  6538  0E37  0826               	movf	ftoa@f^(0+128),w
  6539  0E38  0020               	movlb	0	; select bank0
  6540  0E39  00E7               	movwf	___fttol@f1
  6541  0E3A  0021               	movlb	1	; select bank1
  6542  0E3B  0827               	movf	(ftoa@f+1)^(0+128),w
  6543  0E3C  0020               	movlb	0	; select bank0
  6544  0E3D  00E8               	movwf	___fttol@f1+1
  6545  0E3E  0021               	movlb	1	; select bank1
  6546  0E3F  0828               	movf	(ftoa@f+2)^(0+128),w
  6547  0E40  0020               	movlb	0	; select bank0
  6548  0E41  00E9               	movwf	___fttol@f1+2
  6549  0E42  318B  234E  318D   	fcall	___fttol
  6550  0E45  0020               	movlb	0	; select bank0
  6551  0E46  086A               	movf	?___fttol+3,w
  6552  0E47  0021               	movlb	1	; select bank1
  6553  0E48  00B1               	movwf	(ftoa@l+3)^(0+128)
  6554  0E49  0020               	movlb	0	; select bank0
  6555  0E4A  0869               	movf	?___fttol+2,w
  6556  0E4B  0021               	movlb	1	; select bank1
  6557  0E4C  00B0               	movwf	(ftoa@l+2)^(0+128)
  6558  0E4D  0020               	movlb	0	; select bank0
  6559  0E4E  0868               	movf	?___fttol+1,w
  6560  0E4F  0021               	movlb	1	; select bank1
  6561  0E50  00AF               	movwf	(ftoa@l+1)^(0+128)
  6562  0E51  0020               	movlb	0	; select bank0
  6563  0E52  0867               	movf	?___fttol,w
  6564  0E53  0021               	movlb	1	; select bank1
  6565  0E54  00AE               	movwf	ftoa@l^(0+128)
  6566  0E55  0831               	movf	(ftoa@l+3)^(0+128),w
  6567  0E56  0020               	movlb	0	; select bank0
  6568  0E57  00AB               	movwf	___lltoft@c+3
  6569  0E58  0021               	movlb	1	; select bank1
  6570  0E59  0830               	movf	(ftoa@l+2)^(0+128),w
  6571  0E5A  0020               	movlb	0	; select bank0
  6572  0E5B  00AA               	movwf	___lltoft@c+2
  6573  0E5C  0021               	movlb	1	; select bank1
  6574  0E5D  082F               	movf	(ftoa@l+1)^(0+128),w
  6575  0E5E  0020               	movlb	0	; select bank0
  6576  0E5F  00A9               	movwf	___lltoft@c+1
  6577  0E60  0021               	movlb	1	; select bank1
  6578  0E61  082E               	movf	ftoa@l^(0+128),w
  6579  0E62  0020               	movlb	0	; select bank0
  6580  0E63  00A8               	movwf	___lltoft@c
  6581  0E64  3197  2709  318D   	fcall	___lltoft
  6582  0E67  0020               	movlb	0	; select bank0
  6583  0E68  0828               	movf	?___lltoft,w
  6584  0E69  00BB               	movwf	___ftsub@f2
  6585  0E6A  0829               	movf	?___lltoft+1,w
  6586  0E6B  00BC               	movwf	___ftsub@f2+1
  6587  0E6C  082A               	movf	?___lltoft+2,w
  6588  0E6D  00BD               	movwf	___ftsub@f2+2
  6589  0E6E  0021               	movlb	1	; select bank1
  6590  0E6F  0826               	movf	ftoa@f^(0+128),w
  6591  0E70  0020               	movlb	0	; select bank0
  6592  0E71  00BE               	movwf	___ftsub@f1
  6593  0E72  0021               	movlb	1	; select bank1
  6594  0E73  0827               	movf	(ftoa@f+1)^(0+128),w
  6595  0E74  0020               	movlb	0	; select bank0
  6596  0E75  00BF               	movwf	___ftsub@f1+1
  6597  0E76  0021               	movlb	1	; select bank1
  6598  0E77  0828               	movf	(ftoa@f+2)^(0+128),w
  6599  0E78  0020               	movlb	0	; select bank0
  6600  0E79  00C0               	movwf	___ftsub@f1+2
  6601  0E7A  3195  25AC  318D   	fcall	___ftsub
  6602  0E7D  0020               	movlb	0	; select bank0
  6603  0E7E  083B               	movf	?___ftsub,w
  6604  0E7F  0021               	movlb	1	; select bank1
  6605  0E80  00A6               	movwf	ftoa@f^(0+128)
  6606  0E81  0020               	movlb	0	; select bank0
  6607  0E82  083C               	movf	?___ftsub+1,w
  6608  0E83  0021               	movlb	1	; select bank1
  6609  0E84  00A7               	movwf	(ftoa@f+1)^(0+128)
  6610  0E85  0020               	movlb	0	; select bank0
  6611  0E86  083D               	movf	?___ftsub+2,w
  6612  0E87  0021               	movlb	1	; select bank1
  6613  0E88  00A8               	movwf	(ftoa@f+2)^(0+128)
  6614  0E89  0826               	movf	ftoa@f^(0+128),w
  6615  0E8A  0020               	movlb	0	; select bank0
  6616  0E8B  00DA               	movwf	___ftmul@f2
  6617  0E8C  0021               	movlb	1	; select bank1
  6618  0E8D  0827               	movf	(ftoa@f+1)^(0+128),w
  6619  0E8E  0020               	movlb	0	; select bank0
  6620  0E8F  00DB               	movwf	___ftmul@f2+1
  6621  0E90  0021               	movlb	1	; select bank1
  6622  0E91  0828               	movf	(ftoa@f+2)^(0+128),w
  6623  0E92  0020               	movlb	0	; select bank0
  6624  0E93  00DC               	movwf	___ftmul@f2+2
  6625  0E94  3024               	movlw	36
  6626  0E95  00D7               	movwf	___ftmul@f1
  6627  0E96  3074               	movlw	116
  6628  0E97  00D8               	movwf	___ftmul@f1+1
  6629  0E98  3049               	movlw	73
  6630  0E99  00D9               	movwf	___ftmul@f1+2
  6631  0E9A  318D  253C  318D   	fcall	___ftmul
  6632  0E9D  0020               	movlb	0	; select bank0
  6633  0E9E  0857               	movf	?___ftmul,w
  6634  0E9F  00E7               	movwf	___fttol@f1
  6635  0EA0  0858               	movf	?___ftmul+1,w
  6636  0EA1  00E8               	movwf	___fttol@f1+1
  6637  0EA2  0859               	movf	?___ftmul+2,w
  6638  0EA3  00E9               	movwf	___fttol@f1+2
  6639  0EA4  318B  234E  318D   	fcall	___fttol
  6640  0EA7  0020               	movlb	0	; select bank0
  6641  0EA8  086A               	movf	?___fttol+3,w
  6642  0EA9  0021               	movlb	1	; select bank1
  6643  0EAA  00AD               	movwf	(ftoa@rem+3)^(0+128)
  6644  0EAB  0020               	movlb	0	; select bank0
  6645  0EAC  0869               	movf	?___fttol+2,w
  6646  0EAD  0021               	movlb	1	; select bank1
  6647  0EAE  00AC               	movwf	(ftoa@rem+2)^(0+128)
  6648  0EAF  0020               	movlb	0	; select bank0
  6649  0EB0  0868               	movf	?___fttol+1,w
  6650  0EB1  0021               	movlb	1	; select bank1
  6651  0EB2  00AB               	movwf	(ftoa@rem+1)^(0+128)
  6652  0EB3  0020               	movlb	0	; select bank0
  6653  0EB4  0867               	movf	?___fttol,w
  6654  0EB5  0021               	movlb	1	; select bank1
  6655  0EB6  00AA               	movwf	ftoa@rem^(0+128)
  6656  0EB7  3029               	movlw	low (STR_14| (0+32768))
  6657  0EB8  0020               	movlb	0	; select bank0
  6658  0EB9  00B8               	movwf	sprintf@f
  6659  0EBA  3098               	movlw	high (STR_14| (0+32768))
  6660  0EBB  00B9               	movwf	sprintf@f+1
  6661  0EBC  0021               	movlb	1	; select bank1
  6662  0EBD  0831               	movf	(ftoa@l+3)^(0+128),w
  6663  0EBE  0020               	movlb	0	; select bank0
  6664  0EBF  00BD               	movwf	?_sprintf+5
  6665  0EC0  0021               	movlb	1	; select bank1
  6666  0EC1  0830               	movf	(ftoa@l+2)^(0+128),w
  6667  0EC2  0020               	movlb	0	; select bank0
  6668  0EC3  00BC               	movwf	?_sprintf+4
  6669  0EC4  0021               	movlb	1	; select bank1
  6670  0EC5  082F               	movf	(ftoa@l+1)^(0+128),w
  6671  0EC6  0020               	movlb	0	; select bank0
  6672  0EC7  00BB               	movwf	?_sprintf+3
  6673  0EC8  0021               	movlb	1	; select bank1
  6674  0EC9  082E               	movf	ftoa@l^(0+128),w
  6675  0ECA  0020               	movlb	0	; select bank0
  6676  0ECB  00BA               	movwf	?_sprintf+2
  6677  0ECC  0021               	movlb	1	; select bank1
  6678  0ECD  082D               	movf	(ftoa@rem+3)^(0+128),w
  6679  0ECE  0020               	movlb	0	; select bank0
  6680  0ECF  00C1               	movwf	?_sprintf+9
  6681  0ED0  0021               	movlb	1	; select bank1
  6682  0ED1  082C               	movf	(ftoa@rem+2)^(0+128),w
  6683  0ED2  0020               	movlb	0	; select bank0
  6684  0ED3  00C0               	movwf	?_sprintf+8
  6685  0ED4  0021               	movlb	1	; select bank1
  6686  0ED5  082B               	movf	(ftoa@rem+1)^(0+128),w
  6687  0ED6  0020               	movlb	0	; select bank0
  6688  0ED7  00BF               	movwf	?_sprintf+7
  6689  0ED8  0021               	movlb	1	; select bank1
  6690  0ED9  082A               	movf	ftoa@rem^(0+128),w
  6691  0EDA  0020               	movlb	0	; select bank0
  6692  0EDB  00BE               	movwf	?_sprintf+6
  6693  0EDC  0021               	movlb	1	; select bank1
  6694  0EDD  0832               	movf	ftoa@cp^(0+128),w
  6695  0EDE  3182  2260         	fcall	_sprintf
  6696  0EE0  3055               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6697  0EE1  0008               	return
  6698  0EE2                     __end_of_ftoa:	
  6699                           
  6700                           	psect	text22
  6701  0260                     __ptext22:	
  6702 ;; *************** function _sprintf *****************
  6703 ;; Defined at:
  6704 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;  sp              1    wreg     PTR unsigned char 
  6707 ;;		 -> ftoa@buf(17), 
  6708 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  6709 ;;		 -> STR_14(11), 
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  6712 ;;		 -> ftoa@buf(17), 
  6713 ;;  val             4   42[BANK0 ] unsigned long 
  6714 ;;  tmpval          4    0        struct .
  6715 ;;  prec            2   49[BANK0 ] int 
  6716 ;;  width           2   47[BANK0 ] int 
  6717 ;;  cp              2    0        PTR const unsigned char 
  6718 ;;  len             2    0        unsigned int 
  6719 ;;  c               1   51[BANK0 ] unsigned char 
  6720 ;;  ap              1   41[BANK0 ] PTR void [1]
  6721 ;;		 -> ?_sprintf(2), 
  6722 ;;  flag            1   40[BANK0 ] unsigned char 
  6723 ;; Return value:  Size  Location     Type
  6724 ;;                  2   24[BANK0 ] int 
  6725 ;; Registers used:
  6726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6727 ;; Tracked objects:
  6728 ;;		On entry : 0/0
  6729 ;;		On exit  : 0/0
  6730 ;;		Unchanged: 0/0
  6731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6732 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;Total ram usage:       28 bytes
  6737 ;; Hardware stack levels used:    1
  6738 ;; Hardware stack levels required when called:    8
  6739 ;; This function calls:
  6740 ;;		___lldiv
  6741 ;;		___llmod
  6742 ;;		___wmul
  6743 ;;		_isdigit
  6744 ;; This function is called by:
  6745 ;;		_ftoa
  6746 ;; This function uses a non-reentrant model
  6747 ;;
  6748                           
  6749                           
  6750                           ;psect for function _sprintf
  6751  0260                     _sprintf:	
  6752                           
  6753                           ;incstack = 0
  6754                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6755                           ;sprintf@sp stored from wreg
  6756  0260  0020               	movlb	0	; select bank0
  6757  0261  00CE               	movwf	sprintf@sp
  6758                           
  6759                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6760  0262  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6761  0263  00C2               	movwf	??_sprintf
  6762  0264  0842               	movf	??_sprintf,w
  6763  0265  00C9               	movwf	sprintf@ap
  6764  0266                     l2675:	
  6765                           ;doprnt.c: 548: while((c = *f++)) {
  6766                           
  6767  0266  0839               	movf	sprintf@f+1,w
  6768  0267  00C3               	movwf	??_sprintf+1
  6769  0268  0838               	movf	sprintf@f,w
  6770  0269  00C2               	movwf	??_sprintf
  6771  026A  0AB8               	incf	sprintf@f,f
  6772  026B  1903               	skipnz
  6773  026C  0AB9               	incf	sprintf@f+1,f
  6774  026D  0842               	movf	??_sprintf,w
  6775  026E  0084               	movwf	4
  6776  026F  0843               	movf	??_sprintf+1,w
  6777  0270  0085               	movwf	5
  6778  0271  0800               	movf	0,w	;code access
  6779  0272  00C4               	movwf	??_sprintf+2
  6780  0273  0844               	movf	??_sprintf+2,w
  6781  0274  00D3               	movwf	sprintf@c
  6782  0275  0853               	movf	sprintf@c,w
  6783  0276  1903               	btfsc	3,2
  6784  0277  2C27               	goto	l2677
  6785                           
  6786                           ;doprnt.c: 550: if(c != '%')
  6787  0278  3025               	movlw	37
  6788  0279  0653               	xorwf	sprintf@c,w
  6789  027A  1903               	btfsc	3,2
  6790  027B  2A89               	goto	l2587
  6791                           
  6792                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  6793  027C  0853               	movf	sprintf@c,w
  6794  027D  00C2               	movwf	??_sprintf
  6795  027E  084E               	movf	sprintf@sp,w
  6796  027F  0086               	movwf	6
  6797  0280  3001               	movlw	1	; select bank2/3
  6798  0281  0087               	movwf	7
  6799  0282  0842               	movf	??_sprintf,w
  6800  0283  0081               	movwf	1
  6801  0284  3001               	movlw	1
  6802  0285  00C2               	movwf	??_sprintf
  6803  0286  0842               	movf	??_sprintf,w
  6804  0287  07CE               	addwf	sprintf@sp,f
  6805                           
  6806                           ;doprnt.c: 554: continue;
  6807  0288  2A66               	goto	l2675
  6808  0289                     l2587:	
  6809                           
  6810                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  6811  0289  01CF               	clrf	sprintf@width
  6812  028A  01D0               	clrf	sprintf@width+1
  6813                           
  6814                           ;doprnt.c: 560: flag = 0;
  6815  028B  01C8               	clrf	sprintf@flag
  6816                           
  6817                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  6818  028C  0838               	movf	sprintf@f,w
  6819  028D  0084               	movwf	4
  6820  028E  0839               	movf	sprintf@f+1,w
  6821  028F  0085               	movwf	5
  6822  0290  0800               	movf	0,w	;code access
  6823  0291  3194  24A3  3182   	fcall	_isdigit
  6824  0294  1C03               	btfss	3,0
  6825  0295  2AC7               	goto	l2601
  6826                           
  6827                           ;doprnt.c: 610: width = 0;
  6828  0296  0020               	movlb	0	; select bank0
  6829  0297  01CF               	clrf	sprintf@width
  6830  0298  01D0               	clrf	sprintf@width+1
  6831  0299                     l2593:	
  6832                           ;doprnt.c: 611: do {
  6833                           
  6834                           
  6835                           ;doprnt.c: 612: width *= 10;
  6836  0299  300A               	movlw	10
  6837  029A  0020               	movlb	0	; select bank0
  6838  029B  00A0               	movwf	___wmul@multiplier
  6839  029C  3000               	movlw	0
  6840  029D  00A1               	movwf	___wmul@multiplier+1
  6841  029E  0850               	movf	sprintf@width+1,w
  6842  029F  00A3               	movwf	___wmul@multiplicand+1
  6843  02A0  084F               	movf	sprintf@width,w
  6844  02A1  00A2               	movwf	___wmul@multiplicand
  6845  02A2  3195  2572  3182   	fcall	___wmul
  6846  02A5  0020               	movlb	0	; select bank0
  6847  02A6  0821               	movf	?___wmul+1,w
  6848  02A7  00D0               	movwf	sprintf@width+1
  6849  02A8  0820               	movf	?___wmul,w
  6850  02A9  00CF               	movwf	sprintf@width
  6851                           
  6852                           ;doprnt.c: 613: width += *f++ - '0';
  6853  02AA  0838               	movf	sprintf@f,w
  6854  02AB  0084               	movwf	4
  6855  02AC  0839               	movf	sprintf@f+1,w
  6856  02AD  0085               	movwf	5
  6857  02AE  0800               	movf	0,w	;code access
  6858  02AF  3ED0               	addlw	208
  6859  02B0  00C2               	movwf	??_sprintf
  6860  02B1  30FF               	movlw	255
  6861  02B2  1803               	skipnc
  6862  02B3  3000               	movlw	0
  6863  02B4  00C3               	movwf	??_sprintf+1
  6864  02B5  0842               	movf	??_sprintf,w
  6865  02B6  07CF               	addwf	sprintf@width,f
  6866  02B7  0843               	movf	??_sprintf+1,w
  6867  02B8  3DD0               	addwfc	sprintf@width+1,f
  6868  02B9  3001               	movlw	1
  6869  02BA  07B8               	addwf	sprintf@f,f
  6870  02BB  3000               	movlw	0
  6871  02BC  3DB9               	addwfc	sprintf@f+1,f
  6872                           
  6873                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  6874  02BD  0838               	movf	sprintf@f,w
  6875  02BE  0084               	movwf	4
  6876  02BF  0839               	movf	sprintf@f+1,w
  6877  02C0  0085               	movwf	5
  6878  02C1  0800               	movf	0,w	;code access
  6879  02C2  3194  24A3  3182   	fcall	_isdigit
  6880  02C5  1803               	btfsc	3,0
  6881  02C6  2A99               	goto	l2593
  6882  02C7                     l2601:	
  6883                           
  6884                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  6885  02C7  0020               	movlb	0	; select bank0
  6886  02C8  0838               	movf	sprintf@f,w
  6887  02C9  0084               	movwf	4
  6888  02CA  0839               	movf	sprintf@f+1,w
  6889  02CB  0085               	movwf	5
  6890  02CC  0012               	moviw fsr0++
  6891  02CD  3A2E               	xorlw	46
  6892  02CE  1D03               	btfss	3,2
  6893  02CF  2B05               	goto	l2613
  6894                           
  6895                           ;doprnt.c: 625: f++;
  6896  02D0  3001               	movlw	1
  6897  02D1  07B8               	addwf	sprintf@f,f
  6898  02D2  3000               	movlw	0
  6899  02D3  3DB9               	addwfc	sprintf@f+1,f
  6900                           
  6901                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  6902  02D4  01D1               	clrf	sprintf@prec
  6903  02D5  01D2               	clrf	sprintf@prec+1
  6904  02D6                     l2611:	
  6905                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  6906                           
  6907  02D6  0838               	movf	sprintf@f,w
  6908  02D7  0084               	movwf	4
  6909  02D8  0839               	movf	sprintf@f+1,w
  6910  02D9  0085               	movwf	5
  6911  02DA  0800               	movf	0,w	;code access
  6912  02DB  3194  24A3  3182   	fcall	_isdigit
  6913  02DE  1C03               	btfss	3,0
  6914  02DF  2B10               	goto	l2619
  6915                           
  6916                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  6917  02E0  0020               	movlb	0	; select bank0
  6918  02E1  0838               	movf	sprintf@f,w
  6919  02E2  0084               	movwf	4
  6920  02E3  0839               	movf	sprintf@f+1,w
  6921  02E4  0085               	movwf	5
  6922  02E5  0800               	movf	0,w	;code access
  6923  02E6  00C2               	movwf	??_sprintf
  6924  02E7  01C3               	clrf	??_sprintf+1
  6925  02E8  0852               	movf	sprintf@prec+1,w
  6926  02E9  00A1               	movwf	___wmul@multiplier+1
  6927  02EA  0851               	movf	sprintf@prec,w
  6928  02EB  00A0               	movwf	___wmul@multiplier
  6929  02EC  300A               	movlw	10
  6930  02ED  00A2               	movwf	___wmul@multiplicand
  6931  02EE  3000               	movlw	0
  6932  02EF  00A3               	movwf	___wmul@multiplicand+1
  6933  02F0  3195  2572  3182   	fcall	___wmul
  6934  02F3  0020               	movlb	0	; select bank0
  6935  02F4  0842               	movf	??_sprintf,w
  6936  02F5  0720               	addwf	?___wmul,w
  6937  02F6  00C4               	movwf	??_sprintf+2
  6938  02F7  0843               	movf	??_sprintf+1,w
  6939  02F8  3D21               	addwfc	?___wmul+1,w
  6940  02F9  00C5               	movwf	??_sprintf+3
  6941  02FA  0844               	movf	??_sprintf+2,w
  6942  02FB  3ED0               	addlw	208
  6943  02FC  00D1               	movwf	sprintf@prec
  6944  02FD  30FF               	movlw	255
  6945  02FE  3D45               	addwfc	??_sprintf+3,w
  6946  02FF  00D2               	movwf	sprintf@prec+1
  6947  0300  3001               	movlw	1
  6948  0301  07B8               	addwf	sprintf@f,f
  6949  0302  3000               	movlw	0
  6950  0303  3DB9               	addwfc	sprintf@f+1,f
  6951  0304  2AD6               	goto	l2611
  6952  0305                     l2613:	
  6953                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  6954                           
  6955                           
  6956                           ;doprnt.c: 645: prec = 0;
  6957  0305  0020               	movlb	0	; select bank0
  6958  0306  01D1               	clrf	sprintf@prec
  6959  0307  01D2               	clrf	sprintf@prec+1
  6960                           
  6961                           ;doprnt.c: 654: switch(c = *f++) {
  6962                           
  6963                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  6964  0308  2B10               	goto	l2619
  6965  0309                     l423:	
  6966                           ;doprnt.c: 660: case 'l':
  6967                           
  6968                           ;doprnt.c: 657: goto alldone;
  6969                           
  6970                           ;doprnt.c: 656: case 0:
  6971                           
  6972                           
  6973                           ;doprnt.c: 662: flag |= 0x10;
  6974  0309  1648               	bsf	sprintf@flag,4
  6975                           
  6976                           ;doprnt.c: 663: goto loop;
  6977  030A  2B10               	goto	l2619
  6978  030B                     l2615:	
  6979                           ;doprnt.c: 836: case 'u':
  6980                           
  6981                           ;doprnt.c: 832: continue;
  6982                           
  6983                           ;doprnt.c: 821: default:
  6984                           
  6985                           
  6986                           ;doprnt.c: 837: flag |= 0xC0;
  6987  030B  30C0               	movlw	192
  6988  030C  00C2               	movwf	??_sprintf
  6989  030D  0842               	movf	??_sprintf,w
  6990  030E  04C8               	iorwf	sprintf@flag,f
  6991                           
  6992                           ;doprnt.c: 841: }
  6993                           
  6994                           ;doprnt.c: 838: break;
  6995  030F  2B28               	goto	l426
  6996  0310                     l2619:	
  6997  0310  0020               	movlb	0	; select bank0
  6998  0311  0839               	movf	sprintf@f+1,w
  6999  0312  00C3               	movwf	??_sprintf+1
  7000  0313  0838               	movf	sprintf@f,w
  7001  0314  00C2               	movwf	??_sprintf
  7002  0315  0AB8               	incf	sprintf@f,f
  7003  0316  1903               	skipnz
  7004  0317  0AB9               	incf	sprintf@f+1,f
  7005  0318  0842               	movf	??_sprintf,w
  7006  0319  0084               	movwf	4
  7007  031A  0843               	movf	??_sprintf+1,w
  7008  031B  0085               	movwf	5
  7009  031C  0800               	movf	0,w	;code access
  7010  031D  00D3               	movwf	sprintf@c
  7011                           
  7012                           ; Switch size 1, requested type "space"
  7013                           ; Number of cases is 3, Range of values is 0 to 117
  7014                           ; switch strategies available:
  7015                           ; Name         Instructions Cycles
  7016                           ; simple_byte           10     6 (average)
  7017                           ; direct_byte          242     6 (fixed)
  7018                           ; jumptable            260     6 (fixed)
  7019                           ;	Chosen strategy is simple_byte
  7020  031E  3A00               	xorlw	0	; case 0
  7021  031F  1903               	skipnz
  7022  0320  2C27               	goto	l2677
  7023  0321  3A6C               	xorlw	108	; case 108
  7024  0322  1903               	skipnz
  7025  0323  2B09               	goto	l423
  7026  0324  3A19               	xorlw	25	; case 117
  7027  0325  1903               	skipnz
  7028  0326  2B0B               	goto	l2615
  7029  0327  2A66               	goto	l2675
  7030  0328                     l426:	
  7031                           
  7032                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7033  0328  1E48               	btfss	sprintf@flag,4
  7034  0329  2B37               	goto	l2625
  7035                           
  7036                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7037  032A  0849               	movf	sprintf@ap,w
  7038  032B  0086               	movwf	6
  7039  032C  0187               	clrf	7
  7040  032D  3F40               	moviw [0]fsr1
  7041  032E  00CA               	movwf	sprintf@val
  7042  032F  3F41               	moviw [1]fsr1
  7043  0330  00CB               	movwf	sprintf@val+1
  7044  0331  3F42               	moviw [2]fsr1
  7045  0332  00CC               	movwf	sprintf@val+2
  7046  0333  3F43               	moviw [3]fsr1
  7047  0334  00CD               	movwf	sprintf@val+3
  7048  0335  3004               	movlw	4
  7049  0336  2B45               	goto	L1
  7050  0337                     l2625:	
  7051                           
  7052                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7053  0337  0849               	movf	sprintf@ap,w
  7054  0338  0086               	movwf	6
  7055  0339  0187               	clrf	7
  7056  033A  3F40               	moviw [0]fsr1
  7057  033B  00C2               	movwf	??_sprintf
  7058  033C  3F41               	moviw [1]fsr1
  7059  033D  00C3               	movwf	??_sprintf+1
  7060  033E  0842               	movf	??_sprintf,w
  7061  033F  00CA               	movwf	sprintf@val
  7062  0340  0843               	movf	??_sprintf+1,w
  7063  0341  00CB               	movwf	sprintf@val+1
  7064  0342  01CC               	clrf	sprintf@val+2
  7065  0343  01CD               	clrf	sprintf@val+3
  7066  0344  3002               	movlw	2
  7067  0345                     L1:	
  7068  0345  00C2               	movwf	??_sprintf
  7069  0346  0842               	movf	??_sprintf,w
  7070  0347  07C9               	addwf	sprintf@ap,f
  7071                           
  7072                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7073  0348  0851               	movf	sprintf@prec,w
  7074  0349  0452               	iorwf	sprintf@prec+1,w
  7075  034A  1D03               	btfss	3,2
  7076  034B  2B56               	goto	l2635
  7077  034C  084D               	movf	sprintf@val+3,w
  7078  034D  044C               	iorwf	sprintf@val+2,w
  7079  034E  044B               	iorwf	sprintf@val+1,w
  7080  034F  044A               	iorwf	sprintf@val,w
  7081  0350  1D03               	skipz
  7082  0351  2B56               	goto	l2635
  7083                           
  7084                           ;doprnt.c: 1310: prec++;
  7085  0352  3001               	movlw	1
  7086  0353  07D1               	addwf	sprintf@prec,f
  7087  0354  3000               	movlw	0
  7088  0355  3DD2               	addwfc	sprintf@prec+1,f
  7089  0356                     l2635:	
  7090                           
  7091                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7092  0356  01D3               	clrf	sprintf@c
  7093  0357  0AD3               	incf	sprintf@c,f
  7094  0358  300A               	movlw	10
  7095  0359  0653               	xorwf	sprintf@c,w
  7096  035A  1903               	btfsc	3,2
  7097  035B  2B89               	goto	l2647
  7098  035C                     l2641:	
  7099                           
  7100                           ;doprnt.c: 1325: if(val < dpowers[c])
  7101  035C  0853               	movf	sprintf@c,w
  7102  035D  00C2               	movwf	??_sprintf
  7103  035E  01C3               	clrf	??_sprintf+1
  7104  035F  35C2               	lslf	??_sprintf,f
  7105  0360  0DC3               	rlf	??_sprintf+1,f
  7106  0361  35C2               	lslf	??_sprintf,f
  7107  0362  0DC3               	rlf	??_sprintf+1,f
  7108  0363  3000               	movlw	low (_dpowers| (0+32768))
  7109  0364  0742               	addwf	??_sprintf,w
  7110  0365  0084               	movwf	4
  7111  0366  3098               	movlw	high (_dpowers| (0+32768))
  7112  0367  3D43               	addwfc	??_sprintf+1,w
  7113  0368  0085               	movwf	5
  7114  0369  3F00               	moviw [0]fsr0
  7115  036A  00C4               	movwf	??_sprintf+2
  7116  036B  3F01               	moviw [1]fsr0
  7117  036C  00C5               	movwf	??_sprintf+3
  7118  036D  3F02               	moviw [2]fsr0
  7119  036E  00C6               	movwf	??_sprintf+4
  7120  036F  3F03               	moviw [3]fsr0
  7121  0370  00C7               	movwf	??_sprintf+5
  7122  0371  0847               	movf	??_sprintf+5,w
  7123  0372  024D               	subwf	sprintf@val+3,w
  7124  0373  1D03               	skipz
  7125  0374  2B7F               	goto	u2675
  7126  0375  0846               	movf	??_sprintf+4,w
  7127  0376  024C               	subwf	sprintf@val+2,w
  7128  0377  1D03               	skipz
  7129  0378  2B7F               	goto	u2675
  7130  0379  0845               	movf	??_sprintf+3,w
  7131  037A  024B               	subwf	sprintf@val+1,w
  7132  037B  1D03               	skipz
  7133  037C  2B7F               	goto	u2675
  7134  037D  0844               	movf	??_sprintf+2,w
  7135  037E  024A               	subwf	sprintf@val,w
  7136  037F                     u2675:	
  7137  037F  1C03               	btfss	3,0
  7138  0380  2B89               	goto	l2647
  7139                           
  7140                           ;doprnt.c: 1326: break;
  7141  0381  3001               	movlw	1
  7142  0382  00C2               	movwf	??_sprintf
  7143  0383  0842               	movf	??_sprintf,w
  7144  0384  07D3               	addwf	sprintf@c,f
  7145  0385  300A               	movlw	10
  7146  0386  0653               	xorwf	sprintf@c,w
  7147  0387  1D03               	btfss	3,2
  7148  0388  2B5C               	goto	l2641
  7149  0389                     l2647:	
  7150                           
  7151                           ;doprnt.c: 1358: if(c < prec)
  7152  0389  0852               	movf	sprintf@prec+1,w
  7153  038A  3A80               	xorlw	128
  7154  038B  3C80               	sublw	128
  7155  038C  1D03               	skipz
  7156  038D  2B90               	goto	u2695
  7157  038E  0851               	movf	sprintf@prec,w
  7158  038F  0253               	subwf	sprintf@c,w
  7159  0390                     u2695:	
  7160  0390  1803               	skipnc
  7161  0391  2B98               	goto	l2651
  7162                           
  7163                           ;doprnt.c: 1359: c = prec;
  7164  0392  0020               	movlb	0	; select bank0
  7165  0393  0851               	movf	sprintf@prec,w
  7166  0394  00C2               	movwf	??_sprintf
  7167  0395  0842               	movf	??_sprintf,w
  7168  0396  00D3               	movwf	sprintf@c
  7169  0397  2BAC               	goto	l434
  7170  0398                     l2651:	
  7171                           
  7172                           ;doprnt.c: 1360: else if(prec < c)
  7173  0398  0020               	movlb	0	; select bank0
  7174  0399  0852               	movf	sprintf@prec+1,w
  7175  039A  3A80               	xorlw	128
  7176  039B  00C2               	movwf	??_sprintf
  7177  039C  3080               	movlw	128
  7178  039D  0242               	subwf	??_sprintf,w
  7179  039E  1D03               	skipz
  7180  039F  2BA2               	goto	u2705
  7181  03A0  0853               	movf	sprintf@c,w
  7182  03A1  0251               	subwf	sprintf@prec,w
  7183  03A2                     u2705:	
  7184  03A2  1803               	skipnc
  7185  03A3  2BAC               	goto	l434
  7186                           
  7187                           ;doprnt.c: 1361: prec = c;
  7188  03A4  0020               	movlb	0	; select bank0
  7189  03A5  0853               	movf	sprintf@c,w
  7190  03A6  00C2               	movwf	??_sprintf
  7191  03A7  01C3               	clrf	??_sprintf+1
  7192  03A8  0842               	movf	??_sprintf,w
  7193  03A9  00D1               	movwf	sprintf@prec
  7194  03AA  0843               	movf	??_sprintf+1,w
  7195  03AB  00D2               	movwf	sprintf@prec+1
  7196  03AC                     l434:	
  7197                           
  7198                           ;doprnt.c: 1400: if(width > c)
  7199  03AC  0020               	movlb	0	; select bank0
  7200  03AD  0850               	movf	sprintf@width+1,w
  7201  03AE  3A80               	xorlw	128
  7202  03AF  3C80               	sublw	128
  7203  03B0  1D03               	skipz
  7204  03B1  2BB4               	goto	u2715
  7205  03B2  084F               	movf	sprintf@width,w
  7206  03B3  0253               	subwf	sprintf@c,w
  7207  03B4                     u2715:	
  7208  03B4  1803               	skipnc
  7209  03B5  2BBF               	goto	l2657
  7210                           
  7211                           ;doprnt.c: 1401: width -= c;
  7212  03B6  0020               	movlb	0	; select bank0
  7213  03B7  0853               	movf	sprintf@c,w
  7214  03B8  00C2               	movwf	??_sprintf
  7215  03B9  01C3               	clrf	??_sprintf+1
  7216  03BA  0842               	movf	??_sprintf,w
  7217  03BB  02CF               	subwf	sprintf@width,f
  7218  03BC  0843               	movf	??_sprintf+1,w
  7219  03BD  3BD0               	subwfb	sprintf@width+1,f
  7220  03BE  2BC2               	goto	l2659
  7221  03BF                     l2657:	
  7222                           
  7223                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7224  03BF  0020               	movlb	0	; select bank0
  7225  03C0  01CF               	clrf	sprintf@width
  7226  03C1  01D0               	clrf	sprintf@width+1
  7227  03C2                     l2659:	
  7228                           
  7229                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7230  03C2  084F               	movf	sprintf@width,w
  7231  03C3  0450               	iorwf	sprintf@width+1,w
  7232  03C4  1903               	btfsc	3,2
  7233  03C5  2C1C               	goto	l2673
  7234                           
  7235                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7236                           
  7237                           ;doprnt.c: 1448: do
  7238  03C6  3020               	movlw	32
  7239  03C7  00C2               	movwf	??_sprintf
  7240  03C8  084E               	movf	sprintf@sp,w
  7241  03C9  0086               	movwf	6
  7242  03CA  3001               	movlw	1	; select bank2/3
  7243  03CB  0087               	movwf	7
  7244  03CC  0842               	movf	??_sprintf,w
  7245  03CD  0081               	movwf	1
  7246  03CE  3001               	movlw	1
  7247  03CF  00C2               	movwf	??_sprintf
  7248  03D0  0842               	movf	??_sprintf,w
  7249  03D1  07CE               	addwf	sprintf@sp,f
  7250                           
  7251                           ;doprnt.c: 1450: while(--width);
  7252  03D2  30FF               	movlw	255
  7253  03D3  07CF               	addwf	sprintf@width,f
  7254  03D4  30FF               	movlw	255
  7255  03D5  3DD0               	addwfc	sprintf@width+1,f
  7256  03D6  2BC2               	goto	l2659
  7257  03D7                     l2667:	
  7258                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7259                           
  7260                           
  7261                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7262  03D7  3000               	movlw	0
  7263  03D8  00B1               	movwf	___llmod@divisor+3
  7264  03D9  3000               	movlw	0
  7265  03DA  00B0               	movwf	___llmod@divisor+2
  7266  03DB  3000               	movlw	0
  7267  03DC  00AF               	movwf	___llmod@divisor+1
  7268  03DD  300A               	movlw	10
  7269  03DE  00AE               	movwf	___llmod@divisor
  7270  03DF  0852               	movf	sprintf@prec+1,w
  7271  03E0  0085               	movwf	5
  7272  03E1  0851               	movf	sprintf@prec,w
  7273  03E2  0084               	movwf	4
  7274  03E3  3584               	lslf	4,f
  7275  03E4  0D85               	rlf	5,f
  7276  03E5  3584               	lslf	4,f
  7277  03E6  0D85               	rlf	5,f
  7278  03E7  3000               	movlw	low (_dpowers| (0+32768))
  7279  03E8  0784               	addwf	4,f
  7280  03E9  3098               	movlw	high (_dpowers| (0+32768))
  7281  03EA  3D85               	addwfc	5,f
  7282  03EB  3F00               	moviw [0]fsr0
  7283  03EC  00A0               	movwf	___lldiv@divisor
  7284  03ED  3F01               	moviw [1]fsr0
  7285  03EE  00A1               	movwf	___lldiv@divisor+1
  7286  03EF  3F02               	moviw [2]fsr0
  7287  03F0  00A2               	movwf	___lldiv@divisor+2
  7288  03F1  3F03               	moviw [3]fsr0
  7289  03F2  00A3               	movwf	___lldiv@divisor+3
  7290  03F3  084D               	movf	sprintf@val+3,w
  7291  03F4  00A7               	movwf	___lldiv@dividend+3
  7292  03F5  084C               	movf	sprintf@val+2,w
  7293  03F6  00A6               	movwf	___lldiv@dividend+2
  7294  03F7  084B               	movf	sprintf@val+1,w
  7295  03F8  00A5               	movwf	___lldiv@dividend+1
  7296  03F9  084A               	movf	sprintf@val,w
  7297  03FA  00A4               	movwf	___lldiv@dividend
  7298  03FB  3189  2116  3182   	fcall	___lldiv
  7299  03FE  0020               	movlb	0	; select bank0
  7300  03FF  0823               	movf	?___lldiv+3,w
  7301  0400  00B5               	movwf	___llmod@dividend+3
  7302  0401  0822               	movf	?___lldiv+2,w
  7303  0402  00B4               	movwf	___llmod@dividend+2
  7304  0403  0821               	movf	?___lldiv+1,w
  7305  0404  00B3               	movwf	___llmod@dividend+1
  7306  0405  0820               	movf	?___lldiv,w
  7307  0406  00B2               	movwf	___llmod@dividend
  7308  0407  3188  2004  3182   	fcall	___llmod
  7309  040A  0020               	movlb	0	; select bank0
  7310  040B  082E               	movf	?___llmod,w
  7311  040C  3E30               	addlw	48
  7312  040D  00C2               	movwf	??_sprintf
  7313  040E  0842               	movf	??_sprintf,w
  7314  040F  00D3               	movwf	sprintf@c
  7315                           
  7316                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7317  0410  0853               	movf	sprintf@c,w
  7318  0411  00C2               	movwf	??_sprintf
  7319  0412  084E               	movf	sprintf@sp,w
  7320  0413  0086               	movwf	6
  7321  0414  3001               	movlw	1	; select bank2/3
  7322  0415  0087               	movwf	7
  7323  0416  0842               	movf	??_sprintf,w
  7324  0417  0081               	movwf	1
  7325  0418  3001               	movlw	1
  7326  0419  00C2               	movwf	??_sprintf
  7327  041A  0842               	movf	??_sprintf,w
  7328  041B  07CE               	addwf	sprintf@sp,f
  7329  041C                     l2673:	
  7330  041C  30FF               	movlw	255
  7331  041D  07D1               	addwf	sprintf@prec,f
  7332  041E  30FF               	movlw	255
  7333  041F  3DD2               	addwfc	sprintf@prec+1,f
  7334  0420  0A51               	incf	sprintf@prec,w
  7335  0421  1D03               	skipz
  7336  0422  2BD7               	goto	l2667
  7337  0423  0A52               	incf	sprintf@prec+1,w
  7338  0424  1903               	btfsc	3,2
  7339  0425  2A66               	goto	l2675
  7340  0426  2BD7               	goto	l2667
  7341  0427                     l2677:	
  7342                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7343                           
  7344                           
  7345                           ;doprnt.c: 1557: *sp = 0;
  7346  0427  084E               	movf	sprintf@sp,w
  7347  0428  0086               	movwf	6
  7348  0429  3001               	movlw	1	; select bank2/3
  7349  042A  0087               	movwf	7
  7350  042B  0181               	clrf	1
  7351  042C  0008               	return
  7352  042D                     __end_of_sprintf:	
  7353                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7354                           
  7355                           
  7356                           	psect	text23
  7357  14A3                     __ptext23:	
  7358 ;; *************** function _isdigit *****************
  7359 ;; Defined at:
  7360 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7361 ;; Parameters:    Size  Location     Type
  7362 ;;  c               1    wreg     unsigned char 
  7363 ;; Auto vars:     Size  Location     Type
  7364 ;;  c               1    1[BANK0 ] unsigned char 
  7365 ;; Return value:  Size  Location     Type
  7366 ;;		None               void
  7367 ;; Registers used:
  7368 ;;		wreg, status,2, status,0
  7369 ;; Tracked objects:
  7370 ;;		On entry : 0/0
  7371 ;;		On exit  : 0/0
  7372 ;;		Unchanged: 0/0
  7373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;Total ram usage:        2 bytes
  7379 ;; Hardware stack levels used:    1
  7380 ;; Hardware stack levels required when called:    7
  7381 ;; This function calls:
  7382 ;;		Nothing
  7383 ;; This function is called by:
  7384 ;;		_sprintf
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387                           
  7388                           
  7389                           ;psect for function _isdigit
  7390  14A3                     _isdigit:	
  7391                           
  7392                           ;incstack = 0
  7393                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7394                           ;isdigit@c stored from wreg
  7395  14A3  0020               	movlb	0	; select bank0
  7396  14A4  00A1               	movwf	isdigit@c
  7397  14A5  01A0               	clrf	_isdigit$1712
  7398  14A6  303A               	movlw	58
  7399  14A7  0221               	subwf	isdigit@c,w
  7400  14A8  1803               	skipnc
  7401  14A9  2CB0               	goto	l2351
  7402  14AA  3030               	movlw	48
  7403  14AB  0221               	subwf	isdigit@c,w
  7404  14AC  1C03               	skipc
  7405  14AD  2CB0               	goto	l2351
  7406  14AE  01A0               	clrf	_isdigit$1712
  7407  14AF  0AA0               	incf	_isdigit$1712,f
  7408  14B0                     l2351:	
  7409  14B0  0C20               	rrf	_isdigit$1712,w
  7410  14B1  0008               	return
  7411  14B2                     __end_of_isdigit:	
  7412                           
  7413                           	psect	text24
  7414  1572                     __ptext24:	
  7415 ;; *************** function ___wmul *****************
  7416 ;; Defined at:
  7417 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7418 ;; Parameters:    Size  Location     Type
  7419 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7420 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;  product         2    4[BANK0 ] unsigned int 
  7423 ;; Return value:  Size  Location     Type
  7424 ;;                  2    0[BANK0 ] unsigned int 
  7425 ;; Registers used:
  7426 ;;		wreg, status,2, status,0
  7427 ;; Tracked objects:
  7428 ;;		On entry : 0/0
  7429 ;;		On exit  : 0/0
  7430 ;;		Unchanged: 0/0
  7431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7432 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7433 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7435 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7436 ;;Total ram usage:        6 bytes
  7437 ;; Hardware stack levels used:    1
  7438 ;; Hardware stack levels required when called:    7
  7439 ;; This function calls:
  7440 ;;		Nothing
  7441 ;; This function is called by:
  7442 ;;		_sprintf
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           
  7447                           ;psect for function ___wmul
  7448  1572                     ___wmul:	
  7449                           
  7450                           ;incstack = 0
  7451                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7452  1572  0020               	movlb	0	; select bank0
  7453  1573  01A4               	clrf	___wmul@product
  7454  1574  01A5               	clrf	___wmul@product+1
  7455  1575                     l2357:	
  7456  1575  1C20               	btfss	___wmul@multiplier,0
  7457  1576  2D7B               	goto	l449
  7458  1577  0822               	movf	___wmul@multiplicand,w
  7459  1578  07A4               	addwf	___wmul@product,f
  7460  1579  0823               	movf	___wmul@multiplicand+1,w
  7461  157A  3DA5               	addwfc	___wmul@product+1,f
  7462  157B                     l449:	
  7463  157B  3001               	movlw	1
  7464  157C                     u2055:	
  7465  157C  35A2               	lslf	___wmul@multiplicand,f
  7466  157D  0DA3               	rlf	___wmul@multiplicand+1,f
  7467  157E  0B89               	decfsz	9,f
  7468  157F  2D7C               	goto	u2055
  7469  1580  3001               	movlw	1
  7470  1581                     u2065:	
  7471  1581  36A1               	lsrf	___wmul@multiplier+1,f
  7472  1582  0CA0               	rrf	___wmul@multiplier,f
  7473  1583  0B89               	decfsz	9,f
  7474  1584  2D81               	goto	u2065
  7475  1585  0820               	movf	___wmul@multiplier,w
  7476  1586  0421               	iorwf	___wmul@multiplier+1,w
  7477  1587  1D03               	btfss	3,2
  7478  1588  2D75               	goto	l2357
  7479  1589  0825               	movf	___wmul@product+1,w
  7480  158A  00A1               	movwf	?___wmul+1
  7481  158B  0824               	movf	___wmul@product,w
  7482  158C  00A0               	movwf	?___wmul
  7483  158D  0008               	return
  7484  158E                     __end_of___wmul:	
  7485                           
  7486                           	psect	text25
  7487  0804                     __ptext25:	
  7488 ;; *************** function ___llmod *****************
  7489 ;; Defined at:
  7490 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7491 ;; Parameters:    Size  Location     Type
  7492 ;;  divisor         4   14[BANK0 ] unsigned long 
  7493 ;;  dividend        4   18[BANK0 ] unsigned long 
  7494 ;; Auto vars:     Size  Location     Type
  7495 ;;  counter         1   23[BANK0 ] unsigned char 
  7496 ;; Return value:  Size  Location     Type
  7497 ;;                  4   14[BANK0 ] unsigned long 
  7498 ;; Registers used:
  7499 ;;		wreg, status,2, status,0
  7500 ;; Tracked objects:
  7501 ;;		On entry : 0/0
  7502 ;;		On exit  : 0/0
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7505 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7507 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7508 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7509 ;;Total ram usage:       10 bytes
  7510 ;; Hardware stack levels used:    1
  7511 ;; Hardware stack levels required when called:    7
  7512 ;; This function calls:
  7513 ;;		Nothing
  7514 ;; This function is called by:
  7515 ;;		_sprintf
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           
  7520                           ;psect for function ___llmod
  7521  0804                     ___llmod:	
  7522                           
  7523                           ;incstack = 0
  7524                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7525  0804  0020               	movlb	0	; select bank0
  7526  0805  0831               	movf	___llmod@divisor+3,w
  7527  0806  0430               	iorwf	___llmod@divisor+2,w
  7528  0807  042F               	iorwf	___llmod@divisor+1,w
  7529  0808  042E               	iorwf	___llmod@divisor,w
  7530  0809  1903               	skipnz
  7531  080A  283E               	goto	l2479
  7532  080B  01B7               	clrf	___llmod@counter
  7533  080C  0AB7               	incf	___llmod@counter,f
  7534  080D                     l2469:	
  7535  080D  1BB1               	btfsc	___llmod@divisor+3,7
  7536  080E  281B               	goto	l2471
  7537  080F  3001               	movlw	1
  7538  0810                     u2395:	
  7539  0810  35AE               	lslf	___llmod@divisor,f
  7540  0811  0DAF               	rlf	___llmod@divisor+1,f
  7541  0812  0DB0               	rlf	___llmod@divisor+2,f
  7542  0813  0DB1               	rlf	___llmod@divisor+3,f
  7543  0814  0B89               	decfsz	9,f
  7544  0815  2810               	goto	u2395
  7545  0816  3001               	movlw	1
  7546  0817  00B6               	movwf	??___llmod
  7547  0818  0836               	movf	??___llmod,w
  7548  0819  07B7               	addwf	___llmod@counter,f
  7549  081A  280D               	goto	l2469
  7550  081B                     l2471:	
  7551  081B  0831               	movf	___llmod@divisor+3,w
  7552  081C  0235               	subwf	___llmod@dividend+3,w
  7553  081D  1D03               	skipz
  7554  081E  2829               	goto	u2415
  7555  081F  0830               	movf	___llmod@divisor+2,w
  7556  0820  0234               	subwf	___llmod@dividend+2,w
  7557  0821  1D03               	skipz
  7558  0822  2829               	goto	u2415
  7559  0823  082F               	movf	___llmod@divisor+1,w
  7560  0824  0233               	subwf	___llmod@dividend+1,w
  7561  0825  1D03               	skipz
  7562  0826  2829               	goto	u2415
  7563  0827  082E               	movf	___llmod@divisor,w
  7564  0828  0232               	subwf	___llmod@dividend,w
  7565  0829                     u2415:	
  7566  0829  1C03               	skipc
  7567  082A  2833               	goto	l2475
  7568  082B  082E               	movf	___llmod@divisor,w
  7569  082C  02B2               	subwf	___llmod@dividend,f
  7570  082D  082F               	movf	___llmod@divisor+1,w
  7571  082E  3BB3               	subwfb	___llmod@dividend+1,f
  7572  082F  0830               	movf	___llmod@divisor+2,w
  7573  0830  3BB4               	subwfb	___llmod@dividend+2,f
  7574  0831  0831               	movf	___llmod@divisor+3,w
  7575  0832  3BB5               	subwfb	___llmod@dividend+3,f
  7576  0833                     l2475:	
  7577  0833  3001               	movlw	1
  7578  0834                     u2425:	
  7579  0834  36B1               	lsrf	___llmod@divisor+3,f
  7580  0835  0CB0               	rrf	___llmod@divisor+2,f
  7581  0836  0CAF               	rrf	___llmod@divisor+1,f
  7582  0837  0CAE               	rrf	___llmod@divisor,f
  7583  0838  0B89               	decfsz	9,f
  7584  0839  2834               	goto	u2425
  7585  083A  3001               	movlw	1
  7586  083B  02B7               	subwf	___llmod@counter,f
  7587  083C  1D03               	btfss	3,2
  7588  083D  281B               	goto	l2471
  7589  083E                     l2479:	
  7590  083E  0835               	movf	___llmod@dividend+3,w
  7591  083F  00B1               	movwf	?___llmod+3
  7592  0840  0834               	movf	___llmod@dividend+2,w
  7593  0841  00B0               	movwf	?___llmod+2
  7594  0842  0833               	movf	___llmod@dividend+1,w
  7595  0843  00AF               	movwf	?___llmod+1
  7596  0844  0832               	movf	___llmod@dividend,w
  7597  0845  00AE               	movwf	?___llmod
  7598  0846  0008               	return
  7599  0847                     __end_of___llmod:	
  7600                           
  7601                           	psect	text26
  7602  0916                     __ptext26:	
  7603 ;; *************** function ___lldiv *****************
  7604 ;; Defined at:
  7605 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  divisor         4    0[BANK0 ] unsigned long 
  7608 ;;  dividend        4    4[BANK0 ] unsigned long 
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;  quotient        4    9[BANK0 ] unsigned long 
  7611 ;;  counter         1   13[BANK0 ] unsigned char 
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  4    0[BANK0 ] unsigned long 
  7614 ;; Registers used:
  7615 ;;		wreg, status,2, status,0
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7621 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7625 ;;Total ram usage:       14 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; Hardware stack levels required when called:    7
  7628 ;; This function calls:
  7629 ;;		Nothing
  7630 ;; This function is called by:
  7631 ;;		_sprintf
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           
  7636                           ;psect for function ___lldiv
  7637  0916                     ___lldiv:	
  7638                           
  7639                           ;incstack = 0
  7640                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7641  0916  3000               	movlw	0
  7642  0917  0020               	movlb	0	; select bank0
  7643  0918  00AC               	movwf	___lldiv@quotient+3
  7644  0919  3000               	movlw	0
  7645  091A  00AB               	movwf	___lldiv@quotient+2
  7646  091B  3000               	movlw	0
  7647  091C  00AA               	movwf	___lldiv@quotient+1
  7648  091D  3000               	movlw	0
  7649  091E  00A9               	movwf	___lldiv@quotient
  7650  091F  0823               	movf	___lldiv@divisor+3,w
  7651  0920  0422               	iorwf	___lldiv@divisor+2,w
  7652  0921  0421               	iorwf	___lldiv@divisor+1,w
  7653  0922  0420               	iorwf	___lldiv@divisor,w
  7654  0923  1903               	skipnz
  7655  0924  2960               	goto	l2389
  7656  0925  01AD               	clrf	___lldiv@counter
  7657  0926  0AAD               	incf	___lldiv@counter,f
  7658  0927                     l2375:	
  7659  0927  1BA3               	btfsc	___lldiv@divisor+3,7
  7660  0928  2935               	goto	l2377
  7661  0929  3001               	movlw	1
  7662  092A                     u2095:	
  7663  092A  35A0               	lslf	___lldiv@divisor,f
  7664  092B  0DA1               	rlf	___lldiv@divisor+1,f
  7665  092C  0DA2               	rlf	___lldiv@divisor+2,f
  7666  092D  0DA3               	rlf	___lldiv@divisor+3,f
  7667  092E  0B89               	decfsz	9,f
  7668  092F  292A               	goto	u2095
  7669  0930  3001               	movlw	1
  7670  0931  00A8               	movwf	??___lldiv
  7671  0932  0828               	movf	??___lldiv,w
  7672  0933  07AD               	addwf	___lldiv@counter,f
  7673  0934  2927               	goto	l2375
  7674  0935                     l2377:	
  7675  0935  3001               	movlw	1
  7676  0936                     u2115:	
  7677  0936  35A9               	lslf	___lldiv@quotient,f
  7678  0937  0DAA               	rlf	___lldiv@quotient+1,f
  7679  0938  0DAB               	rlf	___lldiv@quotient+2,f
  7680  0939  0DAC               	rlf	___lldiv@quotient+3,f
  7681  093A  0B89               	decfsz	9,f
  7682  093B  2936               	goto	u2115
  7683  093C  0823               	movf	___lldiv@divisor+3,w
  7684  093D  0227               	subwf	___lldiv@dividend+3,w
  7685  093E  1D03               	skipz
  7686  093F  294A               	goto	u2125
  7687  0940  0822               	movf	___lldiv@divisor+2,w
  7688  0941  0226               	subwf	___lldiv@dividend+2,w
  7689  0942  1D03               	skipz
  7690  0943  294A               	goto	u2125
  7691  0944  0821               	movf	___lldiv@divisor+1,w
  7692  0945  0225               	subwf	___lldiv@dividend+1,w
  7693  0946  1D03               	skipz
  7694  0947  294A               	goto	u2125
  7695  0948  0820               	movf	___lldiv@divisor,w
  7696  0949  0224               	subwf	___lldiv@dividend,w
  7697  094A                     u2125:	
  7698  094A  1C03               	skipc
  7699  094B  2955               	goto	l2385
  7700  094C  0820               	movf	___lldiv@divisor,w
  7701  094D  02A4               	subwf	___lldiv@dividend,f
  7702  094E  0821               	movf	___lldiv@divisor+1,w
  7703  094F  3BA5               	subwfb	___lldiv@dividend+1,f
  7704  0950  0822               	movf	___lldiv@divisor+2,w
  7705  0951  3BA6               	subwfb	___lldiv@dividend+2,f
  7706  0952  0823               	movf	___lldiv@divisor+3,w
  7707  0953  3BA7               	subwfb	___lldiv@dividend+3,f
  7708  0954  1429               	bsf	___lldiv@quotient,0
  7709  0955                     l2385:	
  7710  0955  3001               	movlw	1
  7711  0956                     u2135:	
  7712  0956  36A3               	lsrf	___lldiv@divisor+3,f
  7713  0957  0CA2               	rrf	___lldiv@divisor+2,f
  7714  0958  0CA1               	rrf	___lldiv@divisor+1,f
  7715  0959  0CA0               	rrf	___lldiv@divisor,f
  7716  095A  0B89               	decfsz	9,f
  7717  095B  2956               	goto	u2135
  7718  095C  3001               	movlw	1
  7719  095D  02AD               	subwf	___lldiv@counter,f
  7720  095E  1D03               	btfss	3,2
  7721  095F  2935               	goto	l2377
  7722  0960                     l2389:	
  7723  0960  082C               	movf	___lldiv@quotient+3,w
  7724  0961  00A3               	movwf	?___lldiv+3
  7725  0962  082B               	movf	___lldiv@quotient+2,w
  7726  0963  00A2               	movwf	?___lldiv+2
  7727  0964  082A               	movf	___lldiv@quotient+1,w
  7728  0965  00A1               	movwf	?___lldiv+1
  7729  0966  0829               	movf	___lldiv@quotient,w
  7730  0967  00A0               	movwf	?___lldiv
  7731  0968  0008               	return
  7732  0969                     __end_of___lldiv:	
  7733                           
  7734                           	psect	text27
  7735  1709                     __ptext27:	
  7736 ;; *************** function ___lltoft *****************
  7737 ;; Defined at:
  7738 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;  c               4    8[BANK0 ] unsigned long 
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;  exp             1   13[BANK0 ] unsigned char 
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  3    8[BANK0 ] float 
  7745 ;; Registers used:
  7746 ;;		wreg, status,2, status,0, pclath, cstack
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7752 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7753 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;Total ram usage:        6 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    8
  7759 ;; This function calls:
  7760 ;;		___ftpack
  7761 ;; This function is called by:
  7762 ;;		_loop
  7763 ;;		_ftoa
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           
  7768                           ;psect for function ___lltoft
  7769  1709                     ___lltoft:	
  7770                           
  7771                           ;incstack = 0
  7772                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  7773  1709  308E               	movlw	142
  7774  170A  0020               	movlb	0	; select bank0
  7775  170B  00AC               	movwf	??___lltoft
  7776  170C  082C               	movf	??___lltoft,w
  7777  170D  00AD               	movwf	___lltoft@exp
  7778  170E                     l2827:	
  7779  170E  30FF               	movlw	255
  7780  170F  052B               	andwf	___lltoft@c+3,w
  7781  1710  1903               	btfsc	3,2
  7782  1711  2F1E               	goto	l2829
  7783  1712  3001               	movlw	1
  7784  1713                     u3055:	
  7785  1713  36AB               	lsrf	___lltoft@c+3,f
  7786  1714  0CAA               	rrf	___lltoft@c+2,f
  7787  1715  0CA9               	rrf	___lltoft@c+1,f
  7788  1716  0CA8               	rrf	___lltoft@c,f
  7789  1717  0B89               	decfsz	9,f
  7790  1718  2F13               	goto	u3055
  7791  1719  3001               	movlw	1
  7792  171A  00AC               	movwf	??___lltoft
  7793  171B  082C               	movf	??___lltoft,w
  7794  171C  07AD               	addwf	___lltoft@exp,f
  7795  171D  2F0E               	goto	l2827
  7796  171E                     l2829:	
  7797  171E  0828               	movf	___lltoft@c,w
  7798  171F  00A0               	movwf	___ftpack@arg
  7799  1720  0829               	movf	___lltoft@c+1,w
  7800  1721  00A1               	movwf	___ftpack@arg+1
  7801  1722  082A               	movf	___lltoft@c+2,w
  7802  1723  00A2               	movwf	___ftpack@arg+2
  7803  1724  082D               	movf	___lltoft@exp,w
  7804  1725  00AC               	movwf	??___lltoft
  7805  1726  082C               	movf	??___lltoft,w
  7806  1727  00A3               	movwf	___ftpack@exp
  7807  1728  01A4               	clrf	___ftpack@sign
  7808  1729  3189  21CC         	fcall	___ftpack
  7809  172B  0020               	movlb	0	; select bank0
  7810  172C  0820               	movf	?___ftpack,w
  7811  172D  00A8               	movwf	?___lltoft
  7812  172E  0821               	movf	?___ftpack+1,w
  7813  172F  00A9               	movwf	?___lltoft+1
  7814  1730  0822               	movf	?___ftpack+2,w
  7815  1731  00AA               	movwf	?___lltoft+2
  7816  1732  0008               	return
  7817  1733                     __end_of___lltoft:	
  7818                           
  7819                           	psect	text28
  7820  0B4E                     __ptext28:	
  7821 ;; *************** function ___fttol *****************
  7822 ;; Defined at:
  7823 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  f1              3   71[BANK0 ] float 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;  lval            4    1[BANK1 ] unsigned long 
  7828 ;;  exp1            1    5[BANK1 ] unsigned char 
  7829 ;;  sign1           1    0[BANK1 ] unsigned char 
  7830 ;; Return value:  Size  Location     Type
  7831 ;;                  4   71[BANK0 ] long 
  7832 ;; Registers used:
  7833 ;;		wreg, status,2, status,0
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7839 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7843 ;;Total ram usage:       14 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; Hardware stack levels required when called:    7
  7846 ;; This function calls:
  7847 ;;		Nothing
  7848 ;; This function is called by:
  7849 ;;		_ftoa
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           
  7854                           ;psect for function ___fttol
  7855  0B4E                     ___fttol:	
  7856                           
  7857                           ;incstack = 0
  7858                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7859  0B4E  0020               	movlb	0	; select bank0
  7860  0B4F  0867               	movf	___fttol@f1,w
  7861  0B50  00EB               	movwf	??___fttol
  7862  0B51  0868               	movf	___fttol@f1+1,w
  7863  0B52  00EC               	movwf	??___fttol+1
  7864  0B53  0869               	movf	___fttol@f1+2,w
  7865  0B54  00ED               	movwf	??___fttol+2
  7866  0B55  1003               	clrc
  7867  0B56  0D6C               	rlf	??___fttol+1,w
  7868  0B57  0D6D               	rlf	??___fttol+2,w
  7869  0B58  00EE               	movwf	??___fttol+3
  7870  0B59  086E               	movf	??___fttol+3,w
  7871  0B5A  0021               	movlb	1	; select bank1
  7872  0B5B  00A5               	movwf	___fttol@exp1^(0+128)
  7873  0B5C  0825               	movf	___fttol@exp1^(0+128),w
  7874  0B5D  1D03               	btfss	3,2
  7875  0B5E  2B69               	goto	l2787
  7876  0B5F  3000               	movlw	0
  7877  0B60  0020               	movlb	0	; select bank0
  7878  0B61  00EA               	movwf	?___fttol+3
  7879  0B62  3000               	movlw	0
  7880  0B63  00E9               	movwf	?___fttol+2
  7881  0B64  3000               	movlw	0
  7882  0B65  00E8               	movwf	?___fttol+1
  7883  0B66  3000               	movlw	0
  7884  0B67  00E7               	movwf	?___fttol
  7885  0B68  0008               	return
  7886  0B69                     l2787:	
  7887  0B69  0020               	movlb	0	; select bank0
  7888  0B6A  0867               	movf	___fttol@f1,w
  7889  0B6B  00EB               	movwf	??___fttol
  7890  0B6C  0868               	movf	___fttol@f1+1,w
  7891  0B6D  00EC               	movwf	??___fttol+1
  7892  0B6E  0869               	movf	___fttol@f1+2,w
  7893  0B6F  00ED               	movwf	??___fttol+2
  7894  0B70  3017               	movlw	23
  7895  0B71                     u2965:	
  7896  0B71  36ED               	lsrf	??___fttol+2,f
  7897  0B72  0CEC               	rrf	??___fttol+1,f
  7898  0B73  0CEB               	rrf	??___fttol,f
  7899  0B74  0B89               	decfsz	9,f
  7900  0B75  2B71               	goto	u2965
  7901  0B76  086B               	movf	??___fttol,w
  7902  0B77  00EE               	movwf	??___fttol+3
  7903  0B78  086E               	movf	??___fttol+3,w
  7904  0B79  0021               	movlb	1	; select bank1
  7905  0B7A  00A0               	movwf	___fttol@sign1^(0+128)
  7906  0B7B  0020               	movlb	0	; select bank0
  7907  0B7C  17E8               	bsf	___fttol@f1+1,7
  7908  0B7D  30FF               	movlw	255
  7909  0B7E  05E7               	andwf	___fttol@f1,f
  7910  0B7F  30FF               	movlw	255
  7911  0B80  05E8               	andwf	___fttol@f1+1,f
  7912  0B81  3000               	movlw	0
  7913  0B82  05E9               	andwf	___fttol@f1+2,f
  7914  0B83  0867               	movf	___fttol@f1,w
  7915  0B84  0021               	movlb	1	; select bank1
  7916  0B85  00A1               	movwf	___fttol@lval^(0+128)
  7917  0B86  0020               	movlb	0	; select bank0
  7918  0B87  0868               	movf	___fttol@f1+1,w
  7919  0B88  0021               	movlb	1	; select bank1
  7920  0B89  00A2               	movwf	(___fttol@lval^(0+128)+1)
  7921  0B8A  0020               	movlb	0	; select bank0
  7922  0B8B  0869               	movf	___fttol@f1+2,w
  7923  0B8C  0021               	movlb	1	; select bank1
  7924  0B8D  00A3               	movwf	(___fttol@lval^(0+128)+2)
  7925  0B8E  01A4               	clrf	(___fttol@lval^(0+128)+3)
  7926  0B8F  308E               	movlw	142
  7927  0B90  02A5               	subwf	___fttol@exp1^(0+128),f
  7928  0B91  1FA5               	btfss	___fttol@exp1^(0+128),7
  7929  0B92  2BB3               	goto	l2807
  7930  0B93  0825               	movf	___fttol@exp1^(0+128),w
  7931  0B94  3A80               	xorlw	128
  7932  0B95  3E8F               	addlw	143
  7933  0B96  1803               	skipnc
  7934  0B97  2BA2               	goto	l2805
  7935  0B98  3000               	movlw	0
  7936  0B99  0020               	movlb	0	; select bank0
  7937  0B9A  00EA               	movwf	?___fttol+3
  7938  0B9B  3000               	movlw	0
  7939  0B9C  00E9               	movwf	?___fttol+2
  7940  0B9D  3000               	movlw	0
  7941  0B9E  00E8               	movwf	?___fttol+1
  7942  0B9F  3000               	movlw	0
  7943  0BA0  00E7               	movwf	?___fttol
  7944  0BA1  0008               	return
  7945  0BA2                     l2805:	
  7946  0BA2  3001               	movlw	1
  7947  0BA3                     u2995:	
  7948  0BA3  0021               	movlb	1	; select bank1
  7949  0BA4  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  7950  0BA5  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  7951  0BA6  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  7952  0BA7  0CA1               	rrf	___fttol@lval^(0+128),f
  7953  0BA8  0B89               	decfsz	9,f
  7954  0BA9  2BA3               	goto	u2995
  7955  0BAA  3001               	movlw	1
  7956  0BAB  0020               	movlb	0	; select bank0
  7957  0BAC  00EB               	movwf	??___fttol
  7958  0BAD  086B               	movf	??___fttol,w
  7959  0BAE  0021               	movlb	1	; select bank1
  7960  0BAF  07A5               	addwf	___fttol@exp1^(0+128),f
  7961  0BB0  1903               	btfsc	3,2
  7962  0BB1  2BCF               	goto	l2815
  7963  0BB2  2BA2               	goto	l2805
  7964  0BB3                     l2807:	
  7965  0BB3  3018               	movlw	24
  7966  0BB4  0225               	subwf	___fttol@exp1^(0+128),w
  7967  0BB5  1C03               	skipc
  7968  0BB6  2BCB               	goto	l743
  7969  0BB7  3000               	movlw	0
  7970  0BB8  0020               	movlb	0	; select bank0
  7971  0BB9  00EA               	movwf	?___fttol+3
  7972  0BBA  3000               	movlw	0
  7973  0BBB  00E9               	movwf	?___fttol+2
  7974  0BBC  3000               	movlw	0
  7975  0BBD  00E8               	movwf	?___fttol+1
  7976  0BBE  3000               	movlw	0
  7977  0BBF  00E7               	movwf	?___fttol
  7978  0BC0  0008               	return
  7979  0BC1                     l2813:	
  7980  0BC1  3001               	movlw	1
  7981  0BC2                     u3025:	
  7982  0BC2  0021               	movlb	1	; select bank1
  7983  0BC3  35A1               	lslf	___fttol@lval^(0+128),f
  7984  0BC4  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  7985  0BC5  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  7986  0BC6  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  7987  0BC7  0B89               	decfsz	9,f
  7988  0BC8  2BC2               	goto	u3025
  7989  0BC9  3001               	movlw	1
  7990  0BCA  02A5               	subwf	___fttol@exp1^(0+128),f
  7991  0BCB                     l743:	
  7992  0BCB  0021               	movlb	1	; select bank1
  7993  0BCC  0825               	movf	___fttol@exp1^(0+128),w
  7994  0BCD  1D03               	btfss	3,2
  7995  0BCE  2BC1               	goto	l2813
  7996  0BCF                     l2815:	
  7997  0BCF  0820               	movf	___fttol@sign1^(0+128),w
  7998  0BD0  1903               	btfsc	3,2
  7999  0BD1  2BDD               	goto	l2819
  8000  0BD2  09A1               	comf	___fttol@lval^(0+128),f
  8001  0BD3  09A2               	comf	(___fttol@lval+1)^(0+128),f
  8002  0BD4  09A3               	comf	(___fttol@lval+2)^(0+128),f
  8003  0BD5  09A4               	comf	(___fttol@lval+3)^(0+128),f
  8004  0BD6  0AA1               	incf	___fttol@lval^(0+128),f
  8005  0BD7  1903               	skipnz
  8006  0BD8  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  8007  0BD9  1903               	skipnz
  8008  0BDA  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  8009  0BDB  1903               	skipnz
  8010  0BDC  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  8011  0BDD                     l2819:	
  8012  0BDD  0824               	movf	(___fttol@lval+3)^(0+128),w
  8013  0BDE  0020               	movlb	0	; select bank0
  8014  0BDF  00EA               	movwf	?___fttol+3
  8015  0BE0  0021               	movlb	1	; select bank1
  8016  0BE1  0823               	movf	(___fttol@lval+2)^(0+128),w
  8017  0BE2  0020               	movlb	0	; select bank0
  8018  0BE3  00E9               	movwf	?___fttol+2
  8019  0BE4  0021               	movlb	1	; select bank1
  8020  0BE5  0822               	movf	(___fttol@lval+1)^(0+128),w
  8021  0BE6  0020               	movlb	0	; select bank0
  8022  0BE7  00E8               	movwf	?___fttol+1
  8023  0BE8  0021               	movlb	1	; select bank1
  8024  0BE9  0821               	movf	___fttol@lval^(0+128),w
  8025  0BEA  0020               	movlb	0	; select bank0
  8026  0BEB  00E7               	movwf	?___fttol
  8027  0BEC  0008               	return
  8028  0BED                     __end_of___fttol:	
  8029                           
  8030                           	psect	text29
  8031  15AC                     __ptext29:	
  8032 ;; *************** function ___ftsub *****************
  8033 ;; Defined at:
  8034 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8035 ;; Parameters:    Size  Location     Type
  8036 ;;  f2              3   27[BANK0 ] float 
  8037 ;;  f1              3   30[BANK0 ] float 
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;		None
  8040 ;; Return value:  Size  Location     Type
  8041 ;;                  3   27[BANK0 ] float 
  8042 ;; Registers used:
  8043 ;;		wreg, status,2, status,0, pclath, cstack
  8044 ;; Tracked objects:
  8045 ;;		On entry : 0/0
  8046 ;;		On exit  : 0/0
  8047 ;;		Unchanged: 0/0
  8048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8049 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8052 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8053 ;;Total ram usage:        6 bytes
  8054 ;; Hardware stack levels used:    1
  8055 ;; Hardware stack levels required when called:    9
  8056 ;; This function calls:
  8057 ;;		___ftadd
  8058 ;; This function is called by:
  8059 ;;		_ftoa
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           
  8064                           ;psect for function ___ftsub
  8065  15AC                     ___ftsub:	
  8066                           
  8067                           ;incstack = 0
  8068                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8069  15AC  0020               	movlb	0	; select bank0
  8070  15AD  083D               	movf	___ftsub@f2+2,w
  8071  15AE  043C               	iorwf	___ftsub@f2+1,w
  8072  15AF  043B               	iorwf	___ftsub@f2,w
  8073  15B0  1903               	skipnz
  8074  15B1  2DB4               	goto	l2777
  8075  15B2  3080               	movlw	128
  8076  15B3  06BD               	xorwf	___ftsub@f2+2,f
  8077  15B4                     l2777:	
  8078  15B4  083E               	movf	___ftsub@f1,w
  8079  15B5  00AE               	movwf	___ftadd@f1
  8080  15B6  083F               	movf	___ftsub@f1+1,w
  8081  15B7  00AF               	movwf	___ftadd@f1+1
  8082  15B8  0840               	movf	___ftsub@f1+2,w
  8083  15B9  00B0               	movwf	___ftadd@f1+2
  8084  15BA  083B               	movf	___ftsub@f2,w
  8085  15BB  00B1               	movwf	___ftadd@f2
  8086  15BC  083C               	movf	___ftsub@f2+1,w
  8087  15BD  00B2               	movwf	___ftadd@f2+1
  8088  15BE  083D               	movf	___ftsub@f2+2,w
  8089  15BF  00B3               	movwf	___ftadd@f2+2
  8090  15C0  3186  26E5         	fcall	___ftadd
  8091  15C2  0020               	movlb	0	; select bank0
  8092  15C3  082E               	movf	?___ftadd,w
  8093  15C4  00BB               	movwf	?___ftsub
  8094  15C5  082F               	movf	?___ftadd+1,w
  8095  15C6  00BC               	movwf	?___ftsub+1
  8096  15C7  0830               	movf	?___ftadd+2,w
  8097  15C8  00BD               	movwf	?___ftsub+2
  8098  15C9  0008               	return
  8099  15CA                     __end_of___ftsub:	
  8100                           
  8101                           	psect	text30
  8102  148D                     __ptext30:	
  8103 ;; *************** function ___ftneg *****************
  8104 ;; Defined at:
  8105 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;  f1              3   55[BANK0 ] float 
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;		None
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  3   55[BANK0 ] float 
  8112 ;; Registers used:
  8113 ;;		wreg
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8119 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8122 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8123 ;;Total ram usage:        3 bytes
  8124 ;; Hardware stack levels used:    1
  8125 ;; Hardware stack levels required when called:    7
  8126 ;; This function calls:
  8127 ;;		Nothing
  8128 ;; This function is called by:
  8129 ;;		_loop
  8130 ;;		_ftoa
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           
  8135                           ;psect for function ___ftneg
  8136  148D                     ___ftneg:	
  8137                           
  8138                           ;incstack = 0
  8139                           ; Regs used in ___ftneg: [wreg]
  8140  148D  0020               	movlb	0	; select bank0
  8141  148E  0859               	movf	___ftneg@f1+2,w
  8142  148F  0458               	iorwf	___ftneg@f1+1,w
  8143  1490  0457               	iorwf	___ftneg@f1,w
  8144  1491  1903               	skipnz
  8145  1492  0008               	return
  8146  1493  3080               	movlw	128
  8147  1494  06D9               	xorwf	___ftneg@f1+2,f
  8148  1495  0008               	return
  8149  1496                     __end_of___ftneg:	
  8150                           
  8151                           	psect	text31
  8152  0D3C                     __ptext31:	
  8153 ;; *************** function ___ftmul *****************
  8154 ;; Defined at:
  8155 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;  f1              3   55[BANK0 ] float 
  8158 ;;  f2              3   58[BANK0 ] float 
  8159 ;; Auto vars:     Size  Location     Type
  8160 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  8161 ;;  sign            1   70[BANK0 ] unsigned char 
  8162 ;;  cntr            1   69[BANK0 ] unsigned char 
  8163 ;;  exp             1   65[BANK0 ] unsigned char 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  3   55[BANK0 ] float 
  8166 ;; Registers used:
  8167 ;;		wreg, status,2, status,0, pclath, cstack
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8173 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;Total ram usage:       16 bytes
  8178 ;; Hardware stack levels used:    1
  8179 ;; Hardware stack levels required when called:    8
  8180 ;; This function calls:
  8181 ;;		___ftpack
  8182 ;; This function is called by:
  8183 ;;		_loop
  8184 ;;		_ftoa
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           
  8189                           ;psect for function ___ftmul
  8190  0D3C                     ___ftmul:	
  8191                           
  8192                           ;incstack = 0
  8193                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8194  0D3C  0020               	movlb	0	; select bank0
  8195  0D3D  0857               	movf	___ftmul@f1,w
  8196  0D3E  00DD               	movwf	??___ftmul
  8197  0D3F  0858               	movf	___ftmul@f1+1,w
  8198  0D40  00DE               	movwf	??___ftmul+1
  8199  0D41  0859               	movf	___ftmul@f1+2,w
  8200  0D42  00DF               	movwf	??___ftmul+2
  8201  0D43  1003               	clrc
  8202  0D44  0D5E               	rlf	??___ftmul+1,w
  8203  0D45  0D5F               	rlf	??___ftmul+2,w
  8204  0D46  00E0               	movwf	??___ftmul+3
  8205  0D47  0860               	movf	??___ftmul+3,w
  8206  0D48  00E1               	movwf	___ftmul@exp
  8207  0D49  0861               	movf	___ftmul@exp,w
  8208  0D4A  1D03               	btfss	3,2
  8209  0D4B  2D53               	goto	l2721
  8210  0D4C  3000               	movlw	0
  8211  0D4D  00D7               	movwf	?___ftmul
  8212  0D4E  3000               	movlw	0
  8213  0D4F  00D8               	movwf	?___ftmul+1
  8214  0D50  3000               	movlw	0
  8215  0D51  00D9               	movwf	?___ftmul+2
  8216  0D52  0008               	return
  8217  0D53                     l2721:	
  8218  0D53  085A               	movf	___ftmul@f2,w
  8219  0D54  00DD               	movwf	??___ftmul
  8220  0D55  085B               	movf	___ftmul@f2+1,w
  8221  0D56  00DE               	movwf	??___ftmul+1
  8222  0D57  085C               	movf	___ftmul@f2+2,w
  8223  0D58  00DF               	movwf	??___ftmul+2
  8224  0D59  1003               	clrc
  8225  0D5A  0D5E               	rlf	??___ftmul+1,w
  8226  0D5B  0D5F               	rlf	??___ftmul+2,w
  8227  0D5C  00E0               	movwf	??___ftmul+3
  8228  0D5D  0860               	movf	??___ftmul+3,w
  8229  0D5E  00E6               	movwf	___ftmul@sign
  8230  0D5F  0866               	movf	___ftmul@sign,w
  8231  0D60  1D03               	btfss	3,2
  8232  0D61  2D69               	goto	l2727
  8233  0D62  3000               	movlw	0
  8234  0D63  00D7               	movwf	?___ftmul
  8235  0D64  3000               	movlw	0
  8236  0D65  00D8               	movwf	?___ftmul+1
  8237  0D66  3000               	movlw	0
  8238  0D67  00D9               	movwf	?___ftmul+2
  8239  0D68  0008               	return
  8240  0D69                     l2727:	
  8241  0D69  0866               	movf	___ftmul@sign,w
  8242  0D6A  3E7B               	addlw	123
  8243  0D6B  00DD               	movwf	??___ftmul
  8244  0D6C  085D               	movf	??___ftmul,w
  8245  0D6D  07E1               	addwf	___ftmul@exp,f
  8246  0D6E  0857               	movf	___ftmul@f1,w
  8247  0D6F  00DD               	movwf	??___ftmul
  8248  0D70  0858               	movf	___ftmul@f1+1,w
  8249  0D71  00DE               	movwf	??___ftmul+1
  8250  0D72  0859               	movf	___ftmul@f1+2,w
  8251  0D73  00DF               	movwf	??___ftmul+2
  8252  0D74  3010               	movlw	16
  8253  0D75                     u2835:	
  8254  0D75  36DF               	lsrf	??___ftmul+2,f
  8255  0D76  0CDE               	rrf	??___ftmul+1,f
  8256  0D77  0CDD               	rrf	??___ftmul,f
  8257  0D78  0B89               	decfsz	9,f
  8258  0D79  2D75               	goto	u2835
  8259  0D7A  085D               	movf	??___ftmul,w
  8260  0D7B  00E0               	movwf	??___ftmul+3
  8261  0D7C  0860               	movf	??___ftmul+3,w
  8262  0D7D  00E6               	movwf	___ftmul@sign
  8263  0D7E  085A               	movf	___ftmul@f2,w
  8264  0D7F  00DD               	movwf	??___ftmul
  8265  0D80  085B               	movf	___ftmul@f2+1,w
  8266  0D81  00DE               	movwf	??___ftmul+1
  8267  0D82  085C               	movf	___ftmul@f2+2,w
  8268  0D83  00DF               	movwf	??___ftmul+2
  8269  0D84  3010               	movlw	16
  8270  0D85                     u2845:	
  8271  0D85  36DF               	lsrf	??___ftmul+2,f
  8272  0D86  0CDE               	rrf	??___ftmul+1,f
  8273  0D87  0CDD               	rrf	??___ftmul,f
  8274  0D88  0B89               	decfsz	9,f
  8275  0D89  2D85               	goto	u2845
  8276  0D8A  085D               	movf	??___ftmul,w
  8277  0D8B  00E0               	movwf	??___ftmul+3
  8278  0D8C  0860               	movf	??___ftmul+3,w
  8279  0D8D  06E6               	xorwf	___ftmul@sign,f
  8280  0D8E  3080               	movlw	128
  8281  0D8F  00DD               	movwf	??___ftmul
  8282  0D90  085D               	movf	??___ftmul,w
  8283  0D91  05E6               	andwf	___ftmul@sign,f
  8284  0D92  17D8               	bsf	___ftmul@f1+1,7
  8285  0D93  17DB               	bsf	___ftmul@f2+1,7
  8286  0D94  30FF               	movlw	255
  8287  0D95  05DA               	andwf	___ftmul@f2,f
  8288  0D96  30FF               	movlw	255
  8289  0D97  05DB               	andwf	___ftmul@f2+1,f
  8290  0D98  3000               	movlw	0
  8291  0D99  05DC               	andwf	___ftmul@f2+2,f
  8292  0D9A  3000               	movlw	0
  8293  0D9B  00E2               	movwf	___ftmul@f3_as_product
  8294  0D9C  3000               	movlw	0
  8295  0D9D  00E3               	movwf	___ftmul@f3_as_product+1
  8296  0D9E  3000               	movlw	0
  8297  0D9F  00E4               	movwf	___ftmul@f3_as_product+2
  8298  0DA0  3007               	movlw	7
  8299  0DA1  00DD               	movwf	??___ftmul
  8300  0DA2  085D               	movf	??___ftmul,w
  8301  0DA3  00E5               	movwf	___ftmul@cntr
  8302  0DA4                     l2739:	
  8303  0DA4  1C57               	btfss	___ftmul@f1,0
  8304  0DA5  2DAC               	goto	l2743
  8305  0DA6  085A               	movf	___ftmul@f2,w
  8306  0DA7  07E2               	addwf	___ftmul@f3_as_product,f
  8307  0DA8  085B               	movf	___ftmul@f2+1,w
  8308  0DA9  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8309  0DAA  085C               	movf	___ftmul@f2+2,w
  8310  0DAB  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8311  0DAC                     l2743:	
  8312  0DAC  3001               	movlw	1
  8313  0DAD                     u2865:	
  8314  0DAD  36D9               	lsrf	___ftmul@f1+2,f
  8315  0DAE  0CD8               	rrf	___ftmul@f1+1,f
  8316  0DAF  0CD7               	rrf	___ftmul@f1,f
  8317  0DB0  0B89               	decfsz	9,f
  8318  0DB1  2DAD               	goto	u2865
  8319  0DB2  3001               	movlw	1
  8320  0DB3                     u2875:	
  8321  0DB3  35DA               	lslf	___ftmul@f2,f
  8322  0DB4  0DDB               	rlf	___ftmul@f2+1,f
  8323  0DB5  0DDC               	rlf	___ftmul@f2+2,f
  8324  0DB6  0B89               	decfsz	9,f
  8325  0DB7  2DB3               	goto	u2875
  8326  0DB8  3001               	movlw	1
  8327  0DB9  02E5               	subwf	___ftmul@cntr,f
  8328  0DBA  1D03               	btfss	3,2
  8329  0DBB  2DA4               	goto	l2739
  8330  0DBC  3009               	movlw	9
  8331  0DBD  00DD               	movwf	??___ftmul
  8332  0DBE  085D               	movf	??___ftmul,w
  8333  0DBF  00E5               	movwf	___ftmul@cntr
  8334  0DC0                     l2751:	
  8335  0DC0  1C57               	btfss	___ftmul@f1,0
  8336  0DC1  2DC8               	goto	l2755
  8337  0DC2  085A               	movf	___ftmul@f2,w
  8338  0DC3  07E2               	addwf	___ftmul@f3_as_product,f
  8339  0DC4  085B               	movf	___ftmul@f2+1,w
  8340  0DC5  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8341  0DC6  085C               	movf	___ftmul@f2+2,w
  8342  0DC7  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8343  0DC8                     l2755:	
  8344  0DC8  3001               	movlw	1
  8345  0DC9                     u2905:	
  8346  0DC9  36D9               	lsrf	___ftmul@f1+2,f
  8347  0DCA  0CD8               	rrf	___ftmul@f1+1,f
  8348  0DCB  0CD7               	rrf	___ftmul@f1,f
  8349  0DCC  0B89               	decfsz	9,f
  8350  0DCD  2DC9               	goto	u2905
  8351  0DCE  3001               	movlw	1
  8352  0DCF                     u2915:	
  8353  0DCF  36E4               	lsrf	___ftmul@f3_as_product+2,f
  8354  0DD0  0CE3               	rrf	___ftmul@f3_as_product+1,f
  8355  0DD1  0CE2               	rrf	___ftmul@f3_as_product,f
  8356  0DD2  0B89               	decfsz	9,f
  8357  0DD3  2DCF               	goto	u2915
  8358  0DD4  3001               	movlw	1
  8359  0DD5  02E5               	subwf	___ftmul@cntr,f
  8360  0DD6  1D03               	btfss	3,2
  8361  0DD7  2DC0               	goto	l2751
  8362  0DD8  0862               	movf	___ftmul@f3_as_product,w
  8363  0DD9  00A0               	movwf	___ftpack@arg
  8364  0DDA  0863               	movf	___ftmul@f3_as_product+1,w
  8365  0DDB  00A1               	movwf	___ftpack@arg+1
  8366  0DDC  0864               	movf	___ftmul@f3_as_product+2,w
  8367  0DDD  00A2               	movwf	___ftpack@arg+2
  8368  0DDE  0861               	movf	___ftmul@exp,w
  8369  0DDF  00DD               	movwf	??___ftmul
  8370  0DE0  085D               	movf	??___ftmul,w
  8371  0DE1  00A3               	movwf	___ftpack@exp
  8372  0DE2  0866               	movf	___ftmul@sign,w
  8373  0DE3  00DE               	movwf	??___ftmul+1
  8374  0DE4  085E               	movf	??___ftmul+1,w
  8375  0DE5  00A4               	movwf	___ftpack@sign
  8376  0DE6  3189  21CC         	fcall	___ftpack
  8377  0DE8  0020               	movlb	0	; select bank0
  8378  0DE9  0820               	movf	?___ftpack,w
  8379  0DEA  00D7               	movwf	?___ftmul
  8380  0DEB  0821               	movf	?___ftpack+1,w
  8381  0DEC  00D8               	movwf	?___ftmul+1
  8382  0DED  0822               	movf	?___ftpack+2,w
  8383  0DEE  00D9               	movwf	?___ftmul+2
  8384  0DEF  0008               	return
  8385  0DF0                     __end_of___ftmul:	
  8386                           
  8387                           	psect	text32
  8388  17C4                     __ptext32:	
  8389 ;; *************** function ___ftge *****************
  8390 ;; Defined at:
  8391 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;  ff1             3    0[BANK0 ] float 
  8394 ;;  ff2             3    3[BANK0 ] float 
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;		None
  8397 ;; Return value:  Size  Location     Type
  8398 ;;		None               void
  8399 ;; Registers used:
  8400 ;;		wreg, status,2, status,0
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8406 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;Total ram usage:        9 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    7
  8413 ;; This function calls:
  8414 ;;		Nothing
  8415 ;; This function is called by:
  8416 ;;		_ftoa
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           
  8421                           ;psect for function ___ftge
  8422  17C4                     ___ftge:	
  8423                           
  8424                           ;incstack = 0
  8425                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8426  17C4  0020               	movlb	0	; select bank0
  8427  17C5  1FA2               	btfss	___ftge@ff1+2,7
  8428  17C6  2FDB               	goto	l2699
  8429  17C7  0920               	comf	___ftge@ff1,w
  8430  17C8  00A6               	movwf	??___ftge
  8431  17C9  0921               	comf	___ftge@ff1+1,w
  8432  17CA  00A7               	movwf	??___ftge+1
  8433  17CB  0922               	comf	___ftge@ff1+2,w
  8434  17CC  00A8               	movwf	??___ftge+2
  8435  17CD  0AA6               	incf	??___ftge,f
  8436  17CE  1903               	skipnz
  8437  17CF  0AA7               	incf	??___ftge+1,f
  8438  17D0  1903               	skipnz
  8439  17D1  0AA8               	incf	??___ftge+2,f
  8440  17D2  3000               	movlw	0
  8441  17D3  0726               	addwf	??___ftge,w
  8442  17D4  00A0               	movwf	___ftge@ff1
  8443  17D5  3000               	movlw	0
  8444  17D6  3D27               	addwfc	??___ftge+1,w
  8445  17D7  00A1               	movwf	___ftge@ff1+1
  8446  17D8  3080               	movlw	128
  8447  17D9  3D28               	addwfc	??___ftge+2,w
  8448  17DA  00A2               	movwf	___ftge@ff1+2
  8449  17DB                     l2699:	
  8450  17DB  1FA5               	btfss	___ftge@ff2+2,7
  8451  17DC  2FF1               	goto	l2703
  8452  17DD  0923               	comf	___ftge@ff2,w
  8453  17DE  00A6               	movwf	??___ftge
  8454  17DF  0924               	comf	___ftge@ff2+1,w
  8455  17E0  00A7               	movwf	??___ftge+1
  8456  17E1  0925               	comf	___ftge@ff2+2,w
  8457  17E2  00A8               	movwf	??___ftge+2
  8458  17E3  0AA6               	incf	??___ftge,f
  8459  17E4  1903               	skipnz
  8460  17E5  0AA7               	incf	??___ftge+1,f
  8461  17E6  1903               	skipnz
  8462  17E7  0AA8               	incf	??___ftge+2,f
  8463  17E8  3000               	movlw	0
  8464  17E9  0726               	addwf	??___ftge,w
  8465  17EA  00A3               	movwf	___ftge@ff2
  8466  17EB  3000               	movlw	0
  8467  17EC  3D27               	addwfc	??___ftge+1,w
  8468  17ED  00A4               	movwf	___ftge@ff2+1
  8469  17EE  3080               	movlw	128
  8470  17EF  3D28               	addwfc	??___ftge+2,w
  8471  17F0  00A5               	movwf	___ftge@ff2+2
  8472  17F1                     l2703:	
  8473  17F1  3080               	movlw	128
  8474  17F2  06A2               	xorwf	___ftge@ff1+2,f
  8475  17F3  3080               	movlw	128
  8476  17F4  06A5               	xorwf	___ftge@ff2+2,f
  8477  17F5  0825               	movf	___ftge@ff2+2,w
  8478  17F6  0222               	subwf	___ftge@ff1+2,w
  8479  17F7  1D03               	skipz
  8480  17F8  0008               	return
  8481  17F9  0824               	movf	___ftge@ff2+1,w
  8482  17FA  0221               	subwf	___ftge@ff1+1,w
  8483  17FB  1D03               	skipz
  8484  17FC  0008               	return
  8485  17FD  0823               	movf	___ftge@ff2,w
  8486  17FE  0220               	subwf	___ftge@ff1,w
  8487  17FF  0008               	return
  8488  1800                     __end_of___ftge:	
  8489                           
  8490                           	psect	text33
  8491  0BED                     __ptext33:	
  8492 ;; *************** function _getADCValue *****************
  8493 ;; Defined at:
  8494 ;;		line 35 in file "main.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  channel         1    wreg     unsigned char 
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  channel         1   51[BANK0 ] unsigned char 
  8499 ;;  adcSum          3   52[BANK0 ] float 
  8500 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  8501 ;; Return value:  Size  Location     Type
  8502 ;;                  3   43[BANK0 ] float 
  8503 ;; Registers used:
  8504 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8510 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8512 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;Total ram usage:       12 bytes
  8515 ;; Hardware stack levels used:    1
  8516 ;; Hardware stack levels required when called:    9
  8517 ;; This function calls:
  8518 ;;		___awtoft
  8519 ;;		___ftadd
  8520 ;;		___ftdiv
  8521 ;;		_doWDTSleep
  8522 ;; This function is called by:
  8523 ;;		_loop
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           
  8528                           ;psect for function _getADCValue
  8529  0BED                     _getADCValue:	
  8530                           
  8531                           ;incstack = 0
  8532                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8533                           ;getADCValue@channel stored from wreg
  8534  0BED  0020               	movlb	0	; select bank0
  8535  0BEE  00D3               	movwf	getADCValue@channel
  8536                           
  8537                           ;main.c: 38: float adcSum = 0;
  8538  0BEF  3000               	movlw	0
  8539  0BF0  00D4               	movwf	getADCValue@adcSum
  8540  0BF1  3000               	movlw	0
  8541  0BF2  00D5               	movwf	getADCValue@adcSum+1
  8542  0BF3  3000               	movlw	0
  8543  0BF4  00D6               	movwf	getADCValue@adcSum+2
  8544                           
  8545                           ;main.c: 39: unsigned int adcLoop = 1000;
  8546  0BF5  30E8               	movlw	232
  8547  0BF6  00D1               	movwf	getADCValue@adcLoop
  8548  0BF7  3003               	movlw	3
  8549  0BF8  00D2               	movwf	getADCValue@adcLoop+1
  8550                           
  8551                           ;main.c: 41: ADCON0bits.CHS = channel;
  8552  0BF9  0853               	movf	getADCValue@channel,w
  8553  0BFA  00CE               	movwf	??_getADCValue
  8554  0BFB  0DCE               	rlf	??_getADCValue,f
  8555  0BFC  0DCE               	rlf	??_getADCValue,f
  8556  0BFD  0021               	movlb	1	; select bank1
  8557  0BFE  081D               	movf	29,w	;volatile
  8558  0BFF  0020               	movlb	0	; select bank0
  8559  0C00  064E               	xorwf	??_getADCValue,w
  8560  0C01  3903               	andlw	-253
  8561  0C02  064E               	xorwf	??_getADCValue,w
  8562  0C03  0021               	movlb	1	; select bank1
  8563  0C04  009D               	movwf	29	;volatile
  8564                           
  8565                           ;main.c: 42: FVRCONbits.FVREN = 1;
  8566  0C05  0022               	movlb	2	; select bank2
  8567  0C06  1797               	bsf	23,7	;volatile
  8568                           
  8569                           ;main.c: 43: ADCON0bits.ADON = 1;
  8570  0C07  0021               	movlb	1	; select bank1
  8571  0C08  141D               	bsf	29,0	;volatile
  8572                           
  8573                           ;main.c: 45: doWDTSleep(0b00000);
  8574  0C09  3000               	movlw	0
  8575  0C0A  3194  24D9  318B   	fcall	_doWDTSleep
  8576  0C0D                     l3051:	
  8577                           ;main.c: 47: while (adcLoop--){
  8578                           
  8579  0C0D  3001               	movlw	1
  8580  0C0E  0020               	movlb	0	; select bank0
  8581  0C0F  02D1               	subwf	getADCValue@adcLoop,f
  8582  0C10  3000               	movlw	0
  8583  0C11  3BD2               	subwfb	getADCValue@adcLoop+1,f
  8584  0C12  0A51               	incf	getADCValue@adcLoop,w
  8585  0C13  1903               	btfsc	3,2
  8586  0C14  0A52               	incf	getADCValue@adcLoop+1,w
  8587  0C15  1903               	btfsc	3,2
  8588  0C16  2C4A               	goto	l164
  8589                           
  8590                           ;main.c: 49: ADCON0bits.ADGO = 1;
  8591  0C17  0021               	movlb	1	; select bank1
  8592  0C18  149D               	bsf	29,1	;volatile
  8593  0C19                     l3047:	
  8594                           ;main.c: 51: while (ADCON0bits.ADGO){
  8595                           
  8596  0C19  0021               	movlb	1	; select bank1
  8597  0C1A  1C9D               	btfss	29,1	;volatile
  8598  0C1B  2C21               	goto	l3049
  8599                           
  8600                           ;main.c: 52: doWDTSleep(0b00000);
  8601  0C1C  3000               	movlw	0
  8602  0C1D  3194  24D9  318B   	fcall	_doWDTSleep
  8603  0C20  2C19               	goto	l3047
  8604  0C21                     l3049:	
  8605                           
  8606                           ;main.c: 53: };main.c: 55: adcSum+= (ADRESL | (ADRESH << 8));
  8607  0C21  081C               	movf	28,w	;volatile
  8608  0C22  0020               	movlb	0	; select bank0
  8609  0C23  00CE               	movwf	??_getADCValue
  8610  0C24  01CF               	clrf	??_getADCValue+1
  8611  0C25  084E               	movf	??_getADCValue,w
  8612  0C26  00CF               	movwf	??_getADCValue+1
  8613  0C27  01CE               	clrf	??_getADCValue
  8614  0C28  084E               	movf	??_getADCValue,w
  8615  0C29  0021               	movlb	1	; select bank1
  8616  0C2A  041B               	iorwf	27,w	;volatile
  8617  0C2B  0020               	movlb	0	; select bank0
  8618  0C2C  00A8               	movwf	___awtoft@c
  8619  0C2D  084F               	movf	??_getADCValue+1,w
  8620  0C2E  00A9               	movwf	___awtoft@c+1
  8621  0C2F  3196  2648  318B   	fcall	___awtoft
  8622  0C32  0020               	movlb	0	; select bank0
  8623  0C33  0828               	movf	?___awtoft,w
  8624  0C34  00AE               	movwf	___ftadd@f1
  8625  0C35  0829               	movf	?___awtoft+1,w
  8626  0C36  00AF               	movwf	___ftadd@f1+1
  8627  0C37  082A               	movf	?___awtoft+2,w
  8628  0C38  00B0               	movwf	___ftadd@f1+2
  8629  0C39  0854               	movf	getADCValue@adcSum,w
  8630  0C3A  00B1               	movwf	___ftadd@f2
  8631  0C3B  0855               	movf	getADCValue@adcSum+1,w
  8632  0C3C  00B2               	movwf	___ftadd@f2+1
  8633  0C3D  0856               	movf	getADCValue@adcSum+2,w
  8634  0C3E  00B3               	movwf	___ftadd@f2+2
  8635  0C3F  3186  26E5  318B   	fcall	___ftadd
  8636  0C42  0020               	movlb	0	; select bank0
  8637  0C43  082E               	movf	?___ftadd,w
  8638  0C44  00D4               	movwf	getADCValue@adcSum
  8639  0C45  082F               	movf	?___ftadd+1,w
  8640  0C46  00D5               	movwf	getADCValue@adcSum+1
  8641  0C47  0830               	movf	?___ftadd+2,w
  8642  0C48  00D6               	movwf	getADCValue@adcSum+2
  8643  0C49  2C0D               	goto	l3051
  8644  0C4A                     l164:	
  8645                           
  8646                           ;main.c: 57: };main.c: 59: FVRCONbits.FVREN = 0;
  8647  0C4A  0022               	movlb	2	; select bank2
  8648  0C4B  1397               	bcf	23,7	;volatile
  8649                           
  8650                           ;main.c: 60: ADCON0bits.ADON = 0;
  8651  0C4C  0021               	movlb	1	; select bank1
  8652  0C4D  101D               	bcf	29,0	;volatile
  8653                           
  8654                           ;main.c: 63: adcSum/= 1000;
  8655  0C4E  3000               	movlw	0
  8656  0C4F  0020               	movlb	0	; select bank0
  8657  0C50  00BB               	movwf	___ftdiv@f2
  8658  0C51  307A               	movlw	122
  8659  0C52  00BC               	movwf	___ftdiv@f2+1
  8660  0C53  3044               	movlw	68
  8661  0C54  00BD               	movwf	___ftdiv@f2+2
  8662  0C55  0854               	movf	getADCValue@adcSum,w
  8663  0C56  00BE               	movwf	___ftdiv@f1
  8664  0C57  0855               	movf	getADCValue@adcSum+1,w
  8665  0C58  00BF               	movwf	___ftdiv@f1+1
  8666  0C59  0856               	movf	getADCValue@adcSum+2,w
  8667  0C5A  00C0               	movwf	___ftdiv@f1+2
  8668  0C5B  318C  2493  318B   	fcall	___ftdiv
  8669  0C5E  0020               	movlb	0	; select bank0
  8670  0C5F  083B               	movf	?___ftdiv,w
  8671  0C60  00D4               	movwf	getADCValue@adcSum
  8672  0C61  083C               	movf	?___ftdiv+1,w
  8673  0C62  00D5               	movwf	getADCValue@adcSum+1
  8674  0C63  083D               	movf	?___ftdiv+2,w
  8675  0C64  00D6               	movwf	getADCValue@adcSum+2
  8676                           
  8677                           ;main.c: 66: if (ADCON1bits.ADPREF == 0b11){
  8678  0C65  0021               	movlb	1	; select bank1
  8679  0C66  081E               	movf	30,w	;volatile
  8680  0C67  3903               	andlw	3
  8681  0C68  3A03               	xorlw	3
  8682  0C69  1903               	btfsc	3,2
  8683  0C6A  2C84               	goto	l3063
  8684  0C6B  2C8B               	goto	l3065
  8685  0C6C                     l3059:	
  8686                           ;main.c: 68: case 0b10:
  8687                           
  8688                           ;main.c: 67: switch (FVRCONbits.ADFVR){
  8689                           
  8690                           
  8691                           ;main.c: 69: adcSum/= 500;
  8692  0C6C  3000               	movlw	0
  8693  0C6D  0020               	movlb	0	; select bank0
  8694  0C6E  00BB               	movwf	___ftdiv@f2
  8695  0C6F  30FA               	movlw	250
  8696  0C70  00BC               	movwf	___ftdiv@f2+1
  8697  0C71  3043               	movlw	67
  8698  0C72  00BD               	movwf	___ftdiv@f2+2
  8699  0C73  0854               	movf	getADCValue@adcSum,w
  8700  0C74  00BE               	movwf	___ftdiv@f1
  8701  0C75  0855               	movf	getADCValue@adcSum+1,w
  8702  0C76  00BF               	movwf	___ftdiv@f1+1
  8703  0C77  0856               	movf	getADCValue@adcSum+2,w
  8704  0C78  00C0               	movwf	___ftdiv@f1+2
  8705  0C79  318C  2493  318B   	fcall	___ftdiv
  8706  0C7C  0020               	movlb	0	; select bank0
  8707  0C7D  083B               	movf	?___ftdiv,w
  8708  0C7E  00D4               	movwf	getADCValue@adcSum
  8709  0C7F  083C               	movf	?___ftdiv+1,w
  8710  0C80  00D5               	movwf	getADCValue@adcSum+1
  8711  0C81  083D               	movf	?___ftdiv+2,w
  8712  0C82  00D6               	movwf	getADCValue@adcSum+2
  8713                           
  8714                           ;main.c: 71: }
  8715                           
  8716                           ;main.c: 70: break;
  8717  0C83  2C8B               	goto	l3065
  8718  0C84                     l3063:	
  8719  0C84  0022               	movlb	2	; select bank2
  8720  0C85  0817               	movf	23,w	;volatile
  8721  0C86  3903               	andlw	3
  8722                           
  8723                           ; Switch size 1, requested type "space"
  8724                           ; Number of cases is 1, Range of values is 2 to 2
  8725                           ; switch strategies available:
  8726                           ; Name         Instructions Cycles
  8727                           ; simple_byte            4     3 (average)
  8728                           ; direct_byte           11     9 (fixed)
  8729                           ; jumptable            263     9 (fixed)
  8730                           ;	Chosen strategy is simple_byte
  8731  0C87  3A02               	xorlw	2	; case 2
  8732  0C88  1903               	skipnz
  8733  0C89  2C6C               	goto	l3059
  8734  0C8A  2C8B               	goto	l3065
  8735  0C8B                     l3065:	
  8736                           
  8737                           ;main.c: 72: };main.c: 75: return adcSum;
  8738  0C8B  0020               	movlb	0	; select bank0
  8739  0C8C  0854               	movf	getADCValue@adcSum,w
  8740  0C8D  00CB               	movwf	?_getADCValue
  8741  0C8E  0855               	movf	getADCValue@adcSum+1,w
  8742  0C8F  00CC               	movwf	?_getADCValue+1
  8743  0C90  0856               	movf	getADCValue@adcSum+2,w
  8744  0C91  00CD               	movwf	?_getADCValue+2
  8745  0C92  0008               	return
  8746  0C93                     __end_of_getADCValue:	
  8747                           
  8748                           	psect	text34
  8749  14D9                     __ptext34:	
  8750 ;; *************** function _doWDTSleep *****************
  8751 ;; Defined at:
  8752 ;;		line 21 in file "main.c"
  8753 ;; Parameters:    Size  Location     Type
  8754 ;;  wdtps           1    wreg     unsigned char 
  8755 ;; Auto vars:     Size  Location     Type
  8756 ;;  wdtps           1    1[BANK0 ] unsigned char 
  8757 ;; Return value:  Size  Location     Type
  8758 ;;                  1    wreg      void 
  8759 ;; Registers used:
  8760 ;;		wreg, status,2, status,0
  8761 ;; Tracked objects:
  8762 ;;		On entry : 0/0
  8763 ;;		On exit  : 0/0
  8764 ;;		Unchanged: 0/0
  8765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8770 ;;Total ram usage:        2 bytes
  8771 ;; Hardware stack levels used:    1
  8772 ;; Hardware stack levels required when called:    7
  8773 ;; This function calls:
  8774 ;;		Nothing
  8775 ;; This function is called by:
  8776 ;;		_getADCValue
  8777 ;;		_sleep
  8778 ;; This function uses a non-reentrant model
  8779 ;;
  8780                           
  8781                           
  8782                           ;psect for function _doWDTSleep
  8783  14D9                     _doWDTSleep:	
  8784                           
  8785                           ;incstack = 0
  8786                           ; Regs used in _doWDTSleep: [wreg+status,2+status,0]
  8787                           ;doWDTSleep@wdtps stored from wreg
  8788  14D9  0020               	movlb	0	; select bank0
  8789  14DA  00A1               	movwf	doWDTSleep@wdtps
  8790                           
  8791                           ;main.c: 24: WDTCONbits.WDTPS = wdtps;
  8792  14DB  0821               	movf	doWDTSleep@wdtps,w
  8793  14DC  00A0               	movwf	??_doWDTSleep
  8794  14DD  0DA0               	rlf	??_doWDTSleep,f
  8795  14DE  0021               	movlb	1	; select bank1
  8796  14DF  0817               	movf	23,w	;volatile
  8797  14E0  0020               	movlb	0	; select bank0
  8798  14E1  0620               	xorwf	??_doWDTSleep,w
  8799  14E2  39C1               	andlw	-63
  8800  14E3  0620               	xorwf	??_doWDTSleep,w
  8801  14E4  0021               	movlb	1	; select bank1
  8802  14E5  0097               	movwf	23	;volatile
  8803  14E6  0063               	sleep	;# 
  8804                           
  8805                           ;main.c: 28: __nop();
  8806  14E7  0000               	nop
  8807                           
  8808                           ;main.c: 29: __nop();
  8809  14E8  0000               	nop
  8810                           
  8811                           ;main.c: 31: WDTCONbits.WDTPS = 0b01101;
  8812  14E9  0021               	movlb	1	; select bank1
  8813  14EA  0817               	movf	23,w	;volatile
  8814  14EB  39C1               	andlw	-63
  8815  14EC  381A               	iorlw	26
  8816  14ED  0097               	movwf	23	;volatile
  8817  14EE  0064               	clrwdt	;# 
  8818  14EF  0008               	return
  8819  14F0                     __end_of_doWDTSleep:	
  8820                           
  8821                           	psect	text35
  8822  0C93                     __ptext35:	
  8823 ;; *************** function ___ftdiv *****************
  8824 ;; Defined at:
  8825 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;  f2              3   27[BANK0 ] float 
  8828 ;;  f1              3   30[BANK0 ] float 
  8829 ;; Auto vars:     Size  Location     Type
  8830 ;;  f3              3   38[BANK0 ] float 
  8831 ;;  sign            1   42[BANK0 ] unsigned char 
  8832 ;;  exp             1   41[BANK0 ] unsigned char 
  8833 ;;  cntr            1   37[BANK0 ] unsigned char 
  8834 ;; Return value:  Size  Location     Type
  8835 ;;                  3   27[BANK0 ] float 
  8836 ;; Registers used:
  8837 ;;		wreg, status,2, status,0, pclath, cstack
  8838 ;; Tracked objects:
  8839 ;;		On entry : 0/0
  8840 ;;		On exit  : 0/0
  8841 ;;		Unchanged: 0/0
  8842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8843 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;Total ram usage:       16 bytes
  8848 ;; Hardware stack levels used:    1
  8849 ;; Hardware stack levels required when called:    8
  8850 ;; This function calls:
  8851 ;;		___ftpack
  8852 ;; This function is called by:
  8853 ;;		_getADCValue
  8854 ;;		_loop
  8855 ;; This function uses a non-reentrant model
  8856 ;;
  8857                           
  8858                           
  8859                           ;psect for function ___ftdiv
  8860  0C93                     ___ftdiv:	
  8861                           
  8862                           ;incstack = 0
  8863                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8864  0C93  0020               	movlb	0	; select bank0
  8865  0C94  083E               	movf	___ftdiv@f1,w
  8866  0C95  00C1               	movwf	??___ftdiv
  8867  0C96  083F               	movf	___ftdiv@f1+1,w
  8868  0C97  00C2               	movwf	??___ftdiv+1
  8869  0C98  0840               	movf	___ftdiv@f1+2,w
  8870  0C99  00C3               	movwf	??___ftdiv+2
  8871  0C9A  1003               	clrc
  8872  0C9B  0D42               	rlf	??___ftdiv+1,w
  8873  0C9C  0D43               	rlf	??___ftdiv+2,w
  8874  0C9D  00C4               	movwf	??___ftdiv+3
  8875  0C9E  0844               	movf	??___ftdiv+3,w
  8876  0C9F  00C9               	movwf	___ftdiv@exp
  8877  0CA0  0849               	movf	___ftdiv@exp,w
  8878  0CA1  1D03               	btfss	3,2
  8879  0CA2  2CAA               	goto	l2941
  8880  0CA3  3000               	movlw	0
  8881  0CA4  00BB               	movwf	?___ftdiv
  8882  0CA5  3000               	movlw	0
  8883  0CA6  00BC               	movwf	?___ftdiv+1
  8884  0CA7  3000               	movlw	0
  8885  0CA8  00BD               	movwf	?___ftdiv+2
  8886  0CA9  0008               	return
  8887  0CAA                     l2941:	
  8888  0CAA  083B               	movf	___ftdiv@f2,w
  8889  0CAB  00C1               	movwf	??___ftdiv
  8890  0CAC  083C               	movf	___ftdiv@f2+1,w
  8891  0CAD  00C2               	movwf	??___ftdiv+1
  8892  0CAE  083D               	movf	___ftdiv@f2+2,w
  8893  0CAF  00C3               	movwf	??___ftdiv+2
  8894  0CB0  1003               	clrc
  8895  0CB1  0D42               	rlf	??___ftdiv+1,w
  8896  0CB2  0D43               	rlf	??___ftdiv+2,w
  8897  0CB3  00C4               	movwf	??___ftdiv+3
  8898  0CB4  0844               	movf	??___ftdiv+3,w
  8899  0CB5  00CA               	movwf	___ftdiv@sign
  8900  0CB6  084A               	movf	___ftdiv@sign,w
  8901  0CB7  1D03               	btfss	3,2
  8902  0CB8  2CC0               	goto	l2947
  8903  0CB9  3000               	movlw	0
  8904  0CBA  00BB               	movwf	?___ftdiv
  8905  0CBB  3000               	movlw	0
  8906  0CBC  00BC               	movwf	?___ftdiv+1
  8907  0CBD  3000               	movlw	0
  8908  0CBE  00BD               	movwf	?___ftdiv+2
  8909  0CBF  0008               	return
  8910  0CC0                     l2947:	
  8911  0CC0  3000               	movlw	0
  8912  0CC1  00C6               	movwf	___ftdiv@f3
  8913  0CC2  3000               	movlw	0
  8914  0CC3  00C7               	movwf	___ftdiv@f3+1
  8915  0CC4  3000               	movlw	0
  8916  0CC5  00C8               	movwf	___ftdiv@f3+2
  8917  0CC6  3089               	movlw	137
  8918  0CC7  074A               	addwf	___ftdiv@sign,w
  8919  0CC8  00C1               	movwf	??___ftdiv
  8920  0CC9  0841               	movf	??___ftdiv,w
  8921  0CCA  02C9               	subwf	___ftdiv@exp,f
  8922  0CCB  083E               	movf	___ftdiv@f1,w
  8923  0CCC  00C1               	movwf	??___ftdiv
  8924  0CCD  083F               	movf	___ftdiv@f1+1,w
  8925  0CCE  00C2               	movwf	??___ftdiv+1
  8926  0CCF  0840               	movf	___ftdiv@f1+2,w
  8927  0CD0  00C3               	movwf	??___ftdiv+2
  8928  0CD1  3010               	movlw	16
  8929  0CD2                     u3175:	
  8930  0CD2  36C3               	lsrf	??___ftdiv+2,f
  8931  0CD3  0CC2               	rrf	??___ftdiv+1,f
  8932  0CD4  0CC1               	rrf	??___ftdiv,f
  8933  0CD5  0B89               	decfsz	9,f
  8934  0CD6  2CD2               	goto	u3175
  8935  0CD7  0841               	movf	??___ftdiv,w
  8936  0CD8  00C4               	movwf	??___ftdiv+3
  8937  0CD9  0844               	movf	??___ftdiv+3,w
  8938  0CDA  00CA               	movwf	___ftdiv@sign
  8939  0CDB  083B               	movf	___ftdiv@f2,w
  8940  0CDC  00C1               	movwf	??___ftdiv
  8941  0CDD  083C               	movf	___ftdiv@f2+1,w
  8942  0CDE  00C2               	movwf	??___ftdiv+1
  8943  0CDF  083D               	movf	___ftdiv@f2+2,w
  8944  0CE0  00C3               	movwf	??___ftdiv+2
  8945  0CE1  3010               	movlw	16
  8946  0CE2                     u3185:	
  8947  0CE2  36C3               	lsrf	??___ftdiv+2,f
  8948  0CE3  0CC2               	rrf	??___ftdiv+1,f
  8949  0CE4  0CC1               	rrf	??___ftdiv,f
  8950  0CE5  0B89               	decfsz	9,f
  8951  0CE6  2CE2               	goto	u3185
  8952  0CE7  0841               	movf	??___ftdiv,w
  8953  0CE8  00C4               	movwf	??___ftdiv+3
  8954  0CE9  0844               	movf	??___ftdiv+3,w
  8955  0CEA  06CA               	xorwf	___ftdiv@sign,f
  8956  0CEB  3080               	movlw	128
  8957  0CEC  00C1               	movwf	??___ftdiv
  8958  0CED  0841               	movf	??___ftdiv,w
  8959  0CEE  05CA               	andwf	___ftdiv@sign,f
  8960  0CEF  17BF               	bsf	___ftdiv@f1+1,7
  8961  0CF0  30FF               	movlw	255
  8962  0CF1  05BE               	andwf	___ftdiv@f1,f
  8963  0CF2  30FF               	movlw	255
  8964  0CF3  05BF               	andwf	___ftdiv@f1+1,f
  8965  0CF4  3000               	movlw	0
  8966  0CF5  05C0               	andwf	___ftdiv@f1+2,f
  8967  0CF6  17BC               	bsf	___ftdiv@f2+1,7
  8968  0CF7  30FF               	movlw	255
  8969  0CF8  05BB               	andwf	___ftdiv@f2,f
  8970  0CF9  30FF               	movlw	255
  8971  0CFA  05BC               	andwf	___ftdiv@f2+1,f
  8972  0CFB  3000               	movlw	0
  8973  0CFC  05BD               	andwf	___ftdiv@f2+2,f
  8974  0CFD  3018               	movlw	24
  8975  0CFE  00C1               	movwf	??___ftdiv
  8976  0CFF  0841               	movf	??___ftdiv,w
  8977  0D00  00C5               	movwf	___ftdiv@cntr
  8978  0D01                     l2961:	
  8979  0D01  3001               	movlw	1
  8980  0D02                     u3195:	
  8981  0D02  35C6               	lslf	___ftdiv@f3,f
  8982  0D03  0DC7               	rlf	___ftdiv@f3+1,f
  8983  0D04  0DC8               	rlf	___ftdiv@f3+2,f
  8984  0D05  0B89               	decfsz	9,f
  8985  0D06  2D02               	goto	u3195
  8986  0D07  083D               	movf	___ftdiv@f2+2,w
  8987  0D08  0240               	subwf	___ftdiv@f1+2,w
  8988  0D09  1D03               	skipz
  8989  0D0A  2D11               	goto	u3205
  8990  0D0B  083C               	movf	___ftdiv@f2+1,w
  8991  0D0C  023F               	subwf	___ftdiv@f1+1,w
  8992  0D0D  1D03               	skipz
  8993  0D0E  2D11               	goto	u3205
  8994  0D0F  083B               	movf	___ftdiv@f2,w
  8995  0D10  023E               	subwf	___ftdiv@f1,w
  8996  0D11                     u3205:	
  8997  0D11  1C03               	skipc
  8998  0D12  2D1A               	goto	l2969
  8999  0D13  083B               	movf	___ftdiv@f2,w
  9000  0D14  02BE               	subwf	___ftdiv@f1,f
  9001  0D15  083C               	movf	___ftdiv@f2+1,w
  9002  0D16  3BBF               	subwfb	___ftdiv@f1+1,f
  9003  0D17  083D               	movf	___ftdiv@f2+2,w
  9004  0D18  3BC0               	subwfb	___ftdiv@f1+2,f
  9005  0D19  1446               	bsf	___ftdiv@f3,0
  9006  0D1A                     l2969:	
  9007  0D1A  3001               	movlw	1
  9008  0D1B                     u3215:	
  9009  0D1B  35BE               	lslf	___ftdiv@f1,f
  9010  0D1C  0DBF               	rlf	___ftdiv@f1+1,f
  9011  0D1D  0DC0               	rlf	___ftdiv@f1+2,f
  9012  0D1E  0B89               	decfsz	9,f
  9013  0D1F  2D1B               	goto	u3215
  9014  0D20  3001               	movlw	1
  9015  0D21  02C5               	subwf	___ftdiv@cntr,f
  9016  0D22  1D03               	btfss	3,2
  9017  0D23  2D01               	goto	l2961
  9018  0D24  0846               	movf	___ftdiv@f3,w
  9019  0D25  00A0               	movwf	___ftpack@arg
  9020  0D26  0847               	movf	___ftdiv@f3+1,w
  9021  0D27  00A1               	movwf	___ftpack@arg+1
  9022  0D28  0848               	movf	___ftdiv@f3+2,w
  9023  0D29  00A2               	movwf	___ftpack@arg+2
  9024  0D2A  0849               	movf	___ftdiv@exp,w
  9025  0D2B  00C1               	movwf	??___ftdiv
  9026  0D2C  0841               	movf	??___ftdiv,w
  9027  0D2D  00A3               	movwf	___ftpack@exp
  9028  0D2E  084A               	movf	___ftdiv@sign,w
  9029  0D2F  00C2               	movwf	??___ftdiv+1
  9030  0D30  0842               	movf	??___ftdiv+1,w
  9031  0D31  00A4               	movwf	___ftpack@sign
  9032  0D32  3189  21CC         	fcall	___ftpack
  9033  0D34  0020               	movlb	0	; select bank0
  9034  0D35  0820               	movf	?___ftpack,w
  9035  0D36  00BB               	movwf	?___ftdiv
  9036  0D37  0821               	movf	?___ftpack+1,w
  9037  0D38  00BC               	movwf	?___ftdiv+1
  9038  0D39  0822               	movf	?___ftpack+2,w
  9039  0D3A  00BD               	movwf	?___ftdiv+2
  9040  0D3B  0008               	return
  9041  0D3C                     __end_of___ftdiv:	
  9042                           
  9043                           	psect	text36
  9044  06E5                     __ptext36:	
  9045 ;; *************** function ___ftadd *****************
  9046 ;; Defined at:
  9047 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9048 ;; Parameters:    Size  Location     Type
  9049 ;;  f1              3   14[BANK0 ] float 
  9050 ;;  f2              3   17[BANK0 ] float 
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;  exp1            1   26[BANK0 ] unsigned char 
  9053 ;;  exp2            1   25[BANK0 ] unsigned char 
  9054 ;;  sign            1   24[BANK0 ] unsigned char 
  9055 ;; Return value:  Size  Location     Type
  9056 ;;                  3   14[BANK0 ] float 
  9057 ;; Registers used:
  9058 ;;		wreg, status,2, status,0, pclath, cstack
  9059 ;; Tracked objects:
  9060 ;;		On entry : 0/0
  9061 ;;		On exit  : 0/0
  9062 ;;		Unchanged: 0/0
  9063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9064 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9065 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;Total ram usage:       13 bytes
  9069 ;; Hardware stack levels used:    1
  9070 ;; Hardware stack levels required when called:    8
  9071 ;; This function calls:
  9072 ;;		___ftpack
  9073 ;; This function is called by:
  9074 ;;		_getADCValue
  9075 ;;		_loop
  9076 ;;		___ftsub
  9077 ;; This function uses a non-reentrant model
  9078 ;;
  9079                           
  9080                           
  9081                           ;psect for function ___ftadd
  9082  06E5                     ___ftadd:	
  9083                           
  9084                           ;incstack = 0
  9085                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9086  06E5  0020               	movlb	0	; select bank0
  9087  06E6  082E               	movf	___ftadd@f1,w
  9088  06E7  00B4               	movwf	??___ftadd
  9089  06E8  082F               	movf	___ftadd@f1+1,w
  9090  06E9  00B5               	movwf	??___ftadd+1
  9091  06EA  0830               	movf	___ftadd@f1+2,w
  9092  06EB  00B6               	movwf	??___ftadd+2
  9093  06EC  1003               	clrc
  9094  06ED  0D35               	rlf	??___ftadd+1,w
  9095  06EE  0D36               	rlf	??___ftadd+2,w
  9096  06EF  00B7               	movwf	??___ftadd+3
  9097  06F0  0837               	movf	??___ftadd+3,w
  9098  06F1  00BA               	movwf	___ftadd@exp1
  9099  06F2  0831               	movf	___ftadd@f2,w
  9100  06F3  00B4               	movwf	??___ftadd
  9101  06F4  0832               	movf	___ftadd@f2+1,w
  9102  06F5  00B5               	movwf	??___ftadd+1
  9103  06F6  0833               	movf	___ftadd@f2+2,w
  9104  06F7  00B6               	movwf	??___ftadd+2
  9105  06F8  1003               	clrc
  9106  06F9  0D35               	rlf	??___ftadd+1,w
  9107  06FA  0D36               	rlf	??___ftadd+2,w
  9108  06FB  00B7               	movwf	??___ftadd+3
  9109  06FC  0837               	movf	??___ftadd+3,w
  9110  06FD  00B9               	movwf	___ftadd@exp2
  9111  06FE  083A               	movf	___ftadd@exp1,w
  9112  06FF  1903               	btfsc	3,2
  9113  0700  2F0D               	goto	l2399
  9114  0701  0839               	movf	___ftadd@exp2,w
  9115  0702  023A               	subwf	___ftadd@exp1,w
  9116  0703  1803               	skipnc
  9117  0704  2F14               	goto	l2403
  9118  0705  033A               	decf	___ftadd@exp1,w
  9119  0706  3AFF               	xorlw	255
  9120  0707  0739               	addwf	___ftadd@exp2,w
  9121  0708  00B4               	movwf	??___ftadd
  9122  0709  3019               	movlw	25
  9123  070A  0234               	subwf	??___ftadd,w
  9124  070B  1C03               	skipc
  9125  070C  2F14               	goto	l2403
  9126  070D                     l2399:	
  9127  070D  0831               	movf	___ftadd@f2,w
  9128  070E  00AE               	movwf	?___ftadd
  9129  070F  0832               	movf	___ftadd@f2+1,w
  9130  0710  00AF               	movwf	?___ftadd+1
  9131  0711  0833               	movf	___ftadd@f2+2,w
  9132  0712  00B0               	movwf	?___ftadd+2
  9133  0713  0008               	return
  9134  0714                     l2403:	
  9135  0714  0839               	movf	___ftadd@exp2,w
  9136  0715  1903               	btfsc	3,2
  9137  0716  0008               	return
  9138  0717  083A               	movf	___ftadd@exp1,w
  9139  0718  0239               	subwf	___ftadd@exp2,w
  9140  0719  1803               	skipnc
  9141  071A  2F23               	goto	l2409
  9142  071B  0339               	decf	___ftadd@exp2,w
  9143  071C  3AFF               	xorlw	255
  9144  071D  073A               	addwf	___ftadd@exp1,w
  9145  071E  00B4               	movwf	??___ftadd
  9146  071F  3019               	movlw	25
  9147  0720  0234               	subwf	??___ftadd,w
  9148  0721  1803               	btfsc	3,0
  9149  0722  0008               	return
  9150  0723                     l2409:	
  9151  0723  3006               	movlw	6
  9152  0724  00B4               	movwf	??___ftadd
  9153  0725  0834               	movf	??___ftadd,w
  9154  0726  00B8               	movwf	___ftadd@sign
  9155  0727  1BB0               	btfsc	___ftadd@f1+2,7
  9156  0728  17B8               	bsf	___ftadd@sign,7
  9157  0729  1BB3               	btfsc	___ftadd@f2+2,7
  9158  072A  1738               	bsf	___ftadd@sign,6
  9159  072B  17AF               	bsf	___ftadd@f1+1,7
  9160  072C  30FF               	movlw	255
  9161  072D  05AE               	andwf	___ftadd@f1,f
  9162  072E  30FF               	movlw	255
  9163  072F  05AF               	andwf	___ftadd@f1+1,f
  9164  0730  3000               	movlw	0
  9165  0731  05B0               	andwf	___ftadd@f1+2,f
  9166  0732  17B2               	bsf	___ftadd@f2+1,7
  9167  0733  30FF               	movlw	255
  9168  0734  05B1               	andwf	___ftadd@f2,f
  9169  0735  30FF               	movlw	255
  9170  0736  05B2               	andwf	___ftadd@f2+1,f
  9171  0737  3000               	movlw	0
  9172  0738  05B3               	andwf	___ftadd@f2+2,f
  9173  0739  0839               	movf	___ftadd@exp2,w
  9174  073A  023A               	subwf	___ftadd@exp1,w
  9175  073B  1803               	skipnc
  9176  073C  2F5F               	goto	l2431
  9177  073D                     l2421:	
  9178  073D  3001               	movlw	1
  9179  073E                     u2245:	
  9180  073E  35B1               	lslf	___ftadd@f2,f
  9181  073F  0DB2               	rlf	___ftadd@f2+1,f
  9182  0740  0DB3               	rlf	___ftadd@f2+2,f
  9183  0741  0B89               	decfsz	9,f
  9184  0742  2F3E               	goto	u2245
  9185  0743  3001               	movlw	1
  9186  0744  02B9               	subwf	___ftadd@exp2,f
  9187  0745  0839               	movf	___ftadd@exp2,w
  9188  0746  063A               	xorwf	___ftadd@exp1,w
  9189  0747  1903               	skipnz
  9190  0748  2F5A               	goto	l2429
  9191  0749  3001               	movlw	1
  9192  074A  02B8               	subwf	___ftadd@sign,f
  9193  074B  0838               	movf	___ftadd@sign,w
  9194  074C  3907               	andlw	7
  9195  074D  1903               	btfsc	3,2
  9196  074E  2F5A               	goto	l2429
  9197  074F  2F3D               	goto	l2421
  9198  0750                     l2427:	
  9199  0750  3001               	movlw	1
  9200  0751                     u2275:	
  9201  0751  36B0               	lsrf	___ftadd@f1+2,f
  9202  0752  0CAF               	rrf	___ftadd@f1+1,f
  9203  0753  0CAE               	rrf	___ftadd@f1,f
  9204  0754  0B89               	decfsz	9,f
  9205  0755  2F51               	goto	u2275
  9206  0756  3001               	movlw	1
  9207  0757  00B4               	movwf	??___ftadd
  9208  0758  0834               	movf	??___ftadd,w
  9209  0759  07BA               	addwf	___ftadd@exp1,f
  9210  075A                     l2429:	
  9211  075A  083A               	movf	___ftadd@exp1,w
  9212  075B  0639               	xorwf	___ftadd@exp2,w
  9213  075C  1903               	btfsc	3,2
  9214  075D  2F84               	goto	l683
  9215  075E  2F50               	goto	l2427
  9216  075F                     l2431:	
  9217  075F  083A               	movf	___ftadd@exp1,w
  9218  0760  0239               	subwf	___ftadd@exp2,w
  9219  0761  1803               	skipnc
  9220  0762  2F84               	goto	l683
  9221  0763                     l2433:	
  9222  0763  3001               	movlw	1
  9223  0764                     u2305:	
  9224  0764  35AE               	lslf	___ftadd@f1,f
  9225  0765  0DAF               	rlf	___ftadd@f1+1,f
  9226  0766  0DB0               	rlf	___ftadd@f1+2,f
  9227  0767  0B89               	decfsz	9,f
  9228  0768  2F64               	goto	u2305
  9229  0769  3001               	movlw	1
  9230  076A  02BA               	subwf	___ftadd@exp1,f
  9231  076B  0839               	movf	___ftadd@exp2,w
  9232  076C  063A               	xorwf	___ftadd@exp1,w
  9233  076D  1903               	skipnz
  9234  076E  2F80               	goto	l2441
  9235  076F  3001               	movlw	1
  9236  0770  02B8               	subwf	___ftadd@sign,f
  9237  0771  0838               	movf	___ftadd@sign,w
  9238  0772  3907               	andlw	7
  9239  0773  1903               	btfsc	3,2
  9240  0774  2F80               	goto	l2441
  9241  0775  2F63               	goto	l2433
  9242  0776                     l2439:	
  9243  0776  3001               	movlw	1
  9244  0777                     u2335:	
  9245  0777  36B3               	lsrf	___ftadd@f2+2,f
  9246  0778  0CB2               	rrf	___ftadd@f2+1,f
  9247  0779  0CB1               	rrf	___ftadd@f2,f
  9248  077A  0B89               	decfsz	9,f
  9249  077B  2F77               	goto	u2335
  9250  077C  3001               	movlw	1
  9251  077D  00B4               	movwf	??___ftadd
  9252  077E  0834               	movf	??___ftadd,w
  9253  077F  07B9               	addwf	___ftadd@exp2,f
  9254  0780                     l2441:	
  9255  0780  083A               	movf	___ftadd@exp1,w
  9256  0781  0639               	xorwf	___ftadd@exp2,w
  9257  0782  1D03               	skipz
  9258  0783  2F76               	goto	l2439
  9259  0784                     l683:	
  9260  0784  1FB8               	btfss	___ftadd@sign,7
  9261  0785  2F96               	goto	l2445
  9262  0786  30FF               	movlw	255
  9263  0787  06AE               	xorwf	___ftadd@f1,f
  9264  0788  30FF               	movlw	255
  9265  0789  06AF               	xorwf	___ftadd@f1+1,f
  9266  078A  30FF               	movlw	255
  9267  078B  06B0               	xorwf	___ftadd@f1+2,f
  9268  078C  3001               	movlw	1
  9269  078D  07AE               	addwf	___ftadd@f1,f
  9270  078E  3000               	movlw	0
  9271  078F  1803               	skipnc
  9272  0790  3001               	movlw	1
  9273  0791  07AF               	addwf	___ftadd@f1+1,f
  9274  0792  3000               	movlw	0
  9275  0793  1803               	skipnc
  9276  0794  3001               	movlw	1
  9277  0795  07B0               	addwf	___ftadd@f1+2,f
  9278  0796                     l2445:	
  9279  0796  1F38               	btfss	___ftadd@sign,6
  9280  0797  2FA8               	goto	l2449
  9281  0798  30FF               	movlw	255
  9282  0799  06B1               	xorwf	___ftadd@f2,f
  9283  079A  30FF               	movlw	255
  9284  079B  06B2               	xorwf	___ftadd@f2+1,f
  9285  079C  30FF               	movlw	255
  9286  079D  06B3               	xorwf	___ftadd@f2+2,f
  9287  079E  3001               	movlw	1
  9288  079F  07B1               	addwf	___ftadd@f2,f
  9289  07A0  3000               	movlw	0
  9290  07A1  1803               	skipnc
  9291  07A2  3001               	movlw	1
  9292  07A3  07B2               	addwf	___ftadd@f2+1,f
  9293  07A4  3000               	movlw	0
  9294  07A5  1803               	skipnc
  9295  07A6  3001               	movlw	1
  9296  07A7  07B3               	addwf	___ftadd@f2+2,f
  9297  07A8                     l2449:	
  9298  07A8  01B8               	clrf	___ftadd@sign
  9299  07A9  082E               	movf	___ftadd@f1,w
  9300  07AA  07B1               	addwf	___ftadd@f2,f
  9301  07AB  082F               	movf	___ftadd@f1+1,w
  9302  07AC  3DB2               	addwfc	___ftadd@f2+1,f
  9303  07AD  0830               	movf	___ftadd@f1+2,w
  9304  07AE  3DB3               	addwfc	___ftadd@f2+2,f
  9305  07AF  1FB3               	btfss	___ftadd@f2+2,7
  9306  07B0  2FC3               	goto	l2459
  9307  07B1  30FF               	movlw	255
  9308  07B2  06B1               	xorwf	___ftadd@f2,f
  9309  07B3  30FF               	movlw	255
  9310  07B4  06B2               	xorwf	___ftadd@f2+1,f
  9311  07B5  30FF               	movlw	255
  9312  07B6  06B3               	xorwf	___ftadd@f2+2,f
  9313  07B7  3001               	movlw	1
  9314  07B8  07B1               	addwf	___ftadd@f2,f
  9315  07B9  3000               	movlw	0
  9316  07BA  1803               	skipnc
  9317  07BB  3001               	movlw	1
  9318  07BC  07B2               	addwf	___ftadd@f2+1,f
  9319  07BD  3000               	movlw	0
  9320  07BE  1803               	skipnc
  9321  07BF  3001               	movlw	1
  9322  07C0  07B3               	addwf	___ftadd@f2+2,f
  9323  07C1  01B8               	clrf	___ftadd@sign
  9324  07C2  0AB8               	incf	___ftadd@sign,f
  9325  07C3                     l2459:	
  9326  07C3  0831               	movf	___ftadd@f2,w
  9327  07C4  00A0               	movwf	___ftpack@arg
  9328  07C5  0832               	movf	___ftadd@f2+1,w
  9329  07C6  00A1               	movwf	___ftpack@arg+1
  9330  07C7  0833               	movf	___ftadd@f2+2,w
  9331  07C8  00A2               	movwf	___ftpack@arg+2
  9332  07C9  083A               	movf	___ftadd@exp1,w
  9333  07CA  00B4               	movwf	??___ftadd
  9334  07CB  0834               	movf	??___ftadd,w
  9335  07CC  00A3               	movwf	___ftpack@exp
  9336  07CD  0838               	movf	___ftadd@sign,w
  9337  07CE  00B5               	movwf	??___ftadd+1
  9338  07CF  0835               	movf	??___ftadd+1,w
  9339  07D0  00A4               	movwf	___ftpack@sign
  9340  07D1  3189  21CC         	fcall	___ftpack
  9341  07D3  0020               	movlb	0	; select bank0
  9342  07D4  0820               	movf	?___ftpack,w
  9343  07D5  00AE               	movwf	?___ftadd
  9344  07D6  0821               	movf	?___ftpack+1,w
  9345  07D7  00AF               	movwf	?___ftadd+1
  9346  07D8  0822               	movf	?___ftpack+2,w
  9347  07D9  00B0               	movwf	?___ftadd+2
  9348  07DA  0008               	return
  9349  07DB                     __end_of___ftadd:	
  9350                           
  9351                           	psect	text37
  9352  1648                     __ptext37:	
  9353 ;; *************** function ___awtoft *****************
  9354 ;; Defined at:
  9355 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;  c               2    8[BANK0 ] int 
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;  sign            1   13[BANK0 ] unsigned char 
  9360 ;; Return value:  Size  Location     Type
  9361 ;;                  3    8[BANK0 ] float 
  9362 ;; Registers used:
  9363 ;;		wreg, status,2, status,0, pclath, cstack
  9364 ;; Tracked objects:
  9365 ;;		On entry : 0/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9369 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;Total ram usage:        6 bytes
  9374 ;; Hardware stack levels used:    1
  9375 ;; Hardware stack levels required when called:    8
  9376 ;; This function calls:
  9377 ;;		___ftpack
  9378 ;; This function is called by:
  9379 ;;		_getADCValue
  9380 ;; This function uses a non-reentrant model
  9381 ;;
  9382                           
  9383                           
  9384                           ;psect for function ___awtoft
  9385  1648                     ___awtoft:	
  9386                           
  9387                           ;incstack = 0
  9388                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9389  1648  0020               	movlb	0	; select bank0
  9390  1649  01AD               	clrf	___awtoft@sign
  9391  164A  1FA9               	btfss	___awtoft@c+1,7
  9392  164B  2E53               	goto	l2931
  9393  164C  09A8               	comf	___awtoft@c,f
  9394  164D  09A9               	comf	___awtoft@c+1,f
  9395  164E  0AA8               	incf	___awtoft@c,f
  9396  164F  1903               	skipnz
  9397  1650  0AA9               	incf	___awtoft@c+1,f
  9398  1651  01AD               	clrf	___awtoft@sign
  9399  1652  0AAD               	incf	___awtoft@sign,f
  9400  1653                     l2931:	
  9401  1653  0828               	movf	___awtoft@c,w
  9402  1654  00A0               	movwf	___ftpack@arg
  9403  1655  0829               	movf	___awtoft@c+1,w
  9404  1656  00A1               	movwf	___ftpack@arg+1
  9405  1657  01A2               	clrf	___ftpack@arg+2
  9406  1658  308E               	movlw	142
  9407  1659  00AB               	movwf	??___awtoft
  9408  165A  082B               	movf	??___awtoft,w
  9409  165B  00A3               	movwf	___ftpack@exp
  9410  165C  082D               	movf	___awtoft@sign,w
  9411  165D  00AC               	movwf	??___awtoft+1
  9412  165E  082C               	movf	??___awtoft+1,w
  9413  165F  00A4               	movwf	___ftpack@sign
  9414  1660  3189  21CC         	fcall	___ftpack
  9415  1662  0020               	movlb	0	; select bank0
  9416  1663  0820               	movf	?___ftpack,w
  9417  1664  00A8               	movwf	?___awtoft
  9418  1665  0821               	movf	?___ftpack+1,w
  9419  1666  00A9               	movwf	?___awtoft+1
  9420  1667  0822               	movf	?___ftpack+2,w
  9421  1668  00AA               	movwf	?___awtoft+2
  9422  1669  0008               	return
  9423  166A                     __end_of___awtoft:	
  9424                           
  9425                           	psect	text38
  9426  153C                     __ptext38:	
  9427 ;; *************** function ___lbtoft *****************
  9428 ;; Defined at:
  9429 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;  c               1    wreg     unsigned char 
  9432 ;; Auto vars:     Size  Location     Type
  9433 ;;  c               1   15[BANK0 ] unsigned char 
  9434 ;; Return value:  Size  Location     Type
  9435 ;;                  3    8[BANK0 ] float 
  9436 ;; Registers used:
  9437 ;;		wreg, status,2, status,0, pclath, cstack
  9438 ;; Tracked objects:
  9439 ;;		On entry : 0/0
  9440 ;;		On exit  : 0/0
  9441 ;;		Unchanged: 0/0
  9442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9443 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;Total ram usage:        8 bytes
  9448 ;; Hardware stack levels used:    1
  9449 ;; Hardware stack levels required when called:    8
  9450 ;; This function calls:
  9451 ;;		___ftpack
  9452 ;; This function is called by:
  9453 ;;		_loop
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           
  9458                           ;psect for function ___lbtoft
  9459  153C                     ___lbtoft:	
  9460                           
  9461                           ;incstack = 0
  9462                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  9463                           ;___lbtoft@c stored from wreg
  9464  153C  0020               	movlb	0	; select bank0
  9465  153D  00AF               	movwf	___lbtoft@c
  9466  153E  082F               	movf	___lbtoft@c,w
  9467  153F  00AB               	movwf	??___lbtoft
  9468  1540  01AC               	clrf	??___lbtoft+1
  9469  1541  01AD               	clrf	??___lbtoft+2
  9470  1542  082B               	movf	??___lbtoft,w
  9471  1543  00A0               	movwf	___ftpack@arg
  9472  1544  082C               	movf	??___lbtoft+1,w
  9473  1545  00A1               	movwf	___ftpack@arg+1
  9474  1546  082D               	movf	??___lbtoft+2,w
  9475  1547  00A2               	movwf	___ftpack@arg+2
  9476  1548  308E               	movlw	142
  9477  1549  00AE               	movwf	??___lbtoft+3
  9478  154A  082E               	movf	??___lbtoft+3,w
  9479  154B  00A3               	movwf	___ftpack@exp
  9480  154C  01A4               	clrf	___ftpack@sign
  9481  154D  3189  21CC         	fcall	___ftpack
  9482  154F  0020               	movlb	0	; select bank0
  9483  1550  0820               	movf	?___ftpack,w
  9484  1551  00A8               	movwf	?___lbtoft
  9485  1552  0821               	movf	?___ftpack+1,w
  9486  1553  00A9               	movwf	?___lbtoft+1
  9487  1554  0822               	movf	?___ftpack+2,w
  9488  1555  00AA               	movwf	?___lbtoft+2
  9489  1556  0008               	return
  9490  1557                     __end_of___lbtoft:	
  9491                           
  9492                           	psect	text39
  9493  14C4                     __ptext39:	
  9494 ;; *************** function ___lwtoft *****************
  9495 ;; Defined at:
  9496 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  9497 ;; Parameters:    Size  Location     Type
  9498 ;;  c               2    8[BANK0 ] unsigned int 
  9499 ;; Auto vars:     Size  Location     Type
  9500 ;;		None
  9501 ;; Return value:  Size  Location     Type
  9502 ;;                  3    8[BANK0 ] float 
  9503 ;; Registers used:
  9504 ;;		wreg, status,2, status,0, pclath, cstack
  9505 ;; Tracked objects:
  9506 ;;		On entry : 0/0
  9507 ;;		On exit  : 0/0
  9508 ;;		Unchanged: 0/0
  9509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9510 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;Total ram usage:        4 bytes
  9515 ;; Hardware stack levels used:    1
  9516 ;; Hardware stack levels required when called:    8
  9517 ;; This function calls:
  9518 ;;		___ftpack
  9519 ;; This function is called by:
  9520 ;;		_main
  9521 ;; This function uses a non-reentrant model
  9522 ;;
  9523                           
  9524                           
  9525                           ;psect for function ___lwtoft
  9526  14C4                     ___lwtoft:	
  9527                           
  9528                           ;incstack = 0
  9529                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  9530  14C4  0020               	movlb	0	; select bank0
  9531  14C5  0828               	movf	___lwtoft@c,w
  9532  14C6  00A0               	movwf	___ftpack@arg
  9533  14C7  0829               	movf	___lwtoft@c+1,w
  9534  14C8  00A1               	movwf	___ftpack@arg+1
  9535  14C9  01A2               	clrf	___ftpack@arg+2
  9536  14CA  308E               	movlw	142
  9537  14CB  00AB               	movwf	??___lwtoft
  9538  14CC  082B               	movf	??___lwtoft,w
  9539  14CD  00A3               	movwf	___ftpack@exp
  9540  14CE  01A4               	clrf	___ftpack@sign
  9541  14CF  3189  21CC         	fcall	___ftpack
  9542  14D1  0020               	movlb	0	; select bank0
  9543  14D2  0820               	movf	?___ftpack,w
  9544  14D3  00A8               	movwf	?___lwtoft
  9545  14D4  0821               	movf	?___ftpack+1,w
  9546  14D5  00A9               	movwf	?___lwtoft+1
  9547  14D6  0822               	movf	?___ftpack+2,w
  9548  14D7  00AA               	movwf	?___lwtoft+2
  9549  14D8  0008               	return
  9550  14D9                     __end_of___lwtoft:	
  9551                           
  9552                           	psect	text40
  9553  09CC                     __ptext40:	
  9554 ;; *************** function ___ftpack *****************
  9555 ;; Defined at:
  9556 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9557 ;; Parameters:    Size  Location     Type
  9558 ;;  arg             3    0[BANK0 ] unsigned um
  9559 ;;  exp             1    3[BANK0 ] unsigned char 
  9560 ;;  sign            1    4[BANK0 ] unsigned char 
  9561 ;; Auto vars:     Size  Location     Type
  9562 ;;		None
  9563 ;; Return value:  Size  Location     Type
  9564 ;;                  3    0[BANK0 ] float 
  9565 ;; Registers used:
  9566 ;;		wreg, status,2, status,0
  9567 ;; Tracked objects:
  9568 ;;		On entry : 0/0
  9569 ;;		On exit  : 0/0
  9570 ;;		Unchanged: 0/0
  9571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9572 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9574 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9575 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9576 ;;Total ram usage:        8 bytes
  9577 ;; Hardware stack levels used:    1
  9578 ;; Hardware stack levels required when called:    7
  9579 ;; This function calls:
  9580 ;;		Nothing
  9581 ;; This function is called by:
  9582 ;;		___awtoft
  9583 ;;		___ftadd
  9584 ;;		___ftdiv
  9585 ;;		___ftmul
  9586 ;;		___lbtoft
  9587 ;;		___lltoft
  9588 ;;		___lwtoft
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592                           
  9593                           ;psect for function ___ftpack
  9594  09CC                     ___ftpack:	
  9595                           
  9596                           ;incstack = 0
  9597                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9598  09CC  0020               	movlb	0	; select bank0
  9599  09CD  0823               	movf	___ftpack@exp,w
  9600  09CE  1903               	btfsc	3,2
  9601  09CF  29D5               	goto	l2249
  9602  09D0  0822               	movf	___ftpack@arg+2,w
  9603  09D1  0421               	iorwf	___ftpack@arg+1,w
  9604  09D2  0420               	iorwf	___ftpack@arg,w
  9605  09D3  1D03               	skipz
  9606  09D4  29E6               	goto	l2255
  9607  09D5                     l2249:	
  9608  09D5  3000               	movlw	0
  9609  09D6  00A0               	movwf	?___ftpack
  9610  09D7  3000               	movlw	0
  9611  09D8  00A1               	movwf	?___ftpack+1
  9612  09D9  3000               	movlw	0
  9613  09DA  00A2               	movwf	?___ftpack+2
  9614  09DB  0008               	return
  9615  09DC                     l2253:	
  9616  09DC  3001               	movlw	1
  9617  09DD  00A5               	movwf	??___ftpack
  9618  09DE  0825               	movf	??___ftpack,w
  9619  09DF  07A3               	addwf	___ftpack@exp,f
  9620  09E0  3001               	movlw	1
  9621  09E1                     u1855:	
  9622  09E1  36A2               	lsrf	___ftpack@arg+2,f
  9623  09E2  0CA1               	rrf	___ftpack@arg+1,f
  9624  09E3  0CA0               	rrf	___ftpack@arg,f
  9625  09E4  0B89               	decfsz	9,f
  9626  09E5  29E1               	goto	u1855
  9627  09E6                     l2255:	
  9628  09E6  30FE               	movlw	254
  9629  09E7  0522               	andwf	___ftpack@arg+2,w
  9630  09E8  1903               	btfsc	3,2
  9631  09E9  29FF               	goto	l652
  9632  09EA  29DC               	goto	l2253
  9633  09EB                     l2257:	
  9634  09EB  3001               	movlw	1
  9635  09EC  00A5               	movwf	??___ftpack
  9636  09ED  0825               	movf	??___ftpack,w
  9637  09EE  07A3               	addwf	___ftpack@exp,f
  9638  09EF  3001               	movlw	1
  9639  09F0  07A0               	addwf	___ftpack@arg,f
  9640  09F1  3000               	movlw	0
  9641  09F2  1803               	skipnc
  9642  09F3  3001               	movlw	1
  9643  09F4  07A1               	addwf	___ftpack@arg+1,f
  9644  09F5  3000               	movlw	0
  9645  09F6  1803               	skipnc
  9646  09F7  3001               	movlw	1
  9647  09F8  07A2               	addwf	___ftpack@arg+2,f
  9648  09F9  3001               	movlw	1
  9649  09FA                     u1875:	
  9650  09FA  36A2               	lsrf	___ftpack@arg+2,f
  9651  09FB  0CA1               	rrf	___ftpack@arg+1,f
  9652  09FC  0CA0               	rrf	___ftpack@arg,f
  9653  09FD  0B89               	decfsz	9,f
  9654  09FE  29FA               	goto	u1875
  9655  09FF                     l652:	
  9656  09FF  30FF               	movlw	255
  9657  0A00  0522               	andwf	___ftpack@arg+2,w
  9658  0A01  1903               	btfsc	3,2
  9659  0A02  2A0C               	goto	l2265
  9660  0A03  29EB               	goto	l2257
  9661  0A04                     l2263:	
  9662  0A04  3001               	movlw	1
  9663  0A05  02A3               	subwf	___ftpack@exp,f
  9664  0A06  3001               	movlw	1
  9665  0A07                     u1895:	
  9666  0A07  35A0               	lslf	___ftpack@arg,f
  9667  0A08  0DA1               	rlf	___ftpack@arg+1,f
  9668  0A09  0DA2               	rlf	___ftpack@arg+2,f
  9669  0A0A  0B89               	decfsz	9,f
  9670  0A0B  2A07               	goto	u1895
  9671  0A0C                     l2265:	
  9672  0A0C  1BA1               	btfsc	___ftpack@arg+1,7
  9673  0A0D  2A12               	goto	l659
  9674  0A0E  3002               	movlw	2
  9675  0A0F  0223               	subwf	___ftpack@exp,w
  9676  0A10  1803               	skipnc
  9677  0A11  2A04               	goto	l2263
  9678  0A12                     l659:	
  9679  0A12  1823               	btfsc	___ftpack@exp,0
  9680  0A13  2A1A               	goto	l660
  9681  0A14  30FF               	movlw	255
  9682  0A15  05A0               	andwf	___ftpack@arg,f
  9683  0A16  307F               	movlw	127
  9684  0A17  05A1               	andwf	___ftpack@arg+1,f
  9685  0A18  30FF               	movlw	255
  9686  0A19  05A2               	andwf	___ftpack@arg+2,f
  9687  0A1A                     l660:	
  9688  0A1A  1003               	clrc
  9689  0A1B  0CA3               	rrf	___ftpack@exp,f
  9690  0A1C  0823               	movf	___ftpack@exp,w
  9691  0A1D  00A5               	movwf	??___ftpack
  9692  0A1E  01A6               	clrf	??___ftpack+1
  9693  0A1F  01A7               	clrf	??___ftpack+2
  9694  0A20  3010               	movlw	16
  9695  0A21                     u1935:	
  9696  0A21  35A5               	lslf	??___ftpack,f
  9697  0A22  0DA6               	rlf	??___ftpack+1,f
  9698  0A23  0DA7               	rlf	??___ftpack+2,f
  9699  0A24  0B89               	decfsz	9,f
  9700  0A25  2A21               	goto	u1935
  9701  0A26  0825               	movf	??___ftpack,w
  9702  0A27  04A0               	iorwf	___ftpack@arg,f
  9703  0A28  0826               	movf	??___ftpack+1,w
  9704  0A29  04A1               	iorwf	___ftpack@arg+1,f
  9705  0A2A  0827               	movf	??___ftpack+2,w
  9706  0A2B  04A2               	iorwf	___ftpack@arg+2,f
  9707  0A2C  0824               	movf	___ftpack@sign,w
  9708  0A2D  1903               	btfsc	3,2
  9709  0A2E  0008               	return
  9710  0A2F  17A2               	bsf	___ftpack@arg+2,7
  9711  0A30  0008               	return
  9712  0A31                     __end_of___ftpack:	
  9713                           
  9714                           	psect	intentry
  9715  0004                     __pintentry:	
  9716 ;; *************** function _ISR *****************
  9717 ;; Defined at:
  9718 ;;		line 13 in file "main.c"
  9719 ;; Parameters:    Size  Location     Type
  9720 ;;		None
  9721 ;; Auto vars:     Size  Location     Type
  9722 ;;		None
  9723 ;; Return value:  Size  Location     Type
  9724 ;;                  1    wreg      void 
  9725 ;; Registers used:
  9726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9727 ;; Tracked objects:
  9728 ;;		On entry : 0/0
  9729 ;;		On exit  : 0/0
  9730 ;;		Unchanged: 0/0
  9731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;Total ram usage:        0 bytes
  9737 ;; Hardware stack levels used:    1
  9738 ;; Hardware stack levels required when called:    6
  9739 ;; This function calls:
  9740 ;;		_nrf24l01ISR
  9741 ;; This function is called by:
  9742 ;;		Interrupt level 1
  9743 ;; This function uses a non-reentrant model
  9744 ;;
  9745                           
  9746  0004                     _ISR:	
  9747                           
  9748                           ;incstack = 0
  9749  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9750                           
  9751                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9752  0005  3180               	pagesel	$
  9753                           
  9754                           ;main.c: 15: if (PIR0bits.INTF){
  9755  0006  0020               	movlb	0	; select bank0
  9756  0007  1C10               	btfss	16,0	;volatile
  9757  0008  280D               	goto	i1l153
  9758                           
  9759                           ;main.c: 16: nrf24l01ISR();
  9760  0009  3189  2169         	fcall	_nrf24l01ISR
  9761                           
  9762                           ;main.c: 17: PIR0bits.INTF = 0;
  9763  000B  0020               	movlb	0	; select bank0
  9764  000C  1010               	bcf	16,0	;volatile
  9765  000D                     i1l153:	
  9766  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9767  000E  0009               	retfie
  9768  000F                     __end_of_ISR:	
  9769                           
  9770                           	psect	text42
  9771  0969                     __ptext42:	
  9772 ;; *************** function _nrf24l01ISR *****************
  9773 ;; Defined at:
  9774 ;;		line 235 in file "nrf24l01.c"
  9775 ;; Parameters:    Size  Location     Type
  9776 ;;		None
  9777 ;; Auto vars:     Size  Location     Type
  9778 ;;		None
  9779 ;; Return value:  Size  Location     Type
  9780 ;;                  1    wreg      void 
  9781 ;; Registers used:
  9782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9783 ;; Tracked objects:
  9784 ;;		On entry : 0/0
  9785 ;;		On exit  : 0/0
  9786 ;;		Unchanged: 0/0
  9787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9791 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;Total ram usage:        1 bytes
  9793 ;; Hardware stack levels used:    1
  9794 ;; Hardware stack levels required when called:    5
  9795 ;; This function calls:
  9796 ;;		i1_nrf24l01Send
  9797 ;;		i1_nrf24l01Service
  9798 ;;		i1_nrf24l01SetRXMode
  9799 ;; This function is called by:
  9800 ;;		_ISR
  9801 ;; This function uses a non-reentrant model
  9802 ;;
  9803                           
  9804                           
  9805                           ;psect for function _nrf24l01ISR
  9806  0969                     _nrf24l01ISR:	
  9807                           
  9808                           ;nrf24l01.c: 237: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  9809                           
  9810                           ;incstack = 0
  9811                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9812  0969  01F1               	clrf	i1nrf24l01Send@data
  9813  096A  3007               	movlw	7
  9814  096B  3195  2521  3189   	fcall	i1_nrf24l01Send
  9815  096E  00FC               	movwf	??_nrf24l01ISR
  9816  096F  087C               	movf	??_nrf24l01ISR,w
  9817  0970  0021               	movlb	1	; select bank1
  9818  0971  00E8               	movwf	(_status^(0+128)+1)	;volatile
  9819                           
  9820                           ;nrf24l01.c: 239: if (status.statusRegister.TX_DS){
  9821  0972  1EE8               	btfss	(_status^(0+128)+1),5	;volatile
  9822  0973  29A5               	goto	i1l274
  9823                           
  9824                           ;nrf24l01.c: 241: if (status.TX == statuses.TX.Sending){
  9825  0974  3036               	movlw	low ((_statuses+2)| (0+32768))
  9826  0975  0084               	movwf	4
  9827  0976  3098               	movlw	high ((_statuses+2)| (0+32768))
  9828  0977  0085               	movwf	5
  9829  0978  0800               	movf	0,w	;code access
  9830  0979  00FC               	movwf	??_nrf24l01ISR
  9831  097A  0867               	movf	_status^(0+128),w	;volatile
  9832  097B  390F               	andlw	15
  9833  097C  067C               	xorwf	??_nrf24l01ISR,w
  9834  097D  1D03               	skipz
  9835  097E  29A4               	goto	i1l275
  9836                           
  9837                           ;nrf24l01.c: 243: if (TXPacket.packetData.ACKRequest){
  9838  097F  0023               	movlb	3	; select bank3
  9839  0980  1D41               	btfss	_TXPacket^(0+384),2
  9840  0981  2997               	goto	i1l3731
  9841                           
  9842                           ;nrf24l01.c: 244: status.TX = statuses.TX.PendingACK;
  9843  0982  3037               	movlw	low ((_statuses+3)| (0+32768))
  9844  0983  0084               	movwf	4
  9845  0984  3098               	movlw	high ((_statuses+3)| (0+32768))
  9846  0985  0085               	movwf	5
  9847  0986  0800               	movf	0,w	;code access
  9848  0987  00FC               	movwf	??_nrf24l01ISR
  9849  0988  0021               	movlb	1	; select bank1
  9850  0989  0867               	movf	_status^(0+128),w	;volatile
  9851  098A  067C               	xorwf	??_nrf24l01ISR,w
  9852  098B  39F0               	andlw	-16
  9853  098C  067C               	xorwf	??_nrf24l01ISR,w
  9854  098D  00E7               	movwf	_status^(0+128)	;volatile
  9855                           
  9856                           ;nrf24l01.c: 245: status.retryCount = 0xFF;
  9857  098E  30FF               	movlw	255
  9858  098F  00FC               	movwf	??_nrf24l01ISR
  9859  0990  087C               	movf	??_nrf24l01ISR,w
  9860  0991  00EA               	movwf	(_status^(0+128)+3)	;volatile
  9861                           
  9862                           ;nrf24l01.c: 246: nrf24l01SetRXMode(1);
  9863  0992  3001               	movlw	1
  9864  0993  3196  266A  3189   	fcall	i1_nrf24l01SetRXMode
  9865                           
  9866                           ;nrf24l01.c: 247: }else{
  9867  0996  29A5               	goto	i1l274
  9868  0997                     i1l3731:	
  9869                           
  9870                           ;nrf24l01.c: 248: status.TX = statuses.TX.Idle;
  9871  0997  3034               	movlw	low (_statuses| (0+32768))
  9872  0998  0084               	movwf	4
  9873  0999  3098               	movlw	high (_statuses| (0+32768))
  9874  099A  0085               	movwf	5
  9875  099B  0800               	movf	0,w	;code access
  9876  099C  00FC               	movwf	??_nrf24l01ISR
  9877  099D  0021               	movlb	1	; select bank1
  9878  099E  0867               	movf	_status^(0+128),w	;volatile
  9879  099F  067C               	xorwf	??_nrf24l01ISR,w
  9880  09A0  39F0               	andlw	-16
  9881  09A1  067C               	xorwf	??_nrf24l01ISR,w
  9882  09A2  00E7               	movwf	_status^(0+128)	;volatile
  9883                           
  9884                           ;nrf24l01.c: 249: };nrf24l01.c: 250: }
  9885  09A3  29A5               	goto	i1l274
  9886  09A4                     i1l275:	
  9887                           
  9888                           ;nrf24l01.c: 252: else{;nrf24l01.c: 253: status.statusRegister.TX_DS = 0;
  9889  09A4  12E8               	bcf	(_status^(0+128)+1),5	;volatile
  9890  09A5                     i1l274:	
  9891                           
  9892                           ;nrf24l01.c: 254: };nrf24l01.c: 255: };nrf24l01.c: 258: if (status.statusRegister.RX_DR)
      +                          {
  9893  09A5  0021               	movlb	1	; select bank1
  9894  09A6  1F68               	btfss	(_status^(0+128)+1),6	;volatile
  9895  09A7  29C1               	goto	i1l3737
  9896                           
  9897                           ;nrf24l01.c: 260: if (status.RX == statuses.RX.Idle){
  9898  09A8  3038               	movlw	low ((_statuses+4)| (0+32768))
  9899  09A9  0084               	movwf	4
  9900  09AA  3098               	movlw	high ((_statuses+4)| (0+32768))
  9901  09AB  0085               	movwf	5
  9902  09AC  0800               	movf	0,w	;code access
  9903  09AD  00FC               	movwf	??_nrf24l01ISR
  9904  09AE  0E67               	swapf	_status^(0+128),w	;volatile
  9905  09AF  390F               	andlw	15
  9906  09B0  067C               	xorwf	??_nrf24l01ISR,w
  9907  09B1  1D03               	skipz
  9908  09B2  29C0               	goto	i1l280
  9909                           
  9910                           ;nrf24l01.c: 261: status.RX = statuses.RX.Pending;
  9911  09B3  3039               	movlw	low ((_statuses+5)| (0+32768))
  9912  09B4  0084               	movwf	4
  9913  09B5  3098               	movlw	high ((_statuses+5)| (0+32768))
  9914  09B6  0085               	movwf	5
  9915  09B7  0800               	movf	0,w	;code access
  9916  09B8  00FC               	movwf	??_nrf24l01ISR
  9917  09B9  0EFC               	swapf	??_nrf24l01ISR,f
  9918  09BA  0867               	movf	_status^(0+128),w	;volatile
  9919  09BB  067C               	xorwf	??_nrf24l01ISR,w
  9920  09BC  390F               	andlw	-241
  9921  09BD  067C               	xorwf	??_nrf24l01ISR,w
  9922  09BE  00E7               	movwf	_status^(0+128)	;volatile
  9923                           
  9924                           ;nrf24l01.c: 262: }
  9925  09BF  29C1               	goto	i1l3737
  9926  09C0                     i1l280:	
  9927                           
  9928                           ;nrf24l01.c: 264: else{;nrf24l01.c: 265: status.statusRegister.RX_DR = 0;
  9929  09C0  1368               	bcf	(_status^(0+128)+1),6	;volatile
  9930  09C1                     i1l3737:	
  9931                           
  9932                           ;nrf24l01.c: 266: };nrf24l01.c: 267: };nrf24l01.c: 270: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.statusRegister.byte);
  9933  09C1  0868               	movf	(_status^(0+128)+1),w	;volatile
  9934  09C2  00FC               	movwf	??_nrf24l01ISR
  9935  09C3  087C               	movf	??_nrf24l01ISR,w
  9936  09C4  00F1               	movwf	i1nrf24l01Send@data
  9937  09C5  3027               	movlw	39
  9938  09C6  3195  2521  3189   	fcall	i1_nrf24l01Send
  9939                           
  9940                           ;nrf24l01.c: 272: nrf24l01Service();
  9941  09C9  3185  25A0         	fcall	i1_nrf24l01Service
  9942  09CB  0008               	return
  9943  09CC                     __end_of_nrf24l01ISR:	
  9944                           
  9945                           	psect	text43
  9946  05A0                     __ptext43:	
  9947 ;; *************** function i1_nrf24l01Service *****************
  9948 ;; Defined at:
  9949 ;;		line 276 in file "nrf24l01.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;		None
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;  nrf24l01Serv    1   11[COMMON] unsigned char 
  9954 ;;  nrf24l01Serv    1   10[COMMON] unsigned char 
  9955 ;; Return value:  Size  Location     Type
  9956 ;;                  1    wreg      void 
  9957 ;; Registers used:
  9958 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9959 ;; Tracked objects:
  9960 ;;		On entry : 0/0
  9961 ;;		On exit  : 0/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;Total ram usage:        4 bytes
  9969 ;; Hardware stack levels used:    1
  9970 ;; Hardware stack levels required when called:    4
  9971 ;; This function calls:
  9972 ;;		_nrf24l01CEHigh
  9973 ;;		_nrf24l01CELow
  9974 ;;		_nrf24l01SPIEnd
  9975 ;;		_nrf24l01SPISend
  9976 ;;		_nrf24l01SPIStart
  9977 ;;		i1_memset
  9978 ;;		i1_nrf24l01Send
  9979 ;;		i1_nrf24l01SetRXMode
  9980 ;;		i1_strcmp
  9981 ;;		i1_strlen
  9982 ;; This function is called by:
  9983 ;;		_nrf24l01ISR
  9984 ;; This function uses a non-reentrant model
  9985 ;;
  9986                           
  9987                           
  9988                           ;psect for function i1_nrf24l01Service
  9989  05A0                     i1_nrf24l01Service:	
  9990                           
  9991                           ;nrf24l01.c: 278: unsigned char i;;nrf24l01.c: 280: if (status.TX == statuses.TX.Ready){
  9992                           
  9993                           ;incstack = 0
  9994                           ; Regs used in i1_nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9995  05A0  3035               	movlw	low ((_statuses+1)| (0+32768))
  9996  05A1  0084               	movwf	4
  9997  05A2  3098               	movlw	high ((_statuses+1)| (0+32768))
  9998  05A3  0085               	movwf	5
  9999  05A4  0800               	movf	0,w	;code access
 10000  05A5  00F8               	movwf	??i1_nrf24l01Service
 10001  05A6  0021               	movlb	1	; select bank1
 10002  05A7  0867               	movf	_status^(0+128),w	;volatile
 10003  05A8  390F               	andlw	15
 10004  05A9  0678               	xorwf	??i1_nrf24l01Service,w
 10005  05AA  1D03               	skipz
 10006  05AB  2DF9               	goto	i1l3661
 10007                           
 10008                           ;nrf24l01.c: 283: nrf24l01SetRXMode(0);
 10009  05AC  3000               	movlw	0
 10010  05AD  3196  266A  3185   	fcall	i1_nrf24l01SetRXMode
 10011                           
 10012                           ;nrf24l01.c: 286: nrf24l01SPIStart();
 10013  05B0  3194  2485  3185   	fcall	_nrf24l01SPIStart
 10014                           
 10015                           ;nrf24l01.c: 289: nrf24l01SPISend((unsigned) 0b10110000);
 10016  05B3  30B0               	movlw	176
 10017  05B4  3194  2496  3185   	fcall	_nrf24l01SPISend
 10018                           
 10019                           ;nrf24l01.c: 291: nrf24l01SPISend(TXPacket.packetData.byte);
 10020  05B7  0023               	movlb	3	; select bank3
 10021  05B8  0841               	movf	_TXPacket^(0+384),w
 10022  05B9  3194  2496  3185   	fcall	_nrf24l01SPISend
 10023                           
 10024                           ;nrf24l01.c: 294: for (i = 0; (i < strlen(TXPacket.Message)) && (i < 32); i++) {
 10025  05BC  01FB               	clrf	i1nrf24l01Service@i
 10026  05BD  2DCB               	goto	i1l3647
 10027  05BE                     i1l3643:	
 10028                           
 10029                           ;nrf24l01.c: 295: nrf24l01SPISend(TXPacket.Message[i]);
 10030  05BE  087B               	movf	i1nrf24l01Service@i,w
 10031  05BF  3EC2               	addlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
 10032  05C0  0086               	movwf	6
 10033  05C1  3001               	movlw	1	; select bank3/4
 10034  05C2  0087               	movwf	7
 10035  05C3  0801               	movf	1,w
 10036  05C4  3194  2496  3185   	fcall	_nrf24l01SPISend
 10037  05C7  3001               	movlw	1
 10038  05C8  00F8               	movwf	??i1_nrf24l01Service
 10039  05C9  0878               	movf	??i1_nrf24l01Service,w
 10040  05CA  07FB               	addwf	i1nrf24l01Service@i,f
 10041  05CB                     i1l3647:	
 10042  05CB  30C2               	movlw	low (_TXPacket+1)
 10043  05CC  00F0               	movwf	i1strlen@s
 10044  05CD  3001               	movlw	high (_TXPacket+1)
 10045  05CE  00F1               	movwf	i1strlen@s+1
 10046  05CF  3195  258E  3185   	fcall	i1_strlen
 10047  05D2  087B               	movf	i1nrf24l01Service@i,w
 10048  05D3  00F8               	movwf	??i1_nrf24l01Service
 10049  05D4  01F9               	clrf	??i1_nrf24l01Service+1
 10050  05D5  0871               	movf	?i1_strlen+1,w
 10051  05D6  0279               	subwf	??i1_nrf24l01Service+1,w
 10052  05D7  1D03               	skipz
 10053  05D8  2DDB               	goto	u382_25
 10054  05D9  0870               	movf	?i1_strlen,w
 10055  05DA  0278               	subwf	??i1_nrf24l01Service,w
 10056  05DB                     u382_25:	
 10057  05DB  1803               	skipnc
 10058  05DC  2DE1               	goto	i1l3651
 10059  05DD  3020               	movlw	32
 10060  05DE  027B               	subwf	i1nrf24l01Service@i,w
 10061  05DF  1C03               	skipc
 10062  05E0  2DBE               	goto	i1l3643
 10063  05E1                     i1l3651:	
 10064                           
 10065                           ;nrf24l01.c: 296: };nrf24l01.c: 299: nrf24l01SPIEnd();
 10066  05E1  3194  2476  3185   	fcall	_nrf24l01SPIEnd
 10067                           
 10068                           ;nrf24l01.c: 302: status.TX = statuses.TX.Sending;
 10069  05E4  3036               	movlw	low ((_statuses+2)| (0+32768))
 10070  05E5  0084               	movwf	4
 10071  05E6  3098               	movlw	high ((_statuses+2)| (0+32768))
 10072  05E7  0085               	movwf	5
 10073  05E8  0800               	movf	0,w	;code access
 10074  05E9  00F8               	movwf	??i1_nrf24l01Service
 10075  05EA  0021               	movlb	1	; select bank1
 10076  05EB  0867               	movf	_status^(0+128),w	;volatile
 10077  05EC  0678               	xorwf	??i1_nrf24l01Service,w
 10078  05ED  39F0               	andlw	-16
 10079  05EE  0678               	xorwf	??i1_nrf24l01Service,w
 10080  05EF  00E7               	movwf	_status^(0+128)	;volatile
 10081                           
 10082                           ;nrf24l01.c: 305: nrf24l01CEHigh();
 10083  05F0  3194  246A  3185   	fcall	_nrf24l01CEHigh
 10084                           
 10085                           ;nrf24l01.c: 306: _delay((unsigned long)((12)*(32000000/4000000.0)));
 10086  05F3  3020               	movlw	32
 10087  05F4                     u408_27:	
 10088  05F4  0B89               	decfsz	9,f
 10089  05F5  2DF4               	goto	u408_27
 10090                           
 10091                           ;nrf24l01.c: 307: nrf24l01CELow();
 10092  05F6  3194  246D  3185   	fcall	_nrf24l01CELow
 10093  05F9                     i1l3661:	
 10094                           
 10095                           ;nrf24l01.c: 308: };nrf24l01.c: 310: if (status.RX == statuses.RX.Pending){
 10096  05F9  3039               	movlw	low ((_statuses+5)| (0+32768))
 10097  05FA  0084               	movwf	4
 10098  05FB  3098               	movlw	high ((_statuses+5)| (0+32768))
 10099  05FC  0085               	movwf	5
 10100  05FD  0800               	movf	0,w	;code access
 10101  05FE  00F8               	movwf	??i1_nrf24l01Service
 10102  05FF  0021               	movlb	1	; select bank1
 10103  0600  0E67               	swapf	_status^(0+128),w	;volatile
 10104  0601  390F               	andlw	15
 10105  0602  0678               	xorwf	??i1_nrf24l01Service,w
 10106  0603  1D03               	skipz
 10107  0604  2E75               	goto	i1l3699
 10108                           
 10109                           ;nrf24l01.c: 313: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
 10110  0605  30A1               	movlw	low (_RXPacket+1)
 10111  0606  00F0               	movwf	i1memset@p1
 10112  0607  3001               	movlw	high (_RXPacket+1)
 10113  0608  00F1               	movwf	i1memset@p1+1
 10114  0609  3000               	movlw	0
 10115  060A  00F2               	movwf	i1memset@c
 10116  060B  00F3               	movwf	i1memset@c+1
 10117  060C  3020               	movlw	32
 10118  060D  00F4               	movwf	i1memset@n
 10119  060E  3000               	movlw	0
 10120  060F  00F5               	movwf	i1memset@n+1
 10121  0610  3194  24F0  3185   	fcall	i1_memset
 10122                           
 10123                           ;nrf24l01.c: 314: RXPacket.packetData.byte = 0x00;
 10124  0613  0023               	movlb	3	; select bank3
 10125  0614  01A0               	clrf	_RXPacket^(0+384)
 10126                           
 10127                           ;nrf24l01.c: 317: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
 10128  0615  01F1               	clrf	i1nrf24l01Send@data
 10129  0616  3060               	movlw	96
 10130  0617  3195  2521  3185   	fcall	i1_nrf24l01Send
 10131  061A  00F8               	movwf	??i1_nrf24l01Service
 10132  061B  0878               	movf	??i1_nrf24l01Service,w
 10133  061C  00FA               	movwf	i1nrf24l01Service@width
 10134                           
 10135                           ;nrf24l01.c: 320: nrf24l01CELow();
 10136  061D  3194  246D  3185   	fcall	_nrf24l01CELow
 10137                           
 10138                           ;nrf24l01.c: 323: nrf24l01SPIStart();
 10139  0620  3194  2485  3185   	fcall	_nrf24l01SPIStart
 10140                           
 10141                           ;nrf24l01.c: 326: nrf24l01SPISend((unsigned) 0b01100001);
 10142  0623  3061               	movlw	97
 10143  0624  3194  2496  3185   	fcall	_nrf24l01SPISend
 10144                           
 10145                           ;nrf24l01.c: 329: RXPacket.packetData.byte = nrf24l01SPISend(0);
 10146  0627  3000               	movlw	0
 10147  0628  3194  2496  3185   	fcall	_nrf24l01SPISend
 10148  062B  00F8               	movwf	??i1_nrf24l01Service
 10149  062C  0878               	movf	??i1_nrf24l01Service,w
 10150  062D  0023               	movlb	3	; select bank3
 10151  062E  00A0               	movwf	_RXPacket^(0+384)
 10152                           
 10153                           ;nrf24l01.c: 330: width--;
 10154  062F  3001               	movlw	1
 10155  0630  02FA               	subwf	i1nrf24l01Service@width,f
 10156                           
 10157                           ;nrf24l01.c: 332: for (i = 0; (i < width) && (i < 32); i++){
 10158  0631  01FB               	clrf	i1nrf24l01Service@i
 10159  0632  2E43               	goto	i1l3685
 10160  0633                     i1l3681:	
 10161                           
 10162                           ;nrf24l01.c: 334: RXPacket.Message[i] = nrf24l01SPISend(0);
 10163  0633  3000               	movlw	0
 10164  0634  3194  2496  3185   	fcall	_nrf24l01SPISend
 10165  0637  00F8               	movwf	??i1_nrf24l01Service
 10166  0638  087B               	movf	i1nrf24l01Service@i,w
 10167  0639  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10168  063A  0086               	movwf	6
 10169  063B  3001               	movlw	1	; select bank3/4
 10170  063C  0087               	movwf	7
 10171  063D  0878               	movf	??i1_nrf24l01Service,w
 10172  063E  0081               	movwf	1
 10173  063F  3001               	movlw	1
 10174  0640  00F8               	movwf	??i1_nrf24l01Service
 10175  0641  0878               	movf	??i1_nrf24l01Service,w
 10176  0642  07FB               	addwf	i1nrf24l01Service@i,f
 10177  0643                     i1l3685:	
 10178  0643  087A               	movf	i1nrf24l01Service@width,w
 10179  0644  027B               	subwf	i1nrf24l01Service@i,w
 10180  0645  1803               	skipnc
 10181  0646  2E4B               	goto	i1l3689
 10182  0647  3020               	movlw	32
 10183  0648  027B               	subwf	i1nrf24l01Service@i,w
 10184  0649  1C03               	skipc
 10185  064A  2E33               	goto	i1l3681
 10186  064B                     i1l3689:	
 10187                           
 10188                           ;nrf24l01.c: 335: };nrf24l01.c: 338: nrf24l01SPIEnd();
 10189  064B  3194  2476  3185   	fcall	_nrf24l01SPIEnd
 10190                           
 10191                           ;nrf24l01.c: 341: nrf24l01CEHigh();
 10192  064E  3194  246A  3185   	fcall	_nrf24l01CEHigh
 10193                           
 10194                           ;nrf24l01.c: 344: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
 10195  0651  0021               	movlb	1	; select bank1
 10196  0652  0C68               	rrf	(_status^(0+128)+1),w	;volatile
 10197  0653  3907               	andlw	7
 10198  0654  00F8               	movwf	??i1_nrf24l01Service
 10199  0655  0EF8               	swapf	??i1_nrf24l01Service,f
 10200  0656  0023               	movlb	3	; select bank3
 10201  0657  0820               	movf	_RXPacket^(0+384),w
 10202  0658  0678               	xorwf	??i1_nrf24l01Service,w
 10203  0659  398F               	andlw	-113
 10204  065A  0678               	xorwf	??i1_nrf24l01Service,w
 10205  065B  00A0               	movwf	_RXPacket^(0+384)
 10206                           
 10207                           ;nrf24l01.c: 347: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
 10208  065C  01F1               	clrf	i1nrf24l01Send@data
 10209  065D  3009               	movlw	9
 10210  065E  3195  2521  3185   	fcall	i1_nrf24l01Send
 10211  0661  00F8               	movwf	??i1_nrf24l01Service
 10212  0662  0023               	movlb	3	; select bank3
 10213  0663  0820               	movf	_RXPacket^(0+384),w
 10214  0664  0678               	xorwf	??i1_nrf24l01Service,w
 10215  0665  39FE               	andlw	-2
 10216  0666  0678               	xorwf	??i1_nrf24l01Service,w
 10217  0667  00A0               	movwf	_RXPacket^(0+384)
 10218                           
 10219                           ;nrf24l01.c: 349: status.RX = statuses.RX.Ready;
 10220  0668  303A               	movlw	low ((_statuses+6)| (0+32768))
 10221  0669  0084               	movwf	4
 10222  066A  3098               	movlw	high ((_statuses+6)| (0+32768))
 10223  066B  0085               	movwf	5
 10224  066C  0800               	movf	0,w	;code access
 10225  066D  00F8               	movwf	??i1_nrf24l01Service
 10226  066E  0EF8               	swapf	??i1_nrf24l01Service,f
 10227  066F  0021               	movlb	1	; select bank1
 10228  0670  0867               	movf	_status^(0+128),w	;volatile
 10229  0671  0678               	xorwf	??i1_nrf24l01Service,w
 10230  0672  390F               	andlw	-241
 10231  0673  0678               	xorwf	??i1_nrf24l01Service,w
 10232  0674  00E7               	movwf	_status^(0+128)	;volatile
 10233  0675                     i1l3699:	
 10234                           
 10235                           ;nrf24l01.c: 350: };nrf24l01.c: 352: if (status.RX == statuses.RX.Ready){
 10236  0675  303A               	movlw	low ((_statuses+6)| (0+32768))
 10237  0676  0084               	movwf	4
 10238  0677  3098               	movlw	high ((_statuses+6)| (0+32768))
 10239  0678  0085               	movwf	5
 10240  0679  0800               	movf	0,w	;code access
 10241  067A  00F8               	movwf	??i1_nrf24l01Service
 10242  067B  0E67               	swapf	_status^(0+128),w	;volatile
 10243  067C  390F               	andlw	15
 10244  067D  0678               	xorwf	??i1_nrf24l01Service,w
 10245  067E  1D03               	skipz
 10246  067F  2EB3               	goto	i1l297
 10247                           
 10248                           ;nrf24l01.c: 355: if (RXPacket.packetData.IsACK){
 10249  0680  0023               	movlb	3	; select bank3
 10250  0681  1DA0               	btfss	_RXPacket^(0+384),3
 10251  0682  2EB3               	goto	i1l297
 10252                           
 10253                           ;nrf24l01.c: 357: if (status.TX == statuses.TX.PendingACK){
 10254  0683  3037               	movlw	low ((_statuses+3)| (0+32768))
 10255  0684  0084               	movwf	4
 10256  0685  3098               	movlw	high ((_statuses+3)| (0+32768))
 10257  0686  0085               	movwf	5
 10258  0687  0800               	movf	0,w	;code access
 10259  0688  00F8               	movwf	??i1_nrf24l01Service
 10260  0689  0021               	movlb	1	; select bank1
 10261  068A  0867               	movf	_status^(0+128),w	;volatile
 10262  068B  390F               	andlw	15
 10263  068C  0678               	xorwf	??i1_nrf24l01Service,w
 10264  068D  1D03               	skipz
 10265  068E  2EB3               	goto	i1l297
 10266                           
 10267                           ;nrf24l01.c: 359: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
 10268  068F  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
 10269  0690  00F8               	movwf	??i1_nrf24l01Service
 10270  0691  0878               	movf	??i1_nrf24l01Service,w
 10271  0692  00F0               	movwf	i1strcmp@s2
 10272  0693  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10273  0694  3196  26B8  3185   	fcall	i1_strcmp
 10274  0697  0870               	movf	?i1_strcmp,w
 10275  0698  0471               	iorwf	?i1_strcmp+1,w
 10276  0699  1D03               	btfss	3,2
 10277  069A  2EB3               	goto	i1l297
 10278                           
 10279                           ;nrf24l01.c: 360: status.TX = statuses.TX.Idle;
 10280  069B  3034               	movlw	low (_statuses| (0+32768))
 10281  069C  0084               	movwf	4
 10282  069D  3098               	movlw	high (_statuses| (0+32768))
 10283  069E  0085               	movwf	5
 10284  069F  0800               	movf	0,w	;code access
 10285  06A0  00F8               	movwf	??i1_nrf24l01Service
 10286  06A1  0021               	movlb	1	; select bank1
 10287  06A2  0867               	movf	_status^(0+128),w	;volatile
 10288  06A3  0678               	xorwf	??i1_nrf24l01Service,w
 10289  06A4  39F0               	andlw	-16
 10290  06A5  0678               	xorwf	??i1_nrf24l01Service,w
 10291  06A6  00E7               	movwf	_status^(0+128)	;volatile
 10292                           
 10293                           ;nrf24l01.c: 361: status.RX = statuses.RX.Idle;
 10294  06A7  3038               	movlw	low ((_statuses+4)| (0+32768))
 10295  06A8  0084               	movwf	4
 10296  06A9  3098               	movlw	high ((_statuses+4)| (0+32768))
 10297  06AA  0085               	movwf	5
 10298  06AB  0800               	movf	0,w	;code access
 10299  06AC  00F8               	movwf	??i1_nrf24l01Service
 10300  06AD  0EF8               	swapf	??i1_nrf24l01Service,f
 10301  06AE  0867               	movf	_status^(0+128),w	;volatile
 10302  06AF  0678               	xorwf	??i1_nrf24l01Service,w
 10303  06B0  390F               	andlw	-241
 10304  06B1  0678               	xorwf	??i1_nrf24l01Service,w
 10305  06B2  00E7               	movwf	_status^(0+128)	;volatile
 10306  06B3                     i1l297:	
 10307                           
 10308                           ;nrf24l01.c: 362: };nrf24l01.c: 363: };nrf24l01.c: 364: };nrf24l01.c: 367: };nrf24l01.c:
      +                           369: if (status.RX == statuses.RX.Ready){
 10309  06B3  303A               	movlw	low ((_statuses+6)| (0+32768))
 10310  06B4  0084               	movwf	4
 10311  06B5  3098               	movlw	high ((_statuses+6)| (0+32768))
 10312  06B6  0085               	movwf	5
 10313  06B7  0800               	movf	0,w	;code access
 10314  06B8  00F8               	movwf	??i1_nrf24l01Service
 10315  06B9  0021               	movlb	1	; select bank1
 10316  06BA  0E67               	swapf	_status^(0+128),w	;volatile
 10317  06BB  390F               	andlw	15
 10318  06BC  0678               	xorwf	??i1_nrf24l01Service,w
 10319  06BD  1D03               	skipz
 10320  06BE  2EC8               	goto	i1l3711
 10321                           
 10322                           ;nrf24l01.c: 370: counter++;
 10323  06BF  3001               	movlw	1
 10324  06C0  0022               	movlb	2	; select bank2
 10325  06C1  07D1               	addwf	_counter^(0+256),f
 10326  06C2  3000               	movlw	0
 10327  06C3  3DD2               	addwfc	(_counter+1)^(0+256),f
 10328  06C4  3000               	movlw	0
 10329  06C5  3DD3               	addwfc	(_counter+2)^(0+256),f
 10330  06C6  3000               	movlw	0
 10331  06C7  3DD4               	addwfc	(_counter+3)^(0+256),f
 10332  06C8                     i1l3711:	
 10333                           
 10334                           ;nrf24l01.c: 371: };nrf24l01.c: 373: if (status.TX == statuses.TX.PendingACK){
 10335  06C8  3037               	movlw	low ((_statuses+3)| (0+32768))
 10336  06C9  0084               	movwf	4
 10337  06CA  3098               	movlw	high ((_statuses+3)| (0+32768))
 10338  06CB  0085               	movwf	5
 10339  06CC  0800               	movf	0,w	;code access
 10340  06CD  00F8               	movwf	??i1_nrf24l01Service
 10341  06CE  0021               	movlb	1	; select bank1
 10342  06CF  0867               	movf	_status^(0+128),w	;volatile
 10343  06D0  390F               	andlw	15
 10344  06D1  0678               	xorwf	??i1_nrf24l01Service,w
 10345  06D2  1D03               	skipz
 10346  06D3  0008               	return
 10347                           
 10348                           ;nrf24l01.c: 374: if (!status.retryCount--){
 10349  06D4  3001               	movlw	1
 10350  06D5  02EA               	subwf	(_status^(0+128)+3),f	;volatile
 10351  06D6  0A6A               	incf	(_status^(0+128)+3),w	;volatile
 10352  06D7  1D03               	btfss	3,2
 10353  06D8  0008               	return
 10354                           
 10355                           ;nrf24l01.c: 375: status.TX = statuses.TX.Ready;
 10356  06D9  3035               	movlw	low ((_statuses+1)| (0+32768))
 10357  06DA  0084               	movwf	4
 10358  06DB  3098               	movlw	high ((_statuses+1)| (0+32768))
 10359  06DC  0085               	movwf	5
 10360  06DD  0800               	movf	0,w	;code access
 10361  06DE  00F8               	movwf	??i1_nrf24l01Service
 10362  06DF  0867               	movf	_status^(0+128),w	;volatile
 10363  06E0  0678               	xorwf	??i1_nrf24l01Service,w
 10364  06E1  39F0               	andlw	-16
 10365  06E2  0678               	xorwf	??i1_nrf24l01Service,w
 10366  06E3  00E7               	movwf	_status^(0+128)	;volatile
 10367  06E4  0008               	return
 10368  06E5                     __end_ofi1_nrf24l01Service:	
 10369                           
 10370                           	psect	text44
 10371  158E                     __ptext44:	
 10372 ;; *************** function i1_strlen *****************
 10373 ;; Defined at:
 10374 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
 10375 ;; Parameters:    Size  Location     Type
 10376 ;;  s               2    0[COMMON] PTR const unsigned char 
 10377 ;;		 -> TXPacket.Message(32), TXPacket(33), romDataMap(28), 
 10378 ;; Auto vars:     Size  Location     Type
 10379 ;;  strlen          2    4[COMMON] PTR const unsigned char 
 10380 ;;		 -> TXPacket.Message(32), TXPacket(33), romDataMap(28), 
 10381 ;; Return value:  Size  Location     Type
 10382 ;;                  2    0[COMMON] unsigned int 
 10383 ;; Registers used:
 10384 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10385 ;; Tracked objects:
 10386 ;;		On entry : 0/0
 10387 ;;		On exit  : 0/0
 10388 ;;		Unchanged: 0/0
 10389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10390 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;Total ram usage:        6 bytes
 10395 ;; Hardware stack levels used:    1
 10396 ;; This function calls:
 10397 ;;		Nothing
 10398 ;; This function is called by:
 10399 ;;		i1_nrf24l01Service
 10400 ;; This function uses a non-reentrant model
 10401 ;;
 10402                           
 10403                           
 10404                           ;psect for function i1_strlen
 10405  158E                     i1_strlen:	
 10406                           
 10407                           ;incstack = 0
 10408                           ; Regs used in i1_strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 10409  158E  0871               	movf	i1strlen@s+1,w
 10410  158F  00F5               	movwf	i1strlen@cp+1
 10411  1590  0870               	movf	i1strlen@s,w
 10412  1591  00F4               	movwf	i1strlen@cp
 10413  1592                     i1l3611:	
 10414  1592  0874               	movf	i1strlen@cp,w
 10415  1593  0086               	movwf	6
 10416  1594  0875               	movf	i1strlen@cp+1,w
 10417  1595  0087               	movwf	7
 10418  1596  0801               	movf	1,w
 10419  1597  1903               	btfsc	3,2
 10420  1598  2D9E               	goto	i1l3613
 10421  1599  3001               	movlw	1
 10422  159A  07F4               	addwf	i1strlen@cp,f
 10423  159B  3000               	movlw	0
 10424  159C  3DF5               	addwfc	i1strlen@cp+1,f
 10425  159D  2D92               	goto	i1l3611
 10426  159E                     i1l3613:	
 10427  159E  0970               	comf	i1strlen@s,w
 10428  159F  00F2               	movwf	??i1_strlen
 10429  15A0  0971               	comf	i1strlen@s+1,w
 10430  15A1  00F3               	movwf	??i1_strlen+1
 10431  15A2  0AF2               	incf	??i1_strlen,f
 10432  15A3  1903               	skipnz
 10433  15A4  0AF3               	incf	??i1_strlen+1,f
 10434  15A5  0874               	movf	i1strlen@cp,w
 10435  15A6  0772               	addwf	??i1_strlen,w
 10436  15A7  00F0               	movwf	?i1_strlen
 10437  15A8  0875               	movf	i1strlen@cp+1,w
 10438  15A9  3D73               	addwfc	??i1_strlen+1,w
 10439  15AA  00F1               	movwf	?i1_strlen+1
 10440  15AB  0008               	return
 10441  15AC                     __end_ofi1_strlen:	
 10442                           
 10443                           	psect	text45
 10444  16B8                     __ptext45:	
 10445 ;; *************** function i1_strcmp *****************
 10446 ;; Defined at:
 10447 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;  s1              1    wreg     PTR const unsigned char 
 10450 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10451 ;;  s2              1    0[COMMON] PTR const unsigned char 
 10452 ;;		 -> TXPacket.Message(32), TXPacket(33), 
 10453 ;; Auto vars:     Size  Location     Type
 10454 ;;  s1              1    4[COMMON] PTR const unsigned char 
 10455 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10456 ;;  strcmp          1    3[COMMON] char 
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  2    0[COMMON] int 
 10459 ;; Registers used:
 10460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10466 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;Total ram usage:        5 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; This function calls:
 10473 ;;		Nothing
 10474 ;; This function is called by:
 10475 ;;		i1_nrf24l01Service
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           
 10480                           ;psect for function i1_strcmp
 10481  16B8                     i1_strcmp:	
 10482                           
 10483                           ;incstack = 0
 10484                           ; Regs used in i1_strcmp: [wreg-fsr1h+status,2+status,0]
 10485                           ;i1strcmp@s1 stored from wreg
 10486  16B8  00F4               	movwf	i1strcmp@s1
 10487  16B9  2EC2               	goto	i1l3007
 10488  16BA                     i1l3003:	
 10489  16BA  3001               	movlw	1
 10490  16BB  00F2               	movwf	??i1_strcmp
 10491  16BC  0872               	movf	??i1_strcmp,w
 10492  16BD  07F4               	addwf	i1strcmp@s1,f
 10493  16BE  3001               	movlw	1
 10494  16BF  00F2               	movwf	??i1_strcmp
 10495  16C0  0872               	movf	??i1_strcmp,w
 10496  16C1  07F0               	addwf	i1strcmp@s2,f
 10497  16C2                     i1l3007:	
 10498  16C2  0874               	movf	i1strcmp@s1,w
 10499  16C3  0086               	movwf	6
 10500  16C4  3001               	movlw	1	; select bank2/3
 10501  16C5  0087               	movwf	7
 10502  16C6  0870               	movf	i1strcmp@s2,w
 10503  16C7  0084               	movwf	4
 10504  16C8  3001               	movlw	1	; select bank2/3
 10505  16C9  0085               	movwf	5
 10506  16CA  0300               	decf	0,w
 10507  16CB  3AFF               	xorlw	255
 10508  16CC  0701               	addwf	1,w
 10509  16CD  00F2               	movwf	??i1_strcmp
 10510  16CE  0872               	movf	??i1_strcmp,w
 10511  16CF  00F3               	movwf	i1strcmp@r
 10512  16D0  0873               	movf	i1strcmp@r,w
 10513  16D1  1D03               	btfss	3,2
 10514  16D2  2EDA               	goto	i1l3011
 10515  16D3  0874               	movf	i1strcmp@s1,w
 10516  16D4  0086               	movwf	6
 10517  16D5  3001               	movlw	1	; select bank2/3
 10518  16D6  0087               	movwf	7
 10519  16D7  0801               	movf	1,w
 10520  16D8  1D03               	btfss	3,2
 10521  16D9  2EBA               	goto	i1l3003
 10522  16DA                     i1l3011:	
 10523  16DA  0873               	movf	i1strcmp@r,w
 10524  16DB  00F0               	movwf	?i1_strcmp
 10525  16DC  01F1               	clrf	?i1_strcmp+1
 10526  16DD  1BF0               	btfsc	?i1_strcmp,7
 10527  16DE  03F1               	decf	?i1_strcmp+1,f
 10528  16DF  0008               	return
 10529  16E0                     __end_ofi1_strcmp:	
 10530                           
 10531                           	psect	text46
 10532  166A                     __ptext46:	
 10533 ;; *************** function i1_nrf24l01SetRXMode *****************
 10534 ;; Defined at:
 10535 ;;		line 91 in file "nrf24l01.c"
 10536 ;; Parameters:    Size  Location     Type
 10537 ;;  rxMode          1    wreg     unsigned char 
 10538 ;; Auto vars:     Size  Location     Type
 10539 ;;  rxMode          1    5[COMMON] unsigned char 
 10540 ;; Return value:  Size  Location     Type
 10541 ;;                  1    wreg      void 
 10542 ;; Registers used:
 10543 ;;		wreg, status,2, status,0, pclath, cstack
 10544 ;; Tracked objects:
 10545 ;;		On entry : 0/0
 10546 ;;		On exit  : 0/0
 10547 ;;		Unchanged: 0/0
 10548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;Total ram usage:        2 bytes
 10554 ;; Hardware stack levels used:    1
 10555 ;; Hardware stack levels required when called:    3
 10556 ;; This function calls:
 10557 ;;		_nrf24l01CEHigh
 10558 ;;		_nrf24l01CELow
 10559 ;;		i1_nrf24l01Send
 10560 ;; This function is called by:
 10561 ;;		_nrf24l01ISR
 10562 ;;		i1_nrf24l01Service
 10563 ;; This function uses a non-reentrant model
 10564 ;;
 10565                           
 10566                           
 10567                           ;psect for function i1_nrf24l01SetRXMode
 10568  166A                     i1_nrf24l01SetRXMode:	
 10569                           
 10570                           ;incstack = 0
 10571                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 10572                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 10573  166A  00F5               	movwf	i1nrf24l01SetRXMode@rxMode
 10574                           
 10575                           ;nrf24l01.c: 111: if (status.configRegister.PRIM_RX != rxMode){
 10576  166B  0021               	movlb	1	; select bank1
 10577  166C  0869               	movf	(_status^(0+128)+2),w	;volatile
 10578  166D  3901               	andlw	1
 10579  166E  0675               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 10580  166F  1903               	skipnz
 10581  1670  0008               	return
 10582                           
 10583                           ;nrf24l01.c: 114: nrf24l01CELow();
 10584  1671  3194  246D  3196   	fcall	_nrf24l01CELow
 10585                           
 10586                           ;nrf24l01.c: 118: status.configRegister.PRIM_RX = rxMode;
 10587  1674  0C75               	rrf	i1nrf24l01SetRXMode@rxMode,w
 10588  1675  0021               	movlb	1	; select bank1
 10589  1676  1C03               	skipc
 10590  1677  1069               	bcf	(_status^(0+128)+2),0	;volatile
 10591  1678  1803               	skipnc
 10592  1679  1469               	bsf	(_status^(0+128)+2),0	;volatile
 10593                           
 10594                           ;nrf24l01.c: 119: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
 10595  167A  0869               	movf	(_status^(0+128)+2),w	;volatile
 10596  167B  00F4               	movwf	??i1_nrf24l01SetRXMode
 10597  167C  0874               	movf	??i1_nrf24l01SetRXMode,w
 10598  167D  00F1               	movwf	i1nrf24l01Send@data
 10599  167E  3020               	movlw	32
 10600  167F  3195  2521  3196   	fcall	i1_nrf24l01Send
 10601                           
 10602                           ;nrf24l01.c: 122: _delay((unsigned long)((120)*(32000000/4000000.0)));
 10603  1682  30C0               	movlw	192
 10604  1683                     u409_27:	
 10605  1683  3200               	nop2
 10606  1684  0B89               	decfsz	9,f
 10607  1685  2E83               	goto	u409_27
 10608                           
 10609                           ;nrf24l01.c: 125: if (rxMode){
 10610  1686  0875               	movf	i1nrf24l01SetRXMode@rxMode,w
 10611  1687  1903               	btfsc	3,2
 10612  1688  0008               	return
 10613                           
 10614                           ;nrf24l01.c: 126: nrf24l01CEHigh();
 10615  1689  3194  246A  3196   	fcall	_nrf24l01CEHigh
 10616                           
 10617                           ;nrf24l01.c: 127: _delay((unsigned long)((120)*(32000000/4000000.0)));
 10618  168C  30C0               	movlw	192
 10619  168D                     u410_27:	
 10620  168D  3200               	nop2
 10621  168E  0B89               	decfsz	9,f
 10622  168F  2E8D               	goto	u410_27
 10623  1690  0008               	return
 10624  1691                     __end_ofi1_nrf24l01SetRXMode:	
 10625                           
 10626                           	psect	text47
 10627  1521                     __ptext47:	
 10628 ;; *************** function i1_nrf24l01Send *****************
 10629 ;; Defined at:
 10630 ;;		line 46 in file "nrf24l01.c"
 10631 ;; Parameters:    Size  Location     Type
 10632 ;;  command         1    wreg     unsigned char 
 10633 ;;  data            1    1[COMMON] unsigned char 
 10634 ;; Auto vars:     Size  Location     Type
 10635 ;;  command         1    3[COMMON] unsigned char 
 10636 ;; Return value:  Size  Location     Type
 10637 ;;                  1    wreg      unsigned char 
 10638 ;; Registers used:
 10639 ;;		wreg, status,2, status,0, pclath, cstack
 10640 ;; Tracked objects:
 10641 ;;		On entry : 0/0
 10642 ;;		On exit  : 0/0
 10643 ;;		Unchanged: 0/0
 10644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10645 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10647 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10649 ;;Total ram usage:        3 bytes
 10650 ;; Hardware stack levels used:    1
 10651 ;; Hardware stack levels required when called:    2
 10652 ;; This function calls:
 10653 ;;		_enableInterrupts
 10654 ;;		_nrf24l01SPIEnd
 10655 ;;		_nrf24l01SPISend
 10656 ;;		_nrf24l01SPIStart
 10657 ;; This function is called by:
 10658 ;;		_nrf24l01ISR
 10659 ;;		i1_nrf24l01SetRXMode
 10660 ;;		i1_nrf24l01Service
 10661 ;; This function uses a non-reentrant model
 10662 ;;
 10663                           
 10664                           
 10665                           ;psect for function i1_nrf24l01Send
 10666  1521                     i1_nrf24l01Send:	
 10667                           
 10668                           ;incstack = 0
 10669                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 10670                           ;i1nrf24l01Send@command stored from wreg
 10671  1521  00F3               	movwf	i1nrf24l01Send@command
 10672                           
 10673                           ;nrf24l01.c: 49: enableInterrupts(0);
 10674  1522  3000               	movlw	0
 10675  1523  3194  247D  3195   	fcall	_enableInterrupts
 10676                           
 10677                           ;nrf24l01.c: 52: nrf24l01SPIStart();
 10678  1526  3194  2485  3195   	fcall	_nrf24l01SPIStart
 10679                           
 10680                           ;nrf24l01.c: 55: nrf24l01SPISend(command);
 10681  1529  0873               	movf	i1nrf24l01Send@command,w
 10682  152A  3194  2496  3195   	fcall	_nrf24l01SPISend
 10683                           
 10684                           ;nrf24l01.c: 58: data = nrf24l01SPISend(data);
 10685  152D  0871               	movf	i1nrf24l01Send@data,w
 10686  152E  3194  2496  3195   	fcall	_nrf24l01SPISend
 10687  1531  00F2               	movwf	??i1_nrf24l01Send
 10688  1532  0872               	movf	??i1_nrf24l01Send,w
 10689  1533  00F1               	movwf	i1nrf24l01Send@data
 10690                           
 10691                           ;nrf24l01.c: 61: nrf24l01SPIEnd();
 10692  1534  3194  2476  3195   	fcall	_nrf24l01SPIEnd
 10693                           
 10694                           ;nrf24l01.c: 64: enableInterrupts(1);
 10695  1537  3001               	movlw	1
 10696  1538  3194  247D         	fcall	_enableInterrupts
 10697                           
 10698                           ;nrf24l01.c: 66: return data;
 10699  153A  0871               	movf	i1nrf24l01Send@data,w
 10700  153B  0008               	return
 10701  153C                     __end_ofi1_nrf24l01Send:	
 10702                           
 10703                           	psect	text48
 10704  1485                     __ptext48:	
 10705 ;; *************** function _nrf24l01SPIStart *****************
 10706 ;; Defined at:
 10707 ;;		line 64 in file "interface.c"
 10708 ;; Parameters:    Size  Location     Type
 10709 ;;		None
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;		None
 10712 ;; Return value:  Size  Location     Type
 10713 ;;                  1    wreg      void 
 10714 ;; Registers used:
 10715 ;;		wreg, status,2, status,0, pclath, cstack
 10716 ;; Tracked objects:
 10717 ;;		On entry : 0/0
 10718 ;;		On exit  : 0/0
 10719 ;;		Unchanged: 0/0
 10720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;Total ram usage:        0 bytes
 10726 ;; Hardware stack levels used:    1
 10727 ;; Hardware stack levels required when called:    8
 10728 ;; This function calls:
 10729 ;;		_nrf24l01CSLow
 10730 ;; This function is called by:
 10731 ;;		_nrf24l01Send
 10732 ;;		_nrf24l01SetTXPipe
 10733 ;;		_nrf24l01Service
 10734 ;;		_nrf24l01InitRegisters
 10735 ;;		i1_nrf24l01Send
 10736 ;;		i1_nrf24l01Service
 10737 ;; This function uses a non-reentrant model
 10738 ;;
 10739                           
 10740                           
 10741                           ;psect for function _nrf24l01SPIStart
 10742  1485                     _nrf24l01SPIStart:	
 10743                           
 10744                           ;interface.c: 65: nrf24l01CSLow();
 10745                           
 10746                           ;incstack = 0
 10747 ;; hardware stack exceeded
 10748                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 10749  1485  3187  27FD  3194   	fcall	_nrf24l01CSLow
 10750                           
 10751                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10752  1488  301A               	movlw	26
 10753  1489                     u411_27:	
 10754  1489  0B89               	decfsz	9,f
 10755  148A  2C89               	goto	u411_27
 10756  148B  3200               	nop2
 10757  148C  0008               	return
 10758  148D                     __end_of_nrf24l01SPIStart:	
 10759                           
 10760                           	psect	text49
 10761  07FD                     __ptext49:	
 10762 ;; *************** function _nrf24l01CSLow *****************
 10763 ;; Defined at:
 10764 ;;		line 17 in file "interface.c"
 10765 ;; Parameters:    Size  Location     Type
 10766 ;;		None
 10767 ;; Auto vars:     Size  Location     Type
 10768 ;;		None
 10769 ;; Return value:  Size  Location     Type
 10770 ;;                  1    wreg      void 
 10771 ;; Registers used:
 10772 ;;		None
 10773 ;; Tracked objects:
 10774 ;;		On entry : 0/0
 10775 ;;		On exit  : 0/0
 10776 ;;		Unchanged: 0/0
 10777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10782 ;;Total ram usage:        0 bytes
 10783 ;; Hardware stack levels used:    1
 10784 ;; Hardware stack levels required when called:    7
 10785 ;; This function calls:
 10786 ;;		Nothing
 10787 ;; This function is called by:
 10788 ;;		_nrf24l01SPIStart
 10789 ;; This function uses a non-reentrant model
 10790 ;;
 10791                           
 10792                           
 10793                           ;psect for function _nrf24l01CSLow
 10794  07FD                     _nrf24l01CSLow:	
 10795                           
 10796                           ;interface.c: 18: PORTAbits.RA1 = 0;
 10797                           
 10798                           ;incstack = 0
 10799 ;; hardware stack exceeded
 10800                           ; Regs used in _nrf24l01CSLow: []
 10801  07FD  0020               	movlb	0	; select bank0
 10802  07FE  108C               	bcf	12,1	;volatile
 10803  07FF  0008               	return
 10804  0800                     __end_of_nrf24l01CSLow:	
 10805                           
 10806                           	psect	text50
 10807  1496                     __ptext50:	
 10808 ;; *************** function _nrf24l01SPISend *****************
 10809 ;; Defined at:
 10810 ;;		line 51 in file "interface.c"
 10811 ;; Parameters:    Size  Location     Type
 10812 ;;  data            1    wreg     unsigned char 
 10813 ;; Auto vars:     Size  Location     Type
 10814 ;;  data            1    0[COMMON] unsigned char 
 10815 ;; Return value:  Size  Location     Type
 10816 ;;                  1    wreg      unsigned char 
 10817 ;; Registers used:
 10818 ;;		wreg
 10819 ;; Tracked objects:
 10820 ;;		On entry : 0/0
 10821 ;;		On exit  : 0/0
 10822 ;;		Unchanged: 0/0
 10823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;Total ram usage:        0 bytes
 10829 ;; Hardware stack levels used:    1
 10830 ;; Hardware stack levels required when called:    7
 10831 ;; This function calls:
 10832 ;;		Nothing
 10833 ;; This function is called by:
 10834 ;;		_nrf24l01Send
 10835 ;;		_nrf24l01SetTXPipe
 10836 ;;		_nrf24l01Service
 10837 ;;		_nrf24l01InitRegisters
 10838 ;;		i1_nrf24l01Send
 10839 ;;		i1_nrf24l01Service
 10840 ;; This function uses a non-reentrant model
 10841 ;;
 10842                           
 10843                           
 10844                           ;psect for function _nrf24l01SPISend
 10845  1496                     _nrf24l01SPISend:	
 10846                           
 10847                           ;incstack = 0
 10848 ;; hardware stack exceeded
 10849                           ; Regs used in _nrf24l01SPISend: [wreg]
 10850                           ;nrf24l01SPISend@data stored from wreg
 10851  1496  00F0               	movwf	nrf24l01SPISend@data
 10852                           
 10853                           ;interface.c: 52: SSP1BUF = data;
 10854  1497  0870               	movf	nrf24l01SPISend@data,w
 10855  1498  0024               	movlb	4	; select bank4
 10856  1499  0091               	movwf	17	;volatile
 10857                           
 10858                           ;interface.c: 54: PORTCbits.RC4 = 1;
 10859  149A  0020               	movlb	0	; select bank0
 10860  149B  160E               	bsf	14,4	;volatile
 10861  149C                     i1l48:	
 10862                           ;interface.c: 56: while (!SSP1STATbits.BF){
 10863                           
 10864  149C  0024               	movlb	4	; select bank4
 10865  149D  1814               	btfsc	20,0	;volatile
 10866  149E  2CA1               	goto	i1l2281
 10867                           
 10868                           ;interface.c: 57: __nop();
 10869  149F  0000               	nop
 10870  14A0  2C9C               	goto	i1l48
 10871  14A1                     i1l2281:	
 10872                           
 10873                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 10874  14A1  0811               	movf	17,w	;volatile
 10875  14A2  0008               	return
 10876  14A3                     __end_of_nrf24l01SPISend:	
 10877                           
 10878                           	psect	text51
 10879  1476                     __ptext51:	
 10880 ;; *************** function _nrf24l01SPIEnd *****************
 10881 ;; Defined at:
 10882 ;;		line 70 in file "interface.c"
 10883 ;; Parameters:    Size  Location     Type
 10884 ;;		None
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;		None
 10887 ;; Return value:  Size  Location     Type
 10888 ;;                  1    wreg      void 
 10889 ;; Registers used:
 10890 ;;		wreg, status,2, status,0, pclath, cstack
 10891 ;; Tracked objects:
 10892 ;;		On entry : 0/0
 10893 ;;		On exit  : 0/0
 10894 ;;		Unchanged: 0/0
 10895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;Total ram usage:        0 bytes
 10901 ;; Hardware stack levels used:    1
 10902 ;; Hardware stack levels required when called:    8
 10903 ;; This function calls:
 10904 ;;		_nrf24l01CSHigh
 10905 ;; This function is called by:
 10906 ;;		_nrf24l01Send
 10907 ;;		_nrf24l01SetTXPipe
 10908 ;;		_nrf24l01Service
 10909 ;;		_nrf24l01InitRegisters
 10910 ;;		i1_nrf24l01Send
 10911 ;;		i1_nrf24l01Service
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           
 10916                           ;psect for function _nrf24l01SPIEnd
 10917  1476                     _nrf24l01SPIEnd:	
 10918                           
 10919                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10920                           
 10921                           ;incstack = 0
 10922 ;; hardware stack exceeded
 10923                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10924  1476  301A               	movlw	26
 10925  1477                     u412_27:	
 10926  1477  0B89               	decfsz	9,f
 10927  1478  2C77               	goto	u412_27
 10928  1479  3200               	nop2
 10929                           
 10930                           ;interface.c: 72: nrf24l01CSHigh();
 10931  147A  3188  2001         	fcall	_nrf24l01CSHigh
 10932  147C  0008               	return
 10933  147D                     __end_of_nrf24l01SPIEnd:	
 10934                           
 10935                           	psect	text52
 10936  0801                     __ptext52:	
 10937 ;; *************** function _nrf24l01CSHigh *****************
 10938 ;; Defined at:
 10939 ;;		line 22 in file "interface.c"
 10940 ;; Parameters:    Size  Location     Type
 10941 ;;		None
 10942 ;; Auto vars:     Size  Location     Type
 10943 ;;		None
 10944 ;; Return value:  Size  Location     Type
 10945 ;;                  1    wreg      void 
 10946 ;; Registers used:
 10947 ;;		None
 10948 ;; Tracked objects:
 10949 ;;		On entry : 0/0
 10950 ;;		On exit  : 0/0
 10951 ;;		Unchanged: 0/0
 10952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10957 ;;Total ram usage:        0 bytes
 10958 ;; Hardware stack levels used:    1
 10959 ;; Hardware stack levels required when called:    7
 10960 ;; This function calls:
 10961 ;;		Nothing
 10962 ;; This function is called by:
 10963 ;;		_nrf24l01SPIEnd
 10964 ;; This function uses a non-reentrant model
 10965 ;;
 10966                           
 10967                           
 10968                           ;psect for function _nrf24l01CSHigh
 10969  0801                     _nrf24l01CSHigh:	
 10970                           
 10971                           ;interface.c: 23: PORTAbits.RA1 = 1;
 10972                           
 10973                           ;incstack = 0
 10974 ;; hardware stack exceeded
 10975                           ; Regs used in _nrf24l01CSHigh: []
 10976  0801  0020               	movlb	0	; select bank0
 10977  0802  148C               	bsf	12,1	;volatile
 10978  0803  0008               	return
 10979  0804                     __end_of_nrf24l01CSHigh:	
 10980                           
 10981                           	psect	text53
 10982  147D                     __ptext53:	
 10983 ;; *************** function _enableInterrupts *****************
 10984 ;; Defined at:
 10985 ;;		line 76 in file "interface.c"
 10986 ;; Parameters:    Size  Location     Type
 10987 ;;  enable          1    wreg     unsigned char 
 10988 ;; Auto vars:     Size  Location     Type
 10989 ;;  enable          1    0[COMMON] unsigned char 
 10990 ;; Return value:  Size  Location     Type
 10991 ;;                  1    wreg      void 
 10992 ;; Registers used:
 10993 ;;		wreg, status,0
 10994 ;; Tracked objects:
 10995 ;;		On entry : 0/0
 10996 ;;		On exit  : 0/0
 10997 ;;		Unchanged: 0/0
 10998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;Total ram usage:        0 bytes
 11004 ;; Hardware stack levels used:    1
 11005 ;; Hardware stack levels required when called:    7
 11006 ;; This function calls:
 11007 ;;		Nothing
 11008 ;; This function is called by:
 11009 ;;		_nrf24l01Send
 11010 ;;		i1_nrf24l01Send
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014                           
 11015                           ;psect for function _enableInterrupts
 11016  147D                     _enableInterrupts:	
 11017                           
 11018                           ;incstack = 0
 11019 ;; hardware stack exceeded
 11020                           ; Regs used in _enableInterrupts: [wreg+status,0]
 11021                           ;enableInterrupts@enable stored from wreg
 11022  147D  00F0               	movwf	enableInterrupts@enable
 11023                           
 11024                           ;interface.c: 77: PIE0bits.INTE = enable;
 11025  147E  0C70               	rrf	enableInterrupts@enable,w
 11026  147F  0021               	movlb	1	; select bank1
 11027  1480  1C03               	skipc
 11028  1481  1010               	bcf	16,0	;volatile
 11029  1482  1803               	skipnc
 11030  1483  1410               	bsf	16,0	;volatile
 11031  1484  0008               	return
 11032  1485                     __end_of_enableInterrupts:	
 11033                           
 11034                           	psect	text54
 11035  146D                     __ptext54:	
 11036 ;; *************** function _nrf24l01CELow *****************
 11037 ;; Defined at:
 11038 ;;		line 7 in file "interface.c"
 11039 ;; Parameters:    Size  Location     Type
 11040 ;;		None
 11041 ;; Auto vars:     Size  Location     Type
 11042 ;;		None
 11043 ;; Return value:  Size  Location     Type
 11044 ;;                  1    wreg      void 
 11045 ;; Registers used:
 11046 ;;		None
 11047 ;; Tracked objects:
 11048 ;;		On entry : 0/0
 11049 ;;		On exit  : 0/0
 11050 ;;		Unchanged: 0/0
 11051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11056 ;;Total ram usage:        0 bytes
 11057 ;; Hardware stack levels used:    1
 11058 ;; Hardware stack levels required when called:    7
 11059 ;; This function calls:
 11060 ;;		Nothing
 11061 ;; This function is called by:
 11062 ;;		_nrf24l01SetRXMode
 11063 ;;		_nrf24l01Service
 11064 ;;		_nrf24l01Init
 11065 ;;		i1_nrf24l01SetRXMode
 11066 ;;		i1_nrf24l01Service
 11067 ;; This function uses a non-reentrant model
 11068 ;;
 11069                           
 11070                           
 11071                           ;psect for function _nrf24l01CELow
 11072  146D                     _nrf24l01CELow:	
 11073                           
 11074                           ;interface.c: 8: PORTAbits.RA0 = 0;
 11075                           
 11076                           ;incstack = 0
 11077 ;; hardware stack exceeded
 11078                           ; Regs used in _nrf24l01CELow: []
 11079  146D  0020               	movlb	0	; select bank0
 11080  146E  100C               	bcf	12,0	;volatile
 11081  146F  0008               	return
 11082  1470                     __end_of_nrf24l01CELow:	
 11083                           
 11084                           	psect	text55
 11085  146A                     __ptext55:	
 11086 ;; *************** function _nrf24l01CEHigh *****************
 11087 ;; Defined at:
 11088 ;;		line 12 in file "interface.c"
 11089 ;; Parameters:    Size  Location     Type
 11090 ;;		None
 11091 ;; Auto vars:     Size  Location     Type
 11092 ;;		None
 11093 ;; Return value:  Size  Location     Type
 11094 ;;                  1    wreg      void 
 11095 ;; Registers used:
 11096 ;;		None
 11097 ;; Tracked objects:
 11098 ;;		On entry : 0/0
 11099 ;;		On exit  : 0/0
 11100 ;;		Unchanged: 0/0
 11101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11106 ;;Total ram usage:        0 bytes
 11107 ;; Hardware stack levels used:    1
 11108 ;; Hardware stack levels required when called:    7
 11109 ;; This function calls:
 11110 ;;		Nothing
 11111 ;; This function is called by:
 11112 ;;		_nrf24l01SetRXMode
 11113 ;;		_nrf24l01Service
 11114 ;;		_nrf24l01Init
 11115 ;;		i1_nrf24l01SetRXMode
 11116 ;;		i1_nrf24l01Service
 11117 ;; This function uses a non-reentrant model
 11118 ;;
 11119                           
 11120                           
 11121                           ;psect for function _nrf24l01CEHigh
 11122  146A                     _nrf24l01CEHigh:	
 11123                           
 11124                           ;interface.c: 13: PORTAbits.RA0 = 1;
 11125                           
 11126                           ;incstack = 0
 11127 ;; hardware stack exceeded
 11128                           ; Regs used in _nrf24l01CEHigh: []
 11129  146A  0020               	movlb	0	; select bank0
 11130  146B  140C               	bsf	12,0	;volatile
 11131  146C  0008               	return
 11132  146D                     __end_of_nrf24l01CEHigh:	
 11133                           
 11134                           	psect	text56
 11135  14F0                     __ptext56:	
 11136 ;; *************** function i1_memset *****************
 11137 ;; Defined at:
 11138 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 11139 ;; Parameters:    Size  Location     Type
 11140 ;;  p1              2    0[COMMON] PTR void 
 11141 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 11142 ;;  c               2    2[COMMON] int 
 11143 ;;  n               2    4[COMMON] unsigned int 
 11144 ;; Auto vars:     Size  Location     Type
 11145 ;;  memset          2    6[COMMON] PTR unsigned char 
 11146 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 11147 ;; Return value:  Size  Location     Type
 11148 ;;                  1    wreg      PTR void 
 11149 ;; Registers used:
 11150 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11151 ;; Tracked objects:
 11152 ;;		On entry : 0/0
 11153 ;;		On exit  : 0/0
 11154 ;;		Unchanged: 0/0
 11155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11156 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11157 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;Total ram usage:        8 bytes
 11161 ;; Hardware stack levels used:    1
 11162 ;; This function calls:
 11163 ;;		Nothing
 11164 ;; This function is called by:
 11165 ;;		i1_nrf24l01Service
 11166 ;; This function uses a non-reentrant model
 11167 ;;
 11168                           
 11169                           
 11170                           ;psect for function i1_memset
 11171  14F0                     i1_memset:	
 11172                           
 11173                           ;incstack = 0
 11174                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11175  14F0  0871               	movf	i1memset@p1+1,w
 11176  14F1  00F7               	movwf	i1memset@p+1
 11177  14F2  0870               	movf	i1memset@p1,w
 11178  14F3  00F6               	movwf	i1memset@p
 11179  14F4                     i1l2999:	
 11180  14F4  3001               	movlw	1
 11181  14F5  02F4               	subwf	i1memset@n,f
 11182  14F6  3000               	movlw	0
 11183  14F7  3BF5               	subwfb	i1memset@n+1,f
 11184  14F8  0A74               	incf	i1memset@n,w
 11185  14F9  1903               	btfsc	3,2
 11186  14FA  0A75               	incf	i1memset@n+1,w
 11187  14FB  1903               	btfsc	3,2
 11188  14FC  0008               	return
 11189  14FD  0876               	movf	i1memset@p,w
 11190  14FE  0086               	movwf	6
 11191  14FF  0877               	movf	i1memset@p+1,w
 11192  1500  0087               	movwf	7
 11193  1501  0872               	movf	i1memset@c,w
 11194  1502  0081               	movwf	1
 11195  1503  3001               	movlw	1
 11196  1504  07F6               	addwf	i1memset@p,f
 11197  1505  3000               	movlw	0
 11198  1506  3DF7               	addwfc	i1memset@p+1,f
 11199  1507  2CF4               	goto	i1l2999
 11200  1508                     __end_ofi1_memset:	
 11201                           ;	Return value of i1_memset is never used
 11202                           
 11203  007E                     btemp	set	126	;btemp
 11204  007E                     int$flags	set	126
 11205  007E                     wtemp0	set	126


Data Sizes:
    Strings     70
    Constant    56
    Data        1
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80     71      76
    BANK2            80     49      70
    BANK3            80      0      66
    BANK4            80      0      28
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), romDataMap(BANK4[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), romDataMap(BANK4[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK4[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK1[33]), 
		 -> STR_12(CODE[4]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_13(CODE[5]), STR_11(CODE[5]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[7]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_14(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_13(CODE[5]), STR_11(CODE[5]), STR_10(CODE[6]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[7]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK4[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK4[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->i1_nrf24l01Service
    i1_nrf24l01Service->i1_memset
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _sendMessage->_ftoa
    _strcat->_ftoa
    _sleep->_doWDTSleep
    _nrf24l01SendPacket->_nrf24l01Service
    _nrf24l01Service->_memset
    _nrf24l01SetRXMode->_nrf24l01Send
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    ___lbtoft->___ftpack
    ___lwtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   97988
                                             36 BANK1     35    35      0
                           ___lwtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5538
                                             17 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               10    10      0    5538
                                              7 BANK0     10    10      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    3     3      0     314
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetRXPipe                                    4     4      0    2380
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     762
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                50    50      0   60840
                                             35 BANK1      1     1      0
                                              0 BANK2     49    49      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                           ___lltoft
                        _getADCValue
                       _nrf24l01Send
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                         10     3      7   26842
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                 _nrf24l01SendPacket
                              _sleep
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     614
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _sleep                                                4     2      2     157
                                              2 BANK0      4     2      2
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   4     2      2    6427
                                             12 BANK0      4     2      2
                    _nrf24l01Service
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     462
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Service                                      4     4      0    5855
                                              8 BANK0      4     4      0
                             _memset
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXMode
                             _strcmp
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     216
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _strcmp                                               5     3      2     216
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SetRXMode                                    2     2      0    2350
                                              3 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (5) _nrf24l01Send                                         3     2      1    2284
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     532
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15718
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3615
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4809
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3694
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   11919
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (3) _doWDTSleep                                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4004
                                             27 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4564
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3192
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    3034
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    3123
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3012
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  0     0      0    1756
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         1     1      0    1756
                                             12 COMMON     1     1      0
                     i1_nrf24l01Send
                  i1_nrf24l01Service
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) i1_nrf24l01Service                                   4     4      0    1208
                                              8 COMMON     4     4      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
                           i1_strcmp
                           i1_strlen
 ---------------------------------------------------------------------------------
 (12) i1_strlen                                            6     4      2     134
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (12) i1_strcmp                                            5     3      2     117
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (11) i1_nrf24l01SetRXMode                                 2     2      0     307
                                              4 COMMON     2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01Send                                      3     2      1     241
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_memset                                            8     2      6     152
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwtoft
     ___ftpack
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___lbtoft
       ___ftpack
     ___lltoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _sendMessage
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _memset
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strcmp
           _strlen
         _strcpy
       _sleep (ARG)
         _doWDTSleep
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _sendMessage
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _memset
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
         _nrf24l01SetRXMode
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01Send
             _enableInterrupts
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
         _strcmp
         _strlen
       _strcpy
     _sleep (ARG)
       _doWDTSleep
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01Service
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       i1_strcmp
       i1_strlen
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     47      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     31      46       9       87.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1C      13       35.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     14E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     14E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Aug 03 13:41:11 2018

                ___bmul@product 0022                     __CFG_CP$OFF 0000                sendMessage@value 00BD  
              sendMessage@topic 00BB             ___wmul@multiplicand 0022             nrf24l01Send@command 0022  
                  ___ftadd@exp1 003A                    ___ftadd@exp2 0039               sendMessage@packet 00B9  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0038                             l164 0C4A  
                           l423 0309                             l263 1634                             l434 03AC  
                           l426 0328                             l449 157B                             l297 0565  
                           l660 0A1A                             l652 09FF                             l743 0BCB  
                           l659 0A12                             l683 0784                    __CFG_CPD$OFF 0000  
                           _ISR 0004               sendMessage@status 00C1                             wreg 0009  
             sleep@milliseconds 0022                            ?_ISR 0070                    ___ftdiv@cntr 0045  
                  ___ftdiv@sign 004A                  ??_nrf24l01Init 0031                            l2301 150D  
                          l2403 0714                            l3051 0C0D                            l2331 16E3  
                          l2253 09DC                            l2421 073D                            l3221 177E  
                          l2263 0A04                            l2255 09E6                            l2431 075F  
                          l3063 0C84                            l3047 0C19                            l2351 14B0  
                          l2335 16EB                            l3215 1766                            l2265 0A0C  
                          l2257 09EB                            l2249 09D5                            l2441 0780  
                          l2433 0763                            l2409 0723                            l3065 0C8B  
                          l3049 0C21                            l2601 02C7                            l3217 1772  
                          l3225 1787                            l3161 0F70                            l2427 0750  
                          l3059 0C6C                            l2611 02D6                            l2339 1703  
                          l2445 0796                            l2429 075A                            l2357 1575  
                          l2613 0305                            l2439 0776                            l2703 17F1  
                          l2375 0927                            l2471 081B                            l2615 030B  
                          l3175 0FC9                            l2449 07A8                            l2721 0D53  
                          l2385 0955                            l2377 0935                            l2641 035C  
                          l2625 0337                            l3505 15ED                            l3521 045C  
                          l3169 0FBA                  ??_nrf24l01Send 0021                            l2459 07C3  
                          l2475 0833                            l2651 0398                            l2635 0356  
                          l2619 0310                            l3507 15F9                            l2813 0BC1  
                          l2805 0BA2                            l2389 0960                            l2469 080D  
                          l3525 0473                            l3517 044E                            l2399 070D  
                          l2751 0DC0                            l2743 0DAC                            l2727 0D69  
                          l2815 0BCF                            l2807 0BB3                            l2479 083E  
                          l2647 0389                            l3535 048E                            l2673 041C  
                          l2657 03BF                            l2593 0299                            l2497 155C  
                          l2921 1640                            l2931 1653                            l2755 0DC8  
                          l2739 0DA4                            l2819 0BDD                            l2827 170E  
                          l2667 03D7                            l2659 03C2                            l2587 0289  
                          l2675 0266                            l3563 04E7                            l3555 04CE  
                          l2851 07EB                            l2683 14B5                            l2941 0CAA  
                          l2829 171E                            l2677 0427                            l3573 051B  
                          l2861 16AA                            l3559 04DF                            l2687 14BB  
                          l2961 0D01                            l2777 15B4                            l2873 0E36  
                          l3585 057C                            l2857 1696                            l2947 0CC0  
                          l2699 17DB                            l2787 0B69                            l2859 16A2  
                          l3597 08CE                            l3599 08E9                            l2969 0D1A  
                          l3785 1791                            l3873 0B4A                            l3787 17B4  
                          STR_1 187C                    __CFG_WDTE$ON 0000                            STR_2 187C  
                          STR_3 1850                            STR_4 186E                            STR_5 1855  
                          STR_6 183E                            STR_7 185A                            STR_8 1869  
                          STR_9 185F                            u2115 0936                            u2125 094A  
                          u2135 0956                            u2055 157C                            u2305 0764  
                          u3025 0BC2                            u2065 1581                            u2245 073E  
                          u3205 0D11                            u3134 163A                            u2335 0777  
                          u3215 0D1B                            u3055 1713                            u2095 092A  
                          u2415 0829                            u3135 1639                            u2425 0834  
                          u4017 0AD7                            u2275 0751                            u4027 0853  
                          u4037 0862                            u3175 0CD2                            u4047 08E0  
                          u3185 0CE2                            u2705 03A2                            u4057 0489  
                          u3195 0D02                            u2395 0810                            u2715 03B4  
                          u4067 1750                            u4077 175B                            u3365 1769  
                          u1935 0A21                            u1855 09E1                            u2905 0DC9  
                          u3385 1778                            u1875 09FA                            u2915 0DCF  
                          u2835 0D75                            u2675 037F                            u3395 177F  
                          u2845 0D85                            u1895 0A07                            u2695 0390  
                          u2865 0DAD                            u2875 0DB3                            u3675 046D  
                          u2965 0B71                            i1l48 149C                            u2995 0BA3  
                          u3995 17A2                            _WPUA 020C                            _WPUC 020E  
__size_of_nrf24l01InterfaceInit 001E                    __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000  
 __end_of_nrf24l01InterfaceInit 15E8                            _main 0ABB                            _ftoa 0DF0  
                  ___ftpack@arg 0020                            _loop 0036                    ___ftpack@exp 0023  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            indf1 0001                            fsr1l 0006  
                          btemp 007E                   __CFG_BORV$LOW 0000                            start 000F  
         nrf24l01SetRXPipe@pipe 0025                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0023  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0065                    ___ftmul@sign 0066  
   __size_of_nrf24l01SendPacket 0048                           ??_ISR 007D                    ___fttol@exp1 00A5  
          __size_of_getADCValue 00A6                 ??_nrf24l01CELow 0070                    ___fttol@lval 00A1  
               ??_nrf24l01CSLow 0070                           ?_main 0070                           ?_ftoa 00A6  
                         ?_loop 0070                 __end_of___ftadd 07DB                           STR_10 1845  
                         STR_11 1864                           STR_12 1878                           STR_13 1873  
                         STR_14 1829                 __end_of___ftdiv 0D3C                 __end_of___ftneg 1496  
               __end_of___lldiv 0969                 __end_of___ftmul 0DF0                 __end_of___llmod 0847  
               __end_of___ftsub 15CA                 __end_of___fttol 0BED                  __CFG_DEBUG$OFF 0000  
                         i1l153 000D                           i1l280 09C0                 __end_of___lwmod 178C  
                         i1l274 09A5                           i1l275 09A4                           i1l297 06B3  
        enableInterrupts@enable 0070                      i1memset@p1 0070                   __CFG_PWRTE$ON 0000  
         nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D                   ___awtoft@sign 002D  
               __end_of_dpowers 1828                 __end_of_isdigit 14B2                           _sleep 07DB  
                 ___ftpack@sign 0024                           ftoa@f 00A6                           ftoa@l 00AE  
                __CFG_BOREN$OFF 0000                _enableInterrupts 147D                           status 0003  
                         wtemp0 007E                 __end_of_sprintf 042D     __end_ofi1_nrf24l01SetRXMode 1691  
              __end_ofi1_memset 1508               getADCValue@adcSum 0054                __end_ofi1_strcmp 16E0  
              __end_ofi1_strlen 15AC                _nrf24l01SPIStart 1485                 __initialization 0011  
        nrf24l01InitRegisters@i 002F                    __end_of_main 0B4E                    __end_of_ftoa 0EE2  
                  __end_of_loop 0260                ??_nrf24l01CEHigh 0070                      i1strcmp@s1 0074  
                    i1strcmp@s2 0070                          ??_main 00C4                          ??_ftoa 006F  
                 ___fttol@sign1 00A0                          ??_loop 00C3                ??_nrf24l01CSHigh 0070  
                    i1strlen@cp 0074                    ?_sendMessage 00B9                ??_nrf24l01SPIEnd 0070  
      __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0032                          _ADRESH 009C  
                        _ADRESL 009B                          ?_sleep 0022                __end_of___awtoft 166A  
                        _ANSELA 018C                          _ANSELC 018E                __end_of___ftpack 0A31  
              __end_of___lbtoft 1557                __end_of___lltoft 1733                          i1l3011 16DA  
                        i1l3003 16BA                          i1l3007 16C2                          _ODCONA 028C  
      __size_of_nrf24l01GetPipe 0038                          _ODCONC 028E                          i1l2281 14A1  
                        i1l3611 1592                          i1l3613 159E                          i1l3711 06C8  
                        i1l3651 05E1                          i1l3643 05BE                          i1l3731 0997  
                        i1l3661 05F9                          i1l3647 05CB                          i1l3681 0633  
                        i1l3737 09C1                          i1l3685 0643                          i1l3689 064B  
                        i1l3699 0675                          i1l2999 14F4                          _INLVLA 038C  
                        _INLVLC 038E                          u410_27 168D                          u411_27 1489  
                        u412_27 1477                          u408_27 05F4                          u409_27 1683  
              __end_of___lwtoft 14D9                          u382_25 05DB               i1_nrf24l01Service 05A0  
            ?i1_nrf24l01Service 0070        __size_of_nrf24l01Service 0173            __size_of_nrf24l01ISR 0063  
                        ___bmul 14B2                          ___ftge 17C4         nrf24l01SetRXMode@rxMode 0024  
                        ___wmul 1572             ??i1_nrf24l01Service 0078                       ??___ftadd 0034  
                __CFG_STVREN$ON 0000                       ??___ftdiv 0041                       ??___ftneg 005A  
                     ??___lldiv 0028                       ??___ftmul 005D                       ??___llmod 0036  
                     ??___ftsub 0041                       ??___fttol 006B                       ??___lwmod 0024  
          __end_of_nrf24l01Init 088A            __end_of_nrf24l01Send 1627                          _memset 1508  
         _nrf24l01InitRegisters 0EE2                          _status 00E7                          _strcat 1691  
                        _strcmp 16E0                          _strcpy 1557                          _strlen 15E8  
                        ftoa@cp 00B2           ___ftmul@f3_as_product 0062                       ??_isdigit 0020  
                        loop@ta 0123                          loop@vt 0120       i1nrf24l01SetRXMode@rxMode 0075  
                     ??_sprintf 0042                __end_of_statuses 183E       __end_ofi1_nrf24l01Service 06E5  
            getADCValue@adcLoop 0051         __end_of__initialization 0032                      ___ftadd@f1 002E  
                    ___ftadd@f2 0031                      ___ftge@ff1 0020                      ___ftge@ff2 0023  
            getADCValue@channel 0053                      ___ftdiv@f1 003E                      ___ftdiv@f2 003B  
                    ___ftdiv@f3 0046                      ___ftneg@f1 0057                      ___awtoft@c 0028  
                    ___lbtoft@c 002F             ___bmul@multiplicand 0020                      ___ftmul@f1 0057  
                    ___ftmul@f2 005A                      ___ftsub@f1 003E                      ___ftsub@f2 003B  
                    ___fttol@f1 0067                  __pcstackCOMMON 0070                    __pidataBANK1 0003  
                    ___lltoft@c 0028                      _doWDTSleep 14D9                   __end_of_sleep 07FD  
                    ___lwtoft@c 0028                       ?i1_memset 0070                       ?i1_strcmp 0070  
                     ?i1_strlen 0070                         ??_sleep 0024                    sprintf@width 004F  
                   loop@rfSetup 012C                      __pbssBANK1 00E7                      __pbssBANK2 0151  
                    __pbssBANK3 01A0                      __pbssBANK4 0220               ??_nrf24l01SPISend 0070  
        i1nrf24l01Service@width 007A         __size_ofi1_nrf24l01Send 001B               ??_nrf24l01GetPipe 0026  
                    __pmaintext 0ABB                         ?___bmul 0020                         ?___ftge 0020  
                       ?___wmul 0020                 __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 1733  
             _nrf24l01SetRXPipe 1627          ?_nrf24l01InitRegisters 0070                      __pintentry 0004  
             _nrf24l01SetTXPipe 088A             nrf24l01SPISend@data 0070                         ?_memset 0020  
             ??_nrf24l01Service 0028              ?_nrf24l01SetRXMode 0070                       ?___awtoft 0028  
                     ?___ftpack 0020                       ?___lbtoft 0028              ?_nrf24l01SetRXPipe 0070  
      __end_of_enableInterrupts 1485              ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0028  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00B3                         ?_strcmp 0020  
                       ?_strcpy 0020                         ?_strlen 0020                       ?___lwtoft 0028  
         __end_of_n_ADDRESS_MUL 1829                      ??i1_memset 0076            __size_of_sendMessage 008A  
           ??_nrf24l01SetRXMode 0023        __end_of_nrf24l01SPIStart 148D             ??_nrf24l01SetRXPipe 0023  
           ??_nrf24l01SetTXPipe 0024                      ??i1_strcmp 0072                      ??i1_strlen 0072  
                       _SSP1BUF 0211      __size_ofi1_nrf24l01Service 0145           _nrf24l01InterfaceInit 15CA  
          nrf24l01Service@width 002A      __end_of_nrf24l01SendPacket 0916                   ??_getADCValue 004E  
         __size_of_nrf24l01Init 0043           __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 175F  
     __end_of_nrf24l01SetRXPipe 1648       __end_of_nrf24l01SetTXPipe 08CE                 __size_of___bmul 0012  
               __size_of___ftge 003C                         ___ftadd 06E5                     ?_doWDTSleep 0070  
                       ___ftdiv 0C93                         ___ftneg 148D                         ___lldiv 0916  
               __size_of___wmul 001C                         ___ftmul 0D3C                         ___llmod 0804  
                       ___ftsub 15AC                         ___fttol 0B4E                         ___lwmod 175F  
                    ??___awtoft 002B                      ??___ftpack 0025                      ??___lbtoft 002B  
         __end_of_nrf24l01CELow 1470                 __size_of_memset 0019           __end_of_nrf24l01CSLow 0800  
                    ??___lltoft 002C                         __ptext1 0847                         __ptext2 15CA  
                       __ptext3 0EE2                         __ptext4 088A                         __ptext5 14B2  
                       __ptext6 1627                         __ptext7 178C                         __ptext8 175F  
                       __ptext9 0036                      ??___lwtoft 002B                 __size_of_strcat 0027  
               __size_of_strcmp 0029                 __size_of_strcpy 001B                 __size_of_strlen 001F  
                  __size_of_ISR 000B                         _counter 0151                         _dpowers 1800  
                       _isdigit 14A3                         _romData 00EB                         _sprintf 0260  
                       clrloop0 1471            end_of_initialization 0032                         ftoa@buf 0155  
                       ftoa@rem 00AA                    _nrf24l01Init 0847                    _nrf24l01Send 1607  
                    _romDataMap 0220                         memset@c 0022                         memset@n 0024  
                       memset@p 0026                nrf24l01GetPipe@i 002A                 ___lldiv@divisor 0020  
               ___lldiv@counter 002D    __size_ofi1_nrf24l01SetRXMode 0027                         strcmp@r 0023  
         i1nrf24l01Send@command 0073                         strlen@s 0020             __end_of_getADCValue 0C93  
                     _PORTAbits 000C                       _PORTCbits 000E                       _TRISAbits 008C  
                     _TRISCbits 008E                nrf24l01Send@data 0020                __CFG_FEXTOSC$OFF 0000  
           __size_of_doWDTSleep 0017                   ??_nrf24l01ISR 007C          ?_nrf24l01InterfaceInit 0070  
                   ___ftdiv@exp 0049                  i1_nrf24l01Send 1521                      main@packet 00C6  
              nrf24l01Service@i 002B      __size_of_nrf24l01SetRXMode 002C      __size_of_nrf24l01SetRXPipe 0021  
                   ___ftmul@exp 0061      __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 14C4  
                __end_of___ftge 1800                  __end_of___wmul 158E                       i1memset@c 0072  
                     i1memset@n 0074                       i1memset@p 0076                  __end_of_memset 1521  
                __end_of_strcat 16B8                  __end_of_strcmp 1709                  __end_of_strcpy 1572  
                __end_of_strlen 1607             start_initialization 0011                 _nrf24l01SPISend 1496  
                   __end_of_ISR 000F                      ftoa@status 00A9               __size_ofi1_memset 0018  
     nrf24l01SetRXPipe@enRXAddr 0026                 _nrf24l01GetPipe 178C         __size_of_nrf24l01CEHigh 0003  
                     i1strcmp@r 0073                       i1strlen@s 0070               __size_ofi1_strcmp 0028  
             __size_ofi1_strlen 001E         __size_of_nrf24l01CSHigh 0003          __end_ofi1_nrf24l01Send 153C  
       __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 002E                 ___llmod@counter 0037  
               _nrf24l01Service 042D         ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000  
                   _getADCValue 0BED                        ??___bmul 0021                        ??___ftge 0026  
           __end_of_nrf24l01ISR 09CC                        ??___wmul 0024                     __pdataBANK1 00EB  
                      ??_memset 0026               ?_enableInterrupts 0070                        ??_strcat 0070  
                      ??_strcmp 0022                        ??_strcpy 0024                        ??_strlen 0022  
             __size_of___awtoft 0022               __size_of___ftpack 0065               __size_of___lbtoft 001B  
            ??_enableInterrupts 0070               __size_of___lltoft 002A                     __pbssCOMMON 007D  
                     ___latbits 0002               __size_of___lwtoft 0015                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK2 0120                 doWDTSleep@wdtps 0021  
             ?_nrf24l01SPIStart 0070                    _isdigit$1712 0020              ??_nrf24l01SPIStart 0070  
               ?i1_nrf24l01Send 0071                     sprintf@flag 0048                     sprintf@prec 0051  
                    loop@packet 0130             nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028  
                  ??_doWDTSleep 0020                        ?___ftadd 002E                        ?___ftdiv 003B  
                      ?___ftneg 0057                        ?___lldiv 0020                        ?___ftmul 0057  
                      ?___llmod 002E                        ?___ftsub 003B                        ?___fttol 0067  
                      ?___lwmod 0020            __end_of_n_ADDRESS_P0 1850         __end_of_nrf24l01SPISend 14A3  
            i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002D                   ??_sendMessage 00C0  
            _nrf24l01SendPacket 08CE         __end_of_nrf24l01GetPipe 17C4                        ?_isdigit 0070  
                     _loop$1962 012D                       _loop$1963 0126                       _loop$1964 0129  
           ?_nrf24l01SendPacket 002C                        ?_sprintf 0038             i1_nrf24l01SetRXMode 166A  
            i1nrf24l01Service@i 007B         __end_of_nrf24l01Service 05A0                  __size_of_sleep 0022  
            __end_of_doWDTSleep 14F0                  ___wmul@product 0024                     _nrf24l01ISR 0969  
                     clear_ram0 1470                        _PIE0bits 0090                        _PIR0bits 0010  
                     _sleepLoop 007D            ??_nrf24l01SendPacket 002E            ?i1_nrf24l01SetRXMode 0070  
                    _ADCON0bits 009D                      _ADCON1bits 009E               ___wmul@multiplier 0020  
                      _WPUAbits 020C                        i1_memset 14F0                        _RXPacket 01A0  
                      _TXPacket 01C1                        i1_strcmp 16B8                        i1_strlen 158E  
           __end_of_sendMessage 0ABB                  _nrf24l01CEHigh 146A         ??_nrf24l01InterfaceInit 0020  
                _nrf24l01CSHigh 0801                  _nrf24l01SPIEnd 1476          __size_of_nrf24l01CELow 0003  
        __size_of_nrf24l01CSLow 0003           ??i1_nrf24l01SetRXMode 0074                __size_of___ftadd 00F6  
              __size_of___ftdiv 00A9                __size_of___ftneg 0009                __size_of___lldiv 0053  
              __size_of___ftmul 00B4                __size_of___llmod 0043                __size_of___ftsub 001E  
              __size_of___fttol 009F                __size_of___lwmod 002D                        ___awtoft 1648  
                      ___ftpack 09CC                        ___lbtoft 153C                ?_nrf24l01SPISend 0070  
                      ___lltoft 1709                      _ANSELAbits 018C                        ___lwtoft 14C4  
                    _ANSELCbits 018E                ?_nrf24l01GetPipe 0070                      sprintf@val 004A  
                 _n_ADDRESS_MUL 1828                      strcat@from 00B5          __end_of_nrf24l01CEHigh 146D  
              __size_of_isdigit 000F          __end_of_nrf24l01CSHigh 0804                        __ptext10 0A31  
                      __ptext11 1691                        __ptext20 1508                        __ptext12 07DB  
                      __ptext21 0DF0                        __ptext13 08CE                        __ptext30 148D  
                      __ptext22 0260                        __ptext14 1557                        __ptext31 0D3C  
                      __ptext23 14A3                        __ptext15 042D                        __ptext40 09CC  
                      __ptext32 17C4                        __ptext24 1572                        __ptext16 15E8  
                      __ptext33 0BED                        __ptext25 0804                        __ptext17 16E0  
                      __ptext50 1496                        __ptext42 0969                        __ptext34 14D9  
                      __ptext26 0916                        __ptext18 1733                        __ptext51 1476  
                      __ptext43 05A0                        __ptext35 0C93                        __ptext27 1709  
                      __ptext19 1607                        __ptext52 0801                        __ptext44 158E  
                      __ptext36 06E5                        __ptext28 0B4E                        __ptext53 147D  
                      __ptext45 16B8                        __ptext37 1648                        __ptext29 15AC  
                      __ptext54 146D                        __ptext46 166A                        __ptext38 153C  
                      __ptext55 146A                        __ptext47 1521                        __ptext39 14C4  
                      __ptext56 14F0                        __ptext48 1485                        __ptext49 07FD  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 147D                ?_nrf24l01Service 0070  
              __size_of_sprintf 01CD                     _OSCCON1bits 0919                      strcpy@from 0022  
                 __size_of_main 0093                   __size_of_ftoa 00F2                   __size_of_loop 022A  
  nrf24l01InitRegisters@channel 0029    nrf24l01InitRegisters@feature 002B                      _RC0PPSbits 0EA0  
  nrf24l01InitRegisters@rfSetup 002C                      _RC1PPSbits 0EA1                    ?_getADCValue 004B  
                    _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 011E   __end_of_nrf24l01InitRegisters 1000  
                      int$flags 007E    nrf24l01InitRegisters@setupAW 002A                      _ODCONAbits 028C  
                      _statuses 1834                    _SSP1STATbits 0214                        main@pipe 00C5  
    nrf24l01SendPacket@txPacket 002C                   _nrf24l01CELow 146D                     _sendMessage 0A31  
                 _nrf24l01CSLow 07FD                      _INTCONbits 000B                 ?_nrf24l01CEHigh 0070  
                    _FVRCONbits 0117                ??i1_nrf24l01Send 0072                 ?_nrf24l01CSHigh 0070  
                __pstringtext10 185F                  __pstringtext11 1864                  __pstringtext12 1869  
                __pstringtext13 186E                  __pstringtext14 1873                  __pstringtext15 1878  
                __pstringtext16 187C                  __pstringtext17 0000                        isdigit@c 0021  
                      memset@p1 0020                 ?_nrf24l01SPIEnd 0070                        intlevel1 0000  
                     sprintf@ap 0049                       sprintf@sp 004E                    _n_ADDRESS_P0 184B  
     __size_of_enableInterrupts 0008                ___lwmod@dividend 0022                ___lldiv@dividend 0024  
             __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0008                  ?_nrf24l01CELow 0070  
                 __pstringtext1 1800                   __pstringtext2 1834                   __pstringtext3 184B  
                 __pstringtext4 1828                   __pstringtext5 183E                   __pstringtext6 1845  
                 __pstringtext7 1850                   __pstringtext8 1855                   __pstringtext9 185A  
                ?_nrf24l01CSLow 0070                        sprintf@c 0053                        sprintf@f 0038  
    nrf24l01InitRegisters@DynPD 002E                        strcat@cp 00B7                        strcat@to 00B3  
                      strcmp@s1 0024                        strcmp@s2 0020                ___lldiv@quotient 0029  
               ___lwmod@divisor 0020                        strcpy@cp 0024                        strlen@cp 0024  
                      strcpy@to 0020                 ___lwmod@counter 0025                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020                    ?_nrf24l01ISR 0070  
