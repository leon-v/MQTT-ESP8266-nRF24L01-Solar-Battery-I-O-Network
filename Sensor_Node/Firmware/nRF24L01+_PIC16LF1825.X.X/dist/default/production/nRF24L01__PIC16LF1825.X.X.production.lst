

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Aug 20 10:11:06 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text48,local,class=CODE,merge=1,delta=2
    75                           	psect	intentry,global,class=CODE,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,delta=2
    77                           	psect	text51,local,class=CODE,merge=1,delta=2
    78                           	dabs	1,0x74,12
    79  0000                     
    80                           ; Version 2.00
    81                           ; Generated 27/05/2018 GMT
    82                           ; 
    83                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC16LF18325 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000E                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  008C                     	;# 
   148  008E                     	;# 
   149  0090                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0097                     	;# 
   155  009B                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  010C                     	;# 
   162  010E                     	;# 
   163  0111                     	;# 
   164  0112                     	;# 
   165  0113                     	;# 
   166  0114                     	;# 
   167  0115                     	;# 
   168  0116                     	;# 
   169  0117                     	;# 
   170  0118                     	;# 
   171  0119                     	;# 
   172  018C                     	;# 
   173  018E                     	;# 
   174  0199                     	;# 
   175  0199                     	;# 
   176  0199                     	;# 
   177  019A                     	;# 
   178  019A                     	;# 
   179  019A                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019C                     	;# 
   186  019C                     	;# 
   187  019C                     	;# 
   188  019D                     	;# 
   189  019D                     	;# 
   190  019D                     	;# 
   191  019E                     	;# 
   192  019E                     	;# 
   193  019E                     	;# 
   194  019F                     	;# 
   195  019F                     	;# 
   196  019F                     	;# 
   197  019F                     	;# 
   198  019F                     	;# 
   199  020C                     	;# 
   200  020E                     	;# 
   201  0211                     	;# 
   202  0211                     	;# 
   203  0212                     	;# 
   204  0212                     	;# 
   205  0213                     	;# 
   206  0213                     	;# 
   207  0214                     	;# 
   208  0214                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0215                     	;# 
   212  0215                     	;# 
   213  0216                     	;# 
   214  0216                     	;# 
   215  0217                     	;# 
   216  0217                     	;# 
   217  0219                     	;# 
   218  021A                     	;# 
   219  021B                     	;# 
   220  021C                     	;# 
   221  021D                     	;# 
   222  021D                     	;# 
   223  021E                     	;# 
   224  021F                     	;# 
   225  028C                     	;# 
   226  028E                     	;# 
   227  0291                     	;# 
   228  0291                     	;# 
   229  0292                     	;# 
   230  0293                     	;# 
   231  0294                     	;# 
   232  0295                     	;# 
   233  0295                     	;# 
   234  0296                     	;# 
   235  0297                     	;# 
   236  0298                     	;# 
   237  029F                     	;# 
   238  030C                     	;# 
   239  030E                     	;# 
   240  0311                     	;# 
   241  0311                     	;# 
   242  0312                     	;# 
   243  0313                     	;# 
   244  0314                     	;# 
   245  0315                     	;# 
   246  0315                     	;# 
   247  0316                     	;# 
   248  0317                     	;# 
   249  0318                     	;# 
   250  038C                     	;# 
   251  038E                     	;# 
   252  0391                     	;# 
   253  0392                     	;# 
   254  0393                     	;# 
   255  0397                     	;# 
   256  0398                     	;# 
   257  0399                     	;# 
   258  039A                     	;# 
   259  039C                     	;# 
   260  039D                     	;# 
   261  039E                     	;# 
   262  039F                     	;# 
   263  0411                     	;# 
   264  0411                     	;# 
   265  0412                     	;# 
   266  0413                     	;# 
   267  0414                     	;# 
   268  0415                     	;# 
   269  0416                     	;# 
   270  0417                     	;# 
   271  0418                     	;# 
   272  0418                     	;# 
   273  0419                     	;# 
   274  041A                     	;# 
   275  041B                     	;# 
   276  041C                     	;# 
   277  041D                     	;# 
   278  041E                     	;# 
   279  041F                     	;# 
   280  0498                     	;# 
   281  0498                     	;# 
   282  0499                     	;# 
   283  049A                     	;# 
   284  049B                     	;# 
   285  049B                     	;# 
   286  049C                     	;# 
   287  049D                     	;# 
   288  049E                     	;# 
   289  049F                     	;# 
   290  0617                     	;# 
   291  0618                     	;# 
   292  0619                     	;# 
   293  0619                     	;# 
   294  061A                     	;# 
   295  061B                     	;# 
   296  061C                     	;# 
   297  061C                     	;# 
   298  061F                     	;# 
   299  0691                     	;# 
   300  0692                     	;# 
   301  0693                     	;# 
   302  0694                     	;# 
   303  0695                     	;# 
   304  0696                     	;# 
   305  0697                     	;# 
   306  0698                     	;# 
   307  0699                     	;# 
   308  0711                     	;# 
   309  0712                     	;# 
   310  0713                     	;# 
   311  0714                     	;# 
   312  0715                     	;# 
   313  0716                     	;# 
   314  0717                     	;# 
   315  0718                     	;# 
   316  0719                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0891                     	;# 
   320  0891                     	;# 
   321  0891                     	;# 
   322  0891                     	;# 
   323  0892                     	;# 
   324  0892                     	;# 
   325  0892                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0893                     	;# 
   329  0893                     	;# 
   330  0893                     	;# 
   331  0893                     	;# 
   332  0894                     	;# 
   333  0894                     	;# 
   334  0894                     	;# 
   335  0895                     	;# 
   336  0895                     	;# 
   337  0895                     	;# 
   338  0896                     	;# 
   339  0896                     	;# 
   340  0896                     	;# 
   341  089B                     	;# 
   342  0911                     	;# 
   343  0912                     	;# 
   344  0913                     	;# 
   345  0914                     	;# 
   346  0915                     	;# 
   347  0916                     	;# 
   348  0918                     	;# 
   349  0919                     	;# 
   350  091A                     	;# 
   351  091B                     	;# 
   352  091C                     	;# 
   353  091D                     	;# 
   354  091E                     	;# 
   355  091F                     	;# 
   356  0E0F                     	;# 
   357  0E10                     	;# 
   358  0E11                     	;# 
   359  0E12                     	;# 
   360  0E13                     	;# 
   361  0E14                     	;# 
   362  0E15                     	;# 
   363  0E16                     	;# 
   364  0E17                     	;# 
   365  0E18                     	;# 
   366  0E19                     	;# 
   367  0E1A                     	;# 
   368  0E1B                     	;# 
   369  0E1C                     	;# 
   370  0E1D                     	;# 
   371  0E1E                     	;# 
   372  0E1F                     	;# 
   373  0E20                     	;# 
   374  0E21                     	;# 
   375  0E22                     	;# 
   376  0E24                     	;# 
   377  0E25                     	;# 
   378  0E28                     	;# 
   379  0E29                     	;# 
   380  0E2A                     	;# 
   381  0E2B                     	;# 
   382  0E2C                     	;# 
   383  0E2D                     	;# 
   384  0E2E                     	;# 
   385  0E2F                     	;# 
   386  0E90                     	;# 
   387  0E91                     	;# 
   388  0E92                     	;# 
   389  0E94                     	;# 
   390  0E95                     	;# 
   391  0EA0                     	;# 
   392  0EA1                     	;# 
   393  0EA2                     	;# 
   394  0EA3                     	;# 
   395  0EA4                     	;# 
   396  0EA5                     	;# 
   397  0F0F                     	;# 
   398  0F10                     	;# 
   399  0F11                     	;# 
   400  0F12                     	;# 
   401  0F13                     	;# 
   402  0F14                     	;# 
   403  0F15                     	;# 
   404  0F16                     	;# 
   405  0F17                     	;# 
   406  0F18                     	;# 
   407  0F19                     	;# 
   408  0F1A                     	;# 
   409  0F1B                     	;# 
   410  0F1C                     	;# 
   411  0F1D                     	;# 
   412  0F1E                     	;# 
   413  0F1F                     	;# 
   414  0F20                     	;# 
   415  0F21                     	;# 
   416  0F22                     	;# 
   417  0F23                     	;# 
   418  0F24                     	;# 
   419  0F25                     	;# 
   420  0F26                     	;# 
   421  0F27                     	;# 
   422  0F28                     	;# 
   423  0F29                     	;# 
   424  0F2A                     	;# 
   425  0F2B                     	;# 
   426  0F2C                     	;# 
   427  0F2D                     	;# 
   428  0F2E                     	;# 
   429  0F2F                     	;# 
   430  0F30                     	;# 
   431  0F31                     	;# 
   432  0F32                     	;# 
   433  0F33                     	;# 
   434  0F34                     	;# 
   435  0F35                     	;# 
   436  0F36                     	;# 
   437  0F37                     	;# 
   438  0FE4                     	;# 
   439  0FE5                     	;# 
   440  0FE6                     	;# 
   441  0FE7                     	;# 
   442  0FE8                     	;# 
   443  0FE9                     	;# 
   444  0FEA                     	;# 
   445  0FEB                     	;# 
   446  0FED                     	;# 
   447  0FEE                     	;# 
   448  0FEF                     	;# 
   449  0000                     	;# 
   450  0001                     	;# 
   451  0002                     	;# 
   452  0003                     	;# 
   453  0004                     	;# 
   454  0005                     	;# 
   455  0006                     	;# 
   456  0007                     	;# 
   457  0008                     	;# 
   458  0009                     	;# 
   459  000A                     	;# 
   460  000B                     	;# 
   461  000C                     	;# 
   462  000E                     	;# 
   463  0010                     	;# 
   464  0011                     	;# 
   465  0012                     	;# 
   466  0013                     	;# 
   467  0014                     	;# 
   468  0015                     	;# 
   469  0015                     	;# 
   470  0016                     	;# 
   471  0016                     	;# 
   472  0017                     	;# 
   473  0018                     	;# 
   474  0019                     	;# 
   475  0019                     	;# 
   476  001A                     	;# 
   477  001B                     	;# 
   478  001C                     	;# 
   479  001D                     	;# 
   480  001E                     	;# 
   481  001F                     	;# 
   482  008C                     	;# 
   483  008E                     	;# 
   484  0090                     	;# 
   485  0091                     	;# 
   486  0092                     	;# 
   487  0093                     	;# 
   488  0094                     	;# 
   489  0097                     	;# 
   490  009B                     	;# 
   491  009B                     	;# 
   492  009C                     	;# 
   493  009D                     	;# 
   494  009E                     	;# 
   495  009F                     	;# 
   496  010C                     	;# 
   497  010E                     	;# 
   498  0111                     	;# 
   499  0112                     	;# 
   500  0113                     	;# 
   501  0114                     	;# 
   502  0115                     	;# 
   503  0116                     	;# 
   504  0117                     	;# 
   505  0118                     	;# 
   506  0119                     	;# 
   507  018C                     	;# 
   508  018E                     	;# 
   509  0199                     	;# 
   510  0199                     	;# 
   511  0199                     	;# 
   512  019A                     	;# 
   513  019A                     	;# 
   514  019A                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019B                     	;# 
   520  019C                     	;# 
   521  019C                     	;# 
   522  019C                     	;# 
   523  019D                     	;# 
   524  019D                     	;# 
   525  019D                     	;# 
   526  019E                     	;# 
   527  019E                     	;# 
   528  019E                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  019F                     	;# 
   533  019F                     	;# 
   534  020C                     	;# 
   535  020E                     	;# 
   536  0211                     	;# 
   537  0211                     	;# 
   538  0212                     	;# 
   539  0212                     	;# 
   540  0213                     	;# 
   541  0213                     	;# 
   542  0214                     	;# 
   543  0214                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0215                     	;# 
   548  0216                     	;# 
   549  0216                     	;# 
   550  0217                     	;# 
   551  0217                     	;# 
   552  0219                     	;# 
   553  021A                     	;# 
   554  021B                     	;# 
   555  021C                     	;# 
   556  021D                     	;# 
   557  021D                     	;# 
   558  021E                     	;# 
   559  021F                     	;# 
   560  028C                     	;# 
   561  028E                     	;# 
   562  0291                     	;# 
   563  0291                     	;# 
   564  0292                     	;# 
   565  0293                     	;# 
   566  0294                     	;# 
   567  0295                     	;# 
   568  0295                     	;# 
   569  0296                     	;# 
   570  0297                     	;# 
   571  0298                     	;# 
   572  029F                     	;# 
   573  030C                     	;# 
   574  030E                     	;# 
   575  0311                     	;# 
   576  0311                     	;# 
   577  0312                     	;# 
   578  0313                     	;# 
   579  0314                     	;# 
   580  0315                     	;# 
   581  0315                     	;# 
   582  0316                     	;# 
   583  0317                     	;# 
   584  0318                     	;# 
   585  038C                     	;# 
   586  038E                     	;# 
   587  0391                     	;# 
   588  0392                     	;# 
   589  0393                     	;# 
   590  0397                     	;# 
   591  0398                     	;# 
   592  0399                     	;# 
   593  039A                     	;# 
   594  039C                     	;# 
   595  039D                     	;# 
   596  039E                     	;# 
   597  039F                     	;# 
   598  0411                     	;# 
   599  0411                     	;# 
   600  0412                     	;# 
   601  0413                     	;# 
   602  0414                     	;# 
   603  0415                     	;# 
   604  0416                     	;# 
   605  0417                     	;# 
   606  0418                     	;# 
   607  0418                     	;# 
   608  0419                     	;# 
   609  041A                     	;# 
   610  041B                     	;# 
   611  041C                     	;# 
   612  041D                     	;# 
   613  041E                     	;# 
   614  041F                     	;# 
   615  0498                     	;# 
   616  0498                     	;# 
   617  0499                     	;# 
   618  049A                     	;# 
   619  049B                     	;# 
   620  049B                     	;# 
   621  049C                     	;# 
   622  049D                     	;# 
   623  049E                     	;# 
   624  049F                     	;# 
   625  0617                     	;# 
   626  0618                     	;# 
   627  0619                     	;# 
   628  0619                     	;# 
   629  061A                     	;# 
   630  061B                     	;# 
   631  061C                     	;# 
   632  061C                     	;# 
   633  061F                     	;# 
   634  0691                     	;# 
   635  0692                     	;# 
   636  0693                     	;# 
   637  0694                     	;# 
   638  0695                     	;# 
   639  0696                     	;# 
   640  0697                     	;# 
   641  0698                     	;# 
   642  0699                     	;# 
   643  0711                     	;# 
   644  0712                     	;# 
   645  0713                     	;# 
   646  0714                     	;# 
   647  0715                     	;# 
   648  0716                     	;# 
   649  0717                     	;# 
   650  0718                     	;# 
   651  0719                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0891                     	;# 
   656  0891                     	;# 
   657  0891                     	;# 
   658  0892                     	;# 
   659  0892                     	;# 
   660  0892                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0893                     	;# 
   665  0893                     	;# 
   666  0893                     	;# 
   667  0894                     	;# 
   668  0894                     	;# 
   669  0894                     	;# 
   670  0895                     	;# 
   671  0895                     	;# 
   672  0895                     	;# 
   673  0896                     	;# 
   674  0896                     	;# 
   675  0896                     	;# 
   676  089B                     	;# 
   677  0911                     	;# 
   678  0912                     	;# 
   679  0913                     	;# 
   680  0914                     	;# 
   681  0915                     	;# 
   682  0916                     	;# 
   683  0918                     	;# 
   684  0919                     	;# 
   685  091A                     	;# 
   686  091B                     	;# 
   687  091C                     	;# 
   688  091D                     	;# 
   689  091E                     	;# 
   690  091F                     	;# 
   691  0E0F                     	;# 
   692  0E10                     	;# 
   693  0E11                     	;# 
   694  0E12                     	;# 
   695  0E13                     	;# 
   696  0E14                     	;# 
   697  0E15                     	;# 
   698  0E16                     	;# 
   699  0E17                     	;# 
   700  0E18                     	;# 
   701  0E19                     	;# 
   702  0E1A                     	;# 
   703  0E1B                     	;# 
   704  0E1C                     	;# 
   705  0E1D                     	;# 
   706  0E1E                     	;# 
   707  0E1F                     	;# 
   708  0E20                     	;# 
   709  0E21                     	;# 
   710  0E22                     	;# 
   711  0E24                     	;# 
   712  0E25                     	;# 
   713  0E28                     	;# 
   714  0E29                     	;# 
   715  0E2A                     	;# 
   716  0E2B                     	;# 
   717  0E2C                     	;# 
   718  0E2D                     	;# 
   719  0E2E                     	;# 
   720  0E2F                     	;# 
   721  0E90                     	;# 
   722  0E91                     	;# 
   723  0E92                     	;# 
   724  0E94                     	;# 
   725  0E95                     	;# 
   726  0EA0                     	;# 
   727  0EA1                     	;# 
   728  0EA2                     	;# 
   729  0EA3                     	;# 
   730  0EA4                     	;# 
   731  0EA5                     	;# 
   732  0F0F                     	;# 
   733  0F10                     	;# 
   734  0F11                     	;# 
   735  0F12                     	;# 
   736  0F13                     	;# 
   737  0F14                     	;# 
   738  0F15                     	;# 
   739  0F16                     	;# 
   740  0F17                     	;# 
   741  0F18                     	;# 
   742  0F19                     	;# 
   743  0F1A                     	;# 
   744  0F1B                     	;# 
   745  0F1C                     	;# 
   746  0F1D                     	;# 
   747  0F1E                     	;# 
   748  0F1F                     	;# 
   749  0F20                     	;# 
   750  0F21                     	;# 
   751  0F22                     	;# 
   752  0F23                     	;# 
   753  0F24                     	;# 
   754  0F25                     	;# 
   755  0F26                     	;# 
   756  0F27                     	;# 
   757  0F28                     	;# 
   758  0F29                     	;# 
   759  0F2A                     	;# 
   760  0F2B                     	;# 
   761  0F2C                     	;# 
   762  0F2D                     	;# 
   763  0F2E                     	;# 
   764  0F2F                     	;# 
   765  0F30                     	;# 
   766  0F31                     	;# 
   767  0F32                     	;# 
   768  0F33                     	;# 
   769  0F34                     	;# 
   770  0F35                     	;# 
   771  0F36                     	;# 
   772  0F37                     	;# 
   773  0FE4                     	;# 
   774  0FE5                     	;# 
   775  0FE6                     	;# 
   776  0FE7                     	;# 
   777  0FE8                     	;# 
   778  0FE9                     	;# 
   779  0FEA                     	;# 
   780  0FEB                     	;# 
   781  0FED                     	;# 
   782  0FEE                     	;# 
   783  0FEF                     	;# 
   784  0000                     	;# 
   785  0001                     	;# 
   786  0002                     	;# 
   787  0003                     	;# 
   788  0004                     	;# 
   789  0005                     	;# 
   790  0006                     	;# 
   791  0007                     	;# 
   792  0008                     	;# 
   793  0009                     	;# 
   794  000A                     	;# 
   795  000B                     	;# 
   796  000C                     	;# 
   797  000E                     	;# 
   798  0010                     	;# 
   799  0011                     	;# 
   800  0012                     	;# 
   801  0013                     	;# 
   802  0014                     	;# 
   803  0015                     	;# 
   804  0015                     	;# 
   805  0016                     	;# 
   806  0016                     	;# 
   807  0017                     	;# 
   808  0018                     	;# 
   809  0019                     	;# 
   810  0019                     	;# 
   811  001A                     	;# 
   812  001B                     	;# 
   813  001C                     	;# 
   814  001D                     	;# 
   815  001E                     	;# 
   816  001F                     	;# 
   817  008C                     	;# 
   818  008E                     	;# 
   819  0090                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0094                     	;# 
   824  0097                     	;# 
   825  009B                     	;# 
   826  009B                     	;# 
   827  009C                     	;# 
   828  009D                     	;# 
   829  009E                     	;# 
   830  009F                     	;# 
   831  010C                     	;# 
   832  010E                     	;# 
   833  0111                     	;# 
   834  0112                     	;# 
   835  0113                     	;# 
   836  0114                     	;# 
   837  0115                     	;# 
   838  0116                     	;# 
   839  0117                     	;# 
   840  0118                     	;# 
   841  0119                     	;# 
   842  018C                     	;# 
   843  018E                     	;# 
   844  0199                     	;# 
   845  0199                     	;# 
   846  0199                     	;# 
   847  019A                     	;# 
   848  019A                     	;# 
   849  019A                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019C                     	;# 
   856  019C                     	;# 
   857  019C                     	;# 
   858  019D                     	;# 
   859  019D                     	;# 
   860  019D                     	;# 
   861  019E                     	;# 
   862  019E                     	;# 
   863  019E                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  019F                     	;# 
   869  020C                     	;# 
   870  020E                     	;# 
   871  0211                     	;# 
   872  0211                     	;# 
   873  0212                     	;# 
   874  0212                     	;# 
   875  0213                     	;# 
   876  0213                     	;# 
   877  0214                     	;# 
   878  0214                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0215                     	;# 
   882  0215                     	;# 
   883  0216                     	;# 
   884  0216                     	;# 
   885  0217                     	;# 
   886  0217                     	;# 
   887  0219                     	;# 
   888  021A                     	;# 
   889  021B                     	;# 
   890  021C                     	;# 
   891  021D                     	;# 
   892  021D                     	;# 
   893  021E                     	;# 
   894  021F                     	;# 
   895  028C                     	;# 
   896  028E                     	;# 
   897  0291                     	;# 
   898  0291                     	;# 
   899  0292                     	;# 
   900  0293                     	;# 
   901  0294                     	;# 
   902  0295                     	;# 
   903  0295                     	;# 
   904  0296                     	;# 
   905  0297                     	;# 
   906  0298                     	;# 
   907  029F                     	;# 
   908  030C                     	;# 
   909  030E                     	;# 
   910  0311                     	;# 
   911  0311                     	;# 
   912  0312                     	;# 
   913  0313                     	;# 
   914  0314                     	;# 
   915  0315                     	;# 
   916  0315                     	;# 
   917  0316                     	;# 
   918  0317                     	;# 
   919  0318                     	;# 
   920  038C                     	;# 
   921  038E                     	;# 
   922  0391                     	;# 
   923  0392                     	;# 
   924  0393                     	;# 
   925  0397                     	;# 
   926  0398                     	;# 
   927  0399                     	;# 
   928  039A                     	;# 
   929  039C                     	;# 
   930  039D                     	;# 
   931  039E                     	;# 
   932  039F                     	;# 
   933  0411                     	;# 
   934  0411                     	;# 
   935  0412                     	;# 
   936  0413                     	;# 
   937  0414                     	;# 
   938  0415                     	;# 
   939  0416                     	;# 
   940  0417                     	;# 
   941  0418                     	;# 
   942  0418                     	;# 
   943  0419                     	;# 
   944  041A                     	;# 
   945  041B                     	;# 
   946  041C                     	;# 
   947  041D                     	;# 
   948  041E                     	;# 
   949  041F                     	;# 
   950  0498                     	;# 
   951  0498                     	;# 
   952  0499                     	;# 
   953  049A                     	;# 
   954  049B                     	;# 
   955  049B                     	;# 
   956  049C                     	;# 
   957  049D                     	;# 
   958  049E                     	;# 
   959  049F                     	;# 
   960  0617                     	;# 
   961  0618                     	;# 
   962  0619                     	;# 
   963  0619                     	;# 
   964  061A                     	;# 
   965  061B                     	;# 
   966  061C                     	;# 
   967  061C                     	;# 
   968  061F                     	;# 
   969  0691                     	;# 
   970  0692                     	;# 
   971  0693                     	;# 
   972  0694                     	;# 
   973  0695                     	;# 
   974  0696                     	;# 
   975  0697                     	;# 
   976  0698                     	;# 
   977  0699                     	;# 
   978  0711                     	;# 
   979  0712                     	;# 
   980  0713                     	;# 
   981  0714                     	;# 
   982  0715                     	;# 
   983  0716                     	;# 
   984  0717                     	;# 
   985  0718                     	;# 
   986  0719                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0891                     	;# 
   992  0891                     	;# 
   993  0892                     	;# 
   994  0892                     	;# 
   995  0892                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0893                     	;# 
  1001  0893                     	;# 
  1002  0894                     	;# 
  1003  0894                     	;# 
  1004  0894                     	;# 
  1005  0895                     	;# 
  1006  0895                     	;# 
  1007  0895                     	;# 
  1008  0896                     	;# 
  1009  0896                     	;# 
  1010  0896                     	;# 
  1011  089B                     	;# 
  1012  0911                     	;# 
  1013  0912                     	;# 
  1014  0913                     	;# 
  1015  0914                     	;# 
  1016  0915                     	;# 
  1017  0916                     	;# 
  1018  0918                     	;# 
  1019  0919                     	;# 
  1020  091A                     	;# 
  1021  091B                     	;# 
  1022  091C                     	;# 
  1023  091D                     	;# 
  1024  091E                     	;# 
  1025  091F                     	;# 
  1026  0E0F                     	;# 
  1027  0E10                     	;# 
  1028  0E11                     	;# 
  1029  0E12                     	;# 
  1030  0E13                     	;# 
  1031  0E14                     	;# 
  1032  0E15                     	;# 
  1033  0E16                     	;# 
  1034  0E17                     	;# 
  1035  0E18                     	;# 
  1036  0E19                     	;# 
  1037  0E1A                     	;# 
  1038  0E1B                     	;# 
  1039  0E1C                     	;# 
  1040  0E1D                     	;# 
  1041  0E1E                     	;# 
  1042  0E1F                     	;# 
  1043  0E20                     	;# 
  1044  0E21                     	;# 
  1045  0E22                     	;# 
  1046  0E24                     	;# 
  1047  0E25                     	;# 
  1048  0E28                     	;# 
  1049  0E29                     	;# 
  1050  0E2A                     	;# 
  1051  0E2B                     	;# 
  1052  0E2C                     	;# 
  1053  0E2D                     	;# 
  1054  0E2E                     	;# 
  1055  0E2F                     	;# 
  1056  0E90                     	;# 
  1057  0E91                     	;# 
  1058  0E92                     	;# 
  1059  0E94                     	;# 
  1060  0E95                     	;# 
  1061  0EA0                     	;# 
  1062  0EA1                     	;# 
  1063  0EA2                     	;# 
  1064  0EA3                     	;# 
  1065  0EA4                     	;# 
  1066  0EA5                     	;# 
  1067  0F0F                     	;# 
  1068  0F10                     	;# 
  1069  0F11                     	;# 
  1070  0F12                     	;# 
  1071  0F13                     	;# 
  1072  0F14                     	;# 
  1073  0F15                     	;# 
  1074  0F16                     	;# 
  1075  0F17                     	;# 
  1076  0F18                     	;# 
  1077  0F19                     	;# 
  1078  0F1A                     	;# 
  1079  0F1B                     	;# 
  1080  0F1C                     	;# 
  1081  0F1D                     	;# 
  1082  0F1E                     	;# 
  1083  0F1F                     	;# 
  1084  0F20                     	;# 
  1085  0F21                     	;# 
  1086  0F22                     	;# 
  1087  0F23                     	;# 
  1088  0F24                     	;# 
  1089  0F25                     	;# 
  1090  0F26                     	;# 
  1091  0F27                     	;# 
  1092  0F28                     	;# 
  1093  0F29                     	;# 
  1094  0F2A                     	;# 
  1095  0F2B                     	;# 
  1096  0F2C                     	;# 
  1097  0F2D                     	;# 
  1098  0F2E                     	;# 
  1099  0F2F                     	;# 
  1100  0F30                     	;# 
  1101  0F31                     	;# 
  1102  0F32                     	;# 
  1103  0F33                     	;# 
  1104  0F34                     	;# 
  1105  0F35                     	;# 
  1106  0F36                     	;# 
  1107  0F37                     	;# 
  1108  0FE4                     	;# 
  1109  0FE5                     	;# 
  1110  0FE6                     	;# 
  1111  0FE7                     	;# 
  1112  0FE8                     	;# 
  1113  0FE9                     	;# 
  1114  0FEA                     	;# 
  1115  0FEB                     	;# 
  1116  0FED                     	;# 
  1117  0FEE                     	;# 
  1118  0FEF                     	;# 
  1119  0000                     	;# 
  1120  0001                     	;# 
  1121  0002                     	;# 
  1122  0003                     	;# 
  1123  0004                     	;# 
  1124  0005                     	;# 
  1125  0006                     	;# 
  1126  0007                     	;# 
  1127  0008                     	;# 
  1128  0009                     	;# 
  1129  000A                     	;# 
  1130  000B                     	;# 
  1131  000C                     	;# 
  1132  000E                     	;# 
  1133  0010                     	;# 
  1134  0011                     	;# 
  1135  0012                     	;# 
  1136  0013                     	;# 
  1137  0014                     	;# 
  1138  0015                     	;# 
  1139  0015                     	;# 
  1140  0016                     	;# 
  1141  0016                     	;# 
  1142  0017                     	;# 
  1143  0018                     	;# 
  1144  0019                     	;# 
  1145  0019                     	;# 
  1146  001A                     	;# 
  1147  001B                     	;# 
  1148  001C                     	;# 
  1149  001D                     	;# 
  1150  001E                     	;# 
  1151  001F                     	;# 
  1152  008C                     	;# 
  1153  008E                     	;# 
  1154  0090                     	;# 
  1155  0091                     	;# 
  1156  0092                     	;# 
  1157  0093                     	;# 
  1158  0094                     	;# 
  1159  0097                     	;# 
  1160  009B                     	;# 
  1161  009B                     	;# 
  1162  009C                     	;# 
  1163  009D                     	;# 
  1164  009E                     	;# 
  1165  009F                     	;# 
  1166  010C                     	;# 
  1167  010E                     	;# 
  1168  0111                     	;# 
  1169  0112                     	;# 
  1170  0113                     	;# 
  1171  0114                     	;# 
  1172  0115                     	;# 
  1173  0116                     	;# 
  1174  0117                     	;# 
  1175  0118                     	;# 
  1176  0119                     	;# 
  1177  018C                     	;# 
  1178  018E                     	;# 
  1179  0199                     	;# 
  1180  0199                     	;# 
  1181  0199                     	;# 
  1182  019A                     	;# 
  1183  019A                     	;# 
  1184  019A                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019B                     	;# 
  1190  019C                     	;# 
  1191  019C                     	;# 
  1192  019C                     	;# 
  1193  019D                     	;# 
  1194  019D                     	;# 
  1195  019D                     	;# 
  1196  019E                     	;# 
  1197  019E                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  019F                     	;# 
  1204  020C                     	;# 
  1205  020E                     	;# 
  1206  0211                     	;# 
  1207  0211                     	;# 
  1208  0212                     	;# 
  1209  0212                     	;# 
  1210  0213                     	;# 
  1211  0213                     	;# 
  1212  0214                     	;# 
  1213  0214                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0215                     	;# 
  1218  0216                     	;# 
  1219  0216                     	;# 
  1220  0217                     	;# 
  1221  0217                     	;# 
  1222  0219                     	;# 
  1223  021A                     	;# 
  1224  021B                     	;# 
  1225  021C                     	;# 
  1226  021D                     	;# 
  1227  021D                     	;# 
  1228  021E                     	;# 
  1229  021F                     	;# 
  1230  028C                     	;# 
  1231  028E                     	;# 
  1232  0291                     	;# 
  1233  0291                     	;# 
  1234  0292                     	;# 
  1235  0293                     	;# 
  1236  0294                     	;# 
  1237  0295                     	;# 
  1238  0295                     	;# 
  1239  0296                     	;# 
  1240  0297                     	;# 
  1241  0298                     	;# 
  1242  029F                     	;# 
  1243  030C                     	;# 
  1244  030E                     	;# 
  1245  0311                     	;# 
  1246  0311                     	;# 
  1247  0312                     	;# 
  1248  0313                     	;# 
  1249  0314                     	;# 
  1250  0315                     	;# 
  1251  0315                     	;# 
  1252  0316                     	;# 
  1253  0317                     	;# 
  1254  0318                     	;# 
  1255  038C                     	;# 
  1256  038E                     	;# 
  1257  0391                     	;# 
  1258  0392                     	;# 
  1259  0393                     	;# 
  1260  0397                     	;# 
  1261  0398                     	;# 
  1262  0399                     	;# 
  1263  039A                     	;# 
  1264  039C                     	;# 
  1265  039D                     	;# 
  1266  039E                     	;# 
  1267  039F                     	;# 
  1268  0411                     	;# 
  1269  0411                     	;# 
  1270  0412                     	;# 
  1271  0413                     	;# 
  1272  0414                     	;# 
  1273  0415                     	;# 
  1274  0416                     	;# 
  1275  0417                     	;# 
  1276  0418                     	;# 
  1277  0418                     	;# 
  1278  0419                     	;# 
  1279  041A                     	;# 
  1280  041B                     	;# 
  1281  041C                     	;# 
  1282  041D                     	;# 
  1283  041E                     	;# 
  1284  041F                     	;# 
  1285  0498                     	;# 
  1286  0498                     	;# 
  1287  0499                     	;# 
  1288  049A                     	;# 
  1289  049B                     	;# 
  1290  049B                     	;# 
  1291  049C                     	;# 
  1292  049D                     	;# 
  1293  049E                     	;# 
  1294  049F                     	;# 
  1295  0617                     	;# 
  1296  0618                     	;# 
  1297  0619                     	;# 
  1298  0619                     	;# 
  1299  061A                     	;# 
  1300  061B                     	;# 
  1301  061C                     	;# 
  1302  061C                     	;# 
  1303  061F                     	;# 
  1304  0691                     	;# 
  1305  0692                     	;# 
  1306  0693                     	;# 
  1307  0694                     	;# 
  1308  0695                     	;# 
  1309  0696                     	;# 
  1310  0697                     	;# 
  1311  0698                     	;# 
  1312  0699                     	;# 
  1313  0711                     	;# 
  1314  0712                     	;# 
  1315  0713                     	;# 
  1316  0714                     	;# 
  1317  0715                     	;# 
  1318  0716                     	;# 
  1319  0717                     	;# 
  1320  0718                     	;# 
  1321  0719                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0891                     	;# 
  1327  0891                     	;# 
  1328  0892                     	;# 
  1329  0892                     	;# 
  1330  0892                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0893                     	;# 
  1336  0893                     	;# 
  1337  0894                     	;# 
  1338  0894                     	;# 
  1339  0894                     	;# 
  1340  0895                     	;# 
  1341  0895                     	;# 
  1342  0895                     	;# 
  1343  0896                     	;# 
  1344  0896                     	;# 
  1345  0896                     	;# 
  1346  089B                     	;# 
  1347  0911                     	;# 
  1348  0912                     	;# 
  1349  0913                     	;# 
  1350  0914                     	;# 
  1351  0915                     	;# 
  1352  0916                     	;# 
  1353  0918                     	;# 
  1354  0919                     	;# 
  1355  091A                     	;# 
  1356  091B                     	;# 
  1357  091C                     	;# 
  1358  091D                     	;# 
  1359  091E                     	;# 
  1360  091F                     	;# 
  1361  0E0F                     	;# 
  1362  0E10                     	;# 
  1363  0E11                     	;# 
  1364  0E12                     	;# 
  1365  0E13                     	;# 
  1366  0E14                     	;# 
  1367  0E15                     	;# 
  1368  0E16                     	;# 
  1369  0E17                     	;# 
  1370  0E18                     	;# 
  1371  0E19                     	;# 
  1372  0E1A                     	;# 
  1373  0E1B                     	;# 
  1374  0E1C                     	;# 
  1375  0E1D                     	;# 
  1376  0E1E                     	;# 
  1377  0E1F                     	;# 
  1378  0E20                     	;# 
  1379  0E21                     	;# 
  1380  0E22                     	;# 
  1381  0E24                     	;# 
  1382  0E25                     	;# 
  1383  0E28                     	;# 
  1384  0E29                     	;# 
  1385  0E2A                     	;# 
  1386  0E2B                     	;# 
  1387  0E2C                     	;# 
  1388  0E2D                     	;# 
  1389  0E2E                     	;# 
  1390  0E2F                     	;# 
  1391  0E90                     	;# 
  1392  0E91                     	;# 
  1393  0E92                     	;# 
  1394  0E94                     	;# 
  1395  0E95                     	;# 
  1396  0EA0                     	;# 
  1397  0EA1                     	;# 
  1398  0EA2                     	;# 
  1399  0EA3                     	;# 
  1400  0EA4                     	;# 
  1401  0EA5                     	;# 
  1402  0F0F                     	;# 
  1403  0F10                     	;# 
  1404  0F11                     	;# 
  1405  0F12                     	;# 
  1406  0F13                     	;# 
  1407  0F14                     	;# 
  1408  0F15                     	;# 
  1409  0F16                     	;# 
  1410  0F17                     	;# 
  1411  0F18                     	;# 
  1412  0F19                     	;# 
  1413  0F1A                     	;# 
  1414  0F1B                     	;# 
  1415  0F1C                     	;# 
  1416  0F1D                     	;# 
  1417  0F1E                     	;# 
  1418  0F1F                     	;# 
  1419  0F20                     	;# 
  1420  0F21                     	;# 
  1421  0F22                     	;# 
  1422  0F23                     	;# 
  1423  0F24                     	;# 
  1424  0F25                     	;# 
  1425  0F26                     	;# 
  1426  0F27                     	;# 
  1427  0F28                     	;# 
  1428  0F29                     	;# 
  1429  0F2A                     	;# 
  1430  0F2B                     	;# 
  1431  0F2C                     	;# 
  1432  0F2D                     	;# 
  1433  0F2E                     	;# 
  1434  0F2F                     	;# 
  1435  0F30                     	;# 
  1436  0F31                     	;# 
  1437  0F32                     	;# 
  1438  0F33                     	;# 
  1439  0F34                     	;# 
  1440  0F35                     	;# 
  1441  0F36                     	;# 
  1442  0F37                     	;# 
  1443  0FE4                     	;# 
  1444  0FE5                     	;# 
  1445  0FE6                     	;# 
  1446  0FE7                     	;# 
  1447  0FE8                     	;# 
  1448  0FE9                     	;# 
  1449  0FEA                     	;# 
  1450  0FEB                     	;# 
  1451  0FED                     	;# 
  1452  0FEE                     	;# 
  1453  0FEF                     	;# 
  1454  0000                     	;# 
  1455  0001                     	;# 
  1456  0002                     	;# 
  1457  0003                     	;# 
  1458  0004                     	;# 
  1459  0005                     	;# 
  1460  0006                     	;# 
  1461  0007                     	;# 
  1462  0008                     	;# 
  1463  0009                     	;# 
  1464  000A                     	;# 
  1465  000B                     	;# 
  1466  000C                     	;# 
  1467  000E                     	;# 
  1468  0010                     	;# 
  1469  0011                     	;# 
  1470  0012                     	;# 
  1471  0013                     	;# 
  1472  0014                     	;# 
  1473  0015                     	;# 
  1474  0015                     	;# 
  1475  0016                     	;# 
  1476  0016                     	;# 
  1477  0017                     	;# 
  1478  0018                     	;# 
  1479  0019                     	;# 
  1480  0019                     	;# 
  1481  001A                     	;# 
  1482  001B                     	;# 
  1483  001C                     	;# 
  1484  001D                     	;# 
  1485  001E                     	;# 
  1486  001F                     	;# 
  1487  008C                     	;# 
  1488  008E                     	;# 
  1489  0090                     	;# 
  1490  0091                     	;# 
  1491  0092                     	;# 
  1492  0093                     	;# 
  1493  0094                     	;# 
  1494  0097                     	;# 
  1495  009B                     	;# 
  1496  009B                     	;# 
  1497  009C                     	;# 
  1498  009D                     	;# 
  1499  009E                     	;# 
  1500  009F                     	;# 
  1501  010C                     	;# 
  1502  010E                     	;# 
  1503  0111                     	;# 
  1504  0112                     	;# 
  1505  0113                     	;# 
  1506  0114                     	;# 
  1507  0115                     	;# 
  1508  0116                     	;# 
  1509  0117                     	;# 
  1510  0118                     	;# 
  1511  0119                     	;# 
  1512  018C                     	;# 
  1513  018E                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  0199                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019A                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019B                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019C                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019D                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019E                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  019F                     	;# 
  1538  019F                     	;# 
  1539  020C                     	;# 
  1540  020E                     	;# 
  1541  0211                     	;# 
  1542  0211                     	;# 
  1543  0212                     	;# 
  1544  0212                     	;# 
  1545  0213                     	;# 
  1546  0213                     	;# 
  1547  0214                     	;# 
  1548  0214                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0216                     	;# 
  1554  0216                     	;# 
  1555  0217                     	;# 
  1556  0217                     	;# 
  1557  0219                     	;# 
  1558  021A                     	;# 
  1559  021B                     	;# 
  1560  021C                     	;# 
  1561  021D                     	;# 
  1562  021D                     	;# 
  1563  021E                     	;# 
  1564  021F                     	;# 
  1565  028C                     	;# 
  1566  028E                     	;# 
  1567  0291                     	;# 
  1568  0291                     	;# 
  1569  0292                     	;# 
  1570  0293                     	;# 
  1571  0294                     	;# 
  1572  0295                     	;# 
  1573  0295                     	;# 
  1574  0296                     	;# 
  1575  0297                     	;# 
  1576  0298                     	;# 
  1577  029F                     	;# 
  1578  030C                     	;# 
  1579  030E                     	;# 
  1580  0311                     	;# 
  1581  0311                     	;# 
  1582  0312                     	;# 
  1583  0313                     	;# 
  1584  0314                     	;# 
  1585  0315                     	;# 
  1586  0315                     	;# 
  1587  0316                     	;# 
  1588  0317                     	;# 
  1589  0318                     	;# 
  1590  038C                     	;# 
  1591  038E                     	;# 
  1592  0391                     	;# 
  1593  0392                     	;# 
  1594  0393                     	;# 
  1595  0397                     	;# 
  1596  0398                     	;# 
  1597  0399                     	;# 
  1598  039A                     	;# 
  1599  039C                     	;# 
  1600  039D                     	;# 
  1601  039E                     	;# 
  1602  039F                     	;# 
  1603  0411                     	;# 
  1604  0411                     	;# 
  1605  0412                     	;# 
  1606  0413                     	;# 
  1607  0414                     	;# 
  1608  0415                     	;# 
  1609  0416                     	;# 
  1610  0417                     	;# 
  1611  0418                     	;# 
  1612  0418                     	;# 
  1613  0419                     	;# 
  1614  041A                     	;# 
  1615  041B                     	;# 
  1616  041C                     	;# 
  1617  041D                     	;# 
  1618  041E                     	;# 
  1619  041F                     	;# 
  1620  0498                     	;# 
  1621  0498                     	;# 
  1622  0499                     	;# 
  1623  049A                     	;# 
  1624  049B                     	;# 
  1625  049B                     	;# 
  1626  049C                     	;# 
  1627  049D                     	;# 
  1628  049E                     	;# 
  1629  049F                     	;# 
  1630  0617                     	;# 
  1631  0618                     	;# 
  1632  0619                     	;# 
  1633  0619                     	;# 
  1634  061A                     	;# 
  1635  061B                     	;# 
  1636  061C                     	;# 
  1637  061C                     	;# 
  1638  061F                     	;# 
  1639  0691                     	;# 
  1640  0692                     	;# 
  1641  0693                     	;# 
  1642  0694                     	;# 
  1643  0695                     	;# 
  1644  0696                     	;# 
  1645  0697                     	;# 
  1646  0698                     	;# 
  1647  0699                     	;# 
  1648  0711                     	;# 
  1649  0712                     	;# 
  1650  0713                     	;# 
  1651  0714                     	;# 
  1652  0715                     	;# 
  1653  0716                     	;# 
  1654  0717                     	;# 
  1655  0718                     	;# 
  1656  0719                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0891                     	;# 
  1662  0891                     	;# 
  1663  0892                     	;# 
  1664  0892                     	;# 
  1665  0892                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0893                     	;# 
  1671  0893                     	;# 
  1672  0894                     	;# 
  1673  0894                     	;# 
  1674  0894                     	;# 
  1675  0895                     	;# 
  1676  0895                     	;# 
  1677  0895                     	;# 
  1678  0896                     	;# 
  1679  0896                     	;# 
  1680  0896                     	;# 
  1681  089B                     	;# 
  1682  0911                     	;# 
  1683  0912                     	;# 
  1684  0913                     	;# 
  1685  0914                     	;# 
  1686  0915                     	;# 
  1687  0916                     	;# 
  1688  0918                     	;# 
  1689  0919                     	;# 
  1690  091A                     	;# 
  1691  091B                     	;# 
  1692  091C                     	;# 
  1693  091D                     	;# 
  1694  091E                     	;# 
  1695  091F                     	;# 
  1696  0E0F                     	;# 
  1697  0E10                     	;# 
  1698  0E11                     	;# 
  1699  0E12                     	;# 
  1700  0E13                     	;# 
  1701  0E14                     	;# 
  1702  0E15                     	;# 
  1703  0E16                     	;# 
  1704  0E17                     	;# 
  1705  0E18                     	;# 
  1706  0E19                     	;# 
  1707  0E1A                     	;# 
  1708  0E1B                     	;# 
  1709  0E1C                     	;# 
  1710  0E1D                     	;# 
  1711  0E1E                     	;# 
  1712  0E1F                     	;# 
  1713  0E20                     	;# 
  1714  0E21                     	;# 
  1715  0E22                     	;# 
  1716  0E24                     	;# 
  1717  0E25                     	;# 
  1718  0E28                     	;# 
  1719  0E29                     	;# 
  1720  0E2A                     	;# 
  1721  0E2B                     	;# 
  1722  0E2C                     	;# 
  1723  0E2D                     	;# 
  1724  0E2E                     	;# 
  1725  0E2F                     	;# 
  1726  0E90                     	;# 
  1727  0E91                     	;# 
  1728  0E92                     	;# 
  1729  0E94                     	;# 
  1730  0E95                     	;# 
  1731  0EA0                     	;# 
  1732  0EA1                     	;# 
  1733  0EA2                     	;# 
  1734  0EA3                     	;# 
  1735  0EA4                     	;# 
  1736  0EA5                     	;# 
  1737  0F0F                     	;# 
  1738  0F10                     	;# 
  1739  0F11                     	;# 
  1740  0F12                     	;# 
  1741  0F13                     	;# 
  1742  0F14                     	;# 
  1743  0F15                     	;# 
  1744  0F16                     	;# 
  1745  0F17                     	;# 
  1746  0F18                     	;# 
  1747  0F19                     	;# 
  1748  0F1A                     	;# 
  1749  0F1B                     	;# 
  1750  0F1C                     	;# 
  1751  0F1D                     	;# 
  1752  0F1E                     	;# 
  1753  0F1F                     	;# 
  1754  0F20                     	;# 
  1755  0F21                     	;# 
  1756  0F22                     	;# 
  1757  0F23                     	;# 
  1758  0F24                     	;# 
  1759  0F25                     	;# 
  1760  0F26                     	;# 
  1761  0F27                     	;# 
  1762  0F28                     	;# 
  1763  0F29                     	;# 
  1764  0F2A                     	;# 
  1765  0F2B                     	;# 
  1766  0F2C                     	;# 
  1767  0F2D                     	;# 
  1768  0F2E                     	;# 
  1769  0F2F                     	;# 
  1770  0F30                     	;# 
  1771  0F31                     	;# 
  1772  0F32                     	;# 
  1773  0F33                     	;# 
  1774  0F34                     	;# 
  1775  0F35                     	;# 
  1776  0F36                     	;# 
  1777  0F37                     	;# 
  1778  0FE4                     	;# 
  1779  0FE5                     	;# 
  1780  0FE6                     	;# 
  1781  0FE7                     	;# 
  1782  0FE8                     	;# 
  1783  0FE9                     	;# 
  1784  0FEA                     	;# 
  1785  0FEB                     	;# 
  1786  0FED                     	;# 
  1787  0FEE                     	;# 
  1788  0FEF                     	;# 
  1789  0000                     	;# 
  1790  0001                     	;# 
  1791  0002                     	;# 
  1792  0003                     	;# 
  1793  0004                     	;# 
  1794  0005                     	;# 
  1795  0006                     	;# 
  1796  0007                     	;# 
  1797  0008                     	;# 
  1798  0009                     	;# 
  1799  000A                     	;# 
  1800  000B                     	;# 
  1801  000C                     	;# 
  1802  000E                     	;# 
  1803  0010                     	;# 
  1804  0011                     	;# 
  1805  0012                     	;# 
  1806  0013                     	;# 
  1807  0014                     	;# 
  1808  0015                     	;# 
  1809  0015                     	;# 
  1810  0016                     	;# 
  1811  0016                     	;# 
  1812  0017                     	;# 
  1813  0018                     	;# 
  1814  0019                     	;# 
  1815  0019                     	;# 
  1816  001A                     	;# 
  1817  001B                     	;# 
  1818  001C                     	;# 
  1819  001D                     	;# 
  1820  001E                     	;# 
  1821  001F                     	;# 
  1822  008C                     	;# 
  1823  008E                     	;# 
  1824  0090                     	;# 
  1825  0091                     	;# 
  1826  0092                     	;# 
  1827  0093                     	;# 
  1828  0094                     	;# 
  1829  0097                     	;# 
  1830  009B                     	;# 
  1831  009B                     	;# 
  1832  009C                     	;# 
  1833  009D                     	;# 
  1834  009E                     	;# 
  1835  009F                     	;# 
  1836  010C                     	;# 
  1837  010E                     	;# 
  1838  0111                     	;# 
  1839  0112                     	;# 
  1840  0113                     	;# 
  1841  0114                     	;# 
  1842  0115                     	;# 
  1843  0116                     	;# 
  1844  0117                     	;# 
  1845  0118                     	;# 
  1846  0119                     	;# 
  1847  018C                     	;# 
  1848  018E                     	;# 
  1849  0199                     	;# 
  1850  0199                     	;# 
  1851  0199                     	;# 
  1852  019A                     	;# 
  1853  019A                     	;# 
  1854  019A                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019B                     	;# 
  1860  019C                     	;# 
  1861  019C                     	;# 
  1862  019C                     	;# 
  1863  019D                     	;# 
  1864  019D                     	;# 
  1865  019D                     	;# 
  1866  019E                     	;# 
  1867  019E                     	;# 
  1868  019E                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  019F                     	;# 
  1874  020C                     	;# 
  1875  020E                     	;# 
  1876  0211                     	;# 
  1877  0211                     	;# 
  1878  0212                     	;# 
  1879  0212                     	;# 
  1880  0213                     	;# 
  1881  0213                     	;# 
  1882  0214                     	;# 
  1883  0214                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0216                     	;# 
  1889  0216                     	;# 
  1890  0217                     	;# 
  1891  0217                     	;# 
  1892  0219                     	;# 
  1893  021A                     	;# 
  1894  021B                     	;# 
  1895  021C                     	;# 
  1896  021D                     	;# 
  1897  021D                     	;# 
  1898  021E                     	;# 
  1899  021F                     	;# 
  1900  028C                     	;# 
  1901  028E                     	;# 
  1902  0291                     	;# 
  1903  0291                     	;# 
  1904  0292                     	;# 
  1905  0293                     	;# 
  1906  0294                     	;# 
  1907  0295                     	;# 
  1908  0295                     	;# 
  1909  0296                     	;# 
  1910  0297                     	;# 
  1911  0298                     	;# 
  1912  029F                     	;# 
  1913  030C                     	;# 
  1914  030E                     	;# 
  1915  0311                     	;# 
  1916  0311                     	;# 
  1917  0312                     	;# 
  1918  0313                     	;# 
  1919  0314                     	;# 
  1920  0315                     	;# 
  1921  0315                     	;# 
  1922  0316                     	;# 
  1923  0317                     	;# 
  1924  0318                     	;# 
  1925  038C                     	;# 
  1926  038E                     	;# 
  1927  0391                     	;# 
  1928  0392                     	;# 
  1929  0393                     	;# 
  1930  0397                     	;# 
  1931  0398                     	;# 
  1932  0399                     	;# 
  1933  039A                     	;# 
  1934  039C                     	;# 
  1935  039D                     	;# 
  1936  039E                     	;# 
  1937  039F                     	;# 
  1938  0411                     	;# 
  1939  0411                     	;# 
  1940  0412                     	;# 
  1941  0413                     	;# 
  1942  0414                     	;# 
  1943  0415                     	;# 
  1944  0416                     	;# 
  1945  0417                     	;# 
  1946  0418                     	;# 
  1947  0418                     	;# 
  1948  0419                     	;# 
  1949  041A                     	;# 
  1950  041B                     	;# 
  1951  041C                     	;# 
  1952  041D                     	;# 
  1953  041E                     	;# 
  1954  041F                     	;# 
  1955  0498                     	;# 
  1956  0498                     	;# 
  1957  0499                     	;# 
  1958  049A                     	;# 
  1959  049B                     	;# 
  1960  049B                     	;# 
  1961  049C                     	;# 
  1962  049D                     	;# 
  1963  049E                     	;# 
  1964  049F                     	;# 
  1965  0617                     	;# 
  1966  0618                     	;# 
  1967  0619                     	;# 
  1968  0619                     	;# 
  1969  061A                     	;# 
  1970  061B                     	;# 
  1971  061C                     	;# 
  1972  061C                     	;# 
  1973  061F                     	;# 
  1974  0691                     	;# 
  1975  0692                     	;# 
  1976  0693                     	;# 
  1977  0694                     	;# 
  1978  0695                     	;# 
  1979  0696                     	;# 
  1980  0697                     	;# 
  1981  0698                     	;# 
  1982  0699                     	;# 
  1983  0711                     	;# 
  1984  0712                     	;# 
  1985  0713                     	;# 
  1986  0714                     	;# 
  1987  0715                     	;# 
  1988  0716                     	;# 
  1989  0717                     	;# 
  1990  0718                     	;# 
  1991  0719                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0891                     	;# 
  1997  0891                     	;# 
  1998  0892                     	;# 
  1999  0892                     	;# 
  2000  0892                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0893                     	;# 
  2006  0893                     	;# 
  2007  0894                     	;# 
  2008  0894                     	;# 
  2009  0894                     	;# 
  2010  0895                     	;# 
  2011  0895                     	;# 
  2012  0895                     	;# 
  2013  0896                     	;# 
  2014  0896                     	;# 
  2015  0896                     	;# 
  2016  089B                     	;# 
  2017  0911                     	;# 
  2018  0912                     	;# 
  2019  0913                     	;# 
  2020  0914                     	;# 
  2021  0915                     	;# 
  2022  0916                     	;# 
  2023  0918                     	;# 
  2024  0919                     	;# 
  2025  091A                     	;# 
  2026  091B                     	;# 
  2027  091C                     	;# 
  2028  091D                     	;# 
  2029  091E                     	;# 
  2030  091F                     	;# 
  2031  0E0F                     	;# 
  2032  0E10                     	;# 
  2033  0E11                     	;# 
  2034  0E12                     	;# 
  2035  0E13                     	;# 
  2036  0E14                     	;# 
  2037  0E15                     	;# 
  2038  0E16                     	;# 
  2039  0E17                     	;# 
  2040  0E18                     	;# 
  2041  0E19                     	;# 
  2042  0E1A                     	;# 
  2043  0E1B                     	;# 
  2044  0E1C                     	;# 
  2045  0E1D                     	;# 
  2046  0E1E                     	;# 
  2047  0E1F                     	;# 
  2048  0E20                     	;# 
  2049  0E21                     	;# 
  2050  0E22                     	;# 
  2051  0E24                     	;# 
  2052  0E25                     	;# 
  2053  0E28                     	;# 
  2054  0E29                     	;# 
  2055  0E2A                     	;# 
  2056  0E2B                     	;# 
  2057  0E2C                     	;# 
  2058  0E2D                     	;# 
  2059  0E2E                     	;# 
  2060  0E2F                     	;# 
  2061  0E90                     	;# 
  2062  0E91                     	;# 
  2063  0E92                     	;# 
  2064  0E94                     	;# 
  2065  0E95                     	;# 
  2066  0EA0                     	;# 
  2067  0EA1                     	;# 
  2068  0EA2                     	;# 
  2069  0EA3                     	;# 
  2070  0EA4                     	;# 
  2071  0EA5                     	;# 
  2072  0F0F                     	;# 
  2073  0F10                     	;# 
  2074  0F11                     	;# 
  2075  0F12                     	;# 
  2076  0F13                     	;# 
  2077  0F14                     	;# 
  2078  0F15                     	;# 
  2079  0F16                     	;# 
  2080  0F17                     	;# 
  2081  0F18                     	;# 
  2082  0F19                     	;# 
  2083  0F1A                     	;# 
  2084  0F1B                     	;# 
  2085  0F1C                     	;# 
  2086  0F1D                     	;# 
  2087  0F1E                     	;# 
  2088  0F1F                     	;# 
  2089  0F20                     	;# 
  2090  0F21                     	;# 
  2091  0F22                     	;# 
  2092  0F23                     	;# 
  2093  0F24                     	;# 
  2094  0F25                     	;# 
  2095  0F26                     	;# 
  2096  0F27                     	;# 
  2097  0F28                     	;# 
  2098  0F29                     	;# 
  2099  0F2A                     	;# 
  2100  0F2B                     	;# 
  2101  0F2C                     	;# 
  2102  0F2D                     	;# 
  2103  0F2E                     	;# 
  2104  0F2F                     	;# 
  2105  0F30                     	;# 
  2106  0F31                     	;# 
  2107  0F32                     	;# 
  2108  0F33                     	;# 
  2109  0F34                     	;# 
  2110  0F35                     	;# 
  2111  0F36                     	;# 
  2112  0F37                     	;# 
  2113  0FE4                     	;# 
  2114  0FE5                     	;# 
  2115  0FE6                     	;# 
  2116  0FE7                     	;# 
  2117  0FE8                     	;# 
  2118  0FE9                     	;# 
  2119  0FEA                     	;# 
  2120  0FEB                     	;# 
  2121  0FED                     	;# 
  2122  0FEE                     	;# 
  2123  0FEF                     	;# 
  2124  0000                     	;# 
  2125  0001                     	;# 
  2126  0002                     	;# 
  2127  0003                     	;# 
  2128  0004                     	;# 
  2129  0005                     	;# 
  2130  0006                     	;# 
  2131  0007                     	;# 
  2132  0008                     	;# 
  2133  0009                     	;# 
  2134  000A                     	;# 
  2135  000B                     	;# 
  2136  000C                     	;# 
  2137  000E                     	;# 
  2138  0010                     	;# 
  2139  0011                     	;# 
  2140  0012                     	;# 
  2141  0013                     	;# 
  2142  0014                     	;# 
  2143  0015                     	;# 
  2144  0015                     	;# 
  2145  0016                     	;# 
  2146  0016                     	;# 
  2147  0017                     	;# 
  2148  0018                     	;# 
  2149  0019                     	;# 
  2150  0019                     	;# 
  2151  001A                     	;# 
  2152  001B                     	;# 
  2153  001C                     	;# 
  2154  001D                     	;# 
  2155  001E                     	;# 
  2156  001F                     	;# 
  2157  008C                     	;# 
  2158  008E                     	;# 
  2159  0090                     	;# 
  2160  0091                     	;# 
  2161  0092                     	;# 
  2162  0093                     	;# 
  2163  0094                     	;# 
  2164  0097                     	;# 
  2165  009B                     	;# 
  2166  009B                     	;# 
  2167  009C                     	;# 
  2168  009D                     	;# 
  2169  009E                     	;# 
  2170  009F                     	;# 
  2171  010C                     	;# 
  2172  010E                     	;# 
  2173  0111                     	;# 
  2174  0112                     	;# 
  2175  0113                     	;# 
  2176  0114                     	;# 
  2177  0115                     	;# 
  2178  0116                     	;# 
  2179  0117                     	;# 
  2180  0118                     	;# 
  2181  0119                     	;# 
  2182  018C                     	;# 
  2183  018E                     	;# 
  2184  0199                     	;# 
  2185  0199                     	;# 
  2186  0199                     	;# 
  2187  019A                     	;# 
  2188  019A                     	;# 
  2189  019A                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019B                     	;# 
  2194  019B                     	;# 
  2195  019C                     	;# 
  2196  019C                     	;# 
  2197  019C                     	;# 
  2198  019D                     	;# 
  2199  019D                     	;# 
  2200  019D                     	;# 
  2201  019E                     	;# 
  2202  019E                     	;# 
  2203  019E                     	;# 
  2204  019F                     	;# 
  2205  019F                     	;# 
  2206  019F                     	;# 
  2207  019F                     	;# 
  2208  019F                     	;# 
  2209  020C                     	;# 
  2210  020E                     	;# 
  2211  0211                     	;# 
  2212  0211                     	;# 
  2213  0212                     	;# 
  2214  0212                     	;# 
  2215  0213                     	;# 
  2216  0213                     	;# 
  2217  0214                     	;# 
  2218  0214                     	;# 
  2219  0215                     	;# 
  2220  0215                     	;# 
  2221  0215                     	;# 
  2222  0215                     	;# 
  2223  0216                     	;# 
  2224  0216                     	;# 
  2225  0217                     	;# 
  2226  0217                     	;# 
  2227  0219                     	;# 
  2228  021A                     	;# 
  2229  021B                     	;# 
  2230  021C                     	;# 
  2231  021D                     	;# 
  2232  021D                     	;# 
  2233  021E                     	;# 
  2234  021F                     	;# 
  2235  028C                     	;# 
  2236  028E                     	;# 
  2237  0291                     	;# 
  2238  0291                     	;# 
  2239  0292                     	;# 
  2240  0293                     	;# 
  2241  0294                     	;# 
  2242  0295                     	;# 
  2243  0295                     	;# 
  2244  0296                     	;# 
  2245  0297                     	;# 
  2246  0298                     	;# 
  2247  029F                     	;# 
  2248  030C                     	;# 
  2249  030E                     	;# 
  2250  0311                     	;# 
  2251  0311                     	;# 
  2252  0312                     	;# 
  2253  0313                     	;# 
  2254  0314                     	;# 
  2255  0315                     	;# 
  2256  0315                     	;# 
  2257  0316                     	;# 
  2258  0317                     	;# 
  2259  0318                     	;# 
  2260  038C                     	;# 
  2261  038E                     	;# 
  2262  0391                     	;# 
  2263  0392                     	;# 
  2264  0393                     	;# 
  2265  0397                     	;# 
  2266  0398                     	;# 
  2267  0399                     	;# 
  2268  039A                     	;# 
  2269  039C                     	;# 
  2270  039D                     	;# 
  2271  039E                     	;# 
  2272  039F                     	;# 
  2273  0411                     	;# 
  2274  0411                     	;# 
  2275  0412                     	;# 
  2276  0413                     	;# 
  2277  0414                     	;# 
  2278  0415                     	;# 
  2279  0416                     	;# 
  2280  0417                     	;# 
  2281  0418                     	;# 
  2282  0418                     	;# 
  2283  0419                     	;# 
  2284  041A                     	;# 
  2285  041B                     	;# 
  2286  041C                     	;# 
  2287  041D                     	;# 
  2288  041E                     	;# 
  2289  041F                     	;# 
  2290  0498                     	;# 
  2291  0498                     	;# 
  2292  0499                     	;# 
  2293  049A                     	;# 
  2294  049B                     	;# 
  2295  049B                     	;# 
  2296  049C                     	;# 
  2297  049D                     	;# 
  2298  049E                     	;# 
  2299  049F                     	;# 
  2300  0617                     	;# 
  2301  0618                     	;# 
  2302  0619                     	;# 
  2303  0619                     	;# 
  2304  061A                     	;# 
  2305  061B                     	;# 
  2306  061C                     	;# 
  2307  061C                     	;# 
  2308  061F                     	;# 
  2309  0691                     	;# 
  2310  0692                     	;# 
  2311  0693                     	;# 
  2312  0694                     	;# 
  2313  0695                     	;# 
  2314  0696                     	;# 
  2315  0697                     	;# 
  2316  0698                     	;# 
  2317  0699                     	;# 
  2318  0711                     	;# 
  2319  0712                     	;# 
  2320  0713                     	;# 
  2321  0714                     	;# 
  2322  0715                     	;# 
  2323  0716                     	;# 
  2324  0717                     	;# 
  2325  0718                     	;# 
  2326  0719                     	;# 
  2327  0891                     	;# 
  2328  0891                     	;# 
  2329  0891                     	;# 
  2330  0891                     	;# 
  2331  0891                     	;# 
  2332  0891                     	;# 
  2333  0892                     	;# 
  2334  0892                     	;# 
  2335  0892                     	;# 
  2336  0893                     	;# 
  2337  0893                     	;# 
  2338  0893                     	;# 
  2339  0893                     	;# 
  2340  0893                     	;# 
  2341  0893                     	;# 
  2342  0894                     	;# 
  2343  0894                     	;# 
  2344  0894                     	;# 
  2345  0895                     	;# 
  2346  0895                     	;# 
  2347  0895                     	;# 
  2348  0896                     	;# 
  2349  0896                     	;# 
  2350  0896                     	;# 
  2351  089B                     	;# 
  2352  0911                     	;# 
  2353  0912                     	;# 
  2354  0913                     	;# 
  2355  0914                     	;# 
  2356  0915                     	;# 
  2357  0916                     	;# 
  2358  0918                     	;# 
  2359  0919                     	;# 
  2360  091A                     	;# 
  2361  091B                     	;# 
  2362  091C                     	;# 
  2363  091D                     	;# 
  2364  091E                     	;# 
  2365  091F                     	;# 
  2366  0E0F                     	;# 
  2367  0E10                     	;# 
  2368  0E11                     	;# 
  2369  0E12                     	;# 
  2370  0E13                     	;# 
  2371  0E14                     	;# 
  2372  0E15                     	;# 
  2373  0E16                     	;# 
  2374  0E17                     	;# 
  2375  0E18                     	;# 
  2376  0E19                     	;# 
  2377  0E1A                     	;# 
  2378  0E1B                     	;# 
  2379  0E1C                     	;# 
  2380  0E1D                     	;# 
  2381  0E1E                     	;# 
  2382  0E1F                     	;# 
  2383  0E20                     	;# 
  2384  0E21                     	;# 
  2385  0E22                     	;# 
  2386  0E24                     	;# 
  2387  0E25                     	;# 
  2388  0E28                     	;# 
  2389  0E29                     	;# 
  2390  0E2A                     	;# 
  2391  0E2B                     	;# 
  2392  0E2C                     	;# 
  2393  0E2D                     	;# 
  2394  0E2E                     	;# 
  2395  0E2F                     	;# 
  2396  0E90                     	;# 
  2397  0E91                     	;# 
  2398  0E92                     	;# 
  2399  0E94                     	;# 
  2400  0E95                     	;# 
  2401  0EA0                     	;# 
  2402  0EA1                     	;# 
  2403  0EA2                     	;# 
  2404  0EA3                     	;# 
  2405  0EA4                     	;# 
  2406  0EA5                     	;# 
  2407  0F0F                     	;# 
  2408  0F10                     	;# 
  2409  0F11                     	;# 
  2410  0F12                     	;# 
  2411  0F13                     	;# 
  2412  0F14                     	;# 
  2413  0F15                     	;# 
  2414  0F16                     	;# 
  2415  0F17                     	;# 
  2416  0F18                     	;# 
  2417  0F19                     	;# 
  2418  0F1A                     	;# 
  2419  0F1B                     	;# 
  2420  0F1C                     	;# 
  2421  0F1D                     	;# 
  2422  0F1E                     	;# 
  2423  0F1F                     	;# 
  2424  0F20                     	;# 
  2425  0F21                     	;# 
  2426  0F22                     	;# 
  2427  0F23                     	;# 
  2428  0F24                     	;# 
  2429  0F25                     	;# 
  2430  0F26                     	;# 
  2431  0F27                     	;# 
  2432  0F28                     	;# 
  2433  0F29                     	;# 
  2434  0F2A                     	;# 
  2435  0F2B                     	;# 
  2436  0F2C                     	;# 
  2437  0F2D                     	;# 
  2438  0F2E                     	;# 
  2439  0F2F                     	;# 
  2440  0F30                     	;# 
  2441  0F31                     	;# 
  2442  0F32                     	;# 
  2443  0F33                     	;# 
  2444  0F34                     	;# 
  2445  0F35                     	;# 
  2446  0F36                     	;# 
  2447  0F37                     	;# 
  2448  0FE4                     	;# 
  2449  0FE5                     	;# 
  2450  0FE6                     	;# 
  2451  0FE7                     	;# 
  2452  0FE8                     	;# 
  2453  0FE9                     	;# 
  2454  0FEA                     	;# 
  2455  0FEB                     	;# 
  2456  0FED                     	;# 
  2457  0FEE                     	;# 
  2458  0FEF                     	;# 
  2459                           
  2460                           	psect	idataBANK1
  2461  07FF                     __pidataBANK1:	
  2462 ;;nrf24l01Service@width	offset	0
  2463 ;;nrf24l01Service@i	offset	1
  2464 ;;strcmp@s1	offset	0
  2465 ;;strcmp@r	offset	1
  2466 ;;strcmp@s2	offset=-1 (param)
  2467 ;;nrf24l01SendTXBuffer@packet	offset	0
  2468 ;;nrf24l01SendTXBuffer@i	offset	1
  2469 ;;nrf24l01SendTXBuffer@width	offset	2
  2470 ;;strlen@s	offset	0
  2471 ;;strlen@cp	offset	1
  2472 ;;nrf24l01SetRXMode@rxMode	offset	0
  2473 ;;nrf24l01Send@command	offset	0
  2474 ;;nrf24l01Send@data	offset=-1 (param)
  2475 ;;nrf24l01SPISend@data	offset	0
  2476 ;;memset@p	offset	0
  2477 ;;memset@p1	offset=-2 (param)
  2478 ;;memset@c	offset=-4 (param)
  2479 ;;memset@n	offset=-6 (param)
  2480 ;;nrf24l01Service@width	offset	0
  2481 ;;nrf24l01Service@i	offset	1
  2482 ;;strcmp@s1	offset	0
  2483 ;;strcmp@r	offset	1
  2484 ;;strcmp@s2	offset=-1 (param)
  2485 ;;nrf24l01SendTXBuffer@packet	offset	0
  2486 ;;nrf24l01SendTXBuffer@i	offset	1
  2487 ;;nrf24l01SendTXBuffer@width	offset	2
  2488 ;;strlen@s	offset	0
  2489 ;;strlen@cp	offset	1
  2490 ;;nrf24l01SetRXMode@rxMode	offset	0
  2491 ;;nrf24l01Send@command	offset	0
  2492 ;;nrf24l01Send@data	offset=-1 (param)
  2493 ;;nrf24l01SPISend@data	offset	0
  2494 ;;memset@p	offset	0
  2495 ;;memset@p1	offset=-2 (param)
  2496 ;;memset@c	offset=-4 (param)
  2497 ;;memset@n	offset=-6 (param)
  2498                           
  2499                           
  2500                           ;initializer for _romData
  2501  07FF  3420               	retlw	low (_romDataMap| (0+256))
  2502                           
  2503                           	psect	stringtext1
  2504  1000                     __pstringtext1:	
  2505  1000                     _dpowers:	
  2506  1000  3401               	retlw	1
  2507  1001  3400               	retlw	0
  2508  1002  3400               	retlw	0
  2509  1003  3400               	retlw	0
  2510  1004  340A               	retlw	10
  2511  1005  3400               	retlw	0
  2512  1006  3400               	retlw	0
  2513  1007  3400               	retlw	0
  2514  1008  3464               	retlw	100
  2515  1009  3400               	retlw	0
  2516  100A  3400               	retlw	0
  2517  100B  3400               	retlw	0
  2518  100C  34E8               	retlw	232
  2519  100D  3403               	retlw	3
  2520  100E  3400               	retlw	0
  2521  100F  3400               	retlw	0
  2522  1010  3410               	retlw	16
  2523  1011  3427               	retlw	39
  2524  1012  3400               	retlw	0
  2525  1013  3400               	retlw	0
  2526  1014  34A0               	retlw	160
  2527  1015  3486               	retlw	134
  2528  1016  3401               	retlw	1
  2529  1017  3400               	retlw	0
  2530  1018  3440               	retlw	64
  2531  1019  3442               	retlw	66
  2532  101A  340F               	retlw	15
  2533  101B  3400               	retlw	0
  2534  101C  3480               	retlw	128
  2535  101D  3496               	retlw	150
  2536  101E  3498               	retlw	152
  2537  101F  3400               	retlw	0
  2538  1020  3400               	retlw	0
  2539  1021  34E1               	retlw	225
  2540  1022  34F5               	retlw	245
  2541  1023  3405               	retlw	5
  2542  1024  3400               	retlw	0
  2543  1025  34CA               	retlw	202
  2544  1026  349A               	retlw	154
  2545  1027  343B               	retlw	59
  2546  1028                     __end_of_dpowers:	
  2547                           
  2548                           	psect	stringtext2
  2549  103A                     __pstringtext2:	
  2550  103A                     _n_ADDRESS_P0:	
  2551  103A  34AD               	retlw	173
  2552  103B  3487               	retlw	135
  2553  103C  3466               	retlw	102
  2554  103D  34BC               	retlw	188
  2555  103E  34BB               	retlw	187
  2556  103F                     __end_of_n_ADDRESS_P0:	
  2557                           
  2558                           	psect	stringtext3
  2559  1028                     __pstringtext3:	
  2560  1028                     _n_ADDRESS_MUL:	
  2561  1028  3421               	retlw	33
  2562  1029                     __end_of_n_ADDRESS_MUL:	
  2563  001A                     _TMR1H	set	26
  2564  0019                     _TMR1L	set	25
  2565  001C                     _T1GCONbits	set	28
  2566  001B                     _T1CONbits	set	27
  2567  000B                     _INTCONbits	set	11
  2568  0011                     _PIR1bits	set	17
  2569  0010                     _PIR0bits	set	16
  2570  000C                     _PORTAbits	set	12
  2571  000E                     _PORTCbits	set	14
  2572  0003                     _STATUSbits	set	3
  2573  0091                     _PIE1bits	set	145
  2574  009E                     _ADCON1bits	set	158
  2575  009C                     _ADRESH	set	156
  2576  009B                     _ADRESL	set	155
  2577  009D                     _ADCON0bits	set	157
  2578  0090                     _PIE0bits	set	144
  2579  0097                     _WDTCONbits	set	151
  2580  008E                     _TRISCbits	set	142
  2581  008C                     _TRISAbits	set	140
  2582  0117                     _FVRCONbits	set	279
  2583  018E                     _ANSELCbits	set	398
  2584  018C                     _ANSELAbits	set	396
  2585  018E                     _ANSELC	set	398
  2586  018C                     _ANSELA	set	396
  2587  020C                     _WPUAbits	set	524
  2588  020E                     _WPUC	set	526
  2589  020C                     _WPUA	set	524
  2590  0211                     _SSP1BUF	set	529
  2591  0214                     _SSP1STATbits	set	532
  2592  0215                     _SSP1CON1bits	set	533
  2593  028C                     _ODCONAbits	set	652
  2594  028E                     _ODCONC	set	654
  2595  028C                     _ODCONA	set	652
  2596  0391                     _IOCAPbits	set	913
  2597  038E                     _INLVLC	set	910
  2598  038C                     _INLVLA	set	908
  2599  0393                     _IOCAFbits	set	915
  2600  0896                     _NVMCON2	set	2198
  2601  0895                     _NVMCON1bits	set	2197
  2602  0893                     _NVMDATL	set	2195
  2603  0891                     _NVMADRL	set	2193
  2604  0892                     _NVMADRH	set	2194
  2605  0919                     _OSCCON1bits	set	2329
  2606  0EA0                     _RC0PPSbits	set	3744
  2607  0EA2                     _RC2PPSbits	set	3746
  2608  0EA1                     _RC1PPSbits	set	3745
  2609  1029                     STR_8:	
  2610  1029  3425               	retlw	37	;'%'
  2611  102A  346C               	retlw	108	;'l'
  2612  102B  3475               	retlw	117	;'u'
  2613  102C  342E               	retlw	46	;'.'
  2614  102D  3425               	retlw	37	;'%'
  2615  102E  3436               	retlw	54	;'6'
  2616  102F  342E               	retlw	46	;'.'
  2617  1030  3436               	retlw	54	;'6'
  2618  1031  346C               	retlw	108	;'l'
  2619  1032  3475               	retlw	117	;'u'
  2620  1033  3400               	retlw	0
  2621                           
  2622                           	psect	stringtext4
  2623  1034                     __pstringtext4:	
  2624  1034                     STR_3:	
  2625  1034  3443               	retlw	67	;'C'
  2626  1035  344F               	retlw	79	;'O'
  2627  1036  3455               	retlw	85	;'U'
  2628  1037  344E               	retlw	78	;'N'
  2629  1038  3454               	retlw	84	;'T'
  2630  1039  3400               	retlw	0
  2631                           
  2632                           	psect	stringtext5
  2633  103F                     __pstringtext5:	
  2634  103F                     STR_5:	
  2635  103F  3454               	retlw	84	;'T'
  2636  1040  3445               	retlw	69	;'E'
  2637  1041  344D               	retlw	77	;'M'
  2638  1042  3450               	retlw	80	;'P'
  2639  1043  3400               	retlw	0
  2640                           
  2641                           	psect	stringtext6
  2642  1044                     __pstringtext6:	
  2643  1044                     STR_4:	
  2644  1044  3456               	retlw	86	;'V'
  2645  1045  3442               	retlw	66	;'B'
  2646  1046  3441               	retlw	65	;'A'
  2647  1047  3454               	retlw	84	;'T'
  2648  1048  3400               	retlw	0
  2649                           
  2650                           	psect	stringtext7
  2651  1049                     __pstringtext7:	
  2652  1049                     STR_7:	
  2653  1049  3442               	retlw	66	;'B'
  2654  104A  344F               	retlw	79	;'O'
  2655  104B  344F               	retlw	79	;'O'
  2656  104C  3454               	retlw	84	;'T'
  2657  104D  3400               	retlw	0
  2658                           
  2659                           	psect	stringtext8
  2660  104E                     __pstringtext8:	
  2661  104E                     STR_6:	
  2662  104E  3455               	retlw	85	;'U'
  2663  104F  3457               	retlw	87	;'W'
  2664  1050  3454               	retlw	84	;'T'
  2665  1051  3400               	retlw	0
  2666                           
  2667                           	psect	stringtext9
  2668  1052                     __pstringtext9:	
  2669  1052                     STR_1:	
  2670  1052  342F               	retlw	47	;'/'
  2671  1053  3400               	retlw	0
  2672                           
  2673                           	psect	stringtext10
  2674  0000                     __pstringtext10:	
  2675  1052                     
  2676                           ; #config settings
  2677  0000                     
  2678                           	psect	cinit
  2679  0034                     start_initialization:	
  2680  0034                     __initialization:	
  2681                           
  2682                           ; Initialize objects allocated to BANK1
  2683  0034  0021               	movlb	1	; select bank1
  2684  0035  3187  27FF  3180   	fcall	__pidataBANK1	;fetch initializer
  2685  0038  00E9               	movwf	__pdataBANK1& (0+127)
  2686                           
  2687                           ; Clear objects allocated to BANK0
  2688  0039  0020               	movlb	0	; select bank0
  2689  003A  01E4               	clrf	__pbssBANK0& (0+127)
  2690  003B  01E5               	clrf	(__pbssBANK0+1)& (0+127)
  2691  003C  01E6               	clrf	(__pbssBANK0+2)& (0+127)
  2692  003D  01E7               	clrf	(__pbssBANK0+3)& (0+127)
  2693  003E  01E8               	clrf	(__pbssBANK0+4)& (0+127)
  2694  003F  01E9               	clrf	(__pbssBANK0+5)& (0+127)
  2695                           
  2696                           ; Clear objects allocated to BANK1
  2697  0040  30DC               	movlw	low __pbssBANK1
  2698  0041  0084               	movwf	4
  2699  0042  3000               	movlw	high __pbssBANK1
  2700  0043  0085               	movwf	5
  2701  0044  300D               	movlw	13
  2702  0045  3188  2013  3180   	fcall	clear_ram0
  2703                           
  2704                           ; Clear objects allocated to BANK2
  2705  0048  3020               	movlw	low __pbssBANK2
  2706  0049  0084               	movwf	4
  2707  004A  3001               	movlw	high __pbssBANK2
  2708  004B  0085               	movwf	5
  2709  004C  302D               	movlw	45
  2710  004D  3188  2013  3180   	fcall	clear_ram0
  2711                           
  2712                           ; Clear objects allocated to BANK3
  2713  0050  30A0               	movlw	low __pbssBANK3
  2714  0051  0084               	movwf	4
  2715  0052  3001               	movlw	high __pbssBANK3
  2716  0053  0085               	movwf	5
  2717  0054  3042               	movlw	66
  2718  0055  3188  2013         	fcall	clear_ram0
  2719  0057                     end_of_initialization:	
  2720                           ;End of C runtime variable initialization code
  2721                           
  2722  0057                     __end_of__initialization:	
  2723  0057  0020               	movlb	0
  2724                           
  2725                           ;Initialize the stack pointer (FSR1)
  2726  0058  306D               	movlw	low ___sp
  2727  0059  0086               	movwf	6
  2728  005A  3021               	movlw	high ___sp
  2729  005B  0087               	movwf	7
  2730  005C  318E  2EBE         	ljmp	_main	;jump to C main() function
  2731                           
  2732                           	psect	bssBANK0
  2733  0064                     __pbssBANK0:	
  2734  0064                     _status:	
  2735  0064                     	ds	5
  2736  0069                     _lastTXPacket:	
  2737  0069                     	ds	1
  2738                           
  2739                           	psect	bssBANK1
  2740  00DC                     __pbssBANK1:	
  2741  00DC                     _distance:	
  2742  00DC                     	ds	2
  2743  00DE                     _testCount:	
  2744  00DE                     	ds	2
  2745  00E0                     _rcount:	
  2746  00E0                     	ds	2
  2747  00E2                     _rlimit:	
  2748  00E2                     	ds	2
  2749  00E4                     _rloop:	
  2750  00E4                     	ds	2
  2751  00E6                     _counter:	
  2752  00E6                     	ds	2
  2753  00E8                     _waiting:	
  2754  00E8                     	ds	1
  2755                           
  2756                           	psect	dataBANK1
  2757  00E9                     __pdataBANK1:	
  2758  00E9                     _romData:	
  2759  00E9                     	ds	1
  2760                           
  2761                           	psect	bssBANK2
  2762  0120                     __pbssBANK2:	
  2763  0120                     _romDataMap:	
  2764  0120                     	ds	28
  2765  013C                     ftoa@buf:	
  2766  013C                     	ds	17
  2767                           
  2768                           	psect	bssBANK3
  2769  01A0                     __pbssBANK3:	
  2770  01A0                     _RXPacket:	
  2771  01A0                     	ds	33
  2772  01C1                     _TXPacket:	
  2773  01C1                     	ds	33
  2774                           
  2775                           	psect	clrtext
  2776  0813                     clear_ram0:	
  2777                           ;	Called with FSR0 containing the base address, and
  2778                           ;	WREG with the size to clear
  2779                           
  2780  0813  0064               	clrwdt	;clear the watchdog before getting into this loop
  2781  0814                     clrloop0:	
  2782  0814  0180               	clrf	0	;clear RAM location pointed to by FSR
  2783  0815  3101               	addfsr 0,1
  2784  0816  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2785  0817  2814               	goto	clrloop0	;have we reached the end yet?
  2786  0818  3400               	retlw	0	;all done for this memory range, return
  2787                           
  2788                           	psect	cstackBANK4
  2789  0220                     __pcstackBANK4:	
  2790  0220                     loop@vt:	
  2791                           
  2792                           ; 3 bytes @ 0x0
  2793  0220                     	ds	3
  2794  0223                     loop@ta:	
  2795                           
  2796                           ; 3 bytes @ 0x3
  2797  0223                     	ds	3
  2798  0226                     _loop$2273:	
  2799                           
  2800                           ; 3 bytes @ 0x6
  2801  0226                     	ds	3
  2802  0229                     _loop$2274:	
  2803                           
  2804                           ; 3 bytes @ 0x9
  2805  0229                     	ds	3
  2806  022C                     loop@packet:	
  2807                           
  2808                           ; 33 bytes @ 0xC
  2809  022C                     	ds	33
  2810                           
  2811                           	psect	cstackBANK1
  2812  00A0                     __pcstackBANK1:	
  2813  00A0                     ?_ftoa:	
  2814  00A0                     ftoa@f:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817                           
  2818                           ; 3 bytes @ 0x0
  2819  00A0                     	ds	3
  2820  00A3                     ftoa@status:	
  2821                           
  2822                           ; 1 bytes @ 0x3
  2823  00A3                     	ds	1
  2824  00A4                     ftoa@rem:	
  2825                           
  2826                           ; 4 bytes @ 0x4
  2827  00A4                     	ds	4
  2828  00A8                     ftoa@l:	
  2829                           
  2830                           ; 4 bytes @ 0x8
  2831  00A8                     	ds	4
  2832  00AC                     ftoa@cp:	
  2833                           
  2834                           ; 1 bytes @ 0xC
  2835  00AC                     	ds	1
  2836  00AD                     ?_strcat:	
  2837  00AD                     strcat@to:	
  2838                           ; 2 bytes @ 0xD
  2839                           
  2840                           
  2841                           ; 2 bytes @ 0xD
  2842  00AD                     	ds	2
  2843  00AF                     strcat@from:	
  2844                           
  2845                           ; 2 bytes @ 0xF
  2846  00AF                     	ds	2
  2847  00B1                     ?_sendMessage:	
  2848  00B1                     sendMessage@packet:	
  2849                           ; 1 bytes @ 0x11
  2850                           
  2851                           
  2852                           ; 2 bytes @ 0x11
  2853  00B1                     	ds	2
  2854  00B3                     sendMessage@topic:	
  2855                           
  2856                           ; 2 bytes @ 0x13
  2857  00B3                     	ds	2
  2858  00B5                     sendMessage@value:	
  2859                           
  2860                           ; 3 bytes @ 0x15
  2861  00B5                     	ds	3
  2862  00B8                     sendMessage@ftoaStatus:	
  2863                           
  2864                           ; 2 bytes @ 0x18
  2865  00B8                     	ds	2
  2866  00BA                     main@pipe:	
  2867                           
  2868                           ; 1 bytes @ 0x1A
  2869  00BA                     	ds	1
  2870  00BB                     main@packet:	
  2871                           
  2872                           ; 33 bytes @ 0x1B
  2873  00BB                     	ds	33
  2874                           
  2875                           	psect	cstackCOMMON
  2876  0070                     __pcstackCOMMON:	
  2877  0070                     ?_isdigit:	
  2878  0070                     ?_EEPROMWrite:	
  2879                           ; 1 bit 
  2880                           
  2881  0070                     ?_hcsr04ISR:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0070                     ??_hcsr04ISR:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_nrf24l01ISR:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ??_nrf24l01ISR:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_nrf24l01Init:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_nrf24l01SetTXPipe:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_nrf24l01SetRXPipe:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ??_nrf24l01SetRXPipe:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_hcsr04Init:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ??_hcsr04Init:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_EEPROMRead:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ??_isdigit:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ??___ftpack:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_nrf24l01InterfaceInit:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ??_nrf24l01InterfaceInit:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_resetWDT:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ??_resetWDT:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_sleepMs:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_exception:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_ISR:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_loop:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_nrf24l01GetPipe:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_main:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_nrf24l01InitRegisters:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?___bmul:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ??___lldiv:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     ??___ftge:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     ??___llmod:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     ?_strcpy:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0070                     ?___wmul:	
  2969                           ; 2 bytes @ 0x0
  2970                           
  2971  0070                     ?___lwmod:	
  2972                           ; 2 bytes @ 0x0
  2973                           
  2974  0070                     ?___awtoft:	
  2975                           ; 2 bytes @ 0x0
  2976                           
  2977  0070                     ?___lbtoft:	
  2978                           ; 3 bytes @ 0x0
  2979                           
  2980  0070                     ?___lltoft:	
  2981                           ; 3 bytes @ 0x0
  2982                           
  2983  0070                     ?___lwtoft:	
  2984                           ; 3 bytes @ 0x0
  2985                           
  2986  0070                     ___bmul@multiplicand:	
  2987                           ; 3 bytes @ 0x0
  2988                           
  2989  0070                     ___llmod@counter:	
  2990                           ; 1 bytes @ 0x0
  2991                           
  2992  0070                     _isdigit$2025:	
  2993                           ; 1 bytes @ 0x0
  2994                           
  2995  0070                     sleepMs@milliseconds:	
  2996                           ; 1 bytes @ 0x0
  2997                           
  2998  0070                     EEPROMWrite@address:	
  2999                           ; 2 bytes @ 0x0
  3000                           
  3001  0070                     EEPROMRead@address:	
  3002                           ; 2 bytes @ 0x0
  3003                           
  3004  0070                     ___wmul@multiplier:	
  3005                           ; 2 bytes @ 0x0
  3006                           
  3007  0070                     ___awtoft@c:	
  3008                           ; 2 bytes @ 0x0
  3009                           
  3010  0070                     ___lwmod@divisor:	
  3011                           ; 2 bytes @ 0x0
  3012                           
  3013  0070                     ___lwtoft@c:	
  3014                           ; 2 bytes @ 0x0
  3015                           
  3016  0070                     strcpy@to:	
  3017                           ; 2 bytes @ 0x0
  3018                           
  3019  0070                     ___lltoft@c:	
  3020                           ; 2 bytes @ 0x0
  3021                           
  3022                           
  3023                           ; 4 bytes @ 0x0
  3024  0070                     	ds	1
  3025  0071                     ??___bmul:	
  3026  0071                     nrf24l01SetRXPipe@pipe:	
  3027                           ; 1 bytes @ 0x1
  3028                           
  3029  0071                     ___bmul@product:	
  3030                           ; 1 bytes @ 0x1
  3031                           
  3032  0071                     isdigit@c:	
  3033                           ; 1 bytes @ 0x1
  3034                           
  3035                           
  3036                           ; 1 bytes @ 0x1
  3037  0071                     	ds	1
  3038  0072                     ??_EEPROMRead:	
  3039  0072                     ??_sleepMs:	
  3040                           ; 1 bytes @ 0x2
  3041                           
  3042  0072                     nrf24l01SetRXPipe@enRXAddr:	
  3043                           ; 1 bytes @ 0x2
  3044                           
  3045  0072                     EEPROMWrite@data:	
  3046                           ; 1 bytes @ 0x2
  3047                           
  3048  0072                     ___bmul@multiplier:	
  3049                           ; 1 bytes @ 0x2
  3050                           
  3051  0072                     ___wmul@multiplicand:	
  3052                           ; 1 bytes @ 0x2
  3053                           
  3054  0072                     ___lwmod@dividend:	
  3055                           ; 2 bytes @ 0x2
  3056                           
  3057  0072                     strcpy@from:	
  3058                           ; 2 bytes @ 0x2
  3059                           
  3060                           
  3061                           ; 2 bytes @ 0x2
  3062  0072                     	ds	1
  3063  0073                     ??_EEPROMWrite:	
  3064  0073                     ??_nrf24l01SetTXPipe:	
  3065                           ; 1 bytes @ 0x3
  3066                           
  3067  0073                     ??___awtoft:	
  3068                           ; 1 bytes @ 0x3
  3069                           
  3070  0073                     ??___lwtoft:	
  3071                           ; 1 bytes @ 0x3
  3072                           
  3073  0073                     sleepMs@wdtps:	
  3074                           ; 1 bytes @ 0x3
  3075                           
  3076  0073                     EEPROMWrite@GIEBitValue:	
  3077                           ; 1 bytes @ 0x3
  3078                           
  3079  0073                     ___awtoft@sign:	
  3080                           ; 1 bytes @ 0x3
  3081                           
  3082                           
  3083                           ; 1 bytes @ 0x3
  3084  0073                     	ds	1
  3085  0074                     ??_strcpy:	
  3086  0074                     ??_strcat:	
  3087                           ; 1 bytes @ 0x4
  3088                           
  3089  0074                     ??_ftoa:	
  3090                           ; 1 bytes @ 0x4
  3091                           
  3092  0074                     ??_nrf24l01SendPacket:	
  3093                           ; 1 bytes @ 0x4
  3094                           
  3095  0074                     ??_exception:	
  3096                           ; 1 bytes @ 0x4
  3097                           
  3098  0074                     ??_sendMessage:	
  3099                           ; 1 bytes @ 0x4
  3100                           
  3101  0074                     ??_loop:	
  3102                           ; 1 bytes @ 0x4
  3103                           
  3104  0074                     ??___wmul:	
  3105                           ; 1 bytes @ 0x4
  3106                           
  3107  0074                     ??___ftmul:	
  3108                           ; 1 bytes @ 0x4
  3109                           
  3110  0074                     ??___ftneg:	
  3111                           ; 1 bytes @ 0x4
  3112                           
  3113  0074                     ??___ftsub:	
  3114                           ; 1 bytes @ 0x4
  3115                           
  3116  0074                     ??___fttol:	
  3117                           ; 1 bytes @ 0x4
  3118                           
  3119  0074                     ??___lbtoft:	
  3120                           ; 1 bytes @ 0x4
  3121                           
  3122  0074                     ??___lltoft:	
  3123                           ; 1 bytes @ 0x4
  3124                           
  3125  0074                     ??___lwmod:	
  3126                           ; 1 bytes @ 0x4
  3127                           
  3128                           
  3129                           	psect	cstackBANK0
  3130  0020                     __pcstackBANK0:	
  3131                           ; 1 bytes @ 0x4
  3132                           
  3133  0020                     ??_ISR:	
  3134                           
  3135                           ; 1 bytes @ 0x0
  3136  0020                     	ds	6
  3137  0026                     ?___ftge:	
  3138  0026                     ?___ftpack:	
  3139                           ; 1 bit 
  3140                           
  3141  0026                     ?___lldiv:	
  3142                           ; 3 bytes @ 0x6
  3143                           
  3144  0026                     exception@exception:	
  3145                           ; 4 bytes @ 0x6
  3146                           
  3147  0026                     nrf24l01SetTXPipe@pipe:	
  3148                           ; 1 bytes @ 0x6
  3149                           
  3150  0026                     ___lwmod@counter:	
  3151                           ; 1 bytes @ 0x6
  3152                           
  3153  0026                     ___wmul@product:	
  3154                           ; 1 bytes @ 0x6
  3155                           
  3156  0026                     strcpy@cp:	
  3157                           ; 2 bytes @ 0x6
  3158                           
  3159  0026                     ___ftpack@arg:	
  3160                           ; 2 bytes @ 0x6
  3161                           
  3162  0026                     ___ftge@ff1:	
  3163                           ; 3 bytes @ 0x6
  3164                           
  3165  0026                     ___lldiv@divisor:	
  3166                           ; 3 bytes @ 0x6
  3167                           
  3168                           
  3169                           ; 4 bytes @ 0x6
  3170  0026                     	ds	1
  3171  0027                     ??_nrf24l01GetPipe:	
  3172  0027                     ??_nrf24l01InitRegisters:	
  3173                           ; 1 bytes @ 0x7
  3174                           
  3175                           
  3176                           ; 1 bytes @ 0x7
  3177  0027                     	ds	1
  3178  0028                     ?_nrf24l01SendPacket:	
  3179  0028                     nrf24l01GetPipe@pipe:	
  3180                           ; 1 bytes @ 0x8
  3181                           
  3182  0028                     nrf24l01InitRegisters@channel:	
  3183                           ; 1 bytes @ 0x8
  3184                           
  3185  0028                     nrf24l01SendPacket@txPacket:	
  3186                           ; 1 bytes @ 0x8
  3187                           
  3188                           
  3189                           ; 2 bytes @ 0x8
  3190  0028                     	ds	1
  3191  0029                     nrf24l01GetPipe@name:	
  3192  0029                     nrf24l01InitRegisters@setupAW:	
  3193                           ; 1 bytes @ 0x9
  3194                           
  3195  0029                     ___ftpack@exp:	
  3196                           ; 1 bytes @ 0x9
  3197                           
  3198  0029                     ___ftge@ff2:	
  3199                           ; 1 bytes @ 0x9
  3200                           
  3201                           
  3202                           ; 3 bytes @ 0x9
  3203  0029                     	ds	1
  3204  002A                     nrf24l01GetPipe@i:	
  3205  002A                     nrf24l01InitRegisters@feature:	
  3206                           ; 1 bytes @ 0xA
  3207                           
  3208  002A                     ___ftpack@sign:	
  3209                           ; 1 bytes @ 0xA
  3210                           
  3211  002A                     nrf24l01SendPacket@loopCount:	
  3212                           ; 1 bytes @ 0xA
  3213                           
  3214  002A                     ___lldiv@dividend:	
  3215                           ; 2 bytes @ 0xA
  3216                           
  3217                           
  3218                           ; 4 bytes @ 0xA
  3219  002A                     	ds	1
  3220  002B                     ?___ftadd:	
  3221  002B                     nrf24l01InitRegisters@rfSetup:	
  3222                           ; 3 bytes @ 0xB
  3223                           
  3224  002B                     ___lbtoft@c:	
  3225                           ; 1 bytes @ 0xB
  3226                           
  3227  002B                     ___lltoft@exp:	
  3228                           ; 1 bytes @ 0xB
  3229                           
  3230  002B                     ___ftadd@f1:	
  3231                           ; 1 bytes @ 0xB
  3232                           
  3233                           
  3234                           ; 3 bytes @ 0xB
  3235  002B                     	ds	1
  3236  002C                     nrf24l01InitRegisters@enAA:	
  3237                           
  3238                           ; 1 bytes @ 0xC
  3239  002C                     	ds	1
  3240  002D                     nrf24l01InitRegisters@DynPD:	
  3241                           
  3242                           ; 1 bytes @ 0xD
  3243  002D                     	ds	1
  3244  002E                     nrf24l01InitRegisters@i:	
  3245  002E                     ___ftadd@f2:	
  3246                           ; 2 bytes @ 0xE
  3247                           
  3248  002E                     ___lldiv@quotient:	
  3249                           ; 3 bytes @ 0xE
  3250                           
  3251                           
  3252                           ; 4 bytes @ 0xE
  3253  002E                     	ds	2
  3254  0030                     ??_nrf24l01Init:	
  3255                           
  3256                           ; 1 bytes @ 0x10
  3257  0030                     	ds	1
  3258  0031                     ??___ftadd:	
  3259                           
  3260                           ; 1 bytes @ 0x11
  3261  0031                     	ds	1
  3262  0032                     ___lldiv@counter:	
  3263  0032                     ___ftadd@sign:	
  3264                           ; 1 bytes @ 0x12
  3265                           
  3266                           
  3267                           ; 1 bytes @ 0x12
  3268  0032                     	ds	1
  3269  0033                     ?___llmod:	
  3270  0033                     ___ftadd@exp2:	
  3271                           ; 4 bytes @ 0x13
  3272                           
  3273  0033                     ___llmod@divisor:	
  3274                           ; 1 bytes @ 0x13
  3275                           
  3276                           
  3277                           ; 4 bytes @ 0x13
  3278  0033                     	ds	1
  3279  0034                     ___ftadd@exp1:	
  3280                           
  3281                           ; 1 bytes @ 0x14
  3282  0034                     	ds	1
  3283  0035                     ?___ftdiv:	
  3284  0035                     ?___ftsub:	
  3285                           ; 3 bytes @ 0x15
  3286                           
  3287  0035                     ___ftdiv@f2:	
  3288                           ; 3 bytes @ 0x15
  3289                           
  3290  0035                     ___ftsub@f2:	
  3291                           ; 3 bytes @ 0x15
  3292                           
  3293                           
  3294                           ; 3 bytes @ 0x15
  3295  0035                     	ds	2
  3296  0037                     ___llmod@dividend:	
  3297                           
  3298                           ; 4 bytes @ 0x17
  3299  0037                     	ds	1
  3300  0038                     ___ftdiv@f1:	
  3301  0038                     ___ftsub@f1:	
  3302                           ; 3 bytes @ 0x18
  3303                           
  3304                           
  3305                           ; 3 bytes @ 0x18
  3306  0038                     	ds	3
  3307  003B                     ??___ftdiv:	
  3308  003B                     ?_sprintf:	
  3309                           ; 1 bytes @ 0x1B
  3310                           
  3311  003B                     sprintf@f:	
  3312                           ; 2 bytes @ 0x1B
  3313                           
  3314                           
  3315                           ; 2 bytes @ 0x1B
  3316  003B                     	ds	1
  3317  003C                     ___ftdiv@cntr:	
  3318                           
  3319                           ; 1 bytes @ 0x1C
  3320  003C                     	ds	1
  3321  003D                     ___ftdiv@f3:	
  3322                           
  3323                           ; 3 bytes @ 0x1D
  3324  003D                     	ds	3
  3325  0040                     ___ftdiv@exp:	
  3326                           
  3327                           ; 1 bytes @ 0x20
  3328  0040                     	ds	1
  3329  0041                     ___ftdiv@sign:	
  3330                           
  3331                           ; 1 bytes @ 0x21
  3332  0041                     	ds	1
  3333  0042                     ?_getADCValue:	
  3334                           
  3335                           ; 3 bytes @ 0x22
  3336  0042                     	ds	3
  3337  0045                     ??_sprintf:	
  3338  0045                     ??_getADCValue:	
  3339                           ; 1 bytes @ 0x25
  3340                           
  3341                           
  3342                           ; 1 bytes @ 0x25
  3343  0045                     	ds	1
  3344  0046                     getADCValue@channel:	
  3345                           
  3346                           ; 1 bytes @ 0x26
  3347  0046                     	ds	1
  3348  0047                     getADCValue@adcLoop:	
  3349                           
  3350                           ; 1 bytes @ 0x27
  3351  0047                     	ds	1
  3352  0048                     getADCValue@adcSum:	
  3353                           
  3354                           ; 3 bytes @ 0x28
  3355  0048                     	ds	1
  3356  0049                     sprintf@flag:	
  3357                           
  3358                           ; 1 bytes @ 0x29
  3359  0049                     	ds	1
  3360  004A                     sprintf@ap:	
  3361                           
  3362                           ; 1 bytes @ 0x2A
  3363  004A                     	ds	1
  3364  004B                     ?___ftmul:	
  3365  004B                     ?___ftneg:	
  3366                           ; 3 bytes @ 0x2B
  3367                           
  3368  004B                     ___ftmul@f1:	
  3369                           ; 3 bytes @ 0x2B
  3370                           
  3371  004B                     ___ftneg@f1:	
  3372                           ; 3 bytes @ 0x2B
  3373                           
  3374  004B                     sprintf@val:	
  3375                           ; 3 bytes @ 0x2B
  3376                           
  3377                           
  3378                           ; 4 bytes @ 0x2B
  3379  004B                     	ds	3
  3380  004E                     ___ftmul@f2:	
  3381                           
  3382                           ; 3 bytes @ 0x2E
  3383  004E                     	ds	1
  3384  004F                     sprintf@sp:	
  3385                           
  3386                           ; 1 bytes @ 0x2F
  3387  004F                     	ds	1
  3388  0050                     sprintf@width:	
  3389                           
  3390                           ; 2 bytes @ 0x30
  3391  0050                     	ds	1
  3392  0051                     ___ftmul@exp:	
  3393                           
  3394                           ; 1 bytes @ 0x31
  3395  0051                     	ds	1
  3396  0052                     sprintf@prec:	
  3397  0052                     ___ftmul@f3_as_product:	
  3398                           ; 2 bytes @ 0x32
  3399                           
  3400                           
  3401                           ; 3 bytes @ 0x32
  3402  0052                     	ds	2
  3403  0054                     sprintf@c:	
  3404                           
  3405                           ; 1 bytes @ 0x34
  3406  0054                     	ds	1
  3407  0055                     ___ftmul@cntr:	
  3408                           
  3409                           ; 1 bytes @ 0x35
  3410  0055                     	ds	1
  3411  0056                     ___ftmul@sign:	
  3412                           
  3413                           ; 1 bytes @ 0x36
  3414  0056                     	ds	1
  3415  0057                     ?___fttol:	
  3416  0057                     ___fttol@f1:	
  3417                           ; 4 bytes @ 0x37
  3418                           
  3419                           
  3420                           ; 3 bytes @ 0x37
  3421  0057                     	ds	4
  3422  005B                     ___fttol@sign1:	
  3423                           
  3424                           ; 1 bytes @ 0x3B
  3425  005B                     	ds	1
  3426  005C                     ___fttol@lval:	
  3427                           
  3428                           ; 4 bytes @ 0x3C
  3429  005C                     	ds	4
  3430  0060                     ___fttol@exp1:	
  3431                           
  3432                           ; 1 bytes @ 0x40
  3433  0060                     	ds	1
  3434  0061                     strcat@cp:	
  3435                           
  3436                           ; 2 bytes @ 0x41
  3437  0061                     	ds	2
  3438  0063                     ??_main:	
  3439                           
  3440                           ; 1 bytes @ 0x43
  3441  0063                     	ds	1
  3442                           
  3443                           	psect	maintext
  3444  0EBE                     __pmaintext:	
  3445 ;;
  3446 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3447 ;;
  3448 ;; *************** function _main *****************
  3449 ;; Defined at:
  3450 ;;		line 173 in file "main.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;		None
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  packet         33   27[BANK1 ] struct .
  3455 ;;  pipe            1   26[BANK1 ] unsigned char 
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      void 
  3458 ;; Registers used:
  3459 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : B1F/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3466 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3467 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3468 ;;      Totals:         0       1      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3469 ;;Total ram usage:       35 bytes
  3470 ;; Hardware stack levels required when called:   15
  3471 ;; This function calls:
  3472 ;;		_EEPROMRead
  3473 ;;		_EEPROMWrite
  3474 ;;		___lbtoft
  3475 ;;		_hcsr04Init
  3476 ;;		_loop
  3477 ;;		_nrf24l01GetPipe
  3478 ;;		_nrf24l01Init
  3479 ;;		_nrf24l01SetRXPipe
  3480 ;;		_nrf24l01SetTXPipe
  3481 ;;		_sendMessage
  3482 ;;		_strcpy
  3483 ;; This function is called by:
  3484 ;;		Startup code after reset
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           
  3489                           ;psect for function _main
  3490  0EBE                     _main:	
  3491                           
  3492                           ;main.c: 177: ANSELA = 0x00;
  3493                           
  3494                           ;incstack = 0
  3495                           ; Regs used in _main: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  3496  0EBE  0023               	movlb	3	; select bank3
  3497  0EBF  018C               	clrf	12	;volatile
  3498                           
  3499                           ;main.c: 178: ANSELC = 0x00;
  3500  0EC0  018E               	clrf	14	;volatile
  3501                           
  3502                           ;main.c: 180: ODCONA = 0x00;
  3503  0EC1  0025               	movlb	5	; select bank5
  3504  0EC2  018C               	clrf	12	;volatile
  3505                           
  3506                           ;main.c: 181: ODCONC = 0x00;
  3507  0EC3  018E               	clrf	14	;volatile
  3508                           
  3509                           ;main.c: 186: INLVLA = 0x00;
  3510  0EC4  0027               	movlb	7	; select bank7
  3511  0EC5  018C               	clrf	12	;volatile
  3512                           
  3513                           ;main.c: 187: INLVLC = 0x00;
  3514  0EC6  018E               	clrf	14	;volatile
  3515                           
  3516                           ;main.c: 189: WPUA = 0x00;
  3517  0EC7  0024               	movlb	4	; select bank4
  3518  0EC8  018C               	clrf	12	;volatile
  3519                           
  3520                           ;main.c: 190: WPUC = 0x00;
  3521  0EC9  018E               	clrf	14	;volatile
  3522                           
  3523                           ;main.c: 192: TRISCbits.TRISC5 = 0;
  3524  0ECA  0021               	movlb	1	; select bank1
  3525  0ECB  128E               	bcf	14,5	;volatile
  3526                           
  3527                           ;main.c: 193: TRISCbits.TRISC4 = 0;
  3528  0ECC  120E               	bcf	14,4	;volatile
  3529                           
  3530                           ;main.c: 195: PORTCbits.RC4 = 0;
  3531  0ECD  0020               	movlb	0	; select bank0
  3532  0ECE  120E               	bcf	14,4	;volatile
  3533                           
  3534                           ;main.c: 202: INTCONbits.PEIE = 0;
  3535  0ECF  130B               	bcf	11,6	;volatile
  3536                           
  3537                           ;main.c: 203: INTCONbits.GIE = 0;
  3538  0ED0  138B               	bcf	11,7	;volatile
  3539                           
  3540                           ;main.c: 205: OSCCON1bits.NOSC = 0b000;
  3541  0ED1  308F               	movlw	-113
  3542  0ED2  0032               	movlb	18	; select bank18
  3543  0ED3  0599               	andwf	25,f	;volatile
  3544                           
  3545                           ;main.c: 206: OSCCON1bits.NDIV = 0b000;
  3546  0ED4  30F0               	movlw	-16
  3547  0ED5  0599               	andwf	25,f	;volatile
  3548                           
  3549                           ;main.c: 208: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3550  0ED6  300B               	movlw	11
  3551  0ED7  0020               	movlb	0	; select bank0
  3552  0ED8  00E3               	movwf	??_main
  3553  0ED9  3062               	movlw	98
  3554  0EDA                     u5417:	
  3555  0EDA  0B89               	decfsz	9,f
  3556  0EDB  2EDA               	goto	u5417
  3557  0EDC  0BE3               	decfsz	??_main,f
  3558  0EDD  2EDA               	goto	u5417
  3559  0EDE  0000               	nop
  3560                           
  3561                           ;main.c: 212: strcpy(romData->name, "UWT");
  3562  0EDF  0021               	movlb	1	; select bank1
  3563  0EE0  0869               	movf	_romData^(0+128),w
  3564  0EE1  3E01               	addlw	1
  3565  0EE2  00F0               	movwf	strcpy@to
  3566  0EE3  3001               	movlw	1
  3567  0EE4  00F1               	movwf	strcpy@to+1
  3568  0EE5  304E               	movlw	low (STR_6| (0+32768))
  3569  0EE6  00F2               	movwf	strcpy@from
  3570  0EE7  3090               	movlw	high (STR_6| (0+32768))
  3571  0EE8  00F3               	movwf	strcpy@from+1
  3572  0EE9  3188  20D9  318E   	fcall	_strcpy
  3573                           
  3574                           ;main.c: 214: nrf24l01Init();
  3575  0EEC  3189  21AB  318E   	fcall	_nrf24l01Init
  3576                           
  3577                           ;main.c: 216: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3578  0EEF  0021               	movlb	1	; select bank1
  3579  0EF0  0869               	movf	_romData^(0+128),w
  3580  0EF1  3E01               	addlw	1
  3581  0EF2  318A  22F9  318E   	fcall	_nrf24l01GetPipe
  3582  0EF5  00FF               	movwf	127
  3583  0EF6  087F               	movf	127,w
  3584  0EF7  0021               	movlb	1	; select bank1
  3585  0EF8  00BA               	movwf	main@pipe^(0+128)
  3586                           
  3587                           ;main.c: 217: nrf24l01SetTXPipe(pipe);
  3588  0EF9  083A               	movf	main@pipe^(0+128),w
  3589  0EFA  318C  242A  318E   	fcall	_nrf24l01SetTXPipe
  3590                           
  3591                           ;main.c: 218: nrf24l01SetRXPipe(pipe);
  3592  0EFD  0021               	movlb	1	; select bank1
  3593  0EFE  083A               	movf	main@pipe^(0+128),w
  3594  0EFF  3189  2150  318E   	fcall	_nrf24l01SetRXPipe
  3595                           
  3596                           ;main.c: 222: ADCON0bits.ADON = 0;
  3597  0F02  0021               	movlb	1	; select bank1
  3598  0F03  101D               	bcf	29,0	;volatile
  3599                           
  3600                           ;main.c: 225: PORTAbits.RA4 = 0;
  3601  0F04  0020               	movlb	0	; select bank0
  3602  0F05  120C               	bcf	12,4	;volatile
  3603                           
  3604                           ;main.c: 226: TRISAbits.TRISA4 = 1;
  3605  0F06  0021               	movlb	1	; select bank1
  3606  0F07  160C               	bsf	12,4	;volatile
  3607                           
  3608                           ;main.c: 227: WPUAbits.WPUA4 = 0;
  3609  0F08  0024               	movlb	4	; select bank4
  3610  0F09  120C               	bcf	12,4	;volatile
  3611                           
  3612                           ;main.c: 228: ODCONAbits.ODCA4 = 1;
  3613  0F0A  0025               	movlb	5	; select bank5
  3614  0F0B  160C               	bsf	12,4	;volatile
  3615                           
  3616                           ;main.c: 229: ANSELAbits.ANSA4 = 1;
  3617  0F0C  0023               	movlb	3	; select bank3
  3618  0F0D  160C               	bsf	12,4	;volatile
  3619                           
  3620                           ;main.c: 232: ANSELCbits.ANSC3 = 1;
  3621  0F0E  158E               	bsf	14,3	;volatile
  3622                           
  3623                           ;main.c: 233: TRISCbits.TRISC3 = 1;
  3624  0F0F  0021               	movlb	1	; select bank1
  3625  0F10  158E               	bsf	14,3	;volatile
  3626                           
  3627                           ;main.c: 236: FVRCONbits.TSEN = 1;
  3628  0F11  0022               	movlb	2	; select bank2
  3629  0F12  1697               	bsf	23,5	;volatile
  3630                           
  3631                           ;main.c: 237: FVRCONbits.TSRNG = 1;
  3632  0F13  1617               	bsf	23,4	;volatile
  3633                           
  3634                           ;main.c: 240: FVRCONbits.FVREN = 0;
  3635  0F14  1397               	bcf	23,7	;volatile
  3636                           
  3637                           ;main.c: 241: FVRCONbits.ADFVR = 0b10;
  3638  0F15  0817               	movf	23,w	;volatile
  3639  0F16  39FC               	andlw	-4
  3640  0F17  3802               	iorlw	2
  3641  0F18  0097               	movwf	23	;volatile
  3642                           
  3643                           ;main.c: 243: ADCON1bits.ADCS = 0b111;
  3644  0F19  3070               	movlw	112
  3645  0F1A  0021               	movlb	1	; select bank1
  3646  0F1B  049E               	iorwf	30,f	;volatile
  3647                           
  3648                           ;main.c: 244: ADCON1bits.ADFM = 1;
  3649  0F1C  179E               	bsf	30,7	;volatile
  3650                           
  3651                           ;main.c: 245: ADCON1bits.ADPREF = 0b11;
  3652  0F1D  3003               	movlw	3
  3653  0F1E  049E               	iorwf	30,f	;volatile
  3654                           
  3655                           ;main.c: 246: ADCON1bits.ADNREF = 0b00;
  3656  0F1F  111E               	bcf	30,2	;volatile
  3657                           
  3658                           ;main.c: 247: PIE1bits.ADIE = 1;
  3659  0F20  1711               	bsf	17,6	;volatile
  3660                           
  3661                           ;main.c: 250: ADCON0bits.CHS = 3;
  3662  0F21  081D               	movf	29,w	;volatile
  3663  0F22  3903               	andlw	-253
  3664  0F23  380C               	iorlw	12
  3665  0F24  009D               	movwf	29	;volatile
  3666                           
  3667                           ;main.c: 255: TRISAbits.TRISA2 = 1;
  3668  0F25  150C               	bsf	12,2	;volatile
  3669                           
  3670                           ;main.c: 256: PIE0bits.INTE = 1;
  3671  0F26  1410               	bsf	16,0	;volatile
  3672                           
  3673                           ;main.c: 257: INTCONbits.INTEDG = 0;
  3674  0F27  100B               	bcf	11,0	;volatile
  3675                           
  3676                           ;main.c: 260: TRISAbits.TRISA5 = 0;
  3677  0F28  128C               	bcf	12,5	;volatile
  3678                           
  3679                           ;main.c: 261: PORTAbits.RA5 = 0;
  3680  0F29  0020               	movlb	0	; select bank0
  3681  0F2A  128C               	bcf	12,5	;volatile
  3682                           
  3683                           ;main.c: 263: hcsr04Init();
  3684  0F2B  3188  2095  318E   	fcall	_hcsr04Init
  3685                           
  3686                           ;main.c: 266: INTCONbits.PEIE = 1;
  3687  0F2E  170B               	bsf	11,6	;volatile
  3688                           
  3689                           ;main.c: 267: INTCONbits.GIE = 1;
  3690  0F2F  178B               	bsf	11,7	;volatile
  3691                           
  3692                           ;main.c: 269: nrf24l01Packet_t packet;;main.c: 271: sendMessage(&packet, "BOOT", EEPROMR
      +                          ead(0));
  3693  0F30  30BB               	movlw	low main@packet
  3694  0F31  0021               	movlb	1	; select bank1
  3695  0F32  00B1               	movwf	sendMessage@packet^(0+128)
  3696  0F33  3000               	movlw	high main@packet
  3697  0F34  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  3698  0F35  3049               	movlw	low (STR_7| (0+32768))
  3699  0F36  00B3               	movwf	sendMessage@topic^(0+128)
  3700  0F37  3090               	movlw	high (STR_7| (0+32768))
  3701  0F38  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  3702  0F39  3000               	movlw	0
  3703  0F3A  00F0               	movwf	EEPROMRead@address
  3704  0F3B  00F1               	movwf	EEPROMRead@address+1
  3705  0F3C  3188  203B  318E   	fcall	_EEPROMRead
  3706  0F3F  3188  20BE  318E   	fcall	___lbtoft
  3707  0F42  0870               	movf	?___lbtoft,w
  3708  0F43  0021               	movlb	1	; select bank1
  3709  0F44  00B5               	movwf	sendMessage@value^(0+128)
  3710  0F45  0871               	movf	?___lbtoft+1,w
  3711  0F46  00B6               	movwf	(sendMessage@value+1)^(0+128)
  3712  0F47  0872               	movf	?___lbtoft+2,w
  3713  0F48  00B7               	movwf	(sendMessage@value+2)^(0+128)
  3714  0F49  318D  25B2  318E   	fcall	_sendMessage
  3715                           
  3716                           ;main.c: 272: EEPROMWrite(0, 0);
  3717  0F4C  3000               	movlw	0
  3718  0F4D  00F0               	movwf	EEPROMWrite@address
  3719  0F4E  00F1               	movwf	EEPROMWrite@address+1
  3720  0F4F  01F2               	clrf	EEPROMWrite@data
  3721  0F50  3189  218C  318E   	fcall	_EEPROMWrite
  3722  0F53                     l4908:	
  3723                           ;main.c: 275: while(1){
  3724                           
  3725                           
  3726                           ;main.c: 276: loop();
  3727  0F53  3184  2428  318E   	fcall	_loop
  3728  0F56  2F53               	goto	l4908
  3729  0F57                     __end_of_main:	
  3730                           ;main.c: 277: };main.c: 279: return;
  3731                           
  3732                           
  3733                           	psect	text1
  3734  09AB                     __ptext1:	
  3735 ;; *************** function _nrf24l01Init *****************
  3736 ;; Defined at:
  3737 ;;		line 429 in file "nrf24l01.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;		None
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;		None
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  1    wreg      void 
  3744 ;; Registers used:
  3745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3753 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3754 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3755 ;;Total ram usage:        1 bytes
  3756 ;; Hardware stack levels used:    1
  3757 ;; Hardware stack levels required when called:   11
  3758 ;; This function calls:
  3759 ;;		_nrf24l01InitRegisters
  3760 ;;		_nrf24l01InterfaceInit
  3761 ;; This function is called by:
  3762 ;;		_main
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           
  3767                           ;psect for function _nrf24l01Init
  3768  09AB                     _nrf24l01Init:	
  3769                           
  3770                           ;nrf24l01.c: 432: nrf24l01InterfaceInit();
  3771                           
  3772                           ;incstack = 0
  3773                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath+
      +                          cstack]
  3774  09AB  3189  216E  3189   	fcall	_nrf24l01InterfaceInit
  3775                           
  3776                           ;nrf24l01.c: 437: PORTAbits.RA0 = 0;
  3777  09AE  0020               	movlb	0	; select bank0
  3778  09AF  100C               	bcf	12,0	;volatile
  3779                           
  3780                           ;nrf24l01.c: 439: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3781  09B0  300B               	movlw	11
  3782  09B1  0020               	movlb	0	; select bank0
  3783  09B2  00B0               	movwf	??_nrf24l01Init
  3784  09B3  3062               	movlw	98
  3785  09B4                     u5427:	
  3786  09B4  0B89               	decfsz	9,f
  3787  09B5  29B4               	goto	u5427
  3788  09B6  0BB0               	decfsz	??_nrf24l01Init,f
  3789  09B7  29B4               	goto	u5427
  3790  09B8  0000               	nop
  3791                           
  3792                           ;nrf24l01.c: 441: nrf24l01InitRegisters();
  3793  09B9  3182  222B  3189   	fcall	_nrf24l01InitRegisters
  3794                           
  3795                           ;nrf24l01.c: 443: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3796  09BC  300B               	movlw	11
  3797  09BD  0020               	movlb	0	; select bank0
  3798  09BE  00B0               	movwf	??_nrf24l01Init
  3799  09BF  3062               	movlw	98
  3800  09C0                     u5437:	
  3801  09C0  0B89               	decfsz	9,f
  3802  09C1  29C0               	goto	u5437
  3803  09C2  0BB0               	decfsz	??_nrf24l01Init,f
  3804  09C3  29C0               	goto	u5437
  3805  09C4  0000               	nop
  3806                           
  3807                           ;nrf24l01.c: 445: PORTAbits.RA0 = 1;
  3808  09C5  0020               	movlb	0	; select bank0
  3809  09C6  140C               	bsf	12,0	;volatile
  3810                           
  3811                           ;nrf24l01.c: 447: status.TX = 0;
  3812  09C7  01E4               	clrf	_status	;volatile
  3813                           
  3814                           ;nrf24l01.c: 448: status.RX = 0;
  3815  09C8  01E5               	clrf	_status+1	;volatile
  3816  09C9  0008               	return
  3817  09CA                     __end_of_nrf24l01Init:	
  3818                           
  3819                           	psect	text2
  3820  096E                     __ptext2:	
  3821 ;; *************** function _nrf24l01InterfaceInit *****************
  3822 ;; Defined at:
  3823 ;;		line 9 in file "interface.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;		None
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;		None
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  1    wreg      void 
  3830 ;; Registers used:
  3831 ;;		wreg, status,2, status,0
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3841 ;;Total ram usage:        0 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; Hardware stack levels required when called:    7
  3844 ;; This function calls:
  3845 ;;		Nothing
  3846 ;; This function is called by:
  3847 ;;		_nrf24l01Init
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           
  3852                           ;psect for function _nrf24l01InterfaceInit
  3853  096E                     _nrf24l01InterfaceInit:	
  3854                           
  3855                           ;interface.c: 11: TRISAbits.TRISA0 = 0;
  3856                           
  3857                           ;incstack = 0
  3858                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3859  096E  0021               	movlb	1	; select bank1
  3860  096F  100C               	bcf	12,0	;volatile
  3861                           
  3862                           ;interface.c: 12: TRISAbits.TRISA1 = 0;
  3863  0970  108C               	bcf	12,1	;volatile
  3864                           
  3865                           ;interface.c: 14: TRISCbits.TRISC1 = 1;
  3866  0971  148E               	bsf	14,1	;volatile
  3867                           
  3868                           ;interface.c: 15: TRISCbits.TRISC2 = 0;
  3869  0972  110E               	bcf	14,2	;volatile
  3870                           
  3871                           ;interface.c: 16: TRISCbits.TRISC0 = 0;
  3872  0973  100E               	bcf	14,0	;volatile
  3873                           
  3874                           ;interface.c: 18: SSP1CON1bits.SSPEN = 0;
  3875  0974  0024               	movlb	4	; select bank4
  3876  0975  1295               	bcf	21,5	;volatile
  3877                           
  3878                           ;interface.c: 20: RC1PPSbits.RC1PPS = 0b10001;
  3879  0976  003D               	movlb	29	; select bank29
  3880  0977  0821               	movf	33,w	;volatile
  3881  0978  39E0               	andlw	-32
  3882  0979  3811               	iorlw	17
  3883  097A  00A1               	movwf	33	;volatile
  3884                           
  3885                           ;interface.c: 21: RC2PPSbits.RC2PPS = 0b11001;
  3886  097B  0822               	movf	34,w	;volatile
  3887  097C  39E0               	andlw	-32
  3888  097D  3819               	iorlw	25
  3889  097E  00A2               	movwf	34	;volatile
  3890                           
  3891                           ;interface.c: 22: RC0PPSbits.RC0PPS = 0b11000;
  3892  097F  0820               	movf	32,w	;volatile
  3893  0980  39E0               	andlw	-32
  3894  0981  3818               	iorlw	24
  3895  0982  00A0               	movwf	32	;volatile
  3896                           
  3897                           ;interface.c: 24: SSP1CON1bits.CKP = 0;
  3898  0983  0024               	movlb	4	; select bank4
  3899  0984  1215               	bcf	21,4	;volatile
  3900                           
  3901                           ;interface.c: 25: SSP1STATbits.CKE = 1;
  3902  0985  1714               	bsf	20,6	;volatile
  3903                           
  3904                           ;interface.c: 26: SSP1CON1bits.SSPM = 0b0001;
  3905  0986  0815               	movf	21,w	;volatile
  3906  0987  39F0               	andlw	-16
  3907  0988  3801               	iorlw	1
  3908  0989  0095               	movwf	21	;volatile
  3909                           
  3910                           ;interface.c: 28: SSP1CON1bits.SSPEN = 1;
  3911  098A  1695               	bsf	21,5	;volatile
  3912  098B  0008               	return
  3913  098C                     __end_of_nrf24l01InterfaceInit:	
  3914                           
  3915                           	psect	text3
  3916  022B                     __ptext3:	
  3917 ;; *************** function _nrf24l01InitRegisters *****************
  3918 ;; Defined at:
  3919 ;;		line 328 in file "nrf24l01.c"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;		None
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  i               2   14[BANK0 ] unsigned int 
  3924 ;;  DynPD           1   13[BANK0 ] struct .
  3925 ;;  enAA            1   12[BANK0 ] struct .
  3926 ;;  rfSetup         1   11[BANK0 ] struct .
  3927 ;;  feature         1   10[BANK0 ] struct .
  3928 ;;  setupAW         1    9[BANK0 ] struct .
  3929 ;;  channel         1    8[BANK0 ] struct .
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      void 
  3932 ;; Registers used:
  3933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3940 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3941 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3942 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3943 ;;Total ram usage:        9 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:   10
  3946 ;; This function calls:
  3947 ;;		___bmul
  3948 ;;		_nrf24l01SPIEnd
  3949 ;;		_nrf24l01SPISend
  3950 ;;		_nrf24l01SPIStart
  3951 ;;		_nrf24l01Send
  3952 ;;		_nrf24l01SetRXPipe
  3953 ;;		_nrf24l01SetTXPipe
  3954 ;; This function is called by:
  3955 ;;		_nrf24l01Init
  3956 ;; This function uses a non-reentrant model
  3957 ;;
  3958                           
  3959                           
  3960                           ;psect for function _nrf24l01InitRegisters
  3961  022B                     _nrf24l01InitRegisters:	
  3962                           
  3963                           ;nrf24l01.c: 330: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3964                           
  3965                           ;incstack = 0
  3966                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+1
      +                          1+pclath+cstack]
  3967  022B  3000               	movlw	0
  3968  022C  001E               	movwi fsr1++
  3969  022D  3000               	movlw	0
  3970  022E  3188  2082  3182   	fcall	_nrf24l01Send
  3971  0231  00FF               	movwf	127
  3972  0232  087F               	movf	127,w
  3973  0233  0020               	movlb	0	; select bank0
  3974  0234  00E7               	movwf	_status+3	;volatile
  3975                           
  3976                           ;nrf24l01.c: 332: status.configRegister.PWR_UP = 0;
  3977  0235  10E7               	bcf	_status+3,1	;volatile
  3978                           
  3979                           ;nrf24l01.c: 333: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3980  0236  0867               	movf	_status+3,w	;volatile
  3981  0237  001E               	movwi fsr1++
  3982  0238  3020               	movlw	32
  3983  0239  3188  2082  3182   	fcall	_nrf24l01Send
  3984                           
  3985                           ;nrf24l01.c: 335: n_SETUP_AW_t setupAW;;nrf24l01.c: 336: setupAW.byte = 0x00;
  3986  023C  0020               	movlb	0	; select bank0
  3987  023D  01A9               	clrf	nrf24l01InitRegisters@setupAW
  3988                           
  3989                           ;nrf24l01.c: 337: setupAW.AW = 0b11;
  3990  023E  3003               	movlw	3
  3991  023F  04A9               	iorwf	nrf24l01InitRegisters@setupAW,f
  3992                           
  3993                           ;nrf24l01.c: 338: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3994  0240  0829               	movf	nrf24l01InitRegisters@setupAW,w
  3995  0241  001E               	movwi fsr1++
  3996  0242  3023               	movlw	35
  3997  0243  3188  2082  3182   	fcall	_nrf24l01Send
  3998                           
  3999                           ;nrf24l01.c: 341: n_RF_CH_t channel;;nrf24l01.c: 342: channel.RF_CH = 2;
  4000  0246  0020               	movlb	0	; select bank0
  4001  0247  0828               	movf	nrf24l01InitRegisters@channel,w
  4002  0248  3980               	andlw	-128
  4003  0249  3802               	iorlw	2
  4004  024A  00A8               	movwf	nrf24l01InitRegisters@channel
  4005                           
  4006                           ;nrf24l01.c: 343: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  4007  024B  0828               	movf	nrf24l01InitRegisters@channel,w
  4008  024C  001E               	movwi fsr1++
  4009  024D  3025               	movlw	37
  4010  024E  3188  2082  3182   	fcall	_nrf24l01Send
  4011                           
  4012                           ;nrf24l01.c: 346: n_RF_SETUP_t rfSetup;;nrf24l01.c: 347: rfSetup.byte = 0x00;
  4013  0251  0020               	movlb	0	; select bank0
  4014  0252  01AB               	clrf	nrf24l01InitRegisters@rfSetup
  4015                           
  4016                           ;nrf24l01.c: 348: rfSetup.RF_DR_LOW = 0;
  4017  0253  12AB               	bcf	nrf24l01InitRegisters@rfSetup,5
  4018                           
  4019                           ;nrf24l01.c: 349: rfSetup.RF_DR_HIGH = 1;
  4020  0254  15AB               	bsf	nrf24l01InitRegisters@rfSetup,3
  4021                           
  4022                           ;nrf24l01.c: 350: rfSetup.RF_PWR = 3;
  4023  0255  3006               	movlw	6
  4024  0256  04AB               	iorwf	nrf24l01InitRegisters@rfSetup,f
  4025                           
  4026                           ;nrf24l01.c: 351: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  4027  0257  082B               	movf	nrf24l01InitRegisters@rfSetup,w
  4028  0258  001E               	movwi fsr1++
  4029  0259  3026               	movlw	38
  4030  025A  3188  2082  3182   	fcall	_nrf24l01Send
  4031                           
  4032                           ;nrf24l01.c: 354: nrf24l01SetRXPipe(0xFF);
  4033  025D  30FF               	movlw	255
  4034  025E  3189  2150  3182   	fcall	_nrf24l01SetRXPipe
  4035                           
  4036                           ;nrf24l01.c: 357: n_EN_AA_t enAA;;nrf24l01.c: 358: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  4037  0261  3000               	movlw	0
  4038  0262  001E               	movwi fsr1++
  4039  0263  3001               	movlw	1
  4040  0264  3188  2082  3182   	fcall	_nrf24l01Send
  4041  0267  00FF               	movwf	127
  4042  0268  087F               	movf	127,w
  4043  0269  0020               	movlb	0	; select bank0
  4044  026A  00AC               	movwf	nrf24l01InitRegisters@enAA
  4045                           
  4046                           ;nrf24l01.c: 359: enAA.ENAA_P0 = 0;
  4047  026B  102C               	bcf	nrf24l01InitRegisters@enAA,0
  4048                           
  4049                           ;nrf24l01.c: 360: enAA.ENAA_P1 = 0;
  4050  026C  10AC               	bcf	nrf24l01InitRegisters@enAA,1
  4051                           
  4052                           ;nrf24l01.c: 361: enAA.ENAA_P2 = 0;
  4053  026D  112C               	bcf	nrf24l01InitRegisters@enAA,2
  4054                           
  4055                           ;nrf24l01.c: 362: enAA.ENAA_P3 = 0;
  4056  026E  11AC               	bcf	nrf24l01InitRegisters@enAA,3
  4057                           
  4058                           ;nrf24l01.c: 363: enAA.ENAA_P4 = 0;
  4059  026F  122C               	bcf	nrf24l01InitRegisters@enAA,4
  4060                           
  4061                           ;nrf24l01.c: 364: enAA.ENAA_P5 = 0;
  4062  0270  12AC               	bcf	nrf24l01InitRegisters@enAA,5
  4063                           
  4064                           ;nrf24l01.c: 365: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  4065  0271  082C               	movf	nrf24l01InitRegisters@enAA,w
  4066  0272  001E               	movwi fsr1++
  4067  0273  3021               	movlw	33
  4068  0274  3188  2082  3182   	fcall	_nrf24l01Send
  4069                           
  4070                           ;nrf24l01.c: 369: n_FEATURE_t feature;;nrf24l01.c: 370: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  4071  0277  3000               	movlw	0
  4072  0278  001E               	movwi fsr1++
  4073  0279  301D               	movlw	29
  4074  027A  3188  2082  3182   	fcall	_nrf24l01Send
  4075  027D  00FF               	movwf	127
  4076  027E  087F               	movf	127,w
  4077  027F  0020               	movlb	0	; select bank0
  4078  0280  00AA               	movwf	nrf24l01InitRegisters@feature
  4079                           
  4080                           ;nrf24l01.c: 371: feature.EN_DPL = 1;
  4081  0281  152A               	bsf	nrf24l01InitRegisters@feature,2
  4082                           
  4083                           ;nrf24l01.c: 372: feature.EN_DYN_ACK = 1;
  4084  0282  142A               	bsf	nrf24l01InitRegisters@feature,0
  4085                           
  4086                           ;nrf24l01.c: 373: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  4087  0283  082A               	movf	nrf24l01InitRegisters@feature,w
  4088  0284  001E               	movwi fsr1++
  4089  0285  303D               	movlw	61
  4090  0286  3188  2082  3182   	fcall	_nrf24l01Send
  4091                           
  4092                           ;nrf24l01.c: 375: n_DYNPD_t DynPD;;nrf24l01.c: 376: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  4093  0289  3000               	movlw	0
  4094  028A  001E               	movwi fsr1++
  4095  028B  301C               	movlw	28
  4096  028C  3188  2082  3182   	fcall	_nrf24l01Send
  4097  028F  00FF               	movwf	127
  4098  0290  087F               	movf	127,w
  4099  0291  0020               	movlb	0	; select bank0
  4100  0292  00AD               	movwf	nrf24l01InitRegisters@DynPD
  4101                           
  4102                           ;nrf24l01.c: 377: DynPD.DPL_P0 = 1;
  4103  0293  142D               	bsf	nrf24l01InitRegisters@DynPD,0
  4104                           
  4105                           ;nrf24l01.c: 378: DynPD.DPL_P1 = 1;
  4106  0294  14AD               	bsf	nrf24l01InitRegisters@DynPD,1
  4107                           
  4108                           ;nrf24l01.c: 379: DynPD.DPL_P2 = 1;
  4109  0295  152D               	bsf	nrf24l01InitRegisters@DynPD,2
  4110                           
  4111                           ;nrf24l01.c: 380: DynPD.DPL_P3 = 1;
  4112  0296  15AD               	bsf	nrf24l01InitRegisters@DynPD,3
  4113                           
  4114                           ;nrf24l01.c: 381: DynPD.DPL_P4 = 1;
  4115  0297  162D               	bsf	nrf24l01InitRegisters@DynPD,4
  4116                           
  4117                           ;nrf24l01.c: 382: DynPD.DPL_P5 = 1;
  4118  0298  16AD               	bsf	nrf24l01InitRegisters@DynPD,5
  4119                           
  4120                           ;nrf24l01.c: 383: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  4121  0299  082D               	movf	nrf24l01InitRegisters@DynPD,w
  4122  029A  001E               	movwi fsr1++
  4123  029B  303C               	movlw	60
  4124  029C  3188  2082  3182   	fcall	_nrf24l01Send
  4125                           
  4126                           ;nrf24l01.c: 386: unsigned int i;;nrf24l01.c: 387: for (i = 0; i < 6; i++){
  4127  029F  0020               	movlb	0	; select bank0
  4128  02A0  01AE               	clrf	nrf24l01InitRegisters@i
  4129  02A1  01AF               	clrf	nrf24l01InitRegisters@i+1
  4130  02A2  3000               	movlw	0
  4131  02A3  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4132  02A4  3006               	movlw	6
  4133  02A5  1903               	skipnz
  4134  02A6  022E               	subwf	nrf24l01InitRegisters@i,w
  4135  02A7  1803               	btfsc	3,0
  4136  02A8  2B02               	goto	l4648
  4137  02A9                     l4632:	
  4138                           
  4139                           ;nrf24l01.c: 389: nrf24l01SPIStart();
  4140  02A9  3188  2032  3182   	fcall	_nrf24l01SPIStart
  4141                           
  4142                           ;nrf24l01.c: 390: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  4143  02AC  0020               	movlb	0	; select bank0
  4144  02AD  082E               	movf	nrf24l01InitRegisters@i,w
  4145  02AE  3E0A               	addlw	10
  4146  02AF  3820               	iorlw	32
  4147  02B0  3188  2062  3182   	fcall	_nrf24l01SPISend
  4148                           
  4149                           ;nrf24l01.c: 392: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  4150  02B3  303E               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4151  02B4  0084               	movwf	4
  4152  02B5  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4153  02B6  0085               	movwf	5
  4154  02B7  0800               	movf	0,w	;code access
  4155  02B8  0020               	movlb	0	; select bank0
  4156  02B9  00A7               	movwf	??_nrf24l01InitRegisters
  4157  02BA  082E               	movf	nrf24l01InitRegisters@i,w
  4158  02BB  00FF               	movwf	127
  4159  02BC  087F               	movf	127,w
  4160  02BD  00F0               	movwf	___bmul@multiplicand
  4161  02BE  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4162  02BF  0084               	movwf	4
  4163  02C0  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4164  02C1  0085               	movwf	5
  4165  02C2  0800               	movf	0,w	;code access
  4166  02C3  3188  2071  3182   	fcall	___bmul
  4167  02C6  0020               	movlb	0	; select bank0
  4168  02C7  0727               	addwf	??_nrf24l01InitRegisters,w
  4169  02C8  3188  2062  3182   	fcall	_nrf24l01SPISend
  4170                           
  4171                           ;nrf24l01.c: 394: if (i < 2){
  4172  02CB  3000               	movlw	0
  4173  02CC  0020               	movlb	0	; select bank0
  4174  02CD  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4175  02CE  3002               	movlw	2
  4176  02CF  1903               	skipnz
  4177  02D0  022E               	subwf	nrf24l01InitRegisters@i,w
  4178  02D1  1803               	skipnc
  4179  02D2  2AF3               	goto	l4642
  4180                           
  4181                           ;nrf24l01.c: 395: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4182  02D3  303D               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4183  02D4  0084               	movwf	4
  4184  02D5  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4185  02D6  0085               	movwf	5
  4186  02D7  0800               	movf	0,w	;code access
  4187  02D8  3188  2062  3182   	fcall	_nrf24l01SPISend
  4188                           
  4189                           ;nrf24l01.c: 396: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4190  02DB  303C               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4191  02DC  0084               	movwf	4
  4192  02DD  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4193  02DE  0085               	movwf	5
  4194  02DF  0800               	movf	0,w	;code access
  4195  02E0  3188  2062  3182   	fcall	_nrf24l01SPISend
  4196                           
  4197                           ;nrf24l01.c: 397: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4198  02E3  303B               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4199  02E4  0084               	movwf	4
  4200  02E5  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4201  02E6  0085               	movwf	5
  4202  02E7  0800               	movf	0,w	;code access
  4203  02E8  3188  2062  3182   	fcall	_nrf24l01SPISend
  4204                           
  4205                           ;nrf24l01.c: 398: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4206  02EB  303A               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4207  02EC  0084               	movwf	4
  4208  02ED  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4209  02EE  0085               	movwf	5
  4210  02EF  0800               	movf	0,w	;code access
  4211  02F0  3188  2062  3182   	fcall	_nrf24l01SPISend
  4212  02F3                     l4642:	
  4213                           
  4214                           ;nrf24l01.c: 399: };nrf24l01.c: 401: nrf24l01SPIEnd();
  4215  02F3  3188  2029  3182   	fcall	_nrf24l01SPIEnd
  4216  02F6  3001               	movlw	1
  4217  02F7  0020               	movlb	0	; select bank0
  4218  02F8  07AE               	addwf	nrf24l01InitRegisters@i,f
  4219  02F9  3000               	movlw	0
  4220  02FA  3DAF               	addwfc	nrf24l01InitRegisters@i+1,f
  4221  02FB  3000               	movlw	0
  4222  02FC  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4223  02FD  3006               	movlw	6
  4224  02FE  1903               	skipnz
  4225  02FF  022E               	subwf	nrf24l01InitRegisters@i,w
  4226  0300  1C03               	skipc
  4227  0301  2AA9               	goto	l4632
  4228  0302                     l4648:	
  4229                           
  4230                           ;nrf24l01.c: 402: };nrf24l01.c: 404: nrf24l01SetTXPipe(0);
  4231  0302  3000               	movlw	0
  4232  0303  318C  242A  3182   	fcall	_nrf24l01SetTXPipe
  4233                           
  4234                           ;nrf24l01.c: 408: status.statusRegister.byte = 0x00;
  4235  0306  0020               	movlb	0	; select bank0
  4236  0307  01E6               	clrf	_status+2	;volatile
  4237                           
  4238                           ;nrf24l01.c: 409: status.statusRegister.RX_DR = 1;
  4239  0308  1766               	bsf	_status+2,6	;volatile
  4240                           
  4241                           ;nrf24l01.c: 410: status.statusRegister.TX_DS = 1;
  4242  0309  16E6               	bsf	_status+2,5	;volatile
  4243                           
  4244                           ;nrf24l01.c: 411: status.statusRegister.MAX_RT = 1;
  4245  030A  1666               	bsf	_status+2,4	;volatile
  4246                           
  4247                           ;nrf24l01.c: 412: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  4248  030B  0866               	movf	_status+2,w	;volatile
  4249  030C  001E               	movwi fsr1++
  4250  030D  3027               	movlw	39
  4251  030E  3188  2082  3182   	fcall	_nrf24l01Send
  4252                           
  4253                           ;nrf24l01.c: 414: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  4254  0311  3000               	movlw	0
  4255  0312  001E               	movwi fsr1++
  4256  0313  3007               	movlw	7
  4257  0314  3188  2082  3182   	fcall	_nrf24l01Send
  4258  0317  00FF               	movwf	127
  4259  0318  087F               	movf	127,w
  4260  0319  0020               	movlb	0	; select bank0
  4261  031A  00E6               	movwf	_status+2	;volatile
  4262                           
  4263                           ;nrf24l01.c: 417: nrf24l01Send((unsigned) 0b11100001, 0);
  4264  031B  3000               	movlw	0
  4265  031C  001E               	movwi fsr1++
  4266  031D  30E1               	movlw	225
  4267  031E  3188  2082  3182   	fcall	_nrf24l01Send
  4268                           
  4269                           ;nrf24l01.c: 418: nrf24l01Send((unsigned) 0b11100010, 0);
  4270  0321  3000               	movlw	0
  4271  0322  001E               	movwi fsr1++
  4272  0323  30E2               	movlw	226
  4273  0324  3188  2082  3182   	fcall	_nrf24l01Send
  4274                           
  4275                           ;nrf24l01.c: 421: status.configRegister.PRIM_RX = 1;
  4276  0327  0020               	movlb	0	; select bank0
  4277  0328  1467               	bsf	_status+3,0	;volatile
  4278                           
  4279                           ;nrf24l01.c: 422: status.configRegister.EN_CRC = 1;
  4280  0329  15E7               	bsf	_status+3,3	;volatile
  4281                           
  4282                           ;nrf24l01.c: 423: status.configRegister.CRCO = 1;
  4283  032A  1567               	bsf	_status+3,2	;volatile
  4284                           
  4285                           ;nrf24l01.c: 424: status.configRegister.PWR_UP = 1;
  4286  032B  14E7               	bsf	_status+3,1	;volatile
  4287                           
  4288                           ;nrf24l01.c: 425: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  4289  032C  0867               	movf	_status+3,w	;volatile
  4290  032D  001E               	movwi fsr1++
  4291  032E  3020               	movlw	32
  4292  032F  3188  2082         	fcall	_nrf24l01Send
  4293  0331  0008               	return
  4294  0332                     __end_of_nrf24l01InitRegisters:	
  4295                           
  4296                           	psect	text4
  4297  0C2A                     __ptext4:	
  4298 ;; *************** function _nrf24l01SetTXPipe *****************
  4299 ;; Defined at:
  4300 ;;		line 96 in file "nrf24l01.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;  pipe            1    wreg     unsigned char 
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  pipe            1    6[BANK0 ] unsigned char 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  1    wreg      void 
  4307 ;; Registers used:
  4308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4315 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4317 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;Total ram usage:        2 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    8
  4321 ;; This function calls:
  4322 ;;		___bmul
  4323 ;;		_nrf24l01SPIEnd
  4324 ;;		_nrf24l01SPISend
  4325 ;;		_nrf24l01SPIStart
  4326 ;; This function is called by:
  4327 ;;		_main
  4328 ;;		_nrf24l01InitRegisters
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           
  4333                           ;psect for function _nrf24l01SetTXPipe
  4334  0C2A                     _nrf24l01SetTXPipe:	
  4335                           
  4336                           ;incstack = 0
  4337                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pc
      +                          lath+cstack]
  4338                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4339  0C2A  0020               	movlb	0	; select bank0
  4340  0C2B  00A6               	movwf	nrf24l01SetTXPipe@pipe
  4341                           
  4342                           ;nrf24l01.c: 99: nrf24l01SPIStart();
  4343  0C2C  3188  2032  318C   	fcall	_nrf24l01SPIStart
  4344                           
  4345                           ;nrf24l01.c: 100: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4346  0C2F  3030               	movlw	48
  4347  0C30  3188  2062  318C   	fcall	_nrf24l01SPISend
  4348                           
  4349                           ;nrf24l01.c: 101: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4350  0C33  303E               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4351  0C34  0084               	movwf	4
  4352  0C35  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4353  0C36  0085               	movwf	5
  4354  0C37  0800               	movf	0,w	;code access
  4355  0C38  00F3               	movwf	??_nrf24l01SetTXPipe
  4356  0C39  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4357  0C3A  0084               	movwf	4
  4358  0C3B  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4359  0C3C  0085               	movwf	5
  4360  0C3D  0800               	movf	0,w	;code access
  4361  0C3E  00FF               	movwf	127
  4362  0C3F  087F               	movf	127,w
  4363  0C40  00F0               	movwf	___bmul@multiplicand
  4364  0C41  0020               	movlb	0	; select bank0
  4365  0C42  0826               	movf	nrf24l01SetTXPipe@pipe,w
  4366  0C43  3188  2071  318C   	fcall	___bmul
  4367  0C46  0773               	addwf	??_nrf24l01SetTXPipe,w
  4368  0C47  3188  2062  318C   	fcall	_nrf24l01SPISend
  4369                           
  4370                           ;nrf24l01.c: 102: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4371  0C4A  303D               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4372  0C4B  0084               	movwf	4
  4373  0C4C  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4374  0C4D  0085               	movwf	5
  4375  0C4E  0800               	movf	0,w	;code access
  4376  0C4F  3188  2062  318C   	fcall	_nrf24l01SPISend
  4377                           
  4378                           ;nrf24l01.c: 103: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4379  0C52  303C               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4380  0C53  0084               	movwf	4
  4381  0C54  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4382  0C55  0085               	movwf	5
  4383  0C56  0800               	movf	0,w	;code access
  4384  0C57  3188  2062  318C   	fcall	_nrf24l01SPISend
  4385                           
  4386                           ;nrf24l01.c: 104: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4387  0C5A  303B               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4388  0C5B  0084               	movwf	4
  4389  0C5C  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4390  0C5D  0085               	movwf	5
  4391  0C5E  0800               	movf	0,w	;code access
  4392  0C5F  3188  2062  318C   	fcall	_nrf24l01SPISend
  4393                           
  4394                           ;nrf24l01.c: 105: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4395  0C62  303A               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4396  0C63  0084               	movwf	4
  4397  0C64  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4398  0C65  0085               	movwf	5
  4399  0C66  0800               	movf	0,w	;code access
  4400  0C67  3188  2062  318C   	fcall	_nrf24l01SPISend
  4401                           
  4402                           ;nrf24l01.c: 106: nrf24l01SPIEnd();
  4403  0C6A  3188  2029         	fcall	_nrf24l01SPIEnd
  4404  0C6C  0008               	return
  4405  0C6D                     __end_of_nrf24l01SetTXPipe:	
  4406                           
  4407                           	psect	text5
  4408  0871                     __ptext5:	
  4409 ;; *************** function ___bmul *****************
  4410 ;; Defined at:
  4411 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;  multiplier      1    wreg     unsigned char 
  4414 ;;  multiplicand    1    0[COMMON] unsigned char 
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;  multiplier      1    2[COMMON] unsigned char 
  4417 ;;  product         1    1[COMMON] unsigned char 
  4418 ;; Return value:  Size  Location     Type
  4419 ;;                  1    wreg      unsigned char 
  4420 ;; Registers used:
  4421 ;;		wreg, status,2, status,0, btemp+11
  4422 ;; Tracked objects:
  4423 ;;		On entry : 0/0
  4424 ;;		On exit  : 0/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4427 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4428 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4430 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4431 ;;Total ram usage:        3 bytes
  4432 ;; Hardware stack levels used:    1
  4433 ;; Hardware stack levels required when called:    7
  4434 ;; This function calls:
  4435 ;;		Nothing
  4436 ;; This function is called by:
  4437 ;;		_nrf24l01SetTXPipe
  4438 ;;		_nrf24l01InitRegisters
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           
  4443                           ;psect for function ___bmul
  4444  0871                     ___bmul:	
  4445                           
  4446                           ;incstack = 0
  4447                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+11]
  4448                           ;___bmul@multiplier stored from wreg
  4449  0871  00F2               	movwf	___bmul@multiplier
  4450  0872  01F1               	clrf	___bmul@product
  4451  0873                     l4082:	
  4452  0873  1C72               	btfss	___bmul@multiplier,0
  4453  0874  2879               	goto	l4086
  4454  0875  0870               	movf	___bmul@multiplicand,w
  4455  0876  00FF               	movwf	127
  4456  0877  087F               	movf	127,w
  4457  0878  07F1               	addwf	___bmul@product,f
  4458  0879                     l4086:	
  4459  0879  1003               	clrc
  4460  087A  0DF0               	rlf	___bmul@multiplicand,f
  4461  087B  1003               	clrc
  4462  087C  0CF2               	rrf	___bmul@multiplier,f
  4463  087D  0872               	movf	___bmul@multiplier,w
  4464  087E  1D03               	btfss	3,2
  4465  087F  2873               	goto	l4082
  4466  0880  0871               	movf	___bmul@product,w
  4467  0881  0008               	return
  4468  0882                     __end_of___bmul:	
  4469                           
  4470                           	psect	text6
  4471  0950                     __ptext6:	
  4472 ;; *************** function _nrf24l01SetRXPipe *****************
  4473 ;; Defined at:
  4474 ;;		line 109 in file "nrf24l01.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  pipe            1    wreg     unsigned char 
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;  pipe            1    1[COMMON] unsigned char 
  4479 ;;  enRXAddr        1    2[COMMON] struct .
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  1    wreg      void 
  4482 ;; Registers used:
  4483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;Total ram usage:        3 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    9
  4496 ;; This function calls:
  4497 ;;		_nrf24l01Send
  4498 ;; This function is called by:
  4499 ;;		_main
  4500 ;;		_nrf24l01InitRegisters
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           
  4505                           ;psect for function _nrf24l01SetRXPipe
  4506  0950                     _nrf24l01SetRXPipe:	
  4507                           
  4508                           ;incstack = 0
  4509                           ; Regs used in _nrf24l01SetRXPipe: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath]
  4510                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4511  0950  00F1               	movwf	nrf24l01SetRXPipe@pipe
  4512                           
  4513                           ;nrf24l01.c: 111: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 113: if (pipe > 5){
  4514  0951  3006               	movlw	6
  4515  0952  0271               	subwf	nrf24l01SetRXPipe@pipe,w
  4516  0953  1C03               	skipc
  4517  0954  295C               	goto	l288
  4518                           
  4519                           ;nrf24l01.c: 114: enRXAddr.ERX_P0 = 1;
  4520  0955  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4521                           
  4522                           ;nrf24l01.c: 115: enRXAddr.ERX_P1 = 1;
  4523  0956  14F2               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4524                           
  4525                           ;nrf24l01.c: 116: enRXAddr.ERX_P2 = 1;
  4526  0957  1572               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4527                           
  4528                           ;nrf24l01.c: 117: enRXAddr.ERX_P3 = 1;
  4529  0958  15F2               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4530                           
  4531                           ;nrf24l01.c: 118: enRXAddr.ERX_P4 = 1;
  4532  0959  1672               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4533                           
  4534                           ;nrf24l01.c: 119: enRXAddr.ERX_P5 = 1;
  4535  095A  16F2               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4536                           
  4537                           ;nrf24l01.c: 120: }
  4538  095B  2968               	goto	l4322
  4539  095C                     l288:	
  4540                           
  4541                           ;nrf24l01.c: 122: else{;nrf24l01.c: 123: enRXAddr.ERX_P0 = 1;
  4542  095C  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4543                           
  4544                           ;nrf24l01.c: 124: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4545  095D  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4546  095E  00F0               	movwf	??_nrf24l01SetRXPipe
  4547  095F  0A71               	incf	nrf24l01SetRXPipe@pipe,w
  4548  0960  2962               	goto	u4874
  4549  0961                     u4875:	
  4550  0961  35F0               	lslf	??_nrf24l01SetRXPipe,f
  4551  0962                     u4874:	
  4552  0962  0B89               	decfsz	9,f
  4553  0963  2961               	goto	u4875
  4554  0964  0870               	movf	??_nrf24l01SetRXPipe,w
  4555  0965  00FF               	movwf	127
  4556  0966  087F               	movf	127,w
  4557  0967  00F2               	movwf	nrf24l01SetRXPipe@enRXAddr
  4558  0968                     l4322:	
  4559                           
  4560                           ;nrf24l01.c: 125: };nrf24l01.c: 127: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4561  0968  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4562  0969  001E               	movwi fsr1++
  4563  096A  3022               	movlw	34
  4564  096B  3188  2082         	fcall	_nrf24l01Send
  4565  096D  0008               	return
  4566  096E                     __end_of_nrf24l01SetRXPipe:	
  4567                           
  4568                           	psect	text7
  4569  0AF9                     __ptext7:	
  4570 ;; *************** function _nrf24l01GetPipe *****************
  4571 ;; Defined at:
  4572 ;;		line 161 in file "main.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  name            1    wreg     PTR unsigned char 
  4575 ;;		 -> romDataMap(28), 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4578 ;;		 -> romDataMap(28), 
  4579 ;;  i               1   10[BANK0 ] unsigned char 
  4580 ;;  pipe            1    8[BANK0 ] unsigned char 
  4581 ;; Return value:  Size  Location     Type
  4582 ;;                  1    wreg      unsigned char 
  4583 ;; Registers used:
  4584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11, pclath, cstack
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4591 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4592 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4593 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4594 ;;Total ram usage:        4 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    8
  4597 ;; This function calls:
  4598 ;;		___lwmod
  4599 ;;		_strlen
  4600 ;; This function is called by:
  4601 ;;		_main
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           
  4606                           ;psect for function _nrf24l01GetPipe
  4607  0AF9                     _nrf24l01GetPipe:	
  4608                           
  4609                           ;incstack = 0
  4610                           ; Regs used in _nrf24l01GetPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+btemp
      +                          +11+pclath+cstack]
  4611                           ;nrf24l01GetPipe@name stored from wreg
  4612  0AF9  0020               	movlb	0	; select bank0
  4613  0AFA  00A9               	movwf	nrf24l01GetPipe@name
  4614                           
  4615                           ;main.c: 162: unsigned char pipe = 0;
  4616  0AFB  01A8               	clrf	nrf24l01GetPipe@pipe
  4617                           
  4618                           ;main.c: 163: unsigned char i = 0;
  4619  0AFC  01AA               	clrf	nrf24l01GetPipe@i
  4620                           
  4621                           ;main.c: 166: for (i = 0; i < strlen(name); i++){
  4622  0AFD  01AA               	clrf	nrf24l01GetPipe@i
  4623  0AFE                     l4752:	
  4624  0AFE  0829               	movf	nrf24l01GetPipe@name,w
  4625  0AFF  3189  2132  318A   	fcall	_strlen
  4626  0B02  0020               	movlb	0	; select bank0
  4627  0B03  082A               	movf	nrf24l01GetPipe@i,w
  4628  0B04  00FE               	movwf	126
  4629  0B05  01FF               	clrf	127
  4630  0B06  0875               	movf	117,w
  4631  0B07  027F               	subwf	127,w
  4632  0B08  1D03               	skipz
  4633  0B09  2B0C               	goto	u5285
  4634  0B0A  0874               	movf	116,w
  4635  0B0B  027E               	subwf	126,w
  4636  0B0C                     u5285:	
  4637  0B0C  1803               	btfsc	3,0
  4638  0B0D  2B1E               	goto	l4754
  4639                           
  4640                           ;main.c: 167: pipe+= name[i];
  4641  0B0E  082A               	movf	nrf24l01GetPipe@i,w
  4642  0B0F  0729               	addwf	nrf24l01GetPipe@name,w
  4643  0B10  00A7               	movwf	??_nrf24l01GetPipe
  4644  0B11  0827               	movf	??_nrf24l01GetPipe,w
  4645  0B12  0084               	movwf	4
  4646  0B13  3001               	movlw	1	; select bank2/3
  4647  0B14  0085               	movwf	5
  4648  0B15  0800               	movf	0,w
  4649  0B16  00FF               	movwf	127
  4650  0B17  087F               	movf	127,w
  4651  0B18  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4652  0B19  3001               	movlw	1
  4653  0B1A  00FF               	movwf	127
  4654  0B1B  087F               	movf	127,w
  4655  0B1C  07AA               	addwf	nrf24l01GetPipe@i,f
  4656  0B1D  2AFE               	goto	l4752
  4657  0B1E                     l4754:	
  4658                           
  4659                           ;main.c: 168: };main.c: 170: return (unsigned) pipe % 6;
  4660  0B1E  3006               	movlw	6
  4661  0B1F  00F0               	movwf	___lwmod@divisor
  4662  0B20  3000               	movlw	0
  4663  0B21  00F1               	movwf	___lwmod@divisor+1
  4664  0B22  0828               	movf	nrf24l01GetPipe@pipe,w
  4665  0B23  00FE               	movwf	126
  4666  0B24  01FF               	clrf	127
  4667  0B25  087E               	movf	126,w
  4668  0B26  00F2               	movwf	___lwmod@dividend
  4669  0B27  087F               	movf	127,w
  4670  0B28  00F3               	movwf	___lwmod@dividend+1
  4671  0B29  318A  226B         	fcall	___lwmod
  4672  0B2B  0870               	movf	?___lwmod,w
  4673  0B2C  0008               	return
  4674  0B2D                     __end_of_nrf24l01GetPipe:	
  4675                           
  4676                           	psect	text8
  4677  0A6B                     __ptext8:	
  4678 ;; *************** function ___lwmod *****************
  4679 ;; Defined at:
  4680 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4681 ;; Parameters:    Size  Location     Type
  4682 ;;  divisor         2    0[COMMON] unsigned int 
  4683 ;;  dividend        2    2[COMMON] unsigned int 
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;  counter         1    6[BANK0 ] unsigned char 
  4686 ;; Return value:  Size  Location     Type
  4687 ;;                  2    0[COMMON] unsigned int 
  4688 ;; Registers used:
  4689 ;;		wreg, status,2, status,0, btemp+11
  4690 ;; Tracked objects:
  4691 ;;		On entry : 0/0
  4692 ;;		On exit  : 0/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4695 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4698 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4699 ;;Total ram usage:        5 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    7
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		_nrf24l01GetPipe
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           
  4710                           ;psect for function ___lwmod
  4711  0A6B                     ___lwmod:	
  4712                           
  4713                           ;incstack = 0
  4714                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+11]
  4715  0A6B  0870               	movf	___lwmod@divisor,w
  4716  0A6C  0471               	iorwf	___lwmod@divisor+1,w
  4717  0A6D  1903               	btfsc	3,2
  4718  0A6E  2A93               	goto	l4694
  4719  0A6F  0020               	movlb	0	; select bank0
  4720  0A70  01A6               	clrf	___lwmod@counter
  4721  0A71  0AA6               	incf	___lwmod@counter,f
  4722  0A72                     l4684:	
  4723  0A72  1BF1               	btfsc	___lwmod@divisor+1,7
  4724  0A73  2A7E               	goto	l4686
  4725  0A74  3001               	movlw	1
  4726  0A75                     u5185:	
  4727  0A75  35F0               	lslf	___lwmod@divisor,f
  4728  0A76  0DF1               	rlf	___lwmod@divisor+1,f
  4729  0A77  0B89               	decfsz	9,f
  4730  0A78  2A75               	goto	u5185
  4731  0A79  3001               	movlw	1
  4732  0A7A  00FF               	movwf	127
  4733  0A7B  087F               	movf	127,w
  4734  0A7C  07A6               	addwf	___lwmod@counter,f
  4735  0A7D  2A72               	goto	l4684
  4736  0A7E                     l4686:	
  4737  0A7E  0871               	movf	___lwmod@divisor+1,w
  4738  0A7F  0273               	subwf	___lwmod@dividend+1,w
  4739  0A80  1D03               	skipz
  4740  0A81  2A84               	goto	u5205
  4741  0A82  0870               	movf	___lwmod@divisor,w
  4742  0A83  0272               	subwf	___lwmod@dividend,w
  4743  0A84                     u5205:	
  4744  0A84  1C03               	skipc
  4745  0A85  2A8A               	goto	l4690
  4746  0A86  0870               	movf	___lwmod@divisor,w
  4747  0A87  02F2               	subwf	___lwmod@dividend,f
  4748  0A88  0871               	movf	___lwmod@divisor+1,w
  4749  0A89  3BF3               	subwfb	___lwmod@dividend+1,f
  4750  0A8A                     l4690:	
  4751  0A8A  3001               	movlw	1
  4752  0A8B                     u5215:	
  4753  0A8B  36F1               	lsrf	___lwmod@divisor+1,f
  4754  0A8C  0CF0               	rrf	___lwmod@divisor,f
  4755  0A8D  0B89               	decfsz	9,f
  4756  0A8E  2A8B               	goto	u5215
  4757  0A8F  3001               	movlw	1
  4758  0A90  02A6               	subwf	___lwmod@counter,f
  4759  0A91  1D03               	btfss	3,2
  4760  0A92  2A7E               	goto	l4686
  4761  0A93                     l4694:	
  4762  0A93  0873               	movf	___lwmod@dividend+1,w
  4763  0A94  00F1               	movwf	?___lwmod+1
  4764  0A95  0872               	movf	___lwmod@dividend,w
  4765  0A96  00F0               	movwf	?___lwmod
  4766  0A97  0008               	return
  4767  0A98                     __end_of___lwmod:	
  4768                           
  4769                           	psect	text9
  4770  0428                     __ptext9:	
  4771 ;; *************** function _loop *****************
  4772 ;; Defined at:
  4773 ;;		line 107 in file "main.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;		None
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;  packet         33   12[BANK4 ] struct .
  4778 ;;  ta              3    3[BANK4 ] float 
  4779 ;;  vt              3    0[BANK4 ] float 
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  1    wreg      void 
  4782 ;; Registers used:
  4783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Locals:         0       0       0       0       0      45       0       0       0       0       0       0       
      +0       0
  4791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;      Totals:         0       0       0       0       0      45       0       0       0       0       0       0       
      +0       0
  4793 ;;Total ram usage:       45 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:   14
  4796 ;; This function calls:
  4797 ;;		___ftadd
  4798 ;;		___ftdiv
  4799 ;;		___ftmul
  4800 ;;		___ftneg
  4801 ;;		___lwtoft
  4802 ;;		_getADCValue
  4803 ;;		_sendMessage
  4804 ;; This function is called by:
  4805 ;;		_main
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           
  4810                           ;psect for function _loop
  4811  0428                     _loop:	
  4812                           
  4813                           ;main.c: 109: nrf24l01Packet_t packet;;main.c: 117: sendMessage(&packet, "COUNT", counte
      +                          r);
  4814                           
  4815                           ;incstack = 0
  4816                           ; Regs used in _loop: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  4817  0428  302C               	movlw	low loop@packet
  4818  0429  0021               	movlb	1	; select bank1
  4819  042A  00B1               	movwf	sendMessage@packet^(0+128)
  4820  042B  3002               	movlw	high loop@packet
  4821  042C  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4822  042D  3034               	movlw	low (STR_3| (0+32768))
  4823  042E  00B3               	movwf	sendMessage@topic^(0+128)
  4824  042F  3090               	movlw	high (STR_3| (0+32768))
  4825  0430  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4826  0431  0867               	movf	(_counter+1)^(0+128),w
  4827  0432  00F1               	movwf	___lwtoft@c+1
  4828  0433  0866               	movf	_counter^(0+128),w
  4829  0434  00F0               	movwf	___lwtoft@c
  4830  0435  3188  20A9  3184   	fcall	___lwtoft
  4831  0438  0870               	movf	?___lwtoft,w
  4832  0439  0021               	movlb	1	; select bank1
  4833  043A  00B5               	movwf	sendMessage@value^(0+128)
  4834  043B  0871               	movf	?___lwtoft+1,w
  4835  043C  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4836  043D  0872               	movf	?___lwtoft+2,w
  4837  043E  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4838  043F  318D  25B2  3184   	fcall	_sendMessage
  4839                           
  4840                           ;main.c: 124: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4841  0442  30CF               	movlw	207
  4842  0443  0020               	movlb	0	; select bank0
  4843  0444  00CB               	movwf	___ftmul@f1
  4844  0445  3046               	movlw	70
  4845  0446  00CC               	movwf	___ftmul@f1+1
  4846  0447  3040               	movlw	64
  4847  0448  00CD               	movwf	___ftmul@f1+2
  4848  0449  3004               	movlw	4
  4849  044A  3187  275A  3184   	fcall	_getADCValue
  4850  044D  0020               	movlb	0	; select bank0
  4851  044E  0842               	movf	?_getADCValue,w
  4852  044F  00CE               	movwf	___ftmul@f2
  4853  0450  0843               	movf	?_getADCValue+1,w
  4854  0451  00CF               	movwf	___ftmul@f2+1
  4855  0452  0844               	movf	?_getADCValue+2,w
  4856  0453  00D0               	movwf	___ftmul@f2+2
  4857  0454  3185  25FC  3184   	fcall	___ftmul
  4858  0457  0020               	movlb	0	; select bank0
  4859  0458  084B               	movf	?___ftmul,w
  4860  0459  0024               	movlb	4	; select bank4
  4861  045A  00A6               	movwf	_loop$2273^(0+512)
  4862  045B  0020               	movlb	0	; select bank0
  4863  045C  084C               	movf	?___ftmul+1,w
  4864  045D  0024               	movlb	4	; select bank4
  4865  045E  00A7               	movwf	(_loop$2273+1)^(0+512)
  4866  045F  0020               	movlb	0	; select bank0
  4867  0460  084D               	movf	?___ftmul+2,w
  4868  0461  0024               	movlb	4	; select bank4
  4869  0462  00A8               	movwf	(_loop$2273+2)^(0+512)
  4870                           
  4871                           ;main.c: 124: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4872  0463  302C               	movlw	low loop@packet
  4873  0464  0021               	movlb	1	; select bank1
  4874  0465  00B1               	movwf	sendMessage@packet^(0+128)
  4875  0466  3002               	movlw	high loop@packet
  4876  0467  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4877  0468  3044               	movlw	low (STR_4| (0+32768))
  4878  0469  00B3               	movwf	sendMessage@topic^(0+128)
  4879  046A  3090               	movlw	high (STR_4| (0+32768))
  4880  046B  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4881  046C  0024               	movlb	4	; select bank4
  4882  046D  0826               	movf	_loop$2273^(0+512),w
  4883  046E  0021               	movlb	1	; select bank1
  4884  046F  00B5               	movwf	sendMessage@value^(0+128)
  4885  0470  0024               	movlb	4	; select bank4
  4886  0471  0827               	movf	(_loop$2273+1)^(0+512),w
  4887  0472  0021               	movlb	1	; select bank1
  4888  0473  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4889  0474  0024               	movlb	4	; select bank4
  4890  0475  0828               	movf	(_loop$2273+2)^(0+512),w
  4891  0476  0021               	movlb	1	; select bank1
  4892  0477  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4893  0478  318D  25B2  3184   	fcall	_sendMessage
  4894                           
  4895                           ;main.c: 136: FVRCONbits.TSEN = 1;
  4896  047B  0022               	movlb	2	; select bank2
  4897  047C  1697               	bsf	23,5	;volatile
  4898                           
  4899                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4900  047D  303D               	movlw	61
  4901  047E  3187  275A  3184   	fcall	_getADCValue
  4902  0481  0020               	movlb	0	; select bank0
  4903  0482  0842               	movf	?_getADCValue,w
  4904  0483  00CB               	movwf	___ftneg@f1
  4905  0484  0843               	movf	?_getADCValue+1,w
  4906  0485  00CC               	movwf	___ftneg@f1+1
  4907  0486  0844               	movf	?_getADCValue+2,w
  4908  0487  00CD               	movwf	___ftneg@f1+2
  4909  0488  3188  2020  3184   	fcall	___ftneg
  4910  048B  0020               	movlb	0	; select bank0
  4911  048C  084B               	movf	?___ftneg,w
  4912  048D  0024               	movlb	4	; select bank4
  4913  048E  00A9               	movwf	_loop$2274^(0+512)
  4914  048F  0020               	movlb	0	; select bank0
  4915  0490  084C               	movf	?___ftneg+1,w
  4916  0491  0024               	movlb	4	; select bank4
  4917  0492  00AA               	movwf	(_loop$2274+1)^(0+512)
  4918  0493  0020               	movlb	0	; select bank0
  4919  0494  084D               	movf	?___ftneg+2,w
  4920  0495  0024               	movlb	4	; select bank4
  4921  0496  00AB               	movwf	(_loop$2274+2)^(0+512)
  4922                           
  4923                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4924  0497  3000               	movlw	0
  4925  0498  0020               	movlb	0	; select bank0
  4926  0499  00B5               	movwf	___ftdiv@f2
  4927  049A  3000               	movlw	0
  4928  049B  00B6               	movwf	___ftdiv@f2+1
  4929  049C  3040               	movlw	64
  4930  049D  00B7               	movwf	___ftdiv@f2+2
  4931  049E  3012               	movlw	18
  4932  049F  00AB               	movwf	___ftadd@f1
  4933  04A0  3003               	movlw	3
  4934  04A1  00AC               	movwf	___ftadd@f1+1
  4935  04A2  3040               	movlw	64
  4936  04A3  00AD               	movwf	___ftadd@f1+2
  4937  04A4  0024               	movlb	4	; select bank4
  4938  04A5  0829               	movf	_loop$2274^(0+512),w
  4939  04A6  0020               	movlb	0	; select bank0
  4940  04A7  00AE               	movwf	___ftadd@f2
  4941  04A8  0024               	movlb	4	; select bank4
  4942  04A9  082A               	movf	(_loop$2274+1)^(0+512),w
  4943  04AA  0020               	movlb	0	; select bank0
  4944  04AB  00AF               	movwf	___ftadd@f2+1
  4945  04AC  0024               	movlb	4	; select bank4
  4946  04AD  082B               	movf	(_loop$2274+2)^(0+512),w
  4947  04AE  0020               	movlb	0	; select bank0
  4948  04AF  00B0               	movwf	___ftadd@f2+2
  4949  04B0  3183  2332  3184   	fcall	___ftadd
  4950  04B3  0020               	movlb	0	; select bank0
  4951  04B4  082B               	movf	?___ftadd,w
  4952  04B5  00B8               	movwf	___ftdiv@f1
  4953  04B6  082C               	movf	?___ftadd+1,w
  4954  04B7  00B9               	movwf	___ftdiv@f1+1
  4955  04B8  082D               	movf	?___ftadd+2,w
  4956  04B9  00BA               	movwf	___ftdiv@f1+2
  4957  04BA  318F  2757  3184   	fcall	___ftdiv
  4958  04BD  0020               	movlb	0	; select bank0
  4959  04BE  0835               	movf	?___ftdiv,w
  4960  04BF  0024               	movlb	4	; select bank4
  4961  04C0  00A0               	movwf	loop@vt^(0+512)
  4962  04C1  0020               	movlb	0	; select bank0
  4963  04C2  0836               	movf	?___ftdiv+1,w
  4964  04C3  0024               	movlb	4	; select bank4
  4965  04C4  00A1               	movwf	(loop@vt+1)^(0+512)
  4966  04C5  0020               	movlb	0	; select bank0
  4967  04C6  0837               	movf	?___ftdiv+2,w
  4968  04C7  0024               	movlb	4	; select bank4
  4969  04C8  00A2               	movwf	(loop@vt+2)^(0+512)
  4970                           
  4971                           ;main.c: 138: FVRCONbits.TSEN = 0;
  4972  04C9  0022               	movlb	2	; select bank2
  4973  04CA  1297               	bcf	23,5	;volatile
  4974                           
  4975                           ;main.c: 143: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4976  04CB  30A9               	movlw	169
  4977  04CC  0020               	movlb	0	; select bank0
  4978  04CD  00AB               	movwf	___ftadd@f1
  4979  04CE  30D1               	movlw	209
  4980  04CF  00AC               	movwf	___ftadd@f1+1
  4981  04D0  3043               	movlw	67
  4982  04D1  00AD               	movwf	___ftadd@f1+2
  4983  04D2  3004               	movlw	4
  4984  04D3  00B5               	movwf	___ftdiv@f2
  4985  04D4  30AD               	movlw	173
  4986  04D5  00B6               	movwf	___ftdiv@f2+1
  4987  04D6  30BA               	movlw	186
  4988  04D7  00B7               	movwf	___ftdiv@f2+2
  4989  04D8  0024               	movlb	4	; select bank4
  4990  04D9  0820               	movf	loop@vt^(0+512),w
  4991  04DA  0020               	movlb	0	; select bank0
  4992  04DB  00B8               	movwf	___ftdiv@f1
  4993  04DC  0024               	movlb	4	; select bank4
  4994  04DD  0821               	movf	(loop@vt+1)^(0+512),w
  4995  04DE  0020               	movlb	0	; select bank0
  4996  04DF  00B9               	movwf	___ftdiv@f1+1
  4997  04E0  0024               	movlb	4	; select bank4
  4998  04E1  0822               	movf	(loop@vt+2)^(0+512),w
  4999  04E2  0020               	movlb	0	; select bank0
  5000  04E3  00BA               	movwf	___ftdiv@f1+2
  5001  04E4  318F  2757  3184   	fcall	___ftdiv
  5002  04E7  0020               	movlb	0	; select bank0
  5003  04E8  0835               	movf	?___ftdiv,w
  5004  04E9  00AE               	movwf	___ftadd@f2
  5005  04EA  0836               	movf	?___ftdiv+1,w
  5006  04EB  00AF               	movwf	___ftadd@f2+1
  5007  04EC  0837               	movf	?___ftdiv+2,w
  5008  04ED  00B0               	movwf	___ftadd@f2+2
  5009  04EE  3183  2332  3184   	fcall	___ftadd
  5010  04F1  0020               	movlb	0	; select bank0
  5011  04F2  082B               	movf	?___ftadd,w
  5012  04F3  0024               	movlb	4	; select bank4
  5013  04F4  00A3               	movwf	loop@ta^(0+512)
  5014  04F5  0020               	movlb	0	; select bank0
  5015  04F6  082C               	movf	?___ftadd+1,w
  5016  04F7  0024               	movlb	4	; select bank4
  5017  04F8  00A4               	movwf	(loop@ta+1)^(0+512)
  5018  04F9  0020               	movlb	0	; select bank0
  5019  04FA  082D               	movf	?___ftadd+2,w
  5020  04FB  0024               	movlb	4	; select bank4
  5021  04FC  00A5               	movwf	(loop@ta+2)^(0+512)
  5022                           
  5023                           ;main.c: 145: sendMessage(&packet, "TEMP", ta);
  5024  04FD  302C               	movlw	low loop@packet
  5025  04FE  0021               	movlb	1	; select bank1
  5026  04FF  00B1               	movwf	sendMessage@packet^(0+128)
  5027  0500  3002               	movlw	high loop@packet
  5028  0501  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  5029  0502  303F               	movlw	low (STR_5| (0+32768))
  5030  0503  00B3               	movwf	sendMessage@topic^(0+128)
  5031  0504  3090               	movlw	high (STR_5| (0+32768))
  5032  0505  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  5033  0506  0024               	movlb	4	; select bank4
  5034  0507  0823               	movf	loop@ta^(0+512),w
  5035  0508  0021               	movlb	1	; select bank1
  5036  0509  00B5               	movwf	sendMessage@value^(0+128)
  5037  050A  0024               	movlb	4	; select bank4
  5038  050B  0824               	movf	(loop@ta+1)^(0+512),w
  5039  050C  0021               	movlb	1	; select bank1
  5040  050D  00B6               	movwf	(sendMessage@value+1)^(0+128)
  5041  050E  0024               	movlb	4	; select bank4
  5042  050F  0825               	movf	(loop@ta+2)^(0+512),w
  5043  0510  0021               	movlb	1	; select bank1
  5044  0511  00B7               	movwf	(sendMessage@value+2)^(0+128)
  5045  0512  318D  25B2         	fcall	_sendMessage
  5046  0514  0008               	return
  5047  0515                     __end_of_loop:	
  5048                           
  5049                           	psect	text10
  5050  0DB2                     __ptext10:	
  5051 ;; *************** function _sendMessage *****************
  5052 ;; Defined at:
  5053 ;;		line 87 in file "main.c"
  5054 ;; Parameters:    Size  Location     Type
  5055 ;;  packet          2   17[BANK1 ] PTR struct .
  5056 ;;		 -> main@packet(33), loop@packet(33), 
  5057 ;;  topic           2   19[BANK1 ] PTR const unsigned char 
  5058 ;;		 -> STR_7(5), STR_5(5), STR_4(5), STR_3(6), 
  5059 ;;  value           3   21[BANK1 ] float 
  5060 ;; Auto vars:     Size  Location     Type
  5061 ;;  ftoaStatus      2   24[BANK1 ] int 
  5062 ;; Return value:  Size  Location     Type
  5063 ;;                  1    wreg      void 
  5064 ;; Registers used:
  5065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5066 ;; Tracked objects:
  5067 ;;		On entry : 0/0
  5068 ;;		On exit  : 0/0
  5069 ;;		Unchanged: 0/0
  5070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5071 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5072 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5074 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5075 ;;Total ram usage:        9 bytes
  5076 ;; Hardware stack levels used:    1
  5077 ;; Hardware stack levels required when called:   13
  5078 ;; This function calls:
  5079 ;;		_ftoa
  5080 ;;		_memset
  5081 ;;		_nrf24l01SendPacket
  5082 ;;		_sleepMs
  5083 ;;		_strcat
  5084 ;;		_strcpy
  5085 ;; This function is called by:
  5086 ;;		_loop
  5087 ;;		_main
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           
  5092                           ;psect for function _sendMessage
  5093  0DB2                     _sendMessage:	
  5094                           
  5095                           ;main.c: 89: int ftoaStatus;;main.c: 91: memset(packet->Message, 0, sizeof(packet->Messa
      +                          ge));
  5096                           
  5097                           ;incstack = 0
  5098                           ; Regs used in _sendMessage: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath+cstack]
  5099  0DB2  3020               	movlw	32
  5100  0DB3  001E               	movwi fsr1++
  5101  0DB4  3000               	movlw	0
  5102  0DB5  001E               	movwi fsr1++
  5103  0DB6  3000               	movlw	0
  5104  0DB7  001E               	movwi fsr1++
  5105  0DB8  001E               	movwi fsr1++
  5106  0DB9  0021               	movlb	1	; select bank1
  5107  0DBA  0831               	movf	sendMessage@packet^(0+128),w
  5108  0DBB  3E01               	addlw	1
  5109  0DBC  00FE               	movwf	126
  5110  0DBD  3000               	movlw	0
  5111  0DBE  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5112  0DBF  00FF               	movwf	127
  5113  0DC0  087E               	movf	126,w
  5114  0DC1  001E               	movwi fsr1++
  5115  0DC2  087F               	movf	127,w
  5116  0DC3  001E               	movwi fsr1++
  5117  0DC4  318A  22C7  318D   	fcall	_memset
  5118                           
  5119                           ;main.c: 92: strcpy(packet->Message, romData->name);
  5120  0DC7  0021               	movlb	1	; select bank1
  5121  0DC8  0831               	movf	sendMessage@packet^(0+128),w
  5122  0DC9  3E01               	addlw	1
  5123  0DCA  00F0               	movwf	strcpy@to
  5124  0DCB  3000               	movlw	0
  5125  0DCC  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5126  0DCD  00F1               	movwf	strcpy@to+1
  5127  0DCE  0869               	movf	_romData^(0+128),w
  5128  0DCF  3E01               	addlw	1
  5129  0DD0  00F2               	movwf	strcpy@from
  5130  0DD1  3001               	movlw	1
  5131  0DD2  00F3               	movwf	strcpy@from+1
  5132  0DD3  3188  20D9  318D   	fcall	_strcpy
  5133                           
  5134                           ;main.c: 93: strcat(packet->Message, "/");
  5135  0DD6  0021               	movlb	1	; select bank1
  5136  0DD7  0831               	movf	sendMessage@packet^(0+128),w
  5137  0DD8  3E01               	addlw	1
  5138  0DD9  00AD               	movwf	strcat@to^(0+128)
  5139  0DDA  3000               	movlw	0
  5140  0DDB  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5141  0DDC  00AE               	movwf	(strcat@to+1)^(0+128)
  5142  0DDD  3052               	movlw	low (STR_1| (0+32768))
  5143  0DDE  00AF               	movwf	strcat@from^(0+128)
  5144  0DDF  3090               	movlw	high (STR_1| (0+32768))
  5145  0DE0  00B0               	movwf	(strcat@from^(0+128)+1)
  5146  0DE1  318A  2298  318D   	fcall	_strcat
  5147                           
  5148                           ;main.c: 94: strcat(packet->Message, topic);
  5149  0DE4  0021               	movlb	1	; select bank1
  5150  0DE5  0831               	movf	sendMessage@packet^(0+128),w
  5151  0DE6  3E01               	addlw	1
  5152  0DE7  00AD               	movwf	strcat@to^(0+128)
  5153  0DE8  3000               	movlw	0
  5154  0DE9  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5155  0DEA  00AE               	movwf	(strcat@to+1)^(0+128)
  5156  0DEB  0834               	movf	(sendMessage@topic+1)^(0+128),w
  5157  0DEC  00B0               	movwf	(strcat@from+1)^(0+128)
  5158  0DED  0833               	movf	sendMessage@topic^(0+128),w
  5159  0DEE  00AF               	movwf	strcat@from^(0+128)
  5160  0DEF  318A  2298  318D   	fcall	_strcat
  5161                           
  5162                           ;main.c: 95: strcat(packet->Message, "/");
  5163  0DF2  0021               	movlb	1	; select bank1
  5164  0DF3  0831               	movf	sendMessage@packet^(0+128),w
  5165  0DF4  3E01               	addlw	1
  5166  0DF5  00AD               	movwf	strcat@to^(0+128)
  5167  0DF6  3000               	movlw	0
  5168  0DF7  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5169  0DF8  00AE               	movwf	(strcat@to+1)^(0+128)
  5170  0DF9  3052               	movlw	low (STR_1| (0+32768))
  5171  0DFA  00AF               	movwf	strcat@from^(0+128)
  5172  0DFB  3090               	movlw	high (STR_1| (0+32768))
  5173  0DFC  00B0               	movwf	(strcat@from^(0+128)+1)
  5174  0DFD  318A  2298  318D   	fcall	_strcat
  5175                           
  5176                           ;main.c: 96: strcat(packet->Message, ftoa(value, &ftoaStatus));
  5177  0E00  0021               	movlb	1	; select bank1
  5178  0E01  0831               	movf	sendMessage@packet^(0+128),w
  5179  0E02  3E01               	addlw	1
  5180  0E03  00AD               	movwf	strcat@to^(0+128)
  5181  0E04  3000               	movlw	0
  5182  0E05  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5183  0E06  00AE               	movwf	(strcat@to+1)^(0+128)
  5184  0E07  0835               	movf	sendMessage@value^(0+128),w
  5185  0E08  00A0               	movwf	ftoa@f^(0+128)
  5186  0E09  0836               	movf	(sendMessage@value+1)^(0+128),w
  5187  0E0A  00A1               	movwf	(ftoa@f+1)^(0+128)
  5188  0E0B  0837               	movf	(sendMessage@value+2)^(0+128),w
  5189  0E0C  00A2               	movwf	(ftoa@f+2)^(0+128)
  5190  0E0D  30B8               	movlw	(low (sendMessage@ftoaStatus| 0))& (0+255)
  5191  0E0E  00FF               	movwf	127
  5192  0E0F  087F               	movf	127,w
  5193  0E10  00A3               	movwf	ftoa@status^(0+128)
  5194  0E11  3185  2515  318D   	fcall	_ftoa
  5195  0E14  0021               	movlb	1	; select bank1
  5196  0E15  00AF               	movwf	strcat@from^(0+128)
  5197  0E16  3001               	movlw	1
  5198  0E17  00B0               	movwf	(strcat@from+1)^(0+128)
  5199  0E18  318A  2298  318D   	fcall	_strcat
  5200                           
  5201                           ;main.c: 98: packet->packetData.byte = 0;
  5202  0E1B  0021               	movlb	1	; select bank1
  5203  0E1C  0831               	movf	sendMessage@packet^(0+128),w
  5204  0E1D  0084               	movwf	4
  5205  0E1E  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5206  0E1F  0085               	movwf	5
  5207  0E20  0180               	clrf	0
  5208                           
  5209                           ;main.c: 99: packet->packetData.ACKRequest = 1;
  5210  0E21  0831               	movf	sendMessage@packet^(0+128),w
  5211  0E22  0084               	movwf	4
  5212  0E23  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5213  0E24  0085               	movwf	5
  5214  0E25  1500               	bsf	0,2
  5215                           
  5216                           ;main.c: 101: nrf24l01SendPacket(packet);
  5217  0E26  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5218  0E27  0020               	movlb	0	; select bank0
  5219  0E28  00A9               	movwf	nrf24l01SendPacket@txPacket+1
  5220  0E29  0021               	movlb	1	; select bank1
  5221  0E2A  0831               	movf	sendMessage@packet^(0+128),w
  5222  0E2B  0020               	movlb	0	; select bank0
  5223  0E2C  00A8               	movwf	nrf24l01SendPacket@txPacket
  5224  0E2D  318B  23E7  318D   	fcall	_nrf24l01SendPacket
  5225                           
  5226                           ;main.c: 103: sleepMs(500);
  5227  0E30  30F4               	movlw	244
  5228  0E31  00F0               	movwf	sleepMs@milliseconds
  5229  0E32  3001               	movlw	1
  5230  0E33  00F1               	movwf	sleepMs@milliseconds+1
  5231  0E34  318A  223F         	fcall	_sleepMs
  5232  0E36  0008               	return
  5233  0E37                     __end_of_sendMessage:	
  5234                           
  5235                           	psect	text11
  5236  0A98                     __ptext11:	
  5237 ;; *************** function _strcat *****************
  5238 ;; Defined at:
  5239 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;  to              2   13[BANK1 ] PTR unsigned char 
  5242 ;;		 -> main@packet(33), loop@packet(33), 
  5243 ;;  from            2   15[BANK1 ] PTR const unsigned char 
  5244 ;;		 -> ftoa@buf(17), STR_7(5), STR_5(5), STR_4(5), 
  5245 ;;		 -> STR_3(6), STR_2(2), STR_1(2), 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;  cp              2   65[BANK0 ] PTR unsigned char 
  5248 ;;		 -> main@packet(33), loop@packet(33), 
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  2   13[BANK1 ] PTR unsigned char 
  5251 ;; Registers used:
  5252 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5258 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5261 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5262 ;;Total ram usage:        6 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:    7
  5265 ;; This function calls:
  5266 ;;		Nothing
  5267 ;; This function is called by:
  5268 ;;		_sendMessage
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           
  5273                           ;psect for function _strcat
  5274  0A98                     _strcat:	
  5275                           
  5276                           ;incstack = 0
  5277                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5278  0A98  0021               	movlb	1	; select bank1
  5279  0A99  082E               	movf	(strcat@to+1)^(0+128),w
  5280  0A9A  0020               	movlb	0	; select bank0
  5281  0A9B  00E2               	movwf	strcat@cp+1
  5282  0A9C  0021               	movlb	1	; select bank1
  5283  0A9D  082D               	movf	strcat@to^(0+128),w
  5284  0A9E  0020               	movlb	0	; select bank0
  5285  0A9F  00E1               	movwf	strcat@cp
  5286  0AA0                     l4254:	
  5287  0AA0  0861               	movf	strcat@cp,w
  5288  0AA1  0084               	movwf	4
  5289  0AA2  0862               	movf	strcat@cp+1,w
  5290  0AA3  0085               	movwf	5
  5291  0AA4  0800               	movf	0,w
  5292  0AA5  1903               	btfsc	3,2
  5293  0AA6  2AB5               	goto	l4258
  5294  0AA7  3001               	movlw	1
  5295  0AA8  07E1               	addwf	strcat@cp,f
  5296  0AA9  3000               	movlw	0
  5297  0AAA  3DE2               	addwfc	strcat@cp+1,f
  5298  0AAB  2AA0               	goto	l4254
  5299  0AAC                     l4256:	
  5300  0AAC  3001               	movlw	1
  5301  0AAD  07E1               	addwf	strcat@cp,f
  5302  0AAE  3000               	movlw	0
  5303  0AAF  3DE2               	addwfc	strcat@cp+1,f
  5304  0AB0  3001               	movlw	1
  5305  0AB1  0021               	movlb	1	; select bank1
  5306  0AB2  07AF               	addwf	strcat@from^(0+128),f
  5307  0AB3  3000               	movlw	0
  5308  0AB4  3DB0               	addwfc	(strcat@from+1)^(0+128),f
  5309  0AB5                     l4258:	
  5310  0AB5  0021               	movlb	1	; select bank1
  5311  0AB6  082F               	movf	strcat@from^(0+128),w
  5312  0AB7  0084               	movwf	4
  5313  0AB8  0830               	movf	(strcat@from+1)^(0+128),w
  5314  0AB9  0085               	movwf	5
  5315  0ABA  0800               	movf	0,w	;code access
  5316  0ABB  00FF               	movwf	127
  5317  0ABC  0020               	movlb	0	; select bank0
  5318  0ABD  0861               	movf	strcat@cp,w
  5319  0ABE  0084               	movwf	4
  5320  0ABF  0862               	movf	strcat@cp+1,w
  5321  0AC0  0085               	movwf	5
  5322  0AC1  087F               	movf	127,w
  5323  0AC2  0080               	movwf	0
  5324  0AC3  0800               	movf	0,w
  5325  0AC4  1903               	btfsc	3,2
  5326  0AC5  0008               	return
  5327  0AC6  2AAC               	goto	l4256
  5328  0AC7                     __end_of_strcat:	
  5329                           ;	Return value of _strcat is never used
  5330                           
  5331                           
  5332                           	psect	text12
  5333  0BE7                     __ptext12:	
  5334 ;; *************** function _nrf24l01SendPacket *****************
  5335 ;; Defined at:
  5336 ;;		line 132 in file "nrf24l01.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  txPacket        2    8[BANK0 ] PTR struct .
  5339 ;;		 -> main@packet(33), loop@packet(33), 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  loopCount       2   10[BANK0 ] unsigned int 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  1    wreg      void 
  5344 ;; Registers used:
  5345 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5351 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5355 ;;Total ram usage:        4 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:   12
  5358 ;; This function calls:
  5359 ;;		_exception
  5360 ;;		_nrf24l01Service
  5361 ;;		_sleepMs
  5362 ;;		_strcpy
  5363 ;; This function is called by:
  5364 ;;		_sendMessage
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           
  5369                           ;psect for function _nrf24l01SendPacket
  5370  0BE7                     _nrf24l01SendPacket:	
  5371                           
  5372                           ;nrf24l01.c: 134: unsigned int loopCount = 1000;
  5373                           
  5374                           ;incstack = 0
  5375                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-bte
      +                          mp+11+pclath+cstack]
  5376  0BE7  30E8               	movlw	232
  5377  0BE8  0020               	movlb	0	; select bank0
  5378  0BE9  00AA               	movwf	nrf24l01SendPacket@loopCount
  5379  0BEA  3003               	movlw	3
  5380  0BEB  00AB               	movwf	nrf24l01SendPacket@loopCount+1
  5381  0BEC                     l4292:	
  5382                           ;nrf24l01.c: 135: while (status.TX != 0){
  5383                           
  5384  0BEC  0020               	movlb	0	; select bank0
  5385  0BED  0864               	movf	_status,w	;volatile
  5386  0BEE  1903               	btfsc	3,2
  5387  0BEF  2C0A               	goto	l4294
  5388                           
  5389                           ;nrf24l01.c: 136: sleepMs(1);
  5390  0BF0  3001               	movlw	1
  5391  0BF1  00F0               	movwf	sleepMs@milliseconds
  5392  0BF2  3000               	movlw	0
  5393  0BF3  00F1               	movwf	sleepMs@milliseconds+1
  5394  0BF4  318A  223F  318B   	fcall	_sleepMs
  5395                           
  5396                           ;nrf24l01.c: 137: nrf24l01Service();
  5397  0BF7  3186  26B0  318B   	fcall	_nrf24l01Service
  5398                           
  5399                           ;nrf24l01.c: 139: if (!loopCount--){
  5400  0BFA  3001               	movlw	1
  5401  0BFB  0020               	movlb	0	; select bank0
  5402  0BFC  02AA               	subwf	nrf24l01SendPacket@loopCount,f
  5403  0BFD  3000               	movlw	0
  5404  0BFE  3BAB               	subwfb	nrf24l01SendPacket@loopCount+1,f
  5405  0BFF  0A2A               	incf	nrf24l01SendPacket@loopCount,w
  5406  0C00  1D03               	skipz
  5407  0C01  2BEC               	goto	l4292
  5408  0C02  0A2B               	incf	nrf24l01SendPacket@loopCount+1,w
  5409  0C03  1D03               	btfss	3,2
  5410  0C04  2BEC               	goto	l4292
  5411                           
  5412                           ;nrf24l01.c: 140: exception(21);
  5413  0C05  3015               	movlw	21
  5414  0C06  3188  2047  318B   	fcall	_exception
  5415  0C09  2BEC               	goto	l4292
  5416  0C0A                     l4294:	
  5417                           
  5418                           ;nrf24l01.c: 141: };nrf24l01.c: 142: };nrf24l01.c: 144: strcpy(TXPacket.Message, txPacke
      +                          t->Message);
  5419  0C0A  30C2               	movlw	low (_TXPacket+1)
  5420  0C0B  00F0               	movwf	strcpy@to
  5421  0C0C  3001               	movlw	high (_TXPacket+1)
  5422  0C0D  00F1               	movwf	strcpy@to+1
  5423  0C0E  0828               	movf	nrf24l01SendPacket@txPacket,w
  5424  0C0F  3E01               	addlw	1
  5425  0C10  00FE               	movwf	126
  5426  0C11  3000               	movlw	0
  5427  0C12  3D29               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5428  0C13  00FF               	movwf	127
  5429  0C14  087E               	movf	126,w
  5430  0C15  00F2               	movwf	strcpy@from
  5431  0C16  087F               	movf	127,w
  5432  0C17  00F3               	movwf	strcpy@from+1
  5433  0C18  3188  20D9         	fcall	_strcpy
  5434                           
  5435                           ;nrf24l01.c: 145: TXPacket.packetData = txPacket->packetData;
  5436  0C1A  0020               	movlb	0	; select bank0
  5437  0C1B  0828               	movf	nrf24l01SendPacket@txPacket,w
  5438  0C1C  0084               	movwf	4
  5439  0C1D  0829               	movf	nrf24l01SendPacket@txPacket+1,w
  5440  0C1E  0085               	movwf	5
  5441  0C1F  0800               	movf	0,w
  5442  0C20  00FF               	movwf	127
  5443  0C21  087F               	movf	127,w
  5444  0C22  0023               	movlb	3	; select bank3
  5445  0C23  00C1               	movwf	_TXPacket^(0+384)
  5446                           
  5447                           ;nrf24l01.c: 147: status.TX = 1;
  5448  0C24  3001               	movlw	1
  5449  0C25  00FF               	movwf	127
  5450  0C26  087F               	movf	127,w
  5451  0C27  0020               	movlb	0	; select bank0
  5452  0C28  00E4               	movwf	_status	;volatile
  5453  0C29  0008               	return
  5454  0C2A                     __end_of_nrf24l01SendPacket:	
  5455                           
  5456                           	psect	text13
  5457  08D9                     __ptext13:	
  5458 ;; *************** function _strcpy *****************
  5459 ;; Defined at:
  5460 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;  to              2    0[COMMON] PTR unsigned char 
  5463 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5464 ;;  from            2    2[COMMON] PTR const unsigned char 
  5465 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5466 ;;		 -> STR_6(4), loop@packet(33), romDataMap(28), 
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  cp              2    6[BANK0 ] PTR unsigned char 
  5469 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  2    0[COMMON] PTR unsigned char 
  5472 ;; Registers used:
  5473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5479 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5480 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;Total ram usage:        6 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; Hardware stack levels required when called:    7
  5486 ;; This function calls:
  5487 ;;		Nothing
  5488 ;; This function is called by:
  5489 ;;		_sendMessage
  5490 ;;		_main
  5491 ;;		_nrf24l01SendPacket
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           
  5496                           ;psect for function _strcpy
  5497  08D9                     _strcpy:	
  5498                           
  5499                           ;incstack = 0
  5500                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5501  08D9  0871               	movf	strcpy@to+1,w
  5502  08DA  0020               	movlb	0	; select bank0
  5503  08DB  00A7               	movwf	strcpy@cp+1
  5504  08DC  0870               	movf	strcpy@to,w
  5505  08DD  00A6               	movwf	strcpy@cp
  5506  08DE                     l3932:	
  5507  08DE  0872               	movf	strcpy@from,w
  5508  08DF  0084               	movwf	4
  5509  08E0  0873               	movf	strcpy@from+1,w
  5510  08E1  0085               	movwf	5
  5511  08E2  0800               	movf	0,w	;code access
  5512  08E3  00FF               	movwf	127
  5513  08E4  0826               	movf	strcpy@cp,w
  5514  08E5  0084               	movwf	4
  5515  08E6  0827               	movf	strcpy@cp+1,w
  5516  08E7  0085               	movwf	5
  5517  08E8  087F               	movf	127,w
  5518  08E9  0080               	movwf	0
  5519  08EA  0800               	movf	0,w
  5520  08EB  1903               	btfsc	3,2
  5521  08EC  0008               	return
  5522  08ED  3001               	movlw	1
  5523  08EE  07A6               	addwf	strcpy@cp,f
  5524  08EF  3000               	movlw	0
  5525  08F0  3DA7               	addwfc	strcpy@cp+1,f
  5526  08F1  3001               	movlw	1
  5527  08F2  07F2               	addwf	strcpy@from,f
  5528  08F3  3000               	movlw	0
  5529  08F4  3DF3               	addwfc	strcpy@from+1,f
  5530  08F5  28DE               	goto	l3932
  5531  08F6                     __end_of_strcpy:	
  5532                           ;	Return value of _strcpy is never used
  5533                           
  5534                           
  5535                           	psect	text14
  5536  06B0                     __ptext14:	
  5537 ;; *************** function _nrf24l01Service *****************
  5538 ;; Defined at:
  5539 ;;		line 237 in file "nrf24l01.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;		None
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;  width           1  [STACK] unsigned char 
  5544 ;;  i               1  [STACK] unsigned char 
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  1    wreg      void 
  5547 ;; Registers used:
  5548 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 1C/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5558 ;;Total ram usage:        0 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; Hardware stack levels required when called:   11
  5561 ;; This function calls:
  5562 ;;		_memset
  5563 ;;		_nrf24l01SPIEnd
  5564 ;;		_nrf24l01SPISend
  5565 ;;		_nrf24l01SPIStart
  5566 ;;		_nrf24l01Send
  5567 ;;		_nrf24l01SendTXBuffer
  5568 ;;		_nrf24l01SetRXMode
  5569 ;;		_strcmp
  5570 ;; This function is called by:
  5571 ;;		_nrf24l01SendPacket
  5572 ;;		_nrf24l01ISR
  5573 ;; This function uses a reentrant model
  5574 ;;
  5575                           
  5576                           
  5577                           ;psect for function _nrf24l01Service
  5578  06B0                     _nrf24l01Service:	
  5579                           
  5580                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5581  06B0  3142               	addfsr 1,2
  5582                           
  5583                           ;nrf24l01.c: 239: unsigned char i;;nrf24l01.c: 241: if (status.TX == 1){
  5584                           
  5585                           ;incstack = 0
  5586 ;; hardware stack exceeded
  5587                           ; Regs used in _nrf24l01Service: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+
      +                          9+btemp+11+pclath]
  5588  06B1  0020               	movlb	0	; select bank0
  5589  06B2  0364               	decf	_status,w	;volatile
  5590  06B3  1D03               	btfss	3,2
  5591  06B4  2EBB               	goto	l4496
  5592                           
  5593                           ;nrf24l01.c: 244: status.TX = 2;
  5594  06B5  3002               	movlw	2
  5595  06B6  00E4               	movwf	_status	;volatile
  5596                           
  5597                           ;nrf24l01.c: 245: nrf24l01SendTXBuffer(&TXPacket);
  5598  06B7  30C1               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  5599  06B8  318C  24B3  3186   	fcall	_nrf24l01SendTXBuffer
  5600  06BB                     l4496:	
  5601                           
  5602                           ;nrf24l01.c: 246: };nrf24l01.c: 248: if (status.TX == 3){
  5603  06BB  3003               	movlw	3
  5604  06BC  0664               	xorwf	_status,w	;volatile
  5605  06BD  1D03               	btfss	3,2
  5606  06BE  2ECA               	goto	l320
  5607                           
  5608                           ;nrf24l01.c: 249: if (!status.retryCount--){
  5609  06BF  03E8               	decf	_status+4,f	;volatile
  5610  06C0  0A68               	incf	_status+4,w	;volatile
  5611  06C1  1D03               	btfss	3,2
  5612  06C2  2ECA               	goto	l320
  5613                           
  5614                           ;nrf24l01.c: 250: counter++;
  5615  06C3  0021               	movlb	1	; select bank1
  5616  06C4  0AE6               	incf	_counter^(0+128),f
  5617  06C5  1903               	skipnz
  5618  06C6  0AE7               	incf	(_counter+1)^(0+128),f
  5619                           
  5620                           ;nrf24l01.c: 251: status.TX = 1;
  5621  06C7  3001               	movlw	1
  5622  06C8  0020               	movlb	0	; select bank0
  5623  06C9  00E4               	movwf	_status	;volatile
  5624  06CA                     l320:	
  5625                           
  5626                           ;nrf24l01.c: 252: };nrf24l01.c: 253: };nrf24l01.c: 255: if (status.RX == 1){
  5627  06CA  0365               	decf	_status+1,w	;volatile
  5628  06CB  1D03               	btfss	3,2
  5629  06CC  2F2E               	goto	l4538
  5630                           
  5631                           ;nrf24l01.c: 258: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5632  06CD  3020               	movlw	32
  5633  06CE  001E               	movwi fsr1++
  5634  06CF  3000               	movlw	0
  5635  06D0  001E               	movwi fsr1++
  5636  06D1  3000               	movlw	0
  5637  06D2  001E               	movwi fsr1++
  5638  06D3  001E               	movwi fsr1++
  5639  06D4  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5640  06D5  001E               	movwi fsr1++
  5641  06D6  3001               	movlw	1
  5642  06D7  001E               	movwi fsr1++
  5643  06D8  318A  22C7  3186   	fcall	_memset
  5644                           
  5645                           ;nrf24l01.c: 259: RXPacket.packetData.byte = 0x00;
  5646  06DB  0023               	movlb	3	; select bank3
  5647  06DC  01A0               	clrf	_RXPacket^(0+384)
  5648                           
  5649                           ;nrf24l01.c: 262: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5650  06DD  3000               	movlw	0
  5651  06DE  001E               	movwi fsr1++
  5652  06DF  3060               	movlw	96
  5653  06E0  3188  2082  3186   	fcall	_nrf24l01Send
  5654                           
  5655                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5656  06E3  3FFE               	movwi [-2]fsr1
  5657                           
  5658                           ;nrf24l01.c: 265: PORTAbits.RA0 = 0;
  5659  06E4  0020               	movlb	0	; select bank0
  5660  06E5  100C               	bcf	12,0	;volatile
  5661                           
  5662                           ;nrf24l01.c: 268: nrf24l01SPIStart();
  5663  06E6  3188  2032  3186   	fcall	_nrf24l01SPIStart
  5664                           
  5665                           ;nrf24l01.c: 271: nrf24l01SPISend((unsigned) 0b01100001);
  5666  06E9  3061               	movlw	97
  5667  06EA  3188  2062  3186   	fcall	_nrf24l01SPISend
  5668                           
  5669                           ;nrf24l01.c: 274: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5670  06ED  3000               	movlw	0
  5671  06EE  3188  2062  3186   	fcall	_nrf24l01SPISend
  5672  06F1  0023               	movlb	3	; select bank3
  5673  06F2  00A0               	movwf	_RXPacket^(0+384)
  5674                           
  5675                           ;nrf24l01.c: 275: width--;
  5676                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5677  06F3  3F7E               	moviw [-2]fsr1
  5678  06F4  00F4               	movwf	116
  5679  06F5  3001               	movlw	1
  5680  06F6  0274               	subwf	116,w
  5681  06F7  3FFE               	movwi [-2]fsr1
  5682                           
  5683                           ;nrf24l01.c: 277: for (i = 0; i < width; i++) {
  5684                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5685  06F8  3000               	movlw	0
  5686  06F9  3FFF               	movwi [-1]fsr1
  5687  06FA                     l4526:	
  5688                           
  5689                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5690  06FA  3F7F               	moviw [-1]fsr1
  5691  06FB  00FF               	movwf	127
  5692                           
  5693                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5694  06FC  3F7E               	moviw [-2]fsr1
  5695  06FD  027F               	subwf	127,w
  5696  06FE  1803               	btfsc	3,0
  5697  06FF  2F0F               	goto	l4528
  5698                           
  5699                           ;nrf24l01.c: 279: RXPacket.Message[i] = nrf24l01SPISend(0);
  5700                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5701  0700  3F7F               	moviw [-1]fsr1
  5702  0701  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5703  0702  0084               	movwf	4
  5704  0703  3001               	movlw	1	; select bank3/4
  5705  0704  3001               	movlw	1	; select bank3/4
  5706  0705  0085               	movwf	5
  5707  0706  3000               	movlw	0
  5708  0707  3188  2062  3186   	fcall	_nrf24l01SPISend
  5709  070A  0080               	movwf	0
  5710                           
  5711                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5712  070B  3F7F               	moviw [-1]fsr1
  5713  070C  3E01               	addlw	1
  5714  070D  3FFF               	movwi [-1]fsr1
  5715  070E  2EFA               	goto	l4526
  5716  070F                     l4528:	
  5717                           
  5718                           ;nrf24l01.c: 280: };nrf24l01.c: 283: nrf24l01SPIEnd();
  5719  070F  3188  2029  3186   	fcall	_nrf24l01SPIEnd
  5720                           
  5721                           ;nrf24l01.c: 286: PORTAbits.RA0 = 1;
  5722  0712  0020               	movlb	0	; select bank0
  5723  0713  140C               	bsf	12,0	;volatile
  5724                           
  5725                           ;nrf24l01.c: 289: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5726  0714  0C66               	rrf	_status+2,w	;volatile
  5727  0715  3907               	andlw	7
  5728  0716  00FF               	movwf	127
  5729  0717  0EFF               	swapf	127,f
  5730  0718  0023               	movlb	3	; select bank3
  5731  0719  0820               	movf	_RXPacket^(0+384),w
  5732  071A  067F               	xorwf	127,w
  5733  071B  398F               	andlw	-113
  5734  071C  067F               	xorwf	127,w
  5735  071D  00A0               	movwf	_RXPacket^(0+384)
  5736                           
  5737                           ;nrf24l01.c: 292: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5738  071E  3000               	movlw	0
  5739  071F  001E               	movwi fsr1++
  5740  0720  3009               	movlw	9
  5741  0721  3188  2082  3186   	fcall	_nrf24l01Send
  5742  0724  00FF               	movwf	127
  5743  0725  0023               	movlb	3	; select bank3
  5744  0726  0820               	movf	_RXPacket^(0+384),w
  5745  0727  067F               	xorwf	127,w
  5746  0728  39FE               	andlw	-2
  5747  0729  067F               	xorwf	127,w
  5748  072A  00A0               	movwf	_RXPacket^(0+384)
  5749                           
  5750                           ;nrf24l01.c: 294: status.RX = 2;
  5751  072B  3002               	movlw	2
  5752  072C  0020               	movlb	0	; select bank0
  5753  072D  00E5               	movwf	_status+1	;volatile
  5754  072E                     l4538:	
  5755                           
  5756                           ;nrf24l01.c: 295: };nrf24l01.c: 297: if (status.RX == 2){
  5757  072E  3002               	movlw	2
  5758  072F  0665               	xorwf	_status+1,w	;volatile
  5759  0730  1D03               	btfss	3,2
  5760  0731  2F4B               	goto	l4550
  5761                           
  5762                           ;nrf24l01.c: 300: if (RXPacket.packetData.IsACK){
  5763  0732  0023               	movlb	3	; select bank3
  5764  0733  1DA0               	btfss	_RXPacket^(0+384),3
  5765  0734  2F4B               	goto	l4550
  5766                           
  5767                           ;nrf24l01.c: 302: if (status.TX == 3){
  5768  0735  3003               	movlw	3
  5769  0736  0020               	movlb	0	; select bank0
  5770  0737  0664               	xorwf	_status,w	;volatile
  5771  0738  1D03               	btfss	3,2
  5772  0739  2F4B               	goto	l4550
  5773                           
  5774                           ;nrf24l01.c: 304: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5775  073A  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5776  073B  001E               	movwi fsr1++
  5777  073C  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5778  073D  3189  21EC  3186   	fcall	_strcmp
  5779  0740  0874               	movf	116,w
  5780  0741  0475               	iorwf	117,w
  5781  0742  1D03               	btfss	3,2
  5782  0743  2F4B               	goto	l4550
  5783                           
  5784                           ;nrf24l01.c: 305: status.TX = 0;
  5785  0744  0020               	movlb	0	; select bank0
  5786  0745  01E4               	clrf	_status	;volatile
  5787                           
  5788                           ;nrf24l01.c: 306: status.RX = 0;
  5789  0746  01E5               	clrf	_status+1	;volatile
  5790                           
  5791                           ;nrf24l01.c: 308: nrf24l01SetRXMode(0);
  5792  0747  3000               	movlw	0
  5793  0748  318B  232D  3186   	fcall	_nrf24l01SetRXMode
  5794  074B                     l4550:	
  5795                           
  5796                           ;nrf24l01.c: 310: };nrf24l01.c: 311: };nrf24l01.c: 312: };nrf24l01.c: 313: };nrf24l01.c:
      +                           315: if (status.RX == 2){
  5797  074B  3002               	movlw	2
  5798  074C  0020               	movlb	0	; select bank0
  5799  074D  0665               	xorwf	_status+1,w	;volatile
  5800  074E  1D03               	btfss	3,2
  5801  074F  2F58               	goto	l332
  5802                           
  5803                           ;nrf24l01.c: 317: if (RXPacket.packetData.ACKRequest){
  5804  0750  0023               	movlb	3	; select bank3
  5805  0751  1D20               	btfss	_RXPacket^(0+384),2
  5806  0752  2F58               	goto	l332
  5807                           
  5808                           ;nrf24l01.c: 319: RXPacket.packetData.ACKRequest = 0;
  5809  0753  1120               	bcf	_RXPacket^(0+384),2
  5810                           
  5811                           ;nrf24l01.c: 320: RXPacket.packetData.IsACK = 1;
  5812  0754  15A0               	bsf	_RXPacket^(0+384),3
  5813                           
  5814                           ;nrf24l01.c: 322: nrf24l01SendTXBuffer(&RXPacket);
  5815  0755  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5816  0756  318C  24B3         	fcall	_nrf24l01SendTXBuffer
  5817  0758                     l332:	
  5818                           
  5819                           ; _nrf24l01Service: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  5820  0758  317E               	addfsr 1,-2
  5821  0759  0008               	return
  5822  075A                     __end_of_nrf24l01Service:	
  5823                           
  5824                           	psect	text15
  5825  09EC                     __ptext15:	
  5826 ;; *************** function _strcmp *****************
  5827 ;; Defined at:
  5828 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;  s1              1    wreg     PTR const unsigned char 
  5831 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5832 ;;  s2              1  [STACK] PTR const unsigned char 
  5833 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5834 ;; Auto vars:     Size  Location     Type
  5835 ;;  s1              1  [STACK] PTR const unsigned char 
  5836 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5837 ;;  r               1  [STACK] char 
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  2  [STACK] int 
  5840 ;; Registers used:
  5841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5842 ;; Tracked objects:
  5843 ;;		On entry : 1F/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5851 ;;Total ram usage:        0 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:    7
  5854 ;; This function calls:
  5855 ;;		Nothing
  5856 ;; This function is called by:
  5857 ;;		_nrf24l01Service
  5858 ;; This function uses a reentrant model
  5859 ;;
  5860                           
  5861                           
  5862                           ;psect for function _strcmp
  5863  09EC                     _strcmp:	
  5864                           
  5865                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5866  09EC  3142               	addfsr 1,2
  5867                           
  5868                           ;incstack = 0
  5869 ;; hardware stack exceeded
  5870                           ; Regs used in _strcmp: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5871                           ;strcmp@s1 stored from wreg
  5872                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5873  09ED  3FFE               	movwi [-2]fsr1
  5874  09EE  29FC               	goto	l4358
  5875  09EF                     l4360:	
  5876                           
  5877                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5878  09EF  3F7E               	moviw [-2]fsr1
  5879  09F0  0084               	movwf	4
  5880  09F1  3001               	movlw	1	; select bank2/3
  5881  09F2  0085               	movwf	5
  5882  09F3  0800               	movf	0,w
  5883  09F4  1903               	btfsc	3,2
  5884  09F5  2A0E               	goto	l4362
  5885                           
  5886                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5887  09F6  3F7E               	moviw [-2]fsr1
  5888  09F7  3E01               	addlw	1
  5889  09F8  3FFE               	movwi [-2]fsr1
  5890                           
  5891                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5892  09F9  3F7D               	moviw [-3]fsr1
  5893  09FA  3E01               	addlw	1
  5894  09FB  3FFD               	movwi [-3]fsr1
  5895  09FC                     l4358:	
  5896                           
  5897                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5898  09FC  3F7D               	moviw [-3]fsr1
  5899  09FD  0084               	movwf	4
  5900  09FE  3001               	movlw	1	; select bank2/3
  5901  09FF  0085               	movwf	5
  5902  0A00  0800               	movf	0,w
  5903  0A01  00FF               	movwf	127
  5904                           
  5905                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5906  0A02  3F7E               	moviw [-2]fsr1
  5907  0A03  0084               	movwf	4
  5908  0A04  3001               	movlw	1	; select bank2/3
  5909  0A05  0085               	movwf	5
  5910  0A06  0800               	movf	0,w
  5911  0A07  00F4               	movwf	116
  5912  0A08  087F               	movf	127,w
  5913  0A09  0274               	subwf	116,w
  5914                           
  5915                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5916  0A0A  3FFF               	movwi [-1]fsr1
  5917  0A0B  0889               	movf	9,f
  5918  0A0C  1903               	btfsc	3,2
  5919  0A0D  29EF               	goto	l4360
  5920  0A0E                     l4362:	
  5921                           
  5922                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5923  0A0E  3F7F               	moviw [-1]fsr1
  5924  0A0F  00F4               	movwf	116
  5925  0A10  01F5               	clrf	117
  5926  0A11  1BF4               	btfsc	116,7
  5927  0A12  03F5               	decf	117,f
  5928                           
  5929                           ; _strcmp: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  5930  0A13  317D               	addfsr 1,-3
  5931  0A14  0008               	return
  5932  0A15                     __end_of_strcmp:	
  5933                           
  5934                           	psect	text16
  5935  0CB3                     __ptext16:	
  5936 ;; *************** function _nrf24l01SendTXBuffer *****************
  5937 ;; Defined at:
  5938 ;;		line 201 in file "nrf24l01.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;  packet          1    wreg     PTR struct .
  5941 ;;		 -> TXPacket(33), RXPacket(33), 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  packet          1  [STACK] PTR struct .
  5944 ;;		 -> TXPacket(33), RXPacket(33), 
  5945 ;;  i               1  [STACK] unsigned char 
  5946 ;;  width           1  [STACK] unsigned char 
  5947 ;; Return value:  Size  Location     Type
  5948 ;;                  1    wreg      void 
  5949 ;; Registers used:
  5950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11, pclath
  5951 ;; Tracked objects:
  5952 ;;		On entry : 1C/0
  5953 ;;		On exit  : 1F/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5960 ;;Total ram usage:        0 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:   10
  5963 ;; This function calls:
  5964 ;;		_nrf24l01SPIEnd
  5965 ;;		_nrf24l01SPISend
  5966 ;;		_nrf24l01SPIStart
  5967 ;;		_nrf24l01SetRXMode
  5968 ;;		_strlen
  5969 ;; This function is called by:
  5970 ;;		_nrf24l01Service
  5971 ;; This function uses a reentrant model
  5972 ;;
  5973                           
  5974                           
  5975                           ;psect for function _nrf24l01SendTXBuffer
  5976  0CB3                     _nrf24l01SendTXBuffer:	
  5977                           
  5978                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5979  0CB3  3143               	addfsr 1,3
  5980                           
  5981                           ;incstack = 0
  5982 ;; hardware stack exceeded
  5983                           ; Regs used in _nrf24l01SendTXBuffer: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11+
      +                          pclath]
  5984                           ;nrf24l01SendTXBuffer@packet stored from wreg
  5985                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5986  0CB4  3FFD               	movwi [-3]fsr1
  5987                           
  5988                           ;nrf24l01.c: 203: lastTXPacket = packet;
  5989                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5990  0CB5  3F7D               	moviw [-3]fsr1
  5991  0CB6  0020               	movlb	0	; select bank0
  5992  0CB7  00E9               	movwf	_lastTXPacket
  5993                           
  5994                           ;nrf24l01.c: 205: unsigned char i;;nrf24l01.c: 208: nrf24l01SetRXMode(0);
  5995  0CB8  3000               	movlw	0
  5996  0CB9  318B  232D  318C   	fcall	_nrf24l01SetRXMode
  5997                           
  5998                           ;nrf24l01.c: 211: nrf24l01SPIStart();
  5999  0CBC  3188  2032  318C   	fcall	_nrf24l01SPIStart
  6000                           
  6001                           ;nrf24l01.c: 214: nrf24l01SPISend((unsigned) 0b10110000);
  6002  0CBF  30B0               	movlw	176
  6003  0CC0  3188  2062  318C   	fcall	_nrf24l01SPISend
  6004                           
  6005                           ;nrf24l01.c: 216: nrf24l01SPISend(lastTXPacket->packetData.byte);
  6006  0CC3  0020               	movlb	0	; select bank0
  6007  0CC4  0869               	movf	_lastTXPacket,w
  6008  0CC5  0084               	movwf	4
  6009  0CC6  3001               	movlw	1	; select bank2/3
  6010  0CC7  3001               	movlw	1	; select bank2/3
  6011  0CC8  0085               	movwf	5
  6012  0CC9  0800               	movf	0,w
  6013  0CCA  3188  2062  318C   	fcall	_nrf24l01SPISend
  6014                           
  6015                           ;nrf24l01.c: 220: unsigned char width = strlen(lastTXPacket->Message);
  6016  0CCD  0020               	movlb	0	; select bank0
  6017  0CCE  0869               	movf	_lastTXPacket,w
  6018  0CCF  3E01               	addlw	1
  6019  0CD0  3189  2132  318C   	fcall	_strlen
  6020  0CD3  0874               	movf	116,w
  6021                           
  6022                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6023  0CD4  3FFF               	movwi [-1]fsr1
  6024                           
  6025                           ;nrf24l01.c: 222: for (i = 0; i < width; i++) {
  6026                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6027  0CD5  3000               	movlw	0
  6028  0CD6  3FFE               	movwi [-2]fsr1
  6029  0CD7                     l4342:	
  6030                           
  6031                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6032  0CD7  3F7E               	moviw [-2]fsr1
  6033  0CD8  00FF               	movwf	127
  6034                           
  6035                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6036  0CD9  3F7F               	moviw [-1]fsr1
  6037  0CDA  027F               	subwf	127,w
  6038  0CDB  1803               	btfsc	3,0
  6039  0CDC  2CEE               	goto	l4344
  6040                           
  6041                           ;nrf24l01.c: 223: nrf24l01SPISend(lastTXPacket->Message[i]);
  6042                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6043  0CDD  3F7E               	moviw [-2]fsr1
  6044  0CDE  0020               	movlb	0	; select bank0
  6045  0CDF  0769               	addwf	_lastTXPacket,w
  6046  0CE0  00FF               	movwf	127
  6047  0CE1  0A7F               	incf	127,w
  6048  0CE2  0084               	movwf	4
  6049  0CE3  3001               	movlw	1	; select bank2/3
  6050  0CE4  3001               	movlw	1	; select bank2/3
  6051  0CE5  0085               	movwf	5
  6052  0CE6  0800               	movf	0,w
  6053  0CE7  3188  2062  318C   	fcall	_nrf24l01SPISend
  6054                           
  6055                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6056  0CEA  3F7E               	moviw [-2]fsr1
  6057  0CEB  3E01               	addlw	1
  6058  0CEC  3FFE               	movwi [-2]fsr1
  6059  0CED  2CD7               	goto	l4342
  6060  0CEE                     l4344:	
  6061                           
  6062                           ;nrf24l01.c: 224: };nrf24l01.c: 227: nrf24l01SPIEnd();
  6063  0CEE  3188  2029  318C   	fcall	_nrf24l01SPIEnd
  6064                           
  6065                           ;nrf24l01.c: 230: PORTAbits.RA0 = 1;
  6066  0CF1  0020               	movlb	0	; select bank0
  6067  0CF2  140C               	bsf	12,0	;volatile
  6068                           
  6069                           ;nrf24l01.c: 231: _delay((unsigned long)((12)*(32000000/4000000.0)));
  6070  0CF3  3020               	movlw	32
  6071  0CF4                     u5447:	
  6072  0CF4  0B89               	decfsz	9,f
  6073  0CF5  2CF4               	goto	u5447
  6074                           
  6075                           ;nrf24l01.c: 232: PORTAbits.RA0 = 0;
  6076  0CF6  0020               	movlb	0	; select bank0
  6077  0CF7  100C               	bcf	12,0	;volatile
  6078                           
  6079                           ; _nrf24l01SendTXBuffer: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
  6080  0CF8  317D               	addfsr 1,-3
  6081  0CF9  0008               	return
  6082  0CFA                     __end_of_nrf24l01SendTXBuffer:	
  6083                           
  6084                           	psect	text17
  6085  0932                     __ptext17:	
  6086 ;; *************** function _strlen *****************
  6087 ;; Defined at:
  6088 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;  s               1    wreg     PTR const unsigned char 
  6091 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6092 ;;		 -> RXPacket(33), romDataMap(28), 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  s               1  [STACK] PTR const unsigned char 
  6095 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6096 ;;		 -> RXPacket(33), romDataMap(28), 
  6097 ;;  cp              1  [STACK] PTR const unsigned char 
  6098 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6099 ;;		 -> RXPacket(33), romDataMap(28), 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  2  [STACK] unsigned int 
  6102 ;; Registers used:
  6103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  6104 ;; Tracked objects:
  6105 ;;		On entry : 1F/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6113 ;;Total ram usage:        0 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:    7
  6116 ;; This function calls:
  6117 ;;		Nothing
  6118 ;; This function is called by:
  6119 ;;		_nrf24l01GetPipe
  6120 ;;		_nrf24l01SendTXBuffer
  6121 ;; This function uses a reentrant model
  6122 ;;
  6123                           
  6124                           
  6125                           ;psect for function _strlen
  6126  0932                     _strlen:	
  6127                           
  6128                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6129  0932  3142               	addfsr 1,2
  6130                           
  6131                           ;incstack = 0
  6132 ;; hardware stack exceeded
  6133                           ; Regs used in _strlen: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  6134                           ;strlen@s stored from wreg
  6135                           ;stkvar	strlen@s @ sp[(-2)+0]
  6136  0933  3FFE               	movwi [-2]fsr1
  6137                           
  6138                           ;stkvar	strlen@s @ sp[(-2)+0]
  6139  0934  0806               	movf	6,w
  6140  0935  0084               	movwf	4
  6141  0936  0807               	movf	7,w
  6142  0937  0085               	movwf	5
  6143  0938  313E               	addfsr 0,-2
  6144                           
  6145                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6146  0939  3F00               	moviw [0]fsr0
  6147  093A  3FFF               	movwi [-1]fsr1
  6148  093B                     l3938:	
  6149                           
  6150                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6151  093B  3F7F               	moviw [-1]fsr1
  6152  093C  0084               	movwf	4
  6153  093D  3001               	movlw	1	; select bank2/3
  6154  093E  0085               	movwf	5
  6155  093F  0800               	movf	0,w
  6156  0940  1903               	btfsc	3,2
  6157  0941  2946               	goto	l3940
  6158                           
  6159                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6160  0942  3F7F               	moviw [-1]fsr1
  6161  0943  3E01               	addlw	1
  6162  0944  3FFF               	movwi [-1]fsr1
  6163  0945  293B               	goto	l3938
  6164  0946                     l3940:	
  6165                           
  6166                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6167  0946  3F7F               	moviw [-1]fsr1
  6168  0947  00FF               	movwf	127
  6169                           
  6170                           ;stkvar	strlen@s @ sp[(-2)+0]
  6171  0948  3F7E               	moviw [-2]fsr1
  6172  0949  027F               	subwf	127,w
  6173  094A  00F4               	movwf	116
  6174  094B  01F5               	clrf	117
  6175  094C  1BF4               	btfsc	116,7
  6176  094D  03F5               	decf	117,f
  6177                           
  6178                           ; _strlen: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsiz
      +                          e = 0, vargsize = 0
  6179  094E  317E               	addfsr 1,-2
  6180  094F  0008               	return
  6181  0950                     __end_of_strlen:	
  6182                           
  6183                           	psect	text18
  6184  0B2D                     __ptext18:	
  6185 ;; *************** function _nrf24l01SetRXMode *****************
  6186 ;; Defined at:
  6187 ;;		line 50 in file "nrf24l01.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;  rxMode          1    wreg     unsigned char 
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;  rxMode          1  [STACK] unsigned char 
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  1    wreg      void 
  6194 ;; Registers used:
  6195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  6196 ;; Tracked objects:
  6197 ;;		On entry : 1F/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;Total ram usage:        0 bytes
  6206 ;; Hardware stack levels used:    1
  6207 ;; Hardware stack levels required when called:    9
  6208 ;; This function calls:
  6209 ;;		_nrf24l01Send
  6210 ;; This function is called by:
  6211 ;;		_nrf24l01ISR
  6212 ;;		_nrf24l01SendTXBuffer
  6213 ;;		_nrf24l01Service
  6214 ;; This function uses a reentrant model
  6215 ;;
  6216                           
  6217                           
  6218                           ;psect for function _nrf24l01SetRXMode
  6219  0B2D                     _nrf24l01SetRXMode:	
  6220                           
  6221                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6222  0B2D  3141               	addfsr 1,1
  6223                           
  6224                           ;incstack = 0
  6225 ;; hardware stack exceeded
  6226                           ; Regs used in _nrf24l01SetRXMode: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  6227                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6228                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6229  0B2E  3FFF               	movwi [-1]fsr1
  6230                           
  6231                           ;nrf24l01.c: 53: if (rxMode){
  6232                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6233  0B2F  3F7F               	moviw [-1]fsr1
  6234  0B30  1903               	btfsc	3,2
  6235  0B31  2B37               	goto	l3950
  6236                           
  6237                           ;nrf24l01.c: 54: if (status.TX == 2){
  6238  0B32  3002               	movlw	2
  6239  0B33  0020               	movlb	0	; select bank0
  6240  0B34  0664               	xorwf	_status,w	;volatile
  6241  0B35  1903               	btfsc	3,2
  6242  0B36  2B66               	goto	l275
  6243  0B37                     l3950:	
  6244                           
  6245                           ;nrf24l01.c: 56: };nrf24l01.c: 57: };nrf24l01.c: 60: if (!rxMode){
  6246                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6247  0B37  3F7F               	moviw [-1]fsr1
  6248  0B38  1D03               	btfss	3,2
  6249  0B39  2B3F               	goto	l3956
  6250                           
  6251                           ;nrf24l01.c: 61: if (status.TX == 3){
  6252  0B3A  3003               	movlw	3
  6253  0B3B  0020               	movlb	0	; select bank0
  6254  0B3C  0664               	xorwf	_status,w	;volatile
  6255  0B3D  1903               	btfsc	3,2
  6256  0B3E  2B66               	goto	l275
  6257  0B3F                     l3956:	
  6258                           
  6259                           ;nrf24l01.c: 63: };nrf24l01.c: 64: };nrf24l01.c: 70: if (status.configRegister.PRIM_RX !
      +                          = rxMode){
  6260                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6261  0B3F  3F7F               	moviw [-1]fsr1
  6262  0B40  00FF               	movwf	127
  6263  0B41  0020               	movlb	0	; select bank0
  6264  0B42  0867               	movf	_status+3,w	;volatile
  6265  0B43  3901               	andlw	1
  6266  0B44  067F               	xorwf	127,w
  6267  0B45  1903               	skipnz
  6268  0B46  2B66               	goto	l275
  6269                           
  6270                           ;nrf24l01.c: 73: PORTAbits.RA0 = 0;
  6271  0B47  100C               	bcf	12,0	;volatile
  6272                           
  6273                           ;nrf24l01.c: 74: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6274  0B48  30C0               	movlw	192
  6275  0B49                     u5457:	
  6276  0B49  3200               	nop2
  6277  0B4A  0B89               	decfsz	9,f
  6278  0B4B  2B49               	goto	u5457
  6279                           
  6280                           ;nrf24l01.c: 77: status.configRegister.PRIM_RX = rxMode;
  6281                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6282  0B4C  3F7F               	moviw [-1]fsr1
  6283  0B4D  3901               	andlw	1
  6284  0B4E  0020               	movlb	0	; select bank0
  6285  0B4F  1D03               	skipz
  6286  0B50  1467               	bsf	_status+3,0	;volatile
  6287  0B51  1903               	skipnz
  6288  0B52  1067               	bcf	_status+3,0	;volatile
  6289                           
  6290                           ;nrf24l01.c: 78: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configRegi
      +                          ster.byte);
  6291  0B53  0867               	movf	_status+3,w	;volatile
  6292  0B54  001E               	movwi fsr1++
  6293  0B55  3020               	movlw	32
  6294  0B56  3188  2082  318B   	fcall	_nrf24l01Send
  6295                           
  6296                           ;nrf24l01.c: 81: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6297  0B59  30C0               	movlw	192
  6298  0B5A                     u5467:	
  6299  0B5A  3200               	nop2
  6300  0B5B  0B89               	decfsz	9,f
  6301  0B5C  2B5A               	goto	u5467
  6302                           
  6303                           ;nrf24l01.c: 84: if (rxMode){
  6304                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6305  0B5D  3F7F               	moviw [-1]fsr1
  6306  0B5E  1903               	btfsc	3,2
  6307  0B5F  2B66               	goto	l275
  6308                           
  6309                           ;nrf24l01.c: 85: PORTAbits.RA0 = 1;
  6310  0B60  0020               	movlb	0	; select bank0
  6311  0B61  140C               	bsf	12,0	;volatile
  6312                           
  6313                           ;nrf24l01.c: 86: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6314  0B62  30C0               	movlw	192
  6315  0B63                     u5477:	
  6316  0B63  3200               	nop2
  6317  0B64  0B89               	decfsz	9,f
  6318  0B65  2B63               	goto	u5477
  6319  0B66                     l275:	
  6320                           
  6321                           ; _nrf24l01SetRXMode: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  6322  0B66  317F               	addfsr 1,-1
  6323  0B67  0008               	return
  6324  0B68                     __end_of_nrf24l01SetRXMode:	
  6325                           
  6326                           	psect	text19
  6327  0882                     __ptext19:	
  6328 ;; *************** function _nrf24l01Send *****************
  6329 ;; Defined at:
  6330 ;;		line 11 in file "nrf24l01.c"
  6331 ;; Parameters:    Size  Location     Type
  6332 ;;  command         1    wreg     unsigned char 
  6333 ;;  data            1  [STACK] unsigned char 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  command         1  [STACK] unsigned char 
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  1    wreg      unsigned char 
  6338 ;; Registers used:
  6339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 1F/1
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;Total ram usage:        0 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:    8
  6352 ;; This function calls:
  6353 ;;		_nrf24l01SPIEnd
  6354 ;;		_nrf24l01SPISend
  6355 ;;		_nrf24l01SPIStart
  6356 ;; This function is called by:
  6357 ;;		_nrf24l01SetRXMode
  6358 ;;		_nrf24l01SetRXPipe
  6359 ;;		_nrf24l01ISR
  6360 ;;		_nrf24l01Service
  6361 ;;		_nrf24l01InitRegisters
  6362 ;;		_nrf24l01ChangeTXPower
  6363 ;; This function uses a reentrant model
  6364 ;;
  6365                           
  6366                           
  6367                           ;psect for function _nrf24l01Send
  6368  0882                     _nrf24l01Send:	
  6369                           
  6370                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6371  0882  3141               	addfsr 1,1
  6372                           
  6373                           ;incstack = 0
  6374 ;; hardware stack exceeded
  6375                           ; Regs used in _nrf24l01Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath]
  6376                           ;nrf24l01Send@command stored from wreg
  6377                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6378  0883  3FFF               	movwi [-1]fsr1
  6379                           
  6380                           ;nrf24l01.c: 14: nrf24l01SPIStart();
  6381  0884  3188  2032  3188   	fcall	_nrf24l01SPIStart
  6382                           
  6383                           ;nrf24l01.c: 17: nrf24l01SPISend(command);
  6384                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6385  0887  3F7F               	moviw [-1]fsr1
  6386  0888  3188  2062  3188   	fcall	_nrf24l01SPISend
  6387                           
  6388                           ;nrf24l01.c: 20: data = nrf24l01SPISend(data);
  6389                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6390  088B  3F7E               	moviw [-2]fsr1
  6391  088C  3188  2062  3188   	fcall	_nrf24l01SPISend
  6392                           
  6393                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6394  088F  3FFE               	movwi [-2]fsr1
  6395                           
  6396                           ;nrf24l01.c: 23: nrf24l01SPIEnd();
  6397  0890  3188  2029         	fcall	_nrf24l01SPIEnd
  6398                           
  6399                           ;nrf24l01.c: 25: return data;
  6400                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6401  0892  3F7E               	moviw [-2]fsr1
  6402                           
  6403                           ; _nrf24l01Send: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, 
      +                          argsize = 1, vargsize = 0
  6404  0893  317E               	addfsr 1,-2
  6405  0894  0008               	return
  6406  0895                     __end_of_nrf24l01Send:	
  6407                           
  6408                           	psect	text20
  6409  0832                     __ptext20:	
  6410 ;; *************** function _nrf24l01SPIStart *****************
  6411 ;; Defined at:
  6412 ;;		line 69 in file "interface.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;		None
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;		None
  6417 ;; Return value:  Size  Location     Type
  6418 ;;                  1    wreg      void 
  6419 ;; Registers used:
  6420 ;;		wreg
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;Total ram usage:        0 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    7
  6433 ;; This function calls:
  6434 ;;		Nothing
  6435 ;; This function is called by:
  6436 ;;		_nrf24l01Send
  6437 ;;		_nrf24l01SetTXPipe
  6438 ;;		_nrf24l01SendTXBuffer
  6439 ;;		_nrf24l01Service
  6440 ;;		_nrf24l01InitRegisters
  6441 ;; This function uses a reentrant model
  6442 ;;
  6443                           
  6444                           
  6445                           ;psect for function _nrf24l01SPIStart
  6446  0832                     _nrf24l01SPIStart:	
  6447                           
  6448                           ;interface.c: 70: PIE0bits.INTE = 0;
  6449                           
  6450                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6451                           ;incstack = 0
  6452 ;; hardware stack exceeded
  6453                           ; Regs used in _nrf24l01SPIStart: [wreg]
  6454  0832  0021               	movlb	1	; select bank1
  6455  0833  1010               	bcf	16,0	;volatile
  6456                           
  6457                           ;interface.c: 71: PORTAbits.RA1 = 0;
  6458  0834  0020               	movlb	0	; select bank0
  6459  0835  108C               	bcf	12,1	;volatile
  6460                           
  6461                           ;interface.c: 72: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6462  0836  301A               	movlw	26
  6463  0837                     u5487:	
  6464  0837  0B89               	decfsz	9,f
  6465  0838  2837               	goto	u5487
  6466  0839  3200               	nop2
  6467                           
  6468                           ; _nrf24l01SPIStart: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           0, argsize = 0, vargsize = 0
  6469  083A  0008               	return
  6470  083B                     __end_of_nrf24l01SPIStart:	
  6471                           
  6472                           	psect	text21
  6473  0862                     __ptext21:	
  6474 ;; *************** function _nrf24l01SPISend *****************
  6475 ;; Defined at:
  6476 ;;		line 57 in file "interface.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;  data            1    wreg     unsigned char 
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;  data            1  [STACK] unsigned char 
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  1    wreg      unsigned char 
  6483 ;; Registers used:
  6484 ;;		wreg, fsr1l, fsr1h
  6485 ;; Tracked objects:
  6486 ;;		On entry : 0/0
  6487 ;;		On exit  : 1F/4
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;Total ram usage:        0 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    7
  6497 ;; This function calls:
  6498 ;;		Nothing
  6499 ;; This function is called by:
  6500 ;;		_nrf24l01Send
  6501 ;;		_nrf24l01SetTXPipe
  6502 ;;		_nrf24l01SendTXBuffer
  6503 ;;		_nrf24l01Service
  6504 ;;		_nrf24l01InitRegisters
  6505 ;; This function uses a reentrant model
  6506 ;;
  6507                           
  6508                           
  6509                           ;psect for function _nrf24l01SPISend
  6510  0862                     _nrf24l01SPISend:	
  6511                           
  6512                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6513  0862  3141               	addfsr 1,1
  6514                           
  6515                           ;incstack = 0
  6516 ;; hardware stack exceeded
  6517                           ; Regs used in _nrf24l01SPISend: [wreg+fsr1l+fsr1h]
  6518                           ;nrf24l01SPISend@data stored from wreg
  6519                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6520  0863  3FFF               	movwi [-1]fsr1
  6521                           
  6522                           ;interface.c: 58: SSP1BUF = data;
  6523                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6524  0864  3F7F               	moviw [-1]fsr1
  6525  0865  0024               	movlb	4	; select bank4
  6526  0866  0091               	movwf	17	;volatile
  6527                           
  6528                           ;interface.c: 60: PORTCbits.RC4 = 1;
  6529  0867  0020               	movlb	0	; select bank0
  6530  0868  160E               	bsf	14,4	;volatile
  6531  0869                     l55:	
  6532                           ;interface.c: 62: while (!SSP1STATbits.BF){
  6533                           
  6534  0869  0024               	movlb	4	; select bank4
  6535  086A  1814               	btfsc	20,0	;volatile
  6536  086B  286E               	goto	l3670
  6537                           
  6538                           ;interface.c: 63: __nop();
  6539  086C  0000               	nop
  6540  086D  2869               	goto	l55
  6541  086E                     l3670:	
  6542                           
  6543                           ;interface.c: 64: };interface.c: 66: return SSP1BUF;
  6544  086E  0811               	movf	17,w	;volatile
  6545                           
  6546                           ; _nrf24l01SPISend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  6547  086F  317F               	addfsr 1,-1
  6548  0870  0008               	return
  6549  0871                     __end_of_nrf24l01SPISend:	
  6550                           
  6551                           	psect	text22
  6552  0829                     __ptext22:	
  6553 ;; *************** function _nrf24l01SPIEnd *****************
  6554 ;; Defined at:
  6555 ;;		line 75 in file "interface.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;		None
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;		None
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  1    wreg      void 
  6562 ;; Registers used:
  6563 ;;		wreg
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 1F/1
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;Total ram usage:        0 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; Hardware stack levels required when called:    7
  6576 ;; This function calls:
  6577 ;;		Nothing
  6578 ;; This function is called by:
  6579 ;;		_nrf24l01Send
  6580 ;;		_nrf24l01SetTXPipe
  6581 ;;		_nrf24l01SendTXBuffer
  6582 ;;		_nrf24l01Service
  6583 ;;		_nrf24l01InitRegisters
  6584 ;; This function uses a reentrant model
  6585 ;;
  6586                           
  6587                           
  6588                           ;psect for function _nrf24l01SPIEnd
  6589  0829                     _nrf24l01SPIEnd:	
  6590                           
  6591                           ;interface.c: 76: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6592                           
  6593                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6594                           ;incstack = 0
  6595 ;; hardware stack exceeded
  6596                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  6597  0829  301A               	movlw	26
  6598  082A                     u5497:	
  6599  082A  0B89               	decfsz	9,f
  6600  082B  282A               	goto	u5497
  6601  082C  3200               	nop2
  6602                           
  6603                           ;interface.c: 77: PORTAbits.RA1 = 1;
  6604  082D  0020               	movlb	0	; select bank0
  6605  082E  148C               	bsf	12,1	;volatile
  6606                           
  6607                           ;interface.c: 78: PIE0bits.INTE = 1;
  6608  082F  0021               	movlb	1	; select bank1
  6609  0830  1410               	bsf	16,0	;volatile
  6610                           
  6611                           ; _nrf24l01SPIEnd: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  6612  0831  0008               	return
  6613  0832                     __end_of_nrf24l01SPIEnd:	
  6614                           
  6615                           	psect	text23
  6616  0AC7                     __ptext23:	
  6617 ;; *************** function _memset *****************
  6618 ;; Defined at:
  6619 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;  p1              2  [STACK] PTR void 
  6622 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6623 ;;  c               2  [STACK] int 
  6624 ;;  n               2  [STACK] unsigned int 
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;  p               2  [STACK] PTR unsigned char 
  6627 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6628 ;; Return value:  Size  Location     Type
  6629 ;;                  2  [STACK] PTR void 
  6630 ;; Registers used:
  6631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+8, btemp+9, btemp+11
  6632 ;; Tracked objects:
  6633 ;;		On entry : 1E/1
  6634 ;;		On exit  : 0/0
  6635 ;;		Unchanged: 0/0
  6636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;Total ram usage:        0 bytes
  6642 ;; Hardware stack levels used:    1
  6643 ;; Hardware stack levels required when called:    7
  6644 ;; This function calls:
  6645 ;;		Nothing
  6646 ;; This function is called by:
  6647 ;;		_sendMessage
  6648 ;;		_nrf24l01Service
  6649 ;; This function uses a reentrant model
  6650 ;;
  6651                           
  6652                           
  6653                           ;psect for function _memset
  6654  0AC7                     _memset:	
  6655                           
  6656                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6657  0AC7  3142               	addfsr 1,2
  6658                           
  6659                           ;stkvar	memset@p1 @ sp[(-2)+-2]
  6660                           
  6661                           ;incstack = 0
  6662 ;; hardware stack exceeded
  6663                           ; Regs used in _memset: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+8+btemp+9+btemp+1
      +                          1]
  6664  0AC8  0806               	movf	6,w
  6665  0AC9  0084               	movwf	4
  6666  0ACA  0807               	movf	7,w
  6667  0ACB  0085               	movwf	5
  6668  0ACC  313C               	addfsr 0,-4
  6669                           
  6670                           ;stkvar	memset@p @ sp[(-2)+0]
  6671  0ACD  3F00               	moviw [0]fsr0
  6672  0ACE  3FFE               	movwi [-2]fsr1
  6673  0ACF  3F01               	moviw [1]fsr0
  6674  0AD0  3FFF               	movwi [-1]fsr1
  6675  0AD1                     l4248:	
  6676                           
  6677                           ;stkvar	memset@n @ sp[(-2)+-6]
  6678  0AD1  3F78               	moviw [-8]fsr1
  6679  0AD2  00F4               	movwf	116
  6680  0AD3  3001               	movlw	1
  6681  0AD4  0274               	subwf	116,w
  6682  0AD5  3FF8               	movwi [-8]fsr1
  6683  0AD6  3F79               	moviw [-7]fsr1
  6684  0AD7  00F4               	movwf	116
  6685  0AD8  3000               	movlw	0
  6686  0AD9  3B74               	subwfb	116,w
  6687  0ADA  3FF9               	movwi [-7]fsr1
  6688  0ADB  3F78               	moviw [-8]fsr1
  6689  0ADC  3AFF               	xorlw	255
  6690  0ADD  00F4               	movwf	116
  6691  0ADE  3F79               	moviw [-7]fsr1
  6692  0ADF  3AFF               	xorlw	255
  6693  0AE0  04F4               	iorwf	116,f
  6694  0AE1  1903               	btfsc	3,2
  6695  0AE2  2AF7               	goto	l977
  6696                           
  6697                           ;stkvar	memset@c @ sp[(-2)+-4]
  6698  0AE3  3F7A               	moviw [-6]fsr1
  6699  0AE4  00FF               	movwf	127
  6700                           
  6701                           ;stkvar	memset@p @ sp[(-2)+0]
  6702  0AE5  3F7E               	moviw [-2]fsr1
  6703  0AE6  00FC               	movwf	124
  6704  0AE7  3F7F               	moviw [-1]fsr1
  6705  0AE8  00FD               	movwf	125
  6706  0AE9  087C               	movf	124,w
  6707  0AEA  0084               	movwf	4
  6708  0AEB  087D               	movf	125,w
  6709  0AEC  0085               	movwf	5
  6710  0AED  087F               	movf	127,w
  6711  0AEE  0080               	movwf	0
  6712                           
  6713                           ;stkvar	memset@p @ sp[(-2)+0]
  6714  0AEF  3F7E               	moviw [-2]fsr1
  6715  0AF0  3E01               	addlw	1
  6716  0AF1  3FFE               	movwi [-2]fsr1
  6717  0AF2  01F4               	clrf	116
  6718  0AF3  3F7F               	moviw [-1]fsr1
  6719  0AF4  3D74               	addwfc	116,w
  6720  0AF5  3FFF               	movwi [-1]fsr1
  6721  0AF6  2AD1               	goto	l4248
  6722  0AF7                     l977:	
  6723                           
  6724                           ; _memset: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsiz
      +                          e = 6, vargsize = 0
  6725  0AF7  3178               	addfsr 1,-8
  6726  0AF8  0008               	return
  6727  0AF9                     __end_of_memset:	
  6728                           
  6729                           	psect	text24
  6730  0847                     __ptext24:	
  6731 ;; *************** function _exception *****************
  6732 ;; Defined at:
  6733 ;;		line 81 in file "interface.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;  exception       1    wreg     unsigned char 
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;  exception       1    6[BANK0 ] unsigned char 
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  1    wreg      void 
  6740 ;; Registers used:
  6741 ;;		wreg, status,2, status,0, btemp+11, pclath, cstack
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6750 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;Total ram usage:        1 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:    8
  6754 ;; This function calls:
  6755 ;;		_EEPROMWrite
  6756 ;; This function is called by:
  6757 ;;		_nrf24l01SendPacket
  6758 ;; This function uses a non-reentrant model
  6759 ;;
  6760                           
  6761                           
  6762                           ;psect for function _exception
  6763  0847                     _exception:	
  6764                           
  6765                           ;incstack = 0
  6766                           ; Regs used in _exception: [wreg+status,2+status,0+btemp+11+pclath+cstack]
  6767                           ;exception@exception stored from wreg
  6768  0847  0020               	movlb	0	; select bank0
  6769  0848  00A6               	movwf	exception@exception
  6770                           
  6771                           ;interface.c: 82: EEPROMWrite(0, exception);
  6772  0849  3000               	movlw	0
  6773  084A  00F0               	movwf	EEPROMWrite@address
  6774  084B  00F1               	movwf	EEPROMWrite@address+1
  6775  084C  0826               	movf	exception@exception,w
  6776  084D  00FF               	movwf	127
  6777  084E  087F               	movf	127,w
  6778  084F  00F2               	movwf	EEPROMWrite@data
  6779  0850  3189  218C         	fcall	_EEPROMWrite
  6780  0852  0001               	reset	;# 
  6781  0853  0008               	return
  6782  0854                     __end_of_exception:	
  6783                           
  6784                           	psect	text25
  6785  098C                     __ptext25:	
  6786 ;; *************** function _EEPROMWrite *****************
  6787 ;; Defined at:
  6788 ;;		line 7 in file "eeprom.c"
  6789 ;; Parameters:    Size  Location     Type
  6790 ;;  address         2    0[COMMON] unsigned int 
  6791 ;;  data            1    2[COMMON] unsigned char 
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  6794 ;; Return value:  Size  Location     Type
  6795 ;;                  1    wreg      void 
  6796 ;; Registers used:
  6797 ;;		wreg, status,2, status,0
  6798 ;; Tracked objects:
  6799 ;;		On entry : 0/0
  6800 ;;		On exit  : 0/0
  6801 ;;		Unchanged: 0/0
  6802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6803 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6807 ;;Total ram usage:        4 bytes
  6808 ;; Hardware stack levels used:    1
  6809 ;; Hardware stack levels required when called:    7
  6810 ;; This function calls:
  6811 ;;		Nothing
  6812 ;; This function is called by:
  6813 ;;		_exception
  6814 ;;		_main
  6815 ;; This function uses a non-reentrant model
  6816 ;;
  6817                           
  6818                           
  6819                           ;psect for function _EEPROMWrite
  6820  098C                     _EEPROMWrite:	
  6821                           
  6822                           ;eeprom.c: 9: unsigned char GIEBitValue = INTCONbits.GIE;
  6823                           
  6824                           ;incstack = 0
  6825                           ; Regs used in _EEPROMWrite: [wreg+status,2+status,0]
  6826  098C  3000               	movlw	0
  6827  098D  1B8B               	btfsc	11,7	;volatile
  6828  098E  3001               	movlw	1
  6829  098F  00F3               	movwf	EEPROMWrite@GIEBitValue
  6830                           
  6831                           ;eeprom.c: 11: NVMADRH = ((address >> 8) & 0xFF);
  6832  0990  0871               	movf	EEPROMWrite@address+1,w
  6833  0991  0031               	movlb	17	; select bank17
  6834  0992  0092               	movwf	18	;volatile
  6835                           
  6836                           ;eeprom.c: 12: NVMADRL = (address & 0xFF);
  6837  0993  0870               	movf	EEPROMWrite@address,w
  6838  0994  0091               	movwf	17	;volatile
  6839                           
  6840                           ;eeprom.c: 13: NVMDATL = data;
  6841  0995  0872               	movf	EEPROMWrite@data,w
  6842  0996  0093               	movwf	19	;volatile
  6843                           
  6844                           ;eeprom.c: 14: NVMCON1bits.NVMREGS = 1;
  6845  0997  1715               	bsf	21,6	;volsfr
  6846                           
  6847                           ;eeprom.c: 15: NVMCON1bits.WREN = 1;
  6848  0998  1515               	bsf	21,2	;volsfr
  6849                           
  6850                           ;eeprom.c: 16: INTCONbits.GIE = 0;
  6851  0999  138B               	bcf	11,7	;volatile
  6852                           
  6853                           ;eeprom.c: 17: NVMCON2 = 0x55;
  6854  099A  3055               	movlw	85
  6855  099B  0096               	movwf	22	;volsfr
  6856                           
  6857                           ;eeprom.c: 18: NVMCON2 = 0xAA;
  6858  099C  30AA               	movlw	170
  6859  099D  0096               	movwf	22	;volsfr
  6860                           
  6861                           ;eeprom.c: 19: NVMCON1bits.WR = 1;
  6862  099E  1495               	bsf	21,1	;volsfr
  6863                           
  6864                           ;eeprom.c: 21: while (NVMCON1bits.WR){
  6865  099F  29A1               	goto	l358
  6866  09A0                     l359:	
  6867                           
  6868                           ;eeprom.c: 22: __nop();
  6869  09A0  0000               	nop
  6870  09A1                     l358:	
  6871  09A1  0031               	movlb	17	; select bank17
  6872  09A2  1895               	btfsc	21,1	;volsfr
  6873  09A3  29A0               	goto	l359
  6874                           
  6875                           ;eeprom.c: 23: };eeprom.c: 25: NVMCON1bits.WREN = 0;
  6876  09A4  1115               	bcf	21,2	;volsfr
  6877                           
  6878                           ;eeprom.c: 26: INTCONbits.GIE = GIEBitValue;
  6879  09A5  0C73               	rrf	EEPROMWrite@GIEBitValue,w
  6880  09A6  1C03               	skipc
  6881  09A7  138B               	bcf	11,7	;volatile
  6882  09A8  1803               	skipnc
  6883  09A9  178B               	bsf	11,7	;volatile
  6884  09AA  0008               	return
  6885  09AB                     __end_of_EEPROMWrite:	
  6886                           
  6887                           	psect	text26
  6888  0515                     __ptext26:	
  6889 ;; *************** function _ftoa *****************
  6890 ;; Defined at:
  6891 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;  f               3    0[BANK1 ] float 
  6894 ;;  status          1    3[BANK1 ] PTR int 
  6895 ;;		 -> sendMessage@ftoaStatus(2), 
  6896 ;; Auto vars:     Size  Location     Type
  6897 ;;  l               4    8[BANK1 ] unsigned long 
  6898 ;;  rem             4    4[BANK1 ] unsigned long 
  6899 ;;  cp              1   12[BANK1 ] PTR unsigned char 
  6900 ;;		 -> ftoa@buf(17), 
  6901 ;; Return value:  Size  Location     Type
  6902 ;;                  1    wreg      PTR unsigned char 
  6903 ;; Registers used:
  6904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6905 ;; Tracked objects:
  6906 ;;		On entry : 0/0
  6907 ;;		On exit  : 0/0
  6908 ;;		Unchanged: 0/0
  6909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6910 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6913 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6914 ;;Total ram usage:       13 bytes
  6915 ;; Hardware stack levels used:    1
  6916 ;; Hardware stack levels required when called:   10
  6917 ;; This function calls:
  6918 ;;		___ftge
  6919 ;;		___ftmul
  6920 ;;		___ftneg
  6921 ;;		___ftsub
  6922 ;;		___fttol
  6923 ;;		___lltoft
  6924 ;;		_sprintf
  6925 ;; This function is called by:
  6926 ;;		_sendMessage
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           
  6931                           ;psect for function _ftoa
  6932  0515                     _ftoa:	
  6933                           
  6934                           ;incstack = 0
  6935                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6936  0515  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6937  0516  00FF               	movwf	127
  6938  0517  087F               	movf	127,w
  6939  0518  0021               	movlb	1	; select bank1
  6940  0519  00AC               	movwf	ftoa@cp^(0+128)
  6941  051A  0820               	movf	ftoa@f^(0+128),w
  6942  051B  0020               	movlb	0	; select bank0
  6943  051C  00A6               	movwf	___ftge@ff1
  6944  051D  0021               	movlb	1	; select bank1
  6945  051E  0821               	movf	(ftoa@f+1)^(0+128),w
  6946  051F  0020               	movlb	0	; select bank0
  6947  0520  00A7               	movwf	___ftge@ff1+1
  6948  0521  0021               	movlb	1	; select bank1
  6949  0522  0822               	movf	(ftoa@f+2)^(0+128),w
  6950  0523  0020               	movlb	0	; select bank0
  6951  0524  00A8               	movwf	___ftge@ff1+2
  6952  0525  3000               	movlw	0
  6953  0526  00A9               	movwf	___ftge@ff2
  6954  0527  3000               	movlw	0
  6955  0528  00AA               	movwf	___ftge@ff2+1
  6956  0529  3000               	movlw	0
  6957  052A  00AB               	movwf	___ftge@ff2+2
  6958  052B  318B  2368  3185   	fcall	___ftge
  6959  052E  1803               	btfsc	3,0
  6960  052F  2D57               	goto	l4270
  6961  0530  302D               	movlw	45
  6962  0531  00FF               	movwf	127
  6963  0532  0021               	movlb	1	; select bank1
  6964  0533  082C               	movf	ftoa@cp^(0+128),w
  6965  0534  0084               	movwf	4
  6966  0535  3001               	movlw	1	; select bank2/3
  6967  0536  0085               	movwf	5
  6968  0537  087F               	movf	127,w
  6969  0538  0080               	movwf	0
  6970  0539  3001               	movlw	1
  6971  053A  00FF               	movwf	127
  6972  053B  087F               	movf	127,w
  6973  053C  07AC               	addwf	ftoa@cp^(0+128),f
  6974  053D  0820               	movf	ftoa@f^(0+128),w
  6975  053E  0020               	movlb	0	; select bank0
  6976  053F  00CB               	movwf	___ftneg@f1
  6977  0540  0021               	movlb	1	; select bank1
  6978  0541  0821               	movf	(ftoa@f+1)^(0+128),w
  6979  0542  0020               	movlb	0	; select bank0
  6980  0543  00CC               	movwf	___ftneg@f1+1
  6981  0544  0021               	movlb	1	; select bank1
  6982  0545  0822               	movf	(ftoa@f+2)^(0+128),w
  6983  0546  0020               	movlb	0	; select bank0
  6984  0547  00CD               	movwf	___ftneg@f1+2
  6985  0548  3188  2020  3185   	fcall	___ftneg
  6986  054B  0020               	movlb	0	; select bank0
  6987  054C  084B               	movf	?___ftneg,w
  6988  054D  0021               	movlb	1	; select bank1
  6989  054E  00A0               	movwf	ftoa@f^(0+128)
  6990  054F  0020               	movlb	0	; select bank0
  6991  0550  084C               	movf	?___ftneg+1,w
  6992  0551  0021               	movlb	1	; select bank1
  6993  0552  00A1               	movwf	(ftoa@f+1)^(0+128)
  6994  0553  0020               	movlb	0	; select bank0
  6995  0554  084D               	movf	?___ftneg+2,w
  6996  0555  0021               	movlb	1	; select bank1
  6997  0556  00A2               	movwf	(ftoa@f+2)^(0+128)
  6998  0557                     l4270:	
  6999  0557  0021               	movlb	1	; select bank1
  7000  0558  0820               	movf	ftoa@f^(0+128),w
  7001  0559  0020               	movlb	0	; select bank0
  7002  055A  00D7               	movwf	___fttol@f1
  7003  055B  0021               	movlb	1	; select bank1
  7004  055C  0821               	movf	(ftoa@f+1)^(0+128),w
  7005  055D  0020               	movlb	0	; select bank0
  7006  055E  00D8               	movwf	___fttol@f1+1
  7007  055F  0021               	movlb	1	; select bank1
  7008  0560  0822               	movf	(ftoa@f+2)^(0+128),w
  7009  0561  0020               	movlb	0	; select bank0
  7010  0562  00D9               	movwf	___fttol@f1+2
  7011  0563  318E  2637  3185   	fcall	___fttol
  7012  0566  0020               	movlb	0	; select bank0
  7013  0567  085A               	movf	?___fttol+3,w
  7014  0568  0021               	movlb	1	; select bank1
  7015  0569  00AB               	movwf	(ftoa@l+3)^(0+128)
  7016  056A  0020               	movlb	0	; select bank0
  7017  056B  0859               	movf	?___fttol+2,w
  7018  056C  0021               	movlb	1	; select bank1
  7019  056D  00AA               	movwf	(ftoa@l+2)^(0+128)
  7020  056E  0020               	movlb	0	; select bank0
  7021  056F  0858               	movf	?___fttol+1,w
  7022  0570  0021               	movlb	1	; select bank1
  7023  0571  00A9               	movwf	(ftoa@l+1)^(0+128)
  7024  0572  0020               	movlb	0	; select bank0
  7025  0573  0857               	movf	?___fttol,w
  7026  0574  0021               	movlb	1	; select bank1
  7027  0575  00A8               	movwf	ftoa@l^(0+128)
  7028  0576  082B               	movf	(ftoa@l+3)^(0+128),w
  7029  0577  00F3               	movwf	___lltoft@c+3
  7030  0578  082A               	movf	(ftoa@l+2)^(0+128),w
  7031  0579  00F2               	movwf	___lltoft@c+2
  7032  057A  0829               	movf	(ftoa@l+1)^(0+128),w
  7033  057B  00F1               	movwf	___lltoft@c+1
  7034  057C  0828               	movf	ftoa@l^(0+128),w
  7035  057D  00F0               	movwf	___lltoft@c
  7036  057E  318A  2215  3185   	fcall	___lltoft
  7037  0581  0870               	movf	?___lltoft,w
  7038  0582  0020               	movlb	0	; select bank0
  7039  0583  00B5               	movwf	___ftsub@f2
  7040  0584  0871               	movf	?___lltoft+1,w
  7041  0585  00B6               	movwf	___ftsub@f2+1
  7042  0586  0872               	movf	?___lltoft+2,w
  7043  0587  00B7               	movwf	___ftsub@f2+2
  7044  0588  0021               	movlb	1	; select bank1
  7045  0589  0820               	movf	ftoa@f^(0+128),w
  7046  058A  0020               	movlb	0	; select bank0
  7047  058B  00B8               	movwf	___ftsub@f1
  7048  058C  0021               	movlb	1	; select bank1
  7049  058D  0821               	movf	(ftoa@f+1)^(0+128),w
  7050  058E  0020               	movlb	0	; select bank0
  7051  058F  00B9               	movwf	___ftsub@f1+1
  7052  0590  0021               	movlb	1	; select bank1
  7053  0591  0822               	movf	(ftoa@f+2)^(0+128),w
  7054  0592  0020               	movlb	0	; select bank0
  7055  0593  00BA               	movwf	___ftsub@f1+2
  7056  0594  3188  20F6  3185   	fcall	___ftsub
  7057  0597  0020               	movlb	0	; select bank0
  7058  0598  0835               	movf	?___ftsub,w
  7059  0599  0021               	movlb	1	; select bank1
  7060  059A  00A0               	movwf	ftoa@f^(0+128)
  7061  059B  0020               	movlb	0	; select bank0
  7062  059C  0836               	movf	?___ftsub+1,w
  7063  059D  0021               	movlb	1	; select bank1
  7064  059E  00A1               	movwf	(ftoa@f+1)^(0+128)
  7065  059F  0020               	movlb	0	; select bank0
  7066  05A0  0837               	movf	?___ftsub+2,w
  7067  05A1  0021               	movlb	1	; select bank1
  7068  05A2  00A2               	movwf	(ftoa@f+2)^(0+128)
  7069  05A3  0820               	movf	ftoa@f^(0+128),w
  7070  05A4  0020               	movlb	0	; select bank0
  7071  05A5  00CE               	movwf	___ftmul@f2
  7072  05A6  0021               	movlb	1	; select bank1
  7073  05A7  0821               	movf	(ftoa@f+1)^(0+128),w
  7074  05A8  0020               	movlb	0	; select bank0
  7075  05A9  00CF               	movwf	___ftmul@f2+1
  7076  05AA  0021               	movlb	1	; select bank1
  7077  05AB  0822               	movf	(ftoa@f+2)^(0+128),w
  7078  05AC  0020               	movlb	0	; select bank0
  7079  05AD  00D0               	movwf	___ftmul@f2+2
  7080  05AE  3024               	movlw	36
  7081  05AF  00CB               	movwf	___ftmul@f1
  7082  05B0  3074               	movlw	116
  7083  05B1  00CC               	movwf	___ftmul@f1+1
  7084  05B2  3049               	movlw	73
  7085  05B3  00CD               	movwf	___ftmul@f1+2
  7086  05B4  3185  25FC  3185   	fcall	___ftmul
  7087  05B7  0020               	movlb	0	; select bank0
  7088  05B8  084B               	movf	?___ftmul,w
  7089  05B9  00D7               	movwf	___fttol@f1
  7090  05BA  084C               	movf	?___ftmul+1,w
  7091  05BB  00D8               	movwf	___fttol@f1+1
  7092  05BC  084D               	movf	?___ftmul+2,w
  7093  05BD  00D9               	movwf	___fttol@f1+2
  7094  05BE  318E  2637  3185   	fcall	___fttol
  7095  05C1  0020               	movlb	0	; select bank0
  7096  05C2  085A               	movf	?___fttol+3,w
  7097  05C3  0021               	movlb	1	; select bank1
  7098  05C4  00A7               	movwf	(ftoa@rem+3)^(0+128)
  7099  05C5  0020               	movlb	0	; select bank0
  7100  05C6  0859               	movf	?___fttol+2,w
  7101  05C7  0021               	movlb	1	; select bank1
  7102  05C8  00A6               	movwf	(ftoa@rem+2)^(0+128)
  7103  05C9  0020               	movlb	0	; select bank0
  7104  05CA  0858               	movf	?___fttol+1,w
  7105  05CB  0021               	movlb	1	; select bank1
  7106  05CC  00A5               	movwf	(ftoa@rem+1)^(0+128)
  7107  05CD  0020               	movlb	0	; select bank0
  7108  05CE  0857               	movf	?___fttol,w
  7109  05CF  0021               	movlb	1	; select bank1
  7110  05D0  00A4               	movwf	ftoa@rem^(0+128)
  7111  05D1  3029               	movlw	low (STR_8| (0+32768))
  7112  05D2  0020               	movlb	0	; select bank0
  7113  05D3  00BB               	movwf	sprintf@f
  7114  05D4  3090               	movlw	high (STR_8| (0+32768))
  7115  05D5  00BC               	movwf	sprintf@f+1
  7116  05D6  0021               	movlb	1	; select bank1
  7117  05D7  082B               	movf	(ftoa@l+3)^(0+128),w
  7118  05D8  0020               	movlb	0	; select bank0
  7119  05D9  00C0               	movwf	?_sprintf+5
  7120  05DA  0021               	movlb	1	; select bank1
  7121  05DB  082A               	movf	(ftoa@l+2)^(0+128),w
  7122  05DC  0020               	movlb	0	; select bank0
  7123  05DD  00BF               	movwf	?_sprintf+4
  7124  05DE  0021               	movlb	1	; select bank1
  7125  05DF  0829               	movf	(ftoa@l+1)^(0+128),w
  7126  05E0  0020               	movlb	0	; select bank0
  7127  05E1  00BE               	movwf	?_sprintf+3
  7128  05E2  0021               	movlb	1	; select bank1
  7129  05E3  0828               	movf	ftoa@l^(0+128),w
  7130  05E4  0020               	movlb	0	; select bank0
  7131  05E5  00BD               	movwf	?_sprintf+2
  7132  05E6  0021               	movlb	1	; select bank1
  7133  05E7  0827               	movf	(ftoa@rem+3)^(0+128),w
  7134  05E8  0020               	movlb	0	; select bank0
  7135  05E9  00C4               	movwf	?_sprintf+9
  7136  05EA  0021               	movlb	1	; select bank1
  7137  05EB  0826               	movf	(ftoa@rem+2)^(0+128),w
  7138  05EC  0020               	movlb	0	; select bank0
  7139  05ED  00C3               	movwf	?_sprintf+8
  7140  05EE  0021               	movlb	1	; select bank1
  7141  05EF  0825               	movf	(ftoa@rem+1)^(0+128),w
  7142  05F0  0020               	movlb	0	; select bank0
  7143  05F1  00C2               	movwf	?_sprintf+7
  7144  05F2  0021               	movlb	1	; select bank1
  7145  05F3  0824               	movf	ftoa@rem^(0+128),w
  7146  05F4  0020               	movlb	0	; select bank0
  7147  05F5  00C1               	movwf	?_sprintf+6
  7148  05F6  0021               	movlb	1	; select bank1
  7149  05F7  082C               	movf	ftoa@cp^(0+128),w
  7150  05F8  3180  205E         	fcall	_sprintf
  7151  05FA  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  7152  05FB  0008               	return
  7153  05FC                     __end_of_ftoa:	
  7154                           
  7155                           	psect	text27
  7156  005E                     __ptext27:	
  7157 ;; *************** function _sprintf *****************
  7158 ;; Defined at:
  7159 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;  sp              1    wreg     PTR unsigned char 
  7162 ;;		 -> ftoa@buf(17), 
  7163 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  7164 ;;		 -> STR_8(11), 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  sp              1   47[BANK0 ] PTR unsigned char 
  7167 ;;		 -> ftoa@buf(17), 
  7168 ;;  val             4   43[BANK0 ] unsigned long 
  7169 ;;  tmpval          4    0        struct .
  7170 ;;  prec            2   50[BANK0 ] int 
  7171 ;;  width           2   48[BANK0 ] int 
  7172 ;;  cp              2    0        PTR const unsigned char 
  7173 ;;  len             2    0        unsigned int 
  7174 ;;  c               1   52[BANK0 ] unsigned char 
  7175 ;;  ap              1   42[BANK0 ] PTR void [1]
  7176 ;;		 -> ?_sprintf(2), 
  7177 ;;  flag            1   41[BANK0 ] unsigned char 
  7178 ;; Return value:  Size  Location     Type
  7179 ;;                  2   27[BANK0 ] int 
  7180 ;; Registers used:
  7181 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  7182 ;; Tracked objects:
  7183 ;;		On entry : 0/0
  7184 ;;		On exit  : 0/0
  7185 ;;		Unchanged: 0/0
  7186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7187 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7188 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7189 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7190 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7191 ;;Total ram usage:       26 bytes
  7192 ;; Hardware stack levels used:    1
  7193 ;; Hardware stack levels required when called:    8
  7194 ;; This function calls:
  7195 ;;		___lldiv
  7196 ;;		___llmod
  7197 ;;		___wmul
  7198 ;;		_isdigit
  7199 ;; This function is called by:
  7200 ;;		_ftoa
  7201 ;; This function uses a non-reentrant model
  7202 ;;
  7203                           
  7204                           
  7205                           ;psect for function _sprintf
  7206  005E                     _sprintf:	
  7207                           
  7208                           ;incstack = 0
  7209                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  7210                           ;sprintf@sp stored from wreg
  7211  005E  0020               	movlb	0	; select bank0
  7212  005F  00CF               	movwf	sprintf@sp
  7213                           
  7214                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  7215  0060  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7216  0061  00FF               	movwf	127
  7217  0062  087F               	movf	127,w
  7218  0063  00CA               	movwf	sprintf@ap
  7219  0064                     l4074:	
  7220                           ;doprnt.c: 548: while((c = *f++)) {
  7221                           
  7222  0064  083C               	movf	sprintf@f+1,w
  7223  0065  00FF               	movwf	127
  7224  0066  083B               	movf	sprintf@f,w
  7225  0067  00FE               	movwf	126
  7226  0068  0ABB               	incf	sprintf@f,f
  7227  0069  1903               	skipnz
  7228  006A  0ABC               	incf	sprintf@f+1,f
  7229  006B  087E               	movf	126,w
  7230  006C  0084               	movwf	4
  7231  006D  087F               	movf	127,w
  7232  006E  0085               	movwf	5
  7233  006F  0800               	movf	0,w	;code access
  7234  0070  00FF               	movwf	127
  7235  0071  087F               	movf	127,w
  7236  0072  00D4               	movwf	sprintf@c
  7237  0073  0854               	movf	sprintf@c,w
  7238  0074  1903               	btfsc	3,2
  7239  0075  2A25               	goto	l4076
  7240                           
  7241                           ;doprnt.c: 550: if(c != '%')
  7242  0076  3025               	movlw	37
  7243  0077  0654               	xorwf	sprintf@c,w
  7244  0078  1903               	btfsc	3,2
  7245  0079  2887               	goto	l3982
  7246                           
  7247                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  7248  007A  0854               	movf	sprintf@c,w
  7249  007B  00FF               	movwf	127
  7250  007C  084F               	movf	sprintf@sp,w
  7251  007D  0084               	movwf	4
  7252  007E  3001               	movlw	1	; select bank2/3
  7253  007F  0085               	movwf	5
  7254  0080  087F               	movf	127,w
  7255  0081  0080               	movwf	0
  7256  0082  3001               	movlw	1
  7257  0083  00FF               	movwf	127
  7258  0084  087F               	movf	127,w
  7259  0085  07CF               	addwf	sprintf@sp,f
  7260                           
  7261                           ;doprnt.c: 554: continue;
  7262  0086  2864               	goto	l4074
  7263  0087                     l3982:	
  7264                           
  7265                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  7266  0087  01D0               	clrf	sprintf@width
  7267  0088  01D1               	clrf	sprintf@width+1
  7268                           
  7269                           ;doprnt.c: 560: flag = 0;
  7270  0089  01C9               	clrf	sprintf@flag
  7271                           
  7272                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  7273  008A  083B               	movf	sprintf@f,w
  7274  008B  0084               	movwf	4
  7275  008C  083C               	movf	sprintf@f+1,w
  7276  008D  0085               	movwf	5
  7277  008E  0800               	movf	0,w	;code access
  7278  008F  3188  2054  3180   	fcall	_isdigit
  7279  0092  1C03               	btfss	3,0
  7280  0093  28C5               	goto	l3996
  7281                           
  7282                           ;doprnt.c: 610: width = 0;
  7283  0094  0020               	movlb	0	; select bank0
  7284  0095  01D0               	clrf	sprintf@width
  7285  0096  01D1               	clrf	sprintf@width+1
  7286  0097                     l3988:	
  7287                           ;doprnt.c: 611: do {
  7288                           
  7289                           
  7290                           ;doprnt.c: 612: width *= 10;
  7291  0097  300A               	movlw	10
  7292  0098  00F0               	movwf	___wmul@multiplier
  7293  0099  3000               	movlw	0
  7294  009A  00F1               	movwf	___wmul@multiplier+1
  7295  009B  0020               	movlb	0	; select bank0
  7296  009C  0851               	movf	sprintf@width+1,w
  7297  009D  00F3               	movwf	___wmul@multiplicand+1
  7298  009E  0850               	movf	sprintf@width,w
  7299  009F  00F2               	movwf	___wmul@multiplicand
  7300  00A0  3189  2114  3180   	fcall	___wmul
  7301  00A3  0871               	movf	?___wmul+1,w
  7302  00A4  0020               	movlb	0	; select bank0
  7303  00A5  00D1               	movwf	sprintf@width+1
  7304  00A6  0870               	movf	?___wmul,w
  7305  00A7  00D0               	movwf	sprintf@width
  7306                           
  7307                           ;doprnt.c: 613: width += *f++ - '0';
  7308  00A8  083B               	movf	sprintf@f,w
  7309  00A9  0084               	movwf	4
  7310  00AA  083C               	movf	sprintf@f+1,w
  7311  00AB  0085               	movwf	5
  7312  00AC  0800               	movf	0,w	;code access
  7313  00AD  3ED0               	addlw	208
  7314  00AE  00FE               	movwf	126
  7315  00AF  30FF               	movlw	255
  7316  00B0  1803               	skipnc
  7317  00B1  3000               	movlw	0
  7318  00B2  00FF               	movwf	127
  7319  00B3  087E               	movf	126,w
  7320  00B4  07D0               	addwf	sprintf@width,f
  7321  00B5  087F               	movf	127,w
  7322  00B6  3DD1               	addwfc	sprintf@width+1,f
  7323  00B7  3001               	movlw	1
  7324  00B8  07BB               	addwf	sprintf@f,f
  7325  00B9  3000               	movlw	0
  7326  00BA  3DBC               	addwfc	sprintf@f+1,f
  7327                           
  7328                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  7329  00BB  083B               	movf	sprintf@f,w
  7330  00BC  0084               	movwf	4
  7331  00BD  083C               	movf	sprintf@f+1,w
  7332  00BE  0085               	movwf	5
  7333  00BF  0800               	movf	0,w	;code access
  7334  00C0  3188  2054  3180   	fcall	_isdigit
  7335  00C3  1803               	btfsc	3,0
  7336  00C4  2897               	goto	l3988
  7337  00C5                     l3996:	
  7338                           
  7339                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  7340  00C5  0020               	movlb	0	; select bank0
  7341  00C6  083B               	movf	sprintf@f,w
  7342  00C7  0084               	movwf	4
  7343  00C8  083C               	movf	sprintf@f+1,w
  7344  00C9  0085               	movwf	5
  7345  00CA  0012               	moviw fsr0++
  7346  00CB  3A2E               	xorlw	46
  7347  00CC  1D03               	btfss	3,2
  7348  00CD  2903               	goto	l4008
  7349                           
  7350                           ;doprnt.c: 625: f++;
  7351  00CE  3001               	movlw	1
  7352  00CF  07BB               	addwf	sprintf@f,f
  7353  00D0  3000               	movlw	0
  7354  00D1  3DBC               	addwfc	sprintf@f+1,f
  7355                           
  7356                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  7357  00D2  01D2               	clrf	sprintf@prec
  7358  00D3  01D3               	clrf	sprintf@prec+1
  7359  00D4                     l4006:	
  7360                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  7361                           
  7362  00D4  083B               	movf	sprintf@f,w
  7363  00D5  0084               	movwf	4
  7364  00D6  083C               	movf	sprintf@f+1,w
  7365  00D7  0085               	movwf	5
  7366  00D8  0800               	movf	0,w	;code access
  7367  00D9  3188  2054  3180   	fcall	_isdigit
  7368  00DC  1C03               	btfss	3,0
  7369  00DD  290E               	goto	l4014
  7370                           
  7371                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  7372  00DE  0020               	movlb	0	; select bank0
  7373  00DF  083B               	movf	sprintf@f,w
  7374  00E0  0084               	movwf	4
  7375  00E1  083C               	movf	sprintf@f+1,w
  7376  00E2  0085               	movwf	5
  7377  00E3  0800               	movf	0,w	;code access
  7378  00E4  00FE               	movwf	126
  7379  00E5  01FF               	clrf	127
  7380  00E6  0853               	movf	sprintf@prec+1,w
  7381  00E7  00F1               	movwf	___wmul@multiplier+1
  7382  00E8  0852               	movf	sprintf@prec,w
  7383  00E9  00F0               	movwf	___wmul@multiplier
  7384  00EA  300A               	movlw	10
  7385  00EB  00F2               	movwf	___wmul@multiplicand
  7386  00EC  3000               	movlw	0
  7387  00ED  00F3               	movwf	___wmul@multiplicand+1
  7388  00EE  3189  2114  3180   	fcall	___wmul
  7389  00F1  087E               	movf	126,w
  7390  00F2  0770               	addwf	?___wmul,w
  7391  00F3  00FC               	movwf	124
  7392  00F4  087F               	movf	127,w
  7393  00F5  3D71               	addwfc	?___wmul+1,w
  7394  00F6  00FD               	movwf	125
  7395  00F7  087C               	movf	124,w
  7396  00F8  3ED0               	addlw	208
  7397  00F9  0020               	movlb	0	; select bank0
  7398  00FA  00D2               	movwf	sprintf@prec
  7399  00FB  30FF               	movlw	255
  7400  00FC  3D7D               	addwfc	125,w
  7401  00FD  00D3               	movwf	sprintf@prec+1
  7402  00FE  3001               	movlw	1
  7403  00FF  07BB               	addwf	sprintf@f,f
  7404  0100  3000               	movlw	0
  7405  0101  3DBC               	addwfc	sprintf@f+1,f
  7406  0102  28D4               	goto	l4006
  7407  0103                     l4008:	
  7408                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  7409                           
  7410                           
  7411                           ;doprnt.c: 645: prec = 0;
  7412  0103  0020               	movlb	0	; select bank0
  7413  0104  01D2               	clrf	sprintf@prec
  7414  0105  01D3               	clrf	sprintf@prec+1
  7415                           
  7416                           ;doprnt.c: 654: switch(c = *f++) {
  7417                           
  7418                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  7419  0106  290E               	goto	l4014
  7420  0107                     l526:	
  7421                           ;doprnt.c: 660: case 'l':
  7422                           
  7423                           ;doprnt.c: 657: goto alldone;
  7424                           
  7425                           ;doprnt.c: 656: case 0:
  7426                           
  7427                           
  7428                           ;doprnt.c: 662: flag |= 0x10;
  7429  0107  1649               	bsf	sprintf@flag,4
  7430                           
  7431                           ;doprnt.c: 663: goto loop;
  7432  0108  290E               	goto	l4014
  7433  0109                     l4010:	
  7434                           ;doprnt.c: 836: case 'u':
  7435                           
  7436                           ;doprnt.c: 832: continue;
  7437                           
  7438                           ;doprnt.c: 821: default:
  7439                           
  7440                           
  7441                           ;doprnt.c: 837: flag |= 0xC0;
  7442  0109  30C0               	movlw	192
  7443  010A  00FF               	movwf	127
  7444  010B  087F               	movf	127,w
  7445  010C  04C9               	iorwf	sprintf@flag,f
  7446                           
  7447                           ;doprnt.c: 841: }
  7448                           
  7449                           ;doprnt.c: 838: break;
  7450  010D  2926               	goto	l529
  7451  010E                     l4014:	
  7452  010E  0020               	movlb	0	; select bank0
  7453  010F  083C               	movf	sprintf@f+1,w
  7454  0110  00FF               	movwf	127
  7455  0111  083B               	movf	sprintf@f,w
  7456  0112  00FE               	movwf	126
  7457  0113  0ABB               	incf	sprintf@f,f
  7458  0114  1903               	skipnz
  7459  0115  0ABC               	incf	sprintf@f+1,f
  7460  0116  087E               	movf	126,w
  7461  0117  0084               	movwf	4
  7462  0118  087F               	movf	127,w
  7463  0119  0085               	movwf	5
  7464  011A  0800               	movf	0,w	;code access
  7465  011B  00D4               	movwf	sprintf@c
  7466                           
  7467                           ; Switch size 1, requested type "space"
  7468                           ; Number of cases is 3, Range of values is 0 to 117
  7469                           ; switch strategies available:
  7470                           ; Name         Instructions Cycles
  7471                           ; simple_byte           10     6 (average)
  7472                           ; direct_byte          242     6 (fixed)
  7473                           ; jumptable            260     6 (fixed)
  7474                           ;	Chosen strategy is simple_byte
  7475  011C  3A00               	xorlw	0	; case 0
  7476  011D  1903               	skipnz
  7477  011E  2A25               	goto	l4076
  7478  011F  3A6C               	xorlw	108	; case 108
  7479  0120  1903               	skipnz
  7480  0121  2907               	goto	l526
  7481  0122  3A19               	xorlw	25	; case 117
  7482  0123  1903               	skipnz
  7483  0124  2909               	goto	l4010
  7484  0125  2864               	goto	l4074
  7485  0126                     l529:	
  7486                           
  7487                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7488  0126  1E49               	btfss	sprintf@flag,4
  7489  0127  2935               	goto	l4020
  7490                           
  7491                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7492  0128  084A               	movf	sprintf@ap,w
  7493  0129  0084               	movwf	4
  7494  012A  0185               	clrf	5
  7495  012B  3F00               	moviw [0]fsr0
  7496  012C  00CB               	movwf	sprintf@val
  7497  012D  3F01               	moviw [1]fsr0
  7498  012E  00CC               	movwf	sprintf@val+1
  7499  012F  3F02               	moviw [2]fsr0
  7500  0130  00CD               	movwf	sprintf@val+2
  7501  0131  3F03               	moviw [3]fsr0
  7502  0132  00CE               	movwf	sprintf@val+3
  7503  0133  3004               	movlw	4
  7504  0134  2943               	goto	L1
  7505  0135                     l4020:	
  7506                           
  7507                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7508  0135  084A               	movf	sprintf@ap,w
  7509  0136  0084               	movwf	4
  7510  0137  0185               	clrf	5
  7511  0138  3F00               	moviw [0]fsr0
  7512  0139  00FE               	movwf	126
  7513  013A  3F01               	moviw [1]fsr0
  7514  013B  00FF               	movwf	127
  7515  013C  087E               	movf	126,w
  7516  013D  00CB               	movwf	sprintf@val
  7517  013E  087F               	movf	127,w
  7518  013F  00CC               	movwf	sprintf@val+1
  7519  0140  01CD               	clrf	sprintf@val+2
  7520  0141  01CE               	clrf	sprintf@val+3
  7521  0142  3002               	movlw	2
  7522  0143                     L1:	
  7523  0143  00FF               	movwf	127
  7524  0144  087F               	movf	127,w
  7525  0145  07CA               	addwf	sprintf@ap,f
  7526                           
  7527                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7528  0146  0852               	movf	sprintf@prec,w
  7529  0147  0453               	iorwf	sprintf@prec+1,w
  7530  0148  1D03               	btfss	3,2
  7531  0149  2954               	goto	l4030
  7532  014A  084E               	movf	sprintf@val+3,w
  7533  014B  044D               	iorwf	sprintf@val+2,w
  7534  014C  044C               	iorwf	sprintf@val+1,w
  7535  014D  044B               	iorwf	sprintf@val,w
  7536  014E  1D03               	skipz
  7537  014F  2954               	goto	l4030
  7538                           
  7539                           ;doprnt.c: 1310: prec++;
  7540  0150  3001               	movlw	1
  7541  0151  07D2               	addwf	sprintf@prec,f
  7542  0152  3000               	movlw	0
  7543  0153  3DD3               	addwfc	sprintf@prec+1,f
  7544  0154                     l4030:	
  7545                           
  7546                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7547  0154  01D4               	clrf	sprintf@c
  7548  0155  0AD4               	incf	sprintf@c,f
  7549  0156  300A               	movlw	10
  7550  0157  0654               	xorwf	sprintf@c,w
  7551  0158  1903               	btfsc	3,2
  7552  0159  2987               	goto	l4044
  7553  015A                     l4036:	
  7554                           
  7555                           ;doprnt.c: 1325: if(val < dpowers[c])
  7556  015A  0854               	movf	sprintf@c,w
  7557  015B  00FE               	movwf	126
  7558  015C  01FF               	clrf	127
  7559  015D  35FE               	lslf	126,f
  7560  015E  0DFF               	rlf	127,f
  7561  015F  35FE               	lslf	126,f
  7562  0160  0DFF               	rlf	127,f
  7563  0161  3000               	movlw	low (_dpowers| (0+32768))
  7564  0162  077E               	addwf	126,w
  7565  0163  0084               	movwf	4
  7566  0164  3090               	movlw	high (_dpowers| (0+32768))
  7567  0165  3D7F               	addwfc	127,w
  7568  0166  0085               	movwf	5
  7569  0167  3F00               	moviw [0]fsr0
  7570  0168  00C5               	movwf	??_sprintf
  7571  0169  3F01               	moviw [1]fsr0
  7572  016A  00C6               	movwf	??_sprintf+1
  7573  016B  3F02               	moviw [2]fsr0
  7574  016C  00C7               	movwf	??_sprintf+2
  7575  016D  3F03               	moviw [3]fsr0
  7576  016E  00C8               	movwf	??_sprintf+3
  7577  016F  0848               	movf	??_sprintf+3,w
  7578  0170  024E               	subwf	sprintf@val+3,w
  7579  0171  1D03               	skipz
  7580  0172  297D               	goto	u4405
  7581  0173  0847               	movf	??_sprintf+2,w
  7582  0174  024D               	subwf	sprintf@val+2,w
  7583  0175  1D03               	skipz
  7584  0176  297D               	goto	u4405
  7585  0177  0846               	movf	??_sprintf+1,w
  7586  0178  024C               	subwf	sprintf@val+1,w
  7587  0179  1D03               	skipz
  7588  017A  297D               	goto	u4405
  7589  017B  0845               	movf	??_sprintf,w
  7590  017C  024B               	subwf	sprintf@val,w
  7591  017D                     u4405:	
  7592  017D  1C03               	btfss	3,0
  7593  017E  2987               	goto	l4044
  7594                           
  7595                           ;doprnt.c: 1326: break;
  7596  017F  3001               	movlw	1
  7597  0180  00FF               	movwf	127
  7598  0181  087F               	movf	127,w
  7599  0182  07D4               	addwf	sprintf@c,f
  7600  0183  300A               	movlw	10
  7601  0184  0654               	xorwf	sprintf@c,w
  7602  0185  1D03               	btfss	3,2
  7603  0186  295A               	goto	l4036
  7604  0187                     l4044:	
  7605                           
  7606                           ;doprnt.c: 1358: if(c < prec)
  7607  0187  0853               	movf	sprintf@prec+1,w
  7608  0188  3A80               	xorlw	128
  7609  0189  3C80               	sublw	128
  7610  018A  1D03               	skipz
  7611  018B  298E               	goto	u4425
  7612  018C  0852               	movf	sprintf@prec,w
  7613  018D  0254               	subwf	sprintf@c,w
  7614  018E                     u4425:	
  7615  018E  1803               	skipnc
  7616  018F  2996               	goto	l4048
  7617                           
  7618                           ;doprnt.c: 1359: c = prec;
  7619  0190  0020               	movlb	0	; select bank0
  7620  0191  0852               	movf	sprintf@prec,w
  7621  0192  00FF               	movwf	127
  7622  0193  087F               	movf	127,w
  7623  0194  00D4               	movwf	sprintf@c
  7624  0195  29AA               	goto	l4052
  7625  0196                     l4048:	
  7626                           
  7627                           ;doprnt.c: 1360: else if(prec < c)
  7628  0196  0020               	movlb	0	; select bank0
  7629  0197  0853               	movf	sprintf@prec+1,w
  7630  0198  3A80               	xorlw	128
  7631  0199  00C5               	movwf	??_sprintf
  7632  019A  3080               	movlw	128
  7633  019B  0245               	subwf	??_sprintf,w
  7634  019C  1D03               	skipz
  7635  019D  29A0               	goto	u4435
  7636  019E  0854               	movf	sprintf@c,w
  7637  019F  0252               	subwf	sprintf@prec,w
  7638  01A0                     u4435:	
  7639  01A0  1803               	skipnc
  7640  01A1  29AA               	goto	l4052
  7641                           
  7642                           ;doprnt.c: 1361: prec = c;
  7643  01A2  0020               	movlb	0	; select bank0
  7644  01A3  0854               	movf	sprintf@c,w
  7645  01A4  00FE               	movwf	126
  7646  01A5  01FF               	clrf	127
  7647  01A6  087E               	movf	126,w
  7648  01A7  00D2               	movwf	sprintf@prec
  7649  01A8  087F               	movf	127,w
  7650  01A9  00D3               	movwf	sprintf@prec+1
  7651  01AA                     l4052:	
  7652                           
  7653                           ;doprnt.c: 1400: if(width > c)
  7654  01AA  0020               	movlb	0	; select bank0
  7655  01AB  0851               	movf	sprintf@width+1,w
  7656  01AC  3A80               	xorlw	128
  7657  01AD  3C80               	sublw	128
  7658  01AE  1D03               	skipz
  7659  01AF  29B2               	goto	u4445
  7660  01B0  0850               	movf	sprintf@width,w
  7661  01B1  0254               	subwf	sprintf@c,w
  7662  01B2                     u4445:	
  7663  01B2  1803               	skipnc
  7664  01B3  29BD               	goto	l4056
  7665                           
  7666                           ;doprnt.c: 1401: width -= c;
  7667  01B4  0020               	movlb	0	; select bank0
  7668  01B5  0854               	movf	sprintf@c,w
  7669  01B6  00FE               	movwf	126
  7670  01B7  01FF               	clrf	127
  7671  01B8  087E               	movf	126,w
  7672  01B9  02D0               	subwf	sprintf@width,f
  7673  01BA  087F               	movf	127,w
  7674  01BB  3BD1               	subwfb	sprintf@width+1,f
  7675  01BC  29C0               	goto	l4058
  7676  01BD                     l4056:	
  7677                           
  7678                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7679  01BD  0020               	movlb	0	; select bank0
  7680  01BE  01D0               	clrf	sprintf@width
  7681  01BF  01D1               	clrf	sprintf@width+1
  7682  01C0                     l4058:	
  7683                           
  7684                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7685  01C0  0850               	movf	sprintf@width,w
  7686  01C1  0451               	iorwf	sprintf@width+1,w
  7687  01C2  1903               	btfsc	3,2
  7688  01C3  2A1A               	goto	l4072
  7689                           
  7690                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7691                           
  7692                           ;doprnt.c: 1448: do
  7693  01C4  3020               	movlw	32
  7694  01C5  00FF               	movwf	127
  7695  01C6  084F               	movf	sprintf@sp,w
  7696  01C7  0084               	movwf	4
  7697  01C8  3001               	movlw	1	; select bank2/3
  7698  01C9  0085               	movwf	5
  7699  01CA  087F               	movf	127,w
  7700  01CB  0080               	movwf	0
  7701  01CC  3001               	movlw	1
  7702  01CD  00FF               	movwf	127
  7703  01CE  087F               	movf	127,w
  7704  01CF  07CF               	addwf	sprintf@sp,f
  7705                           
  7706                           ;doprnt.c: 1450: while(--width);
  7707  01D0  30FF               	movlw	255
  7708  01D1  07D0               	addwf	sprintf@width,f
  7709  01D2  30FF               	movlw	255
  7710  01D3  3DD1               	addwfc	sprintf@width+1,f
  7711  01D4  29C0               	goto	l4058
  7712  01D5                     l4066:	
  7713                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7714                           
  7715                           
  7716                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7717  01D5  3000               	movlw	0
  7718  01D6  00B6               	movwf	___llmod@divisor+3
  7719  01D7  3000               	movlw	0
  7720  01D8  00B5               	movwf	___llmod@divisor+2
  7721  01D9  3000               	movlw	0
  7722  01DA  00B4               	movwf	___llmod@divisor+1
  7723  01DB  300A               	movlw	10
  7724  01DC  00B3               	movwf	___llmod@divisor
  7725  01DD  0853               	movf	sprintf@prec+1,w
  7726  01DE  0085               	movwf	5
  7727  01DF  0852               	movf	sprintf@prec,w
  7728  01E0  0084               	movwf	4
  7729  01E1  3584               	lslf	4,f
  7730  01E2  0D85               	rlf	5,f
  7731  01E3  3584               	lslf	4,f
  7732  01E4  0D85               	rlf	5,f
  7733  01E5  3000               	movlw	low (_dpowers| (0+32768))
  7734  01E6  0784               	addwf	4,f
  7735  01E7  3090               	movlw	high (_dpowers| (0+32768))
  7736  01E8  3D85               	addwfc	5,f
  7737  01E9  3F00               	moviw [0]fsr0
  7738  01EA  00A6               	movwf	___lldiv@divisor
  7739  01EB  3F01               	moviw [1]fsr0
  7740  01EC  00A7               	movwf	___lldiv@divisor+1
  7741  01ED  3F02               	moviw [2]fsr0
  7742  01EE  00A8               	movwf	___lldiv@divisor+2
  7743  01EF  3F03               	moviw [3]fsr0
  7744  01F0  00A9               	movwf	___lldiv@divisor+3
  7745  01F1  084E               	movf	sprintf@val+3,w
  7746  01F2  00AD               	movwf	___lldiv@dividend+3
  7747  01F3  084D               	movf	sprintf@val+2,w
  7748  01F4  00AC               	movwf	___lldiv@dividend+2
  7749  01F5  084C               	movf	sprintf@val+1,w
  7750  01F6  00AB               	movwf	___lldiv@dividend+1
  7751  01F7  084B               	movf	sprintf@val,w
  7752  01F8  00AA               	movwf	___lldiv@dividend
  7753  01F9  318C  24FA  3180   	fcall	___lldiv
  7754  01FC  0020               	movlb	0	; select bank0
  7755  01FD  0829               	movf	?___lldiv+3,w
  7756  01FE  00BA               	movwf	___llmod@dividend+3
  7757  01FF  0828               	movf	?___lldiv+2,w
  7758  0200  00B9               	movwf	___llmod@dividend+2
  7759  0201  0827               	movf	?___lldiv+1,w
  7760  0202  00B8               	movwf	___llmod@dividend+1
  7761  0203  0826               	movf	?___lldiv,w
  7762  0204  00B7               	movwf	___llmod@dividend
  7763  0205  318B  23A4  3180   	fcall	___llmod
  7764  0208  0020               	movlb	0	; select bank0
  7765  0209  0833               	movf	?___llmod,w
  7766  020A  3E30               	addlw	48
  7767  020B  00FF               	movwf	127
  7768  020C  087F               	movf	127,w
  7769  020D  00D4               	movwf	sprintf@c
  7770                           
  7771                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7772  020E  0854               	movf	sprintf@c,w
  7773  020F  00FF               	movwf	127
  7774  0210  084F               	movf	sprintf@sp,w
  7775  0211  0084               	movwf	4
  7776  0212  3001               	movlw	1	; select bank2/3
  7777  0213  0085               	movwf	5
  7778  0214  087F               	movf	127,w
  7779  0215  0080               	movwf	0
  7780  0216  3001               	movlw	1
  7781  0217  00FF               	movwf	127
  7782  0218  087F               	movf	127,w
  7783  0219  07CF               	addwf	sprintf@sp,f
  7784  021A                     l4072:	
  7785  021A  30FF               	movlw	255
  7786  021B  07D2               	addwf	sprintf@prec,f
  7787  021C  30FF               	movlw	255
  7788  021D  3DD3               	addwfc	sprintf@prec+1,f
  7789  021E  0A52               	incf	sprintf@prec,w
  7790  021F  1D03               	skipz
  7791  0220  29D5               	goto	l4066
  7792  0221  0A53               	incf	sprintf@prec+1,w
  7793  0222  1903               	btfsc	3,2
  7794  0223  2864               	goto	l4074
  7795  0224  29D5               	goto	l4066
  7796  0225                     l4076:	
  7797                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7798                           
  7799                           
  7800                           ;doprnt.c: 1557: *sp = 0;
  7801  0225  084F               	movf	sprintf@sp,w
  7802  0226  0084               	movwf	4
  7803  0227  3001               	movlw	1	; select bank2/3
  7804  0228  0085               	movwf	5
  7805  0229  0180               	clrf	0
  7806  022A  0008               	return
  7807  022B                     __end_of_sprintf:	
  7808                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7809                           
  7810                           
  7811                           	psect	text28
  7812  0854                     __ptext28:	
  7813 ;; *************** function _isdigit *****************
  7814 ;; Defined at:
  7815 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7816 ;; Parameters:    Size  Location     Type
  7817 ;;  c               1    wreg     unsigned char 
  7818 ;; Auto vars:     Size  Location     Type
  7819 ;;  c               1    1[COMMON] unsigned char 
  7820 ;; Return value:  Size  Location     Type
  7821 ;;		None               void
  7822 ;; Registers used:
  7823 ;;		wreg, status,2, status,0
  7824 ;; Tracked objects:
  7825 ;;		On entry : 0/0
  7826 ;;		On exit  : 0/0
  7827 ;;		Unchanged: 0/0
  7828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7830 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;Total ram usage:        2 bytes
  7834 ;; Hardware stack levels used:    1
  7835 ;; Hardware stack levels required when called:    7
  7836 ;; This function calls:
  7837 ;;		Nothing
  7838 ;; This function is called by:
  7839 ;;		_sprintf
  7840 ;; This function uses a non-reentrant model
  7841 ;;
  7842                           
  7843                           
  7844                           ;psect for function _isdigit
  7845  0854                     _isdigit:	
  7846                           
  7847                           ;incstack = 0
  7848                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7849                           ;isdigit@c stored from wreg
  7850  0854  00F1               	movwf	isdigit@c
  7851  0855  01F0               	clrf	_isdigit$2025
  7852  0856  303A               	movlw	58
  7853  0857  0271               	subwf	isdigit@c,w
  7854  0858  1803               	skipnc
  7855  0859  2860               	goto	l3760
  7856  085A  3030               	movlw	48
  7857  085B  0271               	subwf	isdigit@c,w
  7858  085C  1C03               	skipc
  7859  085D  2860               	goto	l3760
  7860  085E  01F0               	clrf	_isdigit$2025
  7861  085F  0AF0               	incf	_isdigit$2025,f
  7862  0860                     l3760:	
  7863  0860  0C70               	rrf	_isdigit$2025,w
  7864  0861  0008               	return
  7865  0862                     __end_of_isdigit:	
  7866                           
  7867                           	psect	text29
  7868  0914                     __ptext29:	
  7869 ;; *************** function ___wmul *****************
  7870 ;; Defined at:
  7871 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  multiplier      2    0[COMMON] unsigned int 
  7874 ;;  multiplicand    2    2[COMMON] unsigned int 
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;  product         2    6[BANK0 ] unsigned int 
  7877 ;; Return value:  Size  Location     Type
  7878 ;;                  2    0[COMMON] unsigned int 
  7879 ;; Registers used:
  7880 ;;		wreg, status,2, status,0
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7886 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7887 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7889 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;Total ram usage:        6 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:    7
  7893 ;; This function calls:
  7894 ;;		Nothing
  7895 ;; This function is called by:
  7896 ;;		_sprintf
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           
  7901                           ;psect for function ___wmul
  7902  0914                     ___wmul:	
  7903                           
  7904                           ;incstack = 0
  7905                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7906  0914  0020               	movlb	0	; select bank0
  7907  0915  01A6               	clrf	___wmul@product
  7908  0916  01A7               	clrf	___wmul@product+1
  7909  0917                     l3766:	
  7910  0917  1C70               	btfss	___wmul@multiplier,0
  7911  0918  291E               	goto	l552
  7912  0919  0872               	movf	___wmul@multiplicand,w
  7913  091A  0020               	movlb	0	; select bank0
  7914  091B  07A6               	addwf	___wmul@product,f
  7915  091C  0873               	movf	___wmul@multiplicand+1,w
  7916  091D  3DA7               	addwfc	___wmul@product+1,f
  7917  091E                     l552:	
  7918  091E  3001               	movlw	1
  7919  091F                     u3785:	
  7920  091F  35F2               	lslf	___wmul@multiplicand,f
  7921  0920  0DF3               	rlf	___wmul@multiplicand+1,f
  7922  0921  0B89               	decfsz	9,f
  7923  0922  291F               	goto	u3785
  7924  0923  3001               	movlw	1
  7925  0924                     u3795:	
  7926  0924  36F1               	lsrf	___wmul@multiplier+1,f
  7927  0925  0CF0               	rrf	___wmul@multiplier,f
  7928  0926  0B89               	decfsz	9,f
  7929  0927  2924               	goto	u3795
  7930  0928  0870               	movf	___wmul@multiplier,w
  7931  0929  0471               	iorwf	___wmul@multiplier+1,w
  7932  092A  1D03               	btfss	3,2
  7933  092B  2917               	goto	l3766
  7934  092C  0020               	movlb	0	; select bank0
  7935  092D  0827               	movf	___wmul@product+1,w
  7936  092E  00F1               	movwf	?___wmul+1
  7937  092F  0826               	movf	___wmul@product,w
  7938  0930  00F0               	movwf	?___wmul
  7939  0931  0008               	return
  7940  0932                     __end_of___wmul:	
  7941                           
  7942                           	psect	text30
  7943  0BA4                     __ptext30:	
  7944 ;; *************** function ___llmod *****************
  7945 ;; Defined at:
  7946 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7947 ;; Parameters:    Size  Location     Type
  7948 ;;  divisor         4   19[BANK0 ] unsigned long 
  7949 ;;  dividend        4   23[BANK0 ] unsigned long 
  7950 ;; Auto vars:     Size  Location     Type
  7951 ;;  counter         1    0[COMMON] unsigned char 
  7952 ;; Return value:  Size  Location     Type
  7953 ;;                  4   19[BANK0 ] unsigned long 
  7954 ;; Registers used:
  7955 ;;		wreg, status,2, status,0, btemp+11
  7956 ;; Tracked objects:
  7957 ;;		On entry : 0/0
  7958 ;;		On exit  : 0/0
  7959 ;;		Unchanged: 0/0
  7960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7961 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7962 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7964 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7965 ;;Total ram usage:        9 bytes
  7966 ;; Hardware stack levels used:    1
  7967 ;; Hardware stack levels required when called:    7
  7968 ;; This function calls:
  7969 ;;		Nothing
  7970 ;; This function is called by:
  7971 ;;		_sprintf
  7972 ;; This function uses a non-reentrant model
  7973 ;;
  7974                           
  7975                           
  7976                           ;psect for function ___llmod
  7977  0BA4                     ___llmod:	
  7978                           
  7979                           ;incstack = 0
  7980                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+11]
  7981  0BA4  0020               	movlb	0	; select bank0
  7982  0BA5  0836               	movf	___llmod@divisor+3,w
  7983  0BA6  0435               	iorwf	___llmod@divisor+2,w
  7984  0BA7  0434               	iorwf	___llmod@divisor+1,w
  7985  0BA8  0433               	iorwf	___llmod@divisor,w
  7986  0BA9  1903               	skipnz
  7987  0BAA  2BDE               	goto	l3898
  7988  0BAB  01F0               	clrf	___llmod@counter
  7989  0BAC  0AF0               	incf	___llmod@counter,f
  7990  0BAD                     l3888:	
  7991  0BAD  1BB6               	btfsc	___llmod@divisor+3,7
  7992  0BAE  2BBB               	goto	l3890
  7993  0BAF  3001               	movlw	1
  7994  0BB0                     u4125:	
  7995  0BB0  35B3               	lslf	___llmod@divisor,f
  7996  0BB1  0DB4               	rlf	___llmod@divisor+1,f
  7997  0BB2  0DB5               	rlf	___llmod@divisor+2,f
  7998  0BB3  0DB6               	rlf	___llmod@divisor+3,f
  7999  0BB4  0B89               	decfsz	9,f
  8000  0BB5  2BB0               	goto	u4125
  8001  0BB6  3001               	movlw	1
  8002  0BB7  00FF               	movwf	127
  8003  0BB8  087F               	movf	127,w
  8004  0BB9  07F0               	addwf	___llmod@counter,f
  8005  0BBA  2BAD               	goto	l3888
  8006  0BBB                     l3890:	
  8007  0BBB  0836               	movf	___llmod@divisor+3,w
  8008  0BBC  023A               	subwf	___llmod@dividend+3,w
  8009  0BBD  1D03               	skipz
  8010  0BBE  2BC9               	goto	u4145
  8011  0BBF  0835               	movf	___llmod@divisor+2,w
  8012  0BC0  0239               	subwf	___llmod@dividend+2,w
  8013  0BC1  1D03               	skipz
  8014  0BC2  2BC9               	goto	u4145
  8015  0BC3  0834               	movf	___llmod@divisor+1,w
  8016  0BC4  0238               	subwf	___llmod@dividend+1,w
  8017  0BC5  1D03               	skipz
  8018  0BC6  2BC9               	goto	u4145
  8019  0BC7  0833               	movf	___llmod@divisor,w
  8020  0BC8  0237               	subwf	___llmod@dividend,w
  8021  0BC9                     u4145:	
  8022  0BC9  1C03               	skipc
  8023  0BCA  2BD3               	goto	l3894
  8024  0BCB  0833               	movf	___llmod@divisor,w
  8025  0BCC  02B7               	subwf	___llmod@dividend,f
  8026  0BCD  0834               	movf	___llmod@divisor+1,w
  8027  0BCE  3BB8               	subwfb	___llmod@dividend+1,f
  8028  0BCF  0835               	movf	___llmod@divisor+2,w
  8029  0BD0  3BB9               	subwfb	___llmod@dividend+2,f
  8030  0BD1  0836               	movf	___llmod@divisor+3,w
  8031  0BD2  3BBA               	subwfb	___llmod@dividend+3,f
  8032  0BD3                     l3894:	
  8033  0BD3  3001               	movlw	1
  8034  0BD4                     u4155:	
  8035  0BD4  36B6               	lsrf	___llmod@divisor+3,f
  8036  0BD5  0CB5               	rrf	___llmod@divisor+2,f
  8037  0BD6  0CB4               	rrf	___llmod@divisor+1,f
  8038  0BD7  0CB3               	rrf	___llmod@divisor,f
  8039  0BD8  0B89               	decfsz	9,f
  8040  0BD9  2BD4               	goto	u4155
  8041  0BDA  3001               	movlw	1
  8042  0BDB  02F0               	subwf	___llmod@counter,f
  8043  0BDC  1D03               	btfss	3,2
  8044  0BDD  2BBB               	goto	l3890
  8045  0BDE                     l3898:	
  8046  0BDE  083A               	movf	___llmod@dividend+3,w
  8047  0BDF  00B6               	movwf	?___llmod+3
  8048  0BE0  0839               	movf	___llmod@dividend+2,w
  8049  0BE1  00B5               	movwf	?___llmod+2
  8050  0BE2  0838               	movf	___llmod@dividend+1,w
  8051  0BE3  00B4               	movwf	?___llmod+1
  8052  0BE4  0837               	movf	___llmod@dividend,w
  8053  0BE5  00B3               	movwf	?___llmod
  8054  0BE6  0008               	return
  8055  0BE7                     __end_of___llmod:	
  8056                           
  8057                           	psect	text31
  8058  0CFA                     __ptext31:	
  8059 ;; *************** function ___lldiv *****************
  8060 ;; Defined at:
  8061 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;  divisor         4    6[BANK0 ] unsigned long 
  8064 ;;  dividend        4   10[BANK0 ] unsigned long 
  8065 ;; Auto vars:     Size  Location     Type
  8066 ;;  quotient        4   14[BANK0 ] unsigned long 
  8067 ;;  counter         1   18[BANK0 ] unsigned char 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;                  4    6[BANK0 ] unsigned long 
  8070 ;; Registers used:
  8071 ;;		wreg, status,2, status,0, btemp+11
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8077 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8078 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8080 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;Total ram usage:       13 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; Hardware stack levels required when called:    7
  8084 ;; This function calls:
  8085 ;;		Nothing
  8086 ;; This function is called by:
  8087 ;;		_sprintf
  8088 ;; This function uses a non-reentrant model
  8089 ;;
  8090                           
  8091                           
  8092                           ;psect for function ___lldiv
  8093  0CFA                     ___lldiv:	
  8094                           
  8095                           ;incstack = 0
  8096                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+11]
  8097  0CFA  3000               	movlw	0
  8098  0CFB  0020               	movlb	0	; select bank0
  8099  0CFC  00B1               	movwf	___lldiv@quotient+3
  8100  0CFD  3000               	movlw	0
  8101  0CFE  00B0               	movwf	___lldiv@quotient+2
  8102  0CFF  3000               	movlw	0
  8103  0D00  00AF               	movwf	___lldiv@quotient+1
  8104  0D01  3000               	movlw	0
  8105  0D02  00AE               	movwf	___lldiv@quotient
  8106  0D03  0829               	movf	___lldiv@divisor+3,w
  8107  0D04  0428               	iorwf	___lldiv@divisor+2,w
  8108  0D05  0427               	iorwf	___lldiv@divisor+1,w
  8109  0D06  0426               	iorwf	___lldiv@divisor,w
  8110  0D07  1903               	skipnz
  8111  0D08  2D44               	goto	l3800
  8112  0D09  01B2               	clrf	___lldiv@counter
  8113  0D0A  0AB2               	incf	___lldiv@counter,f
  8114  0D0B                     l3786:	
  8115  0D0B  1BA9               	btfsc	___lldiv@divisor+3,7
  8116  0D0C  2D19               	goto	l3788
  8117  0D0D  3001               	movlw	1
  8118  0D0E                     u3825:	
  8119  0D0E  35A6               	lslf	___lldiv@divisor,f
  8120  0D0F  0DA7               	rlf	___lldiv@divisor+1,f
  8121  0D10  0DA8               	rlf	___lldiv@divisor+2,f
  8122  0D11  0DA9               	rlf	___lldiv@divisor+3,f
  8123  0D12  0B89               	decfsz	9,f
  8124  0D13  2D0E               	goto	u3825
  8125  0D14  3001               	movlw	1
  8126  0D15  00FF               	movwf	127
  8127  0D16  087F               	movf	127,w
  8128  0D17  07B2               	addwf	___lldiv@counter,f
  8129  0D18  2D0B               	goto	l3786
  8130  0D19                     l3788:	
  8131  0D19  3001               	movlw	1
  8132  0D1A                     u3845:	
  8133  0D1A  35AE               	lslf	___lldiv@quotient,f
  8134  0D1B  0DAF               	rlf	___lldiv@quotient+1,f
  8135  0D1C  0DB0               	rlf	___lldiv@quotient+2,f
  8136  0D1D  0DB1               	rlf	___lldiv@quotient+3,f
  8137  0D1E  0B89               	decfsz	9,f
  8138  0D1F  2D1A               	goto	u3845
  8139  0D20  0829               	movf	___lldiv@divisor+3,w
  8140  0D21  022D               	subwf	___lldiv@dividend+3,w
  8141  0D22  1D03               	skipz
  8142  0D23  2D2E               	goto	u3855
  8143  0D24  0828               	movf	___lldiv@divisor+2,w
  8144  0D25  022C               	subwf	___lldiv@dividend+2,w
  8145  0D26  1D03               	skipz
  8146  0D27  2D2E               	goto	u3855
  8147  0D28  0827               	movf	___lldiv@divisor+1,w
  8148  0D29  022B               	subwf	___lldiv@dividend+1,w
  8149  0D2A  1D03               	skipz
  8150  0D2B  2D2E               	goto	u3855
  8151  0D2C  0826               	movf	___lldiv@divisor,w
  8152  0D2D  022A               	subwf	___lldiv@dividend,w
  8153  0D2E                     u3855:	
  8154  0D2E  1C03               	skipc
  8155  0D2F  2D39               	goto	l3796
  8156  0D30  0826               	movf	___lldiv@divisor,w
  8157  0D31  02AA               	subwf	___lldiv@dividend,f
  8158  0D32  0827               	movf	___lldiv@divisor+1,w
  8159  0D33  3BAB               	subwfb	___lldiv@dividend+1,f
  8160  0D34  0828               	movf	___lldiv@divisor+2,w
  8161  0D35  3BAC               	subwfb	___lldiv@dividend+2,f
  8162  0D36  0829               	movf	___lldiv@divisor+3,w
  8163  0D37  3BAD               	subwfb	___lldiv@dividend+3,f
  8164  0D38  142E               	bsf	___lldiv@quotient,0
  8165  0D39                     l3796:	
  8166  0D39  3001               	movlw	1
  8167  0D3A                     u3865:	
  8168  0D3A  36A9               	lsrf	___lldiv@divisor+3,f
  8169  0D3B  0CA8               	rrf	___lldiv@divisor+2,f
  8170  0D3C  0CA7               	rrf	___lldiv@divisor+1,f
  8171  0D3D  0CA6               	rrf	___lldiv@divisor,f
  8172  0D3E  0B89               	decfsz	9,f
  8173  0D3F  2D3A               	goto	u3865
  8174  0D40  3001               	movlw	1
  8175  0D41  02B2               	subwf	___lldiv@counter,f
  8176  0D42  1D03               	btfss	3,2
  8177  0D43  2D19               	goto	l3788
  8178  0D44                     l3800:	
  8179  0D44  0831               	movf	___lldiv@quotient+3,w
  8180  0D45  00A9               	movwf	?___lldiv+3
  8181  0D46  0830               	movf	___lldiv@quotient+2,w
  8182  0D47  00A8               	movwf	?___lldiv+2
  8183  0D48  082F               	movf	___lldiv@quotient+1,w
  8184  0D49  00A7               	movwf	?___lldiv+1
  8185  0D4A  082E               	movf	___lldiv@quotient,w
  8186  0D4B  00A6               	movwf	?___lldiv
  8187  0D4C  0008               	return
  8188  0D4D                     __end_of___lldiv:	
  8189                           
  8190                           	psect	text32
  8191  0A15                     __ptext32:	
  8192 ;; *************** function ___lltoft *****************
  8193 ;; Defined at:
  8194 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;  c               4    0[COMMON] unsigned long 
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;  exp             1   11[BANK0 ] unsigned char 
  8199 ;; Return value:  Size  Location     Type
  8200 ;;                  3    0[COMMON] float 
  8201 ;; Registers used:
  8202 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8208 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8211 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8212 ;;Total ram usage:        5 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    8
  8215 ;; This function calls:
  8216 ;;		___ftpack
  8217 ;; This function is called by:
  8218 ;;		_ftoa
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           
  8223                           ;psect for function ___lltoft
  8224  0A15                     ___lltoft:	
  8225                           
  8226                           ;incstack = 0
  8227                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8228  0A15  308E               	movlw	142
  8229  0A16  00FF               	movwf	127
  8230  0A17  087F               	movf	127,w
  8231  0A18  0020               	movlb	0	; select bank0
  8232  0A19  00AB               	movwf	___lltoft@exp
  8233  0A1A                     l4236:	
  8234  0A1A  30FF               	movlw	255
  8235  0A1B  0573               	andwf	___lltoft@c+3,w
  8236  0A1C  1903               	btfsc	3,2
  8237  0A1D  2A2A               	goto	l4238
  8238  0A1E  3001               	movlw	1
  8239  0A1F                     u4785:	
  8240  0A1F  36F3               	lsrf	___lltoft@c+3,f
  8241  0A20  0CF2               	rrf	___lltoft@c+2,f
  8242  0A21  0CF1               	rrf	___lltoft@c+1,f
  8243  0A22  0CF0               	rrf	___lltoft@c,f
  8244  0A23  0B89               	decfsz	9,f
  8245  0A24  2A1F               	goto	u4785
  8246  0A25  3001               	movlw	1
  8247  0A26  00FF               	movwf	127
  8248  0A27  087F               	movf	127,w
  8249  0A28  07AB               	addwf	___lltoft@exp,f
  8250  0A29  2A1A               	goto	l4236
  8251  0A2A                     l4238:	
  8252  0A2A  0870               	movf	___lltoft@c,w
  8253  0A2B  00A6               	movwf	___ftpack@arg
  8254  0A2C  0871               	movf	___lltoft@c+1,w
  8255  0A2D  00A7               	movwf	___ftpack@arg+1
  8256  0A2E  0872               	movf	___lltoft@c+2,w
  8257  0A2F  00A8               	movwf	___ftpack@arg+2
  8258  0A30  082B               	movf	___lltoft@exp,w
  8259  0A31  00FF               	movwf	127
  8260  0A32  087F               	movf	127,w
  8261  0A33  00A9               	movwf	___ftpack@exp
  8262  0A34  01AA               	clrf	___ftpack@sign
  8263  0A35  318D  254D         	fcall	___ftpack
  8264  0A37  0020               	movlb	0	; select bank0
  8265  0A38  0826               	movf	?___ftpack,w
  8266  0A39  00F0               	movwf	?___lltoft
  8267  0A3A  0827               	movf	?___ftpack+1,w
  8268  0A3B  00F1               	movwf	?___lltoft+1
  8269  0A3C  0828               	movf	?___ftpack+2,w
  8270  0A3D  00F2               	movwf	?___lltoft+2
  8271  0A3E  0008               	return
  8272  0A3F                     __end_of___lltoft:	
  8273                           
  8274                           	psect	text33
  8275  0E37                     __ptext33:	
  8276 ;; *************** function ___fttol *****************
  8277 ;; Defined at:
  8278 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;  f1              3   55[BANK0 ] float 
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;  lval            4   60[BANK0 ] unsigned long 
  8283 ;;  exp1            1   64[BANK0 ] unsigned char 
  8284 ;;  sign1           1   59[BANK0 ] unsigned char 
  8285 ;; Return value:  Size  Location     Type
  8286 ;;                  4   55[BANK0 ] long 
  8287 ;; Registers used:
  8288 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8294 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;Total ram usage:       10 bytes
  8299 ;; Hardware stack levels used:    1
  8300 ;; Hardware stack levels required when called:    7
  8301 ;; This function calls:
  8302 ;;		Nothing
  8303 ;; This function is called by:
  8304 ;;		_ftoa
  8305 ;; This function uses a non-reentrant model
  8306 ;;
  8307                           
  8308                           
  8309                           ;psect for function ___fttol
  8310  0E37                     ___fttol:	
  8311                           
  8312                           ;incstack = 0
  8313                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+9-btemp+11]
  8314  0E37  0020               	movlb	0	; select bank0
  8315  0E38  0857               	movf	___fttol@f1,w
  8316  0E39  00FD               	movwf	125
  8317  0E3A  0858               	movf	___fttol@f1+1,w
  8318  0E3B  00FE               	movwf	126
  8319  0E3C  0859               	movf	___fttol@f1+2,w
  8320  0E3D  00FF               	movwf	127
  8321  0E3E  1003               	clrc
  8322  0E3F  0D7E               	rlf	126,w
  8323  0E40  0D7F               	rlf	127,w
  8324  0E41  00FF               	movwf	127
  8325  0E42  087F               	movf	127,w
  8326  0E43  00E0               	movwf	___fttol@exp1
  8327  0E44  0860               	movf	___fttol@exp1,w
  8328  0E45  1D03               	btfss	3,2
  8329  0E46  2E50               	goto	l4192
  8330  0E47  3000               	movlw	0
  8331  0E48  00DA               	movwf	?___fttol+3
  8332  0E49  3000               	movlw	0
  8333  0E4A  00D9               	movwf	?___fttol+2
  8334  0E4B  3000               	movlw	0
  8335  0E4C  00D8               	movwf	?___fttol+1
  8336  0E4D  3000               	movlw	0
  8337  0E4E  00D7               	movwf	?___fttol
  8338  0E4F  0008               	return
  8339  0E50                     l4192:	
  8340  0E50  0857               	movf	___fttol@f1,w
  8341  0E51  00FD               	movwf	125
  8342  0E52  0858               	movf	___fttol@f1+1,w
  8343  0E53  00FE               	movwf	126
  8344  0E54  0859               	movf	___fttol@f1+2,w
  8345  0E55  00FF               	movwf	127
  8346  0E56  3017               	movlw	23
  8347  0E57                     u4695:	
  8348  0E57  36FF               	lsrf	127,f
  8349  0E58  0CFE               	rrf	126,f
  8350  0E59  0CFD               	rrf	125,f
  8351  0E5A  0B89               	decfsz	9,f
  8352  0E5B  2E57               	goto	u4695
  8353  0E5C  087D               	movf	125,w
  8354  0E5D  00FF               	movwf	127
  8355  0E5E  087F               	movf	127,w
  8356  0E5F  00DB               	movwf	___fttol@sign1
  8357  0E60  17D8               	bsf	___fttol@f1+1,7
  8358  0E61  30FF               	movlw	255
  8359  0E62  05D7               	andwf	___fttol@f1,f
  8360  0E63  30FF               	movlw	255
  8361  0E64  05D8               	andwf	___fttol@f1+1,f
  8362  0E65  3000               	movlw	0
  8363  0E66  05D9               	andwf	___fttol@f1+2,f
  8364  0E67  0857               	movf	___fttol@f1,w
  8365  0E68  00DC               	movwf	___fttol@lval
  8366  0E69  0858               	movf	___fttol@f1+1,w
  8367  0E6A  00DD               	movwf	___fttol@lval+1
  8368  0E6B  0859               	movf	___fttol@f1+2,w
  8369  0E6C  00DE               	movwf	___fttol@lval+2
  8370  0E6D  01DF               	clrf	___fttol@lval+3
  8371  0E6E  308E               	movlw	142
  8372  0E6F  02E0               	subwf	___fttol@exp1,f
  8373  0E70  1FE0               	btfss	___fttol@exp1,7
  8374  0E71  2E8E               	goto	l4214
  8375  0E72  0860               	movf	___fttol@exp1,w
  8376  0E73  3A80               	xorlw	128
  8377  0E74  3E8F               	addlw	143
  8378  0E75  1803               	skipnc
  8379  0E76  2E80               	goto	l4210
  8380  0E77  3000               	movlw	0
  8381  0E78  00DA               	movwf	?___fttol+3
  8382  0E79  3000               	movlw	0
  8383  0E7A  00D9               	movwf	?___fttol+2
  8384  0E7B  3000               	movlw	0
  8385  0E7C  00D8               	movwf	?___fttol+1
  8386  0E7D  3000               	movlw	0
  8387  0E7E  00D7               	movwf	?___fttol
  8388  0E7F  0008               	return
  8389  0E80                     l4210:	
  8390  0E80  3001               	movlw	1
  8391  0E81                     u4725:	
  8392  0E81  36DF               	lsrf	___fttol@lval+3,f
  8393  0E82  0CDE               	rrf	___fttol@lval+2,f
  8394  0E83  0CDD               	rrf	___fttol@lval+1,f
  8395  0E84  0CDC               	rrf	___fttol@lval,f
  8396  0E85  0B89               	decfsz	9,f
  8397  0E86  2E81               	goto	u4725
  8398  0E87  3001               	movlw	1
  8399  0E88  00FF               	movwf	127
  8400  0E89  087F               	movf	127,w
  8401  0E8A  07E0               	addwf	___fttol@exp1,f
  8402  0E8B  1903               	btfsc	3,2
  8403  0E8C  2EA7               	goto	l4222
  8404  0E8D  2E80               	goto	l4210
  8405  0E8E                     l4214:	
  8406  0E8E  3018               	movlw	24
  8407  0E8F  0260               	subwf	___fttol@exp1,w
  8408  0E90  1C03               	skipc
  8409  0E91  2EA4               	goto	l846
  8410  0E92  3000               	movlw	0
  8411  0E93  00DA               	movwf	?___fttol+3
  8412  0E94  3000               	movlw	0
  8413  0E95  00D9               	movwf	?___fttol+2
  8414  0E96  3000               	movlw	0
  8415  0E97  00D8               	movwf	?___fttol+1
  8416  0E98  3000               	movlw	0
  8417  0E99  00D7               	movwf	?___fttol
  8418  0E9A  0008               	return
  8419  0E9B                     l4220:	
  8420  0E9B  3001               	movlw	1
  8421  0E9C                     u4755:	
  8422  0E9C  35DC               	lslf	___fttol@lval,f
  8423  0E9D  0DDD               	rlf	___fttol@lval+1,f
  8424  0E9E  0DDE               	rlf	___fttol@lval+2,f
  8425  0E9F  0DDF               	rlf	___fttol@lval+3,f
  8426  0EA0  0B89               	decfsz	9,f
  8427  0EA1  2E9C               	goto	u4755
  8428  0EA2  3001               	movlw	1
  8429  0EA3  02E0               	subwf	___fttol@exp1,f
  8430  0EA4                     l846:	
  8431  0EA4  0860               	movf	___fttol@exp1,w
  8432  0EA5  1D03               	btfss	3,2
  8433  0EA6  2E9B               	goto	l4220
  8434  0EA7                     l4222:	
  8435  0EA7  085B               	movf	___fttol@sign1,w
  8436  0EA8  1903               	btfsc	3,2
  8437  0EA9  2EB5               	goto	l4226
  8438  0EAA  09DC               	comf	___fttol@lval,f
  8439  0EAB  09DD               	comf	___fttol@lval+1,f
  8440  0EAC  09DE               	comf	___fttol@lval+2,f
  8441  0EAD  09DF               	comf	___fttol@lval+3,f
  8442  0EAE  0ADC               	incf	___fttol@lval,f
  8443  0EAF  1903               	skipnz
  8444  0EB0  0ADD               	incf	___fttol@lval+1,f
  8445  0EB1  1903               	skipnz
  8446  0EB2  0ADE               	incf	___fttol@lval+2,f
  8447  0EB3  1903               	skipnz
  8448  0EB4  0ADF               	incf	___fttol@lval+3,f
  8449  0EB5                     l4226:	
  8450  0EB5  085F               	movf	___fttol@lval+3,w
  8451  0EB6  00DA               	movwf	?___fttol+3
  8452  0EB7  085E               	movf	___fttol@lval+2,w
  8453  0EB8  00D9               	movwf	?___fttol+2
  8454  0EB9  085D               	movf	___fttol@lval+1,w
  8455  0EBA  00D8               	movwf	?___fttol+1
  8456  0EBB  085C               	movf	___fttol@lval,w
  8457  0EBC  00D7               	movwf	?___fttol
  8458  0EBD  0008               	return
  8459  0EBE                     __end_of___fttol:	
  8460                           
  8461                           	psect	text34
  8462  08F6                     __ptext34:	
  8463 ;; *************** function ___ftsub *****************
  8464 ;; Defined at:
  8465 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8466 ;; Parameters:    Size  Location     Type
  8467 ;;  f2              3   21[BANK0 ] float 
  8468 ;;  f1              3   24[BANK0 ] float 
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;		None
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  3   21[BANK0 ] float 
  8473 ;; Registers used:
  8474 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/0
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8480 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8483 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;Total ram usage:        6 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    9
  8487 ;; This function calls:
  8488 ;;		___ftadd
  8489 ;; This function is called by:
  8490 ;;		_ftoa
  8491 ;; This function uses a non-reentrant model
  8492 ;;
  8493                           
  8494                           
  8495                           ;psect for function ___ftsub
  8496  08F6                     ___ftsub:	
  8497                           
  8498                           ;incstack = 0
  8499                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8500  08F6  0020               	movlb	0	; select bank0
  8501  08F7  0837               	movf	___ftsub@f2+2,w
  8502  08F8  0436               	iorwf	___ftsub@f2+1,w
  8503  08F9  0435               	iorwf	___ftsub@f2,w
  8504  08FA  1903               	skipnz
  8505  08FB  28FE               	goto	l4182
  8506  08FC  3080               	movlw	128
  8507  08FD  06B7               	xorwf	___ftsub@f2+2,f
  8508  08FE                     l4182:	
  8509  08FE  0838               	movf	___ftsub@f1,w
  8510  08FF  00AB               	movwf	___ftadd@f1
  8511  0900  0839               	movf	___ftsub@f1+1,w
  8512  0901  00AC               	movwf	___ftadd@f1+1
  8513  0902  083A               	movf	___ftsub@f1+2,w
  8514  0903  00AD               	movwf	___ftadd@f1+2
  8515  0904  0835               	movf	___ftsub@f2,w
  8516  0905  00AE               	movwf	___ftadd@f2
  8517  0906  0836               	movf	___ftsub@f2+1,w
  8518  0907  00AF               	movwf	___ftadd@f2+1
  8519  0908  0837               	movf	___ftsub@f2+2,w
  8520  0909  00B0               	movwf	___ftadd@f2+2
  8521  090A  3183  2332         	fcall	___ftadd
  8522  090C  0020               	movlb	0	; select bank0
  8523  090D  082B               	movf	?___ftadd,w
  8524  090E  00B5               	movwf	?___ftsub
  8525  090F  082C               	movf	?___ftadd+1,w
  8526  0910  00B6               	movwf	?___ftsub+1
  8527  0911  082D               	movf	?___ftadd+2,w
  8528  0912  00B7               	movwf	?___ftsub+2
  8529  0913  0008               	return
  8530  0914                     __end_of___ftsub:	
  8531                           
  8532                           	psect	text35
  8533  0820                     __ptext35:	
  8534 ;; *************** function ___ftneg *****************
  8535 ;; Defined at:
  8536 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;  f1              3   43[BANK0 ] float 
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;		None
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  3   43[BANK0 ] float 
  8543 ;; Registers used:
  8544 ;;		wreg
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8550 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;Total ram usage:        3 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    7
  8557 ;; This function calls:
  8558 ;;		Nothing
  8559 ;; This function is called by:
  8560 ;;		_loop
  8561 ;;		_ftoa
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           
  8566                           ;psect for function ___ftneg
  8567  0820                     ___ftneg:	
  8568                           
  8569                           ;incstack = 0
  8570                           ; Regs used in ___ftneg: [wreg]
  8571  0820  0020               	movlb	0	; select bank0
  8572  0821  084D               	movf	___ftneg@f1+2,w
  8573  0822  044C               	iorwf	___ftneg@f1+1,w
  8574  0823  044B               	iorwf	___ftneg@f1,w
  8575  0824  1903               	skipnz
  8576  0825  0008               	return
  8577  0826  3080               	movlw	128
  8578  0827  06CD               	xorwf	___ftneg@f1+2,f
  8579  0828  0008               	return
  8580  0829                     __end_of___ftneg:	
  8581                           
  8582                           	psect	text36
  8583  05FC                     __ptext36:	
  8584 ;; *************** function ___ftmul *****************
  8585 ;; Defined at:
  8586 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8587 ;; Parameters:    Size  Location     Type
  8588 ;;  f1              3   43[BANK0 ] float 
  8589 ;;  f2              3   46[BANK0 ] float 
  8590 ;; Auto vars:     Size  Location     Type
  8591 ;;  f3_as_produc    3   50[BANK0 ] unsigned um
  8592 ;;  sign            1   54[BANK0 ] unsigned char 
  8593 ;;  cntr            1   53[BANK0 ] unsigned char 
  8594 ;;  exp             1   49[BANK0 ] unsigned char 
  8595 ;; Return value:  Size  Location     Type
  8596 ;;                  3   43[BANK0 ] float 
  8597 ;; Registers used:
  8598 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8604 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8607 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;Total ram usage:       12 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; Hardware stack levels required when called:    8
  8611 ;; This function calls:
  8612 ;;		___ftpack
  8613 ;; This function is called by:
  8614 ;;		_loop
  8615 ;;		_ftoa
  8616 ;; This function uses a non-reentrant model
  8617 ;;
  8618                           
  8619                           
  8620                           ;psect for function ___ftmul
  8621  05FC                     ___ftmul:	
  8622                           
  8623                           ;incstack = 0
  8624                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8625  05FC  0020               	movlb	0	; select bank0
  8626  05FD  084B               	movf	___ftmul@f1,w
  8627  05FE  00FD               	movwf	125
  8628  05FF  084C               	movf	___ftmul@f1+1,w
  8629  0600  00FE               	movwf	126
  8630  0601  084D               	movf	___ftmul@f1+2,w
  8631  0602  00FF               	movwf	127
  8632  0603  1003               	clrc
  8633  0604  0D7E               	rlf	126,w
  8634  0605  0D7F               	rlf	127,w
  8635  0606  00FF               	movwf	127
  8636  0607  087F               	movf	127,w
  8637  0608  00D1               	movwf	___ftmul@exp
  8638  0609  0851               	movf	___ftmul@exp,w
  8639  060A  1D03               	btfss	3,2
  8640  060B  2E13               	goto	l4122
  8641  060C  3000               	movlw	0
  8642  060D  00CB               	movwf	?___ftmul
  8643  060E  3000               	movlw	0
  8644  060F  00CC               	movwf	?___ftmul+1
  8645  0610  3000               	movlw	0
  8646  0611  00CD               	movwf	?___ftmul+2
  8647  0612  0008               	return
  8648  0613                     l4122:	
  8649  0613  084E               	movf	___ftmul@f2,w
  8650  0614  00FD               	movwf	125
  8651  0615  084F               	movf	___ftmul@f2+1,w
  8652  0616  00FE               	movwf	126
  8653  0617  0850               	movf	___ftmul@f2+2,w
  8654  0618  00FF               	movwf	127
  8655  0619  1003               	clrc
  8656  061A  0D7E               	rlf	126,w
  8657  061B  0D7F               	rlf	127,w
  8658  061C  00FF               	movwf	127
  8659  061D  087F               	movf	127,w
  8660  061E  00D6               	movwf	___ftmul@sign
  8661  061F  0856               	movf	___ftmul@sign,w
  8662  0620  1D03               	btfss	3,2
  8663  0621  2E29               	goto	l4128
  8664  0622  3000               	movlw	0
  8665  0623  00CB               	movwf	?___ftmul
  8666  0624  3000               	movlw	0
  8667  0625  00CC               	movwf	?___ftmul+1
  8668  0626  3000               	movlw	0
  8669  0627  00CD               	movwf	?___ftmul+2
  8670  0628  0008               	return
  8671  0629                     l4128:	
  8672  0629  0856               	movf	___ftmul@sign,w
  8673  062A  3E7B               	addlw	123
  8674  062B  00FF               	movwf	127
  8675  062C  087F               	movf	127,w
  8676  062D  07D1               	addwf	___ftmul@exp,f
  8677  062E  084B               	movf	___ftmul@f1,w
  8678  062F  00FD               	movwf	125
  8679  0630  084C               	movf	___ftmul@f1+1,w
  8680  0631  00FE               	movwf	126
  8681  0632  084D               	movf	___ftmul@f1+2,w
  8682  0633  00FF               	movwf	127
  8683  0634  3010               	movlw	16
  8684  0635                     u4565:	
  8685  0635  36FF               	lsrf	127,f
  8686  0636  0CFE               	rrf	126,f
  8687  0637  0CFD               	rrf	125,f
  8688  0638  0B89               	decfsz	9,f
  8689  0639  2E35               	goto	u4565
  8690  063A  087D               	movf	125,w
  8691  063B  00FF               	movwf	127
  8692  063C  087F               	movf	127,w
  8693  063D  00D6               	movwf	___ftmul@sign
  8694  063E  084E               	movf	___ftmul@f2,w
  8695  063F  00FD               	movwf	125
  8696  0640  084F               	movf	___ftmul@f2+1,w
  8697  0641  00FE               	movwf	126
  8698  0642  0850               	movf	___ftmul@f2+2,w
  8699  0643  00FF               	movwf	127
  8700  0644  3010               	movlw	16
  8701  0645                     u4575:	
  8702  0645  36FF               	lsrf	127,f
  8703  0646  0CFE               	rrf	126,f
  8704  0647  0CFD               	rrf	125,f
  8705  0648  0B89               	decfsz	9,f
  8706  0649  2E45               	goto	u4575
  8707  064A  087D               	movf	125,w
  8708  064B  00FF               	movwf	127
  8709  064C  087F               	movf	127,w
  8710  064D  06D6               	xorwf	___ftmul@sign,f
  8711  064E  3080               	movlw	128
  8712  064F  00FF               	movwf	127
  8713  0650  087F               	movf	127,w
  8714  0651  05D6               	andwf	___ftmul@sign,f
  8715  0652  17CC               	bsf	___ftmul@f1+1,7
  8716  0653  17CF               	bsf	___ftmul@f2+1,7
  8717  0654  30FF               	movlw	255
  8718  0655  05CE               	andwf	___ftmul@f2,f
  8719  0656  30FF               	movlw	255
  8720  0657  05CF               	andwf	___ftmul@f2+1,f
  8721  0658  3000               	movlw	0
  8722  0659  05D0               	andwf	___ftmul@f2+2,f
  8723  065A  3000               	movlw	0
  8724  065B  00D2               	movwf	___ftmul@f3_as_product
  8725  065C  3000               	movlw	0
  8726  065D  00D3               	movwf	___ftmul@f3_as_product+1
  8727  065E  3000               	movlw	0
  8728  065F  00D4               	movwf	___ftmul@f3_as_product+2
  8729  0660  3007               	movlw	7
  8730  0661  00FF               	movwf	127
  8731  0662  087F               	movf	127,w
  8732  0663  00D5               	movwf	___ftmul@cntr
  8733  0664                     l4144:	
  8734  0664  1C4B               	btfss	___ftmul@f1,0
  8735  0665  2E6C               	goto	l4148
  8736  0666  084E               	movf	___ftmul@f2,w
  8737  0667  07D2               	addwf	___ftmul@f3_as_product,f
  8738  0668  084F               	movf	___ftmul@f2+1,w
  8739  0669  3DD3               	addwfc	___ftmul@f3_as_product+1,f
  8740  066A  0850               	movf	___ftmul@f2+2,w
  8741  066B  3DD4               	addwfc	___ftmul@f3_as_product+2,f
  8742  066C                     l4148:	
  8743  066C  3001               	movlw	1
  8744  066D                     u4595:	
  8745  066D  36CD               	lsrf	___ftmul@f1+2,f
  8746  066E  0CCC               	rrf	___ftmul@f1+1,f
  8747  066F  0CCB               	rrf	___ftmul@f1,f
  8748  0670  0B89               	decfsz	9,f
  8749  0671  2E6D               	goto	u4595
  8750  0672  3001               	movlw	1
  8751  0673                     u4605:	
  8752  0673  35CE               	lslf	___ftmul@f2,f
  8753  0674  0DCF               	rlf	___ftmul@f2+1,f
  8754  0675  0DD0               	rlf	___ftmul@f2+2,f
  8755  0676  0B89               	decfsz	9,f
  8756  0677  2E73               	goto	u4605
  8757  0678  3001               	movlw	1
  8758  0679  02D5               	subwf	___ftmul@cntr,f
  8759  067A  1D03               	btfss	3,2
  8760  067B  2E64               	goto	l4144
  8761  067C  3009               	movlw	9
  8762  067D  00FF               	movwf	127
  8763  067E  087F               	movf	127,w
  8764  067F  00D5               	movwf	___ftmul@cntr
  8765  0680                     l4156:	
  8766  0680  1C4B               	btfss	___ftmul@f1,0
  8767  0681  2E88               	goto	l4160
  8768  0682  084E               	movf	___ftmul@f2,w
  8769  0683  07D2               	addwf	___ftmul@f3_as_product,f
  8770  0684  084F               	movf	___ftmul@f2+1,w
  8771  0685  3DD3               	addwfc	___ftmul@f3_as_product+1,f
  8772  0686  0850               	movf	___ftmul@f2+2,w
  8773  0687  3DD4               	addwfc	___ftmul@f3_as_product+2,f
  8774  0688                     l4160:	
  8775  0688  3001               	movlw	1
  8776  0689                     u4635:	
  8777  0689  36CD               	lsrf	___ftmul@f1+2,f
  8778  068A  0CCC               	rrf	___ftmul@f1+1,f
  8779  068B  0CCB               	rrf	___ftmul@f1,f
  8780  068C  0B89               	decfsz	9,f
  8781  068D  2E89               	goto	u4635
  8782  068E  3001               	movlw	1
  8783  068F                     u4645:	
  8784  068F  36D4               	lsrf	___ftmul@f3_as_product+2,f
  8785  0690  0CD3               	rrf	___ftmul@f3_as_product+1,f
  8786  0691  0CD2               	rrf	___ftmul@f3_as_product,f
  8787  0692  0B89               	decfsz	9,f
  8788  0693  2E8F               	goto	u4645
  8789  0694  3001               	movlw	1
  8790  0695  02D5               	subwf	___ftmul@cntr,f
  8791  0696  1D03               	btfss	3,2
  8792  0697  2E80               	goto	l4156
  8793  0698  0852               	movf	___ftmul@f3_as_product,w
  8794  0699  00A6               	movwf	___ftpack@arg
  8795  069A  0853               	movf	___ftmul@f3_as_product+1,w
  8796  069B  00A7               	movwf	___ftpack@arg+1
  8797  069C  0854               	movf	___ftmul@f3_as_product+2,w
  8798  069D  00A8               	movwf	___ftpack@arg+2
  8799  069E  0851               	movf	___ftmul@exp,w
  8800  069F  00FF               	movwf	127
  8801  06A0  087F               	movf	127,w
  8802  06A1  00A9               	movwf	___ftpack@exp
  8803  06A2  0856               	movf	___ftmul@sign,w
  8804  06A3  00FF               	movwf	127
  8805  06A4  087F               	movf	127,w
  8806  06A5  00AA               	movwf	___ftpack@sign
  8807  06A6  318D  254D         	fcall	___ftpack
  8808  06A8  0020               	movlb	0	; select bank0
  8809  06A9  0826               	movf	?___ftpack,w
  8810  06AA  00CB               	movwf	?___ftmul
  8811  06AB  0827               	movf	?___ftpack+1,w
  8812  06AC  00CC               	movwf	?___ftmul+1
  8813  06AD  0828               	movf	?___ftpack+2,w
  8814  06AE  00CD               	movwf	?___ftmul+2
  8815  06AF  0008               	return
  8816  06B0                     __end_of___ftmul:	
  8817                           
  8818                           	psect	text37
  8819  0B68                     __ptext37:	
  8820 ;; *************** function ___ftge *****************
  8821 ;; Defined at:
  8822 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;  ff1             3    6[BANK0 ] float 
  8825 ;;  ff2             3    9[BANK0 ] float 
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;		None
  8828 ;; Return value:  Size  Location     Type
  8829 ;;		None               void
  8830 ;; Registers used:
  8831 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8832 ;; Tracked objects:
  8833 ;;		On entry : 0/0
  8834 ;;		On exit  : 0/0
  8835 ;;		Unchanged: 0/0
  8836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8837 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8840 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8841 ;;Total ram usage:        6 bytes
  8842 ;; Hardware stack levels used:    1
  8843 ;; Hardware stack levels required when called:    7
  8844 ;; This function calls:
  8845 ;;		Nothing
  8846 ;; This function is called by:
  8847 ;;		_ftoa
  8848 ;; This function uses a non-reentrant model
  8849 ;;
  8850                           
  8851                           
  8852                           ;psect for function ___ftge
  8853  0B68                     ___ftge:	
  8854                           
  8855                           ;incstack = 0
  8856                           ; Regs used in ___ftge: [wreg+status,2+status,0+btemp+9-btemp+11]
  8857  0B68  0020               	movlb	0	; select bank0
  8858  0B69  1FA8               	btfss	___ftge@ff1+2,7
  8859  0B6A  2B7F               	goto	l4100
  8860  0B6B  0926               	comf	___ftge@ff1,w
  8861  0B6C  00FD               	movwf	125
  8862  0B6D  0927               	comf	___ftge@ff1+1,w
  8863  0B6E  00FE               	movwf	126
  8864  0B6F  0928               	comf	___ftge@ff1+2,w
  8865  0B70  00FF               	movwf	127
  8866  0B71  0AFD               	incf	125,f
  8867  0B72  1903               	skipnz
  8868  0B73  0AFE               	incf	126,f
  8869  0B74  1903               	skipnz
  8870  0B75  0AFF               	incf	127,f
  8871  0B76  3000               	movlw	0
  8872  0B77  077D               	addwf	125,w
  8873  0B78  00A6               	movwf	___ftge@ff1
  8874  0B79  3000               	movlw	0
  8875  0B7A  3D7E               	addwfc	126,w
  8876  0B7B  00A7               	movwf	___ftge@ff1+1
  8877  0B7C  3080               	movlw	128
  8878  0B7D  3D7F               	addwfc	127,w
  8879  0B7E  00A8               	movwf	___ftge@ff1+2
  8880  0B7F                     l4100:	
  8881  0B7F  1FAB               	btfss	___ftge@ff2+2,7
  8882  0B80  2B95               	goto	l4104
  8883  0B81  0929               	comf	___ftge@ff2,w
  8884  0B82  00FD               	movwf	125
  8885  0B83  092A               	comf	___ftge@ff2+1,w
  8886  0B84  00FE               	movwf	126
  8887  0B85  092B               	comf	___ftge@ff2+2,w
  8888  0B86  00FF               	movwf	127
  8889  0B87  0AFD               	incf	125,f
  8890  0B88  1903               	skipnz
  8891  0B89  0AFE               	incf	126,f
  8892  0B8A  1903               	skipnz
  8893  0B8B  0AFF               	incf	127,f
  8894  0B8C  3000               	movlw	0
  8895  0B8D  077D               	addwf	125,w
  8896  0B8E  00A9               	movwf	___ftge@ff2
  8897  0B8F  3000               	movlw	0
  8898  0B90  3D7E               	addwfc	126,w
  8899  0B91  00AA               	movwf	___ftge@ff2+1
  8900  0B92  3080               	movlw	128
  8901  0B93  3D7F               	addwfc	127,w
  8902  0B94  00AB               	movwf	___ftge@ff2+2
  8903  0B95                     l4104:	
  8904  0B95  3080               	movlw	128
  8905  0B96  06A8               	xorwf	___ftge@ff1+2,f
  8906  0B97  3080               	movlw	128
  8907  0B98  06AB               	xorwf	___ftge@ff2+2,f
  8908  0B99  082B               	movf	___ftge@ff2+2,w
  8909  0B9A  0228               	subwf	___ftge@ff1+2,w
  8910  0B9B  1D03               	skipz
  8911  0B9C  0008               	return
  8912  0B9D  082A               	movf	___ftge@ff2+1,w
  8913  0B9E  0227               	subwf	___ftge@ff1+1,w
  8914  0B9F  1D03               	skipz
  8915  0BA0  0008               	return
  8916  0BA1  0829               	movf	___ftge@ff2,w
  8917  0BA2  0226               	subwf	___ftge@ff1,w
  8918  0BA3  0008               	return
  8919  0BA4                     __end_of___ftge:	
  8920                           
  8921                           	psect	text38
  8922  075A                     __ptext38:	
  8923 ;; *************** function _getADCValue *****************
  8924 ;; Defined at:
  8925 ;;		line 31 in file "main.c"
  8926 ;; Parameters:    Size  Location     Type
  8927 ;;  channel         1    wreg     unsigned char 
  8928 ;; Auto vars:     Size  Location     Type
  8929 ;;  channel         1   38[BANK0 ] unsigned char 
  8930 ;;  adcSum          3   40[BANK0 ] float 
  8931 ;;  adcLoop         1   39[BANK0 ] unsigned char 
  8932 ;; Return value:  Size  Location     Type
  8933 ;;                  3   34[BANK0 ] float 
  8934 ;; Registers used:
  8935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8936 ;; Tracked objects:
  8937 ;;		On entry : 0/0
  8938 ;;		On exit  : 0/0
  8939 ;;		Unchanged: 0/0
  8940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8941 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8942 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;Total ram usage:        9 bytes
  8946 ;; Hardware stack levels used:    1
  8947 ;; Hardware stack levels required when called:    9
  8948 ;; This function calls:
  8949 ;;		___awtoft
  8950 ;;		___ftadd
  8951 ;;		___ftdiv
  8952 ;;		_sleepMs
  8953 ;; This function is called by:
  8954 ;;		_loop
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function _getADCValue
  8960  075A                     _getADCValue:	
  8961                           
  8962                           ;incstack = 0
  8963                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack
      +                          ]
  8964                           ;getADCValue@channel stored from wreg
  8965  075A  0020               	movlb	0	; select bank0
  8966  075B  00C6               	movwf	getADCValue@channel
  8967                           
  8968                           ;main.c: 34: float adcSum = 0;
  8969  075C  3000               	movlw	0
  8970  075D  00C8               	movwf	getADCValue@adcSum
  8971  075E  3000               	movlw	0
  8972  075F  00C9               	movwf	getADCValue@adcSum+1
  8973  0760  3000               	movlw	0
  8974  0761  00CA               	movwf	getADCValue@adcSum+2
  8975                           
  8976                           ;main.c: 35: unsigned char adcLoop = 111;
  8977  0762  306F               	movlw	111
  8978  0763  00FF               	movwf	127
  8979  0764  087F               	movf	127,w
  8980  0765  00C7               	movwf	getADCValue@adcLoop
  8981                           
  8982                           ;main.c: 37: ADCON0bits.CHS = channel;
  8983  0766  0846               	movf	getADCValue@channel,w
  8984  0767  00C5               	movwf	??_getADCValue
  8985  0768  0DC5               	rlf	??_getADCValue,f
  8986  0769  0DC5               	rlf	??_getADCValue,f
  8987  076A  0021               	movlb	1	; select bank1
  8988  076B  081D               	movf	29,w	;volatile
  8989  076C  0020               	movlb	0	; select bank0
  8990  076D  0645               	xorwf	??_getADCValue,w
  8991  076E  3903               	andlw	-253
  8992  076F  0645               	xorwf	??_getADCValue,w
  8993  0770  0021               	movlb	1	; select bank1
  8994  0771  009D               	movwf	29	;volatile
  8995                           
  8996                           ;main.c: 38: FVRCONbits.FVREN = 1;
  8997  0772  0022               	movlb	2	; select bank2
  8998  0773  1797               	bsf	23,7	;volatile
  8999                           
  9000                           ;main.c: 39: ADCON0bits.ADON = 1;
  9001  0774  0021               	movlb	1	; select bank1
  9002  0775  141D               	bsf	29,0	;volatile
  9003                           
  9004                           ;main.c: 41: sleepMs(1);
  9005  0776  3001               	movlw	1
  9006  0777  00F0               	movwf	sleepMs@milliseconds
  9007  0778  3000               	movlw	0
  9008  0779  00F1               	movwf	sleepMs@milliseconds+1
  9009  077A  318A  223F  3187   	fcall	_sleepMs
  9010  077D                     l4452:	
  9011                           ;main.c: 43: while (adcLoop--){
  9012                           
  9013  077D  3001               	movlw	1
  9014  077E  0020               	movlb	0	; select bank0
  9015  077F  02C7               	subwf	getADCValue@adcLoop,f
  9016  0780  0A47               	incf	getADCValue@adcLoop,w
  9017  0781  1903               	btfsc	3,2
  9018  0782  2FB6               	goto	l185
  9019                           
  9020                           ;main.c: 45: ADCON0bits.ADGO = 1;
  9021  0783  0021               	movlb	1	; select bank1
  9022  0784  149D               	bsf	29,1	;volatile
  9023  0785                     l4448:	
  9024                           ;main.c: 47: while (ADCON0bits.ADGO){
  9025                           
  9026  0785  0021               	movlb	1	; select bank1
  9027  0786  1C9D               	btfss	29,1	;volatile
  9028  0787  2F90               	goto	l4450
  9029                           
  9030                           ;main.c: 48: sleepMs(1);
  9031  0788  3001               	movlw	1
  9032  0789  00F0               	movwf	sleepMs@milliseconds
  9033  078A  3000               	movlw	0
  9034  078B  00F1               	movwf	sleepMs@milliseconds+1
  9035  078C  318A  223F  3187   	fcall	_sleepMs
  9036  078F  2F85               	goto	l4448
  9037  0790                     l4450:	
  9038                           
  9039                           ;main.c: 49: };main.c: 51: adcSum+= (ADRESL | (ADRESH << 8));
  9040  0790  081C               	movf	28,w	;volatile
  9041  0791  00FE               	movwf	126
  9042  0792  01FF               	clrf	127
  9043  0793  087E               	movf	126,w
  9044  0794  00FF               	movwf	127
  9045  0795  01FE               	clrf	126
  9046  0796  087E               	movf	126,w
  9047  0797  041B               	iorwf	27,w	;volatile
  9048  0798  00F0               	movwf	___awtoft@c
  9049  0799  087F               	movf	127,w
  9050  079A  00F1               	movwf	___awtoft@c+1
  9051  079B  3189  21CA  3187   	fcall	___awtoft
  9052  079E  0870               	movf	?___awtoft,w
  9053  079F  0020               	movlb	0	; select bank0
  9054  07A0  00AB               	movwf	___ftadd@f1
  9055  07A1  0871               	movf	?___awtoft+1,w
  9056  07A2  00AC               	movwf	___ftadd@f1+1
  9057  07A3  0872               	movf	?___awtoft+2,w
  9058  07A4  00AD               	movwf	___ftadd@f1+2
  9059  07A5  0848               	movf	getADCValue@adcSum,w
  9060  07A6  00AE               	movwf	___ftadd@f2
  9061  07A7  0849               	movf	getADCValue@adcSum+1,w
  9062  07A8  00AF               	movwf	___ftadd@f2+1
  9063  07A9  084A               	movf	getADCValue@adcSum+2,w
  9064  07AA  00B0               	movwf	___ftadd@f2+2
  9065  07AB  3183  2332  3187   	fcall	___ftadd
  9066  07AE  0020               	movlb	0	; select bank0
  9067  07AF  082B               	movf	?___ftadd,w
  9068  07B0  00C8               	movwf	getADCValue@adcSum
  9069  07B1  082C               	movf	?___ftadd+1,w
  9070  07B2  00C9               	movwf	getADCValue@adcSum+1
  9071  07B3  082D               	movf	?___ftadd+2,w
  9072  07B4  00CA               	movwf	getADCValue@adcSum+2
  9073  07B5  2F7D               	goto	l4452
  9074  07B6                     l185:	
  9075                           
  9076                           ;main.c: 53: };main.c: 55: FVRCONbits.FVREN = 0;
  9077  07B6  0022               	movlb	2	; select bank2
  9078  07B7  1397               	bcf	23,7	;volatile
  9079                           
  9080                           ;main.c: 56: ADCON0bits.ADON = 0;
  9081  07B8  0021               	movlb	1	; select bank1
  9082  07B9  101D               	bcf	29,0	;volatile
  9083                           
  9084                           ;main.c: 59: adcSum/= 111;
  9085  07BA  3000               	movlw	0
  9086  07BB  0020               	movlb	0	; select bank0
  9087  07BC  00B5               	movwf	___ftdiv@f2
  9088  07BD  30DE               	movlw	222
  9089  07BE  00B6               	movwf	___ftdiv@f2+1
  9090  07BF  3042               	movlw	66
  9091  07C0  00B7               	movwf	___ftdiv@f2+2
  9092  07C1  0848               	movf	getADCValue@adcSum,w
  9093  07C2  00B8               	movwf	___ftdiv@f1
  9094  07C3  0849               	movf	getADCValue@adcSum+1,w
  9095  07C4  00B9               	movwf	___ftdiv@f1+1
  9096  07C5  084A               	movf	getADCValue@adcSum+2,w
  9097  07C6  00BA               	movwf	___ftdiv@f1+2
  9098  07C7  318F  2757  3187   	fcall	___ftdiv
  9099  07CA  0020               	movlb	0	; select bank0
  9100  07CB  0835               	movf	?___ftdiv,w
  9101  07CC  00C8               	movwf	getADCValue@adcSum
  9102  07CD  0836               	movf	?___ftdiv+1,w
  9103  07CE  00C9               	movwf	getADCValue@adcSum+1
  9104  07CF  0837               	movf	?___ftdiv+2,w
  9105  07D0  00CA               	movwf	getADCValue@adcSum+2
  9106                           
  9107                           ;main.c: 62: if (ADCON1bits.ADPREF == 0b11){
  9108  07D1  0021               	movlb	1	; select bank1
  9109  07D2  081E               	movf	30,w	;volatile
  9110  07D3  3903               	andlw	3
  9111  07D4  3A03               	xorlw	3
  9112  07D5  1903               	btfsc	3,2
  9113  07D6  2FF0               	goto	l4464
  9114  07D7  2FF7               	goto	l4466
  9115  07D8                     l4460:	
  9116                           ;main.c: 64: case 0b10:
  9117                           
  9118                           ;main.c: 63: switch (FVRCONbits.ADFVR){
  9119                           
  9120                           
  9121                           ;main.c: 65: adcSum/= 500;
  9122  07D8  3000               	movlw	0
  9123  07D9  0020               	movlb	0	; select bank0
  9124  07DA  00B5               	movwf	___ftdiv@f2
  9125  07DB  30FA               	movlw	250
  9126  07DC  00B6               	movwf	___ftdiv@f2+1
  9127  07DD  3043               	movlw	67
  9128  07DE  00B7               	movwf	___ftdiv@f2+2
  9129  07DF  0848               	movf	getADCValue@adcSum,w
  9130  07E0  00B8               	movwf	___ftdiv@f1
  9131  07E1  0849               	movf	getADCValue@adcSum+1,w
  9132  07E2  00B9               	movwf	___ftdiv@f1+1
  9133  07E3  084A               	movf	getADCValue@adcSum+2,w
  9134  07E4  00BA               	movwf	___ftdiv@f1+2
  9135  07E5  318F  2757  3187   	fcall	___ftdiv
  9136  07E8  0020               	movlb	0	; select bank0
  9137  07E9  0835               	movf	?___ftdiv,w
  9138  07EA  00C8               	movwf	getADCValue@adcSum
  9139  07EB  0836               	movf	?___ftdiv+1,w
  9140  07EC  00C9               	movwf	getADCValue@adcSum+1
  9141  07ED  0837               	movf	?___ftdiv+2,w
  9142  07EE  00CA               	movwf	getADCValue@adcSum+2
  9143                           
  9144                           ;main.c: 67: }
  9145                           
  9146                           ;main.c: 66: break;
  9147  07EF  2FF7               	goto	l4466
  9148  07F0                     l4464:	
  9149  07F0  0022               	movlb	2	; select bank2
  9150  07F1  0817               	movf	23,w	;volatile
  9151  07F2  3903               	andlw	3
  9152                           
  9153                           ; Switch size 1, requested type "space"
  9154                           ; Number of cases is 1, Range of values is 2 to 2
  9155                           ; switch strategies available:
  9156                           ; Name         Instructions Cycles
  9157                           ; simple_byte            4     3 (average)
  9158                           ; direct_byte           11     9 (fixed)
  9159                           ; jumptable            263     9 (fixed)
  9160                           ;	Chosen strategy is simple_byte
  9161  07F3  3A02               	xorlw	2	; case 2
  9162  07F4  1903               	skipnz
  9163  07F5  2FD8               	goto	l4460
  9164  07F6  2FF7               	goto	l4466
  9165  07F7                     l4466:	
  9166                           
  9167                           ;main.c: 68: };main.c: 71: return adcSum;
  9168  07F7  0020               	movlb	0	; select bank0
  9169  07F8  0848               	movf	getADCValue@adcSum,w
  9170  07F9  00C2               	movwf	?_getADCValue
  9171  07FA  0849               	movf	getADCValue@adcSum+1,w
  9172  07FB  00C3               	movwf	?_getADCValue+1
  9173  07FC  084A               	movf	getADCValue@adcSum+2,w
  9174  07FD  00C4               	movwf	?_getADCValue+2
  9175  07FE  0008               	return
  9176  07FF                     __end_of_getADCValue:	
  9177                           
  9178                           	psect	text39
  9179  0A3F                     __ptext39:	
  9180 ;; *************** function _sleepMs *****************
  9181 ;; Defined at:
  9182 ;;		line 37 in file "interface.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;  milliseconds    2    0[COMMON] unsigned int 
  9185 ;; Auto vars:     Size  Location     Type
  9186 ;;  wdtps           1    3[COMMON] unsigned char 
  9187 ;; Return value:  Size  Location     Type
  9188 ;;                  1    wreg      void 
  9189 ;; Registers used:
  9190 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/0
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9196 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;Total ram usage:        4 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; Hardware stack levels required when called:    8
  9203 ;; This function calls:
  9204 ;;		_resetWDT
  9205 ;; This function is called by:
  9206 ;;		_getADCValue
  9207 ;;		_sendMessage
  9208 ;;		_nrf24l01SendPacket
  9209 ;;		_sleepListren
  9210 ;;		_hcsr04GetAerage
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           
  9215                           ;psect for function _sleepMs
  9216  0A3F                     _sleepMs:	
  9217                           
  9218                           ;interface.c: 39: unsigned char wdtps;;interface.c: 40: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  9219                           
  9220                           ;incstack = 0
  9221                           ; Regs used in _sleepMs: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  9222  0A3F  01F3               	clrf	sleepMs@wdtps
  9223  0A40  3013               	movlw	19
  9224  0A41  0273               	subwf	sleepMs@wdtps,w
  9225  0A42  1803               	btfsc	3,0
  9226  0A43  2A68               	goto	l3924
  9227  0A44                     l3908:	
  9228                           
  9229                           ;interface.c: 41: if ((milliseconds >> wdtps) & 0b1){
  9230  0A44  0871               	movf	sleepMs@milliseconds+1,w
  9231  0A45  00FF               	movwf	127
  9232  0A46  0870               	movf	sleepMs@milliseconds,w
  9233  0A47  00FE               	movwf	126
  9234  0A48  0A73               	incf	sleepMs@wdtps,w
  9235  0A49  2A4C               	goto	u4184
  9236  0A4A                     u4185:	
  9237  0A4A  36FF               	lsrf	127,f
  9238  0A4B  0CFE               	rrf	126,f
  9239  0A4C                     u4184:	
  9240  0A4C  0B89               	decfsz	9,f
  9241  0A4D  2A4A               	goto	u4185
  9242  0A4E  1C7E               	btfss	126,0
  9243  0A4F  2A60               	goto	l3920
  9244  0A50                     l3910:	
  9245                           ;interface.c: 42: START_SLEEP:
  9246                           
  9247                           
  9248                           ;interface.c: 43: WDTCONbits.WDTPS = wdtps;
  9249  0A50  0873               	movf	sleepMs@wdtps,w
  9250  0A51  00F2               	movwf	??_sleepMs
  9251  0A52  0DF2               	rlf	??_sleepMs,f
  9252  0A53  0021               	movlb	1	; select bank1
  9253  0A54  0817               	movf	23,w	;volatile
  9254  0A55  0672               	xorwf	??_sleepMs,w
  9255  0A56  39C1               	andlw	-63
  9256  0A57  0672               	xorwf	??_sleepMs,w
  9257  0A58  0097               	movwf	23	;volatile
  9258  0A59  0063               	sleep	;# 
  9259                           
  9260                           ;interface.c: 45: __nop();
  9261  0A5A  0000               	nop
  9262                           
  9263                           ;interface.c: 46: __nop();
  9264  0A5B  0000               	nop
  9265                           
  9266                           ;interface.c: 48: if( STATUSbits.nTO || STATUSbits.nPD){
  9267  0A5C  0020               	movlb	0	; select bank0
  9268  0A5D  1E03               	btfss	3,4	;volatile
  9269  0A5E  1983               	btfsc	3,3	;volatile
  9270                           
  9271                           ;interface.c: 49: goto START_SLEEP;
  9272  0A5F  2A50               	goto	l3910
  9273  0A60                     l3920:	
  9274  0A60  3001               	movlw	1
  9275  0A61  00FF               	movwf	127
  9276  0A62  087F               	movf	127,w
  9277  0A63  07F3               	addwf	sleepMs@wdtps,f
  9278  0A64  3013               	movlw	19
  9279  0A65  0273               	subwf	sleepMs@wdtps,w
  9280  0A66  1C03               	skipc
  9281  0A67  2A44               	goto	l3908
  9282  0A68                     l3924:	
  9283                           
  9284                           ;interface.c: 50: };interface.c: 51: };interface.c: 52: };interface.c: 54: resetWDT();
  9285  0A68  3188  2019         	fcall	_resetWDT
  9286  0A6A  0008               	return
  9287  0A6B                     __end_of_sleepMs:	
  9288                           
  9289                           	psect	text40
  9290  0819                     __ptext40:	
  9291 ;; *************** function _resetWDT *****************
  9292 ;; Defined at:
  9293 ;;		line 32 in file "interface.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;		None
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;		None
  9298 ;; Return value:  Size  Location     Type
  9299 ;;                  1    wreg      void 
  9300 ;; Registers used:
  9301 ;;		wreg, status,2, status,0
  9302 ;; Tracked objects:
  9303 ;;		On entry : 0/0
  9304 ;;		On exit  : 0/0
  9305 ;;		Unchanged: 0/0
  9306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;Total ram usage:        0 bytes
  9312 ;; Hardware stack levels used:    1
  9313 ;; Hardware stack levels required when called:    7
  9314 ;; This function calls:
  9315 ;;		Nothing
  9316 ;; This function is called by:
  9317 ;;		_sleepMs
  9318 ;; This function uses a non-reentrant model
  9319 ;;
  9320                           
  9321                           
  9322                           ;psect for function _resetWDT
  9323  0819                     _resetWDT:	
  9324                           
  9325                           ;interface.c: 33: WDTCONbits.WDTPS = 0b01100;
  9326                           
  9327                           ;incstack = 0
  9328                           ; Regs used in _resetWDT: [wreg+status,2+status,0]
  9329  0819  0021               	movlb	1	; select bank1
  9330  081A  0817               	movf	23,w	;volatile
  9331  081B  39C1               	andlw	-63
  9332  081C  3818               	iorlw	24
  9333  081D  0097               	movwf	23	;volatile
  9334  081E  0064               	clrwdt	;# 
  9335  081F  0008               	return
  9336  0820                     __end_of_resetWDT:	
  9337                           
  9338                           	psect	text41
  9339  0F57                     __ptext41:	
  9340 ;; *************** function ___ftdiv *****************
  9341 ;; Defined at:
  9342 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  9343 ;; Parameters:    Size  Location     Type
  9344 ;;  f2              3   21[BANK0 ] float 
  9345 ;;  f1              3   24[BANK0 ] float 
  9346 ;; Auto vars:     Size  Location     Type
  9347 ;;  f3              3   29[BANK0 ] float 
  9348 ;;  sign            1   33[BANK0 ] unsigned char 
  9349 ;;  exp             1   32[BANK0 ] unsigned char 
  9350 ;;  cntr            1   28[BANK0 ] unsigned char 
  9351 ;; Return value:  Size  Location     Type
  9352 ;;                  3   21[BANK0 ] float 
  9353 ;; Registers used:
  9354 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9355 ;; Tracked objects:
  9356 ;;		On entry : 0/0
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9360 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9362 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9363 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9364 ;;Total ram usage:       13 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; Hardware stack levels required when called:    8
  9367 ;; This function calls:
  9368 ;;		___ftpack
  9369 ;; This function is called by:
  9370 ;;		_getADCValue
  9371 ;;		_loop
  9372 ;;		_hcsr04GetAerage
  9373 ;; This function uses a non-reentrant model
  9374 ;;
  9375                           
  9376                           
  9377                           ;psect for function ___ftdiv
  9378  0F57                     ___ftdiv:	
  9379                           
  9380                           ;incstack = 0
  9381                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9382  0F57  0020               	movlb	0	; select bank0
  9383  0F58  0838               	movf	___ftdiv@f1,w
  9384  0F59  00FD               	movwf	125
  9385  0F5A  0839               	movf	___ftdiv@f1+1,w
  9386  0F5B  00FE               	movwf	126
  9387  0F5C  083A               	movf	___ftdiv@f1+2,w
  9388  0F5D  00FF               	movwf	127
  9389  0F5E  1003               	clrc
  9390  0F5F  0D7E               	rlf	126,w
  9391  0F60  0D7F               	rlf	127,w
  9392  0F61  00FF               	movwf	127
  9393  0F62  087F               	movf	127,w
  9394  0F63  00C0               	movwf	___ftdiv@exp
  9395  0F64  0840               	movf	___ftdiv@exp,w
  9396  0F65  1D03               	btfss	3,2
  9397  0F66  2F6E               	goto	l4384
  9398  0F67  3000               	movlw	0
  9399  0F68  00B5               	movwf	?___ftdiv
  9400  0F69  3000               	movlw	0
  9401  0F6A  00B6               	movwf	?___ftdiv+1
  9402  0F6B  3000               	movlw	0
  9403  0F6C  00B7               	movwf	?___ftdiv+2
  9404  0F6D  0008               	return
  9405  0F6E                     l4384:	
  9406  0F6E  0835               	movf	___ftdiv@f2,w
  9407  0F6F  00FD               	movwf	125
  9408  0F70  0836               	movf	___ftdiv@f2+1,w
  9409  0F71  00FE               	movwf	126
  9410  0F72  0837               	movf	___ftdiv@f2+2,w
  9411  0F73  00FF               	movwf	127
  9412  0F74  1003               	clrc
  9413  0F75  0D7E               	rlf	126,w
  9414  0F76  0D7F               	rlf	127,w
  9415  0F77  00FF               	movwf	127
  9416  0F78  087F               	movf	127,w
  9417  0F79  00C1               	movwf	___ftdiv@sign
  9418  0F7A  0841               	movf	___ftdiv@sign,w
  9419  0F7B  1D03               	btfss	3,2
  9420  0F7C  2F84               	goto	l4390
  9421  0F7D  3000               	movlw	0
  9422  0F7E  00B5               	movwf	?___ftdiv
  9423  0F7F  3000               	movlw	0
  9424  0F80  00B6               	movwf	?___ftdiv+1
  9425  0F81  3000               	movlw	0
  9426  0F82  00B7               	movwf	?___ftdiv+2
  9427  0F83  0008               	return
  9428  0F84                     l4390:	
  9429  0F84  3000               	movlw	0
  9430  0F85  00BD               	movwf	___ftdiv@f3
  9431  0F86  3000               	movlw	0
  9432  0F87  00BE               	movwf	___ftdiv@f3+1
  9433  0F88  3000               	movlw	0
  9434  0F89  00BF               	movwf	___ftdiv@f3+2
  9435  0F8A  3089               	movlw	137
  9436  0F8B  0741               	addwf	___ftdiv@sign,w
  9437  0F8C  00BB               	movwf	??___ftdiv
  9438  0F8D  083B               	movf	??___ftdiv,w
  9439  0F8E  02C0               	subwf	___ftdiv@exp,f
  9440  0F8F  0838               	movf	___ftdiv@f1,w
  9441  0F90  00FD               	movwf	125
  9442  0F91  0839               	movf	___ftdiv@f1+1,w
  9443  0F92  00FE               	movwf	126
  9444  0F93  083A               	movf	___ftdiv@f1+2,w
  9445  0F94  00FF               	movwf	127
  9446  0F95  3010               	movlw	16
  9447  0F96                     u4945:	
  9448  0F96  36FF               	lsrf	127,f
  9449  0F97  0CFE               	rrf	126,f
  9450  0F98  0CFD               	rrf	125,f
  9451  0F99  0B89               	decfsz	9,f
  9452  0F9A  2F96               	goto	u4945
  9453  0F9B  087D               	movf	125,w
  9454  0F9C  00FF               	movwf	127
  9455  0F9D  087F               	movf	127,w
  9456  0F9E  00C1               	movwf	___ftdiv@sign
  9457  0F9F  0835               	movf	___ftdiv@f2,w
  9458  0FA0  00FD               	movwf	125
  9459  0FA1  0836               	movf	___ftdiv@f2+1,w
  9460  0FA2  00FE               	movwf	126
  9461  0FA3  0837               	movf	___ftdiv@f2+2,w
  9462  0FA4  00FF               	movwf	127
  9463  0FA5  3010               	movlw	16
  9464  0FA6                     u4955:	
  9465  0FA6  36FF               	lsrf	127,f
  9466  0FA7  0CFE               	rrf	126,f
  9467  0FA8  0CFD               	rrf	125,f
  9468  0FA9  0B89               	decfsz	9,f
  9469  0FAA  2FA6               	goto	u4955
  9470  0FAB  087D               	movf	125,w
  9471  0FAC  00FF               	movwf	127
  9472  0FAD  087F               	movf	127,w
  9473  0FAE  06C1               	xorwf	___ftdiv@sign,f
  9474  0FAF  3080               	movlw	128
  9475  0FB0  00FF               	movwf	127
  9476  0FB1  087F               	movf	127,w
  9477  0FB2  05C1               	andwf	___ftdiv@sign,f
  9478  0FB3  17B9               	bsf	___ftdiv@f1+1,7
  9479  0FB4  30FF               	movlw	255
  9480  0FB5  05B8               	andwf	___ftdiv@f1,f
  9481  0FB6  30FF               	movlw	255
  9482  0FB7  05B9               	andwf	___ftdiv@f1+1,f
  9483  0FB8  3000               	movlw	0
  9484  0FB9  05BA               	andwf	___ftdiv@f1+2,f
  9485  0FBA  17B6               	bsf	___ftdiv@f2+1,7
  9486  0FBB  30FF               	movlw	255
  9487  0FBC  05B5               	andwf	___ftdiv@f2,f
  9488  0FBD  30FF               	movlw	255
  9489  0FBE  05B6               	andwf	___ftdiv@f2+1,f
  9490  0FBF  3000               	movlw	0
  9491  0FC0  05B7               	andwf	___ftdiv@f2+2,f
  9492  0FC1  3018               	movlw	24
  9493  0FC2  00FF               	movwf	127
  9494  0FC3  087F               	movf	127,w
  9495  0FC4  00BC               	movwf	___ftdiv@cntr
  9496  0FC5                     l4408:	
  9497  0FC5  3001               	movlw	1
  9498  0FC6                     u4965:	
  9499  0FC6  35BD               	lslf	___ftdiv@f3,f
  9500  0FC7  0DBE               	rlf	___ftdiv@f3+1,f
  9501  0FC8  0DBF               	rlf	___ftdiv@f3+2,f
  9502  0FC9  0B89               	decfsz	9,f
  9503  0FCA  2FC6               	goto	u4965
  9504  0FCB  0837               	movf	___ftdiv@f2+2,w
  9505  0FCC  023A               	subwf	___ftdiv@f1+2,w
  9506  0FCD  1D03               	skipz
  9507  0FCE  2FD5               	goto	u4975
  9508  0FCF  0836               	movf	___ftdiv@f2+1,w
  9509  0FD0  0239               	subwf	___ftdiv@f1+1,w
  9510  0FD1  1D03               	skipz
  9511  0FD2  2FD5               	goto	u4975
  9512  0FD3  0835               	movf	___ftdiv@f2,w
  9513  0FD4  0238               	subwf	___ftdiv@f1,w
  9514  0FD5                     u4975:	
  9515  0FD5  1C03               	skipc
  9516  0FD6  2FDE               	goto	l4416
  9517  0FD7  0835               	movf	___ftdiv@f2,w
  9518  0FD8  02B8               	subwf	___ftdiv@f1,f
  9519  0FD9  0836               	movf	___ftdiv@f2+1,w
  9520  0FDA  3BB9               	subwfb	___ftdiv@f1+1,f
  9521  0FDB  0837               	movf	___ftdiv@f2+2,w
  9522  0FDC  3BBA               	subwfb	___ftdiv@f1+2,f
  9523  0FDD  143D               	bsf	___ftdiv@f3,0
  9524  0FDE                     l4416:	
  9525  0FDE  3001               	movlw	1
  9526  0FDF                     u4985:	
  9527  0FDF  35B8               	lslf	___ftdiv@f1,f
  9528  0FE0  0DB9               	rlf	___ftdiv@f1+1,f
  9529  0FE1  0DBA               	rlf	___ftdiv@f1+2,f
  9530  0FE2  0B89               	decfsz	9,f
  9531  0FE3  2FDF               	goto	u4985
  9532  0FE4  3001               	movlw	1
  9533  0FE5  02BC               	subwf	___ftdiv@cntr,f
  9534  0FE6  1D03               	btfss	3,2
  9535  0FE7  2FC5               	goto	l4408
  9536  0FE8  083D               	movf	___ftdiv@f3,w
  9537  0FE9  00A6               	movwf	___ftpack@arg
  9538  0FEA  083E               	movf	___ftdiv@f3+1,w
  9539  0FEB  00A7               	movwf	___ftpack@arg+1
  9540  0FEC  083F               	movf	___ftdiv@f3+2,w
  9541  0FED  00A8               	movwf	___ftpack@arg+2
  9542  0FEE  0840               	movf	___ftdiv@exp,w
  9543  0FEF  00FF               	movwf	127
  9544  0FF0  087F               	movf	127,w
  9545  0FF1  00A9               	movwf	___ftpack@exp
  9546  0FF2  0841               	movf	___ftdiv@sign,w
  9547  0FF3  00FF               	movwf	127
  9548  0FF4  087F               	movf	127,w
  9549  0FF5  00AA               	movwf	___ftpack@sign
  9550  0FF6  318D  254D         	fcall	___ftpack
  9551  0FF8  0020               	movlb	0	; select bank0
  9552  0FF9  0826               	movf	?___ftpack,w
  9553  0FFA  00B5               	movwf	?___ftdiv
  9554  0FFB  0827               	movf	?___ftpack+1,w
  9555  0FFC  00B6               	movwf	?___ftdiv+1
  9556  0FFD  0828               	movf	?___ftpack+2,w
  9557  0FFE  00B7               	movwf	?___ftdiv+2
  9558  0FFF  0008               	return
  9559  1000                     __end_of___ftdiv:	
  9560                           
  9561                           	psect	text42
  9562  0332                     __ptext42:	
  9563 ;; *************** function ___ftadd *****************
  9564 ;; Defined at:
  9565 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;  f1              3   11[BANK0 ] float 
  9568 ;;  f2              3   14[BANK0 ] float 
  9569 ;; Auto vars:     Size  Location     Type
  9570 ;;  exp1            1   20[BANK0 ] unsigned char 
  9571 ;;  exp2            1   19[BANK0 ] unsigned char 
  9572 ;;  sign            1   18[BANK0 ] unsigned char 
  9573 ;; Return value:  Size  Location     Type
  9574 ;;                  3   11[BANK0 ] float 
  9575 ;; Registers used:
  9576 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9577 ;; Tracked objects:
  9578 ;;		On entry : 0/0
  9579 ;;		On exit  : 0/0
  9580 ;;		Unchanged: 0/0
  9581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9582 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;Total ram usage:       10 bytes
  9587 ;; Hardware stack levels used:    1
  9588 ;; Hardware stack levels required when called:    8
  9589 ;; This function calls:
  9590 ;;		___ftpack
  9591 ;; This function is called by:
  9592 ;;		_getADCValue
  9593 ;;		_loop
  9594 ;;		___ftsub
  9595 ;;		_hcsr04GetAerage
  9596 ;; This function uses a non-reentrant model
  9597 ;;
  9598                           
  9599                           
  9600                           ;psect for function ___ftadd
  9601  0332                     ___ftadd:	
  9602                           
  9603                           ;incstack = 0
  9604                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9605  0332  0020               	movlb	0	; select bank0
  9606  0333  082B               	movf	___ftadd@f1,w
  9607  0334  00FD               	movwf	125
  9608  0335  082C               	movf	___ftadd@f1+1,w
  9609  0336  00FE               	movwf	126
  9610  0337  082D               	movf	___ftadd@f1+2,w
  9611  0338  00FF               	movwf	127
  9612  0339  1003               	clrc
  9613  033A  0D7E               	rlf	126,w
  9614  033B  0D7F               	rlf	127,w
  9615  033C  00FF               	movwf	127
  9616  033D  087F               	movf	127,w
  9617  033E  00B4               	movwf	___ftadd@exp1
  9618  033F  082E               	movf	___ftadd@f2,w
  9619  0340  00FD               	movwf	125
  9620  0341  082F               	movf	___ftadd@f2+1,w
  9621  0342  00FE               	movwf	126
  9622  0343  0830               	movf	___ftadd@f2+2,w
  9623  0344  00FF               	movwf	127
  9624  0345  1003               	clrc
  9625  0346  0D7E               	rlf	126,w
  9626  0347  0D7F               	rlf	127,w
  9627  0348  00FF               	movwf	127
  9628  0349  087F               	movf	127,w
  9629  034A  00B3               	movwf	___ftadd@exp2
  9630  034B  0834               	movf	___ftadd@exp1,w
  9631  034C  1903               	btfsc	3,2
  9632  034D  2B5A               	goto	l3812
  9633  034E  0833               	movf	___ftadd@exp2,w
  9634  034F  0234               	subwf	___ftadd@exp1,w
  9635  0350  1803               	skipnc
  9636  0351  2B61               	goto	l3816
  9637  0352  0334               	decf	___ftadd@exp1,w
  9638  0353  3AFF               	xorlw	255
  9639  0354  0733               	addwf	___ftadd@exp2,w
  9640  0355  00B1               	movwf	??___ftadd
  9641  0356  3019               	movlw	25
  9642  0357  0231               	subwf	??___ftadd,w
  9643  0358  1C03               	skipc
  9644  0359  2B61               	goto	l3816
  9645  035A                     l3812:	
  9646  035A  082E               	movf	___ftadd@f2,w
  9647  035B  00AB               	movwf	?___ftadd
  9648  035C  082F               	movf	___ftadd@f2+1,w
  9649  035D  00AC               	movwf	?___ftadd+1
  9650  035E  0830               	movf	___ftadd@f2+2,w
  9651  035F  00AD               	movwf	?___ftadd+2
  9652  0360  0008               	return
  9653  0361                     l3816:	
  9654  0361  0833               	movf	___ftadd@exp2,w
  9655  0362  1903               	btfsc	3,2
  9656  0363  0008               	return
  9657  0364  0834               	movf	___ftadd@exp1,w
  9658  0365  0233               	subwf	___ftadd@exp2,w
  9659  0366  1803               	skipnc
  9660  0367  2B70               	goto	l3822
  9661  0368  0333               	decf	___ftadd@exp2,w
  9662  0369  3AFF               	xorlw	255
  9663  036A  0734               	addwf	___ftadd@exp1,w
  9664  036B  00B1               	movwf	??___ftadd
  9665  036C  3019               	movlw	25
  9666  036D  0231               	subwf	??___ftadd,w
  9667  036E  1803               	btfsc	3,0
  9668  036F  0008               	return
  9669  0370                     l3822:	
  9670  0370  3006               	movlw	6
  9671  0371  00FF               	movwf	127
  9672  0372  087F               	movf	127,w
  9673  0373  00B2               	movwf	___ftadd@sign
  9674  0374  1BAD               	btfsc	___ftadd@f1+2,7
  9675  0375  17B2               	bsf	___ftadd@sign,7
  9676  0376  1BB0               	btfsc	___ftadd@f2+2,7
  9677  0377  1732               	bsf	___ftadd@sign,6
  9678  0378  17AC               	bsf	___ftadd@f1+1,7
  9679  0379  30FF               	movlw	255
  9680  037A  05AB               	andwf	___ftadd@f1,f
  9681  037B  30FF               	movlw	255
  9682  037C  05AC               	andwf	___ftadd@f1+1,f
  9683  037D  3000               	movlw	0
  9684  037E  05AD               	andwf	___ftadd@f1+2,f
  9685  037F  17AF               	bsf	___ftadd@f2+1,7
  9686  0380  30FF               	movlw	255
  9687  0381  05AE               	andwf	___ftadd@f2,f
  9688  0382  30FF               	movlw	255
  9689  0383  05AF               	andwf	___ftadd@f2+1,f
  9690  0384  3000               	movlw	0
  9691  0385  05B0               	andwf	___ftadd@f2+2,f
  9692  0386  0833               	movf	___ftadd@exp2,w
  9693  0387  0234               	subwf	___ftadd@exp1,w
  9694  0388  1803               	skipnc
  9695  0389  2BAC               	goto	l3846
  9696  038A                     l3834:	
  9697  038A  3001               	movlw	1
  9698  038B                     u3975:	
  9699  038B  35AE               	lslf	___ftadd@f2,f
  9700  038C  0DAF               	rlf	___ftadd@f2+1,f
  9701  038D  0DB0               	rlf	___ftadd@f2+2,f
  9702  038E  0B89               	decfsz	9,f
  9703  038F  2B8B               	goto	u3975
  9704  0390  3001               	movlw	1
  9705  0391  02B3               	subwf	___ftadd@exp2,f
  9706  0392  0833               	movf	___ftadd@exp2,w
  9707  0393  0634               	xorwf	___ftadd@exp1,w
  9708  0394  1903               	skipnz
  9709  0395  2BA7               	goto	l3844
  9710  0396  3001               	movlw	1
  9711  0397  02B2               	subwf	___ftadd@sign,f
  9712  0398  0832               	movf	___ftadd@sign,w
  9713  0399  3907               	andlw	7
  9714  039A  1903               	btfsc	3,2
  9715  039B  2BA7               	goto	l3844
  9716  039C  2B8A               	goto	l3834
  9717  039D                     l3840:	
  9718  039D  3001               	movlw	1
  9719  039E                     u4005:	
  9720  039E  36AD               	lsrf	___ftadd@f1+2,f
  9721  039F  0CAC               	rrf	___ftadd@f1+1,f
  9722  03A0  0CAB               	rrf	___ftadd@f1,f
  9723  03A1  0B89               	decfsz	9,f
  9724  03A2  2B9E               	goto	u4005
  9725  03A3  3001               	movlw	1
  9726  03A4  00FF               	movwf	127
  9727  03A5  087F               	movf	127,w
  9728  03A6  07B4               	addwf	___ftadd@exp1,f
  9729  03A7                     l3844:	
  9730  03A7  0834               	movf	___ftadd@exp1,w
  9731  03A8  0633               	xorwf	___ftadd@exp2,w
  9732  03A9  1903               	btfsc	3,2
  9733  03AA  2BD1               	goto	l786
  9734  03AB  2B9D               	goto	l3840
  9735  03AC                     l3846:	
  9736  03AC  0834               	movf	___ftadd@exp1,w
  9737  03AD  0233               	subwf	___ftadd@exp2,w
  9738  03AE  1803               	skipnc
  9739  03AF  2BD1               	goto	l786
  9740  03B0                     l3848:	
  9741  03B0  3001               	movlw	1
  9742  03B1                     u4035:	
  9743  03B1  35AB               	lslf	___ftadd@f1,f
  9744  03B2  0DAC               	rlf	___ftadd@f1+1,f
  9745  03B3  0DAD               	rlf	___ftadd@f1+2,f
  9746  03B4  0B89               	decfsz	9,f
  9747  03B5  2BB1               	goto	u4035
  9748  03B6  3001               	movlw	1
  9749  03B7  02B4               	subwf	___ftadd@exp1,f
  9750  03B8  0833               	movf	___ftadd@exp2,w
  9751  03B9  0634               	xorwf	___ftadd@exp1,w
  9752  03BA  1903               	skipnz
  9753  03BB  2BCD               	goto	l3858
  9754  03BC  3001               	movlw	1
  9755  03BD  02B2               	subwf	___ftadd@sign,f
  9756  03BE  0832               	movf	___ftadd@sign,w
  9757  03BF  3907               	andlw	7
  9758  03C0  1903               	btfsc	3,2
  9759  03C1  2BCD               	goto	l3858
  9760  03C2  2BB0               	goto	l3848
  9761  03C3                     l3854:	
  9762  03C3  3001               	movlw	1
  9763  03C4                     u4065:	
  9764  03C4  36B0               	lsrf	___ftadd@f2+2,f
  9765  03C5  0CAF               	rrf	___ftadd@f2+1,f
  9766  03C6  0CAE               	rrf	___ftadd@f2,f
  9767  03C7  0B89               	decfsz	9,f
  9768  03C8  2BC4               	goto	u4065
  9769  03C9  3001               	movlw	1
  9770  03CA  00FF               	movwf	127
  9771  03CB  087F               	movf	127,w
  9772  03CC  07B3               	addwf	___ftadd@exp2,f
  9773  03CD                     l3858:	
  9774  03CD  0834               	movf	___ftadd@exp1,w
  9775  03CE  0633               	xorwf	___ftadd@exp2,w
  9776  03CF  1D03               	skipz
  9777  03D0  2BC3               	goto	l3854
  9778  03D1                     l786:	
  9779  03D1  1FB2               	btfss	___ftadd@sign,7
  9780  03D2  2BE3               	goto	l3862
  9781  03D3  30FF               	movlw	255
  9782  03D4  06AB               	xorwf	___ftadd@f1,f
  9783  03D5  30FF               	movlw	255
  9784  03D6  06AC               	xorwf	___ftadd@f1+1,f
  9785  03D7  30FF               	movlw	255
  9786  03D8  06AD               	xorwf	___ftadd@f1+2,f
  9787  03D9  3001               	movlw	1
  9788  03DA  07AB               	addwf	___ftadd@f1,f
  9789  03DB  3000               	movlw	0
  9790  03DC  1803               	skipnc
  9791  03DD  3001               	movlw	1
  9792  03DE  07AC               	addwf	___ftadd@f1+1,f
  9793  03DF  3000               	movlw	0
  9794  03E0  1803               	skipnc
  9795  03E1  3001               	movlw	1
  9796  03E2  07AD               	addwf	___ftadd@f1+2,f
  9797  03E3                     l3862:	
  9798  03E3  1F32               	btfss	___ftadd@sign,6
  9799  03E4  2BF5               	goto	l3866
  9800  03E5  30FF               	movlw	255
  9801  03E6  06AE               	xorwf	___ftadd@f2,f
  9802  03E7  30FF               	movlw	255
  9803  03E8  06AF               	xorwf	___ftadd@f2+1,f
  9804  03E9  30FF               	movlw	255
  9805  03EA  06B0               	xorwf	___ftadd@f2+2,f
  9806  03EB  3001               	movlw	1
  9807  03EC  07AE               	addwf	___ftadd@f2,f
  9808  03ED  3000               	movlw	0
  9809  03EE  1803               	skipnc
  9810  03EF  3001               	movlw	1
  9811  03F0  07AF               	addwf	___ftadd@f2+1,f
  9812  03F1  3000               	movlw	0
  9813  03F2  1803               	skipnc
  9814  03F3  3001               	movlw	1
  9815  03F4  07B0               	addwf	___ftadd@f2+2,f
  9816  03F5                     l3866:	
  9817  03F5  01B2               	clrf	___ftadd@sign
  9818  03F6  082B               	movf	___ftadd@f1,w
  9819  03F7  07AE               	addwf	___ftadd@f2,f
  9820  03F8  082C               	movf	___ftadd@f1+1,w
  9821  03F9  3DAF               	addwfc	___ftadd@f2+1,f
  9822  03FA  082D               	movf	___ftadd@f1+2,w
  9823  03FB  3DB0               	addwfc	___ftadd@f2+2,f
  9824  03FC  1FB0               	btfss	___ftadd@f2+2,7
  9825  03FD  2C10               	goto	l3876
  9826  03FE  30FF               	movlw	255
  9827  03FF  06AE               	xorwf	___ftadd@f2,f
  9828  0400  30FF               	movlw	255
  9829  0401  06AF               	xorwf	___ftadd@f2+1,f
  9830  0402  30FF               	movlw	255
  9831  0403  06B0               	xorwf	___ftadd@f2+2,f
  9832  0404  3001               	movlw	1
  9833  0405  07AE               	addwf	___ftadd@f2,f
  9834  0406  3000               	movlw	0
  9835  0407  1803               	skipnc
  9836  0408  3001               	movlw	1
  9837  0409  07AF               	addwf	___ftadd@f2+1,f
  9838  040A  3000               	movlw	0
  9839  040B  1803               	skipnc
  9840  040C  3001               	movlw	1
  9841  040D  07B0               	addwf	___ftadd@f2+2,f
  9842  040E  01B2               	clrf	___ftadd@sign
  9843  040F  0AB2               	incf	___ftadd@sign,f
  9844  0410                     l3876:	
  9845  0410  082E               	movf	___ftadd@f2,w
  9846  0411  00A6               	movwf	___ftpack@arg
  9847  0412  082F               	movf	___ftadd@f2+1,w
  9848  0413  00A7               	movwf	___ftpack@arg+1
  9849  0414  0830               	movf	___ftadd@f2+2,w
  9850  0415  00A8               	movwf	___ftpack@arg+2
  9851  0416  0834               	movf	___ftadd@exp1,w
  9852  0417  00FF               	movwf	127
  9853  0418  087F               	movf	127,w
  9854  0419  00A9               	movwf	___ftpack@exp
  9855  041A  0832               	movf	___ftadd@sign,w
  9856  041B  00FF               	movwf	127
  9857  041C  087F               	movf	127,w
  9858  041D  00AA               	movwf	___ftpack@sign
  9859  041E  318D  254D         	fcall	___ftpack
  9860  0420  0020               	movlb	0	; select bank0
  9861  0421  0826               	movf	?___ftpack,w
  9862  0422  00AB               	movwf	?___ftadd
  9863  0423  0827               	movf	?___ftpack+1,w
  9864  0424  00AC               	movwf	?___ftadd+1
  9865  0425  0828               	movf	?___ftpack+2,w
  9866  0426  00AD               	movwf	?___ftadd+2
  9867  0427  0008               	return
  9868  0428                     __end_of___ftadd:	
  9869                           
  9870                           	psect	text43
  9871  09CA                     __ptext43:	
  9872 ;; *************** function ___awtoft *****************
  9873 ;; Defined at:
  9874 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;  c               2    0[COMMON] int 
  9877 ;; Auto vars:     Size  Location     Type
  9878 ;;  sign            1    3[COMMON] unsigned char 
  9879 ;; Return value:  Size  Location     Type
  9880 ;;                  3    0[COMMON] float 
  9881 ;; Registers used:
  9882 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9883 ;; Tracked objects:
  9884 ;;		On entry : 0/0
  9885 ;;		On exit  : 0/0
  9886 ;;		Unchanged: 0/0
  9887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9888 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;Total ram usage:        4 bytes
  9893 ;; Hardware stack levels used:    1
  9894 ;; Hardware stack levels required when called:    8
  9895 ;; This function calls:
  9896 ;;		___ftpack
  9897 ;; This function is called by:
  9898 ;;		_getADCValue
  9899 ;; This function uses a non-reentrant model
  9900 ;;
  9901                           
  9902                           
  9903                           ;psect for function ___awtoft
  9904  09CA                     ___awtoft:	
  9905                           
  9906                           ;incstack = 0
  9907                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9908  09CA  01F3               	clrf	___awtoft@sign
  9909  09CB  1FF1               	btfss	___awtoft@c+1,7
  9910  09CC  29D4               	goto	l4374
  9911  09CD  09F0               	comf	___awtoft@c,f
  9912  09CE  09F1               	comf	___awtoft@c+1,f
  9913  09CF  0AF0               	incf	___awtoft@c,f
  9914  09D0  1903               	skipnz
  9915  09D1  0AF1               	incf	___awtoft@c+1,f
  9916  09D2  01F3               	clrf	___awtoft@sign
  9917  09D3  0AF3               	incf	___awtoft@sign,f
  9918  09D4                     l4374:	
  9919  09D4  0870               	movf	___awtoft@c,w
  9920  09D5  0020               	movlb	0	; select bank0
  9921  09D6  00A6               	movwf	___ftpack@arg
  9922  09D7  0871               	movf	___awtoft@c+1,w
  9923  09D8  00A7               	movwf	___ftpack@arg+1
  9924  09D9  01A8               	clrf	___ftpack@arg+2
  9925  09DA  308E               	movlw	142
  9926  09DB  00FF               	movwf	127
  9927  09DC  087F               	movf	127,w
  9928  09DD  00A9               	movwf	___ftpack@exp
  9929  09DE  0873               	movf	___awtoft@sign,w
  9930  09DF  00FF               	movwf	127
  9931  09E0  087F               	movf	127,w
  9932  09E1  00AA               	movwf	___ftpack@sign
  9933  09E2  318D  254D         	fcall	___ftpack
  9934  09E4  0020               	movlb	0	; select bank0
  9935  09E5  0826               	movf	?___ftpack,w
  9936  09E6  00F0               	movwf	?___awtoft
  9937  09E7  0827               	movf	?___ftpack+1,w
  9938  09E8  00F1               	movwf	?___awtoft+1
  9939  09E9  0828               	movf	?___ftpack+2,w
  9940  09EA  00F2               	movwf	?___awtoft+2
  9941  09EB  0008               	return
  9942  09EC                     __end_of___awtoft:	
  9943                           
  9944                           	psect	text44
  9945  08A9                     __ptext44:	
  9946 ;; *************** function ___lwtoft *****************
  9947 ;; Defined at:
  9948 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;  c               2    0[COMMON] unsigned int 
  9951 ;; Auto vars:     Size  Location     Type
  9952 ;;		None
  9953 ;; Return value:  Size  Location     Type
  9954 ;;                  3    0[COMMON] float 
  9955 ;; Registers used:
  9956 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9957 ;; Tracked objects:
  9958 ;;		On entry : 0/0
  9959 ;;		On exit  : 0/0
  9960 ;;		Unchanged: 0/0
  9961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9962 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;Total ram usage:        3 bytes
  9967 ;; Hardware stack levels used:    1
  9968 ;; Hardware stack levels required when called:    8
  9969 ;; This function calls:
  9970 ;;		___ftpack
  9971 ;; This function is called by:
  9972 ;;		_loop
  9973 ;;		_hcsr04GetAerage
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           
  9978                           ;psect for function ___lwtoft
  9979  08A9                     ___lwtoft:	
  9980                           
  9981                           ;incstack = 0
  9982                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9983  08A9  0870               	movf	___lwtoft@c,w
  9984  08AA  0020               	movlb	0	; select bank0
  9985  08AB  00A6               	movwf	___ftpack@arg
  9986  08AC  0871               	movf	___lwtoft@c+1,w
  9987  08AD  00A7               	movwf	___ftpack@arg+1
  9988  08AE  01A8               	clrf	___ftpack@arg+2
  9989  08AF  308E               	movlw	142
  9990  08B0  00FF               	movwf	127
  9991  08B1  087F               	movf	127,w
  9992  08B2  00A9               	movwf	___ftpack@exp
  9993  08B3  01AA               	clrf	___ftpack@sign
  9994  08B4  318D  254D         	fcall	___ftpack
  9995  08B6  0020               	movlb	0	; select bank0
  9996  08B7  0826               	movf	?___ftpack,w
  9997  08B8  00F0               	movwf	?___lwtoft
  9998  08B9  0827               	movf	?___ftpack+1,w
  9999  08BA  00F1               	movwf	?___lwtoft+1
 10000  08BB  0828               	movf	?___ftpack+2,w
 10001  08BC  00F2               	movwf	?___lwtoft+2
 10002  08BD  0008               	return
 10003  08BE                     __end_of___lwtoft:	
 10004                           
 10005                           	psect	text45
 10006  0895                     __ptext45:	
 10007 ;; *************** function _hcsr04Init *****************
 10008 ;; Defined at:
 10009 ;;		line 8 in file "HC-SR04.c"
 10010 ;; Parameters:    Size  Location     Type
 10011 ;;		None
 10012 ;; Auto vars:     Size  Location     Type
 10013 ;;		None
 10014 ;; Return value:  Size  Location     Type
 10015 ;;                  1    wreg      void 
 10016 ;; Registers used:
 10017 ;;		wreg, status,2, status,0
 10018 ;; Tracked objects:
 10019 ;;		On entry : 0/0
 10020 ;;		On exit  : 0/0
 10021 ;;		Unchanged: 0/0
 10022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;Total ram usage:        0 bytes
 10028 ;; Hardware stack levels used:    1
 10029 ;; Hardware stack levels required when called:    7
 10030 ;; This function calls:
 10031 ;;		Nothing
 10032 ;; This function is called by:
 10033 ;;		_main
 10034 ;; This function uses a non-reentrant model
 10035 ;;
 10036                           
 10037                           
 10038                           ;psect for function _hcsr04Init
 10039  0895                     _hcsr04Init:	
 10040                           
 10041                           ;HC-SR04.c: 11: IOCAPbits.IOCAP3 = 1;
 10042                           
 10043                           ;incstack = 0
 10044                           ; Regs used in _hcsr04Init: [wreg+status,2+status,0]
 10045  0895  0027               	movlb	7	; select bank7
 10046  0896  1591               	bsf	17,3	;volatile
 10047                           
 10048                           ;HC-SR04.c: 12: PIE0bits.IOCIE = 1;
 10049  0897  0021               	movlb	1	; select bank1
 10050  0898  1610               	bsf	16,4	;volatile
 10051                           
 10052                           ;HC-SR04.c: 15: TRISCbits.TRISC4 = 0;
 10053  0899  120E               	bcf	14,4	;volatile
 10054                           
 10055                           ;HC-SR04.c: 16: PORTCbits.RC4 = 0;
 10056  089A  0020               	movlb	0	; select bank0
 10057  089B  120E               	bcf	14,4	;volatile
 10058                           
 10059                           ;HC-SR04.c: 17: WPUAbits.WPUA3 = 0;
 10060  089C  0024               	movlb	4	; select bank4
 10061  089D  118C               	bcf	12,3	;volatile
 10062                           
 10063                           ;HC-SR04.c: 20: T1CONbits.TMR1ON = 0;
 10064  089E  0020               	movlb	0	; select bank0
 10065  089F  101B               	bcf	27,0	;volatile
 10066                           
 10067                           ;HC-SR04.c: 21: T1CONbits.TMR1CS = 0b01;
 10068  08A0  081B               	movf	27,w	;volatile
 10069  08A1  393F               	andlw	-193
 10070  08A2  3840               	iorlw	64
 10071  08A3  009B               	movwf	27	;volatile
 10072                           
 10073                           ;HC-SR04.c: 22: T1CONbits.T1CKPS = 0b00;
 10074  08A4  30CF               	movlw	-49
 10075  08A5  059B               	andwf	27,f	;volatile
 10076                           
 10077                           ;HC-SR04.c: 23: T1CONbits.T1SYNC = 1;
 10078  08A6  151B               	bsf	27,2	;volatile
 10079                           
 10080                           ;HC-SR04.c: 24: T1GCONbits.TMR1GE = 0;
 10081  08A7  139C               	bcf	28,7	;volatile
 10082  08A8  0008               	return
 10083  08A9                     __end_of_hcsr04Init:	
 10084                           
 10085                           	psect	text46
 10086  08BE                     __ptext46:	
 10087 ;; *************** function ___lbtoft *****************
 10088 ;; Defined at:
 10089 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
 10090 ;; Parameters:    Size  Location     Type
 10091 ;;  c               1    wreg     unsigned char 
 10092 ;; Auto vars:     Size  Location     Type
 10093 ;;  c               1   11[BANK0 ] unsigned char 
 10094 ;; Return value:  Size  Location     Type
 10095 ;;                  3    0[COMMON] float 
 10096 ;; Registers used:
 10097 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
 10098 ;; Tracked objects:
 10099 ;;		On entry : 0/0
 10100 ;;		On exit  : 0/0
 10101 ;;		Unchanged: 0/0
 10102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10103 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10107 ;;Total ram usage:        5 bytes
 10108 ;; Hardware stack levels used:    1
 10109 ;; Hardware stack levels required when called:    8
 10110 ;; This function calls:
 10111 ;;		___ftpack
 10112 ;; This function is called by:
 10113 ;;		_main
 10114 ;; This function uses a non-reentrant model
 10115 ;;
 10116                           
 10117                           
 10118                           ;psect for function ___lbtoft
 10119  08BE                     ___lbtoft:	
 10120                           
 10121                           ;incstack = 0
 10122                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
 10123                           ;___lbtoft@c stored from wreg
 10124  08BE  0020               	movlb	0	; select bank0
 10125  08BF  00AB               	movwf	___lbtoft@c
 10126  08C0  082B               	movf	___lbtoft@c,w
 10127  08C1  00FD               	movwf	125
 10128  08C2  01FE               	clrf	126
 10129  08C3  01FF               	clrf	127
 10130  08C4  087D               	movf	125,w
 10131  08C5  00A6               	movwf	___ftpack@arg
 10132  08C6  087E               	movf	126,w
 10133  08C7  00A7               	movwf	___ftpack@arg+1
 10134  08C8  087F               	movf	127,w
 10135  08C9  00A8               	movwf	___ftpack@arg+2
 10136  08CA  308E               	movlw	142
 10137  08CB  00FF               	movwf	127
 10138  08CC  087F               	movf	127,w
 10139  08CD  00A9               	movwf	___ftpack@exp
 10140  08CE  01AA               	clrf	___ftpack@sign
 10141  08CF  318D  254D         	fcall	___ftpack
 10142  08D1  0020               	movlb	0	; select bank0
 10143  08D2  0826               	movf	?___ftpack,w
 10144  08D3  00F0               	movwf	?___lbtoft
 10145  08D4  0827               	movf	?___ftpack+1,w
 10146  08D5  00F1               	movwf	?___lbtoft+1
 10147  08D6  0828               	movf	?___ftpack+2,w
 10148  08D7  00F2               	movwf	?___lbtoft+2
 10149  08D8  0008               	return
 10150  08D9                     __end_of___lbtoft:	
 10151                           
 10152                           	psect	text47
 10153  0D4D                     __ptext47:	
 10154 ;; *************** function ___ftpack *****************
 10155 ;; Defined at:
 10156 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
 10157 ;; Parameters:    Size  Location     Type
 10158 ;;  arg             3    6[BANK0 ] unsigned um
 10159 ;;  exp             1    9[BANK0 ] unsigned char 
 10160 ;;  sign            1   10[BANK0 ] unsigned char 
 10161 ;; Auto vars:     Size  Location     Type
 10162 ;;		None
 10163 ;; Return value:  Size  Location     Type
 10164 ;;                  3    6[BANK0 ] float 
 10165 ;; Registers used:
 10166 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
 10167 ;; Tracked objects:
 10168 ;;		On entry : 0/0
 10169 ;;		On exit  : 0/0
 10170 ;;		Unchanged: 0/0
 10171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10172 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10175 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10176 ;;Total ram usage:        5 bytes
 10177 ;; Hardware stack levels used:    1
 10178 ;; Hardware stack levels required when called:    7
 10179 ;; This function calls:
 10180 ;;		Nothing
 10181 ;; This function is called by:
 10182 ;;		___awtoft
 10183 ;;		___ftadd
 10184 ;;		___ftdiv
 10185 ;;		___ftmul
 10186 ;;		___lbtoft
 10187 ;;		___lltoft
 10188 ;;		___lwtoft
 10189 ;; This function uses a non-reentrant model
 10190 ;;
 10191                           
 10192                           
 10193                           ;psect for function ___ftpack
 10194  0D4D                     ___ftpack:	
 10195                           
 10196                           ;incstack = 0
 10197                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+9-btemp+11]
 10198  0D4D  0020               	movlb	0	; select bank0
 10199  0D4E  0829               	movf	___ftpack@exp,w
 10200  0D4F  1903               	btfsc	3,2
 10201  0D50  2D56               	goto	l3688
 10202  0D51  0828               	movf	___ftpack@arg+2,w
 10203  0D52  0427               	iorwf	___ftpack@arg+1,w
 10204  0D53  0426               	iorwf	___ftpack@arg,w
 10205  0D54  1D03               	skipz
 10206  0D55  2D67               	goto	l3696
 10207  0D56                     l3688:	
 10208  0D56  3000               	movlw	0
 10209  0D57  00A6               	movwf	?___ftpack
 10210  0D58  3000               	movlw	0
 10211  0D59  00A7               	movwf	?___ftpack+1
 10212  0D5A  3000               	movlw	0
 10213  0D5B  00A8               	movwf	?___ftpack+2
 10214  0D5C  0008               	return
 10215  0D5D                     l3692:	
 10216  0D5D  3001               	movlw	1
 10217  0D5E  00FF               	movwf	127
 10218  0D5F  087F               	movf	127,w
 10219  0D60  07A9               	addwf	___ftpack@exp,f
 10220  0D61  3001               	movlw	1
 10221  0D62                     u3645:	
 10222  0D62  36A8               	lsrf	___ftpack@arg+2,f
 10223  0D63  0CA7               	rrf	___ftpack@arg+1,f
 10224  0D64  0CA6               	rrf	___ftpack@arg,f
 10225  0D65  0B89               	decfsz	9,f
 10226  0D66  2D62               	goto	u3645
 10227  0D67                     l3696:	
 10228  0D67  30FE               	movlw	254
 10229  0D68  0528               	andwf	___ftpack@arg+2,w
 10230  0D69  1903               	btfsc	3,2
 10231  0D6A  2D80               	goto	l3704
 10232  0D6B  2D5D               	goto	l3692
 10233  0D6C                     l3698:	
 10234  0D6C  3001               	movlw	1
 10235  0D6D  00FF               	movwf	127
 10236  0D6E  087F               	movf	127,w
 10237  0D6F  07A9               	addwf	___ftpack@exp,f
 10238  0D70  3001               	movlw	1
 10239  0D71  07A6               	addwf	___ftpack@arg,f
 10240  0D72  3000               	movlw	0
 10241  0D73  1803               	skipnc
 10242  0D74  3001               	movlw	1
 10243  0D75  07A7               	addwf	___ftpack@arg+1,f
 10244  0D76  3000               	movlw	0
 10245  0D77  1803               	skipnc
 10246  0D78  3001               	movlw	1
 10247  0D79  07A8               	addwf	___ftpack@arg+2,f
 10248  0D7A  3001               	movlw	1
 10249  0D7B                     u3665:	
 10250  0D7B  36A8               	lsrf	___ftpack@arg+2,f
 10251  0D7C  0CA7               	rrf	___ftpack@arg+1,f
 10252  0D7D  0CA6               	rrf	___ftpack@arg,f
 10253  0D7E  0B89               	decfsz	9,f
 10254  0D7F  2D7B               	goto	u3665
 10255  0D80                     l3704:	
 10256  0D80  30FF               	movlw	255
 10257  0D81  0528               	andwf	___ftpack@arg+2,w
 10258  0D82  1903               	btfsc	3,2
 10259  0D83  2D8D               	goto	l3708
 10260  0D84  2D6C               	goto	l3698
 10261  0D85                     l3706:	
 10262  0D85  3001               	movlw	1
 10263  0D86  02A9               	subwf	___ftpack@exp,f
 10264  0D87  3001               	movlw	1
 10265  0D88                     u3685:	
 10266  0D88  35A6               	lslf	___ftpack@arg,f
 10267  0D89  0DA7               	rlf	___ftpack@arg+1,f
 10268  0D8A  0DA8               	rlf	___ftpack@arg+2,f
 10269  0D8B  0B89               	decfsz	9,f
 10270  0D8C  2D88               	goto	u3685
 10271  0D8D                     l3708:	
 10272  0D8D  1BA7               	btfsc	___ftpack@arg+1,7
 10273  0D8E  2D93               	goto	l762
 10274  0D8F  3002               	movlw	2
 10275  0D90  0229               	subwf	___ftpack@exp,w
 10276  0D91  1803               	skipnc
 10277  0D92  2D85               	goto	l3706
 10278  0D93                     l762:	
 10279  0D93  1829               	btfsc	___ftpack@exp,0
 10280  0D94  2D9B               	goto	l763
 10281  0D95  30FF               	movlw	255
 10282  0D96  05A6               	andwf	___ftpack@arg,f
 10283  0D97  307F               	movlw	127
 10284  0D98  05A7               	andwf	___ftpack@arg+1,f
 10285  0D99  30FF               	movlw	255
 10286  0D9A  05A8               	andwf	___ftpack@arg+2,f
 10287  0D9B                     l763:	
 10288  0D9B  1003               	clrc
 10289  0D9C  0CA9               	rrf	___ftpack@exp,f
 10290  0D9D  0829               	movf	___ftpack@exp,w
 10291  0D9E  00FD               	movwf	125
 10292  0D9F  01FE               	clrf	126
 10293  0DA0  01FF               	clrf	127
 10294  0DA1  3010               	movlw	16
 10295  0DA2                     u3725:	
 10296  0DA2  35FD               	lslf	125,f
 10297  0DA3  0DFE               	rlf	126,f
 10298  0DA4  0DFF               	rlf	127,f
 10299  0DA5  0B89               	decfsz	9,f
 10300  0DA6  2DA2               	goto	u3725
 10301  0DA7  087D               	movf	125,w
 10302  0DA8  04A6               	iorwf	___ftpack@arg,f
 10303  0DA9  087E               	movf	126,w
 10304  0DAA  04A7               	iorwf	___ftpack@arg+1,f
 10305  0DAB  087F               	movf	127,w
 10306  0DAC  04A8               	iorwf	___ftpack@arg+2,f
 10307  0DAD  082A               	movf	___ftpack@sign,w
 10308  0DAE  1903               	btfsc	3,2
 10309  0DAF  0008               	return
 10310  0DB0  17A8               	bsf	___ftpack@arg+2,7
 10311  0DB1  0008               	return
 10312  0DB2                     __end_of___ftpack:	
 10313                           
 10314                           	psect	text48
 10315  083B                     __ptext48:	
 10316 ;; *************** function _EEPROMRead *****************
 10317 ;; Defined at:
 10318 ;;		line 29 in file "eeprom.c"
 10319 ;; Parameters:    Size  Location     Type
 10320 ;;  address         2    0[COMMON] unsigned int 
 10321 ;; Auto vars:     Size  Location     Type
 10322 ;;		None
 10323 ;; Return value:  Size  Location     Type
 10324 ;;                  1    wreg      unsigned char 
 10325 ;; Registers used:
 10326 ;;		wreg, status,2
 10327 ;; Tracked objects:
 10328 ;;		On entry : 0/0
 10329 ;;		On exit  : 0/0
 10330 ;;		Unchanged: 0/0
 10331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10332 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10335 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;Total ram usage:        2 bytes
 10337 ;; Hardware stack levels used:    1
 10338 ;; Hardware stack levels required when called:    7
 10339 ;; This function calls:
 10340 ;;		Nothing
 10341 ;; This function is called by:
 10342 ;;		_main
 10343 ;; This function uses a non-reentrant model
 10344 ;;
 10345                           
 10346                           
 10347                           ;psect for function _EEPROMRead
 10348  083B                     _EEPROMRead:	
 10349                           
 10350                           ;eeprom.c: 30: NVMADRH = ((address >> 8) & 0xFF);
 10351                           
 10352                           ;incstack = 0
 10353                           ; Regs used in _EEPROMRead: [wreg+status,2]
 10354  083B  0871               	movf	EEPROMRead@address+1,w
 10355  083C  0031               	movlb	17	; select bank17
 10356  083D  0092               	movwf	18	;volatile
 10357                           
 10358                           ;eeprom.c: 31: NVMADRL = (address & 0xFF);
 10359  083E  0870               	movf	EEPROMRead@address,w
 10360  083F  0091               	movwf	17	;volatile
 10361                           
 10362                           ;eeprom.c: 32: NVMCON1bits.NVMREGS = 1;
 10363  0840  1715               	bsf	21,6	;volsfr
 10364                           
 10365                           ;eeprom.c: 33: NVMCON1bits.RD = 1;
 10366  0841  1415               	bsf	21,0	;volsfr
 10367                           
 10368                           ;eeprom.c: 34: __nop();
 10369  0842  0000               	nop
 10370                           
 10371                           ;eeprom.c: 35: __nop();
 10372  0843  0000               	nop
 10373                           
 10374                           ;eeprom.c: 37: return (NVMDATL);
 10375  0844  0031               	movlb	17	; select bank17
 10376  0845  0813               	movf	19,w	;volatile
 10377  0846  0008               	return
 10378  0847                     __end_of_EEPROMRead:	
 10379                           
 10380                           	psect	intentry
 10381  0004                     __pintentry:	
 10382 ;; *************** function _ISR *****************
 10383 ;; Defined at:
 10384 ;;		line 13 in file "main.c"
 10385 ;; Parameters:    Size  Location     Type
 10386 ;;		None
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;		None
 10389 ;; Return value:  Size  Location     Type
 10390 ;;                  1    wreg      void 
 10391 ;; Registers used:
 10392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath, cstack
 10393 ;; Tracked objects:
 10394 ;;		On entry : 0/0
 10395 ;;		On exit  : 0/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;Total ram usage:        6 bytes
 10403 ;; Hardware stack levels used:    1
 10404 ;; Hardware stack levels required when called:    6
 10405 ;; This function calls:
 10406 ;;		_hcsr04ISR
 10407 ;;		_nrf24l01ISR
 10408 ;; This function is called by:
 10409 ;;		Interrupt level 1
 10410 ;; This function uses a non-reentrant model
 10411 ;;
 10412                           
 10413  0004                     _ISR:	
 10414                           
 10415                           ;incstack = 0
 10416                           ; Regs used in _ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+btemp+11+p
      +                          clath+cstack]
 10417  0004  3180               	pagesel	$
 10418  0005  0874               	movf	116,w
 10419  0006  0020               	movlb	0	; select bank0
 10420  0007  00A0               	movwf	??_ISR
 10421  0008  0875               	movf	117,w
 10422  0009  00A1               	movwf	??_ISR+1
 10423  000A  087C               	movf	124,w
 10424  000B  00A2               	movwf	??_ISR+2
 10425  000C  087D               	movf	125,w
 10426  000D  00A3               	movwf	??_ISR+3
 10427  000E  087F               	movf	127,w
 10428  000F  00A4               	movwf	??_ISR+4
 10429  0010  30AF               	movlw	low ___int_sp
 10430  0011  0086               	movwf	6
 10431  0012  3022               	movlw	high ___int_sp
 10432  0013  0087               	movwf	7
 10433  0014  0875               	movf	117,w
 10434  0015  00A5               	movwf	??_ISR+5
 10435                           
 10436                           ;main.c: 15: if (IOCAFbits.IOCAF3){
 10437  0016  0027               	movlb	7	; select bank7
 10438  0017  1D93               	btfss	19,3	;volatile
 10439  0018  281E               	goto	i1l4808
 10440                           
 10441                           ;main.c: 16: hcsr04ISR();
 10442  0019  3188  200E  3180   	fcall	_hcsr04ISR
 10443                           
 10444                           ;main.c: 17: IOCAFbits.IOCAF3 = 0;
 10445  001C  0027               	movlb	7	; select bank7
 10446  001D  1193               	bcf	19,3	;volatile
 10447  001E                     i1l4808:	
 10448                           
 10449                           ;main.c: 18: };main.c: 20: if (PIR0bits.INTF){
 10450  001E  0020               	movlb	0	; select bank0
 10451  001F  1C10               	btfss	16,0	;volatile
 10452  0020  2825               	goto	i1l4814
 10453                           
 10454                           ;main.c: 21: nrf24l01ISR();
 10455  0021  318C  246D         	fcall	_nrf24l01ISR
 10456                           
 10457                           ;main.c: 22: PIR0bits.INTF = 0;
 10458  0023  0020               	movlb	0	; select bank0
 10459  0024  1010               	bcf	16,0	;volatile
 10460  0025                     i1l4814:	
 10461                           
 10462                           ;main.c: 23: };main.c: 25: if (PIR1bits.ADIF){
 10463  0025  1B11               	btfsc	17,6	;volatile
 10464                           
 10465                           ;main.c: 26: PIR1bits.ADIF = 0;
 10466  0026  1311               	bcf	17,6	;volatile
 10467  0027  0825               	movf	??_ISR+5,w
 10468  0028  00FF               	movwf	127
 10469  0029  0824               	movf	??_ISR+4,w
 10470  002A  00FD               	movwf	125
 10471  002B  0823               	movf	??_ISR+3,w
 10472  002C  00FC               	movwf	124
 10473  002D  0822               	movf	??_ISR+2,w
 10474  002E  00F5               	movwf	117
 10475  002F  0821               	movf	??_ISR+1,w
 10476  0030  00F4               	movwf	116
 10477  0031  0009               	retfie
 10478  0032                     __end_of_ISR:	
 10479                           
 10480                           	psect	text50
 10481  0C6D                     __ptext50:	
 10482 ;; *************** function _nrf24l01ISR *****************
 10483 ;; Defined at:
 10484 ;;		line 151 in file "nrf24l01.c"
 10485 ;; Parameters:    Size  Location     Type
 10486 ;;		None
 10487 ;; Auto vars:     Size  Location     Type
 10488 ;;		None
 10489 ;; Return value:  Size  Location     Type
 10490 ;;                  1    wreg      void 
 10491 ;; Registers used:
 10492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
 10493 ;; Tracked objects:
 10494 ;;		On entry : 0/0
 10495 ;;		On exit  : 0/0
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;Total ram usage:        0 bytes
 10503 ;; Hardware stack levels used:    1
 10504 ;; Hardware stack levels required when called:    5
 10505 ;; This function calls:
 10506 ;;		_nrf24l01Send
 10507 ;;		_nrf24l01Service
 10508 ;;		_nrf24l01SetRXMode
 10509 ;; This function is called by:
 10510 ;;		_ISR
 10511 ;; This function uses a non-reentrant model
 10512 ;;
 10513                           
 10514                           
 10515                           ;psect for function _nrf24l01ISR
 10516  0C6D                     _nrf24l01ISR:	
 10517                           
 10518                           ;nrf24l01.c: 153: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
 10519                           
 10520                           ;incstack = 0
 10521                           ; Regs used in _nrf24l01ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+bt
      +                          emp+11+pclath]
 10522  0C6D  3000               	movlw	0
 10523  0C6E  001E               	movwi fsr1++
 10524  0C6F  3007               	movlw	7
 10525  0C70  3188  2082  318C   	fcall	_nrf24l01Send
 10526  0C73  00FF               	movwf	127
 10527  0C74  087F               	movf	127,w
 10528  0C75  0020               	movlb	0	; select bank0
 10529  0C76  00E6               	movwf	_status+2	;volatile
 10530                           
 10531                           ;nrf24l01.c: 156: if (status.statusRegister.RX_DR){
 10532  0C77  1F66               	btfss	_status+2,6	;volatile
 10533  0C78  2C85               	goto	i1l4712
 10534                           
 10535                           ;nrf24l01.c: 159: if (status.RX == 0){
 10536  0C79  0865               	movf	_status+1,w	;volatile
 10537  0C7A  1D03               	btfss	3,2
 10538  0C7B  2C81               	goto	i1l303
 10539                           
 10540                           ;nrf24l01.c: 160: status.RX = 1;
 10541  0C7C  3001               	movlw	1
 10542  0C7D  00FF               	movwf	127
 10543  0C7E  087F               	movf	127,w
 10544  0C7F  00E5               	movwf	_status+1	;volatile
 10545                           
 10546                           ;nrf24l01.c: 161: }
 10547  0C80  2C82               	goto	i1l4710
 10548  0C81                     i1l303:	
 10549                           
 10550                           ;nrf24l01.c: 163: else{;nrf24l01.c: 164: status.statusRegister.RX_DR = 0;
 10551  0C81  1366               	bcf	_status+2,6	;volatile
 10552  0C82                     i1l4710:	
 10553                           
 10554                           ;nrf24l01.c: 165: };nrf24l01.c: 167: nrf24l01Service();
 10555  0C82  3186  26B0  318C   	fcall	_nrf24l01Service
 10556  0C85                     i1l4712:	
 10557                           
 10558                           ;nrf24l01.c: 168: };nrf24l01.c: 170: if (status.statusRegister.TX_DS){
 10559  0C85  0020               	movlb	0	; select bank0
 10560  0C86  1EE6               	btfss	_status+2,5	;volatile
 10561  0C87  2CAC               	goto	i1l4728
 10562                           
 10563                           ;nrf24l01.c: 175: if (lastTXPacket->packetData.ACKRequest){
 10564  0C88  0869               	movf	_lastTXPacket,w
 10565  0C89  0084               	movwf	4
 10566  0C8A  3001               	movlw	1	; select bank2/3
 10567  0C8B  0085               	movwf	5
 10568  0C8C  1D00               	btfss	0,2
 10569  0C8D  2C9B               	goto	i1l4720
 10570                           
 10571                           ;nrf24l01.c: 176: status.TX = 3;
 10572  0C8E  3003               	movlw	3
 10573  0C8F  00FF               	movwf	127
 10574  0C90  087F               	movf	127,w
 10575  0C91  00E4               	movwf	_status	;volatile
 10576                           
 10577                           ;nrf24l01.c: 177: status.retryCount = 0xFF;
 10578  0C92  30FF               	movlw	255
 10579  0C93  00FF               	movwf	127
 10580  0C94  087F               	movf	127,w
 10581  0C95  00E8               	movwf	_status+4	;volatile
 10582                           
 10583                           ;nrf24l01.c: 178: nrf24l01SetRXMode(1);
 10584  0C96  3001               	movlw	1
 10585  0C97  318B  232D  318C   	fcall	_nrf24l01SetRXMode
 10586                           
 10587                           ;nrf24l01.c: 179: }
 10588  0C9A  2CA9               	goto	i1l4726
 10589  0C9B                     i1l4720:	
 10590                           
 10591                           ;nrf24l01.c: 183: else if(lastTXPacket->packetData.IsACK){
 10592  0C9B  0020               	movlb	0	; select bank0
 10593  0C9C  0869               	movf	_lastTXPacket,w
 10594  0C9D  0084               	movwf	4
 10595  0C9E  3001               	movlw	1	; select bank2/3
 10596  0C9F  0085               	movwf	5
 10597  0CA0  1D80               	btfss	0,3
 10598  0CA1  2CA7               	goto	i1l4724
 10599                           
 10600                           ;nrf24l01.c: 184: nrf24l01SetRXMode(1);
 10601  0CA2  3001               	movlw	1
 10602  0CA3  318B  232D  318C   	fcall	_nrf24l01SetRXMode
 10603                           
 10604                           ;nrf24l01.c: 185: }
 10605  0CA6  2CA9               	goto	i1l4726
 10606  0CA7                     i1l4724:	
 10607                           
 10608                           ;nrf24l01.c: 188: else{;nrf24l01.c: 189: status.TX = 0;
 10609  0CA7  0020               	movlb	0	; select bank0
 10610  0CA8  01E4               	clrf	_status	;volatile
 10611  0CA9                     i1l4726:	
 10612                           
 10613                           ;nrf24l01.c: 190: };nrf24l01.c: 192: nrf24l01Service();
 10614  0CA9  3186  26B0  318C   	fcall	_nrf24l01Service
 10615  0CAC                     i1l4728:	
 10616                           
 10617                           ;nrf24l01.c: 193: };nrf24l01.c: 198: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          7, status.statusRegister.byte);
 10618  0CAC  0020               	movlb	0	; select bank0
 10619  0CAD  0866               	movf	_status+2,w	;volatile
 10620  0CAE  001E               	movwi fsr1++
 10621  0CAF  3027               	movlw	39
 10622  0CB0  3188  2082         	fcall	_nrf24l01Send
 10623  0CB2  0008               	return
 10624  0CB3                     __end_of_nrf24l01ISR:	
 10625                           
 10626                           	psect	text51
 10627  080E                     __ptext51:	
 10628 ;; *************** function _hcsr04ISR *****************
 10629 ;; Defined at:
 10630 ;;		line 86 in file "HC-SR04.c"
 10631 ;; Parameters:    Size  Location     Type
 10632 ;;		None
 10633 ;; Auto vars:     Size  Location     Type
 10634 ;;		None
 10635 ;; Return value:  Size  Location     Type
 10636 ;;                  1    wreg      void 
 10637 ;; Registers used:
 10638 ;;		status,2
 10639 ;; Tracked objects:
 10640 ;;		On entry : 0/0
 10641 ;;		On exit  : 0/0
 10642 ;;		Unchanged: 0/0
 10643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;Total ram usage:        0 bytes
 10649 ;; Hardware stack levels used:    1
 10650 ;; This function calls:
 10651 ;;		Nothing
 10652 ;; This function is called by:
 10653 ;;		_ISR
 10654 ;; This function uses a non-reentrant model
 10655 ;;
 10656                           
 10657                           
 10658                           ;psect for function _hcsr04ISR
 10659  080E                     _hcsr04ISR:	
 10660                           
 10661                           ;HC-SR04.c: 87: waiting = 0;
 10662                           
 10663                           ;incstack = 0
 10664                           ; Regs used in _hcsr04ISR: [status,2]
 10665  080E  0021               	movlb	1	; select bank1
 10666  080F  01E8               	clrf	_waiting^(0+128)	;volatile
 10667                           
 10668                           ;HC-SR04.c: 88: T1CONbits.TMR1ON = 0;
 10669  0810  0020               	movlb	0	; select bank0
 10670  0811  101B               	bcf	27,0	;volatile
 10671  0812  0008               	return
 10672  0813                     __end_of_hcsr04ISR:	
 10673  0074                     btemp	set	116	;btemp
 10674  0074                     wtemp0	set	116
 10675  0076                     wtemp1	set	118
 10676  0078                     wtemp2	set	120
 10677  007A                     wtemp3	set	122
 10678  007C                     wtemp4	set	124
 10679  007E                     wtemp5	set	126
 10680  0074                     ttemp0	set	116
 10681  0077                     ttemp1	set	119
 10682  007A                     ttemp2	set	122
 10683  007D                     ttemp3	set	125
 10684  0074                     ltemp0	set	116
 10685  0078                     ltemp1	set	120
 10686  007C                     ltemp2	set	124
 10687  0076                     ltemp3	set	118


Data Sizes:
    Strings     38
    Constant    46
    Data        1
    BSS         130
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            4      4       4
    BANK0            80     68      74
    BANK1            80     60      74
    BANK2            80      0      45
    BANK3            80      0      66
    BANK4            80     45      45
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@ftoaStatus(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK2[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK1[33]), 
		 -> STR_6(CODE[4]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_7(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[6]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendTXBuffer@packet	PTR struct . size(1) Largest target is 33
		 -> TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    lastTXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_7(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[6]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 


Critical Paths under _main in COMMON

    _main->_EEPROMWrite
    _main->___lbtoft
    _main->_nrf24l01SetTXPipe
    _main->_strcpy
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01GetPipe->___lwmod
    _sendMessage->___lbtoft
    _sendMessage->_sleepMs
    _sendMessage->_strcpy
    _nrf24l01SendPacket->_sleepMs
    _nrf24l01SendPacket->_strcpy
    _exception->_EEPROMWrite
    _ftoa->___lltoft
    _sprintf->___wmul
    ___ftsub->___lltoft
    _getADCValue->___awtoft
    _getADCValue->_sleepMs
    ___ftadd->___awtoft

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01GetPipe->___lwmod
    _sendMessage->_strcat
    _nrf24l01SendPacket->_strcpy
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sendMessage
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_loop

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   99687
                                             67 BANK0      1     1      0
                                             26 BANK1     34    34      0
                         _EEPROMRead
                        _EEPROMWrite
                           ___lbtoft
                         _hcsr04Init
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    2274
                                             16 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    2274
                                              7 BANK0      9     9      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    2     2      0     406
                                              3 COMMON     1     1      0
                                              6 BANK0      1     1      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     344
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    3     3      0     611
                                              0 COMMON     3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      4     4      0     807
                                              7 BANK0      4     4      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     440
                                              0 COMMON     4     0      4
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _loop                                                45    45      0   62962
                                              0 BANK4     45    45      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft
                        _getADCValue
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                          9     2      7   27655
                                             17 BANK1      9     2      7
                         _EEPROMRead (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                 _nrf24l01SendPacket
                            _sleepMs
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     751
                                             65 BANK0      2     2      0
                                             13 BANK1      4     0      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   4     2      2    4739
                                              8 BANK0      4     2      2
                          _exception
                    _nrf24l01Service
                            _sleepMs
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     565
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2567
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (3) _exception                                            1     1      0     574
                                              6 BANK0      1     1      0
                        _EEPROMWrite
 ---------------------------------------------------------------------------------
 (4) _EEPROMWrite                                          4     1      3     543
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                13     9      4   19094
                                              0 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    24     10    3016
                                             27 BANK0     26    16     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     552
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     440
                                              0 COMMON     1     1      0
                                             19 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     449
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    3741
                                              0 COMMON     4     0      4
                                             11 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             10     6      4     579
                                             55 BANK0     10     6      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6104
                                             21 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                             43 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             12     6      6    4439
                                             43 BANK0     12     6      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     406
                                              6 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                          9     6      3   15657
                                             34 BANK0      9     6      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _sleepMs                                              4     2      2     889
                                              0 COMMON     4     2      2
                           _resetWDT
 ---------------------------------------------------------------------------------
 (3) _resetWDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             13     7      6    4995
                                             21 BANK0     13     7      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             10     4      6    5800
                                             11 BANK0     10     4      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3772
                                              0 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3878
                                              0 COMMON     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _hcsr04Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lbtoft                                             5     1      4    3566
                                              0 COMMON     4     0      4
                                             11 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             5     0      5    3535
                                              6 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (1) _EEPROMRead                                           2     0      2     166
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  6     6      0    3648
                                              0 BANK0      6     6      0
                          _hcsr04ISR
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         0     0      0    3648
                       _nrf24l01Send
                    _nrf24l01Service
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2567
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (10) _hcsr04ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMRead
   _EEPROMWrite
   ___lbtoft
     ___ftpack
   _hcsr04Init
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___lwtoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _sendMessage
       _EEPROMRead (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _exception
           _EEPROMWrite
         _nrf24l01Service
           _memset
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _nrf24l01SendTXBuffer
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
             _nrf24l01SetRXMode
               _nrf24l01Send
                 _nrf24l01SPIEnd
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
             _strlen
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strcmp
         _sleepMs
           _resetWDT
         _strcpy
       _sleepMs (ARG)
         _resetWDT
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _sleepMs
                   _resetWDT
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
   _sendMessage
     _EEPROMRead (ARG)
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _exception
         _EEPROMWrite
       _nrf24l01Service
         _memset
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _nrf24l01SendTXBuffer
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strlen
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strcmp
       _sleepMs
         _resetWDT
       _strcpy
     _sleepMs (ARG)
       _resetWDT
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _hcsr04ISR
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01Service
       _memset
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SendTXBuffer
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strlen
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _strcmp
     _nrf24l01SetRXMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            4      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               4      4       4       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3C      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2D       9       56.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     2D      2D      13       56.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     134      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Aug 20 10:11:06 2018

                ___bmul@product 0071                     __CFG_CP$OFF 0000                              l55 0869  
              sendMessage@value 00B5                sendMessage@topic 00B3             ___wmul@multiplicand 0072  
                  ___ftadd@exp1 0034                    ___ftadd@exp2 0033               sendMessage@packet 00B1  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0032                             l320 06CA  
                           l332 0758                             l185 07B6                             l275 0B66  
                           l526 0107                             l358 09A1                             l359 09A0  
                           l552 091E                             l288 095C                             l529 0126  
                           l762 0D93                             l763 0D9B                             l846 0EA4  
                           l786 03D1                             l977 0AF7                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             wreg 0009                            ?_ISR 0070  
                  ___ftdiv@cntr 003C                    ___ftdiv@sign 0041                  ??_nrf24l01Init 0030  
                          l4010 0109                            l4100 0B7F                            l4020 0135  
                          l4030 0154                            l4014 010E                            l4006 00D4  
                          l4104 0B95                            l4008 0103                            l4122 0613  
                          l4210 0E80                            l4220 0E9B                            l4052 01AA  
                          l4044 0187                            l4036 015A                            l4222 0EA7  
                          l4214 0E8E                            l4160 0688                            l4144 0664  
                          l4128 0629                            l4072 021A                            l4056 01BD  
                          l4048 0196                            l4226 0EB5                            l4066 01D5  
                          l4058 01C0                            l4074 0064                            l4322 0968  
                          l4082 0873                            l4156 0680                            l4148 066C  
                          l4236 0A1A                            l4076 0225                            l4182 08FE  
                          l4238 0A2A                            l4270 0557                            l4342 0CD7  
                          l4254 0AA0                            l4086 0879                            l3704 0D80  
                          l4416 0FDE                            l4408 0FC5                            l4192 0E50  
                          l3800 0D44                            l4248 0AD1                            l4344 0CEE  
                          l4360 09EF                            l4256 0AAC                            l3706 0D85  
                          l4450 0790                            l4362 0A0E                            l4258 0AB5  
                          l3708 0D8D                            l3812 035A                            l4460 07D8  
                          l4452 077D                            l4292 0BEC                            l4374 09D4  
                          l3822 0370                            l4390 0F84                            l3910 0A50  
                          l3670 086E                            l4358 09FC                            l4550 074B  
                          l4526 06FA                            l4294 0C0A                            l3840 039D  
                          l3816 0361                            l4384 0F6E                            l3920 0A60  
                          l4464 07F0                            l4448 0785                            l3760 0860  
                          l4528 070F                            l4632 02A9                            l3834 038A  
                          l4466 07F7                            l4538 072E                            l4642 02F3  
                          l3692 0D5D                            l3844 03A7                            l3924 0A68  
                          l3908 0A44                            l3940 0946                            l3932 08DE  
                          l3862 03E3                            l3854 03C3                            l3846 03AC  
                          l3766 0917                            l3950 0B37                            l3696 0D67  
                          l3688 0D56                            l3848 03B0                            l4496 06BB  
                          l4752 0AFE                            l4648 0302                            l3698 0D6C  
                          l3866 03F5                            l3858 03CD                            l3786 0D0B  
                          l3890 0BBB                            l3938 093B                            l4690 0A8A  
                          l4754 0B1E                            l3876 0410                            l3796 0D39  
                          l3788 0D19                            l3956 0B3F                            l4684 0A72  
                          l4908 0F53                            l3894 0BD3                            l3982 0087  
                          l4686 0A7E                            l4694 0A93                            l3888 0BAD  
                          l3898 0BDE                            l3988 0097                            l3996 00C5  
                          STR_1 1052                    __CFG_WDTE$ON 0000                            STR_2 1052  
                          STR_3 1034                            STR_4 1044                            STR_5 103F  
                          STR_6 104E                            STR_7 1049                            STR_8 1029  
                          u4005 039E                            u4035 03B1                            u4125 0BB0  
                          u4065 03C4                            u4145 0BC9                            u4155 0BD4  
                          u4405 017D                            u5205 0A84                            u5215 0A8B  
                          u4184 0A4C                            u4185 0A4A                            u4425 018E  
                          u4435 01A0                            u3725 0DA2                            u3645 0D62  
                          u4605 0673                            u4445 01B2                            u3665 0D7B  
                          u3825 0D0E                            u5185 0A75                            u5417 0EDA  
                          u4635 0689                            u5427 09B4                            u3685 0D88  
                          u4645 068F                            u4565 0635                            u4725 0E81  
                          u3845 0D1A                            u5285 0B0C                            u5437 09C0  
                          u4575 0645                            u3855 0D2E                            u5447 0CF4  
                          u3865 0D3A                            u3785 091F                            u5457 0B49  
                          u4595 066D                            u4755 0E9C                            u3795 0924  
                          u5467 0B5A                            u5477 0B63                            u3975 038B  
                          u4695 0E57                            u5487 0837                            u4945 0F96  
                          u4785 0A1F                            u5497 082A                            u4874 0962  
                          u4955 0FA6                            u4875 0961                            u4965 0FC6  
                          u4975 0FD5                            u4985 0FDF                            _WPUA 020C  
                          _WPUC 020E  __size_of_nrf24l01InterfaceInit 001E                    __CFG_WRT$OFF 0000  
                 __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 098C                            ___sp 216D  
                          _main 0EBE                            _ftoa 0515                    ___ftpack@arg 0026  
                          _loop 0428                    ___ftpack@exp 0029                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          fsr1l 0006                            btemp 0074                   __CFG_BORV$LOW 0000  
                          start 0032           nrf24l01SetRXPipe@pipe 0071             __size_of_EEPROMRead 000C  
                 __CFG_CSWEN$ON 0000               ___bmul@multiplier 0072                   __CFG_MCLRE$ON 0000  
                  ___ftmul@cntr 0055                    ___ftmul@sign 0056     __size_of_nrf24l01SendPacket 0043  
                         ??_ISR 0020                    ___fttol@exp1 0060            __size_of_getADCValue 00A5  
                  ___fttol@lval 005C                           ?_main 0070                           ?_ftoa 00A0  
                         ?_loop 0070                 __end_of___ftadd 0428                 __end_of___ftdiv 1000  
               __end_of___ftneg 0829                 __end_of___lldiv 0D4D                 __end_of___ftmul 06B0  
               EEPROMWrite@data 0072                 __end_of___llmod 0BE7                 __end_of___ftsub 0914  
               __end_of___fttol 0EBE                  __CFG_DEBUG$OFF 0000                           i1l303 0C81  
               __end_of___lwmod 0A98                           _TMR1H 001A                           _TMR1L 0019  
                 __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002B  
                 ___awtoft@sign 0073                 __end_of_dpowers 1028                 __end_of_isdigit 0862  
                 ___ftpack@sign 002A                           _rloop 00E4                           ftoa@f 00A0  
                         ftoa@l 00A8                  __CFG_BOREN$OFF 0000                 __end_of_sleepMs 0A6B  
                         ltemp0 0074                           ltemp1 0078                           ltemp2 007C  
                         ltemp3 0076                           ttemp0 0074                           ttemp1 0077  
                         ttemp2 007A                           ttemp3 007D                           status 0003  
                         wtemp0 0074                           wtemp1 0076                           wtemp2 0078  
                         wtemp3 007A                           wtemp4 007C                           wtemp5 007E  
               __end_of_sprintf 022B               getADCValue@adcSum 0048                _nrf24l01SPIStart 0832  
          __size_of_EEPROMWrite 001F                 __initialization 0034          nrf24l01InitRegisters@i 002E  
                  __end_of_main 0F57                    __end_of_ftoa 05FC                    __end_of_loop 0515  
                        ??_main 0063                   ___fttol@sign1 005B                          ??_ftoa 0074  
                        ??_loop 0074                    ?_sendMessage 00B1        __size_of_nrf24l01SPISend 000F  
              ___llmod@dividend 0037                          _ADRESH 009C                          _ADRESL 009B  
              __end_of___awtoft 09EC                          _ANSELA 018C                          _ANSELC 018E  
              __end_of___ftpack 0DB2                __end_of___lbtoft 08D9                __end_of___lltoft 0A3F  
                        _ODCONA 028C        __size_of_nrf24l01GetPipe 0034                          _ODCONC 028E  
                        i1l4710 0C82                          i1l4720 0C9B                          i1l4712 0C85  
                        i1l4724 0CA7                          i1l4726 0CA9                          i1l4814 0025  
                        i1l4728 0CAC                          i1l4808 001E                          _INLVLA 038C  
                        _INLVLC 038E                __end_of___lwtoft 08BE        __size_of_nrf24l01Service 00AA  
          __size_of_nrf24l01ISR 0046                          ___bmul 0871                          ___ftge 0B68  
                        ___wmul 0914                       ??___ftadd 0031                  __CFG_STVREN$ON 0000  
                     ??___ftdiv 003B                       ??___ftneg 0074                       ??___lldiv 0070  
                     ??___ftmul 0074                       ??___llmod 0070                       ??___ftsub 0074  
                     ??___fttol 0074                       ??___lwmod 0074            __end_of_nrf24l01Init 09CA  
          __end_of_nrf24l01Send 0895                          _memset 0AC7           _nrf24l01InitRegisters 022B  
                        _rcount 00E0                          _rlimit 00E2                          _status 0064  
                        _strcat 0A98                          _strcmp 09EC                          _strcpy 08D9  
                        _strlen 0932                          ftoa@cp 00AC           ___ftmul@f3_as_product 0052  
              __end_of_resetWDT 0820                    ??_EEPROMRead 0072                       ??_isdigit 0070  
                        loop@ta 0223                          loop@vt 0220                       ??_sleepMs 0072  
                     ??_sprintf 0045              getADCValue@adcLoop 0047         __end_of__initialization 0057  
                    ___ftadd@f1 002B                      ___ftadd@f2 002E                      ___ftge@ff1 0026  
                    ___ftge@ff2 0029              getADCValue@channel 0046                      ___ftdiv@f1 0038  
                    ___ftdiv@f2 0035                      ___ftdiv@f3 003D                      ___ftneg@f1 004B  
                    ___awtoft@c 0070                      ___lbtoft@c 002B             ___bmul@multiplicand 0070  
                    ___ftmul@f1 004B                      ___ftmul@f2 004E              __end_of_EEPROMRead 0847  
                    ___ftsub@f1 0038                      ___ftsub@f2 0035                      ___fttol@f1 0057  
                __pcstackCOMMON 0070                    __pidataBANK1 07FF   __size_of_nrf24l01SendTXBuffer 0047  
                    ___lltoft@c 0070              __size_of_hcsr04ISR 0005                      ___lwtoft@c 0070  
                  sprintf@width 0050                      __pbssBANK0 0064                      __pbssBANK1 00DC  
                    __pbssBANK2 0120                      __pbssBANK3 01A0           sendMessage@ftoaStatus 00B8  
            __size_of_exception 000D               ??_nrf24l01GetPipe 0027                      __pmaintext 0EBE  
                    _hcsr04Init 0895                         ?___bmul 0070                         ?___ftge 0026  
                       ?___wmul 0070                 __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0B2D  
             _nrf24l01SetRXPipe 0950          ?_nrf24l01InitRegisters 0070                      __pintentry 0004  
             _nrf24l01SetTXPipe 0C2A                       ?___awtoft 0070                       ?___ftpack 0026  
                     ?___lbtoft 0070              ?_nrf24l01SetRXPipe 0070              ?_nrf24l01SetTXPipe 0070  
                     ?___lltoft 0070             __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00AD  
                       ?_strcpy 0070                       ?___lwtoft 0070           __end_of_n_ADDRESS_MUL 1029  
          __size_of_sendMessage 0085        __end_of_nrf24l01SPIStart 083B             ??_nrf24l01SetRXPipe 0070  
           ??_nrf24l01SetTXPipe 0073                         _NVMADRH 0892                         _NVMADRL 0891  
                       _NVMDATL 0893                         _NVMCON2 0896                         _SSP1BUF 0211  
             __end_of_hcsr04ISR 0813           _nrf24l01InterfaceInit 096E      __end_of_nrf24l01SendPacket 0C2A  
                     ?_resetWDT 0070                   ??_getADCValue 0045           __size_of_nrf24l01Init 001F  
         __size_of_nrf24l01Send 0013       __end_of_nrf24l01SetRXMode 0B68       __end_of_nrf24l01SetRXPipe 096E  
     __end_of_nrf24l01SetTXPipe 0C6D                 __size_of___bmul 0011                 __size_of___ftge 003C  
                       ___ftadd 0332                         ___ftdiv 0F57                         ___ftneg 0820  
                       ___lldiv 0CFA                 __size_of___wmul 001E                         ___ftmul 05FC  
                       ___llmod 0BA4                         ___ftsub 08F6                         ___fttol 0E37  
                       ___lwmod 0A6B                      ??___awtoft 0073                      ??___ftpack 0070  
                    ??___lbtoft 0074                 __size_of_memset 0032          EEPROMWrite@GIEBitValue 0073  
                    ??___lltoft 0074                         __ptext1 09AB                         __ptext2 096E  
                       __ptext3 022B                         __ptext4 0C2A                         __ptext5 0871  
                       __ptext6 0950                         __ptext7 0AF9                         __ptext8 0A6B  
                       __ptext9 0428                      ??___lwtoft 0073                 __size_of_strcat 002F  
               __size_of_strcmp 0029               __end_of_exception 0854                 __size_of_strcpy 001D  
               __size_of_strlen 001E                    __size_of_ISR 002E                       _T1CONbits 001B  
                       _counter 00E6                         _dpowers 1000                         _isdigit 0854  
                     _IOCAFbits 0393                         _romData 00E9                         _sleepMs 0A3F  
                     _IOCAPbits 0391                         _waiting 00E8                         _sprintf 005E  
                       clrloop0 0814            end_of_initialization 0057                         ftoa@buf 013C  
                       ftoa@rem 00A4                    _nrf24l01Init 09AB                    _nrf24l01Send 0882  
                    _romDataMap 0120                   ??_EEPROMWrite 0073                nrf24l01GetPipe@i 002A  
               ___lldiv@divisor 0026                 ___lldiv@counter 0032                      ??_resetWDT 0070  
                   ?_hcsr04Init 0070             __end_of_getADCValue 07FF                       _PORTAbits 000C  
                     _PORTCbits 000E                       _TRISAbits 008C                       _TRISCbits 008E  
              __CFG_FEXTOSC$OFF 0000                   ??_nrf24l01ISR 0070          ?_nrf24l01InterfaceInit 0070  
                   ___ftdiv@exp 0040                      main@packet 00BB      __size_of_nrf24l01SetRXMode 003B  
    __size_of_nrf24l01SetRXPipe 001E                     ___ftmul@exp 0051      __size_of_nrf24l01SetTXPipe 0043  
           __end_of_EEPROMWrite 09AB                  __end_of___bmul 0882                  __end_of___ftge 0BA4  
                __end_of___wmul 0932                  __end_of_memset 0AF9                  __end_of_strcat 0AC7  
                __end_of_strcmp 0A15                    _lastTXPacket 0069                  __end_of_strcpy 08F6  
                __end_of_strlen 0950             start_initialization 0034                 _nrf24l01SPISend 0862  
                   __end_of_ISR 0032    __end_of_nrf24l01SendTXBuffer 0CFA                      ftoa@status 00A3  
     nrf24l01SetRXPipe@enRXAddr 0072             __size_of_hcsr04Init 0014                 _nrf24l01GetPipe 0AF9  
       __size_of_nrf24l01SPIEnd 0009                 ___llmod@divisor 0033                 ___llmod@counter 0070  
               _nrf24l01Service 06B0         ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000  
                   _getADCValue 075A                        ??___bmul 0071                        ??___ftge 0070  
           __end_of_nrf24l01ISR 0CB3                        ??___wmul 0074                     __pdataBANK1 00E9  
                      ??_strcat 0074                        ??_strcpy 0074               __size_of___awtoft 0022  
             __size_of___ftpack 0065               __size_of___lbtoft 001B               __size_of___lltoft 002A  
                     ___latbits 0002               __size_of___lwtoft 0015                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK4 0220                    _isdigit$2025 0070  
                   sprintf@flag 0049                     sprintf@prec 0052                      loop@packet 022C  
                   _EEPROMWrite 098C             nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028  
                     _hcsr04ISR 080E               __size_of_resetWDT 0007                        ?___ftadd 002B  
                      ?___ftdiv 0035                        ?___ftneg 004B                        ?___lldiv 0026  
                      ?___ftmul 004B                        ?___llmod 0033                        ?___ftsub 0035  
                      ?___fttol 0057                        ?___lwmod 0070            __end_of_n_ADDRESS_P0 103F  
       __end_of_nrf24l01SPISend 0871       nrf24l01InitRegisters@enAA 002C                   ??_sendMessage 0074  
            _nrf24l01SendPacket 0BE7             sleepMs@milliseconds 0070         __end_of_nrf24l01GetPipe 0B2D  
                      ?_isdigit 0070                       _loop$2273 0226                       _loop$2274 0229  
                      ?_sleepMs 0070                       _exception 0847             ?_nrf24l01SendPacket 0028  
                      ?_sprintf 003B              EEPROMWrite@address 0070         __end_of_nrf24l01Service 075A  
                ___wmul@product 0026                     _nrf24l01ISR 0C6D                       clear_ram0 0813  
                      _PIE0bits 0090                        _PIE1bits 0091                        _PIR0bits 0010  
                      _PIR1bits 0011                      ?_hcsr04ISR 0070                    ??_hcsr04Init 0070  
          ??_nrf24l01SendPacket 0074                       _testCount 00DE            _nrf24l01SendTXBuffer 0CB3  
   nrf24l01SendPacket@loopCount 002A                      _ADCON0bits 009D                      _ADCON1bits 009E  
             ___wmul@multiplier 0070                        _WPUAbits 020C                        _RXPacket 01A0  
                      _TXPacket 01C1                      ?_exception 0070             __end_of_sendMessage 0E37  
            __end_of_hcsr04Init 08A9         ??_nrf24l01InterfaceInit 0070                  _nrf24l01SPIEnd 0829  
             EEPROMRead@address 0070                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
              __size_of___ftneg 0009                __size_of___lldiv 0053                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 0087  
              __size_of___lwmod 002D                        ___awtoft 09CA                        ___ftpack 0D4D  
                      ___lbtoft 08BE                        ___int_sp 22AF                        ___lltoft 0A15  
                    _ANSELAbits 018C                        ___lwtoft 08A9                      _ANSELCbits 018E  
                    _EEPROMRead 083B                ?_nrf24l01GetPipe 0070                      sprintf@val 004B  
                 _n_ADDRESS_MUL 1028                      strcat@from 00AF                __size_of_isdigit 000E  
                      __ptext10 0DB2                        __ptext11 0A98                        __ptext20 0832  
                      __ptext12 0BE7                        __ptext21 0862                        __ptext13 08D9  
                    _T1GCONbits 001C                        __ptext30 0BA4                        __ptext22 0829  
                      __ptext14 06B0                        __ptext31 0CFA                        __ptext23 0AC7  
                      __ptext15 09EC                        __ptext40 0819                        __ptext32 0A15  
                      __ptext24 0847                        __ptext16 0CB3                        __ptext41 0F57  
                      __ptext33 0E37                        __ptext25 098C                        __ptext17 0932  
                      __ptext50 0C6D                        __ptext42 0332                        __ptext34 08F6  
                      __ptext26 0515                        __ptext18 0B2D                        __ptext51 080E  
                      __ptext43 09CA                        __ptext35 0820                        __ptext27 005E  
                      __ptext19 0882                        __ptext44 08A9                        __ptext36 05FC  
                      __ptext28 0854                        __ptext45 0895                        __ptext37 0B68  
                      __ptext29 0914                        __ptext46 08BE                        __ptext38 075A  
                      __ptext47 0D4D                        __ptext39 0A3F                        __ptext48 083B  
              __size_of_sleepMs 002C                    _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 0832  
                      _distance 00DC                __size_of_sprintf 01CD                     _OSCCON1bits 0919  
                    strcpy@from 0072                   __size_of_main 0099                   __size_of_ftoa 00E7  
                 __size_of_loop 00ED    nrf24l01InitRegisters@channel 0028    nrf24l01InitRegisters@feature 002A  
                  sleepMs@wdtps 0073              exception@exception 0026                      _RC0PPSbits 0EA0  
                      _resetWDT 0819                     ??_hcsr04ISR 0070    nrf24l01InitRegisters@rfSetup 002B  
                    _RC1PPSbits 0EA1                    ?_getADCValue 0042                      _RC2PPSbits 0EA2  
__size_of_nrf24l01InitRegisters 0107   __end_of_nrf24l01InitRegisters 0332    nrf24l01InitRegisters@setupAW 0029  
                    _ODCONAbits 028C                    _SSP1STATbits 0214                        main@pipe 00BA  
    nrf24l01SendPacket@txPacket 0028                     _sendMessage 0DB2                      _INTCONbits 000B  
                   _NVMCON1bits 0895                      _FVRCONbits 0117                     ??_exception 0074  
                __pstringtext10 0000                        isdigit@c 0071                        intlevel1 0000  
                     sprintf@ap 004A                       sprintf@sp 004F                    _n_ADDRESS_P0 103A  
              ___lwmod@dividend 0072                ___lldiv@dividend 002A                    ?_EEPROMWrite 0070  
             __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0009                   __pstringtext1 1000  
                 __pstringtext2 103A                   __pstringtext3 1028                   __pstringtext4 1034  
                 __pstringtext5 103F                   __pstringtext6 1044                   __pstringtext7 1049  
                 __pstringtext8 104E                   __pstringtext9 1052                        sprintf@c 0054  
                      sprintf@f 003B      nrf24l01InitRegisters@DynPD 002D                        strcat@cp 0061  
                      strcat@to 00AD                     ?_EEPROMRead 0070                ___lldiv@quotient 002E  
               ___lwmod@divisor 0070                        strcpy@cp 0026                        strcpy@to 0070  
               ___lwmod@counter 0026                      _WDTCONbits 0097                   ?_nrf24l01Init 0070  
                    _STATUSbits 0003                    ?_nrf24l01ISR 0070  
