

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Jul 29 21:25:55 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
    81                           	psect	intentry,global,class=CODE,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	dabs	1,0x7E,2
    99  0000                     
   100                           ; Version 2.00
   101                           ; Generated 27/05/2018 GMT
   102                           ; 
   103                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   104                           ; All rights reserved.
   105                           ; 
   106                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   107                           ; 
   108                           ; Redistribution and use in source and binary forms, with or without modification, are
   109                           ; permitted provided that the following conditions are met:
   110                           ; 
   111                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   112                           ;        conditions and the following disclaimer.
   113                           ; 
   114                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   115                           ;        of conditions and the following disclaimer in the documentation and/or other
   116                           ;        materials provided with the distribution.
   117                           ; 
   118                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   119                           ;        software without specific prior written permission.
   120                           ; 
   121                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   122                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   123                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   124                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   125                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   126                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   127                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   128                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   129                           ; 
   130                           ; 
   131                           ; Code-generator required, PIC16LF18325 Definitions
   132                           ; 
   133                           ; SFR Addresses
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000E                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  001D                     	;# 
   165  001E                     	;# 
   166  001F                     	;# 
   167  008C                     	;# 
   168  008E                     	;# 
   169  0090                     	;# 
   170  0091                     	;# 
   171  0092                     	;# 
   172  0093                     	;# 
   173  0094                     	;# 
   174  0097                     	;# 
   175  009B                     	;# 
   176  009B                     	;# 
   177  009C                     	;# 
   178  009D                     	;# 
   179  009E                     	;# 
   180  009F                     	;# 
   181  010C                     	;# 
   182  010E                     	;# 
   183  0111                     	;# 
   184  0112                     	;# 
   185  0113                     	;# 
   186  0114                     	;# 
   187  0115                     	;# 
   188  0116                     	;# 
   189  0117                     	;# 
   190  0118                     	;# 
   191  0119                     	;# 
   192  018C                     	;# 
   193  018E                     	;# 
   194  0199                     	;# 
   195  0199                     	;# 
   196  0199                     	;# 
   197  019A                     	;# 
   198  019A                     	;# 
   199  019A                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019B                     	;# 
   205  019C                     	;# 
   206  019C                     	;# 
   207  019C                     	;# 
   208  019D                     	;# 
   209  019D                     	;# 
   210  019D                     	;# 
   211  019E                     	;# 
   212  019E                     	;# 
   213  019E                     	;# 
   214  019F                     	;# 
   215  019F                     	;# 
   216  019F                     	;# 
   217  019F                     	;# 
   218  019F                     	;# 
   219  020C                     	;# 
   220  020E                     	;# 
   221  0211                     	;# 
   222  0211                     	;# 
   223  0212                     	;# 
   224  0212                     	;# 
   225  0213                     	;# 
   226  0213                     	;# 
   227  0214                     	;# 
   228  0214                     	;# 
   229  0215                     	;# 
   230  0215                     	;# 
   231  0215                     	;# 
   232  0215                     	;# 
   233  0216                     	;# 
   234  0216                     	;# 
   235  0217                     	;# 
   236  0217                     	;# 
   237  0219                     	;# 
   238  021A                     	;# 
   239  021B                     	;# 
   240  021C                     	;# 
   241  021D                     	;# 
   242  021D                     	;# 
   243  021E                     	;# 
   244  021F                     	;# 
   245  028C                     	;# 
   246  028E                     	;# 
   247  0291                     	;# 
   248  0291                     	;# 
   249  0292                     	;# 
   250  0293                     	;# 
   251  0294                     	;# 
   252  0295                     	;# 
   253  0295                     	;# 
   254  0296                     	;# 
   255  0297                     	;# 
   256  0298                     	;# 
   257  029F                     	;# 
   258  030C                     	;# 
   259  030E                     	;# 
   260  0311                     	;# 
   261  0311                     	;# 
   262  0312                     	;# 
   263  0313                     	;# 
   264  0314                     	;# 
   265  0315                     	;# 
   266  0315                     	;# 
   267  0316                     	;# 
   268  0317                     	;# 
   269  0318                     	;# 
   270  038C                     	;# 
   271  038E                     	;# 
   272  0391                     	;# 
   273  0392                     	;# 
   274  0393                     	;# 
   275  0397                     	;# 
   276  0398                     	;# 
   277  0399                     	;# 
   278  039A                     	;# 
   279  039C                     	;# 
   280  039D                     	;# 
   281  039E                     	;# 
   282  039F                     	;# 
   283  0411                     	;# 
   284  0411                     	;# 
   285  0412                     	;# 
   286  0413                     	;# 
   287  0414                     	;# 
   288  0415                     	;# 
   289  0416                     	;# 
   290  0417                     	;# 
   291  0418                     	;# 
   292  0418                     	;# 
   293  0419                     	;# 
   294  041A                     	;# 
   295  041B                     	;# 
   296  041C                     	;# 
   297  041D                     	;# 
   298  041E                     	;# 
   299  041F                     	;# 
   300  0498                     	;# 
   301  0498                     	;# 
   302  0499                     	;# 
   303  049A                     	;# 
   304  049B                     	;# 
   305  049B                     	;# 
   306  049C                     	;# 
   307  049D                     	;# 
   308  049E                     	;# 
   309  049F                     	;# 
   310  0617                     	;# 
   311  0618                     	;# 
   312  0619                     	;# 
   313  0619                     	;# 
   314  061A                     	;# 
   315  061B                     	;# 
   316  061C                     	;# 
   317  061C                     	;# 
   318  061F                     	;# 
   319  0691                     	;# 
   320  0692                     	;# 
   321  0693                     	;# 
   322  0694                     	;# 
   323  0695                     	;# 
   324  0696                     	;# 
   325  0697                     	;# 
   326  0698                     	;# 
   327  0699                     	;# 
   328  0711                     	;# 
   329  0712                     	;# 
   330  0713                     	;# 
   331  0714                     	;# 
   332  0715                     	;# 
   333  0716                     	;# 
   334  0717                     	;# 
   335  0718                     	;# 
   336  0719                     	;# 
   337  0891                     	;# 
   338  0891                     	;# 
   339  0891                     	;# 
   340  0891                     	;# 
   341  0891                     	;# 
   342  0891                     	;# 
   343  0892                     	;# 
   344  0892                     	;# 
   345  0892                     	;# 
   346  0893                     	;# 
   347  0893                     	;# 
   348  0893                     	;# 
   349  0893                     	;# 
   350  0893                     	;# 
   351  0893                     	;# 
   352  0894                     	;# 
   353  0894                     	;# 
   354  0894                     	;# 
   355  0895                     	;# 
   356  0895                     	;# 
   357  0895                     	;# 
   358  0896                     	;# 
   359  0896                     	;# 
   360  0896                     	;# 
   361  089B                     	;# 
   362  0911                     	;# 
   363  0912                     	;# 
   364  0913                     	;# 
   365  0914                     	;# 
   366  0915                     	;# 
   367  0916                     	;# 
   368  0918                     	;# 
   369  0919                     	;# 
   370  091A                     	;# 
   371  091B                     	;# 
   372  091C                     	;# 
   373  091D                     	;# 
   374  091E                     	;# 
   375  091F                     	;# 
   376  0E0F                     	;# 
   377  0E10                     	;# 
   378  0E11                     	;# 
   379  0E12                     	;# 
   380  0E13                     	;# 
   381  0E14                     	;# 
   382  0E15                     	;# 
   383  0E16                     	;# 
   384  0E17                     	;# 
   385  0E18                     	;# 
   386  0E19                     	;# 
   387  0E1A                     	;# 
   388  0E1B                     	;# 
   389  0E1C                     	;# 
   390  0E1D                     	;# 
   391  0E1E                     	;# 
   392  0E1F                     	;# 
   393  0E20                     	;# 
   394  0E21                     	;# 
   395  0E22                     	;# 
   396  0E24                     	;# 
   397  0E25                     	;# 
   398  0E28                     	;# 
   399  0E29                     	;# 
   400  0E2A                     	;# 
   401  0E2B                     	;# 
   402  0E2C                     	;# 
   403  0E2D                     	;# 
   404  0E2E                     	;# 
   405  0E2F                     	;# 
   406  0E90                     	;# 
   407  0E91                     	;# 
   408  0E92                     	;# 
   409  0E94                     	;# 
   410  0E95                     	;# 
   411  0EA0                     	;# 
   412  0EA1                     	;# 
   413  0EA2                     	;# 
   414  0EA3                     	;# 
   415  0EA4                     	;# 
   416  0EA5                     	;# 
   417  0F0F                     	;# 
   418  0F10                     	;# 
   419  0F11                     	;# 
   420  0F12                     	;# 
   421  0F13                     	;# 
   422  0F14                     	;# 
   423  0F15                     	;# 
   424  0F16                     	;# 
   425  0F17                     	;# 
   426  0F18                     	;# 
   427  0F19                     	;# 
   428  0F1A                     	;# 
   429  0F1B                     	;# 
   430  0F1C                     	;# 
   431  0F1D                     	;# 
   432  0F1E                     	;# 
   433  0F1F                     	;# 
   434  0F20                     	;# 
   435  0F21                     	;# 
   436  0F22                     	;# 
   437  0F23                     	;# 
   438  0F24                     	;# 
   439  0F25                     	;# 
   440  0F26                     	;# 
   441  0F27                     	;# 
   442  0F28                     	;# 
   443  0F29                     	;# 
   444  0F2A                     	;# 
   445  0F2B                     	;# 
   446  0F2C                     	;# 
   447  0F2D                     	;# 
   448  0F2E                     	;# 
   449  0F2F                     	;# 
   450  0F30                     	;# 
   451  0F31                     	;# 
   452  0F32                     	;# 
   453  0F33                     	;# 
   454  0F34                     	;# 
   455  0F35                     	;# 
   456  0F36                     	;# 
   457  0F37                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE9                     	;# 
   464  0FEA                     	;# 
   465  0FEB                     	;# 
   466  0FED                     	;# 
   467  0FEE                     	;# 
   468  0FEF                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  0008                     	;# 
   478  0009                     	;# 
   479  000A                     	;# 
   480  000B                     	;# 
   481  000C                     	;# 
   482  000E                     	;# 
   483  0010                     	;# 
   484  0011                     	;# 
   485  0012                     	;# 
   486  0013                     	;# 
   487  0014                     	;# 
   488  0015                     	;# 
   489  0015                     	;# 
   490  0016                     	;# 
   491  0016                     	;# 
   492  0017                     	;# 
   493  0018                     	;# 
   494  0019                     	;# 
   495  0019                     	;# 
   496  001A                     	;# 
   497  001B                     	;# 
   498  001C                     	;# 
   499  001D                     	;# 
   500  001E                     	;# 
   501  001F                     	;# 
   502  008C                     	;# 
   503  008E                     	;# 
   504  0090                     	;# 
   505  0091                     	;# 
   506  0092                     	;# 
   507  0093                     	;# 
   508  0094                     	;# 
   509  0097                     	;# 
   510  009B                     	;# 
   511  009B                     	;# 
   512  009C                     	;# 
   513  009D                     	;# 
   514  009E                     	;# 
   515  009F                     	;# 
   516  010C                     	;# 
   517  010E                     	;# 
   518  0111                     	;# 
   519  0112                     	;# 
   520  0113                     	;# 
   521  0114                     	;# 
   522  0115                     	;# 
   523  0116                     	;# 
   524  0117                     	;# 
   525  0118                     	;# 
   526  0119                     	;# 
   527  018C                     	;# 
   528  018E                     	;# 
   529  0199                     	;# 
   530  0199                     	;# 
   531  0199                     	;# 
   532  019A                     	;# 
   533  019A                     	;# 
   534  019A                     	;# 
   535  019B                     	;# 
   536  019B                     	;# 
   537  019B                     	;# 
   538  019B                     	;# 
   539  019B                     	;# 
   540  019C                     	;# 
   541  019C                     	;# 
   542  019C                     	;# 
   543  019D                     	;# 
   544  019D                     	;# 
   545  019D                     	;# 
   546  019E                     	;# 
   547  019E                     	;# 
   548  019E                     	;# 
   549  019F                     	;# 
   550  019F                     	;# 
   551  019F                     	;# 
   552  019F                     	;# 
   553  019F                     	;# 
   554  020C                     	;# 
   555  020E                     	;# 
   556  0211                     	;# 
   557  0211                     	;# 
   558  0212                     	;# 
   559  0212                     	;# 
   560  0213                     	;# 
   561  0213                     	;# 
   562  0214                     	;# 
   563  0214                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0215                     	;# 
   567  0215                     	;# 
   568  0216                     	;# 
   569  0216                     	;# 
   570  0217                     	;# 
   571  0217                     	;# 
   572  0219                     	;# 
   573  021A                     	;# 
   574  021B                     	;# 
   575  021C                     	;# 
   576  021D                     	;# 
   577  021D                     	;# 
   578  021E                     	;# 
   579  021F                     	;# 
   580  028C                     	;# 
   581  028E                     	;# 
   582  0291                     	;# 
   583  0291                     	;# 
   584  0292                     	;# 
   585  0293                     	;# 
   586  0294                     	;# 
   587  0295                     	;# 
   588  0295                     	;# 
   589  0296                     	;# 
   590  0297                     	;# 
   591  0298                     	;# 
   592  029F                     	;# 
   593  030C                     	;# 
   594  030E                     	;# 
   595  0311                     	;# 
   596  0311                     	;# 
   597  0312                     	;# 
   598  0313                     	;# 
   599  0314                     	;# 
   600  0315                     	;# 
   601  0315                     	;# 
   602  0316                     	;# 
   603  0317                     	;# 
   604  0318                     	;# 
   605  038C                     	;# 
   606  038E                     	;# 
   607  0391                     	;# 
   608  0392                     	;# 
   609  0393                     	;# 
   610  0397                     	;# 
   611  0398                     	;# 
   612  0399                     	;# 
   613  039A                     	;# 
   614  039C                     	;# 
   615  039D                     	;# 
   616  039E                     	;# 
   617  039F                     	;# 
   618  0411                     	;# 
   619  0411                     	;# 
   620  0412                     	;# 
   621  0413                     	;# 
   622  0414                     	;# 
   623  0415                     	;# 
   624  0416                     	;# 
   625  0417                     	;# 
   626  0418                     	;# 
   627  0418                     	;# 
   628  0419                     	;# 
   629  041A                     	;# 
   630  041B                     	;# 
   631  041C                     	;# 
   632  041D                     	;# 
   633  041E                     	;# 
   634  041F                     	;# 
   635  0498                     	;# 
   636  0498                     	;# 
   637  0499                     	;# 
   638  049A                     	;# 
   639  049B                     	;# 
   640  049B                     	;# 
   641  049C                     	;# 
   642  049D                     	;# 
   643  049E                     	;# 
   644  049F                     	;# 
   645  0617                     	;# 
   646  0618                     	;# 
   647  0619                     	;# 
   648  0619                     	;# 
   649  061A                     	;# 
   650  061B                     	;# 
   651  061C                     	;# 
   652  061C                     	;# 
   653  061F                     	;# 
   654  0691                     	;# 
   655  0692                     	;# 
   656  0693                     	;# 
   657  0694                     	;# 
   658  0695                     	;# 
   659  0696                     	;# 
   660  0697                     	;# 
   661  0698                     	;# 
   662  0699                     	;# 
   663  0711                     	;# 
   664  0712                     	;# 
   665  0713                     	;# 
   666  0714                     	;# 
   667  0715                     	;# 
   668  0716                     	;# 
   669  0717                     	;# 
   670  0718                     	;# 
   671  0719                     	;# 
   672  0891                     	;# 
   673  0891                     	;# 
   674  0891                     	;# 
   675  0891                     	;# 
   676  0891                     	;# 
   677  0891                     	;# 
   678  0892                     	;# 
   679  0892                     	;# 
   680  0892                     	;# 
   681  0893                     	;# 
   682  0893                     	;# 
   683  0893                     	;# 
   684  0893                     	;# 
   685  0893                     	;# 
   686  0893                     	;# 
   687  0894                     	;# 
   688  0894                     	;# 
   689  0894                     	;# 
   690  0895                     	;# 
   691  0895                     	;# 
   692  0895                     	;# 
   693  0896                     	;# 
   694  0896                     	;# 
   695  0896                     	;# 
   696  089B                     	;# 
   697  0911                     	;# 
   698  0912                     	;# 
   699  0913                     	;# 
   700  0914                     	;# 
   701  0915                     	;# 
   702  0916                     	;# 
   703  0918                     	;# 
   704  0919                     	;# 
   705  091A                     	;# 
   706  091B                     	;# 
   707  091C                     	;# 
   708  091D                     	;# 
   709  091E                     	;# 
   710  091F                     	;# 
   711  0E0F                     	;# 
   712  0E10                     	;# 
   713  0E11                     	;# 
   714  0E12                     	;# 
   715  0E13                     	;# 
   716  0E14                     	;# 
   717  0E15                     	;# 
   718  0E16                     	;# 
   719  0E17                     	;# 
   720  0E18                     	;# 
   721  0E19                     	;# 
   722  0E1A                     	;# 
   723  0E1B                     	;# 
   724  0E1C                     	;# 
   725  0E1D                     	;# 
   726  0E1E                     	;# 
   727  0E1F                     	;# 
   728  0E20                     	;# 
   729  0E21                     	;# 
   730  0E22                     	;# 
   731  0E24                     	;# 
   732  0E25                     	;# 
   733  0E28                     	;# 
   734  0E29                     	;# 
   735  0E2A                     	;# 
   736  0E2B                     	;# 
   737  0E2C                     	;# 
   738  0E2D                     	;# 
   739  0E2E                     	;# 
   740  0E2F                     	;# 
   741  0E90                     	;# 
   742  0E91                     	;# 
   743  0E92                     	;# 
   744  0E94                     	;# 
   745  0E95                     	;# 
   746  0EA0                     	;# 
   747  0EA1                     	;# 
   748  0EA2                     	;# 
   749  0EA3                     	;# 
   750  0EA4                     	;# 
   751  0EA5                     	;# 
   752  0F0F                     	;# 
   753  0F10                     	;# 
   754  0F11                     	;# 
   755  0F12                     	;# 
   756  0F13                     	;# 
   757  0F14                     	;# 
   758  0F15                     	;# 
   759  0F16                     	;# 
   760  0F17                     	;# 
   761  0F18                     	;# 
   762  0F19                     	;# 
   763  0F1A                     	;# 
   764  0F1B                     	;# 
   765  0F1C                     	;# 
   766  0F1D                     	;# 
   767  0F1E                     	;# 
   768  0F1F                     	;# 
   769  0F20                     	;# 
   770  0F21                     	;# 
   771  0F22                     	;# 
   772  0F23                     	;# 
   773  0F24                     	;# 
   774  0F25                     	;# 
   775  0F26                     	;# 
   776  0F27                     	;# 
   777  0F28                     	;# 
   778  0F29                     	;# 
   779  0F2A                     	;# 
   780  0F2B                     	;# 
   781  0F2C                     	;# 
   782  0F2D                     	;# 
   783  0F2E                     	;# 
   784  0F2F                     	;# 
   785  0F30                     	;# 
   786  0F31                     	;# 
   787  0F32                     	;# 
   788  0F33                     	;# 
   789  0F34                     	;# 
   790  0F35                     	;# 
   791  0F36                     	;# 
   792  0F37                     	;# 
   793  0FE4                     	;# 
   794  0FE5                     	;# 
   795  0FE6                     	;# 
   796  0FE7                     	;# 
   797  0FE8                     	;# 
   798  0FE9                     	;# 
   799  0FEA                     	;# 
   800  0FEB                     	;# 
   801  0FED                     	;# 
   802  0FEE                     	;# 
   803  0FEF                     	;# 
   804  0000                     	;# 
   805  0001                     	;# 
   806  0002                     	;# 
   807  0003                     	;# 
   808  0004                     	;# 
   809  0005                     	;# 
   810  0006                     	;# 
   811  0007                     	;# 
   812  0008                     	;# 
   813  0009                     	;# 
   814  000A                     	;# 
   815  000B                     	;# 
   816  000C                     	;# 
   817  000E                     	;# 
   818  0010                     	;# 
   819  0011                     	;# 
   820  0012                     	;# 
   821  0013                     	;# 
   822  0014                     	;# 
   823  0015                     	;# 
   824  0015                     	;# 
   825  0016                     	;# 
   826  0016                     	;# 
   827  0017                     	;# 
   828  0018                     	;# 
   829  0019                     	;# 
   830  0019                     	;# 
   831  001A                     	;# 
   832  001B                     	;# 
   833  001C                     	;# 
   834  001D                     	;# 
   835  001E                     	;# 
   836  001F                     	;# 
   837  008C                     	;# 
   838  008E                     	;# 
   839  0090                     	;# 
   840  0091                     	;# 
   841  0092                     	;# 
   842  0093                     	;# 
   843  0094                     	;# 
   844  0097                     	;# 
   845  009B                     	;# 
   846  009B                     	;# 
   847  009C                     	;# 
   848  009D                     	;# 
   849  009E                     	;# 
   850  009F                     	;# 
   851  010C                     	;# 
   852  010E                     	;# 
   853  0111                     	;# 
   854  0112                     	;# 
   855  0113                     	;# 
   856  0114                     	;# 
   857  0115                     	;# 
   858  0116                     	;# 
   859  0117                     	;# 
   860  0118                     	;# 
   861  0119                     	;# 
   862  018C                     	;# 
   863  018E                     	;# 
   864  0199                     	;# 
   865  0199                     	;# 
   866  0199                     	;# 
   867  019A                     	;# 
   868  019A                     	;# 
   869  019A                     	;# 
   870  019B                     	;# 
   871  019B                     	;# 
   872  019B                     	;# 
   873  019B                     	;# 
   874  019B                     	;# 
   875  019C                     	;# 
   876  019C                     	;# 
   877  019C                     	;# 
   878  019D                     	;# 
   879  019D                     	;# 
   880  019D                     	;# 
   881  019E                     	;# 
   882  019E                     	;# 
   883  019E                     	;# 
   884  019F                     	;# 
   885  019F                     	;# 
   886  019F                     	;# 
   887  019F                     	;# 
   888  019F                     	;# 
   889  020C                     	;# 
   890  020E                     	;# 
   891  0211                     	;# 
   892  0211                     	;# 
   893  0212                     	;# 
   894  0212                     	;# 
   895  0213                     	;# 
   896  0213                     	;# 
   897  0214                     	;# 
   898  0214                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0216                     	;# 
   904  0216                     	;# 
   905  0217                     	;# 
   906  0217                     	;# 
   907  0219                     	;# 
   908  021A                     	;# 
   909  021B                     	;# 
   910  021C                     	;# 
   911  021D                     	;# 
   912  021D                     	;# 
   913  021E                     	;# 
   914  021F                     	;# 
   915  028C                     	;# 
   916  028E                     	;# 
   917  0291                     	;# 
   918  0291                     	;# 
   919  0292                     	;# 
   920  0293                     	;# 
   921  0294                     	;# 
   922  0295                     	;# 
   923  0295                     	;# 
   924  0296                     	;# 
   925  0297                     	;# 
   926  0298                     	;# 
   927  029F                     	;# 
   928  030C                     	;# 
   929  030E                     	;# 
   930  0311                     	;# 
   931  0311                     	;# 
   932  0312                     	;# 
   933  0313                     	;# 
   934  0314                     	;# 
   935  0315                     	;# 
   936  0315                     	;# 
   937  0316                     	;# 
   938  0317                     	;# 
   939  0318                     	;# 
   940  038C                     	;# 
   941  038E                     	;# 
   942  0391                     	;# 
   943  0392                     	;# 
   944  0393                     	;# 
   945  0397                     	;# 
   946  0398                     	;# 
   947  0399                     	;# 
   948  039A                     	;# 
   949  039C                     	;# 
   950  039D                     	;# 
   951  039E                     	;# 
   952  039F                     	;# 
   953  0411                     	;# 
   954  0411                     	;# 
   955  0412                     	;# 
   956  0413                     	;# 
   957  0414                     	;# 
   958  0415                     	;# 
   959  0416                     	;# 
   960  0417                     	;# 
   961  0418                     	;# 
   962  0418                     	;# 
   963  0419                     	;# 
   964  041A                     	;# 
   965  041B                     	;# 
   966  041C                     	;# 
   967  041D                     	;# 
   968  041E                     	;# 
   969  041F                     	;# 
   970  0498                     	;# 
   971  0498                     	;# 
   972  0499                     	;# 
   973  049A                     	;# 
   974  049B                     	;# 
   975  049B                     	;# 
   976  049C                     	;# 
   977  049D                     	;# 
   978  049E                     	;# 
   979  049F                     	;# 
   980  0617                     	;# 
   981  0618                     	;# 
   982  0619                     	;# 
   983  0619                     	;# 
   984  061A                     	;# 
   985  061B                     	;# 
   986  061C                     	;# 
   987  061C                     	;# 
   988  061F                     	;# 
   989  0691                     	;# 
   990  0692                     	;# 
   991  0693                     	;# 
   992  0694                     	;# 
   993  0695                     	;# 
   994  0696                     	;# 
   995  0697                     	;# 
   996  0698                     	;# 
   997  0699                     	;# 
   998  0711                     	;# 
   999  0712                     	;# 
  1000  0713                     	;# 
  1001  0714                     	;# 
  1002  0715                     	;# 
  1003  0716                     	;# 
  1004  0717                     	;# 
  1005  0718                     	;# 
  1006  0719                     	;# 
  1007  0891                     	;# 
  1008  0891                     	;# 
  1009  0891                     	;# 
  1010  0891                     	;# 
  1011  0891                     	;# 
  1012  0891                     	;# 
  1013  0892                     	;# 
  1014  0892                     	;# 
  1015  0892                     	;# 
  1016  0893                     	;# 
  1017  0893                     	;# 
  1018  0893                     	;# 
  1019  0893                     	;# 
  1020  0893                     	;# 
  1021  0893                     	;# 
  1022  0894                     	;# 
  1023  0894                     	;# 
  1024  0894                     	;# 
  1025  0895                     	;# 
  1026  0895                     	;# 
  1027  0895                     	;# 
  1028  0896                     	;# 
  1029  0896                     	;# 
  1030  0896                     	;# 
  1031  089B                     	;# 
  1032  0911                     	;# 
  1033  0912                     	;# 
  1034  0913                     	;# 
  1035  0914                     	;# 
  1036  0915                     	;# 
  1037  0916                     	;# 
  1038  0918                     	;# 
  1039  0919                     	;# 
  1040  091A                     	;# 
  1041  091B                     	;# 
  1042  091C                     	;# 
  1043  091D                     	;# 
  1044  091E                     	;# 
  1045  091F                     	;# 
  1046  0E0F                     	;# 
  1047  0E10                     	;# 
  1048  0E11                     	;# 
  1049  0E12                     	;# 
  1050  0E13                     	;# 
  1051  0E14                     	;# 
  1052  0E15                     	;# 
  1053  0E16                     	;# 
  1054  0E17                     	;# 
  1055  0E18                     	;# 
  1056  0E19                     	;# 
  1057  0E1A                     	;# 
  1058  0E1B                     	;# 
  1059  0E1C                     	;# 
  1060  0E1D                     	;# 
  1061  0E1E                     	;# 
  1062  0E1F                     	;# 
  1063  0E20                     	;# 
  1064  0E21                     	;# 
  1065  0E22                     	;# 
  1066  0E24                     	;# 
  1067  0E25                     	;# 
  1068  0E28                     	;# 
  1069  0E29                     	;# 
  1070  0E2A                     	;# 
  1071  0E2B                     	;# 
  1072  0E2C                     	;# 
  1073  0E2D                     	;# 
  1074  0E2E                     	;# 
  1075  0E2F                     	;# 
  1076  0E90                     	;# 
  1077  0E91                     	;# 
  1078  0E92                     	;# 
  1079  0E94                     	;# 
  1080  0E95                     	;# 
  1081  0EA0                     	;# 
  1082  0EA1                     	;# 
  1083  0EA2                     	;# 
  1084  0EA3                     	;# 
  1085  0EA4                     	;# 
  1086  0EA5                     	;# 
  1087  0F0F                     	;# 
  1088  0F10                     	;# 
  1089  0F11                     	;# 
  1090  0F12                     	;# 
  1091  0F13                     	;# 
  1092  0F14                     	;# 
  1093  0F15                     	;# 
  1094  0F16                     	;# 
  1095  0F17                     	;# 
  1096  0F18                     	;# 
  1097  0F19                     	;# 
  1098  0F1A                     	;# 
  1099  0F1B                     	;# 
  1100  0F1C                     	;# 
  1101  0F1D                     	;# 
  1102  0F1E                     	;# 
  1103  0F1F                     	;# 
  1104  0F20                     	;# 
  1105  0F21                     	;# 
  1106  0F22                     	;# 
  1107  0F23                     	;# 
  1108  0F24                     	;# 
  1109  0F25                     	;# 
  1110  0F26                     	;# 
  1111  0F27                     	;# 
  1112  0F28                     	;# 
  1113  0F29                     	;# 
  1114  0F2A                     	;# 
  1115  0F2B                     	;# 
  1116  0F2C                     	;# 
  1117  0F2D                     	;# 
  1118  0F2E                     	;# 
  1119  0F2F                     	;# 
  1120  0F30                     	;# 
  1121  0F31                     	;# 
  1122  0F32                     	;# 
  1123  0F33                     	;# 
  1124  0F34                     	;# 
  1125  0F35                     	;# 
  1126  0F36                     	;# 
  1127  0F37                     	;# 
  1128  0FE4                     	;# 
  1129  0FE5                     	;# 
  1130  0FE6                     	;# 
  1131  0FE7                     	;# 
  1132  0FE8                     	;# 
  1133  0FE9                     	;# 
  1134  0FEA                     	;# 
  1135  0FEB                     	;# 
  1136  0FED                     	;# 
  1137  0FEE                     	;# 
  1138  0FEF                     	;# 
  1139  0000                     	;# 
  1140  0001                     	;# 
  1141  0002                     	;# 
  1142  0003                     	;# 
  1143  0004                     	;# 
  1144  0005                     	;# 
  1145  0006                     	;# 
  1146  0007                     	;# 
  1147  0008                     	;# 
  1148  0009                     	;# 
  1149  000A                     	;# 
  1150  000B                     	;# 
  1151  000C                     	;# 
  1152  000E                     	;# 
  1153  0010                     	;# 
  1154  0011                     	;# 
  1155  0012                     	;# 
  1156  0013                     	;# 
  1157  0014                     	;# 
  1158  0015                     	;# 
  1159  0015                     	;# 
  1160  0016                     	;# 
  1161  0016                     	;# 
  1162  0017                     	;# 
  1163  0018                     	;# 
  1164  0019                     	;# 
  1165  0019                     	;# 
  1166  001A                     	;# 
  1167  001B                     	;# 
  1168  001C                     	;# 
  1169  001D                     	;# 
  1170  001E                     	;# 
  1171  001F                     	;# 
  1172  008C                     	;# 
  1173  008E                     	;# 
  1174  0090                     	;# 
  1175  0091                     	;# 
  1176  0092                     	;# 
  1177  0093                     	;# 
  1178  0094                     	;# 
  1179  0097                     	;# 
  1180  009B                     	;# 
  1181  009B                     	;# 
  1182  009C                     	;# 
  1183  009D                     	;# 
  1184  009E                     	;# 
  1185  009F                     	;# 
  1186  010C                     	;# 
  1187  010E                     	;# 
  1188  0111                     	;# 
  1189  0112                     	;# 
  1190  0113                     	;# 
  1191  0114                     	;# 
  1192  0115                     	;# 
  1193  0116                     	;# 
  1194  0117                     	;# 
  1195  0118                     	;# 
  1196  0119                     	;# 
  1197  018C                     	;# 
  1198  018E                     	;# 
  1199  0199                     	;# 
  1200  0199                     	;# 
  1201  0199                     	;# 
  1202  019A                     	;# 
  1203  019A                     	;# 
  1204  019A                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019C                     	;# 
  1211  019C                     	;# 
  1212  019C                     	;# 
  1213  019D                     	;# 
  1214  019D                     	;# 
  1215  019D                     	;# 
  1216  019E                     	;# 
  1217  019E                     	;# 
  1218  019E                     	;# 
  1219  019F                     	;# 
  1220  019F                     	;# 
  1221  019F                     	;# 
  1222  019F                     	;# 
  1223  019F                     	;# 
  1224  020C                     	;# 
  1225  020E                     	;# 
  1226  0211                     	;# 
  1227  0211                     	;# 
  1228  0212                     	;# 
  1229  0212                     	;# 
  1230  0213                     	;# 
  1231  0213                     	;# 
  1232  0214                     	;# 
  1233  0214                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0216                     	;# 
  1239  0216                     	;# 
  1240  0217                     	;# 
  1241  0217                     	;# 
  1242  0219                     	;# 
  1243  021A                     	;# 
  1244  021B                     	;# 
  1245  021C                     	;# 
  1246  021D                     	;# 
  1247  021D                     	;# 
  1248  021E                     	;# 
  1249  021F                     	;# 
  1250  028C                     	;# 
  1251  028E                     	;# 
  1252  0291                     	;# 
  1253  0291                     	;# 
  1254  0292                     	;# 
  1255  0293                     	;# 
  1256  0294                     	;# 
  1257  0295                     	;# 
  1258  0295                     	;# 
  1259  0296                     	;# 
  1260  0297                     	;# 
  1261  0298                     	;# 
  1262  029F                     	;# 
  1263  030C                     	;# 
  1264  030E                     	;# 
  1265  0311                     	;# 
  1266  0311                     	;# 
  1267  0312                     	;# 
  1268  0313                     	;# 
  1269  0314                     	;# 
  1270  0315                     	;# 
  1271  0315                     	;# 
  1272  0316                     	;# 
  1273  0317                     	;# 
  1274  0318                     	;# 
  1275  038C                     	;# 
  1276  038E                     	;# 
  1277  0391                     	;# 
  1278  0392                     	;# 
  1279  0393                     	;# 
  1280  0397                     	;# 
  1281  0398                     	;# 
  1282  0399                     	;# 
  1283  039A                     	;# 
  1284  039C                     	;# 
  1285  039D                     	;# 
  1286  039E                     	;# 
  1287  039F                     	;# 
  1288  0411                     	;# 
  1289  0411                     	;# 
  1290  0412                     	;# 
  1291  0413                     	;# 
  1292  0414                     	;# 
  1293  0415                     	;# 
  1294  0416                     	;# 
  1295  0417                     	;# 
  1296  0418                     	;# 
  1297  0418                     	;# 
  1298  0419                     	;# 
  1299  041A                     	;# 
  1300  041B                     	;# 
  1301  041C                     	;# 
  1302  041D                     	;# 
  1303  041E                     	;# 
  1304  041F                     	;# 
  1305  0498                     	;# 
  1306  0498                     	;# 
  1307  0499                     	;# 
  1308  049A                     	;# 
  1309  049B                     	;# 
  1310  049B                     	;# 
  1311  049C                     	;# 
  1312  049D                     	;# 
  1313  049E                     	;# 
  1314  049F                     	;# 
  1315  0617                     	;# 
  1316  0618                     	;# 
  1317  0619                     	;# 
  1318  0619                     	;# 
  1319  061A                     	;# 
  1320  061B                     	;# 
  1321  061C                     	;# 
  1322  061C                     	;# 
  1323  061F                     	;# 
  1324  0691                     	;# 
  1325  0692                     	;# 
  1326  0693                     	;# 
  1327  0694                     	;# 
  1328  0695                     	;# 
  1329  0696                     	;# 
  1330  0697                     	;# 
  1331  0698                     	;# 
  1332  0699                     	;# 
  1333  0711                     	;# 
  1334  0712                     	;# 
  1335  0713                     	;# 
  1336  0714                     	;# 
  1337  0715                     	;# 
  1338  0716                     	;# 
  1339  0717                     	;# 
  1340  0718                     	;# 
  1341  0719                     	;# 
  1342  0891                     	;# 
  1343  0891                     	;# 
  1344  0891                     	;# 
  1345  0891                     	;# 
  1346  0891                     	;# 
  1347  0891                     	;# 
  1348  0892                     	;# 
  1349  0892                     	;# 
  1350  0892                     	;# 
  1351  0893                     	;# 
  1352  0893                     	;# 
  1353  0893                     	;# 
  1354  0893                     	;# 
  1355  0893                     	;# 
  1356  0893                     	;# 
  1357  0894                     	;# 
  1358  0894                     	;# 
  1359  0894                     	;# 
  1360  0895                     	;# 
  1361  0895                     	;# 
  1362  0895                     	;# 
  1363  0896                     	;# 
  1364  0896                     	;# 
  1365  0896                     	;# 
  1366  089B                     	;# 
  1367  0911                     	;# 
  1368  0912                     	;# 
  1369  0913                     	;# 
  1370  0914                     	;# 
  1371  0915                     	;# 
  1372  0916                     	;# 
  1373  0918                     	;# 
  1374  0919                     	;# 
  1375  091A                     	;# 
  1376  091B                     	;# 
  1377  091C                     	;# 
  1378  091D                     	;# 
  1379  091E                     	;# 
  1380  091F                     	;# 
  1381  0E0F                     	;# 
  1382  0E10                     	;# 
  1383  0E11                     	;# 
  1384  0E12                     	;# 
  1385  0E13                     	;# 
  1386  0E14                     	;# 
  1387  0E15                     	;# 
  1388  0E16                     	;# 
  1389  0E17                     	;# 
  1390  0E18                     	;# 
  1391  0E19                     	;# 
  1392  0E1A                     	;# 
  1393  0E1B                     	;# 
  1394  0E1C                     	;# 
  1395  0E1D                     	;# 
  1396  0E1E                     	;# 
  1397  0E1F                     	;# 
  1398  0E20                     	;# 
  1399  0E21                     	;# 
  1400  0E22                     	;# 
  1401  0E24                     	;# 
  1402  0E25                     	;# 
  1403  0E28                     	;# 
  1404  0E29                     	;# 
  1405  0E2A                     	;# 
  1406  0E2B                     	;# 
  1407  0E2C                     	;# 
  1408  0E2D                     	;# 
  1409  0E2E                     	;# 
  1410  0E2F                     	;# 
  1411  0E90                     	;# 
  1412  0E91                     	;# 
  1413  0E92                     	;# 
  1414  0E94                     	;# 
  1415  0E95                     	;# 
  1416  0EA0                     	;# 
  1417  0EA1                     	;# 
  1418  0EA2                     	;# 
  1419  0EA3                     	;# 
  1420  0EA4                     	;# 
  1421  0EA5                     	;# 
  1422  0F0F                     	;# 
  1423  0F10                     	;# 
  1424  0F11                     	;# 
  1425  0F12                     	;# 
  1426  0F13                     	;# 
  1427  0F14                     	;# 
  1428  0F15                     	;# 
  1429  0F16                     	;# 
  1430  0F17                     	;# 
  1431  0F18                     	;# 
  1432  0F19                     	;# 
  1433  0F1A                     	;# 
  1434  0F1B                     	;# 
  1435  0F1C                     	;# 
  1436  0F1D                     	;# 
  1437  0F1E                     	;# 
  1438  0F1F                     	;# 
  1439  0F20                     	;# 
  1440  0F21                     	;# 
  1441  0F22                     	;# 
  1442  0F23                     	;# 
  1443  0F24                     	;# 
  1444  0F25                     	;# 
  1445  0F26                     	;# 
  1446  0F27                     	;# 
  1447  0F28                     	;# 
  1448  0F29                     	;# 
  1449  0F2A                     	;# 
  1450  0F2B                     	;# 
  1451  0F2C                     	;# 
  1452  0F2D                     	;# 
  1453  0F2E                     	;# 
  1454  0F2F                     	;# 
  1455  0F30                     	;# 
  1456  0F31                     	;# 
  1457  0F32                     	;# 
  1458  0F33                     	;# 
  1459  0F34                     	;# 
  1460  0F35                     	;# 
  1461  0F36                     	;# 
  1462  0F37                     	;# 
  1463  0FE4                     	;# 
  1464  0FE5                     	;# 
  1465  0FE6                     	;# 
  1466  0FE7                     	;# 
  1467  0FE8                     	;# 
  1468  0FE9                     	;# 
  1469  0FEA                     	;# 
  1470  0FEB                     	;# 
  1471  0FED                     	;# 
  1472  0FEE                     	;# 
  1473  0FEF                     	;# 
  1474  0000                     	;# 
  1475  0001                     	;# 
  1476  0002                     	;# 
  1477  0003                     	;# 
  1478  0004                     	;# 
  1479  0005                     	;# 
  1480  0006                     	;# 
  1481  0007                     	;# 
  1482  0008                     	;# 
  1483  0009                     	;# 
  1484  000A                     	;# 
  1485  000B                     	;# 
  1486  000C                     	;# 
  1487  000E                     	;# 
  1488  0010                     	;# 
  1489  0011                     	;# 
  1490  0012                     	;# 
  1491  0013                     	;# 
  1492  0014                     	;# 
  1493  0015                     	;# 
  1494  0015                     	;# 
  1495  0016                     	;# 
  1496  0016                     	;# 
  1497  0017                     	;# 
  1498  0018                     	;# 
  1499  0019                     	;# 
  1500  0019                     	;# 
  1501  001A                     	;# 
  1502  001B                     	;# 
  1503  001C                     	;# 
  1504  001D                     	;# 
  1505  001E                     	;# 
  1506  001F                     	;# 
  1507  008C                     	;# 
  1508  008E                     	;# 
  1509  0090                     	;# 
  1510  0091                     	;# 
  1511  0092                     	;# 
  1512  0093                     	;# 
  1513  0094                     	;# 
  1514  0097                     	;# 
  1515  009B                     	;# 
  1516  009B                     	;# 
  1517  009C                     	;# 
  1518  009D                     	;# 
  1519  009E                     	;# 
  1520  009F                     	;# 
  1521  010C                     	;# 
  1522  010E                     	;# 
  1523  0111                     	;# 
  1524  0112                     	;# 
  1525  0113                     	;# 
  1526  0114                     	;# 
  1527  0115                     	;# 
  1528  0116                     	;# 
  1529  0117                     	;# 
  1530  0118                     	;# 
  1531  0119                     	;# 
  1532  018C                     	;# 
  1533  018E                     	;# 
  1534  0199                     	;# 
  1535  0199                     	;# 
  1536  0199                     	;# 
  1537  019A                     	;# 
  1538  019A                     	;# 
  1539  019A                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019B                     	;# 
  1543  019B                     	;# 
  1544  019B                     	;# 
  1545  019C                     	;# 
  1546  019C                     	;# 
  1547  019C                     	;# 
  1548  019D                     	;# 
  1549  019D                     	;# 
  1550  019D                     	;# 
  1551  019E                     	;# 
  1552  019E                     	;# 
  1553  019E                     	;# 
  1554  019F                     	;# 
  1555  019F                     	;# 
  1556  019F                     	;# 
  1557  019F                     	;# 
  1558  019F                     	;# 
  1559  020C                     	;# 
  1560  020E                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0216                     	;# 
  1574  0216                     	;# 
  1575  0217                     	;# 
  1576  0217                     	;# 
  1577  0219                     	;# 
  1578  021A                     	;# 
  1579  021B                     	;# 
  1580  021C                     	;# 
  1581  021D                     	;# 
  1582  021D                     	;# 
  1583  021E                     	;# 
  1584  021F                     	;# 
  1585  028C                     	;# 
  1586  028E                     	;# 
  1587  0291                     	;# 
  1588  0291                     	;# 
  1589  0292                     	;# 
  1590  0293                     	;# 
  1591  0294                     	;# 
  1592  0295                     	;# 
  1593  0295                     	;# 
  1594  0296                     	;# 
  1595  0297                     	;# 
  1596  0298                     	;# 
  1597  029F                     	;# 
  1598  030C                     	;# 
  1599  030E                     	;# 
  1600  0311                     	;# 
  1601  0311                     	;# 
  1602  0312                     	;# 
  1603  0313                     	;# 
  1604  0314                     	;# 
  1605  0315                     	;# 
  1606  0315                     	;# 
  1607  0316                     	;# 
  1608  0317                     	;# 
  1609  0318                     	;# 
  1610  038C                     	;# 
  1611  038E                     	;# 
  1612  0391                     	;# 
  1613  0392                     	;# 
  1614  0393                     	;# 
  1615  0397                     	;# 
  1616  0398                     	;# 
  1617  0399                     	;# 
  1618  039A                     	;# 
  1619  039C                     	;# 
  1620  039D                     	;# 
  1621  039E                     	;# 
  1622  039F                     	;# 
  1623  0411                     	;# 
  1624  0411                     	;# 
  1625  0412                     	;# 
  1626  0413                     	;# 
  1627  0414                     	;# 
  1628  0415                     	;# 
  1629  0416                     	;# 
  1630  0417                     	;# 
  1631  0418                     	;# 
  1632  0418                     	;# 
  1633  0419                     	;# 
  1634  041A                     	;# 
  1635  041B                     	;# 
  1636  041C                     	;# 
  1637  041D                     	;# 
  1638  041E                     	;# 
  1639  041F                     	;# 
  1640  0498                     	;# 
  1641  0498                     	;# 
  1642  0499                     	;# 
  1643  049A                     	;# 
  1644  049B                     	;# 
  1645  049B                     	;# 
  1646  049C                     	;# 
  1647  049D                     	;# 
  1648  049E                     	;# 
  1649  049F                     	;# 
  1650  0617                     	;# 
  1651  0618                     	;# 
  1652  0619                     	;# 
  1653  0619                     	;# 
  1654  061A                     	;# 
  1655  061B                     	;# 
  1656  061C                     	;# 
  1657  061C                     	;# 
  1658  061F                     	;# 
  1659  0691                     	;# 
  1660  0692                     	;# 
  1661  0693                     	;# 
  1662  0694                     	;# 
  1663  0695                     	;# 
  1664  0696                     	;# 
  1665  0697                     	;# 
  1666  0698                     	;# 
  1667  0699                     	;# 
  1668  0711                     	;# 
  1669  0712                     	;# 
  1670  0713                     	;# 
  1671  0714                     	;# 
  1672  0715                     	;# 
  1673  0716                     	;# 
  1674  0717                     	;# 
  1675  0718                     	;# 
  1676  0719                     	;# 
  1677  0891                     	;# 
  1678  0891                     	;# 
  1679  0891                     	;# 
  1680  0891                     	;# 
  1681  0891                     	;# 
  1682  0891                     	;# 
  1683  0892                     	;# 
  1684  0892                     	;# 
  1685  0892                     	;# 
  1686  0893                     	;# 
  1687  0893                     	;# 
  1688  0893                     	;# 
  1689  0893                     	;# 
  1690  0893                     	;# 
  1691  0893                     	;# 
  1692  0894                     	;# 
  1693  0894                     	;# 
  1694  0894                     	;# 
  1695  0895                     	;# 
  1696  0895                     	;# 
  1697  0895                     	;# 
  1698  0896                     	;# 
  1699  0896                     	;# 
  1700  0896                     	;# 
  1701  089B                     	;# 
  1702  0911                     	;# 
  1703  0912                     	;# 
  1704  0913                     	;# 
  1705  0914                     	;# 
  1706  0915                     	;# 
  1707  0916                     	;# 
  1708  0918                     	;# 
  1709  0919                     	;# 
  1710  091A                     	;# 
  1711  091B                     	;# 
  1712  091C                     	;# 
  1713  091D                     	;# 
  1714  091E                     	;# 
  1715  091F                     	;# 
  1716  0E0F                     	;# 
  1717  0E10                     	;# 
  1718  0E11                     	;# 
  1719  0E12                     	;# 
  1720  0E13                     	;# 
  1721  0E14                     	;# 
  1722  0E15                     	;# 
  1723  0E16                     	;# 
  1724  0E17                     	;# 
  1725  0E18                     	;# 
  1726  0E19                     	;# 
  1727  0E1A                     	;# 
  1728  0E1B                     	;# 
  1729  0E1C                     	;# 
  1730  0E1D                     	;# 
  1731  0E1E                     	;# 
  1732  0E1F                     	;# 
  1733  0E20                     	;# 
  1734  0E21                     	;# 
  1735  0E22                     	;# 
  1736  0E24                     	;# 
  1737  0E25                     	;# 
  1738  0E28                     	;# 
  1739  0E29                     	;# 
  1740  0E2A                     	;# 
  1741  0E2B                     	;# 
  1742  0E2C                     	;# 
  1743  0E2D                     	;# 
  1744  0E2E                     	;# 
  1745  0E2F                     	;# 
  1746  0E90                     	;# 
  1747  0E91                     	;# 
  1748  0E92                     	;# 
  1749  0E94                     	;# 
  1750  0E95                     	;# 
  1751  0EA0                     	;# 
  1752  0EA1                     	;# 
  1753  0EA2                     	;# 
  1754  0EA3                     	;# 
  1755  0EA4                     	;# 
  1756  0EA5                     	;# 
  1757  0F0F                     	;# 
  1758  0F10                     	;# 
  1759  0F11                     	;# 
  1760  0F12                     	;# 
  1761  0F13                     	;# 
  1762  0F14                     	;# 
  1763  0F15                     	;# 
  1764  0F16                     	;# 
  1765  0F17                     	;# 
  1766  0F18                     	;# 
  1767  0F19                     	;# 
  1768  0F1A                     	;# 
  1769  0F1B                     	;# 
  1770  0F1C                     	;# 
  1771  0F1D                     	;# 
  1772  0F1E                     	;# 
  1773  0F1F                     	;# 
  1774  0F20                     	;# 
  1775  0F21                     	;# 
  1776  0F22                     	;# 
  1777  0F23                     	;# 
  1778  0F24                     	;# 
  1779  0F25                     	;# 
  1780  0F26                     	;# 
  1781  0F27                     	;# 
  1782  0F28                     	;# 
  1783  0F29                     	;# 
  1784  0F2A                     	;# 
  1785  0F2B                     	;# 
  1786  0F2C                     	;# 
  1787  0F2D                     	;# 
  1788  0F2E                     	;# 
  1789  0F2F                     	;# 
  1790  0F30                     	;# 
  1791  0F31                     	;# 
  1792  0F32                     	;# 
  1793  0F33                     	;# 
  1794  0F34                     	;# 
  1795  0F35                     	;# 
  1796  0F36                     	;# 
  1797  0F37                     	;# 
  1798  0FE4                     	;# 
  1799  0FE5                     	;# 
  1800  0FE6                     	;# 
  1801  0FE7                     	;# 
  1802  0FE8                     	;# 
  1803  0FE9                     	;# 
  1804  0FEA                     	;# 
  1805  0FEB                     	;# 
  1806  0FED                     	;# 
  1807  0FEE                     	;# 
  1808  0FEF                     	;# 
  1809                           
  1810                           	psect	idataBANK1
  1811  0801                     __pidataBANK1:	
  1812                           
  1813                           ;initializer for _romData
  1814  0801  34C1               	retlw	low (_romDataMap| (0+256))
  1815                           
  1816                           	psect	stringtext1
  1817  1800                     __pstringtext1:	
  1818  1800                     _dpowers:	
  1819  1800  3401               	retlw	1
  1820  1801  3400               	retlw	0
  1821  1802  3400               	retlw	0
  1822  1803  3400               	retlw	0
  1823  1804  340A               	retlw	10
  1824  1805  3400               	retlw	0
  1825  1806  3400               	retlw	0
  1826  1807  3400               	retlw	0
  1827  1808  3464               	retlw	100
  1828  1809  3400               	retlw	0
  1829  180A  3400               	retlw	0
  1830  180B  3400               	retlw	0
  1831  180C  34E8               	retlw	232
  1832  180D  3403               	retlw	3
  1833  180E  3400               	retlw	0
  1834  180F  3400               	retlw	0
  1835  1810  3410               	retlw	16
  1836  1811  3427               	retlw	39
  1837  1812  3400               	retlw	0
  1838  1813  3400               	retlw	0
  1839  1814  34A0               	retlw	160
  1840  1815  3486               	retlw	134
  1841  1816  3401               	retlw	1
  1842  1817  3400               	retlw	0
  1843  1818  3440               	retlw	64
  1844  1819  3442               	retlw	66
  1845  181A  340F               	retlw	15
  1846  181B  3400               	retlw	0
  1847  181C  3480               	retlw	128
  1848  181D  3496               	retlw	150
  1849  181E  3498               	retlw	152
  1850  181F  3400               	retlw	0
  1851  1820  3400               	retlw	0
  1852  1821  34E1               	retlw	225
  1853  1822  34F5               	retlw	245
  1854  1823  3405               	retlw	5
  1855  1824  3400               	retlw	0
  1856  1825  34CA               	retlw	202
  1857  1826  349A               	retlw	154
  1858  1827  343B               	retlw	59
  1859  1828                     __end_of_dpowers:	
  1860                           
  1861                           	psect	stringtext2
  1862  1841                     __pstringtext2:	
  1863  1841                     _n_ADDRESS_P0:	
  1864  1841  34AD               	retlw	173
  1865  1842  3487               	retlw	135
  1866  1843  3466               	retlw	102
  1867  1844  34BC               	retlw	188
  1868  1845  34BB               	retlw	187
  1869  1846                     __end_of_n_ADDRESS_P0:	
  1870                           
  1871                           	psect	stringtext3
  1872  1828                     __pstringtext3:	
  1873  1828                     _n_ADDRESS_MUL:	
  1874  1828  3421               	retlw	33
  1875  1829                     __end_of_n_ADDRESS_MUL:	
  1876  000B                     _INTCONbits	set	11
  1877  0003                     _STATUS	set	3
  1878  0010                     _PIR0bits	set	16
  1879  000E                     _PORTCbits	set	14
  1880  000C                     _PORTAbits	set	12
  1881  009E                     _ADCON1bits	set	158
  1882  009C                     _ADRESH	set	156
  1883  009B                     _ADRESL	set	155
  1884  009D                     _ADCON0bits	set	157
  1885  0097                     _WDTCONbits	set	151
  1886  0090                     _PIE0bits	set	144
  1887  008E                     _TRISCbits	set	142
  1888  008C                     _TRISAbits	set	140
  1889  0117                     _FVRCONbits	set	279
  1890  018E                     _ANSELCbits	set	398
  1891  018C                     _ANSELAbits	set	396
  1892  018E                     _ANSELC	set	398
  1893  018C                     _ANSELA	set	396
  1894  020C                     _WPUAbits	set	524
  1895  020E                     _WPUC	set	526
  1896  020C                     _WPUA	set	524
  1897  0211                     _SSP1BUF	set	529
  1898  0214                     _SSP1STATbits	set	532
  1899  0215                     _SSP1CON1bits	set	533
  1900  028C                     _ODCONAbits	set	652
  1901  028E                     _ODCONC	set	654
  1902  028C                     _ODCONA	set	652
  1903  038E                     _INLVLC	set	910
  1904  038C                     _INLVLA	set	908
  1905  0919                     _OSCCON1bits	set	2329
  1906  0EA0                     _RC0PPSbits	set	3744
  1907  0EA2                     _RC2PPSbits	set	3746
  1908  0EA1                     _RC1PPSbits	set	3745
  1909  1829                     STR_13:	
  1910  1829  3425               	retlw	37	;'%'
  1911  182A  346C               	retlw	108	;'l'
  1912  182B  3475               	retlw	117	;'u'
  1913  182C  342E               	retlw	46	;'.'
  1914  182D  3425               	retlw	37	;'%'
  1915  182E  3436               	retlw	54	;'6'
  1916  182F  342E               	retlw	46	;'.'
  1917  1830  3436               	retlw	54	;'6'
  1918  1831  346C               	retlw	108	;'l'
  1919  1832  3475               	retlw	117	;'u'
  1920  1833  3400               	retlw	0
  1921                           
  1922                           	psect	stringtext4
  1923  1834                     __pstringtext4:	
  1924  1834                     STR_9:	
  1925  1834  3441               	retlw	65	;'A'
  1926  1835  344E               	retlw	78	;'N'
  1927  1836  3443               	retlw	67	;'C'
  1928  1837  3433               	retlw	51	;'3'
  1929  1838  346D               	retlw	109	;'m'
  1930  1839  3456               	retlw	86	;'V'
  1931  183A  3400               	retlw	0
  1932                           
  1933                           	psect	stringtext5
  1934  183B                     __pstringtext5:	
  1935  183B                     STR_10:	
  1936  183B  3452               	retlw	82	;'R'
  1937  183C  3446               	retlw	70	;'F'
  1938  183D  3450               	retlw	80	;'P'
  1939  183E  3457               	retlw	87	;'W'
  1940  183F  3452               	retlw	82	;'R'
  1941  1840  3400               	retlw	0
  1942                           
  1943                           	psect	stringtext6
  1944  1846                     __pstringtext6:	
  1945  1846                     STR_7:	
  1946  1846  3454               	retlw	84	;'T'
  1947  1847  3445               	retlw	69	;'E'
  1948  1848  344D               	retlw	77	;'M'
  1949  1849  3450               	retlw	80	;'P'
  1950  184A  3400               	retlw	0
  1951                           
  1952                           	psect	stringtext7
  1953  184B                     __pstringtext7:	
  1954  184B                     STR_8:	
  1955  184B  3456               	retlw	86	;'V'
  1956  184C  3442               	retlw	66	;'B'
  1957  184D  3441               	retlw	65	;'A'
  1958  184E  3454               	retlw	84	;'T'
  1959  184F  3400               	retlw	0
  1960                           
  1961                           	psect	stringtext8
  1962  1850                     __pstringtext8:	
  1963  1850                     STR_12:	
  1964  1850  3442               	retlw	66	;'B'
  1965  1851  344F               	retlw	79	;'O'
  1966  1852  344F               	retlw	79	;'O'
  1967  1853  3454               	retlw	84	;'T'
  1968  1854  3400               	retlw	0
  1969                           
  1970                           	psect	stringtext9
  1971  1855                     __pstringtext9:	
  1972  1855                     STR_11:	
  1973  1855  3455               	retlw	85	;'U'
  1974  1856  3448               	retlw	72	;'H'
  1975  1857  3431               	retlw	49	;'1'
  1976  1858  3400               	retlw	0
  1977                           
  1978                           	psect	stringtext10
  1979  1859                     __pstringtext10:	
  1980  1859                     STR_6:	
  1981  1859  3444               	retlw	68	;'D'
  1982  185A  3442               	retlw	66	;'B'
  1983  185B  3447               	retlw	71	;'G'
  1984  185C  3400               	retlw	0
  1985                           
  1986                           	psect	stringtext11
  1987  185D                     __pstringtext11:	
  1988  185D                     STR_1:	
  1989  185D  342F               	retlw	47	;'/'
  1990  185E  3400               	retlw	0
  1991                           
  1992                           	psect	stringtext12
  1993  0000                     __pstringtext12:	
  1994  185D                     
  1995                           ; #config settings
  1996  0000                     
  1997                           	psect	cinit
  1998  0011                     start_initialization:	
  1999  0011                     __initialization:	
  2000                           
  2001                           ; Initialize objects allocated to BANK1
  2002  0011  0021               	movlb	1	; select bank1
  2003  0012  3188  2001  3180   	fcall	__pidataBANK1	;fetch initializer
  2004  0015  00EC               	movwf	__pdataBANK1& (0+127)
  2005                           
  2006                           ; Clear objects allocated to COMMON
  2007  0016  01FD               	clrf	__pbssCOMMON& (0+127)
  2008                           
  2009                           ; Clear objects allocated to BANK1
  2010  0017  01E8               	clrf	__pbssBANK1& (0+127)
  2011  0018  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  2012  0019  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  2013  001A  01EB               	clrf	(__pbssBANK1+3)& (0+127)
  2014                           
  2015                           ; Clear objects allocated to BANK2
  2016  001B  3050               	movlw	low __pbssBANK2
  2017  001C  0084               	movwf	4
  2018  001D  3001               	movlw	high __pbssBANK2
  2019  001E  0085               	movwf	5
  2020  001F  3014               	movlw	20
  2021  0020  3191  21B7  3180   	fcall	clear_ram0
  2022                           
  2023                           ; Clear objects allocated to BANK3
  2024  0023  30A0               	movlw	low __pbssBANK3
  2025  0024  0084               	movwf	4
  2026  0025  3001               	movlw	high __pbssBANK3
  2027  0026  0085               	movwf	5
  2028  0027  303D               	movlw	61
  2029  0028  3191  21B7         	fcall	clear_ram0
  2030  002A                     end_of_initialization:	
  2031                           ;End of C runtime variable initialization code
  2032                           
  2033  002A                     __end_of__initialization:	
  2034  002A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2035  002B  0020               	movlb	0
  2036  002C  318C  2C92         	ljmp	_main	;jump to C main() function
  2037                           
  2038                           	psect	bssCOMMON
  2039  007D                     __pbssCOMMON:	
  2040  007D                     strtok@sp:	
  2041  007D                     	ds	1
  2042                           
  2043                           	psect	bssBANK1
  2044  00E8                     __pbssBANK1:	
  2045  00E8                     _TXPacket:	
  2046  00E8                     	ds	2
  2047  00EA                     _sleepLoop:	
  2048  00EA                     	ds	1
  2049  00EB                     _nrf24l01:	
  2050  00EB                     	ds	1
  2051                           
  2052                           	psect	dataBANK1
  2053  00EC                     __pdataBANK1:	
  2054  00EC                     _romData:	
  2055  00EC                     	ds	1
  2056                           
  2057                           	psect	bssBANK2
  2058  0150                     __pbssBANK2:	
  2059  0150                     _counter:	
  2060  0150                     	ds	3
  2061  0153                     ftoa@buf:	
  2062  0153                     	ds	17
  2063                           
  2064                           	psect	bssBANK3
  2065  01A0                     __pbssBANK3:	
  2066  01A0                     _RXPacket:	
  2067  01A0                     	ds	33
  2068  01C1                     _romDataMap:	
  2069  01C1                     	ds	28
  2070                           
  2071                           	psect	clrtext
  2072  11B7                     clear_ram0:	
  2073                           ;	Called with FSR0 containing the base address, and
  2074                           ;	WREG with the size to clear
  2075                           
  2076  11B7  0064               	clrwdt	;clear the watchdog before getting into this loop
  2077  11B8                     clrloop0:	
  2078  11B8  0180               	clrf	0	;clear RAM location pointed to by FSR
  2079  11B9  3101               	addfsr 0,1
  2080  11BA  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2081  11BB  29B8               	goto	clrloop0	;have we reached the end yet?
  2082  11BC  3400               	retlw	0	;all done for this memory range, return
  2083                           
  2084                           	psect	cstackBANK2
  2085  0120                     __pcstackBANK2:	
  2086  0120                     loop@vt:	
  2087                           
  2088                           ; 3 bytes @ 0x0
  2089  0120                     	ds	3
  2090  0123                     loop@ta:	
  2091                           
  2092                           ; 3 bytes @ 0x3
  2093  0123                     	ds	3
  2094  0126                     _loop$2138:	
  2095                           
  2096                           ; 3 bytes @ 0x6
  2097  0126                     	ds	3
  2098  0129                     _loop$2139:	
  2099                           
  2100                           ; 3 bytes @ 0x9
  2101  0129                     	ds	3
  2102  012C                     loop@rfSetup:	
  2103                           
  2104                           ; 1 bytes @ 0xC
  2105  012C                     	ds	1
  2106  012D                     _loop$899:	
  2107                           
  2108                           ; 2 bytes @ 0xD
  2109  012D                     	ds	2
  2110  012F                     loop@packet:	
  2111                           
  2112                           ; 33 bytes @ 0xF
  2113  012F                     	ds	33
  2114                           
  2115                           	psect	cstackBANK1
  2116  00A0                     __pcstackBANK1:	
  2117  00A0                     ___fttol@sign1:	
  2118  00A0                     strtod@eexp:	
  2119                           ; 1 bytes @ 0x0
  2120                           
  2121                           
  2122                           ; 1 bytes @ 0x0
  2123  00A0                     	ds	1
  2124  00A1                     strtod@flags:	
  2125  00A1                     ___fttol@lval:	
  2126                           ; 1 bytes @ 0x1
  2127                           
  2128                           
  2129                           ; 4 bytes @ 0x1
  2130  00A1                     	ds	1
  2131  00A2                     strtod@expon:	
  2132                           
  2133                           ; 1 bytes @ 0x2
  2134  00A2                     	ds	1
  2135  00A3                     strtod@_u:	
  2136                           
  2137                           ; 4 bytes @ 0x3
  2138  00A3                     	ds	2
  2139  00A5                     ___fttol@exp1:	
  2140                           
  2141                           ; 1 bytes @ 0x5
  2142  00A5                     	ds	1
  2143  00A6                     ?_ftoa:	
  2144  00A6                     ftoa@f:	
  2145                           ; 1 bytes @ 0x6
  2146                           
  2147                           
  2148                           ; 3 bytes @ 0x6
  2149  00A6                     	ds	1
  2150  00A7                     strtod@s:	
  2151                           
  2152                           ; 1 bytes @ 0x7
  2153  00A7                     	ds	1
  2154  00A8                     ?_atof:	
  2155                           
  2156                           ; 3 bytes @ 0x8
  2157  00A8                     	ds	1
  2158  00A9                     ftoa@status:	
  2159                           
  2160                           ; 1 bytes @ 0x9
  2161  00A9                     	ds	1
  2162  00AA                     ftoa@rem:	
  2163                           
  2164                           ; 4 bytes @ 0xA
  2165  00AA                     	ds	2
  2166  00AC                     handleRXData@string:	
  2167                           
  2168                           ; 16 bytes @ 0xC
  2169  00AC                     	ds	2
  2170  00AE                     ftoa@l:	
  2171                           
  2172                           ; 4 bytes @ 0xE
  2173  00AE                     	ds	4
  2174  00B2                     ftoa@cp:	
  2175                           
  2176                           ; 1 bytes @ 0x12
  2177  00B2                     	ds	1
  2178  00B3                     ?_strcat:	
  2179  00B3                     strcat@to:	
  2180                           ; 2 bytes @ 0x13
  2181                           
  2182                           
  2183                           ; 2 bytes @ 0x13
  2184  00B3                     	ds	2
  2185  00B5                     strcat@from:	
  2186                           
  2187                           ; 2 bytes @ 0x15
  2188  00B5                     	ds	2
  2189  00B7                     strcat@cp:	
  2190                           
  2191                           ; 2 bytes @ 0x17
  2192  00B7                     	ds	2
  2193  00B9                     ?_setMessage:	
  2194  00B9                     setMessage@packet:	
  2195                           ; 1 bytes @ 0x19
  2196                           
  2197                           
  2198                           ; 2 bytes @ 0x19
  2199  00B9                     	ds	2
  2200  00BB                     setMessage@topic:	
  2201                           
  2202                           ; 2 bytes @ 0x1B
  2203  00BB                     	ds	1
  2204  00BC                     handleRXData@RXPacket:	
  2205                           
  2206                           ; 1 bytes @ 0x1C
  2207  00BC                     	ds	1
  2208  00BD                     handleRXData@strings:	
  2209  00BD                     setMessage@value:	
  2210                           ; 1 bytes @ 0x1D
  2211                           
  2212                           
  2213                           ; 3 bytes @ 0x1D
  2214  00BD                     	ds	1
  2215  00BE                     ?_sleep:	
  2216  00BE                     sleep@milliseconds:	
  2217                           ; 1 bytes @ 0x1E
  2218                           
  2219                           
  2220                           ; 2 bytes @ 0x1E
  2221  00BE                     	ds	2
  2222  00C0                     ??_setMessage:	
  2223                           
  2224                           ; 1 bytes @ 0x20
  2225  00C0                     	ds	1
  2226  00C1                     setMessage@status:	
  2227                           
  2228                           ; 2 bytes @ 0x21
  2229  00C1                     	ds	2
  2230  00C3                     ??_loop:	
  2231                           
  2232                           ; 1 bytes @ 0x23
  2233  00C3                     	ds	1
  2234  00C4                     ??_main:	
  2235                           
  2236                           ; 1 bytes @ 0x24
  2237  00C4                     	ds	1
  2238  00C5                     main@bootStatus:	
  2239                           
  2240                           ; 1 bytes @ 0x25
  2241  00C5                     	ds	1
  2242  00C6                     main@pipe:	
  2243                           
  2244                           ; 1 bytes @ 0x26
  2245  00C6                     	ds	1
  2246  00C7                     main@packet:	
  2247                           
  2248                           ; 33 bytes @ 0x27
  2249  00C7                     	ds	33
  2250                           
  2251                           	psect	cstackCOMMON
  2252  0070                     __pcstackCOMMON:	
  2253  0070                     ?_isdigit:	
  2254  0070                     ?_isspace:	
  2255                           ; 1 bit 
  2256                           
  2257  0070                     ?_nrf24l01ISR:	
  2258                           ; 1 bit 
  2259                           
  2260  0070                     ?_nrf24l01GetRXPacket:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0070                     ?_nrf24l01SendACK:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0070                     ?_nrf24l01SetRXMode:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0070                     ?_nrf24l01Init:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0070                     ?_nrf24l01SetTXPipe:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0070                     ?_nrf24l01SetRXPipe:	
  2276                           ; 1 bytes @ 0x0
  2277                           
  2278  0070                     ?_nrf24l01CELow:	
  2279                           ; 1 bytes @ 0x0
  2280                           
  2281  0070                     ??_nrf24l01CELow:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  0070                     ?_nrf24l01CEHigh:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  0070                     ??_nrf24l01CEHigh:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0070                     ?_nrf24l01CSLow:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0070                     ??_nrf24l01CSLow:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0070                     ?_nrf24l01CSHigh:	
  2297                           ; 1 bytes @ 0x0
  2298                           
  2299  0070                     ??_nrf24l01CSHigh:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0070                     ?_nrf24l01InterfaceInit:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0070                     ?_nrf24l01SPISend:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0070                     ??_nrf24l01SPISend:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0070                     ?_nrf24l01SPIStart:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0070                     ??_nrf24l01SPIStart:	
  2315                           ; 1 bytes @ 0x0
  2316                           
  2317  0070                     ?_nrf24l01SPIEnd:	
  2318                           ; 1 bytes @ 0x0
  2319                           
  2320  0070                     ??_nrf24l01SPIEnd:	
  2321                           ; 1 bytes @ 0x0
  2322                           
  2323  0070                     ?_enableInterrupts:	
  2324                           ; 1 bytes @ 0x0
  2325                           
  2326  0070                     ??_enableInterrupts:	
  2327                           ; 1 bytes @ 0x0
  2328                           
  2329  0070                     ?_exception:	
  2330                           ; 1 bytes @ 0x0
  2331                           
  2332  0070                     ??_exception:	
  2333                           ; 1 bytes @ 0x0
  2334                           
  2335  0070                     ?_ISR:	
  2336                           ; 1 bytes @ 0x0
  2337                           
  2338  0070                     ?_doWDTSleep:	
  2339                           ; 1 bytes @ 0x0
  2340                           
  2341  0070                     ?_handleRXData:	
  2342                           ; 1 bytes @ 0x0
  2343                           
  2344  0070                     ?_checkTXPower:	
  2345                           ; 1 bytes @ 0x0
  2346                           
  2347  0070                     ?_loop:	
  2348                           ; 1 bytes @ 0x0
  2349                           
  2350  0070                     ?_nrf24l01GetPipe:	
  2351                           ; 1 bytes @ 0x0
  2352                           
  2353  0070                     ?_main:	
  2354                           ; 1 bytes @ 0x0
  2355                           
  2356  0070                     ?_nrf24l01CheckACK:	
  2357                           ; 1 bytes @ 0x0
  2358                           
  2359  0070                     ?_nrf24l01ReceivePacket:	
  2360                           ; 1 bytes @ 0x0
  2361                           
  2362  0070                     ?_nrf24l01InitRegisters:	
  2363                           ; 1 bytes @ 0x0
  2364                           
  2365  0070                     ?i1_nrf24l01SetRXMode:	
  2366                           ; 1 bytes @ 0x0
  2367                           
  2368  0070                     ?i1_memset:	
  2369                           ; 1 bytes @ 0x0
  2370                           
  2371  0070                     ?_strcmp:	
  2372                           ; 1 bytes @ 0x0
  2373                           
  2374  0070                     nrf24l01SPISend@data:	
  2375                           ; 2 bytes @ 0x0
  2376                           
  2377  0070                     enableInterrupts@enable:	
  2378                           ; 1 bytes @ 0x0
  2379                           
  2380  0070                     exception@exception:	
  2381                           ; 1 bytes @ 0x0
  2382                           
  2383  0070                     strcmp@s1:	
  2384                           ; 1 bytes @ 0x0
  2385                           
  2386  0070                     i1memset@p1:	
  2387                           ; 2 bytes @ 0x0
  2388                           
  2389                           
  2390                           ; 2 bytes @ 0x0
  2391  0070                     	ds	1
  2392  0071                     ?i1_nrf24l01Send:	
  2393  0071                     i1nrf24l01Send@data:	
  2394                           ; 1 bytes @ 0x1
  2395                           
  2396                           
  2397                           ; 1 bytes @ 0x1
  2398  0071                     	ds	1
  2399  0072                     ??i1_nrf24l01Send:	
  2400  0072                     strcmp@s2:	
  2401                           ; 1 bytes @ 0x2
  2402                           
  2403  0072                     i1memset@c:	
  2404                           ; 1 bytes @ 0x2
  2405                           
  2406                           
  2407                           ; 2 bytes @ 0x2
  2408  0072                     	ds	1
  2409  0073                     ??_strcmp:	
  2410  0073                     i1nrf24l01Send@command:	
  2411                           ; 1 bytes @ 0x3
  2412                           
  2413                           
  2414                           ; 1 bytes @ 0x3
  2415  0073                     	ds	1
  2416  0074                     ??i1_nrf24l01SetRXMode:	
  2417  0074                     strcmp@r:	
  2418                           ; 1 bytes @ 0x4
  2419                           
  2420  0074                     i1memset@n:	
  2421                           ; 1 bytes @ 0x4
  2422                           
  2423                           
  2424                           ; 2 bytes @ 0x4
  2425  0074                     	ds	1
  2426  0075                     i1nrf24l01SetRXMode@config:	
  2427                           
  2428                           ; 1 bytes @ 0x5
  2429  0075                     	ds	1
  2430  0076                     ??i1_memset:	
  2431  0076                     i1nrf24l01SetRXMode@rxMode:	
  2432                           ; 1 bytes @ 0x6
  2433                           
  2434  0076                     i1memset@p:	
  2435                           ; 1 bytes @ 0x6
  2436                           
  2437                           
  2438                           ; 2 bytes @ 0x6
  2439  0076                     	ds	1
  2440  0077                     ??_nrf24l01CheckACK:	
  2441                           
  2442                           ; 1 bytes @ 0x7
  2443  0077                     	ds	1
  2444  0078                     ??_nrf24l01ReceivePacket:	
  2445                           
  2446                           ; 1 bytes @ 0x8
  2447  0078                     	ds	1
  2448  0079                     nrf24l01ReceivePacket@width:	
  2449                           
  2450                           ; 1 bytes @ 0x9
  2451  0079                     	ds	1
  2452  007A                     nrf24l01ReceivePacket@i:	
  2453                           
  2454                           ; 1 bytes @ 0xA
  2455  007A                     	ds	1
  2456  007B                     ??_nrf24l01ISR:	
  2457                           
  2458                           ; 1 bytes @ 0xB
  2459  007B                     	ds	1
  2460  007C                     nrf24l01ISR@status:	
  2461                           
  2462                           ; 1 bytes @ 0xC
  2463  007C                     	ds	1
  2464  007D                     ??_ISR:	
  2465                           
  2466                           	psect	cstackBANK0
  2467  0020                     __pcstackBANK0:	
  2468                           ; 1 bytes @ 0xD
  2469                           
  2470  0020                     ?___ftge:	
  2471  0020                     ??_nrf24l01GetRXPacket:	
  2472                           ; 1 bit 
  2473                           
  2474  0020                     ?_nrf24l01Send:	
  2475                           ; 1 bytes @ 0x0
  2476                           
  2477  0020                     ??_isdigit:	
  2478                           ; 1 bytes @ 0x0
  2479                           
  2480  0020                     ??_isspace:	
  2481                           ; 1 bytes @ 0x0
  2482                           
  2483  0020                     ??_nrf24l01InterfaceInit:	
  2484                           ; 1 bytes @ 0x0
  2485                           
  2486  0020                     ??_doWDTSleep:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0020                     ?___bmul:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492  0020                     ?_strcpy:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495  0020                     ?_memset:	
  2496                           ; 2 bytes @ 0x0
  2497                           
  2498  0020                     ?_strlen:	
  2499                           ; 2 bytes @ 0x0
  2500                           
  2501  0020                     ?_strchr:	
  2502                           ; 2 bytes @ 0x0
  2503                           
  2504  0020                     ?___wmul:	
  2505                           ; 2 bytes @ 0x0
  2506                           
  2507  0020                     ?___lwdiv:	
  2508                           ; 2 bytes @ 0x0
  2509                           
  2510  0020                     ?___lwmod:	
  2511                           ; 2 bytes @ 0x0
  2512                           
  2513  0020                     ?___ftpack:	
  2514                           ; 2 bytes @ 0x0
  2515                           
  2516  0020                     ?___lmul:	
  2517                           ; 3 bytes @ 0x0
  2518                           
  2519  0020                     ?___lldiv:	
  2520                           ; 4 bytes @ 0x0
  2521                           
  2522  0020                     nrf24l01Send@data:	
  2523                           ; 4 bytes @ 0x0
  2524                           
  2525  0020                     ___bmul@multiplicand:	
  2526                           ; 1 bytes @ 0x0
  2527                           
  2528  0020                     _isdigit$1849:	
  2529                           ; 1 bytes @ 0x0
  2530                           
  2531  0020                     _isspace$1852:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534  0020                     ___wmul@multiplier:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0020                     ___lwdiv@divisor:	
  2538                           ; 2 bytes @ 0x0
  2539                           
  2540  0020                     ___lwmod@divisor:	
  2541                           ; 2 bytes @ 0x0
  2542                           
  2543  0020                     memset@p1:	
  2544                           ; 2 bytes @ 0x0
  2545                           
  2546  0020                     strcpy@to:	
  2547                           ; 2 bytes @ 0x0
  2548                           
  2549  0020                     strlen@s:	
  2550                           ; 2 bytes @ 0x0
  2551                           
  2552  0020                     strchr@ptr:	
  2553                           ; 2 bytes @ 0x0
  2554                           
  2555  0020                     ___ftpack@arg:	
  2556                           ; 2 bytes @ 0x0
  2557                           
  2558  0020                     ___ftge@ff1:	
  2559                           ; 3 bytes @ 0x0
  2560                           
  2561  0020                     ___lmul@multiplier:	
  2562                           ; 3 bytes @ 0x0
  2563                           
  2564  0020                     ___lldiv@divisor:	
  2565                           ; 4 bytes @ 0x0
  2566                           
  2567                           
  2568                           ; 4 bytes @ 0x0
  2569  0020                     	ds	1
  2570  0021                     ??_nrf24l01Send:	
  2571  0021                     ??___bmul:	
  2572                           ; 1 bytes @ 0x1
  2573                           
  2574  0021                     doWDTSleep@wdtps:	
  2575                           ; 1 bytes @ 0x1
  2576                           
  2577  0021                     isdigit@c:	
  2578                           ; 1 bytes @ 0x1
  2579                           
  2580  0021                     isspace@c:	
  2581                           ; 1 bytes @ 0x1
  2582                           
  2583                           
  2584                           ; 1 bytes @ 0x1
  2585  0021                     	ds	1
  2586  0022                     ??_strlen:	
  2587  0022                     nrf24l01Send@command:	
  2588                           ; 1 bytes @ 0x2
  2589                           
  2590  0022                     ___bmul@product:	
  2591                           ; 1 bytes @ 0x2
  2592                           
  2593  0022                     ___wmul@multiplicand:	
  2594                           ; 1 bytes @ 0x2
  2595                           
  2596  0022                     ___lwdiv@dividend:	
  2597                           ; 2 bytes @ 0x2
  2598                           
  2599  0022                     ___lwmod@dividend:	
  2600                           ; 2 bytes @ 0x2
  2601                           
  2602  0022                     memset@c:	
  2603                           ; 2 bytes @ 0x2
  2604                           
  2605  0022                     strcpy@from:	
  2606                           ; 2 bytes @ 0x2
  2607                           
  2608  0022                     strchr@chr:	
  2609                           ; 2 bytes @ 0x2
  2610                           
  2611                           
  2612                           ; 2 bytes @ 0x2
  2613  0022                     	ds	1
  2614  0023                     ??_nrf24l01SetRXMode:	
  2615  0023                     ?_nrf24l01ChangeTXPower:	
  2616                           ; 1 bytes @ 0x3
  2617                           
  2618  0023                     ??_nrf24l01SetRXPipe:	
  2619                           ; 1 bytes @ 0x3
  2620                           
  2621  0023                     ___bmul@multiplier:	
  2622                           ; 1 bytes @ 0x3
  2623                           
  2624  0023                     ___ftpack@exp:	
  2625                           ; 1 bytes @ 0x3
  2626                           
  2627  0023                     nrf24l01ChangeTXPower@addPower:	
  2628                           ; 1 bytes @ 0x3
  2629                           
  2630  0023                     ___ftge@ff2:	
  2631                           ; 2 bytes @ 0x3
  2632                           
  2633                           
  2634                           ; 3 bytes @ 0x3
  2635  0023                     	ds	1
  2636  0024                     ??_strcpy:	
  2637  0024                     ??_nrf24l01SetTXPipe:	
  2638                           ; 1 bytes @ 0x4
  2639                           
  2640  0024                     ??_strchr:	
  2641                           ; 1 bytes @ 0x4
  2642                           
  2643  0024                     ??___wmul:	
  2644                           ; 1 bytes @ 0x4
  2645                           
  2646  0024                     ??___lwdiv:	
  2647                           ; 1 bytes @ 0x4
  2648                           
  2649  0024                     ??___lwmod:	
  2650                           ; 1 bytes @ 0x4
  2651                           
  2652  0024                     nrf24l01SetRXMode@config:	
  2653                           ; 1 bytes @ 0x4
  2654                           
  2655  0024                     ___ftpack@sign:	
  2656                           ; 1 bytes @ 0x4
  2657                           
  2658  0024                     ___wmul@product:	
  2659                           ; 1 bytes @ 0x4
  2660                           
  2661  0024                     memset@n:	
  2662                           ; 2 bytes @ 0x4
  2663                           
  2664  0024                     strcpy@cp:	
  2665                           ; 2 bytes @ 0x4
  2666                           
  2667  0024                     strlen@cp:	
  2668                           ; 2 bytes @ 0x4
  2669                           
  2670  0024                     ___lmul@multiplicand:	
  2671                           ; 2 bytes @ 0x4
  2672                           
  2673  0024                     ___lldiv@dividend:	
  2674                           ; 4 bytes @ 0x4
  2675                           
  2676                           
  2677                           ; 4 bytes @ 0x4
  2678  0024                     	ds	1
  2679  0025                     ??_nrf24l01ChangeTXPower:	
  2680  0025                     ??___ftpack:	
  2681                           ; 1 bytes @ 0x5
  2682                           
  2683  0025                     nrf24l01SetRXMode@rxMode:	
  2684                           ; 1 bytes @ 0x5
  2685                           
  2686  0025                     nrf24l01SetRXPipe@pipe:	
  2687                           ; 1 bytes @ 0x5
  2688                           
  2689  0025                     ___lwmod@counter:	
  2690                           ; 1 bytes @ 0x5
  2691                           
  2692  0025                     ___lwdiv@quotient:	
  2693                           ; 1 bytes @ 0x5
  2694                           
  2695                           
  2696                           ; 2 bytes @ 0x5
  2697  0025                     	ds	1
  2698  0026                     ??_memset:	
  2699  0026                     ??_nrf24l01GetPipe:	
  2700                           ; 1 bytes @ 0x6
  2701                           
  2702  0026                     ??___ftge:	
  2703                           ; 1 bytes @ 0x6
  2704                           
  2705  0026                     nrf24l01ChangeTXPower@rfSetup:	
  2706                           ; 1 bytes @ 0x6
  2707                           
  2708  0026                     nrf24l01SetTXPipe@pipe:	
  2709                           ; 1 bytes @ 0x6
  2710                           
  2711  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2712                           ; 1 bytes @ 0x6
  2713                           
  2714  0026                     memset@p:	
  2715                           ; 1 bytes @ 0x6
  2716                           
  2717                           
  2718                           ; 2 bytes @ 0x6
  2719  0026                     	ds	1
  2720  0027                     ?_nrf24l01SendPacket:	
  2721  0027                     ??_checkTXPower:	
  2722                           ; 1 bytes @ 0x7
  2723                           
  2724  0027                     ??_nrf24l01InitRegisters:	
  2725                           ; 1 bytes @ 0x7
  2726                           
  2727  0027                     ?_strspn:	
  2728                           ; 1 bytes @ 0x7
  2729                           
  2730  0027                     ?_strcspn:	
  2731                           ; 2 bytes @ 0x7
  2732                           
  2733  0027                     ___lwdiv@counter:	
  2734                           ; 2 bytes @ 0x7
  2735                           
  2736  0027                     nrf24l01SendPacket@Packet:	
  2737                           ; 1 bytes @ 0x7
  2738                           
  2739  0027                     strcspn@s2:	
  2740                           ; 2 bytes @ 0x7
  2741                           
  2742  0027                     strspn@s2:	
  2743                           ; 2 bytes @ 0x7
  2744                           
  2745                           
  2746                           ; 2 bytes @ 0x7
  2747  0027                     	ds	1
  2748  0028                     ??___lmul:	
  2749  0028                     ??___lldiv:	
  2750                           ; 1 bytes @ 0x8
  2751                           
  2752  0028                     ?___altoft:	
  2753                           ; 1 bytes @ 0x8
  2754                           
  2755  0028                     ?___awtoft:	
  2756                           ; 3 bytes @ 0x8
  2757                           
  2758  0028                     ?___lbtoft:	
  2759                           ; 3 bytes @ 0x8
  2760                           
  2761  0028                     ?___lltoft:	
  2762                           ; 3 bytes @ 0x8
  2763                           
  2764  0028                     checkTXPower@rxPacket:	
  2765                           ; 3 bytes @ 0x8
  2766                           
  2767  0028                     nrf24l01GetPipe@pipe:	
  2768                           ; 1 bytes @ 0x8
  2769                           
  2770  0028                     ___awtoft@c:	
  2771                           ; 1 bytes @ 0x8
  2772                           
  2773  0028                     ___lmul@product:	
  2774                           ; 2 bytes @ 0x8
  2775                           
  2776  0028                     ___altoft@c:	
  2777                           ; 4 bytes @ 0x8
  2778                           
  2779  0028                     ___lltoft@c:	
  2780                           ; 4 bytes @ 0x8
  2781                           
  2782                           
  2783                           ; 4 bytes @ 0x8
  2784  0028                     	ds	1
  2785  0029                     ??_nrf24l01SendPacket:	
  2786  0029                     ??_strspn:	
  2787                           ; 1 bytes @ 0x9
  2788                           
  2789  0029                     ??_strcspn:	
  2790                           ; 1 bytes @ 0x9
  2791                           
  2792  0029                     nrf24l01GetPipe@name:	
  2793                           ; 1 bytes @ 0x9
  2794                           
  2795  0029                     nrf24l01InitRegisters@channel:	
  2796                           ; 1 bytes @ 0x9
  2797                           
  2798  0029                     ___lldiv@quotient:	
  2799                           ; 1 bytes @ 0x9
  2800                           
  2801                           
  2802                           ; 4 bytes @ 0x9
  2803  0029                     	ds	1
  2804  002A                     nrf24l01GetPipe@i:	
  2805  002A                     nrf24l01InitRegisters@setupAW:	
  2806                           ; 1 bytes @ 0xA
  2807                           
  2808                           
  2809                           ; 1 bytes @ 0xA
  2810  002A                     	ds	1
  2811  002B                     ??___awtoft:	
  2812  002B                     ??___lbtoft:	
  2813                           ; 1 bytes @ 0xB
  2814                           
  2815  002B                     nrf24l01InitRegisters@feature:	
  2816                           ; 1 bytes @ 0xB
  2817                           
  2818  002B                     strcspn@i:	
  2819                           ; 1 bytes @ 0xB
  2820                           
  2821  002B                     strspn@i:	
  2822                           ; 2 bytes @ 0xB
  2823                           
  2824                           
  2825                           ; 2 bytes @ 0xB
  2826  002B                     	ds	1
  2827  002C                     ??___altoft:	
  2828  002C                     ??___lltoft:	
  2829                           ; 1 bytes @ 0xC
  2830                           
  2831  002C                     nrf24l01InitRegisters@rfSetup:	
  2832                           ; 1 bytes @ 0xC
  2833                           
  2834                           
  2835                           ; 1 bytes @ 0xC
  2836  002C                     	ds	1
  2837  002D                     nrf24l01SendPacket@i:	
  2838  002D                     nrf24l01InitRegisters@status:	
  2839                           ; 1 bytes @ 0xD
  2840                           
  2841  002D                     ___lldiv@counter:	
  2842                           ; 1 bytes @ 0xD
  2843                           
  2844  002D                     ___awtoft@sign:	
  2845                           ; 1 bytes @ 0xD
  2846                           
  2847  002D                     ___lltoft@exp:	
  2848                           ; 1 bytes @ 0xD
  2849                           
  2850  002D                     strcspn@s1:	
  2851                           ; 1 bytes @ 0xD
  2852                           
  2853  002D                     strspn@s1:	
  2854                           ; 1 bytes @ 0xD
  2855                           
  2856                           
  2857                           ; 1 bytes @ 0xD
  2858  002D                     	ds	1
  2859  002E                     ??_nrf24l01SendACK:	
  2860  002E                     ?_strtok:	
  2861                           ; 1 bytes @ 0xE
  2862                           
  2863  002E                     ?___ftadd:	
  2864                           ; 1 bytes @ 0xE
  2865                           
  2866  002E                     ?___llmod:	
  2867                           ; 3 bytes @ 0xE
  2868                           
  2869  002E                     nrf24l01InitRegisters@enAA:	
  2870                           ; 4 bytes @ 0xE
  2871                           
  2872  002E                     ___altoft@exp:	
  2873                           ; 1 bytes @ 0xE
  2874                           
  2875  002E                     strtok@s2:	
  2876                           ; 1 bytes @ 0xE
  2877                           
  2878  002E                     ___ftadd@f1:	
  2879                           ; 2 bytes @ 0xE
  2880                           
  2881  002E                     ___llmod@divisor:	
  2882                           ; 3 bytes @ 0xE
  2883                           
  2884                           
  2885                           ; 4 bytes @ 0xE
  2886  002E                     	ds	1
  2887  002F                     nrf24l01SendACK@packet:	
  2888  002F                     nrf24l01InitRegisters@DynPD:	
  2889                           ; 1 bytes @ 0xF
  2890                           
  2891  002F                     ___altoft@sign:	
  2892                           ; 1 bytes @ 0xF
  2893                           
  2894  002F                     ___lbtoft@c:	
  2895                           ; 1 bytes @ 0xF
  2896                           
  2897                           
  2898                           ; 1 bytes @ 0xF
  2899  002F                     	ds	1
  2900  0030                     ??_strtok:	
  2901  0030                     nrf24l01InitRegisters@config:	
  2902                           ; 1 bytes @ 0x10
  2903                           
  2904                           
  2905                           ; 1 bytes @ 0x10
  2906  0030                     	ds	1
  2907  0031                     nrf24l01InitRegisters@i:	
  2908  0031                     ___ftadd@f2:	
  2909                           ; 2 bytes @ 0x11
  2910                           
  2911                           
  2912                           ; 3 bytes @ 0x11
  2913  0031                     	ds	1
  2914  0032                     ___llmod@dividend:	
  2915                           
  2916                           ; 4 bytes @ 0x12
  2917  0032                     	ds	1
  2918  0033                     ??_nrf24l01Init:	
  2919  0033                     strtok@s1:	
  2920                           ; 1 bytes @ 0x13
  2921                           
  2922                           
  2923                           ; 1 bytes @ 0x13
  2924  0033                     	ds	1
  2925  0034                     ??___ftadd:	
  2926                           
  2927                           ; 1 bytes @ 0x14
  2928  0034                     	ds	2
  2929  0036                     ??___llmod:	
  2930                           
  2931                           ; 1 bytes @ 0x16
  2932  0036                     	ds	1
  2933  0037                     ___llmod@counter:	
  2934                           
  2935                           ; 1 bytes @ 0x17
  2936  0037                     	ds	1
  2937  0038                     ?_sprintf:	
  2938  0038                     ___ftadd@sign:	
  2939                           ; 2 bytes @ 0x18
  2940                           
  2941  0038                     sprintf@f:	
  2942                           ; 1 bytes @ 0x18
  2943                           
  2944                           
  2945                           ; 2 bytes @ 0x18
  2946  0038                     	ds	1
  2947  0039                     ___ftadd@exp2:	
  2948                           
  2949                           ; 1 bytes @ 0x19
  2950  0039                     	ds	1
  2951  003A                     ___ftadd@exp1:	
  2952                           
  2953                           ; 1 bytes @ 0x1A
  2954  003A                     	ds	1
  2955  003B                     ?___ftdiv:	
  2956  003B                     ?___ftsub:	
  2957                           ; 3 bytes @ 0x1B
  2958                           
  2959  003B                     ___ftdiv@f2:	
  2960                           ; 3 bytes @ 0x1B
  2961                           
  2962  003B                     ___ftsub@f2:	
  2963                           ; 3 bytes @ 0x1B
  2964                           
  2965                           
  2966                           ; 3 bytes @ 0x1B
  2967  003B                     	ds	3
  2968  003E                     ___ftdiv@f1:	
  2969  003E                     ___ftsub@f1:	
  2970                           ; 3 bytes @ 0x1E
  2971                           
  2972                           
  2973                           ; 3 bytes @ 0x1E
  2974  003E                     	ds	3
  2975  0041                     ??___ftdiv:	
  2976  0041                     ??___ftsub:	
  2977                           ; 1 bytes @ 0x21
  2978                           
  2979                           
  2980                           ; 1 bytes @ 0x21
  2981  0041                     	ds	1
  2982  0042                     ??_sprintf:	
  2983                           
  2984                           ; 1 bytes @ 0x22
  2985  0042                     	ds	3
  2986  0045                     ___ftdiv@cntr:	
  2987                           
  2988                           ; 1 bytes @ 0x25
  2989  0045                     	ds	1
  2990  0046                     ___ftdiv@f3:	
  2991                           
  2992                           ; 3 bytes @ 0x26
  2993  0046                     	ds	2
  2994  0048                     sprintf@flag:	
  2995                           
  2996                           ; 1 bytes @ 0x28
  2997  0048                     	ds	1
  2998  0049                     sprintf@ap:	
  2999  0049                     ___ftdiv@exp:	
  3000                           ; 1 bytes @ 0x29
  3001                           
  3002                           
  3003                           ; 1 bytes @ 0x29
  3004  0049                     	ds	1
  3005  004A                     ___ftdiv@sign:	
  3006  004A                     sprintf@val:	
  3007                           ; 1 bytes @ 0x2A
  3008                           
  3009                           
  3010                           ; 4 bytes @ 0x2A
  3011  004A                     	ds	1
  3012  004B                     ?_getADCValue:	
  3013                           
  3014                           ; 3 bytes @ 0x2B
  3015  004B                     	ds	3
  3016  004E                     ??_getADCValue:	
  3017  004E                     sprintf@sp:	
  3018                           ; 1 bytes @ 0x2E
  3019                           
  3020                           
  3021                           ; 1 bytes @ 0x2E
  3022  004E                     	ds	1
  3023  004F                     sprintf@width:	
  3024                           
  3025                           ; 2 bytes @ 0x2F
  3026  004F                     	ds	2
  3027  0051                     getADCValue@adcLoop:	
  3028  0051                     sprintf@prec:	
  3029                           ; 2 bytes @ 0x31
  3030                           
  3031                           
  3032                           ; 2 bytes @ 0x31
  3033  0051                     	ds	2
  3034  0053                     getADCValue@channel:	
  3035  0053                     sprintf@c:	
  3036                           ; 1 bytes @ 0x33
  3037                           
  3038                           
  3039                           ; 1 bytes @ 0x33
  3040  0053                     	ds	1
  3041  0054                     getADCValue@adcSum:	
  3042                           
  3043                           ; 3 bytes @ 0x34
  3044  0054                     	ds	3
  3045  0057                     ?___ftmul:	
  3046  0057                     ?___ftneg:	
  3047                           ; 3 bytes @ 0x37
  3048                           
  3049  0057                     ___ftmul@f1:	
  3050                           ; 3 bytes @ 0x37
  3051                           
  3052  0057                     ___ftneg@f1:	
  3053                           ; 3 bytes @ 0x37
  3054                           
  3055                           
  3056                           ; 3 bytes @ 0x37
  3057  0057                     	ds	3
  3058  005A                     ??___ftneg:	
  3059  005A                     ___ftmul@f2:	
  3060                           ; 1 bytes @ 0x3A
  3061                           
  3062                           
  3063                           ; 3 bytes @ 0x3A
  3064  005A                     	ds	3
  3065  005D                     ??___ftmul:	
  3066                           
  3067                           ; 1 bytes @ 0x3D
  3068  005D                     	ds	4
  3069  0061                     ___ftmul@exp:	
  3070                           
  3071                           ; 1 bytes @ 0x41
  3072  0061                     	ds	1
  3073  0062                     ___ftmul@f3_as_product:	
  3074                           
  3075                           ; 3 bytes @ 0x42
  3076  0062                     	ds	3
  3077  0065                     ___ftmul@cntr:	
  3078                           
  3079                           ; 1 bytes @ 0x45
  3080  0065                     	ds	1
  3081  0066                     ___ftmul@sign:	
  3082                           
  3083                           ; 1 bytes @ 0x46
  3084  0066                     	ds	1
  3085  0067                     ?_strtod:	
  3086  0067                     ?___fttol:	
  3087                           ; 3 bytes @ 0x47
  3088                           
  3089  0067                     strtod@res:	
  3090                           ; 4 bytes @ 0x47
  3091                           
  3092  0067                     ___fttol@f1:	
  3093                           ; 1 bytes @ 0x47
  3094                           
  3095                           
  3096                           ; 3 bytes @ 0x47
  3097  0067                     	ds	3
  3098  006A                     ??_strtod:	
  3099                           
  3100                           ; 1 bytes @ 0x4A
  3101  006A                     	ds	1
  3102  006B                     ??___fttol:	
  3103                           
  3104                           ; 1 bytes @ 0x4B
  3105  006B                     	ds	3
  3106  006E                     ??_atof:	
  3107  006E                     atof@s:	
  3108                           ; 1 bytes @ 0x4E
  3109                           
  3110                           
  3111                           ; 1 bytes @ 0x4E
  3112  006E                     	ds	1
  3113  006F                     ??_ftoa:	
  3114  006F                     ??_handleRXData:	
  3115                           ; 1 bytes @ 0x4F
  3116                           
  3117                           
  3118                           ; 1 bytes @ 0x4F
  3119  006F                     	ds	1
  3120  0070                     ??_strcat:	
  3121  0070                     ??_sleep:	
  3122                           ; 1 bytes @ 0x50
  3123                           
  3124                           
  3125                           	psect	maintext
  3126  0C92                     __pmaintext:	
  3127                           ; 1 bytes @ 0x50
  3128 ;;
  3129 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3130 ;;
  3131 ;; *************** function _main *****************
  3132 ;; Defined at:
  3133 ;;		line 277 in file "main.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;		None
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  packet         33   39[BANK1 ] struct .
  3138 ;;  pipe            1   38[BANK1 ] unsigned char 
  3139 ;;  bootStatus      1   37[BANK1 ] unsigned char 
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      void 
  3142 ;; Registers used:
  3143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3144 ;; Tracked objects:
  3145 ;;		On entry : B1F/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3150 ;;      Locals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3151 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3152 ;;      Totals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  3153 ;;Total ram usage:       36 bytes
  3154 ;; Hardware stack levels required when called:   16
  3155 ;; This function calls:
  3156 ;;		___lbtoft
  3157 ;;		_loop
  3158 ;;		_nrf24l01GetPipe
  3159 ;;		_nrf24l01Init
  3160 ;;		_nrf24l01SendPacket
  3161 ;;		_nrf24l01SetRXPipe
  3162 ;;		_nrf24l01SetTXPipe
  3163 ;;		_setMessage
  3164 ;;		_sleep
  3165 ;;		_strcpy
  3166 ;; This function is called by:
  3167 ;;		Startup code after reset
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           
  3172                           ;psect for function _main
  3173  0C92                     _main:	
  3174                           
  3175                           ;main.c: 279: unsigned char bootStatus = STATUS;
  3176                           
  3177                           ;incstack = 0
  3178                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3179  0C92  0020               	movlb	0	; select bank0
  3180  0C93  0803               	movf	3,w	;volatile
  3181  0C94  0021               	movlb	1	; select bank1
  3182  0C95  00C4               	movwf	??_main^(0+128)
  3183  0C96  0844               	movf	??_main^(0+128),w
  3184  0C97  00C5               	movwf	main@bootStatus^(0+128)
  3185                           
  3186                           ;main.c: 282: ANSELA = 0x00;
  3187  0C98  0023               	movlb	3	; select bank3
  3188  0C99  018C               	clrf	12	;volatile
  3189                           
  3190                           ;main.c: 283: ANSELC = 0x00;
  3191  0C9A  018E               	clrf	14	;volatile
  3192                           
  3193                           ;main.c: 285: ODCONA = 0x00;
  3194  0C9B  0025               	movlb	5	; select bank5
  3195  0C9C  018C               	clrf	12	;volatile
  3196                           
  3197                           ;main.c: 286: ODCONC = 0x00;
  3198  0C9D  018E               	clrf	14	;volatile
  3199                           
  3200                           ;main.c: 291: INLVLA = 0x00;
  3201  0C9E  0027               	movlb	7	; select bank7
  3202  0C9F  018C               	clrf	12	;volatile
  3203                           
  3204                           ;main.c: 292: INLVLC = 0x00;
  3205  0CA0  018E               	clrf	14	;volatile
  3206                           
  3207                           ;main.c: 294: WPUA = 0x00;
  3208  0CA1  0024               	movlb	4	; select bank4
  3209  0CA2  018C               	clrf	12	;volatile
  3210                           
  3211                           ;main.c: 295: WPUC = 0x00;
  3212  0CA3  018E               	clrf	14	;volatile
  3213                           
  3214                           ;main.c: 297: TRISCbits.TRISC5 = 0;
  3215  0CA4  0021               	movlb	1	; select bank1
  3216  0CA5  128E               	bcf	14,5	;volatile
  3217                           
  3218                           ;main.c: 298: TRISCbits.TRISC4 = 0;
  3219  0CA6  120E               	bcf	14,4	;volatile
  3220                           
  3221                           ;main.c: 300: PORTCbits.RC4 = 0;
  3222  0CA7  0020               	movlb	0	; select bank0
  3223  0CA8  120E               	bcf	14,4	;volatile
  3224                           
  3225                           ;main.c: 307: INTCONbits.PEIE = 0;
  3226  0CA9  130B               	bcf	11,6	;volatile
  3227                           
  3228                           ;main.c: 308: INTCONbits.GIE = 0;
  3229  0CAA  138B               	bcf	11,7	;volatile
  3230                           
  3231                           ;main.c: 310: OSCCON1bits.NOSC = 0b000;
  3232  0CAB  308F               	movlw	-113
  3233  0CAC  0032               	movlb	18	; select bank18
  3234  0CAD  0599               	andwf	25,f	;volatile
  3235                           
  3236                           ;main.c: 311: OSCCON1bits.NDIV = 0b000;
  3237  0CAE  30F0               	movlw	-16
  3238  0CAF  0599               	andwf	25,f	;volatile
  3239                           
  3240                           ;main.c: 313: _delay((unsigned long)((10)*(32000000/4000.0)));
  3241  0CB0  3068               	movlw	104
  3242  0CB1  0021               	movlb	1	; select bank1
  3243  0CB2  00C4               	movwf	??_main^(0+128)
  3244  0CB3  30E4               	movlw	228
  3245  0CB4                     u4737:	
  3246  0CB4  0B89               	decfsz	9,f
  3247  0CB5  2CB4               	goto	u4737
  3248  0CB6  0BC4               	decfsz	??_main^(0+128),f
  3249  0CB7  2CB4               	goto	u4737
  3250  0CB8  0000               	nop
  3251                           
  3252                           ;main.c: 317: strcpy(romData->name, "UH1");
  3253  0CB9  0021               	movlb	1	; select bank1
  3254  0CBA  086C               	movf	_romData^(0+128),w
  3255  0CBB  3E01               	addlw	1
  3256  0CBC  0020               	movlb	0	; select bank0
  3257  0CBD  00A0               	movwf	strcpy@to
  3258  0CBE  3001               	movlw	1
  3259  0CBF  00A1               	movwf	strcpy@to+1
  3260  0CC0  3055               	movlw	low (STR_11| (0+32768))
  3261  0CC1  00A2               	movwf	strcpy@from
  3262  0CC2  3098               	movlw	high (STR_11| (0+32768))
  3263  0CC3  00A3               	movwf	strcpy@from+1
  3264  0CC4  3192  22DD  318C   	fcall	_strcpy
  3265                           
  3266                           ;main.c: 319: nrf24l01Init();
  3267  0CC7  3193  23D0  318C   	fcall	_nrf24l01Init
  3268                           
  3269                           ;main.c: 321: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3270  0CCA  0021               	movlb	1	; select bank1
  3271  0CCB  086C               	movf	_romData^(0+128),w
  3272  0CCC  3E01               	addlw	1
  3273  0CCD  3195  2586  318C   	fcall	_nrf24l01GetPipe
  3274  0CD0  0021               	movlb	1	; select bank1
  3275  0CD1  00C4               	movwf	??_main^(0+128)
  3276  0CD2  0844               	movf	??_main^(0+128),w
  3277  0CD3  00C6               	movwf	main@pipe^(0+128)
  3278                           
  3279                           ;main.c: 322: nrf24l01SetTXPipe(pipe);
  3280  0CD4  0846               	movf	main@pipe^(0+128),w
  3281  0CD5  3197  2777  318C   	fcall	_nrf24l01SetTXPipe
  3282                           
  3283                           ;main.c: 323: nrf24l01SetRXPipe(pipe);
  3284  0CD8  0021               	movlb	1	; select bank1
  3285  0CD9  0846               	movf	main@pipe^(0+128),w
  3286  0CDA  3193  238D  318C   	fcall	_nrf24l01SetRXPipe
  3287                           
  3288                           ;main.c: 325: counter = pipe;
  3289  0CDD  0021               	movlb	1	; select bank1
  3290  0CDE  0846               	movf	main@pipe^(0+128),w
  3291  0CDF  3192  22C2  318C   	fcall	___lbtoft
  3292  0CE2  0020               	movlb	0	; select bank0
  3293  0CE3  0828               	movf	?___lbtoft,w
  3294  0CE4  0022               	movlb	2	; select bank2
  3295  0CE5  00D0               	movwf	_counter^(0+256)
  3296  0CE6  0020               	movlb	0	; select bank0
  3297  0CE7  0829               	movf	?___lbtoft+1,w
  3298  0CE8  0022               	movlb	2	; select bank2
  3299  0CE9  00D1               	movwf	(_counter+1)^(0+256)
  3300  0CEA  0020               	movlb	0	; select bank0
  3301  0CEB  082A               	movf	?___lbtoft+2,w
  3302  0CEC  0022               	movlb	2	; select bank2
  3303  0CED  00D2               	movwf	(_counter+2)^(0+256)
  3304                           
  3305                           ;main.c: 328: ADCON0bits.ADON = 0;
  3306  0CEE  0021               	movlb	1	; select bank1
  3307  0CEF  101D               	bcf	29,0	;volatile
  3308                           
  3309                           ;main.c: 331: PORTAbits.RA4 = 0;
  3310  0CF0  0020               	movlb	0	; select bank0
  3311  0CF1  120C               	bcf	12,4	;volatile
  3312                           
  3313                           ;main.c: 332: TRISAbits.TRISA4 = 1;
  3314  0CF2  0021               	movlb	1	; select bank1
  3315  0CF3  160C               	bsf	12,4	;volatile
  3316                           
  3317                           ;main.c: 333: WPUAbits.WPUA4 = 0;
  3318  0CF4  0024               	movlb	4	; select bank4
  3319  0CF5  120C               	bcf	12,4	;volatile
  3320                           
  3321                           ;main.c: 334: ODCONAbits.ODCA4 = 1;
  3322  0CF6  0025               	movlb	5	; select bank5
  3323  0CF7  160C               	bsf	12,4	;volatile
  3324                           
  3325                           ;main.c: 335: ANSELAbits.ANSA4 = 1;
  3326  0CF8  0023               	movlb	3	; select bank3
  3327  0CF9  160C               	bsf	12,4	;volatile
  3328                           
  3329                           ;main.c: 338: ANSELCbits.ANSC3 = 1;
  3330  0CFA  158E               	bsf	14,3	;volatile
  3331                           
  3332                           ;main.c: 339: TRISCbits.TRISC3 = 1;
  3333  0CFB  0021               	movlb	1	; select bank1
  3334  0CFC  158E               	bsf	14,3	;volatile
  3335                           
  3336                           ;main.c: 342: FVRCONbits.TSEN = 0;
  3337  0CFD  0022               	movlb	2	; select bank2
  3338  0CFE  1297               	bcf	23,5	;volatile
  3339                           
  3340                           ;main.c: 343: FVRCONbits.TSRNG = 1;
  3341  0CFF  1617               	bsf	23,4	;volatile
  3342                           
  3343                           ;main.c: 346: FVRCONbits.FVREN = 0;
  3344  0D00  1397               	bcf	23,7	;volatile
  3345                           
  3346                           ;main.c: 347: FVRCONbits.ADFVR = 0b10;
  3347  0D01  0817               	movf	23,w	;volatile
  3348  0D02  39FC               	andlw	-4
  3349  0D03  3802               	iorlw	2
  3350  0D04  0097               	movwf	23	;volatile
  3351                           
  3352                           ;main.c: 349: ADCON1bits.ADCS = 0b111;
  3353  0D05  3070               	movlw	112
  3354  0D06  0021               	movlb	1	; select bank1
  3355  0D07  049E               	iorwf	30,f	;volatile
  3356                           
  3357                           ;main.c: 350: ADCON1bits.ADFM = 1;
  3358  0D08  179E               	bsf	30,7	;volatile
  3359                           
  3360                           ;main.c: 351: ADCON1bits.ADPREF = 0b11;
  3361  0D09  3003               	movlw	3
  3362  0D0A  049E               	iorwf	30,f	;volatile
  3363                           
  3364                           ;main.c: 352: ADCON1bits.ADNREF = 0b00;
  3365  0D0B  111E               	bcf	30,2	;volatile
  3366                           
  3367                           ;main.c: 355: ADCON0bits.CHS = 3;
  3368  0D0C  081D               	movf	29,w	;volatile
  3369  0D0D  3903               	andlw	-253
  3370  0D0E  380C               	iorlw	12
  3371  0D0F  009D               	movwf	29	;volatile
  3372                           
  3373                           ;main.c: 360: TRISAbits.TRISA2 = 1;
  3374  0D10  150C               	bsf	12,2	;volatile
  3375                           
  3376                           ;main.c: 361: PIE0bits.INTE = 1;
  3377  0D11  1410               	bsf	16,0	;volatile
  3378                           
  3379                           ;main.c: 362: INTCONbits.INTEDG = 0;
  3380  0D12  100B               	bcf	11,0	;volatile
  3381                           
  3382                           ;main.c: 365: TRISAbits.TRISA5 = 0;
  3383  0D13  128C               	bcf	12,5	;volatile
  3384                           
  3385                           ;main.c: 366: PORTAbits.RA5 = 0;
  3386  0D14  0020               	movlb	0	; select bank0
  3387  0D15  128C               	bcf	12,5	;volatile
  3388                           
  3389                           ;main.c: 369: INTCONbits.PEIE = 1;
  3390  0D16  170B               	bsf	11,6	;volatile
  3391                           
  3392                           ;main.c: 370: INTCONbits.GIE = 1;
  3393  0D17  178B               	bsf	11,7	;volatile
  3394                           
  3395                           ;main.c: 372: nrf24l01Packet_t packet;;main.c: 374: setMessage(&packet, "BOOT", bootStat
      +                          us);
  3396  0D18  30C7               	movlw	low main@packet
  3397  0D19  0021               	movlb	1	; select bank1
  3398  0D1A  00B9               	movwf	setMessage@packet^(0+128)
  3399  0D1B  3000               	movlw	high main@packet
  3400  0D1C  00BA               	movwf	(setMessage@packet+1)^(0+128)
  3401  0D1D  3050               	movlw	low (STR_12| (0+32768))
  3402  0D1E  00BB               	movwf	setMessage@topic^(0+128)
  3403  0D1F  3098               	movlw	high (STR_12| (0+32768))
  3404  0D20  00BC               	movwf	(setMessage@topic^(0+128)+1)
  3405  0D21  0845               	movf	main@bootStatus^(0+128),w
  3406  0D22  3192  22C2  318C   	fcall	___lbtoft
  3407  0D25  0020               	movlb	0	; select bank0
  3408  0D26  0828               	movf	?___lbtoft,w
  3409  0D27  0021               	movlb	1	; select bank1
  3410  0D28  00BD               	movwf	setMessage@value^(0+128)
  3411  0D29  0020               	movlb	0	; select bank0
  3412  0D2A  0829               	movf	?___lbtoft+1,w
  3413  0D2B  0021               	movlb	1	; select bank1
  3414  0D2C  00BE               	movwf	(setMessage@value+1)^(0+128)
  3415  0D2D  0020               	movlb	0	; select bank0
  3416  0D2E  082A               	movf	?___lbtoft+2,w
  3417  0D2F  0021               	movlb	1	; select bank1
  3418  0D30  00BF               	movwf	(setMessage@value+2)^(0+128)
  3419  0D31  3189  2182  318C   	fcall	_setMessage
  3420                           
  3421                           ;main.c: 375: packet.packetData.ACKRequest = 0;
  3422  0D34  0021               	movlb	1	; select bank1
  3423  0D35  1147               	bcf	main@packet^(0+128),2
  3424                           
  3425                           ;main.c: 376: nrf24l01SendPacket(&packet);
  3426  0D36  30C7               	movlw	low main@packet
  3427  0D37  0020               	movlb	0	; select bank0
  3428  0D38  00A7               	movwf	nrf24l01SendPacket@Packet
  3429  0D39  3000               	movlw	high main@packet
  3430  0D3A  00A8               	movwf	nrf24l01SendPacket@Packet+1
  3431  0D3B  318D  254A  318C   	fcall	_nrf24l01SendPacket
  3432                           
  3433                           ;main.c: 377: sleep(3000);
  3434  0D3E  30B8               	movlw	184
  3435  0D3F  0021               	movlb	1	; select bank1
  3436  0D40  00BE               	movwf	sleep@milliseconds^(0+128)
  3437  0D41  300B               	movlw	11
  3438  0D42  00BF               	movwf	(sleep@milliseconds^(0+128)+1)
  3439  0D43  3197  27BB  318C   	fcall	_sleep
  3440  0D46                     l4551:	
  3441                           ;main.c: 379: while(1){
  3442                           
  3443                           
  3444                           ;main.c: 380: loop();
  3445  0D46  3184  24C3  318C   	fcall	_loop
  3446  0D49  2D46               	goto	l4551
  3447  0D4A                     __end_of_main:	
  3448                           ;main.c: 381: };main.c: 383: return;
  3449                           
  3450                           
  3451                           	psect	text1
  3452  13D0                     __ptext1:	
  3453 ;; *************** function _nrf24l01Init *****************
  3454 ;; Defined at:
  3455 ;;		line 446 in file "nrf24l01.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;		None
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;		None
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  1    wreg      void 
  3462 ;; Registers used:
  3463 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3471 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3472 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3473 ;;Total ram usage:        2 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:   12
  3476 ;; This function calls:
  3477 ;;		_nrf24l01CEHigh
  3478 ;;		_nrf24l01CELow
  3479 ;;		_nrf24l01InitRegisters
  3480 ;;		_nrf24l01InterfaceInit
  3481 ;; This function is called by:
  3482 ;;		_main
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           
  3487                           ;psect for function _nrf24l01Init
  3488  13D0                     _nrf24l01Init:	
  3489                           
  3490                           ;nrf24l01.c: 449: nrf24l01InterfaceInit();
  3491                           
  3492                           ;incstack = 0
  3493                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3494  13D0  3193  2314  3193   	fcall	_nrf24l01InterfaceInit
  3495                           
  3496                           ;nrf24l01.c: 454: nrf24l01CELow();
  3497  13D3  3191  21B1  3193   	fcall	_nrf24l01CELow
  3498                           
  3499                           ;nrf24l01.c: 456: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3500  13D6  3003               	movlw	3
  3501  13D7  0020               	movlb	0	; select bank0
  3502  13D8  00B4               	movwf	??_nrf24l01Init+1
  3503  13D9  3008               	movlw	8
  3504  13DA  00B3               	movwf	??_nrf24l01Init
  3505  13DB  3077               	movlw	119
  3506  13DC                     u4747:	
  3507  13DC  0B89               	decfsz	9,f
  3508  13DD  2BDC               	goto	u4747
  3509  13DE  0BB3               	decfsz	??_nrf24l01Init,f
  3510  13DF  2BDC               	goto	u4747
  3511  13E0  0BB4               	decfsz	??_nrf24l01Init+1,f
  3512  13E1  2BDC               	goto	u4747
  3513                           
  3514                           ;nrf24l01.c: 458: nrf24l01InitRegisters();
  3515  13E2  3186  2675  3193   	fcall	_nrf24l01InitRegisters
  3516                           
  3517                           ;nrf24l01.c: 460: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3518  13E5  3003               	movlw	3
  3519  13E6  0020               	movlb	0	; select bank0
  3520  13E7  00B4               	movwf	??_nrf24l01Init+1
  3521  13E8  3008               	movlw	8
  3522  13E9  00B3               	movwf	??_nrf24l01Init
  3523  13EA  3077               	movlw	119
  3524  13EB                     u4757:	
  3525  13EB  0B89               	decfsz	9,f
  3526  13EC  2BEB               	goto	u4757
  3527  13ED  0BB3               	decfsz	??_nrf24l01Init,f
  3528  13EE  2BEB               	goto	u4757
  3529  13EF  0BB4               	decfsz	??_nrf24l01Init+1,f
  3530  13F0  2BEB               	goto	u4757
  3531                           
  3532                           ;nrf24l01.c: 462: nrf24l01CEHigh();
  3533  13F1  3191  21AE         	fcall	_nrf24l01CEHigh
  3534  13F3  0008               	return
  3535  13F4                     __end_of_nrf24l01Init:	
  3536                           
  3537                           	psect	text2
  3538  1314                     __ptext2:	
  3539 ;; *************** function _nrf24l01InterfaceInit *****************
  3540 ;; Defined at:
  3541 ;;		line 27 in file "interface.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;		None
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      void 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3559 ;;Total ram usage:        0 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    7
  3562 ;; This function calls:
  3563 ;;		Nothing
  3564 ;; This function is called by:
  3565 ;;		_nrf24l01Init
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           
  3570                           ;psect for function _nrf24l01InterfaceInit
  3571  1314                     _nrf24l01InterfaceInit:	
  3572                           
  3573                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3574                           
  3575                           ;incstack = 0
  3576                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3577  1314  0021               	movlb	1	; select bank1
  3578  1315  100C               	bcf	12,0	;volatile
  3579                           
  3580                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3581  1316  108C               	bcf	12,1	;volatile
  3582                           
  3583                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3584  1317  148E               	bsf	14,1	;volatile
  3585                           
  3586                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3587  1318  110E               	bcf	14,2	;volatile
  3588                           
  3589                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3590  1319  100E               	bcf	14,0	;volatile
  3591                           
  3592                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3593  131A  0024               	movlb	4	; select bank4
  3594  131B  1295               	bcf	21,5	;volatile
  3595                           
  3596                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3597  131C  003D               	movlb	29	; select bank29
  3598  131D  0821               	movf	33,w	;volatile
  3599  131E  39E0               	andlw	-32
  3600  131F  3811               	iorlw	17
  3601  1320  00A1               	movwf	33	;volatile
  3602                           
  3603                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3604  1321  0822               	movf	34,w	;volatile
  3605  1322  39E0               	andlw	-32
  3606  1323  3819               	iorlw	25
  3607  1324  00A2               	movwf	34	;volatile
  3608                           
  3609                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3610  1325  0820               	movf	32,w	;volatile
  3611  1326  39E0               	andlw	-32
  3612  1327  3818               	iorlw	24
  3613  1328  00A0               	movwf	32	;volatile
  3614                           
  3615                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3616  1329  0024               	movlb	4	; select bank4
  3617  132A  1215               	bcf	21,4	;volatile
  3618                           
  3619                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3620  132B  1714               	bsf	20,6	;volatile
  3621                           
  3622                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0000;
  3623  132C  30F0               	movlw	-16
  3624  132D  0595               	andwf	21,f	;volatile
  3625                           
  3626                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3627  132E  1695               	bsf	21,5	;volatile
  3628  132F  0008               	return
  3629  1330                     __end_of_nrf24l01InterfaceInit:	
  3630                           
  3631                           	psect	text3
  3632  0675                     __ptext3:	
  3633 ;; *************** function _nrf24l01InitRegisters *****************
  3634 ;; Defined at:
  3635 ;;		line 345 in file "nrf24l01.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;		None
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;  i               2   17[BANK0 ] unsigned int 
  3640 ;;  config          1   16[BANK0 ] struct .
  3641 ;;  DynPD           1   15[BANK0 ] struct .
  3642 ;;  enAA            1   14[BANK0 ] struct .
  3643 ;;  status          1   13[BANK0 ] struct .
  3644 ;;  rfSetup         1   12[BANK0 ] struct .
  3645 ;;  feature         1   11[BANK0 ] struct .
  3646 ;;  setupAW         1   10[BANK0 ] struct .
  3647 ;;  channel         1    9[BANK0 ] struct .
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  1    wreg      void 
  3650 ;; Registers used:
  3651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3658 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3659 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3660 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3661 ;;Total ram usage:       12 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:   11
  3664 ;; This function calls:
  3665 ;;		___bmul
  3666 ;;		_nrf24l01SPIEnd
  3667 ;;		_nrf24l01SPISend
  3668 ;;		_nrf24l01SPIStart
  3669 ;;		_nrf24l01Send
  3670 ;;		_nrf24l01SetRXPipe
  3671 ;;		_nrf24l01SetTXPipe
  3672 ;; This function is called by:
  3673 ;;		_nrf24l01Init
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           
  3678                           ;psect for function _nrf24l01InitRegisters
  3679  0675                     _nrf24l01InitRegisters:	
  3680                           
  3681                           ;nrf24l01.c: 347: n_CONFIG_t config;;nrf24l01.c: 349: config.PWR_UP = 0;
  3682                           
  3683                           ;incstack = 0
  3684                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3685  0675  0020               	movlb	0	; select bank0
  3686  0676  10B0               	bcf	nrf24l01InitRegisters@config,1
  3687                           
  3688                           ;nrf24l01.c: 350: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3689  0677  0830               	movf	nrf24l01InitRegisters@config,w
  3690  0678  00A7               	movwf	??_nrf24l01InitRegisters
  3691  0679  0827               	movf	??_nrf24l01InitRegisters,w
  3692  067A  00A0               	movwf	nrf24l01Send@data
  3693  067B  3020               	movlw	32
  3694  067C  3193  236D  3186   	fcall	_nrf24l01Send
  3695                           
  3696                           ;nrf24l01.c: 352: n_SETUP_AW_t setupAW;;nrf24l01.c: 353: setupAW.byte = 0x00;
  3697  067F  0020               	movlb	0	; select bank0
  3698  0680  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3699                           
  3700                           ;nrf24l01.c: 354: setupAW.AW = 0b11;
  3701  0681  3003               	movlw	3
  3702  0682  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3703                           
  3704                           ;nrf24l01.c: 355: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3705  0683  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3706  0684  00A7               	movwf	??_nrf24l01InitRegisters
  3707  0685  0827               	movf	??_nrf24l01InitRegisters,w
  3708  0686  00A0               	movwf	nrf24l01Send@data
  3709  0687  3022               	movlw	34
  3710  0688  3193  236D  3186   	fcall	_nrf24l01Send
  3711                           
  3712                           ;nrf24l01.c: 358: n_RF_CH_t channel;;nrf24l01.c: 359: channel.RF_CH = 2;
  3713  068B  0020               	movlb	0	; select bank0
  3714  068C  0829               	movf	nrf24l01InitRegisters@channel,w
  3715  068D  3980               	andlw	-128
  3716  068E  3802               	iorlw	2
  3717  068F  00A9               	movwf	nrf24l01InitRegisters@channel
  3718                           
  3719                           ;nrf24l01.c: 360: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3720  0690  0829               	movf	nrf24l01InitRegisters@channel,w
  3721  0691  00A7               	movwf	??_nrf24l01InitRegisters
  3722  0692  0827               	movf	??_nrf24l01InitRegisters,w
  3723  0693  00A0               	movwf	nrf24l01Send@data
  3724  0694  3025               	movlw	37
  3725  0695  3193  236D  3186   	fcall	_nrf24l01Send
  3726                           
  3727                           ;nrf24l01.c: 363: n_RF_SETUP_t rfSetup;;nrf24l01.c: 364: rfSetup.byte = 0x00;
  3728  0698  0020               	movlb	0	; select bank0
  3729  0699  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3730                           
  3731                           ;nrf24l01.c: 365: rfSetup.RF_DR_LOW = 0;
  3732  069A  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3733                           
  3734                           ;nrf24l01.c: 366: rfSetup.RF_DR_HIGH = 1;
  3735  069B  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3736                           
  3737                           ;nrf24l01.c: 367: rfSetup.RF_PWR = 3;
  3738  069C  3006               	movlw	6
  3739  069D  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3740                           
  3741                           ;nrf24l01.c: 368: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3742  069E  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3743  069F  00A7               	movwf	??_nrf24l01InitRegisters
  3744  06A0  0827               	movf	??_nrf24l01InitRegisters,w
  3745  06A1  00A0               	movwf	nrf24l01Send@data
  3746  06A2  3026               	movlw	38
  3747  06A3  3193  236D  3186   	fcall	_nrf24l01Send
  3748                           
  3749                           ;nrf24l01.c: 371: nrf24l01SetRXPipe(0xFF);
  3750  06A6  30FF               	movlw	255
  3751  06A7  3193  238D  3186   	fcall	_nrf24l01SetRXPipe
  3752                           
  3753                           ;nrf24l01.c: 374: n_EN_AA_t enAA;;nrf24l01.c: 375: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3754  06AA  0020               	movlb	0	; select bank0
  3755  06AB  01A0               	clrf	nrf24l01Send@data
  3756  06AC  3001               	movlw	1
  3757  06AD  3193  236D  3186   	fcall	_nrf24l01Send
  3758  06B0  0020               	movlb	0	; select bank0
  3759  06B1  00A7               	movwf	??_nrf24l01InitRegisters
  3760  06B2  0827               	movf	??_nrf24l01InitRegisters,w
  3761  06B3  00AE               	movwf	nrf24l01InitRegisters@enAA
  3762                           
  3763                           ;nrf24l01.c: 376: enAA.ENAA_P0 = 0;
  3764  06B4  102E               	bcf	nrf24l01InitRegisters@enAA,0
  3765                           
  3766                           ;nrf24l01.c: 377: enAA.ENAA_P1 = 0;
  3767  06B5  10AE               	bcf	nrf24l01InitRegisters@enAA,1
  3768                           
  3769                           ;nrf24l01.c: 378: enAA.ENAA_P2 = 0;
  3770  06B6  112E               	bcf	nrf24l01InitRegisters@enAA,2
  3771                           
  3772                           ;nrf24l01.c: 379: enAA.ENAA_P3 = 0;
  3773  06B7  11AE               	bcf	nrf24l01InitRegisters@enAA,3
  3774                           
  3775                           ;nrf24l01.c: 380: enAA.ENAA_P4 = 0;
  3776  06B8  122E               	bcf	nrf24l01InitRegisters@enAA,4
  3777                           
  3778                           ;nrf24l01.c: 381: enAA.ENAA_P5 = 0;
  3779  06B9  12AE               	bcf	nrf24l01InitRegisters@enAA,5
  3780                           
  3781                           ;nrf24l01.c: 382: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3782  06BA  082E               	movf	nrf24l01InitRegisters@enAA,w
  3783  06BB  00A7               	movwf	??_nrf24l01InitRegisters
  3784  06BC  0827               	movf	??_nrf24l01InitRegisters,w
  3785  06BD  00A0               	movwf	nrf24l01Send@data
  3786  06BE  3021               	movlw	33
  3787  06BF  3193  236D  3186   	fcall	_nrf24l01Send
  3788                           
  3789                           ;nrf24l01.c: 386: n_FEATURE_t feature;;nrf24l01.c: 387: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3790  06C2  0020               	movlb	0	; select bank0
  3791  06C3  01A0               	clrf	nrf24l01Send@data
  3792  06C4  301D               	movlw	29
  3793  06C5  3193  236D  3186   	fcall	_nrf24l01Send
  3794  06C8  0020               	movlb	0	; select bank0
  3795  06C9  00A7               	movwf	??_nrf24l01InitRegisters
  3796  06CA  0827               	movf	??_nrf24l01InitRegisters,w
  3797  06CB  00AB               	movwf	nrf24l01InitRegisters@feature
  3798                           
  3799                           ;nrf24l01.c: 388: feature.EN_DPL = 1;
  3800  06CC  152B               	bsf	nrf24l01InitRegisters@feature,2
  3801                           
  3802                           ;nrf24l01.c: 389: feature.EN_DYN_ACK = 1;
  3803  06CD  142B               	bsf	nrf24l01InitRegisters@feature,0
  3804                           
  3805                           ;nrf24l01.c: 390: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3806  06CE  082B               	movf	nrf24l01InitRegisters@feature,w
  3807  06CF  00A7               	movwf	??_nrf24l01InitRegisters
  3808  06D0  0827               	movf	??_nrf24l01InitRegisters,w
  3809  06D1  00A0               	movwf	nrf24l01Send@data
  3810  06D2  303D               	movlw	61
  3811  06D3  3193  236D  3186   	fcall	_nrf24l01Send
  3812                           
  3813                           ;nrf24l01.c: 392: n_DYNPD_t DynPD;;nrf24l01.c: 393: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3814  06D6  0020               	movlb	0	; select bank0
  3815  06D7  01A0               	clrf	nrf24l01Send@data
  3816  06D8  301C               	movlw	28
  3817  06D9  3193  236D  3186   	fcall	_nrf24l01Send
  3818  06DC  0020               	movlb	0	; select bank0
  3819  06DD  00A7               	movwf	??_nrf24l01InitRegisters
  3820  06DE  0827               	movf	??_nrf24l01InitRegisters,w
  3821  06DF  00AF               	movwf	nrf24l01InitRegisters@DynPD
  3822                           
  3823                           ;nrf24l01.c: 394: DynPD.DPL_P0 = 1;
  3824  06E0  142F               	bsf	nrf24l01InitRegisters@DynPD,0
  3825                           
  3826                           ;nrf24l01.c: 395: DynPD.DPL_P1 = 1;
  3827  06E1  14AF               	bsf	nrf24l01InitRegisters@DynPD,1
  3828                           
  3829                           ;nrf24l01.c: 396: DynPD.DPL_P2 = 1;
  3830  06E2  152F               	bsf	nrf24l01InitRegisters@DynPD,2
  3831                           
  3832                           ;nrf24l01.c: 397: DynPD.DPL_P3 = 1;
  3833  06E3  15AF               	bsf	nrf24l01InitRegisters@DynPD,3
  3834                           
  3835                           ;nrf24l01.c: 398: DynPD.DPL_P4 = 1;
  3836  06E4  162F               	bsf	nrf24l01InitRegisters@DynPD,4
  3837                           
  3838                           ;nrf24l01.c: 399: DynPD.DPL_P5 = 1;
  3839  06E5  16AF               	bsf	nrf24l01InitRegisters@DynPD,5
  3840                           
  3841                           ;nrf24l01.c: 400: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3842  06E6  082F               	movf	nrf24l01InitRegisters@DynPD,w
  3843  06E7  00A7               	movwf	??_nrf24l01InitRegisters
  3844  06E8  0827               	movf	??_nrf24l01InitRegisters,w
  3845  06E9  00A0               	movwf	nrf24l01Send@data
  3846  06EA  303C               	movlw	60
  3847  06EB  3193  236D  3186   	fcall	_nrf24l01Send
  3848                           
  3849                           ;nrf24l01.c: 403: unsigned int i;;nrf24l01.c: 404: for (i = 0; i < 6; i++){
  3850  06EE  0020               	movlb	0	; select bank0
  3851  06EF  01B1               	clrf	nrf24l01InitRegisters@i
  3852  06F0  01B2               	clrf	nrf24l01InitRegisters@i+1
  3853  06F1  3000               	movlw	0
  3854  06F2  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3855  06F3  3006               	movlw	6
  3856  06F4  1903               	skipnz
  3857  06F5  0231               	subwf	nrf24l01InitRegisters@i,w
  3858  06F6  1803               	btfsc	3,0
  3859  06F7  2F51               	goto	l4063
  3860  06F8                     l4049:	
  3861                           
  3862                           ;nrf24l01.c: 406: nrf24l01SPIStart();
  3863  06F8  3191  21CC  3186   	fcall	_nrf24l01SPIStart
  3864                           
  3865                           ;nrf24l01.c: 407: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3866  06FB  0020               	movlb	0	; select bank0
  3867  06FC  0831               	movf	nrf24l01InitRegisters@i,w
  3868  06FD  3E0A               	addlw	10
  3869  06FE  3820               	iorlw	32
  3870  06FF  3191  21DD  3186   	fcall	_nrf24l01SPISend
  3871                           
  3872                           ;nrf24l01.c: 409: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3873  0702  3045               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3874  0703  0084               	movwf	4
  3875  0704  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3876  0705  0085               	movwf	5
  3877  0706  0800               	movf	0,w	;code access
  3878  0707  0020               	movlb	0	; select bank0
  3879  0708  00A7               	movwf	??_nrf24l01InitRegisters
  3880  0709  0831               	movf	nrf24l01InitRegisters@i,w
  3881  070A  00A8               	movwf	??_nrf24l01InitRegisters+1
  3882  070B  0828               	movf	??_nrf24l01InitRegisters+1,w
  3883  070C  00A0               	movwf	___bmul@multiplicand
  3884  070D  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3885  070E  0084               	movwf	4
  3886  070F  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3887  0710  0085               	movwf	5
  3888  0711  0800               	movf	0,w	;code access
  3889  0712  3191  21F9  3186   	fcall	___bmul
  3890  0715  0020               	movlb	0	; select bank0
  3891  0716  0727               	addwf	??_nrf24l01InitRegisters,w
  3892  0717  3191  21DD  3186   	fcall	_nrf24l01SPISend
  3893                           
  3894                           ;nrf24l01.c: 411: if (i < 2){
  3895  071A  3000               	movlw	0
  3896  071B  0020               	movlb	0	; select bank0
  3897  071C  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3898  071D  3002               	movlw	2
  3899  071E  1903               	skipnz
  3900  071F  0231               	subwf	nrf24l01InitRegisters@i,w
  3901  0720  1803               	skipnc
  3902  0721  2F42               	goto	l4057
  3903                           
  3904                           ;nrf24l01.c: 412: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3905  0722  3044               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3906  0723  0084               	movwf	4
  3907  0724  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3908  0725  0085               	movwf	5
  3909  0726  0800               	movf	0,w	;code access
  3910  0727  3191  21DD  3186   	fcall	_nrf24l01SPISend
  3911                           
  3912                           ;nrf24l01.c: 413: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3913  072A  3043               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3914  072B  0084               	movwf	4
  3915  072C  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3916  072D  0085               	movwf	5
  3917  072E  0800               	movf	0,w	;code access
  3918  072F  3191  21DD  3186   	fcall	_nrf24l01SPISend
  3919                           
  3920                           ;nrf24l01.c: 414: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3921  0732  3042               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3922  0733  0084               	movwf	4
  3923  0734  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3924  0735  0085               	movwf	5
  3925  0736  0800               	movf	0,w	;code access
  3926  0737  3191  21DD  3186   	fcall	_nrf24l01SPISend
  3927                           
  3928                           ;nrf24l01.c: 415: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3929  073A  3041               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3930  073B  0084               	movwf	4
  3931  073C  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3932  073D  0085               	movwf	5
  3933  073E  0800               	movf	0,w	;code access
  3934  073F  3191  21DD  3186   	fcall	_nrf24l01SPISend
  3935  0742                     l4057:	
  3936                           
  3937                           ;nrf24l01.c: 416: };nrf24l01.c: 418: nrf24l01SPIEnd();
  3938  0742  3191  21BD  3186   	fcall	_nrf24l01SPIEnd
  3939  0745  3001               	movlw	1
  3940  0746  0020               	movlb	0	; select bank0
  3941  0747  07B1               	addwf	nrf24l01InitRegisters@i,f
  3942  0748  3000               	movlw	0
  3943  0749  3DB2               	addwfc	nrf24l01InitRegisters@i+1,f
  3944  074A  3000               	movlw	0
  3945  074B  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3946  074C  3006               	movlw	6
  3947  074D  1903               	skipnz
  3948  074E  0231               	subwf	nrf24l01InitRegisters@i,w
  3949  074F  1C03               	skipc
  3950  0750  2EF8               	goto	l4049
  3951  0751                     l4063:	
  3952                           
  3953                           ;nrf24l01.c: 419: };nrf24l01.c: 421: nrf24l01SetTXPipe(0);
  3954  0751  3000               	movlw	0
  3955  0752  3197  2777  3186   	fcall	_nrf24l01SetTXPipe
  3956                           
  3957                           ;nrf24l01.c: 425: n_STATUS_t status;;nrf24l01.c: 426: status.byte = 0x00;
  3958  0755  0020               	movlb	0	; select bank0
  3959  0756  01AD               	clrf	nrf24l01InitRegisters@status
  3960                           
  3961                           ;nrf24l01.c: 427: status.RX_DR = 1;
  3962  0757  172D               	bsf	nrf24l01InitRegisters@status,6
  3963                           
  3964                           ;nrf24l01.c: 428: status.TX_DS = 1;
  3965  0758  16AD               	bsf	nrf24l01InitRegisters@status,5
  3966                           
  3967                           ;nrf24l01.c: 429: status.MAX_RT = 1;
  3968  0759  162D               	bsf	nrf24l01InitRegisters@status,4
  3969                           
  3970                           ;nrf24l01.c: 430: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  3971  075A  082D               	movf	nrf24l01InitRegisters@status,w
  3972  075B  00A7               	movwf	??_nrf24l01InitRegisters
  3973  075C  0827               	movf	??_nrf24l01InitRegisters,w
  3974  075D  00A0               	movwf	nrf24l01Send@data
  3975  075E  3027               	movlw	39
  3976  075F  3193  236D  3186   	fcall	_nrf24l01Send
  3977                           
  3978                           ;nrf24l01.c: 433: nrf24l01Send((unsigned) 0b11100001, 0);
  3979  0762  0020               	movlb	0	; select bank0
  3980  0763  01A0               	clrf	nrf24l01Send@data
  3981  0764  30E1               	movlw	225
  3982  0765  3193  236D  3186   	fcall	_nrf24l01Send
  3983                           
  3984                           ;nrf24l01.c: 434: nrf24l01Send((unsigned) 0b11100010, 0);
  3985  0768  0020               	movlb	0	; select bank0
  3986  0769  01A0               	clrf	nrf24l01Send@data
  3987  076A  30E2               	movlw	226
  3988  076B  3193  236D  3186   	fcall	_nrf24l01Send
  3989                           
  3990                           ;nrf24l01.c: 437: config.PRIM_RX = 1;
  3991  076E  0020               	movlb	0	; select bank0
  3992  076F  1430               	bsf	nrf24l01InitRegisters@config,0
  3993                           
  3994                           ;nrf24l01.c: 438: config.EN_CRC = 1;
  3995  0770  15B0               	bsf	nrf24l01InitRegisters@config,3
  3996                           
  3997                           ;nrf24l01.c: 439: config.CRCO = 1;
  3998  0771  1530               	bsf	nrf24l01InitRegisters@config,2
  3999                           
  4000                           ;nrf24l01.c: 440: config.PWR_UP = 1;
  4001  0772  14B0               	bsf	nrf24l01InitRegisters@config,1
  4002                           
  4003                           ;nrf24l01.c: 441: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  4004  0773  0830               	movf	nrf24l01InitRegisters@config,w
  4005  0774  00A7               	movwf	??_nrf24l01InitRegisters
  4006  0775  0827               	movf	??_nrf24l01InitRegisters,w
  4007  0776  00A0               	movwf	nrf24l01Send@data
  4008  0777  3020               	movlw	32
  4009  0778  3193  236D         	fcall	_nrf24l01Send
  4010  077A  0008               	return
  4011  077B                     __end_of_nrf24l01InitRegisters:	
  4012                           
  4013                           	psect	text4
  4014  138D                     __ptext4:	
  4015 ;; *************** function _nrf24l01SetRXPipe *****************
  4016 ;; Defined at:
  4017 ;;		line 324 in file "nrf24l01.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;  pipe            1    wreg     unsigned char 
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;  pipe            1    5[BANK0 ] unsigned char 
  4022 ;;  enRXAddr        1    6[BANK0 ] struct .
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  1    wreg      void 
  4025 ;; Registers used:
  4026 ;;		wreg, status,2, status,0, pclath, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4033 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4034 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4035 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;Total ram usage:        4 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:   10
  4039 ;; This function calls:
  4040 ;;		_nrf24l01Send
  4041 ;; This function is called by:
  4042 ;;		_main
  4043 ;;		_nrf24l01InitRegisters
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           
  4048                           ;psect for function _nrf24l01SetRXPipe
  4049  138D                     _nrf24l01SetRXPipe:	
  4050                           
  4051                           ;incstack = 0
  4052                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4053                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4054  138D  0020               	movlb	0	; select bank0
  4055  138E  00A5               	movwf	nrf24l01SetRXPipe@pipe
  4056                           
  4057                           ;nrf24l01.c: 326: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 328: if (pipe > 5){
  4058  138F  3006               	movlw	6
  4059  1390  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  4060  1391  1C03               	skipc
  4061  1392  2B9A               	goto	l342
  4062                           
  4063                           ;nrf24l01.c: 329: enRXAddr.ERX_P0 = 1;
  4064  1393  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4065                           
  4066                           ;nrf24l01.c: 330: enRXAddr.ERX_P1 = 1;
  4067  1394  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4068                           
  4069                           ;nrf24l01.c: 331: enRXAddr.ERX_P2 = 1;
  4070  1395  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4071                           
  4072                           ;nrf24l01.c: 332: enRXAddr.ERX_P3 = 1;
  4073  1396  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4074                           
  4075                           ;nrf24l01.c: 333: enRXAddr.ERX_P4 = 1;
  4076  1397  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4077                           
  4078                           ;nrf24l01.c: 334: enRXAddr.ERX_P5 = 1;
  4079  1398  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4080                           
  4081                           ;nrf24l01.c: 335: }
  4082  1399  2BA6               	goto	l3753
  4083  139A                     l342:	
  4084                           
  4085                           ;nrf24l01.c: 337: else{;nrf24l01.c: 338: enRXAddr.ERX_P0 = 1;
  4086  139A  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4087                           
  4088                           ;nrf24l01.c: 339: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4089  139B  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4090  139C  00A3               	movwf	??_nrf24l01SetRXPipe
  4091  139D  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4092  139E  2BA0               	goto	u4234
  4093  139F                     u4235:	
  4094  139F  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4095  13A0                     u4234:	
  4096  13A0  0B89               	decfsz	9,f
  4097  13A1  2B9F               	goto	u4235
  4098  13A2  0823               	movf	??_nrf24l01SetRXPipe,w
  4099  13A3  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4100  13A4  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4101  13A5  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4102  13A6                     l3753:	
  4103                           
  4104                           ;nrf24l01.c: 340: };nrf24l01.c: 342: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4105  13A6  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4106  13A7  00A3               	movwf	??_nrf24l01SetRXPipe
  4107  13A8  0823               	movf	??_nrf24l01SetRXPipe,w
  4108  13A9  00A0               	movwf	nrf24l01Send@data
  4109  13AA  3022               	movlw	34
  4110  13AB  3193  236D         	fcall	_nrf24l01Send
  4111  13AD  0008               	return
  4112  13AE                     __end_of_nrf24l01SetRXPipe:	
  4113                           
  4114                           	psect	text5
  4115  1586                     __ptext5:	
  4116 ;; *************** function _nrf24l01GetPipe *****************
  4117 ;; Defined at:
  4118 ;;		line 265 in file "main.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  name            1    wreg     PTR unsigned char 
  4121 ;;		 -> romDataMap(28), 
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4124 ;;		 -> romDataMap(28), 
  4125 ;;  i               1   10[BANK0 ] unsigned char 
  4126 ;;  pipe            1    8[BANK0 ] unsigned char 
  4127 ;; Return value:  Size  Location     Type
  4128 ;;                  1    wreg      unsigned char 
  4129 ;; Registers used:
  4130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4137 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4138 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4139 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4140 ;;Total ram usage:        5 bytes
  4141 ;; Hardware stack levels used:    1
  4142 ;; Hardware stack levels required when called:    8
  4143 ;; This function calls:
  4144 ;;		___lwmod
  4145 ;;		_strlen
  4146 ;; This function is called by:
  4147 ;;		_main
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           
  4152                           ;psect for function _nrf24l01GetPipe
  4153  1586                     _nrf24l01GetPipe:	
  4154                           
  4155                           ;incstack = 0
  4156                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4157                           ;nrf24l01GetPipe@name stored from wreg
  4158  1586  0020               	movlb	0	; select bank0
  4159  1587  00A9               	movwf	nrf24l01GetPipe@name
  4160                           
  4161                           ;main.c: 266: unsigned char pipe = 0;
  4162  1588  01A8               	clrf	nrf24l01GetPipe@pipe
  4163                           
  4164                           ;main.c: 267: unsigned char i = 0;
  4165  1589  01AA               	clrf	nrf24l01GetPipe@i
  4166                           
  4167                           ;main.c: 270: for (i = 0; i < strlen(name); i++){
  4168  158A  01AA               	clrf	nrf24l01GetPipe@i
  4169  158B                     l4219:	
  4170  158B  0829               	movf	nrf24l01GetPipe@name,w
  4171  158C  00A0               	movwf	strlen@s
  4172  158D  3001               	movlw	1
  4173  158E  00A1               	movwf	strlen@s+1
  4174  158F  3193  234E  3195   	fcall	_strlen
  4175  1592  0020               	movlb	0	; select bank0
  4176  1593  082A               	movf	nrf24l01GetPipe@i,w
  4177  1594  00A6               	movwf	??_nrf24l01GetPipe
  4178  1595  01A7               	clrf	??_nrf24l01GetPipe+1
  4179  1596  0821               	movf	?_strlen+1,w
  4180  1597  0227               	subwf	??_nrf24l01GetPipe+1,w
  4181  1598  1D03               	skipz
  4182  1599  2D9C               	goto	u4655
  4183  159A  0820               	movf	?_strlen,w
  4184  159B  0226               	subwf	??_nrf24l01GetPipe,w
  4185  159C                     u4655:	
  4186  159C  1803               	btfsc	3,0
  4187  159D  2DAE               	goto	l4221
  4188                           
  4189                           ;main.c: 271: pipe+= name[i];
  4190  159E  082A               	movf	nrf24l01GetPipe@i,w
  4191  159F  0729               	addwf	nrf24l01GetPipe@name,w
  4192  15A0  00A6               	movwf	??_nrf24l01GetPipe
  4193  15A1  0826               	movf	??_nrf24l01GetPipe,w
  4194  15A2  0086               	movwf	6
  4195  15A3  3001               	movlw	1	; select bank2/3
  4196  15A4  0087               	movwf	7
  4197  15A5  0801               	movf	1,w
  4198  15A6  00A7               	movwf	??_nrf24l01GetPipe+1
  4199  15A7  0827               	movf	??_nrf24l01GetPipe+1,w
  4200  15A8  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4201  15A9  3001               	movlw	1
  4202  15AA  00A6               	movwf	??_nrf24l01GetPipe
  4203  15AB  0826               	movf	??_nrf24l01GetPipe,w
  4204  15AC  07AA               	addwf	nrf24l01GetPipe@i,f
  4205  15AD  2D8B               	goto	l4219
  4206  15AE                     l4221:	
  4207                           
  4208                           ;main.c: 272: };main.c: 274: return (unsigned) pipe % 6;
  4209  15AE  3006               	movlw	6
  4210  15AF  00A0               	movwf	___lwmod@divisor
  4211  15B0  3000               	movlw	0
  4212  15B1  00A1               	movwf	___lwmod@divisor+1
  4213  15B2  0828               	movf	nrf24l01GetPipe@pipe,w
  4214  15B3  00A6               	movwf	??_nrf24l01GetPipe
  4215  15B4  01A7               	clrf	??_nrf24l01GetPipe+1
  4216  15B5  0826               	movf	??_nrf24l01GetPipe,w
  4217  15B6  00A2               	movwf	___lwmod@dividend
  4218  15B7  0827               	movf	??_nrf24l01GetPipe+1,w
  4219  15B8  00A3               	movwf	___lwmod@dividend+1
  4220  15B9  3194  2496         	fcall	___lwmod
  4221  15BB  0020               	movlb	0	; select bank0
  4222  15BC  0820               	movf	?___lwmod,w
  4223  15BD  0008               	return
  4224  15BE                     __end_of_nrf24l01GetPipe:	
  4225                           
  4226                           	psect	text6
  4227  1496                     __ptext6:	
  4228 ;; *************** function ___lwmod *****************
  4229 ;; Defined at:
  4230 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;  divisor         2    0[BANK0 ] unsigned int 
  4233 ;;  dividend        2    2[BANK0 ] unsigned int 
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  counter         1    5[BANK0 ] unsigned char 
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  2    0[BANK0 ] unsigned int 
  4238 ;; Registers used:
  4239 ;;		wreg, status,2, status,0
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4245 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;Total ram usage:        6 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    7
  4252 ;; This function calls:
  4253 ;;		Nothing
  4254 ;; This function is called by:
  4255 ;;		_nrf24l01GetPipe
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           
  4260                           ;psect for function ___lwmod
  4261  1496                     ___lwmod:	
  4262                           
  4263                           ;incstack = 0
  4264                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4265  1496  0020               	movlb	0	; select bank0
  4266  1497  0820               	movf	___lwmod@divisor,w
  4267  1498  0421               	iorwf	___lwmod@divisor+1,w
  4268  1499  1903               	btfsc	3,2
  4269  149A  2CBE               	goto	l4111
  4270  149B  01A5               	clrf	___lwmod@counter
  4271  149C  0AA5               	incf	___lwmod@counter,f
  4272  149D                     l4101:	
  4273  149D  1BA1               	btfsc	___lwmod@divisor+1,7
  4274  149E  2CA9               	goto	l4103
  4275  149F  3001               	movlw	1
  4276  14A0                     u4555:	
  4277  14A0  35A0               	lslf	___lwmod@divisor,f
  4278  14A1  0DA1               	rlf	___lwmod@divisor+1,f
  4279  14A2  0B89               	decfsz	9,f
  4280  14A3  2CA0               	goto	u4555
  4281  14A4  3001               	movlw	1
  4282  14A5  00A4               	movwf	??___lwmod
  4283  14A6  0824               	movf	??___lwmod,w
  4284  14A7  07A5               	addwf	___lwmod@counter,f
  4285  14A8  2C9D               	goto	l4101
  4286  14A9                     l4103:	
  4287  14A9  0821               	movf	___lwmod@divisor+1,w
  4288  14AA  0223               	subwf	___lwmod@dividend+1,w
  4289  14AB  1D03               	skipz
  4290  14AC  2CAF               	goto	u4575
  4291  14AD  0820               	movf	___lwmod@divisor,w
  4292  14AE  0222               	subwf	___lwmod@dividend,w
  4293  14AF                     u4575:	
  4294  14AF  1C03               	skipc
  4295  14B0  2CB5               	goto	l4107
  4296  14B1  0820               	movf	___lwmod@divisor,w
  4297  14B2  02A2               	subwf	___lwmod@dividend,f
  4298  14B3  0821               	movf	___lwmod@divisor+1,w
  4299  14B4  3BA3               	subwfb	___lwmod@dividend+1,f
  4300  14B5                     l4107:	
  4301  14B5  3001               	movlw	1
  4302  14B6                     u4585:	
  4303  14B6  36A1               	lsrf	___lwmod@divisor+1,f
  4304  14B7  0CA0               	rrf	___lwmod@divisor,f
  4305  14B8  0B89               	decfsz	9,f
  4306  14B9  2CB6               	goto	u4585
  4307  14BA  3001               	movlw	1
  4308  14BB  02A5               	subwf	___lwmod@counter,f
  4309  14BC  1D03               	btfss	3,2
  4310  14BD  2CA9               	goto	l4103
  4311  14BE                     l4111:	
  4312  14BE  0823               	movf	___lwmod@dividend+1,w
  4313  14BF  00A1               	movwf	?___lwmod+1
  4314  14C0  0822               	movf	___lwmod@dividend,w
  4315  14C1  00A0               	movwf	?___lwmod
  4316  14C2  0008               	return
  4317  14C3                     __end_of___lwmod:	
  4318                           
  4319                           	psect	text7
  4320  04C3                     __ptext7:	
  4321 ;; *************** function _loop *****************
  4322 ;; Defined at:
  4323 ;;		line 199 in file "main.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;		None
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;  packet         33   15[BANK2 ] struct .
  4328 ;;  ta              3    3[BANK2 ] float 
  4329 ;;  vt              3    0[BANK2 ] float 
  4330 ;;  rfSetup         1   12[BANK2 ] struct .
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  1    wreg      void 
  4333 ;; Registers used:
  4334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;      Locals:         0       0       0      48       0       0       0       0       0       0       0       0       
      +0       0
  4342 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4343 ;;      Totals:         0       0       1      48       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;Total ram usage:       49 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:   15
  4347 ;; This function calls:
  4348 ;;		___awtoft
  4349 ;;		___ftadd
  4350 ;;		___ftdiv
  4351 ;;		___ftmul
  4352 ;;		___ftneg
  4353 ;;		___lbtoft
  4354 ;;		_checkTXPower
  4355 ;;		_getADCValue
  4356 ;;		_nrf24l01Send
  4357 ;;		_nrf24l01SendPacket
  4358 ;;		_setMessage
  4359 ;;		_sleep
  4360 ;; This function is called by:
  4361 ;;		_main
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           
  4366                           ;psect for function _loop
  4367  04C3                     _loop:	
  4368                           
  4369                           ;main.c: 202: nrf24l01Packet_t packet;;main.c: 205: setMessage(&packet, "DBG", counter);
  4370                           
  4371                           ;incstack = 0
  4372                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4373  04C3  302F               	movlw	low loop@packet
  4374  04C4  0021               	movlb	1	; select bank1
  4375  04C5  00B9               	movwf	setMessage@packet^(0+128)
  4376  04C6  3001               	movlw	high loop@packet
  4377  04C7  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4378  04C8  3059               	movlw	low (STR_6| (0+32768))
  4379  04C9  00BB               	movwf	setMessage@topic^(0+128)
  4380  04CA  3098               	movlw	high (STR_6| (0+32768))
  4381  04CB  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4382  04CC  0022               	movlb	2	; select bank2
  4383  04CD  0850               	movf	_counter^(0+256),w
  4384  04CE  0021               	movlb	1	; select bank1
  4385  04CF  00BD               	movwf	setMessage@value^(0+128)
  4386  04D0  0022               	movlb	2	; select bank2
  4387  04D1  0851               	movf	(_counter+1)^(0+256),w
  4388  04D2  0021               	movlb	1	; select bank1
  4389  04D3  00BE               	movwf	(setMessage@value+1)^(0+128)
  4390  04D4  0022               	movlb	2	; select bank2
  4391  04D5  0852               	movf	(_counter+2)^(0+256),w
  4392  04D6  0021               	movlb	1	; select bank1
  4393  04D7  00BF               	movwf	(setMessage@value+2)^(0+128)
  4394  04D8  3189  2182  3184   	fcall	_setMessage
  4395                           
  4396                           ;main.c: 206: packet.packetData.ACKRequest = 0;
  4397  04DB  0022               	movlb	2	; select bank2
  4398  04DC  112F               	bcf	loop@packet^(0+256),2
  4399                           
  4400                           ;main.c: 207: nrf24l01SendPacket(&packet);
  4401  04DD  302F               	movlw	low loop@packet
  4402  04DE  0020               	movlb	0	; select bank0
  4403  04DF  00A7               	movwf	nrf24l01SendPacket@Packet
  4404  04E0  3001               	movlw	high loop@packet
  4405  04E1  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4406  04E2  318D  254A  3184   	fcall	_nrf24l01SendPacket
  4407                           
  4408                           ;main.c: 208: checkTXPower();
  4409  04E5  3192  2231  3184   	fcall	_checkTXPower
  4410                           
  4411                           ;main.c: 209: sleep(2000);
  4412  04E8  30D0               	movlw	208
  4413  04E9  0021               	movlb	1	; select bank1
  4414  04EA  00BE               	movwf	sleep@milliseconds^(0+128)
  4415  04EB  3007               	movlw	7
  4416  04EC  00BF               	movwf	(sleep@milliseconds^(0+128)+1)
  4417  04ED  3197  27BB  3184   	fcall	_sleep
  4418                           
  4419                           ;main.c: 213: FVRCONbits.TSEN = 1;
  4420  04F0  0022               	movlb	2	; select bank2
  4421  04F1  1697               	bsf	23,5	;volatile
  4422                           
  4423                           ;main.c: 214: float vt = (2.048 - getADCValue(0b111101)) / (FVRCONbits.TSRNG ? 2 : 4);
  4424  04F2  1A17               	btfsc	23,4	;volatile
  4425  04F3  2CF6               	goto	l4393
  4426  04F4  3004               	movlw	4
  4427  04F5  2CF7               	goto	L1
  4428  04F6                     l4393:	
  4429  04F6  3002               	movlw	2
  4430  04F7                     L1:	
  4431  04F7  00AD               	movwf	_loop$899^(0+256)
  4432  04F8  3000               	movlw	0
  4433  04F9  00AE               	movwf	(_loop$899^(0+256)+1)
  4434  04FA  303D               	movlw	61
  4435  04FB  318A  228F  3184   	fcall	_getADCValue
  4436  04FE  0020               	movlb	0	; select bank0
  4437  04FF  084B               	movf	?_getADCValue,w
  4438  0500  00D7               	movwf	___ftneg@f1
  4439  0501  084C               	movf	?_getADCValue+1,w
  4440  0502  00D8               	movwf	___ftneg@f1+1
  4441  0503  084D               	movf	?_getADCValue+2,w
  4442  0504  00D9               	movwf	___ftneg@f1+2
  4443  0505  3191  21D4  3184   	fcall	___ftneg
  4444  0508  0020               	movlb	0	; select bank0
  4445  0509  0857               	movf	?___ftneg,w
  4446  050A  0022               	movlb	2	; select bank2
  4447  050B  00A6               	movwf	_loop$2138^(0+256)
  4448  050C  0020               	movlb	0	; select bank0
  4449  050D  0858               	movf	?___ftneg+1,w
  4450  050E  0022               	movlb	2	; select bank2
  4451  050F  00A7               	movwf	(_loop$2138+1)^(0+256)
  4452  0510  0020               	movlb	0	; select bank0
  4453  0511  0859               	movf	?___ftneg+2,w
  4454  0512  0022               	movlb	2	; select bank2
  4455  0513  00A8               	movwf	(_loop$2138+2)^(0+256)
  4456  0514  082E               	movf	(_loop$899+1)^(0+256),w
  4457  0515  0020               	movlb	0	; select bank0
  4458  0516  00A9               	movwf	___awtoft@c+1
  4459  0517  0022               	movlb	2	; select bank2
  4460  0518  082D               	movf	_loop$899^(0+256),w
  4461  0519  0020               	movlb	0	; select bank0
  4462  051A  00A8               	movwf	___awtoft@c
  4463  051B  3193  23AE  3184   	fcall	___awtoft
  4464  051E  0020               	movlb	0	; select bank0
  4465  051F  0828               	movf	?___awtoft,w
  4466  0520  00BB               	movwf	___ftdiv@f2
  4467  0521  0829               	movf	?___awtoft+1,w
  4468  0522  00BC               	movwf	___ftdiv@f2+1
  4469  0523  082A               	movf	?___awtoft+2,w
  4470  0524  00BD               	movwf	___ftdiv@f2+2
  4471  0525  3012               	movlw	18
  4472  0526  00AE               	movwf	___ftadd@f1
  4473  0527  3003               	movlw	3
  4474  0528  00AF               	movwf	___ftadd@f1+1
  4475  0529  3040               	movlw	64
  4476  052A  00B0               	movwf	___ftadd@f1+2
  4477  052B  0022               	movlb	2	; select bank2
  4478  052C  0826               	movf	_loop$2138^(0+256),w
  4479  052D  0020               	movlb	0	; select bank0
  4480  052E  00B1               	movwf	___ftadd@f2
  4481  052F  0022               	movlb	2	; select bank2
  4482  0530  0827               	movf	(_loop$2138+1)^(0+256),w
  4483  0531  0020               	movlb	0	; select bank0
  4484  0532  00B2               	movwf	___ftadd@f2+1
  4485  0533  0022               	movlb	2	; select bank2
  4486  0534  0828               	movf	(_loop$2138+2)^(0+256),w
  4487  0535  0020               	movlb	0	; select bank0
  4488  0536  00B3               	movwf	___ftadd@f2+2
  4489  0537  318F  270A  3184   	fcall	___ftadd
  4490  053A  0020               	movlb	0	; select bank0
  4491  053B  082E               	movf	?___ftadd,w
  4492  053C  00BE               	movwf	___ftdiv@f1
  4493  053D  082F               	movf	?___ftadd+1,w
  4494  053E  00BF               	movwf	___ftdiv@f1+1
  4495  053F  0830               	movf	?___ftadd+2,w
  4496  0540  00C0               	movwf	___ftdiv@f1+2
  4497  0541  318B  2335  3184   	fcall	___ftdiv
  4498  0544  0020               	movlb	0	; select bank0
  4499  0545  083B               	movf	?___ftdiv,w
  4500  0546  0022               	movlb	2	; select bank2
  4501  0547  00A0               	movwf	loop@vt^(0+256)
  4502  0548  0020               	movlb	0	; select bank0
  4503  0549  083C               	movf	?___ftdiv+1,w
  4504  054A  0022               	movlb	2	; select bank2
  4505  054B  00A1               	movwf	(loop@vt+1)^(0+256)
  4506  054C  0020               	movlb	0	; select bank0
  4507  054D  083D               	movf	?___ftdiv+2,w
  4508  054E  0022               	movlb	2	; select bank2
  4509  054F  00A2               	movwf	(loop@vt+2)^(0+256)
  4510                           
  4511                           ;main.c: 215: FVRCONbits.TSEN = 0;
  4512  0550  1297               	bcf	23,5	;volatile
  4513                           
  4514                           ;main.c: 223: float ta = (vt / -0.0014) - (0.6063 / -0.0014) - 40 + 14.8;
  4515  0551  30F0               	movlw	240
  4516  0552  0020               	movlb	0	; select bank0
  4517  0553  00AE               	movwf	___ftadd@f1
  4518  0554  30CB               	movlw	203
  4519  0555  00AF               	movwf	___ftadd@f1+1
  4520  0556  3043               	movlw	67
  4521  0557  00B0               	movwf	___ftadd@f1+2
  4522  0558  3080               	movlw	128
  4523  0559  00BB               	movwf	___ftdiv@f2
  4524  055A  30B7               	movlw	183
  4525  055B  00BC               	movwf	___ftdiv@f2+1
  4526  055C  30BA               	movlw	186
  4527  055D  00BD               	movwf	___ftdiv@f2+2
  4528  055E  0022               	movlb	2	; select bank2
  4529  055F  0820               	movf	loop@vt^(0+256),w
  4530  0560  0020               	movlb	0	; select bank0
  4531  0561  00BE               	movwf	___ftdiv@f1
  4532  0562  0022               	movlb	2	; select bank2
  4533  0563  0821               	movf	(loop@vt+1)^(0+256),w
  4534  0564  0020               	movlb	0	; select bank0
  4535  0565  00BF               	movwf	___ftdiv@f1+1
  4536  0566  0022               	movlb	2	; select bank2
  4537  0567  0822               	movf	(loop@vt+2)^(0+256),w
  4538  0568  0020               	movlb	0	; select bank0
  4539  0569  00C0               	movwf	___ftdiv@f1+2
  4540  056A  318B  2335  3184   	fcall	___ftdiv
  4541  056D  0020               	movlb	0	; select bank0
  4542  056E  083B               	movf	?___ftdiv,w
  4543  056F  00B1               	movwf	___ftadd@f2
  4544  0570  083C               	movf	?___ftdiv+1,w
  4545  0571  00B2               	movwf	___ftadd@f2+1
  4546  0572  083D               	movf	?___ftdiv+2,w
  4547  0573  00B3               	movwf	___ftadd@f2+2
  4548  0574  318F  270A  3184   	fcall	___ftadd
  4549  0577  0020               	movlb	0	; select bank0
  4550  0578  082E               	movf	?___ftadd,w
  4551  0579  0022               	movlb	2	; select bank2
  4552  057A  00A3               	movwf	loop@ta^(0+256)
  4553  057B  0020               	movlb	0	; select bank0
  4554  057C  082F               	movf	?___ftadd+1,w
  4555  057D  0022               	movlb	2	; select bank2
  4556  057E  00A4               	movwf	(loop@ta+1)^(0+256)
  4557  057F  0020               	movlb	0	; select bank0
  4558  0580  0830               	movf	?___ftadd+2,w
  4559  0581  0022               	movlb	2	; select bank2
  4560  0582  00A5               	movwf	(loop@ta+2)^(0+256)
  4561                           
  4562                           ;main.c: 225: setMessage(&packet, "TEMP", ta);
  4563  0583  302F               	movlw	low loop@packet
  4564  0584  0021               	movlb	1	; select bank1
  4565  0585  00B9               	movwf	setMessage@packet^(0+128)
  4566  0586  3001               	movlw	high loop@packet
  4567  0587  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4568  0588  3046               	movlw	low (STR_7| (0+32768))
  4569  0589  00BB               	movwf	setMessage@topic^(0+128)
  4570  058A  3098               	movlw	high (STR_7| (0+32768))
  4571  058B  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4572  058C  0022               	movlb	2	; select bank2
  4573  058D  0823               	movf	loop@ta^(0+256),w
  4574  058E  0021               	movlb	1	; select bank1
  4575  058F  00BD               	movwf	setMessage@value^(0+128)
  4576  0590  0022               	movlb	2	; select bank2
  4577  0591  0824               	movf	(loop@ta+1)^(0+256),w
  4578  0592  0021               	movlb	1	; select bank1
  4579  0593  00BE               	movwf	(setMessage@value+1)^(0+128)
  4580  0594  0022               	movlb	2	; select bank2
  4581  0595  0825               	movf	(loop@ta+2)^(0+256),w
  4582  0596  0021               	movlb	1	; select bank1
  4583  0597  00BF               	movwf	(setMessage@value+2)^(0+128)
  4584  0598  3189  2182  3184   	fcall	_setMessage
  4585                           
  4586                           ;main.c: 226: packet.packetData.ACKRequest = 1;
  4587  059B  0022               	movlb	2	; select bank2
  4588  059C  152F               	bsf	loop@packet^(0+256),2
  4589                           
  4590                           ;main.c: 227: nrf24l01SendPacket(&packet);
  4591  059D  302F               	movlw	low loop@packet
  4592  059E  0020               	movlb	0	; select bank0
  4593  059F  00A7               	movwf	nrf24l01SendPacket@Packet
  4594  05A0  3001               	movlw	high loop@packet
  4595  05A1  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4596  05A2  318D  254A  3184   	fcall	_nrf24l01SendPacket
  4597                           
  4598                           ;main.c: 228: checkTXPower();
  4599  05A5  3192  2231  3184   	fcall	_checkTXPower
  4600                           
  4601                           ;main.c: 229: sleep(2000);
  4602  05A8  30D0               	movlw	208
  4603  05A9  0021               	movlb	1	; select bank1
  4604  05AA  00BE               	movwf	sleep@milliseconds^(0+128)
  4605  05AB  3007               	movlw	7
  4606  05AC  00BF               	movwf	(sleep@milliseconds^(0+128)+1)
  4607  05AD  3197  27BB  3184   	fcall	_sleep
  4608                           
  4609                           ;main.c: 236: ADCON1bits.ADPREF = 0b00;
  4610  05B0  30FC               	movlw	-4
  4611  05B1  0021               	movlb	1	; select bank1
  4612  05B2  059E               	andwf	30,f	;volatile
  4613                           
  4614                           ;main.c: 237: FVRCONbits.ADFVR = 0b10;
  4615  05B3  0022               	movlb	2	; select bank2
  4616  05B4  0817               	movf	23,w	;volatile
  4617  05B5  39FC               	andlw	-4
  4618  05B6  3802               	iorlw	2
  4619  05B7  0097               	movwf	23	;volatile
  4620                           
  4621                           ;main.c: 238: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4622  05B8  30CF               	movlw	207
  4623  05B9  0020               	movlb	0	; select bank0
  4624  05BA  00D7               	movwf	___ftmul@f1
  4625  05BB  3046               	movlw	70
  4626  05BC  00D8               	movwf	___ftmul@f1+1
  4627  05BD  3040               	movlw	64
  4628  05BE  00D9               	movwf	___ftmul@f1+2
  4629  05BF  3004               	movlw	4
  4630  05C0  318A  228F  3184   	fcall	_getADCValue
  4631  05C3  0020               	movlb	0	; select bank0
  4632  05C4  084B               	movf	?_getADCValue,w
  4633  05C5  00DA               	movwf	___ftmul@f2
  4634  05C6  084C               	movf	?_getADCValue+1,w
  4635  05C7  00DB               	movwf	___ftmul@f2+1
  4636  05C8  084D               	movf	?_getADCValue+2,w
  4637  05C9  00DC               	movwf	___ftmul@f2+2
  4638  05CA  318B  23DE  3184   	fcall	___ftmul
  4639  05CD  0020               	movlb	0	; select bank0
  4640  05CE  0857               	movf	?___ftmul,w
  4641  05CF  0022               	movlb	2	; select bank2
  4642  05D0  00A9               	movwf	_loop$2139^(0+256)
  4643  05D1  0020               	movlb	0	; select bank0
  4644  05D2  0858               	movf	?___ftmul+1,w
  4645  05D3  0022               	movlb	2	; select bank2
  4646  05D4  00AA               	movwf	(_loop$2139+1)^(0+256)
  4647  05D5  0020               	movlb	0	; select bank0
  4648  05D6  0859               	movf	?___ftmul+2,w
  4649  05D7  0022               	movlb	2	; select bank2
  4650  05D8  00AB               	movwf	(_loop$2139+2)^(0+256)
  4651                           
  4652                           ;main.c: 238: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4653  05D9  302F               	movlw	low loop@packet
  4654  05DA  0021               	movlb	1	; select bank1
  4655  05DB  00B9               	movwf	setMessage@packet^(0+128)
  4656  05DC  3001               	movlw	high loop@packet
  4657  05DD  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4658  05DE  304B               	movlw	low (STR_8| (0+32768))
  4659  05DF  00BB               	movwf	setMessage@topic^(0+128)
  4660  05E0  3098               	movlw	high (STR_8| (0+32768))
  4661  05E1  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4662  05E2  0022               	movlb	2	; select bank2
  4663  05E3  0829               	movf	_loop$2139^(0+256),w
  4664  05E4  0021               	movlb	1	; select bank1
  4665  05E5  00BD               	movwf	setMessage@value^(0+128)
  4666  05E6  0022               	movlb	2	; select bank2
  4667  05E7  082A               	movf	(_loop$2139+1)^(0+256),w
  4668  05E8  0021               	movlb	1	; select bank1
  4669  05E9  00BE               	movwf	(setMessage@value+1)^(0+128)
  4670  05EA  0022               	movlb	2	; select bank2
  4671  05EB  082B               	movf	(_loop$2139+2)^(0+256),w
  4672  05EC  0021               	movlb	1	; select bank1
  4673  05ED  00BF               	movwf	(setMessage@value+2)^(0+128)
  4674  05EE  3189  2182  3184   	fcall	_setMessage
  4675                           
  4676                           ;main.c: 239: packet.packetData.ACKRequest = 1;
  4677  05F1  0022               	movlb	2	; select bank2
  4678  05F2  152F               	bsf	loop@packet^(0+256),2
  4679                           
  4680                           ;main.c: 240: nrf24l01SendPacket(&packet);
  4681  05F3  302F               	movlw	low loop@packet
  4682  05F4  0020               	movlb	0	; select bank0
  4683  05F5  00A7               	movwf	nrf24l01SendPacket@Packet
  4684  05F6  3001               	movlw	high loop@packet
  4685  05F7  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4686  05F8  318D  254A  3184   	fcall	_nrf24l01SendPacket
  4687                           
  4688                           ;main.c: 241: checkTXPower();
  4689  05FB  3192  2231  3184   	fcall	_checkTXPower
  4690                           
  4691                           ;main.c: 242: sleep(2000);
  4692  05FE  30D0               	movlw	208
  4693  05FF  0021               	movlb	1	; select bank1
  4694  0600  00BE               	movwf	sleep@milliseconds^(0+128)
  4695  0601  3007               	movlw	7
  4696  0602  00BF               	movwf	(sleep@milliseconds^(0+128)+1)
  4697  0603  3197  27BB  3184   	fcall	_sleep
  4698                           
  4699                           ;main.c: 245: setMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4700  0606  302F               	movlw	low loop@packet
  4701  0607  0021               	movlb	1	; select bank1
  4702  0608  00B9               	movwf	setMessage@packet^(0+128)
  4703  0609  3001               	movlw	high loop@packet
  4704  060A  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4705  060B  3034               	movlw	low (STR_9| (0+32768))
  4706  060C  00BB               	movwf	setMessage@topic^(0+128)
  4707  060D  3098               	movlw	high (STR_9| (0+32768))
  4708  060E  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4709  060F  3013               	movlw	19
  4710  0610  318A  228F  3184   	fcall	_getADCValue
  4711  0613  0020               	movlb	0	; select bank0
  4712  0614  084B               	movf	?_getADCValue,w
  4713  0615  0021               	movlb	1	; select bank1
  4714  0616  00BD               	movwf	setMessage@value^(0+128)
  4715  0617  0020               	movlb	0	; select bank0
  4716  0618  084C               	movf	?_getADCValue+1,w
  4717  0619  0021               	movlb	1	; select bank1
  4718  061A  00BE               	movwf	(setMessage@value+1)^(0+128)
  4719  061B  0020               	movlb	0	; select bank0
  4720  061C  084D               	movf	?_getADCValue+2,w
  4721  061D  0021               	movlb	1	; select bank1
  4722  061E  00BF               	movwf	(setMessage@value+2)^(0+128)
  4723  061F  3189  2182  3184   	fcall	_setMessage
  4724                           
  4725                           ;main.c: 246: packet.packetData.ACKRequest = 1;
  4726  0622  0022               	movlb	2	; select bank2
  4727  0623  152F               	bsf	loop@packet^(0+256),2
  4728                           
  4729                           ;main.c: 247: nrf24l01SendPacket(&packet);
  4730  0624  302F               	movlw	low loop@packet
  4731  0625  0020               	movlb	0	; select bank0
  4732  0626  00A7               	movwf	nrf24l01SendPacket@Packet
  4733  0627  3001               	movlw	high loop@packet
  4734  0628  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4735  0629  318D  254A  3184   	fcall	_nrf24l01SendPacket
  4736                           
  4737                           ;main.c: 248: checkTXPower();
  4738  062C  3192  2231  3184   	fcall	_checkTXPower
  4739                           
  4740                           ;main.c: 249: sleep(2000);
  4741  062F  30D0               	movlw	208
  4742  0630  0021               	movlb	1	; select bank1
  4743  0631  00BE               	movwf	sleep@milliseconds^(0+128)
  4744  0632  3007               	movlw	7
  4745  0633  00BF               	movwf	(sleep@milliseconds^(0+128)+1)
  4746  0634  3197  27BB  3184   	fcall	_sleep
  4747                           
  4748                           ;main.c: 252: n_RF_SETUP_t rfSetup;;main.c: 253: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4749  0637  0020               	movlb	0	; select bank0
  4750  0638  01A0               	clrf	nrf24l01Send@data
  4751  0639  3006               	movlw	6
  4752  063A  3193  236D  3184   	fcall	_nrf24l01Send
  4753  063D  0021               	movlb	1	; select bank1
  4754  063E  00C3               	movwf	??_loop^(0+128)
  4755  063F  0843               	movf	??_loop^(0+128),w
  4756  0640  0022               	movlb	2	; select bank2
  4757  0641  00AC               	movwf	loop@rfSetup^(0+256)
  4758                           
  4759                           ;main.c: 255: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4760  0642  302F               	movlw	low loop@packet
  4761  0643  0021               	movlb	1	; select bank1
  4762  0644  00B9               	movwf	setMessage@packet^(0+128)
  4763  0645  3001               	movlw	high loop@packet
  4764  0646  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4765  0647  303B               	movlw	low (STR_10| (0+32768))
  4766  0648  00BB               	movwf	setMessage@topic^(0+128)
  4767  0649  3098               	movlw	high (STR_10| (0+32768))
  4768  064A  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4769  064B  0022               	movlb	2	; select bank2
  4770  064C  0C2C               	rrf	loop@rfSetup^(0+256),w
  4771  064D  3903               	andlw	3
  4772  064E  3192  22C2  3184   	fcall	___lbtoft
  4773  0651  0020               	movlb	0	; select bank0
  4774  0652  0828               	movf	?___lbtoft,w
  4775  0653  0021               	movlb	1	; select bank1
  4776  0654  00BD               	movwf	setMessage@value^(0+128)
  4777  0655  0020               	movlb	0	; select bank0
  4778  0656  0829               	movf	?___lbtoft+1,w
  4779  0657  0021               	movlb	1	; select bank1
  4780  0658  00BE               	movwf	(setMessage@value+1)^(0+128)
  4781  0659  0020               	movlb	0	; select bank0
  4782  065A  082A               	movf	?___lbtoft+2,w
  4783  065B  0021               	movlb	1	; select bank1
  4784  065C  00BF               	movwf	(setMessage@value+2)^(0+128)
  4785  065D  3189  2182  3184   	fcall	_setMessage
  4786                           
  4787                           ;main.c: 256: packet.packetData.ACKRequest = 1;
  4788  0660  0022               	movlb	2	; select bank2
  4789  0661  152F               	bsf	loop@packet^(0+256),2
  4790                           
  4791                           ;main.c: 257: nrf24l01SendPacket(&packet);
  4792  0662  302F               	movlw	low loop@packet
  4793  0663  0020               	movlb	0	; select bank0
  4794  0664  00A7               	movwf	nrf24l01SendPacket@Packet
  4795  0665  3001               	movlw	high loop@packet
  4796  0666  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4797  0667  318D  254A  3184   	fcall	_nrf24l01SendPacket
  4798                           
  4799                           ;main.c: 258: checkTXPower();
  4800  066A  3192  2231  3184   	fcall	_checkTXPower
  4801                           
  4802                           ;main.c: 259: sleep(2000);
  4803  066D  30D0               	movlw	208
  4804  066E  0021               	movlb	1	; select bank1
  4805  066F  00BE               	movwf	sleep@milliseconds^(0+128)
  4806  0670  3007               	movlw	7
  4807  0671  00BF               	movwf	(sleep@milliseconds^(0+128)+1)
  4808  0672  3197  27BB         	fcall	_sleep
  4809  0674  0008               	return
  4810  0675                     __end_of_loop:	
  4811                           
  4812                           	psect	text8
  4813  17BB                     __ptext8:	
  4814 ;; *************** function _sleep *****************
  4815 ;; Defined at:
  4816 ;;		line 74 in file "main.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;  milliseconds    2   30[BANK1 ] unsigned int 
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;		None
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  1    wreg      void 
  4823 ;; Registers used:
  4824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4830 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4833 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;Total ram usage:        2 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:   14
  4837 ;; This function calls:
  4838 ;;		___lwdiv
  4839 ;;		_doWDTSleep
  4840 ;;		_handleRXData
  4841 ;;		_nrf24l01SetRXMode
  4842 ;; This function is called by:
  4843 ;;		_loop
  4844 ;;		_main
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           
  4849                           ;psect for function _sleep
  4850  17BB                     _sleep:	
  4851                           
  4852                           ;main.c: 77: if (!milliseconds){
  4853                           
  4854                           ;incstack = 0
  4855                           ; Regs used in _sleep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4856  17BB  0021               	movlb	1	; select bank1
  4857  17BC  083E               	movf	sleep@milliseconds^(0+128),w
  4858  17BD  043F               	iorwf	(sleep@milliseconds+1)^(0+128),w
  4859  17BE  1D03               	btfss	3,2
  4860  17BF  2FC4               	goto	l4365
  4861                           
  4862                           ;main.c: 78: doWDTSleep(0b00000);
  4863  17C0  3000               	movlw	0
  4864  17C1  3192  2245         	fcall	_doWDTSleep
  4865                           
  4866                           ;main.c: 79: return;
  4867  17C3  0008               	return
  4868  17C4                     l4365:	
  4869                           
  4870                           ;main.c: 80: };main.c: 85: milliseconds = (unsigned int) (milliseconds / (256 + 128));
  4871  17C4  3080               	movlw	128
  4872  17C5  0020               	movlb	0	; select bank0
  4873  17C6  00A0               	movwf	___lwdiv@divisor
  4874  17C7  3001               	movlw	1
  4875  17C8  00A1               	movwf	___lwdiv@divisor+1
  4876  17C9  0021               	movlb	1	; select bank1
  4877  17CA  083F               	movf	(sleep@milliseconds+1)^(0+128),w
  4878  17CB  0020               	movlb	0	; select bank0
  4879  17CC  00A3               	movwf	___lwdiv@dividend+1
  4880  17CD  0021               	movlb	1	; select bank1
  4881  17CE  083E               	movf	sleep@milliseconds^(0+128),w
  4882  17CF  0020               	movlb	0	; select bank0
  4883  17D0  00A2               	movwf	___lwdiv@dividend
  4884  17D1  3195  2551  3197   	fcall	___lwdiv
  4885  17D4  0020               	movlb	0	; select bank0
  4886  17D5  0821               	movf	?___lwdiv+1,w
  4887  17D6  0021               	movlb	1	; select bank1
  4888  17D7  00BF               	movwf	(sleep@milliseconds+1)^(0+128)
  4889  17D8  0020               	movlb	0	; select bank0
  4890  17D9  0820               	movf	?___lwdiv,w
  4891  17DA  0021               	movlb	1	; select bank1
  4892  17DB  00BE               	movwf	sleep@milliseconds^(0+128)
  4893                           
  4894                           ;main.c: 88: milliseconds++;
  4895  17DC  3001               	movlw	1
  4896  17DD  07BE               	addwf	sleep@milliseconds^(0+128),f
  4897  17DE  3000               	movlw	0
  4898  17DF  3DBF               	addwfc	(sleep@milliseconds+1)^(0+128),f
  4899  17E0                     l4377:	
  4900                           ;main.c: 91: while (--milliseconds){
  4901                           
  4902  17E0  3001               	movlw	1
  4903  17E1  0021               	movlb	1	; select bank1
  4904  17E2  02BE               	subwf	sleep@milliseconds^(0+128),f
  4905  17E3  3000               	movlw	0
  4906  17E4  3BBF               	subwfb	(sleep@milliseconds+1)^(0+128),f
  4907  17E5  083E               	movf	sleep@milliseconds^(0+128),w
  4908  17E6  043F               	iorwf	(sleep@milliseconds+1)^(0+128),w
  4909  17E7  1903               	btfsc	3,2
  4910  17E8  0008               	return
  4911                           
  4912                           ;main.c: 94: nrf24l01SetRXMode(1);
  4913  17E9  3001               	movlw	1
  4914  17EA  3197  2734  3197   	fcall	_nrf24l01SetRXMode
  4915                           
  4916                           ;main.c: 97: doWDTSleep(7);
  4917  17ED  3007               	movlw	7
  4918  17EE  3192  2245  3197   	fcall	_doWDTSleep
  4919                           
  4920                           ;main.c: 100: nrf24l01SetRXMode(0);
  4921  17F1  3000               	movlw	0
  4922  17F2  3197  2734  3197   	fcall	_nrf24l01SetRXMode
  4923                           
  4924                           ;main.c: 103: if (nrf24l01.RXPending){
  4925  17F5  0021               	movlb	1	; select bank1
  4926  17F6  1CEB               	btfss	_nrf24l01^(0+128),1	;volatile
  4927  17F7  2FFB               	goto	l4375
  4928                           
  4929                           ;main.c: 104: handleRXData();
  4930  17F8  3187  277B  3197   	fcall	_handleRXData
  4931  17FB                     l4375:	
  4932                           
  4933                           ;main.c: 105: };main.c: 108: doWDTSleep(0b01000);
  4934  17FB  3008               	movlw	8
  4935  17FC  3192  2245  3197   	fcall	_doWDTSleep
  4936  17FF  2FE0               	goto	l4377
  4937  1800                     __end_of_sleep:	
  4938                           
  4939                           	psect	text9
  4940  077B                     __ptext9:	
  4941 ;; *************** function _handleRXData *****************
  4942 ;; Defined at:
  4943 ;;		line 36 in file "main.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;		None
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;  string         16   12[BANK1 ] unsigned char [16]
  4948 ;;  strings         1   29[BANK1 ] PTR unsigned char 
  4949 ;;		 -> RXPacket(33), NULL(0), 
  4950 ;;  RXPacket        1   28[BANK1 ] PTR struct .
  4951 ;;		 -> RXPacket(33), 
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  1    wreg      void 
  4954 ;; Registers used:
  4955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4962 ;;      Locals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0
  4963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4964 ;;      Totals:         0       1      18       0       0       0       0       0       0       0       0       0       
      +0       0
  4965 ;;Total ram usage:       19 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; Hardware stack levels required when called:   13
  4968 ;; This function calls:
  4969 ;;		_atof
  4970 ;;		_nrf24l01GetRXPacket
  4971 ;;		_nrf24l01SendACK
  4972 ;;		_strcpy
  4973 ;;		_strtok
  4974 ;; This function is called by:
  4975 ;;		_sleep
  4976 ;; This function uses a non-reentrant model
  4977 ;;
  4978                           
  4979                           
  4980                           ;psect for function _handleRXData
  4981  077B                     _handleRXData:	
  4982                           
  4983                           ;main.c: 38: nrf24l01Packet_t * RXPacket = nrf24l01GetRXPacket();
  4984                           
  4985                           ;incstack = 0
  4986                           ; Regs used in _handleRXData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4987  077B  3187  27FE  3187   	fcall	_nrf24l01GetRXPacket
  4988  077E  0020               	movlb	0	; select bank0
  4989  077F  00EF               	movwf	??_handleRXData
  4990  0780  086F               	movf	??_handleRXData,w
  4991  0781  0021               	movlb	1	; select bank1
  4992  0782  00BC               	movwf	handleRXData@RXPacket^(0+128)
  4993                           
  4994                           ;main.c: 41: if (RXPacket->packetData.ACKRequest){
  4995  0783  083C               	movf	handleRXData@RXPacket^(0+128),w
  4996  0784  0086               	movwf	6
  4997  0785  3001               	movlw	1	; select bank2/3
  4998  0786  0087               	movwf	7
  4999  0787  1D01               	btfss	1,2
  5000  0788  2F8D               	goto	l177
  5001                           
  5002                           ;main.c: 42: nrf24l01SendACK(RXPacket);
  5003  0789  083C               	movf	handleRXData@RXPacket^(0+128),w
  5004  078A  3194  24C3  3187   	fcall	_nrf24l01SendACK
  5005  078D                     l177:	
  5006                           
  5007                           ;main.c: 43: };main.c: 45: char string[16];;main.c: 46: char* strings = strtok(RXPacket-
      +                          >Message, "/");
  5008  078D  305D               	movlw	low (STR_1| (0+32768))
  5009  078E  0020               	movlb	0	; select bank0
  5010  078F  00AE               	movwf	strtok@s2
  5011  0790  3098               	movlw	high (STR_1| (0+32768))
  5012  0791  00AF               	movwf	strtok@s2+1
  5013  0792  0021               	movlb	1	; select bank1
  5014  0793  083C               	movf	handleRXData@RXPacket^(0+128),w
  5015  0794  3E01               	addlw	1
  5016  0795  3188  2032  3187   	fcall	_strtok
  5017  0798  0020               	movlb	0	; select bank0
  5018  0799  00EF               	movwf	??_handleRXData
  5019  079A  086F               	movf	??_handleRXData,w
  5020  079B  0021               	movlb	1	; select bank1
  5021  079C  00BD               	movwf	handleRXData@strings^(0+128)
  5022                           
  5023                           ;main.c: 48: strcpy(string, strings);
  5024  079D  30AC               	movlw	low handleRXData@string
  5025  079E  0020               	movlb	0	; select bank0
  5026  079F  00A0               	movwf	strcpy@to
  5027  07A0  3000               	movlw	high handleRXData@string
  5028  07A1  00A1               	movwf	strcpy@to+1
  5029  07A2  0021               	movlb	1	; select bank1
  5030  07A3  083D               	movf	handleRXData@strings^(0+128),w
  5031  07A4  0020               	movlb	0	; select bank0
  5032  07A5  00A2               	movwf	strcpy@from
  5033  07A6  39FF               	andlw	255
  5034  07A7  1D03               	skipz
  5035  07A8  3001               	movlw	1
  5036  07A9  00A3               	movwf	strcpy@from+1
  5037  07AA  3192  22DD  3187   	fcall	_strcpy
  5038                           
  5039                           ;main.c: 58: strings = strtok((0), "/");
  5040  07AD  305D               	movlw	low (STR_1| (0+32768))
  5041  07AE  0020               	movlb	0	; select bank0
  5042  07AF  00AE               	movwf	strtok@s2
  5043  07B0  3098               	movlw	high (STR_1| (0+32768))
  5044  07B1  00AF               	movwf	strtok@s2+1
  5045  07B2  3000               	movlw	0
  5046  07B3  3188  2032  3187   	fcall	_strtok
  5047  07B6  0020               	movlb	0	; select bank0
  5048  07B7  00EF               	movwf	??_handleRXData
  5049  07B8  086F               	movf	??_handleRXData,w
  5050  07B9  0021               	movlb	1	; select bank1
  5051  07BA  00BD               	movwf	handleRXData@strings^(0+128)
  5052                           
  5053                           ;main.c: 59: strcpy(string, strings);
  5054  07BB  30AC               	movlw	low handleRXData@string
  5055  07BC  0020               	movlb	0	; select bank0
  5056  07BD  00A0               	movwf	strcpy@to
  5057  07BE  3000               	movlw	high handleRXData@string
  5058  07BF  00A1               	movwf	strcpy@to+1
  5059  07C0  0021               	movlb	1	; select bank1
  5060  07C1  083D               	movf	handleRXData@strings^(0+128),w
  5061  07C2  0020               	movlb	0	; select bank0
  5062  07C3  00A2               	movwf	strcpy@from
  5063  07C4  39FF               	andlw	255
  5064  07C5  1D03               	skipz
  5065  07C6  3001               	movlw	1
  5066  07C7  00A3               	movwf	strcpy@from+1
  5067  07C8  3192  22DD  3187   	fcall	_strcpy
  5068                           
  5069                           ;main.c: 63: strings = strtok((0), "/");
  5070  07CB  305D               	movlw	low (STR_1| (0+32768))
  5071  07CC  0020               	movlb	0	; select bank0
  5072  07CD  00AE               	movwf	strtok@s2
  5073  07CE  3098               	movlw	high (STR_1| (0+32768))
  5074  07CF  00AF               	movwf	strtok@s2+1
  5075  07D0  3000               	movlw	0
  5076  07D1  3188  2032  3187   	fcall	_strtok
  5077  07D4  0020               	movlb	0	; select bank0
  5078  07D5  00EF               	movwf	??_handleRXData
  5079  07D6  086F               	movf	??_handleRXData,w
  5080  07D7  0021               	movlb	1	; select bank1
  5081  07D8  00BD               	movwf	handleRXData@strings^(0+128)
  5082                           
  5083                           ;main.c: 64: strcpy(string, strings);
  5084  07D9  30AC               	movlw	low handleRXData@string
  5085  07DA  0020               	movlb	0	; select bank0
  5086  07DB  00A0               	movwf	strcpy@to
  5087  07DC  3000               	movlw	high handleRXData@string
  5088  07DD  00A1               	movwf	strcpy@to+1
  5089  07DE  0021               	movlb	1	; select bank1
  5090  07DF  083D               	movf	handleRXData@strings^(0+128),w
  5091  07E0  0020               	movlb	0	; select bank0
  5092  07E1  00A2               	movwf	strcpy@from
  5093  07E2  39FF               	andlw	255
  5094  07E3  1D03               	skipz
  5095  07E4  3001               	movlw	1
  5096  07E5  00A3               	movwf	strcpy@from+1
  5097  07E6  3192  22DD  3187   	fcall	_strcpy
  5098                           
  5099                           ;main.c: 68: counter = atof(string);
  5100  07E9  30AC               	movlw	(low (handleRXData@string| 0))& (0+255)
  5101  07EA  3192  221E         	fcall	_atof
  5102  07EC  0021               	movlb	1	; select bank1
  5103  07ED  0828               	movf	?_atof^(0+128),w
  5104  07EE  0022               	movlb	2	; select bank2
  5105  07EF  00D0               	movwf	_counter^(0+256)
  5106  07F0  0021               	movlb	1	; select bank1
  5107  07F1  0829               	movf	(?_atof+1)^(0+128),w
  5108  07F2  0022               	movlb	2	; select bank2
  5109  07F3  00D1               	movwf	(_counter+1)^(0+256)
  5110  07F4  0021               	movlb	1	; select bank1
  5111  07F5  082A               	movf	(?_atof+2)^(0+128),w
  5112  07F6  0022               	movlb	2	; select bank2
  5113  07F7  00D2               	movwf	(_counter+2)^(0+256)
  5114                           
  5115                           ;main.c: 70: nrf24l01.RXPending = 0;
  5116  07F8  0021               	movlb	1	; select bank1
  5117  07F9  10EB               	bcf	_nrf24l01^(0+128),1	;volatile
  5118  07FA  0008               	return
  5119  07FB                     __end_of_handleRXData:	
  5120                           
  5121                           	psect	text10
  5122  0832                     __ptext10:	
  5123 ;; *************** function _strtok *****************
  5124 ;; Defined at:
  5125 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strtok.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;  s1              1    wreg     PTR unsigned char 
  5128 ;;		 -> RXPacket(33), NULL(0), 
  5129 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
  5130 ;;		 -> STR_3(2), STR_2(2), STR_1(2), 
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;  s1              1   19[BANK0 ] PTR unsigned char 
  5133 ;;		 -> RXPacket(33), NULL(0), 
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      PTR unsigned char 
  5136 ;; Registers used:
  5137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5143 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5144 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5145 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5146 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;Total ram usage:        6 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    9
  5150 ;; This function calls:
  5151 ;;		_strcspn
  5152 ;;		_strspn
  5153 ;; This function is called by:
  5154 ;;		_handleRXData
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           
  5159                           ;psect for function _strtok
  5160  0832                     _strtok:	
  5161                           
  5162                           ;incstack = 0
  5163                           ; Regs used in _strtok: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5164                           ;strtok@s1 stored from wreg
  5165  0832  0020               	movlb	0	; select bank0
  5166  0833  00B3               	movwf	strtok@s1
  5167  0834  0833               	movf	strtok@s1,w
  5168  0835  1D03               	btfss	3,2
  5169  0836  283B               	goto	l3479
  5170  0837  087D               	movf	strtok@sp,w
  5171  0838  00B0               	movwf	??_strtok
  5172  0839  0830               	movf	??_strtok,w
  5173  083A  00B3               	movwf	strtok@s1
  5174  083B                     l3479:	
  5175  083B  0833               	movf	strtok@s1,w
  5176  083C  1D03               	btfss	3,2
  5177  083D  2840               	goto	l3485
  5178  083E  3000               	movlw	0
  5179  083F  0008               	return
  5180  0840                     l3485:	
  5181  0840  082F               	movf	strtok@s2+1,w
  5182  0841  00A8               	movwf	strspn@s2+1
  5183  0842  082E               	movf	strtok@s2,w
  5184  0843  00A7               	movwf	strspn@s2
  5185  0844  0833               	movf	strtok@s1,w
  5186  0845  3188  2002  3188   	fcall	_strspn
  5187  0848  0020               	movlb	0	; select bank0
  5188  0849  0827               	movf	?_strspn,w
  5189  084A  00B0               	movwf	??_strtok
  5190  084B  0830               	movf	??_strtok,w
  5191  084C  07B3               	addwf	strtok@s1,f
  5192  084D  0833               	movf	strtok@s1,w
  5193  084E  0086               	movwf	6
  5194  084F  3001               	movlw	1	; select bank2/3
  5195  0850  0087               	movwf	7
  5196  0851  0801               	movf	1,w
  5197  0852  1D03               	btfss	3,2
  5198  0853  2857               	goto	l3493
  5199  0854  01FD               	clrf	strtok@sp
  5200  0855  3000               	movlw	0
  5201  0856  0008               	return
  5202  0857                     l3493:	
  5203  0857  082F               	movf	strtok@s2+1,w
  5204  0858  00A8               	movwf	strcspn@s2+1
  5205  0859  082E               	movf	strtok@s2,w
  5206  085A  00A7               	movwf	strcspn@s2
  5207  085B  0833               	movf	strtok@s1,w
  5208  085C  3195  2521  3188   	fcall	_strcspn
  5209  085F  0020               	movlb	0	; select bank0
  5210  0860  0827               	movf	?_strcspn,w
  5211  0861  00B0               	movwf	??_strtok
  5212  0862  0828               	movf	?_strcspn+1,w
  5213  0863  00B1               	movwf	??_strtok+1
  5214  0864  0833               	movf	strtok@s1,w
  5215  0865  0730               	addwf	??_strtok,w
  5216  0866  00B2               	movwf	??_strtok+2
  5217  0867  0832               	movf	??_strtok+2,w
  5218  0868  00FD               	movwf	strtok@sp
  5219  0869  087D               	movf	strtok@sp,w
  5220  086A  0086               	movwf	6
  5221  086B  3001               	movlw	1	; select bank2/3
  5222  086C  0087               	movwf	7
  5223  086D  0801               	movf	1,w
  5224  086E  1903               	btfsc	3,2
  5225  086F  287A               	goto	l3501
  5226  0870  087D               	movf	strtok@sp,w
  5227  0871  0086               	movwf	6
  5228  0872  3001               	movlw	1	; select bank2/3
  5229  0873  0087               	movwf	7
  5230  0874  0181               	clrf	1
  5231  0875  3001               	movlw	1
  5232  0876  00B0               	movwf	??_strtok
  5233  0877  0830               	movf	??_strtok,w
  5234  0878  07FD               	addwf	strtok@sp,f
  5235  0879  287B               	goto	l3503
  5236  087A                     l3501:	
  5237  087A  01FD               	clrf	strtok@sp
  5238  087B                     l3503:	
  5239  087B  0833               	movf	strtok@s1,w
  5240  087C  0008               	return
  5241  087D                     __end_of_strtok:	
  5242                           
  5243                           	psect	text11
  5244  0802                     __ptext11:	
  5245 ;; *************** function _strspn *****************
  5246 ;; Defined at:
  5247 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strspn.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;  s1              1    wreg     PTR const unsigned char 
  5250 ;;		 -> RXPacket(33), NULL(0), 
  5251 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  5252 ;;		 -> STR_3(2), STR_2(2), STR_1(2), 
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  5255 ;;		 -> RXPacket(33), NULL(0), 
  5256 ;;  i               2   11[BANK0 ] unsigned int 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  2    7[BANK0 ] unsigned int 
  5259 ;; Registers used:
  5260 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5266 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;Total ram usage:        7 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    8
  5273 ;; This function calls:
  5274 ;;		_strchr
  5275 ;; This function is called by:
  5276 ;;		_strtok
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           
  5281                           ;psect for function _strspn
  5282  0802                     _strspn:	
  5283                           
  5284                           ;incstack = 0
  5285                           ; Regs used in _strspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5286                           ;strspn@s1 stored from wreg
  5287  0802  0020               	movlb	0	; select bank0
  5288  0803  00AD               	movwf	strspn@s1
  5289  0804  01AB               	clrf	strspn@i
  5290  0805  01AC               	clrf	strspn@i+1
  5291  0806  280F               	goto	l3437
  5292  0807                     l3435:	
  5293  0807  3001               	movlw	1
  5294  0808  00A9               	movwf	??_strspn
  5295  0809  0829               	movf	??_strspn,w
  5296  080A  07AD               	addwf	strspn@s1,f
  5297  080B  3001               	movlw	1
  5298  080C  07AB               	addwf	strspn@i,f
  5299  080D  3000               	movlw	0
  5300  080E  3DAC               	addwfc	strspn@i+1,f
  5301  080F                     l3437:	
  5302  080F  082D               	movf	strspn@s1,w
  5303  0810  0086               	movwf	6
  5304  0811  3001               	movlw	1	; select bank2/3
  5305  0812  0087               	movwf	7
  5306  0813  0801               	movf	1,w
  5307  0814  1903               	btfsc	3,2
  5308  0815  282D               	goto	l3441
  5309  0816  0828               	movf	strspn@s2+1,w
  5310  0817  00A1               	movwf	strchr@ptr+1
  5311  0818  0827               	movf	strspn@s2,w
  5312  0819  00A0               	movwf	strchr@ptr
  5313  081A  082D               	movf	strspn@s1,w
  5314  081B  0086               	movwf	6
  5315  081C  3001               	movlw	1	; select bank2/3
  5316  081D  0087               	movwf	7
  5317  081E  0801               	movf	1,w
  5318  081F  00A9               	movwf	??_strspn
  5319  0820  01AA               	clrf	??_strspn+1
  5320  0821  0829               	movf	??_strspn,w
  5321  0822  00A2               	movwf	strchr@chr
  5322  0823  082A               	movf	??_strspn+1,w
  5323  0824  00A3               	movwf	strchr@chr+1
  5324  0825  3192  228D  3188   	fcall	_strchr
  5325  0828  0020               	movlb	0	; select bank0
  5326  0829  0820               	movf	?_strchr,w
  5327  082A  0421               	iorwf	?_strchr+1,w
  5328  082B  1D03               	btfss	3,2
  5329  082C  2807               	goto	l3435
  5330  082D                     l3441:	
  5331  082D  082C               	movf	strspn@i+1,w
  5332  082E  00A8               	movwf	?_strspn+1
  5333  082F  082B               	movf	strspn@i,w
  5334  0830  00A7               	movwf	?_strspn
  5335  0831  0008               	return
  5336  0832                     __end_of_strspn:	
  5337                           
  5338                           	psect	text12
  5339  1521                     __ptext12:	
  5340 ;; *************** function _strcspn *****************
  5341 ;; Defined at:
  5342 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcspn.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;  s1              1    wreg     PTR const unsigned char 
  5345 ;;		 -> RXPacket(33), NULL(0), 
  5346 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  5347 ;;		 -> STR_3(2), STR_2(2), STR_1(2), 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  5350 ;;		 -> RXPacket(33), NULL(0), 
  5351 ;;  i               2   11[BANK0 ] unsigned int 
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  2    7[BANK0 ] unsigned int 
  5354 ;; Registers used:
  5355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5361 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5362 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5363 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5364 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5365 ;;Total ram usage:        7 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    8
  5368 ;; This function calls:
  5369 ;;		_strchr
  5370 ;; This function is called by:
  5371 ;;		_strtok
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           
  5376                           ;psect for function _strcspn
  5377  1521                     _strcspn:	
  5378                           
  5379                           ;incstack = 0
  5380                           ; Regs used in _strcspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5381                           ;strcspn@s1 stored from wreg
  5382  1521  0020               	movlb	0	; select bank0
  5383  1522  00AD               	movwf	strcspn@s1
  5384  1523  01AB               	clrf	strcspn@i
  5385  1524  01AC               	clrf	strcspn@i+1
  5386  1525  2D2E               	goto	l3449
  5387  1526                     l3447:	
  5388  1526  3001               	movlw	1
  5389  1527  00A9               	movwf	??_strcspn
  5390  1528  0829               	movf	??_strcspn,w
  5391  1529  07AD               	addwf	strcspn@s1,f
  5392  152A  3001               	movlw	1
  5393  152B  07AB               	addwf	strcspn@i,f
  5394  152C  3000               	movlw	0
  5395  152D  3DAC               	addwfc	strcspn@i+1,f
  5396  152E                     l3449:	
  5397  152E  082D               	movf	strcspn@s1,w
  5398  152F  0086               	movwf	6
  5399  1530  3001               	movlw	1	; select bank2/3
  5400  1531  0087               	movwf	7
  5401  1532  0801               	movf	1,w
  5402  1533  1903               	btfsc	3,2
  5403  1534  2D4C               	goto	l3453
  5404  1535  0828               	movf	strcspn@s2+1,w
  5405  1536  00A1               	movwf	strchr@ptr+1
  5406  1537  0827               	movf	strcspn@s2,w
  5407  1538  00A0               	movwf	strchr@ptr
  5408  1539  082D               	movf	strcspn@s1,w
  5409  153A  0086               	movwf	6
  5410  153B  3001               	movlw	1	; select bank2/3
  5411  153C  0087               	movwf	7
  5412  153D  0801               	movf	1,w
  5413  153E  00A9               	movwf	??_strcspn
  5414  153F  01AA               	clrf	??_strcspn+1
  5415  1540  0829               	movf	??_strcspn,w
  5416  1541  00A2               	movwf	strchr@chr
  5417  1542  082A               	movf	??_strcspn+1,w
  5418  1543  00A3               	movwf	strchr@chr+1
  5419  1544  3192  228D  3195   	fcall	_strchr
  5420  1547  0020               	movlb	0	; select bank0
  5421  1548  0820               	movf	?_strchr,w
  5422  1549  0421               	iorwf	?_strchr+1,w
  5423  154A  1903               	btfsc	3,2
  5424  154B  2D26               	goto	l3447
  5425  154C                     l3453:	
  5426  154C  082C               	movf	strcspn@i+1,w
  5427  154D  00A8               	movwf	?_strcspn+1
  5428  154E  082B               	movf	strcspn@i,w
  5429  154F  00A7               	movwf	?_strcspn
  5430  1550  0008               	return
  5431  1551                     __end_of_strcspn:	
  5432                           
  5433                           	psect	text13
  5434  128D                     __ptext13:	
  5435 ;; *************** function _strchr *****************
  5436 ;; Defined at:
  5437 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strchr.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
  5440 ;;		 -> STR_3(2), STR_2(2), STR_1(2), 
  5441 ;;  chr             2    2[BANK0 ] int 
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;		None
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  2    0[BANK0 ] PTR unsigned char 
  5446 ;; Registers used:
  5447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5453 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5456 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;Total ram usage:        7 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    7
  5460 ;; This function calls:
  5461 ;;		Nothing
  5462 ;; This function is called by:
  5463 ;;		_strcspn
  5464 ;;		_strspn
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           
  5469                           ;psect for function _strchr
  5470  128D                     _strchr:	
  5471  128D                     l1046:	
  5472                           ;incstack = 0
  5473                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0+pclath]
  5474                           
  5475  128D  0020               	movlb	0	; select bank0
  5476  128E  0820               	movf	strchr@ptr,w
  5477  128F  0084               	movwf	4
  5478  1290  0821               	movf	strchr@ptr+1,w
  5479  1291  0085               	movwf	5
  5480  1292  0800               	movf	0,w	;code access
  5481  1293  0622               	xorwf	strchr@chr,w
  5482  1294  1903               	btfsc	3,2
  5483  1295  0008               	return
  5484  1296  0821               	movf	strchr@ptr+1,w
  5485  1297  00A5               	movwf	??_strchr+1
  5486  1298  0820               	movf	strchr@ptr,w
  5487  1299  00A4               	movwf	??_strchr
  5488  129A  0AA0               	incf	strchr@ptr,f
  5489  129B  1903               	skipnz
  5490  129C  0AA1               	incf	strchr@ptr+1,f
  5491  129D  0824               	movf	??_strchr,w
  5492  129E  0084               	movwf	4
  5493  129F  0825               	movf	??_strchr+1,w
  5494  12A0  0085               	movwf	5
  5495  12A1  0012               	moviw fsr0++
  5496  12A2  1D03               	btfss	3,2
  5497  12A3  2A8D               	goto	l1046
  5498  12A4  01A0               	clrf	?_strchr
  5499  12A5  01A1               	clrf	?_strchr+1
  5500  12A6  0008               	return
  5501  12A7                     __end_of_strchr:	
  5502                           
  5503                           	psect	text14
  5504  12DD                     __ptext14:	
  5505 ;; *************** function _strcpy *****************
  5506 ;; Defined at:
  5507 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5510 ;;		 -> handleRXData@string(16), romDataMap(28), 
  5511 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5512 ;;		 -> RXPacket(33), STR_11(4), NULL(0), 
  5513 ;; Auto vars:     Size  Location     Type
  5514 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5515 ;;		 -> handleRXData@string(16), romDataMap(28), 
  5516 ;; Return value:  Size  Location     Type
  5517 ;;                  2    0[BANK0 ] PTR unsigned char 
  5518 ;; Registers used:
  5519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  5520 ;; Tracked objects:
  5521 ;;		On entry : 0/0
  5522 ;;		On exit  : 0/0
  5523 ;;		Unchanged: 0/0
  5524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5525 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5526 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5528 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5529 ;;Total ram usage:        6 bytes
  5530 ;; Hardware stack levels used:    1
  5531 ;; Hardware stack levels required when called:    7
  5532 ;; This function calls:
  5533 ;;		Nothing
  5534 ;; This function is called by:
  5535 ;;		_handleRXData
  5536 ;;		_main
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           
  5541                           ;psect for function _strcpy
  5542  12DD                     _strcpy:	
  5543                           
  5544                           ;incstack = 0
  5545                           ; Regs used in _strcpy: [wreg-fsr1h+pclath]
  5546  12DD  0020               	movlb	0	; select bank0
  5547  12DE  0821               	movf	strcpy@to+1,w
  5548  12DF  00A5               	movwf	strcpy@cp+1
  5549  12E0  0820               	movf	strcpy@to,w
  5550  12E1  00A4               	movwf	strcpy@cp
  5551  12E2                     l4347:	
  5552  12E2  0824               	movf	strcpy@cp,w
  5553  12E3  0086               	movwf	6
  5554  12E4  0825               	movf	strcpy@cp+1,w
  5555  12E5  0087               	movwf	7
  5556  12E6  0822               	movf	strcpy@from,w
  5557  12E7  0084               	movwf	4
  5558  12E8  0823               	movf	strcpy@from+1,w
  5559  12E9  0085               	movwf	5
  5560  12EA  0800               	movf	0,w	;code access
  5561  12EB  3FC0               	movwi [0]fsr1
  5562  12EC  0889               	movf	9,f
  5563  12ED  1903               	btfsc	3,2
  5564  12EE  0008               	return
  5565  12EF  3001               	movlw	1
  5566  12F0  07A4               	addwf	strcpy@cp,f
  5567  12F1  3000               	movlw	0
  5568  12F2  3DA5               	addwfc	strcpy@cp+1,f
  5569  12F3  3001               	movlw	1
  5570  12F4  07A2               	addwf	strcpy@from,f
  5571  12F5  3000               	movlw	0
  5572  12F6  3DA3               	addwfc	strcpy@from+1,f
  5573  12F7  2AE2               	goto	l4347
  5574  12F8                     __end_of_strcpy:	
  5575                           ;	Return value of _strcpy is never used
  5576                           
  5577                           
  5578                           	psect	text15
  5579  14C3                     __ptext15:	
  5580 ;; *************** function _nrf24l01SendACK *****************
  5581 ;; Defined at:
  5582 ;;		line 92 in file "nrf24l01.c"
  5583 ;; Parameters:    Size  Location     Type
  5584 ;;  packet          1    wreg     PTR struct .
  5585 ;;		 -> RXPacket(33), 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  packet          1   15[BANK0 ] PTR struct .
  5588 ;;		 -> RXPacket(33), 
  5589 ;; Return value:  Size  Location     Type
  5590 ;;                  1    wreg      void 
  5591 ;; Registers used:
  5592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5593 ;; Tracked objects:
  5594 ;;		On entry : 0/0
  5595 ;;		On exit  : 0/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5601 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;Total ram usage:        2 bytes
  5603 ;; Hardware stack levels used:    1
  5604 ;; Hardware stack levels required when called:   12
  5605 ;; This function calls:
  5606 ;;		_nrf24l01SendPacket
  5607 ;;		_nrf24l01SetTXPipe
  5608 ;; This function is called by:
  5609 ;;		_handleRXData
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           
  5614                           ;psect for function _nrf24l01SendACK
  5615  14C3                     _nrf24l01SendACK:	
  5616                           
  5617                           ;incstack = 0
  5618                           ; Regs used in _nrf24l01SendACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5619                           ;nrf24l01SendACK@packet stored from wreg
  5620  14C3  0020               	movlb	0	; select bank0
  5621  14C4  00AF               	movwf	nrf24l01SendACK@packet
  5622                           
  5623                           ;nrf24l01.c: 94: nrf24l01SetTXPipe(packet->packetData.Pipe);
  5624  14C5  082F               	movf	nrf24l01SendACK@packet,w
  5625  14C6  0086               	movwf	6
  5626  14C7  3001               	movlw	1	; select bank2/3
  5627  14C8  0087               	movwf	7
  5628  14C9  0E01               	swapf	1,w
  5629  14CA  3907               	andlw	7
  5630  14CB  3197  2777  3194   	fcall	_nrf24l01SetTXPipe
  5631                           
  5632                           ;nrf24l01.c: 96: packet->packetData.ACKRequest = 0;
  5633  14CE  0020               	movlb	0	; select bank0
  5634  14CF  082F               	movf	nrf24l01SendACK@packet,w
  5635  14D0  0086               	movwf	6
  5636  14D1  3001               	movlw	1	; select bank2/3
  5637  14D2  0087               	movwf	7
  5638  14D3  1101               	bcf	1,2
  5639                           
  5640                           ;nrf24l01.c: 97: packet->packetData.IsACK = 1;
  5641  14D4  082F               	movf	nrf24l01SendACK@packet,w
  5642  14D5  0086               	movwf	6
  5643  14D6  3001               	movlw	1	; select bank2/3
  5644  14D7  0087               	movwf	7
  5645  14D8  1581               	bsf	1,3
  5646                           
  5647                           ;nrf24l01.c: 98: packet->packetData.ACKRPD = packet->packetData.RPD;
  5648  14D9  082F               	movf	nrf24l01SendACK@packet,w
  5649  14DA  0086               	movwf	6
  5650  14DB  3001               	movlw	1	; select bank2/3
  5651  14DC  0087               	movwf	7
  5652  14DD  0801               	movf	1,w
  5653  14DE  3901               	andlw	1
  5654  14DF  00AE               	movwf	??_nrf24l01SendACK
  5655  14E0  082F               	movf	nrf24l01SendACK@packet,w
  5656  14E1  0086               	movwf	6
  5657  14E2  3001               	movlw	1	; select bank2/3
  5658  14E3  0087               	movwf	7
  5659  14E4  0DAE               	rlf	??_nrf24l01SendACK,f
  5660  14E5  0801               	movf	1,w
  5661  14E6  062E               	xorwf	??_nrf24l01SendACK,w
  5662  14E7  39FD               	andlw	-3
  5663  14E8  062E               	xorwf	??_nrf24l01SendACK,w
  5664  14E9  0081               	movwf	1
  5665                           
  5666                           ;nrf24l01.c: 101: nrf24l01SendPacket(packet);
  5667  14EA  082F               	movf	nrf24l01SendACK@packet,w
  5668  14EB  00A7               	movwf	nrf24l01SendPacket@Packet
  5669  14EC  3001               	movlw	1
  5670  14ED  00A8               	movwf	nrf24l01SendPacket@Packet+1
  5671  14EE  318D  254A         	fcall	_nrf24l01SendPacket
  5672  14F0  0008               	return
  5673  14F1                     __end_of_nrf24l01SendACK:	
  5674                           
  5675                           	psect	text16
  5676  1777                     __ptext16:	
  5677 ;; *************** function _nrf24l01SetTXPipe *****************
  5678 ;; Defined at:
  5679 ;;		line 311 in file "nrf24l01.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  pipe            1    wreg     unsigned char 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  pipe            1    6[BANK0 ] unsigned char 
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  1    wreg      void 
  5686 ;; Registers used:
  5687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5697 ;;Total ram usage:        3 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:    9
  5700 ;; This function calls:
  5701 ;;		___bmul
  5702 ;;		_nrf24l01SPIEnd
  5703 ;;		_nrf24l01SPISend
  5704 ;;		_nrf24l01SPIStart
  5705 ;; This function is called by:
  5706 ;;		_main
  5707 ;;		_nrf24l01SendACK
  5708 ;;		_nrf24l01InitRegisters
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712                           
  5713                           ;psect for function _nrf24l01SetTXPipe
  5714  1777                     _nrf24l01SetTXPipe:	
  5715                           
  5716                           ;incstack = 0
  5717                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5718                           ;nrf24l01SetTXPipe@pipe stored from wreg
  5719  1777  0020               	movlb	0	; select bank0
  5720  1778  00A6               	movwf	nrf24l01SetTXPipe@pipe
  5721                           
  5722                           ;nrf24l01.c: 314: nrf24l01SPIStart();
  5723  1779  3191  21CC  3197   	fcall	_nrf24l01SPIStart
  5724                           
  5725                           ;nrf24l01.c: 315: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  5726  177C  3030               	movlw	48
  5727  177D  3191  21DD  3197   	fcall	_nrf24l01SPISend
  5728                           
  5729                           ;nrf24l01.c: 316: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  5730  1780  3045               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  5731  1781  0084               	movwf	4
  5732  1782  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  5733  1783  0085               	movwf	5
  5734  1784  0800               	movf	0,w	;code access
  5735  1785  0020               	movlb	0	; select bank0
  5736  1786  00A4               	movwf	??_nrf24l01SetTXPipe
  5737  1787  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  5738  1788  0084               	movwf	4
  5739  1789  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  5740  178A  0085               	movwf	5
  5741  178B  0800               	movf	0,w	;code access
  5742  178C  00A5               	movwf	??_nrf24l01SetTXPipe+1
  5743  178D  0825               	movf	??_nrf24l01SetTXPipe+1,w
  5744  178E  00A0               	movwf	___bmul@multiplicand
  5745  178F  0826               	movf	nrf24l01SetTXPipe@pipe,w
  5746  1790  3191  21F9  3197   	fcall	___bmul
  5747  1793  0020               	movlb	0	; select bank0
  5748  1794  0724               	addwf	??_nrf24l01SetTXPipe,w
  5749  1795  3191  21DD  3197   	fcall	_nrf24l01SPISend
  5750                           
  5751                           ;nrf24l01.c: 317: nrf24l01SPISend(n_ADDRESS_P0[3]);
  5752  1798  3044               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  5753  1799  0084               	movwf	4
  5754  179A  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  5755  179B  0085               	movwf	5
  5756  179C  0800               	movf	0,w	;code access
  5757  179D  3191  21DD  3197   	fcall	_nrf24l01SPISend
  5758                           
  5759                           ;nrf24l01.c: 318: nrf24l01SPISend(n_ADDRESS_P0[2]);
  5760  17A0  3043               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  5761  17A1  0084               	movwf	4
  5762  17A2  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  5763  17A3  0085               	movwf	5
  5764  17A4  0800               	movf	0,w	;code access
  5765  17A5  3191  21DD  3197   	fcall	_nrf24l01SPISend
  5766                           
  5767                           ;nrf24l01.c: 319: nrf24l01SPISend(n_ADDRESS_P0[1]);
  5768  17A8  3042               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  5769  17A9  0084               	movwf	4
  5770  17AA  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  5771  17AB  0085               	movwf	5
  5772  17AC  0800               	movf	0,w	;code access
  5773  17AD  3191  21DD  3197   	fcall	_nrf24l01SPISend
  5774                           
  5775                           ;nrf24l01.c: 320: nrf24l01SPISend(n_ADDRESS_P0[0]);
  5776  17B0  3041               	movlw	low (_n_ADDRESS_P0| (0+32768))
  5777  17B1  0084               	movwf	4
  5778  17B2  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  5779  17B3  0085               	movwf	5
  5780  17B4  0800               	movf	0,w	;code access
  5781  17B5  3191  21DD  3197   	fcall	_nrf24l01SPISend
  5782                           
  5783                           ;nrf24l01.c: 321: nrf24l01SPIEnd();
  5784  17B8  3191  21BD         	fcall	_nrf24l01SPIEnd
  5785  17BA  0008               	return
  5786  17BB                     __end_of_nrf24l01SetTXPipe:	
  5787                           
  5788                           	psect	text17
  5789  0D4A                     __ptext17:	
  5790 ;; *************** function _nrf24l01SendPacket *****************
  5791 ;; Defined at:
  5792 ;;		line 176 in file "nrf24l01.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  Packet          2    7[BANK0 ] PTR struct .
  5795 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;  i               1   13[BANK0 ] unsigned char 
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  1    wreg      void 
  5800 ;; Registers used:
  5801 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5807 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5810 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5811 ;;Total ram usage:        7 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:   11
  5814 ;; This function calls:
  5815 ;;		_enableInterrupts
  5816 ;;		_nrf24l01CEHigh
  5817 ;;		_nrf24l01CELow
  5818 ;;		_nrf24l01ChangeTXPower
  5819 ;;		_nrf24l01SPIEnd
  5820 ;;		_nrf24l01SPISend
  5821 ;;		_nrf24l01SPIStart
  5822 ;;		_nrf24l01SetRXMode
  5823 ;;		_strlen
  5824 ;; This function is called by:
  5825 ;;		_loop
  5826 ;;		_main
  5827 ;;		_nrf24l01SendACK
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           
  5832                           ;psect for function _nrf24l01SendPacket
  5833  0D4A                     _nrf24l01SendPacket:	
  5834  0D4A                     l309:	
  5835                           ;incstack = 0
  5836                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5837                           ;nrf24l01.c: 179: unsigned char i;;nrf24l01.c: 183: RESEND:
  5838                           
  5839                           
  5840                           ;nrf24l01.c: 186: i = 0xFF;
  5841  0D4A  30FF               	movlw	255
  5842  0D4B  0020               	movlb	0	; select bank0
  5843  0D4C  00A9               	movwf	??_nrf24l01SendPacket
  5844  0D4D  0829               	movf	??_nrf24l01SendPacket,w
  5845  0D4E  00AD               	movwf	nrf24l01SendPacket@i
  5846  0D4F                     l3069:	
  5847                           ;nrf24l01.c: 187: while (nrf24l01.TXBusy){
  5848                           
  5849  0D4F  0021               	movlb	1	; select bank1
  5850  0D50  1C6B               	btfss	_nrf24l01^(0+128),0	;volatile
  5851  0D51  2D61               	goto	l3071
  5852                           
  5853                           ;nrf24l01.c: 189: if (!--i) {
  5854  0D52  3001               	movlw	1
  5855  0D53  0020               	movlb	0	; select bank0
  5856  0D54  02AD               	subwf	nrf24l01SendPacket@i,f
  5857  0D55  1903               	btfsc	3,2
  5858  0D56  2D4A               	goto	l309
  5859                           
  5860                           ;nrf24l01.c: 191: };nrf24l01.c: 192: _delay((unsigned long)((500)*(32000000/4000000.0)))
      +                          ;
  5861                           
  5862                           ;nrf24l01.c: 190: goto RESEND;
  5863  0D57  3006               	movlw	6
  5864  0D58  0020               	movlb	0	; select bank0
  5865  0D59  00A9               	movwf	??_nrf24l01SendPacket
  5866  0D5A  3030               	movlw	48
  5867  0D5B                     u4767:	
  5868  0D5B  0B89               	decfsz	9,f
  5869  0D5C  2D5B               	goto	u4767
  5870  0D5D  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5871  0D5E  2D5B               	goto	u4767
  5872  0D5F  0000               	nop
  5873  0D60  2D4F               	goto	l3069
  5874  0D61                     l3071:	
  5875                           
  5876                           ;nrf24l01.c: 193: };nrf24l01.c: 195: TXPacket = Packet;
  5877  0D61  0020               	movlb	0	; select bank0
  5878  0D62  0828               	movf	nrf24l01SendPacket@Packet+1,w
  5879  0D63  0021               	movlb	1	; select bank1
  5880  0D64  00E9               	movwf	(_TXPacket+1)^(0+128)
  5881  0D65  0020               	movlb	0	; select bank0
  5882  0D66  0827               	movf	nrf24l01SendPacket@Packet,w
  5883  0D67  0021               	movlb	1	; select bank1
  5884  0D68  00E8               	movwf	_TXPacket^(0+128)
  5885                           
  5886                           ;nrf24l01.c: 198: nrf24l01.TXBusy = 1;
  5887  0D69  146B               	bsf	_nrf24l01^(0+128),0	;volatile
  5888                           
  5889                           ;nrf24l01.c: 201: enableInterrupts(0);
  5890  0D6A  3000               	movlw	0
  5891  0D6B  3191  21C4  318D   	fcall	_enableInterrupts
  5892                           
  5893                           ;nrf24l01.c: 204: nrf24l01SetRXMode(0);
  5894  0D6E  3000               	movlw	0
  5895  0D6F  3197  2734  318D   	fcall	_nrf24l01SetRXMode
  5896                           
  5897                           ;nrf24l01.c: 207: nrf24l01SPIStart();
  5898  0D72  3191  21CC  318D   	fcall	_nrf24l01SPIStart
  5899                           
  5900                           ;nrf24l01.c: 210: nrf24l01SPISend((unsigned) 0b10110000);
  5901  0D75  30B0               	movlw	176
  5902  0D76  3191  21DD  318D   	fcall	_nrf24l01SPISend
  5903                           
  5904                           ;nrf24l01.c: 212: nrf24l01SPISend(TXPacket->packetData.byte);
  5905  0D79  0021               	movlb	1	; select bank1
  5906  0D7A  0868               	movf	_TXPacket^(0+128),w
  5907  0D7B  0086               	movwf	6
  5908  0D7C  0869               	movf	(_TXPacket+1)^(0+128),w
  5909  0D7D  0087               	movwf	7
  5910  0D7E  0801               	movf	1,w
  5911  0D7F  3191  21DD  318D   	fcall	_nrf24l01SPISend
  5912                           
  5913                           ;nrf24l01.c: 215: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  5914  0D82  0020               	movlb	0	; select bank0
  5915  0D83  01AD               	clrf	nrf24l01SendPacket@i
  5916  0D84  2D9E               	goto	l3091
  5917  0D85                     l3087:	
  5918                           
  5919                           ;nrf24l01.c: 216: nrf24l01SPISend(TXPacket->Message[i]);
  5920  0D85  082D               	movf	nrf24l01SendPacket@i,w
  5921  0D86  3E01               	addlw	1
  5922  0D87  00A9               	movwf	??_nrf24l01SendPacket
  5923  0D88  3000               	movlw	0
  5924  0D89  1803               	skipnc
  5925  0D8A  3001               	movlw	1
  5926  0D8B  00AA               	movwf	??_nrf24l01SendPacket+1
  5927  0D8C  0829               	movf	??_nrf24l01SendPacket,w
  5928  0D8D  0021               	movlb	1	; select bank1
  5929  0D8E  0768               	addwf	_TXPacket^(0+128),w
  5930  0D8F  0086               	movwf	6
  5931  0D90  0020               	movlb	0	; select bank0
  5932  0D91  082A               	movf	??_nrf24l01SendPacket+1,w
  5933  0D92  0021               	movlb	1	; select bank1
  5934  0D93  3D69               	addwfc	(_TXPacket+1)^(0+128),w
  5935  0D94  0087               	movwf	7
  5936  0D95  0801               	movf	1,w
  5937  0D96  3191  21DD  318D   	fcall	_nrf24l01SPISend
  5938  0D99  3001               	movlw	1
  5939  0D9A  0020               	movlb	0	; select bank0
  5940  0D9B  00A9               	movwf	??_nrf24l01SendPacket
  5941  0D9C  0829               	movf	??_nrf24l01SendPacket,w
  5942  0D9D  07AD               	addwf	nrf24l01SendPacket@i,f
  5943  0D9E                     l3091:	
  5944  0D9E  0021               	movlb	1	; select bank1
  5945  0D9F  0868               	movf	_TXPacket^(0+128),w
  5946  0DA0  3E01               	addlw	1
  5947  0DA1  0020               	movlb	0	; select bank0
  5948  0DA2  00A9               	movwf	??_nrf24l01SendPacket
  5949  0DA3  3000               	movlw	0
  5950  0DA4  0021               	movlb	1	; select bank1
  5951  0DA5  3D69               	addwfc	(_TXPacket+1)^(0+128),w
  5952  0DA6  0020               	movlb	0	; select bank0
  5953  0DA7  00AA               	movwf	??_nrf24l01SendPacket+1
  5954  0DA8  0829               	movf	??_nrf24l01SendPacket,w
  5955  0DA9  00A0               	movwf	strlen@s
  5956  0DAA  082A               	movf	??_nrf24l01SendPacket+1,w
  5957  0DAB  00A1               	movwf	strlen@s+1
  5958  0DAC  3193  234E  318D   	fcall	_strlen
  5959  0DAF  0020               	movlb	0	; select bank0
  5960  0DB0  082D               	movf	nrf24l01SendPacket@i,w
  5961  0DB1  00AB               	movwf	??_nrf24l01SendPacket+2
  5962  0DB2  01AC               	clrf	??_nrf24l01SendPacket+3
  5963  0DB3  0821               	movf	?_strlen+1,w
  5964  0DB4  022C               	subwf	??_nrf24l01SendPacket+3,w
  5965  0DB5  1D03               	skipz
  5966  0DB6  2DB9               	goto	u2985
  5967  0DB7  0820               	movf	?_strlen,w
  5968  0DB8  022B               	subwf	??_nrf24l01SendPacket+2,w
  5969  0DB9                     u2985:	
  5970  0DB9  1803               	skipnc
  5971  0DBA  2DBF               	goto	l3095
  5972  0DBB  3020               	movlw	32
  5973  0DBC  022D               	subwf	nrf24l01SendPacket@i,w
  5974  0DBD  1C03               	skipc
  5975  0DBE  2D85               	goto	l3087
  5976  0DBF                     l3095:	
  5977                           
  5978                           ;nrf24l01.c: 217: };nrf24l01.c: 220: nrf24l01SPIEnd();
  5979  0DBF  3191  21BD  318D   	fcall	_nrf24l01SPIEnd
  5980                           
  5981                           ;nrf24l01.c: 223: nrf24l01CEHigh();
  5982  0DC2  3191  21AE  318D   	fcall	_nrf24l01CEHigh
  5983                           
  5984                           ;nrf24l01.c: 224: _delay((unsigned long)((20)*(32000000/4000000.0)));
  5985  0DC5  3035               	movlw	53
  5986  0DC6                     u4777:	
  5987  0DC6  0B89               	decfsz	9,f
  5988  0DC7  2DC6               	goto	u4777
  5989  0DC8  0000               	nop
  5990                           
  5991                           ;nrf24l01.c: 225: nrf24l01CELow();
  5992  0DC9  3191  21B1  318D   	fcall	_nrf24l01CELow
  5993                           
  5994                           ;nrf24l01.c: 228: enableInterrupts(1);
  5995  0DCC  3001               	movlw	1
  5996  0DCD  3191  21C4  318D   	fcall	_enableInterrupts
  5997                           
  5998                           ;nrf24l01.c: 231: i = 0xFF;
  5999  0DD0  30FF               	movlw	255
  6000  0DD1  0020               	movlb	0	; select bank0
  6001  0DD2  00A9               	movwf	??_nrf24l01SendPacket
  6002  0DD3  0829               	movf	??_nrf24l01SendPacket,w
  6003  0DD4  00AD               	movwf	nrf24l01SendPacket@i
  6004  0DD5                     l3109:	
  6005                           ;nrf24l01.c: 232: while (nrf24l01.TXBusy){
  6006                           
  6007  0DD5  0021               	movlb	1	; select bank1
  6008  0DD6  1C6B               	btfss	_nrf24l01^(0+128),0	;volatile
  6009  0DD7  2DE7               	goto	l3111
  6010                           
  6011                           ;nrf24l01.c: 234: if (!--i) {
  6012  0DD8  3001               	movlw	1
  6013  0DD9  0020               	movlb	0	; select bank0
  6014  0DDA  02AD               	subwf	nrf24l01SendPacket@i,f
  6015  0DDB  1903               	btfsc	3,2
  6016  0DDC  2D4A               	goto	l309
  6017                           
  6018                           ;nrf24l01.c: 236: };nrf24l01.c: 237: _delay((unsigned long)((500)*(32000000/4000000.0)))
      +                          ;
  6019                           
  6020                           ;nrf24l01.c: 235: goto RESEND;
  6021  0DDD  3006               	movlw	6
  6022  0DDE  0020               	movlb	0	; select bank0
  6023  0DDF  00A9               	movwf	??_nrf24l01SendPacket
  6024  0DE0  3030               	movlw	48
  6025  0DE1                     u4787:	
  6026  0DE1  0B89               	decfsz	9,f
  6027  0DE2  2DE1               	goto	u4787
  6028  0DE3  0BA9               	decfsz	??_nrf24l01SendPacket,f
  6029  0DE4  2DE1               	goto	u4787
  6030  0DE5  0000               	nop
  6031  0DE6  2DD5               	goto	l3109
  6032  0DE7                     l3111:	
  6033                           
  6034                           ;nrf24l01.c: 238: };nrf24l01.c: 242: i = 0xFF;
  6035  0DE7  30FF               	movlw	255
  6036  0DE8  0020               	movlb	0	; select bank0
  6037  0DE9  00A9               	movwf	??_nrf24l01SendPacket
  6038  0DEA  0829               	movf	??_nrf24l01SendPacket,w
  6039  0DEB  00AD               	movwf	nrf24l01SendPacket@i
  6040  0DEC                     l3123:	
  6041                           ;nrf24l01.c: 243: while (TXPacket->packetData.ACKRequest){
  6042                           
  6043  0DEC  0021               	movlb	1	; select bank1
  6044  0DED  0868               	movf	_TXPacket^(0+128),w
  6045  0DEE  0086               	movwf	6
  6046  0DEF  0869               	movf	(_TXPacket+1)^(0+128),w
  6047  0DF0  0087               	movwf	7
  6048  0DF1  1D01               	btfss	1,2
  6049  0DF2  0008               	return
  6050                           
  6051                           ;nrf24l01.c: 246: nrf24l01SetRXMode(1);
  6052  0DF3  3001               	movlw	1
  6053  0DF4  3197  2734  318D   	fcall	_nrf24l01SetRXMode
  6054                           
  6055                           ;nrf24l01.c: 248: if (!--i) {
  6056  0DF7  3001               	movlw	1
  6057  0DF8  0020               	movlb	0	; select bank0
  6058  0DF9  02AD               	subwf	nrf24l01SendPacket@i,f
  6059  0DFA  1D03               	btfss	3,2
  6060  0DFB  2E0E               	goto	l3121
  6061                           
  6062                           ;nrf24l01.c: 249: _delay((unsigned long)((10000)*(32000000/4000000.0)));
  6063  0DFC  3068               	movlw	104
  6064  0DFD  0020               	movlb	0	; select bank0
  6065  0DFE  00A9               	movwf	??_nrf24l01SendPacket
  6066  0DFF  30E4               	movlw	228
  6067  0E00                     u4797:	
  6068  0E00  0B89               	decfsz	9,f
  6069  0E01  2E00               	goto	u4797
  6070  0E02  0BA9               	decfsz	??_nrf24l01SendPacket,f
  6071  0E03  2E00               	goto	u4797
  6072  0E04  0000               	nop
  6073                           
  6074                           ;nrf24l01.c: 250: nrf24l01ChangeTXPower(1);
  6075  0E05  3001               	movlw	1
  6076  0E06  0020               	movlb	0	; select bank0
  6077  0E07  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  6078  0E08  3000               	movlw	0
  6079  0E09  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  6080  0E0A  3196  26B2  318D   	fcall	_nrf24l01ChangeTXPower
  6081                           
  6082                           ;nrf24l01.c: 251: goto RESEND;
  6083  0E0D  2D4A               	goto	l309
  6084  0E0E                     l3121:	
  6085                           
  6086                           ;nrf24l01.c: 252: };nrf24l01.c: 253: _delay((unsigned long)((500)*(32000000/4000000.0)))
      +                          ;
  6087  0E0E  3006               	movlw	6
  6088  0E0F  0020               	movlb	0	; select bank0
  6089  0E10  00A9               	movwf	??_nrf24l01SendPacket
  6090  0E11  3030               	movlw	48
  6091  0E12                     u4807:	
  6092  0E12  0B89               	decfsz	9,f
  6093  0E13  2E12               	goto	u4807
  6094  0E14  0BA9               	decfsz	??_nrf24l01SendPacket,f
  6095  0E15  2E12               	goto	u4807
  6096  0E16  0000               	nop
  6097  0E17  2DEC               	goto	l3123
  6098  0E18                     __end_of_nrf24l01SendPacket:	
  6099                           
  6100                           	psect	text18
  6101  134E                     __ptext18:	
  6102 ;; *************** function _strlen *****************
  6103 ;; Defined at:
  6104 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  6107 ;;		 -> packet.Message(32), packet.Message(32), RXPacket.Message(32), RXPacket(33), 
  6108 ;;		 -> main@packet(33), loop@packet(33), NULL(0), romDataMap(28), 
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  6111 ;;		 -> packet.Message(32), packet.Message(32), RXPacket.Message(32), RXPacket(33), 
  6112 ;;		 -> main@packet(33), loop@packet(33), NULL(0), romDataMap(28), 
  6113 ;; Return value:  Size  Location     Type
  6114 ;;                  2    0[BANK0 ] unsigned int 
  6115 ;; Registers used:
  6116 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6122 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6124 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6125 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6126 ;;Total ram usage:        6 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    7
  6129 ;; This function calls:
  6130 ;;		Nothing
  6131 ;; This function is called by:
  6132 ;;		_nrf24l01GetPipe
  6133 ;;		_nrf24l01SendPacket
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           
  6138                           ;psect for function _strlen
  6139  134E                     _strlen:	
  6140                           
  6141                           ;incstack = 0
  6142                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  6143  134E  0020               	movlb	0	; select bank0
  6144  134F  0821               	movf	strlen@s+1,w
  6145  1350  00A5               	movwf	strlen@cp+1
  6146  1351  0820               	movf	strlen@s,w
  6147  1352  00A4               	movwf	strlen@cp
  6148  1353                     l2837:	
  6149  1353  0824               	movf	strlen@cp,w
  6150  1354  0086               	movwf	6
  6151  1355  0825               	movf	strlen@cp+1,w
  6152  1356  0087               	movwf	7
  6153  1357  0801               	movf	1,w
  6154  1358  1903               	btfsc	3,2
  6155  1359  2B5F               	goto	l2839
  6156  135A  3001               	movlw	1
  6157  135B  07A4               	addwf	strlen@cp,f
  6158  135C  3000               	movlw	0
  6159  135D  3DA5               	addwfc	strlen@cp+1,f
  6160  135E  2B53               	goto	l2837
  6161  135F                     l2839:	
  6162  135F  0920               	comf	strlen@s,w
  6163  1360  00A2               	movwf	??_strlen
  6164  1361  0921               	comf	strlen@s+1,w
  6165  1362  00A3               	movwf	??_strlen+1
  6166  1363  0AA2               	incf	??_strlen,f
  6167  1364  1903               	skipnz
  6168  1365  0AA3               	incf	??_strlen+1,f
  6169  1366  0824               	movf	strlen@cp,w
  6170  1367  0722               	addwf	??_strlen,w
  6171  1368  00A0               	movwf	?_strlen
  6172  1369  0825               	movf	strlen@cp+1,w
  6173  136A  3D23               	addwfc	??_strlen+1,w
  6174  136B  00A1               	movwf	?_strlen+1
  6175  136C  0008               	return
  6176  136D                     __end_of_strlen:	
  6177                           
  6178                           	psect	text19
  6179  1734                     __ptext19:	
  6180 ;; *************** function _nrf24l01SetRXMode *****************
  6181 ;; Defined at:
  6182 ;;		line 54 in file "nrf24l01.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;  rxMode          1    wreg     unsigned char 
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;  rxMode          1    5[BANK0 ] unsigned char 
  6187 ;;  config          1    4[BANK0 ] struct .
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  1    wreg      void 
  6190 ;; Registers used:
  6191 ;;		wreg, status,2, status,0, pclath, cstack
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6200 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6201 ;;Total ram usage:        3 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; Hardware stack levels required when called:   10
  6204 ;; This function calls:
  6205 ;;		_nrf24l01CEHigh
  6206 ;;		_nrf24l01CELow
  6207 ;;		_nrf24l01Send
  6208 ;; This function is called by:
  6209 ;;		_sleep
  6210 ;;		_nrf24l01SendPacket
  6211 ;; This function uses a non-reentrant model
  6212 ;;
  6213                           
  6214                           
  6215                           ;psect for function _nrf24l01SetRXMode
  6216  1734                     _nrf24l01SetRXMode:	
  6217                           
  6218                           ;incstack = 0
  6219                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  6220                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6221  1734  0020               	movlb	0	; select bank0
  6222  1735  00A5               	movwf	nrf24l01SetRXMode@rxMode
  6223                           
  6224                           ;nrf24l01.c: 56: if (rxMode){
  6225  1736  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6226  1737  1903               	btfsc	3,2
  6227  1738  2F3C               	goto	l2795
  6228                           
  6229                           ;nrf24l01.c: 57: if (nrf24l01.TXBusy){
  6230  1739  0021               	movlb	1	; select bank1
  6231  173A  186B               	btfsc	_nrf24l01^(0+128),0	;volatile
  6232  173B  0008               	return
  6233  173C                     l2795:	
  6234                           ;nrf24l01.c: 58: return;
  6235                           
  6236                           
  6237                           ;nrf24l01.c: 59: };nrf24l01.c: 60: };nrf24l01.c: 62: n_CONFIG_t config;;nrf24l01.c: 65: 
      +                          config.byte = nrf24l01Send((unsigned) 0b00000000 | (unsigned) 0x00, 0);
  6238  173C  0020               	movlb	0	; select bank0
  6239  173D  01A0               	clrf	nrf24l01Send@data
  6240  173E  3000               	movlw	0
  6241  173F  3193  236D  3197   	fcall	_nrf24l01Send
  6242  1742  0020               	movlb	0	; select bank0
  6243  1743  00A3               	movwf	??_nrf24l01SetRXMode
  6244  1744  0823               	movf	??_nrf24l01SetRXMode,w
  6245  1745  00A4               	movwf	nrf24l01SetRXMode@config
  6246                           
  6247                           ;nrf24l01.c: 68: if (config.PRIM_RX != rxMode){
  6248  1746  0824               	movf	nrf24l01SetRXMode@config,w
  6249  1747  3901               	andlw	1
  6250  1748  0625               	xorwf	nrf24l01SetRXMode@rxMode,w
  6251  1749  1903               	skipnz
  6252  174A  2F6F               	goto	l2815
  6253                           
  6254                           ;nrf24l01.c: 71: nrf24l01CELow();
  6255  174B  3191  21B1  3197   	fcall	_nrf24l01CELow
  6256                           
  6257                           ;nrf24l01.c: 72: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6258  174E  30C0               	movlw	192
  6259  174F                     u4817:	
  6260  174F  3200               	nop2
  6261  1750  0B89               	decfsz	9,f
  6262  1751  2F4F               	goto	u4817
  6263                           
  6264                           ;nrf24l01.c: 75: config.PRIM_RX = rxMode;
  6265  1752  0020               	movlb	0	; select bank0
  6266  1753  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6267  1754  3901               	andlw	1
  6268  1755  1024               	bcf	nrf24l01SetRXMode@config,0
  6269  1756  1D03               	skipz
  6270  1757  1424               	bsf	nrf24l01SetRXMode@config,0
  6271                           
  6272                           ;nrf24l01.c: 76: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  6273  1758  0824               	movf	nrf24l01SetRXMode@config,w
  6274  1759  00A3               	movwf	??_nrf24l01SetRXMode
  6275  175A  0823               	movf	??_nrf24l01SetRXMode,w
  6276  175B  00A0               	movwf	nrf24l01Send@data
  6277  175C  3020               	movlw	32
  6278  175D  3193  236D  3197   	fcall	_nrf24l01Send
  6279                           
  6280                           ;nrf24l01.c: 79: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6281  1760  30C0               	movlw	192
  6282  1761                     u4827:	
  6283  1761  3200               	nop2
  6284  1762  0B89               	decfsz	9,f
  6285  1763  2F61               	goto	u4827
  6286                           
  6287                           ;nrf24l01.c: 82: if (rxMode){
  6288  1764  0020               	movlb	0	; select bank0
  6289  1765  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6290  1766  1903               	btfsc	3,2
  6291  1767  2F6F               	goto	l2815
  6292                           
  6293                           ;nrf24l01.c: 83: nrf24l01CEHigh();
  6294  1768  3191  21AE  3197   	fcall	_nrf24l01CEHigh
  6295                           
  6296                           ;nrf24l01.c: 84: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6297  176B  30C0               	movlw	192
  6298  176C                     u4837:	
  6299  176C  3200               	nop2
  6300  176D  0B89               	decfsz	9,f
  6301  176E  2F6C               	goto	u4837
  6302  176F                     l2815:	
  6303                           
  6304                           ;nrf24l01.c: 85: };nrf24l01.c: 86: };nrf24l01.c: 89: nrf24l01.RXMode = rxMode;
  6305  176F  0020               	movlb	0	; select bank0
  6306  1770  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6307  1771  3901               	andlw	1
  6308  1772  0021               	movlb	1	; select bank1
  6309  1773  116B               	bcf	_nrf24l01^(0+128),2	;volatile
  6310  1774  1D03               	skipz
  6311  1775  156B               	bsf	_nrf24l01^(0+128),2	;volatile
  6312  1776  0008               	return
  6313  1777                     __end_of_nrf24l01SetRXMode:	
  6314                           
  6315                           	psect	text20
  6316  121E                     __ptext20:	
  6317 ;; *************** function _atof *****************
  6318 ;; Defined at:
  6319 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\atof.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;  s               1    wreg     PTR const unsigned char 
  6322 ;;		 -> handleRXData@string(16), 
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;  s               1   78[BANK0 ] PTR const unsigned char 
  6325 ;;		 -> handleRXData@string(16), 
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  3    8[BANK1 ] PTR const unsigned char 
  6328 ;; Registers used:
  6329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6335 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;Total ram usage:        5 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:   10
  6342 ;; This function calls:
  6343 ;;		_strtod
  6344 ;; This function is called by:
  6345 ;;		_handleRXData
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           
  6350                           ;psect for function _atof
  6351  121E                     _atof:	
  6352                           
  6353                           ;incstack = 0
  6354                           ; Regs used in _atof: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6355                           ;atof@s stored from wreg
  6356  121E  0020               	movlb	0	; select bank0
  6357  121F  00EE               	movwf	atof@s
  6358  1220  01E7               	clrf	strtod@res
  6359  1221  086E               	movf	atof@s,w
  6360  1222  3180  202E         	fcall	_strtod
  6361  1224  0020               	movlb	0	; select bank0
  6362  1225  0867               	movf	?_strtod,w
  6363  1226  0021               	movlb	1	; select bank1
  6364  1227  00A8               	movwf	?_atof^(0+128)
  6365  1228  0020               	movlb	0	; select bank0
  6366  1229  0868               	movf	?_strtod+1,w
  6367  122A  0021               	movlb	1	; select bank1
  6368  122B  00A9               	movwf	(?_atof+1)^(0+128)
  6369  122C  0020               	movlb	0	; select bank0
  6370  122D  0869               	movf	?_strtod+2,w
  6371  122E  0021               	movlb	1	; select bank1
  6372  122F  00AA               	movwf	(?_atof+2)^(0+128)
  6373  1230  0008               	return
  6374  1231                     __end_of_atof:	
  6375                           
  6376                           	psect	text21
  6377  002E                     __ptext21:	
  6378 ;; *************** function _strtod *****************
  6379 ;; Defined at:
  6380 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\atof.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;  s               1    wreg     PTR const unsigned char 
  6383 ;;		 -> handleRXData@string(16), 
  6384 ;;  res             1   71[BANK0 ] PTR PTR const unsigned c
  6385 ;;		 -> NULL(0), 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  s               1    7[BANK1 ] PTR const unsigned char 
  6388 ;;		 -> handleRXData@string(16), 
  6389 ;;  _u              4    3[BANK1 ] struct .
  6390 ;;  expon           1    2[BANK1 ] char 
  6391 ;;  flags           1    1[BANK1 ] unsigned char 
  6392 ;;  eexp            1    0[BANK1 ] char 
  6393 ;; Return value:  Size  Location     Type
  6394 ;;                  3   71[BANK0 ] char 
  6395 ;; Registers used:
  6396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6402 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6404 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;      Totals:         0       7       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6406 ;;Total ram usage:       15 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:    9
  6409 ;; This function calls:
  6410 ;;		___altoft
  6411 ;;		___bmul
  6412 ;;		___ftdiv
  6413 ;;		___ftge
  6414 ;;		___ftmul
  6415 ;;		___ftneg
  6416 ;;		___lmul
  6417 ;;		_isdigit
  6418 ;;		_isspace
  6419 ;; This function is called by:
  6420 ;;		_atof
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           
  6425                           ;psect for function _strtod
  6426  002E                     _strtod:	
  6427                           
  6428                           ;incstack = 0
  6429                           ; Regs used in _strtod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6430                           ;strtod@s stored from wreg
  6431  002E  0021               	movlb	1	; select bank1
  6432  002F  00A7               	movwf	strtod@s^(0+128)
  6433  0030  0020               	movlb	0	; select bank0
  6434  0031  0867               	movf	strtod@res,w
  6435  0032  1903               	btfsc	3,2
  6436  0033  283D               	goto	l3273
  6437  0034  0021               	movlb	1	; select bank1
  6438  0035  0827               	movf	strtod@s^(0+128),w
  6439  0036  0020               	movlb	0	; select bank0
  6440  0037  00EA               	movwf	??_strtod
  6441  0038  0867               	movf	strtod@res,w
  6442  0039  0086               	movwf	6
  6443  003A  0187               	clrf	7
  6444  003B  086A               	movf	??_strtod,w
  6445  003C  0081               	movwf	1
  6446  003D                     l3273:	
  6447  003D  0021               	movlb	1	; select bank1
  6448  003E  0827               	movf	strtod@s^(0+128),w
  6449  003F  0086               	movwf	6
  6450  0040  0187               	clrf	7
  6451  0041  0801               	movf	1,w
  6452  0042  00A0               	movwf	strtod@eexp^(0+128)
  6453  0043  3192  220B  3180   	fcall	_isspace
  6454  0046  1C03               	btfss	3,0
  6455  0047  284F               	goto	l3275
  6456  0048  3001               	movlw	1
  6457  0049  0020               	movlb	0	; select bank0
  6458  004A  00EA               	movwf	??_strtod
  6459  004B  086A               	movf	??_strtod,w
  6460  004C  0021               	movlb	1	; select bank1
  6461  004D  07A7               	addwf	strtod@s^(0+128),f
  6462  004E  283D               	goto	l3273
  6463  004F                     l3275:	
  6464  004F  0021               	movlb	1	; select bank1
  6465  0050  01A1               	clrf	strtod@flags^(0+128)
  6466  0051  302D               	movlw	45
  6467  0052  0620               	xorwf	strtod@eexp^(0+128),w
  6468  0053  1D03               	btfss	3,2
  6469  0054  2858               	goto	l3283
  6470  0055  01A1               	clrf	strtod@flags^(0+128)
  6471  0056  0AA1               	incf	strtod@flags^(0+128),f
  6472  0057  285C               	goto	l3285
  6473  0058                     l3283:	
  6474  0058  302B               	movlw	43
  6475  0059  0620               	xorwf	strtod@eexp^(0+128),w
  6476  005A  1D03               	btfss	3,2
  6477  005B  2862               	goto	l3287
  6478  005C                     l3285:	
  6479  005C  3001               	movlw	1
  6480  005D  0020               	movlb	0	; select bank0
  6481  005E  00EA               	movwf	??_strtod
  6482  005F  086A               	movf	??_strtod,w
  6483  0060  0021               	movlb	1	; select bank1
  6484  0061  07A7               	addwf	strtod@s^(0+128),f
  6485  0062                     l3287:	
  6486  0062  01A0               	clrf	strtod@eexp^(0+128)
  6487  0063  3000               	movlw	0
  6488  0064  00A6               	movwf	(strtod@_u+3)^(0+128)
  6489  0065  3000               	movlw	0
  6490  0066  00A5               	movwf	(strtod@_u+2)^(0+128)
  6491  0067  3000               	movlw	0
  6492  0068  00A4               	movwf	(strtod@_u+1)^(0+128)
  6493  0069  3000               	movlw	0
  6494  006A  00A3               	movwf	strtod@_u^(0+128)
  6495  006B  01A2               	clrf	strtod@expon^(0+128)
  6496  006C  287B               	goto	l3293
  6497  006D                     l3295:	
  6498  006D  0827               	movf	strtod@s^(0+128),w
  6499  006E  0086               	movwf	6
  6500  006F  0187               	clrf	7
  6501  0070  302E               	movlw	46
  6502  0071  0601               	xorwf	1,w
  6503  0072  1D03               	btfss	3,2
  6504  0073  287D               	goto	l3301
  6505  0074  1621               	bsf	strtod@flags^(0+128),4
  6506  0075                     L2:	
  6507  0075  3001               	movlw	1
  6508  0076  0020               	movlb	0	; select bank0
  6509  0077  00EA               	movwf	??_strtod
  6510  0078  086A               	movf	??_strtod,w
  6511  0079  0021               	movlb	1	; select bank1
  6512  007A  07A7               	addwf	strtod@s^(0+128),f
  6513  007B                     l3293:	
  6514  007B  1E21               	btfss	strtod@flags^(0+128),4
  6515  007C  286D               	goto	l3295
  6516  007D                     l3301:	
  6517  007D  0827               	movf	strtod@s^(0+128),w
  6518  007E  0086               	movwf	6
  6519  007F  0187               	clrf	7
  6520  0080  0801               	movf	1,w
  6521  0081  3191  21EA  3180   	fcall	_isdigit
  6522  0084  1C03               	btfss	3,0
  6523  0085  28E9               	goto	l3317
  6524  0086  0021               	movlb	1	; select bank1
  6525  0087  14A1               	bsf	strtod@flags^(0+128),1
  6526  0088  3008               	movlw	8
  6527  0089  0620               	xorwf	strtod@eexp^(0+128),w
  6528  008A  1903               	btfsc	3,2
  6529  008B  28E0               	goto	l914
  6530  008C  1E21               	btfss	strtod@flags^(0+128),4
  6531  008D  2894               	goto	l915
  6532  008E  30FF               	movlw	255
  6533  008F  0020               	movlb	0	; select bank0
  6534  0090  00EA               	movwf	??_strtod
  6535  0091  086A               	movf	??_strtod,w
  6536  0092  0021               	movlb	1	; select bank1
  6537  0093  07A2               	addwf	strtod@expon^(0+128),f
  6538  0094                     l915:	
  6539  0094  3001               	movlw	1
  6540  0095  0020               	movlb	0	; select bank0
  6541  0096  00EA               	movwf	??_strtod
  6542  0097  086A               	movf	??_strtod,w
  6543  0098  0021               	movlb	1	; select bank1
  6544  0099  07A0               	addwf	strtod@eexp^(0+128),f
  6545  009A  3000               	movlw	0
  6546  009B  0020               	movlb	0	; select bank0
  6547  009C  00A3               	movwf	___lmul@multiplier+3
  6548  009D  3000               	movlw	0
  6549  009E  00A2               	movwf	___lmul@multiplier+2
  6550  009F  3000               	movlw	0
  6551  00A0  00A1               	movwf	___lmul@multiplier+1
  6552  00A1  300A               	movlw	10
  6553  00A2  00A0               	movwf	___lmul@multiplier
  6554  00A3  0021               	movlb	1	; select bank1
  6555  00A4  0826               	movf	(strtod@_u+3)^(0+128),w
  6556  00A5  0020               	movlb	0	; select bank0
  6557  00A6  00A7               	movwf	___lmul@multiplicand+3
  6558  00A7  0021               	movlb	1	; select bank1
  6559  00A8  0825               	movf	(strtod@_u+2)^(0+128),w
  6560  00A9  0020               	movlb	0	; select bank0
  6561  00AA  00A6               	movwf	___lmul@multiplicand+2
  6562  00AB  0021               	movlb	1	; select bank1
  6563  00AC  0824               	movf	(strtod@_u+1)^(0+128),w
  6564  00AD  0020               	movlb	0	; select bank0
  6565  00AE  00A5               	movwf	___lmul@multiplicand+1
  6566  00AF  0021               	movlb	1	; select bank1
  6567  00B0  0823               	movf	strtod@_u^(0+128),w
  6568  00B1  0020               	movlb	0	; select bank0
  6569  00B2  00A4               	movwf	___lmul@multiplicand
  6570  00B3  3194  24F1  3180   	fcall	___lmul
  6571  00B6  0020               	movlb	0	; select bank0
  6572  00B7  0823               	movf	?___lmul+3,w
  6573  00B8  0021               	movlb	1	; select bank1
  6574  00B9  00A6               	movwf	(strtod@_u+3)^(0+128)
  6575  00BA  0020               	movlb	0	; select bank0
  6576  00BB  0822               	movf	?___lmul+2,w
  6577  00BC  0021               	movlb	1	; select bank1
  6578  00BD  00A5               	movwf	(strtod@_u+2)^(0+128)
  6579  00BE  0020               	movlb	0	; select bank0
  6580  00BF  0821               	movf	?___lmul+1,w
  6581  00C0  0021               	movlb	1	; select bank1
  6582  00C1  00A4               	movwf	(strtod@_u+1)^(0+128)
  6583  00C2  0020               	movlb	0	; select bank0
  6584  00C3  0820               	movf	?___lmul,w
  6585  00C4  0021               	movlb	1	; select bank1
  6586  00C5  00A3               	movwf	strtod@_u^(0+128)
  6587  00C6  0827               	movf	strtod@s^(0+128),w
  6588  00C7  0086               	movwf	6
  6589  00C8  0187               	clrf	7
  6590  00C9  0801               	movf	1,w
  6591  00CA  3ED0               	addlw	208
  6592  00CB  0020               	movlb	0	; select bank0
  6593  00CC  00EA               	movwf	??_strtod
  6594  00CD  01EB               	clrf	??_strtod+1
  6595  00CE  01EC               	clrf	??_strtod+2
  6596  00CF  01ED               	clrf	??_strtod+3
  6597  00D0  086A               	movf	??_strtod,w
  6598  00D1  0021               	movlb	1	; select bank1
  6599  00D2  07A3               	addwf	strtod@_u^(0+128),f
  6600  00D3  0020               	movlb	0	; select bank0
  6601  00D4  086B               	movf	??_strtod+1,w
  6602  00D5  0021               	movlb	1	; select bank1
  6603  00D6  3DA4               	addwfc	(strtod@_u+1)^(0+128),f
  6604  00D7  0020               	movlb	0	; select bank0
  6605  00D8  086C               	movf	??_strtod+2,w
  6606  00D9  0021               	movlb	1	; select bank1
  6607  00DA  3DA5               	addwfc	(strtod@_u+2)^(0+128),f
  6608  00DB  0020               	movlb	0	; select bank0
  6609  00DC  086D               	movf	??_strtod+3,w
  6610  00DD  0021               	movlb	1	; select bank1
  6611  00DE  3DA6               	addwfc	(strtod@_u+3)^(0+128),f
  6612  00DF  2875               	goto	L2
  6613  00E0                     l914:	
  6614  00E0  1A21               	btfsc	strtod@flags^(0+128),4
  6615  00E1  2875               	goto	L2
  6616  00E2  3001               	movlw	1
  6617  00E3  0020               	movlb	0	; select bank0
  6618  00E4  00EA               	movwf	??_strtod
  6619  00E5  086A               	movf	??_strtod,w
  6620  00E6  0021               	movlb	1	; select bank1
  6621  00E7  07A2               	addwf	strtod@expon^(0+128),f
  6622  00E8  2875               	goto	L2
  6623  00E9                     l3317:	
  6624  00E9  0021               	movlb	1	; select bank1
  6625  00EA  01A0               	clrf	strtod@eexp^(0+128)
  6626  00EB  0827               	movf	strtod@s^(0+128),w
  6627  00EC  0086               	movwf	6
  6628  00ED  0187               	clrf	7
  6629  00EE  3065               	movlw	101
  6630  00EF  0601               	xorwf	1,w
  6631  00F0  1903               	btfsc	3,2
  6632  00F1  28F9               	goto	l3323
  6633  00F2  0827               	movf	strtod@s^(0+128),w
  6634  00F3  0086               	movwf	6
  6635  00F4  0187               	clrf	7
  6636  00F5  3045               	movlw	69
  6637  00F6  0601               	xorwf	1,w
  6638  00F7  1D03               	btfss	3,2
  6639  00F8  297D               	goto	l3357
  6640  00F9                     l3323:	
  6641  00F9  3001               	movlw	1
  6642  00FA  0020               	movlb	0	; select bank0
  6643  00FB  00EA               	movwf	??_strtod
  6644  00FC  086A               	movf	??_strtod,w
  6645  00FD  0021               	movlb	1	; select bank1
  6646  00FE  07A7               	addwf	strtod@s^(0+128),f
  6647  00FF  0827               	movf	strtod@s^(0+128),w
  6648  0100  0086               	movwf	6
  6649  0101  0187               	clrf	7
  6650  0102  302D               	movlw	45
  6651  0103  0601               	xorwf	1,w
  6652  0104  1D03               	btfss	3,2
  6653  0105  2908               	goto	l3329
  6654  0106  15A1               	bsf	strtod@flags^(0+128),3
  6655  0107  290F               	goto	l3333
  6656  0108                     l3329:	
  6657  0108  0827               	movf	strtod@s^(0+128),w
  6658  0109  0086               	movwf	6
  6659  010A  0187               	clrf	7
  6660  010B  302B               	movlw	43
  6661  010C  0601               	xorwf	1,w
  6662  010D  1D03               	btfss	3,2
  6663  010E  2915               	goto	l3335
  6664  010F                     l3333:	
  6665  010F  3001               	movlw	1
  6666  0110  0020               	movlb	0	; select bank0
  6667  0111  00EA               	movwf	??_strtod
  6668  0112  086A               	movf	??_strtod,w
  6669  0113  0021               	movlb	1	; select bank1
  6670  0114  07A7               	addwf	strtod@s^(0+128),f
  6671  0115                     l3335:	
  6672  0115  0827               	movf	strtod@s^(0+128),w
  6673  0116  0086               	movwf	6
  6674  0117  0187               	clrf	7
  6675  0118  3030               	movlw	48
  6676  0119  0601               	xorwf	1,w
  6677  011A  1903               	btfsc	3,2
  6678  011B  290F               	goto	l3333
  6679  011C  0827               	movf	strtod@s^(0+128),w
  6680  011D  0086               	movwf	6
  6681  011E  0187               	clrf	7
  6682  011F  0801               	movf	1,w
  6683  0120  3191  21EA  3180   	fcall	_isdigit
  6684  0123  1C03               	btfss	3,0
  6685  0124  2978               	goto	l3353
  6686  0125  0021               	movlb	1	; select bank1
  6687  0126  0827               	movf	strtod@s^(0+128),w
  6688  0127  0086               	movwf	6
  6689  0128  0187               	clrf	7
  6690  0129  0801               	movf	1,w
  6691  012A  3ED0               	addlw	208
  6692  012B  0020               	movlb	0	; select bank0
  6693  012C  00EA               	movwf	??_strtod
  6694  012D  086A               	movf	??_strtod,w
  6695  012E  0021               	movlb	1	; select bank1
  6696  012F  00A0               	movwf	strtod@eexp^(0+128)
  6697  0130  3001               	movlw	1
  6698  0131  0020               	movlb	0	; select bank0
  6699  0132  00EA               	movwf	??_strtod
  6700  0133  086A               	movf	??_strtod,w
  6701  0134  0021               	movlb	1	; select bank1
  6702  0135  07A7               	addwf	strtod@s^(0+128),f
  6703  0136  0827               	movf	strtod@s^(0+128),w
  6704  0137  0086               	movwf	6
  6705  0138  0187               	clrf	7
  6706  0139  0801               	movf	1,w
  6707  013A  3191  21EA  3180   	fcall	_isdigit
  6708  013D  1C03               	btfss	3,0
  6709  013E  2978               	goto	l3353
  6710  013F  0021               	movlb	1	; select bank1
  6711  0140  0827               	movf	strtod@s^(0+128),w
  6712  0141  0086               	movwf	6
  6713  0142  0187               	clrf	7
  6714  0143  300A               	movlw	10
  6715  0144  0020               	movlb	0	; select bank0
  6716  0145  00EA               	movwf	??_strtod
  6717  0146  086A               	movf	??_strtod,w
  6718  0147  00A0               	movwf	___bmul@multiplicand
  6719  0148  0021               	movlb	1	; select bank1
  6720  0149  0820               	movf	strtod@eexp^(0+128),w
  6721  014A  3191  21F9  3180   	fcall	___bmul
  6722  014D  0701               	addwf	1,w
  6723  014E  3ED0               	addlw	-48
  6724  014F  0020               	movlb	0	; select bank0
  6725  0150  00EB               	movwf	??_strtod+1
  6726  0151  086B               	movf	??_strtod+1,w
  6727  0152  0021               	movlb	1	; select bank1
  6728  0153  00A0               	movwf	strtod@eexp^(0+128)
  6729  0154  3001               	movlw	1
  6730  0155  0020               	movlb	0	; select bank0
  6731  0156  00EA               	movwf	??_strtod
  6732  0157  086A               	movf	??_strtod,w
  6733  0158  0021               	movlb	1	; select bank1
  6734  0159  07A7               	addwf	strtod@s^(0+128),f
  6735  015A  0827               	movf	strtod@s^(0+128),w
  6736  015B  0086               	movwf	6
  6737  015C  0187               	clrf	7
  6738  015D  0801               	movf	1,w
  6739  015E  3191  21EA  3180   	fcall	_isdigit
  6740  0161  1C03               	btfss	3,0
  6741  0162  2978               	goto	l3353
  6742  0163  0021               	movlb	1	; select bank1
  6743  0164  0827               	movf	strtod@s^(0+128),w
  6744  0165  0086               	movwf	6
  6745  0166  0187               	clrf	7
  6746  0167  300A               	movlw	10
  6747  0168  0020               	movlb	0	; select bank0
  6748  0169  00EA               	movwf	??_strtod
  6749  016A  086A               	movf	??_strtod,w
  6750  016B  00A0               	movwf	___bmul@multiplicand
  6751  016C  0021               	movlb	1	; select bank1
  6752  016D  0820               	movf	strtod@eexp^(0+128),w
  6753  016E  3191  21F9  3180   	fcall	___bmul
  6754  0171  0701               	addwf	1,w
  6755  0172  3ED0               	addlw	-48
  6756  0173  0020               	movlb	0	; select bank0
  6757  0174  00EB               	movwf	??_strtod+1
  6758  0175  086B               	movf	??_strtod+1,w
  6759  0176  0021               	movlb	1	; select bank1
  6760  0177  00A0               	movwf	strtod@eexp^(0+128)
  6761  0178                     l3353:	
  6762  0178  0021               	movlb	1	; select bank1
  6763  0179  1DA1               	btfss	strtod@flags^(0+128),3
  6764  017A  297D               	goto	l3357
  6765  017B  09A0               	comf	strtod@eexp^(0+128),f
  6766  017C  0AA0               	incf	strtod@eexp^(0+128),f
  6767  017D                     l3357:	
  6768  017D  0820               	movf	strtod@eexp^(0+128),w
  6769  017E  0020               	movlb	0	; select bank0
  6770  017F  00EA               	movwf	??_strtod
  6771  0180  086A               	movf	??_strtod,w
  6772  0181  0021               	movlb	1	; select bank1
  6773  0182  07A2               	addwf	strtod@expon^(0+128),f
  6774  0183  0020               	movlb	0	; select bank0
  6775  0184  0867               	movf	strtod@res,w
  6776  0185  1903               	btfsc	3,2
  6777  0186  2992               	goto	l3365
  6778  0187  0021               	movlb	1	; select bank1
  6779  0188  1CA1               	btfss	strtod@flags^(0+128),1
  6780  0189  2992               	goto	l3365
  6781  018A  0827               	movf	strtod@s^(0+128),w
  6782  018B  0020               	movlb	0	; select bank0
  6783  018C  00EA               	movwf	??_strtod
  6784  018D  0867               	movf	strtod@res,w
  6785  018E  0086               	movwf	6
  6786  018F  0187               	clrf	7
  6787  0190  086A               	movf	??_strtod,w
  6788  0191  0081               	movwf	1
  6789  0192                     l3365:	
  6790  0192  0021               	movlb	1	; select bank1
  6791  0193  0826               	movf	(strtod@_u+3)^(0+128),w
  6792  0194  0020               	movlb	0	; select bank0
  6793  0195  00AB               	movwf	___altoft@c+3
  6794  0196  0021               	movlb	1	; select bank1
  6795  0197  0825               	movf	(strtod@_u+2)^(0+128),w
  6796  0198  0020               	movlb	0	; select bank0
  6797  0199  00AA               	movwf	___altoft@c+2
  6798  019A  0021               	movlb	1	; select bank1
  6799  019B  0824               	movf	(strtod@_u+1)^(0+128),w
  6800  019C  0020               	movlb	0	; select bank0
  6801  019D  00A9               	movwf	___altoft@c+1
  6802  019E  0021               	movlb	1	; select bank1
  6803  019F  0823               	movf	strtod@_u^(0+128),w
  6804  01A0  0020               	movlb	0	; select bank0
  6805  01A1  00A8               	movwf	___altoft@c
  6806  01A2  3196  2637  3180   	fcall	___altoft
  6807  01A5  0020               	movlb	0	; select bank0
  6808  01A6  0828               	movf	?___altoft,w
  6809  01A7  0021               	movlb	1	; select bank1
  6810  01A8  00A3               	movwf	strtod@_u^(0+128)
  6811  01A9  0020               	movlb	0	; select bank0
  6812  01AA  0829               	movf	?___altoft+1,w
  6813  01AB  0021               	movlb	1	; select bank1
  6814  01AC  00A4               	movwf	(strtod@_u+1)^(0+128)
  6815  01AD  0020               	movlb	0	; select bank0
  6816  01AE  082A               	movf	?___altoft+2,w
  6817  01AF  0021               	movlb	1	; select bank1
  6818  01B0  00A5               	movwf	(strtod@_u+2)^(0+128)
  6819  01B1  0825               	movf	(strtod@_u+2)^(0+128),w
  6820  01B2  0424               	iorwf	(strtod@_u+1)^(0+128),w
  6821  01B3  0423               	iorwf	strtod@_u^(0+128),w
  6822  01B4  1D03               	skipz
  6823  01B5  29BE               	goto	l932
  6824  01B6  3000               	movlw	0
  6825  01B7  0020               	movlb	0	; select bank0
  6826  01B8  00E7               	movwf	?_strtod
  6827  01B9  3000               	movlw	0
  6828  01BA  00E8               	movwf	?_strtod+1
  6829  01BB  3000               	movlw	0
  6830  01BC  00E9               	movwf	?_strtod+2
  6831  01BD  0008               	return
  6832  01BE                     l932:	
  6833  01BE  1FA2               	btfss	strtod@expon^(0+128),7
  6834  01BF  2A44               	goto	l3399
  6835  01C0  09A2               	comf	strtod@expon^(0+128),f
  6836  01C1  0AA2               	incf	strtod@expon^(0+128),f
  6837  01C2                     l3379:	
  6838  01C2  0822               	movf	strtod@expon^(0+128),w
  6839  01C3  3A80               	xorlw	128
  6840  01C4  3E76               	addlw	-138
  6841  01C5  1C03               	btfss	3,0
  6842  01C6  2A18               	goto	l3385
  6843  01C7  3003               	movlw	3
  6844  01C8  0020               	movlb	0	; select bank0
  6845  01C9  00BB               	movwf	___ftdiv@f2
  6846  01CA  3015               	movlw	21
  6847  01CB  00BC               	movwf	___ftdiv@f2+1
  6848  01CC  3050               	movlw	80
  6849  01CD  00BD               	movwf	___ftdiv@f2+2
  6850  01CE  0021               	movlb	1	; select bank1
  6851  01CF  0823               	movf	strtod@_u^(0+128),w
  6852  01D0  0020               	movlb	0	; select bank0
  6853  01D1  00BE               	movwf	___ftdiv@f1
  6854  01D2  0021               	movlb	1	; select bank1
  6855  01D3  0824               	movf	(strtod@_u+1)^(0+128),w
  6856  01D4  0020               	movlb	0	; select bank0
  6857  01D5  00BF               	movwf	___ftdiv@f1+1
  6858  01D6  0021               	movlb	1	; select bank1
  6859  01D7  0825               	movf	(strtod@_u+2)^(0+128),w
  6860  01D8  0020               	movlb	0	; select bank0
  6861  01D9  00C0               	movwf	___ftdiv@f1+2
  6862  01DA  318B  2335  3180   	fcall	___ftdiv
  6863  01DD  0020               	movlb	0	; select bank0
  6864  01DE  083B               	movf	?___ftdiv,w
  6865  01DF  0021               	movlb	1	; select bank1
  6866  01E0  00A3               	movwf	strtod@_u^(0+128)
  6867  01E1  0020               	movlb	0	; select bank0
  6868  01E2  083C               	movf	?___ftdiv+1,w
  6869  01E3  0021               	movlb	1	; select bank1
  6870  01E4  00A4               	movwf	(strtod@_u+1)^(0+128)
  6871  01E5  0020               	movlb	0	; select bank0
  6872  01E6  083D               	movf	?___ftdiv+2,w
  6873  01E7  0021               	movlb	1	; select bank1
  6874  01E8  00A5               	movwf	(strtod@_u+2)^(0+128)
  6875  01E9  30F6               	movlw	246
  6876  01EA  0020               	movlb	0	; select bank0
  6877  01EB  00EA               	movwf	??_strtod
  6878  01EC  086A               	movf	??_strtod,w
  6879  01ED  0021               	movlb	1	; select bank1
  6880  01EE  07A2               	addwf	strtod@expon^(0+128),f
  6881  01EF  29C2               	goto	l3379
  6882  01F0                     l3381:	
  6883  01F0  3000               	movlw	0
  6884  01F1  0020               	movlb	0	; select bank0
  6885  01F2  00BB               	movwf	___ftdiv@f2
  6886  01F3  3020               	movlw	32
  6887  01F4  00BC               	movwf	___ftdiv@f2+1
  6888  01F5  3041               	movlw	65
  6889  01F6  00BD               	movwf	___ftdiv@f2+2
  6890  01F7  0021               	movlb	1	; select bank1
  6891  01F8  0823               	movf	strtod@_u^(0+128),w
  6892  01F9  0020               	movlb	0	; select bank0
  6893  01FA  00BE               	movwf	___ftdiv@f1
  6894  01FB  0021               	movlb	1	; select bank1
  6895  01FC  0824               	movf	(strtod@_u+1)^(0+128),w
  6896  01FD  0020               	movlb	0	; select bank0
  6897  01FE  00BF               	movwf	___ftdiv@f1+1
  6898  01FF  0021               	movlb	1	; select bank1
  6899  0200  0825               	movf	(strtod@_u+2)^(0+128),w
  6900  0201  0020               	movlb	0	; select bank0
  6901  0202  00C0               	movwf	___ftdiv@f1+2
  6902  0203  318B  2335  3180   	fcall	___ftdiv
  6903  0206  0020               	movlb	0	; select bank0
  6904  0207  083B               	movf	?___ftdiv,w
  6905  0208  0021               	movlb	1	; select bank1
  6906  0209  00A3               	movwf	strtod@_u^(0+128)
  6907  020A  0020               	movlb	0	; select bank0
  6908  020B  083C               	movf	?___ftdiv+1,w
  6909  020C  0021               	movlb	1	; select bank1
  6910  020D  00A4               	movwf	(strtod@_u+1)^(0+128)
  6911  020E  0020               	movlb	0	; select bank0
  6912  020F  083D               	movf	?___ftdiv+2,w
  6913  0210  0021               	movlb	1	; select bank1
  6914  0211  00A5               	movwf	(strtod@_u+2)^(0+128)
  6915  0212  30FF               	movlw	255
  6916  0213  0020               	movlb	0	; select bank0
  6917  0214  00EA               	movwf	??_strtod
  6918  0215  086A               	movf	??_strtod,w
  6919  0216  0021               	movlb	1	; select bank1
  6920  0217  07A2               	addwf	strtod@expon^(0+128),f
  6921  0218                     l3385:	
  6922  0218  0822               	movf	strtod@expon^(0+128),w
  6923  0219  1D03               	btfss	3,2
  6924  021A  29F0               	goto	l3381
  6925  021B  0823               	movf	strtod@_u^(0+128),w
  6926  021C  0020               	movlb	0	; select bank0
  6927  021D  00A0               	movwf	___ftge@ff1
  6928  021E  0021               	movlb	1	; select bank1
  6929  021F  0824               	movf	(strtod@_u+1)^(0+128),w
  6930  0220  0020               	movlb	0	; select bank0
  6931  0221  00A1               	movwf	___ftge@ff1+1
  6932  0222  0021               	movlb	1	; select bank1
  6933  0223  0825               	movf	(strtod@_u+2)^(0+128),w
  6934  0224  0020               	movlb	0	; select bank0
  6935  0225  00A2               	movwf	___ftge@ff1+2
  6936  0226  3000               	movlw	0
  6937  0227  00A3               	movwf	___ftge@ff2
  6938  0228  3080               	movlw	128
  6939  0229  00A4               	movwf	___ftge@ff2+1
  6940  022A  3000               	movlw	0
  6941  022B  00A5               	movwf	___ftge@ff2+2
  6942  022C  3195  25BE  3180   	fcall	___ftge
  6943  022F  1803               	btfsc	3,0
  6944  0230  2ACE               	goto	l943
  6945  0231  0021               	movlb	1	; select bank1
  6946  0232  1C21               	btfss	strtod@flags^(0+128),0
  6947  0233  2A3C               	goto	l3395
  6948  0234  3000               	movlw	0
  6949  0235  0020               	movlb	0	; select bank0
  6950  0236  00E7               	movwf	?_strtod
  6951  0237  3080               	movlw	128
  6952  0238  00E8               	movwf	?_strtod+1
  6953  0239  3080               	movlw	128
  6954  023A  00E9               	movwf	?_strtod+2
  6955  023B  0008               	return
  6956  023C                     l3395:	
  6957  023C  3000               	movlw	0
  6958  023D  0020               	movlb	0	; select bank0
  6959  023E  00E7               	movwf	?_strtod
  6960  023F  3080               	movlw	128
  6961  0240  00E8               	movwf	?_strtod+1
  6962  0241  3000               	movlw	0
  6963  0242  00E9               	movwf	?_strtod+2
  6964  0243  0008               	return
  6965  0244                     l3399:	
  6966  0244  0021               	movlb	1	; select bank1
  6967  0245  0822               	movf	strtod@expon^(0+128),w
  6968  0246  3A80               	xorlw	128
  6969  0247  3E7F               	addlw	-129
  6970  0248  1803               	btfsc	3,0
  6971  0249  2A73               	goto	l3407
  6972  024A  2ACE               	goto	l943
  6973  024B                     l3403:	
  6974  024B  3003               	movlw	3
  6975  024C  0020               	movlb	0	; select bank0
  6976  024D  00D7               	movwf	___ftmul@f1
  6977  024E  3015               	movlw	21
  6978  024F  00D8               	movwf	___ftmul@f1+1
  6979  0250  3050               	movlw	80
  6980  0251  00D9               	movwf	___ftmul@f1+2
  6981  0252  0021               	movlb	1	; select bank1
  6982  0253  0823               	movf	strtod@_u^(0+128),w
  6983  0254  0020               	movlb	0	; select bank0
  6984  0255  00DA               	movwf	___ftmul@f2
  6985  0256  0021               	movlb	1	; select bank1
  6986  0257  0824               	movf	(strtod@_u+1)^(0+128),w
  6987  0258  0020               	movlb	0	; select bank0
  6988  0259  00DB               	movwf	___ftmul@f2+1
  6989  025A  0021               	movlb	1	; select bank1
  6990  025B  0825               	movf	(strtod@_u+2)^(0+128),w
  6991  025C  0020               	movlb	0	; select bank0
  6992  025D  00DC               	movwf	___ftmul@f2+2
  6993  025E  318B  23DE  3180   	fcall	___ftmul
  6994  0261  0020               	movlb	0	; select bank0
  6995  0262  0857               	movf	?___ftmul,w
  6996  0263  0021               	movlb	1	; select bank1
  6997  0264  00A3               	movwf	strtod@_u^(0+128)
  6998  0265  0020               	movlb	0	; select bank0
  6999  0266  0858               	movf	?___ftmul+1,w
  7000  0267  0021               	movlb	1	; select bank1
  7001  0268  00A4               	movwf	(strtod@_u+1)^(0+128)
  7002  0269  0020               	movlb	0	; select bank0
  7003  026A  0859               	movf	?___ftmul+2,w
  7004  026B  0021               	movlb	1	; select bank1
  7005  026C  00A5               	movwf	(strtod@_u+2)^(0+128)
  7006  026D  30F6               	movlw	246
  7007  026E  0020               	movlb	0	; select bank0
  7008  026F  00EA               	movwf	??_strtod
  7009  0270  086A               	movf	??_strtod,w
  7010  0271  0021               	movlb	1	; select bank1
  7011  0272  07A2               	addwf	strtod@expon^(0+128),f
  7012  0273                     l3407:	
  7013  0273  300A               	movlw	10
  7014  0274  0222               	subwf	strtod@expon^(0+128),w
  7015  0275  1C03               	btfss	3,0
  7016  0276  2AA0               	goto	l3413
  7017  0277  2A4B               	goto	l3403
  7018  0278                     l3409:	
  7019  0278  3000               	movlw	0
  7020  0279  0020               	movlb	0	; select bank0
  7021  027A  00D7               	movwf	___ftmul@f1
  7022  027B  3020               	movlw	32
  7023  027C  00D8               	movwf	___ftmul@f1+1
  7024  027D  3041               	movlw	65
  7025  027E  00D9               	movwf	___ftmul@f1+2
  7026  027F  0021               	movlb	1	; select bank1
  7027  0280  0823               	movf	strtod@_u^(0+128),w
  7028  0281  0020               	movlb	0	; select bank0
  7029  0282  00DA               	movwf	___ftmul@f2
  7030  0283  0021               	movlb	1	; select bank1
  7031  0284  0824               	movf	(strtod@_u+1)^(0+128),w
  7032  0285  0020               	movlb	0	; select bank0
  7033  0286  00DB               	movwf	___ftmul@f2+1
  7034  0287  0021               	movlb	1	; select bank1
  7035  0288  0825               	movf	(strtod@_u+2)^(0+128),w
  7036  0289  0020               	movlb	0	; select bank0
  7037  028A  00DC               	movwf	___ftmul@f2+2
  7038  028B  318B  23DE  3180   	fcall	___ftmul
  7039  028E  0020               	movlb	0	; select bank0
  7040  028F  0857               	movf	?___ftmul,w
  7041  0290  0021               	movlb	1	; select bank1
  7042  0291  00A3               	movwf	strtod@_u^(0+128)
  7043  0292  0020               	movlb	0	; select bank0
  7044  0293  0858               	movf	?___ftmul+1,w
  7045  0294  0021               	movlb	1	; select bank1
  7046  0295  00A4               	movwf	(strtod@_u+1)^(0+128)
  7047  0296  0020               	movlb	0	; select bank0
  7048  0297  0859               	movf	?___ftmul+2,w
  7049  0298  0021               	movlb	1	; select bank1
  7050  0299  00A5               	movwf	(strtod@_u+2)^(0+128)
  7051  029A  30FF               	movlw	255
  7052  029B  0020               	movlb	0	; select bank0
  7053  029C  00EA               	movwf	??_strtod
  7054  029D  086A               	movf	??_strtod,w
  7055  029E  0021               	movlb	1	; select bank1
  7056  029F  07A2               	addwf	strtod@expon^(0+128),f
  7057  02A0                     l3413:	
  7058  02A0  0822               	movf	strtod@expon^(0+128),w
  7059  02A1  1D03               	btfss	3,2
  7060  02A2  2A78               	goto	l3409
  7061  02A3  30FF               	movlw	255
  7062  02A4  0020               	movlb	0	; select bank0
  7063  02A5  00A0               	movwf	___ftge@ff1
  7064  02A6  307F               	movlw	127
  7065  02A7  00A1               	movwf	___ftge@ff1+1
  7066  02A8  307F               	movlw	127
  7067  02A9  00A2               	movwf	___ftge@ff1+2
  7068  02AA  0021               	movlb	1	; select bank1
  7069  02AB  0823               	movf	strtod@_u^(0+128),w
  7070  02AC  0020               	movlb	0	; select bank0
  7071  02AD  00A3               	movwf	___ftge@ff2
  7072  02AE  0021               	movlb	1	; select bank1
  7073  02AF  0824               	movf	(strtod@_u+1)^(0+128),w
  7074  02B0  0020               	movlb	0	; select bank0
  7075  02B1  00A4               	movwf	___ftge@ff2+1
  7076  02B2  0021               	movlb	1	; select bank1
  7077  02B3  0825               	movf	(strtod@_u+2)^(0+128),w
  7078  02B4  0020               	movlb	0	; select bank0
  7079  02B5  00A5               	movwf	___ftge@ff2+2
  7080  02B6  3195  25BE  3180   	fcall	___ftge
  7081  02B9  1803               	btfsc	3,0
  7082  02BA  2ACE               	goto	l943
  7083  02BB  0021               	movlb	1	; select bank1
  7084  02BC  1C21               	btfss	strtod@flags^(0+128),0
  7085  02BD  2AC6               	goto	l3423
  7086  02BE  3000               	movlw	0
  7087  02BF  0020               	movlb	0	; select bank0
  7088  02C0  00E7               	movwf	?_strtod
  7089  02C1  3080               	movlw	128
  7090  02C2  00E8               	movwf	?_strtod+1
  7091  02C3  3080               	movlw	128
  7092  02C4  00E9               	movwf	?_strtod+2
  7093  02C5  0008               	return
  7094  02C6                     l3423:	
  7095  02C6  3000               	movlw	0
  7096  02C7  0020               	movlb	0	; select bank0
  7097  02C8  00E7               	movwf	?_strtod
  7098  02C9  3080               	movlw	128
  7099  02CA  00E8               	movwf	?_strtod+1
  7100  02CB  3000               	movlw	0
  7101  02CC  00E9               	movwf	?_strtod+2
  7102  02CD  0008               	return
  7103  02CE                     l943:	
  7104  02CE  0021               	movlb	1	; select bank1
  7105  02CF  1C21               	btfss	strtod@flags^(0+128),0
  7106  02D0  2AEA               	goto	l3429
  7107  02D1  0823               	movf	strtod@_u^(0+128),w
  7108  02D2  0020               	movlb	0	; select bank0
  7109  02D3  00D7               	movwf	___ftneg@f1
  7110  02D4  0021               	movlb	1	; select bank1
  7111  02D5  0824               	movf	(strtod@_u+1)^(0+128),w
  7112  02D6  0020               	movlb	0	; select bank0
  7113  02D7  00D8               	movwf	___ftneg@f1+1
  7114  02D8  0021               	movlb	1	; select bank1
  7115  02D9  0825               	movf	(strtod@_u+2)^(0+128),w
  7116  02DA  0020               	movlb	0	; select bank0
  7117  02DB  00D9               	movwf	___ftneg@f1+2
  7118  02DC  3191  21D4         	fcall	___ftneg
  7119  02DE  0020               	movlb	0	; select bank0
  7120  02DF  0857               	movf	?___ftneg,w
  7121  02E0  0021               	movlb	1	; select bank1
  7122  02E1  00A3               	movwf	strtod@_u^(0+128)
  7123  02E2  0020               	movlb	0	; select bank0
  7124  02E3  0858               	movf	?___ftneg+1,w
  7125  02E4  0021               	movlb	1	; select bank1
  7126  02E5  00A4               	movwf	(strtod@_u+1)^(0+128)
  7127  02E6  0020               	movlb	0	; select bank0
  7128  02E7  0859               	movf	?___ftneg+2,w
  7129  02E8  0021               	movlb	1	; select bank1
  7130  02E9  00A5               	movwf	(strtod@_u+2)^(0+128)
  7131  02EA                     l3429:	
  7132  02EA  0823               	movf	strtod@_u^(0+128),w
  7133  02EB  0020               	movlb	0	; select bank0
  7134  02EC  00E7               	movwf	?_strtod
  7135  02ED  0021               	movlb	1	; select bank1
  7136  02EE  0824               	movf	(strtod@_u+1)^(0+128),w
  7137  02EF  0020               	movlb	0	; select bank0
  7138  02F0  00E8               	movwf	?_strtod+1
  7139  02F1  0021               	movlb	1	; select bank1
  7140  02F2  0825               	movf	(strtod@_u+2)^(0+128),w
  7141  02F3  0020               	movlb	0	; select bank0
  7142  02F4  00E9               	movwf	?_strtod+2
  7143  02F5  0008               	return
  7144  02F6                     __end_of_strtod:	
  7145                           
  7146                           	psect	text22
  7147  120B                     __ptext22:	
  7148 ;; *************** function _isspace *****************
  7149 ;; Defined at:
  7150 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isspace.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  c               1    wreg     unsigned char 
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;  c               1    1[BANK0 ] unsigned char 
  7155 ;; Return value:  Size  Location     Type
  7156 ;;		None               void
  7157 ;; Registers used:
  7158 ;;		wreg, status,2, status,0
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7167 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;Total ram usage:        2 bytes
  7169 ;; Hardware stack levels used:    1
  7170 ;; Hardware stack levels required when called:    7
  7171 ;; This function calls:
  7172 ;;		Nothing
  7173 ;; This function is called by:
  7174 ;;		_strtod
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           
  7179                           ;psect for function _isspace
  7180  120B                     _isspace:	
  7181                           
  7182                           ;incstack = 0
  7183                           ; Regs used in _isspace: [wreg+status,2+status,0]
  7184                           ;isspace@c stored from wreg
  7185  120B  0020               	movlb	0	; select bank0
  7186  120C  00A1               	movwf	isspace@c
  7187  120D  01A0               	clrf	_isspace$1852
  7188  120E  0AA0               	incf	_isspace$1852,f
  7189  120F  3020               	movlw	32
  7190  1210  0621               	xorwf	isspace@c,w
  7191  1211  1903               	btfsc	3,2
  7192  1212  2A1C               	goto	l3029
  7193  1213  300E               	movlw	14
  7194  1214  0221               	subwf	isspace@c,w
  7195  1215  1803               	skipnc
  7196  1216  2A1B               	goto	l3027
  7197  1217  3009               	movlw	9
  7198  1218  0221               	subwf	isspace@c,w
  7199  1219  1803               	skipnc
  7200  121A  2A1C               	goto	l3029
  7201  121B                     l3027:	
  7202  121B  01A0               	clrf	_isspace$1852
  7203  121C                     l3029:	
  7204  121C  0C20               	rrf	_isspace$1852,w
  7205  121D  0008               	return
  7206  121E                     __end_of_isspace:	
  7207                           
  7208                           	psect	text23
  7209  14F1                     __ptext23:	
  7210 ;; *************** function ___lmul *****************
  7211 ;; Defined at:
  7212 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;  multiplier      4    0[BANK0 ] unsigned long 
  7215 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;  product         4    8[BANK0 ] unsigned long 
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  4    0[BANK0 ] unsigned long 
  7220 ;; Registers used:
  7221 ;;		wreg, status,2, status,0
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7227 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;Total ram usage:       12 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    7
  7234 ;; This function calls:
  7235 ;;		Nothing
  7236 ;; This function is called by:
  7237 ;;		_strtod
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           
  7242                           ;psect for function ___lmul
  7243  14F1                     ___lmul:	
  7244                           
  7245                           ;incstack = 0
  7246                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7247  14F1  3000               	movlw	0
  7248  14F2  0020               	movlb	0	; select bank0
  7249  14F3  00AB               	movwf	___lmul@product+3
  7250  14F4  3000               	movlw	0
  7251  14F5  00AA               	movwf	___lmul@product+2
  7252  14F6  3000               	movlw	0
  7253  14F7  00A9               	movwf	___lmul@product+1
  7254  14F8  3000               	movlw	0
  7255  14F9  00A8               	movwf	___lmul@product
  7256  14FA                     l2857:	
  7257  14FA  1C20               	btfss	___lmul@multiplier,0
  7258  14FB  2D04               	goto	l2861
  7259  14FC  0824               	movf	___lmul@multiplicand,w
  7260  14FD  07A8               	addwf	___lmul@product,f
  7261  14FE  0825               	movf	___lmul@multiplicand+1,w
  7262  14FF  3DA9               	addwfc	___lmul@product+1,f
  7263  1500  0826               	movf	___lmul@multiplicand+2,w
  7264  1501  3DAA               	addwfc	___lmul@product+2,f
  7265  1502  0827               	movf	___lmul@multiplicand+3,w
  7266  1503  3DAB               	addwfc	___lmul@product+3,f
  7267  1504                     l2861:	
  7268  1504  3001               	movlw	1
  7269  1505                     u2585:	
  7270  1505  35A4               	lslf	___lmul@multiplicand,f
  7271  1506  0DA5               	rlf	___lmul@multiplicand+1,f
  7272  1507  0DA6               	rlf	___lmul@multiplicand+2,f
  7273  1508  0DA7               	rlf	___lmul@multiplicand+3,f
  7274  1509  0B89               	decfsz	9,f
  7275  150A  2D05               	goto	u2585
  7276  150B  3001               	movlw	1
  7277  150C                     u2595:	
  7278  150C  36A3               	lsrf	___lmul@multiplier+3,f
  7279  150D  0CA2               	rrf	___lmul@multiplier+2,f
  7280  150E  0CA1               	rrf	___lmul@multiplier+1,f
  7281  150F  0CA0               	rrf	___lmul@multiplier,f
  7282  1510  0B89               	decfsz	9,f
  7283  1511  2D0C               	goto	u2595
  7284  1512  0823               	movf	___lmul@multiplier+3,w
  7285  1513  0422               	iorwf	___lmul@multiplier+2,w
  7286  1514  0421               	iorwf	___lmul@multiplier+1,w
  7287  1515  0420               	iorwf	___lmul@multiplier,w
  7288  1516  1D03               	skipz
  7289  1517  2CFA               	goto	l2857
  7290  1518  082B               	movf	___lmul@product+3,w
  7291  1519  00A3               	movwf	?___lmul+3
  7292  151A  082A               	movf	___lmul@product+2,w
  7293  151B  00A2               	movwf	?___lmul+2
  7294  151C  0829               	movf	___lmul@product+1,w
  7295  151D  00A1               	movwf	?___lmul+1
  7296  151E  0828               	movf	___lmul@product,w
  7297  151F  00A0               	movwf	?___lmul
  7298  1520  0008               	return
  7299  1521                     __end_of___lmul:	
  7300                           
  7301                           	psect	text24
  7302  11F9                     __ptext24:	
  7303 ;; *************** function ___bmul *****************
  7304 ;; Defined at:
  7305 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  multiplier      1    wreg     unsigned char 
  7308 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7311 ;;  product         1    2[BANK0 ] unsigned char 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  1    wreg      unsigned char 
  7314 ;; Registers used:
  7315 ;;		wreg, status,2, status,0
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7321 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7324 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;Total ram usage:        4 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; Hardware stack levels required when called:    7
  7328 ;; This function calls:
  7329 ;;		Nothing
  7330 ;; This function is called by:
  7331 ;;		_nrf24l01SetTXPipe
  7332 ;;		_nrf24l01InitRegisters
  7333 ;;		_strtod
  7334 ;; This function uses a non-reentrant model
  7335 ;;
  7336                           
  7337                           
  7338                           ;psect for function ___bmul
  7339  11F9                     ___bmul:	
  7340                           
  7341                           ;incstack = 0
  7342                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7343                           ;___bmul@multiplier stored from wreg
  7344  11F9  0020               	movlb	0	; select bank0
  7345  11FA  00A3               	movwf	___bmul@multiplier
  7346  11FB  01A2               	clrf	___bmul@product
  7347  11FC                     l2871:	
  7348  11FC  1C23               	btfss	___bmul@multiplier,0
  7349  11FD  2A02               	goto	l2875
  7350  11FE  0820               	movf	___bmul@multiplicand,w
  7351  11FF  00A1               	movwf	??___bmul
  7352  1200  0821               	movf	??___bmul,w
  7353  1201  07A2               	addwf	___bmul@product,f
  7354  1202                     l2875:	
  7355  1202  1003               	clrc
  7356  1203  0DA0               	rlf	___bmul@multiplicand,f
  7357  1204  1003               	clrc
  7358  1205  0CA3               	rrf	___bmul@multiplier,f
  7359  1206  0823               	movf	___bmul@multiplier,w
  7360  1207  1D03               	btfss	3,2
  7361  1208  29FC               	goto	l2871
  7362  1209  0822               	movf	___bmul@product,w
  7363  120A  0008               	return
  7364  120B                     __end_of___bmul:	
  7365                           
  7366                           	psect	text25
  7367  1637                     __ptext25:	
  7368 ;; *************** function ___altoft *****************
  7369 ;; Defined at:
  7370 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\altoft.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;  c               4    8[BANK0 ] long 
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;  sign            1   15[BANK0 ] unsigned char 
  7375 ;;  exp             1   14[BANK0 ] unsigned char 
  7376 ;; Return value:  Size  Location     Type
  7377 ;;                  3    8[BANK0 ] float 
  7378 ;; Registers used:
  7379 ;;		wreg, status,2, status,0, pclath, cstack
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7385 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;Total ram usage:        8 bytes
  7390 ;; Hardware stack levels used:    1
  7391 ;; Hardware stack levels required when called:    8
  7392 ;; This function calls:
  7393 ;;		___ftpack
  7394 ;; This function is called by:
  7395 ;;		_strtod
  7396 ;; This function uses a non-reentrant model
  7397 ;;
  7398                           
  7399                           
  7400                           ;psect for function ___altoft
  7401  1637                     ___altoft:	
  7402                           
  7403                           ;incstack = 0
  7404                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  7405  1637  0020               	movlb	0	; select bank0
  7406  1638  01AF               	clrf	___altoft@sign
  7407  1639  308E               	movlw	142
  7408  163A  00AC               	movwf	??___altoft
  7409  163B  082C               	movf	??___altoft,w
  7410  163C  00AE               	movwf	___altoft@exp
  7411  163D  1FAB               	btfss	___altoft@c+3,7
  7412  163E  2E4C               	goto	l2893
  7413  163F  09A8               	comf	___altoft@c,f
  7414  1640  09A9               	comf	___altoft@c+1,f
  7415  1641  09AA               	comf	___altoft@c+2,f
  7416  1642  09AB               	comf	___altoft@c+3,f
  7417  1643  0AA8               	incf	___altoft@c,f
  7418  1644  1903               	skipnz
  7419  1645  0AA9               	incf	___altoft@c+1,f
  7420  1646  1903               	skipnz
  7421  1647  0AAA               	incf	___altoft@c+2,f
  7422  1648  1903               	skipnz
  7423  1649  0AAB               	incf	___altoft@c+3,f
  7424  164A  01AF               	clrf	___altoft@sign
  7425  164B  0AAF               	incf	___altoft@sign,f
  7426  164C                     l2893:	
  7427  164C  30FF               	movlw	255
  7428  164D  052B               	andwf	___altoft@c+3,w
  7429  164E  1903               	btfsc	3,2
  7430  164F  2E5C               	goto	l2895
  7431  1650  3001               	movlw	1
  7432  1651                     u2645:	
  7433  1651  36AB               	lsrf	___altoft@c+3,f
  7434  1652  0CAA               	rrf	___altoft@c+2,f
  7435  1653  0CA9               	rrf	___altoft@c+1,f
  7436  1654  0CA8               	rrf	___altoft@c,f
  7437  1655  0B89               	decfsz	9,f
  7438  1656  2E51               	goto	u2645
  7439  1657  3001               	movlw	1
  7440  1658  00AC               	movwf	??___altoft
  7441  1659  082C               	movf	??___altoft,w
  7442  165A  07AE               	addwf	___altoft@exp,f
  7443  165B  2E4C               	goto	l2893
  7444  165C                     l2895:	
  7445  165C  0828               	movf	___altoft@c,w
  7446  165D  00A0               	movwf	___ftpack@arg
  7447  165E  0829               	movf	___altoft@c+1,w
  7448  165F  00A1               	movwf	___ftpack@arg+1
  7449  1660  082A               	movf	___altoft@c+2,w
  7450  1661  00A2               	movwf	___ftpack@arg+2
  7451  1662  082E               	movf	___altoft@exp,w
  7452  1663  00AC               	movwf	??___altoft
  7453  1664  082C               	movf	??___altoft,w
  7454  1665  00A3               	movwf	___ftpack@exp
  7455  1666  082F               	movf	___altoft@sign,w
  7456  1667  00AD               	movwf	??___altoft+1
  7457  1668  082D               	movf	??___altoft+1,w
  7458  1669  00A4               	movwf	___ftpack@sign
  7459  166A  3189  211D         	fcall	___ftpack
  7460  166C  0020               	movlb	0	; select bank0
  7461  166D  0820               	movf	?___ftpack,w
  7462  166E  00A8               	movwf	?___altoft
  7463  166F  0821               	movf	?___ftpack+1,w
  7464  1670  00A9               	movwf	?___altoft+1
  7465  1671  0822               	movf	?___ftpack+2,w
  7466  1672  00AA               	movwf	?___altoft+2
  7467  1673  0008               	return
  7468  1674                     __end_of___altoft:	
  7469                           
  7470                           	psect	text26
  7471  1551                     __ptext26:	
  7472 ;; *************** function ___lwdiv *****************
  7473 ;; Defined at:
  7474 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  7475 ;; Parameters:    Size  Location     Type
  7476 ;;  divisor         2    0[BANK0 ] unsigned int 
  7477 ;;  dividend        2    2[BANK0 ] unsigned int 
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;  quotient        2    5[BANK0 ] unsigned int 
  7480 ;;  counter         1    7[BANK0 ] unsigned char 
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  2    0[BANK0 ] unsigned int 
  7483 ;; Registers used:
  7484 ;;		wreg, status,2, status,0
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7490 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7491 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7492 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7493 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7494 ;;Total ram usage:        8 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:    7
  7497 ;; This function calls:
  7498 ;;		Nothing
  7499 ;; This function is called by:
  7500 ;;		_sleep
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504                           
  7505                           ;psect for function ___lwdiv
  7506  1551                     ___lwdiv:	
  7507                           
  7508                           ;incstack = 0
  7509                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7510  1551  0020               	movlb	0	; select bank0
  7511  1552  01A5               	clrf	___lwdiv@quotient
  7512  1553  01A6               	clrf	___lwdiv@quotient+1
  7513  1554  0820               	movf	___lwdiv@divisor,w
  7514  1555  0421               	iorwf	___lwdiv@divisor+1,w
  7515  1556  1903               	btfsc	3,2
  7516  1557  2D81               	goto	l3803
  7517  1558  01A7               	clrf	___lwdiv@counter
  7518  1559  0AA7               	incf	___lwdiv@counter,f
  7519  155A                     l3791:	
  7520  155A  1BA1               	btfsc	___lwdiv@divisor+1,7
  7521  155B  2D66               	goto	l3793
  7522  155C  3001               	movlw	1
  7523  155D                     u4285:	
  7524  155D  35A0               	lslf	___lwdiv@divisor,f
  7525  155E  0DA1               	rlf	___lwdiv@divisor+1,f
  7526  155F  0B89               	decfsz	9,f
  7527  1560  2D5D               	goto	u4285
  7528  1561  3001               	movlw	1
  7529  1562  00A4               	movwf	??___lwdiv
  7530  1563  0824               	movf	??___lwdiv,w
  7531  1564  07A7               	addwf	___lwdiv@counter,f
  7532  1565  2D5A               	goto	l3791
  7533  1566                     l3793:	
  7534  1566  3001               	movlw	1
  7535  1567                     u4305:	
  7536  1567  35A5               	lslf	___lwdiv@quotient,f
  7537  1568  0DA6               	rlf	___lwdiv@quotient+1,f
  7538  1569  0B89               	decfsz	9,f
  7539  156A  2D67               	goto	u4305
  7540  156B  0821               	movf	___lwdiv@divisor+1,w
  7541  156C  0223               	subwf	___lwdiv@dividend+1,w
  7542  156D  1D03               	skipz
  7543  156E  2D71               	goto	u4315
  7544  156F  0820               	movf	___lwdiv@divisor,w
  7545  1570  0222               	subwf	___lwdiv@dividend,w
  7546  1571                     u4315:	
  7547  1571  1C03               	skipc
  7548  1572  2D78               	goto	l3799
  7549  1573  0820               	movf	___lwdiv@divisor,w
  7550  1574  02A2               	subwf	___lwdiv@dividend,f
  7551  1575  0821               	movf	___lwdiv@divisor+1,w
  7552  1576  3BA3               	subwfb	___lwdiv@dividend+1,f
  7553  1577  1425               	bsf	___lwdiv@quotient,0
  7554  1578                     l3799:	
  7555  1578  3001               	movlw	1
  7556  1579                     u4325:	
  7557  1579  36A1               	lsrf	___lwdiv@divisor+1,f
  7558  157A  0CA0               	rrf	___lwdiv@divisor,f
  7559  157B  0B89               	decfsz	9,f
  7560  157C  2D79               	goto	u4325
  7561  157D  3001               	movlw	1
  7562  157E  02A7               	subwf	___lwdiv@counter,f
  7563  157F  1D03               	btfss	3,2
  7564  1580  2D66               	goto	l3793
  7565  1581                     l3803:	
  7566  1581  0826               	movf	___lwdiv@quotient+1,w
  7567  1582  00A1               	movwf	?___lwdiv+1
  7568  1583  0825               	movf	___lwdiv@quotient,w
  7569  1584  00A0               	movwf	?___lwdiv
  7570  1585  0008               	return
  7571  1586                     __end_of___lwdiv:	
  7572                           
  7573                           	psect	text27
  7574  0982                     __ptext27:	
  7575 ;; *************** function _setMessage *****************
  7576 ;; Defined at:
  7577 ;;		line 176 in file "main.c"
  7578 ;; Parameters:    Size  Location     Type
  7579 ;;  packet          2   25[BANK1 ] PTR struct .
  7580 ;;		 -> main@packet(33), loop@packet(33), 
  7581 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  7582 ;;		 -> STR_12(5), STR_10(6), STR_9(7), STR_8(5), 
  7583 ;;		 -> STR_7(5), STR_6(4), 
  7584 ;;  value           3   29[BANK1 ] float 
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;  status          2   33[BANK1 ] int 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  1    wreg      void 
  7589 ;; Registers used:
  7590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7596 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;Total ram usage:       10 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:   11
  7603 ;; This function calls:
  7604 ;;		_ftoa
  7605 ;;		_memset
  7606 ;;		_strcat
  7607 ;; This function is called by:
  7608 ;;		_loop
  7609 ;;		_main
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           
  7614                           ;psect for function _setMessage
  7615  0982                     _setMessage:	
  7616                           
  7617                           ;main.c: 177: memset(packet->Message, 0, sizeof(packet->Message));
  7618                           
  7619                           ;incstack = 0
  7620                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7621  0982  0021               	movlb	1	; select bank1
  7622  0983  0839               	movf	setMessage@packet^(0+128),w
  7623  0984  3E01               	addlw	1
  7624  0985  0020               	movlb	0	; select bank0
  7625  0986  00A0               	movwf	memset@p1
  7626  0987  3000               	movlw	0
  7627  0988  0021               	movlb	1	; select bank1
  7628  0989  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  7629  098A  0020               	movlb	0	; select bank0
  7630  098B  00A1               	movwf	memset@p1+1
  7631  098C  3000               	movlw	0
  7632  098D  00A2               	movwf	memset@c
  7633  098E  00A3               	movwf	memset@c+1
  7634  098F  3020               	movlw	32
  7635  0990  00A4               	movwf	memset@n
  7636  0991  3000               	movlw	0
  7637  0992  00A5               	movwf	memset@n+1
  7638  0993  3192  2274  3189   	fcall	_memset
  7639                           
  7640                           ;main.c: 179: strcat(packet->Message, romData->name);
  7641  0996  0021               	movlb	1	; select bank1
  7642  0997  0839               	movf	setMessage@packet^(0+128),w
  7643  0998  3E01               	addlw	1
  7644  0999  00B3               	movwf	strcat@to^(0+128)
  7645  099A  3000               	movlw	0
  7646  099B  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  7647  099C  00B4               	movwf	(strcat@to+1)^(0+128)
  7648  099D  086C               	movf	_romData^(0+128),w
  7649  099E  3E01               	addlw	1
  7650  099F  00B5               	movwf	strcat@from^(0+128)
  7651  09A0  3001               	movlw	1
  7652  09A1  00B6               	movwf	(strcat@from+1)^(0+128)
  7653  09A2  3194  241B  3189   	fcall	_strcat
  7654                           
  7655                           ;main.c: 181: strcat(packet->Message, "/");
  7656  09A5  0021               	movlb	1	; select bank1
  7657  09A6  0839               	movf	setMessage@packet^(0+128),w
  7658  09A7  3E01               	addlw	1
  7659  09A8  00B3               	movwf	strcat@to^(0+128)
  7660  09A9  3000               	movlw	0
  7661  09AA  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  7662  09AB  00B4               	movwf	(strcat@to+1)^(0+128)
  7663  09AC  305D               	movlw	low (STR_1| (0+32768))
  7664  09AD  00B5               	movwf	strcat@from^(0+128)
  7665  09AE  3098               	movlw	high (STR_1| (0+32768))
  7666  09AF  00B6               	movwf	(strcat@from^(0+128)+1)
  7667  09B0  3194  241B  3189   	fcall	_strcat
  7668                           
  7669                           ;main.c: 182: strcat(packet->Message, topic);
  7670  09B3  0021               	movlb	1	; select bank1
  7671  09B4  0839               	movf	setMessage@packet^(0+128),w
  7672  09B5  3E01               	addlw	1
  7673  09B6  00B3               	movwf	strcat@to^(0+128)
  7674  09B7  3000               	movlw	0
  7675  09B8  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  7676  09B9  00B4               	movwf	(strcat@to+1)^(0+128)
  7677  09BA  083C               	movf	(setMessage@topic+1)^(0+128),w
  7678  09BB  00B6               	movwf	(strcat@from+1)^(0+128)
  7679  09BC  083B               	movf	setMessage@topic^(0+128),w
  7680  09BD  00B5               	movwf	strcat@from^(0+128)
  7681  09BE  3194  241B  3189   	fcall	_strcat
  7682                           
  7683                           ;main.c: 184: int status;;main.c: 185: strcat(packet->Message, "/");
  7684  09C1  0021               	movlb	1	; select bank1
  7685  09C2  0839               	movf	setMessage@packet^(0+128),w
  7686  09C3  3E01               	addlw	1
  7687  09C4  00B3               	movwf	strcat@to^(0+128)
  7688  09C5  3000               	movlw	0
  7689  09C6  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  7690  09C7  00B4               	movwf	(strcat@to+1)^(0+128)
  7691  09C8  305D               	movlw	low (STR_1| (0+32768))
  7692  09C9  00B5               	movwf	strcat@from^(0+128)
  7693  09CA  3098               	movlw	high (STR_1| (0+32768))
  7694  09CB  00B6               	movwf	(strcat@from^(0+128)+1)
  7695  09CC  3194  241B  3189   	fcall	_strcat
  7696                           
  7697                           ;main.c: 186: strcat(packet->Message, ftoa(value, &status));
  7698  09CF  0021               	movlb	1	; select bank1
  7699  09D0  0839               	movf	setMessage@packet^(0+128),w
  7700  09D1  3E01               	addlw	1
  7701  09D2  00B3               	movwf	strcat@to^(0+128)
  7702  09D3  3000               	movlw	0
  7703  09D4  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  7704  09D5  00B4               	movwf	(strcat@to+1)^(0+128)
  7705  09D6  083D               	movf	setMessage@value^(0+128),w
  7706  09D7  00A6               	movwf	ftoa@f^(0+128)
  7707  09D8  083E               	movf	(setMessage@value+1)^(0+128),w
  7708  09D9  00A7               	movwf	(ftoa@f+1)^(0+128)
  7709  09DA  083F               	movf	(setMessage@value+2)^(0+128),w
  7710  09DB  00A8               	movwf	(ftoa@f+2)^(0+128)
  7711  09DC  30C1               	movlw	(low (setMessage@status| 0))& (0+255)
  7712  09DD  00C0               	movwf	??_setMessage^(0+128)
  7713  09DE  0840               	movf	??_setMessage^(0+128),w
  7714  09DF  00A9               	movwf	ftoa@status^(0+128)
  7715  09E0  318E  2618  3189   	fcall	_ftoa
  7716  09E3  0021               	movlb	1	; select bank1
  7717  09E4  00B5               	movwf	strcat@from^(0+128)
  7718  09E5  3001               	movlw	1
  7719  09E6  00B6               	movwf	(strcat@from+1)^(0+128)
  7720  09E7  3194  241B         	fcall	_strcat
  7721                           
  7722                           ;main.c: 188: packet->packetData.byte = 0;
  7723  09E9  0021               	movlb	1	; select bank1
  7724  09EA  0839               	movf	setMessage@packet^(0+128),w
  7725  09EB  0086               	movwf	6
  7726  09EC  083A               	movf	(setMessage@packet+1)^(0+128),w
  7727  09ED  0087               	movwf	7
  7728  09EE  0181               	clrf	1
  7729  09EF  0008               	return
  7730  09F0                     __end_of_setMessage:	
  7731                           
  7732                           	psect	text28
  7733  141B                     __ptext28:	
  7734 ;; *************** function _strcat *****************
  7735 ;; Defined at:
  7736 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  to              2   19[BANK1 ] PTR unsigned char 
  7739 ;;		 -> main@packet(33), loop@packet(33), 
  7740 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  7741 ;;		 -> romDataMap.name(16), ftoa@buf(17), STR_12(5), STR_10(6), 
  7742 ;;		 -> STR_9(7), STR_8(5), STR_7(5), STR_6(4), 
  7743 ;;		 -> STR_5(2), STR_4(2), romDataMap(28), 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  7746 ;;		 -> main@packet(33), loop@packet(33), 
  7747 ;; Return value:  Size  Location     Type
  7748 ;;                  2   19[BANK1 ] PTR unsigned char 
  7749 ;; Registers used:
  7750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7751 ;; Tracked objects:
  7752 ;;		On entry : 0/0
  7753 ;;		On exit  : 0/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7756 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7759 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;Total ram usage:        6 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; Hardware stack levels required when called:    7
  7763 ;; This function calls:
  7764 ;;		Nothing
  7765 ;; This function is called by:
  7766 ;;		_setMessage
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           
  7771                           ;psect for function _strcat
  7772  141B                     _strcat:	
  7773                           
  7774                           ;incstack = 0
  7775                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  7776  141B  0021               	movlb	1	; select bank1
  7777  141C  0834               	movf	(strcat@to+1)^(0+128),w
  7778  141D  00B8               	movwf	(strcat@cp+1)^(0+128)
  7779  141E  0833               	movf	strcat@to^(0+128),w
  7780  141F  00B7               	movwf	strcat@cp^(0+128)
  7781  1420                     l3719:	
  7782  1420  0837               	movf	strcat@cp^(0+128),w
  7783  1421  0086               	movwf	6
  7784  1422  0838               	movf	(strcat@cp+1)^(0+128),w
  7785  1423  0087               	movwf	7
  7786  1424  0801               	movf	1,w
  7787  1425  1903               	btfsc	3,2
  7788  1426  2C34               	goto	l3723
  7789  1427  3001               	movlw	1
  7790  1428  07B7               	addwf	strcat@cp^(0+128),f
  7791  1429  3000               	movlw	0
  7792  142A  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  7793  142B  2C20               	goto	l3719
  7794  142C                     l3721:	
  7795  142C  3001               	movlw	1
  7796  142D  07B7               	addwf	strcat@cp^(0+128),f
  7797  142E  3000               	movlw	0
  7798  142F  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  7799  1430  3001               	movlw	1
  7800  1431  07B5               	addwf	strcat@from^(0+128),f
  7801  1432  3000               	movlw	0
  7802  1433  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  7803  1434                     l3723:	
  7804  1434  0837               	movf	strcat@cp^(0+128),w
  7805  1435  0086               	movwf	6
  7806  1436  0838               	movf	(strcat@cp+1)^(0+128),w
  7807  1437  0087               	movwf	7
  7808  1438  0835               	movf	strcat@from^(0+128),w
  7809  1439  0084               	movwf	4
  7810  143A  0836               	movf	(strcat@from+1)^(0+128),w
  7811  143B  0085               	movwf	5
  7812  143C  0800               	movf	0,w	;code access
  7813  143D  3FC0               	movwi [0]fsr1
  7814  143E  0889               	movf	9,f
  7815  143F  1903               	btfsc	3,2
  7816  1440  0008               	return
  7817  1441  2C2C               	goto	l3721
  7818  1442                     __end_of_strcat:	
  7819                           ;	Return value of _strcat is never used
  7820                           
  7821                           
  7822                           	psect	text29
  7823  1274                     __ptext29:	
  7824 ;; *************** function _memset *****************
  7825 ;; Defined at:
  7826 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;  p1              2    0[BANK0 ] PTR void 
  7829 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7830 ;;  c               2    2[BANK0 ] int 
  7831 ;;  n               2    4[BANK0 ] unsigned int 
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;  p               2    6[BANK0 ] PTR unsigned char 
  7834 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  2    0[BANK0 ] PTR void 
  7837 ;; Registers used:
  7838 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7844 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7845 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7847 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7848 ;;Total ram usage:        8 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    7
  7851 ;; This function calls:
  7852 ;;		Nothing
  7853 ;; This function is called by:
  7854 ;;		_setMessage
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           
  7859                           ;psect for function _memset
  7860  1274                     _memset:	
  7861                           
  7862                           ;incstack = 0
  7863                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7864  1274  0020               	movlb	0	; select bank0
  7865  1275  0821               	movf	memset@p1+1,w
  7866  1276  00A7               	movwf	memset@p+1
  7867  1277  0820               	movf	memset@p1,w
  7868  1278  00A6               	movwf	memset@p
  7869  1279                     l3713:	
  7870  1279  3001               	movlw	1
  7871  127A  02A4               	subwf	memset@n,f
  7872  127B  3000               	movlw	0
  7873  127C  3BA5               	subwfb	memset@n+1,f
  7874  127D  0A24               	incf	memset@n,w
  7875  127E  1903               	btfsc	3,2
  7876  127F  0A25               	incf	memset@n+1,w
  7877  1280  1903               	btfsc	3,2
  7878  1281  0008               	return
  7879  1282  0826               	movf	memset@p,w
  7880  1283  0086               	movwf	6
  7881  1284  0827               	movf	memset@p+1,w
  7882  1285  0087               	movwf	7
  7883  1286  0822               	movf	memset@c,w
  7884  1287  0081               	movwf	1
  7885  1288  3001               	movlw	1
  7886  1289  07A6               	addwf	memset@p,f
  7887  128A  3000               	movlw	0
  7888  128B  3DA7               	addwfc	memset@p+1,f
  7889  128C  2A79               	goto	l3713
  7890  128D                     __end_of_memset:	
  7891                           ;	Return value of _memset is never used
  7892                           
  7893                           
  7894                           	psect	text30
  7895  0E18                     __ptext30:	
  7896 ;; *************** function _ftoa *****************
  7897 ;; Defined at:
  7898 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  7899 ;; Parameters:    Size  Location     Type
  7900 ;;  f               3    6[BANK1 ] float 
  7901 ;;  status          1    9[BANK1 ] PTR int 
  7902 ;;		 -> setMessage@status(2), 
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;  l               4   14[BANK1 ] unsigned long 
  7905 ;;  rem             4   10[BANK1 ] unsigned long 
  7906 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  7907 ;;		 -> ftoa@buf(17), 
  7908 ;; Return value:  Size  Location     Type
  7909 ;;                  1    wreg      PTR unsigned char 
  7910 ;; Registers used:
  7911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7917 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;Total ram usage:       14 bytes
  7922 ;; Hardware stack levels used:    1
  7923 ;; Hardware stack levels required when called:   10
  7924 ;; This function calls:
  7925 ;;		___ftge
  7926 ;;		___ftmul
  7927 ;;		___ftneg
  7928 ;;		___ftsub
  7929 ;;		___fttol
  7930 ;;		___lltoft
  7931 ;;		_sprintf
  7932 ;; This function is called by:
  7933 ;;		_setMessage
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           
  7938                           ;psect for function _ftoa
  7939  0E18                     _ftoa:	
  7940                           
  7941                           ;incstack = 0
  7942                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7943  0E18  3053               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  7944  0E19  0020               	movlb	0	; select bank0
  7945  0E1A  00EF               	movwf	??_ftoa
  7946  0E1B  086F               	movf	??_ftoa,w
  7947  0E1C  0021               	movlb	1	; select bank1
  7948  0E1D  00B2               	movwf	ftoa@cp^(0+128)
  7949  0E1E  0826               	movf	ftoa@f^(0+128),w
  7950  0E1F  0020               	movlb	0	; select bank0
  7951  0E20  00A0               	movwf	___ftge@ff1
  7952  0E21  0021               	movlb	1	; select bank1
  7953  0E22  0827               	movf	(ftoa@f+1)^(0+128),w
  7954  0E23  0020               	movlb	0	; select bank0
  7955  0E24  00A1               	movwf	___ftge@ff1+1
  7956  0E25  0021               	movlb	1	; select bank1
  7957  0E26  0828               	movf	(ftoa@f+2)^(0+128),w
  7958  0E27  0020               	movlb	0	; select bank0
  7959  0E28  00A2               	movwf	___ftge@ff1+2
  7960  0E29  3000               	movlw	0
  7961  0E2A  00A3               	movwf	___ftge@ff2
  7962  0E2B  3000               	movlw	0
  7963  0E2C  00A4               	movwf	___ftge@ff2+1
  7964  0E2D  3000               	movlw	0
  7965  0E2E  00A5               	movwf	___ftge@ff2+2
  7966  0E2F  3195  25BE  318E   	fcall	___ftge
  7967  0E32  1803               	btfsc	3,0
  7968  0E33  2E5E               	goto	l3735
  7969  0E34  302D               	movlw	45
  7970  0E35  0020               	movlb	0	; select bank0
  7971  0E36  00EF               	movwf	??_ftoa
  7972  0E37  0021               	movlb	1	; select bank1
  7973  0E38  0832               	movf	ftoa@cp^(0+128),w
  7974  0E39  0086               	movwf	6
  7975  0E3A  3001               	movlw	1	; select bank2/3
  7976  0E3B  0087               	movwf	7
  7977  0E3C  0020               	movlb	0	; select bank0
  7978  0E3D  086F               	movf	??_ftoa,w
  7979  0E3E  0081               	movwf	1
  7980  0E3F  3001               	movlw	1
  7981  0E40  00EF               	movwf	??_ftoa
  7982  0E41  086F               	movf	??_ftoa,w
  7983  0E42  0021               	movlb	1	; select bank1
  7984  0E43  07B2               	addwf	ftoa@cp^(0+128),f
  7985  0E44  0826               	movf	ftoa@f^(0+128),w
  7986  0E45  0020               	movlb	0	; select bank0
  7987  0E46  00D7               	movwf	___ftneg@f1
  7988  0E47  0021               	movlb	1	; select bank1
  7989  0E48  0827               	movf	(ftoa@f+1)^(0+128),w
  7990  0E49  0020               	movlb	0	; select bank0
  7991  0E4A  00D8               	movwf	___ftneg@f1+1
  7992  0E4B  0021               	movlb	1	; select bank1
  7993  0E4C  0828               	movf	(ftoa@f+2)^(0+128),w
  7994  0E4D  0020               	movlb	0	; select bank0
  7995  0E4E  00D9               	movwf	___ftneg@f1+2
  7996  0E4F  3191  21D4  318E   	fcall	___ftneg
  7997  0E52  0020               	movlb	0	; select bank0
  7998  0E53  0857               	movf	?___ftneg,w
  7999  0E54  0021               	movlb	1	; select bank1
  8000  0E55  00A6               	movwf	ftoa@f^(0+128)
  8001  0E56  0020               	movlb	0	; select bank0
  8002  0E57  0858               	movf	?___ftneg+1,w
  8003  0E58  0021               	movlb	1	; select bank1
  8004  0E59  00A7               	movwf	(ftoa@f+1)^(0+128)
  8005  0E5A  0020               	movlb	0	; select bank0
  8006  0E5B  0859               	movf	?___ftneg+2,w
  8007  0E5C  0021               	movlb	1	; select bank1
  8008  0E5D  00A8               	movwf	(ftoa@f+2)^(0+128)
  8009  0E5E                     l3735:	
  8010  0E5E  0021               	movlb	1	; select bank1
  8011  0E5F  0826               	movf	ftoa@f^(0+128),w
  8012  0E60  0020               	movlb	0	; select bank0
  8013  0E61  00E7               	movwf	___fttol@f1
  8014  0E62  0021               	movlb	1	; select bank1
  8015  0E63  0827               	movf	(ftoa@f+1)^(0+128),w
  8016  0E64  0020               	movlb	0	; select bank0
  8017  0E65  00E8               	movwf	___fttol@f1+1
  8018  0E66  0021               	movlb	1	; select bank1
  8019  0E67  0828               	movf	(ftoa@f+2)^(0+128),w
  8020  0E68  0020               	movlb	0	; select bank0
  8021  0E69  00E9               	movwf	___fttol@f1+2
  8022  0E6A  3189  21F0  318E   	fcall	___fttol
  8023  0E6D  0020               	movlb	0	; select bank0
  8024  0E6E  086A               	movf	?___fttol+3,w
  8025  0E6F  0021               	movlb	1	; select bank1
  8026  0E70  00B1               	movwf	(ftoa@l+3)^(0+128)
  8027  0E71  0020               	movlb	0	; select bank0
  8028  0E72  0869               	movf	?___fttol+2,w
  8029  0E73  0021               	movlb	1	; select bank1
  8030  0E74  00B0               	movwf	(ftoa@l+2)^(0+128)
  8031  0E75  0020               	movlb	0	; select bank0
  8032  0E76  0868               	movf	?___fttol+1,w
  8033  0E77  0021               	movlb	1	; select bank1
  8034  0E78  00AF               	movwf	(ftoa@l+1)^(0+128)
  8035  0E79  0020               	movlb	0	; select bank0
  8036  0E7A  0867               	movf	?___fttol,w
  8037  0E7B  0021               	movlb	1	; select bank1
  8038  0E7C  00AE               	movwf	ftoa@l^(0+128)
  8039  0E7D  0831               	movf	(ftoa@l+3)^(0+128),w
  8040  0E7E  0020               	movlb	0	; select bank0
  8041  0E7F  00AB               	movwf	___lltoft@c+3
  8042  0E80  0021               	movlb	1	; select bank1
  8043  0E81  0830               	movf	(ftoa@l+2)^(0+128),w
  8044  0E82  0020               	movlb	0	; select bank0
  8045  0E83  00AA               	movwf	___lltoft@c+2
  8046  0E84  0021               	movlb	1	; select bank1
  8047  0E85  082F               	movf	(ftoa@l+1)^(0+128),w
  8048  0E86  0020               	movlb	0	; select bank0
  8049  0E87  00A9               	movwf	___lltoft@c+1
  8050  0E88  0021               	movlb	1	; select bank1
  8051  0E89  082E               	movf	ftoa@l^(0+128),w
  8052  0E8A  0020               	movlb	0	; select bank0
  8053  0E8B  00A8               	movwf	___lltoft@c
  8054  0E8C  3194  246C  318E   	fcall	___lltoft
  8055  0E8F  0020               	movlb	0	; select bank0
  8056  0E90  0828               	movf	?___lltoft,w
  8057  0E91  00BB               	movwf	___ftsub@f2
  8058  0E92  0829               	movf	?___lltoft+1,w
  8059  0E93  00BC               	movwf	___ftsub@f2+1
  8060  0E94  082A               	movf	?___lltoft+2,w
  8061  0E95  00BD               	movwf	___ftsub@f2+2
  8062  0E96  0021               	movlb	1	; select bank1
  8063  0E97  0826               	movf	ftoa@f^(0+128),w
  8064  0E98  0020               	movlb	0	; select bank0
  8065  0E99  00BE               	movwf	___ftsub@f1
  8066  0E9A  0021               	movlb	1	; select bank1
  8067  0E9B  0827               	movf	(ftoa@f+1)^(0+128),w
  8068  0E9C  0020               	movlb	0	; select bank0
  8069  0E9D  00BF               	movwf	___ftsub@f1+1
  8070  0E9E  0021               	movlb	1	; select bank1
  8071  0E9F  0828               	movf	(ftoa@f+2)^(0+128),w
  8072  0EA0  0020               	movlb	0	; select bank0
  8073  0EA1  00C0               	movwf	___ftsub@f1+2
  8074  0EA2  3193  2330  318E   	fcall	___ftsub
  8075  0EA5  0020               	movlb	0	; select bank0
  8076  0EA6  083B               	movf	?___ftsub,w
  8077  0EA7  0021               	movlb	1	; select bank1
  8078  0EA8  00A6               	movwf	ftoa@f^(0+128)
  8079  0EA9  0020               	movlb	0	; select bank0
  8080  0EAA  083C               	movf	?___ftsub+1,w
  8081  0EAB  0021               	movlb	1	; select bank1
  8082  0EAC  00A7               	movwf	(ftoa@f+1)^(0+128)
  8083  0EAD  0020               	movlb	0	; select bank0
  8084  0EAE  083D               	movf	?___ftsub+2,w
  8085  0EAF  0021               	movlb	1	; select bank1
  8086  0EB0  00A8               	movwf	(ftoa@f+2)^(0+128)
  8087  0EB1  0826               	movf	ftoa@f^(0+128),w
  8088  0EB2  0020               	movlb	0	; select bank0
  8089  0EB3  00DA               	movwf	___ftmul@f2
  8090  0EB4  0021               	movlb	1	; select bank1
  8091  0EB5  0827               	movf	(ftoa@f+1)^(0+128),w
  8092  0EB6  0020               	movlb	0	; select bank0
  8093  0EB7  00DB               	movwf	___ftmul@f2+1
  8094  0EB8  0021               	movlb	1	; select bank1
  8095  0EB9  0828               	movf	(ftoa@f+2)^(0+128),w
  8096  0EBA  0020               	movlb	0	; select bank0
  8097  0EBB  00DC               	movwf	___ftmul@f2+2
  8098  0EBC  3024               	movlw	36
  8099  0EBD  00D7               	movwf	___ftmul@f1
  8100  0EBE  3074               	movlw	116
  8101  0EBF  00D8               	movwf	___ftmul@f1+1
  8102  0EC0  3049               	movlw	73
  8103  0EC1  00D9               	movwf	___ftmul@f1+2
  8104  0EC2  318B  23DE  318E   	fcall	___ftmul
  8105  0EC5  0020               	movlb	0	; select bank0
  8106  0EC6  0857               	movf	?___ftmul,w
  8107  0EC7  00E7               	movwf	___fttol@f1
  8108  0EC8  0858               	movf	?___ftmul+1,w
  8109  0EC9  00E8               	movwf	___fttol@f1+1
  8110  0ECA  0859               	movf	?___ftmul+2,w
  8111  0ECB  00E9               	movwf	___fttol@f1+2
  8112  0ECC  3189  21F0  318E   	fcall	___fttol
  8113  0ECF  0020               	movlb	0	; select bank0
  8114  0ED0  086A               	movf	?___fttol+3,w
  8115  0ED1  0021               	movlb	1	; select bank1
  8116  0ED2  00AD               	movwf	(ftoa@rem+3)^(0+128)
  8117  0ED3  0020               	movlb	0	; select bank0
  8118  0ED4  0869               	movf	?___fttol+2,w
  8119  0ED5  0021               	movlb	1	; select bank1
  8120  0ED6  00AC               	movwf	(ftoa@rem+2)^(0+128)
  8121  0ED7  0020               	movlb	0	; select bank0
  8122  0ED8  0868               	movf	?___fttol+1,w
  8123  0ED9  0021               	movlb	1	; select bank1
  8124  0EDA  00AB               	movwf	(ftoa@rem+1)^(0+128)
  8125  0EDB  0020               	movlb	0	; select bank0
  8126  0EDC  0867               	movf	?___fttol,w
  8127  0EDD  0021               	movlb	1	; select bank1
  8128  0EDE  00AA               	movwf	ftoa@rem^(0+128)
  8129  0EDF  3029               	movlw	low (STR_13| (0+32768))
  8130  0EE0  0020               	movlb	0	; select bank0
  8131  0EE1  00B8               	movwf	sprintf@f
  8132  0EE2  3098               	movlw	high (STR_13| (0+32768))
  8133  0EE3  00B9               	movwf	sprintf@f+1
  8134  0EE4  0021               	movlb	1	; select bank1
  8135  0EE5  0831               	movf	(ftoa@l+3)^(0+128),w
  8136  0EE6  0020               	movlb	0	; select bank0
  8137  0EE7  00BD               	movwf	?_sprintf+5
  8138  0EE8  0021               	movlb	1	; select bank1
  8139  0EE9  0830               	movf	(ftoa@l+2)^(0+128),w
  8140  0EEA  0020               	movlb	0	; select bank0
  8141  0EEB  00BC               	movwf	?_sprintf+4
  8142  0EEC  0021               	movlb	1	; select bank1
  8143  0EED  082F               	movf	(ftoa@l+1)^(0+128),w
  8144  0EEE  0020               	movlb	0	; select bank0
  8145  0EEF  00BB               	movwf	?_sprintf+3
  8146  0EF0  0021               	movlb	1	; select bank1
  8147  0EF1  082E               	movf	ftoa@l^(0+128),w
  8148  0EF2  0020               	movlb	0	; select bank0
  8149  0EF3  00BA               	movwf	?_sprintf+2
  8150  0EF4  0021               	movlb	1	; select bank1
  8151  0EF5  082D               	movf	(ftoa@rem+3)^(0+128),w
  8152  0EF6  0020               	movlb	0	; select bank0
  8153  0EF7  00C1               	movwf	?_sprintf+9
  8154  0EF8  0021               	movlb	1	; select bank1
  8155  0EF9  082C               	movf	(ftoa@rem+2)^(0+128),w
  8156  0EFA  0020               	movlb	0	; select bank0
  8157  0EFB  00C0               	movwf	?_sprintf+8
  8158  0EFC  0021               	movlb	1	; select bank1
  8159  0EFD  082B               	movf	(ftoa@rem+1)^(0+128),w
  8160  0EFE  0020               	movlb	0	; select bank0
  8161  0EFF  00BF               	movwf	?_sprintf+7
  8162  0F00  0021               	movlb	1	; select bank1
  8163  0F01  082A               	movf	ftoa@rem^(0+128),w
  8164  0F02  0020               	movlb	0	; select bank0
  8165  0F03  00BE               	movwf	?_sprintf+6
  8166  0F04  0021               	movlb	1	; select bank1
  8167  0F05  0832               	movf	ftoa@cp^(0+128),w
  8168  0F06  3182  22F6         	fcall	_sprintf
  8169  0F08  3053               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  8170  0F09  0008               	return
  8171  0F0A                     __end_of_ftoa:	
  8172                           
  8173                           	psect	text31
  8174  02F6                     __ptext31:	
  8175 ;; *************** function _sprintf *****************
  8176 ;; Defined at:
  8177 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;  sp              1    wreg     PTR unsigned char 
  8180 ;;		 -> ftoa@buf(17), 
  8181 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  8182 ;;		 -> STR_13(11), 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  8185 ;;		 -> ftoa@buf(17), 
  8186 ;;  val             4   42[BANK0 ] unsigned long 
  8187 ;;  tmpval          4    0        struct .
  8188 ;;  prec            2   49[BANK0 ] int 
  8189 ;;  width           2   47[BANK0 ] int 
  8190 ;;  cp              2    0        PTR const unsigned char 
  8191 ;;  len             2    0        unsigned int 
  8192 ;;  c               1   51[BANK0 ] unsigned char 
  8193 ;;  ap              1   41[BANK0 ] PTR void [1]
  8194 ;;		 -> ?_sprintf(2), 
  8195 ;;  flag            1   40[BANK0 ] unsigned char 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  2   24[BANK0 ] int 
  8198 ;; Registers used:
  8199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8205 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;Total ram usage:       28 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    8
  8212 ;; This function calls:
  8213 ;;		___lldiv
  8214 ;;		___llmod
  8215 ;;		___wmul
  8216 ;;		_isdigit
  8217 ;; This function is called by:
  8218 ;;		_ftoa
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           
  8223                           ;psect for function _sprintf
  8224  02F6                     _sprintf:	
  8225                           
  8226                           ;incstack = 0
  8227                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8228                           ;sprintf@sp stored from wreg
  8229  02F6  0020               	movlb	0	; select bank0
  8230  02F7  00CE               	movwf	sprintf@sp
  8231                           
  8232                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  8233  02F8  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  8234  02F9  00C2               	movwf	??_sprintf
  8235  02FA  0842               	movf	??_sprintf,w
  8236  02FB  00C9               	movwf	sprintf@ap
  8237  02FC                     l3613:	
  8238                           ;doprnt.c: 548: while((c = *f++)) {
  8239                           
  8240  02FC  0839               	movf	sprintf@f+1,w
  8241  02FD  00C3               	movwf	??_sprintf+1
  8242  02FE  0838               	movf	sprintf@f,w
  8243  02FF  00C2               	movwf	??_sprintf
  8244  0300  0AB8               	incf	sprintf@f,f
  8245  0301  1903               	skipnz
  8246  0302  0AB9               	incf	sprintf@f+1,f
  8247  0303  0842               	movf	??_sprintf,w
  8248  0304  0084               	movwf	4
  8249  0305  0843               	movf	??_sprintf+1,w
  8250  0306  0085               	movwf	5
  8251  0307  0800               	movf	0,w	;code access
  8252  0308  00C4               	movwf	??_sprintf+2
  8253  0309  0844               	movf	??_sprintf+2,w
  8254  030A  00D3               	movwf	sprintf@c
  8255  030B  0853               	movf	sprintf@c,w
  8256  030C  1903               	btfsc	3,2
  8257  030D  2CBD               	goto	l3615
  8258                           
  8259                           ;doprnt.c: 550: if(c != '%')
  8260  030E  3025               	movlw	37
  8261  030F  0653               	xorwf	sprintf@c,w
  8262  0310  1903               	btfsc	3,2
  8263  0311  2B1F               	goto	l3525
  8264                           
  8265                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  8266  0312  0853               	movf	sprintf@c,w
  8267  0313  00C2               	movwf	??_sprintf
  8268  0314  084E               	movf	sprintf@sp,w
  8269  0315  0086               	movwf	6
  8270  0316  3001               	movlw	1	; select bank2/3
  8271  0317  0087               	movwf	7
  8272  0318  0842               	movf	??_sprintf,w
  8273  0319  0081               	movwf	1
  8274  031A  3001               	movlw	1
  8275  031B  00C2               	movwf	??_sprintf
  8276  031C  0842               	movf	??_sprintf,w
  8277  031D  07CE               	addwf	sprintf@sp,f
  8278                           
  8279                           ;doprnt.c: 554: continue;
  8280  031E  2AFC               	goto	l3613
  8281  031F                     l3525:	
  8282                           
  8283                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  8284  031F  01CF               	clrf	sprintf@width
  8285  0320  01D0               	clrf	sprintf@width+1
  8286                           
  8287                           ;doprnt.c: 560: flag = 0;
  8288  0321  01C8               	clrf	sprintf@flag
  8289                           
  8290                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  8291  0322  0838               	movf	sprintf@f,w
  8292  0323  0084               	movwf	4
  8293  0324  0839               	movf	sprintf@f+1,w
  8294  0325  0085               	movwf	5
  8295  0326  0800               	movf	0,w	;code access
  8296  0327  3191  21EA  3182   	fcall	_isdigit
  8297  032A  1C03               	btfss	3,0
  8298  032B  2B5D               	goto	l3539
  8299                           
  8300                           ;doprnt.c: 610: width = 0;
  8301  032C  0020               	movlb	0	; select bank0
  8302  032D  01CF               	clrf	sprintf@width
  8303  032E  01D0               	clrf	sprintf@width+1
  8304  032F                     l3531:	
  8305                           ;doprnt.c: 611: do {
  8306                           
  8307                           
  8308                           ;doprnt.c: 612: width *= 10;
  8309  032F  300A               	movlw	10
  8310  0330  0020               	movlb	0	; select bank0
  8311  0331  00A0               	movwf	___wmul@multiplier
  8312  0332  3000               	movlw	0
  8313  0333  00A1               	movwf	___wmul@multiplier+1
  8314  0334  0850               	movf	sprintf@width+1,w
  8315  0335  00A3               	movwf	___wmul@multiplicand+1
  8316  0336  084F               	movf	sprintf@width,w
  8317  0337  00A2               	movwf	___wmul@multiplicand
  8318  0338  3192  22F8  3182   	fcall	___wmul
  8319  033B  0020               	movlb	0	; select bank0
  8320  033C  0821               	movf	?___wmul+1,w
  8321  033D  00D0               	movwf	sprintf@width+1
  8322  033E  0820               	movf	?___wmul,w
  8323  033F  00CF               	movwf	sprintf@width
  8324                           
  8325                           ;doprnt.c: 613: width += *f++ - '0';
  8326  0340  0838               	movf	sprintf@f,w
  8327  0341  0084               	movwf	4
  8328  0342  0839               	movf	sprintf@f+1,w
  8329  0343  0085               	movwf	5
  8330  0344  0800               	movf	0,w	;code access
  8331  0345  3ED0               	addlw	208
  8332  0346  00C2               	movwf	??_sprintf
  8333  0347  30FF               	movlw	255
  8334  0348  1803               	skipnc
  8335  0349  3000               	movlw	0
  8336  034A  00C3               	movwf	??_sprintf+1
  8337  034B  0842               	movf	??_sprintf,w
  8338  034C  07CF               	addwf	sprintf@width,f
  8339  034D  0843               	movf	??_sprintf+1,w
  8340  034E  3DD0               	addwfc	sprintf@width+1,f
  8341  034F  3001               	movlw	1
  8342  0350  07B8               	addwf	sprintf@f,f
  8343  0351  3000               	movlw	0
  8344  0352  3DB9               	addwfc	sprintf@f+1,f
  8345                           
  8346                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  8347  0353  0838               	movf	sprintf@f,w
  8348  0354  0084               	movwf	4
  8349  0355  0839               	movf	sprintf@f+1,w
  8350  0356  0085               	movwf	5
  8351  0357  0800               	movf	0,w	;code access
  8352  0358  3191  21EA  3182   	fcall	_isdigit
  8353  035B  1803               	btfsc	3,0
  8354  035C  2B2F               	goto	l3531
  8355  035D                     l3539:	
  8356                           
  8357                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  8358  035D  0020               	movlb	0	; select bank0
  8359  035E  0838               	movf	sprintf@f,w
  8360  035F  0084               	movwf	4
  8361  0360  0839               	movf	sprintf@f+1,w
  8362  0361  0085               	movwf	5
  8363  0362  0012               	moviw fsr0++
  8364  0363  3A2E               	xorlw	46
  8365  0364  1D03               	btfss	3,2
  8366  0365  2B9B               	goto	l3551
  8367                           
  8368                           ;doprnt.c: 625: f++;
  8369  0366  3001               	movlw	1
  8370  0367  07B8               	addwf	sprintf@f,f
  8371  0368  3000               	movlw	0
  8372  0369  3DB9               	addwfc	sprintf@f+1,f
  8373                           
  8374                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  8375  036A  01D1               	clrf	sprintf@prec
  8376  036B  01D2               	clrf	sprintf@prec+1
  8377  036C                     l3549:	
  8378                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  8379                           
  8380  036C  0838               	movf	sprintf@f,w
  8381  036D  0084               	movwf	4
  8382  036E  0839               	movf	sprintf@f+1,w
  8383  036F  0085               	movwf	5
  8384  0370  0800               	movf	0,w	;code access
  8385  0371  3191  21EA  3182   	fcall	_isdigit
  8386  0374  1C03               	btfss	3,0
  8387  0375  2BA6               	goto	l3557
  8388                           
  8389                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  8390  0376  0020               	movlb	0	; select bank0
  8391  0377  0838               	movf	sprintf@f,w
  8392  0378  0084               	movwf	4
  8393  0379  0839               	movf	sprintf@f+1,w
  8394  037A  0085               	movwf	5
  8395  037B  0800               	movf	0,w	;code access
  8396  037C  00C2               	movwf	??_sprintf
  8397  037D  01C3               	clrf	??_sprintf+1
  8398  037E  0852               	movf	sprintf@prec+1,w
  8399  037F  00A1               	movwf	___wmul@multiplier+1
  8400  0380  0851               	movf	sprintf@prec,w
  8401  0381  00A0               	movwf	___wmul@multiplier
  8402  0382  300A               	movlw	10
  8403  0383  00A2               	movwf	___wmul@multiplicand
  8404  0384  3000               	movlw	0
  8405  0385  00A3               	movwf	___wmul@multiplicand+1
  8406  0386  3192  22F8  3182   	fcall	___wmul
  8407  0389  0020               	movlb	0	; select bank0
  8408  038A  0842               	movf	??_sprintf,w
  8409  038B  0720               	addwf	?___wmul,w
  8410  038C  00C4               	movwf	??_sprintf+2
  8411  038D  0843               	movf	??_sprintf+1,w
  8412  038E  3D21               	addwfc	?___wmul+1,w
  8413  038F  00C5               	movwf	??_sprintf+3
  8414  0390  0844               	movf	??_sprintf+2,w
  8415  0391  3ED0               	addlw	208
  8416  0392  00D1               	movwf	sprintf@prec
  8417  0393  30FF               	movlw	255
  8418  0394  3D45               	addwfc	??_sprintf+3,w
  8419  0395  00D2               	movwf	sprintf@prec+1
  8420  0396  3001               	movlw	1
  8421  0397  07B8               	addwf	sprintf@f,f
  8422  0398  3000               	movlw	0
  8423  0399  3DB9               	addwfc	sprintf@f+1,f
  8424  039A  2B6C               	goto	l3549
  8425  039B                     l3551:	
  8426                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  8427                           
  8428                           
  8429                           ;doprnt.c: 645: prec = 0;
  8430  039B  0020               	movlb	0	; select bank0
  8431  039C  01D1               	clrf	sprintf@prec
  8432  039D  01D2               	clrf	sprintf@prec+1
  8433                           
  8434                           ;doprnt.c: 654: switch(c = *f++) {
  8435                           
  8436                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  8437  039E  2BA6               	goto	l3557
  8438  039F                     l463:	
  8439                           ;doprnt.c: 660: case 'l':
  8440                           
  8441                           ;doprnt.c: 657: goto alldone;
  8442                           
  8443                           ;doprnt.c: 656: case 0:
  8444                           
  8445                           
  8446                           ;doprnt.c: 662: flag |= 0x10;
  8447  039F  1648               	bsf	sprintf@flag,4
  8448                           
  8449                           ;doprnt.c: 663: goto loop;
  8450  03A0  2BA6               	goto	l3557
  8451  03A1                     l3553:	
  8452                           ;doprnt.c: 836: case 'u':
  8453                           
  8454                           ;doprnt.c: 832: continue;
  8455                           
  8456                           ;doprnt.c: 821: default:
  8457                           
  8458                           
  8459                           ;doprnt.c: 837: flag |= 0xC0;
  8460  03A1  30C0               	movlw	192
  8461  03A2  00C2               	movwf	??_sprintf
  8462  03A3  0842               	movf	??_sprintf,w
  8463  03A4  04C8               	iorwf	sprintf@flag,f
  8464                           
  8465                           ;doprnt.c: 841: }
  8466                           
  8467                           ;doprnt.c: 838: break;
  8468  03A5  2BBE               	goto	l466
  8469  03A6                     l3557:	
  8470  03A6  0020               	movlb	0	; select bank0
  8471  03A7  0839               	movf	sprintf@f+1,w
  8472  03A8  00C3               	movwf	??_sprintf+1
  8473  03A9  0838               	movf	sprintf@f,w
  8474  03AA  00C2               	movwf	??_sprintf
  8475  03AB  0AB8               	incf	sprintf@f,f
  8476  03AC  1903               	skipnz
  8477  03AD  0AB9               	incf	sprintf@f+1,f
  8478  03AE  0842               	movf	??_sprintf,w
  8479  03AF  0084               	movwf	4
  8480  03B0  0843               	movf	??_sprintf+1,w
  8481  03B1  0085               	movwf	5
  8482  03B2  0800               	movf	0,w	;code access
  8483  03B3  00D3               	movwf	sprintf@c
  8484                           
  8485                           ; Switch size 1, requested type "space"
  8486                           ; Number of cases is 3, Range of values is 0 to 117
  8487                           ; switch strategies available:
  8488                           ; Name         Instructions Cycles
  8489                           ; simple_byte           10     6 (average)
  8490                           ; direct_byte          242     6 (fixed)
  8491                           ; jumptable            260     6 (fixed)
  8492                           ;	Chosen strategy is simple_byte
  8493  03B4  3A00               	xorlw	0	; case 0
  8494  03B5  1903               	skipnz
  8495  03B6  2CBD               	goto	l3615
  8496  03B7  3A6C               	xorlw	108	; case 108
  8497  03B8  1903               	skipnz
  8498  03B9  2B9F               	goto	l463
  8499  03BA  3A19               	xorlw	25	; case 117
  8500  03BB  1903               	skipnz
  8501  03BC  2BA1               	goto	l3553
  8502  03BD  2AFC               	goto	l3613
  8503  03BE                     l466:	
  8504                           
  8505                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  8506  03BE  1E48               	btfss	sprintf@flag,4
  8507  03BF  2BCD               	goto	l3563
  8508                           
  8509                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  8510  03C0  0849               	movf	sprintf@ap,w
  8511  03C1  0086               	movwf	6
  8512  03C2  0187               	clrf	7
  8513  03C3  3F40               	moviw [0]fsr1
  8514  03C4  00CA               	movwf	sprintf@val
  8515  03C5  3F41               	moviw [1]fsr1
  8516  03C6  00CB               	movwf	sprintf@val+1
  8517  03C7  3F42               	moviw [2]fsr1
  8518  03C8  00CC               	movwf	sprintf@val+2
  8519  03C9  3F43               	moviw [3]fsr1
  8520  03CA  00CD               	movwf	sprintf@val+3
  8521  03CB  3004               	movlw	4
  8522  03CC  2BDB               	goto	L3
  8523  03CD                     l3563:	
  8524                           
  8525                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  8526  03CD  0849               	movf	sprintf@ap,w
  8527  03CE  0086               	movwf	6
  8528  03CF  0187               	clrf	7
  8529  03D0  3F40               	moviw [0]fsr1
  8530  03D1  00C2               	movwf	??_sprintf
  8531  03D2  3F41               	moviw [1]fsr1
  8532  03D3  00C3               	movwf	??_sprintf+1
  8533  03D4  0842               	movf	??_sprintf,w
  8534  03D5  00CA               	movwf	sprintf@val
  8535  03D6  0843               	movf	??_sprintf+1,w
  8536  03D7  00CB               	movwf	sprintf@val+1
  8537  03D8  01CC               	clrf	sprintf@val+2
  8538  03D9  01CD               	clrf	sprintf@val+3
  8539  03DA  3002               	movlw	2
  8540  03DB                     L3:	
  8541  03DB  00C2               	movwf	??_sprintf
  8542  03DC  0842               	movf	??_sprintf,w
  8543  03DD  07C9               	addwf	sprintf@ap,f
  8544                           
  8545                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  8546  03DE  0851               	movf	sprintf@prec,w
  8547  03DF  0452               	iorwf	sprintf@prec+1,w
  8548  03E0  1D03               	btfss	3,2
  8549  03E1  2BEC               	goto	l3573
  8550  03E2  084D               	movf	sprintf@val+3,w
  8551  03E3  044C               	iorwf	sprintf@val+2,w
  8552  03E4  044B               	iorwf	sprintf@val+1,w
  8553  03E5  044A               	iorwf	sprintf@val,w
  8554  03E6  1D03               	skipz
  8555  03E7  2BEC               	goto	l3573
  8556                           
  8557                           ;doprnt.c: 1310: prec++;
  8558  03E8  3001               	movlw	1
  8559  03E9  07D1               	addwf	sprintf@prec,f
  8560  03EA  3000               	movlw	0
  8561  03EB  3DD2               	addwfc	sprintf@prec+1,f
  8562  03EC                     l3573:	
  8563                           
  8564                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8565  03EC  01D3               	clrf	sprintf@c
  8566  03ED  0AD3               	incf	sprintf@c,f
  8567  03EE  300A               	movlw	10
  8568  03EF  0653               	xorwf	sprintf@c,w
  8569  03F0  1903               	btfsc	3,2
  8570  03F1  2C1F               	goto	l3585
  8571  03F2                     l3579:	
  8572                           
  8573                           ;doprnt.c: 1325: if(val < dpowers[c])
  8574  03F2  0853               	movf	sprintf@c,w
  8575  03F3  00C2               	movwf	??_sprintf
  8576  03F4  01C3               	clrf	??_sprintf+1
  8577  03F5  35C2               	lslf	??_sprintf,f
  8578  03F6  0DC3               	rlf	??_sprintf+1,f
  8579  03F7  35C2               	lslf	??_sprintf,f
  8580  03F8  0DC3               	rlf	??_sprintf+1,f
  8581  03F9  3000               	movlw	low (_dpowers| (0+32768))
  8582  03FA  0742               	addwf	??_sprintf,w
  8583  03FB  0084               	movwf	4
  8584  03FC  3098               	movlw	high (_dpowers| (0+32768))
  8585  03FD  3D43               	addwfc	??_sprintf+1,w
  8586  03FE  0085               	movwf	5
  8587  03FF  3F00               	moviw [0]fsr0
  8588  0400  00C4               	movwf	??_sprintf+2
  8589  0401  3F01               	moviw [1]fsr0
  8590  0402  00C5               	movwf	??_sprintf+3
  8591  0403  3F02               	moviw [2]fsr0
  8592  0404  00C6               	movwf	??_sprintf+4
  8593  0405  3F03               	moviw [3]fsr0
  8594  0406  00C7               	movwf	??_sprintf+5
  8595  0407  0847               	movf	??_sprintf+5,w
  8596  0408  024D               	subwf	sprintf@val+3,w
  8597  0409  1D03               	skipz
  8598  040A  2C15               	goto	u3955
  8599  040B  0846               	movf	??_sprintf+4,w
  8600  040C  024C               	subwf	sprintf@val+2,w
  8601  040D  1D03               	skipz
  8602  040E  2C15               	goto	u3955
  8603  040F  0845               	movf	??_sprintf+3,w
  8604  0410  024B               	subwf	sprintf@val+1,w
  8605  0411  1D03               	skipz
  8606  0412  2C15               	goto	u3955
  8607  0413  0844               	movf	??_sprintf+2,w
  8608  0414  024A               	subwf	sprintf@val,w
  8609  0415                     u3955:	
  8610  0415  1C03               	btfss	3,0
  8611  0416  2C1F               	goto	l3585
  8612                           
  8613                           ;doprnt.c: 1326: break;
  8614  0417  3001               	movlw	1
  8615  0418  00C2               	movwf	??_sprintf
  8616  0419  0842               	movf	??_sprintf,w
  8617  041A  07D3               	addwf	sprintf@c,f
  8618  041B  300A               	movlw	10
  8619  041C  0653               	xorwf	sprintf@c,w
  8620  041D  1D03               	btfss	3,2
  8621  041E  2BF2               	goto	l3579
  8622  041F                     l3585:	
  8623                           
  8624                           ;doprnt.c: 1358: if(c < prec)
  8625  041F  0852               	movf	sprintf@prec+1,w
  8626  0420  3A80               	xorlw	128
  8627  0421  3C80               	sublw	128
  8628  0422  1D03               	skipz
  8629  0423  2C26               	goto	u3975
  8630  0424  0851               	movf	sprintf@prec,w
  8631  0425  0253               	subwf	sprintf@c,w
  8632  0426                     u3975:	
  8633  0426  1803               	skipnc
  8634  0427  2C2E               	goto	l3589
  8635                           
  8636                           ;doprnt.c: 1359: c = prec;
  8637  0428  0020               	movlb	0	; select bank0
  8638  0429  0851               	movf	sprintf@prec,w
  8639  042A  00C2               	movwf	??_sprintf
  8640  042B  0842               	movf	??_sprintf,w
  8641  042C  00D3               	movwf	sprintf@c
  8642  042D  2C42               	goto	l474
  8643  042E                     l3589:	
  8644                           
  8645                           ;doprnt.c: 1360: else if(prec < c)
  8646  042E  0020               	movlb	0	; select bank0
  8647  042F  0852               	movf	sprintf@prec+1,w
  8648  0430  3A80               	xorlw	128
  8649  0431  00C2               	movwf	??_sprintf
  8650  0432  3080               	movlw	128
  8651  0433  0242               	subwf	??_sprintf,w
  8652  0434  1D03               	skipz
  8653  0435  2C38               	goto	u3985
  8654  0436  0853               	movf	sprintf@c,w
  8655  0437  0251               	subwf	sprintf@prec,w
  8656  0438                     u3985:	
  8657  0438  1803               	skipnc
  8658  0439  2C42               	goto	l474
  8659                           
  8660                           ;doprnt.c: 1361: prec = c;
  8661  043A  0020               	movlb	0	; select bank0
  8662  043B  0853               	movf	sprintf@c,w
  8663  043C  00C2               	movwf	??_sprintf
  8664  043D  01C3               	clrf	??_sprintf+1
  8665  043E  0842               	movf	??_sprintf,w
  8666  043F  00D1               	movwf	sprintf@prec
  8667  0440  0843               	movf	??_sprintf+1,w
  8668  0441  00D2               	movwf	sprintf@prec+1
  8669  0442                     l474:	
  8670                           
  8671                           ;doprnt.c: 1400: if(width > c)
  8672  0442  0020               	movlb	0	; select bank0
  8673  0443  0850               	movf	sprintf@width+1,w
  8674  0444  3A80               	xorlw	128
  8675  0445  3C80               	sublw	128
  8676  0446  1D03               	skipz
  8677  0447  2C4A               	goto	u3995
  8678  0448  084F               	movf	sprintf@width,w
  8679  0449  0253               	subwf	sprintf@c,w
  8680  044A                     u3995:	
  8681  044A  1803               	skipnc
  8682  044B  2C55               	goto	l3595
  8683                           
  8684                           ;doprnt.c: 1401: width -= c;
  8685  044C  0020               	movlb	0	; select bank0
  8686  044D  0853               	movf	sprintf@c,w
  8687  044E  00C2               	movwf	??_sprintf
  8688  044F  01C3               	clrf	??_sprintf+1
  8689  0450  0842               	movf	??_sprintf,w
  8690  0451  02CF               	subwf	sprintf@width,f
  8691  0452  0843               	movf	??_sprintf+1,w
  8692  0453  3BD0               	subwfb	sprintf@width+1,f
  8693  0454  2C58               	goto	l3597
  8694  0455                     l3595:	
  8695                           
  8696                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  8697  0455  0020               	movlb	0	; select bank0
  8698  0456  01CF               	clrf	sprintf@width
  8699  0457  01D0               	clrf	sprintf@width+1
  8700  0458                     l3597:	
  8701                           
  8702                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  8703  0458  084F               	movf	sprintf@width,w
  8704  0459  0450               	iorwf	sprintf@width+1,w
  8705  045A  1903               	btfsc	3,2
  8706  045B  2CB2               	goto	l3611
  8707                           
  8708                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  8709                           
  8710                           ;doprnt.c: 1448: do
  8711  045C  3020               	movlw	32
  8712  045D  00C2               	movwf	??_sprintf
  8713  045E  084E               	movf	sprintf@sp,w
  8714  045F  0086               	movwf	6
  8715  0460  3001               	movlw	1	; select bank2/3
  8716  0461  0087               	movwf	7
  8717  0462  0842               	movf	??_sprintf,w
  8718  0463  0081               	movwf	1
  8719  0464  3001               	movlw	1
  8720  0465  00C2               	movwf	??_sprintf
  8721  0466  0842               	movf	??_sprintf,w
  8722  0467  07CE               	addwf	sprintf@sp,f
  8723                           
  8724                           ;doprnt.c: 1450: while(--width);
  8725  0468  30FF               	movlw	255
  8726  0469  07CF               	addwf	sprintf@width,f
  8727  046A  30FF               	movlw	255
  8728  046B  3DD0               	addwfc	sprintf@width+1,f
  8729  046C  2C58               	goto	l3597
  8730  046D                     l3605:	
  8731                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  8732                           
  8733                           
  8734                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  8735  046D  3000               	movlw	0
  8736  046E  00B1               	movwf	___llmod@divisor+3
  8737  046F  3000               	movlw	0
  8738  0470  00B0               	movwf	___llmod@divisor+2
  8739  0471  3000               	movlw	0
  8740  0472  00AF               	movwf	___llmod@divisor+1
  8741  0473  300A               	movlw	10
  8742  0474  00AE               	movwf	___llmod@divisor
  8743  0475  0852               	movf	sprintf@prec+1,w
  8744  0476  0085               	movwf	5
  8745  0477  0851               	movf	sprintf@prec,w
  8746  0478  0084               	movwf	4
  8747  0479  3584               	lslf	4,f
  8748  047A  0D85               	rlf	5,f
  8749  047B  3584               	lslf	4,f
  8750  047C  0D85               	rlf	5,f
  8751  047D  3000               	movlw	low (_dpowers| (0+32768))
  8752  047E  0784               	addwf	4,f
  8753  047F  3098               	movlw	high (_dpowers| (0+32768))
  8754  0480  3D85               	addwfc	5,f
  8755  0481  3F00               	moviw [0]fsr0
  8756  0482  00A0               	movwf	___lldiv@divisor
  8757  0483  3F01               	moviw [1]fsr0
  8758  0484  00A1               	movwf	___lldiv@divisor+1
  8759  0485  3F02               	moviw [2]fsr0
  8760  0486  00A2               	movwf	___lldiv@divisor+2
  8761  0487  3F03               	moviw [3]fsr0
  8762  0488  00A3               	movwf	___lldiv@divisor+3
  8763  0489  084D               	movf	sprintf@val+3,w
  8764  048A  00A7               	movwf	___lldiv@dividend+3
  8765  048B  084C               	movf	sprintf@val+2,w
  8766  048C  00A6               	movwf	___lldiv@dividend+2
  8767  048D  084B               	movf	sprintf@val+1,w
  8768  048E  00A5               	movwf	___lldiv@dividend+1
  8769  048F  084A               	movf	sprintf@val,w
  8770  0490  00A4               	movwf	___lldiv@dividend
  8771  0491  3188  20CA  3182   	fcall	___lldiv
  8772  0494  0020               	movlb	0	; select bank0
  8773  0495  0823               	movf	?___lldiv+3,w
  8774  0496  00B5               	movwf	___llmod@dividend+3
  8775  0497  0822               	movf	?___lldiv+2,w
  8776  0498  00B4               	movwf	___llmod@dividend+2
  8777  0499  0821               	movf	?___lldiv+1,w
  8778  049A  00B3               	movwf	___llmod@dividend+1
  8779  049B  0820               	movf	?___lldiv,w
  8780  049C  00B2               	movwf	___llmod@dividend
  8781  049D  3196  26F1  3182   	fcall	___llmod
  8782  04A0  0020               	movlb	0	; select bank0
  8783  04A1  082E               	movf	?___llmod,w
  8784  04A2  3E30               	addlw	48
  8785  04A3  00C2               	movwf	??_sprintf
  8786  04A4  0842               	movf	??_sprintf,w
  8787  04A5  00D3               	movwf	sprintf@c
  8788                           
  8789                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  8790  04A6  0853               	movf	sprintf@c,w
  8791  04A7  00C2               	movwf	??_sprintf
  8792  04A8  084E               	movf	sprintf@sp,w
  8793  04A9  0086               	movwf	6
  8794  04AA  3001               	movlw	1	; select bank2/3
  8795  04AB  0087               	movwf	7
  8796  04AC  0842               	movf	??_sprintf,w
  8797  04AD  0081               	movwf	1
  8798  04AE  3001               	movlw	1
  8799  04AF  00C2               	movwf	??_sprintf
  8800  04B0  0842               	movf	??_sprintf,w
  8801  04B1  07CE               	addwf	sprintf@sp,f
  8802  04B2                     l3611:	
  8803  04B2  30FF               	movlw	255
  8804  04B3  07D1               	addwf	sprintf@prec,f
  8805  04B4  30FF               	movlw	255
  8806  04B5  3DD2               	addwfc	sprintf@prec+1,f
  8807  04B6  0A51               	incf	sprintf@prec,w
  8808  04B7  1D03               	skipz
  8809  04B8  2C6D               	goto	l3605
  8810  04B9  0A52               	incf	sprintf@prec+1,w
  8811  04BA  1903               	btfsc	3,2
  8812  04BB  2AFC               	goto	l3613
  8813  04BC  2C6D               	goto	l3605
  8814  04BD                     l3615:	
  8815                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  8816                           
  8817                           
  8818                           ;doprnt.c: 1557: *sp = 0;
  8819  04BD  084E               	movf	sprintf@sp,w
  8820  04BE  0086               	movwf	6
  8821  04BF  3001               	movlw	1	; select bank2/3
  8822  04C0  0087               	movwf	7
  8823  04C1  0181               	clrf	1
  8824  04C2  0008               	return
  8825  04C3                     __end_of_sprintf:	
  8826                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  8827                           
  8828                           
  8829                           	psect	text32
  8830  11EA                     __ptext32:	
  8831 ;; *************** function _isdigit *****************
  8832 ;; Defined at:
  8833 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  8834 ;; Parameters:    Size  Location     Type
  8835 ;;  c               1    wreg     unsigned char 
  8836 ;; Auto vars:     Size  Location     Type
  8837 ;;  c               1    1[BANK0 ] unsigned char 
  8838 ;; Return value:  Size  Location     Type
  8839 ;;		None               void
  8840 ;; Registers used:
  8841 ;;		wreg, status,2, status,0
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;Total ram usage:        2 bytes
  8852 ;; Hardware stack levels used:    1
  8853 ;; Hardware stack levels required when called:    7
  8854 ;; This function calls:
  8855 ;;		Nothing
  8856 ;; This function is called by:
  8857 ;;		_sprintf
  8858 ;;		_strtod
  8859 ;; This function uses a non-reentrant model
  8860 ;;
  8861                           
  8862                           
  8863                           ;psect for function _isdigit
  8864  11EA                     _isdigit:	
  8865                           
  8866                           ;incstack = 0
  8867                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8868                           ;isdigit@c stored from wreg
  8869  11EA  0020               	movlb	0	; select bank0
  8870  11EB  00A1               	movwf	isdigit@c
  8871  11EC  01A0               	clrf	_isdigit$1849
  8872  11ED  303A               	movlw	58
  8873  11EE  0221               	subwf	isdigit@c,w
  8874  11EF  1803               	skipnc
  8875  11F0  29F7               	goto	l2851
  8876  11F1  3030               	movlw	48
  8877  11F2  0221               	subwf	isdigit@c,w
  8878  11F3  1C03               	skipc
  8879  11F4  29F7               	goto	l2851
  8880  11F5  01A0               	clrf	_isdigit$1849
  8881  11F6  0AA0               	incf	_isdigit$1849,f
  8882  11F7                     l2851:	
  8883  11F7  0C20               	rrf	_isdigit$1849,w
  8884  11F8  0008               	return
  8885  11F9                     __end_of_isdigit:	
  8886                           
  8887                           	psect	text33
  8888  12F8                     __ptext33:	
  8889 ;; *************** function ___wmul *****************
  8890 ;; Defined at:
  8891 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8894 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;  product         2    4[BANK0 ] unsigned int 
  8897 ;; Return value:  Size  Location     Type
  8898 ;;                  2    0[BANK0 ] unsigned int 
  8899 ;; Registers used:
  8900 ;;		wreg, status,2, status,0
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8906 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;Total ram usage:        6 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; Hardware stack levels required when called:    7
  8913 ;; This function calls:
  8914 ;;		Nothing
  8915 ;; This function is called by:
  8916 ;;		_sprintf
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function ___wmul
  8922  12F8                     ___wmul:	
  8923                           
  8924                           ;incstack = 0
  8925                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8926  12F8  0020               	movlb	0	; select bank0
  8927  12F9  01A4               	clrf	___wmul@product
  8928  12FA  01A5               	clrf	___wmul@product+1
  8929  12FB                     l3141:	
  8930  12FB  1C20               	btfss	___wmul@multiplier,0
  8931  12FC  2B01               	goto	l489
  8932  12FD  0822               	movf	___wmul@multiplicand,w
  8933  12FE  07A4               	addwf	___wmul@product,f
  8934  12FF  0823               	movf	___wmul@multiplicand+1,w
  8935  1300  3DA5               	addwfc	___wmul@product+1,f
  8936  1301                     l489:	
  8937  1301  3001               	movlw	1
  8938  1302                     u3055:	
  8939  1302  35A2               	lslf	___wmul@multiplicand,f
  8940  1303  0DA3               	rlf	___wmul@multiplicand+1,f
  8941  1304  0B89               	decfsz	9,f
  8942  1305  2B02               	goto	u3055
  8943  1306  3001               	movlw	1
  8944  1307                     u3065:	
  8945  1307  36A1               	lsrf	___wmul@multiplier+1,f
  8946  1308  0CA0               	rrf	___wmul@multiplier,f
  8947  1309  0B89               	decfsz	9,f
  8948  130A  2B07               	goto	u3065
  8949  130B  0820               	movf	___wmul@multiplier,w
  8950  130C  0421               	iorwf	___wmul@multiplier+1,w
  8951  130D  1D03               	btfss	3,2
  8952  130E  2AFB               	goto	l3141
  8953  130F  0825               	movf	___wmul@product+1,w
  8954  1310  00A1               	movwf	?___wmul+1
  8955  1311  0824               	movf	___wmul@product,w
  8956  1312  00A0               	movwf	?___wmul
  8957  1313  0008               	return
  8958  1314                     __end_of___wmul:	
  8959                           
  8960                           	psect	text34
  8961  16F1                     __ptext34:	
  8962 ;; *************** function ___llmod *****************
  8963 ;; Defined at:
  8964 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  8965 ;; Parameters:    Size  Location     Type
  8966 ;;  divisor         4   14[BANK0 ] unsigned long 
  8967 ;;  dividend        4   18[BANK0 ] unsigned long 
  8968 ;; Auto vars:     Size  Location     Type
  8969 ;;  counter         1   23[BANK0 ] unsigned char 
  8970 ;; Return value:  Size  Location     Type
  8971 ;;                  4   14[BANK0 ] unsigned long 
  8972 ;; Registers used:
  8973 ;;		wreg, status,2, status,0
  8974 ;; Tracked objects:
  8975 ;;		On entry : 0/0
  8976 ;;		On exit  : 0/0
  8977 ;;		Unchanged: 0/0
  8978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8979 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8980 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8982 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8983 ;;Total ram usage:       10 bytes
  8984 ;; Hardware stack levels used:    1
  8985 ;; Hardware stack levels required when called:    7
  8986 ;; This function calls:
  8987 ;;		Nothing
  8988 ;; This function is called by:
  8989 ;;		_sprintf
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           
  8994                           ;psect for function ___llmod
  8995  16F1                     ___llmod:	
  8996                           
  8997                           ;incstack = 0
  8998                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  8999  16F1  0020               	movlb	0	; select bank0
  9000  16F2  0831               	movf	___llmod@divisor+3,w
  9001  16F3  0430               	iorwf	___llmod@divisor+2,w
  9002  16F4  042F               	iorwf	___llmod@divisor+1,w
  9003  16F5  042E               	iorwf	___llmod@divisor,w
  9004  16F6  1903               	skipnz
  9005  16F7  2F2B               	goto	l3263
  9006  16F8  01B7               	clrf	___llmod@counter
  9007  16F9  0AB7               	incf	___llmod@counter,f
  9008  16FA                     l3253:	
  9009  16FA  1BB1               	btfsc	___llmod@divisor+3,7
  9010  16FB  2F08               	goto	l3255
  9011  16FC  3001               	movlw	1
  9012  16FD                     u3395:	
  9013  16FD  35AE               	lslf	___llmod@divisor,f
  9014  16FE  0DAF               	rlf	___llmod@divisor+1,f
  9015  16FF  0DB0               	rlf	___llmod@divisor+2,f
  9016  1700  0DB1               	rlf	___llmod@divisor+3,f
  9017  1701  0B89               	decfsz	9,f
  9018  1702  2EFD               	goto	u3395
  9019  1703  3001               	movlw	1
  9020  1704  00B6               	movwf	??___llmod
  9021  1705  0836               	movf	??___llmod,w
  9022  1706  07B7               	addwf	___llmod@counter,f
  9023  1707  2EFA               	goto	l3253
  9024  1708                     l3255:	
  9025  1708  0831               	movf	___llmod@divisor+3,w
  9026  1709  0235               	subwf	___llmod@dividend+3,w
  9027  170A  1D03               	skipz
  9028  170B  2F16               	goto	u3415
  9029  170C  0830               	movf	___llmod@divisor+2,w
  9030  170D  0234               	subwf	___llmod@dividend+2,w
  9031  170E  1D03               	skipz
  9032  170F  2F16               	goto	u3415
  9033  1710  082F               	movf	___llmod@divisor+1,w
  9034  1711  0233               	subwf	___llmod@dividend+1,w
  9035  1712  1D03               	skipz
  9036  1713  2F16               	goto	u3415
  9037  1714  082E               	movf	___llmod@divisor,w
  9038  1715  0232               	subwf	___llmod@dividend,w
  9039  1716                     u3415:	
  9040  1716  1C03               	skipc
  9041  1717  2F20               	goto	l3259
  9042  1718  082E               	movf	___llmod@divisor,w
  9043  1719  02B2               	subwf	___llmod@dividend,f
  9044  171A  082F               	movf	___llmod@divisor+1,w
  9045  171B  3BB3               	subwfb	___llmod@dividend+1,f
  9046  171C  0830               	movf	___llmod@divisor+2,w
  9047  171D  3BB4               	subwfb	___llmod@dividend+2,f
  9048  171E  0831               	movf	___llmod@divisor+3,w
  9049  171F  3BB5               	subwfb	___llmod@dividend+3,f
  9050  1720                     l3259:	
  9051  1720  3001               	movlw	1
  9052  1721                     u3425:	
  9053  1721  36B1               	lsrf	___llmod@divisor+3,f
  9054  1722  0CB0               	rrf	___llmod@divisor+2,f
  9055  1723  0CAF               	rrf	___llmod@divisor+1,f
  9056  1724  0CAE               	rrf	___llmod@divisor,f
  9057  1725  0B89               	decfsz	9,f
  9058  1726  2F21               	goto	u3425
  9059  1727  3001               	movlw	1
  9060  1728  02B7               	subwf	___llmod@counter,f
  9061  1729  1D03               	btfss	3,2
  9062  172A  2F08               	goto	l3255
  9063  172B                     l3263:	
  9064  172B  0835               	movf	___llmod@dividend+3,w
  9065  172C  00B1               	movwf	?___llmod+3
  9066  172D  0834               	movf	___llmod@dividend+2,w
  9067  172E  00B0               	movwf	?___llmod+2
  9068  172F  0833               	movf	___llmod@dividend+1,w
  9069  1730  00AF               	movwf	?___llmod+1
  9070  1731  0832               	movf	___llmod@dividend,w
  9071  1732  00AE               	movwf	?___llmod
  9072  1733  0008               	return
  9073  1734                     __end_of___llmod:	
  9074                           
  9075                           	psect	text35
  9076  08CA                     __ptext35:	
  9077 ;; *************** function ___lldiv *****************
  9078 ;; Defined at:
  9079 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  9080 ;; Parameters:    Size  Location     Type
  9081 ;;  divisor         4    0[BANK0 ] unsigned long 
  9082 ;;  dividend        4    4[BANK0 ] unsigned long 
  9083 ;; Auto vars:     Size  Location     Type
  9084 ;;  quotient        4    9[BANK0 ] unsigned long 
  9085 ;;  counter         1   13[BANK0 ] unsigned char 
  9086 ;; Return value:  Size  Location     Type
  9087 ;;                  4    0[BANK0 ] unsigned long 
  9088 ;; Registers used:
  9089 ;;		wreg, status,2, status,0
  9090 ;; Tracked objects:
  9091 ;;		On entry : 0/0
  9092 ;;		On exit  : 0/0
  9093 ;;		Unchanged: 0/0
  9094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9095 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9096 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9097 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9098 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9099 ;;Total ram usage:       14 bytes
  9100 ;; Hardware stack levels used:    1
  9101 ;; Hardware stack levels required when called:    7
  9102 ;; This function calls:
  9103 ;;		Nothing
  9104 ;; This function is called by:
  9105 ;;		_sprintf
  9106 ;; This function uses a non-reentrant model
  9107 ;;
  9108                           
  9109                           
  9110                           ;psect for function ___lldiv
  9111  08CA                     ___lldiv:	
  9112                           
  9113                           ;incstack = 0
  9114                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9115  08CA  3000               	movlw	0
  9116  08CB  0020               	movlb	0	; select bank0
  9117  08CC  00AC               	movwf	___lldiv@quotient+3
  9118  08CD  3000               	movlw	0
  9119  08CE  00AB               	movwf	___lldiv@quotient+2
  9120  08CF  3000               	movlw	0
  9121  08D0  00AA               	movwf	___lldiv@quotient+1
  9122  08D1  3000               	movlw	0
  9123  08D2  00A9               	movwf	___lldiv@quotient
  9124  08D3  0823               	movf	___lldiv@divisor+3,w
  9125  08D4  0422               	iorwf	___lldiv@divisor+2,w
  9126  08D5  0421               	iorwf	___lldiv@divisor+1,w
  9127  08D6  0420               	iorwf	___lldiv@divisor,w
  9128  08D7  1903               	skipnz
  9129  08D8  2914               	goto	l3173
  9130  08D9  01AD               	clrf	___lldiv@counter
  9131  08DA  0AAD               	incf	___lldiv@counter,f
  9132  08DB                     l3159:	
  9133  08DB  1BA3               	btfsc	___lldiv@divisor+3,7
  9134  08DC  28E9               	goto	l3161
  9135  08DD  3001               	movlw	1
  9136  08DE                     u3095:	
  9137  08DE  35A0               	lslf	___lldiv@divisor,f
  9138  08DF  0DA1               	rlf	___lldiv@divisor+1,f
  9139  08E0  0DA2               	rlf	___lldiv@divisor+2,f
  9140  08E1  0DA3               	rlf	___lldiv@divisor+3,f
  9141  08E2  0B89               	decfsz	9,f
  9142  08E3  28DE               	goto	u3095
  9143  08E4  3001               	movlw	1
  9144  08E5  00A8               	movwf	??___lldiv
  9145  08E6  0828               	movf	??___lldiv,w
  9146  08E7  07AD               	addwf	___lldiv@counter,f
  9147  08E8  28DB               	goto	l3159
  9148  08E9                     l3161:	
  9149  08E9  3001               	movlw	1
  9150  08EA                     u3115:	
  9151  08EA  35A9               	lslf	___lldiv@quotient,f
  9152  08EB  0DAA               	rlf	___lldiv@quotient+1,f
  9153  08EC  0DAB               	rlf	___lldiv@quotient+2,f
  9154  08ED  0DAC               	rlf	___lldiv@quotient+3,f
  9155  08EE  0B89               	decfsz	9,f
  9156  08EF  28EA               	goto	u3115
  9157  08F0  0823               	movf	___lldiv@divisor+3,w
  9158  08F1  0227               	subwf	___lldiv@dividend+3,w
  9159  08F2  1D03               	skipz
  9160  08F3  28FE               	goto	u3125
  9161  08F4  0822               	movf	___lldiv@divisor+2,w
  9162  08F5  0226               	subwf	___lldiv@dividend+2,w
  9163  08F6  1D03               	skipz
  9164  08F7  28FE               	goto	u3125
  9165  08F8  0821               	movf	___lldiv@divisor+1,w
  9166  08F9  0225               	subwf	___lldiv@dividend+1,w
  9167  08FA  1D03               	skipz
  9168  08FB  28FE               	goto	u3125
  9169  08FC  0820               	movf	___lldiv@divisor,w
  9170  08FD  0224               	subwf	___lldiv@dividend,w
  9171  08FE                     u3125:	
  9172  08FE  1C03               	skipc
  9173  08FF  2909               	goto	l3169
  9174  0900  0820               	movf	___lldiv@divisor,w
  9175  0901  02A4               	subwf	___lldiv@dividend,f
  9176  0902  0821               	movf	___lldiv@divisor+1,w
  9177  0903  3BA5               	subwfb	___lldiv@dividend+1,f
  9178  0904  0822               	movf	___lldiv@divisor+2,w
  9179  0905  3BA6               	subwfb	___lldiv@dividend+2,f
  9180  0906  0823               	movf	___lldiv@divisor+3,w
  9181  0907  3BA7               	subwfb	___lldiv@dividend+3,f
  9182  0908  1429               	bsf	___lldiv@quotient,0
  9183  0909                     l3169:	
  9184  0909  3001               	movlw	1
  9185  090A                     u3135:	
  9186  090A  36A3               	lsrf	___lldiv@divisor+3,f
  9187  090B  0CA2               	rrf	___lldiv@divisor+2,f
  9188  090C  0CA1               	rrf	___lldiv@divisor+1,f
  9189  090D  0CA0               	rrf	___lldiv@divisor,f
  9190  090E  0B89               	decfsz	9,f
  9191  090F  290A               	goto	u3135
  9192  0910  3001               	movlw	1
  9193  0911  02AD               	subwf	___lldiv@counter,f
  9194  0912  1D03               	btfss	3,2
  9195  0913  28E9               	goto	l3161
  9196  0914                     l3173:	
  9197  0914  082C               	movf	___lldiv@quotient+3,w
  9198  0915  00A3               	movwf	?___lldiv+3
  9199  0916  082B               	movf	___lldiv@quotient+2,w
  9200  0917  00A2               	movwf	?___lldiv+2
  9201  0918  082A               	movf	___lldiv@quotient+1,w
  9202  0919  00A1               	movwf	?___lldiv+1
  9203  091A  0829               	movf	___lldiv@quotient,w
  9204  091B  00A0               	movwf	?___lldiv
  9205  091C  0008               	return
  9206  091D                     __end_of___lldiv:	
  9207                           
  9208                           	psect	text36
  9209  146C                     __ptext36:	
  9210 ;; *************** function ___lltoft *****************
  9211 ;; Defined at:
  9212 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;  c               4    8[BANK0 ] unsigned long 
  9215 ;; Auto vars:     Size  Location     Type
  9216 ;;  exp             1   13[BANK0 ] unsigned char 
  9217 ;; Return value:  Size  Location     Type
  9218 ;;                  3    8[BANK0 ] float 
  9219 ;; Registers used:
  9220 ;;		wreg, status,2, status,0, pclath, cstack
  9221 ;; Tracked objects:
  9222 ;;		On entry : 0/0
  9223 ;;		On exit  : 0/0
  9224 ;;		Unchanged: 0/0
  9225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9226 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;Total ram usage:        6 bytes
  9231 ;; Hardware stack levels used:    1
  9232 ;; Hardware stack levels required when called:    8
  9233 ;; This function calls:
  9234 ;;		___ftpack
  9235 ;; This function is called by:
  9236 ;;		_ftoa
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240                           
  9241                           ;psect for function ___lltoft
  9242  146C                     ___lltoft:	
  9243                           
  9244                           ;incstack = 0
  9245                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9246  146C  308E               	movlw	142
  9247  146D  0020               	movlb	0	; select bank0
  9248  146E  00AC               	movwf	??___lltoft
  9249  146F  082C               	movf	??___lltoft,w
  9250  1470  00AD               	movwf	___lltoft@exp
  9251  1471                     l3673:	
  9252  1471  30FF               	movlw	255
  9253  1472  052B               	andwf	___lltoft@c+3,w
  9254  1473  1903               	btfsc	3,2
  9255  1474  2C81               	goto	l3675
  9256  1475  3001               	movlw	1
  9257  1476                     u4155:	
  9258  1476  36AB               	lsrf	___lltoft@c+3,f
  9259  1477  0CAA               	rrf	___lltoft@c+2,f
  9260  1478  0CA9               	rrf	___lltoft@c+1,f
  9261  1479  0CA8               	rrf	___lltoft@c,f
  9262  147A  0B89               	decfsz	9,f
  9263  147B  2C76               	goto	u4155
  9264  147C  3001               	movlw	1
  9265  147D  00AC               	movwf	??___lltoft
  9266  147E  082C               	movf	??___lltoft,w
  9267  147F  07AD               	addwf	___lltoft@exp,f
  9268  1480  2C71               	goto	l3673
  9269  1481                     l3675:	
  9270  1481  0828               	movf	___lltoft@c,w
  9271  1482  00A0               	movwf	___ftpack@arg
  9272  1483  0829               	movf	___lltoft@c+1,w
  9273  1484  00A1               	movwf	___ftpack@arg+1
  9274  1485  082A               	movf	___lltoft@c+2,w
  9275  1486  00A2               	movwf	___ftpack@arg+2
  9276  1487  082D               	movf	___lltoft@exp,w
  9277  1488  00AC               	movwf	??___lltoft
  9278  1489  082C               	movf	??___lltoft,w
  9279  148A  00A3               	movwf	___ftpack@exp
  9280  148B  01A4               	clrf	___ftpack@sign
  9281  148C  3189  211D         	fcall	___ftpack
  9282  148E  0020               	movlb	0	; select bank0
  9283  148F  0820               	movf	?___ftpack,w
  9284  1490  00A8               	movwf	?___lltoft
  9285  1491  0821               	movf	?___ftpack+1,w
  9286  1492  00A9               	movwf	?___lltoft+1
  9287  1493  0822               	movf	?___ftpack+2,w
  9288  1494  00AA               	movwf	?___lltoft+2
  9289  1495  0008               	return
  9290  1496                     __end_of___lltoft:	
  9291                           
  9292                           	psect	text37
  9293  09F0                     __ptext37:	
  9294 ;; *************** function ___fttol *****************
  9295 ;; Defined at:
  9296 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  9297 ;; Parameters:    Size  Location     Type
  9298 ;;  f1              3   71[BANK0 ] float 
  9299 ;; Auto vars:     Size  Location     Type
  9300 ;;  lval            4    1[BANK1 ] unsigned long 
  9301 ;;  exp1            1    5[BANK1 ] unsigned char 
  9302 ;;  sign1           1    0[BANK1 ] unsigned char 
  9303 ;; Return value:  Size  Location     Type
  9304 ;;                  4   71[BANK0 ] long 
  9305 ;; Registers used:
  9306 ;;		wreg, status,2, status,0
  9307 ;; Tracked objects:
  9308 ;;		On entry : 0/0
  9309 ;;		On exit  : 0/0
  9310 ;;		Unchanged: 0/0
  9311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9312 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;Total ram usage:       14 bytes
  9317 ;; Hardware stack levels used:    1
  9318 ;; Hardware stack levels required when called:    7
  9319 ;; This function calls:
  9320 ;;		Nothing
  9321 ;; This function is called by:
  9322 ;;		_ftoa
  9323 ;; This function uses a non-reentrant model
  9324 ;;
  9325                           
  9326                           
  9327                           ;psect for function ___fttol
  9328  09F0                     ___fttol:	
  9329                           
  9330                           ;incstack = 0
  9331                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9332  09F0  0020               	movlb	0	; select bank0
  9333  09F1  0867               	movf	___fttol@f1,w
  9334  09F2  00EB               	movwf	??___fttol
  9335  09F3  0868               	movf	___fttol@f1+1,w
  9336  09F4  00EC               	movwf	??___fttol+1
  9337  09F5  0869               	movf	___fttol@f1+2,w
  9338  09F6  00ED               	movwf	??___fttol+2
  9339  09F7  1003               	clrc
  9340  09F8  0D6C               	rlf	??___fttol+1,w
  9341  09F9  0D6D               	rlf	??___fttol+2,w
  9342  09FA  00EE               	movwf	??___fttol+3
  9343  09FB  086E               	movf	??___fttol+3,w
  9344  09FC  0021               	movlb	1	; select bank1
  9345  09FD  00A5               	movwf	___fttol@exp1^(0+128)
  9346  09FE  0825               	movf	___fttol@exp1^(0+128),w
  9347  09FF  1D03               	btfss	3,2
  9348  0A00  2A0B               	goto	l3633
  9349  0A01  3000               	movlw	0
  9350  0A02  0020               	movlb	0	; select bank0
  9351  0A03  00EA               	movwf	?___fttol+3
  9352  0A04  3000               	movlw	0
  9353  0A05  00E9               	movwf	?___fttol+2
  9354  0A06  3000               	movlw	0
  9355  0A07  00E8               	movwf	?___fttol+1
  9356  0A08  3000               	movlw	0
  9357  0A09  00E7               	movwf	?___fttol
  9358  0A0A  0008               	return
  9359  0A0B                     l3633:	
  9360  0A0B  0020               	movlb	0	; select bank0
  9361  0A0C  0867               	movf	___fttol@f1,w
  9362  0A0D  00EB               	movwf	??___fttol
  9363  0A0E  0868               	movf	___fttol@f1+1,w
  9364  0A0F  00EC               	movwf	??___fttol+1
  9365  0A10  0869               	movf	___fttol@f1+2,w
  9366  0A11  00ED               	movwf	??___fttol+2
  9367  0A12  3017               	movlw	23
  9368  0A13                     u4065:	
  9369  0A13  36ED               	lsrf	??___fttol+2,f
  9370  0A14  0CEC               	rrf	??___fttol+1,f
  9371  0A15  0CEB               	rrf	??___fttol,f
  9372  0A16  0B89               	decfsz	9,f
  9373  0A17  2A13               	goto	u4065
  9374  0A18  086B               	movf	??___fttol,w
  9375  0A19  00EE               	movwf	??___fttol+3
  9376  0A1A  086E               	movf	??___fttol+3,w
  9377  0A1B  0021               	movlb	1	; select bank1
  9378  0A1C  00A0               	movwf	___fttol@sign1^(0+128)
  9379  0A1D  0020               	movlb	0	; select bank0
  9380  0A1E  17E8               	bsf	___fttol@f1+1,7
  9381  0A1F  30FF               	movlw	255
  9382  0A20  05E7               	andwf	___fttol@f1,f
  9383  0A21  30FF               	movlw	255
  9384  0A22  05E8               	andwf	___fttol@f1+1,f
  9385  0A23  3000               	movlw	0
  9386  0A24  05E9               	andwf	___fttol@f1+2,f
  9387  0A25  0867               	movf	___fttol@f1,w
  9388  0A26  0021               	movlb	1	; select bank1
  9389  0A27  00A1               	movwf	___fttol@lval^(0+128)
  9390  0A28  0020               	movlb	0	; select bank0
  9391  0A29  0868               	movf	___fttol@f1+1,w
  9392  0A2A  0021               	movlb	1	; select bank1
  9393  0A2B  00A2               	movwf	(___fttol@lval^(0+128)+1)
  9394  0A2C  0020               	movlb	0	; select bank0
  9395  0A2D  0869               	movf	___fttol@f1+2,w
  9396  0A2E  0021               	movlb	1	; select bank1
  9397  0A2F  00A3               	movwf	(___fttol@lval^(0+128)+2)
  9398  0A30  01A4               	clrf	(___fttol@lval^(0+128)+3)
  9399  0A31  308E               	movlw	142
  9400  0A32  02A5               	subwf	___fttol@exp1^(0+128),f
  9401  0A33  1FA5               	btfss	___fttol@exp1^(0+128),7
  9402  0A34  2A55               	goto	l3653
  9403  0A35  0825               	movf	___fttol@exp1^(0+128),w
  9404  0A36  3A80               	xorlw	128
  9405  0A37  3E8F               	addlw	143
  9406  0A38  1803               	skipnc
  9407  0A39  2A44               	goto	l3651
  9408  0A3A  3000               	movlw	0
  9409  0A3B  0020               	movlb	0	; select bank0
  9410  0A3C  00EA               	movwf	?___fttol+3
  9411  0A3D  3000               	movlw	0
  9412  0A3E  00E9               	movwf	?___fttol+2
  9413  0A3F  3000               	movlw	0
  9414  0A40  00E8               	movwf	?___fttol+1
  9415  0A41  3000               	movlw	0
  9416  0A42  00E7               	movwf	?___fttol
  9417  0A43  0008               	return
  9418  0A44                     l3651:	
  9419  0A44  3001               	movlw	1
  9420  0A45                     u4095:	
  9421  0A45  0021               	movlb	1	; select bank1
  9422  0A46  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  9423  0A47  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  9424  0A48  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  9425  0A49  0CA1               	rrf	___fttol@lval^(0+128),f
  9426  0A4A  0B89               	decfsz	9,f
  9427  0A4B  2A45               	goto	u4095
  9428  0A4C  3001               	movlw	1
  9429  0A4D  0020               	movlb	0	; select bank0
  9430  0A4E  00EB               	movwf	??___fttol
  9431  0A4F  086B               	movf	??___fttol,w
  9432  0A50  0021               	movlb	1	; select bank1
  9433  0A51  07A5               	addwf	___fttol@exp1^(0+128),f
  9434  0A52  1903               	btfsc	3,2
  9435  0A53  2A71               	goto	l3661
  9436  0A54  2A44               	goto	l3651
  9437  0A55                     l3653:	
  9438  0A55  3018               	movlw	24
  9439  0A56  0225               	subwf	___fttol@exp1^(0+128),w
  9440  0A57  1C03               	skipc
  9441  0A58  2A6D               	goto	l783
  9442  0A59  3000               	movlw	0
  9443  0A5A  0020               	movlb	0	; select bank0
  9444  0A5B  00EA               	movwf	?___fttol+3
  9445  0A5C  3000               	movlw	0
  9446  0A5D  00E9               	movwf	?___fttol+2
  9447  0A5E  3000               	movlw	0
  9448  0A5F  00E8               	movwf	?___fttol+1
  9449  0A60  3000               	movlw	0
  9450  0A61  00E7               	movwf	?___fttol
  9451  0A62  0008               	return
  9452  0A63                     l3659:	
  9453  0A63  3001               	movlw	1
  9454  0A64                     u4125:	
  9455  0A64  0021               	movlb	1	; select bank1
  9456  0A65  35A1               	lslf	___fttol@lval^(0+128),f
  9457  0A66  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  9458  0A67  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  9459  0A68  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  9460  0A69  0B89               	decfsz	9,f
  9461  0A6A  2A64               	goto	u4125
  9462  0A6B  3001               	movlw	1
  9463  0A6C  02A5               	subwf	___fttol@exp1^(0+128),f
  9464  0A6D                     l783:	
  9465  0A6D  0021               	movlb	1	; select bank1
  9466  0A6E  0825               	movf	___fttol@exp1^(0+128),w
  9467  0A6F  1D03               	btfss	3,2
  9468  0A70  2A63               	goto	l3659
  9469  0A71                     l3661:	
  9470  0A71  0820               	movf	___fttol@sign1^(0+128),w
  9471  0A72  1903               	btfsc	3,2
  9472  0A73  2A7F               	goto	l3665
  9473  0A74  09A1               	comf	___fttol@lval^(0+128),f
  9474  0A75  09A2               	comf	(___fttol@lval+1)^(0+128),f
  9475  0A76  09A3               	comf	(___fttol@lval+2)^(0+128),f
  9476  0A77  09A4               	comf	(___fttol@lval+3)^(0+128),f
  9477  0A78  0AA1               	incf	___fttol@lval^(0+128),f
  9478  0A79  1903               	skipnz
  9479  0A7A  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  9480  0A7B  1903               	skipnz
  9481  0A7C  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  9482  0A7D  1903               	skipnz
  9483  0A7E  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  9484  0A7F                     l3665:	
  9485  0A7F  0824               	movf	(___fttol@lval+3)^(0+128),w
  9486  0A80  0020               	movlb	0	; select bank0
  9487  0A81  00EA               	movwf	?___fttol+3
  9488  0A82  0021               	movlb	1	; select bank1
  9489  0A83  0823               	movf	(___fttol@lval+2)^(0+128),w
  9490  0A84  0020               	movlb	0	; select bank0
  9491  0A85  00E9               	movwf	?___fttol+2
  9492  0A86  0021               	movlb	1	; select bank1
  9493  0A87  0822               	movf	(___fttol@lval+1)^(0+128),w
  9494  0A88  0020               	movlb	0	; select bank0
  9495  0A89  00E8               	movwf	?___fttol+1
  9496  0A8A  0021               	movlb	1	; select bank1
  9497  0A8B  0821               	movf	___fttol@lval^(0+128),w
  9498  0A8C  0020               	movlb	0	; select bank0
  9499  0A8D  00E7               	movwf	?___fttol
  9500  0A8E  0008               	return
  9501  0A8F                     __end_of___fttol:	
  9502                           
  9503                           	psect	text38
  9504  1330                     __ptext38:	
  9505 ;; *************** function ___ftsub *****************
  9506 ;; Defined at:
  9507 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  9508 ;; Parameters:    Size  Location     Type
  9509 ;;  f2              3   27[BANK0 ] float 
  9510 ;;  f1              3   30[BANK0 ] float 
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;		None
  9513 ;; Return value:  Size  Location     Type
  9514 ;;                  3   27[BANK0 ] float 
  9515 ;; Registers used:
  9516 ;;		wreg, status,2, status,0, pclath, cstack
  9517 ;; Tracked objects:
  9518 ;;		On entry : 0/0
  9519 ;;		On exit  : 0/0
  9520 ;;		Unchanged: 0/0
  9521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9522 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9525 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9526 ;;Total ram usage:        6 bytes
  9527 ;; Hardware stack levels used:    1
  9528 ;; Hardware stack levels required when called:    9
  9529 ;; This function calls:
  9530 ;;		___ftadd
  9531 ;; This function is called by:
  9532 ;;		_ftoa
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           
  9537                           ;psect for function ___ftsub
  9538  1330                     ___ftsub:	
  9539                           
  9540                           ;incstack = 0
  9541                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9542  1330  0020               	movlb	0	; select bank0
  9543  1331  083D               	movf	___ftsub@f2+2,w
  9544  1332  043C               	iorwf	___ftsub@f2+1,w
  9545  1333  043B               	iorwf	___ftsub@f2,w
  9546  1334  1903               	skipnz
  9547  1335  2B38               	goto	l3623
  9548  1336  3080               	movlw	128
  9549  1337  06BD               	xorwf	___ftsub@f2+2,f
  9550  1338                     l3623:	
  9551  1338  083E               	movf	___ftsub@f1,w
  9552  1339  00AE               	movwf	___ftadd@f1
  9553  133A  083F               	movf	___ftsub@f1+1,w
  9554  133B  00AF               	movwf	___ftadd@f1+1
  9555  133C  0840               	movf	___ftsub@f1+2,w
  9556  133D  00B0               	movwf	___ftadd@f1+2
  9557  133E  083B               	movf	___ftsub@f2,w
  9558  133F  00B1               	movwf	___ftadd@f2
  9559  1340  083C               	movf	___ftsub@f2+1,w
  9560  1341  00B2               	movwf	___ftadd@f2+1
  9561  1342  083D               	movf	___ftsub@f2+2,w
  9562  1343  00B3               	movwf	___ftadd@f2+2
  9563  1344  318F  270A         	fcall	___ftadd
  9564  1346  0020               	movlb	0	; select bank0
  9565  1347  082E               	movf	?___ftadd,w
  9566  1348  00BB               	movwf	?___ftsub
  9567  1349  082F               	movf	?___ftadd+1,w
  9568  134A  00BC               	movwf	?___ftsub+1
  9569  134B  0830               	movf	?___ftadd+2,w
  9570  134C  00BD               	movwf	?___ftsub+2
  9571  134D  0008               	return
  9572  134E                     __end_of___ftsub:	
  9573                           
  9574                           	psect	text39
  9575  11D4                     __ptext39:	
  9576 ;; *************** function ___ftneg *****************
  9577 ;; Defined at:
  9578 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  9579 ;; Parameters:    Size  Location     Type
  9580 ;;  f1              3   55[BANK0 ] float 
  9581 ;; Auto vars:     Size  Location     Type
  9582 ;;		None
  9583 ;; Return value:  Size  Location     Type
  9584 ;;                  3   55[BANK0 ] float 
  9585 ;; Registers used:
  9586 ;;		wreg
  9587 ;; Tracked objects:
  9588 ;;		On entry : 0/0
  9589 ;;		On exit  : 0/0
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9592 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;Total ram usage:        3 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; Hardware stack levels required when called:    7
  9599 ;; This function calls:
  9600 ;;		Nothing
  9601 ;; This function is called by:
  9602 ;;		_loop
  9603 ;;		_strtod
  9604 ;;		_ftoa
  9605 ;; This function uses a non-reentrant model
  9606 ;;
  9607                           
  9608                           
  9609                           ;psect for function ___ftneg
  9610  11D4                     ___ftneg:	
  9611                           
  9612                           ;incstack = 0
  9613                           ; Regs used in ___ftneg: [wreg]
  9614  11D4  0020               	movlb	0	; select bank0
  9615  11D5  0859               	movf	___ftneg@f1+2,w
  9616  11D6  0458               	iorwf	___ftneg@f1+1,w
  9617  11D7  0457               	iorwf	___ftneg@f1,w
  9618  11D8  1903               	skipnz
  9619  11D9  0008               	return
  9620  11DA  3080               	movlw	128
  9621  11DB  06D9               	xorwf	___ftneg@f1+2,f
  9622  11DC  0008               	return
  9623  11DD                     __end_of___ftneg:	
  9624                           
  9625                           	psect	text40
  9626  0BDE                     __ptext40:	
  9627 ;; *************** function ___ftmul *****************
  9628 ;; Defined at:
  9629 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  9630 ;; Parameters:    Size  Location     Type
  9631 ;;  f1              3   55[BANK0 ] float 
  9632 ;;  f2              3   58[BANK0 ] float 
  9633 ;; Auto vars:     Size  Location     Type
  9634 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  9635 ;;  sign            1   70[BANK0 ] unsigned char 
  9636 ;;  cntr            1   69[BANK0 ] unsigned char 
  9637 ;;  exp             1   65[BANK0 ] unsigned char 
  9638 ;; Return value:  Size  Location     Type
  9639 ;;                  3   55[BANK0 ] float 
  9640 ;; Registers used:
  9641 ;;		wreg, status,2, status,0, pclath, cstack
  9642 ;; Tracked objects:
  9643 ;;		On entry : 0/0
  9644 ;;		On exit  : 0/0
  9645 ;;		Unchanged: 0/0
  9646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9647 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;Total ram usage:       16 bytes
  9652 ;; Hardware stack levels used:    1
  9653 ;; Hardware stack levels required when called:    8
  9654 ;; This function calls:
  9655 ;;		___ftpack
  9656 ;; This function is called by:
  9657 ;;		_loop
  9658 ;;		_strtod
  9659 ;;		_ftoa
  9660 ;; This function uses a non-reentrant model
  9661 ;;
  9662                           
  9663                           
  9664                           ;psect for function ___ftmul
  9665  0BDE                     ___ftmul:	
  9666                           
  9667                           ;incstack = 0
  9668                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9669  0BDE  0020               	movlb	0	; select bank0
  9670  0BDF  0857               	movf	___ftmul@f1,w
  9671  0BE0  00DD               	movwf	??___ftmul
  9672  0BE1  0858               	movf	___ftmul@f1+1,w
  9673  0BE2  00DE               	movwf	??___ftmul+1
  9674  0BE3  0859               	movf	___ftmul@f1+2,w
  9675  0BE4  00DF               	movwf	??___ftmul+2
  9676  0BE5  1003               	clrc
  9677  0BE6  0D5E               	rlf	??___ftmul+1,w
  9678  0BE7  0D5F               	rlf	??___ftmul+2,w
  9679  0BE8  00E0               	movwf	??___ftmul+3
  9680  0BE9  0860               	movf	??___ftmul+3,w
  9681  0BEA  00E1               	movwf	___ftmul@exp
  9682  0BEB  0861               	movf	___ftmul@exp,w
  9683  0BEC  1D03               	btfss	3,2
  9684  0BED  2BF5               	goto	l2967
  9685  0BEE  3000               	movlw	0
  9686  0BEF  00D7               	movwf	?___ftmul
  9687  0BF0  3000               	movlw	0
  9688  0BF1  00D8               	movwf	?___ftmul+1
  9689  0BF2  3000               	movlw	0
  9690  0BF3  00D9               	movwf	?___ftmul+2
  9691  0BF4  0008               	return
  9692  0BF5                     l2967:	
  9693  0BF5  085A               	movf	___ftmul@f2,w
  9694  0BF6  00DD               	movwf	??___ftmul
  9695  0BF7  085B               	movf	___ftmul@f2+1,w
  9696  0BF8  00DE               	movwf	??___ftmul+1
  9697  0BF9  085C               	movf	___ftmul@f2+2,w
  9698  0BFA  00DF               	movwf	??___ftmul+2
  9699  0BFB  1003               	clrc
  9700  0BFC  0D5E               	rlf	??___ftmul+1,w
  9701  0BFD  0D5F               	rlf	??___ftmul+2,w
  9702  0BFE  00E0               	movwf	??___ftmul+3
  9703  0BFF  0860               	movf	??___ftmul+3,w
  9704  0C00  00E6               	movwf	___ftmul@sign
  9705  0C01  0866               	movf	___ftmul@sign,w
  9706  0C02  1D03               	btfss	3,2
  9707  0C03  2C0B               	goto	l2973
  9708  0C04  3000               	movlw	0
  9709  0C05  00D7               	movwf	?___ftmul
  9710  0C06  3000               	movlw	0
  9711  0C07  00D8               	movwf	?___ftmul+1
  9712  0C08  3000               	movlw	0
  9713  0C09  00D9               	movwf	?___ftmul+2
  9714  0C0A  0008               	return
  9715  0C0B                     l2973:	
  9716  0C0B  0866               	movf	___ftmul@sign,w
  9717  0C0C  3E7B               	addlw	123
  9718  0C0D  00DD               	movwf	??___ftmul
  9719  0C0E  085D               	movf	??___ftmul,w
  9720  0C0F  07E1               	addwf	___ftmul@exp,f
  9721  0C10  0857               	movf	___ftmul@f1,w
  9722  0C11  00DD               	movwf	??___ftmul
  9723  0C12  0858               	movf	___ftmul@f1+1,w
  9724  0C13  00DE               	movwf	??___ftmul+1
  9725  0C14  0859               	movf	___ftmul@f1+2,w
  9726  0C15  00DF               	movwf	??___ftmul+2
  9727  0C16  3010               	movlw	16
  9728  0C17                     u2795:	
  9729  0C17  36DF               	lsrf	??___ftmul+2,f
  9730  0C18  0CDE               	rrf	??___ftmul+1,f
  9731  0C19  0CDD               	rrf	??___ftmul,f
  9732  0C1A  0B89               	decfsz	9,f
  9733  0C1B  2C17               	goto	u2795
  9734  0C1C  085D               	movf	??___ftmul,w
  9735  0C1D  00E0               	movwf	??___ftmul+3
  9736  0C1E  0860               	movf	??___ftmul+3,w
  9737  0C1F  00E6               	movwf	___ftmul@sign
  9738  0C20  085A               	movf	___ftmul@f2,w
  9739  0C21  00DD               	movwf	??___ftmul
  9740  0C22  085B               	movf	___ftmul@f2+1,w
  9741  0C23  00DE               	movwf	??___ftmul+1
  9742  0C24  085C               	movf	___ftmul@f2+2,w
  9743  0C25  00DF               	movwf	??___ftmul+2
  9744  0C26  3010               	movlw	16
  9745  0C27                     u2805:	
  9746  0C27  36DF               	lsrf	??___ftmul+2,f
  9747  0C28  0CDE               	rrf	??___ftmul+1,f
  9748  0C29  0CDD               	rrf	??___ftmul,f
  9749  0C2A  0B89               	decfsz	9,f
  9750  0C2B  2C27               	goto	u2805
  9751  0C2C  085D               	movf	??___ftmul,w
  9752  0C2D  00E0               	movwf	??___ftmul+3
  9753  0C2E  0860               	movf	??___ftmul+3,w
  9754  0C2F  06E6               	xorwf	___ftmul@sign,f
  9755  0C30  3080               	movlw	128
  9756  0C31  00DD               	movwf	??___ftmul
  9757  0C32  085D               	movf	??___ftmul,w
  9758  0C33  05E6               	andwf	___ftmul@sign,f
  9759  0C34  17D8               	bsf	___ftmul@f1+1,7
  9760  0C35  17DB               	bsf	___ftmul@f2+1,7
  9761  0C36  30FF               	movlw	255
  9762  0C37  05DA               	andwf	___ftmul@f2,f
  9763  0C38  30FF               	movlw	255
  9764  0C39  05DB               	andwf	___ftmul@f2+1,f
  9765  0C3A  3000               	movlw	0
  9766  0C3B  05DC               	andwf	___ftmul@f2+2,f
  9767  0C3C  3000               	movlw	0
  9768  0C3D  00E2               	movwf	___ftmul@f3_as_product
  9769  0C3E  3000               	movlw	0
  9770  0C3F  00E3               	movwf	___ftmul@f3_as_product+1
  9771  0C40  3000               	movlw	0
  9772  0C41  00E4               	movwf	___ftmul@f3_as_product+2
  9773  0C42  3007               	movlw	7
  9774  0C43  00DD               	movwf	??___ftmul
  9775  0C44  085D               	movf	??___ftmul,w
  9776  0C45  00E5               	movwf	___ftmul@cntr
  9777  0C46                     l2985:	
  9778  0C46  1C57               	btfss	___ftmul@f1,0
  9779  0C47  2C4E               	goto	l2989
  9780  0C48  085A               	movf	___ftmul@f2,w
  9781  0C49  07E2               	addwf	___ftmul@f3_as_product,f
  9782  0C4A  085B               	movf	___ftmul@f2+1,w
  9783  0C4B  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  9784  0C4C  085C               	movf	___ftmul@f2+2,w
  9785  0C4D  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  9786  0C4E                     l2989:	
  9787  0C4E  3001               	movlw	1
  9788  0C4F                     u2825:	
  9789  0C4F  36D9               	lsrf	___ftmul@f1+2,f
  9790  0C50  0CD8               	rrf	___ftmul@f1+1,f
  9791  0C51  0CD7               	rrf	___ftmul@f1,f
  9792  0C52  0B89               	decfsz	9,f
  9793  0C53  2C4F               	goto	u2825
  9794  0C54  3001               	movlw	1
  9795  0C55                     u2835:	
  9796  0C55  35DA               	lslf	___ftmul@f2,f
  9797  0C56  0DDB               	rlf	___ftmul@f2+1,f
  9798  0C57  0DDC               	rlf	___ftmul@f2+2,f
  9799  0C58  0B89               	decfsz	9,f
  9800  0C59  2C55               	goto	u2835
  9801  0C5A  3001               	movlw	1
  9802  0C5B  02E5               	subwf	___ftmul@cntr,f
  9803  0C5C  1D03               	btfss	3,2
  9804  0C5D  2C46               	goto	l2985
  9805  0C5E  3009               	movlw	9
  9806  0C5F  00DD               	movwf	??___ftmul
  9807  0C60  085D               	movf	??___ftmul,w
  9808  0C61  00E5               	movwf	___ftmul@cntr
  9809  0C62                     l2997:	
  9810  0C62  1C57               	btfss	___ftmul@f1,0
  9811  0C63  2C6A               	goto	l3001
  9812  0C64  085A               	movf	___ftmul@f2,w
  9813  0C65  07E2               	addwf	___ftmul@f3_as_product,f
  9814  0C66  085B               	movf	___ftmul@f2+1,w
  9815  0C67  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  9816  0C68  085C               	movf	___ftmul@f2+2,w
  9817  0C69  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  9818  0C6A                     l3001:	
  9819  0C6A  3001               	movlw	1
  9820  0C6B                     u2865:	
  9821  0C6B  36D9               	lsrf	___ftmul@f1+2,f
  9822  0C6C  0CD8               	rrf	___ftmul@f1+1,f
  9823  0C6D  0CD7               	rrf	___ftmul@f1,f
  9824  0C6E  0B89               	decfsz	9,f
  9825  0C6F  2C6B               	goto	u2865
  9826  0C70  3001               	movlw	1
  9827  0C71                     u2875:	
  9828  0C71  36E4               	lsrf	___ftmul@f3_as_product+2,f
  9829  0C72  0CE3               	rrf	___ftmul@f3_as_product+1,f
  9830  0C73  0CE2               	rrf	___ftmul@f3_as_product,f
  9831  0C74  0B89               	decfsz	9,f
  9832  0C75  2C71               	goto	u2875
  9833  0C76  3001               	movlw	1
  9834  0C77  02E5               	subwf	___ftmul@cntr,f
  9835  0C78  1D03               	btfss	3,2
  9836  0C79  2C62               	goto	l2997
  9837  0C7A  0862               	movf	___ftmul@f3_as_product,w
  9838  0C7B  00A0               	movwf	___ftpack@arg
  9839  0C7C  0863               	movf	___ftmul@f3_as_product+1,w
  9840  0C7D  00A1               	movwf	___ftpack@arg+1
  9841  0C7E  0864               	movf	___ftmul@f3_as_product+2,w
  9842  0C7F  00A2               	movwf	___ftpack@arg+2
  9843  0C80  0861               	movf	___ftmul@exp,w
  9844  0C81  00DD               	movwf	??___ftmul
  9845  0C82  085D               	movf	??___ftmul,w
  9846  0C83  00A3               	movwf	___ftpack@exp
  9847  0C84  0866               	movf	___ftmul@sign,w
  9848  0C85  00DE               	movwf	??___ftmul+1
  9849  0C86  085E               	movf	??___ftmul+1,w
  9850  0C87  00A4               	movwf	___ftpack@sign
  9851  0C88  3189  211D         	fcall	___ftpack
  9852  0C8A  0020               	movlb	0	; select bank0
  9853  0C8B  0820               	movf	?___ftpack,w
  9854  0C8C  00D7               	movwf	?___ftmul
  9855  0C8D  0821               	movf	?___ftpack+1,w
  9856  0C8E  00D8               	movwf	?___ftmul+1
  9857  0C8F  0822               	movf	?___ftpack+2,w
  9858  0C90  00D9               	movwf	?___ftmul+2
  9859  0C91  0008               	return
  9860  0C92                     __end_of___ftmul:	
  9861                           
  9862                           	psect	text41
  9863  15BE                     __ptext41:	
  9864 ;; *************** function ___ftge *****************
  9865 ;; Defined at:
  9866 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  9867 ;; Parameters:    Size  Location     Type
  9868 ;;  ff1             3    0[BANK0 ] float 
  9869 ;;  ff2             3    3[BANK0 ] float 
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;		None
  9872 ;; Return value:  Size  Location     Type
  9873 ;;		None               void
  9874 ;; Registers used:
  9875 ;;		wreg, status,2, status,0
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9881 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;Total ram usage:        9 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    7
  9888 ;; This function calls:
  9889 ;;		Nothing
  9890 ;; This function is called by:
  9891 ;;		_strtod
  9892 ;;		_ftoa
  9893 ;; This function uses a non-reentrant model
  9894 ;;
  9895                           
  9896                           
  9897                           ;psect for function ___ftge
  9898  15BE                     ___ftge:	
  9899                           
  9900                           ;incstack = 0
  9901                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9902  15BE  0020               	movlb	0	; select bank0
  9903  15BF  1FA2               	btfss	___ftge@ff1+2,7
  9904  15C0  2DD5               	goto	l2945
  9905  15C1  0920               	comf	___ftge@ff1,w
  9906  15C2  00A6               	movwf	??___ftge
  9907  15C3  0921               	comf	___ftge@ff1+1,w
  9908  15C4  00A7               	movwf	??___ftge+1
  9909  15C5  0922               	comf	___ftge@ff1+2,w
  9910  15C6  00A8               	movwf	??___ftge+2
  9911  15C7  0AA6               	incf	??___ftge,f
  9912  15C8  1903               	skipnz
  9913  15C9  0AA7               	incf	??___ftge+1,f
  9914  15CA  1903               	skipnz
  9915  15CB  0AA8               	incf	??___ftge+2,f
  9916  15CC  3000               	movlw	0
  9917  15CD  0726               	addwf	??___ftge,w
  9918  15CE  00A0               	movwf	___ftge@ff1
  9919  15CF  3000               	movlw	0
  9920  15D0  3D27               	addwfc	??___ftge+1,w
  9921  15D1  00A1               	movwf	___ftge@ff1+1
  9922  15D2  3080               	movlw	128
  9923  15D3  3D28               	addwfc	??___ftge+2,w
  9924  15D4  00A2               	movwf	___ftge@ff1+2
  9925  15D5                     l2945:	
  9926  15D5  1FA5               	btfss	___ftge@ff2+2,7
  9927  15D6  2DEB               	goto	l2949
  9928  15D7  0923               	comf	___ftge@ff2,w
  9929  15D8  00A6               	movwf	??___ftge
  9930  15D9  0924               	comf	___ftge@ff2+1,w
  9931  15DA  00A7               	movwf	??___ftge+1
  9932  15DB  0925               	comf	___ftge@ff2+2,w
  9933  15DC  00A8               	movwf	??___ftge+2
  9934  15DD  0AA6               	incf	??___ftge,f
  9935  15DE  1903               	skipnz
  9936  15DF  0AA7               	incf	??___ftge+1,f
  9937  15E0  1903               	skipnz
  9938  15E1  0AA8               	incf	??___ftge+2,f
  9939  15E2  3000               	movlw	0
  9940  15E3  0726               	addwf	??___ftge,w
  9941  15E4  00A3               	movwf	___ftge@ff2
  9942  15E5  3000               	movlw	0
  9943  15E6  3D27               	addwfc	??___ftge+1,w
  9944  15E7  00A4               	movwf	___ftge@ff2+1
  9945  15E8  3080               	movlw	128
  9946  15E9  3D28               	addwfc	??___ftge+2,w
  9947  15EA  00A5               	movwf	___ftge@ff2+2
  9948  15EB                     l2949:	
  9949  15EB  3080               	movlw	128
  9950  15EC  06A2               	xorwf	___ftge@ff1+2,f
  9951  15ED  3080               	movlw	128
  9952  15EE  06A5               	xorwf	___ftge@ff2+2,f
  9953  15EF  0825               	movf	___ftge@ff2+2,w
  9954  15F0  0222               	subwf	___ftge@ff1+2,w
  9955  15F1  1D03               	skipz
  9956  15F2  0008               	return
  9957  15F3  0824               	movf	___ftge@ff2+1,w
  9958  15F4  0221               	subwf	___ftge@ff1+1,w
  9959  15F5  1D03               	skipz
  9960  15F6  0008               	return
  9961  15F7  0823               	movf	___ftge@ff2,w
  9962  15F8  0220               	subwf	___ftge@ff1,w
  9963  15F9  0008               	return
  9964  15FA                     __end_of___ftge:	
  9965                           
  9966                           	psect	text42
  9967  0A8F                     __ptext42:	
  9968 ;; *************** function _getADCValue *****************
  9969 ;; Defined at:
  9970 ;;		line 112 in file "main.c"
  9971 ;; Parameters:    Size  Location     Type
  9972 ;;  channel         1    wreg     unsigned char 
  9973 ;; Auto vars:     Size  Location     Type
  9974 ;;  channel         1   51[BANK0 ] unsigned char 
  9975 ;;  adcSum          3   52[BANK0 ] float 
  9976 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  9977 ;; Return value:  Size  Location     Type
  9978 ;;                  3   43[BANK0 ] float 
  9979 ;; Registers used:
  9980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9986 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;Total ram usage:       12 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    9
  9993 ;; This function calls:
  9994 ;;		___awtoft
  9995 ;;		___ftadd
  9996 ;;		___ftdiv
  9997 ;;		_doWDTSleep
  9998 ;; This function is called by:
  9999 ;;		_loop
 10000 ;; This function uses a non-reentrant model
 10001 ;;
 10002                           
 10003                           
 10004                           ;psect for function _getADCValue
 10005  0A8F                     _getADCValue:	
 10006                           
 10007                           ;incstack = 0
 10008                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10009                           ;getADCValue@channel stored from wreg
 10010  0A8F  0020               	movlb	0	; select bank0
 10011  0A90  00D3               	movwf	getADCValue@channel
 10012                           
 10013                           ;main.c: 115: float adcSum = 0;
 10014  0A91  3000               	movlw	0
 10015  0A92  00D4               	movwf	getADCValue@adcSum
 10016  0A93  3000               	movlw	0
 10017  0A94  00D5               	movwf	getADCValue@adcSum+1
 10018  0A95  3000               	movlw	0
 10019  0A96  00D6               	movwf	getADCValue@adcSum+2
 10020                           
 10021                           ;main.c: 116: unsigned int adcLoop = 1000;
 10022  0A97  30E8               	movlw	232
 10023  0A98  00D1               	movwf	getADCValue@adcLoop
 10024  0A99  3003               	movlw	3
 10025  0A9A  00D2               	movwf	getADCValue@adcLoop+1
 10026                           
 10027                           ;main.c: 118: ADCON0bits.CHS = channel;
 10028  0A9B  0853               	movf	getADCValue@channel,w
 10029  0A9C  00CE               	movwf	??_getADCValue
 10030  0A9D  0DCE               	rlf	??_getADCValue,f
 10031  0A9E  0DCE               	rlf	??_getADCValue,f
 10032  0A9F  0021               	movlb	1	; select bank1
 10033  0AA0  081D               	movf	29,w	;volatile
 10034  0AA1  0020               	movlb	0	; select bank0
 10035  0AA2  064E               	xorwf	??_getADCValue,w
 10036  0AA3  3903               	andlw	-253
 10037  0AA4  064E               	xorwf	??_getADCValue,w
 10038  0AA5  0021               	movlb	1	; select bank1
 10039  0AA6  009D               	movwf	29	;volatile
 10040                           
 10041                           ;main.c: 119: FVRCONbits.FVREN = 1;
 10042  0AA7  0022               	movlb	2	; select bank2
 10043  0AA8  1797               	bsf	23,7	;volatile
 10044                           
 10045                           ;main.c: 120: ADCON0bits.ADON = 1;
 10046  0AA9  0021               	movlb	1	; select bank1
 10047  0AAA  141D               	bsf	29,0	;volatile
 10048                           
 10049                           ;main.c: 122: doWDTSleep(0b00000);
 10050  0AAB  3000               	movlw	0
 10051  0AAC  3192  2245  318A   	fcall	_doWDTSleep
 10052  0AAF                     l3891:	
 10053                           ;main.c: 124: while (adcLoop--){
 10054                           
 10055  0AAF  3001               	movlw	1
 10056  0AB0  0020               	movlb	0	; select bank0
 10057  0AB1  02D1               	subwf	getADCValue@adcLoop,f
 10058  0AB2  3000               	movlw	0
 10059  0AB3  3BD2               	subwfb	getADCValue@adcLoop+1,f
 10060  0AB4  0A51               	incf	getADCValue@adcLoop,w
 10061  0AB5  1903               	btfsc	3,2
 10062  0AB6  0A52               	incf	getADCValue@adcLoop+1,w
 10063  0AB7  1903               	btfsc	3,2
 10064  0AB8  2AEC               	goto	l194
 10065                           
 10066                           ;main.c: 126: ADCON0bits.ADGO = 1;
 10067  0AB9  0021               	movlb	1	; select bank1
 10068  0ABA  149D               	bsf	29,1	;volatile
 10069  0ABB                     l3887:	
 10070                           ;main.c: 128: while (ADCON0bits.ADGO){
 10071                           
 10072  0ABB  0021               	movlb	1	; select bank1
 10073  0ABC  1C9D               	btfss	29,1	;volatile
 10074  0ABD  2AC3               	goto	l3889
 10075                           
 10076                           ;main.c: 129: doWDTSleep(0b00000);
 10077  0ABE  3000               	movlw	0
 10078  0ABF  3192  2245  318A   	fcall	_doWDTSleep
 10079  0AC2  2ABB               	goto	l3887
 10080  0AC3                     l3889:	
 10081                           
 10082                           ;main.c: 130: };main.c: 132: adcSum+= (ADRESL | (ADRESH << 8));
 10083  0AC3  081C               	movf	28,w	;volatile
 10084  0AC4  0020               	movlb	0	; select bank0
 10085  0AC5  00CE               	movwf	??_getADCValue
 10086  0AC6  01CF               	clrf	??_getADCValue+1
 10087  0AC7  084E               	movf	??_getADCValue,w
 10088  0AC8  00CF               	movwf	??_getADCValue+1
 10089  0AC9  01CE               	clrf	??_getADCValue
 10090  0ACA  084E               	movf	??_getADCValue,w
 10091  0ACB  0021               	movlb	1	; select bank1
 10092  0ACC  041B               	iorwf	27,w	;volatile
 10093  0ACD  0020               	movlb	0	; select bank0
 10094  0ACE  00A8               	movwf	___awtoft@c
 10095  0ACF  084F               	movf	??_getADCValue+1,w
 10096  0AD0  00A9               	movwf	___awtoft@c+1
 10097  0AD1  3193  23AE  318A   	fcall	___awtoft
 10098  0AD4  0020               	movlb	0	; select bank0
 10099  0AD5  0828               	movf	?___awtoft,w
 10100  0AD6  00AE               	movwf	___ftadd@f1
 10101  0AD7  0829               	movf	?___awtoft+1,w
 10102  0AD8  00AF               	movwf	___ftadd@f1+1
 10103  0AD9  082A               	movf	?___awtoft+2,w
 10104  0ADA  00B0               	movwf	___ftadd@f1+2
 10105  0ADB  0854               	movf	getADCValue@adcSum,w
 10106  0ADC  00B1               	movwf	___ftadd@f2
 10107  0ADD  0855               	movf	getADCValue@adcSum+1,w
 10108  0ADE  00B2               	movwf	___ftadd@f2+1
 10109  0ADF  0856               	movf	getADCValue@adcSum+2,w
 10110  0AE0  00B3               	movwf	___ftadd@f2+2
 10111  0AE1  318F  270A  318A   	fcall	___ftadd
 10112  0AE4  0020               	movlb	0	; select bank0
 10113  0AE5  082E               	movf	?___ftadd,w
 10114  0AE6  00D4               	movwf	getADCValue@adcSum
 10115  0AE7  082F               	movf	?___ftadd+1,w
 10116  0AE8  00D5               	movwf	getADCValue@adcSum+1
 10117  0AE9  0830               	movf	?___ftadd+2,w
 10118  0AEA  00D6               	movwf	getADCValue@adcSum+2
 10119  0AEB  2AAF               	goto	l3891
 10120  0AEC                     l194:	
 10121                           
 10122                           ;main.c: 134: };main.c: 136: FVRCONbits.FVREN = 0;
 10123  0AEC  0022               	movlb	2	; select bank2
 10124  0AED  1397               	bcf	23,7	;volatile
 10125                           
 10126                           ;main.c: 137: ADCON0bits.ADON = 0;
 10127  0AEE  0021               	movlb	1	; select bank1
 10128  0AEF  101D               	bcf	29,0	;volatile
 10129                           
 10130                           ;main.c: 140: adcSum/= 1000;
 10131  0AF0  3000               	movlw	0
 10132  0AF1  0020               	movlb	0	; select bank0
 10133  0AF2  00BB               	movwf	___ftdiv@f2
 10134  0AF3  307A               	movlw	122
 10135  0AF4  00BC               	movwf	___ftdiv@f2+1
 10136  0AF5  3044               	movlw	68
 10137  0AF6  00BD               	movwf	___ftdiv@f2+2
 10138  0AF7  0854               	movf	getADCValue@adcSum,w
 10139  0AF8  00BE               	movwf	___ftdiv@f1
 10140  0AF9  0855               	movf	getADCValue@adcSum+1,w
 10141  0AFA  00BF               	movwf	___ftdiv@f1+1
 10142  0AFB  0856               	movf	getADCValue@adcSum+2,w
 10143  0AFC  00C0               	movwf	___ftdiv@f1+2
 10144  0AFD  318B  2335  318A   	fcall	___ftdiv
 10145  0B00  0020               	movlb	0	; select bank0
 10146  0B01  083B               	movf	?___ftdiv,w
 10147  0B02  00D4               	movwf	getADCValue@adcSum
 10148  0B03  083C               	movf	?___ftdiv+1,w
 10149  0B04  00D5               	movwf	getADCValue@adcSum+1
 10150  0B05  083D               	movf	?___ftdiv+2,w
 10151  0B06  00D6               	movwf	getADCValue@adcSum+2
 10152                           
 10153                           ;main.c: 143: if (ADCON1bits.ADPREF == 0b11){
 10154  0B07  0021               	movlb	1	; select bank1
 10155  0B08  081E               	movf	30,w	;volatile
 10156  0B09  3903               	andlw	3
 10157  0B0A  3A03               	xorlw	3
 10158  0B0B  1903               	btfsc	3,2
 10159  0B0C  2B26               	goto	l3903
 10160  0B0D  2B2D               	goto	l3905
 10161  0B0E                     l3899:	
 10162                           ;main.c: 145: case 0b10:
 10163                           
 10164                           ;main.c: 144: switch (FVRCONbits.ADFVR){
 10165                           
 10166                           
 10167                           ;main.c: 146: adcSum/= 500;
 10168  0B0E  3000               	movlw	0
 10169  0B0F  0020               	movlb	0	; select bank0
 10170  0B10  00BB               	movwf	___ftdiv@f2
 10171  0B11  30FA               	movlw	250
 10172  0B12  00BC               	movwf	___ftdiv@f2+1
 10173  0B13  3043               	movlw	67
 10174  0B14  00BD               	movwf	___ftdiv@f2+2
 10175  0B15  0854               	movf	getADCValue@adcSum,w
 10176  0B16  00BE               	movwf	___ftdiv@f1
 10177  0B17  0855               	movf	getADCValue@adcSum+1,w
 10178  0B18  00BF               	movwf	___ftdiv@f1+1
 10179  0B19  0856               	movf	getADCValue@adcSum+2,w
 10180  0B1A  00C0               	movwf	___ftdiv@f1+2
 10181  0B1B  318B  2335  318A   	fcall	___ftdiv
 10182  0B1E  0020               	movlb	0	; select bank0
 10183  0B1F  083B               	movf	?___ftdiv,w
 10184  0B20  00D4               	movwf	getADCValue@adcSum
 10185  0B21  083C               	movf	?___ftdiv+1,w
 10186  0B22  00D5               	movwf	getADCValue@adcSum+1
 10187  0B23  083D               	movf	?___ftdiv+2,w
 10188  0B24  00D6               	movwf	getADCValue@adcSum+2
 10189                           
 10190                           ;main.c: 148: }
 10191                           
 10192                           ;main.c: 147: break;
 10193  0B25  2B2D               	goto	l3905
 10194  0B26                     l3903:	
 10195  0B26  0022               	movlb	2	; select bank2
 10196  0B27  0817               	movf	23,w	;volatile
 10197  0B28  3903               	andlw	3
 10198                           
 10199                           ; Switch size 1, requested type "space"
 10200                           ; Number of cases is 1, Range of values is 2 to 2
 10201                           ; switch strategies available:
 10202                           ; Name         Instructions Cycles
 10203                           ; simple_byte            4     3 (average)
 10204                           ; direct_byte           11     9 (fixed)
 10205                           ; jumptable            263     9 (fixed)
 10206                           ;	Chosen strategy is simple_byte
 10207  0B29  3A02               	xorlw	2	; case 2
 10208  0B2A  1903               	skipnz
 10209  0B2B  2B0E               	goto	l3899
 10210  0B2C  2B2D               	goto	l3905
 10211  0B2D                     l3905:	
 10212                           
 10213                           ;main.c: 149: };main.c: 152: return adcSum;
 10214  0B2D  0020               	movlb	0	; select bank0
 10215  0B2E  0854               	movf	getADCValue@adcSum,w
 10216  0B2F  00CB               	movwf	?_getADCValue
 10217  0B30  0855               	movf	getADCValue@adcSum+1,w
 10218  0B31  00CC               	movwf	?_getADCValue+1
 10219  0B32  0856               	movf	getADCValue@adcSum+2,w
 10220  0B33  00CD               	movwf	?_getADCValue+2
 10221  0B34  0008               	return
 10222  0B35                     __end_of_getADCValue:	
 10223                           
 10224                           	psect	text43
 10225  1245                     __ptext43:	
 10226 ;; *************** function _doWDTSleep *****************
 10227 ;; Defined at:
 10228 ;;		line 22 in file "main.c"
 10229 ;; Parameters:    Size  Location     Type
 10230 ;;  wdtps           1    wreg     unsigned char 
 10231 ;; Auto vars:     Size  Location     Type
 10232 ;;  wdtps           1    1[BANK0 ] unsigned char 
 10233 ;; Return value:  Size  Location     Type
 10234 ;;                  1    wreg      void 
 10235 ;; Registers used:
 10236 ;;		wreg, status,2, status,0
 10237 ;; Tracked objects:
 10238 ;;		On entry : 0/0
 10239 ;;		On exit  : 0/0
 10240 ;;		Unchanged: 0/0
 10241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10244 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10245 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10246 ;;Total ram usage:        2 bytes
 10247 ;; Hardware stack levels used:    1
 10248 ;; Hardware stack levels required when called:    7
 10249 ;; This function calls:
 10250 ;;		Nothing
 10251 ;; This function is called by:
 10252 ;;		_sleep
 10253 ;;		_getADCValue
 10254 ;; This function uses a non-reentrant model
 10255 ;;
 10256                           
 10257                           
 10258                           ;psect for function _doWDTSleep
 10259  1245                     _doWDTSleep:	
 10260                           
 10261                           ;incstack = 0
 10262                           ; Regs used in _doWDTSleep: [wreg+status,2+status,0]
 10263                           ;doWDTSleep@wdtps stored from wreg
 10264  1245  0020               	movlb	0	; select bank0
 10265  1246  00A1               	movwf	doWDTSleep@wdtps
 10266                           
 10267                           ;main.c: 25: WDTCONbits.WDTPS = wdtps;
 10268  1247  0821               	movf	doWDTSleep@wdtps,w
 10269  1248  00A0               	movwf	??_doWDTSleep
 10270  1249  0DA0               	rlf	??_doWDTSleep,f
 10271  124A  0021               	movlb	1	; select bank1
 10272  124B  0817               	movf	23,w	;volatile
 10273  124C  0020               	movlb	0	; select bank0
 10274  124D  0620               	xorwf	??_doWDTSleep,w
 10275  124E  39C1               	andlw	-63
 10276  124F  0620               	xorwf	??_doWDTSleep,w
 10277  1250  0021               	movlb	1	; select bank1
 10278  1251  0097               	movwf	23	;volatile
 10279  1252  0063               	sleep	;# 
 10280                           
 10281                           ;main.c: 29: __nop();
 10282  1253  0000               	nop
 10283                           
 10284                           ;main.c: 30: __nop();
 10285  1254  0000               	nop
 10286                           
 10287                           ;main.c: 32: WDTCONbits.WDTPS = 0b01101;
 10288  1255  0021               	movlb	1	; select bank1
 10289  1256  0817               	movf	23,w	;volatile
 10290  1257  39C1               	andlw	-63
 10291  1258  381A               	iorlw	26
 10292  1259  0097               	movwf	23	;volatile
 10293  125A  0064               	clrwdt	;# 
 10294  125B  0008               	return
 10295  125C                     __end_of_doWDTSleep:	
 10296                           
 10297                           	psect	text44
 10298  0B35                     __ptext44:	
 10299 ;; *************** function ___ftdiv *****************
 10300 ;; Defined at:
 10301 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;  f2              3   27[BANK0 ] float 
 10304 ;;  f1              3   30[BANK0 ] float 
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;  f3              3   38[BANK0 ] float 
 10307 ;;  sign            1   42[BANK0 ] unsigned char 
 10308 ;;  exp             1   41[BANK0 ] unsigned char 
 10309 ;;  cntr            1   37[BANK0 ] unsigned char 
 10310 ;; Return value:  Size  Location     Type
 10311 ;;                  3   27[BANK0 ] float 
 10312 ;; Registers used:
 10313 ;;		wreg, status,2, status,0, pclath, cstack
 10314 ;; Tracked objects:
 10315 ;;		On entry : 0/0
 10316 ;;		On exit  : 0/0
 10317 ;;		Unchanged: 0/0
 10318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10319 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;Total ram usage:       16 bytes
 10324 ;; Hardware stack levels used:    1
 10325 ;; Hardware stack levels required when called:    8
 10326 ;; This function calls:
 10327 ;;		___ftpack
 10328 ;; This function is called by:
 10329 ;;		_getADCValue
 10330 ;;		_loop
 10331 ;;		_strtod
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           
 10336                           ;psect for function ___ftdiv
 10337  0B35                     ___ftdiv:	
 10338                           
 10339                           ;incstack = 0
 10340                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10341  0B35  0020               	movlb	0	; select bank0
 10342  0B36  083E               	movf	___ftdiv@f1,w
 10343  0B37  00C1               	movwf	??___ftdiv
 10344  0B38  083F               	movf	___ftdiv@f1+1,w
 10345  0B39  00C2               	movwf	??___ftdiv+1
 10346  0B3A  0840               	movf	___ftdiv@f1+2,w
 10347  0B3B  00C3               	movwf	??___ftdiv+2
 10348  0B3C  1003               	clrc
 10349  0B3D  0D42               	rlf	??___ftdiv+1,w
 10350  0B3E  0D43               	rlf	??___ftdiv+2,w
 10351  0B3F  00C4               	movwf	??___ftdiv+3
 10352  0B40  0844               	movf	??___ftdiv+3,w
 10353  0B41  00C9               	movwf	___ftdiv@exp
 10354  0B42  0849               	movf	___ftdiv@exp,w
 10355  0B43  1D03               	btfss	3,2
 10356  0B44  2B4C               	goto	l2905
 10357  0B45  3000               	movlw	0
 10358  0B46  00BB               	movwf	?___ftdiv
 10359  0B47  3000               	movlw	0
 10360  0B48  00BC               	movwf	?___ftdiv+1
 10361  0B49  3000               	movlw	0
 10362  0B4A  00BD               	movwf	?___ftdiv+2
 10363  0B4B  0008               	return
 10364  0B4C                     l2905:	
 10365  0B4C  083B               	movf	___ftdiv@f2,w
 10366  0B4D  00C1               	movwf	??___ftdiv
 10367  0B4E  083C               	movf	___ftdiv@f2+1,w
 10368  0B4F  00C2               	movwf	??___ftdiv+1
 10369  0B50  083D               	movf	___ftdiv@f2+2,w
 10370  0B51  00C3               	movwf	??___ftdiv+2
 10371  0B52  1003               	clrc
 10372  0B53  0D42               	rlf	??___ftdiv+1,w
 10373  0B54  0D43               	rlf	??___ftdiv+2,w
 10374  0B55  00C4               	movwf	??___ftdiv+3
 10375  0B56  0844               	movf	??___ftdiv+3,w
 10376  0B57  00CA               	movwf	___ftdiv@sign
 10377  0B58  084A               	movf	___ftdiv@sign,w
 10378  0B59  1D03               	btfss	3,2
 10379  0B5A  2B62               	goto	l2911
 10380  0B5B  3000               	movlw	0
 10381  0B5C  00BB               	movwf	?___ftdiv
 10382  0B5D  3000               	movlw	0
 10383  0B5E  00BC               	movwf	?___ftdiv+1
 10384  0B5F  3000               	movlw	0
 10385  0B60  00BD               	movwf	?___ftdiv+2
 10386  0B61  0008               	return
 10387  0B62                     l2911:	
 10388  0B62  3000               	movlw	0
 10389  0B63  00C6               	movwf	___ftdiv@f3
 10390  0B64  3000               	movlw	0
 10391  0B65  00C7               	movwf	___ftdiv@f3+1
 10392  0B66  3000               	movlw	0
 10393  0B67  00C8               	movwf	___ftdiv@f3+2
 10394  0B68  3089               	movlw	137
 10395  0B69  074A               	addwf	___ftdiv@sign,w
 10396  0B6A  00C1               	movwf	??___ftdiv
 10397  0B6B  0841               	movf	??___ftdiv,w
 10398  0B6C  02C9               	subwf	___ftdiv@exp,f
 10399  0B6D  083E               	movf	___ftdiv@f1,w
 10400  0B6E  00C1               	movwf	??___ftdiv
 10401  0B6F  083F               	movf	___ftdiv@f1+1,w
 10402  0B70  00C2               	movwf	??___ftdiv+1
 10403  0B71  0840               	movf	___ftdiv@f1+2,w
 10404  0B72  00C3               	movwf	??___ftdiv+2
 10405  0B73  3010               	movlw	16
 10406  0B74                     u2685:	
 10407  0B74  36C3               	lsrf	??___ftdiv+2,f
 10408  0B75  0CC2               	rrf	??___ftdiv+1,f
 10409  0B76  0CC1               	rrf	??___ftdiv,f
 10410  0B77  0B89               	decfsz	9,f
 10411  0B78  2B74               	goto	u2685
 10412  0B79  0841               	movf	??___ftdiv,w
 10413  0B7A  00C4               	movwf	??___ftdiv+3
 10414  0B7B  0844               	movf	??___ftdiv+3,w
 10415  0B7C  00CA               	movwf	___ftdiv@sign
 10416  0B7D  083B               	movf	___ftdiv@f2,w
 10417  0B7E  00C1               	movwf	??___ftdiv
 10418  0B7F  083C               	movf	___ftdiv@f2+1,w
 10419  0B80  00C2               	movwf	??___ftdiv+1
 10420  0B81  083D               	movf	___ftdiv@f2+2,w
 10421  0B82  00C3               	movwf	??___ftdiv+2
 10422  0B83  3010               	movlw	16
 10423  0B84                     u2695:	
 10424  0B84  36C3               	lsrf	??___ftdiv+2,f
 10425  0B85  0CC2               	rrf	??___ftdiv+1,f
 10426  0B86  0CC1               	rrf	??___ftdiv,f
 10427  0B87  0B89               	decfsz	9,f
 10428  0B88  2B84               	goto	u2695
 10429  0B89  0841               	movf	??___ftdiv,w
 10430  0B8A  00C4               	movwf	??___ftdiv+3
 10431  0B8B  0844               	movf	??___ftdiv+3,w
 10432  0B8C  06CA               	xorwf	___ftdiv@sign,f
 10433  0B8D  3080               	movlw	128
 10434  0B8E  00C1               	movwf	??___ftdiv
 10435  0B8F  0841               	movf	??___ftdiv,w
 10436  0B90  05CA               	andwf	___ftdiv@sign,f
 10437  0B91  17BF               	bsf	___ftdiv@f1+1,7
 10438  0B92  30FF               	movlw	255
 10439  0B93  05BE               	andwf	___ftdiv@f1,f
 10440  0B94  30FF               	movlw	255
 10441  0B95  05BF               	andwf	___ftdiv@f1+1,f
 10442  0B96  3000               	movlw	0
 10443  0B97  05C0               	andwf	___ftdiv@f1+2,f
 10444  0B98  17BC               	bsf	___ftdiv@f2+1,7
 10445  0B99  30FF               	movlw	255
 10446  0B9A  05BB               	andwf	___ftdiv@f2,f
 10447  0B9B  30FF               	movlw	255
 10448  0B9C  05BC               	andwf	___ftdiv@f2+1,f
 10449  0B9D  3000               	movlw	0
 10450  0B9E  05BD               	andwf	___ftdiv@f2+2,f
 10451  0B9F  3018               	movlw	24
 10452  0BA0  00C1               	movwf	??___ftdiv
 10453  0BA1  0841               	movf	??___ftdiv,w
 10454  0BA2  00C5               	movwf	___ftdiv@cntr
 10455  0BA3                     l2925:	
 10456  0BA3  3001               	movlw	1
 10457  0BA4                     u2705:	
 10458  0BA4  35C6               	lslf	___ftdiv@f3,f
 10459  0BA5  0DC7               	rlf	___ftdiv@f3+1,f
 10460  0BA6  0DC8               	rlf	___ftdiv@f3+2,f
 10461  0BA7  0B89               	decfsz	9,f
 10462  0BA8  2BA4               	goto	u2705
 10463  0BA9  083D               	movf	___ftdiv@f2+2,w
 10464  0BAA  0240               	subwf	___ftdiv@f1+2,w
 10465  0BAB  1D03               	skipz
 10466  0BAC  2BB3               	goto	u2715
 10467  0BAD  083C               	movf	___ftdiv@f2+1,w
 10468  0BAE  023F               	subwf	___ftdiv@f1+1,w
 10469  0BAF  1D03               	skipz
 10470  0BB0  2BB3               	goto	u2715
 10471  0BB1  083B               	movf	___ftdiv@f2,w
 10472  0BB2  023E               	subwf	___ftdiv@f1,w
 10473  0BB3                     u2715:	
 10474  0BB3  1C03               	skipc
 10475  0BB4  2BBC               	goto	l2933
 10476  0BB5  083B               	movf	___ftdiv@f2,w
 10477  0BB6  02BE               	subwf	___ftdiv@f1,f
 10478  0BB7  083C               	movf	___ftdiv@f2+1,w
 10479  0BB8  3BBF               	subwfb	___ftdiv@f1+1,f
 10480  0BB9  083D               	movf	___ftdiv@f2+2,w
 10481  0BBA  3BC0               	subwfb	___ftdiv@f1+2,f
 10482  0BBB  1446               	bsf	___ftdiv@f3,0
 10483  0BBC                     l2933:	
 10484  0BBC  3001               	movlw	1
 10485  0BBD                     u2725:	
 10486  0BBD  35BE               	lslf	___ftdiv@f1,f
 10487  0BBE  0DBF               	rlf	___ftdiv@f1+1,f
 10488  0BBF  0DC0               	rlf	___ftdiv@f1+2,f
 10489  0BC0  0B89               	decfsz	9,f
 10490  0BC1  2BBD               	goto	u2725
 10491  0BC2  3001               	movlw	1
 10492  0BC3  02C5               	subwf	___ftdiv@cntr,f
 10493  0BC4  1D03               	btfss	3,2
 10494  0BC5  2BA3               	goto	l2925
 10495  0BC6  0846               	movf	___ftdiv@f3,w
 10496  0BC7  00A0               	movwf	___ftpack@arg
 10497  0BC8  0847               	movf	___ftdiv@f3+1,w
 10498  0BC9  00A1               	movwf	___ftpack@arg+1
 10499  0BCA  0848               	movf	___ftdiv@f3+2,w
 10500  0BCB  00A2               	movwf	___ftpack@arg+2
 10501  0BCC  0849               	movf	___ftdiv@exp,w
 10502  0BCD  00C1               	movwf	??___ftdiv
 10503  0BCE  0841               	movf	??___ftdiv,w
 10504  0BCF  00A3               	movwf	___ftpack@exp
 10505  0BD0  084A               	movf	___ftdiv@sign,w
 10506  0BD1  00C2               	movwf	??___ftdiv+1
 10507  0BD2  0842               	movf	??___ftdiv+1,w
 10508  0BD3  00A4               	movwf	___ftpack@sign
 10509  0BD4  3189  211D         	fcall	___ftpack
 10510  0BD6  0020               	movlb	0	; select bank0
 10511  0BD7  0820               	movf	?___ftpack,w
 10512  0BD8  00BB               	movwf	?___ftdiv
 10513  0BD9  0821               	movf	?___ftpack+1,w
 10514  0BDA  00BC               	movwf	?___ftdiv+1
 10515  0BDB  0822               	movf	?___ftpack+2,w
 10516  0BDC  00BD               	movwf	?___ftdiv+2
 10517  0BDD  0008               	return
 10518  0BDE                     __end_of___ftdiv:	
 10519                           
 10520                           	psect	text45
 10521  0F0A                     __ptext45:	
 10522 ;; *************** function ___ftadd *****************
 10523 ;; Defined at:
 10524 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
 10525 ;; Parameters:    Size  Location     Type
 10526 ;;  f1              3   14[BANK0 ] float 
 10527 ;;  f2              3   17[BANK0 ] float 
 10528 ;; Auto vars:     Size  Location     Type
 10529 ;;  exp1            1   26[BANK0 ] unsigned char 
 10530 ;;  exp2            1   25[BANK0 ] unsigned char 
 10531 ;;  sign            1   24[BANK0 ] unsigned char 
 10532 ;; Return value:  Size  Location     Type
 10533 ;;                  3   14[BANK0 ] float 
 10534 ;; Registers used:
 10535 ;;		wreg, status,2, status,0, pclath, cstack
 10536 ;; Tracked objects:
 10537 ;;		On entry : 0/0
 10538 ;;		On exit  : 0/0
 10539 ;;		Unchanged: 0/0
 10540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10541 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;Total ram usage:       13 bytes
 10546 ;; Hardware stack levels used:    1
 10547 ;; Hardware stack levels required when called:    8
 10548 ;; This function calls:
 10549 ;;		___ftpack
 10550 ;; This function is called by:
 10551 ;;		_getADCValue
 10552 ;;		_loop
 10553 ;;		___ftsub
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           
 10558                           ;psect for function ___ftadd
 10559  0F0A                     ___ftadd:	
 10560                           
 10561                           ;incstack = 0
 10562                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10563  0F0A  0020               	movlb	0	; select bank0
 10564  0F0B  082E               	movf	___ftadd@f1,w
 10565  0F0C  00B4               	movwf	??___ftadd
 10566  0F0D  082F               	movf	___ftadd@f1+1,w
 10567  0F0E  00B5               	movwf	??___ftadd+1
 10568  0F0F  0830               	movf	___ftadd@f1+2,w
 10569  0F10  00B6               	movwf	??___ftadd+2
 10570  0F11  1003               	clrc
 10571  0F12  0D35               	rlf	??___ftadd+1,w
 10572  0F13  0D36               	rlf	??___ftadd+2,w
 10573  0F14  00B7               	movwf	??___ftadd+3
 10574  0F15  0837               	movf	??___ftadd+3,w
 10575  0F16  00BA               	movwf	___ftadd@exp1
 10576  0F17  0831               	movf	___ftadd@f2,w
 10577  0F18  00B4               	movwf	??___ftadd
 10578  0F19  0832               	movf	___ftadd@f2+1,w
 10579  0F1A  00B5               	movwf	??___ftadd+1
 10580  0F1B  0833               	movf	___ftadd@f2+2,w
 10581  0F1C  00B6               	movwf	??___ftadd+2
 10582  0F1D  1003               	clrc
 10583  0F1E  0D35               	rlf	??___ftadd+1,w
 10584  0F1F  0D36               	rlf	??___ftadd+2,w
 10585  0F20  00B7               	movwf	??___ftadd+3
 10586  0F21  0837               	movf	??___ftadd+3,w
 10587  0F22  00B9               	movwf	___ftadd@exp2
 10588  0F23  083A               	movf	___ftadd@exp1,w
 10589  0F24  1903               	btfsc	3,2
 10590  0F25  2F32               	goto	l3183
 10591  0F26  0839               	movf	___ftadd@exp2,w
 10592  0F27  023A               	subwf	___ftadd@exp1,w
 10593  0F28  1803               	skipnc
 10594  0F29  2F39               	goto	l3187
 10595  0F2A  033A               	decf	___ftadd@exp1,w
 10596  0F2B  3AFF               	xorlw	255
 10597  0F2C  0739               	addwf	___ftadd@exp2,w
 10598  0F2D  00B4               	movwf	??___ftadd
 10599  0F2E  3019               	movlw	25
 10600  0F2F  0234               	subwf	??___ftadd,w
 10601  0F30  1C03               	skipc
 10602  0F31  2F39               	goto	l3187
 10603  0F32                     l3183:	
 10604  0F32  0831               	movf	___ftadd@f2,w
 10605  0F33  00AE               	movwf	?___ftadd
 10606  0F34  0832               	movf	___ftadd@f2+1,w
 10607  0F35  00AF               	movwf	?___ftadd+1
 10608  0F36  0833               	movf	___ftadd@f2+2,w
 10609  0F37  00B0               	movwf	?___ftadd+2
 10610  0F38  0008               	return
 10611  0F39                     l3187:	
 10612  0F39  0839               	movf	___ftadd@exp2,w
 10613  0F3A  1903               	btfsc	3,2
 10614  0F3B  0008               	return
 10615  0F3C  083A               	movf	___ftadd@exp1,w
 10616  0F3D  0239               	subwf	___ftadd@exp2,w
 10617  0F3E  1803               	skipnc
 10618  0F3F  2F48               	goto	l3193
 10619  0F40  0339               	decf	___ftadd@exp2,w
 10620  0F41  3AFF               	xorlw	255
 10621  0F42  073A               	addwf	___ftadd@exp1,w
 10622  0F43  00B4               	movwf	??___ftadd
 10623  0F44  3019               	movlw	25
 10624  0F45  0234               	subwf	??___ftadd,w
 10625  0F46  1803               	btfsc	3,0
 10626  0F47  0008               	return
 10627  0F48                     l3193:	
 10628  0F48  3006               	movlw	6
 10629  0F49  00B4               	movwf	??___ftadd
 10630  0F4A  0834               	movf	??___ftadd,w
 10631  0F4B  00B8               	movwf	___ftadd@sign
 10632  0F4C  1BB0               	btfsc	___ftadd@f1+2,7
 10633  0F4D  17B8               	bsf	___ftadd@sign,7
 10634  0F4E  1BB3               	btfsc	___ftadd@f2+2,7
 10635  0F4F  1738               	bsf	___ftadd@sign,6
 10636  0F50  17AF               	bsf	___ftadd@f1+1,7
 10637  0F51  30FF               	movlw	255
 10638  0F52  05AE               	andwf	___ftadd@f1,f
 10639  0F53  30FF               	movlw	255
 10640  0F54  05AF               	andwf	___ftadd@f1+1,f
 10641  0F55  3000               	movlw	0
 10642  0F56  05B0               	andwf	___ftadd@f1+2,f
 10643  0F57  17B2               	bsf	___ftadd@f2+1,7
 10644  0F58  30FF               	movlw	255
 10645  0F59  05B1               	andwf	___ftadd@f2,f
 10646  0F5A  30FF               	movlw	255
 10647  0F5B  05B2               	andwf	___ftadd@f2+1,f
 10648  0F5C  3000               	movlw	0
 10649  0F5D  05B3               	andwf	___ftadd@f2+2,f
 10650  0F5E  0839               	movf	___ftadd@exp2,w
 10651  0F5F  023A               	subwf	___ftadd@exp1,w
 10652  0F60  1803               	skipnc
 10653  0F61  2F84               	goto	l3215
 10654  0F62                     l3205:	
 10655  0F62  3001               	movlw	1
 10656  0F63                     u3245:	
 10657  0F63  35B1               	lslf	___ftadd@f2,f
 10658  0F64  0DB2               	rlf	___ftadd@f2+1,f
 10659  0F65  0DB3               	rlf	___ftadd@f2+2,f
 10660  0F66  0B89               	decfsz	9,f
 10661  0F67  2F63               	goto	u3245
 10662  0F68  3001               	movlw	1
 10663  0F69  02B9               	subwf	___ftadd@exp2,f
 10664  0F6A  0839               	movf	___ftadd@exp2,w
 10665  0F6B  063A               	xorwf	___ftadd@exp1,w
 10666  0F6C  1903               	skipnz
 10667  0F6D  2F7F               	goto	l3213
 10668  0F6E  3001               	movlw	1
 10669  0F6F  02B8               	subwf	___ftadd@sign,f
 10670  0F70  0838               	movf	___ftadd@sign,w
 10671  0F71  3907               	andlw	7
 10672  0F72  1903               	btfsc	3,2
 10673  0F73  2F7F               	goto	l3213
 10674  0F74  2F62               	goto	l3205
 10675  0F75                     l3211:	
 10676  0F75  3001               	movlw	1
 10677  0F76                     u3275:	
 10678  0F76  36B0               	lsrf	___ftadd@f1+2,f
 10679  0F77  0CAF               	rrf	___ftadd@f1+1,f
 10680  0F78  0CAE               	rrf	___ftadd@f1,f
 10681  0F79  0B89               	decfsz	9,f
 10682  0F7A  2F76               	goto	u3275
 10683  0F7B  3001               	movlw	1
 10684  0F7C  00B4               	movwf	??___ftadd
 10685  0F7D  0834               	movf	??___ftadd,w
 10686  0F7E  07BA               	addwf	___ftadd@exp1,f
 10687  0F7F                     l3213:	
 10688  0F7F  083A               	movf	___ftadd@exp1,w
 10689  0F80  0639               	xorwf	___ftadd@exp2,w
 10690  0F81  1903               	btfsc	3,2
 10691  0F82  2FA9               	goto	l723
 10692  0F83  2F75               	goto	l3211
 10693  0F84                     l3215:	
 10694  0F84  083A               	movf	___ftadd@exp1,w
 10695  0F85  0239               	subwf	___ftadd@exp2,w
 10696  0F86  1803               	skipnc
 10697  0F87  2FA9               	goto	l723
 10698  0F88                     l3217:	
 10699  0F88  3001               	movlw	1
 10700  0F89                     u3305:	
 10701  0F89  35AE               	lslf	___ftadd@f1,f
 10702  0F8A  0DAF               	rlf	___ftadd@f1+1,f
 10703  0F8B  0DB0               	rlf	___ftadd@f1+2,f
 10704  0F8C  0B89               	decfsz	9,f
 10705  0F8D  2F89               	goto	u3305
 10706  0F8E  3001               	movlw	1
 10707  0F8F  02BA               	subwf	___ftadd@exp1,f
 10708  0F90  0839               	movf	___ftadd@exp2,w
 10709  0F91  063A               	xorwf	___ftadd@exp1,w
 10710  0F92  1903               	skipnz
 10711  0F93  2FA5               	goto	l3225
 10712  0F94  3001               	movlw	1
 10713  0F95  02B8               	subwf	___ftadd@sign,f
 10714  0F96  0838               	movf	___ftadd@sign,w
 10715  0F97  3907               	andlw	7
 10716  0F98  1903               	btfsc	3,2
 10717  0F99  2FA5               	goto	l3225
 10718  0F9A  2F88               	goto	l3217
 10719  0F9B                     l3223:	
 10720  0F9B  3001               	movlw	1
 10721  0F9C                     u3335:	
 10722  0F9C  36B3               	lsrf	___ftadd@f2+2,f
 10723  0F9D  0CB2               	rrf	___ftadd@f2+1,f
 10724  0F9E  0CB1               	rrf	___ftadd@f2,f
 10725  0F9F  0B89               	decfsz	9,f
 10726  0FA0  2F9C               	goto	u3335
 10727  0FA1  3001               	movlw	1
 10728  0FA2  00B4               	movwf	??___ftadd
 10729  0FA3  0834               	movf	??___ftadd,w
 10730  0FA4  07B9               	addwf	___ftadd@exp2,f
 10731  0FA5                     l3225:	
 10732  0FA5  083A               	movf	___ftadd@exp1,w
 10733  0FA6  0639               	xorwf	___ftadd@exp2,w
 10734  0FA7  1D03               	skipz
 10735  0FA8  2F9B               	goto	l3223
 10736  0FA9                     l723:	
 10737  0FA9  1FB8               	btfss	___ftadd@sign,7
 10738  0FAA  2FBB               	goto	l3229
 10739  0FAB  30FF               	movlw	255
 10740  0FAC  06AE               	xorwf	___ftadd@f1,f
 10741  0FAD  30FF               	movlw	255
 10742  0FAE  06AF               	xorwf	___ftadd@f1+1,f
 10743  0FAF  30FF               	movlw	255
 10744  0FB0  06B0               	xorwf	___ftadd@f1+2,f
 10745  0FB1  3001               	movlw	1
 10746  0FB2  07AE               	addwf	___ftadd@f1,f
 10747  0FB3  3000               	movlw	0
 10748  0FB4  1803               	skipnc
 10749  0FB5  3001               	movlw	1
 10750  0FB6  07AF               	addwf	___ftadd@f1+1,f
 10751  0FB7  3000               	movlw	0
 10752  0FB8  1803               	skipnc
 10753  0FB9  3001               	movlw	1
 10754  0FBA  07B0               	addwf	___ftadd@f1+2,f
 10755  0FBB                     l3229:	
 10756  0FBB  1F38               	btfss	___ftadd@sign,6
 10757  0FBC  2FCD               	goto	l3233
 10758  0FBD  30FF               	movlw	255
 10759  0FBE  06B1               	xorwf	___ftadd@f2,f
 10760  0FBF  30FF               	movlw	255
 10761  0FC0  06B2               	xorwf	___ftadd@f2+1,f
 10762  0FC1  30FF               	movlw	255
 10763  0FC2  06B3               	xorwf	___ftadd@f2+2,f
 10764  0FC3  3001               	movlw	1
 10765  0FC4  07B1               	addwf	___ftadd@f2,f
 10766  0FC5  3000               	movlw	0
 10767  0FC6  1803               	skipnc
 10768  0FC7  3001               	movlw	1
 10769  0FC8  07B2               	addwf	___ftadd@f2+1,f
 10770  0FC9  3000               	movlw	0
 10771  0FCA  1803               	skipnc
 10772  0FCB  3001               	movlw	1
 10773  0FCC  07B3               	addwf	___ftadd@f2+2,f
 10774  0FCD                     l3233:	
 10775  0FCD  01B8               	clrf	___ftadd@sign
 10776  0FCE  082E               	movf	___ftadd@f1,w
 10777  0FCF  07B1               	addwf	___ftadd@f2,f
 10778  0FD0  082F               	movf	___ftadd@f1+1,w
 10779  0FD1  3DB2               	addwfc	___ftadd@f2+1,f
 10780  0FD2  0830               	movf	___ftadd@f1+2,w
 10781  0FD3  3DB3               	addwfc	___ftadd@f2+2,f
 10782  0FD4  1FB3               	btfss	___ftadd@f2+2,7
 10783  0FD5  2FE8               	goto	l3243
 10784  0FD6  30FF               	movlw	255
 10785  0FD7  06B1               	xorwf	___ftadd@f2,f
 10786  0FD8  30FF               	movlw	255
 10787  0FD9  06B2               	xorwf	___ftadd@f2+1,f
 10788  0FDA  30FF               	movlw	255
 10789  0FDB  06B3               	xorwf	___ftadd@f2+2,f
 10790  0FDC  3001               	movlw	1
 10791  0FDD  07B1               	addwf	___ftadd@f2,f
 10792  0FDE  3000               	movlw	0
 10793  0FDF  1803               	skipnc
 10794  0FE0  3001               	movlw	1
 10795  0FE1  07B2               	addwf	___ftadd@f2+1,f
 10796  0FE2  3000               	movlw	0
 10797  0FE3  1803               	skipnc
 10798  0FE4  3001               	movlw	1
 10799  0FE5  07B3               	addwf	___ftadd@f2+2,f
 10800  0FE6  01B8               	clrf	___ftadd@sign
 10801  0FE7  0AB8               	incf	___ftadd@sign,f
 10802  0FE8                     l3243:	
 10803  0FE8  0831               	movf	___ftadd@f2,w
 10804  0FE9  00A0               	movwf	___ftpack@arg
 10805  0FEA  0832               	movf	___ftadd@f2+1,w
 10806  0FEB  00A1               	movwf	___ftpack@arg+1
 10807  0FEC  0833               	movf	___ftadd@f2+2,w
 10808  0FED  00A2               	movwf	___ftpack@arg+2
 10809  0FEE  083A               	movf	___ftadd@exp1,w
 10810  0FEF  00B4               	movwf	??___ftadd
 10811  0FF0  0834               	movf	??___ftadd,w
 10812  0FF1  00A3               	movwf	___ftpack@exp
 10813  0FF2  0838               	movf	___ftadd@sign,w
 10814  0FF3  00B5               	movwf	??___ftadd+1
 10815  0FF4  0835               	movf	??___ftadd+1,w
 10816  0FF5  00A4               	movwf	___ftpack@sign
 10817  0FF6  3189  211D         	fcall	___ftpack
 10818  0FF8  0020               	movlb	0	; select bank0
 10819  0FF9  0820               	movf	?___ftpack,w
 10820  0FFA  00AE               	movwf	?___ftadd
 10821  0FFB  0821               	movf	?___ftpack+1,w
 10822  0FFC  00AF               	movwf	?___ftadd+1
 10823  0FFD  0822               	movf	?___ftpack+2,w
 10824  0FFE  00B0               	movwf	?___ftadd+2
 10825  0FFF  0008               	return
 10826  1000                     __end_of___ftadd:	
 10827                           
 10828                           	psect	text46
 10829  13AE                     __ptext46:	
 10830 ;; *************** function ___awtoft *****************
 10831 ;; Defined at:
 10832 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
 10833 ;; Parameters:    Size  Location     Type
 10834 ;;  c               2    8[BANK0 ] int 
 10835 ;; Auto vars:     Size  Location     Type
 10836 ;;  sign            1   13[BANK0 ] unsigned char 
 10837 ;; Return value:  Size  Location     Type
 10838 ;;                  3    8[BANK0 ] float 
 10839 ;; Registers used:
 10840 ;;		wreg, status,2, status,0, pclath, cstack
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10846 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;Total ram usage:        6 bytes
 10851 ;; Hardware stack levels used:    1
 10852 ;; Hardware stack levels required when called:    8
 10853 ;; This function calls:
 10854 ;;		___ftpack
 10855 ;; This function is called by:
 10856 ;;		_getADCValue
 10857 ;;		_loop
 10858 ;; This function uses a non-reentrant model
 10859 ;;
 10860                           
 10861                           
 10862                           ;psect for function ___awtoft
 10863  13AE                     ___awtoft:	
 10864                           
 10865                           ;incstack = 0
 10866                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 10867  13AE  0020               	movlb	0	; select bank0
 10868  13AF  01AD               	clrf	___awtoft@sign
 10869  13B0  1FA9               	btfss	___awtoft@c+1,7
 10870  13B1  2BB9               	goto	l3777
 10871  13B2  09A8               	comf	___awtoft@c,f
 10872  13B3  09A9               	comf	___awtoft@c+1,f
 10873  13B4  0AA8               	incf	___awtoft@c,f
 10874  13B5  1903               	skipnz
 10875  13B6  0AA9               	incf	___awtoft@c+1,f
 10876  13B7  01AD               	clrf	___awtoft@sign
 10877  13B8  0AAD               	incf	___awtoft@sign,f
 10878  13B9                     l3777:	
 10879  13B9  0828               	movf	___awtoft@c,w
 10880  13BA  00A0               	movwf	___ftpack@arg
 10881  13BB  0829               	movf	___awtoft@c+1,w
 10882  13BC  00A1               	movwf	___ftpack@arg+1
 10883  13BD  01A2               	clrf	___ftpack@arg+2
 10884  13BE  308E               	movlw	142
 10885  13BF  00AB               	movwf	??___awtoft
 10886  13C0  082B               	movf	??___awtoft,w
 10887  13C1  00A3               	movwf	___ftpack@exp
 10888  13C2  082D               	movf	___awtoft@sign,w
 10889  13C3  00AC               	movwf	??___awtoft+1
 10890  13C4  082C               	movf	??___awtoft+1,w
 10891  13C5  00A4               	movwf	___ftpack@sign
 10892  13C6  3189  211D         	fcall	___ftpack
 10893  13C8  0020               	movlb	0	; select bank0
 10894  13C9  0820               	movf	?___ftpack,w
 10895  13CA  00A8               	movwf	?___awtoft
 10896  13CB  0821               	movf	?___ftpack+1,w
 10897  13CC  00A9               	movwf	?___awtoft+1
 10898  13CD  0822               	movf	?___ftpack+2,w
 10899  13CE  00AA               	movwf	?___awtoft+2
 10900  13CF  0008               	return
 10901  13D0                     __end_of___awtoft:	
 10902                           
 10903                           	psect	text47
 10904  1231                     __ptext47:	
 10905 ;; *************** function _checkTXPower *****************
 10906 ;; Defined at:
 10907 ;;		line 191 in file "main.c"
 10908 ;; Parameters:    Size  Location     Type
 10909 ;;		None
 10910 ;; Auto vars:     Size  Location     Type
 10911 ;;  rxPacket        1    8[BANK0 ] PTR struct .
 10912 ;;		 -> RXPacket(33), 
 10913 ;; Return value:  Size  Location     Type
 10914 ;;                  1    wreg      void 
 10915 ;; Registers used:
 10916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10917 ;; Tracked objects:
 10918 ;;		On entry : 0/0
 10919 ;;		On exit  : 0/0
 10920 ;;		Unchanged: 0/0
 10921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10923 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10925 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10926 ;;Total ram usage:        2 bytes
 10927 ;; Hardware stack levels used:    1
 10928 ;; Hardware stack levels required when called:   11
 10929 ;; This function calls:
 10930 ;;		_nrf24l01ChangeTXPower
 10931 ;;		_nrf24l01GetRXPacket
 10932 ;; This function is called by:
 10933 ;;		_loop
 10934 ;; This function uses a non-reentrant model
 10935 ;;
 10936                           
 10937                           
 10938                           ;psect for function _checkTXPower
 10939  1231                     _checkTXPower:	
 10940                           
 10941                           ;main.c: 192: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
 10942                           
 10943                           ;incstack = 0
 10944                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10945  1231  3187  27FE  3192   	fcall	_nrf24l01GetRXPacket
 10946  1234  0020               	movlb	0	; select bank0
 10947  1235  00A7               	movwf	??_checkTXPower
 10948  1236  0827               	movf	??_checkTXPower,w
 10949  1237  00A8               	movwf	checkTXPower@rxPacket
 10950                           
 10951                           ;main.c: 194: if (rxPacket->packetData.ACKRPD){
 10952  1238  0828               	movf	checkTXPower@rxPacket,w
 10953  1239  0086               	movwf	6
 10954  123A  3001               	movlw	1	; select bank2/3
 10955  123B  0087               	movwf	7
 10956  123C  1C81               	btfss	1,1
 10957  123D  0008               	return
 10958                           
 10959                           ;main.c: 195: nrf24l01ChangeTXPower(-1);
 10960  123E  30FF               	movlw	255
 10961  123F  00A3               	movwf	nrf24l01ChangeTXPower@addPower
 10962  1240  30FF               	movlw	255
 10963  1241  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
 10964  1242  3196  26B2         	fcall	_nrf24l01ChangeTXPower
 10965  1244  0008               	return
 10966  1245                     __end_of_checkTXPower:	
 10967                           
 10968                           	psect	text48
 10969  07FE                     __ptext48:	
 10970 ;; *************** function _nrf24l01GetRXPacket *****************
 10971 ;; Defined at:
 10972 ;;		line 137 in file "nrf24l01.c"
 10973 ;; Parameters:    Size  Location     Type
 10974 ;;		None
 10975 ;; Auto vars:     Size  Location     Type
 10976 ;;		None
 10977 ;; Return value:  Size  Location     Type
 10978 ;;                  1    wreg      PTR struct .
 10979 ;; Registers used:
 10980 ;;		wreg
 10981 ;; Tracked objects:
 10982 ;;		On entry : 0/0
 10983 ;;		On exit  : 0/0
 10984 ;;		Unchanged: 0/0
 10985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10990 ;;Total ram usage:        0 bytes
 10991 ;; Hardware stack levels used:    1
 10992 ;; Hardware stack levels required when called:    7
 10993 ;; This function calls:
 10994 ;;		Nothing
 10995 ;; This function is called by:
 10996 ;;		_handleRXData
 10997 ;;		_checkTXPower
 10998 ;; This function uses a non-reentrant model
 10999 ;;
 11000                           
 11001                           
 11002                           ;psect for function _nrf24l01GetRXPacket
 11003  07FE                     _nrf24l01GetRXPacket:	
 11004                           
 11005                           ;nrf24l01.c: 138: return &RXPacket;
 11006                           
 11007                           ;incstack = 0
 11008                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
 11009  07FE  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
 11010  07FF  0008               	return
 11011  0800                     __end_of_nrf24l01GetRXPacket:	
 11012                           
 11013                           	psect	text49
 11014  16B2                     __ptext49:	
 11015 ;; *************** function _nrf24l01ChangeTXPower *****************
 11016 ;; Defined at:
 11017 ;;		line 33 in file "nrf24l01.c"
 11018 ;; Parameters:    Size  Location     Type
 11019 ;;  addPower        2    3[BANK0 ] int 
 11020 ;; Auto vars:     Size  Location     Type
 11021 ;;  rfSetup         1    6[BANK0 ] struct .
 11022 ;; Return value:  Size  Location     Type
 11023 ;;                  1    wreg      void 
 11024 ;; Registers used:
 11025 ;;		wreg, status,2, status,0, pclath, cstack
 11026 ;; Tracked objects:
 11027 ;;		On entry : 0/0
 11028 ;;		On exit  : 0/0
 11029 ;;		Unchanged: 0/0
 11030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11031 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;Total ram usage:        4 bytes
 11036 ;; Hardware stack levels used:    1
 11037 ;; Hardware stack levels required when called:   10
 11038 ;; This function calls:
 11039 ;;		_nrf24l01Send
 11040 ;; This function is called by:
 11041 ;;		_checkTXPower
 11042 ;;		_nrf24l01SendPacket
 11043 ;; This function uses a non-reentrant model
 11044 ;;
 11045                           
 11046                           
 11047                           ;psect for function _nrf24l01ChangeTXPower
 11048  16B2                     _nrf24l01ChangeTXPower:	
 11049                           
 11050                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
 11051                           
 11052                           ;incstack = 0
 11053                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
 11054  16B2  0020               	movlb	0	; select bank0
 11055  16B3  01A0               	clrf	nrf24l01Send@data
 11056  16B4  3006               	movlw	6
 11057  16B5  3193  236D  3196   	fcall	_nrf24l01Send
 11058  16B8  0020               	movlb	0	; select bank0
 11059  16B9  00A5               	movwf	??_nrf24l01ChangeTXPower
 11060  16BA  0825               	movf	??_nrf24l01ChangeTXPower,w
 11061  16BB  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
 11062                           
 11063                           ;nrf24l01.c: 38: if (addPower > 0){
 11064  16BC  0824               	movf	nrf24l01ChangeTXPower@addPower+1,w
 11065  16BD  3A80               	xorlw	128
 11066  16BE  00A5               	movwf	??_nrf24l01ChangeTXPower
 11067  16BF  3080               	movlw	128
 11068  16C0  0225               	subwf	??_nrf24l01ChangeTXPower,w
 11069  16C1  1D03               	skipz
 11070  16C2  2EC5               	goto	u2505
 11071  16C3  3001               	movlw	1
 11072  16C4  0223               	subwf	nrf24l01ChangeTXPower@addPower,w
 11073  16C5                     u2505:	
 11074  16C5  1C03               	skipc
 11075  16C6  2ED7               	goto	l2825
 11076                           
 11077                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
 11078  16C7  0020               	movlb	0	; select bank0
 11079  16C8  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
 11080  16C9  3903               	andlw	3
 11081  16CA  3A03               	xorlw	3
 11082  16CB  1903               	skipnz
 11083  16CC  2ED7               	goto	l2825
 11084                           
 11085                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
 11086  16CD  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
 11087  16CE  3903               	andlw	3
 11088  16CF  00A5               	movwf	??_nrf24l01ChangeTXPower
 11089  16D0  0AA5               	incf	??_nrf24l01ChangeTXPower,f
 11090  16D1  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
 11091  16D2  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
 11092  16D3  0625               	xorwf	??_nrf24l01ChangeTXPower,w
 11093  16D4  39F9               	andlw	-7
 11094  16D5  0625               	xorwf	??_nrf24l01ChangeTXPower,w
 11095  16D6  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
 11096  16D7                     l2825:	
 11097                           
 11098                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
 11099  16D7  0020               	movlb	0	; select bank0
 11100  16D8  1FA4               	btfss	nrf24l01ChangeTXPower@addPower+1,7
 11101  16D9  2EE9               	goto	l2831
 11102                           
 11103                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
 11104  16DA  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
 11105  16DB  3903               	andlw	3
 11106  16DC  3A00               	xorlw	0
 11107  16DD  1903               	skipnz
 11108  16DE  2EE9               	goto	l2831
 11109                           
 11110                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
 11111  16DF  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
 11112  16E0  3903               	andlw	3
 11113  16E1  00A5               	movwf	??_nrf24l01ChangeTXPower
 11114  16E2  03A5               	decf	??_nrf24l01ChangeTXPower,f
 11115  16E3  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
 11116  16E4  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
 11117  16E5  0625               	xorwf	??_nrf24l01ChangeTXPower,w
 11118  16E6  39F9               	andlw	-7
 11119  16E7  0625               	xorwf	??_nrf24l01ChangeTXPower,w
 11120  16E8  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
 11121  16E9                     l2831:	
 11122                           
 11123                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
 11124  16E9  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
 11125  16EA  00A5               	movwf	??_nrf24l01ChangeTXPower
 11126  16EB  0825               	movf	??_nrf24l01ChangeTXPower,w
 11127  16EC  00A0               	movwf	nrf24l01Send@data
 11128  16ED  3026               	movlw	38
 11129  16EE  3193  236D         	fcall	_nrf24l01Send
 11130  16F0  0008               	return
 11131  16F1                     __end_of_nrf24l01ChangeTXPower:	
 11132                           
 11133                           	psect	text50
 11134  136D                     __ptext50:	
 11135 ;; *************** function _nrf24l01Send *****************
 11136 ;; Defined at:
 11137 ;;		line 9 in file "nrf24l01.c"
 11138 ;; Parameters:    Size  Location     Type
 11139 ;;  command         1    wreg     unsigned char 
 11140 ;;  data            1    0[BANK0 ] unsigned char 
 11141 ;; Auto vars:     Size  Location     Type
 11142 ;;  command         1    2[BANK0 ] unsigned char 
 11143 ;; Return value:  Size  Location     Type
 11144 ;;                  1    wreg      unsigned char 
 11145 ;; Registers used:
 11146 ;;		wreg, status,2, status,0, pclath, cstack
 11147 ;; Tracked objects:
 11148 ;;		On entry : 0/0
 11149 ;;		On exit  : 0/0
 11150 ;;		Unchanged: 0/0
 11151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11152 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11155 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11156 ;;Total ram usage:        3 bytes
 11157 ;; Hardware stack levels used:    1
 11158 ;; Hardware stack levels required when called:    9
 11159 ;; This function calls:
 11160 ;;		_enableInterrupts
 11161 ;;		_nrf24l01SPIEnd
 11162 ;;		_nrf24l01SPISend
 11163 ;;		_nrf24l01SPIStart
 11164 ;; This function is called by:
 11165 ;;		_loop
 11166 ;;		_nrf24l01ChangeTXPower
 11167 ;;		_nrf24l01SetRXMode
 11168 ;;		_nrf24l01SetRXPipe
 11169 ;;		_nrf24l01InitRegisters
 11170 ;; This function uses a non-reentrant model
 11171 ;;
 11172                           
 11173                           
 11174                           ;psect for function _nrf24l01Send
 11175  136D                     _nrf24l01Send:	
 11176                           
 11177                           ;incstack = 0
 11178                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 11179                           ;nrf24l01Send@command stored from wreg
 11180  136D  0020               	movlb	0	; select bank0
 11181  136E  00A2               	movwf	nrf24l01Send@command
 11182                           
 11183                           ;nrf24l01.c: 12: enableInterrupts(0);
 11184  136F  3000               	movlw	0
 11185  1370  3191  21C4  3193   	fcall	_enableInterrupts
 11186                           
 11187                           ;nrf24l01.c: 15: nrf24l01SPIStart();
 11188  1373  3191  21CC  3193   	fcall	_nrf24l01SPIStart
 11189                           
 11190                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
 11191  1376  0020               	movlb	0	; select bank0
 11192  1377  0822               	movf	nrf24l01Send@command,w
 11193  1378  3191  21DD  3193   	fcall	_nrf24l01SPISend
 11194                           
 11195                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
 11196  137B  0020               	movlb	0	; select bank0
 11197  137C  0820               	movf	nrf24l01Send@data,w
 11198  137D  3191  21DD  3193   	fcall	_nrf24l01SPISend
 11199  1380  0020               	movlb	0	; select bank0
 11200  1381  00A1               	movwf	??_nrf24l01Send
 11201  1382  0821               	movf	??_nrf24l01Send,w
 11202  1383  00A0               	movwf	nrf24l01Send@data
 11203                           
 11204                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
 11205  1384  3191  21BD  3193   	fcall	_nrf24l01SPIEnd
 11206                           
 11207                           ;nrf24l01.c: 27: enableInterrupts(1);
 11208  1387  3001               	movlw	1
 11209  1388  3191  21C4         	fcall	_enableInterrupts
 11210                           
 11211                           ;nrf24l01.c: 29: return data;
 11212  138A  0020               	movlb	0	; select bank0
 11213  138B  0820               	movf	nrf24l01Send@data,w
 11214  138C  0008               	return
 11215  138D                     __end_of_nrf24l01Send:	
 11216                           
 11217                           	psect	text51
 11218  12C2                     __ptext51:	
 11219 ;; *************** function ___lbtoft *****************
 11220 ;; Defined at:
 11221 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
 11222 ;; Parameters:    Size  Location     Type
 11223 ;;  c               1    wreg     unsigned char 
 11224 ;; Auto vars:     Size  Location     Type
 11225 ;;  c               1   15[BANK0 ] unsigned char 
 11226 ;; Return value:  Size  Location     Type
 11227 ;;                  3    8[BANK0 ] float 
 11228 ;; Registers used:
 11229 ;;		wreg, status,2, status,0, pclath, cstack
 11230 ;; Tracked objects:
 11231 ;;		On entry : 0/0
 11232 ;;		On exit  : 0/0
 11233 ;;		Unchanged: 0/0
 11234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11235 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11237 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11238 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11239 ;;Total ram usage:        8 bytes
 11240 ;; Hardware stack levels used:    1
 11241 ;; Hardware stack levels required when called:    8
 11242 ;; This function calls:
 11243 ;;		___ftpack
 11244 ;; This function is called by:
 11245 ;;		_loop
 11246 ;;		_main
 11247 ;; This function uses a non-reentrant model
 11248 ;;
 11249                           
 11250                           
 11251                           ;psect for function ___lbtoft
 11252  12C2                     ___lbtoft:	
 11253                           
 11254                           ;incstack = 0
 11255                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
 11256                           ;___lbtoft@c stored from wreg
 11257  12C2  0020               	movlb	0	; select bank0
 11258  12C3  00AF               	movwf	___lbtoft@c
 11259  12C4  082F               	movf	___lbtoft@c,w
 11260  12C5  00AB               	movwf	??___lbtoft
 11261  12C6  01AC               	clrf	??___lbtoft+1
 11262  12C7  01AD               	clrf	??___lbtoft+2
 11263  12C8  082B               	movf	??___lbtoft,w
 11264  12C9  00A0               	movwf	___ftpack@arg
 11265  12CA  082C               	movf	??___lbtoft+1,w
 11266  12CB  00A1               	movwf	___ftpack@arg+1
 11267  12CC  082D               	movf	??___lbtoft+2,w
 11268  12CD  00A2               	movwf	___ftpack@arg+2
 11269  12CE  308E               	movlw	142
 11270  12CF  00AE               	movwf	??___lbtoft+3
 11271  12D0  082E               	movf	??___lbtoft+3,w
 11272  12D1  00A3               	movwf	___ftpack@exp
 11273  12D2  01A4               	clrf	___ftpack@sign
 11274  12D3  3189  211D         	fcall	___ftpack
 11275  12D5  0020               	movlb	0	; select bank0
 11276  12D6  0820               	movf	?___ftpack,w
 11277  12D7  00A8               	movwf	?___lbtoft
 11278  12D8  0821               	movf	?___ftpack+1,w
 11279  12D9  00A9               	movwf	?___lbtoft+1
 11280  12DA  0822               	movf	?___ftpack+2,w
 11281  12DB  00AA               	movwf	?___lbtoft+2
 11282  12DC  0008               	return
 11283  12DD                     __end_of___lbtoft:	
 11284                           
 11285                           	psect	text52
 11286  091D                     __ptext52:	
 11287 ;; *************** function ___ftpack *****************
 11288 ;; Defined at:
 11289 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
 11290 ;; Parameters:    Size  Location     Type
 11291 ;;  arg             3    0[BANK0 ] unsigned um
 11292 ;;  exp             1    3[BANK0 ] unsigned char 
 11293 ;;  sign            1    4[BANK0 ] unsigned char 
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;		None
 11296 ;; Return value:  Size  Location     Type
 11297 ;;                  3    0[BANK0 ] float 
 11298 ;; Registers used:
 11299 ;;		wreg, status,2, status,0
 11300 ;; Tracked objects:
 11301 ;;		On entry : 0/0
 11302 ;;		On exit  : 0/0
 11303 ;;		Unchanged: 0/0
 11304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11305 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11307 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11308 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11309 ;;Total ram usage:        8 bytes
 11310 ;; Hardware stack levels used:    1
 11311 ;; Hardware stack levels required when called:    7
 11312 ;; This function calls:
 11313 ;;		Nothing
 11314 ;; This function is called by:
 11315 ;;		___altoft
 11316 ;;		___awtoft
 11317 ;;		___ftadd
 11318 ;;		___ftdiv
 11319 ;;		___ftmul
 11320 ;;		___lbtoft
 11321 ;;		___lltoft
 11322 ;; This function uses a non-reentrant model
 11323 ;;
 11324                           
 11325                           
 11326                           ;psect for function ___ftpack
 11327  091D                     ___ftpack:	
 11328                           
 11329                           ;incstack = 0
 11330                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11331  091D  0020               	movlb	0	; select bank0
 11332  091E  0823               	movf	___ftpack@exp,w
 11333  091F  1903               	btfsc	3,2
 11334  0920  2926               	goto	l2757
 11335  0921  0822               	movf	___ftpack@arg+2,w
 11336  0922  0421               	iorwf	___ftpack@arg+1,w
 11337  0923  0420               	iorwf	___ftpack@arg,w
 11338  0924  1D03               	skipz
 11339  0925  2937               	goto	l2763
 11340  0926                     l2757:	
 11341  0926  3000               	movlw	0
 11342  0927  00A0               	movwf	?___ftpack
 11343  0928  3000               	movlw	0
 11344  0929  00A1               	movwf	?___ftpack+1
 11345  092A  3000               	movlw	0
 11346  092B  00A2               	movwf	?___ftpack+2
 11347  092C  0008               	return
 11348  092D                     l2761:	
 11349  092D  3001               	movlw	1
 11350  092E  00A5               	movwf	??___ftpack
 11351  092F  0825               	movf	??___ftpack,w
 11352  0930  07A3               	addwf	___ftpack@exp,f
 11353  0931  3001               	movlw	1
 11354  0932                     u2365:	
 11355  0932  36A2               	lsrf	___ftpack@arg+2,f
 11356  0933  0CA1               	rrf	___ftpack@arg+1,f
 11357  0934  0CA0               	rrf	___ftpack@arg,f
 11358  0935  0B89               	decfsz	9,f
 11359  0936  2932               	goto	u2365
 11360  0937                     l2763:	
 11361  0937  30FE               	movlw	254
 11362  0938  0522               	andwf	___ftpack@arg+2,w
 11363  0939  1903               	btfsc	3,2
 11364  093A  2950               	goto	l692
 11365  093B  292D               	goto	l2761
 11366  093C                     l2765:	
 11367  093C  3001               	movlw	1
 11368  093D  00A5               	movwf	??___ftpack
 11369  093E  0825               	movf	??___ftpack,w
 11370  093F  07A3               	addwf	___ftpack@exp,f
 11371  0940  3001               	movlw	1
 11372  0941  07A0               	addwf	___ftpack@arg,f
 11373  0942  3000               	movlw	0
 11374  0943  1803               	skipnc
 11375  0944  3001               	movlw	1
 11376  0945  07A1               	addwf	___ftpack@arg+1,f
 11377  0946  3000               	movlw	0
 11378  0947  1803               	skipnc
 11379  0948  3001               	movlw	1
 11380  0949  07A2               	addwf	___ftpack@arg+2,f
 11381  094A  3001               	movlw	1
 11382  094B                     u2385:	
 11383  094B  36A2               	lsrf	___ftpack@arg+2,f
 11384  094C  0CA1               	rrf	___ftpack@arg+1,f
 11385  094D  0CA0               	rrf	___ftpack@arg,f
 11386  094E  0B89               	decfsz	9,f
 11387  094F  294B               	goto	u2385
 11388  0950                     l692:	
 11389  0950  30FF               	movlw	255
 11390  0951  0522               	andwf	___ftpack@arg+2,w
 11391  0952  1903               	btfsc	3,2
 11392  0953  295D               	goto	l2773
 11393  0954  293C               	goto	l2765
 11394  0955                     l2771:	
 11395  0955  3001               	movlw	1
 11396  0956  02A3               	subwf	___ftpack@exp,f
 11397  0957  3001               	movlw	1
 11398  0958                     u2405:	
 11399  0958  35A0               	lslf	___ftpack@arg,f
 11400  0959  0DA1               	rlf	___ftpack@arg+1,f
 11401  095A  0DA2               	rlf	___ftpack@arg+2,f
 11402  095B  0B89               	decfsz	9,f
 11403  095C  2958               	goto	u2405
 11404  095D                     l2773:	
 11405  095D  1BA1               	btfsc	___ftpack@arg+1,7
 11406  095E  2963               	goto	l699
 11407  095F  3002               	movlw	2
 11408  0960  0223               	subwf	___ftpack@exp,w
 11409  0961  1803               	skipnc
 11410  0962  2955               	goto	l2771
 11411  0963                     l699:	
 11412  0963  1823               	btfsc	___ftpack@exp,0
 11413  0964  296B               	goto	l700
 11414  0965  30FF               	movlw	255
 11415  0966  05A0               	andwf	___ftpack@arg,f
 11416  0967  307F               	movlw	127
 11417  0968  05A1               	andwf	___ftpack@arg+1,f
 11418  0969  30FF               	movlw	255
 11419  096A  05A2               	andwf	___ftpack@arg+2,f
 11420  096B                     l700:	
 11421  096B  1003               	clrc
 11422  096C  0CA3               	rrf	___ftpack@exp,f
 11423  096D  0823               	movf	___ftpack@exp,w
 11424  096E  00A5               	movwf	??___ftpack
 11425  096F  01A6               	clrf	??___ftpack+1
 11426  0970  01A7               	clrf	??___ftpack+2
 11427  0971  3010               	movlw	16
 11428  0972                     u2445:	
 11429  0972  35A5               	lslf	??___ftpack,f
 11430  0973  0DA6               	rlf	??___ftpack+1,f
 11431  0974  0DA7               	rlf	??___ftpack+2,f
 11432  0975  0B89               	decfsz	9,f
 11433  0976  2972               	goto	u2445
 11434  0977  0825               	movf	??___ftpack,w
 11435  0978  04A0               	iorwf	___ftpack@arg,f
 11436  0979  0826               	movf	??___ftpack+1,w
 11437  097A  04A1               	iorwf	___ftpack@arg+1,f
 11438  097B  0827               	movf	??___ftpack+2,w
 11439  097C  04A2               	iorwf	___ftpack@arg+2,f
 11440  097D  0824               	movf	___ftpack@sign,w
 11441  097E  1903               	btfsc	3,2
 11442  097F  0008               	return
 11443  0980  17A2               	bsf	___ftpack@arg+2,7
 11444  0981  0008               	return
 11445  0982                     __end_of___ftpack:	
 11446                           
 11447                           	psect	intentry
 11448  0004                     __pintentry:	
 11449 ;; *************** function _ISR *****************
 11450 ;; Defined at:
 11451 ;;		line 14 in file "main.c"
 11452 ;; Parameters:    Size  Location     Type
 11453 ;;		None
 11454 ;; Auto vars:     Size  Location     Type
 11455 ;;		None
 11456 ;; Return value:  Size  Location     Type
 11457 ;;                  1    wreg      void 
 11458 ;; Registers used:
 11459 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11460 ;; Tracked objects:
 11461 ;;		On entry : 0/0
 11462 ;;		On exit  : 0/0
 11463 ;;		Unchanged: 0/0
 11464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11469 ;;Total ram usage:        0 bytes
 11470 ;; Hardware stack levels used:    1
 11471 ;; Hardware stack levels required when called:    6
 11472 ;; This function calls:
 11473 ;;		_nrf24l01ISR
 11474 ;; This function is called by:
 11475 ;;		Interrupt level 1
 11476 ;; This function uses a non-reentrant model
 11477 ;;
 11478                           
 11479  0004                     _ISR:	
 11480                           
 11481                           ;incstack = 0
 11482  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11483                           
 11484                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11485  0005  3180               	pagesel	$
 11486                           
 11487                           ;main.c: 16: if (PIR0bits.INTF){
 11488  0006  0020               	movlb	0	; select bank0
 11489  0007  1C10               	btfss	16,0	;volatile
 11490  0008  280D               	goto	i1l171
 11491                           
 11492                           ;main.c: 17: nrf24l01ISR();
 11493  0009  3196  2674         	fcall	_nrf24l01ISR
 11494                           
 11495                           ;main.c: 18: PIR0bits.INTF = 0;
 11496  000B  0020               	movlb	0	; select bank0
 11497  000C  1010               	bcf	16,0	;volatile
 11498  000D                     i1l171:	
 11499  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11500  000E  0009               	retfie
 11501  000F                     __end_of_ISR:	
 11502                           
 11503                           	psect	text54
 11504  1674                     __ptext54:	
 11505 ;; *************** function _nrf24l01ISR *****************
 11506 ;; Defined at:
 11507 ;;		line 257 in file "nrf24l01.c"
 11508 ;; Parameters:    Size  Location     Type
 11509 ;;		None
 11510 ;; Auto vars:     Size  Location     Type
 11511 ;;  status          1   12[COMMON] struct .
 11512 ;; Return value:  Size  Location     Type
 11513 ;;                  1    wreg      void 
 11514 ;; Registers used:
 11515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11516 ;; Tracked objects:
 11517 ;;		On entry : 0/0
 11518 ;;		On exit  : 0/0
 11519 ;;		Unchanged: 0/0
 11520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11524 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11525 ;;Total ram usage:        2 bytes
 11526 ;; Hardware stack levels used:    1
 11527 ;; Hardware stack levels required when called:    5
 11528 ;; This function calls:
 11529 ;;		_exception
 11530 ;;		_nrf24l01CheckACK
 11531 ;;		_nrf24l01ReceivePacket
 11532 ;;		i1_nrf24l01Send
 11533 ;; This function is called by:
 11534 ;;		_ISR
 11535 ;; This function uses a non-reentrant model
 11536 ;;
 11537                           
 11538                           
 11539                           ;psect for function _nrf24l01ISR
 11540  1674                     _nrf24l01ISR:	
 11541                           
 11542                           ;nrf24l01.c: 259: n_STATUS_t status;;nrf24l01.c: 260: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
 11543                           
 11544                           ;incstack = 0
 11545                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11546  1674  01F1               	clrf	i1nrf24l01Send@data
 11547  1675  3007               	movlw	7
 11548  1676  3192  22A7  3196   	fcall	i1_nrf24l01Send
 11549  1679  00FB               	movwf	??_nrf24l01ISR
 11550  167A  087B               	movf	??_nrf24l01ISR,w
 11551  167B  00FC               	movwf	nrf24l01ISR@status
 11552                           
 11553                           ;nrf24l01.c: 265: };nrf24l01.c: 268: if (status.byte == 0xFF){
 11554  167C  0A7C               	incf	nrf24l01ISR@status,w
 11555  167D  1D03               	btfss	3,2
 11556  167E  2E83               	goto	i1l4123
 11557                           
 11558                           ;nrf24l01.c: 269: exception(2);
 11559  167F  3002               	movlw	2
 11560  1680  3180  2002  3196   	fcall	_exception
 11561  1683                     i1l4123:	
 11562                           
 11563                           ;nrf24l01.c: 270: };nrf24l01.c: 272: if (status.TX_DS){
 11564  1683  1EFC               	btfss	nrf24l01ISR@status,5
 11565  1684  2E87               	goto	i1l332
 11566                           
 11567                           ;nrf24l01.c: 275: nrf24l01.TXBusy = 0;
 11568  1685  0021               	movlb	1	; select bank1
 11569  1686  106B               	bcf	_nrf24l01^(0+128),0	;volatile
 11570  1687                     i1l332:	
 11571                           
 11572                           ;nrf24l01.c: 276: };nrf24l01.c: 279: if (status.RX_DR){
 11573  1687  1F7C               	btfss	nrf24l01ISR@status,6
 11574  1688  2EAA               	goto	i1l4139
 11575                           
 11576                           ;nrf24l01.c: 282: if (!nrf24l01.RXPending){
 11577  1689  0021               	movlb	1	; select bank1
 11578  168A  18EB               	btfsc	_nrf24l01^(0+128),1	;volatile
 11579  168B  2EA9               	goto	i1l334
 11580                           
 11581                           ;nrf24l01.c: 285: nrf24l01.RXPending = 1;
 11582  168C  14EB               	bsf	_nrf24l01^(0+128),1	;volatile
 11583                           
 11584                           ;nrf24l01.c: 287: nrf24l01ReceivePacket();
 11585  168D  3188  207D  3196   	fcall	_nrf24l01ReceivePacket
 11586                           
 11587                           ;nrf24l01.c: 290: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
 11588  1690  01F1               	clrf	i1nrf24l01Send@data
 11589  1691  3009               	movlw	9
 11590  1692  3192  22A7  3196   	fcall	i1_nrf24l01Send
 11591  1695  00FB               	movwf	??_nrf24l01ISR
 11592  1696  0023               	movlb	3	; select bank3
 11593  1697  0820               	movf	_RXPacket^(0+384),w
 11594  1698  067B               	xorwf	??_nrf24l01ISR,w
 11595  1699  39FE               	andlw	-2
 11596  169A  067B               	xorwf	??_nrf24l01ISR,w
 11597  169B  00A0               	movwf	_RXPacket^(0+384)
 11598                           
 11599                           ;nrf24l01.c: 293: RXPacket.packetData.Pipe = status.RX_P_NO;
 11600  169C  0C7C               	rrf	nrf24l01ISR@status,w
 11601  169D  3907               	andlw	7
 11602  169E  00FB               	movwf	??_nrf24l01ISR
 11603  169F  0EFB               	swapf	??_nrf24l01ISR,f
 11604  16A0  0820               	movf	_RXPacket^(0+384),w
 11605  16A1  067B               	xorwf	??_nrf24l01ISR,w
 11606  16A2  398F               	andlw	-113
 11607  16A3  067B               	xorwf	??_nrf24l01ISR,w
 11608  16A4  00A0               	movwf	_RXPacket^(0+384)
 11609                           
 11610                           ;nrf24l01.c: 295: nrf24l01CheckACK();
 11611  16A5  3194  2442  3196   	fcall	_nrf24l01CheckACK
 11612                           
 11613                           ;nrf24l01.c: 296: }
 11614  16A8  2EAA               	goto	i1l4139
 11615  16A9                     i1l334:	
 11616                           
 11617                           ;nrf24l01.c: 299: else{;nrf24l01.c: 302: status.RX_DR = 0;
 11618  16A9  137C               	bcf	nrf24l01ISR@status,6
 11619  16AA                     i1l4139:	
 11620                           
 11621                           ;nrf24l01.c: 303: };nrf24l01.c: 305: };nrf24l01.c: 308: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
 11622  16AA  087C               	movf	nrf24l01ISR@status,w
 11623  16AB  00FB               	movwf	??_nrf24l01ISR
 11624  16AC  087B               	movf	??_nrf24l01ISR,w
 11625  16AD  00F1               	movwf	i1nrf24l01Send@data
 11626  16AE  3027               	movlw	39
 11627  16AF  3192  22A7         	fcall	i1_nrf24l01Send
 11628  16B1  0008               	return
 11629  16B2                     __end_of_nrf24l01ISR:	
 11630                           
 11631                           	psect	text55
 11632  087D                     __ptext55:	
 11633 ;; *************** function _nrf24l01ReceivePacket *****************
 11634 ;; Defined at:
 11635 ;;		line 141 in file "nrf24l01.c"
 11636 ;; Parameters:    Size  Location     Type
 11637 ;;		None
 11638 ;; Auto vars:     Size  Location     Type
 11639 ;;  i               1   10[COMMON] unsigned char 
 11640 ;;  width           1    9[COMMON] unsigned char 
 11641 ;; Return value:  Size  Location     Type
 11642 ;;                  1    wreg      void 
 11643 ;; Registers used:
 11644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11653 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11654 ;;Total ram usage:        3 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; Hardware stack levels required when called:    3
 11657 ;; This function calls:
 11658 ;;		_nrf24l01CEHigh
 11659 ;;		_nrf24l01CELow
 11660 ;;		_nrf24l01SPIEnd
 11661 ;;		_nrf24l01SPISend
 11662 ;;		_nrf24l01SPIStart
 11663 ;;		i1_memset
 11664 ;;		i1_nrf24l01Send
 11665 ;; This function is called by:
 11666 ;;		_nrf24l01ISR
 11667 ;; This function uses a non-reentrant model
 11668 ;;
 11669                           
 11670                           
 11671                           ;psect for function _nrf24l01ReceivePacket
 11672  087D                     _nrf24l01ReceivePacket:	
 11673                           
 11674                           ;nrf24l01.c: 144: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
 11675                           
 11676                           ;incstack = 0
 11677                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11678  087D  30A1               	movlw	low (_RXPacket+1)
 11679  087E  00F0               	movwf	i1memset@p1
 11680  087F  3001               	movlw	high (_RXPacket+1)
 11681  0880  00F1               	movwf	i1memset@p1+1
 11682  0881  3000               	movlw	0
 11683  0882  00F2               	movwf	i1memset@c
 11684  0883  00F3               	movwf	i1memset@c+1
 11685  0884  3020               	movlw	32
 11686  0885  00F4               	movwf	i1memset@n
 11687  0886  3000               	movlw	0
 11688  0887  00F5               	movwf	i1memset@n+1
 11689  0888  3192  225C  3188   	fcall	i1_memset
 11690                           
 11691                           ;nrf24l01.c: 145: RXPacket.packetData.byte = 0x00;
 11692  088B  0023               	movlb	3	; select bank3
 11693  088C  01A0               	clrf	_RXPacket^(0+384)
 11694                           
 11695                           ;nrf24l01.c: 148: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
 11696  088D  01F1               	clrf	i1nrf24l01Send@data
 11697  088E  3060               	movlw	96
 11698  088F  3192  22A7  3188   	fcall	i1_nrf24l01Send
 11699  0892  00F8               	movwf	??_nrf24l01ReceivePacket
 11700  0893  0878               	movf	??_nrf24l01ReceivePacket,w
 11701  0894  00F9               	movwf	nrf24l01ReceivePacket@width
 11702                           
 11703                           ;nrf24l01.c: 149: unsigned char i = 0;
 11704  0895  01FA               	clrf	nrf24l01ReceivePacket@i
 11705                           
 11706                           ;nrf24l01.c: 152: nrf24l01CELow();
 11707  0896  3191  21B1  3188   	fcall	_nrf24l01CELow
 11708                           
 11709                           ;nrf24l01.c: 155: nrf24l01SPIStart();
 11710  0899  3191  21CC  3188   	fcall	_nrf24l01SPIStart
 11711                           
 11712                           ;nrf24l01.c: 158: nrf24l01SPISend((unsigned) 0b01100001);
 11713  089C  3061               	movlw	97
 11714  089D  3191  21DD  3188   	fcall	_nrf24l01SPISend
 11715                           
 11716                           ;nrf24l01.c: 161: RXPacket.packetData.byte = nrf24l01SPISend(0);
 11717  08A0  3000               	movlw	0
 11718  08A1  3191  21DD  3188   	fcall	_nrf24l01SPISend
 11719  08A4  00F8               	movwf	??_nrf24l01ReceivePacket
 11720  08A5  0878               	movf	??_nrf24l01ReceivePacket,w
 11721  08A6  0023               	movlb	3	; select bank3
 11722  08A7  00A0               	movwf	_RXPacket^(0+384)
 11723                           
 11724                           ;nrf24l01.c: 162: width--;
 11725  08A8  3001               	movlw	1
 11726  08A9  02F9               	subwf	nrf24l01ReceivePacket@width,f
 11727                           
 11728                           ;nrf24l01.c: 164: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
 11729  08AA  01FA               	clrf	nrf24l01ReceivePacket@i
 11730  08AB  28BC               	goto	i1l3969
 11731  08AC                     i1l3965:	
 11732                           
 11733                           ;nrf24l01.c: 166: RXPacket.Message[i] = nrf24l01SPISend(0);
 11734  08AC  3000               	movlw	0
 11735  08AD  3191  21DD  3188   	fcall	_nrf24l01SPISend
 11736  08B0  00F8               	movwf	??_nrf24l01ReceivePacket
 11737  08B1  087A               	movf	nrf24l01ReceivePacket@i,w
 11738  08B2  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 11739  08B3  0086               	movwf	6
 11740  08B4  3001               	movlw	1	; select bank3/4
 11741  08B5  0087               	movwf	7
 11742  08B6  0878               	movf	??_nrf24l01ReceivePacket,w
 11743  08B7  0081               	movwf	1
 11744  08B8  3001               	movlw	1
 11745  08B9  00F8               	movwf	??_nrf24l01ReceivePacket
 11746  08BA  0878               	movf	??_nrf24l01ReceivePacket,w
 11747  08BB  07FA               	addwf	nrf24l01ReceivePacket@i,f
 11748  08BC                     i1l3969:	
 11749  08BC  0879               	movf	nrf24l01ReceivePacket@width,w
 11750  08BD  027A               	subwf	nrf24l01ReceivePacket@i,w
 11751  08BE  1803               	skipnc
 11752  08BF  28C4               	goto	i1l3973
 11753  08C0  3020               	movlw	32
 11754  08C1  027A               	subwf	nrf24l01ReceivePacket@i,w
 11755  08C2  1C03               	skipc
 11756  08C3  28AC               	goto	i1l3965
 11757  08C4                     i1l3973:	
 11758                           
 11759                           ;nrf24l01.c: 167: };nrf24l01.c: 170: nrf24l01SPIEnd();
 11760  08C4  3191  21BD  3188   	fcall	_nrf24l01SPIEnd
 11761                           
 11762                           ;nrf24l01.c: 173: nrf24l01CEHigh();
 11763  08C7  3191  21AE         	fcall	_nrf24l01CEHigh
 11764  08C9  0008               	return
 11765  08CA                     __end_of_nrf24l01ReceivePacket:	
 11766                           
 11767                           	psect	text56
 11768  125C                     __ptext56:	
 11769 ;; *************** function i1_memset *****************
 11770 ;; Defined at:
 11771 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 11772 ;; Parameters:    Size  Location     Type
 11773 ;;  p1              2    0[COMMON] PTR void 
 11774 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 11775 ;;  c               2    2[COMMON] int 
 11776 ;;  n               2    4[COMMON] unsigned int 
 11777 ;; Auto vars:     Size  Location     Type
 11778 ;;  memset          2    6[COMMON] PTR unsigned char 
 11779 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 11780 ;; Return value:  Size  Location     Type
 11781 ;;                  1    wreg      PTR void 
 11782 ;; Registers used:
 11783 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11784 ;; Tracked objects:
 11785 ;;		On entry : 0/0
 11786 ;;		On exit  : 0/0
 11787 ;;		Unchanged: 0/0
 11788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11789 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11793 ;;Total ram usage:        8 bytes
 11794 ;; Hardware stack levels used:    1
 11795 ;; This function calls:
 11796 ;;		Nothing
 11797 ;; This function is called by:
 11798 ;;		_nrf24l01ReceivePacket
 11799 ;; This function uses a non-reentrant model
 11800 ;;
 11801                           
 11802                           
 11803                           ;psect for function i1_memset
 11804  125C                     i1_memset:	
 11805                           
 11806                           ;incstack = 0
 11807                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11808  125C  0871               	movf	i1memset@p1+1,w
 11809  125D  00F7               	movwf	i1memset@p+1
 11810  125E  0870               	movf	i1memset@p1,w
 11811  125F  00F6               	movwf	i1memset@p
 11812  1260                     i1l3841:	
 11813  1260  3001               	movlw	1
 11814  1261  02F4               	subwf	i1memset@n,f
 11815  1262  3000               	movlw	0
 11816  1263  3BF5               	subwfb	i1memset@n+1,f
 11817  1264  0A74               	incf	i1memset@n,w
 11818  1265  1903               	btfsc	3,2
 11819  1266  0A75               	incf	i1memset@n+1,w
 11820  1267  1903               	btfsc	3,2
 11821  1268  0008               	return
 11822  1269  0876               	movf	i1memset@p,w
 11823  126A  0086               	movwf	6
 11824  126B  0877               	movf	i1memset@p+1,w
 11825  126C  0087               	movwf	7
 11826  126D  0872               	movf	i1memset@c,w
 11827  126E  0081               	movwf	1
 11828  126F  3001               	movlw	1
 11829  1270  07F6               	addwf	i1memset@p,f
 11830  1271  3000               	movlw	0
 11831  1272  3DF7               	addwfc	i1memset@p+1,f
 11832  1273  2A60               	goto	i1l3841
 11833  1274                     __end_ofi1_memset:	
 11834                           ;	Return value of i1_memset is never used
 11835                           
 11836                           
 11837                           	psect	text57
 11838  1442                     __ptext57:	
 11839 ;; *************** function _nrf24l01CheckACK *****************
 11840 ;; Defined at:
 11841 ;;		line 104 in file "nrf24l01.c"
 11842 ;; Parameters:    Size  Location     Type
 11843 ;;		None
 11844 ;; Auto vars:     Size  Location     Type
 11845 ;;		None
 11846 ;; Return value:  Size  Location     Type
 11847 ;;                  1    wreg      void 
 11848 ;; Registers used:
 11849 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11850 ;; Tracked objects:
 11851 ;;		On entry : 0/0
 11852 ;;		On exit  : 0/0
 11853 ;;		Unchanged: 0/0
 11854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11857 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11858 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11859 ;;Total ram usage:        3 bytes
 11860 ;; Hardware stack levels used:    1
 11861 ;; Hardware stack levels required when called:    4
 11862 ;; This function calls:
 11863 ;;		_strcmp
 11864 ;;		i1_nrf24l01SetRXMode
 11865 ;; This function is called by:
 11866 ;;		_nrf24l01ISR
 11867 ;; This function uses a non-reentrant model
 11868 ;;
 11869                           
 11870                           
 11871                           ;psect for function _nrf24l01CheckACK
 11872  1442                     _nrf24l01CheckACK:	
 11873                           
 11874                           ;nrf24l01.c: 109: if (!RXPacket.packetData.IsACK){
 11875                           
 11876                           ;incstack = 0
 11877                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11878  1442  0023               	movlb	3	; select bank3
 11879  1443  1DA0               	btfss	_RXPacket^(0+384),3
 11880  1444  0008               	return
 11881                           
 11882                           ;nrf24l01.c: 111: };nrf24l01.c: 114: nrf24l01.RXPending = 0;
 11883                           
 11884                           ;nrf24l01.c: 110: return;
 11885  1445  0021               	movlb	1	; select bank1
 11886  1446  10EB               	bcf	_nrf24l01^(0+128),1	;volatile
 11887                           
 11888                           ;nrf24l01.c: 117: if (!TXPacket->packetData.ACKRequest){
 11889  1447  0868               	movf	_TXPacket^(0+128),w
 11890  1448  0086               	movwf	6
 11891  1449  0869               	movf	(_TXPacket+1)^(0+128),w
 11892  144A  0087               	movwf	7
 11893  144B  1D01               	btfss	1,2
 11894  144C  0008               	return
 11895                           
 11896                           ;nrf24l01.c: 119: };nrf24l01.c: 122: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
 11897                           
 11898                           ;nrf24l01.c: 118: return;
 11899  144D  0868               	movf	_TXPacket^(0+128),w
 11900  144E  3E01               	addlw	1
 11901  144F  00F7               	movwf	??_nrf24l01CheckACK
 11902  1450  3000               	movlw	0
 11903  1451  3D69               	addwfc	(_TXPacket+1)^(0+128),w
 11904  1452  00F8               	movwf	??_nrf24l01CheckACK+1
 11905  1453  0877               	movf	??_nrf24l01CheckACK,w
 11906  1454  00F0               	movwf	strcmp@s1
 11907  1455  0878               	movf	??_nrf24l01CheckACK+1,w
 11908  1456  00F1               	movwf	strcmp@s1+1
 11909  1457  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 11910  1458  00F9               	movwf	??_nrf24l01CheckACK+2
 11911  1459  0879               	movf	??_nrf24l01CheckACK+2,w
 11912  145A  00F2               	movwf	strcmp@s2
 11913  145B  3193  23F4  3194   	fcall	_strcmp
 11914  145E  0870               	movf	?_strcmp,w
 11915  145F  0471               	iorwf	?_strcmp+1,w
 11916  1460  1D03               	btfss	3,2
 11917  1461  0008               	return
 11918                           
 11919                           ;nrf24l01.c: 124: };nrf24l01.c: 130: TXPacket->packetData.ACKRequest = 0;
 11920                           
 11921                           ;nrf24l01.c: 123: return;
 11922  1462  0021               	movlb	1	; select bank1
 11923  1463  0868               	movf	_TXPacket^(0+128),w
 11924  1464  0086               	movwf	6
 11925  1465  0869               	movf	(_TXPacket+1)^(0+128),w
 11926  1466  0087               	movwf	7
 11927  1467  1101               	bcf	1,2
 11928                           
 11929                           ;nrf24l01.c: 133: nrf24l01SetRXMode(0);
 11930  1468  3000               	movlw	0
 11931  1469  3195  25FA         	fcall	i1_nrf24l01SetRXMode
 11932  146B  0008               	return
 11933  146C                     __end_of_nrf24l01CheckACK:	
 11934                           
 11935                           	psect	text58
 11936  15FA                     __ptext58:	
 11937 ;; *************** function i1_nrf24l01SetRXMode *****************
 11938 ;; Defined at:
 11939 ;;		line 54 in file "nrf24l01.c"
 11940 ;; Parameters:    Size  Location     Type
 11941 ;;  rxMode          1    wreg     unsigned char 
 11942 ;; Auto vars:     Size  Location     Type
 11943 ;;  rxMode          1    6[COMMON] unsigned char 
 11944 ;;  nrf24l01SetR    1    5[COMMON] struct .
 11945 ;; Return value:  Size  Location     Type
 11946 ;;                  1    wreg      void 
 11947 ;; Registers used:
 11948 ;;		wreg, status,2, status,0, pclath, cstack
 11949 ;; Tracked objects:
 11950 ;;		On entry : 0/0
 11951 ;;		On exit  : 0/0
 11952 ;;		Unchanged: 0/0
 11953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;Total ram usage:        3 bytes
 11959 ;; Hardware stack levels used:    1
 11960 ;; Hardware stack levels required when called:    3
 11961 ;; This function calls:
 11962 ;;		_nrf24l01CEHigh
 11963 ;;		_nrf24l01CELow
 11964 ;;		i1_nrf24l01Send
 11965 ;; This function is called by:
 11966 ;;		_nrf24l01CheckACK
 11967 ;; This function uses a non-reentrant model
 11968 ;;
 11969                           
 11970                           
 11971                           ;psect for function i1_nrf24l01SetRXMode
 11972  15FA                     i1_nrf24l01SetRXMode:	
 11973                           
 11974                           ;incstack = 0
 11975                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 11976                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 11977  15FA  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
 11978                           
 11979                           ;nrf24l01.c: 56: if (rxMode){
 11980  15FB  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 11981  15FC  1903               	btfsc	3,2
 11982  15FD  2E01               	goto	i1l3813
 11983                           
 11984                           ;nrf24l01.c: 57: if (nrf24l01.TXBusy){
 11985  15FE  0021               	movlb	1	; select bank1
 11986  15FF  186B               	btfsc	_nrf24l01^(0+128),0	;volatile
 11987  1600  0008               	return
 11988  1601                     i1l3813:	
 11989                           ;nrf24l01.c: 58: return;
 11990                           
 11991                           
 11992                           ;nrf24l01.c: 59: };nrf24l01.c: 60: };nrf24l01.c: 62: n_CONFIG_t config;;nrf24l01.c: 65: 
      +                          config.byte = nrf24l01Send((unsigned) 0b00000000 | (unsigned) 0x00, 0);
 11993  1601  01F1               	clrf	i1nrf24l01Send@data
 11994  1602  3000               	movlw	0
 11995  1603  3192  22A7  3195   	fcall	i1_nrf24l01Send
 11996  1606  00F4               	movwf	??i1_nrf24l01SetRXMode
 11997  1607  0874               	movf	??i1_nrf24l01SetRXMode,w
 11998  1608  00F5               	movwf	i1nrf24l01SetRXMode@config
 11999                           
 12000                           ;nrf24l01.c: 68: if (config.PRIM_RX != rxMode){
 12001  1609  0875               	movf	i1nrf24l01SetRXMode@config,w
 12002  160A  3901               	andlw	1
 12003  160B  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 12004  160C  1903               	skipnz
 12005  160D  2E30               	goto	i1l3833
 12006                           
 12007                           ;nrf24l01.c: 71: nrf24l01CELow();
 12008  160E  3191  21B1  3195   	fcall	_nrf24l01CELow
 12009                           
 12010                           ;nrf24l01.c: 72: _delay((unsigned long)((120)*(32000000/4000000.0)));
 12011  1611  30C0               	movlw	192
 12012  1612                     u484_27:	
 12013  1612  3200               	nop2
 12014  1613  0B89               	decfsz	9,f
 12015  1614  2E12               	goto	u484_27
 12016                           
 12017                           ;nrf24l01.c: 75: config.PRIM_RX = rxMode;
 12018  1615  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 12019  1616  3901               	andlw	1
 12020  1617  1075               	bcf	i1nrf24l01SetRXMode@config,0
 12021  1618  1D03               	skipz
 12022  1619  1475               	bsf	i1nrf24l01SetRXMode@config,0
 12023                           
 12024                           ;nrf24l01.c: 76: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
 12025  161A  0875               	movf	i1nrf24l01SetRXMode@config,w
 12026  161B  00F4               	movwf	??i1_nrf24l01SetRXMode
 12027  161C  0874               	movf	??i1_nrf24l01SetRXMode,w
 12028  161D  00F1               	movwf	i1nrf24l01Send@data
 12029  161E  3020               	movlw	32
 12030  161F  3192  22A7  3195   	fcall	i1_nrf24l01Send
 12031                           
 12032                           ;nrf24l01.c: 79: _delay((unsigned long)((120)*(32000000/4000000.0)));
 12033  1622  30C0               	movlw	192
 12034  1623                     u485_27:	
 12035  1623  3200               	nop2
 12036  1624  0B89               	decfsz	9,f
 12037  1625  2E23               	goto	u485_27
 12038                           
 12039                           ;nrf24l01.c: 82: if (rxMode){
 12040  1626  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 12041  1627  1903               	btfsc	3,2
 12042  1628  2E30               	goto	i1l3833
 12043                           
 12044                           ;nrf24l01.c: 83: nrf24l01CEHigh();
 12045  1629  3191  21AE  3195   	fcall	_nrf24l01CEHigh
 12046                           
 12047                           ;nrf24l01.c: 84: _delay((unsigned long)((120)*(32000000/4000000.0)));
 12048  162C  30C0               	movlw	192
 12049  162D                     u486_27:	
 12050  162D  3200               	nop2
 12051  162E  0B89               	decfsz	9,f
 12052  162F  2E2D               	goto	u486_27
 12053  1630                     i1l3833:	
 12054                           
 12055                           ;nrf24l01.c: 85: };nrf24l01.c: 86: };nrf24l01.c: 89: nrf24l01.RXMode = rxMode;
 12056  1630  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 12057  1631  3901               	andlw	1
 12058  1632  0021               	movlb	1	; select bank1
 12059  1633  116B               	bcf	_nrf24l01^(0+128),2	;volatile
 12060  1634  1D03               	skipz
 12061  1635  156B               	bsf	_nrf24l01^(0+128),2	;volatile
 12062  1636  0008               	return
 12063  1637                     __end_ofi1_nrf24l01SetRXMode:	
 12064                           
 12065                           	psect	text59
 12066  12A7                     __ptext59:	
 12067 ;; *************** function i1_nrf24l01Send *****************
 12068 ;; Defined at:
 12069 ;;		line 9 in file "nrf24l01.c"
 12070 ;; Parameters:    Size  Location     Type
 12071 ;;  command         1    wreg     unsigned char 
 12072 ;;  data            1    1[COMMON] unsigned char 
 12073 ;; Auto vars:     Size  Location     Type
 12074 ;;  command         1    3[COMMON] unsigned char 
 12075 ;; Return value:  Size  Location     Type
 12076 ;;                  1    wreg      unsigned char 
 12077 ;; Registers used:
 12078 ;;		wreg, status,2, status,0, pclath, cstack
 12079 ;; Tracked objects:
 12080 ;;		On entry : 0/0
 12081 ;;		On exit  : 0/0
 12082 ;;		Unchanged: 0/0
 12083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12084 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12085 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12086 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12087 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12088 ;;Total ram usage:        3 bytes
 12089 ;; Hardware stack levels used:    1
 12090 ;; Hardware stack levels required when called:    2
 12091 ;; This function calls:
 12092 ;;		_enableInterrupts
 12093 ;;		_nrf24l01SPIEnd
 12094 ;;		_nrf24l01SPISend
 12095 ;;		_nrf24l01SPIStart
 12096 ;; This function is called by:
 12097 ;;		_nrf24l01ReceivePacket
 12098 ;;		_nrf24l01ISR
 12099 ;;		i1_nrf24l01SetRXMode
 12100 ;; This function uses a non-reentrant model
 12101 ;;
 12102                           
 12103                           
 12104                           ;psect for function i1_nrf24l01Send
 12105  12A7                     i1_nrf24l01Send:	
 12106                           
 12107                           ;incstack = 0
 12108                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 12109                           ;i1nrf24l01Send@command stored from wreg
 12110  12A7  00F3               	movwf	i1nrf24l01Send@command
 12111                           
 12112                           ;nrf24l01.c: 12: enableInterrupts(0);
 12113  12A8  3000               	movlw	0
 12114  12A9  3191  21C4  3192   	fcall	_enableInterrupts
 12115                           
 12116                           ;nrf24l01.c: 15: nrf24l01SPIStart();
 12117  12AC  3191  21CC  3192   	fcall	_nrf24l01SPIStart
 12118                           
 12119                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
 12120  12AF  0873               	movf	i1nrf24l01Send@command,w
 12121  12B0  3191  21DD  3192   	fcall	_nrf24l01SPISend
 12122                           
 12123                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
 12124  12B3  0871               	movf	i1nrf24l01Send@data,w
 12125  12B4  3191  21DD  3192   	fcall	_nrf24l01SPISend
 12126  12B7  00F2               	movwf	??i1_nrf24l01Send
 12127  12B8  0872               	movf	??i1_nrf24l01Send,w
 12128  12B9  00F1               	movwf	i1nrf24l01Send@data
 12129                           
 12130                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
 12131  12BA  3191  21BD  3192   	fcall	_nrf24l01SPIEnd
 12132                           
 12133                           ;nrf24l01.c: 27: enableInterrupts(1);
 12134  12BD  3001               	movlw	1
 12135  12BE  3191  21C4         	fcall	_enableInterrupts
 12136                           
 12137                           ;nrf24l01.c: 29: return data;
 12138  12C0  0871               	movf	i1nrf24l01Send@data,w
 12139  12C1  0008               	return
 12140  12C2                     __end_ofi1_nrf24l01Send:	
 12141                           
 12142                           	psect	text60
 12143  11CC                     __ptext60:	
 12144 ;; *************** function _nrf24l01SPIStart *****************
 12145 ;; Defined at:
 12146 ;;		line 64 in file "interface.c"
 12147 ;; Parameters:    Size  Location     Type
 12148 ;;		None
 12149 ;; Auto vars:     Size  Location     Type
 12150 ;;		None
 12151 ;; Return value:  Size  Location     Type
 12152 ;;                  1    wreg      void 
 12153 ;; Registers used:
 12154 ;;		wreg, status,2, status,0, pclath, cstack
 12155 ;; Tracked objects:
 12156 ;;		On entry : 0/0
 12157 ;;		On exit  : 0/0
 12158 ;;		Unchanged: 0/0
 12159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12164 ;;Total ram usage:        0 bytes
 12165 ;; Hardware stack levels used:    1
 12166 ;; Hardware stack levels required when called:    8
 12167 ;; This function calls:
 12168 ;;		_nrf24l01CSLow
 12169 ;; This function is called by:
 12170 ;;		_nrf24l01Send
 12171 ;;		_nrf24l01ReceivePacket
 12172 ;;		_nrf24l01SendPacket
 12173 ;;		_nrf24l01SetTXPipe
 12174 ;;		_nrf24l01InitRegisters
 12175 ;;		i1_nrf24l01Send
 12176 ;; This function uses a non-reentrant model
 12177 ;;
 12178                           
 12179                           
 12180                           ;psect for function _nrf24l01SPIStart
 12181  11CC                     _nrf24l01SPIStart:	
 12182                           
 12183                           ;interface.c: 65: nrf24l01CSLow();
 12184                           
 12185                           ;incstack = 0
 12186 ;; hardware stack exceeded
 12187                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 12188  11CC  3187  27FB  3191   	fcall	_nrf24l01CSLow
 12189                           
 12190                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12191  11CF  301A               	movlw	26
 12192  11D0                     u487_27:	
 12193  11D0  0B89               	decfsz	9,f
 12194  11D1  29D0               	goto	u487_27
 12195  11D2  3200               	nop2
 12196  11D3  0008               	return
 12197  11D4                     __end_of_nrf24l01SPIStart:	
 12198                           
 12199                           	psect	text61
 12200  07FB                     __ptext61:	
 12201 ;; *************** function _nrf24l01CSLow *****************
 12202 ;; Defined at:
 12203 ;;		line 17 in file "interface.c"
 12204 ;; Parameters:    Size  Location     Type
 12205 ;;		None
 12206 ;; Auto vars:     Size  Location     Type
 12207 ;;		None
 12208 ;; Return value:  Size  Location     Type
 12209 ;;                  1    wreg      void 
 12210 ;; Registers used:
 12211 ;;		None
 12212 ;; Tracked objects:
 12213 ;;		On entry : 0/0
 12214 ;;		On exit  : 0/0
 12215 ;;		Unchanged: 0/0
 12216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12221 ;;Total ram usage:        0 bytes
 12222 ;; Hardware stack levels used:    1
 12223 ;; Hardware stack levels required when called:    7
 12224 ;; This function calls:
 12225 ;;		Nothing
 12226 ;; This function is called by:
 12227 ;;		_nrf24l01SPIStart
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           
 12232                           ;psect for function _nrf24l01CSLow
 12233  07FB                     _nrf24l01CSLow:	
 12234                           
 12235                           ;interface.c: 18: PORTAbits.RA1 = 0;
 12236                           
 12237                           ;incstack = 0
 12238 ;; hardware stack exceeded
 12239                           ; Regs used in _nrf24l01CSLow: []
 12240  07FB  0020               	movlb	0	; select bank0
 12241  07FC  108C               	bcf	12,1	;volatile
 12242  07FD  0008               	return
 12243  07FE                     __end_of_nrf24l01CSLow:	
 12244                           
 12245                           	psect	text62
 12246  11DD                     __ptext62:	
 12247 ;; *************** function _nrf24l01SPISend *****************
 12248 ;; Defined at:
 12249 ;;		line 51 in file "interface.c"
 12250 ;; Parameters:    Size  Location     Type
 12251 ;;  data            1    wreg     unsigned char 
 12252 ;; Auto vars:     Size  Location     Type
 12253 ;;  data            1    0[COMMON] unsigned char 
 12254 ;; Return value:  Size  Location     Type
 12255 ;;                  1    wreg      unsigned char 
 12256 ;; Registers used:
 12257 ;;		wreg
 12258 ;; Tracked objects:
 12259 ;;		On entry : 0/0
 12260 ;;		On exit  : 0/0
 12261 ;;		Unchanged: 0/0
 12262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12267 ;;Total ram usage:        0 bytes
 12268 ;; Hardware stack levels used:    1
 12269 ;; Hardware stack levels required when called:    7
 12270 ;; This function calls:
 12271 ;;		Nothing
 12272 ;; This function is called by:
 12273 ;;		_nrf24l01Send
 12274 ;;		_nrf24l01ReceivePacket
 12275 ;;		_nrf24l01SendPacket
 12276 ;;		_nrf24l01SetTXPipe
 12277 ;;		_nrf24l01InitRegisters
 12278 ;;		i1_nrf24l01Send
 12279 ;; This function uses a non-reentrant model
 12280 ;;
 12281                           
 12282                           
 12283                           ;psect for function _nrf24l01SPISend
 12284  11DD                     _nrf24l01SPISend:	
 12285                           
 12286                           ;incstack = 0
 12287 ;; hardware stack exceeded
 12288                           ; Regs used in _nrf24l01SPISend: [wreg]
 12289                           ;nrf24l01SPISend@data stored from wreg
 12290  11DD  00F0               	movwf	nrf24l01SPISend@data
 12291                           
 12292                           ;interface.c: 52: SSP1BUF = data;
 12293  11DE  0870               	movf	nrf24l01SPISend@data,w
 12294  11DF  0024               	movlb	4	; select bank4
 12295  11E0  0091               	movwf	17	;volatile
 12296                           
 12297                           ;interface.c: 54: PORTCbits.RC4 = 1;
 12298  11E1  0020               	movlb	0	; select bank0
 12299  11E2  160E               	bsf	14,4	;volatile
 12300  11E3                     i1l48:	
 12301                           ;interface.c: 56: while (!SSP1STATbits.BF){
 12302                           
 12303  11E3  0024               	movlb	4	; select bank4
 12304  11E4  1814               	btfsc	20,0	;volatile
 12305  11E5  29E8               	goto	i1l3047
 12306                           
 12307                           ;interface.c: 57: __nop();
 12308  11E6  0000               	nop
 12309  11E7  29E3               	goto	i1l48
 12310  11E8                     i1l3047:	
 12311                           
 12312                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 12313  11E8  0811               	movf	17,w	;volatile
 12314  11E9  0008               	return
 12315  11EA                     __end_of_nrf24l01SPISend:	
 12316                           
 12317                           	psect	text63
 12318  11BD                     __ptext63:	
 12319 ;; *************** function _nrf24l01SPIEnd *****************
 12320 ;; Defined at:
 12321 ;;		line 70 in file "interface.c"
 12322 ;; Parameters:    Size  Location     Type
 12323 ;;		None
 12324 ;; Auto vars:     Size  Location     Type
 12325 ;;		None
 12326 ;; Return value:  Size  Location     Type
 12327 ;;                  1    wreg      void 
 12328 ;; Registers used:
 12329 ;;		wreg, status,2, status,0, pclath, cstack
 12330 ;; Tracked objects:
 12331 ;;		On entry : 0/0
 12332 ;;		On exit  : 0/0
 12333 ;;		Unchanged: 0/0
 12334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12339 ;;Total ram usage:        0 bytes
 12340 ;; Hardware stack levels used:    1
 12341 ;; Hardware stack levels required when called:    8
 12342 ;; This function calls:
 12343 ;;		_nrf24l01CSHigh
 12344 ;; This function is called by:
 12345 ;;		_nrf24l01Send
 12346 ;;		_nrf24l01ReceivePacket
 12347 ;;		_nrf24l01SendPacket
 12348 ;;		_nrf24l01SetTXPipe
 12349 ;;		_nrf24l01InitRegisters
 12350 ;;		i1_nrf24l01Send
 12351 ;; This function uses a non-reentrant model
 12352 ;;
 12353                           
 12354                           
 12355                           ;psect for function _nrf24l01SPIEnd
 12356  11BD                     _nrf24l01SPIEnd:	
 12357                           
 12358                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12359                           
 12360                           ;incstack = 0
 12361 ;; hardware stack exceeded
 12362                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 12363  11BD  301A               	movlw	26
 12364  11BE                     u488_27:	
 12365  11BE  0B89               	decfsz	9,f
 12366  11BF  29BE               	goto	u488_27
 12367  11C0  3200               	nop2
 12368                           
 12369                           ;interface.c: 72: nrf24l01CSHigh();
 12370  11C1  3191  21B4         	fcall	_nrf24l01CSHigh
 12371  11C3  0008               	return
 12372  11C4                     __end_of_nrf24l01SPIEnd:	
 12373                           
 12374                           	psect	text64
 12375  11B4                     __ptext64:	
 12376 ;; *************** function _nrf24l01CSHigh *****************
 12377 ;; Defined at:
 12378 ;;		line 22 in file "interface.c"
 12379 ;; Parameters:    Size  Location     Type
 12380 ;;		None
 12381 ;; Auto vars:     Size  Location     Type
 12382 ;;		None
 12383 ;; Return value:  Size  Location     Type
 12384 ;;                  1    wreg      void 
 12385 ;; Registers used:
 12386 ;;		None
 12387 ;; Tracked objects:
 12388 ;;		On entry : 0/0
 12389 ;;		On exit  : 0/0
 12390 ;;		Unchanged: 0/0
 12391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;Total ram usage:        0 bytes
 12397 ;; Hardware stack levels used:    1
 12398 ;; Hardware stack levels required when called:    7
 12399 ;; This function calls:
 12400 ;;		Nothing
 12401 ;; This function is called by:
 12402 ;;		_nrf24l01SPIEnd
 12403 ;; This function uses a non-reentrant model
 12404 ;;
 12405                           
 12406                           
 12407                           ;psect for function _nrf24l01CSHigh
 12408  11B4                     _nrf24l01CSHigh:	
 12409                           
 12410                           ;interface.c: 23: PORTAbits.RA1 = 1;
 12411                           
 12412                           ;incstack = 0
 12413 ;; hardware stack exceeded
 12414                           ; Regs used in _nrf24l01CSHigh: []
 12415  11B4  0020               	movlb	0	; select bank0
 12416  11B5  148C               	bsf	12,1	;volatile
 12417  11B6  0008               	return
 12418  11B7                     __end_of_nrf24l01CSHigh:	
 12419                           
 12420                           	psect	text65
 12421  11C4                     __ptext65:	
 12422 ;; *************** function _enableInterrupts *****************
 12423 ;; Defined at:
 12424 ;;		line 76 in file "interface.c"
 12425 ;; Parameters:    Size  Location     Type
 12426 ;;  enable          1    wreg     unsigned char 
 12427 ;; Auto vars:     Size  Location     Type
 12428 ;;  enable          1    0[COMMON] unsigned char 
 12429 ;; Return value:  Size  Location     Type
 12430 ;;                  1    wreg      void 
 12431 ;; Registers used:
 12432 ;;		wreg, status,0
 12433 ;; Tracked objects:
 12434 ;;		On entry : 0/0
 12435 ;;		On exit  : 0/0
 12436 ;;		Unchanged: 0/0
 12437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;Total ram usage:        0 bytes
 12443 ;; Hardware stack levels used:    1
 12444 ;; Hardware stack levels required when called:    7
 12445 ;; This function calls:
 12446 ;;		Nothing
 12447 ;; This function is called by:
 12448 ;;		_nrf24l01Send
 12449 ;;		_nrf24l01SendPacket
 12450 ;;		i1_nrf24l01Send
 12451 ;; This function uses a non-reentrant model
 12452 ;;
 12453                           
 12454                           
 12455                           ;psect for function _enableInterrupts
 12456  11C4                     _enableInterrupts:	
 12457                           
 12458                           ;incstack = 0
 12459 ;; hardware stack exceeded
 12460                           ; Regs used in _enableInterrupts: [wreg+status,0]
 12461                           ;enableInterrupts@enable stored from wreg
 12462  11C4  00F0               	movwf	enableInterrupts@enable
 12463                           
 12464                           ;interface.c: 77: PIE0bits.INTE = enable;
 12465  11C5  0C70               	rrf	enableInterrupts@enable,w
 12466  11C6  0021               	movlb	1	; select bank1
 12467  11C7  1C03               	skipc
 12468  11C8  1010               	bcf	16,0	;volatile
 12469  11C9  1803               	skipnc
 12470  11CA  1410               	bsf	16,0	;volatile
 12471  11CB  0008               	return
 12472  11CC                     __end_of_enableInterrupts:	
 12473                           
 12474                           	psect	text66
 12475  11B1                     __ptext66:	
 12476 ;; *************** function _nrf24l01CELow *****************
 12477 ;; Defined at:
 12478 ;;		line 7 in file "interface.c"
 12479 ;; Parameters:    Size  Location     Type
 12480 ;;		None
 12481 ;; Auto vars:     Size  Location     Type
 12482 ;;		None
 12483 ;; Return value:  Size  Location     Type
 12484 ;;                  1    wreg      void 
 12485 ;; Registers used:
 12486 ;;		None
 12487 ;; Tracked objects:
 12488 ;;		On entry : 0/0
 12489 ;;		On exit  : 0/0
 12490 ;;		Unchanged: 0/0
 12491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;Total ram usage:        0 bytes
 12497 ;; Hardware stack levels used:    1
 12498 ;; Hardware stack levels required when called:    7
 12499 ;; This function calls:
 12500 ;;		Nothing
 12501 ;; This function is called by:
 12502 ;;		_nrf24l01SetRXMode
 12503 ;;		_nrf24l01ReceivePacket
 12504 ;;		_nrf24l01SendPacket
 12505 ;;		_nrf24l01Init
 12506 ;;		i1_nrf24l01SetRXMode
 12507 ;; This function uses a non-reentrant model
 12508 ;;
 12509                           
 12510                           
 12511                           ;psect for function _nrf24l01CELow
 12512  11B1                     _nrf24l01CELow:	
 12513                           
 12514                           ;interface.c: 8: PORTAbits.RA0 = 0;
 12515                           
 12516                           ;incstack = 0
 12517 ;; hardware stack exceeded
 12518                           ; Regs used in _nrf24l01CELow: []
 12519  11B1  0020               	movlb	0	; select bank0
 12520  11B2  100C               	bcf	12,0	;volatile
 12521  11B3  0008               	return
 12522  11B4                     __end_of_nrf24l01CELow:	
 12523                           
 12524                           	psect	text67
 12525  11AE                     __ptext67:	
 12526 ;; *************** function _nrf24l01CEHigh *****************
 12527 ;; Defined at:
 12528 ;;		line 12 in file "interface.c"
 12529 ;; Parameters:    Size  Location     Type
 12530 ;;		None
 12531 ;; Auto vars:     Size  Location     Type
 12532 ;;		None
 12533 ;; Return value:  Size  Location     Type
 12534 ;;                  1    wreg      void 
 12535 ;; Registers used:
 12536 ;;		None
 12537 ;; Tracked objects:
 12538 ;;		On entry : 0/0
 12539 ;;		On exit  : 0/0
 12540 ;;		Unchanged: 0/0
 12541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12546 ;;Total ram usage:        0 bytes
 12547 ;; Hardware stack levels used:    1
 12548 ;; Hardware stack levels required when called:    7
 12549 ;; This function calls:
 12550 ;;		Nothing
 12551 ;; This function is called by:
 12552 ;;		_nrf24l01SetRXMode
 12553 ;;		_nrf24l01ReceivePacket
 12554 ;;		_nrf24l01SendPacket
 12555 ;;		_nrf24l01Init
 12556 ;;		i1_nrf24l01SetRXMode
 12557 ;; This function uses a non-reentrant model
 12558 ;;
 12559                           
 12560                           
 12561                           ;psect for function _nrf24l01CEHigh
 12562  11AE                     _nrf24l01CEHigh:	
 12563                           
 12564                           ;interface.c: 13: PORTAbits.RA0 = 1;
 12565                           
 12566                           ;incstack = 0
 12567 ;; hardware stack exceeded
 12568                           ; Regs used in _nrf24l01CEHigh: []
 12569  11AE  0020               	movlb	0	; select bank0
 12570  11AF  140C               	bsf	12,0	;volatile
 12571  11B0  0008               	return
 12572  11B1                     __end_of_nrf24l01CEHigh:	
 12573                           
 12574                           	psect	text68
 12575  13F4                     __ptext68:	
 12576 ;; *************** function _strcmp *****************
 12577 ;; Defined at:
 12578 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 12579 ;; Parameters:    Size  Location     Type
 12580 ;;  s1              2    0[COMMON] PTR const unsigned char 
 12581 ;;		 -> packet.Message(32), packet.Message(32), RXPacket.Message(32), RXPacket(33), 
 12582 ;;		 -> main@packet(33), loop@packet(33), NULL(0), 
 12583 ;;  s2              1    2[COMMON] PTR const unsigned char 
 12584 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 12585 ;; Auto vars:     Size  Location     Type
 12586 ;;  r               1    4[COMMON] char 
 12587 ;; Return value:  Size  Location     Type
 12588 ;;                  2    0[COMMON] int 
 12589 ;; Registers used:
 12590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 12591 ;; Tracked objects:
 12592 ;;		On entry : 0/0
 12593 ;;		On exit  : 0/0
 12594 ;;		Unchanged: 0/0
 12595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12596 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12597 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12598 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12599 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12600 ;;Total ram usage:        5 bytes
 12601 ;; Hardware stack levels used:    1
 12602 ;; This function calls:
 12603 ;;		Nothing
 12604 ;; This function is called by:
 12605 ;;		_nrf24l01CheckACK
 12606 ;; This function uses a non-reentrant model
 12607 ;;
 12608                           
 12609                           
 12610                           ;psect for function _strcmp
 12611  13F4                     _strcmp:	
 12612                           
 12613                           ;incstack = 0
 12614                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
 12615  13F4  2BFD               	goto	i1l3761
 12616  13F5                     i1l3757:	
 12617  13F5  3001               	movlw	1
 12618  13F6  07F0               	addwf	strcmp@s1,f
 12619  13F7  3000               	movlw	0
 12620  13F8  3DF1               	addwfc	strcmp@s1+1,f
 12621  13F9  3001               	movlw	1
 12622  13FA  00F3               	movwf	??_strcmp
 12623  13FB  0873               	movf	??_strcmp,w
 12624  13FC  07F2               	addwf	strcmp@s2,f
 12625  13FD                     i1l3761:	
 12626  13FD  0870               	movf	strcmp@s1,w
 12627  13FE  0086               	movwf	6
 12628  13FF  0871               	movf	strcmp@s1+1,w
 12629  1400  0087               	movwf	7
 12630  1401  0872               	movf	strcmp@s2,w
 12631  1402  0084               	movwf	4
 12632  1403  3001               	movlw	1	; select bank2/3
 12633  1404  0085               	movwf	5
 12634  1405  0300               	decf	0,w
 12635  1406  3AFF               	xorlw	255
 12636  1407  0701               	addwf	1,w
 12637  1408  00F3               	movwf	??_strcmp
 12638  1409  0873               	movf	??_strcmp,w
 12639  140A  00F4               	movwf	strcmp@r
 12640  140B  0874               	movf	strcmp@r,w
 12641  140C  1D03               	btfss	3,2
 12642  140D  2C15               	goto	i1l3765
 12643  140E  0870               	movf	strcmp@s1,w
 12644  140F  0086               	movwf	6
 12645  1410  0871               	movf	strcmp@s1+1,w
 12646  1411  0087               	movwf	7
 12647  1412  0801               	movf	1,w
 12648  1413  1D03               	btfss	3,2
 12649  1414  2BF5               	goto	i1l3757
 12650  1415                     i1l3765:	
 12651  1415  0874               	movf	strcmp@r,w
 12652  1416  00F0               	movwf	?_strcmp
 12653  1417  01F1               	clrf	?_strcmp+1
 12654  1418  1BF0               	btfsc	?_strcmp,7
 12655  1419  03F1               	decf	?_strcmp+1,f
 12656  141A  0008               	return
 12657  141B                     __end_of_strcmp:	
 12658                           
 12659                           	psect	text69
 12660  0002                     __ptext69:	
 12661 ;; *************** function _exception *****************
 12662 ;; Defined at:
 12663 ;;		line 80 in file "interface.c"
 12664 ;; Parameters:    Size  Location     Type
 12665 ;;  exception       1    wreg     unsigned char 
 12666 ;; Auto vars:     Size  Location     Type
 12667 ;;  exception       1    0[COMMON] unsigned char 
 12668 ;; Return value:  Size  Location     Type
 12669 ;;                  1    wreg      void 
 12670 ;; Registers used:
 12671 ;;		wreg
 12672 ;; Tracked objects:
 12673 ;;		On entry : 0/0
 12674 ;;		On exit  : 0/0
 12675 ;;		Unchanged: 0/0
 12676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;Total ram usage:        0 bytes
 12682 ;; Hardware stack levels used:    1
 12683 ;; This function calls:
 12684 ;;		Nothing
 12685 ;; This function is called by:
 12686 ;;		_nrf24l01ISR
 12687 ;; This function uses a non-reentrant model
 12688 ;;
 12689                           
 12690                           
 12691                           ;psect for function _exception
 12692  0002                     _exception:	
 12693                           
 12694                           ;incstack = 0
 12695                           ; Regs used in _exception: [wreg]
 12696  0002  0001               	reset	;# 
 12697  0003  0008               	return
 12698  0004                     __end_of_exception:	
 12699  007E                     btemp	set	126	;btemp
 12700  007E                     int$flags	set	126
 12701  007E                     wtemp0	set	126


Data Sizes:
    Strings     49
    Constant    46
    Data        1
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80     72      77
    BANK2            80     48      68
    BANK3            80      0      61
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> setMessage@status(BANK1[2]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), NULL(NULL[0]), STR_1(CODE[2]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), NULL(NULL[0]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strtok@sp	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), NULL(NULL[0]), romDataMap(BANK3[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), NULL(NULL[0]), romDataMap(BANK3[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), STR_11(CODE[4]), NULL(NULL[0]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 28
		 -> handleRXData@string(BANK1[16]), romDataMap(BANK3[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 28
		 -> handleRXData@string(BANK1[16]), romDataMap(BANK3[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), NULL(NULL[0]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 28
		 -> romDataMap.name(BANK3[16]), ftoa@buf(BANK2[17]), STR_12(CODE[5]), STR_10(CODE[6]), 
		 -> STR_9(CODE[7]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), romDataMap(BANK3[28]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    atof@s	PTR const unsigned char  size(1) Largest target is 16
		 -> handleRXData@string(BANK1[16]), 

    strtod@s	PTR const unsigned char  size(1) Largest target is 16
		 -> handleRXData@string(BANK1[16]), 

    strtod@res	PTR PTR const unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_13(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@Packet	PTR struct . size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    TXPacket	PTR struct . size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), NULL(NULL[0]), 

    nrf24l01SendACK@packet	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[5]), STR_10(CODE[6]), STR_9(CODE[7]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[4]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    setMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 28
		 -> handleRXData@string(BANK1[16]), romDataMap(BANK3[28]), 

    sp__strtok	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), NULL(NULL[0]), 

    handleRXData@strings	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), NULL(NULL[0]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    handleRXData@RXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01ReceivePacket
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _sleep->_handleRXData
    _handleRXData->_atof
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _nrf24l01SendACK->_nrf24l01SendPacket
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SendPacket->_nrf24l01ChangeTXPower
    _nrf24l01SetRXMode->_nrf24l01Send
    _atof->_strtod
    _strtod->___ftmul
    ___altoft->___ftpack
    _setMessage->_ftoa
    _strcat->_ftoa
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_setMessage
    _sleep->_handleRXData
    _handleRXData->_atof
    _atof->_strtod
    _setMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0  153243
                                             36 BANK1     36    36      0
                           ___lbtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5687
                                             19 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5687
                                              7 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2239
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     658
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                49    49      0   88669
                                             35 BANK1      1     1      0
                                              0 BANK2     48    48      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                2     0      2   27314
                                             30 BANK1      2     0      2
                            ___lwdiv
                         _doWDTSleep
                       _handleRXData
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _handleRXData                                        19    19      0   23930
                                             79 BANK0      1     1      0
                                             12 BANK1     18    18      0
                               _atof
                _nrf24l01GetRXPacket
                    _nrf24l01SendACK
                             _strcpy
                             _strtok
 ---------------------------------------------------------------------------------
 (3) _strtok                                               6     4      2    1895
                                             14 BANK0      6     4      2
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (4) _strspn                                               7     5      2     660
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strcspn                                              7     5      2     660
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (5) _strchr                                               7     3      4     444
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     697
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SendACK                                      2     2      0    6046
                                             14 BANK0      2     2      0
                 _nrf24l01SendPacket
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SetTXPipe                                    3     3      0     492
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SendPacket                                   7     5      2    5386
                                              7 BANK0      7     5      2
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     170
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2299
                                              3 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _atof                                                 5     1      4   14919
                                             78 BANK0      1     1      0
                                              8 BANK1      4     0      4
                             _strtod
 ---------------------------------------------------------------------------------
 (4) _strtod                                              15    12      3   14861
                                             71 BANK0      7     4      3
                                              0 BANK1      8     8      0
                           ___altoft
                             ___bmul
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     270
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     448
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    3239
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     340
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          10     3      7   18821
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     743
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     476
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   16074
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3170
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4809
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     312
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             16    10      6    4050
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6     670
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   12364
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (2) _doWDTSleep                                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             16    10      6    4360
                                             27 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4564
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3281
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              7 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              3 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    2143
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    3034
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    3012
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                 0     0      0    1578
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (11) _nrf24l01ISR                                         2     2      0    1578
                                             11 COMMON     2     2      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01ReceivePacket                               3     3      0     534
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) i1_memset                                            8     2      6     152
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CheckACK                                    3     3      0     643
                                              7 COMMON     3     3      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (13) i1_nrf24l01SetRXMode                                 3     3      0     423
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _strcmp                                              5     2      3     220
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (12) _exception                                           1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lbtoft
     ___ftpack
   _loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___lbtoft
       ___ftpack
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       ___lbtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
       _memset (ARG)
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
     _sleep
       ___lwdiv
       _doWDTSleep
       _handleRXData
         _atof
           _strtod
             ___altoft
               ___ftpack
             ___bmul
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftge
             ___ftmul
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
             ___ftneg
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
             ___lmul
             _isdigit
             _isspace
         _nrf24l01GetRXPacket
         _nrf24l01SendACK
           _nrf24l01SendPacket
             _enableInterrupts
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01ChangeTXPower
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
             _nrf24l01SetRXMode
               _nrf24l01CEHigh
               _nrf24l01CELow
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _strlen
           _nrf24l01SetTXPipe
             ___bmul
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
         _strcpy
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     ___lbtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _memset (ARG)
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
   _sleep
     ___lwdiv
     _doWDTSleep
     _handleRXData
       _atof
         _strtod
           ___altoft
             ___ftpack
           ___bmul
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___lmul
           _isdigit
           _isspace
       _nrf24l01GetRXPacket
       _nrf24l01SendACK
         _nrf24l01SendPacket
           _enableInterrupts
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01ChangeTXPower
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strlen
         _nrf24l01SetTXPipe
           ___bmul
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strcpy
       _strtok
         _strcspn
           _strchr
         _strspn
           _strchr
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     30      44       9       85.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Jul 29 21:25:55 2018

                  ___altoft@exp 002E                  ___bmul@product 0022                     __CFG_CP$OFF 0000  
                 ___altoft@sign 002F             ___wmul@multiplicand 0022             handleRXData@strings 00BD  
           nrf24l01Send@command 0022                    ___ftadd@exp1 003A                    ___ftadd@exp2 0039  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0038                             l309 0D4A  
                           l342 139A                             l177 078D                             l194 0AEC  
                           l700 096B                             l463 039F                             l474 0442  
                           l466 03BE                             l723 0FA9                             l489 1301  
                           l914 00E0                             l915 0094                             l692 0950  
                           l932 01BE                             l783 0A6D                             l943 02CE  
                           l699 0963                    __CFG_CPD$OFF 0000                             _ISR 0004  
                           wreg 0009               sleep@milliseconds 00BE             nrf24l01SendPacket@i 002D  
                          ?_ISR 0070                    ___ftdiv@cntr 0045                    ___ftdiv@sign 004A  
                ??_nrf24l01Init 0033                            l1046 128D                            l3001 0C6A  
                          l3111 0DE7                            l3121 0E0E                            l3211 0F75  
                          l3027 121B                            l3123 0DEC                            l3213 0F7F  
                          l3205 0F62                            l3141 12FB                            l3029 121C  
                          l3301 007D                            l3109 0DD5                            l4101 149D  
                          l3223 0F9B                            l3215 0F84                            l3071 0D61  
                          l4103 14A9                            l4111 14BE                            l3233 0FCD  
                          l3225 0FA5                            l3217 0F88                            l3161 08E9  
                          l3243 0FE8                            l3403 024B                            l3323 00F9  
                          l3091 0D9E                            l4107 14B5                            l3229 0FBB  
                          l3173 0914                            l3253 16FA                            l3413 02A0  
                          l3333 010F                            l3317 00E9                            l3069 0D4F  
                          l3501 087A                            l4221 15AE                            l3183 0F32  
                          l3159 08DB                            l3255 1708                            l3263 172B  
                          l3423 02C6                            l3407 0273                            l3335 0115  
                          l3095 0DBF                            l3087 0D85                            l3503 087B  
                          l4063 0751                            l3193 0F48                            l3169 0909  
                          l3409 0278                            l3353 0178                            l3329 0108  
                          l3273 003D                            l3441 082D                            l4057 0742  
                          l4049 06F8                  ??_nrf24l01Send 0021                            l3187 0F39  
                          l3259 1720                            l3611 04B2                            l3531 032F  
                          l3283 0058                            l3275 004F                            l3435 0807  
                          l4219 158B                            l3605 046D                            l3525 031F  
                          l3613 02FC                            l3429 02EA                            l3381 01F0  
                          l3365 0192                            l3357 017D                            l3293 007B  
                          l3285 005C                            l3453 154C                            l3437 080F  
                          l2831 16E9                            l2911 0B62                            l3623 1338  
                          l3615 04BD                            l3551 039B                            l3295 006D  
                          l3287 0062                            l2815 176F                            l3447 1526  
                          l2761 092D                            l2825 16D7                            l2905 0B4C  
                          l3633 0A0B                            l3553 03A1                            l3713 1279  
                          l3721 142C                            l3385 0218                            l3449 152E  
                          l2771 0955                            l2763 0937                            l3651 0A44  
                          l2851 11F7                            l3563 03CD                            l3539 035D  
                          l3723 1434                            l3803 1581                            l3395 023C  
                          l3379 01C2                            l4347 12E2                            l2773 095D  
                          l2765 093C                            l2757 0926                            l2933 0BBC  
                          l2925 0BA3                            l3661 0A71                            l3653 0A55  
                          l3573 03EC                            l3557 03A6                            l3549 036C  
                          l2861 1504                            l2837 1353                            l3493 0857  
                          l3485 0840                            l4365 17C4                            l3903 0B26  
                          l3735 0E5E                            l3719 1420                            l2871 11FC  
                          l3399 0244                            l2839 135F                            l3479 083B  
                          l4375 17FB                            l4551 0D46                            l3905 0B2D  
                          l2945 15D5                            l3665 0A7F                            l3673 1471  
                          l3585 041F                            l2857 14FA                            l4377 17E0  
                          l4393 04F6                            l3753 13A6                            l3659 0A63  
                          l3675 1481                            l3595 0455                            l3579 03F2  
                          l2875 1202                            l2795 173C                            l2949 15EB  
                          l2973 0C0B                            l3597 0458                            l3589 042E  
                          l2893 164C                            l2967 0BF5                            l3791 155A  
                          l2895 165C                            l3777 13B9                            l2985 0C46  
                          l3793 1566                            l3891 0AAF                            l2997 0C62  
                          l2989 0C4E                            l3887 0ABB                            l3799 1578  
                          l3889 0AC3                            l3899 0B0E                            STR_1 185D  
                  __CFG_WDTE$ON 0000                            STR_2 185D                            STR_3 185D  
                          STR_4 185D                            STR_5 185D                            STR_6 1859  
                          STR_7 1846                            STR_8 184B                            STR_9 1834  
                          u3115 08EA                            u2405 0958                            u3125 08FE  
                          u3135 090A                            u3055 1302                            u2505 16C5  
                          u3305 0F89                            u3065 1307                            u2445 0972  
                          u2365 0932                            u3245 0F63                            u4125 0A64  
                          u3335 0F9C                            u3095 08DE                            u3415 1716  
                          u2385 094B                            u2705 0BA4                            u4065 0A13  
                          u3425 1721                            u4305 1567                            u4234 13A0  
                          u3275 0F76                            u2715 0BB3                            u4155 1476  
                          u4315 1571                            u4235 139F                            u2725 0BBD  
                          u2805 0C27                            u4325 1579                            u2645 1651  
                          u4095 0A45                            u2825 0C4F                            u2585 1505  
                          u2835 0C55                            u3395 16FD                            u2595 150C  
                          u2685 0B74                            u4285 155D                            u2695 0B84  
                          u2865 0C6B                            u2875 0C71                            u2795 0C17  
                          u4555 14A0                            u4807 0E12                            u4575 14AF  
                          u4655 159C                            i1l48 11E3                            u4817 174F  
                          u2985 0DB9                            u4585 14B6                            u4737 0CB4  
                          u3955 0415                            u4827 1761                            u4747 13DC  
                          u4837 176C                            u4757 13EB                            u3975 0426  
                          u4767 0D5B                            u3985 0438                            u4777 0DC6  
                          u3995 044A                            u4787 0DE1                            u4797 0E00  
                          _WPUA 020C                            _WPUC 020E  __size_of_nrf24l01InterfaceInit 001C  
                  __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 1330  
                          _atof 121E                            _main 0C92                            _ftoa 0E18  
                  ___ftpack@arg 0020                            _loop 04C3                    ___ftpack@exp 0023  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            indf1 0001                            fsr1l 0006  
                          btemp 007E  __size_of_nrf24l01ReceivePacket 004D                   __CFG_BORV$LOW 0000  
 __end_of_nrf24l01ReceivePacket 08CA                            start 000F           nrf24l01SetRXPipe@pipe 0025  
                 __CFG_CSWEN$ON 0000               ___bmul@multiplier 0023                   __CFG_MCLRE$ON 0000  
                  ___ftmul@cntr 0065                    ___ftmul@sign 0066     __size_of_nrf24l01SendPacket 00CE  
                         ??_ISR 007D                    ___fttol@exp1 00A5            __size_of_getADCValue 00A6  
               ??_nrf24l01CELow 0070                    ___fttol@lval 00A1                 ??_nrf24l01CSLow 0070  
                         ?_atof 00A8                           ?_main 0070                           ?_ftoa 00A6  
                         ?_loop 0070                 __end_of___ftadd 1000                           STR_10 183B  
                         STR_11 1855                           STR_12 1850                           STR_13 1829  
               __end_of___ftdiv 0BDE                 __end_of___ftneg 11DD                 __end_of___lldiv 091D  
               __end_of___ftmul 0C92                 __end_of___llmod 1734                 __end_of___ftsub 134E  
               __end_of___fttol 0A8F                  __CFG_DEBUG$OFF 0000                 __end_of___lwdiv 1586  
                         i1l171 000D                           i1l332 1687                           i1l334 16A9  
               __end_of___lwmod 14C3          enableInterrupts@enable 0070                      i1memset@p1 0070  
           ___lmul@multiplicand 0024                   __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026  
                  ___lltoft@exp 002D                   ___awtoft@sign 002D                 __end_of_dpowers 1828  
               __end_of_isdigit 11F9                           _sleep 17BB                   ___ftpack@sign 0024  
                         atof@s 006E                           ftoa@f 00A6                           ftoa@l 00AE  
               __end_of_isspace 121E                  __CFG_BOREN$OFF 0000                _enableInterrupts 11C4  
                         status 0003                           wtemp0 007E                 __end_of_sprintf 04C3  
   __end_ofi1_nrf24l01SetRXMode 1637                __end_ofi1_memset 1274                 __end_of_strcspn 1551  
__size_of_nrf24l01ChangeTXPower 003F               getADCValue@adcSum 0054   __end_of_nrf24l01ChangeTXPower 16F1  
              _nrf24l01SPIStart 11CC                 __initialization 0011                _nrf24l01CheckACK 1442  
        nrf24l01InitRegisters@i 0031                    __end_of_atof 1231                    __end_of_main 0D4A  
                  __end_of_ftoa 0F0A            __end_of_handleRXData 07FB                    __end_of_loop 0675  
  nrf24l01ChangeTXPower@rfSetup 0026                ??_nrf24l01CEHigh 0070                          ??_atof 006E  
                        ??_main 00C4                          ??_ftoa 006F                   ___fttol@sign1 00A0  
                        ??_loop 00C3                ??_nrf24l01CSHigh 0070                ??_nrf24l01SPIEnd 0070  
           _nrf24l01GetRXPacket 07FE        __size_of_nrf24l01SPISend 000D                __end_of___altoft 1674  
              ___llmod@dividend 0032                          _ADRESH 009C                          _ADRESL 009B  
                        ?_sleep 00BE                __end_of___awtoft 13D0                          _ANSELA 018C  
                        _ANSELC 018E                __end_of___ftpack 0982                __end_of___lbtoft 12DD  
              __end_of___lltoft 1496                          _ODCONA 028C        __size_of_nrf24l01GetPipe 0038  
                        _ODCONC 028E                          i1l3047 11E8                          i1l4123 1683  
                        i1l4139 16AA                          i1l3813 1601                          i1l3761 13FD  
                        i1l3833 1630                          i1l3841 1260                          i1l3765 1415  
                        i1l3757 13F5                          i1l3973 08C4                          i1l3965 08AC  
                        i1l3969 08BC                          _INLVLA 038C                          _INLVLC 038E  
         __size_of_checkTXPower 0014                          u484_27 1612                          u485_27 1623  
                        u486_27 162D                          u487_27 11D0                          u488_27 11BE  
                        _STATUS 0003        __size_of_nrf24l01SendACK 002E            ?_nrf24l01GetRXPacket 0070  
          __size_of_nrf24l01ISR 003E         nrf24l01SetRXMode@config 0024                          ___bmul 11F9  
                        ___ftge 15BE                          ___lmul 14F1         nrf24l01SetRXMode@rxMode 0025  
                        ___wmul 12F8                       ??___ftadd 0034                  __CFG_STVREN$ON 0000  
                     ??___ftdiv 0041                       ??___ftneg 005A                       ??___lldiv 0028  
                     ??___ftmul 005D                       ??___llmod 0036                       ??___ftsub 0041  
                     ??___fttol 006B                       ??___lwdiv 0024                       ??___lwmod 0024  
          __end_of_nrf24l01Init 13F4            __end_of_nrf24l01Send 138D                          _memset 1274  
         _nrf24l01InitRegisters 0675                          _strcat 141B                          _strchr 128D  
                        _strcmp 13F4                          _strcpy 12DD                          _strlen 134E  
                        _strtod 002E                          _strtok 0832                          _strspn 0802  
                        ftoa@cp 00B2           ___ftmul@f3_as_product 0062       i1nrf24l01SetRXMode@config 0075  
                     ??_isdigit 0020                          loop@ta 0123                          loop@vt 0120  
     i1nrf24l01SetRXMode@rxMode 0076                    _checkTXPower 1231                       ??_isspace 0020  
                     ??_sprintf 0042                       ??_strcspn 0029              getADCValue@adcLoop 0051  
       __end_of__initialization 002A                      ___altoft@c 0028                      ___ftadd@f1 002E  
                    ___ftadd@f2 0031                      ___ftge@ff1 0020                      ___ftge@ff2 0023  
         ??_nrf24l01GetRXPacket 0020        nrf24l01SendPacket@Packet 0027              getADCValue@channel 0053  
                    ___ftdiv@f1 003E                      ___ftdiv@f2 003B                      ___ftdiv@f3 0046  
                    ___ftneg@f1 0057                      ___awtoft@c 0028                      ___lbtoft@c 002F  
           ___bmul@multiplicand 0020                      ___ftmul@f1 0057                      ___ftmul@f2 005A  
                    ___ftsub@f1 003E                      ___ftsub@f2 003B                      ___fttol@f1 0067  
                __pcstackCOMMON 0070                    __pidataBANK1 0801                      ___lltoft@c 0028  
                    _doWDTSleep 1245                   __end_of_sleep 1800                       ?i1_memset 0070  
                       ??_sleep 0070                    sprintf@width 004F                     loop@rfSetup 012C  
                    __pbssBANK1 00E8                      __pbssBANK2 0150                      __pbssBANK3 01A0  
             ??_nrf24l01SPISend 0070              __size_of_exception 0002           __size_of_handleRXData 0080  
       __size_ofi1_nrf24l01Send 001B               ??_nrf24l01GetPipe 0026                      __pmaintext 0C92  
                main@bootStatus 00C5                         ?___bmul 0020                         ?___ftge 0020  
                       ?___lmul 0020                         ?___wmul 0020               ??_nrf24l01SendACK 002E  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 1734               _nrf24l01SetRXPipe 138D  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 1777  
                     ?___altoft 0028             nrf24l01SPISend@data 0070                         ?_memset 0020  
                ___lmul@product 0028              ?_nrf24l01SetRXMode 0070                       ?___awtoft 0028  
                     ?___ftpack 0020                       ?___lbtoft 0028              ?_nrf24l01SetRXPipe 0070  
      __end_of_enableInterrupts 11CC              ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0028  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00B3                         ?_strchr 0020  
                       ?_strcmp 0070                         ?_strcpy 0020                         ?_strlen 0020  
                       ?_strtod 0067                         ?_strtok 002E                         ?_strspn 0027  
         __end_of_n_ADDRESS_MUL 1829                      ??i1_memset 0076             ??_nrf24l01SetRXMode 0023  
      __end_of_nrf24l01SPIStart 11D4             ??_nrf24l01SetRXPipe 0023             ??_nrf24l01SetTXPipe 0024  
                       _SSP1BUF 0211        __end_of_nrf24l01CheckACK 146C                    _handleRXData 077B  
         _nrf24l01InterfaceInit 1314      __end_of_nrf24l01SendPacket 0E18                   ??_getADCValue 004E  
         __size_of_nrf24l01Init 0024           __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 1777  
     __end_of_nrf24l01SetRXPipe 13AE       __end_of_nrf24l01SetTXPipe 17BB           _nrf24l01ReceivePacket 087D  
               __size_of___bmul 0012                 __size_of___ftge 003C                 __size_of___lmul 0030  
                       ___ftadd 0F0A                     ?_doWDTSleep 0070                         ___ftdiv 0B35  
                       ___ftneg 11D4                         ___lldiv 08CA                 __size_of___wmul 001C  
                       ___ftmul 0BDE                         ___llmod 16F1                         ___ftsub 1330  
                       ___fttol 09F0                         ___lwdiv 1551                         ___lwmod 1496  
                    ??___altoft 002C                      ??___awtoft 002B                      ??___ftpack 0025  
                    ??___lbtoft 002B           __end_of_nrf24l01CELow 11B4                 __size_of_memset 0019  
         __end_of_nrf24l01CSLow 07FE                      ??___lltoft 002C                         __ptext1 13D0  
                       __ptext2 1314                         __ptext3 0675                         __ptext4 138D  
                       __ptext5 1586                         __ptext6 1496                         __ptext7 04C3  
                       __ptext8 17BB                         __ptext9 077B                 __size_of_strcat 0027  
               __size_of_strchr 001A                 __size_of_strcmp 0027               __end_of_exception 0004  
               __size_of_strcpy 001B                 __size_of_strlen 001F                    __size_of_ISR 000B  
               __size_of_strtod 02C8                 __size_of_strtok 004B                 __size_of_strspn 0030  
                       _counter 0150                         _dpowers 1800                         _isdigit 11EA  
                       _isspace 120B                         _romData 00EC                         _sprintf 02F6  
                       clrloop0 11B8                         _strcspn 1521            end_of_initialization 002A  
                       ftoa@buf 0153                         ftoa@rem 00AA                    _nrf24l01Init 13D0  
                    _setMessage 0982                    _nrf24l01Send 136D                      _romDataMap 01C1  
                       memset@c 0022                         memset@n 0024                         memset@p 0026  
              nrf24l01GetPipe@i 002A                 ___lldiv@divisor 0020                 ___lldiv@counter 002D  
         _nrf24l01ChangeTXPower 16B2                setMessage@packet 00B9    __size_ofi1_nrf24l01SetRXMode 003D  
              setMessage@status 00C1                         strcmp@r 0074           i1nrf24l01Send@command 0073  
                       strlen@s 0020             __end_of_getADCValue 0B35                         strtod@s 00A7  
                       strspn@i 002B                       _PORTAbits 000C                       _PORTCbits 000E  
                     _TRISAbits 008C                       _TRISCbits 008E                nrf24l01Send@data 0020  
            handleRXData@string 00AC                __CFG_FEXTOSC$OFF 0000             __size_of_doWDTSleep 0017  
                 ??_nrf24l01ISR 007B          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0049  
                i1_nrf24l01Send 12A7                      main@packet 00C7          ?_nrf24l01ReceivePacket 0070  
    __size_of_nrf24l01SetRXMode 0043      __size_of_nrf24l01SetRXPipe 0021                     ___ftmul@exp 0061  
    __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 120B                  __end_of___ftge 15FA  
                __end_of___lmul 1521                  __end_of___wmul 1314                       i1memset@c 0072  
                     i1memset@n 0074                       i1memset@p 0076                  __end_of_memset 128D  
                __end_of_strcat 1442                  __end_of_strchr 12A7                  __end_of_strcmp 141B  
                __end_of_strcpy 12F8                  __end_of_strlen 136D                  __end_of_strtod 02F6  
                __end_of_strtok 087D                  __end_of_strspn 0832             start_initialization 0011  
               _nrf24l01SPISend 11DD                     __end_of_ISR 000F                      ftoa@status 00A9  
             __size_ofi1_memset 0018       nrf24l01SetRXPipe@enRXAddr 0026                 _nrf24l01GetPipe 1586  
   __end_of_nrf24l01GetRXPacket 0800         __size_of_nrf24l01CEHigh 0003         __size_of_nrf24l01CSHigh 0003  
                   ?_setMessage 00B9          __end_ofi1_nrf24l01Send 12C2                 _nrf24l01SendACK 14C3  
       __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 002E                 ___llmod@counter 0037  
        ?_nrf24l01ChangeTXPower 0023         ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000  
                   _getADCValue 0A8F                        ??___bmul 0021                        ??___ftge 0026  
                      ??___lmul 0028             __end_of_nrf24l01ISR 16B2                        ??___wmul 0024  
                   __pdataBANK1 00EC                        ??_memset 0026               ?_enableInterrupts 0070  
                      ??_strcat 0070                        ??_strchr 0024                        ??_strcmp 0073  
                      ??_strcpy 0024                        ??_strlen 0022                        ??_strtod 006A  
                      ??_strtok 0030                        ??_strspn 0029               __size_of___altoft 003D  
             __size_of___awtoft 0022               __size_of___ftpack 0065               __size_of___lbtoft 001B  
            ??_enableInterrupts 0070               __size_of___lltoft 002A                     __pbssCOMMON 007D  
                     ___latbits 0002                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
                 __pcstackBANK2 0120                 doWDTSleep@wdtps 0021               ?_nrf24l01SPIStart 0070  
          checkTXPower@rxPacket 0028                    _isdigit$1849 0020               ?_nrf24l01CheckACK 0070  
            ??_nrf24l01SPIStart 0070              ??_nrf24l01CheckACK 0077                 ?i1_nrf24l01Send 0071  
                   sprintf@flag 0048                     sprintf@prec 0051                      loop@packet 012F  
           nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028                ___lwdiv@dividend 0022  
                  ??_doWDTSleep 0020                        ?___ftadd 002E                        ?___ftdiv 003B  
                      ?___ftneg 0057                        ?___lldiv 0020                        ?___ftmul 0057  
                      ?___llmod 002E                        ?___ftsub 003B                        ?___fttol 0067  
                      ?___lwdiv 0020                        ?___lwmod 0020            __end_of_n_ADDRESS_P0 1846  
       __end_of_nrf24l01SPISend 11EA              i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002E  
           __size_of_setMessage 006E              _nrf24l01SendPacket 0D4A         __end_of_nrf24l01GetPipe 15BE  
                      ?_isdigit 0070                       _loop$2138 0126                       _loop$2139 0129  
                      ?_isspace 0070         __end_of_nrf24l01SendACK 14F1                       _exception 0002  
           ?_nrf24l01SendPacket 0027                ___lwdiv@quotient 0025                        ?_sprintf 0038  
           i1_nrf24l01SetRXMode 15FA                        ?_strcspn 0027                  __size_of_sleep 0045  
            __end_of_doWDTSleep 125C                  ___wmul@product 0024                     _nrf24l01ISR 1674  
                     clear_ram0 11B7                        _PIE0bits 0090                        _PIR0bits 0010  
                     _sleepLoop 00EA            ??_nrf24l01SendPacket 0029                 setMessage@value 00BD  
               setMessage@topic 00BB            ?i1_nrf24l01SetRXMode 0070                     strtod@flags 00A1  
                   strtod@expon 00A2                      _ADCON0bits 009D                      _ADCON1bits 009E  
             ___wmul@multiplier 0020                        _WPUAbits 020C                        i1_memset 125C  
                 ?_checkTXPower 0070                        _RXPacket 01A0                        _TXPacket 00E8  
                  _isspace$1852 0020                      ?_exception 0070                  _nrf24l01CEHigh 11AE  
             ___lmul@multiplier 0020         ??_nrf24l01InterfaceInit 0020                  _nrf24l01CSHigh 11B4  
             nrf24l01ISR@status 007C                  _nrf24l01SPIEnd 11BD         ??_nrf24l01ReceivePacket 0078  
        __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003           ??i1_nrf24l01SetRXMode 0074  
              __size_of___ftadd 00F6                __size_of___ftdiv 00A9                __size_of___ftneg 0009  
              __size_of___lldiv 0053                        ___altoft 1637                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 009F  
         nrf24l01SendACK@packet 002F                __size_of___lwdiv 0035                __size_of___lwmod 002D  
                      ___awtoft 13AE                        ___ftpack 091D                        ___lbtoft 12C2  
              ?_nrf24l01SPISend 0070                        ___lltoft 146C                      _ANSELAbits 018C  
                    _ANSELCbits 018E                  ??_checkTXPower 0027                ?_nrf24l01GetPipe 0070  
                    sprintf@val 004A                   _n_ADDRESS_MUL 1828                      strcat@from 00B5  
        __end_of_nrf24l01CEHigh 11B1                __size_of_isdigit 000F                 ___lwdiv@divisor 0020  
        __end_of_nrf24l01CSHigh 11B7                ?_nrf24l01SendACK 0070                __size_of_isspace 0013  
               ___lwdiv@counter 0027                        __ptext10 0832                        __ptext11 0802  
                      __ptext20 121E                        __ptext12 1521                        __ptext21 002E  
                      __ptext13 128D                        __ptext30 0E18                        __ptext22 120B  
                      __ptext14 12DD                        __ptext31 02F6                        __ptext23 14F1  
                      __ptext15 14C3                        __ptext40 0BDE                        __ptext32 11EA  
                      __ptext24 11F9                        __ptext16 1777                        __ptext41 15BE  
                      __ptext33 12F8                        __ptext25 1637                        __ptext17 0D4A  
                      __ptext50 136D                        __ptext42 0A8F                        __ptext34 16F1  
                      __ptext26 1551                        __ptext18 134E                        __ptext51 12C2  
                      __ptext43 1245                        __ptext35 08CA                        __ptext27 0982  
                      __ptext19 1734                        __ptext60 11CC                        __ptext52 091D  
                      __ptext44 0B35                        __ptext36 146C                        __ptext28 141B  
                      __ptext61 07FB                        __ptext45 0F0A                        __ptext37 09F0  
                      __ptext29 1274                        __ptext62 11DD                        __ptext54 1674  
                      __ptext46 13AE                        __ptext38 1330                        __ptext63 11BD  
                      __ptext55 087D                        __ptext47 1231                        __ptext39 11D4  
                      __ptext64 11B4                        __ptext56 125C                        __ptext48 07FE  
                      __ptext65 11C4                        __ptext57 1442                        __ptext49 16B2  
                      __ptext66 11B1                        __ptext58 15FA                        __ptext67 11AE  
                      __ptext59 12A7                        __ptext68 13F4                        __ptext69 0002  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 11C4                        _nrf24l01 00EB  
              __size_of_sprintf 01CD                     _OSCCON1bits 0919                    ??_setMessage 00C0  
              __size_of_strcspn 0030                      strcpy@from 0022   nrf24l01ChangeTXPower@addPower 0023  
                      _loop$899 012D         ??_nrf24l01ChangeTXPower 0025                   __size_of_atof 0013  
                 __size_of_main 00B8                   __size_of_ftoa 00F2                   __size_of_loop 01B2  
  nrf24l01InitRegisters@channel 0029    nrf24l01InitRegisters@feature 002B              exception@exception 0070  
                    _RC0PPSbits 0EA0    nrf24l01InitRegisters@rfSetup 002C                      _RC1PPSbits 0EA1  
                  ?_getADCValue 004B                      _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0106  
                    strtod@eexp 00A0   __end_of_nrf24l01InitRegisters 077B                        int$flags 007E  
  nrf24l01InitRegisters@setupAW 002A                      _ODCONAbits 028C                    _SSP1STATbits 0214  
                      main@pipe 00C6          nrf24l01ReceivePacket@i 007A                   _nrf24l01CELow 11B1  
                 _nrf24l01CSLow 07FB              __end_of_setMessage 09F0                      _INTCONbits 000B  
               ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117                ??i1_nrf24l01Send 0072  
                   ??_exception 0070                 ?_nrf24l01CSHigh 0070                  __pstringtext10 1859  
                __pstringtext11 185D                  __pstringtext12 0000                        isdigit@c 0021  
                      memset@p1 0020                   ?_handleRXData 0070                 ?_nrf24l01SPIEnd 0070  
          handleRXData@RXPacket 00BC                        intlevel1 0000                       sprintf@ap 0049  
                     sprintf@sp 004E                    _n_ADDRESS_P0 1841       __size_of_enableInterrupts 0008  
                     strchr@chr 0022                ___lwmod@dividend 0022                       strchr@ptr 0020  
                      isspace@c 0021                ___lldiv@dividend 0024               __CFG_CLKOUTEN$OFF 0000  
                     strcspn@s1 002D                       strcspn@s2 0027    __size_of_nrf24l01GetRXPacket 0002  
   nrf24l01InitRegisters@config 0030       __size_of_nrf24l01SPIStart 0008                       strtod@res 0067  
     __size_of_nrf24l01CheckACK 002A     nrf24l01InitRegisters@status 002D      nrf24l01ReceivePacket@width 0079  
                ?_nrf24l01CELow 0070                   __pstringtext1 1800                   __pstringtext2 1841  
                 __pstringtext3 1828                   __pstringtext4 1834                   __pstringtext5 183B  
                 __pstringtext6 1846                   __pstringtext7 184B                   __pstringtext8 1850  
                 __pstringtext9 1855                  ?_nrf24l01CSLow 0070                        sprintf@c 0053  
                      sprintf@f 0038      nrf24l01InitRegisters@DynPD 002F                        strcat@cp 00B7  
                      strcat@to 00B3                        strcmp@s1 0070                        strcmp@s2 0072  
              ___lldiv@quotient 0029                 ___lwmod@divisor 0020                        strcpy@cp 0024  
                      strlen@cp 0024                        strcpy@to 0020                 ___lwmod@counter 0025  
                      strcspn@i 002B                        strtod@_u 00A3                        strtok@s1 0033  
                      strtok@s2 002E                        strspn@s1 002D                        strspn@s2 0027  
                ??_handleRXData 006F                        strtok@sp 007D                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020                    ?_nrf24l01ISR 0070  
          __end_of_checkTXPower 1245  
