

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Jul 29 17:08:49 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	intentry,global,class=CODE,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	dabs	1,0x7E,2
    90  0000                     
    91                           ; Version 2.00
    92                           ; Generated 27/05/2018 GMT
    93                           ; 
    94                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC16LF18325 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0008                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000E                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0016                     	;# 
   148  0017                     	;# 
   149  0018                     	;# 
   150  0019                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  001D                     	;# 
   156  001E                     	;# 
   157  001F                     	;# 
   158  008C                     	;# 
   159  008E                     	;# 
   160  0090                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0097                     	;# 
   166  009B                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  009F                     	;# 
   172  010C                     	;# 
   173  010E                     	;# 
   174  0111                     	;# 
   175  0112                     	;# 
   176  0113                     	;# 
   177  0114                     	;# 
   178  0115                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0118                     	;# 
   182  0119                     	;# 
   183  018C                     	;# 
   184  018E                     	;# 
   185  0199                     	;# 
   186  0199                     	;# 
   187  0199                     	;# 
   188  019A                     	;# 
   189  019A                     	;# 
   190  019A                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019C                     	;# 
   197  019C                     	;# 
   198  019C                     	;# 
   199  019D                     	;# 
   200  019D                     	;# 
   201  019D                     	;# 
   202  019E                     	;# 
   203  019E                     	;# 
   204  019E                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  019F                     	;# 
   210  020C                     	;# 
   211  020E                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  0212                     	;# 
   215  0212                     	;# 
   216  0213                     	;# 
   217  0213                     	;# 
   218  0214                     	;# 
   219  0214                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0216                     	;# 
   225  0216                     	;# 
   226  0217                     	;# 
   227  0217                     	;# 
   228  0219                     	;# 
   229  021A                     	;# 
   230  021B                     	;# 
   231  021C                     	;# 
   232  021D                     	;# 
   233  021D                     	;# 
   234  021E                     	;# 
   235  021F                     	;# 
   236  028C                     	;# 
   237  028E                     	;# 
   238  0291                     	;# 
   239  0291                     	;# 
   240  0292                     	;# 
   241  0293                     	;# 
   242  0294                     	;# 
   243  0295                     	;# 
   244  0295                     	;# 
   245  0296                     	;# 
   246  0297                     	;# 
   247  0298                     	;# 
   248  029F                     	;# 
   249  030C                     	;# 
   250  030E                     	;# 
   251  0311                     	;# 
   252  0311                     	;# 
   253  0312                     	;# 
   254  0313                     	;# 
   255  0314                     	;# 
   256  0315                     	;# 
   257  0315                     	;# 
   258  0316                     	;# 
   259  0317                     	;# 
   260  0318                     	;# 
   261  038C                     	;# 
   262  038E                     	;# 
   263  0391                     	;# 
   264  0392                     	;# 
   265  0393                     	;# 
   266  0397                     	;# 
   267  0398                     	;# 
   268  0399                     	;# 
   269  039A                     	;# 
   270  039C                     	;# 
   271  039D                     	;# 
   272  039E                     	;# 
   273  039F                     	;# 
   274  0411                     	;# 
   275  0411                     	;# 
   276  0412                     	;# 
   277  0413                     	;# 
   278  0414                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  0418                     	;# 
   283  0418                     	;# 
   284  0419                     	;# 
   285  041A                     	;# 
   286  041B                     	;# 
   287  041C                     	;# 
   288  041D                     	;# 
   289  041E                     	;# 
   290  041F                     	;# 
   291  0498                     	;# 
   292  0498                     	;# 
   293  0499                     	;# 
   294  049A                     	;# 
   295  049B                     	;# 
   296  049B                     	;# 
   297  049C                     	;# 
   298  049D                     	;# 
   299  049E                     	;# 
   300  049F                     	;# 
   301  0617                     	;# 
   302  0618                     	;# 
   303  0619                     	;# 
   304  0619                     	;# 
   305  061A                     	;# 
   306  061B                     	;# 
   307  061C                     	;# 
   308  061C                     	;# 
   309  061F                     	;# 
   310  0691                     	;# 
   311  0692                     	;# 
   312  0693                     	;# 
   313  0694                     	;# 
   314  0695                     	;# 
   315  0696                     	;# 
   316  0697                     	;# 
   317  0698                     	;# 
   318  0699                     	;# 
   319  0711                     	;# 
   320  0712                     	;# 
   321  0713                     	;# 
   322  0714                     	;# 
   323  0715                     	;# 
   324  0716                     	;# 
   325  0717                     	;# 
   326  0718                     	;# 
   327  0719                     	;# 
   328  0891                     	;# 
   329  0891                     	;# 
   330  0891                     	;# 
   331  0891                     	;# 
   332  0891                     	;# 
   333  0891                     	;# 
   334  0892                     	;# 
   335  0892                     	;# 
   336  0892                     	;# 
   337  0893                     	;# 
   338  0893                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0893                     	;# 
   342  0893                     	;# 
   343  0894                     	;# 
   344  0894                     	;# 
   345  0894                     	;# 
   346  0895                     	;# 
   347  0895                     	;# 
   348  0895                     	;# 
   349  0896                     	;# 
   350  0896                     	;# 
   351  0896                     	;# 
   352  089B                     	;# 
   353  0911                     	;# 
   354  0912                     	;# 
   355  0913                     	;# 
   356  0914                     	;# 
   357  0915                     	;# 
   358  0916                     	;# 
   359  0918                     	;# 
   360  0919                     	;# 
   361  091A                     	;# 
   362  091B                     	;# 
   363  091C                     	;# 
   364  091D                     	;# 
   365  091E                     	;# 
   366  091F                     	;# 
   367  0E0F                     	;# 
   368  0E10                     	;# 
   369  0E11                     	;# 
   370  0E12                     	;# 
   371  0E13                     	;# 
   372  0E14                     	;# 
   373  0E15                     	;# 
   374  0E16                     	;# 
   375  0E17                     	;# 
   376  0E18                     	;# 
   377  0E19                     	;# 
   378  0E1A                     	;# 
   379  0E1B                     	;# 
   380  0E1C                     	;# 
   381  0E1D                     	;# 
   382  0E1E                     	;# 
   383  0E1F                     	;# 
   384  0E20                     	;# 
   385  0E21                     	;# 
   386  0E22                     	;# 
   387  0E24                     	;# 
   388  0E25                     	;# 
   389  0E28                     	;# 
   390  0E29                     	;# 
   391  0E2A                     	;# 
   392  0E2B                     	;# 
   393  0E2C                     	;# 
   394  0E2D                     	;# 
   395  0E2E                     	;# 
   396  0E2F                     	;# 
   397  0E90                     	;# 
   398  0E91                     	;# 
   399  0E92                     	;# 
   400  0E94                     	;# 
   401  0E95                     	;# 
   402  0EA0                     	;# 
   403  0EA1                     	;# 
   404  0EA2                     	;# 
   405  0EA3                     	;# 
   406  0EA4                     	;# 
   407  0EA5                     	;# 
   408  0F0F                     	;# 
   409  0F10                     	;# 
   410  0F11                     	;# 
   411  0F12                     	;# 
   412  0F13                     	;# 
   413  0F14                     	;# 
   414  0F15                     	;# 
   415  0F16                     	;# 
   416  0F17                     	;# 
   417  0F18                     	;# 
   418  0F19                     	;# 
   419  0F1A                     	;# 
   420  0F1B                     	;# 
   421  0F1C                     	;# 
   422  0F1D                     	;# 
   423  0F1E                     	;# 
   424  0F1F                     	;# 
   425  0F20                     	;# 
   426  0F21                     	;# 
   427  0F22                     	;# 
   428  0F23                     	;# 
   429  0F24                     	;# 
   430  0F25                     	;# 
   431  0F26                     	;# 
   432  0F27                     	;# 
   433  0F28                     	;# 
   434  0F29                     	;# 
   435  0F2A                     	;# 
   436  0F2B                     	;# 
   437  0F2C                     	;# 
   438  0F2D                     	;# 
   439  0F2E                     	;# 
   440  0F2F                     	;# 
   441  0F30                     	;# 
   442  0F31                     	;# 
   443  0F32                     	;# 
   444  0F33                     	;# 
   445  0F34                     	;# 
   446  0F35                     	;# 
   447  0F36                     	;# 
   448  0F37                     	;# 
   449  0FE4                     	;# 
   450  0FE5                     	;# 
   451  0FE6                     	;# 
   452  0FE7                     	;# 
   453  0FE8                     	;# 
   454  0FE9                     	;# 
   455  0FEA                     	;# 
   456  0FEB                     	;# 
   457  0FED                     	;# 
   458  0FEE                     	;# 
   459  0FEF                     	;# 
   460  0000                     	;# 
   461  0001                     	;# 
   462  0002                     	;# 
   463  0003                     	;# 
   464  0004                     	;# 
   465  0005                     	;# 
   466  0006                     	;# 
   467  0007                     	;# 
   468  0008                     	;# 
   469  0009                     	;# 
   470  000A                     	;# 
   471  000B                     	;# 
   472  000C                     	;# 
   473  000E                     	;# 
   474  0010                     	;# 
   475  0011                     	;# 
   476  0012                     	;# 
   477  0013                     	;# 
   478  0014                     	;# 
   479  0015                     	;# 
   480  0015                     	;# 
   481  0016                     	;# 
   482  0016                     	;# 
   483  0017                     	;# 
   484  0018                     	;# 
   485  0019                     	;# 
   486  0019                     	;# 
   487  001A                     	;# 
   488  001B                     	;# 
   489  001C                     	;# 
   490  001D                     	;# 
   491  001E                     	;# 
   492  001F                     	;# 
   493  008C                     	;# 
   494  008E                     	;# 
   495  0090                     	;# 
   496  0091                     	;# 
   497  0092                     	;# 
   498  0093                     	;# 
   499  0094                     	;# 
   500  0097                     	;# 
   501  009B                     	;# 
   502  009B                     	;# 
   503  009C                     	;# 
   504  009D                     	;# 
   505  009E                     	;# 
   506  009F                     	;# 
   507  010C                     	;# 
   508  010E                     	;# 
   509  0111                     	;# 
   510  0112                     	;# 
   511  0113                     	;# 
   512  0114                     	;# 
   513  0115                     	;# 
   514  0116                     	;# 
   515  0117                     	;# 
   516  0118                     	;# 
   517  0119                     	;# 
   518  018C                     	;# 
   519  018E                     	;# 
   520  0199                     	;# 
   521  0199                     	;# 
   522  0199                     	;# 
   523  019A                     	;# 
   524  019A                     	;# 
   525  019A                     	;# 
   526  019B                     	;# 
   527  019B                     	;# 
   528  019B                     	;# 
   529  019B                     	;# 
   530  019B                     	;# 
   531  019C                     	;# 
   532  019C                     	;# 
   533  019C                     	;# 
   534  019D                     	;# 
   535  019D                     	;# 
   536  019D                     	;# 
   537  019E                     	;# 
   538  019E                     	;# 
   539  019E                     	;# 
   540  019F                     	;# 
   541  019F                     	;# 
   542  019F                     	;# 
   543  019F                     	;# 
   544  019F                     	;# 
   545  020C                     	;# 
   546  020E                     	;# 
   547  0211                     	;# 
   548  0211                     	;# 
   549  0212                     	;# 
   550  0212                     	;# 
   551  0213                     	;# 
   552  0213                     	;# 
   553  0214                     	;# 
   554  0214                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0215                     	;# 
   559  0216                     	;# 
   560  0216                     	;# 
   561  0217                     	;# 
   562  0217                     	;# 
   563  0219                     	;# 
   564  021A                     	;# 
   565  021B                     	;# 
   566  021C                     	;# 
   567  021D                     	;# 
   568  021D                     	;# 
   569  021E                     	;# 
   570  021F                     	;# 
   571  028C                     	;# 
   572  028E                     	;# 
   573  0291                     	;# 
   574  0291                     	;# 
   575  0292                     	;# 
   576  0293                     	;# 
   577  0294                     	;# 
   578  0295                     	;# 
   579  0295                     	;# 
   580  0296                     	;# 
   581  0297                     	;# 
   582  0298                     	;# 
   583  029F                     	;# 
   584  030C                     	;# 
   585  030E                     	;# 
   586  0311                     	;# 
   587  0311                     	;# 
   588  0312                     	;# 
   589  0313                     	;# 
   590  0314                     	;# 
   591  0315                     	;# 
   592  0315                     	;# 
   593  0316                     	;# 
   594  0317                     	;# 
   595  0318                     	;# 
   596  038C                     	;# 
   597  038E                     	;# 
   598  0391                     	;# 
   599  0392                     	;# 
   600  0393                     	;# 
   601  0397                     	;# 
   602  0398                     	;# 
   603  0399                     	;# 
   604  039A                     	;# 
   605  039C                     	;# 
   606  039D                     	;# 
   607  039E                     	;# 
   608  039F                     	;# 
   609  0411                     	;# 
   610  0411                     	;# 
   611  0412                     	;# 
   612  0413                     	;# 
   613  0414                     	;# 
   614  0415                     	;# 
   615  0416                     	;# 
   616  0417                     	;# 
   617  0418                     	;# 
   618  0418                     	;# 
   619  0419                     	;# 
   620  041A                     	;# 
   621  041B                     	;# 
   622  041C                     	;# 
   623  041D                     	;# 
   624  041E                     	;# 
   625  041F                     	;# 
   626  0498                     	;# 
   627  0498                     	;# 
   628  0499                     	;# 
   629  049A                     	;# 
   630  049B                     	;# 
   631  049B                     	;# 
   632  049C                     	;# 
   633  049D                     	;# 
   634  049E                     	;# 
   635  049F                     	;# 
   636  0617                     	;# 
   637  0618                     	;# 
   638  0619                     	;# 
   639  0619                     	;# 
   640  061A                     	;# 
   641  061B                     	;# 
   642  061C                     	;# 
   643  061C                     	;# 
   644  061F                     	;# 
   645  0691                     	;# 
   646  0692                     	;# 
   647  0693                     	;# 
   648  0694                     	;# 
   649  0695                     	;# 
   650  0696                     	;# 
   651  0697                     	;# 
   652  0698                     	;# 
   653  0699                     	;# 
   654  0711                     	;# 
   655  0712                     	;# 
   656  0713                     	;# 
   657  0714                     	;# 
   658  0715                     	;# 
   659  0716                     	;# 
   660  0717                     	;# 
   661  0718                     	;# 
   662  0719                     	;# 
   663  0891                     	;# 
   664  0891                     	;# 
   665  0891                     	;# 
   666  0891                     	;# 
   667  0891                     	;# 
   668  0891                     	;# 
   669  0892                     	;# 
   670  0892                     	;# 
   671  0892                     	;# 
   672  0893                     	;# 
   673  0893                     	;# 
   674  0893                     	;# 
   675  0893                     	;# 
   676  0893                     	;# 
   677  0893                     	;# 
   678  0894                     	;# 
   679  0894                     	;# 
   680  0894                     	;# 
   681  0895                     	;# 
   682  0895                     	;# 
   683  0895                     	;# 
   684  0896                     	;# 
   685  0896                     	;# 
   686  0896                     	;# 
   687  089B                     	;# 
   688  0911                     	;# 
   689  0912                     	;# 
   690  0913                     	;# 
   691  0914                     	;# 
   692  0915                     	;# 
   693  0916                     	;# 
   694  0918                     	;# 
   695  0919                     	;# 
   696  091A                     	;# 
   697  091B                     	;# 
   698  091C                     	;# 
   699  091D                     	;# 
   700  091E                     	;# 
   701  091F                     	;# 
   702  0E0F                     	;# 
   703  0E10                     	;# 
   704  0E11                     	;# 
   705  0E12                     	;# 
   706  0E13                     	;# 
   707  0E14                     	;# 
   708  0E15                     	;# 
   709  0E16                     	;# 
   710  0E17                     	;# 
   711  0E18                     	;# 
   712  0E19                     	;# 
   713  0E1A                     	;# 
   714  0E1B                     	;# 
   715  0E1C                     	;# 
   716  0E1D                     	;# 
   717  0E1E                     	;# 
   718  0E1F                     	;# 
   719  0E20                     	;# 
   720  0E21                     	;# 
   721  0E22                     	;# 
   722  0E24                     	;# 
   723  0E25                     	;# 
   724  0E28                     	;# 
   725  0E29                     	;# 
   726  0E2A                     	;# 
   727  0E2B                     	;# 
   728  0E2C                     	;# 
   729  0E2D                     	;# 
   730  0E2E                     	;# 
   731  0E2F                     	;# 
   732  0E90                     	;# 
   733  0E91                     	;# 
   734  0E92                     	;# 
   735  0E94                     	;# 
   736  0E95                     	;# 
   737  0EA0                     	;# 
   738  0EA1                     	;# 
   739  0EA2                     	;# 
   740  0EA3                     	;# 
   741  0EA4                     	;# 
   742  0EA5                     	;# 
   743  0F0F                     	;# 
   744  0F10                     	;# 
   745  0F11                     	;# 
   746  0F12                     	;# 
   747  0F13                     	;# 
   748  0F14                     	;# 
   749  0F15                     	;# 
   750  0F16                     	;# 
   751  0F17                     	;# 
   752  0F18                     	;# 
   753  0F19                     	;# 
   754  0F1A                     	;# 
   755  0F1B                     	;# 
   756  0F1C                     	;# 
   757  0F1D                     	;# 
   758  0F1E                     	;# 
   759  0F1F                     	;# 
   760  0F20                     	;# 
   761  0F21                     	;# 
   762  0F22                     	;# 
   763  0F23                     	;# 
   764  0F24                     	;# 
   765  0F25                     	;# 
   766  0F26                     	;# 
   767  0F27                     	;# 
   768  0F28                     	;# 
   769  0F29                     	;# 
   770  0F2A                     	;# 
   771  0F2B                     	;# 
   772  0F2C                     	;# 
   773  0F2D                     	;# 
   774  0F2E                     	;# 
   775  0F2F                     	;# 
   776  0F30                     	;# 
   777  0F31                     	;# 
   778  0F32                     	;# 
   779  0F33                     	;# 
   780  0F34                     	;# 
   781  0F35                     	;# 
   782  0F36                     	;# 
   783  0F37                     	;# 
   784  0FE4                     	;# 
   785  0FE5                     	;# 
   786  0FE6                     	;# 
   787  0FE7                     	;# 
   788  0FE8                     	;# 
   789  0FE9                     	;# 
   790  0FEA                     	;# 
   791  0FEB                     	;# 
   792  0FED                     	;# 
   793  0FEE                     	;# 
   794  0FEF                     	;# 
   795  0000                     	;# 
   796  0001                     	;# 
   797  0002                     	;# 
   798  0003                     	;# 
   799  0004                     	;# 
   800  0005                     	;# 
   801  0006                     	;# 
   802  0007                     	;# 
   803  0008                     	;# 
   804  0009                     	;# 
   805  000A                     	;# 
   806  000B                     	;# 
   807  000C                     	;# 
   808  000E                     	;# 
   809  0010                     	;# 
   810  0011                     	;# 
   811  0012                     	;# 
   812  0013                     	;# 
   813  0014                     	;# 
   814  0015                     	;# 
   815  0015                     	;# 
   816  0016                     	;# 
   817  0016                     	;# 
   818  0017                     	;# 
   819  0018                     	;# 
   820  0019                     	;# 
   821  0019                     	;# 
   822  001A                     	;# 
   823  001B                     	;# 
   824  001C                     	;# 
   825  001D                     	;# 
   826  001E                     	;# 
   827  001F                     	;# 
   828  008C                     	;# 
   829  008E                     	;# 
   830  0090                     	;# 
   831  0091                     	;# 
   832  0092                     	;# 
   833  0093                     	;# 
   834  0094                     	;# 
   835  0097                     	;# 
   836  009B                     	;# 
   837  009B                     	;# 
   838  009C                     	;# 
   839  009D                     	;# 
   840  009E                     	;# 
   841  009F                     	;# 
   842  010C                     	;# 
   843  010E                     	;# 
   844  0111                     	;# 
   845  0112                     	;# 
   846  0113                     	;# 
   847  0114                     	;# 
   848  0115                     	;# 
   849  0116                     	;# 
   850  0117                     	;# 
   851  0118                     	;# 
   852  0119                     	;# 
   853  018C                     	;# 
   854  018E                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  0199                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019A                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019D                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  019F                     	;# 
   879  019F                     	;# 
   880  020C                     	;# 
   881  020E                     	;# 
   882  0211                     	;# 
   883  0211                     	;# 
   884  0212                     	;# 
   885  0212                     	;# 
   886  0213                     	;# 
   887  0213                     	;# 
   888  0214                     	;# 
   889  0214                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0215                     	;# 
   894  0216                     	;# 
   895  0216                     	;# 
   896  0217                     	;# 
   897  0217                     	;# 
   898  0219                     	;# 
   899  021A                     	;# 
   900  021B                     	;# 
   901  021C                     	;# 
   902  021D                     	;# 
   903  021D                     	;# 
   904  021E                     	;# 
   905  021F                     	;# 
   906  028C                     	;# 
   907  028E                     	;# 
   908  0291                     	;# 
   909  0291                     	;# 
   910  0292                     	;# 
   911  0293                     	;# 
   912  0294                     	;# 
   913  0295                     	;# 
   914  0295                     	;# 
   915  0296                     	;# 
   916  0297                     	;# 
   917  0298                     	;# 
   918  029F                     	;# 
   919  030C                     	;# 
   920  030E                     	;# 
   921  0311                     	;# 
   922  0311                     	;# 
   923  0312                     	;# 
   924  0313                     	;# 
   925  0314                     	;# 
   926  0315                     	;# 
   927  0315                     	;# 
   928  0316                     	;# 
   929  0317                     	;# 
   930  0318                     	;# 
   931  038C                     	;# 
   932  038E                     	;# 
   933  0391                     	;# 
   934  0392                     	;# 
   935  0393                     	;# 
   936  0397                     	;# 
   937  0398                     	;# 
   938  0399                     	;# 
   939  039A                     	;# 
   940  039C                     	;# 
   941  039D                     	;# 
   942  039E                     	;# 
   943  039F                     	;# 
   944  0411                     	;# 
   945  0411                     	;# 
   946  0412                     	;# 
   947  0413                     	;# 
   948  0414                     	;# 
   949  0415                     	;# 
   950  0416                     	;# 
   951  0417                     	;# 
   952  0418                     	;# 
   953  0418                     	;# 
   954  0419                     	;# 
   955  041A                     	;# 
   956  041B                     	;# 
   957  041C                     	;# 
   958  041D                     	;# 
   959  041E                     	;# 
   960  041F                     	;# 
   961  0498                     	;# 
   962  0498                     	;# 
   963  0499                     	;# 
   964  049A                     	;# 
   965  049B                     	;# 
   966  049B                     	;# 
   967  049C                     	;# 
   968  049D                     	;# 
   969  049E                     	;# 
   970  049F                     	;# 
   971  0617                     	;# 
   972  0618                     	;# 
   973  0619                     	;# 
   974  0619                     	;# 
   975  061A                     	;# 
   976  061B                     	;# 
   977  061C                     	;# 
   978  061C                     	;# 
   979  061F                     	;# 
   980  0691                     	;# 
   981  0692                     	;# 
   982  0693                     	;# 
   983  0694                     	;# 
   984  0695                     	;# 
   985  0696                     	;# 
   986  0697                     	;# 
   987  0698                     	;# 
   988  0699                     	;# 
   989  0711                     	;# 
   990  0712                     	;# 
   991  0713                     	;# 
   992  0714                     	;# 
   993  0715                     	;# 
   994  0716                     	;# 
   995  0717                     	;# 
   996  0718                     	;# 
   997  0719                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0891                     	;# 
  1003  0891                     	;# 
  1004  0892                     	;# 
  1005  0892                     	;# 
  1006  0892                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0893                     	;# 
  1012  0893                     	;# 
  1013  0894                     	;# 
  1014  0894                     	;# 
  1015  0894                     	;# 
  1016  0895                     	;# 
  1017  0895                     	;# 
  1018  0895                     	;# 
  1019  0896                     	;# 
  1020  0896                     	;# 
  1021  0896                     	;# 
  1022  089B                     	;# 
  1023  0911                     	;# 
  1024  0912                     	;# 
  1025  0913                     	;# 
  1026  0914                     	;# 
  1027  0915                     	;# 
  1028  0916                     	;# 
  1029  0918                     	;# 
  1030  0919                     	;# 
  1031  091A                     	;# 
  1032  091B                     	;# 
  1033  091C                     	;# 
  1034  091D                     	;# 
  1035  091E                     	;# 
  1036  091F                     	;# 
  1037  0E0F                     	;# 
  1038  0E10                     	;# 
  1039  0E11                     	;# 
  1040  0E12                     	;# 
  1041  0E13                     	;# 
  1042  0E14                     	;# 
  1043  0E15                     	;# 
  1044  0E16                     	;# 
  1045  0E17                     	;# 
  1046  0E18                     	;# 
  1047  0E19                     	;# 
  1048  0E1A                     	;# 
  1049  0E1B                     	;# 
  1050  0E1C                     	;# 
  1051  0E1D                     	;# 
  1052  0E1E                     	;# 
  1053  0E1F                     	;# 
  1054  0E20                     	;# 
  1055  0E21                     	;# 
  1056  0E22                     	;# 
  1057  0E24                     	;# 
  1058  0E25                     	;# 
  1059  0E28                     	;# 
  1060  0E29                     	;# 
  1061  0E2A                     	;# 
  1062  0E2B                     	;# 
  1063  0E2C                     	;# 
  1064  0E2D                     	;# 
  1065  0E2E                     	;# 
  1066  0E2F                     	;# 
  1067  0E90                     	;# 
  1068  0E91                     	;# 
  1069  0E92                     	;# 
  1070  0E94                     	;# 
  1071  0E95                     	;# 
  1072  0EA0                     	;# 
  1073  0EA1                     	;# 
  1074  0EA2                     	;# 
  1075  0EA3                     	;# 
  1076  0EA4                     	;# 
  1077  0EA5                     	;# 
  1078  0F0F                     	;# 
  1079  0F10                     	;# 
  1080  0F11                     	;# 
  1081  0F12                     	;# 
  1082  0F13                     	;# 
  1083  0F14                     	;# 
  1084  0F15                     	;# 
  1085  0F16                     	;# 
  1086  0F17                     	;# 
  1087  0F18                     	;# 
  1088  0F19                     	;# 
  1089  0F1A                     	;# 
  1090  0F1B                     	;# 
  1091  0F1C                     	;# 
  1092  0F1D                     	;# 
  1093  0F1E                     	;# 
  1094  0F1F                     	;# 
  1095  0F20                     	;# 
  1096  0F21                     	;# 
  1097  0F22                     	;# 
  1098  0F23                     	;# 
  1099  0F24                     	;# 
  1100  0F25                     	;# 
  1101  0F26                     	;# 
  1102  0F27                     	;# 
  1103  0F28                     	;# 
  1104  0F29                     	;# 
  1105  0F2A                     	;# 
  1106  0F2B                     	;# 
  1107  0F2C                     	;# 
  1108  0F2D                     	;# 
  1109  0F2E                     	;# 
  1110  0F2F                     	;# 
  1111  0F30                     	;# 
  1112  0F31                     	;# 
  1113  0F32                     	;# 
  1114  0F33                     	;# 
  1115  0F34                     	;# 
  1116  0F35                     	;# 
  1117  0F36                     	;# 
  1118  0F37                     	;# 
  1119  0FE4                     	;# 
  1120  0FE5                     	;# 
  1121  0FE6                     	;# 
  1122  0FE7                     	;# 
  1123  0FE8                     	;# 
  1124  0FE9                     	;# 
  1125  0FEA                     	;# 
  1126  0FEB                     	;# 
  1127  0FED                     	;# 
  1128  0FEE                     	;# 
  1129  0FEF                     	;# 
  1130  0000                     	;# 
  1131  0001                     	;# 
  1132  0002                     	;# 
  1133  0003                     	;# 
  1134  0004                     	;# 
  1135  0005                     	;# 
  1136  0006                     	;# 
  1137  0007                     	;# 
  1138  0008                     	;# 
  1139  0009                     	;# 
  1140  000A                     	;# 
  1141  000B                     	;# 
  1142  000C                     	;# 
  1143  000E                     	;# 
  1144  0010                     	;# 
  1145  0011                     	;# 
  1146  0012                     	;# 
  1147  0013                     	;# 
  1148  0014                     	;# 
  1149  0015                     	;# 
  1150  0015                     	;# 
  1151  0016                     	;# 
  1152  0016                     	;# 
  1153  0017                     	;# 
  1154  0018                     	;# 
  1155  0019                     	;# 
  1156  0019                     	;# 
  1157  001A                     	;# 
  1158  001B                     	;# 
  1159  001C                     	;# 
  1160  001D                     	;# 
  1161  001E                     	;# 
  1162  001F                     	;# 
  1163  008C                     	;# 
  1164  008E                     	;# 
  1165  0090                     	;# 
  1166  0091                     	;# 
  1167  0092                     	;# 
  1168  0093                     	;# 
  1169  0094                     	;# 
  1170  0097                     	;# 
  1171  009B                     	;# 
  1172  009B                     	;# 
  1173  009C                     	;# 
  1174  009D                     	;# 
  1175  009E                     	;# 
  1176  009F                     	;# 
  1177  010C                     	;# 
  1178  010E                     	;# 
  1179  0111                     	;# 
  1180  0112                     	;# 
  1181  0113                     	;# 
  1182  0114                     	;# 
  1183  0115                     	;# 
  1184  0116                     	;# 
  1185  0117                     	;# 
  1186  0118                     	;# 
  1187  0119                     	;# 
  1188  018C                     	;# 
  1189  018E                     	;# 
  1190  0199                     	;# 
  1191  0199                     	;# 
  1192  0199                     	;# 
  1193  019A                     	;# 
  1194  019A                     	;# 
  1195  019A                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019C                     	;# 
  1202  019C                     	;# 
  1203  019C                     	;# 
  1204  019D                     	;# 
  1205  019D                     	;# 
  1206  019D                     	;# 
  1207  019E                     	;# 
  1208  019E                     	;# 
  1209  019E                     	;# 
  1210  019F                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  019F                     	;# 
  1214  019F                     	;# 
  1215  020C                     	;# 
  1216  020E                     	;# 
  1217  0211                     	;# 
  1218  0211                     	;# 
  1219  0212                     	;# 
  1220  0212                     	;# 
  1221  0213                     	;# 
  1222  0213                     	;# 
  1223  0214                     	;# 
  1224  0214                     	;# 
  1225  0215                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0216                     	;# 
  1230  0216                     	;# 
  1231  0217                     	;# 
  1232  0217                     	;# 
  1233  0219                     	;# 
  1234  021A                     	;# 
  1235  021B                     	;# 
  1236  021C                     	;# 
  1237  021D                     	;# 
  1238  021D                     	;# 
  1239  021E                     	;# 
  1240  021F                     	;# 
  1241  028C                     	;# 
  1242  028E                     	;# 
  1243  0291                     	;# 
  1244  0291                     	;# 
  1245  0292                     	;# 
  1246  0293                     	;# 
  1247  0294                     	;# 
  1248  0295                     	;# 
  1249  0295                     	;# 
  1250  0296                     	;# 
  1251  0297                     	;# 
  1252  0298                     	;# 
  1253  029F                     	;# 
  1254  030C                     	;# 
  1255  030E                     	;# 
  1256  0311                     	;# 
  1257  0311                     	;# 
  1258  0312                     	;# 
  1259  0313                     	;# 
  1260  0314                     	;# 
  1261  0315                     	;# 
  1262  0315                     	;# 
  1263  0316                     	;# 
  1264  0317                     	;# 
  1265  0318                     	;# 
  1266  038C                     	;# 
  1267  038E                     	;# 
  1268  0391                     	;# 
  1269  0392                     	;# 
  1270  0393                     	;# 
  1271  0397                     	;# 
  1272  0398                     	;# 
  1273  0399                     	;# 
  1274  039A                     	;# 
  1275  039C                     	;# 
  1276  039D                     	;# 
  1277  039E                     	;# 
  1278  039F                     	;# 
  1279  0411                     	;# 
  1280  0411                     	;# 
  1281  0412                     	;# 
  1282  0413                     	;# 
  1283  0414                     	;# 
  1284  0415                     	;# 
  1285  0416                     	;# 
  1286  0417                     	;# 
  1287  0418                     	;# 
  1288  0418                     	;# 
  1289  0419                     	;# 
  1290  041A                     	;# 
  1291  041B                     	;# 
  1292  041C                     	;# 
  1293  041D                     	;# 
  1294  041E                     	;# 
  1295  041F                     	;# 
  1296  0498                     	;# 
  1297  0498                     	;# 
  1298  0499                     	;# 
  1299  049A                     	;# 
  1300  049B                     	;# 
  1301  049B                     	;# 
  1302  049C                     	;# 
  1303  049D                     	;# 
  1304  049E                     	;# 
  1305  049F                     	;# 
  1306  0617                     	;# 
  1307  0618                     	;# 
  1308  0619                     	;# 
  1309  0619                     	;# 
  1310  061A                     	;# 
  1311  061B                     	;# 
  1312  061C                     	;# 
  1313  061C                     	;# 
  1314  061F                     	;# 
  1315  0691                     	;# 
  1316  0692                     	;# 
  1317  0693                     	;# 
  1318  0694                     	;# 
  1319  0695                     	;# 
  1320  0696                     	;# 
  1321  0697                     	;# 
  1322  0698                     	;# 
  1323  0699                     	;# 
  1324  0711                     	;# 
  1325  0712                     	;# 
  1326  0713                     	;# 
  1327  0714                     	;# 
  1328  0715                     	;# 
  1329  0716                     	;# 
  1330  0717                     	;# 
  1331  0718                     	;# 
  1332  0719                     	;# 
  1333  0891                     	;# 
  1334  0891                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0891                     	;# 
  1338  0891                     	;# 
  1339  0892                     	;# 
  1340  0892                     	;# 
  1341  0892                     	;# 
  1342  0893                     	;# 
  1343  0893                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0893                     	;# 
  1347  0893                     	;# 
  1348  0894                     	;# 
  1349  0894                     	;# 
  1350  0894                     	;# 
  1351  0895                     	;# 
  1352  0895                     	;# 
  1353  0895                     	;# 
  1354  0896                     	;# 
  1355  0896                     	;# 
  1356  0896                     	;# 
  1357  089B                     	;# 
  1358  0911                     	;# 
  1359  0912                     	;# 
  1360  0913                     	;# 
  1361  0914                     	;# 
  1362  0915                     	;# 
  1363  0916                     	;# 
  1364  0918                     	;# 
  1365  0919                     	;# 
  1366  091A                     	;# 
  1367  091B                     	;# 
  1368  091C                     	;# 
  1369  091D                     	;# 
  1370  091E                     	;# 
  1371  091F                     	;# 
  1372  0E0F                     	;# 
  1373  0E10                     	;# 
  1374  0E11                     	;# 
  1375  0E12                     	;# 
  1376  0E13                     	;# 
  1377  0E14                     	;# 
  1378  0E15                     	;# 
  1379  0E16                     	;# 
  1380  0E17                     	;# 
  1381  0E18                     	;# 
  1382  0E19                     	;# 
  1383  0E1A                     	;# 
  1384  0E1B                     	;# 
  1385  0E1C                     	;# 
  1386  0E1D                     	;# 
  1387  0E1E                     	;# 
  1388  0E1F                     	;# 
  1389  0E20                     	;# 
  1390  0E21                     	;# 
  1391  0E22                     	;# 
  1392  0E24                     	;# 
  1393  0E25                     	;# 
  1394  0E28                     	;# 
  1395  0E29                     	;# 
  1396  0E2A                     	;# 
  1397  0E2B                     	;# 
  1398  0E2C                     	;# 
  1399  0E2D                     	;# 
  1400  0E2E                     	;# 
  1401  0E2F                     	;# 
  1402  0E90                     	;# 
  1403  0E91                     	;# 
  1404  0E92                     	;# 
  1405  0E94                     	;# 
  1406  0E95                     	;# 
  1407  0EA0                     	;# 
  1408  0EA1                     	;# 
  1409  0EA2                     	;# 
  1410  0EA3                     	;# 
  1411  0EA4                     	;# 
  1412  0EA5                     	;# 
  1413  0F0F                     	;# 
  1414  0F10                     	;# 
  1415  0F11                     	;# 
  1416  0F12                     	;# 
  1417  0F13                     	;# 
  1418  0F14                     	;# 
  1419  0F15                     	;# 
  1420  0F16                     	;# 
  1421  0F17                     	;# 
  1422  0F18                     	;# 
  1423  0F19                     	;# 
  1424  0F1A                     	;# 
  1425  0F1B                     	;# 
  1426  0F1C                     	;# 
  1427  0F1D                     	;# 
  1428  0F1E                     	;# 
  1429  0F1F                     	;# 
  1430  0F20                     	;# 
  1431  0F21                     	;# 
  1432  0F22                     	;# 
  1433  0F23                     	;# 
  1434  0F24                     	;# 
  1435  0F25                     	;# 
  1436  0F26                     	;# 
  1437  0F27                     	;# 
  1438  0F28                     	;# 
  1439  0F29                     	;# 
  1440  0F2A                     	;# 
  1441  0F2B                     	;# 
  1442  0F2C                     	;# 
  1443  0F2D                     	;# 
  1444  0F2E                     	;# 
  1445  0F2F                     	;# 
  1446  0F30                     	;# 
  1447  0F31                     	;# 
  1448  0F32                     	;# 
  1449  0F33                     	;# 
  1450  0F34                     	;# 
  1451  0F35                     	;# 
  1452  0F36                     	;# 
  1453  0F37                     	;# 
  1454  0FE4                     	;# 
  1455  0FE5                     	;# 
  1456  0FE6                     	;# 
  1457  0FE7                     	;# 
  1458  0FE8                     	;# 
  1459  0FE9                     	;# 
  1460  0FEA                     	;# 
  1461  0FEB                     	;# 
  1462  0FED                     	;# 
  1463  0FEE                     	;# 
  1464  0FEF                     	;# 
  1465  0000                     	;# 
  1466  0001                     	;# 
  1467  0002                     	;# 
  1468  0003                     	;# 
  1469  0004                     	;# 
  1470  0005                     	;# 
  1471  0006                     	;# 
  1472  0007                     	;# 
  1473  0008                     	;# 
  1474  0009                     	;# 
  1475  000A                     	;# 
  1476  000B                     	;# 
  1477  000C                     	;# 
  1478  000E                     	;# 
  1479  0010                     	;# 
  1480  0011                     	;# 
  1481  0012                     	;# 
  1482  0013                     	;# 
  1483  0014                     	;# 
  1484  0015                     	;# 
  1485  0015                     	;# 
  1486  0016                     	;# 
  1487  0016                     	;# 
  1488  0017                     	;# 
  1489  0018                     	;# 
  1490  0019                     	;# 
  1491  0019                     	;# 
  1492  001A                     	;# 
  1493  001B                     	;# 
  1494  001C                     	;# 
  1495  001D                     	;# 
  1496  001E                     	;# 
  1497  001F                     	;# 
  1498  008C                     	;# 
  1499  008E                     	;# 
  1500  0090                     	;# 
  1501  0091                     	;# 
  1502  0092                     	;# 
  1503  0093                     	;# 
  1504  0094                     	;# 
  1505  0097                     	;# 
  1506  009B                     	;# 
  1507  009B                     	;# 
  1508  009C                     	;# 
  1509  009D                     	;# 
  1510  009E                     	;# 
  1511  009F                     	;# 
  1512  010C                     	;# 
  1513  010E                     	;# 
  1514  0111                     	;# 
  1515  0112                     	;# 
  1516  0113                     	;# 
  1517  0114                     	;# 
  1518  0115                     	;# 
  1519  0116                     	;# 
  1520  0117                     	;# 
  1521  0118                     	;# 
  1522  0119                     	;# 
  1523  018C                     	;# 
  1524  018E                     	;# 
  1525  0199                     	;# 
  1526  0199                     	;# 
  1527  0199                     	;# 
  1528  019A                     	;# 
  1529  019A                     	;# 
  1530  019A                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019C                     	;# 
  1537  019C                     	;# 
  1538  019C                     	;# 
  1539  019D                     	;# 
  1540  019D                     	;# 
  1541  019D                     	;# 
  1542  019E                     	;# 
  1543  019E                     	;# 
  1544  019E                     	;# 
  1545  019F                     	;# 
  1546  019F                     	;# 
  1547  019F                     	;# 
  1548  019F                     	;# 
  1549  019F                     	;# 
  1550  020C                     	;# 
  1551  020E                     	;# 
  1552  0211                     	;# 
  1553  0211                     	;# 
  1554  0212                     	;# 
  1555  0212                     	;# 
  1556  0213                     	;# 
  1557  0213                     	;# 
  1558  0214                     	;# 
  1559  0214                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0215                     	;# 
  1563  0215                     	;# 
  1564  0216                     	;# 
  1565  0216                     	;# 
  1566  0217                     	;# 
  1567  0217                     	;# 
  1568  0219                     	;# 
  1569  021A                     	;# 
  1570  021B                     	;# 
  1571  021C                     	;# 
  1572  021D                     	;# 
  1573  021D                     	;# 
  1574  021E                     	;# 
  1575  021F                     	;# 
  1576  028C                     	;# 
  1577  028E                     	;# 
  1578  0291                     	;# 
  1579  0291                     	;# 
  1580  0292                     	;# 
  1581  0293                     	;# 
  1582  0294                     	;# 
  1583  0295                     	;# 
  1584  0295                     	;# 
  1585  0296                     	;# 
  1586  0297                     	;# 
  1587  0298                     	;# 
  1588  029F                     	;# 
  1589  030C                     	;# 
  1590  030E                     	;# 
  1591  0311                     	;# 
  1592  0311                     	;# 
  1593  0312                     	;# 
  1594  0313                     	;# 
  1595  0314                     	;# 
  1596  0315                     	;# 
  1597  0315                     	;# 
  1598  0316                     	;# 
  1599  0317                     	;# 
  1600  0318                     	;# 
  1601  038C                     	;# 
  1602  038E                     	;# 
  1603  0391                     	;# 
  1604  0392                     	;# 
  1605  0393                     	;# 
  1606  0397                     	;# 
  1607  0398                     	;# 
  1608  0399                     	;# 
  1609  039A                     	;# 
  1610  039C                     	;# 
  1611  039D                     	;# 
  1612  039E                     	;# 
  1613  039F                     	;# 
  1614  0411                     	;# 
  1615  0411                     	;# 
  1616  0412                     	;# 
  1617  0413                     	;# 
  1618  0414                     	;# 
  1619  0415                     	;# 
  1620  0416                     	;# 
  1621  0417                     	;# 
  1622  0418                     	;# 
  1623  0418                     	;# 
  1624  0419                     	;# 
  1625  041A                     	;# 
  1626  041B                     	;# 
  1627  041C                     	;# 
  1628  041D                     	;# 
  1629  041E                     	;# 
  1630  041F                     	;# 
  1631  0498                     	;# 
  1632  0498                     	;# 
  1633  0499                     	;# 
  1634  049A                     	;# 
  1635  049B                     	;# 
  1636  049B                     	;# 
  1637  049C                     	;# 
  1638  049D                     	;# 
  1639  049E                     	;# 
  1640  049F                     	;# 
  1641  0617                     	;# 
  1642  0618                     	;# 
  1643  0619                     	;# 
  1644  0619                     	;# 
  1645  061A                     	;# 
  1646  061B                     	;# 
  1647  061C                     	;# 
  1648  061C                     	;# 
  1649  061F                     	;# 
  1650  0691                     	;# 
  1651  0692                     	;# 
  1652  0693                     	;# 
  1653  0694                     	;# 
  1654  0695                     	;# 
  1655  0696                     	;# 
  1656  0697                     	;# 
  1657  0698                     	;# 
  1658  0699                     	;# 
  1659  0711                     	;# 
  1660  0712                     	;# 
  1661  0713                     	;# 
  1662  0714                     	;# 
  1663  0715                     	;# 
  1664  0716                     	;# 
  1665  0717                     	;# 
  1666  0718                     	;# 
  1667  0719                     	;# 
  1668  0891                     	;# 
  1669  0891                     	;# 
  1670  0891                     	;# 
  1671  0891                     	;# 
  1672  0891                     	;# 
  1673  0891                     	;# 
  1674  0892                     	;# 
  1675  0892                     	;# 
  1676  0892                     	;# 
  1677  0893                     	;# 
  1678  0893                     	;# 
  1679  0893                     	;# 
  1680  0893                     	;# 
  1681  0893                     	;# 
  1682  0893                     	;# 
  1683  0894                     	;# 
  1684  0894                     	;# 
  1685  0894                     	;# 
  1686  0895                     	;# 
  1687  0895                     	;# 
  1688  0895                     	;# 
  1689  0896                     	;# 
  1690  0896                     	;# 
  1691  0896                     	;# 
  1692  089B                     	;# 
  1693  0911                     	;# 
  1694  0912                     	;# 
  1695  0913                     	;# 
  1696  0914                     	;# 
  1697  0915                     	;# 
  1698  0916                     	;# 
  1699  0918                     	;# 
  1700  0919                     	;# 
  1701  091A                     	;# 
  1702  091B                     	;# 
  1703  091C                     	;# 
  1704  091D                     	;# 
  1705  091E                     	;# 
  1706  091F                     	;# 
  1707  0E0F                     	;# 
  1708  0E10                     	;# 
  1709  0E11                     	;# 
  1710  0E12                     	;# 
  1711  0E13                     	;# 
  1712  0E14                     	;# 
  1713  0E15                     	;# 
  1714  0E16                     	;# 
  1715  0E17                     	;# 
  1716  0E18                     	;# 
  1717  0E19                     	;# 
  1718  0E1A                     	;# 
  1719  0E1B                     	;# 
  1720  0E1C                     	;# 
  1721  0E1D                     	;# 
  1722  0E1E                     	;# 
  1723  0E1F                     	;# 
  1724  0E20                     	;# 
  1725  0E21                     	;# 
  1726  0E22                     	;# 
  1727  0E24                     	;# 
  1728  0E25                     	;# 
  1729  0E28                     	;# 
  1730  0E29                     	;# 
  1731  0E2A                     	;# 
  1732  0E2B                     	;# 
  1733  0E2C                     	;# 
  1734  0E2D                     	;# 
  1735  0E2E                     	;# 
  1736  0E2F                     	;# 
  1737  0E90                     	;# 
  1738  0E91                     	;# 
  1739  0E92                     	;# 
  1740  0E94                     	;# 
  1741  0E95                     	;# 
  1742  0EA0                     	;# 
  1743  0EA1                     	;# 
  1744  0EA2                     	;# 
  1745  0EA3                     	;# 
  1746  0EA4                     	;# 
  1747  0EA5                     	;# 
  1748  0F0F                     	;# 
  1749  0F10                     	;# 
  1750  0F11                     	;# 
  1751  0F12                     	;# 
  1752  0F13                     	;# 
  1753  0F14                     	;# 
  1754  0F15                     	;# 
  1755  0F16                     	;# 
  1756  0F17                     	;# 
  1757  0F18                     	;# 
  1758  0F19                     	;# 
  1759  0F1A                     	;# 
  1760  0F1B                     	;# 
  1761  0F1C                     	;# 
  1762  0F1D                     	;# 
  1763  0F1E                     	;# 
  1764  0F1F                     	;# 
  1765  0F20                     	;# 
  1766  0F21                     	;# 
  1767  0F22                     	;# 
  1768  0F23                     	;# 
  1769  0F24                     	;# 
  1770  0F25                     	;# 
  1771  0F26                     	;# 
  1772  0F27                     	;# 
  1773  0F28                     	;# 
  1774  0F29                     	;# 
  1775  0F2A                     	;# 
  1776  0F2B                     	;# 
  1777  0F2C                     	;# 
  1778  0F2D                     	;# 
  1779  0F2E                     	;# 
  1780  0F2F                     	;# 
  1781  0F30                     	;# 
  1782  0F31                     	;# 
  1783  0F32                     	;# 
  1784  0F33                     	;# 
  1785  0F34                     	;# 
  1786  0F35                     	;# 
  1787  0F36                     	;# 
  1788  0F37                     	;# 
  1789  0FE4                     	;# 
  1790  0FE5                     	;# 
  1791  0FE6                     	;# 
  1792  0FE7                     	;# 
  1793  0FE8                     	;# 
  1794  0FE9                     	;# 
  1795  0FEA                     	;# 
  1796  0FEB                     	;# 
  1797  0FED                     	;# 
  1798  0FEE                     	;# 
  1799  0FEF                     	;# 
  1800                           
  1801                           	psect	idataBANK1
  1802  07FF                     __pidataBANK1:	
  1803                           
  1804                           ;initializer for _romData
  1805  07FF  34C1               	retlw	low (_romDataMap| (0+256))
  1806                           
  1807                           	psect	stringtext1
  1808  1000                     __pstringtext1:	
  1809  1000                     _dpowers:	
  1810  1000  3401               	retlw	1
  1811  1001  3400               	retlw	0
  1812  1002  3400               	retlw	0
  1813  1003  3400               	retlw	0
  1814  1004  340A               	retlw	10
  1815  1005  3400               	retlw	0
  1816  1006  3400               	retlw	0
  1817  1007  3400               	retlw	0
  1818  1008  3464               	retlw	100
  1819  1009  3400               	retlw	0
  1820  100A  3400               	retlw	0
  1821  100B  3400               	retlw	0
  1822  100C  34E8               	retlw	232
  1823  100D  3403               	retlw	3
  1824  100E  3400               	retlw	0
  1825  100F  3400               	retlw	0
  1826  1010  3410               	retlw	16
  1827  1011  3427               	retlw	39
  1828  1012  3400               	retlw	0
  1829  1013  3400               	retlw	0
  1830  1014  34A0               	retlw	160
  1831  1015  3486               	retlw	134
  1832  1016  3401               	retlw	1
  1833  1017  3400               	retlw	0
  1834  1018  3440               	retlw	64
  1835  1019  3442               	retlw	66
  1836  101A  340F               	retlw	15
  1837  101B  3400               	retlw	0
  1838  101C  3480               	retlw	128
  1839  101D  3496               	retlw	150
  1840  101E  3498               	retlw	152
  1841  101F  3400               	retlw	0
  1842  1020  3400               	retlw	0
  1843  1021  34E1               	retlw	225
  1844  1022  34F5               	retlw	245
  1845  1023  3405               	retlw	5
  1846  1024  3400               	retlw	0
  1847  1025  34CA               	retlw	202
  1848  1026  349A               	retlw	154
  1849  1027  343B               	retlw	59
  1850  1028                     __end_of_dpowers:	
  1851                           
  1852                           	psect	stringtext2
  1853  1819                     __pstringtext2:	
  1854  1819                     _n_ADDRESS_P0:	
  1855  1819  34AD               	retlw	173
  1856  181A  3487               	retlw	135
  1857  181B  3466               	retlw	102
  1858  181C  34BC               	retlw	188
  1859  181D  34BB               	retlw	187
  1860  181E                     __end_of_n_ADDRESS_P0:	
  1861                           
  1862                           	psect	stringtext3
  1863  1800                     __pstringtext3:	
  1864  1800                     _n_ADDRESS_MUL:	
  1865  1800  3421               	retlw	33
  1866  1801                     __end_of_n_ADDRESS_MUL:	
  1867  000B                     _INTCONbits	set	11
  1868  0003                     _STATUS	set	3
  1869  0010                     _PIR0bits	set	16
  1870  000E                     _PORTCbits	set	14
  1871  000C                     _PORTAbits	set	12
  1872  009E                     _ADCON1bits	set	158
  1873  009C                     _ADRESH	set	156
  1874  009B                     _ADRESL	set	155
  1875  009D                     _ADCON0bits	set	157
  1876  0097                     _WDTCONbits	set	151
  1877  0090                     _PIE0bits	set	144
  1878  008E                     _TRISCbits	set	142
  1879  008C                     _TRISAbits	set	140
  1880  0117                     _FVRCONbits	set	279
  1881  018E                     _ANSELCbits	set	398
  1882  018C                     _ANSELAbits	set	396
  1883  018E                     _ANSELC	set	398
  1884  018C                     _ANSELA	set	396
  1885  020C                     _WPUAbits	set	524
  1886  020E                     _WPUC	set	526
  1887  020C                     _WPUA	set	524
  1888  0211                     _SSP1BUF	set	529
  1889  0214                     _SSP1STATbits	set	532
  1890  0215                     _SSP1CON1bits	set	533
  1891  028C                     _ODCONAbits	set	652
  1892  028E                     _ODCONC	set	654
  1893  028C                     _ODCONA	set	652
  1894  038E                     _INLVLC	set	910
  1895  038C                     _INLVLA	set	908
  1896  0919                     _OSCCON1bits	set	2329
  1897  0EA0                     _RC0PPSbits	set	3744
  1898  0EA2                     _RC2PPSbits	set	3746
  1899  0EA1                     _RC1PPSbits	set	3745
  1900  1801                     STR_10:	
  1901  1801  3425               	retlw	37	;'%'
  1902  1802  346C               	retlw	108	;'l'
  1903  1803  3475               	retlw	117	;'u'
  1904  1804  342E               	retlw	46	;'.'
  1905  1805  3425               	retlw	37	;'%'
  1906  1806  3436               	retlw	54	;'6'
  1907  1807  342E               	retlw	46	;'.'
  1908  1808  3436               	retlw	54	;'6'
  1909  1809  346C               	retlw	108	;'l'
  1910  180A  3475               	retlw	117	;'u'
  1911  180B  3400               	retlw	0
  1912                           
  1913                           	psect	stringtext4
  1914  180C                     __pstringtext4:	
  1915  180C                     STR_6:	
  1916  180C  3441               	retlw	65	;'A'
  1917  180D  344E               	retlw	78	;'N'
  1918  180E  3443               	retlw	67	;'C'
  1919  180F  3433               	retlw	51	;'3'
  1920  1810  346D               	retlw	109	;'m'
  1921  1811  3456               	retlw	86	;'V'
  1922  1812  3400               	retlw	0
  1923                           
  1924                           	psect	stringtext5
  1925  1813                     __pstringtext5:	
  1926  1813                     STR_7:	
  1927  1813  3452               	retlw	82	;'R'
  1928  1814  3446               	retlw	70	;'F'
  1929  1815  3450               	retlw	80	;'P'
  1930  1816  3457               	retlw	87	;'W'
  1931  1817  3452               	retlw	82	;'R'
  1932  1818  3400               	retlw	0
  1933                           
  1934                           	psect	stringtext6
  1935  181E                     __pstringtext6:	
  1936  181E                     STR_4:	
  1937  181E  3454               	retlw	84	;'T'
  1938  181F  3445               	retlw	69	;'E'
  1939  1820  344D               	retlw	77	;'M'
  1940  1821  3450               	retlw	80	;'P'
  1941  1822  3400               	retlw	0
  1942                           
  1943                           	psect	stringtext7
  1944  1823                     __pstringtext7:	
  1945  1823                     STR_5:	
  1946  1823  3456               	retlw	86	;'V'
  1947  1824  3442               	retlw	66	;'B'
  1948  1825  3441               	retlw	65	;'A'
  1949  1826  3454               	retlw	84	;'T'
  1950  1827  3400               	retlw	0
  1951                           
  1952                           	psect	stringtext8
  1953  1828                     __pstringtext8:	
  1954  1828                     STR_9:	
  1955  1828  3442               	retlw	66	;'B'
  1956  1829  344F               	retlw	79	;'O'
  1957  182A  344F               	retlw	79	;'O'
  1958  182B  3454               	retlw	84	;'T'
  1959  182C  3400               	retlw	0
  1960                           
  1961                           	psect	stringtext9
  1962  182D                     __pstringtext9:	
  1963  182D                     STR_8:	
  1964  182D  3455               	retlw	85	;'U'
  1965  182E  3448               	retlw	72	;'H'
  1966  182F  3431               	retlw	49	;'1'
  1967  1830  3400               	retlw	0
  1968                           
  1969                           	psect	stringtext10
  1970  1831                     __pstringtext10:	
  1971  1831                     STR_3:	
  1972  1831  3444               	retlw	68	;'D'
  1973  1832  3442               	retlw	66	;'B'
  1974  1833  3447               	retlw	71	;'G'
  1975  1834  3400               	retlw	0
  1976                           
  1977                           	psect	stringtext11
  1978  1835                     __pstringtext11:	
  1979  1835                     STR_1:	
  1980  1835  342F               	retlw	47	;'/'
  1981  1836  3400               	retlw	0
  1982                           
  1983                           	psect	stringtext12
  1984  0000                     __pstringtext12:	
  1985  1835                     
  1986                           ; #config settings
  1987  0000                     
  1988                           	psect	cinit
  1989  0011                     start_initialization:	
  1990  0011                     __initialization:	
  1991                           
  1992                           ; Initialize objects allocated to BANK1
  1993  0011  0021               	movlb	1	; select bank1
  1994  0012  3187  27FF  3180   	fcall	__pidataBANK1	;fetch initializer
  1995  0015  00EB               	movwf	__pdataBANK1& (0+127)
  1996                           
  1997                           ; Clear objects allocated to COMMON
  1998  0016  01FD               	clrf	__pbssCOMMON& (0+127)
  1999                           
  2000                           ; Clear objects allocated to BANK1
  2001  0017  01E8               	clrf	__pbssBANK1& (0+127)
  2002  0018  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  2003  0019  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  2004                           
  2005                           ; Clear objects allocated to BANK2
  2006  001A  3050               	movlw	low __pbssBANK2
  2007  001B  0084               	movwf	4
  2008  001C  3001               	movlw	high __pbssBANK2
  2009  001D  0085               	movwf	5
  2010  001E  3014               	movlw	20
  2011  001F  3196  2639  3180   	fcall	clear_ram0
  2012                           
  2013                           ; Clear objects allocated to BANK3
  2014  0022  30A0               	movlw	low __pbssBANK3
  2015  0023  0084               	movwf	4
  2016  0024  3001               	movlw	high __pbssBANK3
  2017  0025  0085               	movwf	5
  2018  0026  303D               	movlw	61
  2019  0027  3196  2639         	fcall	clear_ram0
  2020  0029                     end_of_initialization:	
  2021                           ;End of C runtime variable initialization code
  2022                           
  2023  0029                     __end_of__initialization:	
  2024  0029  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2025  002A  0020               	movlb	0
  2026  002B  318F  2F4B         	ljmp	_main	;jump to C main() function
  2027                           
  2028                           	psect	bssCOMMON
  2029  007D                     __pbssCOMMON:	
  2030  007D                     _nrf24l01:	
  2031  007D                     	ds	1
  2032                           
  2033                           	psect	bssBANK1
  2034  00E8                     __pbssBANK1:	
  2035  00E8                     _TXPacket:	
  2036  00E8                     	ds	2
  2037  00EA                     _sleepLoop:	
  2038  00EA                     	ds	1
  2039                           
  2040                           	psect	dataBANK1
  2041  00EB                     __pdataBANK1:	
  2042  00EB                     _romData:	
  2043  00EB                     	ds	1
  2044                           
  2045                           	psect	bssBANK2
  2046  0150                     __pbssBANK2:	
  2047  0150                     _counter:	
  2048  0150                     	ds	3
  2049  0153                     ftoa@buf:	
  2050  0153                     	ds	17
  2051                           
  2052                           	psect	bssBANK3
  2053  01A0                     __pbssBANK3:	
  2054  01A0                     _RXPacket:	
  2055  01A0                     	ds	33
  2056  01C1                     _romDataMap:	
  2057  01C1                     	ds	28
  2058                           
  2059                           	psect	clrtext
  2060  1639                     clear_ram0:	
  2061                           ;	Called with FSR0 containing the base address, and
  2062                           ;	WREG with the size to clear
  2063                           
  2064  1639  0064               	clrwdt	;clear the watchdog before getting into this loop
  2065  163A                     clrloop0:	
  2066  163A  0180               	clrf	0	;clear RAM location pointed to by FSR
  2067  163B  3101               	addfsr 0,1
  2068  163C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2069  163D  2E3A               	goto	clrloop0	;have we reached the end yet?
  2070  163E  3400               	retlw	0	;all done for this memory range, return
  2071                           
  2072                           	psect	cstackBANK2
  2073  0120                     __pcstackBANK2:	
  2074  0120                     loop@vt:	
  2075                           
  2076                           ; 3 bytes @ 0x0
  2077  0120                     	ds	3
  2078  0123                     loop@ta:	
  2079                           
  2080                           ; 3 bytes @ 0x3
  2081  0123                     	ds	3
  2082  0126                     _loop$2062:	
  2083                           
  2084                           ; 3 bytes @ 0x6
  2085  0126                     	ds	3
  2086  0129                     _loop$2063:	
  2087                           
  2088                           ; 3 bytes @ 0x9
  2089  0129                     	ds	3
  2090  012C                     _loop$882:	
  2091                           
  2092                           ; 2 bytes @ 0xC
  2093  012C                     	ds	2
  2094  012E                     loop@rfSetup:	
  2095                           
  2096                           ; 1 bytes @ 0xE
  2097  012E                     	ds	1
  2098  012F                     loop@packet:	
  2099                           
  2100                           ; 33 bytes @ 0xF
  2101  012F                     	ds	33
  2102                           
  2103                           	psect	cstackBANK1
  2104  00A0                     __pcstackBANK1:	
  2105  00A0                     ___fttol@sign1:	
  2106                           
  2107                           ; 1 bytes @ 0x0
  2108  00A0                     	ds	1
  2109  00A1                     ___fttol@lval:	
  2110                           
  2111                           ; 4 bytes @ 0x1
  2112  00A1                     	ds	4
  2113  00A5                     ___fttol@exp1:	
  2114                           
  2115                           ; 1 bytes @ 0x5
  2116  00A5                     	ds	1
  2117  00A6                     ?_ftoa:	
  2118  00A6                     ftoa@f:	
  2119                           ; 1 bytes @ 0x6
  2120                           
  2121                           
  2122                           ; 3 bytes @ 0x6
  2123  00A6                     	ds	3
  2124  00A9                     ftoa@status:	
  2125                           
  2126                           ; 1 bytes @ 0x9
  2127  00A9                     	ds	1
  2128  00AA                     ftoa@rem:	
  2129                           
  2130                           ; 4 bytes @ 0xA
  2131  00AA                     	ds	4
  2132  00AE                     ftoa@l:	
  2133                           
  2134                           ; 4 bytes @ 0xE
  2135  00AE                     	ds	4
  2136  00B2                     ftoa@cp:	
  2137                           
  2138                           ; 1 bytes @ 0x12
  2139  00B2                     	ds	1
  2140  00B3                     ?_strcat:	
  2141  00B3                     strcat@to:	
  2142                           ; 2 bytes @ 0x13
  2143                           
  2144                           
  2145                           ; 2 bytes @ 0x13
  2146  00B3                     	ds	2
  2147  00B5                     strcat@from:	
  2148                           
  2149                           ; 2 bytes @ 0x15
  2150  00B5                     	ds	2
  2151  00B7                     strcat@cp:	
  2152                           
  2153                           ; 2 bytes @ 0x17
  2154  00B7                     	ds	2
  2155  00B9                     ?_setMessage:	
  2156  00B9                     setMessage@packet:	
  2157                           ; 1 bytes @ 0x19
  2158                           
  2159                           
  2160                           ; 2 bytes @ 0x19
  2161  00B9                     	ds	2
  2162  00BB                     setMessage@topic:	
  2163                           
  2164                           ; 2 bytes @ 0x1B
  2165  00BB                     	ds	2
  2166  00BD                     setMessage@value:	
  2167                           
  2168                           ; 3 bytes @ 0x1D
  2169  00BD                     	ds	3
  2170  00C0                     ??_setMessage:	
  2171                           
  2172                           ; 1 bytes @ 0x20
  2173  00C0                     	ds	1
  2174  00C1                     setMessage@status:	
  2175                           
  2176                           ; 2 bytes @ 0x21
  2177  00C1                     	ds	2
  2178  00C3                     ??_loop:	
  2179                           
  2180                           ; 1 bytes @ 0x23
  2181  00C3                     	ds	1
  2182  00C4                     ??_main:	
  2183                           
  2184                           ; 1 bytes @ 0x24
  2185  00C4                     	ds	1
  2186  00C5                     main@bootStatus:	
  2187                           
  2188                           ; 1 bytes @ 0x25
  2189  00C5                     	ds	1
  2190  00C6                     main@pipe:	
  2191                           
  2192                           ; 1 bytes @ 0x26
  2193  00C6                     	ds	1
  2194  00C7                     main@packet:	
  2195                           
  2196                           ; 33 bytes @ 0x27
  2197  00C7                     	ds	33
  2198                           
  2199                           	psect	cstackCOMMON
  2200  0070                     __pcstackCOMMON:	
  2201  0070                     ?_isdigit:	
  2202  0070                     ?_nrf24l01ISR:	
  2203                           ; 1 bit 
  2204                           
  2205  0070                     ?_nrf24l01GetRXPacket:	
  2206                           ; 1 bytes @ 0x0
  2207                           
  2208  0070                     ?_nrf24l01SendACK:	
  2209                           ; 1 bytes @ 0x0
  2210                           
  2211  0070                     ?_nrf24l01SetRXMode:	
  2212                           ; 1 bytes @ 0x0
  2213                           
  2214  0070                     ?_nrf24l01Init:	
  2215                           ; 1 bytes @ 0x0
  2216                           
  2217  0070                     ?_nrf24l01SetTXPipe:	
  2218                           ; 1 bytes @ 0x0
  2219                           
  2220  0070                     ?_nrf24l01SetRXPipe:	
  2221                           ; 1 bytes @ 0x0
  2222                           
  2223  0070                     ?_nrf24l01CELow:	
  2224                           ; 1 bytes @ 0x0
  2225                           
  2226  0070                     ??_nrf24l01CELow:	
  2227                           ; 1 bytes @ 0x0
  2228                           
  2229  0070                     ?_nrf24l01CEHigh:	
  2230                           ; 1 bytes @ 0x0
  2231                           
  2232  0070                     ??_nrf24l01CEHigh:	
  2233                           ; 1 bytes @ 0x0
  2234                           
  2235  0070                     ?_nrf24l01CSLow:	
  2236                           ; 1 bytes @ 0x0
  2237                           
  2238  0070                     ??_nrf24l01CSLow:	
  2239                           ; 1 bytes @ 0x0
  2240                           
  2241  0070                     ?_nrf24l01CSHigh:	
  2242                           ; 1 bytes @ 0x0
  2243                           
  2244  0070                     ??_nrf24l01CSHigh:	
  2245                           ; 1 bytes @ 0x0
  2246                           
  2247  0070                     ?_nrf24l01InterfaceInit:	
  2248                           ; 1 bytes @ 0x0
  2249                           
  2250  0070                     ?_nrf24l01SPISend:	
  2251                           ; 1 bytes @ 0x0
  2252                           
  2253  0070                     ??_nrf24l01SPISend:	
  2254                           ; 1 bytes @ 0x0
  2255                           
  2256  0070                     ?_nrf24l01SPIStart:	
  2257                           ; 1 bytes @ 0x0
  2258                           
  2259  0070                     ??_nrf24l01SPIStart:	
  2260                           ; 1 bytes @ 0x0
  2261                           
  2262  0070                     ?_nrf24l01SPIEnd:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265  0070                     ??_nrf24l01SPIEnd:	
  2266                           ; 1 bytes @ 0x0
  2267                           
  2268  0070                     ?_enableInterrupts:	
  2269                           ; 1 bytes @ 0x0
  2270                           
  2271  0070                     ??_enableInterrupts:	
  2272                           ; 1 bytes @ 0x0
  2273                           
  2274  0070                     ?_exception:	
  2275                           ; 1 bytes @ 0x0
  2276                           
  2277  0070                     ??_exception:	
  2278                           ; 1 bytes @ 0x0
  2279                           
  2280  0070                     ?_ISR:	
  2281                           ; 1 bytes @ 0x0
  2282                           
  2283  0070                     ?_doWDTSleep:	
  2284                           ; 1 bytes @ 0x0
  2285                           
  2286  0070                     ?_handleRXData:	
  2287                           ; 1 bytes @ 0x0
  2288                           
  2289  0070                     ?_checkTXPower:	
  2290                           ; 1 bytes @ 0x0
  2291                           
  2292  0070                     ?_loop:	
  2293                           ; 1 bytes @ 0x0
  2294                           
  2295  0070                     ?_nrf24l01GetPipe:	
  2296                           ; 1 bytes @ 0x0
  2297                           
  2298  0070                     ?_main:	
  2299                           ; 1 bytes @ 0x0
  2300                           
  2301  0070                     ?_nrf24l01CheckACK:	
  2302                           ; 1 bytes @ 0x0
  2303                           
  2304  0070                     ?_nrf24l01ReceivePacket:	
  2305                           ; 1 bytes @ 0x0
  2306                           
  2307  0070                     ?_nrf24l01InitRegisters:	
  2308                           ; 1 bytes @ 0x0
  2309                           
  2310  0070                     ?i1_nrf24l01SetRXMode:	
  2311                           ; 1 bytes @ 0x0
  2312                           
  2313  0070                     ?i1_memset:	
  2314                           ; 1 bytes @ 0x0
  2315                           
  2316  0070                     ?_strcmp:	
  2317                           ; 1 bytes @ 0x0
  2318                           
  2319  0070                     nrf24l01SPISend@data:	
  2320                           ; 2 bytes @ 0x0
  2321                           
  2322  0070                     enableInterrupts@enable:	
  2323                           ; 1 bytes @ 0x0
  2324                           
  2325  0070                     exception@exception:	
  2326                           ; 1 bytes @ 0x0
  2327                           
  2328  0070                     strcmp@s1:	
  2329                           ; 1 bytes @ 0x0
  2330                           
  2331  0070                     i1memset@p1:	
  2332                           ; 2 bytes @ 0x0
  2333                           
  2334                           
  2335                           ; 2 bytes @ 0x0
  2336  0070                     	ds	1
  2337  0071                     ?i1_nrf24l01Send:	
  2338  0071                     i1nrf24l01Send@data:	
  2339                           ; 1 bytes @ 0x1
  2340                           
  2341                           
  2342                           ; 1 bytes @ 0x1
  2343  0071                     	ds	1
  2344  0072                     ??i1_nrf24l01Send:	
  2345  0072                     strcmp@s2:	
  2346                           ; 1 bytes @ 0x2
  2347                           
  2348  0072                     i1memset@c:	
  2349                           ; 1 bytes @ 0x2
  2350                           
  2351                           
  2352                           ; 2 bytes @ 0x2
  2353  0072                     	ds	1
  2354  0073                     ??_strcmp:	
  2355  0073                     i1nrf24l01Send@command:	
  2356                           ; 1 bytes @ 0x3
  2357                           
  2358                           
  2359                           ; 1 bytes @ 0x3
  2360  0073                     	ds	1
  2361  0074                     ??i1_nrf24l01SetRXMode:	
  2362  0074                     strcmp@r:	
  2363                           ; 1 bytes @ 0x4
  2364                           
  2365  0074                     i1memset@n:	
  2366                           ; 1 bytes @ 0x4
  2367                           
  2368                           
  2369                           ; 2 bytes @ 0x4
  2370  0074                     	ds	1
  2371  0075                     i1nrf24l01SetRXMode@config:	
  2372                           
  2373                           ; 1 bytes @ 0x5
  2374  0075                     	ds	1
  2375  0076                     ??i1_memset:	
  2376  0076                     i1nrf24l01SetRXMode@rxMode:	
  2377                           ; 1 bytes @ 0x6
  2378                           
  2379  0076                     i1memset@p:	
  2380                           ; 1 bytes @ 0x6
  2381                           
  2382                           
  2383                           ; 2 bytes @ 0x6
  2384  0076                     	ds	1
  2385  0077                     ??_nrf24l01CheckACK:	
  2386                           
  2387                           ; 1 bytes @ 0x7
  2388  0077                     	ds	1
  2389  0078                     ??_nrf24l01ReceivePacket:	
  2390                           
  2391                           ; 1 bytes @ 0x8
  2392  0078                     	ds	1
  2393  0079                     nrf24l01ReceivePacket@width:	
  2394                           
  2395                           ; 1 bytes @ 0x9
  2396  0079                     	ds	1
  2397  007A                     nrf24l01ReceivePacket@i:	
  2398                           
  2399                           ; 1 bytes @ 0xA
  2400  007A                     	ds	1
  2401  007B                     ??_nrf24l01ISR:	
  2402                           
  2403                           ; 1 bytes @ 0xB
  2404  007B                     	ds	1
  2405  007C                     nrf24l01ISR@status:	
  2406                           
  2407                           ; 1 bytes @ 0xC
  2408  007C                     	ds	1
  2409  007D                     ??_ISR:	
  2410                           
  2411                           	psect	cstackBANK0
  2412  0020                     __pcstackBANK0:	
  2413                           ; 1 bytes @ 0xD
  2414                           
  2415  0020                     ?___ftge:	
  2416  0020                     ??_nrf24l01GetRXPacket:	
  2417                           ; 1 bit 
  2418                           
  2419  0020                     ?_nrf24l01Send:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0020                     ?_strcpy:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0020                     ??_isdigit:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0020                     ??_nrf24l01InterfaceInit:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0020                     ??_doWDTSleep:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0020                     ?___bmul:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0020                     ?_memset:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0020                     ?_strlen:	
  2441                           ; 2 bytes @ 0x0
  2442                           
  2443  0020                     ?___wmul:	
  2444                           ; 2 bytes @ 0x0
  2445                           
  2446  0020                     ?___lwdiv:	
  2447                           ; 2 bytes @ 0x0
  2448                           
  2449  0020                     ?___lwmod:	
  2450                           ; 2 bytes @ 0x0
  2451                           
  2452  0020                     ?___ftpack:	
  2453                           ; 2 bytes @ 0x0
  2454                           
  2455  0020                     ?___lldiv:	
  2456                           ; 3 bytes @ 0x0
  2457                           
  2458  0020                     nrf24l01Send@data:	
  2459                           ; 4 bytes @ 0x0
  2460                           
  2461  0020                     ___bmul@multiplicand:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464  0020                     _isdigit$1811:	
  2465                           ; 1 bytes @ 0x0
  2466                           
  2467  0020                     ___wmul@multiplier:	
  2468                           ; 1 bytes @ 0x0
  2469                           
  2470  0020                     ___lwdiv@divisor:	
  2471                           ; 2 bytes @ 0x0
  2472                           
  2473  0020                     ___lwmod@divisor:	
  2474                           ; 2 bytes @ 0x0
  2475                           
  2476  0020                     memset@p1:	
  2477                           ; 2 bytes @ 0x0
  2478                           
  2479  0020                     strcpy@from:	
  2480                           ; 2 bytes @ 0x0
  2481                           
  2482  0020                     strlen@s:	
  2483                           ; 2 bytes @ 0x0
  2484                           
  2485  0020                     ___ftpack@arg:	
  2486                           ; 2 bytes @ 0x0
  2487                           
  2488  0020                     ___ftge@ff1:	
  2489                           ; 3 bytes @ 0x0
  2490                           
  2491  0020                     ___lldiv@divisor:	
  2492                           ; 3 bytes @ 0x0
  2493                           
  2494                           
  2495                           ; 4 bytes @ 0x0
  2496  0020                     	ds	1
  2497  0021                     ??_nrf24l01Send:	
  2498  0021                     ??___bmul:	
  2499                           ; 1 bytes @ 0x1
  2500                           
  2501  0021                     doWDTSleep@wdtps:	
  2502                           ; 1 bytes @ 0x1
  2503                           
  2504  0021                     isdigit@c:	
  2505                           ; 1 bytes @ 0x1
  2506                           
  2507                           
  2508                           ; 1 bytes @ 0x1
  2509  0021                     	ds	1
  2510  0022                     ??_strlen:	
  2511  0022                     ??_strcpy:	
  2512                           ; 1 bytes @ 0x2
  2513                           
  2514  0022                     nrf24l01Send@command:	
  2515                           ; 1 bytes @ 0x2
  2516                           
  2517  0022                     ___bmul@product:	
  2518                           ; 1 bytes @ 0x2
  2519                           
  2520  0022                     ___wmul@multiplicand:	
  2521                           ; 1 bytes @ 0x2
  2522                           
  2523  0022                     ___lwdiv@dividend:	
  2524                           ; 2 bytes @ 0x2
  2525                           
  2526  0022                     ___lwmod@dividend:	
  2527                           ; 2 bytes @ 0x2
  2528                           
  2529  0022                     memset@c:	
  2530                           ; 2 bytes @ 0x2
  2531                           
  2532                           
  2533                           ; 2 bytes @ 0x2
  2534  0022                     	ds	1
  2535  0023                     ??_nrf24l01SetRXMode:	
  2536  0023                     ?_nrf24l01ChangeTXPower:	
  2537                           ; 1 bytes @ 0x3
  2538                           
  2539  0023                     ??_nrf24l01SetRXPipe:	
  2540                           ; 1 bytes @ 0x3
  2541                           
  2542  0023                     ___bmul@multiplier:	
  2543                           ; 1 bytes @ 0x3
  2544                           
  2545  0023                     ___ftpack@exp:	
  2546                           ; 1 bytes @ 0x3
  2547                           
  2548  0023                     strcpy@to:	
  2549                           ; 1 bytes @ 0x3
  2550                           
  2551  0023                     nrf24l01ChangeTXPower@addPower:	
  2552                           ; 1 bytes @ 0x3
  2553                           
  2554  0023                     ___ftge@ff2:	
  2555                           ; 2 bytes @ 0x3
  2556                           
  2557                           
  2558                           ; 3 bytes @ 0x3
  2559  0023                     	ds	1
  2560  0024                     ??_nrf24l01SetTXPipe:	
  2561  0024                     ??___wmul:	
  2562                           ; 1 bytes @ 0x4
  2563                           
  2564  0024                     ??___lwdiv:	
  2565                           ; 1 bytes @ 0x4
  2566                           
  2567  0024                     ??___lwmod:	
  2568                           ; 1 bytes @ 0x4
  2569                           
  2570  0024                     nrf24l01SetRXMode@config:	
  2571                           ; 1 bytes @ 0x4
  2572                           
  2573  0024                     ___ftpack@sign:	
  2574                           ; 1 bytes @ 0x4
  2575                           
  2576  0024                     strcpy@cp:	
  2577                           ; 1 bytes @ 0x4
  2578                           
  2579  0024                     ___wmul@product:	
  2580                           ; 1 bytes @ 0x4
  2581                           
  2582  0024                     memset@n:	
  2583                           ; 2 bytes @ 0x4
  2584                           
  2585  0024                     strlen@cp:	
  2586                           ; 2 bytes @ 0x4
  2587                           
  2588  0024                     ___lldiv@dividend:	
  2589                           ; 2 bytes @ 0x4
  2590                           
  2591                           
  2592                           ; 4 bytes @ 0x4
  2593  0024                     	ds	1
  2594  0025                     ??_nrf24l01ChangeTXPower:	
  2595  0025                     ??___ftpack:	
  2596                           ; 1 bytes @ 0x5
  2597                           
  2598  0025                     nrf24l01SetRXMode@rxMode:	
  2599                           ; 1 bytes @ 0x5
  2600                           
  2601  0025                     nrf24l01SetRXPipe@pipe:	
  2602                           ; 1 bytes @ 0x5
  2603                           
  2604  0025                     ___lwmod@counter:	
  2605                           ; 1 bytes @ 0x5
  2606                           
  2607  0025                     ___lwdiv@quotient:	
  2608                           ; 1 bytes @ 0x5
  2609                           
  2610                           
  2611                           ; 2 bytes @ 0x5
  2612  0025                     	ds	1
  2613  0026                     ??_memset:	
  2614  0026                     ??_nrf24l01GetPipe:	
  2615                           ; 1 bytes @ 0x6
  2616                           
  2617  0026                     ??___ftge:	
  2618                           ; 1 bytes @ 0x6
  2619                           
  2620  0026                     nrf24l01ChangeTXPower@rfSetup:	
  2621                           ; 1 bytes @ 0x6
  2622                           
  2623  0026                     nrf24l01SetTXPipe@pipe:	
  2624                           ; 1 bytes @ 0x6
  2625                           
  2626  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2627                           ; 1 bytes @ 0x6
  2628                           
  2629  0026                     memset@p:	
  2630                           ; 1 bytes @ 0x6
  2631                           
  2632                           
  2633                           ; 2 bytes @ 0x6
  2634  0026                     	ds	1
  2635  0027                     ?_nrf24l01SendPacket:	
  2636  0027                     ??_checkTXPower:	
  2637                           ; 1 bytes @ 0x7
  2638                           
  2639  0027                     ??_nrf24l01InitRegisters:	
  2640                           ; 1 bytes @ 0x7
  2641                           
  2642  0027                     ___lwdiv@counter:	
  2643                           ; 1 bytes @ 0x7
  2644                           
  2645  0027                     nrf24l01SendPacket@Packet:	
  2646                           ; 1 bytes @ 0x7
  2647                           
  2648                           
  2649                           ; 2 bytes @ 0x7
  2650  0027                     	ds	1
  2651  0028                     ??___lldiv:	
  2652  0028                     ?___awtoft:	
  2653                           ; 1 bytes @ 0x8
  2654                           
  2655  0028                     ?___lbtoft:	
  2656                           ; 3 bytes @ 0x8
  2657                           
  2658  0028                     ?___lltoft:	
  2659                           ; 3 bytes @ 0x8
  2660                           
  2661  0028                     checkTXPower@rxPacket:	
  2662                           ; 3 bytes @ 0x8
  2663                           
  2664  0028                     nrf24l01GetPipe@pipe:	
  2665                           ; 1 bytes @ 0x8
  2666                           
  2667  0028                     ___awtoft@c:	
  2668                           ; 1 bytes @ 0x8
  2669                           
  2670  0028                     ___lltoft@c:	
  2671                           ; 2 bytes @ 0x8
  2672                           
  2673                           
  2674                           ; 4 bytes @ 0x8
  2675  0028                     	ds	1
  2676  0029                     ??_nrf24l01SendPacket:	
  2677  0029                     nrf24l01GetPipe@name:	
  2678                           ; 1 bytes @ 0x9
  2679                           
  2680  0029                     nrf24l01InitRegisters@channel:	
  2681                           ; 1 bytes @ 0x9
  2682                           
  2683  0029                     ___lldiv@quotient:	
  2684                           ; 1 bytes @ 0x9
  2685                           
  2686                           
  2687                           ; 4 bytes @ 0x9
  2688  0029                     	ds	1
  2689  002A                     nrf24l01GetPipe@i:	
  2690  002A                     nrf24l01InitRegisters@setupAW:	
  2691                           ; 1 bytes @ 0xA
  2692                           
  2693                           
  2694                           ; 1 bytes @ 0xA
  2695  002A                     	ds	1
  2696  002B                     ??___awtoft:	
  2697  002B                     ??___lbtoft:	
  2698                           ; 1 bytes @ 0xB
  2699                           
  2700  002B                     nrf24l01InitRegisters@feature:	
  2701                           ; 1 bytes @ 0xB
  2702                           
  2703                           
  2704                           ; 1 bytes @ 0xB
  2705  002B                     	ds	1
  2706  002C                     ??___lltoft:	
  2707  002C                     nrf24l01InitRegisters@rfSetup:	
  2708                           ; 1 bytes @ 0xC
  2709                           
  2710                           
  2711                           ; 1 bytes @ 0xC
  2712  002C                     	ds	1
  2713  002D                     nrf24l01SendPacket@i:	
  2714  002D                     nrf24l01InitRegisters@status:	
  2715                           ; 1 bytes @ 0xD
  2716                           
  2717  002D                     ___lldiv@counter:	
  2718                           ; 1 bytes @ 0xD
  2719                           
  2720  002D                     ___awtoft@sign:	
  2721                           ; 1 bytes @ 0xD
  2722                           
  2723  002D                     ___lltoft@exp:	
  2724                           ; 1 bytes @ 0xD
  2725                           
  2726                           
  2727                           ; 1 bytes @ 0xD
  2728  002D                     	ds	1
  2729  002E                     ??_nrf24l01SendACK:	
  2730  002E                     ?___ftadd:	
  2731                           ; 1 bytes @ 0xE
  2732                           
  2733  002E                     ?___llmod:	
  2734                           ; 3 bytes @ 0xE
  2735                           
  2736  002E                     nrf24l01InitRegisters@enAA:	
  2737                           ; 4 bytes @ 0xE
  2738                           
  2739  002E                     ___ftadd@f1:	
  2740                           ; 1 bytes @ 0xE
  2741                           
  2742  002E                     ___llmod@divisor:	
  2743                           ; 3 bytes @ 0xE
  2744                           
  2745                           
  2746                           ; 4 bytes @ 0xE
  2747  002E                     	ds	1
  2748  002F                     nrf24l01SendACK@packet:	
  2749  002F                     nrf24l01InitRegisters@DynPD:	
  2750                           ; 1 bytes @ 0xF
  2751                           
  2752  002F                     ___lbtoft@c:	
  2753                           ; 1 bytes @ 0xF
  2754                           
  2755                           
  2756                           ; 1 bytes @ 0xF
  2757  002F                     	ds	1
  2758  0030                     ??_handleRXData:	
  2759  0030                     nrf24l01InitRegisters@config:	
  2760                           ; 1 bytes @ 0x10
  2761                           
  2762                           
  2763                           ; 1 bytes @ 0x10
  2764  0030                     	ds	1
  2765  0031                     handleRXData@RXPacket:	
  2766  0031                     nrf24l01InitRegisters@i:	
  2767                           ; 1 bytes @ 0x11
  2768                           
  2769  0031                     ___ftadd@f2:	
  2770                           ; 2 bytes @ 0x11
  2771                           
  2772                           
  2773                           ; 3 bytes @ 0x11
  2774  0031                     	ds	1
  2775  0032                     ?_sleep:	
  2776  0032                     sleep@milliseconds:	
  2777                           ; 1 bytes @ 0x12
  2778                           
  2779  0032                     ___llmod@dividend:	
  2780                           ; 2 bytes @ 0x12
  2781                           
  2782                           
  2783                           ; 4 bytes @ 0x12
  2784  0032                     	ds	1
  2785  0033                     ??_nrf24l01Init:	
  2786                           
  2787                           ; 1 bytes @ 0x13
  2788  0033                     	ds	1
  2789  0034                     ??_sleep:	
  2790  0034                     ??___ftadd:	
  2791                           ; 1 bytes @ 0x14
  2792                           
  2793                           
  2794                           ; 1 bytes @ 0x14
  2795  0034                     	ds	2
  2796  0036                     ??___llmod:	
  2797                           
  2798                           ; 1 bytes @ 0x16
  2799  0036                     	ds	1
  2800  0037                     ___llmod@counter:	
  2801                           
  2802                           ; 1 bytes @ 0x17
  2803  0037                     	ds	1
  2804  0038                     ?_sprintf:	
  2805  0038                     ___ftadd@sign:	
  2806                           ; 2 bytes @ 0x18
  2807                           
  2808  0038                     sprintf@f:	
  2809                           ; 1 bytes @ 0x18
  2810                           
  2811                           
  2812                           ; 2 bytes @ 0x18
  2813  0038                     	ds	1
  2814  0039                     ___ftadd@exp2:	
  2815                           
  2816                           ; 1 bytes @ 0x19
  2817  0039                     	ds	1
  2818  003A                     ___ftadd@exp1:	
  2819                           
  2820                           ; 1 bytes @ 0x1A
  2821  003A                     	ds	1
  2822  003B                     ?___ftdiv:	
  2823  003B                     ?___ftsub:	
  2824                           ; 3 bytes @ 0x1B
  2825                           
  2826  003B                     ___ftdiv@f2:	
  2827                           ; 3 bytes @ 0x1B
  2828                           
  2829  003B                     ___ftsub@f2:	
  2830                           ; 3 bytes @ 0x1B
  2831                           
  2832                           
  2833                           ; 3 bytes @ 0x1B
  2834  003B                     	ds	3
  2835  003E                     ___ftdiv@f1:	
  2836  003E                     ___ftsub@f1:	
  2837                           ; 3 bytes @ 0x1E
  2838                           
  2839                           
  2840                           ; 3 bytes @ 0x1E
  2841  003E                     	ds	3
  2842  0041                     ??___ftdiv:	
  2843  0041                     ??___ftsub:	
  2844                           ; 1 bytes @ 0x21
  2845                           
  2846                           
  2847                           ; 1 bytes @ 0x21
  2848  0041                     	ds	1
  2849  0042                     ??_sprintf:	
  2850                           
  2851                           ; 1 bytes @ 0x22
  2852  0042                     	ds	3
  2853  0045                     ___ftdiv@cntr:	
  2854                           
  2855                           ; 1 bytes @ 0x25
  2856  0045                     	ds	1
  2857  0046                     ___ftdiv@f3:	
  2858                           
  2859                           ; 3 bytes @ 0x26
  2860  0046                     	ds	2
  2861  0048                     sprintf@flag:	
  2862                           
  2863                           ; 1 bytes @ 0x28
  2864  0048                     	ds	1
  2865  0049                     sprintf@ap:	
  2866  0049                     ___ftdiv@exp:	
  2867                           ; 1 bytes @ 0x29
  2868                           
  2869                           
  2870                           ; 1 bytes @ 0x29
  2871  0049                     	ds	1
  2872  004A                     ___ftdiv@sign:	
  2873  004A                     sprintf@val:	
  2874                           ; 1 bytes @ 0x2A
  2875                           
  2876                           
  2877                           ; 4 bytes @ 0x2A
  2878  004A                     	ds	1
  2879  004B                     ?_getADCValue:	
  2880                           
  2881                           ; 3 bytes @ 0x2B
  2882  004B                     	ds	3
  2883  004E                     ??_getADCValue:	
  2884  004E                     sprintf@sp:	
  2885                           ; 1 bytes @ 0x2E
  2886                           
  2887                           
  2888                           ; 1 bytes @ 0x2E
  2889  004E                     	ds	1
  2890  004F                     sprintf@width:	
  2891                           
  2892                           ; 2 bytes @ 0x2F
  2893  004F                     	ds	2
  2894  0051                     getADCValue@adcLoop:	
  2895  0051                     sprintf@prec:	
  2896                           ; 2 bytes @ 0x31
  2897                           
  2898                           
  2899                           ; 2 bytes @ 0x31
  2900  0051                     	ds	2
  2901  0053                     getADCValue@channel:	
  2902  0053                     sprintf@c:	
  2903                           ; 1 bytes @ 0x33
  2904                           
  2905                           
  2906                           ; 1 bytes @ 0x33
  2907  0053                     	ds	1
  2908  0054                     getADCValue@adcSum:	
  2909                           
  2910                           ; 3 bytes @ 0x34
  2911  0054                     	ds	3
  2912  0057                     ?___ftmul:	
  2913  0057                     ?___ftneg:	
  2914                           ; 3 bytes @ 0x37
  2915                           
  2916  0057                     ___ftmul@f1:	
  2917                           ; 3 bytes @ 0x37
  2918                           
  2919  0057                     ___ftneg@f1:	
  2920                           ; 3 bytes @ 0x37
  2921                           
  2922                           
  2923                           ; 3 bytes @ 0x37
  2924  0057                     	ds	3
  2925  005A                     ??___ftneg:	
  2926  005A                     ___ftmul@f2:	
  2927                           ; 1 bytes @ 0x3A
  2928                           
  2929                           
  2930                           ; 3 bytes @ 0x3A
  2931  005A                     	ds	3
  2932  005D                     ??___ftmul:	
  2933                           
  2934                           ; 1 bytes @ 0x3D
  2935  005D                     	ds	4
  2936  0061                     ___ftmul@exp:	
  2937                           
  2938                           ; 1 bytes @ 0x41
  2939  0061                     	ds	1
  2940  0062                     ___ftmul@f3_as_product:	
  2941                           
  2942                           ; 3 bytes @ 0x42
  2943  0062                     	ds	3
  2944  0065                     ___ftmul@cntr:	
  2945                           
  2946                           ; 1 bytes @ 0x45
  2947  0065                     	ds	1
  2948  0066                     ___ftmul@sign:	
  2949                           
  2950                           ; 1 bytes @ 0x46
  2951  0066                     	ds	1
  2952  0067                     ?___fttol:	
  2953  0067                     ___fttol@f1:	
  2954                           ; 4 bytes @ 0x47
  2955                           
  2956                           
  2957                           ; 3 bytes @ 0x47
  2958  0067                     	ds	4
  2959  006B                     ??___fttol:	
  2960                           
  2961                           ; 1 bytes @ 0x4B
  2962  006B                     	ds	4
  2963  006F                     ??_ftoa:	
  2964                           
  2965                           ; 1 bytes @ 0x4F
  2966  006F                     	ds	1
  2967  0070                     ??_strcat:	
  2968                           
  2969                           	psect	maintext
  2970  0F4B                     __pmaintext:	
  2971                           ; 1 bytes @ 0x50
  2972 ;;
  2973 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2974 ;;
  2975 ;; *************** function _main *****************
  2976 ;; Defined at:
  2977 ;;		line 275 in file "main.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  packet         33   39[BANK1 ] struct .
  2982 ;;  pipe            1   38[BANK1 ] unsigned char 
  2983 ;;  bootStatus      1   37[BANK1 ] unsigned char 
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  1    wreg      void 
  2986 ;; Registers used:
  2987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2988 ;; Tracked objects:
  2989 ;;		On entry : B1F/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2994 ;;      Locals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  2995 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2996 ;;      Totals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  2997 ;;Total ram usage:       36 bytes
  2998 ;; Hardware stack levels required when called:   16
  2999 ;; This function calls:
  3000 ;;		___lbtoft
  3001 ;;		_loop
  3002 ;;		_nrf24l01GetPipe
  3003 ;;		_nrf24l01Init
  3004 ;;		_nrf24l01SendPacket
  3005 ;;		_nrf24l01SetRXPipe
  3006 ;;		_nrf24l01SetTXPipe
  3007 ;;		_setMessage
  3008 ;;		_sleep
  3009 ;;		_strcpy
  3010 ;; This function is called by:
  3011 ;;		Startup code after reset
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           
  3016                           ;psect for function _main
  3017  0F4B                     _main:	
  3018                           
  3019                           ;main.c: 277: unsigned char bootStatus = STATUS;
  3020                           
  3021                           ;incstack = 0
  3022                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3023  0F4B  0020               	movlb	0	; select bank0
  3024  0F4C  0803               	movf	3,w	;volatile
  3025  0F4D  0021               	movlb	1	; select bank1
  3026  0F4E  00C4               	movwf	??_main^(0+128)
  3027  0F4F  0844               	movf	??_main^(0+128),w
  3028  0F50  00C5               	movwf	main@bootStatus^(0+128)
  3029                           
  3030                           ;main.c: 280: ANSELA = 0x00;
  3031  0F51  0023               	movlb	3	; select bank3
  3032  0F52  018C               	clrf	12	;volatile
  3033                           
  3034                           ;main.c: 281: ANSELC = 0x00;
  3035  0F53  018E               	clrf	14	;volatile
  3036                           
  3037                           ;main.c: 283: ODCONA = 0x00;
  3038  0F54  0025               	movlb	5	; select bank5
  3039  0F55  018C               	clrf	12	;volatile
  3040                           
  3041                           ;main.c: 284: ODCONC = 0x00;
  3042  0F56  018E               	clrf	14	;volatile
  3043                           
  3044                           ;main.c: 289: INLVLA = 0x00;
  3045  0F57  0027               	movlb	7	; select bank7
  3046  0F58  018C               	clrf	12	;volatile
  3047                           
  3048                           ;main.c: 290: INLVLC = 0x00;
  3049  0F59  018E               	clrf	14	;volatile
  3050                           
  3051                           ;main.c: 292: WPUA = 0x00;
  3052  0F5A  0024               	movlb	4	; select bank4
  3053  0F5B  018C               	clrf	12	;volatile
  3054                           
  3055                           ;main.c: 293: WPUC = 0x00;
  3056  0F5C  018E               	clrf	14	;volatile
  3057                           
  3058                           ;main.c: 295: TRISCbits.TRISC5 = 0;
  3059  0F5D  0021               	movlb	1	; select bank1
  3060  0F5E  128E               	bcf	14,5	;volatile
  3061                           
  3062                           ;main.c: 296: TRISCbits.TRISC4 = 0;
  3063  0F5F  120E               	bcf	14,4	;volatile
  3064                           
  3065                           ;main.c: 298: PORTCbits.RC4 = 0;
  3066  0F60  0020               	movlb	0	; select bank0
  3067  0F61  120E               	bcf	14,4	;volatile
  3068                           
  3069                           ;main.c: 305: INTCONbits.PEIE = 0;
  3070  0F62  130B               	bcf	11,6	;volatile
  3071                           
  3072                           ;main.c: 306: INTCONbits.GIE = 0;
  3073  0F63  138B               	bcf	11,7	;volatile
  3074                           
  3075                           ;main.c: 308: OSCCON1bits.NOSC = 0b000;
  3076  0F64  308F               	movlw	-113
  3077  0F65  0032               	movlb	18	; select bank18
  3078  0F66  0599               	andwf	25,f	;volatile
  3079                           
  3080                           ;main.c: 309: OSCCON1bits.NDIV = 0b000;
  3081  0F67  30F0               	movlw	-16
  3082  0F68  0599               	andwf	25,f	;volatile
  3083                           
  3084                           ;main.c: 311: _delay((unsigned long)((10)*(32000000/4000.0)));
  3085  0F69  3068               	movlw	104
  3086  0F6A  0021               	movlb	1	; select bank1
  3087  0F6B  00C4               	movwf	??_main^(0+128)
  3088  0F6C  30E4               	movlw	228
  3089  0F6D                     u3617:	
  3090  0F6D  0B89               	decfsz	9,f
  3091  0F6E  2F6D               	goto	u3617
  3092  0F6F  0BC4               	decfsz	??_main^(0+128),f
  3093  0F70  2F6D               	goto	u3617
  3094  0F71  0000               	nop
  3095                           
  3096                           ;main.c: 315: strcpy(romData->name, "UH1");
  3097  0F72  302D               	movlw	low (STR_8| (0+32768))
  3098  0F73  0020               	movlb	0	; select bank0
  3099  0F74  00A0               	movwf	strcpy@from
  3100  0F75  3098               	movlw	high (STR_8| (0+32768))
  3101  0F76  00A1               	movwf	strcpy@from+1
  3102  0F77  0021               	movlb	1	; select bank1
  3103  0F78  086B               	movf	_romData^(0+128),w
  3104  0F79  3E01               	addlw	1
  3105  0F7A  3187  27E3  318F   	fcall	_strcpy
  3106                           
  3107                           ;main.c: 317: nrf24l01Init();
  3108  0F7D  3188  200A  318F   	fcall	_nrf24l01Init
  3109                           
  3110                           ;main.c: 319: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3111  0F80  0021               	movlb	1	; select bank1
  3112  0F81  086B               	movf	_romData^(0+128),w
  3113  0F82  3E01               	addlw	1
  3114  0F83  3189  2165  318F   	fcall	_nrf24l01GetPipe
  3115  0F86  0021               	movlb	1	; select bank1
  3116  0F87  00C4               	movwf	??_main^(0+128)
  3117  0F88  0844               	movf	??_main^(0+128),w
  3118  0F89  00C6               	movwf	main@pipe^(0+128)
  3119                           
  3120                           ;main.c: 320: nrf24l01SetTXPipe(pipe);
  3121  0F8A  0846               	movf	main@pipe^(0+128),w
  3122  0F8B  318B  2317  318F   	fcall	_nrf24l01SetTXPipe
  3123                           
  3124                           ;main.c: 321: nrf24l01SetRXPipe(pipe);
  3125  0F8E  0021               	movlb	1	; select bank1
  3126  0F8F  0846               	movf	main@pipe^(0+128),w
  3127  0F90  3197  27BD  318F   	fcall	_nrf24l01SetRXPipe
  3128                           
  3129                           ;main.c: 323: counter = pipe;
  3130  0F93  0021               	movlb	1	; select bank1
  3131  0F94  0846               	movf	main@pipe^(0+128),w
  3132  0F95  3197  270D  318F   	fcall	___lbtoft
  3133  0F98  0020               	movlb	0	; select bank0
  3134  0F99  0828               	movf	?___lbtoft,w
  3135  0F9A  0022               	movlb	2	; select bank2
  3136  0F9B  00D0               	movwf	_counter^(0+256)
  3137  0F9C  0020               	movlb	0	; select bank0
  3138  0F9D  0829               	movf	?___lbtoft+1,w
  3139  0F9E  0022               	movlb	2	; select bank2
  3140  0F9F  00D1               	movwf	(_counter+1)^(0+256)
  3141  0FA0  0020               	movlb	0	; select bank0
  3142  0FA1  082A               	movf	?___lbtoft+2,w
  3143  0FA2  0022               	movlb	2	; select bank2
  3144  0FA3  00D2               	movwf	(_counter+2)^(0+256)
  3145                           
  3146                           ;main.c: 326: ADCON0bits.ADON = 0;
  3147  0FA4  0021               	movlb	1	; select bank1
  3148  0FA5  101D               	bcf	29,0	;volatile
  3149                           
  3150                           ;main.c: 329: PORTAbits.RA4 = 0;
  3151  0FA6  0020               	movlb	0	; select bank0
  3152  0FA7  120C               	bcf	12,4	;volatile
  3153                           
  3154                           ;main.c: 330: TRISAbits.TRISA4 = 1;
  3155  0FA8  0021               	movlb	1	; select bank1
  3156  0FA9  160C               	bsf	12,4	;volatile
  3157                           
  3158                           ;main.c: 331: WPUAbits.WPUA4 = 0;
  3159  0FAA  0024               	movlb	4	; select bank4
  3160  0FAB  120C               	bcf	12,4	;volatile
  3161                           
  3162                           ;main.c: 332: ODCONAbits.ODCA4 = 1;
  3163  0FAC  0025               	movlb	5	; select bank5
  3164  0FAD  160C               	bsf	12,4	;volatile
  3165                           
  3166                           ;main.c: 333: ANSELAbits.ANSA4 = 1;
  3167  0FAE  0023               	movlb	3	; select bank3
  3168  0FAF  160C               	bsf	12,4	;volatile
  3169                           
  3170                           ;main.c: 336: ANSELCbits.ANSC3 = 1;
  3171  0FB0  158E               	bsf	14,3	;volatile
  3172                           
  3173                           ;main.c: 337: TRISCbits.TRISC3 = 1;
  3174  0FB1  0021               	movlb	1	; select bank1
  3175  0FB2  158E               	bsf	14,3	;volatile
  3176                           
  3177                           ;main.c: 340: FVRCONbits.TSEN = 0;
  3178  0FB3  0022               	movlb	2	; select bank2
  3179  0FB4  1297               	bcf	23,5	;volatile
  3180                           
  3181                           ;main.c: 341: FVRCONbits.TSRNG = 1;
  3182  0FB5  1617               	bsf	23,4	;volatile
  3183                           
  3184                           ;main.c: 344: FVRCONbits.FVREN = 0;
  3185  0FB6  1397               	bcf	23,7	;volatile
  3186                           
  3187                           ;main.c: 345: FVRCONbits.ADFVR = 0b10;
  3188  0FB7  0817               	movf	23,w	;volatile
  3189  0FB8  39FC               	andlw	-4
  3190  0FB9  3802               	iorlw	2
  3191  0FBA  0097               	movwf	23	;volatile
  3192                           
  3193                           ;main.c: 347: ADCON1bits.ADCS = 0b111;
  3194  0FBB  3070               	movlw	112
  3195  0FBC  0021               	movlb	1	; select bank1
  3196  0FBD  049E               	iorwf	30,f	;volatile
  3197                           
  3198                           ;main.c: 348: ADCON1bits.ADFM = 1;
  3199  0FBE  179E               	bsf	30,7	;volatile
  3200                           
  3201                           ;main.c: 349: ADCON1bits.ADPREF = 0b11;
  3202  0FBF  3003               	movlw	3
  3203  0FC0  049E               	iorwf	30,f	;volatile
  3204                           
  3205                           ;main.c: 350: ADCON1bits.ADNREF = 0b00;
  3206  0FC1  111E               	bcf	30,2	;volatile
  3207                           
  3208                           ;main.c: 353: ADCON0bits.CHS = 3;
  3209  0FC2  081D               	movf	29,w	;volatile
  3210  0FC3  3903               	andlw	-253
  3211  0FC4  380C               	iorlw	12
  3212  0FC5  009D               	movwf	29	;volatile
  3213                           
  3214                           ;main.c: 358: TRISAbits.TRISA2 = 1;
  3215  0FC6  150C               	bsf	12,2	;volatile
  3216                           
  3217                           ;main.c: 359: PIE0bits.INTE = 1;
  3218  0FC7  1410               	bsf	16,0	;volatile
  3219                           
  3220                           ;main.c: 360: INTCONbits.INTEDG = 0;
  3221  0FC8  100B               	bcf	11,0	;volatile
  3222                           
  3223                           ;main.c: 363: TRISAbits.TRISA5 = 0;
  3224  0FC9  128C               	bcf	12,5	;volatile
  3225                           
  3226                           ;main.c: 364: PORTAbits.RA5 = 0;
  3227  0FCA  0020               	movlb	0	; select bank0
  3228  0FCB  128C               	bcf	12,5	;volatile
  3229                           
  3230                           ;main.c: 367: INTCONbits.PEIE = 1;
  3231  0FCC  170B               	bsf	11,6	;volatile
  3232                           
  3233                           ;main.c: 368: INTCONbits.GIE = 1;
  3234  0FCD  178B               	bsf	11,7	;volatile
  3235                           
  3236                           ;main.c: 370: nrf24l01Packet_t packet;;main.c: 372: setMessage(&packet, "BOOT", bootStat
      +                          us);
  3237  0FCE  30C7               	movlw	low main@packet
  3238  0FCF  0021               	movlb	1	; select bank1
  3239  0FD0  00B9               	movwf	setMessage@packet^(0+128)
  3240  0FD1  3000               	movlw	high main@packet
  3241  0FD2  00BA               	movwf	(setMessage@packet+1)^(0+128)
  3242  0FD3  3028               	movlw	low (STR_9| (0+32768))
  3243  0FD4  00BB               	movwf	setMessage@topic^(0+128)
  3244  0FD5  3098               	movlw	high (STR_9| (0+32768))
  3245  0FD6  00BC               	movwf	(setMessage@topic^(0+128)+1)
  3246  0FD7  0845               	movf	main@bootStatus^(0+128),w
  3247  0FD8  3197  270D  318F   	fcall	___lbtoft
  3248  0FDB  0020               	movlb	0	; select bank0
  3249  0FDC  0828               	movf	?___lbtoft,w
  3250  0FDD  0021               	movlb	1	; select bank1
  3251  0FDE  00BD               	movwf	setMessage@value^(0+128)
  3252  0FDF  0020               	movlb	0	; select bank0
  3253  0FE0  0829               	movf	?___lbtoft+1,w
  3254  0FE1  0021               	movlb	1	; select bank1
  3255  0FE2  00BE               	movwf	(setMessage@value+1)^(0+128)
  3256  0FE3  0020               	movlb	0	; select bank0
  3257  0FE4  082A               	movf	?___lbtoft+2,w
  3258  0FE5  0021               	movlb	1	; select bank1
  3259  0FE6  00BF               	movwf	(setMessage@value+2)^(0+128)
  3260  0FE7  3187  2775  318F   	fcall	_setMessage
  3261                           
  3262                           ;main.c: 373: packet.packetData.ACKRequest = 0;
  3263  0FEA  0021               	movlb	1	; select bank1
  3264  0FEB  1147               	bcf	main@packet^(0+128),2
  3265                           
  3266                           ;main.c: 374: nrf24l01SendPacket(&packet);
  3267  0FEC  30C7               	movlw	low main@packet
  3268  0FED  0020               	movlb	0	; select bank0
  3269  0FEE  00A7               	movwf	nrf24l01SendPacket@Packet
  3270  0FEF  3000               	movlw	high main@packet
  3271  0FF0  00A8               	movwf	nrf24l01SendPacket@Packet+1
  3272  0FF1  3186  269A  318F   	fcall	_nrf24l01SendPacket
  3273                           
  3274                           ;main.c: 375: sleep(3000);
  3275  0FF4  30B8               	movlw	184
  3276  0FF5  0020               	movlb	0	; select bank0
  3277  0FF6  00B2               	movwf	sleep@milliseconds
  3278  0FF7  300B               	movlw	11
  3279  0FF8  00B3               	movwf	sleep@milliseconds+1
  3280  0FF9  318A  2214  318F   	fcall	_sleep
  3281  0FFC                     l3633:	
  3282                           ;main.c: 377: while(1){
  3283                           
  3284                           
  3285                           ;main.c: 378: loop();
  3286  0FFC  3181  21FA  318F   	fcall	_loop
  3287  0FFF  2FFC               	goto	l3633
  3288  1000                     __end_of_main:	
  3289                           ;main.c: 379: };main.c: 381: return;
  3290                           
  3291                           
  3292                           	psect	text1
  3293  07E3                     __ptext1:	
  3294 ;; *************** function _strcpy *****************
  3295 ;; Defined at:
  3296 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  to              1    wreg     PTR unsigned char 
  3299 ;;		 -> romDataMap(28), 
  3300 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  3301 ;;		 -> STR_8(4), 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;  to              1    3[BANK0 ] PTR unsigned char 
  3304 ;;		 -> romDataMap(28), 
  3305 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  3306 ;;		 -> romDataMap(28), 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      PTR unsigned char 
  3309 ;; Registers used:
  3310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3316 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3317 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3319 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3320 ;;Total ram usage:        5 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    7
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_main
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           
  3331                           ;psect for function _strcpy
  3332  07E3                     _strcpy:	
  3333                           
  3334                           ;incstack = 0
  3335                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3336                           ;strcpy@to stored from wreg
  3337  07E3  0020               	movlb	0	; select bank0
  3338  07E4  00A3               	movwf	strcpy@to
  3339  07E5  0823               	movf	strcpy@to,w
  3340  07E6  00A2               	movwf	??_strcpy
  3341  07E7  0822               	movf	??_strcpy,w
  3342  07E8  00A4               	movwf	strcpy@cp
  3343  07E9                     l3515:	
  3344  07E9  0824               	movf	strcpy@cp,w
  3345  07EA  0086               	movwf	6
  3346  07EB  3001               	movlw	1	; select bank2/3
  3347  07EC  0087               	movwf	7
  3348  07ED  0820               	movf	strcpy@from,w
  3349  07EE  0084               	movwf	4
  3350  07EF  0821               	movf	strcpy@from+1,w
  3351  07F0  0085               	movwf	5
  3352  07F1  0800               	movf	0,w	;code access
  3353  07F2  3FC0               	movwi [0]fsr1
  3354  07F3  0889               	movf	9,f
  3355  07F4  1903               	btfsc	3,2
  3356  07F5  0008               	return
  3357  07F6  3001               	movlw	1
  3358  07F7  00A2               	movwf	??_strcpy
  3359  07F8  0822               	movf	??_strcpy,w
  3360  07F9  07A4               	addwf	strcpy@cp,f
  3361  07FA  3001               	movlw	1
  3362  07FB  07A0               	addwf	strcpy@from,f
  3363  07FC  3000               	movlw	0
  3364  07FD  3DA1               	addwfc	strcpy@from+1,f
  3365  07FE  2FE9               	goto	l3515
  3366  07FF                     __end_of_strcpy:	
  3367                           ;	Return value of _strcpy is never used
  3368                           
  3369                           
  3370                           	psect	text2
  3371  080A                     __ptext2:	
  3372 ;; *************** function _nrf24l01Init *****************
  3373 ;; Defined at:
  3374 ;;		line 450 in file "nrf24l01.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;                  1    wreg      void 
  3381 ;; Registers used:
  3382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3390 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3391 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3392 ;;Total ram usage:        2 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:   12
  3395 ;; This function calls:
  3396 ;;		_nrf24l01CEHigh
  3397 ;;		_nrf24l01CELow
  3398 ;;		_nrf24l01InitRegisters
  3399 ;;		_nrf24l01InterfaceInit
  3400 ;; This function is called by:
  3401 ;;		_main
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           
  3406                           ;psect for function _nrf24l01Init
  3407  080A                     _nrf24l01Init:	
  3408                           
  3409                           ;nrf24l01.c: 453: nrf24l01InterfaceInit();
  3410                           
  3411                           ;incstack = 0
  3412                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3413  080A  3197  2744  3188   	fcall	_nrf24l01InterfaceInit
  3414                           
  3415                           ;nrf24l01.c: 458: nrf24l01CELow();
  3416  080D  3196  2630  3188   	fcall	_nrf24l01CELow
  3417                           
  3418                           ;nrf24l01.c: 460: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3419  0810  3003               	movlw	3
  3420  0811  0020               	movlb	0	; select bank0
  3421  0812  00B4               	movwf	??_nrf24l01Init+1
  3422  0813  3008               	movlw	8
  3423  0814  00B3               	movwf	??_nrf24l01Init
  3424  0815  3077               	movlw	119
  3425  0816                     u3627:	
  3426  0816  0B89               	decfsz	9,f
  3427  0817  2816               	goto	u3627
  3428  0818  0BB3               	decfsz	??_nrf24l01Init,f
  3429  0819  2816               	goto	u3627
  3430  081A  0BB4               	decfsz	??_nrf24l01Init+1,f
  3431  081B  2816               	goto	u3627
  3432                           
  3433                           ;nrf24l01.c: 462: nrf24l01InitRegisters();
  3434  081C  3183  23AC  3188   	fcall	_nrf24l01InitRegisters
  3435                           
  3436                           ;nrf24l01.c: 464: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3437  081F  3003               	movlw	3
  3438  0820  0020               	movlb	0	; select bank0
  3439  0821  00B4               	movwf	??_nrf24l01Init+1
  3440  0822  3008               	movlw	8
  3441  0823  00B3               	movwf	??_nrf24l01Init
  3442  0824  3077               	movlw	119
  3443  0825                     u3637:	
  3444  0825  0B89               	decfsz	9,f
  3445  0826  2825               	goto	u3637
  3446  0827  0BB3               	decfsz	??_nrf24l01Init,f
  3447  0828  2825               	goto	u3637
  3448  0829  0BB4               	decfsz	??_nrf24l01Init+1,f
  3449  082A  2825               	goto	u3637
  3450                           
  3451                           ;nrf24l01.c: 466: nrf24l01CEHigh();
  3452  082B  3196  262D         	fcall	_nrf24l01CEHigh
  3453  082D  0008               	return
  3454  082E                     __end_of_nrf24l01Init:	
  3455                           
  3456                           	psect	text3
  3457  1744                     __ptext3:	
  3458 ;; *************** function _nrf24l01InterfaceInit *****************
  3459 ;; Defined at:
  3460 ;;		line 27 in file "interface.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;		None
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;		None
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  1    wreg      void 
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3478 ;;Total ram usage:        0 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    7
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_nrf24l01Init
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           
  3489                           ;psect for function _nrf24l01InterfaceInit
  3490  1744                     _nrf24l01InterfaceInit:	
  3491                           
  3492                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3493                           
  3494                           ;incstack = 0
  3495                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3496  1744  0021               	movlb	1	; select bank1
  3497  1745  100C               	bcf	12,0	;volatile
  3498                           
  3499                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3500  1746  108C               	bcf	12,1	;volatile
  3501                           
  3502                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3503  1747  148E               	bsf	14,1	;volatile
  3504                           
  3505                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3506  1748  110E               	bcf	14,2	;volatile
  3507                           
  3508                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3509  1749  100E               	bcf	14,0	;volatile
  3510                           
  3511                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3512  174A  0024               	movlb	4	; select bank4
  3513  174B  1295               	bcf	21,5	;volatile
  3514                           
  3515                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3516  174C  003D               	movlb	29	; select bank29
  3517  174D  0821               	movf	33,w	;volatile
  3518  174E  39E0               	andlw	-32
  3519  174F  3811               	iorlw	17
  3520  1750  00A1               	movwf	33	;volatile
  3521                           
  3522                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3523  1751  0822               	movf	34,w	;volatile
  3524  1752  39E0               	andlw	-32
  3525  1753  3819               	iorlw	25
  3526  1754  00A2               	movwf	34	;volatile
  3527                           
  3528                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3529  1755  0820               	movf	32,w	;volatile
  3530  1756  39E0               	andlw	-32
  3531  1757  3818               	iorlw	24
  3532  1758  00A0               	movwf	32	;volatile
  3533                           
  3534                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3535  1759  0024               	movlb	4	; select bank4
  3536  175A  1215               	bcf	21,4	;volatile
  3537                           
  3538                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3539  175B  1714               	bsf	20,6	;volatile
  3540                           
  3541                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0000;
  3542  175C  30F0               	movlw	-16
  3543  175D  0595               	andwf	21,f	;volatile
  3544                           
  3545                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3546  175E  1695               	bsf	21,5	;volatile
  3547  175F  0008               	return
  3548  1760                     __end_of_nrf24l01InterfaceInit:	
  3549                           
  3550                           	psect	text4
  3551  03AC                     __ptext4:	
  3552 ;; *************** function _nrf24l01InitRegisters *****************
  3553 ;; Defined at:
  3554 ;;		line 349 in file "nrf24l01.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;		None
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  i               2   17[BANK0 ] unsigned int 
  3559 ;;  config          1   16[BANK0 ] struct .
  3560 ;;  DynPD           1   15[BANK0 ] struct .
  3561 ;;  enAA            1   14[BANK0 ] struct .
  3562 ;;  status          1   13[BANK0 ] struct .
  3563 ;;  rfSetup         1   12[BANK0 ] struct .
  3564 ;;  feature         1   11[BANK0 ] struct .
  3565 ;;  setupAW         1   10[BANK0 ] struct .
  3566 ;;  channel         1    9[BANK0 ] struct .
  3567 ;; Return value:  Size  Location     Type
  3568 ;;                  1    wreg      void 
  3569 ;; Registers used:
  3570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3577 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3578 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3579 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3580 ;;Total ram usage:       12 bytes
  3581 ;; Hardware stack levels used:    1
  3582 ;; Hardware stack levels required when called:   11
  3583 ;; This function calls:
  3584 ;;		___bmul
  3585 ;;		_nrf24l01SPIEnd
  3586 ;;		_nrf24l01SPISend
  3587 ;;		_nrf24l01SPIStart
  3588 ;;		_nrf24l01Send
  3589 ;;		_nrf24l01SetRXPipe
  3590 ;;		_nrf24l01SetTXPipe
  3591 ;; This function is called by:
  3592 ;;		_nrf24l01Init
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           
  3597                           ;psect for function _nrf24l01InitRegisters
  3598  03AC                     _nrf24l01InitRegisters:	
  3599                           
  3600                           ;nrf24l01.c: 351: n_CONFIG_t config;;nrf24l01.c: 353: config.PWR_UP = 0;
  3601                           
  3602                           ;incstack = 0
  3603                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3604  03AC  0020               	movlb	0	; select bank0
  3605  03AD  10B0               	bcf	nrf24l01InitRegisters@config,1
  3606                           
  3607                           ;nrf24l01.c: 354: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3608  03AE  0830               	movf	nrf24l01InitRegisters@config,w
  3609  03AF  00A7               	movwf	??_nrf24l01InitRegisters
  3610  03B0  0827               	movf	??_nrf24l01InitRegisters,w
  3611  03B1  00A0               	movwf	nrf24l01Send@data
  3612  03B2  3020               	movlw	32
  3613  03B3  3197  279D  3183   	fcall	_nrf24l01Send
  3614                           
  3615                           ;nrf24l01.c: 356: n_SETUP_AW_t setupAW;;nrf24l01.c: 357: setupAW.byte = 0x00;
  3616  03B6  0020               	movlb	0	; select bank0
  3617  03B7  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3618                           
  3619                           ;nrf24l01.c: 358: setupAW.AW = 0b11;
  3620  03B8  3003               	movlw	3
  3621  03B9  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3622                           
  3623                           ;nrf24l01.c: 359: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3624  03BA  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3625  03BB  00A7               	movwf	??_nrf24l01InitRegisters
  3626  03BC  0827               	movf	??_nrf24l01InitRegisters,w
  3627  03BD  00A0               	movwf	nrf24l01Send@data
  3628  03BE  3022               	movlw	34
  3629  03BF  3197  279D  3183   	fcall	_nrf24l01Send
  3630                           
  3631                           ;nrf24l01.c: 362: n_RF_CH_t channel;;nrf24l01.c: 363: channel.RF_CH = 2;
  3632  03C2  0020               	movlb	0	; select bank0
  3633  03C3  0829               	movf	nrf24l01InitRegisters@channel,w
  3634  03C4  3980               	andlw	-128
  3635  03C5  3802               	iorlw	2
  3636  03C6  00A9               	movwf	nrf24l01InitRegisters@channel
  3637                           
  3638                           ;nrf24l01.c: 364: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3639  03C7  0829               	movf	nrf24l01InitRegisters@channel,w
  3640  03C8  00A7               	movwf	??_nrf24l01InitRegisters
  3641  03C9  0827               	movf	??_nrf24l01InitRegisters,w
  3642  03CA  00A0               	movwf	nrf24l01Send@data
  3643  03CB  3025               	movlw	37
  3644  03CC  3197  279D  3183   	fcall	_nrf24l01Send
  3645                           
  3646                           ;nrf24l01.c: 367: n_RF_SETUP_t rfSetup;;nrf24l01.c: 368: rfSetup.byte = 0x00;
  3647  03CF  0020               	movlb	0	; select bank0
  3648  03D0  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3649                           
  3650                           ;nrf24l01.c: 369: rfSetup.RF_DR_LOW = 0;
  3651  03D1  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3652                           
  3653                           ;nrf24l01.c: 370: rfSetup.RF_DR_HIGH = 1;
  3654  03D2  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3655                           
  3656                           ;nrf24l01.c: 371: rfSetup.RF_PWR = 3;
  3657  03D3  3006               	movlw	6
  3658  03D4  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3659                           
  3660                           ;nrf24l01.c: 372: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3661  03D5  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3662  03D6  00A7               	movwf	??_nrf24l01InitRegisters
  3663  03D7  0827               	movf	??_nrf24l01InitRegisters,w
  3664  03D8  00A0               	movwf	nrf24l01Send@data
  3665  03D9  3026               	movlw	38
  3666  03DA  3197  279D  3183   	fcall	_nrf24l01Send
  3667                           
  3668                           ;nrf24l01.c: 375: nrf24l01SetRXPipe(0xFF);
  3669  03DD  30FF               	movlw	255
  3670  03DE  3197  27BD  3183   	fcall	_nrf24l01SetRXPipe
  3671                           
  3672                           ;nrf24l01.c: 378: n_EN_AA_t enAA;;nrf24l01.c: 379: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3673  03E1  0020               	movlb	0	; select bank0
  3674  03E2  01A0               	clrf	nrf24l01Send@data
  3675  03E3  3001               	movlw	1
  3676  03E4  3197  279D  3183   	fcall	_nrf24l01Send
  3677  03E7  0020               	movlb	0	; select bank0
  3678  03E8  00A7               	movwf	??_nrf24l01InitRegisters
  3679  03E9  0827               	movf	??_nrf24l01InitRegisters,w
  3680  03EA  00AE               	movwf	nrf24l01InitRegisters@enAA
  3681                           
  3682                           ;nrf24l01.c: 380: enAA.ENAA_P0 = 0;
  3683  03EB  102E               	bcf	nrf24l01InitRegisters@enAA,0
  3684                           
  3685                           ;nrf24l01.c: 381: enAA.ENAA_P1 = 0;
  3686  03EC  10AE               	bcf	nrf24l01InitRegisters@enAA,1
  3687                           
  3688                           ;nrf24l01.c: 382: enAA.ENAA_P2 = 0;
  3689  03ED  112E               	bcf	nrf24l01InitRegisters@enAA,2
  3690                           
  3691                           ;nrf24l01.c: 383: enAA.ENAA_P3 = 0;
  3692  03EE  11AE               	bcf	nrf24l01InitRegisters@enAA,3
  3693                           
  3694                           ;nrf24l01.c: 384: enAA.ENAA_P4 = 0;
  3695  03EF  122E               	bcf	nrf24l01InitRegisters@enAA,4
  3696                           
  3697                           ;nrf24l01.c: 385: enAA.ENAA_P5 = 0;
  3698  03F0  12AE               	bcf	nrf24l01InitRegisters@enAA,5
  3699                           
  3700                           ;nrf24l01.c: 386: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3701  03F1  082E               	movf	nrf24l01InitRegisters@enAA,w
  3702  03F2  00A7               	movwf	??_nrf24l01InitRegisters
  3703  03F3  0827               	movf	??_nrf24l01InitRegisters,w
  3704  03F4  00A0               	movwf	nrf24l01Send@data
  3705  03F5  3021               	movlw	33
  3706  03F6  3197  279D  3183   	fcall	_nrf24l01Send
  3707                           
  3708                           ;nrf24l01.c: 390: n_FEATURE_t feature;;nrf24l01.c: 391: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3709  03F9  0020               	movlb	0	; select bank0
  3710  03FA  01A0               	clrf	nrf24l01Send@data
  3711  03FB  301D               	movlw	29
  3712  03FC  3197  279D  3183   	fcall	_nrf24l01Send
  3713  03FF  0020               	movlb	0	; select bank0
  3714  0400  00A7               	movwf	??_nrf24l01InitRegisters
  3715  0401  0827               	movf	??_nrf24l01InitRegisters,w
  3716  0402  00AB               	movwf	nrf24l01InitRegisters@feature
  3717                           
  3718                           ;nrf24l01.c: 392: feature.EN_DPL = 1;
  3719  0403  152B               	bsf	nrf24l01InitRegisters@feature,2
  3720                           
  3721                           ;nrf24l01.c: 393: feature.EN_DYN_ACK = 1;
  3722  0404  142B               	bsf	nrf24l01InitRegisters@feature,0
  3723                           
  3724                           ;nrf24l01.c: 394: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3725  0405  082B               	movf	nrf24l01InitRegisters@feature,w
  3726  0406  00A7               	movwf	??_nrf24l01InitRegisters
  3727  0407  0827               	movf	??_nrf24l01InitRegisters,w
  3728  0408  00A0               	movwf	nrf24l01Send@data
  3729  0409  303D               	movlw	61
  3730  040A  3197  279D  3183   	fcall	_nrf24l01Send
  3731                           
  3732                           ;nrf24l01.c: 396: n_DYNPD_t DynPD;;nrf24l01.c: 397: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3733  040D  0020               	movlb	0	; select bank0
  3734  040E  01A0               	clrf	nrf24l01Send@data
  3735  040F  301C               	movlw	28
  3736  0410  3197  279D  3183   	fcall	_nrf24l01Send
  3737  0413  0020               	movlb	0	; select bank0
  3738  0414  00A7               	movwf	??_nrf24l01InitRegisters
  3739  0415  0827               	movf	??_nrf24l01InitRegisters,w
  3740  0416  00AF               	movwf	nrf24l01InitRegisters@DynPD
  3741                           
  3742                           ;nrf24l01.c: 398: DynPD.DPL_P0 = 1;
  3743  0417  142F               	bsf	nrf24l01InitRegisters@DynPD,0
  3744                           
  3745                           ;nrf24l01.c: 399: DynPD.DPL_P1 = 1;
  3746  0418  14AF               	bsf	nrf24l01InitRegisters@DynPD,1
  3747                           
  3748                           ;nrf24l01.c: 400: DynPD.DPL_P2 = 1;
  3749  0419  152F               	bsf	nrf24l01InitRegisters@DynPD,2
  3750                           
  3751                           ;nrf24l01.c: 401: DynPD.DPL_P3 = 1;
  3752  041A  15AF               	bsf	nrf24l01InitRegisters@DynPD,3
  3753                           
  3754                           ;nrf24l01.c: 402: DynPD.DPL_P4 = 1;
  3755  041B  162F               	bsf	nrf24l01InitRegisters@DynPD,4
  3756                           
  3757                           ;nrf24l01.c: 403: DynPD.DPL_P5 = 1;
  3758  041C  16AF               	bsf	nrf24l01InitRegisters@DynPD,5
  3759                           
  3760                           ;nrf24l01.c: 404: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3761  041D  082F               	movf	nrf24l01InitRegisters@DynPD,w
  3762  041E  00A7               	movwf	??_nrf24l01InitRegisters
  3763  041F  0827               	movf	??_nrf24l01InitRegisters,w
  3764  0420  00A0               	movwf	nrf24l01Send@data
  3765  0421  303C               	movlw	60
  3766  0422  3197  279D  3183   	fcall	_nrf24l01Send
  3767                           
  3768                           ;nrf24l01.c: 407: unsigned int i;;nrf24l01.c: 408: for (i = 0; i < 6; i++){
  3769  0425  0020               	movlb	0	; select bank0
  3770  0426  01B1               	clrf	nrf24l01InitRegisters@i
  3771  0427  01B2               	clrf	nrf24l01InitRegisters@i+1
  3772  0428  3000               	movlw	0
  3773  0429  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3774  042A  3006               	movlw	6
  3775  042B  1903               	skipnz
  3776  042C  0231               	subwf	nrf24l01InitRegisters@i,w
  3777  042D  1803               	btfsc	3,0
  3778  042E  2C88               	goto	l3347
  3779  042F                     l3333:	
  3780                           
  3781                           ;nrf24l01.c: 410: nrf24l01SPIStart();
  3782  042F  3196  264E  3183   	fcall	_nrf24l01SPIStart
  3783                           
  3784                           ;nrf24l01.c: 411: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3785  0432  0020               	movlb	0	; select bank0
  3786  0433  0831               	movf	nrf24l01InitRegisters@i,w
  3787  0434  3E0A               	addlw	10
  3788  0435  3820               	iorlw	32
  3789  0436  3196  2656  3183   	fcall	_nrf24l01SPISend
  3790                           
  3791                           ;nrf24l01.c: 413: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3792  0439  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3793  043A  0084               	movwf	4
  3794  043B  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3795  043C  0085               	movwf	5
  3796  043D  0800               	movf	0,w	;code access
  3797  043E  0020               	movlb	0	; select bank0
  3798  043F  00A7               	movwf	??_nrf24l01InitRegisters
  3799  0440  0831               	movf	nrf24l01InitRegisters@i,w
  3800  0441  00A8               	movwf	??_nrf24l01InitRegisters+1
  3801  0442  0828               	movf	??_nrf24l01InitRegisters+1,w
  3802  0443  00A0               	movwf	___bmul@multiplicand
  3803  0444  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3804  0445  0084               	movwf	4
  3805  0446  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3806  0447  0085               	movwf	5
  3807  0448  0800               	movf	0,w	;code access
  3808  0449  3196  2672  3183   	fcall	___bmul
  3809  044C  0020               	movlb	0	; select bank0
  3810  044D  0727               	addwf	??_nrf24l01InitRegisters,w
  3811  044E  3196  2656  3183   	fcall	_nrf24l01SPISend
  3812                           
  3813                           ;nrf24l01.c: 415: if (i < 2){
  3814  0451  3000               	movlw	0
  3815  0452  0020               	movlb	0	; select bank0
  3816  0453  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3817  0454  3002               	movlw	2
  3818  0455  1903               	skipnz
  3819  0456  0231               	subwf	nrf24l01InitRegisters@i,w
  3820  0457  1803               	skipnc
  3821  0458  2C79               	goto	l3341
  3822                           
  3823                           ;nrf24l01.c: 416: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3824  0459  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3825  045A  0084               	movwf	4
  3826  045B  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3827  045C  0085               	movwf	5
  3828  045D  0800               	movf	0,w	;code access
  3829  045E  3196  2656  3183   	fcall	_nrf24l01SPISend
  3830                           
  3831                           ;nrf24l01.c: 417: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3832  0461  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3833  0462  0084               	movwf	4
  3834  0463  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3835  0464  0085               	movwf	5
  3836  0465  0800               	movf	0,w	;code access
  3837  0466  3196  2656  3183   	fcall	_nrf24l01SPISend
  3838                           
  3839                           ;nrf24l01.c: 418: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3840  0469  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3841  046A  0084               	movwf	4
  3842  046B  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3843  046C  0085               	movwf	5
  3844  046D  0800               	movf	0,w	;code access
  3845  046E  3196  2656  3183   	fcall	_nrf24l01SPISend
  3846                           
  3847                           ;nrf24l01.c: 419: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3848  0471  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3849  0472  0084               	movwf	4
  3850  0473  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3851  0474  0085               	movwf	5
  3852  0475  0800               	movf	0,w	;code access
  3853  0476  3196  2656  3183   	fcall	_nrf24l01SPISend
  3854  0479                     l3341:	
  3855                           
  3856                           ;nrf24l01.c: 420: };nrf24l01.c: 422: nrf24l01SPIEnd();
  3857  0479  3196  263F  3183   	fcall	_nrf24l01SPIEnd
  3858  047C  3001               	movlw	1
  3859  047D  0020               	movlb	0	; select bank0
  3860  047E  07B1               	addwf	nrf24l01InitRegisters@i,f
  3861  047F  3000               	movlw	0
  3862  0480  3DB2               	addwfc	nrf24l01InitRegisters@i+1,f
  3863  0481  3000               	movlw	0
  3864  0482  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3865  0483  3006               	movlw	6
  3866  0484  1903               	skipnz
  3867  0485  0231               	subwf	nrf24l01InitRegisters@i,w
  3868  0486  1C03               	skipc
  3869  0487  2C2F               	goto	l3333
  3870  0488                     l3347:	
  3871                           
  3872                           ;nrf24l01.c: 423: };nrf24l01.c: 425: nrf24l01SetTXPipe(0);
  3873  0488  3000               	movlw	0
  3874  0489  318B  2317  3183   	fcall	_nrf24l01SetTXPipe
  3875                           
  3876                           ;nrf24l01.c: 429: n_STATUS_t status;;nrf24l01.c: 430: status.byte = 0x00;
  3877  048C  0020               	movlb	0	; select bank0
  3878  048D  01AD               	clrf	nrf24l01InitRegisters@status
  3879                           
  3880                           ;nrf24l01.c: 431: status.RX_DR = 1;
  3881  048E  172D               	bsf	nrf24l01InitRegisters@status,6
  3882                           
  3883                           ;nrf24l01.c: 432: status.TX_DS = 1;
  3884  048F  16AD               	bsf	nrf24l01InitRegisters@status,5
  3885                           
  3886                           ;nrf24l01.c: 433: status.MAX_RT = 1;
  3887  0490  162D               	bsf	nrf24l01InitRegisters@status,4
  3888                           
  3889                           ;nrf24l01.c: 434: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  3890  0491  082D               	movf	nrf24l01InitRegisters@status,w
  3891  0492  00A7               	movwf	??_nrf24l01InitRegisters
  3892  0493  0827               	movf	??_nrf24l01InitRegisters,w
  3893  0494  00A0               	movwf	nrf24l01Send@data
  3894  0495  3027               	movlw	39
  3895  0496  3197  279D  3183   	fcall	_nrf24l01Send
  3896                           
  3897                           ;nrf24l01.c: 437: nrf24l01Send((unsigned) 0b11100001, 0);
  3898  0499  0020               	movlb	0	; select bank0
  3899  049A  01A0               	clrf	nrf24l01Send@data
  3900  049B  30E1               	movlw	225
  3901  049C  3197  279D  3183   	fcall	_nrf24l01Send
  3902                           
  3903                           ;nrf24l01.c: 438: nrf24l01Send((unsigned) 0b11100010, 0);
  3904  049F  0020               	movlb	0	; select bank0
  3905  04A0  01A0               	clrf	nrf24l01Send@data
  3906  04A1  30E2               	movlw	226
  3907  04A2  3197  279D  3183   	fcall	_nrf24l01Send
  3908                           
  3909                           ;nrf24l01.c: 441: config.PRIM_RX = 1;
  3910  04A5  0020               	movlb	0	; select bank0
  3911  04A6  1430               	bsf	nrf24l01InitRegisters@config,0
  3912                           
  3913                           ;nrf24l01.c: 442: config.EN_CRC = 1;
  3914  04A7  15B0               	bsf	nrf24l01InitRegisters@config,3
  3915                           
  3916                           ;nrf24l01.c: 443: config.CRCO = 1;
  3917  04A8  1530               	bsf	nrf24l01InitRegisters@config,2
  3918                           
  3919                           ;nrf24l01.c: 444: config.PWR_UP = 1;
  3920  04A9  14B0               	bsf	nrf24l01InitRegisters@config,1
  3921                           
  3922                           ;nrf24l01.c: 445: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3923  04AA  0830               	movf	nrf24l01InitRegisters@config,w
  3924  04AB  00A7               	movwf	??_nrf24l01InitRegisters
  3925  04AC  0827               	movf	??_nrf24l01InitRegisters,w
  3926  04AD  00A0               	movwf	nrf24l01Send@data
  3927  04AE  3020               	movlw	32
  3928  04AF  3197  279D         	fcall	_nrf24l01Send
  3929  04B1  0008               	return
  3930  04B2                     __end_of_nrf24l01InitRegisters:	
  3931                           
  3932                           	psect	text5
  3933  17BD                     __ptext5:	
  3934 ;; *************** function _nrf24l01SetRXPipe *****************
  3935 ;; Defined at:
  3936 ;;		line 328 in file "nrf24l01.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  pipe            1    wreg     unsigned char 
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;  pipe            1    5[BANK0 ] unsigned char 
  3941 ;;  enRXAddr        1    6[BANK0 ] struct .
  3942 ;; Return value:  Size  Location     Type
  3943 ;;                  1    wreg      void 
  3944 ;; Registers used:
  3945 ;;		wreg, status,2, status,0, pclath, cstack
  3946 ;; Tracked objects:
  3947 ;;		On entry : 0/0
  3948 ;;		On exit  : 0/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3952 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3953 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3954 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;Total ram usage:        4 bytes
  3956 ;; Hardware stack levels used:    1
  3957 ;; Hardware stack levels required when called:   10
  3958 ;; This function calls:
  3959 ;;		_nrf24l01Send
  3960 ;; This function is called by:
  3961 ;;		_main
  3962 ;;		_nrf24l01InitRegisters
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _nrf24l01SetRXPipe
  3968  17BD                     _nrf24l01SetRXPipe:	
  3969                           
  3970                           ;incstack = 0
  3971                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  3972                           ;nrf24l01SetRXPipe@pipe stored from wreg
  3973  17BD  0020               	movlb	0	; select bank0
  3974  17BE  00A5               	movwf	nrf24l01SetRXPipe@pipe
  3975                           
  3976                           ;nrf24l01.c: 330: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 332: if (pipe > 5){
  3977  17BF  3006               	movlw	6
  3978  17C0  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  3979  17C1  1C03               	skipc
  3980  17C2  2FCA               	goto	l338
  3981                           
  3982                           ;nrf24l01.c: 333: enRXAddr.ERX_P0 = 1;
  3983  17C3  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  3984                           
  3985                           ;nrf24l01.c: 334: enRXAddr.ERX_P1 = 1;
  3986  17C4  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  3987                           
  3988                           ;nrf24l01.c: 335: enRXAddr.ERX_P2 = 1;
  3989  17C5  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  3990                           
  3991                           ;nrf24l01.c: 336: enRXAddr.ERX_P3 = 1;
  3992  17C6  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  3993                           
  3994                           ;nrf24l01.c: 337: enRXAddr.ERX_P4 = 1;
  3995  17C7  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  3996                           
  3997                           ;nrf24l01.c: 338: enRXAddr.ERX_P5 = 1;
  3998  17C8  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  3999                           
  4000                           ;nrf24l01.c: 339: }
  4001  17C9  2FD6               	goto	l2995
  4002  17CA                     l338:	
  4003                           
  4004                           ;nrf24l01.c: 341: else{;nrf24l01.c: 342: enRXAddr.ERX_P0 = 1;
  4005  17CA  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4006                           
  4007                           ;nrf24l01.c: 343: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4008  17CB  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4009  17CC  00A3               	movwf	??_nrf24l01SetRXPipe
  4010  17CD  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4011  17CE  2FD0               	goto	u3084
  4012  17CF                     u3085:	
  4013  17CF  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4014  17D0                     u3084:	
  4015  17D0  0B89               	decfsz	9,f
  4016  17D1  2FCF               	goto	u3085
  4017  17D2  0823               	movf	??_nrf24l01SetRXPipe,w
  4018  17D3  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4019  17D4  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4020  17D5  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4021  17D6                     l2995:	
  4022                           
  4023                           ;nrf24l01.c: 344: };nrf24l01.c: 346: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4024  17D6  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4025  17D7  00A3               	movwf	??_nrf24l01SetRXPipe
  4026  17D8  0823               	movf	??_nrf24l01SetRXPipe,w
  4027  17D9  00A0               	movwf	nrf24l01Send@data
  4028  17DA  3022               	movlw	34
  4029  17DB  3197  279D         	fcall	_nrf24l01Send
  4030  17DD  0008               	return
  4031  17DE                     __end_of_nrf24l01SetRXPipe:	
  4032                           
  4033                           	psect	text6
  4034  0965                     __ptext6:	
  4035 ;; *************** function _nrf24l01GetPipe *****************
  4036 ;; Defined at:
  4037 ;;		line 263 in file "main.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  name            1    wreg     PTR unsigned char 
  4040 ;;		 -> romDataMap(28), 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4043 ;;		 -> romDataMap(28), 
  4044 ;;  i               1   10[BANK0 ] unsigned char 
  4045 ;;  pipe            1    8[BANK0 ] unsigned char 
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  1    wreg      unsigned char 
  4048 ;; Registers used:
  4049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4056 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4057 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4058 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;Total ram usage:        5 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    8
  4062 ;; This function calls:
  4063 ;;		___lwmod
  4064 ;;		_strlen
  4065 ;; This function is called by:
  4066 ;;		_main
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           
  4071                           ;psect for function _nrf24l01GetPipe
  4072  0965                     _nrf24l01GetPipe:	
  4073                           
  4074                           ;incstack = 0
  4075                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4076                           ;nrf24l01GetPipe@name stored from wreg
  4077  0965  0020               	movlb	0	; select bank0
  4078  0966  00A9               	movwf	nrf24l01GetPipe@name
  4079                           
  4080                           ;main.c: 264: unsigned char pipe = 0;
  4081  0967  01A8               	clrf	nrf24l01GetPipe@pipe
  4082                           
  4083                           ;main.c: 265: unsigned char i = 0;
  4084  0968  01AA               	clrf	nrf24l01GetPipe@i
  4085                           
  4086                           ;main.c: 268: for (i = 0; i < strlen(name); i++){
  4087  0969  01AA               	clrf	nrf24l01GetPipe@i
  4088  096A                     l3503:	
  4089  096A  0829               	movf	nrf24l01GetPipe@name,w
  4090  096B  00A0               	movwf	strlen@s
  4091  096C  3001               	movlw	1
  4092  096D  00A1               	movwf	strlen@s+1
  4093  096E  3197  277E  3189   	fcall	_strlen
  4094  0971  0020               	movlb	0	; select bank0
  4095  0972  082A               	movf	nrf24l01GetPipe@i,w
  4096  0973  00A6               	movwf	??_nrf24l01GetPipe
  4097  0974  01A7               	clrf	??_nrf24l01GetPipe+1
  4098  0975  0821               	movf	?_strlen+1,w
  4099  0976  0227               	subwf	??_nrf24l01GetPipe+1,w
  4100  0977  1D03               	skipz
  4101  0978  297B               	goto	u3585
  4102  0979  0820               	movf	?_strlen,w
  4103  097A  0226               	subwf	??_nrf24l01GetPipe,w
  4104  097B                     u3585:	
  4105  097B  1803               	btfsc	3,0
  4106  097C  298D               	goto	l3505
  4107                           
  4108                           ;main.c: 269: pipe+= name[i];
  4109  097D  082A               	movf	nrf24l01GetPipe@i,w
  4110  097E  0729               	addwf	nrf24l01GetPipe@name,w
  4111  097F  00A6               	movwf	??_nrf24l01GetPipe
  4112  0980  0826               	movf	??_nrf24l01GetPipe,w
  4113  0981  0086               	movwf	6
  4114  0982  3001               	movlw	1	; select bank2/3
  4115  0983  0087               	movwf	7
  4116  0984  0801               	movf	1,w
  4117  0985  00A7               	movwf	??_nrf24l01GetPipe+1
  4118  0986  0827               	movf	??_nrf24l01GetPipe+1,w
  4119  0987  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4120  0988  3001               	movlw	1
  4121  0989  00A6               	movwf	??_nrf24l01GetPipe
  4122  098A  0826               	movf	??_nrf24l01GetPipe,w
  4123  098B  07AA               	addwf	nrf24l01GetPipe@i,f
  4124  098C  296A               	goto	l3503
  4125  098D                     l3505:	
  4126                           
  4127                           ;main.c: 270: };main.c: 272: return (unsigned) pipe % 6;
  4128  098D  3006               	movlw	6
  4129  098E  00A0               	movwf	___lwmod@divisor
  4130  098F  3000               	movlw	0
  4131  0990  00A1               	movwf	___lwmod@divisor+1
  4132  0991  0828               	movf	nrf24l01GetPipe@pipe,w
  4133  0992  00A6               	movwf	??_nrf24l01GetPipe
  4134  0993  01A7               	clrf	??_nrf24l01GetPipe+1
  4135  0994  0826               	movf	??_nrf24l01GetPipe,w
  4136  0995  00A2               	movwf	___lwmod@dividend
  4137  0996  0827               	movf	??_nrf24l01GetPipe+1,w
  4138  0997  00A3               	movwf	___lwmod@dividend+1
  4139  0998  3188  20A6         	fcall	___lwmod
  4140  099A  0020               	movlb	0	; select bank0
  4141  099B  0820               	movf	?___lwmod,w
  4142  099C  0008               	return
  4143  099D                     __end_of_nrf24l01GetPipe:	
  4144                           
  4145                           	psect	text7
  4146  08A6                     __ptext7:	
  4147 ;; *************** function ___lwmod *****************
  4148 ;; Defined at:
  4149 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;  divisor         2    0[BANK0 ] unsigned int 
  4152 ;;  dividend        2    2[BANK0 ] unsigned int 
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;  counter         1    5[BANK0 ] unsigned char 
  4155 ;; Return value:  Size  Location     Type
  4156 ;;                  2    0[BANK0 ] unsigned int 
  4157 ;; Registers used:
  4158 ;;		wreg, status,2, status,0
  4159 ;; Tracked objects:
  4160 ;;		On entry : 0/0
  4161 ;;		On exit  : 0/0
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4164 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4168 ;;Total ram usage:        6 bytes
  4169 ;; Hardware stack levels used:    1
  4170 ;; Hardware stack levels required when called:    7
  4171 ;; This function calls:
  4172 ;;		Nothing
  4173 ;; This function is called by:
  4174 ;;		_nrf24l01GetPipe
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           
  4179                           ;psect for function ___lwmod
  4180  08A6                     ___lwmod:	
  4181                           
  4182                           ;incstack = 0
  4183                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4184  08A6  0020               	movlb	0	; select bank0
  4185  08A7  0820               	movf	___lwmod@divisor,w
  4186  08A8  0421               	iorwf	___lwmod@divisor+1,w
  4187  08A9  1903               	btfsc	3,2
  4188  08AA  28CE               	goto	l3395
  4189  08AB  01A5               	clrf	___lwmod@counter
  4190  08AC  0AA5               	incf	___lwmod@counter,f
  4191  08AD                     l3385:	
  4192  08AD  1BA1               	btfsc	___lwmod@divisor+1,7
  4193  08AE  28B9               	goto	l3387
  4194  08AF  3001               	movlw	1
  4195  08B0                     u3485:	
  4196  08B0  35A0               	lslf	___lwmod@divisor,f
  4197  08B1  0DA1               	rlf	___lwmod@divisor+1,f
  4198  08B2  0B89               	decfsz	9,f
  4199  08B3  28B0               	goto	u3485
  4200  08B4  3001               	movlw	1
  4201  08B5  00A4               	movwf	??___lwmod
  4202  08B6  0824               	movf	??___lwmod,w
  4203  08B7  07A5               	addwf	___lwmod@counter,f
  4204  08B8  28AD               	goto	l3385
  4205  08B9                     l3387:	
  4206  08B9  0821               	movf	___lwmod@divisor+1,w
  4207  08BA  0223               	subwf	___lwmod@dividend+1,w
  4208  08BB  1D03               	skipz
  4209  08BC  28BF               	goto	u3505
  4210  08BD  0820               	movf	___lwmod@divisor,w
  4211  08BE  0222               	subwf	___lwmod@dividend,w
  4212  08BF                     u3505:	
  4213  08BF  1C03               	skipc
  4214  08C0  28C5               	goto	l3391
  4215  08C1  0820               	movf	___lwmod@divisor,w
  4216  08C2  02A2               	subwf	___lwmod@dividend,f
  4217  08C3  0821               	movf	___lwmod@divisor+1,w
  4218  08C4  3BA3               	subwfb	___lwmod@dividend+1,f
  4219  08C5                     l3391:	
  4220  08C5  3001               	movlw	1
  4221  08C6                     u3515:	
  4222  08C6  36A1               	lsrf	___lwmod@divisor+1,f
  4223  08C7  0CA0               	rrf	___lwmod@divisor,f
  4224  08C8  0B89               	decfsz	9,f
  4225  08C9  28C6               	goto	u3515
  4226  08CA  3001               	movlw	1
  4227  08CB  02A5               	subwf	___lwmod@counter,f
  4228  08CC  1D03               	btfss	3,2
  4229  08CD  28B9               	goto	l3387
  4230  08CE                     l3395:	
  4231  08CE  0823               	movf	___lwmod@dividend+1,w
  4232  08CF  00A1               	movwf	?___lwmod+1
  4233  08D0  0822               	movf	___lwmod@dividend,w
  4234  08D1  00A0               	movwf	?___lwmod
  4235  08D2  0008               	return
  4236  08D3                     __end_of___lwmod:	
  4237                           
  4238                           	psect	text8
  4239  01FA                     __ptext8:	
  4240 ;; *************** function _loop *****************
  4241 ;; Defined at:
  4242 ;;		line 197 in file "main.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;		None
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  packet         33   15[BANK2 ] struct .
  4247 ;;  ta              3    3[BANK2 ] float 
  4248 ;;  vt              3    0[BANK2 ] float 
  4249 ;;  rfSetup         1   14[BANK2 ] struct .
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Locals:         0       0       0      48       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;      Totals:         0       0       1      48       0       0       0       0       0       0       0       0       
      +0       0
  4263 ;;Total ram usage:       49 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:   15
  4266 ;; This function calls:
  4267 ;;		___awtoft
  4268 ;;		___ftadd
  4269 ;;		___ftdiv
  4270 ;;		___ftmul
  4271 ;;		___ftneg
  4272 ;;		___lbtoft
  4273 ;;		_checkTXPower
  4274 ;;		_getADCValue
  4275 ;;		_nrf24l01Send
  4276 ;;		_nrf24l01SendPacket
  4277 ;;		_setMessage
  4278 ;;		_sleep
  4279 ;; This function is called by:
  4280 ;;		_main
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           
  4285                           ;psect for function _loop
  4286  01FA                     _loop:	
  4287                           
  4288                           ;main.c: 200: nrf24l01Packet_t packet;;main.c: 203: setMessage(&packet, "DBG", counter);
  4289                           
  4290                           ;incstack = 0
  4291                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4292  01FA  302F               	movlw	low loop@packet
  4293  01FB  0021               	movlb	1	; select bank1
  4294  01FC  00B9               	movwf	setMessage@packet^(0+128)
  4295  01FD  3001               	movlw	high loop@packet
  4296  01FE  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4297  01FF  3031               	movlw	low (STR_3| (0+32768))
  4298  0200  00BB               	movwf	setMessage@topic^(0+128)
  4299  0201  3098               	movlw	high (STR_3| (0+32768))
  4300  0202  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4301  0203  0022               	movlb	2	; select bank2
  4302  0204  0850               	movf	_counter^(0+256),w
  4303  0205  0021               	movlb	1	; select bank1
  4304  0206  00BD               	movwf	setMessage@value^(0+128)
  4305  0207  0022               	movlb	2	; select bank2
  4306  0208  0851               	movf	(_counter+1)^(0+256),w
  4307  0209  0021               	movlb	1	; select bank1
  4308  020A  00BE               	movwf	(setMessage@value+1)^(0+128)
  4309  020B  0022               	movlb	2	; select bank2
  4310  020C  0852               	movf	(_counter+2)^(0+256),w
  4311  020D  0021               	movlb	1	; select bank1
  4312  020E  00BF               	movwf	(setMessage@value+2)^(0+128)
  4313  020F  3187  2775  3181   	fcall	_setMessage
  4314                           
  4315                           ;main.c: 204: packet.packetData.ACKRequest = 0;
  4316  0212  0022               	movlb	2	; select bank2
  4317  0213  112F               	bcf	loop@packet^(0+256),2
  4318                           
  4319                           ;main.c: 205: nrf24l01SendPacket(&packet);
  4320  0214  302F               	movlw	low loop@packet
  4321  0215  0020               	movlb	0	; select bank0
  4322  0216  00A7               	movwf	nrf24l01SendPacket@Packet
  4323  0217  3001               	movlw	high loop@packet
  4324  0218  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4325  0219  3186  269A  3181   	fcall	_nrf24l01SendPacket
  4326                           
  4327                           ;main.c: 206: checkTXPower();
  4328  021C  3196  2696  3181   	fcall	_checkTXPower
  4329                           
  4330                           ;main.c: 207: sleep(2000);
  4331  021F  30D0               	movlw	208
  4332  0220  0020               	movlb	0	; select bank0
  4333  0221  00B2               	movwf	sleep@milliseconds
  4334  0222  3007               	movlw	7
  4335  0223  00B3               	movwf	sleep@milliseconds+1
  4336  0224  318A  2214  3181   	fcall	_sleep
  4337                           
  4338                           ;main.c: 211: FVRCONbits.TSEN = 1;
  4339  0227  0022               	movlb	2	; select bank2
  4340  0228  1697               	bsf	23,5	;volatile
  4341                           
  4342                           ;main.c: 212: float vt = (2.048 - getADCValue(0b111101)) / (FVRCONbits.TSRNG ? 2 : 4);
  4343  0229  1A17               	btfsc	23,4	;volatile
  4344  022A  2A2D               	goto	l3439
  4345  022B  3004               	movlw	4
  4346  022C  2A2E               	goto	L1
  4347  022D                     l3439:	
  4348  022D  3002               	movlw	2
  4349  022E                     L1:	
  4350  022E  00AC               	movwf	_loop$882^(0+256)
  4351  022F  3000               	movlw	0
  4352  0230  00AD               	movwf	(_loop$882^(0+256)+1)
  4353  0231  303D               	movlw	61
  4354  0232  318D  2548  3181   	fcall	_getADCValue
  4355  0235  0020               	movlb	0	; select bank0
  4356  0236  084B               	movf	?_getADCValue,w
  4357  0237  00D7               	movwf	___ftneg@f1
  4358  0238  084C               	movf	?_getADCValue+1,w
  4359  0239  00D8               	movwf	___ftneg@f1+1
  4360  023A  084D               	movf	?_getADCValue+2,w
  4361  023B  00D9               	movwf	___ftneg@f1+2
  4362  023C  3188  2001  3181   	fcall	___ftneg
  4363  023F  0020               	movlb	0	; select bank0
  4364  0240  0857               	movf	?___ftneg,w
  4365  0241  0022               	movlb	2	; select bank2
  4366  0242  00A6               	movwf	_loop$2062^(0+256)
  4367  0243  0020               	movlb	0	; select bank0
  4368  0244  0858               	movf	?___ftneg+1,w
  4369  0245  0022               	movlb	2	; select bank2
  4370  0246  00A7               	movwf	(_loop$2062+1)^(0+256)
  4371  0247  0020               	movlb	0	; select bank0
  4372  0248  0859               	movf	?___ftneg+2,w
  4373  0249  0022               	movlb	2	; select bank2
  4374  024A  00A8               	movwf	(_loop$2062+2)^(0+256)
  4375  024B  082D               	movf	(_loop$882+1)^(0+256),w
  4376  024C  0020               	movlb	0	; select bank0
  4377  024D  00A9               	movwf	___awtoft@c+1
  4378  024E  0022               	movlb	2	; select bank2
  4379  024F  082C               	movf	_loop$882^(0+256),w
  4380  0250  0020               	movlb	0	; select bank0
  4381  0251  00A8               	movwf	___awtoft@c
  4382  0252  3197  27DE  3181   	fcall	___awtoft
  4383  0255  0020               	movlb	0	; select bank0
  4384  0256  0828               	movf	?___awtoft,w
  4385  0257  00BB               	movwf	___ftdiv@f2
  4386  0258  0829               	movf	?___awtoft+1,w
  4387  0259  00BC               	movwf	___ftdiv@f2+1
  4388  025A  082A               	movf	?___awtoft+2,w
  4389  025B  00BD               	movwf	___ftdiv@f2+2
  4390  025C  3012               	movlw	18
  4391  025D  00AE               	movwf	___ftadd@f1
  4392  025E  3003               	movlw	3
  4393  025F  00AF               	movwf	___ftadd@f1+1
  4394  0260  3040               	movlw	64
  4395  0261  00B0               	movwf	___ftadd@f1+2
  4396  0262  0022               	movlb	2	; select bank2
  4397  0263  0826               	movf	_loop$2062^(0+256),w
  4398  0264  0020               	movlb	0	; select bank0
  4399  0265  00B1               	movwf	___ftadd@f2
  4400  0266  0022               	movlb	2	; select bank2
  4401  0267  0827               	movf	(_loop$2062+1)^(0+256),w
  4402  0268  0020               	movlb	0	; select bank0
  4403  0269  00B2               	movwf	___ftadd@f2+1
  4404  026A  0022               	movlb	2	; select bank2
  4405  026B  0828               	movf	(_loop$2062+2)^(0+256),w
  4406  026C  0020               	movlb	0	; select bank0
  4407  026D  00B3               	movwf	___ftadd@f2+2
  4408  026E  3184  24B2  3181   	fcall	___ftadd
  4409  0271  0020               	movlb	0	; select bank0
  4410  0272  082E               	movf	?___ftadd,w
  4411  0273  00BE               	movwf	___ftdiv@f1
  4412  0274  082F               	movf	?___ftadd+1,w
  4413  0275  00BF               	movwf	___ftdiv@f1+1
  4414  0276  0830               	movf	?___ftadd+2,w
  4415  0277  00C0               	movwf	___ftdiv@f1+2
  4416  0278  318D  25EE  3181   	fcall	___ftdiv
  4417  027B  0020               	movlb	0	; select bank0
  4418  027C  083B               	movf	?___ftdiv,w
  4419  027D  0022               	movlb	2	; select bank2
  4420  027E  00A0               	movwf	loop@vt^(0+256)
  4421  027F  0020               	movlb	0	; select bank0
  4422  0280  083C               	movf	?___ftdiv+1,w
  4423  0281  0022               	movlb	2	; select bank2
  4424  0282  00A1               	movwf	(loop@vt+1)^(0+256)
  4425  0283  0020               	movlb	0	; select bank0
  4426  0284  083D               	movf	?___ftdiv+2,w
  4427  0285  0022               	movlb	2	; select bank2
  4428  0286  00A2               	movwf	(loop@vt+2)^(0+256)
  4429                           
  4430                           ;main.c: 213: FVRCONbits.TSEN = 0;
  4431  0287  1297               	bcf	23,5	;volatile
  4432                           
  4433                           ;main.c: 221: float ta = (vt / -0.0014) - (0.6063 / -0.0014) - 40 + 14.8;
  4434  0288  30F0               	movlw	240
  4435  0289  0020               	movlb	0	; select bank0
  4436  028A  00AE               	movwf	___ftadd@f1
  4437  028B  30CB               	movlw	203
  4438  028C  00AF               	movwf	___ftadd@f1+1
  4439  028D  3043               	movlw	67
  4440  028E  00B0               	movwf	___ftadd@f1+2
  4441  028F  3080               	movlw	128
  4442  0290  00BB               	movwf	___ftdiv@f2
  4443  0291  30B7               	movlw	183
  4444  0292  00BC               	movwf	___ftdiv@f2+1
  4445  0293  30BA               	movlw	186
  4446  0294  00BD               	movwf	___ftdiv@f2+2
  4447  0295  0022               	movlb	2	; select bank2
  4448  0296  0820               	movf	loop@vt^(0+256),w
  4449  0297  0020               	movlb	0	; select bank0
  4450  0298  00BE               	movwf	___ftdiv@f1
  4451  0299  0022               	movlb	2	; select bank2
  4452  029A  0821               	movf	(loop@vt+1)^(0+256),w
  4453  029B  0020               	movlb	0	; select bank0
  4454  029C  00BF               	movwf	___ftdiv@f1+1
  4455  029D  0022               	movlb	2	; select bank2
  4456  029E  0822               	movf	(loop@vt+2)^(0+256),w
  4457  029F  0020               	movlb	0	; select bank0
  4458  02A0  00C0               	movwf	___ftdiv@f1+2
  4459  02A1  318D  25EE  3181   	fcall	___ftdiv
  4460  02A4  0020               	movlb	0	; select bank0
  4461  02A5  083B               	movf	?___ftdiv,w
  4462  02A6  00B1               	movwf	___ftadd@f2
  4463  02A7  083C               	movf	?___ftdiv+1,w
  4464  02A8  00B2               	movwf	___ftadd@f2+1
  4465  02A9  083D               	movf	?___ftdiv+2,w
  4466  02AA  00B3               	movwf	___ftadd@f2+2
  4467  02AB  3184  24B2  3181   	fcall	___ftadd
  4468  02AE  0020               	movlb	0	; select bank0
  4469  02AF  082E               	movf	?___ftadd,w
  4470  02B0  0022               	movlb	2	; select bank2
  4471  02B1  00A3               	movwf	loop@ta^(0+256)
  4472  02B2  0020               	movlb	0	; select bank0
  4473  02B3  082F               	movf	?___ftadd+1,w
  4474  02B4  0022               	movlb	2	; select bank2
  4475  02B5  00A4               	movwf	(loop@ta+1)^(0+256)
  4476  02B6  0020               	movlb	0	; select bank0
  4477  02B7  0830               	movf	?___ftadd+2,w
  4478  02B8  0022               	movlb	2	; select bank2
  4479  02B9  00A5               	movwf	(loop@ta+2)^(0+256)
  4480                           
  4481                           ;main.c: 223: setMessage(&packet, "TEMP", ta);
  4482  02BA  302F               	movlw	low loop@packet
  4483  02BB  0021               	movlb	1	; select bank1
  4484  02BC  00B9               	movwf	setMessage@packet^(0+128)
  4485  02BD  3001               	movlw	high loop@packet
  4486  02BE  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4487  02BF  301E               	movlw	low (STR_4| (0+32768))
  4488  02C0  00BB               	movwf	setMessage@topic^(0+128)
  4489  02C1  3098               	movlw	high (STR_4| (0+32768))
  4490  02C2  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4491  02C3  0022               	movlb	2	; select bank2
  4492  02C4  0823               	movf	loop@ta^(0+256),w
  4493  02C5  0021               	movlb	1	; select bank1
  4494  02C6  00BD               	movwf	setMessage@value^(0+128)
  4495  02C7  0022               	movlb	2	; select bank2
  4496  02C8  0824               	movf	(loop@ta+1)^(0+256),w
  4497  02C9  0021               	movlb	1	; select bank1
  4498  02CA  00BE               	movwf	(setMessage@value+1)^(0+128)
  4499  02CB  0022               	movlb	2	; select bank2
  4500  02CC  0825               	movf	(loop@ta+2)^(0+256),w
  4501  02CD  0021               	movlb	1	; select bank1
  4502  02CE  00BF               	movwf	(setMessage@value+2)^(0+128)
  4503  02CF  3187  2775  3181   	fcall	_setMessage
  4504                           
  4505                           ;main.c: 224: packet.packetData.ACKRequest = 1;
  4506  02D2  0022               	movlb	2	; select bank2
  4507  02D3  152F               	bsf	loop@packet^(0+256),2
  4508                           
  4509                           ;main.c: 225: nrf24l01SendPacket(&packet);
  4510  02D4  302F               	movlw	low loop@packet
  4511  02D5  0020               	movlb	0	; select bank0
  4512  02D6  00A7               	movwf	nrf24l01SendPacket@Packet
  4513  02D7  3001               	movlw	high loop@packet
  4514  02D8  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4515  02D9  3186  269A  3181   	fcall	_nrf24l01SendPacket
  4516                           
  4517                           ;main.c: 226: checkTXPower();
  4518  02DC  3196  2696  3181   	fcall	_checkTXPower
  4519                           
  4520                           ;main.c: 227: sleep(2000);
  4521  02DF  30D0               	movlw	208
  4522  02E0  0020               	movlb	0	; select bank0
  4523  02E1  00B2               	movwf	sleep@milliseconds
  4524  02E2  3007               	movlw	7
  4525  02E3  00B3               	movwf	sleep@milliseconds+1
  4526  02E4  318A  2214  3181   	fcall	_sleep
  4527                           
  4528                           ;main.c: 234: ADCON1bits.ADPREF = 0b00;
  4529  02E7  30FC               	movlw	-4
  4530  02E8  0021               	movlb	1	; select bank1
  4531  02E9  059E               	andwf	30,f	;volatile
  4532                           
  4533                           ;main.c: 235: FVRCONbits.ADFVR = 0b10;
  4534  02EA  0022               	movlb	2	; select bank2
  4535  02EB  0817               	movf	23,w	;volatile
  4536  02EC  39FC               	andlw	-4
  4537  02ED  3802               	iorlw	2
  4538  02EE  0097               	movwf	23	;volatile
  4539                           
  4540                           ;main.c: 236: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4541  02EF  30CF               	movlw	207
  4542  02F0  0020               	movlb	0	; select bank0
  4543  02F1  00D7               	movwf	___ftmul@f1
  4544  02F2  3046               	movlw	70
  4545  02F3  00D8               	movwf	___ftmul@f1+1
  4546  02F4  3040               	movlw	64
  4547  02F5  00D9               	movwf	___ftmul@f1+2
  4548  02F6  3004               	movlw	4
  4549  02F7  318D  2548  3181   	fcall	_getADCValue
  4550  02FA  0020               	movlb	0	; select bank0
  4551  02FB  084B               	movf	?_getADCValue,w
  4552  02FC  00DA               	movwf	___ftmul@f2
  4553  02FD  084C               	movf	?_getADCValue+1,w
  4554  02FE  00DB               	movwf	___ftmul@f2+1
  4555  02FF  084D               	movf	?_getADCValue+2,w
  4556  0300  00DC               	movwf	___ftmul@f2+2
  4557  0301  318E  2697  3181   	fcall	___ftmul
  4558  0304  0020               	movlb	0	; select bank0
  4559  0305  0857               	movf	?___ftmul,w
  4560  0306  0022               	movlb	2	; select bank2
  4561  0307  00A9               	movwf	_loop$2063^(0+256)
  4562  0308  0020               	movlb	0	; select bank0
  4563  0309  0858               	movf	?___ftmul+1,w
  4564  030A  0022               	movlb	2	; select bank2
  4565  030B  00AA               	movwf	(_loop$2063+1)^(0+256)
  4566  030C  0020               	movlb	0	; select bank0
  4567  030D  0859               	movf	?___ftmul+2,w
  4568  030E  0022               	movlb	2	; select bank2
  4569  030F  00AB               	movwf	(_loop$2063+2)^(0+256)
  4570                           
  4571                           ;main.c: 236: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4572  0310  302F               	movlw	low loop@packet
  4573  0311  0021               	movlb	1	; select bank1
  4574  0312  00B9               	movwf	setMessage@packet^(0+128)
  4575  0313  3001               	movlw	high loop@packet
  4576  0314  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4577  0315  3023               	movlw	low (STR_5| (0+32768))
  4578  0316  00BB               	movwf	setMessage@topic^(0+128)
  4579  0317  3098               	movlw	high (STR_5| (0+32768))
  4580  0318  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4581  0319  0022               	movlb	2	; select bank2
  4582  031A  0829               	movf	_loop$2063^(0+256),w
  4583  031B  0021               	movlb	1	; select bank1
  4584  031C  00BD               	movwf	setMessage@value^(0+128)
  4585  031D  0022               	movlb	2	; select bank2
  4586  031E  082A               	movf	(_loop$2063+1)^(0+256),w
  4587  031F  0021               	movlb	1	; select bank1
  4588  0320  00BE               	movwf	(setMessage@value+1)^(0+128)
  4589  0321  0022               	movlb	2	; select bank2
  4590  0322  082B               	movf	(_loop$2063+2)^(0+256),w
  4591  0323  0021               	movlb	1	; select bank1
  4592  0324  00BF               	movwf	(setMessage@value+2)^(0+128)
  4593  0325  3187  2775  3181   	fcall	_setMessage
  4594                           
  4595                           ;main.c: 237: packet.packetData.ACKRequest = 1;
  4596  0328  0022               	movlb	2	; select bank2
  4597  0329  152F               	bsf	loop@packet^(0+256),2
  4598                           
  4599                           ;main.c: 238: nrf24l01SendPacket(&packet);
  4600  032A  302F               	movlw	low loop@packet
  4601  032B  0020               	movlb	0	; select bank0
  4602  032C  00A7               	movwf	nrf24l01SendPacket@Packet
  4603  032D  3001               	movlw	high loop@packet
  4604  032E  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4605  032F  3186  269A  3181   	fcall	_nrf24l01SendPacket
  4606                           
  4607                           ;main.c: 239: checkTXPower();
  4608  0332  3196  2696  3181   	fcall	_checkTXPower
  4609                           
  4610                           ;main.c: 240: sleep(2000);
  4611  0335  30D0               	movlw	208
  4612  0336  0020               	movlb	0	; select bank0
  4613  0337  00B2               	movwf	sleep@milliseconds
  4614  0338  3007               	movlw	7
  4615  0339  00B3               	movwf	sleep@milliseconds+1
  4616  033A  318A  2214  3181   	fcall	_sleep
  4617                           
  4618                           ;main.c: 243: setMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4619  033D  302F               	movlw	low loop@packet
  4620  033E  0021               	movlb	1	; select bank1
  4621  033F  00B9               	movwf	setMessage@packet^(0+128)
  4622  0340  3001               	movlw	high loop@packet
  4623  0341  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4624  0342  300C               	movlw	low (STR_6| (0+32768))
  4625  0343  00BB               	movwf	setMessage@topic^(0+128)
  4626  0344  3098               	movlw	high (STR_6| (0+32768))
  4627  0345  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4628  0346  3013               	movlw	19
  4629  0347  318D  2548  3181   	fcall	_getADCValue
  4630  034A  0020               	movlb	0	; select bank0
  4631  034B  084B               	movf	?_getADCValue,w
  4632  034C  0021               	movlb	1	; select bank1
  4633  034D  00BD               	movwf	setMessage@value^(0+128)
  4634  034E  0020               	movlb	0	; select bank0
  4635  034F  084C               	movf	?_getADCValue+1,w
  4636  0350  0021               	movlb	1	; select bank1
  4637  0351  00BE               	movwf	(setMessage@value+1)^(0+128)
  4638  0352  0020               	movlb	0	; select bank0
  4639  0353  084D               	movf	?_getADCValue+2,w
  4640  0354  0021               	movlb	1	; select bank1
  4641  0355  00BF               	movwf	(setMessage@value+2)^(0+128)
  4642  0356  3187  2775  3181   	fcall	_setMessage
  4643                           
  4644                           ;main.c: 244: packet.packetData.ACKRequest = 1;
  4645  0359  0022               	movlb	2	; select bank2
  4646  035A  152F               	bsf	loop@packet^(0+256),2
  4647                           
  4648                           ;main.c: 245: nrf24l01SendPacket(&packet);
  4649  035B  302F               	movlw	low loop@packet
  4650  035C  0020               	movlb	0	; select bank0
  4651  035D  00A7               	movwf	nrf24l01SendPacket@Packet
  4652  035E  3001               	movlw	high loop@packet
  4653  035F  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4654  0360  3186  269A  3181   	fcall	_nrf24l01SendPacket
  4655                           
  4656                           ;main.c: 246: checkTXPower();
  4657  0363  3196  2696  3181   	fcall	_checkTXPower
  4658                           
  4659                           ;main.c: 247: sleep(2000);
  4660  0366  30D0               	movlw	208
  4661  0367  0020               	movlb	0	; select bank0
  4662  0368  00B2               	movwf	sleep@milliseconds
  4663  0369  3007               	movlw	7
  4664  036A  00B3               	movwf	sleep@milliseconds+1
  4665  036B  318A  2214  3181   	fcall	_sleep
  4666                           
  4667                           ;main.c: 250: n_RF_SETUP_t rfSetup;;main.c: 251: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4668  036E  0020               	movlb	0	; select bank0
  4669  036F  01A0               	clrf	nrf24l01Send@data
  4670  0370  3006               	movlw	6
  4671  0371  3197  279D  3181   	fcall	_nrf24l01Send
  4672  0374  0021               	movlb	1	; select bank1
  4673  0375  00C3               	movwf	??_loop^(0+128)
  4674  0376  0843               	movf	??_loop^(0+128),w
  4675  0377  0022               	movlb	2	; select bank2
  4676  0378  00AE               	movwf	loop@rfSetup^(0+256)
  4677                           
  4678                           ;main.c: 253: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4679  0379  302F               	movlw	low loop@packet
  4680  037A  0021               	movlb	1	; select bank1
  4681  037B  00B9               	movwf	setMessage@packet^(0+128)
  4682  037C  3001               	movlw	high loop@packet
  4683  037D  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4684  037E  3013               	movlw	low (STR_7| (0+32768))
  4685  037F  00BB               	movwf	setMessage@topic^(0+128)
  4686  0380  3098               	movlw	high (STR_7| (0+32768))
  4687  0381  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4688  0382  0022               	movlb	2	; select bank2
  4689  0383  0C2E               	rrf	loop@rfSetup^(0+256),w
  4690  0384  3903               	andlw	3
  4691  0385  3197  270D  3181   	fcall	___lbtoft
  4692  0388  0020               	movlb	0	; select bank0
  4693  0389  0828               	movf	?___lbtoft,w
  4694  038A  0021               	movlb	1	; select bank1
  4695  038B  00BD               	movwf	setMessage@value^(0+128)
  4696  038C  0020               	movlb	0	; select bank0
  4697  038D  0829               	movf	?___lbtoft+1,w
  4698  038E  0021               	movlb	1	; select bank1
  4699  038F  00BE               	movwf	(setMessage@value+1)^(0+128)
  4700  0390  0020               	movlb	0	; select bank0
  4701  0391  082A               	movf	?___lbtoft+2,w
  4702  0392  0021               	movlb	1	; select bank1
  4703  0393  00BF               	movwf	(setMessage@value+2)^(0+128)
  4704  0394  3187  2775  3181   	fcall	_setMessage
  4705                           
  4706                           ;main.c: 254: packet.packetData.ACKRequest = 1;
  4707  0397  0022               	movlb	2	; select bank2
  4708  0398  152F               	bsf	loop@packet^(0+256),2
  4709                           
  4710                           ;main.c: 255: nrf24l01SendPacket(&packet);
  4711  0399  302F               	movlw	low loop@packet
  4712  039A  0020               	movlb	0	; select bank0
  4713  039B  00A7               	movwf	nrf24l01SendPacket@Packet
  4714  039C  3001               	movlw	high loop@packet
  4715  039D  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4716  039E  3186  269A  3181   	fcall	_nrf24l01SendPacket
  4717                           
  4718                           ;main.c: 256: checkTXPower();
  4719  03A1  3196  2696  3181   	fcall	_checkTXPower
  4720                           
  4721                           ;main.c: 257: sleep(2000);
  4722  03A4  30D0               	movlw	208
  4723  03A5  0020               	movlb	0	; select bank0
  4724  03A6  00B2               	movwf	sleep@milliseconds
  4725  03A7  3007               	movlw	7
  4726  03A8  00B3               	movwf	sleep@milliseconds+1
  4727  03A9  318A  2214         	fcall	_sleep
  4728  03AB  0008               	return
  4729  03AC                     __end_of_loop:	
  4730                           
  4731                           	psect	text9
  4732  0A14                     __ptext9:	
  4733 ;; *************** function _sleep *****************
  4734 ;; Defined at:
  4735 ;;		line 72 in file "main.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  milliseconds    2   18[BANK0 ] unsigned int 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;		None
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4749 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4753 ;;Total ram usage:        2 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:   14
  4756 ;; This function calls:
  4757 ;;		___lwdiv
  4758 ;;		_doWDTSleep
  4759 ;;		_handleRXData
  4760 ;;		_nrf24l01SetRXMode
  4761 ;; This function is called by:
  4762 ;;		_loop
  4763 ;;		_main
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           
  4768                           ;psect for function _sleep
  4769  0A14                     _sleep:	
  4770                           
  4771                           ;main.c: 75: if (!milliseconds){
  4772                           
  4773                           ;incstack = 0
  4774                           ; Regs used in _sleep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4775  0A14  0020               	movlb	0	; select bank0
  4776  0A15  0832               	movf	sleep@milliseconds,w
  4777  0A16  0433               	iorwf	sleep@milliseconds+1,w
  4778  0A17  1D03               	btfss	3,2
  4779  0A18  2A1D               	goto	l3145
  4780                           
  4781                           ;main.c: 76: doWDTSleep(0b00000);
  4782  0A19  3000               	movlw	0
  4783  0A1A  3196  26AA         	fcall	_doWDTSleep
  4784                           
  4785                           ;main.c: 77: return;
  4786  0A1C  0008               	return
  4787  0A1D                     l3145:	
  4788                           
  4789                           ;main.c: 78: };main.c: 83: milliseconds = (unsigned int) (milliseconds / (256 + 8));
  4790  0A1D  3008               	movlw	8
  4791  0A1E  0020               	movlb	0	; select bank0
  4792  0A1F  00A0               	movwf	___lwdiv@divisor
  4793  0A20  3001               	movlw	1
  4794  0A21  00A1               	movwf	___lwdiv@divisor+1
  4795  0A22  0833               	movf	sleep@milliseconds+1,w
  4796  0A23  00A3               	movwf	___lwdiv@dividend+1
  4797  0A24  0832               	movf	sleep@milliseconds,w
  4798  0A25  00A2               	movwf	___lwdiv@dividend
  4799  0A26  3189  2130  318A   	fcall	___lwdiv
  4800  0A29  0020               	movlb	0	; select bank0
  4801  0A2A  0821               	movf	?___lwdiv+1,w
  4802  0A2B  00B3               	movwf	sleep@milliseconds+1
  4803  0A2C  0820               	movf	?___lwdiv,w
  4804  0A2D  00B2               	movwf	sleep@milliseconds
  4805                           
  4806                           ;main.c: 86: milliseconds++;
  4807  0A2E  3001               	movlw	1
  4808  0A2F  07B2               	addwf	sleep@milliseconds,f
  4809  0A30  3000               	movlw	0
  4810  0A31  3DB3               	addwfc	sleep@milliseconds+1,f
  4811  0A32                     l3157:	
  4812                           ;main.c: 89: while (--milliseconds){
  4813                           
  4814  0A32  3001               	movlw	1
  4815  0A33  0020               	movlb	0	; select bank0
  4816  0A34  02B2               	subwf	sleep@milliseconds,f
  4817  0A35  3000               	movlw	0
  4818  0A36  3BB3               	subwfb	sleep@milliseconds+1,f
  4819  0A37  0832               	movf	sleep@milliseconds,w
  4820  0A38  0433               	iorwf	sleep@milliseconds+1,w
  4821  0A39  1903               	btfsc	3,2
  4822  0A3A  0008               	return
  4823                           
  4824                           ;main.c: 92: nrf24l01SetRXMode(1);
  4825  0A3B  3001               	movlw	1
  4826  0A3C  318B  235B  318A   	fcall	_nrf24l01SetRXMode
  4827                           
  4828                           ;main.c: 95: doWDTSleep(3);
  4829  0A3F  3003               	movlw	3
  4830  0A40  3196  26AA  318A   	fcall	_doWDTSleep
  4831                           
  4832                           ;main.c: 98: nrf24l01SetRXMode(0);
  4833  0A43  3000               	movlw	0
  4834  0A44  318B  235B  318A   	fcall	_nrf24l01SetRXMode
  4835                           
  4836                           ;main.c: 101: if (nrf24l01.RXPending){
  4837  0A47  1CFD               	btfss	_nrf24l01,1	;volatile
  4838  0A48  2A4C               	goto	l3155
  4839                           
  4840                           ;main.c: 102: handleRXData();
  4841  0A49  3196  2684  318A   	fcall	_handleRXData
  4842  0A4C                     l3155:	
  4843                           
  4844                           ;main.c: 103: };main.c: 106: doWDTSleep(0b01000);
  4845  0A4C  3008               	movlw	8
  4846  0A4D  3196  26AA  318A   	fcall	_doWDTSleep
  4847  0A50  2A32               	goto	l3157
  4848  0A51                     __end_of_sleep:	
  4849                           
  4850                           	psect	text10
  4851  1684                     __ptext10:	
  4852 ;; *************** function _handleRXData *****************
  4853 ;; Defined at:
  4854 ;;		line 36 in file "main.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;		None
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;  RXPacket        1   17[BANK0 ] PTR struct .
  4859 ;;		 -> RXPacket(33), 
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  1    wreg      void 
  4862 ;; Registers used:
  4863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4872 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4873 ;;Total ram usage:        2 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:   13
  4876 ;; This function calls:
  4877 ;;		_nrf24l01GetRXPacket
  4878 ;;		_nrf24l01SendACK
  4879 ;; This function is called by:
  4880 ;;		_sleep
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           
  4885                           ;psect for function _handleRXData
  4886  1684                     _handleRXData:	
  4887                           
  4888                           ;main.c: 38: nrf24l01Packet_t * RXPacket = nrf24l01GetRXPacket();
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _handleRXData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4892  1684  3180  2002  3196   	fcall	_nrf24l01GetRXPacket
  4893  1687  0020               	movlb	0	; select bank0
  4894  1688  00B0               	movwf	??_handleRXData
  4895  1689  0830               	movf	??_handleRXData,w
  4896  168A  00B1               	movwf	handleRXData@RXPacket
  4897                           
  4898                           ;main.c: 52: if (RXPacket->packetData.ACKRequest){
  4899  168B  0831               	movf	handleRXData@RXPacket,w
  4900  168C  0086               	movwf	6
  4901  168D  3001               	movlw	1	; select bank2/3
  4902  168E  0087               	movwf	7
  4903  168F  1D01               	btfss	1,2
  4904  1690  2E94               	goto	l2947
  4905                           
  4906                           ;main.c: 53: nrf24l01SendACK(RXPacket);
  4907  1691  0831               	movf	handleRXData@RXPacket,w
  4908  1692  3188  20D3         	fcall	_nrf24l01SendACK
  4909  1694                     l2947:	
  4910                           
  4911                           ;main.c: 54: };main.c: 68: nrf24l01.RXPending = 0;
  4912  1694  10FD               	bcf	_nrf24l01,1	;volatile
  4913  1695  0008               	return
  4914  1696                     __end_of_handleRXData:	
  4915                           
  4916                           	psect	text11
  4917  08D3                     __ptext11:	
  4918 ;; *************** function _nrf24l01SendACK *****************
  4919 ;; Defined at:
  4920 ;;		line 92 in file "nrf24l01.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;  packet          1    wreg     PTR struct .
  4923 ;;		 -> RXPacket(33), 
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;  packet          1   15[BANK0 ] PTR struct .
  4926 ;;		 -> RXPacket(33), 
  4927 ;; Return value:  Size  Location     Type
  4928 ;;                  1    wreg      void 
  4929 ;; Registers used:
  4930 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4931 ;; Tracked objects:
  4932 ;;		On entry : 0/0
  4933 ;;		On exit  : 0/0
  4934 ;;		Unchanged: 0/0
  4935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4938 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4939 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4940 ;;Total ram usage:        2 bytes
  4941 ;; Hardware stack levels used:    1
  4942 ;; Hardware stack levels required when called:   12
  4943 ;; This function calls:
  4944 ;;		_nrf24l01SendPacket
  4945 ;;		_nrf24l01SetTXPipe
  4946 ;; This function is called by:
  4947 ;;		_handleRXData
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           
  4952                           ;psect for function _nrf24l01SendACK
  4953  08D3                     _nrf24l01SendACK:	
  4954                           
  4955                           ;incstack = 0
  4956                           ; Regs used in _nrf24l01SendACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4957                           ;nrf24l01SendACK@packet stored from wreg
  4958  08D3  0020               	movlb	0	; select bank0
  4959  08D4  00AF               	movwf	nrf24l01SendACK@packet
  4960                           
  4961                           ;nrf24l01.c: 94: nrf24l01SetTXPipe(packet->packetData.Pipe);
  4962  08D5  082F               	movf	nrf24l01SendACK@packet,w
  4963  08D6  0086               	movwf	6
  4964  08D7  3001               	movlw	1	; select bank2/3
  4965  08D8  0087               	movwf	7
  4966  08D9  0E01               	swapf	1,w
  4967  08DA  3907               	andlw	7
  4968  08DB  318B  2317  3188   	fcall	_nrf24l01SetTXPipe
  4969                           
  4970                           ;nrf24l01.c: 96: packet->packetData.ACKRequest = 0;
  4971  08DE  0020               	movlb	0	; select bank0
  4972  08DF  082F               	movf	nrf24l01SendACK@packet,w
  4973  08E0  0086               	movwf	6
  4974  08E1  3001               	movlw	1	; select bank2/3
  4975  08E2  0087               	movwf	7
  4976  08E3  1101               	bcf	1,2
  4977                           
  4978                           ;nrf24l01.c: 97: packet->packetData.IsACK = 1;
  4979  08E4  082F               	movf	nrf24l01SendACK@packet,w
  4980  08E5  0086               	movwf	6
  4981  08E6  3001               	movlw	1	; select bank2/3
  4982  08E7  0087               	movwf	7
  4983  08E8  1581               	bsf	1,3
  4984                           
  4985                           ;nrf24l01.c: 98: packet->packetData.ACKRPD = packet->packetData.RPD;
  4986  08E9  082F               	movf	nrf24l01SendACK@packet,w
  4987  08EA  0086               	movwf	6
  4988  08EB  3001               	movlw	1	; select bank2/3
  4989  08EC  0087               	movwf	7
  4990  08ED  0801               	movf	1,w
  4991  08EE  3901               	andlw	1
  4992  08EF  00AE               	movwf	??_nrf24l01SendACK
  4993  08F0  082F               	movf	nrf24l01SendACK@packet,w
  4994  08F1  0086               	movwf	6
  4995  08F2  3001               	movlw	1	; select bank2/3
  4996  08F3  0087               	movwf	7
  4997  08F4  0DAE               	rlf	??_nrf24l01SendACK,f
  4998  08F5  0801               	movf	1,w
  4999  08F6  062E               	xorwf	??_nrf24l01SendACK,w
  5000  08F7  39FD               	andlw	-3
  5001  08F8  062E               	xorwf	??_nrf24l01SendACK,w
  5002  08F9  0081               	movwf	1
  5003                           
  5004                           ;nrf24l01.c: 101: nrf24l01SendPacket(packet);
  5005  08FA  082F               	movf	nrf24l01SendACK@packet,w
  5006  08FB  00A7               	movwf	nrf24l01SendPacket@Packet
  5007  08FC  3001               	movlw	1
  5008  08FD  00A8               	movwf	nrf24l01SendPacket@Packet+1
  5009  08FE  3186  269A         	fcall	_nrf24l01SendPacket
  5010  0900  0008               	return
  5011  0901                     __end_of_nrf24l01SendACK:	
  5012                           
  5013                           	psect	text12
  5014  0B17                     __ptext12:	
  5015 ;; *************** function _nrf24l01SetTXPipe *****************
  5016 ;; Defined at:
  5017 ;;		line 315 in file "nrf24l01.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;  pipe            1    wreg     unsigned char 
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  pipe            1    6[BANK0 ] unsigned char 
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  1    wreg      void 
  5024 ;; Registers used:
  5025 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5033 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5034 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5035 ;;Total ram usage:        3 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    9
  5038 ;; This function calls:
  5039 ;;		___bmul
  5040 ;;		_nrf24l01SPIEnd
  5041 ;;		_nrf24l01SPISend
  5042 ;;		_nrf24l01SPIStart
  5043 ;; This function is called by:
  5044 ;;		_main
  5045 ;;		_nrf24l01SendACK
  5046 ;;		_nrf24l01InitRegisters
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           
  5051                           ;psect for function _nrf24l01SetTXPipe
  5052  0B17                     _nrf24l01SetTXPipe:	
  5053                           
  5054                           ;incstack = 0
  5055                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5056                           ;nrf24l01SetTXPipe@pipe stored from wreg
  5057  0B17  0020               	movlb	0	; select bank0
  5058  0B18  00A6               	movwf	nrf24l01SetTXPipe@pipe
  5059                           
  5060                           ;nrf24l01.c: 318: nrf24l01SPIStart();
  5061  0B19  3196  264E  318B   	fcall	_nrf24l01SPIStart
  5062                           
  5063                           ;nrf24l01.c: 319: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  5064  0B1C  3030               	movlw	48
  5065  0B1D  3196  2656  318B   	fcall	_nrf24l01SPISend
  5066                           
  5067                           ;nrf24l01.c: 320: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  5068  0B20  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  5069  0B21  0084               	movwf	4
  5070  0B22  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  5071  0B23  0085               	movwf	5
  5072  0B24  0800               	movf	0,w	;code access
  5073  0B25  0020               	movlb	0	; select bank0
  5074  0B26  00A4               	movwf	??_nrf24l01SetTXPipe
  5075  0B27  3000               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  5076  0B28  0084               	movwf	4
  5077  0B29  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  5078  0B2A  0085               	movwf	5
  5079  0B2B  0800               	movf	0,w	;code access
  5080  0B2C  00A5               	movwf	??_nrf24l01SetTXPipe+1
  5081  0B2D  0825               	movf	??_nrf24l01SetTXPipe+1,w
  5082  0B2E  00A0               	movwf	___bmul@multiplicand
  5083  0B2F  0826               	movf	nrf24l01SetTXPipe@pipe,w
  5084  0B30  3196  2672  318B   	fcall	___bmul
  5085  0B33  0020               	movlb	0	; select bank0
  5086  0B34  0724               	addwf	??_nrf24l01SetTXPipe,w
  5087  0B35  3196  2656  318B   	fcall	_nrf24l01SPISend
  5088                           
  5089                           ;nrf24l01.c: 321: nrf24l01SPISend(n_ADDRESS_P0[3]);
  5090  0B38  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  5091  0B39  0084               	movwf	4
  5092  0B3A  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  5093  0B3B  0085               	movwf	5
  5094  0B3C  0800               	movf	0,w	;code access
  5095  0B3D  3196  2656  318B   	fcall	_nrf24l01SPISend
  5096                           
  5097                           ;nrf24l01.c: 322: nrf24l01SPISend(n_ADDRESS_P0[2]);
  5098  0B40  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  5099  0B41  0084               	movwf	4
  5100  0B42  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  5101  0B43  0085               	movwf	5
  5102  0B44  0800               	movf	0,w	;code access
  5103  0B45  3196  2656  318B   	fcall	_nrf24l01SPISend
  5104                           
  5105                           ;nrf24l01.c: 323: nrf24l01SPISend(n_ADDRESS_P0[1]);
  5106  0B48  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  5107  0B49  0084               	movwf	4
  5108  0B4A  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  5109  0B4B  0085               	movwf	5
  5110  0B4C  0800               	movf	0,w	;code access
  5111  0B4D  3196  2656  318B   	fcall	_nrf24l01SPISend
  5112                           
  5113                           ;nrf24l01.c: 324: nrf24l01SPISend(n_ADDRESS_P0[0]);
  5114  0B50  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  5115  0B51  0084               	movwf	4
  5116  0B52  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  5117  0B53  0085               	movwf	5
  5118  0B54  0800               	movf	0,w	;code access
  5119  0B55  3196  2656  318B   	fcall	_nrf24l01SPISend
  5120                           
  5121                           ;nrf24l01.c: 325: nrf24l01SPIEnd();
  5122  0B58  3196  263F         	fcall	_nrf24l01SPIEnd
  5123  0B5A  0008               	return
  5124  0B5B                     __end_of_nrf24l01SetTXPipe:	
  5125                           
  5126                           	psect	text13
  5127  1672                     __ptext13:	
  5128 ;; *************** function ___bmul *****************
  5129 ;; Defined at:
  5130 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  multiplier      1    wreg     unsigned char 
  5133 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;  multiplier      1    3[BANK0 ] unsigned char 
  5136 ;;  product         1    2[BANK0 ] unsigned char 
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      unsigned char 
  5139 ;; Registers used:
  5140 ;;		wreg, status,2, status,0
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5146 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5148 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5149 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5150 ;;Total ram usage:        4 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; Hardware stack levels required when called:    7
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		_nrf24l01SetTXPipe
  5157 ;;		_nrf24l01InitRegisters
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           
  5162                           ;psect for function ___bmul
  5163  1672                     ___bmul:	
  5164                           
  5165                           ;incstack = 0
  5166                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5167                           ;___bmul@multiplier stored from wreg
  5168  1672  0020               	movlb	0	; select bank0
  5169  1673  00A3               	movwf	___bmul@multiplier
  5170  1674  01A2               	clrf	___bmul@product
  5171  1675                     l2385:	
  5172  1675  1C23               	btfss	___bmul@multiplier,0
  5173  1676  2E7B               	goto	l2389
  5174  1677  0820               	movf	___bmul@multiplicand,w
  5175  1678  00A1               	movwf	??___bmul
  5176  1679  0821               	movf	??___bmul,w
  5177  167A  07A2               	addwf	___bmul@product,f
  5178  167B                     l2389:	
  5179  167B  1003               	clrc
  5180  167C  0DA0               	rlf	___bmul@multiplicand,f
  5181  167D  1003               	clrc
  5182  167E  0CA3               	rrf	___bmul@multiplier,f
  5183  167F  0823               	movf	___bmul@multiplier,w
  5184  1680  1D03               	btfss	3,2
  5185  1681  2E75               	goto	l2385
  5186  1682  0822               	movf	___bmul@product,w
  5187  1683  0008               	return
  5188  1684                     __end_of___bmul:	
  5189                           
  5190                           	psect	text14
  5191  069A                     __ptext14:	
  5192 ;; *************** function _nrf24l01SendPacket *****************
  5193 ;; Defined at:
  5194 ;;		line 179 in file "nrf24l01.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  Packet          2    7[BANK0 ] PTR struct .
  5197 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;  i               1   13[BANK0 ] unsigned char 
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  1    wreg      void 
  5202 ;; Registers used:
  5203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5209 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5211 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5213 ;;Total ram usage:        7 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:   11
  5216 ;; This function calls:
  5217 ;;		_enableInterrupts
  5218 ;;		_nrf24l01CEHigh
  5219 ;;		_nrf24l01CELow
  5220 ;;		_nrf24l01ChangeTXPower
  5221 ;;		_nrf24l01SPIEnd
  5222 ;;		_nrf24l01SPISend
  5223 ;;		_nrf24l01SPIStart
  5224 ;;		_nrf24l01SetRXMode
  5225 ;;		_strlen
  5226 ;; This function is called by:
  5227 ;;		_loop
  5228 ;;		_main
  5229 ;;		_nrf24l01SendACK
  5230 ;; This function uses a non-reentrant model
  5231 ;;
  5232                           
  5233                           
  5234                           ;psect for function _nrf24l01SendPacket
  5235  069A                     _nrf24l01SendPacket:	
  5236  069A                     l305:	
  5237                           ;incstack = 0
  5238                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5239                           ;nrf24l01.c: 182: unsigned char i;;nrf24l01.c: 186: RESEND:
  5240                           
  5241                           
  5242                           ;nrf24l01.c: 189: i = 0xFF;
  5243  069A  30FF               	movlw	255
  5244  069B  0020               	movlb	0	; select bank0
  5245  069C  00A9               	movwf	??_nrf24l01SendPacket
  5246  069D  0829               	movf	??_nrf24l01SendPacket,w
  5247  069E  00AD               	movwf	nrf24l01SendPacket@i
  5248  069F                     l2455:	
  5249                           ;nrf24l01.c: 190: while (nrf24l01.TXBusy){
  5250                           
  5251  069F  1C7D               	btfss	_nrf24l01,0	;volatile
  5252  06A0  2EB0               	goto	l2457
  5253                           
  5254                           ;nrf24l01.c: 192: if (!--i) {
  5255  06A1  3001               	movlw	1
  5256  06A2  0020               	movlb	0	; select bank0
  5257  06A3  02AD               	subwf	nrf24l01SendPacket@i,f
  5258  06A4  1903               	btfsc	3,2
  5259  06A5  2E9A               	goto	l305
  5260                           
  5261                           ;nrf24l01.c: 194: };nrf24l01.c: 195: _delay((unsigned long)((500)*(32000000/4000000.0)))
      +                          ;
  5262                           
  5263                           ;nrf24l01.c: 193: goto RESEND;
  5264  06A6  3006               	movlw	6
  5265  06A7  0020               	movlb	0	; select bank0
  5266  06A8  00A9               	movwf	??_nrf24l01SendPacket
  5267  06A9  3030               	movlw	48
  5268  06AA                     u3647:	
  5269  06AA  0B89               	decfsz	9,f
  5270  06AB  2EAA               	goto	u3647
  5271  06AC  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5272  06AD  2EAA               	goto	u3647
  5273  06AE  0000               	nop
  5274  06AF  2E9F               	goto	l2455
  5275  06B0                     l2457:	
  5276                           
  5277                           ;nrf24l01.c: 196: };nrf24l01.c: 198: TXPacket = Packet;
  5278  06B0  0020               	movlb	0	; select bank0
  5279  06B1  0828               	movf	nrf24l01SendPacket@Packet+1,w
  5280  06B2  0021               	movlb	1	; select bank1
  5281  06B3  00E9               	movwf	(_TXPacket+1)^(0+128)
  5282  06B4  0020               	movlb	0	; select bank0
  5283  06B5  0827               	movf	nrf24l01SendPacket@Packet,w
  5284  06B6  0021               	movlb	1	; select bank1
  5285  06B7  00E8               	movwf	_TXPacket^(0+128)
  5286                           
  5287                           ;nrf24l01.c: 201: nrf24l01.TXBusy = 1;
  5288  06B8  147D               	bsf	_nrf24l01,0	;volatile
  5289                           
  5290                           ;nrf24l01.c: 204: enableInterrupts(0);
  5291  06B9  3000               	movlw	0
  5292  06BA  3196  2646  3186   	fcall	_enableInterrupts
  5293                           
  5294                           ;nrf24l01.c: 207: nrf24l01SetRXMode(0);
  5295  06BD  3000               	movlw	0
  5296  06BE  318B  235B  3186   	fcall	_nrf24l01SetRXMode
  5297                           
  5298                           ;nrf24l01.c: 210: nrf24l01SPIStart();
  5299  06C1  3196  264E  3186   	fcall	_nrf24l01SPIStart
  5300                           
  5301                           ;nrf24l01.c: 213: nrf24l01SPISend((unsigned) 0b10110000);
  5302  06C4  30B0               	movlw	176
  5303  06C5  3196  2656  3186   	fcall	_nrf24l01SPISend
  5304                           
  5305                           ;nrf24l01.c: 215: nrf24l01SPISend(TXPacket->packetData.byte);
  5306  06C8  0021               	movlb	1	; select bank1
  5307  06C9  0868               	movf	_TXPacket^(0+128),w
  5308  06CA  0086               	movwf	6
  5309  06CB  0869               	movf	(_TXPacket+1)^(0+128),w
  5310  06CC  0087               	movwf	7
  5311  06CD  0801               	movf	1,w
  5312  06CE  3196  2656  3186   	fcall	_nrf24l01SPISend
  5313                           
  5314                           ;nrf24l01.c: 218: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  5315  06D1  0020               	movlb	0	; select bank0
  5316  06D2  01AD               	clrf	nrf24l01SendPacket@i
  5317  06D3  2EED               	goto	l2477
  5318  06D4                     l2473:	
  5319                           
  5320                           ;nrf24l01.c: 219: nrf24l01SPISend(TXPacket->Message[i]);
  5321  06D4  082D               	movf	nrf24l01SendPacket@i,w
  5322  06D5  3E01               	addlw	1
  5323  06D6  00A9               	movwf	??_nrf24l01SendPacket
  5324  06D7  3000               	movlw	0
  5325  06D8  1803               	skipnc
  5326  06D9  3001               	movlw	1
  5327  06DA  00AA               	movwf	??_nrf24l01SendPacket+1
  5328  06DB  0829               	movf	??_nrf24l01SendPacket,w
  5329  06DC  0021               	movlb	1	; select bank1
  5330  06DD  0768               	addwf	_TXPacket^(0+128),w
  5331  06DE  0086               	movwf	6
  5332  06DF  0020               	movlb	0	; select bank0
  5333  06E0  082A               	movf	??_nrf24l01SendPacket+1,w
  5334  06E1  0021               	movlb	1	; select bank1
  5335  06E2  3D69               	addwfc	(_TXPacket+1)^(0+128),w
  5336  06E3  0087               	movwf	7
  5337  06E4  0801               	movf	1,w
  5338  06E5  3196  2656  3186   	fcall	_nrf24l01SPISend
  5339  06E8  3001               	movlw	1
  5340  06E9  0020               	movlb	0	; select bank0
  5341  06EA  00A9               	movwf	??_nrf24l01SendPacket
  5342  06EB  0829               	movf	??_nrf24l01SendPacket,w
  5343  06EC  07AD               	addwf	nrf24l01SendPacket@i,f
  5344  06ED                     l2477:	
  5345  06ED  0021               	movlb	1	; select bank1
  5346  06EE  0868               	movf	_TXPacket^(0+128),w
  5347  06EF  3E01               	addlw	1
  5348  06F0  0020               	movlb	0	; select bank0
  5349  06F1  00A9               	movwf	??_nrf24l01SendPacket
  5350  06F2  3000               	movlw	0
  5351  06F3  0021               	movlb	1	; select bank1
  5352  06F4  3D69               	addwfc	(_TXPacket+1)^(0+128),w
  5353  06F5  0020               	movlb	0	; select bank0
  5354  06F6  00AA               	movwf	??_nrf24l01SendPacket+1
  5355  06F7  0829               	movf	??_nrf24l01SendPacket,w
  5356  06F8  00A0               	movwf	strlen@s
  5357  06F9  082A               	movf	??_nrf24l01SendPacket+1,w
  5358  06FA  00A1               	movwf	strlen@s+1
  5359  06FB  3197  277E  3186   	fcall	_strlen
  5360  06FE  0020               	movlb	0	; select bank0
  5361  06FF  082D               	movf	nrf24l01SendPacket@i,w
  5362  0700  00AB               	movwf	??_nrf24l01SendPacket+2
  5363  0701  01AC               	clrf	??_nrf24l01SendPacket+3
  5364  0702  0821               	movf	?_strlen+1,w
  5365  0703  022C               	subwf	??_nrf24l01SendPacket+3,w
  5366  0704  1D03               	skipz
  5367  0705  2F08               	goto	u2075
  5368  0706  0820               	movf	?_strlen,w
  5369  0707  022B               	subwf	??_nrf24l01SendPacket+2,w
  5370  0708                     u2075:	
  5371  0708  1803               	skipnc
  5372  0709  2F0E               	goto	l2481
  5373  070A  3020               	movlw	32
  5374  070B  022D               	subwf	nrf24l01SendPacket@i,w
  5375  070C  1C03               	skipc
  5376  070D  2ED4               	goto	l2473
  5377  070E                     l2481:	
  5378                           
  5379                           ;nrf24l01.c: 220: };nrf24l01.c: 223: nrf24l01SPIEnd();
  5380  070E  3196  263F  3186   	fcall	_nrf24l01SPIEnd
  5381                           
  5382                           ;nrf24l01.c: 226: nrf24l01CEHigh();
  5383  0711  3196  262D  3186   	fcall	_nrf24l01CEHigh
  5384                           
  5385                           ;nrf24l01.c: 227: _delay((unsigned long)((20)*(32000000/4000000.0)));
  5386  0714  3035               	movlw	53
  5387  0715                     u3657:	
  5388  0715  0B89               	decfsz	9,f
  5389  0716  2F15               	goto	u3657
  5390  0717  0000               	nop
  5391                           
  5392                           ;nrf24l01.c: 228: nrf24l01CELow();
  5393  0718  3196  2630  3186   	fcall	_nrf24l01CELow
  5394                           
  5395                           ;nrf24l01.c: 231: enableInterrupts(1);
  5396  071B  3001               	movlw	1
  5397  071C  3196  2646  3186   	fcall	_enableInterrupts
  5398                           
  5399                           ;nrf24l01.c: 234: i = 0xFF;
  5400  071F  30FF               	movlw	255
  5401  0720  0020               	movlb	0	; select bank0
  5402  0721  00A9               	movwf	??_nrf24l01SendPacket
  5403  0722  0829               	movf	??_nrf24l01SendPacket,w
  5404  0723  00AD               	movwf	nrf24l01SendPacket@i
  5405  0724                     l2495:	
  5406                           ;nrf24l01.c: 235: while (nrf24l01.TXBusy){
  5407                           
  5408  0724  1C7D               	btfss	_nrf24l01,0	;volatile
  5409  0725  2F35               	goto	l2497
  5410                           
  5411                           ;nrf24l01.c: 237: if (!--i) {
  5412  0726  3001               	movlw	1
  5413  0727  0020               	movlb	0	; select bank0
  5414  0728  02AD               	subwf	nrf24l01SendPacket@i,f
  5415  0729  1903               	btfsc	3,2
  5416  072A  2E9A               	goto	l305
  5417                           
  5418                           ;nrf24l01.c: 239: };nrf24l01.c: 240: _delay((unsigned long)((500)*(32000000/4000000.0)))
      +                          ;
  5419                           
  5420                           ;nrf24l01.c: 238: goto RESEND;
  5421  072B  3006               	movlw	6
  5422  072C  0020               	movlb	0	; select bank0
  5423  072D  00A9               	movwf	??_nrf24l01SendPacket
  5424  072E  3030               	movlw	48
  5425  072F                     u3667:	
  5426  072F  0B89               	decfsz	9,f
  5427  0730  2F2F               	goto	u3667
  5428  0731  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5429  0732  2F2F               	goto	u3667
  5430  0733  0000               	nop
  5431  0734  2F24               	goto	l2495
  5432  0735                     l2497:	
  5433                           
  5434                           ;nrf24l01.c: 241: };nrf24l01.c: 245: i = 0xFF;
  5435  0735  30FF               	movlw	255
  5436  0736  0020               	movlb	0	; select bank0
  5437  0737  00A9               	movwf	??_nrf24l01SendPacket
  5438  0738  0829               	movf	??_nrf24l01SendPacket,w
  5439  0739  00AD               	movwf	nrf24l01SendPacket@i
  5440  073A                     l2509:	
  5441                           ;nrf24l01.c: 246: while (TXPacket->packetData.ACKRequest){
  5442                           
  5443  073A  0021               	movlb	1	; select bank1
  5444  073B  0868               	movf	_TXPacket^(0+128),w
  5445  073C  0086               	movwf	6
  5446  073D  0869               	movf	(_TXPacket+1)^(0+128),w
  5447  073E  0087               	movwf	7
  5448  073F  1D01               	btfss	1,2
  5449  0740  0008               	return
  5450                           
  5451                           ;nrf24l01.c: 249: nrf24l01SetRXMode(1);
  5452  0741  3001               	movlw	1
  5453  0742  318B  235B  3186   	fcall	_nrf24l01SetRXMode
  5454                           
  5455                           ;nrf24l01.c: 251: if (!--i) {
  5456  0745  3001               	movlw	1
  5457  0746  0020               	movlb	0	; select bank0
  5458  0747  02AD               	subwf	nrf24l01SendPacket@i,f
  5459  0748  1D03               	btfss	3,2
  5460  0749  2F6B               	goto	l2507
  5461                           
  5462                           ;nrf24l01.c: 252: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  5463  074A  3003               	movlw	3
  5464  074B  0020               	movlb	0	; select bank0
  5465  074C  00AA               	movwf	??_nrf24l01SendPacket+1
  5466  074D  3008               	movlw	8
  5467  074E  00A9               	movwf	??_nrf24l01SendPacket
  5468  074F  3077               	movlw	119
  5469  0750                     u3677:	
  5470  0750  0B89               	decfsz	9,f
  5471  0751  2F50               	goto	u3677
  5472  0752  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5473  0753  2F50               	goto	u3677
  5474  0754  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5475  0755  2F50               	goto	u3677
  5476                           
  5477                           ;nrf24l01.c: 253: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  5478  0756  3003               	movlw	3
  5479  0757  0020               	movlb	0	; select bank0
  5480  0758  00AA               	movwf	??_nrf24l01SendPacket+1
  5481  0759  3008               	movlw	8
  5482  075A  00A9               	movwf	??_nrf24l01SendPacket
  5483  075B  3077               	movlw	119
  5484  075C                     u3687:	
  5485  075C  0B89               	decfsz	9,f
  5486  075D  2F5C               	goto	u3687
  5487  075E  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5488  075F  2F5C               	goto	u3687
  5489  0760  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5490  0761  2F5C               	goto	u3687
  5491                           
  5492                           ;nrf24l01.c: 254: nrf24l01ChangeTXPower(1);
  5493  0762  3001               	movlw	1
  5494  0763  0020               	movlb	0	; select bank0
  5495  0764  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  5496  0765  3000               	movlw	0
  5497  0766  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  5498  0767  318A  2251  3186   	fcall	_nrf24l01ChangeTXPower
  5499                           
  5500                           ;nrf24l01.c: 255: goto RESEND;
  5501  076A  2E9A               	goto	l305
  5502  076B                     l2507:	
  5503                           
  5504                           ;nrf24l01.c: 256: };nrf24l01.c: 257: _delay((unsigned long)((500)*(32000000/4000000.0)))
      +                          ;
  5505  076B  3006               	movlw	6
  5506  076C  0020               	movlb	0	; select bank0
  5507  076D  00A9               	movwf	??_nrf24l01SendPacket
  5508  076E  3030               	movlw	48
  5509  076F                     u3697:	
  5510  076F  0B89               	decfsz	9,f
  5511  0770  2F6F               	goto	u3697
  5512  0771  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5513  0772  2F6F               	goto	u3697
  5514  0773  0000               	nop
  5515  0774  2F3A               	goto	l2509
  5516  0775                     __end_of_nrf24l01SendPacket:	
  5517                           
  5518                           	psect	text15
  5519  177E                     __ptext15:	
  5520 ;; *************** function _strlen *****************
  5521 ;; Defined at:
  5522 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5523 ;; Parameters:    Size  Location     Type
  5524 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  5525 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), RXPacket.Message(32), 
  5526 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  5529 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), RXPacket.Message(32), 
  5530 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  2    0[BANK0 ] unsigned int 
  5533 ;; Registers used:
  5534 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5540 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;Total ram usage:        6 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    7
  5547 ;; This function calls:
  5548 ;;		Nothing
  5549 ;; This function is called by:
  5550 ;;		_nrf24l01GetPipe
  5551 ;;		_nrf24l01SendPacket
  5552 ;; This function uses a non-reentrant model
  5553 ;;
  5554                           
  5555                           
  5556                           ;psect for function _strlen
  5557  177E                     _strlen:	
  5558                           
  5559                           ;incstack = 0
  5560                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5561  177E  0020               	movlb	0	; select bank0
  5562  177F  0821               	movf	strlen@s+1,w
  5563  1780  00A5               	movwf	strlen@cp+1
  5564  1781  0820               	movf	strlen@s,w
  5565  1782  00A4               	movwf	strlen@cp
  5566  1783                     l2377:	
  5567  1783  0824               	movf	strlen@cp,w
  5568  1784  0086               	movwf	6
  5569  1785  0825               	movf	strlen@cp+1,w
  5570  1786  0087               	movwf	7
  5571  1787  0801               	movf	1,w
  5572  1788  1903               	btfsc	3,2
  5573  1789  2F8F               	goto	l2379
  5574  178A  3001               	movlw	1
  5575  178B  07A4               	addwf	strlen@cp,f
  5576  178C  3000               	movlw	0
  5577  178D  3DA5               	addwfc	strlen@cp+1,f
  5578  178E  2F83               	goto	l2377
  5579  178F                     l2379:	
  5580  178F  0920               	comf	strlen@s,w
  5581  1790  00A2               	movwf	??_strlen
  5582  1791  0921               	comf	strlen@s+1,w
  5583  1792  00A3               	movwf	??_strlen+1
  5584  1793  0AA2               	incf	??_strlen,f
  5585  1794  1903               	skipnz
  5586  1795  0AA3               	incf	??_strlen+1,f
  5587  1796  0824               	movf	strlen@cp,w
  5588  1797  0722               	addwf	??_strlen,w
  5589  1798  00A0               	movwf	?_strlen
  5590  1799  0825               	movf	strlen@cp+1,w
  5591  179A  3D23               	addwfc	??_strlen+1,w
  5592  179B  00A1               	movwf	?_strlen+1
  5593  179C  0008               	return
  5594  179D                     __end_of_strlen:	
  5595                           
  5596                           	psect	text16
  5597  0B5B                     __ptext16:	
  5598 ;; *************** function _nrf24l01SetRXMode *****************
  5599 ;; Defined at:
  5600 ;;		line 54 in file "nrf24l01.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;  rxMode          1    wreg     unsigned char 
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;  rxMode          1    5[BANK0 ] unsigned char 
  5605 ;;  config          1    4[BANK0 ] struct .
  5606 ;; Return value:  Size  Location     Type
  5607 ;;                  1    wreg      void 
  5608 ;; Registers used:
  5609 ;;		wreg, status,2, status,0, pclath, cstack
  5610 ;; Tracked objects:
  5611 ;;		On entry : 0/0
  5612 ;;		On exit  : 0/0
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5616 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;Total ram usage:        3 bytes
  5620 ;; Hardware stack levels used:    1
  5621 ;; Hardware stack levels required when called:   10
  5622 ;; This function calls:
  5623 ;;		_nrf24l01CEHigh
  5624 ;;		_nrf24l01CELow
  5625 ;;		_nrf24l01Send
  5626 ;; This function is called by:
  5627 ;;		_sleep
  5628 ;;		_nrf24l01SendPacket
  5629 ;; This function uses a non-reentrant model
  5630 ;;
  5631                           
  5632                           
  5633                           ;psect for function _nrf24l01SetRXMode
  5634  0B5B                     _nrf24l01SetRXMode:	
  5635                           
  5636                           ;incstack = 0
  5637                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5638                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5639  0B5B  0020               	movlb	0	; select bank0
  5640  0B5C  00A5               	movwf	nrf24l01SetRXMode@rxMode
  5641                           
  5642                           ;nrf24l01.c: 56: if (rxMode){
  5643  0B5D  0825               	movf	nrf24l01SetRXMode@rxMode,w
  5644  0B5E  1903               	btfsc	3,2
  5645  0B5F  2B62               	goto	l2335
  5646                           
  5647                           ;nrf24l01.c: 57: if (nrf24l01.TXBusy){
  5648  0B60  187D               	btfsc	_nrf24l01,0	;volatile
  5649  0B61  0008               	return
  5650  0B62                     l2335:	
  5651                           ;nrf24l01.c: 58: return;
  5652                           
  5653                           
  5654                           ;nrf24l01.c: 59: };nrf24l01.c: 60: };nrf24l01.c: 62: n_CONFIG_t config;;nrf24l01.c: 65: 
      +                          config.byte = nrf24l01Send((unsigned) 0b00000000 | (unsigned) 0x00, 0);
  5655  0B62  01A0               	clrf	nrf24l01Send@data
  5656  0B63  3000               	movlw	0
  5657  0B64  3197  279D  318B   	fcall	_nrf24l01Send
  5658  0B67  0020               	movlb	0	; select bank0
  5659  0B68  00A3               	movwf	??_nrf24l01SetRXMode
  5660  0B69  0823               	movf	??_nrf24l01SetRXMode,w
  5661  0B6A  00A4               	movwf	nrf24l01SetRXMode@config
  5662                           
  5663                           ;nrf24l01.c: 68: if (config.PRIM_RX != rxMode){
  5664  0B6B  0824               	movf	nrf24l01SetRXMode@config,w
  5665  0B6C  3901               	andlw	1
  5666  0B6D  0625               	xorwf	nrf24l01SetRXMode@rxMode,w
  5667  0B6E  1903               	skipnz
  5668  0B6F  2B9D               	goto	l2355
  5669                           
  5670                           ;nrf24l01.c: 71: nrf24l01CELow();
  5671  0B70  3196  2630  318B   	fcall	_nrf24l01CELow
  5672                           
  5673                           ;nrf24l01.c: 72: _delay((unsigned long)((200)*(32000000/4000000.0)));
  5674  0B73  30E4               	movlw	228
  5675  0B74                     u3707:	
  5676  0B74  3200               	nop2
  5677  0B75  3200               	nop2
  5678  0B76  0B89               	decfsz	9,f
  5679  0B77  2B74               	goto	u3707
  5680  0B78  3200               	nop2
  5681  0B79  3200               	nop2
  5682                           
  5683                           ;nrf24l01.c: 75: config.PRIM_RX = rxMode;
  5684  0B7A  0020               	movlb	0	; select bank0
  5685  0B7B  0825               	movf	nrf24l01SetRXMode@rxMode,w
  5686  0B7C  3901               	andlw	1
  5687  0B7D  1024               	bcf	nrf24l01SetRXMode@config,0
  5688  0B7E  1D03               	skipz
  5689  0B7F  1424               	bsf	nrf24l01SetRXMode@config,0
  5690                           
  5691                           ;nrf24l01.c: 76: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  5692  0B80  0824               	movf	nrf24l01SetRXMode@config,w
  5693  0B81  00A3               	movwf	??_nrf24l01SetRXMode
  5694  0B82  0823               	movf	??_nrf24l01SetRXMode,w
  5695  0B83  00A0               	movwf	nrf24l01Send@data
  5696  0B84  3020               	movlw	32
  5697  0B85  3197  279D  318B   	fcall	_nrf24l01Send
  5698                           
  5699                           ;nrf24l01.c: 79: _delay((unsigned long)((200)*(32000000/4000000.0)));
  5700  0B88  30E4               	movlw	228
  5701  0B89                     u3717:	
  5702  0B89  3200               	nop2
  5703  0B8A  3200               	nop2
  5704  0B8B  0B89               	decfsz	9,f
  5705  0B8C  2B89               	goto	u3717
  5706  0B8D  3200               	nop2
  5707  0B8E  3200               	nop2
  5708                           
  5709                           ;nrf24l01.c: 82: if (rxMode){
  5710  0B8F  0020               	movlb	0	; select bank0
  5711  0B90  0825               	movf	nrf24l01SetRXMode@rxMode,w
  5712  0B91  1903               	btfsc	3,2
  5713  0B92  2B9D               	goto	l2355
  5714                           
  5715                           ;nrf24l01.c: 83: nrf24l01CEHigh();
  5716  0B93  3196  262D  318B   	fcall	_nrf24l01CEHigh
  5717                           
  5718                           ;nrf24l01.c: 84: _delay((unsigned long)((200)*(32000000/4000000.0)));
  5719  0B96  30E4               	movlw	228
  5720  0B97                     u3727:	
  5721  0B97  3200               	nop2
  5722  0B98  3200               	nop2
  5723  0B99  0B89               	decfsz	9,f
  5724  0B9A  2B97               	goto	u3727
  5725  0B9B  3200               	nop2
  5726  0B9C  3200               	nop2
  5727  0B9D                     l2355:	
  5728                           
  5729                           ;nrf24l01.c: 85: };nrf24l01.c: 86: };nrf24l01.c: 89: nrf24l01.RXMode = rxMode;
  5730  0B9D  0020               	movlb	0	; select bank0
  5731  0B9E  0825               	movf	nrf24l01SetRXMode@rxMode,w
  5732  0B9F  3901               	andlw	1
  5733  0BA0  117D               	bcf	_nrf24l01,2	;volatile
  5734  0BA1  1D03               	skipz
  5735  0BA2  157D               	bsf	_nrf24l01,2	;volatile
  5736  0BA3  0008               	return
  5737  0BA4                     __end_of_nrf24l01SetRXMode:	
  5738                           
  5739                           	psect	text17
  5740  0930                     __ptext17:	
  5741 ;; *************** function ___lwdiv *****************
  5742 ;; Defined at:
  5743 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;  divisor         2    0[BANK0 ] unsigned int 
  5746 ;;  dividend        2    2[BANK0 ] unsigned int 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;  quotient        2    5[BANK0 ] unsigned int 
  5749 ;;  counter         1    7[BANK0 ] unsigned char 
  5750 ;; Return value:  Size  Location     Type
  5751 ;;                  2    0[BANK0 ] unsigned int 
  5752 ;; Registers used:
  5753 ;;		wreg, status,2, status,0
  5754 ;; Tracked objects:
  5755 ;;		On entry : 0/0
  5756 ;;		On exit  : 0/0
  5757 ;;		Unchanged: 0/0
  5758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5759 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5760 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5763 ;;Total ram usage:        8 bytes
  5764 ;; Hardware stack levels used:    1
  5765 ;; Hardware stack levels required when called:    7
  5766 ;; This function calls:
  5767 ;;		Nothing
  5768 ;; This function is called by:
  5769 ;;		_sleep
  5770 ;; This function uses a non-reentrant model
  5771 ;;
  5772                           
  5773                           
  5774                           ;psect for function ___lwdiv
  5775  0930                     ___lwdiv:	
  5776                           
  5777                           ;incstack = 0
  5778                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5779  0930  0020               	movlb	0	; select bank0
  5780  0931  01A5               	clrf	___lwdiv@quotient
  5781  0932  01A6               	clrf	___lwdiv@quotient+1
  5782  0933  0820               	movf	___lwdiv@divisor,w
  5783  0934  0421               	iorwf	___lwdiv@divisor+1,w
  5784  0935  1903               	btfsc	3,2
  5785  0936  2960               	goto	l3087
  5786  0937  01A7               	clrf	___lwdiv@counter
  5787  0938  0AA7               	incf	___lwdiv@counter,f
  5788  0939                     l3075:	
  5789  0939  1BA1               	btfsc	___lwdiv@divisor+1,7
  5790  093A  2945               	goto	l3077
  5791  093B  3001               	movlw	1
  5792  093C                     u3215:	
  5793  093C  35A0               	lslf	___lwdiv@divisor,f
  5794  093D  0DA1               	rlf	___lwdiv@divisor+1,f
  5795  093E  0B89               	decfsz	9,f
  5796  093F  293C               	goto	u3215
  5797  0940  3001               	movlw	1
  5798  0941  00A4               	movwf	??___lwdiv
  5799  0942  0824               	movf	??___lwdiv,w
  5800  0943  07A7               	addwf	___lwdiv@counter,f
  5801  0944  2939               	goto	l3075
  5802  0945                     l3077:	
  5803  0945  3001               	movlw	1
  5804  0946                     u3235:	
  5805  0946  35A5               	lslf	___lwdiv@quotient,f
  5806  0947  0DA6               	rlf	___lwdiv@quotient+1,f
  5807  0948  0B89               	decfsz	9,f
  5808  0949  2946               	goto	u3235
  5809  094A  0821               	movf	___lwdiv@divisor+1,w
  5810  094B  0223               	subwf	___lwdiv@dividend+1,w
  5811  094C  1D03               	skipz
  5812  094D  2950               	goto	u3245
  5813  094E  0820               	movf	___lwdiv@divisor,w
  5814  094F  0222               	subwf	___lwdiv@dividend,w
  5815  0950                     u3245:	
  5816  0950  1C03               	skipc
  5817  0951  2957               	goto	l3083
  5818  0952  0820               	movf	___lwdiv@divisor,w
  5819  0953  02A2               	subwf	___lwdiv@dividend,f
  5820  0954  0821               	movf	___lwdiv@divisor+1,w
  5821  0955  3BA3               	subwfb	___lwdiv@dividend+1,f
  5822  0956  1425               	bsf	___lwdiv@quotient,0
  5823  0957                     l3083:	
  5824  0957  3001               	movlw	1
  5825  0958                     u3255:	
  5826  0958  36A1               	lsrf	___lwdiv@divisor+1,f
  5827  0959  0CA0               	rrf	___lwdiv@divisor,f
  5828  095A  0B89               	decfsz	9,f
  5829  095B  2958               	goto	u3255
  5830  095C  3001               	movlw	1
  5831  095D  02A7               	subwf	___lwdiv@counter,f
  5832  095E  1D03               	btfss	3,2
  5833  095F  2945               	goto	l3077
  5834  0960                     l3087:	
  5835  0960  0826               	movf	___lwdiv@quotient+1,w
  5836  0961  00A1               	movwf	?___lwdiv+1
  5837  0962  0825               	movf	___lwdiv@quotient,w
  5838  0963  00A0               	movwf	?___lwdiv
  5839  0964  0008               	return
  5840  0965                     __end_of___lwdiv:	
  5841                           
  5842                           	psect	text18
  5843  0775                     __ptext18:	
  5844 ;; *************** function _setMessage *****************
  5845 ;; Defined at:
  5846 ;;		line 174 in file "main.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;  packet          2   25[BANK1 ] PTR struct .
  5849 ;;		 -> main@packet(33), loop@packet(33), 
  5850 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  5851 ;;		 -> STR_9(5), STR_7(6), STR_6(7), STR_5(5), 
  5852 ;;		 -> STR_4(5), STR_3(4), 
  5853 ;;  value           3   29[BANK1 ] float 
  5854 ;; Auto vars:     Size  Location     Type
  5855 ;;  status          2   33[BANK1 ] int 
  5856 ;; Return value:  Size  Location     Type
  5857 ;;                  1    wreg      void 
  5858 ;; Registers used:
  5859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : 0/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5865 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5866 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5867 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5868 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  5869 ;;Total ram usage:       10 bytes
  5870 ;; Hardware stack levels used:    1
  5871 ;; Hardware stack levels required when called:   11
  5872 ;; This function calls:
  5873 ;;		_ftoa
  5874 ;;		_memset
  5875 ;;		_strcat
  5876 ;; This function is called by:
  5877 ;;		_loop
  5878 ;;		_main
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           
  5883                           ;psect for function _setMessage
  5884  0775                     _setMessage:	
  5885                           
  5886                           ;main.c: 175: memset(packet->Message, 0, sizeof(packet->Message));
  5887                           
  5888                           ;incstack = 0
  5889                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5890  0775  0021               	movlb	1	; select bank1
  5891  0776  0839               	movf	setMessage@packet^(0+128),w
  5892  0777  3E01               	addlw	1
  5893  0778  0020               	movlb	0	; select bank0
  5894  0779  00A0               	movwf	memset@p1
  5895  077A  3000               	movlw	0
  5896  077B  0021               	movlb	1	; select bank1
  5897  077C  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5898  077D  0020               	movlb	0	; select bank0
  5899  077E  00A1               	movwf	memset@p1+1
  5900  077F  3000               	movlw	0
  5901  0780  00A2               	movwf	memset@c
  5902  0781  00A3               	movwf	memset@c+1
  5903  0782  3020               	movlw	32
  5904  0783  00A4               	movwf	memset@n
  5905  0784  3000               	movlw	0
  5906  0785  00A5               	movwf	memset@n+1
  5907  0786  3196  26D9  3187   	fcall	_memset
  5908                           
  5909                           ;main.c: 177: strcat(packet->Message, romData->name);
  5910  0789  0021               	movlb	1	; select bank1
  5911  078A  0839               	movf	setMessage@packet^(0+128),w
  5912  078B  3E01               	addlw	1
  5913  078C  00B3               	movwf	strcat@to^(0+128)
  5914  078D  3000               	movlw	0
  5915  078E  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5916  078F  00B4               	movwf	(strcat@to+1)^(0+128)
  5917  0790  086B               	movf	_romData^(0+128),w
  5918  0791  3E01               	addlw	1
  5919  0792  00B5               	movwf	strcat@from^(0+128)
  5920  0793  3001               	movlw	1
  5921  0794  00B6               	movwf	(strcat@from+1)^(0+128)
  5922  0795  3188  2055  3187   	fcall	_strcat
  5923                           
  5924                           ;main.c: 179: strcat(packet->Message, "/");
  5925  0798  0021               	movlb	1	; select bank1
  5926  0799  0839               	movf	setMessage@packet^(0+128),w
  5927  079A  3E01               	addlw	1
  5928  079B  00B3               	movwf	strcat@to^(0+128)
  5929  079C  3000               	movlw	0
  5930  079D  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5931  079E  00B4               	movwf	(strcat@to+1)^(0+128)
  5932  079F  3035               	movlw	low (STR_1| (0+32768))
  5933  07A0  00B5               	movwf	strcat@from^(0+128)
  5934  07A1  3098               	movlw	high (STR_1| (0+32768))
  5935  07A2  00B6               	movwf	(strcat@from^(0+128)+1)
  5936  07A3  3188  2055  3187   	fcall	_strcat
  5937                           
  5938                           ;main.c: 180: strcat(packet->Message, topic);
  5939  07A6  0021               	movlb	1	; select bank1
  5940  07A7  0839               	movf	setMessage@packet^(0+128),w
  5941  07A8  3E01               	addlw	1
  5942  07A9  00B3               	movwf	strcat@to^(0+128)
  5943  07AA  3000               	movlw	0
  5944  07AB  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5945  07AC  00B4               	movwf	(strcat@to+1)^(0+128)
  5946  07AD  083C               	movf	(setMessage@topic+1)^(0+128),w
  5947  07AE  00B6               	movwf	(strcat@from+1)^(0+128)
  5948  07AF  083B               	movf	setMessage@topic^(0+128),w
  5949  07B0  00B5               	movwf	strcat@from^(0+128)
  5950  07B1  3188  2055  3187   	fcall	_strcat
  5951                           
  5952                           ;main.c: 182: int status;;main.c: 183: strcat(packet->Message, "/");
  5953  07B4  0021               	movlb	1	; select bank1
  5954  07B5  0839               	movf	setMessage@packet^(0+128),w
  5955  07B6  3E01               	addlw	1
  5956  07B7  00B3               	movwf	strcat@to^(0+128)
  5957  07B8  3000               	movlw	0
  5958  07B9  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5959  07BA  00B4               	movwf	(strcat@to+1)^(0+128)
  5960  07BB  3035               	movlw	low (STR_1| (0+32768))
  5961  07BC  00B5               	movwf	strcat@from^(0+128)
  5962  07BD  3098               	movlw	high (STR_1| (0+32768))
  5963  07BE  00B6               	movwf	(strcat@from^(0+128)+1)
  5964  07BF  3188  2055  3187   	fcall	_strcat
  5965                           
  5966                           ;main.c: 184: strcat(packet->Message, ftoa(value, &status));
  5967  07C2  0021               	movlb	1	; select bank1
  5968  07C3  0839               	movf	setMessage@packet^(0+128),w
  5969  07C4  3E01               	addlw	1
  5970  07C5  00B3               	movwf	strcat@to^(0+128)
  5971  07C6  3000               	movlw	0
  5972  07C7  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  5973  07C8  00B4               	movwf	(strcat@to+1)^(0+128)
  5974  07C9  083D               	movf	setMessage@value^(0+128),w
  5975  07CA  00A6               	movwf	ftoa@f^(0+128)
  5976  07CB  083E               	movf	(setMessage@value+1)^(0+128),w
  5977  07CC  00A7               	movwf	(ftoa@f+1)^(0+128)
  5978  07CD  083F               	movf	(setMessage@value+2)^(0+128),w
  5979  07CE  00A8               	movwf	(ftoa@f+2)^(0+128)
  5980  07CF  30C1               	movlw	(low (setMessage@status| 0))& (0+255)
  5981  07D0  00C0               	movwf	??_setMessage^(0+128)
  5982  07D1  0840               	movf	??_setMessage^(0+128),w
  5983  07D2  00A9               	movwf	ftoa@status^(0+128)
  5984  07D3  3185  25A8  3187   	fcall	_ftoa
  5985  07D6  0021               	movlb	1	; select bank1
  5986  07D7  00B5               	movwf	strcat@from^(0+128)
  5987  07D8  3001               	movlw	1
  5988  07D9  00B6               	movwf	(strcat@from+1)^(0+128)
  5989  07DA  3188  2055         	fcall	_strcat
  5990                           
  5991                           ;main.c: 186: packet->packetData.byte = 0;
  5992  07DC  0021               	movlb	1	; select bank1
  5993  07DD  0839               	movf	setMessage@packet^(0+128),w
  5994  07DE  0086               	movwf	6
  5995  07DF  083A               	movf	(setMessage@packet+1)^(0+128),w
  5996  07E0  0087               	movwf	7
  5997  07E1  0181               	clrf	1
  5998  07E2  0008               	return
  5999  07E3                     __end_of_setMessage:	
  6000                           
  6001                           	psect	text19
  6002  0855                     __ptext19:	
  6003 ;; *************** function _strcat *****************
  6004 ;; Defined at:
  6005 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;  to              2   19[BANK1 ] PTR unsigned char 
  6008 ;;		 -> main@packet(33), loop@packet(33), 
  6009 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  6010 ;;		 -> romDataMap.name(16), ftoa@buf(17), STR_9(5), STR_7(6), 
  6011 ;;		 -> STR_6(7), STR_5(5), STR_4(5), STR_3(4), 
  6012 ;;		 -> STR_2(2), STR_1(2), romDataMap(28), 
  6013 ;; Auto vars:     Size  Location     Type
  6014 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  6015 ;;		 -> main@packet(33), loop@packet(33), 
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  2   19[BANK1 ] PTR unsigned char 
  6018 ;; Registers used:
  6019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6025 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6028 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;Total ram usage:        6 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    7
  6032 ;; This function calls:
  6033 ;;		Nothing
  6034 ;; This function is called by:
  6035 ;;		_setMessage
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           
  6040                           ;psect for function _strcat
  6041  0855                     _strcat:	
  6042                           
  6043                           ;incstack = 0
  6044                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  6045  0855  0021               	movlb	1	; select bank1
  6046  0856  0834               	movf	(strcat@to+1)^(0+128),w
  6047  0857  00B8               	movwf	(strcat@cp+1)^(0+128)
  6048  0858  0833               	movf	strcat@to^(0+128),w
  6049  0859  00B7               	movwf	strcat@cp^(0+128)
  6050  085A                     l2961:	
  6051  085A  0837               	movf	strcat@cp^(0+128),w
  6052  085B  0086               	movwf	6
  6053  085C  0838               	movf	(strcat@cp+1)^(0+128),w
  6054  085D  0087               	movwf	7
  6055  085E  0801               	movf	1,w
  6056  085F  1903               	btfsc	3,2
  6057  0860  286E               	goto	l2965
  6058  0861  3001               	movlw	1
  6059  0862  07B7               	addwf	strcat@cp^(0+128),f
  6060  0863  3000               	movlw	0
  6061  0864  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  6062  0865  285A               	goto	l2961
  6063  0866                     l2963:	
  6064  0866  3001               	movlw	1
  6065  0867  07B7               	addwf	strcat@cp^(0+128),f
  6066  0868  3000               	movlw	0
  6067  0869  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  6068  086A  3001               	movlw	1
  6069  086B  07B5               	addwf	strcat@from^(0+128),f
  6070  086C  3000               	movlw	0
  6071  086D  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  6072  086E                     l2965:	
  6073  086E  0837               	movf	strcat@cp^(0+128),w
  6074  086F  0086               	movwf	6
  6075  0870  0838               	movf	(strcat@cp+1)^(0+128),w
  6076  0871  0087               	movwf	7
  6077  0872  0835               	movf	strcat@from^(0+128),w
  6078  0873  0084               	movwf	4
  6079  0874  0836               	movf	(strcat@from+1)^(0+128),w
  6080  0875  0085               	movwf	5
  6081  0876  0800               	movf	0,w	;code access
  6082  0877  3FC0               	movwi [0]fsr1
  6083  0878  0889               	movf	9,f
  6084  0879  1903               	btfsc	3,2
  6085  087A  0008               	return
  6086  087B  2866               	goto	l2963
  6087  087C                     __end_of_strcat:	
  6088                           ;	Return value of _strcat is never used
  6089                           
  6090                           
  6091                           	psect	text20
  6092  16D9                     __ptext20:	
  6093 ;; *************** function _memset *****************
  6094 ;; Defined at:
  6095 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;  p1              2    0[BANK0 ] PTR void 
  6098 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6099 ;;  c               2    2[BANK0 ] int 
  6100 ;;  n               2    4[BANK0 ] unsigned int 
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;  p               2    6[BANK0 ] PTR unsigned char 
  6103 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6104 ;; Return value:  Size  Location     Type
  6105 ;;                  2    0[BANK0 ] PTR void 
  6106 ;; Registers used:
  6107 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6113 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6114 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6116 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6117 ;;Total ram usage:        8 bytes
  6118 ;; Hardware stack levels used:    1
  6119 ;; Hardware stack levels required when called:    7
  6120 ;; This function calls:
  6121 ;;		Nothing
  6122 ;; This function is called by:
  6123 ;;		_setMessage
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           
  6128                           ;psect for function _memset
  6129  16D9                     _memset:	
  6130                           
  6131                           ;incstack = 0
  6132                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6133  16D9  0020               	movlb	0	; select bank0
  6134  16DA  0821               	movf	memset@p1+1,w
  6135  16DB  00A7               	movwf	memset@p+1
  6136  16DC  0820               	movf	memset@p1,w
  6137  16DD  00A6               	movwf	memset@p
  6138  16DE                     l2955:	
  6139  16DE  3001               	movlw	1
  6140  16DF  02A4               	subwf	memset@n,f
  6141  16E0  3000               	movlw	0
  6142  16E1  3BA5               	subwfb	memset@n+1,f
  6143  16E2  0A24               	incf	memset@n,w
  6144  16E3  1903               	btfsc	3,2
  6145  16E4  0A25               	incf	memset@n+1,w
  6146  16E5  1903               	btfsc	3,2
  6147  16E6  0008               	return
  6148  16E7  0826               	movf	memset@p,w
  6149  16E8  0086               	movwf	6
  6150  16E9  0827               	movf	memset@p+1,w
  6151  16EA  0087               	movwf	7
  6152  16EB  0822               	movf	memset@c,w
  6153  16EC  0081               	movwf	1
  6154  16ED  3001               	movlw	1
  6155  16EE  07A6               	addwf	memset@p,f
  6156  16EF  3000               	movlw	0
  6157  16F0  3DA7               	addwfc	memset@p+1,f
  6158  16F1  2EDE               	goto	l2955
  6159  16F2                     __end_of_memset:	
  6160                           ;	Return value of _memset is never used
  6161                           
  6162                           
  6163                           	psect	text21
  6164  05A8                     __ptext21:	
  6165 ;; *************** function _ftoa *****************
  6166 ;; Defined at:
  6167 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  f               3    6[BANK1 ] float 
  6170 ;;  status          1    9[BANK1 ] PTR int 
  6171 ;;		 -> setMessage@status(2), 
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  l               4   14[BANK1 ] unsigned long 
  6174 ;;  rem             4   10[BANK1 ] unsigned long 
  6175 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  6176 ;;		 -> ftoa@buf(17), 
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  1    wreg      PTR unsigned char 
  6179 ;; Registers used:
  6180 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6186 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6187 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;Total ram usage:       14 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:   10
  6193 ;; This function calls:
  6194 ;;		___ftge
  6195 ;;		___ftmul
  6196 ;;		___ftneg
  6197 ;;		___ftsub
  6198 ;;		___fttol
  6199 ;;		___lltoft
  6200 ;;		_sprintf
  6201 ;; This function is called by:
  6202 ;;		_setMessage
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           
  6207                           ;psect for function _ftoa
  6208  05A8                     _ftoa:	
  6209                           
  6210                           ;incstack = 0
  6211                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6212  05A8  3053               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6213  05A9  0020               	movlb	0	; select bank0
  6214  05AA  00EF               	movwf	??_ftoa
  6215  05AB  086F               	movf	??_ftoa,w
  6216  05AC  0021               	movlb	1	; select bank1
  6217  05AD  00B2               	movwf	ftoa@cp^(0+128)
  6218  05AE  0826               	movf	ftoa@f^(0+128),w
  6219  05AF  0020               	movlb	0	; select bank0
  6220  05B0  00A0               	movwf	___ftge@ff1
  6221  05B1  0021               	movlb	1	; select bank1
  6222  05B2  0827               	movf	(ftoa@f+1)^(0+128),w
  6223  05B3  0020               	movlb	0	; select bank0
  6224  05B4  00A1               	movwf	___ftge@ff1+1
  6225  05B5  0021               	movlb	1	; select bank1
  6226  05B6  0828               	movf	(ftoa@f+2)^(0+128),w
  6227  05B7  0020               	movlb	0	; select bank0
  6228  05B8  00A2               	movwf	___ftge@ff1+2
  6229  05B9  3000               	movlw	0
  6230  05BA  00A3               	movwf	___ftge@ff2
  6231  05BB  3000               	movlw	0
  6232  05BC  00A4               	movwf	___ftge@ff2+1
  6233  05BD  3000               	movlw	0
  6234  05BE  00A5               	movwf	___ftge@ff2+2
  6235  05BF  3189  21D8  3185   	fcall	___ftge
  6236  05C2  1803               	btfsc	3,0
  6237  05C3  2DEE               	goto	l2977
  6238  05C4  302D               	movlw	45
  6239  05C5  0020               	movlb	0	; select bank0
  6240  05C6  00EF               	movwf	??_ftoa
  6241  05C7  0021               	movlb	1	; select bank1
  6242  05C8  0832               	movf	ftoa@cp^(0+128),w
  6243  05C9  0086               	movwf	6
  6244  05CA  3001               	movlw	1	; select bank2/3
  6245  05CB  0087               	movwf	7
  6246  05CC  0020               	movlb	0	; select bank0
  6247  05CD  086F               	movf	??_ftoa,w
  6248  05CE  0081               	movwf	1
  6249  05CF  3001               	movlw	1
  6250  05D0  00EF               	movwf	??_ftoa
  6251  05D1  086F               	movf	??_ftoa,w
  6252  05D2  0021               	movlb	1	; select bank1
  6253  05D3  07B2               	addwf	ftoa@cp^(0+128),f
  6254  05D4  0826               	movf	ftoa@f^(0+128),w
  6255  05D5  0020               	movlb	0	; select bank0
  6256  05D6  00D7               	movwf	___ftneg@f1
  6257  05D7  0021               	movlb	1	; select bank1
  6258  05D8  0827               	movf	(ftoa@f+1)^(0+128),w
  6259  05D9  0020               	movlb	0	; select bank0
  6260  05DA  00D8               	movwf	___ftneg@f1+1
  6261  05DB  0021               	movlb	1	; select bank1
  6262  05DC  0828               	movf	(ftoa@f+2)^(0+128),w
  6263  05DD  0020               	movlb	0	; select bank0
  6264  05DE  00D9               	movwf	___ftneg@f1+2
  6265  05DF  3188  2001  3185   	fcall	___ftneg
  6266  05E2  0020               	movlb	0	; select bank0
  6267  05E3  0857               	movf	?___ftneg,w
  6268  05E4  0021               	movlb	1	; select bank1
  6269  05E5  00A6               	movwf	ftoa@f^(0+128)
  6270  05E6  0020               	movlb	0	; select bank0
  6271  05E7  0858               	movf	?___ftneg+1,w
  6272  05E8  0021               	movlb	1	; select bank1
  6273  05E9  00A7               	movwf	(ftoa@f+1)^(0+128)
  6274  05EA  0020               	movlb	0	; select bank0
  6275  05EB  0859               	movf	?___ftneg+2,w
  6276  05EC  0021               	movlb	1	; select bank1
  6277  05ED  00A8               	movwf	(ftoa@f+2)^(0+128)
  6278  05EE                     l2977:	
  6279  05EE  0021               	movlb	1	; select bank1
  6280  05EF  0826               	movf	ftoa@f^(0+128),w
  6281  05F0  0020               	movlb	0	; select bank0
  6282  05F1  00E7               	movwf	___fttol@f1
  6283  05F2  0021               	movlb	1	; select bank1
  6284  05F3  0827               	movf	(ftoa@f+1)^(0+128),w
  6285  05F4  0020               	movlb	0	; select bank0
  6286  05F5  00E8               	movwf	___fttol@f1+1
  6287  05F6  0021               	movlb	1	; select bank1
  6288  05F7  0828               	movf	(ftoa@f+2)^(0+128),w
  6289  05F8  0020               	movlb	0	; select bank0
  6290  05F9  00E9               	movwf	___fttol@f1+2
  6291  05FA  318C  24A9  3185   	fcall	___fttol
  6292  05FD  0020               	movlb	0	; select bank0
  6293  05FE  086A               	movf	?___fttol+3,w
  6294  05FF  0021               	movlb	1	; select bank1
  6295  0600  00B1               	movwf	(ftoa@l+3)^(0+128)
  6296  0601  0020               	movlb	0	; select bank0
  6297  0602  0869               	movf	?___fttol+2,w
  6298  0603  0021               	movlb	1	; select bank1
  6299  0604  00B0               	movwf	(ftoa@l+2)^(0+128)
  6300  0605  0020               	movlb	0	; select bank0
  6301  0606  0868               	movf	?___fttol+1,w
  6302  0607  0021               	movlb	1	; select bank1
  6303  0608  00AF               	movwf	(ftoa@l+1)^(0+128)
  6304  0609  0020               	movlb	0	; select bank0
  6305  060A  0867               	movf	?___fttol,w
  6306  060B  0021               	movlb	1	; select bank1
  6307  060C  00AE               	movwf	ftoa@l^(0+128)
  6308  060D  0831               	movf	(ftoa@l+3)^(0+128),w
  6309  060E  0020               	movlb	0	; select bank0
  6310  060F  00AB               	movwf	___lltoft@c+3
  6311  0610  0021               	movlb	1	; select bank1
  6312  0611  0830               	movf	(ftoa@l+2)^(0+128),w
  6313  0612  0020               	movlb	0	; select bank0
  6314  0613  00AA               	movwf	___lltoft@c+2
  6315  0614  0021               	movlb	1	; select bank1
  6316  0615  082F               	movf	(ftoa@l+1)^(0+128),w
  6317  0616  0020               	movlb	0	; select bank0
  6318  0617  00A9               	movwf	___lltoft@c+1
  6319  0618  0021               	movlb	1	; select bank1
  6320  0619  082E               	movf	ftoa@l^(0+128),w
  6321  061A  0020               	movlb	0	; select bank0
  6322  061B  00A8               	movwf	___lltoft@c
  6323  061C  3188  207C  3185   	fcall	___lltoft
  6324  061F  0020               	movlb	0	; select bank0
  6325  0620  0828               	movf	?___lltoft,w
  6326  0621  00BB               	movwf	___ftsub@f2
  6327  0622  0829               	movf	?___lltoft+1,w
  6328  0623  00BC               	movwf	___ftsub@f2+1
  6329  0624  082A               	movf	?___lltoft+2,w
  6330  0625  00BD               	movwf	___ftsub@f2+2
  6331  0626  0021               	movlb	1	; select bank1
  6332  0627  0826               	movf	ftoa@f^(0+128),w
  6333  0628  0020               	movlb	0	; select bank0
  6334  0629  00BE               	movwf	___ftsub@f1
  6335  062A  0021               	movlb	1	; select bank1
  6336  062B  0827               	movf	(ftoa@f+1)^(0+128),w
  6337  062C  0020               	movlb	0	; select bank0
  6338  062D  00BF               	movwf	___ftsub@f1+1
  6339  062E  0021               	movlb	1	; select bank1
  6340  062F  0828               	movf	(ftoa@f+2)^(0+128),w
  6341  0630  0020               	movlb	0	; select bank0
  6342  0631  00C0               	movwf	___ftsub@f1+2
  6343  0632  3197  2760  3185   	fcall	___ftsub
  6344  0635  0020               	movlb	0	; select bank0
  6345  0636  083B               	movf	?___ftsub,w
  6346  0637  0021               	movlb	1	; select bank1
  6347  0638  00A6               	movwf	ftoa@f^(0+128)
  6348  0639  0020               	movlb	0	; select bank0
  6349  063A  083C               	movf	?___ftsub+1,w
  6350  063B  0021               	movlb	1	; select bank1
  6351  063C  00A7               	movwf	(ftoa@f+1)^(0+128)
  6352  063D  0020               	movlb	0	; select bank0
  6353  063E  083D               	movf	?___ftsub+2,w
  6354  063F  0021               	movlb	1	; select bank1
  6355  0640  00A8               	movwf	(ftoa@f+2)^(0+128)
  6356  0641  0826               	movf	ftoa@f^(0+128),w
  6357  0642  0020               	movlb	0	; select bank0
  6358  0643  00DA               	movwf	___ftmul@f2
  6359  0644  0021               	movlb	1	; select bank1
  6360  0645  0827               	movf	(ftoa@f+1)^(0+128),w
  6361  0646  0020               	movlb	0	; select bank0
  6362  0647  00DB               	movwf	___ftmul@f2+1
  6363  0648  0021               	movlb	1	; select bank1
  6364  0649  0828               	movf	(ftoa@f+2)^(0+128),w
  6365  064A  0020               	movlb	0	; select bank0
  6366  064B  00DC               	movwf	___ftmul@f2+2
  6367  064C  3024               	movlw	36
  6368  064D  00D7               	movwf	___ftmul@f1
  6369  064E  3074               	movlw	116
  6370  064F  00D8               	movwf	___ftmul@f1+1
  6371  0650  3049               	movlw	73
  6372  0651  00D9               	movwf	___ftmul@f1+2
  6373  0652  318E  2697  3185   	fcall	___ftmul
  6374  0655  0020               	movlb	0	; select bank0
  6375  0656  0857               	movf	?___ftmul,w
  6376  0657  00E7               	movwf	___fttol@f1
  6377  0658  0858               	movf	?___ftmul+1,w
  6378  0659  00E8               	movwf	___fttol@f1+1
  6379  065A  0859               	movf	?___ftmul+2,w
  6380  065B  00E9               	movwf	___fttol@f1+2
  6381  065C  318C  24A9  3185   	fcall	___fttol
  6382  065F  0020               	movlb	0	; select bank0
  6383  0660  086A               	movf	?___fttol+3,w
  6384  0661  0021               	movlb	1	; select bank1
  6385  0662  00AD               	movwf	(ftoa@rem+3)^(0+128)
  6386  0663  0020               	movlb	0	; select bank0
  6387  0664  0869               	movf	?___fttol+2,w
  6388  0665  0021               	movlb	1	; select bank1
  6389  0666  00AC               	movwf	(ftoa@rem+2)^(0+128)
  6390  0667  0020               	movlb	0	; select bank0
  6391  0668  0868               	movf	?___fttol+1,w
  6392  0669  0021               	movlb	1	; select bank1
  6393  066A  00AB               	movwf	(ftoa@rem+1)^(0+128)
  6394  066B  0020               	movlb	0	; select bank0
  6395  066C  0867               	movf	?___fttol,w
  6396  066D  0021               	movlb	1	; select bank1
  6397  066E  00AA               	movwf	ftoa@rem^(0+128)
  6398  066F  3001               	movlw	low (STR_10| (0+32768))
  6399  0670  0020               	movlb	0	; select bank0
  6400  0671  00B8               	movwf	sprintf@f
  6401  0672  3098               	movlw	high (STR_10| (0+32768))
  6402  0673  00B9               	movwf	sprintf@f+1
  6403  0674  0021               	movlb	1	; select bank1
  6404  0675  0831               	movf	(ftoa@l+3)^(0+128),w
  6405  0676  0020               	movlb	0	; select bank0
  6406  0677  00BD               	movwf	?_sprintf+5
  6407  0678  0021               	movlb	1	; select bank1
  6408  0679  0830               	movf	(ftoa@l+2)^(0+128),w
  6409  067A  0020               	movlb	0	; select bank0
  6410  067B  00BC               	movwf	?_sprintf+4
  6411  067C  0021               	movlb	1	; select bank1
  6412  067D  082F               	movf	(ftoa@l+1)^(0+128),w
  6413  067E  0020               	movlb	0	; select bank0
  6414  067F  00BB               	movwf	?_sprintf+3
  6415  0680  0021               	movlb	1	; select bank1
  6416  0681  082E               	movf	ftoa@l^(0+128),w
  6417  0682  0020               	movlb	0	; select bank0
  6418  0683  00BA               	movwf	?_sprintf+2
  6419  0684  0021               	movlb	1	; select bank1
  6420  0685  082D               	movf	(ftoa@rem+3)^(0+128),w
  6421  0686  0020               	movlb	0	; select bank0
  6422  0687  00C1               	movwf	?_sprintf+9
  6423  0688  0021               	movlb	1	; select bank1
  6424  0689  082C               	movf	(ftoa@rem+2)^(0+128),w
  6425  068A  0020               	movlb	0	; select bank0
  6426  068B  00C0               	movwf	?_sprintf+8
  6427  068C  0021               	movlb	1	; select bank1
  6428  068D  082B               	movf	(ftoa@rem+1)^(0+128),w
  6429  068E  0020               	movlb	0	; select bank0
  6430  068F  00BF               	movwf	?_sprintf+7
  6431  0690  0021               	movlb	1	; select bank1
  6432  0691  082A               	movf	ftoa@rem^(0+128),w
  6433  0692  0020               	movlb	0	; select bank0
  6434  0693  00BE               	movwf	?_sprintf+6
  6435  0694  0021               	movlb	1	; select bank1
  6436  0695  0832               	movf	ftoa@cp^(0+128),w
  6437  0696  3180  202D         	fcall	_sprintf
  6438  0698  3053               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6439  0699  0008               	return
  6440  069A                     __end_of_ftoa:	
  6441                           
  6442                           	psect	text22
  6443  002D                     __ptext22:	
  6444 ;; *************** function _sprintf *****************
  6445 ;; Defined at:
  6446 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  6447 ;; Parameters:    Size  Location     Type
  6448 ;;  sp              1    wreg     PTR unsigned char 
  6449 ;;		 -> ftoa@buf(17), 
  6450 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  6451 ;;		 -> STR_10(11), 
  6452 ;; Auto vars:     Size  Location     Type
  6453 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  6454 ;;		 -> ftoa@buf(17), 
  6455 ;;  val             4   42[BANK0 ] unsigned long 
  6456 ;;  tmpval          4    0        struct .
  6457 ;;  prec            2   49[BANK0 ] int 
  6458 ;;  width           2   47[BANK0 ] int 
  6459 ;;  cp              2    0        PTR const unsigned char 
  6460 ;;  len             2    0        unsigned int 
  6461 ;;  c               1   51[BANK0 ] unsigned char 
  6462 ;;  ap              1   41[BANK0 ] PTR void [1]
  6463 ;;		 -> ?_sprintf(2), 
  6464 ;;  flag            1   40[BANK0 ] unsigned char 
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  2   24[BANK0 ] int 
  6467 ;; Registers used:
  6468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 0/0
  6471 ;;		On exit  : 0/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6474 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;Total ram usage:       28 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    8
  6481 ;; This function calls:
  6482 ;;		___lldiv
  6483 ;;		___llmod
  6484 ;;		___wmul
  6485 ;;		_isdigit
  6486 ;; This function is called by:
  6487 ;;		_ftoa
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           
  6492                           ;psect for function _sprintf
  6493  002D                     _sprintf:	
  6494                           
  6495                           ;incstack = 0
  6496                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6497                           ;sprintf@sp stored from wreg
  6498  002D  0020               	movlb	0	; select bank0
  6499  002E  00CE               	movwf	sprintf@sp
  6500                           
  6501                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  6502  002F  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6503  0030  00C2               	movwf	??_sprintf
  6504  0031  0842               	movf	??_sprintf,w
  6505  0032  00C9               	movwf	sprintf@ap
  6506  0033                     l2779:	
  6507                           ;doprnt.c: 548: while((c = *f++)) {
  6508                           
  6509  0033  0839               	movf	sprintf@f+1,w
  6510  0034  00C3               	movwf	??_sprintf+1
  6511  0035  0838               	movf	sprintf@f,w
  6512  0036  00C2               	movwf	??_sprintf
  6513  0037  0AB8               	incf	sprintf@f,f
  6514  0038  1903               	skipnz
  6515  0039  0AB9               	incf	sprintf@f+1,f
  6516  003A  0842               	movf	??_sprintf,w
  6517  003B  0084               	movwf	4
  6518  003C  0843               	movf	??_sprintf+1,w
  6519  003D  0085               	movwf	5
  6520  003E  0800               	movf	0,w	;code access
  6521  003F  00C4               	movwf	??_sprintf+2
  6522  0040  0844               	movf	??_sprintf+2,w
  6523  0041  00D3               	movwf	sprintf@c
  6524  0042  0853               	movf	sprintf@c,w
  6525  0043  1903               	btfsc	3,2
  6526  0044  29F4               	goto	l2781
  6527                           
  6528                           ;doprnt.c: 550: if(c != '%')
  6529  0045  3025               	movlw	37
  6530  0046  0653               	xorwf	sprintf@c,w
  6531  0047  1903               	btfsc	3,2
  6532  0048  2856               	goto	l2691
  6533                           
  6534                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  6535  0049  0853               	movf	sprintf@c,w
  6536  004A  00C2               	movwf	??_sprintf
  6537  004B  084E               	movf	sprintf@sp,w
  6538  004C  0086               	movwf	6
  6539  004D  3001               	movlw	1	; select bank2/3
  6540  004E  0087               	movwf	7
  6541  004F  0842               	movf	??_sprintf,w
  6542  0050  0081               	movwf	1
  6543  0051  3001               	movlw	1
  6544  0052  00C2               	movwf	??_sprintf
  6545  0053  0842               	movf	??_sprintf,w
  6546  0054  07CE               	addwf	sprintf@sp,f
  6547                           
  6548                           ;doprnt.c: 554: continue;
  6549  0055  2833               	goto	l2779
  6550  0056                     l2691:	
  6551                           
  6552                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  6553  0056  01CF               	clrf	sprintf@width
  6554  0057  01D0               	clrf	sprintf@width+1
  6555                           
  6556                           ;doprnt.c: 560: flag = 0;
  6557  0058  01C8               	clrf	sprintf@flag
  6558                           
  6559                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  6560  0059  0838               	movf	sprintf@f,w
  6561  005A  0084               	movwf	4
  6562  005B  0839               	movf	sprintf@f+1,w
  6563  005C  0085               	movwf	5
  6564  005D  0800               	movf	0,w	;code access
  6565  005E  3196  2663  3180   	fcall	_isdigit
  6566  0061  1C03               	btfss	3,0
  6567  0062  2894               	goto	l2705
  6568                           
  6569                           ;doprnt.c: 610: width = 0;
  6570  0063  0020               	movlb	0	; select bank0
  6571  0064  01CF               	clrf	sprintf@width
  6572  0065  01D0               	clrf	sprintf@width+1
  6573  0066                     l2697:	
  6574                           ;doprnt.c: 611: do {
  6575                           
  6576                           
  6577                           ;doprnt.c: 612: width *= 10;
  6578  0066  300A               	movlw	10
  6579  0067  0020               	movlb	0	; select bank0
  6580  0068  00A0               	movwf	___wmul@multiplier
  6581  0069  3000               	movlw	0
  6582  006A  00A1               	movwf	___wmul@multiplier+1
  6583  006B  0850               	movf	sprintf@width+1,w
  6584  006C  00A3               	movwf	___wmul@multiplicand+1
  6585  006D  084F               	movf	sprintf@width,w
  6586  006E  00A2               	movwf	___wmul@multiplicand
  6587  006F  3197  2728  3180   	fcall	___wmul
  6588  0072  0020               	movlb	0	; select bank0
  6589  0073  0821               	movf	?___wmul+1,w
  6590  0074  00D0               	movwf	sprintf@width+1
  6591  0075  0820               	movf	?___wmul,w
  6592  0076  00CF               	movwf	sprintf@width
  6593                           
  6594                           ;doprnt.c: 613: width += *f++ - '0';
  6595  0077  0838               	movf	sprintf@f,w
  6596  0078  0084               	movwf	4
  6597  0079  0839               	movf	sprintf@f+1,w
  6598  007A  0085               	movwf	5
  6599  007B  0800               	movf	0,w	;code access
  6600  007C  3ED0               	addlw	208
  6601  007D  00C2               	movwf	??_sprintf
  6602  007E  30FF               	movlw	255
  6603  007F  1803               	skipnc
  6604  0080  3000               	movlw	0
  6605  0081  00C3               	movwf	??_sprintf+1
  6606  0082  0842               	movf	??_sprintf,w
  6607  0083  07CF               	addwf	sprintf@width,f
  6608  0084  0843               	movf	??_sprintf+1,w
  6609  0085  3DD0               	addwfc	sprintf@width+1,f
  6610  0086  3001               	movlw	1
  6611  0087  07B8               	addwf	sprintf@f,f
  6612  0088  3000               	movlw	0
  6613  0089  3DB9               	addwfc	sprintf@f+1,f
  6614                           
  6615                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  6616  008A  0838               	movf	sprintf@f,w
  6617  008B  0084               	movwf	4
  6618  008C  0839               	movf	sprintf@f+1,w
  6619  008D  0085               	movwf	5
  6620  008E  0800               	movf	0,w	;code access
  6621  008F  3196  2663  3180   	fcall	_isdigit
  6622  0092  1803               	btfsc	3,0
  6623  0093  2866               	goto	l2697
  6624  0094                     l2705:	
  6625                           
  6626                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  6627  0094  0020               	movlb	0	; select bank0
  6628  0095  0838               	movf	sprintf@f,w
  6629  0096  0084               	movwf	4
  6630  0097  0839               	movf	sprintf@f+1,w
  6631  0098  0085               	movwf	5
  6632  0099  0012               	moviw fsr0++
  6633  009A  3A2E               	xorlw	46
  6634  009B  1D03               	btfss	3,2
  6635  009C  28D2               	goto	l2717
  6636                           
  6637                           ;doprnt.c: 625: f++;
  6638  009D  3001               	movlw	1
  6639  009E  07B8               	addwf	sprintf@f,f
  6640  009F  3000               	movlw	0
  6641  00A0  3DB9               	addwfc	sprintf@f+1,f
  6642                           
  6643                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  6644  00A1  01D1               	clrf	sprintf@prec
  6645  00A2  01D2               	clrf	sprintf@prec+1
  6646  00A3                     l2715:	
  6647                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  6648                           
  6649  00A3  0838               	movf	sprintf@f,w
  6650  00A4  0084               	movwf	4
  6651  00A5  0839               	movf	sprintf@f+1,w
  6652  00A6  0085               	movwf	5
  6653  00A7  0800               	movf	0,w	;code access
  6654  00A8  3196  2663  3180   	fcall	_isdigit
  6655  00AB  1C03               	btfss	3,0
  6656  00AC  28DD               	goto	l2723
  6657                           
  6658                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  6659  00AD  0020               	movlb	0	; select bank0
  6660  00AE  0838               	movf	sprintf@f,w
  6661  00AF  0084               	movwf	4
  6662  00B0  0839               	movf	sprintf@f+1,w
  6663  00B1  0085               	movwf	5
  6664  00B2  0800               	movf	0,w	;code access
  6665  00B3  00C2               	movwf	??_sprintf
  6666  00B4  01C3               	clrf	??_sprintf+1
  6667  00B5  0852               	movf	sprintf@prec+1,w
  6668  00B6  00A1               	movwf	___wmul@multiplier+1
  6669  00B7  0851               	movf	sprintf@prec,w
  6670  00B8  00A0               	movwf	___wmul@multiplier
  6671  00B9  300A               	movlw	10
  6672  00BA  00A2               	movwf	___wmul@multiplicand
  6673  00BB  3000               	movlw	0
  6674  00BC  00A3               	movwf	___wmul@multiplicand+1
  6675  00BD  3197  2728  3180   	fcall	___wmul
  6676  00C0  0020               	movlb	0	; select bank0
  6677  00C1  0842               	movf	??_sprintf,w
  6678  00C2  0720               	addwf	?___wmul,w
  6679  00C3  00C4               	movwf	??_sprintf+2
  6680  00C4  0843               	movf	??_sprintf+1,w
  6681  00C5  3D21               	addwfc	?___wmul+1,w
  6682  00C6  00C5               	movwf	??_sprintf+3
  6683  00C7  0844               	movf	??_sprintf+2,w
  6684  00C8  3ED0               	addlw	208
  6685  00C9  00D1               	movwf	sprintf@prec
  6686  00CA  30FF               	movlw	255
  6687  00CB  3D45               	addwfc	??_sprintf+3,w
  6688  00CC  00D2               	movwf	sprintf@prec+1
  6689  00CD  3001               	movlw	1
  6690  00CE  07B8               	addwf	sprintf@f,f
  6691  00CF  3000               	movlw	0
  6692  00D0  3DB9               	addwfc	sprintf@f+1,f
  6693  00D1  28A3               	goto	l2715
  6694  00D2                     l2717:	
  6695                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  6696                           
  6697                           
  6698                           ;doprnt.c: 645: prec = 0;
  6699  00D2  0020               	movlb	0	; select bank0
  6700  00D3  01D1               	clrf	sprintf@prec
  6701  00D4  01D2               	clrf	sprintf@prec+1
  6702                           
  6703                           ;doprnt.c: 654: switch(c = *f++) {
  6704                           
  6705                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  6706  00D5  28DD               	goto	l2723
  6707  00D6                     l459:	
  6708                           ;doprnt.c: 660: case 'l':
  6709                           
  6710                           ;doprnt.c: 657: goto alldone;
  6711                           
  6712                           ;doprnt.c: 656: case 0:
  6713                           
  6714                           
  6715                           ;doprnt.c: 662: flag |= 0x10;
  6716  00D6  1648               	bsf	sprintf@flag,4
  6717                           
  6718                           ;doprnt.c: 663: goto loop;
  6719  00D7  28DD               	goto	l2723
  6720  00D8                     l2719:	
  6721                           ;doprnt.c: 836: case 'u':
  6722                           
  6723                           ;doprnt.c: 832: continue;
  6724                           
  6725                           ;doprnt.c: 821: default:
  6726                           
  6727                           
  6728                           ;doprnt.c: 837: flag |= 0xC0;
  6729  00D8  30C0               	movlw	192
  6730  00D9  00C2               	movwf	??_sprintf
  6731  00DA  0842               	movf	??_sprintf,w
  6732  00DB  04C8               	iorwf	sprintf@flag,f
  6733                           
  6734                           ;doprnt.c: 841: }
  6735                           
  6736                           ;doprnt.c: 838: break;
  6737  00DC  28F5               	goto	l462
  6738  00DD                     l2723:	
  6739  00DD  0020               	movlb	0	; select bank0
  6740  00DE  0839               	movf	sprintf@f+1,w
  6741  00DF  00C3               	movwf	??_sprintf+1
  6742  00E0  0838               	movf	sprintf@f,w
  6743  00E1  00C2               	movwf	??_sprintf
  6744  00E2  0AB8               	incf	sprintf@f,f
  6745  00E3  1903               	skipnz
  6746  00E4  0AB9               	incf	sprintf@f+1,f
  6747  00E5  0842               	movf	??_sprintf,w
  6748  00E6  0084               	movwf	4
  6749  00E7  0843               	movf	??_sprintf+1,w
  6750  00E8  0085               	movwf	5
  6751  00E9  0800               	movf	0,w	;code access
  6752  00EA  00D3               	movwf	sprintf@c
  6753                           
  6754                           ; Switch size 1, requested type "space"
  6755                           ; Number of cases is 3, Range of values is 0 to 117
  6756                           ; switch strategies available:
  6757                           ; Name         Instructions Cycles
  6758                           ; simple_byte           10     6 (average)
  6759                           ; direct_byte          242     6 (fixed)
  6760                           ; jumptable            260     6 (fixed)
  6761                           ;	Chosen strategy is simple_byte
  6762  00EB  3A00               	xorlw	0	; case 0
  6763  00EC  1903               	skipnz
  6764  00ED  29F4               	goto	l2781
  6765  00EE  3A6C               	xorlw	108	; case 108
  6766  00EF  1903               	skipnz
  6767  00F0  28D6               	goto	l459
  6768  00F1  3A19               	xorlw	25	; case 117
  6769  00F2  1903               	skipnz
  6770  00F3  28D8               	goto	l2719
  6771  00F4  2833               	goto	l2779
  6772  00F5                     l462:	
  6773                           
  6774                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  6775  00F5  1E48               	btfss	sprintf@flag,4
  6776  00F6  2904               	goto	l2729
  6777                           
  6778                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6779  00F7  0849               	movf	sprintf@ap,w
  6780  00F8  0086               	movwf	6
  6781  00F9  0187               	clrf	7
  6782  00FA  3F40               	moviw [0]fsr1
  6783  00FB  00CA               	movwf	sprintf@val
  6784  00FC  3F41               	moviw [1]fsr1
  6785  00FD  00CB               	movwf	sprintf@val+1
  6786  00FE  3F42               	moviw [2]fsr1
  6787  00FF  00CC               	movwf	sprintf@val+2
  6788  0100  3F43               	moviw [3]fsr1
  6789  0101  00CD               	movwf	sprintf@val+3
  6790  0102  3004               	movlw	4
  6791  0103  2912               	goto	L2
  6792  0104                     l2729:	
  6793                           
  6794                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  6795  0104  0849               	movf	sprintf@ap,w
  6796  0105  0086               	movwf	6
  6797  0106  0187               	clrf	7
  6798  0107  3F40               	moviw [0]fsr1
  6799  0108  00C2               	movwf	??_sprintf
  6800  0109  3F41               	moviw [1]fsr1
  6801  010A  00C3               	movwf	??_sprintf+1
  6802  010B  0842               	movf	??_sprintf,w
  6803  010C  00CA               	movwf	sprintf@val
  6804  010D  0843               	movf	??_sprintf+1,w
  6805  010E  00CB               	movwf	sprintf@val+1
  6806  010F  01CC               	clrf	sprintf@val+2
  6807  0110  01CD               	clrf	sprintf@val+3
  6808  0111  3002               	movlw	2
  6809  0112                     L2:	
  6810  0112  00C2               	movwf	??_sprintf
  6811  0113  0842               	movf	??_sprintf,w
  6812  0114  07C9               	addwf	sprintf@ap,f
  6813                           
  6814                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  6815  0115  0851               	movf	sprintf@prec,w
  6816  0116  0452               	iorwf	sprintf@prec+1,w
  6817  0117  1D03               	btfss	3,2
  6818  0118  2923               	goto	l2739
  6819  0119  084D               	movf	sprintf@val+3,w
  6820  011A  044C               	iorwf	sprintf@val+2,w
  6821  011B  044B               	iorwf	sprintf@val+1,w
  6822  011C  044A               	iorwf	sprintf@val,w
  6823  011D  1D03               	skipz
  6824  011E  2923               	goto	l2739
  6825                           
  6826                           ;doprnt.c: 1310: prec++;
  6827  011F  3001               	movlw	1
  6828  0120  07D1               	addwf	sprintf@prec,f
  6829  0121  3000               	movlw	0
  6830  0122  3DD2               	addwfc	sprintf@prec+1,f
  6831  0123                     l2739:	
  6832                           
  6833                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6834  0123  01D3               	clrf	sprintf@c
  6835  0124  0AD3               	incf	sprintf@c,f
  6836  0125  300A               	movlw	10
  6837  0126  0653               	xorwf	sprintf@c,w
  6838  0127  1903               	btfsc	3,2
  6839  0128  2956               	goto	l2751
  6840  0129                     l2745:	
  6841                           
  6842                           ;doprnt.c: 1325: if(val < dpowers[c])
  6843  0129  0853               	movf	sprintf@c,w
  6844  012A  00C2               	movwf	??_sprintf
  6845  012B  01C3               	clrf	??_sprintf+1
  6846  012C  35C2               	lslf	??_sprintf,f
  6847  012D  0DC3               	rlf	??_sprintf+1,f
  6848  012E  35C2               	lslf	??_sprintf,f
  6849  012F  0DC3               	rlf	??_sprintf+1,f
  6850  0130  3000               	movlw	low (_dpowers| (0+32768))
  6851  0131  0742               	addwf	??_sprintf,w
  6852  0132  0084               	movwf	4
  6853  0133  3090               	movlw	high (_dpowers| (0+32768))
  6854  0134  3D43               	addwfc	??_sprintf+1,w
  6855  0135  0085               	movwf	5
  6856  0136  3F00               	moviw [0]fsr0
  6857  0137  00C4               	movwf	??_sprintf+2
  6858  0138  3F01               	moviw [1]fsr0
  6859  0139  00C5               	movwf	??_sprintf+3
  6860  013A  3F02               	moviw [2]fsr0
  6861  013B  00C6               	movwf	??_sprintf+4
  6862  013C  3F03               	moviw [3]fsr0
  6863  013D  00C7               	movwf	??_sprintf+5
  6864  013E  0847               	movf	??_sprintf+5,w
  6865  013F  024D               	subwf	sprintf@val+3,w
  6866  0140  1D03               	skipz
  6867  0141  294C               	goto	u2645
  6868  0142  0846               	movf	??_sprintf+4,w
  6869  0143  024C               	subwf	sprintf@val+2,w
  6870  0144  1D03               	skipz
  6871  0145  294C               	goto	u2645
  6872  0146  0845               	movf	??_sprintf+3,w
  6873  0147  024B               	subwf	sprintf@val+1,w
  6874  0148  1D03               	skipz
  6875  0149  294C               	goto	u2645
  6876  014A  0844               	movf	??_sprintf+2,w
  6877  014B  024A               	subwf	sprintf@val,w
  6878  014C                     u2645:	
  6879  014C  1C03               	btfss	3,0
  6880  014D  2956               	goto	l2751
  6881                           
  6882                           ;doprnt.c: 1326: break;
  6883  014E  3001               	movlw	1
  6884  014F  00C2               	movwf	??_sprintf
  6885  0150  0842               	movf	??_sprintf,w
  6886  0151  07D3               	addwf	sprintf@c,f
  6887  0152  300A               	movlw	10
  6888  0153  0653               	xorwf	sprintf@c,w
  6889  0154  1D03               	btfss	3,2
  6890  0155  2929               	goto	l2745
  6891  0156                     l2751:	
  6892                           
  6893                           ;doprnt.c: 1358: if(c < prec)
  6894  0156  0852               	movf	sprintf@prec+1,w
  6895  0157  3A80               	xorlw	128
  6896  0158  3C80               	sublw	128
  6897  0159  1D03               	skipz
  6898  015A  295D               	goto	u2665
  6899  015B  0851               	movf	sprintf@prec,w
  6900  015C  0253               	subwf	sprintf@c,w
  6901  015D                     u2665:	
  6902  015D  1803               	skipnc
  6903  015E  2965               	goto	l2755
  6904                           
  6905                           ;doprnt.c: 1359: c = prec;
  6906  015F  0020               	movlb	0	; select bank0
  6907  0160  0851               	movf	sprintf@prec,w
  6908  0161  00C2               	movwf	??_sprintf
  6909  0162  0842               	movf	??_sprintf,w
  6910  0163  00D3               	movwf	sprintf@c
  6911  0164  2979               	goto	l470
  6912  0165                     l2755:	
  6913                           
  6914                           ;doprnt.c: 1360: else if(prec < c)
  6915  0165  0020               	movlb	0	; select bank0
  6916  0166  0852               	movf	sprintf@prec+1,w
  6917  0167  3A80               	xorlw	128
  6918  0168  00C2               	movwf	??_sprintf
  6919  0169  3080               	movlw	128
  6920  016A  0242               	subwf	??_sprintf,w
  6921  016B  1D03               	skipz
  6922  016C  296F               	goto	u2675
  6923  016D  0853               	movf	sprintf@c,w
  6924  016E  0251               	subwf	sprintf@prec,w
  6925  016F                     u2675:	
  6926  016F  1803               	skipnc
  6927  0170  2979               	goto	l470
  6928                           
  6929                           ;doprnt.c: 1361: prec = c;
  6930  0171  0020               	movlb	0	; select bank0
  6931  0172  0853               	movf	sprintf@c,w
  6932  0173  00C2               	movwf	??_sprintf
  6933  0174  01C3               	clrf	??_sprintf+1
  6934  0175  0842               	movf	??_sprintf,w
  6935  0176  00D1               	movwf	sprintf@prec
  6936  0177  0843               	movf	??_sprintf+1,w
  6937  0178  00D2               	movwf	sprintf@prec+1
  6938  0179                     l470:	
  6939                           
  6940                           ;doprnt.c: 1400: if(width > c)
  6941  0179  0020               	movlb	0	; select bank0
  6942  017A  0850               	movf	sprintf@width+1,w
  6943  017B  3A80               	xorlw	128
  6944  017C  3C80               	sublw	128
  6945  017D  1D03               	skipz
  6946  017E  2981               	goto	u2685
  6947  017F  084F               	movf	sprintf@width,w
  6948  0180  0253               	subwf	sprintf@c,w
  6949  0181                     u2685:	
  6950  0181  1803               	skipnc
  6951  0182  298C               	goto	l2761
  6952                           
  6953                           ;doprnt.c: 1401: width -= c;
  6954  0183  0020               	movlb	0	; select bank0
  6955  0184  0853               	movf	sprintf@c,w
  6956  0185  00C2               	movwf	??_sprintf
  6957  0186  01C3               	clrf	??_sprintf+1
  6958  0187  0842               	movf	??_sprintf,w
  6959  0188  02CF               	subwf	sprintf@width,f
  6960  0189  0843               	movf	??_sprintf+1,w
  6961  018A  3BD0               	subwfb	sprintf@width+1,f
  6962  018B  298F               	goto	l2763
  6963  018C                     l2761:	
  6964                           
  6965                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  6966  018C  0020               	movlb	0	; select bank0
  6967  018D  01CF               	clrf	sprintf@width
  6968  018E  01D0               	clrf	sprintf@width+1
  6969  018F                     l2763:	
  6970                           
  6971                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  6972  018F  084F               	movf	sprintf@width,w
  6973  0190  0450               	iorwf	sprintf@width+1,w
  6974  0191  1903               	btfsc	3,2
  6975  0192  29E9               	goto	l2777
  6976                           
  6977                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  6978                           
  6979                           ;doprnt.c: 1448: do
  6980  0193  3020               	movlw	32
  6981  0194  00C2               	movwf	??_sprintf
  6982  0195  084E               	movf	sprintf@sp,w
  6983  0196  0086               	movwf	6
  6984  0197  3001               	movlw	1	; select bank2/3
  6985  0198  0087               	movwf	7
  6986  0199  0842               	movf	??_sprintf,w
  6987  019A  0081               	movwf	1
  6988  019B  3001               	movlw	1
  6989  019C  00C2               	movwf	??_sprintf
  6990  019D  0842               	movf	??_sprintf,w
  6991  019E  07CE               	addwf	sprintf@sp,f
  6992                           
  6993                           ;doprnt.c: 1450: while(--width);
  6994  019F  30FF               	movlw	255
  6995  01A0  07CF               	addwf	sprintf@width,f
  6996  01A1  30FF               	movlw	255
  6997  01A2  3DD0               	addwfc	sprintf@width+1,f
  6998  01A3  298F               	goto	l2763
  6999  01A4                     l2771:	
  7000                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7001                           
  7002                           
  7003                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7004  01A4  3000               	movlw	0
  7005  01A5  00B1               	movwf	___llmod@divisor+3
  7006  01A6  3000               	movlw	0
  7007  01A7  00B0               	movwf	___llmod@divisor+2
  7008  01A8  3000               	movlw	0
  7009  01A9  00AF               	movwf	___llmod@divisor+1
  7010  01AA  300A               	movlw	10
  7011  01AB  00AE               	movwf	___llmod@divisor
  7012  01AC  0852               	movf	sprintf@prec+1,w
  7013  01AD  0085               	movwf	5
  7014  01AE  0851               	movf	sprintf@prec,w
  7015  01AF  0084               	movwf	4
  7016  01B0  3584               	lslf	4,f
  7017  01B1  0D85               	rlf	5,f
  7018  01B2  3584               	lslf	4,f
  7019  01B3  0D85               	rlf	5,f
  7020  01B4  3000               	movlw	low (_dpowers| (0+32768))
  7021  01B5  0784               	addwf	4,f
  7022  01B6  3090               	movlw	high (_dpowers| (0+32768))
  7023  01B7  3D85               	addwfc	5,f
  7024  01B8  3F00               	moviw [0]fsr0
  7025  01B9  00A0               	movwf	___lldiv@divisor
  7026  01BA  3F01               	moviw [1]fsr0
  7027  01BB  00A1               	movwf	___lldiv@divisor+1
  7028  01BC  3F02               	moviw [2]fsr0
  7029  01BD  00A2               	movwf	___lldiv@divisor+2
  7030  01BE  3F03               	moviw [3]fsr0
  7031  01BF  00A3               	movwf	___lldiv@divisor+3
  7032  01C0  084D               	movf	sprintf@val+3,w
  7033  01C1  00A7               	movwf	___lldiv@dividend+3
  7034  01C2  084C               	movf	sprintf@val+2,w
  7035  01C3  00A6               	movwf	___lldiv@dividend+2
  7036  01C4  084B               	movf	sprintf@val+1,w
  7037  01C5  00A5               	movwf	___lldiv@dividend+1
  7038  01C6  084A               	movf	sprintf@val,w
  7039  01C7  00A4               	movwf	___lldiv@dividend
  7040  01C8  318B  23F1  3180   	fcall	___lldiv
  7041  01CB  0020               	movlb	0	; select bank0
  7042  01CC  0823               	movf	?___lldiv+3,w
  7043  01CD  00B5               	movwf	___llmod@dividend+3
  7044  01CE  0822               	movf	?___lldiv+2,w
  7045  01CF  00B4               	movwf	___llmod@dividend+2
  7046  01D0  0821               	movf	?___lldiv+1,w
  7047  01D1  00B3               	movwf	___llmod@dividend+1
  7048  01D2  0820               	movf	?___lldiv,w
  7049  01D3  00B2               	movwf	___llmod@dividend
  7050  01D4  318A  2290  3180   	fcall	___llmod
  7051  01D7  0020               	movlb	0	; select bank0
  7052  01D8  082E               	movf	?___llmod,w
  7053  01D9  3E30               	addlw	48
  7054  01DA  00C2               	movwf	??_sprintf
  7055  01DB  0842               	movf	??_sprintf,w
  7056  01DC  00D3               	movwf	sprintf@c
  7057                           
  7058                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7059  01DD  0853               	movf	sprintf@c,w
  7060  01DE  00C2               	movwf	??_sprintf
  7061  01DF  084E               	movf	sprintf@sp,w
  7062  01E0  0086               	movwf	6
  7063  01E1  3001               	movlw	1	; select bank2/3
  7064  01E2  0087               	movwf	7
  7065  01E3  0842               	movf	??_sprintf,w
  7066  01E4  0081               	movwf	1
  7067  01E5  3001               	movlw	1
  7068  01E6  00C2               	movwf	??_sprintf
  7069  01E7  0842               	movf	??_sprintf,w
  7070  01E8  07CE               	addwf	sprintf@sp,f
  7071  01E9                     l2777:	
  7072  01E9  30FF               	movlw	255
  7073  01EA  07D1               	addwf	sprintf@prec,f
  7074  01EB  30FF               	movlw	255
  7075  01EC  3DD2               	addwfc	sprintf@prec+1,f
  7076  01ED  0A51               	incf	sprintf@prec,w
  7077  01EE  1D03               	skipz
  7078  01EF  29A4               	goto	l2771
  7079  01F0  0A52               	incf	sprintf@prec+1,w
  7080  01F1  1903               	btfsc	3,2
  7081  01F2  2833               	goto	l2779
  7082  01F3  29A4               	goto	l2771
  7083  01F4                     l2781:	
  7084                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7085                           
  7086                           
  7087                           ;doprnt.c: 1557: *sp = 0;
  7088  01F4  084E               	movf	sprintf@sp,w
  7089  01F5  0086               	movwf	6
  7090  01F6  3001               	movlw	1	; select bank2/3
  7091  01F7  0087               	movwf	7
  7092  01F8  0181               	clrf	1
  7093  01F9  0008               	return
  7094  01FA                     __end_of_sprintf:	
  7095                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7096                           
  7097                           
  7098                           	psect	text23
  7099  1663                     __ptext23:	
  7100 ;; *************** function _isdigit *****************
  7101 ;; Defined at:
  7102 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;  c               1    wreg     unsigned char 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  c               1    1[BANK0 ] unsigned char 
  7107 ;; Return value:  Size  Location     Type
  7108 ;;		None               void
  7109 ;; Registers used:
  7110 ;;		wreg, status,2, status,0
  7111 ;; Tracked objects:
  7112 ;;		On entry : 0/0
  7113 ;;		On exit  : 0/0
  7114 ;;		Unchanged: 0/0
  7115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7117 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7119 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7120 ;;Total ram usage:        2 bytes
  7121 ;; Hardware stack levels used:    1
  7122 ;; Hardware stack levels required when called:    7
  7123 ;; This function calls:
  7124 ;;		Nothing
  7125 ;; This function is called by:
  7126 ;;		_sprintf
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           
  7131                           ;psect for function _isdigit
  7132  1663                     _isdigit:	
  7133                           
  7134                           ;incstack = 0
  7135                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7136                           ;isdigit@c stored from wreg
  7137  1663  0020               	movlb	0	; select bank0
  7138  1664  00A1               	movwf	isdigit@c
  7139  1665  01A0               	clrf	_isdigit$1811
  7140  1666  303A               	movlw	58
  7141  1667  0221               	subwf	isdigit@c,w
  7142  1668  1803               	skipnc
  7143  1669  2E70               	goto	l2533
  7144  166A  3030               	movlw	48
  7145  166B  0221               	subwf	isdigit@c,w
  7146  166C  1C03               	skipc
  7147  166D  2E70               	goto	l2533
  7148  166E  01A0               	clrf	_isdigit$1811
  7149  166F  0AA0               	incf	_isdigit$1811,f
  7150  1670                     l2533:	
  7151  1670  0C20               	rrf	_isdigit$1811,w
  7152  1671  0008               	return
  7153  1672                     __end_of_isdigit:	
  7154                           
  7155                           	psect	text24
  7156  1728                     __ptext24:	
  7157 ;; *************** function ___wmul *****************
  7158 ;; Defined at:
  7159 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7162 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;  product         2    4[BANK0 ] unsigned int 
  7165 ;; Return value:  Size  Location     Type
  7166 ;;                  2    0[BANK0 ] unsigned int 
  7167 ;; Registers used:
  7168 ;;		wreg, status,2, status,0
  7169 ;; Tracked objects:
  7170 ;;		On entry : 0/0
  7171 ;;		On exit  : 0/0
  7172 ;;		Unchanged: 0/0
  7173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7174 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7175 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7177 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;Total ram usage:        6 bytes
  7179 ;; Hardware stack levels used:    1
  7180 ;; Hardware stack levels required when called:    7
  7181 ;; This function calls:
  7182 ;;		Nothing
  7183 ;; This function is called by:
  7184 ;;		_sprintf
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           
  7189                           ;psect for function ___wmul
  7190  1728                     ___wmul:	
  7191                           
  7192                           ;incstack = 0
  7193                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7194  1728  0020               	movlb	0	; select bank0
  7195  1729  01A4               	clrf	___wmul@product
  7196  172A  01A5               	clrf	___wmul@product+1
  7197  172B                     l2539:	
  7198  172B  1C20               	btfss	___wmul@multiplier,0
  7199  172C  2F31               	goto	l485
  7200  172D  0822               	movf	___wmul@multiplicand,w
  7201  172E  07A4               	addwf	___wmul@product,f
  7202  172F  0823               	movf	___wmul@multiplicand+1,w
  7203  1730  3DA5               	addwfc	___wmul@product+1,f
  7204  1731                     l485:	
  7205  1731  3001               	movlw	1
  7206  1732                     u2165:	
  7207  1732  35A2               	lslf	___wmul@multiplicand,f
  7208  1733  0DA3               	rlf	___wmul@multiplicand+1,f
  7209  1734  0B89               	decfsz	9,f
  7210  1735  2F32               	goto	u2165
  7211  1736  3001               	movlw	1
  7212  1737                     u2175:	
  7213  1737  36A1               	lsrf	___wmul@multiplier+1,f
  7214  1738  0CA0               	rrf	___wmul@multiplier,f
  7215  1739  0B89               	decfsz	9,f
  7216  173A  2F37               	goto	u2175
  7217  173B  0820               	movf	___wmul@multiplier,w
  7218  173C  0421               	iorwf	___wmul@multiplier+1,w
  7219  173D  1D03               	btfss	3,2
  7220  173E  2F2B               	goto	l2539
  7221  173F  0825               	movf	___wmul@product+1,w
  7222  1740  00A1               	movwf	?___wmul+1
  7223  1741  0824               	movf	___wmul@product,w
  7224  1742  00A0               	movwf	?___wmul
  7225  1743  0008               	return
  7226  1744                     __end_of___wmul:	
  7227                           
  7228                           	psect	text25
  7229  0A90                     __ptext25:	
  7230 ;; *************** function ___llmod *****************
  7231 ;; Defined at:
  7232 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;  divisor         4   14[BANK0 ] unsigned long 
  7235 ;;  dividend        4   18[BANK0 ] unsigned long 
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;  counter         1   23[BANK0 ] unsigned char 
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  4   14[BANK0 ] unsigned long 
  7240 ;; Registers used:
  7241 ;;		wreg, status,2, status,0
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7247 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;Total ram usage:       10 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    7
  7254 ;; This function calls:
  7255 ;;		Nothing
  7256 ;; This function is called by:
  7257 ;;		_sprintf
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           
  7262                           ;psect for function ___llmod
  7263  0A90                     ___llmod:	
  7264                           
  7265                           ;incstack = 0
  7266                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7267  0A90  0020               	movlb	0	; select bank0
  7268  0A91  0831               	movf	___llmod@divisor+3,w
  7269  0A92  0430               	iorwf	___llmod@divisor+2,w
  7270  0A93  042F               	iorwf	___llmod@divisor+1,w
  7271  0A94  042E               	iorwf	___llmod@divisor,w
  7272  0A95  1903               	skipnz
  7273  0A96  2ACA               	goto	l2661
  7274  0A97  01B7               	clrf	___llmod@counter
  7275  0A98  0AB7               	incf	___llmod@counter,f
  7276  0A99                     l2651:	
  7277  0A99  1BB1               	btfsc	___llmod@divisor+3,7
  7278  0A9A  2AA7               	goto	l2653
  7279  0A9B  3001               	movlw	1
  7280  0A9C                     u2505:	
  7281  0A9C  35AE               	lslf	___llmod@divisor,f
  7282  0A9D  0DAF               	rlf	___llmod@divisor+1,f
  7283  0A9E  0DB0               	rlf	___llmod@divisor+2,f
  7284  0A9F  0DB1               	rlf	___llmod@divisor+3,f
  7285  0AA0  0B89               	decfsz	9,f
  7286  0AA1  2A9C               	goto	u2505
  7287  0AA2  3001               	movlw	1
  7288  0AA3  00B6               	movwf	??___llmod
  7289  0AA4  0836               	movf	??___llmod,w
  7290  0AA5  07B7               	addwf	___llmod@counter,f
  7291  0AA6  2A99               	goto	l2651
  7292  0AA7                     l2653:	
  7293  0AA7  0831               	movf	___llmod@divisor+3,w
  7294  0AA8  0235               	subwf	___llmod@dividend+3,w
  7295  0AA9  1D03               	skipz
  7296  0AAA  2AB5               	goto	u2525
  7297  0AAB  0830               	movf	___llmod@divisor+2,w
  7298  0AAC  0234               	subwf	___llmod@dividend+2,w
  7299  0AAD  1D03               	skipz
  7300  0AAE  2AB5               	goto	u2525
  7301  0AAF  082F               	movf	___llmod@divisor+1,w
  7302  0AB0  0233               	subwf	___llmod@dividend+1,w
  7303  0AB1  1D03               	skipz
  7304  0AB2  2AB5               	goto	u2525
  7305  0AB3  082E               	movf	___llmod@divisor,w
  7306  0AB4  0232               	subwf	___llmod@dividend,w
  7307  0AB5                     u2525:	
  7308  0AB5  1C03               	skipc
  7309  0AB6  2ABF               	goto	l2657
  7310  0AB7  082E               	movf	___llmod@divisor,w
  7311  0AB8  02B2               	subwf	___llmod@dividend,f
  7312  0AB9  082F               	movf	___llmod@divisor+1,w
  7313  0ABA  3BB3               	subwfb	___llmod@dividend+1,f
  7314  0ABB  0830               	movf	___llmod@divisor+2,w
  7315  0ABC  3BB4               	subwfb	___llmod@dividend+2,f
  7316  0ABD  0831               	movf	___llmod@divisor+3,w
  7317  0ABE  3BB5               	subwfb	___llmod@dividend+3,f
  7318  0ABF                     l2657:	
  7319  0ABF  3001               	movlw	1
  7320  0AC0                     u2535:	
  7321  0AC0  36B1               	lsrf	___llmod@divisor+3,f
  7322  0AC1  0CB0               	rrf	___llmod@divisor+2,f
  7323  0AC2  0CAF               	rrf	___llmod@divisor+1,f
  7324  0AC3  0CAE               	rrf	___llmod@divisor,f
  7325  0AC4  0B89               	decfsz	9,f
  7326  0AC5  2AC0               	goto	u2535
  7327  0AC6  3001               	movlw	1
  7328  0AC7  02B7               	subwf	___llmod@counter,f
  7329  0AC8  1D03               	btfss	3,2
  7330  0AC9  2AA7               	goto	l2653
  7331  0ACA                     l2661:	
  7332  0ACA  0835               	movf	___llmod@dividend+3,w
  7333  0ACB  00B1               	movwf	?___llmod+3
  7334  0ACC  0834               	movf	___llmod@dividend+2,w
  7335  0ACD  00B0               	movwf	?___llmod+2
  7336  0ACE  0833               	movf	___llmod@dividend+1,w
  7337  0ACF  00AF               	movwf	?___llmod+1
  7338  0AD0  0832               	movf	___llmod@dividend,w
  7339  0AD1  00AE               	movwf	?___llmod
  7340  0AD2  0008               	return
  7341  0AD3                     __end_of___llmod:	
  7342                           
  7343                           	psect	text26
  7344  0BF1                     __ptext26:	
  7345 ;; *************** function ___lldiv *****************
  7346 ;; Defined at:
  7347 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7348 ;; Parameters:    Size  Location     Type
  7349 ;;  divisor         4    0[BANK0 ] unsigned long 
  7350 ;;  dividend        4    4[BANK0 ] unsigned long 
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;  quotient        4    9[BANK0 ] unsigned long 
  7353 ;;  counter         1   13[BANK0 ] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  4    0[BANK0 ] unsigned long 
  7356 ;; Registers used:
  7357 ;;		wreg, status,2, status,0
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7363 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7364 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7366 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7367 ;;Total ram usage:       14 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    7
  7370 ;; This function calls:
  7371 ;;		Nothing
  7372 ;; This function is called by:
  7373 ;;		_sprintf
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           
  7378                           ;psect for function ___lldiv
  7379  0BF1                     ___lldiv:	
  7380                           
  7381                           ;incstack = 0
  7382                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7383  0BF1  3000               	movlw	0
  7384  0BF2  0020               	movlb	0	; select bank0
  7385  0BF3  00AC               	movwf	___lldiv@quotient+3
  7386  0BF4  3000               	movlw	0
  7387  0BF5  00AB               	movwf	___lldiv@quotient+2
  7388  0BF6  3000               	movlw	0
  7389  0BF7  00AA               	movwf	___lldiv@quotient+1
  7390  0BF8  3000               	movlw	0
  7391  0BF9  00A9               	movwf	___lldiv@quotient
  7392  0BFA  0823               	movf	___lldiv@divisor+3,w
  7393  0BFB  0422               	iorwf	___lldiv@divisor+2,w
  7394  0BFC  0421               	iorwf	___lldiv@divisor+1,w
  7395  0BFD  0420               	iorwf	___lldiv@divisor,w
  7396  0BFE  1903               	skipnz
  7397  0BFF  2C3B               	goto	l2571
  7398  0C00  01AD               	clrf	___lldiv@counter
  7399  0C01  0AAD               	incf	___lldiv@counter,f
  7400  0C02                     l2557:	
  7401  0C02  1BA3               	btfsc	___lldiv@divisor+3,7
  7402  0C03  2C10               	goto	l2559
  7403  0C04  3001               	movlw	1
  7404  0C05                     u2205:	
  7405  0C05  35A0               	lslf	___lldiv@divisor,f
  7406  0C06  0DA1               	rlf	___lldiv@divisor+1,f
  7407  0C07  0DA2               	rlf	___lldiv@divisor+2,f
  7408  0C08  0DA3               	rlf	___lldiv@divisor+3,f
  7409  0C09  0B89               	decfsz	9,f
  7410  0C0A  2C05               	goto	u2205
  7411  0C0B  3001               	movlw	1
  7412  0C0C  00A8               	movwf	??___lldiv
  7413  0C0D  0828               	movf	??___lldiv,w
  7414  0C0E  07AD               	addwf	___lldiv@counter,f
  7415  0C0F  2C02               	goto	l2557
  7416  0C10                     l2559:	
  7417  0C10  3001               	movlw	1
  7418  0C11                     u2225:	
  7419  0C11  35A9               	lslf	___lldiv@quotient,f
  7420  0C12  0DAA               	rlf	___lldiv@quotient+1,f
  7421  0C13  0DAB               	rlf	___lldiv@quotient+2,f
  7422  0C14  0DAC               	rlf	___lldiv@quotient+3,f
  7423  0C15  0B89               	decfsz	9,f
  7424  0C16  2C11               	goto	u2225
  7425  0C17  0823               	movf	___lldiv@divisor+3,w
  7426  0C18  0227               	subwf	___lldiv@dividend+3,w
  7427  0C19  1D03               	skipz
  7428  0C1A  2C25               	goto	u2235
  7429  0C1B  0822               	movf	___lldiv@divisor+2,w
  7430  0C1C  0226               	subwf	___lldiv@dividend+2,w
  7431  0C1D  1D03               	skipz
  7432  0C1E  2C25               	goto	u2235
  7433  0C1F  0821               	movf	___lldiv@divisor+1,w
  7434  0C20  0225               	subwf	___lldiv@dividend+1,w
  7435  0C21  1D03               	skipz
  7436  0C22  2C25               	goto	u2235
  7437  0C23  0820               	movf	___lldiv@divisor,w
  7438  0C24  0224               	subwf	___lldiv@dividend,w
  7439  0C25                     u2235:	
  7440  0C25  1C03               	skipc
  7441  0C26  2C30               	goto	l2567
  7442  0C27  0820               	movf	___lldiv@divisor,w
  7443  0C28  02A4               	subwf	___lldiv@dividend,f
  7444  0C29  0821               	movf	___lldiv@divisor+1,w
  7445  0C2A  3BA5               	subwfb	___lldiv@dividend+1,f
  7446  0C2B  0822               	movf	___lldiv@divisor+2,w
  7447  0C2C  3BA6               	subwfb	___lldiv@dividend+2,f
  7448  0C2D  0823               	movf	___lldiv@divisor+3,w
  7449  0C2E  3BA7               	subwfb	___lldiv@dividend+3,f
  7450  0C2F  1429               	bsf	___lldiv@quotient,0
  7451  0C30                     l2567:	
  7452  0C30  3001               	movlw	1
  7453  0C31                     u2245:	
  7454  0C31  36A3               	lsrf	___lldiv@divisor+3,f
  7455  0C32  0CA2               	rrf	___lldiv@divisor+2,f
  7456  0C33  0CA1               	rrf	___lldiv@divisor+1,f
  7457  0C34  0CA0               	rrf	___lldiv@divisor,f
  7458  0C35  0B89               	decfsz	9,f
  7459  0C36  2C31               	goto	u2245
  7460  0C37  3001               	movlw	1
  7461  0C38  02AD               	subwf	___lldiv@counter,f
  7462  0C39  1D03               	btfss	3,2
  7463  0C3A  2C10               	goto	l2559
  7464  0C3B                     l2571:	
  7465  0C3B  082C               	movf	___lldiv@quotient+3,w
  7466  0C3C  00A3               	movwf	?___lldiv+3
  7467  0C3D  082B               	movf	___lldiv@quotient+2,w
  7468  0C3E  00A2               	movwf	?___lldiv+2
  7469  0C3F  082A               	movf	___lldiv@quotient+1,w
  7470  0C40  00A1               	movwf	?___lldiv+1
  7471  0C41  0829               	movf	___lldiv@quotient,w
  7472  0C42  00A0               	movwf	?___lldiv
  7473  0C43  0008               	return
  7474  0C44                     __end_of___lldiv:	
  7475                           
  7476                           	psect	text27
  7477  087C                     __ptext27:	
  7478 ;; *************** function ___lltoft *****************
  7479 ;; Defined at:
  7480 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;  c               4    8[BANK0 ] unsigned long 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;  exp             1   13[BANK0 ] unsigned char 
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  3    8[BANK0 ] float 
  7487 ;; Registers used:
  7488 ;;		wreg, status,2, status,0, pclath, cstack
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7494 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7498 ;;Total ram usage:        6 bytes
  7499 ;; Hardware stack levels used:    1
  7500 ;; Hardware stack levels required when called:    8
  7501 ;; This function calls:
  7502 ;;		___ftpack
  7503 ;; This function is called by:
  7504 ;;		_ftoa
  7505 ;; This function uses a non-reentrant model
  7506 ;;
  7507                           
  7508                           
  7509                           ;psect for function ___lltoft
  7510  087C                     ___lltoft:	
  7511                           
  7512                           ;incstack = 0
  7513                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  7514  087C  308E               	movlw	142
  7515  087D  0020               	movlb	0	; select bank0
  7516  087E  00AC               	movwf	??___lltoft
  7517  087F  082C               	movf	??___lltoft,w
  7518  0880  00AD               	movwf	___lltoft@exp
  7519  0881                     l2917:	
  7520  0881  30FF               	movlw	255
  7521  0882  052B               	andwf	___lltoft@c+3,w
  7522  0883  1903               	btfsc	3,2
  7523  0884  2891               	goto	l2919
  7524  0885  3001               	movlw	1
  7525  0886                     u3005:	
  7526  0886  36AB               	lsrf	___lltoft@c+3,f
  7527  0887  0CAA               	rrf	___lltoft@c+2,f
  7528  0888  0CA9               	rrf	___lltoft@c+1,f
  7529  0889  0CA8               	rrf	___lltoft@c,f
  7530  088A  0B89               	decfsz	9,f
  7531  088B  2886               	goto	u3005
  7532  088C  3001               	movlw	1
  7533  088D  00AC               	movwf	??___lltoft
  7534  088E  082C               	movf	??___lltoft,w
  7535  088F  07AD               	addwf	___lltoft@exp,f
  7536  0890  2881               	goto	l2917
  7537  0891                     l2919:	
  7538  0891  0828               	movf	___lltoft@c,w
  7539  0892  00A0               	movwf	___ftpack@arg
  7540  0893  0829               	movf	___lltoft@c+1,w
  7541  0894  00A1               	movwf	___ftpack@arg+1
  7542  0895  082A               	movf	___lltoft@c+2,w
  7543  0896  00A2               	movwf	___ftpack@arg+2
  7544  0897  082D               	movf	___lltoft@exp,w
  7545  0898  00AC               	movwf	??___lltoft
  7546  0899  082C               	movf	??___lltoft,w
  7547  089A  00A3               	movwf	___ftpack@exp
  7548  089B  01A4               	clrf	___ftpack@sign
  7549  089C  318C  2444         	fcall	___ftpack
  7550  089E  0020               	movlb	0	; select bank0
  7551  089F  0820               	movf	?___ftpack,w
  7552  08A0  00A8               	movwf	?___lltoft
  7553  08A1  0821               	movf	?___ftpack+1,w
  7554  08A2  00A9               	movwf	?___lltoft+1
  7555  08A3  0822               	movf	?___ftpack+2,w
  7556  08A4  00AA               	movwf	?___lltoft+2
  7557  08A5  0008               	return
  7558  08A6                     __end_of___lltoft:	
  7559                           
  7560                           	psect	text28
  7561  0CA9                     __ptext28:	
  7562 ;; *************** function ___fttol *****************
  7563 ;; Defined at:
  7564 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  7565 ;; Parameters:    Size  Location     Type
  7566 ;;  f1              3   71[BANK0 ] float 
  7567 ;; Auto vars:     Size  Location     Type
  7568 ;;  lval            4    1[BANK1 ] unsigned long 
  7569 ;;  exp1            1    5[BANK1 ] unsigned char 
  7570 ;;  sign1           1    0[BANK1 ] unsigned char 
  7571 ;; Return value:  Size  Location     Type
  7572 ;;                  4   71[BANK0 ] long 
  7573 ;; Registers used:
  7574 ;;		wreg, status,2, status,0
  7575 ;; Tracked objects:
  7576 ;;		On entry : 0/0
  7577 ;;		On exit  : 0/0
  7578 ;;		Unchanged: 0/0
  7579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7580 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7581 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7582 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;Total ram usage:       14 bytes
  7585 ;; Hardware stack levels used:    1
  7586 ;; Hardware stack levels required when called:    7
  7587 ;; This function calls:
  7588 ;;		Nothing
  7589 ;; This function is called by:
  7590 ;;		_ftoa
  7591 ;; This function uses a non-reentrant model
  7592 ;;
  7593                           
  7594                           
  7595                           ;psect for function ___fttol
  7596  0CA9                     ___fttol:	
  7597                           
  7598                           ;incstack = 0
  7599                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7600  0CA9  0020               	movlb	0	; select bank0
  7601  0CAA  0867               	movf	___fttol@f1,w
  7602  0CAB  00EB               	movwf	??___fttol
  7603  0CAC  0868               	movf	___fttol@f1+1,w
  7604  0CAD  00EC               	movwf	??___fttol+1
  7605  0CAE  0869               	movf	___fttol@f1+2,w
  7606  0CAF  00ED               	movwf	??___fttol+2
  7607  0CB0  1003               	clrc
  7608  0CB1  0D6C               	rlf	??___fttol+1,w
  7609  0CB2  0D6D               	rlf	??___fttol+2,w
  7610  0CB3  00EE               	movwf	??___fttol+3
  7611  0CB4  086E               	movf	??___fttol+3,w
  7612  0CB5  0021               	movlb	1	; select bank1
  7613  0CB6  00A5               	movwf	___fttol@exp1^(0+128)
  7614  0CB7  0825               	movf	___fttol@exp1^(0+128),w
  7615  0CB8  1D03               	btfss	3,2
  7616  0CB9  2CC4               	goto	l2877
  7617  0CBA  3000               	movlw	0
  7618  0CBB  0020               	movlb	0	; select bank0
  7619  0CBC  00EA               	movwf	?___fttol+3
  7620  0CBD  3000               	movlw	0
  7621  0CBE  00E9               	movwf	?___fttol+2
  7622  0CBF  3000               	movlw	0
  7623  0CC0  00E8               	movwf	?___fttol+1
  7624  0CC1  3000               	movlw	0
  7625  0CC2  00E7               	movwf	?___fttol
  7626  0CC3  0008               	return
  7627  0CC4                     l2877:	
  7628  0CC4  0020               	movlb	0	; select bank0
  7629  0CC5  0867               	movf	___fttol@f1,w
  7630  0CC6  00EB               	movwf	??___fttol
  7631  0CC7  0868               	movf	___fttol@f1+1,w
  7632  0CC8  00EC               	movwf	??___fttol+1
  7633  0CC9  0869               	movf	___fttol@f1+2,w
  7634  0CCA  00ED               	movwf	??___fttol+2
  7635  0CCB  3017               	movlw	23
  7636  0CCC                     u2915:	
  7637  0CCC  36ED               	lsrf	??___fttol+2,f
  7638  0CCD  0CEC               	rrf	??___fttol+1,f
  7639  0CCE  0CEB               	rrf	??___fttol,f
  7640  0CCF  0B89               	decfsz	9,f
  7641  0CD0  2CCC               	goto	u2915
  7642  0CD1  086B               	movf	??___fttol,w
  7643  0CD2  00EE               	movwf	??___fttol+3
  7644  0CD3  086E               	movf	??___fttol+3,w
  7645  0CD4  0021               	movlb	1	; select bank1
  7646  0CD5  00A0               	movwf	___fttol@sign1^(0+128)
  7647  0CD6  0020               	movlb	0	; select bank0
  7648  0CD7  17E8               	bsf	___fttol@f1+1,7
  7649  0CD8  30FF               	movlw	255
  7650  0CD9  05E7               	andwf	___fttol@f1,f
  7651  0CDA  30FF               	movlw	255
  7652  0CDB  05E8               	andwf	___fttol@f1+1,f
  7653  0CDC  3000               	movlw	0
  7654  0CDD  05E9               	andwf	___fttol@f1+2,f
  7655  0CDE  0867               	movf	___fttol@f1,w
  7656  0CDF  0021               	movlb	1	; select bank1
  7657  0CE0  00A1               	movwf	___fttol@lval^(0+128)
  7658  0CE1  0020               	movlb	0	; select bank0
  7659  0CE2  0868               	movf	___fttol@f1+1,w
  7660  0CE3  0021               	movlb	1	; select bank1
  7661  0CE4  00A2               	movwf	(___fttol@lval^(0+128)+1)
  7662  0CE5  0020               	movlb	0	; select bank0
  7663  0CE6  0869               	movf	___fttol@f1+2,w
  7664  0CE7  0021               	movlb	1	; select bank1
  7665  0CE8  00A3               	movwf	(___fttol@lval^(0+128)+2)
  7666  0CE9  01A4               	clrf	(___fttol@lval^(0+128)+3)
  7667  0CEA  308E               	movlw	142
  7668  0CEB  02A5               	subwf	___fttol@exp1^(0+128),f
  7669  0CEC  1FA5               	btfss	___fttol@exp1^(0+128),7
  7670  0CED  2D0E               	goto	l2897
  7671  0CEE  0825               	movf	___fttol@exp1^(0+128),w
  7672  0CEF  3A80               	xorlw	128
  7673  0CF0  3E8F               	addlw	143
  7674  0CF1  1803               	skipnc
  7675  0CF2  2CFD               	goto	l2895
  7676  0CF3  3000               	movlw	0
  7677  0CF4  0020               	movlb	0	; select bank0
  7678  0CF5  00EA               	movwf	?___fttol+3
  7679  0CF6  3000               	movlw	0
  7680  0CF7  00E9               	movwf	?___fttol+2
  7681  0CF8  3000               	movlw	0
  7682  0CF9  00E8               	movwf	?___fttol+1
  7683  0CFA  3000               	movlw	0
  7684  0CFB  00E7               	movwf	?___fttol
  7685  0CFC  0008               	return
  7686  0CFD                     l2895:	
  7687  0CFD  3001               	movlw	1
  7688  0CFE                     u2945:	
  7689  0CFE  0021               	movlb	1	; select bank1
  7690  0CFF  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  7691  0D00  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  7692  0D01  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  7693  0D02  0CA1               	rrf	___fttol@lval^(0+128),f
  7694  0D03  0B89               	decfsz	9,f
  7695  0D04  2CFE               	goto	u2945
  7696  0D05  3001               	movlw	1
  7697  0D06  0020               	movlb	0	; select bank0
  7698  0D07  00EB               	movwf	??___fttol
  7699  0D08  086B               	movf	??___fttol,w
  7700  0D09  0021               	movlb	1	; select bank1
  7701  0D0A  07A5               	addwf	___fttol@exp1^(0+128),f
  7702  0D0B  1903               	btfsc	3,2
  7703  0D0C  2D2A               	goto	l2905
  7704  0D0D  2CFD               	goto	l2895
  7705  0D0E                     l2897:	
  7706  0D0E  3018               	movlw	24
  7707  0D0F  0225               	subwf	___fttol@exp1^(0+128),w
  7708  0D10  1C03               	skipc
  7709  0D11  2D26               	goto	l779
  7710  0D12  3000               	movlw	0
  7711  0D13  0020               	movlb	0	; select bank0
  7712  0D14  00EA               	movwf	?___fttol+3
  7713  0D15  3000               	movlw	0
  7714  0D16  00E9               	movwf	?___fttol+2
  7715  0D17  3000               	movlw	0
  7716  0D18  00E8               	movwf	?___fttol+1
  7717  0D19  3000               	movlw	0
  7718  0D1A  00E7               	movwf	?___fttol
  7719  0D1B  0008               	return
  7720  0D1C                     l2903:	
  7721  0D1C  3001               	movlw	1
  7722  0D1D                     u2975:	
  7723  0D1D  0021               	movlb	1	; select bank1
  7724  0D1E  35A1               	lslf	___fttol@lval^(0+128),f
  7725  0D1F  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  7726  0D20  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  7727  0D21  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  7728  0D22  0B89               	decfsz	9,f
  7729  0D23  2D1D               	goto	u2975
  7730  0D24  3001               	movlw	1
  7731  0D25  02A5               	subwf	___fttol@exp1^(0+128),f
  7732  0D26                     l779:	
  7733  0D26  0021               	movlb	1	; select bank1
  7734  0D27  0825               	movf	___fttol@exp1^(0+128),w
  7735  0D28  1D03               	btfss	3,2
  7736  0D29  2D1C               	goto	l2903
  7737  0D2A                     l2905:	
  7738  0D2A  0820               	movf	___fttol@sign1^(0+128),w
  7739  0D2B  1903               	btfsc	3,2
  7740  0D2C  2D38               	goto	l2909
  7741  0D2D  09A1               	comf	___fttol@lval^(0+128),f
  7742  0D2E  09A2               	comf	(___fttol@lval+1)^(0+128),f
  7743  0D2F  09A3               	comf	(___fttol@lval+2)^(0+128),f
  7744  0D30  09A4               	comf	(___fttol@lval+3)^(0+128),f
  7745  0D31  0AA1               	incf	___fttol@lval^(0+128),f
  7746  0D32  1903               	skipnz
  7747  0D33  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  7748  0D34  1903               	skipnz
  7749  0D35  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  7750  0D36  1903               	skipnz
  7751  0D37  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  7752  0D38                     l2909:	
  7753  0D38  0824               	movf	(___fttol@lval+3)^(0+128),w
  7754  0D39  0020               	movlb	0	; select bank0
  7755  0D3A  00EA               	movwf	?___fttol+3
  7756  0D3B  0021               	movlb	1	; select bank1
  7757  0D3C  0823               	movf	(___fttol@lval+2)^(0+128),w
  7758  0D3D  0020               	movlb	0	; select bank0
  7759  0D3E  00E9               	movwf	?___fttol+2
  7760  0D3F  0021               	movlb	1	; select bank1
  7761  0D40  0822               	movf	(___fttol@lval+1)^(0+128),w
  7762  0D41  0020               	movlb	0	; select bank0
  7763  0D42  00E8               	movwf	?___fttol+1
  7764  0D43  0021               	movlb	1	; select bank1
  7765  0D44  0821               	movf	___fttol@lval^(0+128),w
  7766  0D45  0020               	movlb	0	; select bank0
  7767  0D46  00E7               	movwf	?___fttol
  7768  0D47  0008               	return
  7769  0D48                     __end_of___fttol:	
  7770                           
  7771                           	psect	text29
  7772  1760                     __ptext29:	
  7773 ;; *************** function ___ftsub *****************
  7774 ;; Defined at:
  7775 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  7776 ;; Parameters:    Size  Location     Type
  7777 ;;  f2              3   27[BANK0 ] float 
  7778 ;;  f1              3   30[BANK0 ] float 
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;		None
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  3   27[BANK0 ] float 
  7783 ;; Registers used:
  7784 ;;		wreg, status,2, status,0, pclath, cstack
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7790 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;Total ram usage:        6 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    9
  7797 ;; This function calls:
  7798 ;;		___ftadd
  7799 ;; This function is called by:
  7800 ;;		_ftoa
  7801 ;; This function uses a non-reentrant model
  7802 ;;
  7803                           
  7804                           
  7805                           ;psect for function ___ftsub
  7806  1760                     ___ftsub:	
  7807                           
  7808                           ;incstack = 0
  7809                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7810  1760  0020               	movlb	0	; select bank0
  7811  1761  083D               	movf	___ftsub@f2+2,w
  7812  1762  043C               	iorwf	___ftsub@f2+1,w
  7813  1763  043B               	iorwf	___ftsub@f2,w
  7814  1764  1903               	skipnz
  7815  1765  2F68               	goto	l2867
  7816  1766  3080               	movlw	128
  7817  1767  06BD               	xorwf	___ftsub@f2+2,f
  7818  1768                     l2867:	
  7819  1768  083E               	movf	___ftsub@f1,w
  7820  1769  00AE               	movwf	___ftadd@f1
  7821  176A  083F               	movf	___ftsub@f1+1,w
  7822  176B  00AF               	movwf	___ftadd@f1+1
  7823  176C  0840               	movf	___ftsub@f1+2,w
  7824  176D  00B0               	movwf	___ftadd@f1+2
  7825  176E  083B               	movf	___ftsub@f2,w
  7826  176F  00B1               	movwf	___ftadd@f2
  7827  1770  083C               	movf	___ftsub@f2+1,w
  7828  1771  00B2               	movwf	___ftadd@f2+1
  7829  1772  083D               	movf	___ftsub@f2+2,w
  7830  1773  00B3               	movwf	___ftadd@f2+2
  7831  1774  3184  24B2         	fcall	___ftadd
  7832  1776  0020               	movlb	0	; select bank0
  7833  1777  082E               	movf	?___ftadd,w
  7834  1778  00BB               	movwf	?___ftsub
  7835  1779  082F               	movf	?___ftadd+1,w
  7836  177A  00BC               	movwf	?___ftsub+1
  7837  177B  0830               	movf	?___ftadd+2,w
  7838  177C  00BD               	movwf	?___ftsub+2
  7839  177D  0008               	return
  7840  177E                     __end_of___ftsub:	
  7841                           
  7842                           	psect	text30
  7843  0801                     __ptext30:	
  7844 ;; *************** function ___ftneg *****************
  7845 ;; Defined at:
  7846 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  7847 ;; Parameters:    Size  Location     Type
  7848 ;;  f1              3   55[BANK0 ] float 
  7849 ;; Auto vars:     Size  Location     Type
  7850 ;;		None
  7851 ;; Return value:  Size  Location     Type
  7852 ;;                  3   55[BANK0 ] float 
  7853 ;; Registers used:
  7854 ;;		wreg
  7855 ;; Tracked objects:
  7856 ;;		On entry : 0/0
  7857 ;;		On exit  : 0/0
  7858 ;;		Unchanged: 0/0
  7859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7860 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7863 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7864 ;;Total ram usage:        3 bytes
  7865 ;; Hardware stack levels used:    1
  7866 ;; Hardware stack levels required when called:    7
  7867 ;; This function calls:
  7868 ;;		Nothing
  7869 ;; This function is called by:
  7870 ;;		_loop
  7871 ;;		_ftoa
  7872 ;; This function uses a non-reentrant model
  7873 ;;
  7874                           
  7875                           
  7876                           ;psect for function ___ftneg
  7877  0801                     ___ftneg:	
  7878                           
  7879                           ;incstack = 0
  7880                           ; Regs used in ___ftneg: [wreg]
  7881  0801  0020               	movlb	0	; select bank0
  7882  0802  0859               	movf	___ftneg@f1+2,w
  7883  0803  0458               	iorwf	___ftneg@f1+1,w
  7884  0804  0457               	iorwf	___ftneg@f1,w
  7885  0805  1903               	skipnz
  7886  0806  0008               	return
  7887  0807  3080               	movlw	128
  7888  0808  06D9               	xorwf	___ftneg@f1+2,f
  7889  0809  0008               	return
  7890  080A                     __end_of___ftneg:	
  7891                           
  7892                           	psect	text31
  7893  0E97                     __ptext31:	
  7894 ;; *************** function ___ftmul *****************
  7895 ;; Defined at:
  7896 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  f1              3   55[BANK0 ] float 
  7899 ;;  f2              3   58[BANK0 ] float 
  7900 ;; Auto vars:     Size  Location     Type
  7901 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  7902 ;;  sign            1   70[BANK0 ] unsigned char 
  7903 ;;  cntr            1   69[BANK0 ] unsigned char 
  7904 ;;  exp             1   65[BANK0 ] unsigned char 
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  3   55[BANK0 ] float 
  7907 ;; Registers used:
  7908 ;;		wreg, status,2, status,0, pclath, cstack
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7914 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;Total ram usage:       16 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    8
  7921 ;; This function calls:
  7922 ;;		___ftpack
  7923 ;; This function is called by:
  7924 ;;		_loop
  7925 ;;		_ftoa
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           
  7930                           ;psect for function ___ftmul
  7931  0E97                     ___ftmul:	
  7932                           
  7933                           ;incstack = 0
  7934                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7935  0E97  0020               	movlb	0	; select bank0
  7936  0E98  0857               	movf	___ftmul@f1,w
  7937  0E99  00DD               	movwf	??___ftmul
  7938  0E9A  0858               	movf	___ftmul@f1+1,w
  7939  0E9B  00DE               	movwf	??___ftmul+1
  7940  0E9C  0859               	movf	___ftmul@f1+2,w
  7941  0E9D  00DF               	movwf	??___ftmul+2
  7942  0E9E  1003               	clrc
  7943  0E9F  0D5E               	rlf	??___ftmul+1,w
  7944  0EA0  0D5F               	rlf	??___ftmul+2,w
  7945  0EA1  00E0               	movwf	??___ftmul+3
  7946  0EA2  0860               	movf	??___ftmul+3,w
  7947  0EA3  00E1               	movwf	___ftmul@exp
  7948  0EA4  0861               	movf	___ftmul@exp,w
  7949  0EA5  1D03               	btfss	3,2
  7950  0EA6  2EAE               	goto	l2811
  7951  0EA7  3000               	movlw	0
  7952  0EA8  00D7               	movwf	?___ftmul
  7953  0EA9  3000               	movlw	0
  7954  0EAA  00D8               	movwf	?___ftmul+1
  7955  0EAB  3000               	movlw	0
  7956  0EAC  00D9               	movwf	?___ftmul+2
  7957  0EAD  0008               	return
  7958  0EAE                     l2811:	
  7959  0EAE  085A               	movf	___ftmul@f2,w
  7960  0EAF  00DD               	movwf	??___ftmul
  7961  0EB0  085B               	movf	___ftmul@f2+1,w
  7962  0EB1  00DE               	movwf	??___ftmul+1
  7963  0EB2  085C               	movf	___ftmul@f2+2,w
  7964  0EB3  00DF               	movwf	??___ftmul+2
  7965  0EB4  1003               	clrc
  7966  0EB5  0D5E               	rlf	??___ftmul+1,w
  7967  0EB6  0D5F               	rlf	??___ftmul+2,w
  7968  0EB7  00E0               	movwf	??___ftmul+3
  7969  0EB8  0860               	movf	??___ftmul+3,w
  7970  0EB9  00E6               	movwf	___ftmul@sign
  7971  0EBA  0866               	movf	___ftmul@sign,w
  7972  0EBB  1D03               	btfss	3,2
  7973  0EBC  2EC4               	goto	l2817
  7974  0EBD  3000               	movlw	0
  7975  0EBE  00D7               	movwf	?___ftmul
  7976  0EBF  3000               	movlw	0
  7977  0EC0  00D8               	movwf	?___ftmul+1
  7978  0EC1  3000               	movlw	0
  7979  0EC2  00D9               	movwf	?___ftmul+2
  7980  0EC3  0008               	return
  7981  0EC4                     l2817:	
  7982  0EC4  0866               	movf	___ftmul@sign,w
  7983  0EC5  3E7B               	addlw	123
  7984  0EC6  00DD               	movwf	??___ftmul
  7985  0EC7  085D               	movf	??___ftmul,w
  7986  0EC8  07E1               	addwf	___ftmul@exp,f
  7987  0EC9  0857               	movf	___ftmul@f1,w
  7988  0ECA  00DD               	movwf	??___ftmul
  7989  0ECB  0858               	movf	___ftmul@f1+1,w
  7990  0ECC  00DE               	movwf	??___ftmul+1
  7991  0ECD  0859               	movf	___ftmul@f1+2,w
  7992  0ECE  00DF               	movwf	??___ftmul+2
  7993  0ECF  3010               	movlw	16
  7994  0ED0                     u2785:	
  7995  0ED0  36DF               	lsrf	??___ftmul+2,f
  7996  0ED1  0CDE               	rrf	??___ftmul+1,f
  7997  0ED2  0CDD               	rrf	??___ftmul,f
  7998  0ED3  0B89               	decfsz	9,f
  7999  0ED4  2ED0               	goto	u2785
  8000  0ED5  085D               	movf	??___ftmul,w
  8001  0ED6  00E0               	movwf	??___ftmul+3
  8002  0ED7  0860               	movf	??___ftmul+3,w
  8003  0ED8  00E6               	movwf	___ftmul@sign
  8004  0ED9  085A               	movf	___ftmul@f2,w
  8005  0EDA  00DD               	movwf	??___ftmul
  8006  0EDB  085B               	movf	___ftmul@f2+1,w
  8007  0EDC  00DE               	movwf	??___ftmul+1
  8008  0EDD  085C               	movf	___ftmul@f2+2,w
  8009  0EDE  00DF               	movwf	??___ftmul+2
  8010  0EDF  3010               	movlw	16
  8011  0EE0                     u2795:	
  8012  0EE0  36DF               	lsrf	??___ftmul+2,f
  8013  0EE1  0CDE               	rrf	??___ftmul+1,f
  8014  0EE2  0CDD               	rrf	??___ftmul,f
  8015  0EE3  0B89               	decfsz	9,f
  8016  0EE4  2EE0               	goto	u2795
  8017  0EE5  085D               	movf	??___ftmul,w
  8018  0EE6  00E0               	movwf	??___ftmul+3
  8019  0EE7  0860               	movf	??___ftmul+3,w
  8020  0EE8  06E6               	xorwf	___ftmul@sign,f
  8021  0EE9  3080               	movlw	128
  8022  0EEA  00DD               	movwf	??___ftmul
  8023  0EEB  085D               	movf	??___ftmul,w
  8024  0EEC  05E6               	andwf	___ftmul@sign,f
  8025  0EED  17D8               	bsf	___ftmul@f1+1,7
  8026  0EEE  17DB               	bsf	___ftmul@f2+1,7
  8027  0EEF  30FF               	movlw	255
  8028  0EF0  05DA               	andwf	___ftmul@f2,f
  8029  0EF1  30FF               	movlw	255
  8030  0EF2  05DB               	andwf	___ftmul@f2+1,f
  8031  0EF3  3000               	movlw	0
  8032  0EF4  05DC               	andwf	___ftmul@f2+2,f
  8033  0EF5  3000               	movlw	0
  8034  0EF6  00E2               	movwf	___ftmul@f3_as_product
  8035  0EF7  3000               	movlw	0
  8036  0EF8  00E3               	movwf	___ftmul@f3_as_product+1
  8037  0EF9  3000               	movlw	0
  8038  0EFA  00E4               	movwf	___ftmul@f3_as_product+2
  8039  0EFB  3007               	movlw	7
  8040  0EFC  00DD               	movwf	??___ftmul
  8041  0EFD  085D               	movf	??___ftmul,w
  8042  0EFE  00E5               	movwf	___ftmul@cntr
  8043  0EFF                     l2829:	
  8044  0EFF  1C57               	btfss	___ftmul@f1,0
  8045  0F00  2F07               	goto	l2833
  8046  0F01  085A               	movf	___ftmul@f2,w
  8047  0F02  07E2               	addwf	___ftmul@f3_as_product,f
  8048  0F03  085B               	movf	___ftmul@f2+1,w
  8049  0F04  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8050  0F05  085C               	movf	___ftmul@f2+2,w
  8051  0F06  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8052  0F07                     l2833:	
  8053  0F07  3001               	movlw	1
  8054  0F08                     u2815:	
  8055  0F08  36D9               	lsrf	___ftmul@f1+2,f
  8056  0F09  0CD8               	rrf	___ftmul@f1+1,f
  8057  0F0A  0CD7               	rrf	___ftmul@f1,f
  8058  0F0B  0B89               	decfsz	9,f
  8059  0F0C  2F08               	goto	u2815
  8060  0F0D  3001               	movlw	1
  8061  0F0E                     u2825:	
  8062  0F0E  35DA               	lslf	___ftmul@f2,f
  8063  0F0F  0DDB               	rlf	___ftmul@f2+1,f
  8064  0F10  0DDC               	rlf	___ftmul@f2+2,f
  8065  0F11  0B89               	decfsz	9,f
  8066  0F12  2F0E               	goto	u2825
  8067  0F13  3001               	movlw	1
  8068  0F14  02E5               	subwf	___ftmul@cntr,f
  8069  0F15  1D03               	btfss	3,2
  8070  0F16  2EFF               	goto	l2829
  8071  0F17  3009               	movlw	9
  8072  0F18  00DD               	movwf	??___ftmul
  8073  0F19  085D               	movf	??___ftmul,w
  8074  0F1A  00E5               	movwf	___ftmul@cntr
  8075  0F1B                     l2841:	
  8076  0F1B  1C57               	btfss	___ftmul@f1,0
  8077  0F1C  2F23               	goto	l2845
  8078  0F1D  085A               	movf	___ftmul@f2,w
  8079  0F1E  07E2               	addwf	___ftmul@f3_as_product,f
  8080  0F1F  085B               	movf	___ftmul@f2+1,w
  8081  0F20  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  8082  0F21  085C               	movf	___ftmul@f2+2,w
  8083  0F22  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  8084  0F23                     l2845:	
  8085  0F23  3001               	movlw	1
  8086  0F24                     u2855:	
  8087  0F24  36D9               	lsrf	___ftmul@f1+2,f
  8088  0F25  0CD8               	rrf	___ftmul@f1+1,f
  8089  0F26  0CD7               	rrf	___ftmul@f1,f
  8090  0F27  0B89               	decfsz	9,f
  8091  0F28  2F24               	goto	u2855
  8092  0F29  3001               	movlw	1
  8093  0F2A                     u2865:	
  8094  0F2A  36E4               	lsrf	___ftmul@f3_as_product+2,f
  8095  0F2B  0CE3               	rrf	___ftmul@f3_as_product+1,f
  8096  0F2C  0CE2               	rrf	___ftmul@f3_as_product,f
  8097  0F2D  0B89               	decfsz	9,f
  8098  0F2E  2F2A               	goto	u2865
  8099  0F2F  3001               	movlw	1
  8100  0F30  02E5               	subwf	___ftmul@cntr,f
  8101  0F31  1D03               	btfss	3,2
  8102  0F32  2F1B               	goto	l2841
  8103  0F33  0862               	movf	___ftmul@f3_as_product,w
  8104  0F34  00A0               	movwf	___ftpack@arg
  8105  0F35  0863               	movf	___ftmul@f3_as_product+1,w
  8106  0F36  00A1               	movwf	___ftpack@arg+1
  8107  0F37  0864               	movf	___ftmul@f3_as_product+2,w
  8108  0F38  00A2               	movwf	___ftpack@arg+2
  8109  0F39  0861               	movf	___ftmul@exp,w
  8110  0F3A  00DD               	movwf	??___ftmul
  8111  0F3B  085D               	movf	??___ftmul,w
  8112  0F3C  00A3               	movwf	___ftpack@exp
  8113  0F3D  0866               	movf	___ftmul@sign,w
  8114  0F3E  00DE               	movwf	??___ftmul+1
  8115  0F3F  085E               	movf	??___ftmul+1,w
  8116  0F40  00A4               	movwf	___ftpack@sign
  8117  0F41  318C  2444         	fcall	___ftpack
  8118  0F43  0020               	movlb	0	; select bank0
  8119  0F44  0820               	movf	?___ftpack,w
  8120  0F45  00D7               	movwf	?___ftmul
  8121  0F46  0821               	movf	?___ftpack+1,w
  8122  0F47  00D8               	movwf	?___ftmul+1
  8123  0F48  0822               	movf	?___ftpack+2,w
  8124  0F49  00D9               	movwf	?___ftmul+2
  8125  0F4A  0008               	return
  8126  0F4B                     __end_of___ftmul:	
  8127                           
  8128                           	psect	text32
  8129  09D8                     __ptext32:	
  8130 ;; *************** function ___ftge *****************
  8131 ;; Defined at:
  8132 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8133 ;; Parameters:    Size  Location     Type
  8134 ;;  ff1             3    0[BANK0 ] float 
  8135 ;;  ff2             3    3[BANK0 ] float 
  8136 ;; Auto vars:     Size  Location     Type
  8137 ;;		None
  8138 ;; Return value:  Size  Location     Type
  8139 ;;		None               void
  8140 ;; Registers used:
  8141 ;;		wreg, status,2, status,0
  8142 ;; Tracked objects:
  8143 ;;		On entry : 0/0
  8144 ;;		On exit  : 0/0
  8145 ;;		Unchanged: 0/0
  8146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8147 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8149 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8150 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8151 ;;Total ram usage:        9 bytes
  8152 ;; Hardware stack levels used:    1
  8153 ;; Hardware stack levels required when called:    7
  8154 ;; This function calls:
  8155 ;;		Nothing
  8156 ;; This function is called by:
  8157 ;;		_ftoa
  8158 ;; This function uses a non-reentrant model
  8159 ;;
  8160                           
  8161                           
  8162                           ;psect for function ___ftge
  8163  09D8                     ___ftge:	
  8164                           
  8165                           ;incstack = 0
  8166                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8167  09D8  0020               	movlb	0	; select bank0
  8168  09D9  1FA2               	btfss	___ftge@ff1+2,7
  8169  09DA  29EF               	goto	l2789
  8170  09DB  0920               	comf	___ftge@ff1,w
  8171  09DC  00A6               	movwf	??___ftge
  8172  09DD  0921               	comf	___ftge@ff1+1,w
  8173  09DE  00A7               	movwf	??___ftge+1
  8174  09DF  0922               	comf	___ftge@ff1+2,w
  8175  09E0  00A8               	movwf	??___ftge+2
  8176  09E1  0AA6               	incf	??___ftge,f
  8177  09E2  1903               	skipnz
  8178  09E3  0AA7               	incf	??___ftge+1,f
  8179  09E4  1903               	skipnz
  8180  09E5  0AA8               	incf	??___ftge+2,f
  8181  09E6  3000               	movlw	0
  8182  09E7  0726               	addwf	??___ftge,w
  8183  09E8  00A0               	movwf	___ftge@ff1
  8184  09E9  3000               	movlw	0
  8185  09EA  3D27               	addwfc	??___ftge+1,w
  8186  09EB  00A1               	movwf	___ftge@ff1+1
  8187  09EC  3080               	movlw	128
  8188  09ED  3D28               	addwfc	??___ftge+2,w
  8189  09EE  00A2               	movwf	___ftge@ff1+2
  8190  09EF                     l2789:	
  8191  09EF  1FA5               	btfss	___ftge@ff2+2,7
  8192  09F0  2A05               	goto	l2793
  8193  09F1  0923               	comf	___ftge@ff2,w
  8194  09F2  00A6               	movwf	??___ftge
  8195  09F3  0924               	comf	___ftge@ff2+1,w
  8196  09F4  00A7               	movwf	??___ftge+1
  8197  09F5  0925               	comf	___ftge@ff2+2,w
  8198  09F6  00A8               	movwf	??___ftge+2
  8199  09F7  0AA6               	incf	??___ftge,f
  8200  09F8  1903               	skipnz
  8201  09F9  0AA7               	incf	??___ftge+1,f
  8202  09FA  1903               	skipnz
  8203  09FB  0AA8               	incf	??___ftge+2,f
  8204  09FC  3000               	movlw	0
  8205  09FD  0726               	addwf	??___ftge,w
  8206  09FE  00A3               	movwf	___ftge@ff2
  8207  09FF  3000               	movlw	0
  8208  0A00  3D27               	addwfc	??___ftge+1,w
  8209  0A01  00A4               	movwf	___ftge@ff2+1
  8210  0A02  3080               	movlw	128
  8211  0A03  3D28               	addwfc	??___ftge+2,w
  8212  0A04  00A5               	movwf	___ftge@ff2+2
  8213  0A05                     l2793:	
  8214  0A05  3080               	movlw	128
  8215  0A06  06A2               	xorwf	___ftge@ff1+2,f
  8216  0A07  3080               	movlw	128
  8217  0A08  06A5               	xorwf	___ftge@ff2+2,f
  8218  0A09  0825               	movf	___ftge@ff2+2,w
  8219  0A0A  0222               	subwf	___ftge@ff1+2,w
  8220  0A0B  1D03               	skipz
  8221  0A0C  0008               	return
  8222  0A0D  0824               	movf	___ftge@ff2+1,w
  8223  0A0E  0221               	subwf	___ftge@ff1+1,w
  8224  0A0F  1D03               	skipz
  8225  0A10  0008               	return
  8226  0A11  0823               	movf	___ftge@ff2,w
  8227  0A12  0220               	subwf	___ftge@ff1,w
  8228  0A13  0008               	return
  8229  0A14                     __end_of___ftge:	
  8230                           
  8231                           	psect	text33
  8232  0D48                     __ptext33:	
  8233 ;; *************** function _getADCValue *****************
  8234 ;; Defined at:
  8235 ;;		line 110 in file "main.c"
  8236 ;; Parameters:    Size  Location     Type
  8237 ;;  channel         1    wreg     unsigned char 
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;  channel         1   51[BANK0 ] unsigned char 
  8240 ;;  adcSum          3   52[BANK0 ] float 
  8241 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  8242 ;; Return value:  Size  Location     Type
  8243 ;;                  3   43[BANK0 ] float 
  8244 ;; Registers used:
  8245 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8246 ;; Tracked objects:
  8247 ;;		On entry : 0/0
  8248 ;;		On exit  : 0/0
  8249 ;;		Unchanged: 0/0
  8250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8251 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8254 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8255 ;;Total ram usage:       12 bytes
  8256 ;; Hardware stack levels used:    1
  8257 ;; Hardware stack levels required when called:    9
  8258 ;; This function calls:
  8259 ;;		___awtoft
  8260 ;;		___ftadd
  8261 ;;		___ftdiv
  8262 ;;		_doWDTSleep
  8263 ;; This function is called by:
  8264 ;;		_loop
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           
  8269                           ;psect for function _getADCValue
  8270  0D48                     _getADCValue:	
  8271                           
  8272                           ;incstack = 0
  8273                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8274                           ;getADCValue@channel stored from wreg
  8275  0D48  0020               	movlb	0	; select bank0
  8276  0D49  00D3               	movwf	getADCValue@channel
  8277                           
  8278                           ;main.c: 113: float adcSum = 0;
  8279  0D4A  3000               	movlw	0
  8280  0D4B  00D4               	movwf	getADCValue@adcSum
  8281  0D4C  3000               	movlw	0
  8282  0D4D  00D5               	movwf	getADCValue@adcSum+1
  8283  0D4E  3000               	movlw	0
  8284  0D4F  00D6               	movwf	getADCValue@adcSum+2
  8285                           
  8286                           ;main.c: 114: unsigned int adcLoop = 1000;
  8287  0D50  30E8               	movlw	232
  8288  0D51  00D1               	movwf	getADCValue@adcLoop
  8289  0D52  3003               	movlw	3
  8290  0D53  00D2               	movwf	getADCValue@adcLoop+1
  8291                           
  8292                           ;main.c: 116: ADCON0bits.CHS = channel;
  8293  0D54  0853               	movf	getADCValue@channel,w
  8294  0D55  00CE               	movwf	??_getADCValue
  8295  0D56  0DCE               	rlf	??_getADCValue,f
  8296  0D57  0DCE               	rlf	??_getADCValue,f
  8297  0D58  0021               	movlb	1	; select bank1
  8298  0D59  081D               	movf	29,w	;volatile
  8299  0D5A  0020               	movlb	0	; select bank0
  8300  0D5B  064E               	xorwf	??_getADCValue,w
  8301  0D5C  3903               	andlw	-253
  8302  0D5D  064E               	xorwf	??_getADCValue,w
  8303  0D5E  0021               	movlb	1	; select bank1
  8304  0D5F  009D               	movwf	29	;volatile
  8305                           
  8306                           ;main.c: 117: FVRCONbits.FVREN = 1;
  8307  0D60  0022               	movlb	2	; select bank2
  8308  0D61  1797               	bsf	23,7	;volatile
  8309                           
  8310                           ;main.c: 118: ADCON0bits.ADON = 1;
  8311  0D62  0021               	movlb	1	; select bank1
  8312  0D63  141D               	bsf	29,0	;volatile
  8313                           
  8314                           ;main.c: 120: doWDTSleep(0b00000);
  8315  0D64  3000               	movlw	0
  8316  0D65  3196  26AA  318D   	fcall	_doWDTSleep
  8317  0D68                     l3175:	
  8318                           ;main.c: 122: while (adcLoop--){
  8319                           
  8320  0D68  3001               	movlw	1
  8321  0D69  0020               	movlb	0	; select bank0
  8322  0D6A  02D1               	subwf	getADCValue@adcLoop,f
  8323  0D6B  3000               	movlw	0
  8324  0D6C  3BD2               	subwfb	getADCValue@adcLoop+1,f
  8325  0D6D  0A51               	incf	getADCValue@adcLoop,w
  8326  0D6E  1903               	btfsc	3,2
  8327  0D6F  0A52               	incf	getADCValue@adcLoop+1,w
  8328  0D70  1903               	btfsc	3,2
  8329  0D71  2DA5               	goto	l190
  8330                           
  8331                           ;main.c: 124: ADCON0bits.ADGO = 1;
  8332  0D72  0021               	movlb	1	; select bank1
  8333  0D73  149D               	bsf	29,1	;volatile
  8334  0D74                     l3171:	
  8335                           ;main.c: 126: while (ADCON0bits.ADGO){
  8336                           
  8337  0D74  0021               	movlb	1	; select bank1
  8338  0D75  1C9D               	btfss	29,1	;volatile
  8339  0D76  2D7C               	goto	l3173
  8340                           
  8341                           ;main.c: 127: doWDTSleep(0b00000);
  8342  0D77  3000               	movlw	0
  8343  0D78  3196  26AA  318D   	fcall	_doWDTSleep
  8344  0D7B  2D74               	goto	l3171
  8345  0D7C                     l3173:	
  8346                           
  8347                           ;main.c: 128: };main.c: 130: adcSum+= (ADRESL | (ADRESH << 8));
  8348  0D7C  081C               	movf	28,w	;volatile
  8349  0D7D  0020               	movlb	0	; select bank0
  8350  0D7E  00CE               	movwf	??_getADCValue
  8351  0D7F  01CF               	clrf	??_getADCValue+1
  8352  0D80  084E               	movf	??_getADCValue,w
  8353  0D81  00CF               	movwf	??_getADCValue+1
  8354  0D82  01CE               	clrf	??_getADCValue
  8355  0D83  084E               	movf	??_getADCValue,w
  8356  0D84  0021               	movlb	1	; select bank1
  8357  0D85  041B               	iorwf	27,w	;volatile
  8358  0D86  0020               	movlb	0	; select bank0
  8359  0D87  00A8               	movwf	___awtoft@c
  8360  0D88  084F               	movf	??_getADCValue+1,w
  8361  0D89  00A9               	movwf	___awtoft@c+1
  8362  0D8A  3197  27DE  318D   	fcall	___awtoft
  8363  0D8D  0020               	movlb	0	; select bank0
  8364  0D8E  0828               	movf	?___awtoft,w
  8365  0D8F  00AE               	movwf	___ftadd@f1
  8366  0D90  0829               	movf	?___awtoft+1,w
  8367  0D91  00AF               	movwf	___ftadd@f1+1
  8368  0D92  082A               	movf	?___awtoft+2,w
  8369  0D93  00B0               	movwf	___ftadd@f1+2
  8370  0D94  0854               	movf	getADCValue@adcSum,w
  8371  0D95  00B1               	movwf	___ftadd@f2
  8372  0D96  0855               	movf	getADCValue@adcSum+1,w
  8373  0D97  00B2               	movwf	___ftadd@f2+1
  8374  0D98  0856               	movf	getADCValue@adcSum+2,w
  8375  0D99  00B3               	movwf	___ftadd@f2+2
  8376  0D9A  3184  24B2  318D   	fcall	___ftadd
  8377  0D9D  0020               	movlb	0	; select bank0
  8378  0D9E  082E               	movf	?___ftadd,w
  8379  0D9F  00D4               	movwf	getADCValue@adcSum
  8380  0DA0  082F               	movf	?___ftadd+1,w
  8381  0DA1  00D5               	movwf	getADCValue@adcSum+1
  8382  0DA2  0830               	movf	?___ftadd+2,w
  8383  0DA3  00D6               	movwf	getADCValue@adcSum+2
  8384  0DA4  2D68               	goto	l3175
  8385  0DA5                     l190:	
  8386                           
  8387                           ;main.c: 132: };main.c: 134: FVRCONbits.FVREN = 0;
  8388  0DA5  0022               	movlb	2	; select bank2
  8389  0DA6  1397               	bcf	23,7	;volatile
  8390                           
  8391                           ;main.c: 135: ADCON0bits.ADON = 0;
  8392  0DA7  0021               	movlb	1	; select bank1
  8393  0DA8  101D               	bcf	29,0	;volatile
  8394                           
  8395                           ;main.c: 138: adcSum/= 1000;
  8396  0DA9  3000               	movlw	0
  8397  0DAA  0020               	movlb	0	; select bank0
  8398  0DAB  00BB               	movwf	___ftdiv@f2
  8399  0DAC  307A               	movlw	122
  8400  0DAD  00BC               	movwf	___ftdiv@f2+1
  8401  0DAE  3044               	movlw	68
  8402  0DAF  00BD               	movwf	___ftdiv@f2+2
  8403  0DB0  0854               	movf	getADCValue@adcSum,w
  8404  0DB1  00BE               	movwf	___ftdiv@f1
  8405  0DB2  0855               	movf	getADCValue@adcSum+1,w
  8406  0DB3  00BF               	movwf	___ftdiv@f1+1
  8407  0DB4  0856               	movf	getADCValue@adcSum+2,w
  8408  0DB5  00C0               	movwf	___ftdiv@f1+2
  8409  0DB6  318D  25EE  318D   	fcall	___ftdiv
  8410  0DB9  0020               	movlb	0	; select bank0
  8411  0DBA  083B               	movf	?___ftdiv,w
  8412  0DBB  00D4               	movwf	getADCValue@adcSum
  8413  0DBC  083C               	movf	?___ftdiv+1,w
  8414  0DBD  00D5               	movwf	getADCValue@adcSum+1
  8415  0DBE  083D               	movf	?___ftdiv+2,w
  8416  0DBF  00D6               	movwf	getADCValue@adcSum+2
  8417                           
  8418                           ;main.c: 141: if (ADCON1bits.ADPREF == 0b11){
  8419  0DC0  0021               	movlb	1	; select bank1
  8420  0DC1  081E               	movf	30,w	;volatile
  8421  0DC2  3903               	andlw	3
  8422  0DC3  3A03               	xorlw	3
  8423  0DC4  1903               	btfsc	3,2
  8424  0DC5  2DDF               	goto	l3187
  8425  0DC6  2DE6               	goto	l3189
  8426  0DC7                     l3183:	
  8427                           ;main.c: 143: case 0b10:
  8428                           
  8429                           ;main.c: 142: switch (FVRCONbits.ADFVR){
  8430                           
  8431                           
  8432                           ;main.c: 144: adcSum/= 500;
  8433  0DC7  3000               	movlw	0
  8434  0DC8  0020               	movlb	0	; select bank0
  8435  0DC9  00BB               	movwf	___ftdiv@f2
  8436  0DCA  30FA               	movlw	250
  8437  0DCB  00BC               	movwf	___ftdiv@f2+1
  8438  0DCC  3043               	movlw	67
  8439  0DCD  00BD               	movwf	___ftdiv@f2+2
  8440  0DCE  0854               	movf	getADCValue@adcSum,w
  8441  0DCF  00BE               	movwf	___ftdiv@f1
  8442  0DD0  0855               	movf	getADCValue@adcSum+1,w
  8443  0DD1  00BF               	movwf	___ftdiv@f1+1
  8444  0DD2  0856               	movf	getADCValue@adcSum+2,w
  8445  0DD3  00C0               	movwf	___ftdiv@f1+2
  8446  0DD4  318D  25EE  318D   	fcall	___ftdiv
  8447  0DD7  0020               	movlb	0	; select bank0
  8448  0DD8  083B               	movf	?___ftdiv,w
  8449  0DD9  00D4               	movwf	getADCValue@adcSum
  8450  0DDA  083C               	movf	?___ftdiv+1,w
  8451  0DDB  00D5               	movwf	getADCValue@adcSum+1
  8452  0DDC  083D               	movf	?___ftdiv+2,w
  8453  0DDD  00D6               	movwf	getADCValue@adcSum+2
  8454                           
  8455                           ;main.c: 146: }
  8456                           
  8457                           ;main.c: 145: break;
  8458  0DDE  2DE6               	goto	l3189
  8459  0DDF                     l3187:	
  8460  0DDF  0022               	movlb	2	; select bank2
  8461  0DE0  0817               	movf	23,w	;volatile
  8462  0DE1  3903               	andlw	3
  8463                           
  8464                           ; Switch size 1, requested type "space"
  8465                           ; Number of cases is 1, Range of values is 2 to 2
  8466                           ; switch strategies available:
  8467                           ; Name         Instructions Cycles
  8468                           ; simple_byte            4     3 (average)
  8469                           ; direct_byte           11     9 (fixed)
  8470                           ; jumptable            263     9 (fixed)
  8471                           ;	Chosen strategy is simple_byte
  8472  0DE2  3A02               	xorlw	2	; case 2
  8473  0DE3  1903               	skipnz
  8474  0DE4  2DC7               	goto	l3183
  8475  0DE5  2DE6               	goto	l3189
  8476  0DE6                     l3189:	
  8477                           
  8478                           ;main.c: 147: };main.c: 150: return adcSum;
  8479  0DE6  0020               	movlb	0	; select bank0
  8480  0DE7  0854               	movf	getADCValue@adcSum,w
  8481  0DE8  00CB               	movwf	?_getADCValue
  8482  0DE9  0855               	movf	getADCValue@adcSum+1,w
  8483  0DEA  00CC               	movwf	?_getADCValue+1
  8484  0DEB  0856               	movf	getADCValue@adcSum+2,w
  8485  0DEC  00CD               	movwf	?_getADCValue+2
  8486  0DED  0008               	return
  8487  0DEE                     __end_of_getADCValue:	
  8488                           
  8489                           	psect	text34
  8490  16AA                     __ptext34:	
  8491 ;; *************** function _doWDTSleep *****************
  8492 ;; Defined at:
  8493 ;;		line 22 in file "main.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;  wdtps           1    wreg     unsigned char 
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;  wdtps           1    1[BANK0 ] unsigned char 
  8498 ;; Return value:  Size  Location     Type
  8499 ;;                  1    wreg      void 
  8500 ;; Registers used:
  8501 ;;		wreg, status,2, status,0
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;Total ram usage:        2 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; Hardware stack levels required when called:    7
  8514 ;; This function calls:
  8515 ;;		Nothing
  8516 ;; This function is called by:
  8517 ;;		_sleep
  8518 ;;		_getADCValue
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           
  8523                           ;psect for function _doWDTSleep
  8524  16AA                     _doWDTSleep:	
  8525                           
  8526                           ;incstack = 0
  8527                           ; Regs used in _doWDTSleep: [wreg+status,2+status,0]
  8528                           ;doWDTSleep@wdtps stored from wreg
  8529  16AA  0020               	movlb	0	; select bank0
  8530  16AB  00A1               	movwf	doWDTSleep@wdtps
  8531                           
  8532                           ;main.c: 25: WDTCONbits.WDTPS = wdtps;
  8533  16AC  0821               	movf	doWDTSleep@wdtps,w
  8534  16AD  00A0               	movwf	??_doWDTSleep
  8535  16AE  0DA0               	rlf	??_doWDTSleep,f
  8536  16AF  0021               	movlb	1	; select bank1
  8537  16B0  0817               	movf	23,w	;volatile
  8538  16B1  0020               	movlb	0	; select bank0
  8539  16B2  0620               	xorwf	??_doWDTSleep,w
  8540  16B3  39C1               	andlw	-63
  8541  16B4  0620               	xorwf	??_doWDTSleep,w
  8542  16B5  0021               	movlb	1	; select bank1
  8543  16B6  0097               	movwf	23	;volatile
  8544  16B7  0063               	sleep	;# 
  8545                           
  8546                           ;main.c: 29: __nop();
  8547  16B8  0000               	nop
  8548                           
  8549                           ;main.c: 30: __nop();
  8550  16B9  0000               	nop
  8551                           
  8552                           ;main.c: 32: WDTCONbits.WDTPS = 0b01101;
  8553  16BA  0021               	movlb	1	; select bank1
  8554  16BB  0817               	movf	23,w	;volatile
  8555  16BC  39C1               	andlw	-63
  8556  16BD  381A               	iorlw	26
  8557  16BE  0097               	movwf	23	;volatile
  8558  16BF  0064               	clrwdt	;# 
  8559  16C0  0008               	return
  8560  16C1                     __end_of_doWDTSleep:	
  8561                           
  8562                           	psect	text35
  8563  0DEE                     __ptext35:	
  8564 ;; *************** function ___ftdiv *****************
  8565 ;; Defined at:
  8566 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;  f2              3   27[BANK0 ] float 
  8569 ;;  f1              3   30[BANK0 ] float 
  8570 ;; Auto vars:     Size  Location     Type
  8571 ;;  f3              3   38[BANK0 ] float 
  8572 ;;  sign            1   42[BANK0 ] unsigned char 
  8573 ;;  exp             1   41[BANK0 ] unsigned char 
  8574 ;;  cntr            1   37[BANK0 ] unsigned char 
  8575 ;; Return value:  Size  Location     Type
  8576 ;;                  3   27[BANK0 ] float 
  8577 ;; Registers used:
  8578 ;;		wreg, status,2, status,0, pclath, cstack
  8579 ;; Tracked objects:
  8580 ;;		On entry : 0/0
  8581 ;;		On exit  : 0/0
  8582 ;;		Unchanged: 0/0
  8583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8584 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;Total ram usage:       16 bytes
  8589 ;; Hardware stack levels used:    1
  8590 ;; Hardware stack levels required when called:    8
  8591 ;; This function calls:
  8592 ;;		___ftpack
  8593 ;; This function is called by:
  8594 ;;		_getADCValue
  8595 ;;		_loop
  8596 ;; This function uses a non-reentrant model
  8597 ;;
  8598                           
  8599                           
  8600                           ;psect for function ___ftdiv
  8601  0DEE                     ___ftdiv:	
  8602                           
  8603                           ;incstack = 0
  8604                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  8605  0DEE  0020               	movlb	0	; select bank0
  8606  0DEF  083E               	movf	___ftdiv@f1,w
  8607  0DF0  00C1               	movwf	??___ftdiv
  8608  0DF1  083F               	movf	___ftdiv@f1+1,w
  8609  0DF2  00C2               	movwf	??___ftdiv+1
  8610  0DF3  0840               	movf	___ftdiv@f1+2,w
  8611  0DF4  00C3               	movwf	??___ftdiv+2
  8612  0DF5  1003               	clrc
  8613  0DF6  0D42               	rlf	??___ftdiv+1,w
  8614  0DF7  0D43               	rlf	??___ftdiv+2,w
  8615  0DF8  00C4               	movwf	??___ftdiv+3
  8616  0DF9  0844               	movf	??___ftdiv+3,w
  8617  0DFA  00C9               	movwf	___ftdiv@exp
  8618  0DFB  0849               	movf	___ftdiv@exp,w
  8619  0DFC  1D03               	btfss	3,2
  8620  0DFD  2E05               	goto	l3029
  8621  0DFE  3000               	movlw	0
  8622  0DFF  00BB               	movwf	?___ftdiv
  8623  0E00  3000               	movlw	0
  8624  0E01  00BC               	movwf	?___ftdiv+1
  8625  0E02  3000               	movlw	0
  8626  0E03  00BD               	movwf	?___ftdiv+2
  8627  0E04  0008               	return
  8628  0E05                     l3029:	
  8629  0E05  083B               	movf	___ftdiv@f2,w
  8630  0E06  00C1               	movwf	??___ftdiv
  8631  0E07  083C               	movf	___ftdiv@f2+1,w
  8632  0E08  00C2               	movwf	??___ftdiv+1
  8633  0E09  083D               	movf	___ftdiv@f2+2,w
  8634  0E0A  00C3               	movwf	??___ftdiv+2
  8635  0E0B  1003               	clrc
  8636  0E0C  0D42               	rlf	??___ftdiv+1,w
  8637  0E0D  0D43               	rlf	??___ftdiv+2,w
  8638  0E0E  00C4               	movwf	??___ftdiv+3
  8639  0E0F  0844               	movf	??___ftdiv+3,w
  8640  0E10  00CA               	movwf	___ftdiv@sign
  8641  0E11  084A               	movf	___ftdiv@sign,w
  8642  0E12  1D03               	btfss	3,2
  8643  0E13  2E1B               	goto	l3035
  8644  0E14  3000               	movlw	0
  8645  0E15  00BB               	movwf	?___ftdiv
  8646  0E16  3000               	movlw	0
  8647  0E17  00BC               	movwf	?___ftdiv+1
  8648  0E18  3000               	movlw	0
  8649  0E19  00BD               	movwf	?___ftdiv+2
  8650  0E1A  0008               	return
  8651  0E1B                     l3035:	
  8652  0E1B  3000               	movlw	0
  8653  0E1C  00C6               	movwf	___ftdiv@f3
  8654  0E1D  3000               	movlw	0
  8655  0E1E  00C7               	movwf	___ftdiv@f3+1
  8656  0E1F  3000               	movlw	0
  8657  0E20  00C8               	movwf	___ftdiv@f3+2
  8658  0E21  3089               	movlw	137
  8659  0E22  074A               	addwf	___ftdiv@sign,w
  8660  0E23  00C1               	movwf	??___ftdiv
  8661  0E24  0841               	movf	??___ftdiv,w
  8662  0E25  02C9               	subwf	___ftdiv@exp,f
  8663  0E26  083E               	movf	___ftdiv@f1,w
  8664  0E27  00C1               	movwf	??___ftdiv
  8665  0E28  083F               	movf	___ftdiv@f1+1,w
  8666  0E29  00C2               	movwf	??___ftdiv+1
  8667  0E2A  0840               	movf	___ftdiv@f1+2,w
  8668  0E2B  00C3               	movwf	??___ftdiv+2
  8669  0E2C  3010               	movlw	16
  8670  0E2D                     u3145:	
  8671  0E2D  36C3               	lsrf	??___ftdiv+2,f
  8672  0E2E  0CC2               	rrf	??___ftdiv+1,f
  8673  0E2F  0CC1               	rrf	??___ftdiv,f
  8674  0E30  0B89               	decfsz	9,f
  8675  0E31  2E2D               	goto	u3145
  8676  0E32  0841               	movf	??___ftdiv,w
  8677  0E33  00C4               	movwf	??___ftdiv+3
  8678  0E34  0844               	movf	??___ftdiv+3,w
  8679  0E35  00CA               	movwf	___ftdiv@sign
  8680  0E36  083B               	movf	___ftdiv@f2,w
  8681  0E37  00C1               	movwf	??___ftdiv
  8682  0E38  083C               	movf	___ftdiv@f2+1,w
  8683  0E39  00C2               	movwf	??___ftdiv+1
  8684  0E3A  083D               	movf	___ftdiv@f2+2,w
  8685  0E3B  00C3               	movwf	??___ftdiv+2
  8686  0E3C  3010               	movlw	16
  8687  0E3D                     u3155:	
  8688  0E3D  36C3               	lsrf	??___ftdiv+2,f
  8689  0E3E  0CC2               	rrf	??___ftdiv+1,f
  8690  0E3F  0CC1               	rrf	??___ftdiv,f
  8691  0E40  0B89               	decfsz	9,f
  8692  0E41  2E3D               	goto	u3155
  8693  0E42  0841               	movf	??___ftdiv,w
  8694  0E43  00C4               	movwf	??___ftdiv+3
  8695  0E44  0844               	movf	??___ftdiv+3,w
  8696  0E45  06CA               	xorwf	___ftdiv@sign,f
  8697  0E46  3080               	movlw	128
  8698  0E47  00C1               	movwf	??___ftdiv
  8699  0E48  0841               	movf	??___ftdiv,w
  8700  0E49  05CA               	andwf	___ftdiv@sign,f
  8701  0E4A  17BF               	bsf	___ftdiv@f1+1,7
  8702  0E4B  30FF               	movlw	255
  8703  0E4C  05BE               	andwf	___ftdiv@f1,f
  8704  0E4D  30FF               	movlw	255
  8705  0E4E  05BF               	andwf	___ftdiv@f1+1,f
  8706  0E4F  3000               	movlw	0
  8707  0E50  05C0               	andwf	___ftdiv@f1+2,f
  8708  0E51  17BC               	bsf	___ftdiv@f2+1,7
  8709  0E52  30FF               	movlw	255
  8710  0E53  05BB               	andwf	___ftdiv@f2,f
  8711  0E54  30FF               	movlw	255
  8712  0E55  05BC               	andwf	___ftdiv@f2+1,f
  8713  0E56  3000               	movlw	0
  8714  0E57  05BD               	andwf	___ftdiv@f2+2,f
  8715  0E58  3018               	movlw	24
  8716  0E59  00C1               	movwf	??___ftdiv
  8717  0E5A  0841               	movf	??___ftdiv,w
  8718  0E5B  00C5               	movwf	___ftdiv@cntr
  8719  0E5C                     l3049:	
  8720  0E5C  3001               	movlw	1
  8721  0E5D                     u3165:	
  8722  0E5D  35C6               	lslf	___ftdiv@f3,f
  8723  0E5E  0DC7               	rlf	___ftdiv@f3+1,f
  8724  0E5F  0DC8               	rlf	___ftdiv@f3+2,f
  8725  0E60  0B89               	decfsz	9,f
  8726  0E61  2E5D               	goto	u3165
  8727  0E62  083D               	movf	___ftdiv@f2+2,w
  8728  0E63  0240               	subwf	___ftdiv@f1+2,w
  8729  0E64  1D03               	skipz
  8730  0E65  2E6C               	goto	u3175
  8731  0E66  083C               	movf	___ftdiv@f2+1,w
  8732  0E67  023F               	subwf	___ftdiv@f1+1,w
  8733  0E68  1D03               	skipz
  8734  0E69  2E6C               	goto	u3175
  8735  0E6A  083B               	movf	___ftdiv@f2,w
  8736  0E6B  023E               	subwf	___ftdiv@f1,w
  8737  0E6C                     u3175:	
  8738  0E6C  1C03               	skipc
  8739  0E6D  2E75               	goto	l3057
  8740  0E6E  083B               	movf	___ftdiv@f2,w
  8741  0E6F  02BE               	subwf	___ftdiv@f1,f
  8742  0E70  083C               	movf	___ftdiv@f2+1,w
  8743  0E71  3BBF               	subwfb	___ftdiv@f1+1,f
  8744  0E72  083D               	movf	___ftdiv@f2+2,w
  8745  0E73  3BC0               	subwfb	___ftdiv@f1+2,f
  8746  0E74  1446               	bsf	___ftdiv@f3,0
  8747  0E75                     l3057:	
  8748  0E75  3001               	movlw	1
  8749  0E76                     u3185:	
  8750  0E76  35BE               	lslf	___ftdiv@f1,f
  8751  0E77  0DBF               	rlf	___ftdiv@f1+1,f
  8752  0E78  0DC0               	rlf	___ftdiv@f1+2,f
  8753  0E79  0B89               	decfsz	9,f
  8754  0E7A  2E76               	goto	u3185
  8755  0E7B  3001               	movlw	1
  8756  0E7C  02C5               	subwf	___ftdiv@cntr,f
  8757  0E7D  1D03               	btfss	3,2
  8758  0E7E  2E5C               	goto	l3049
  8759  0E7F  0846               	movf	___ftdiv@f3,w
  8760  0E80  00A0               	movwf	___ftpack@arg
  8761  0E81  0847               	movf	___ftdiv@f3+1,w
  8762  0E82  00A1               	movwf	___ftpack@arg+1
  8763  0E83  0848               	movf	___ftdiv@f3+2,w
  8764  0E84  00A2               	movwf	___ftpack@arg+2
  8765  0E85  0849               	movf	___ftdiv@exp,w
  8766  0E86  00C1               	movwf	??___ftdiv
  8767  0E87  0841               	movf	??___ftdiv,w
  8768  0E88  00A3               	movwf	___ftpack@exp
  8769  0E89  084A               	movf	___ftdiv@sign,w
  8770  0E8A  00C2               	movwf	??___ftdiv+1
  8771  0E8B  0842               	movf	??___ftdiv+1,w
  8772  0E8C  00A4               	movwf	___ftpack@sign
  8773  0E8D  318C  2444         	fcall	___ftpack
  8774  0E8F  0020               	movlb	0	; select bank0
  8775  0E90  0820               	movf	?___ftpack,w
  8776  0E91  00BB               	movwf	?___ftdiv
  8777  0E92  0821               	movf	?___ftpack+1,w
  8778  0E93  00BC               	movwf	?___ftdiv+1
  8779  0E94  0822               	movf	?___ftpack+2,w
  8780  0E95  00BD               	movwf	?___ftdiv+2
  8781  0E96  0008               	return
  8782  0E97                     __end_of___ftdiv:	
  8783                           
  8784                           	psect	text36
  8785  04B2                     __ptext36:	
  8786 ;; *************** function ___ftadd *****************
  8787 ;; Defined at:
  8788 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  8789 ;; Parameters:    Size  Location     Type
  8790 ;;  f1              3   14[BANK0 ] float 
  8791 ;;  f2              3   17[BANK0 ] float 
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  exp1            1   26[BANK0 ] unsigned char 
  8794 ;;  exp2            1   25[BANK0 ] unsigned char 
  8795 ;;  sign            1   24[BANK0 ] unsigned char 
  8796 ;; Return value:  Size  Location     Type
  8797 ;;                  3   14[BANK0 ] float 
  8798 ;; Registers used:
  8799 ;;		wreg, status,2, status,0, pclath, cstack
  8800 ;; Tracked objects:
  8801 ;;		On entry : 0/0
  8802 ;;		On exit  : 0/0
  8803 ;;		Unchanged: 0/0
  8804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8805 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;Total ram usage:       13 bytes
  8810 ;; Hardware stack levels used:    1
  8811 ;; Hardware stack levels required when called:    8
  8812 ;; This function calls:
  8813 ;;		___ftpack
  8814 ;; This function is called by:
  8815 ;;		_getADCValue
  8816 ;;		_loop
  8817 ;;		___ftsub
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           
  8822                           ;psect for function ___ftadd
  8823  04B2                     ___ftadd:	
  8824                           
  8825                           ;incstack = 0
  8826                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8827  04B2  0020               	movlb	0	; select bank0
  8828  04B3  082E               	movf	___ftadd@f1,w
  8829  04B4  00B4               	movwf	??___ftadd
  8830  04B5  082F               	movf	___ftadd@f1+1,w
  8831  04B6  00B5               	movwf	??___ftadd+1
  8832  04B7  0830               	movf	___ftadd@f1+2,w
  8833  04B8  00B6               	movwf	??___ftadd+2
  8834  04B9  1003               	clrc
  8835  04BA  0D35               	rlf	??___ftadd+1,w
  8836  04BB  0D36               	rlf	??___ftadd+2,w
  8837  04BC  00B7               	movwf	??___ftadd+3
  8838  04BD  0837               	movf	??___ftadd+3,w
  8839  04BE  00BA               	movwf	___ftadd@exp1
  8840  04BF  0831               	movf	___ftadd@f2,w
  8841  04C0  00B4               	movwf	??___ftadd
  8842  04C1  0832               	movf	___ftadd@f2+1,w
  8843  04C2  00B5               	movwf	??___ftadd+1
  8844  04C3  0833               	movf	___ftadd@f2+2,w
  8845  04C4  00B6               	movwf	??___ftadd+2
  8846  04C5  1003               	clrc
  8847  04C6  0D35               	rlf	??___ftadd+1,w
  8848  04C7  0D36               	rlf	??___ftadd+2,w
  8849  04C8  00B7               	movwf	??___ftadd+3
  8850  04C9  0837               	movf	??___ftadd+3,w
  8851  04CA  00B9               	movwf	___ftadd@exp2
  8852  04CB  083A               	movf	___ftadd@exp1,w
  8853  04CC  1903               	btfsc	3,2
  8854  04CD  2CDA               	goto	l2581
  8855  04CE  0839               	movf	___ftadd@exp2,w
  8856  04CF  023A               	subwf	___ftadd@exp1,w
  8857  04D0  1803               	skipnc
  8858  04D1  2CE1               	goto	l2585
  8859  04D2  033A               	decf	___ftadd@exp1,w
  8860  04D3  3AFF               	xorlw	255
  8861  04D4  0739               	addwf	___ftadd@exp2,w
  8862  04D5  00B4               	movwf	??___ftadd
  8863  04D6  3019               	movlw	25
  8864  04D7  0234               	subwf	??___ftadd,w
  8865  04D8  1C03               	skipc
  8866  04D9  2CE1               	goto	l2585
  8867  04DA                     l2581:	
  8868  04DA  0831               	movf	___ftadd@f2,w
  8869  04DB  00AE               	movwf	?___ftadd
  8870  04DC  0832               	movf	___ftadd@f2+1,w
  8871  04DD  00AF               	movwf	?___ftadd+1
  8872  04DE  0833               	movf	___ftadd@f2+2,w
  8873  04DF  00B0               	movwf	?___ftadd+2
  8874  04E0  0008               	return
  8875  04E1                     l2585:	
  8876  04E1  0839               	movf	___ftadd@exp2,w
  8877  04E2  1903               	btfsc	3,2
  8878  04E3  0008               	return
  8879  04E4  083A               	movf	___ftadd@exp1,w
  8880  04E5  0239               	subwf	___ftadd@exp2,w
  8881  04E6  1803               	skipnc
  8882  04E7  2CF0               	goto	l2591
  8883  04E8  0339               	decf	___ftadd@exp2,w
  8884  04E9  3AFF               	xorlw	255
  8885  04EA  073A               	addwf	___ftadd@exp1,w
  8886  04EB  00B4               	movwf	??___ftadd
  8887  04EC  3019               	movlw	25
  8888  04ED  0234               	subwf	??___ftadd,w
  8889  04EE  1803               	btfsc	3,0
  8890  04EF  0008               	return
  8891  04F0                     l2591:	
  8892  04F0  3006               	movlw	6
  8893  04F1  00B4               	movwf	??___ftadd
  8894  04F2  0834               	movf	??___ftadd,w
  8895  04F3  00B8               	movwf	___ftadd@sign
  8896  04F4  1BB0               	btfsc	___ftadd@f1+2,7
  8897  04F5  17B8               	bsf	___ftadd@sign,7
  8898  04F6  1BB3               	btfsc	___ftadd@f2+2,7
  8899  04F7  1738               	bsf	___ftadd@sign,6
  8900  04F8  17AF               	bsf	___ftadd@f1+1,7
  8901  04F9  30FF               	movlw	255
  8902  04FA  05AE               	andwf	___ftadd@f1,f
  8903  04FB  30FF               	movlw	255
  8904  04FC  05AF               	andwf	___ftadd@f1+1,f
  8905  04FD  3000               	movlw	0
  8906  04FE  05B0               	andwf	___ftadd@f1+2,f
  8907  04FF  17B2               	bsf	___ftadd@f2+1,7
  8908  0500  30FF               	movlw	255
  8909  0501  05B1               	andwf	___ftadd@f2,f
  8910  0502  30FF               	movlw	255
  8911  0503  05B2               	andwf	___ftadd@f2+1,f
  8912  0504  3000               	movlw	0
  8913  0505  05B3               	andwf	___ftadd@f2+2,f
  8914  0506  0839               	movf	___ftadd@exp2,w
  8915  0507  023A               	subwf	___ftadd@exp1,w
  8916  0508  1803               	skipnc
  8917  0509  2D2C               	goto	l2613
  8918  050A                     l2603:	
  8919  050A  3001               	movlw	1
  8920  050B                     u2355:	
  8921  050B  35B1               	lslf	___ftadd@f2,f
  8922  050C  0DB2               	rlf	___ftadd@f2+1,f
  8923  050D  0DB3               	rlf	___ftadd@f2+2,f
  8924  050E  0B89               	decfsz	9,f
  8925  050F  2D0B               	goto	u2355
  8926  0510  3001               	movlw	1
  8927  0511  02B9               	subwf	___ftadd@exp2,f
  8928  0512  0839               	movf	___ftadd@exp2,w
  8929  0513  063A               	xorwf	___ftadd@exp1,w
  8930  0514  1903               	skipnz
  8931  0515  2D27               	goto	l2611
  8932  0516  3001               	movlw	1
  8933  0517  02B8               	subwf	___ftadd@sign,f
  8934  0518  0838               	movf	___ftadd@sign,w
  8935  0519  3907               	andlw	7
  8936  051A  1903               	btfsc	3,2
  8937  051B  2D27               	goto	l2611
  8938  051C  2D0A               	goto	l2603
  8939  051D                     l2609:	
  8940  051D  3001               	movlw	1
  8941  051E                     u2385:	
  8942  051E  36B0               	lsrf	___ftadd@f1+2,f
  8943  051F  0CAF               	rrf	___ftadd@f1+1,f
  8944  0520  0CAE               	rrf	___ftadd@f1,f
  8945  0521  0B89               	decfsz	9,f
  8946  0522  2D1E               	goto	u2385
  8947  0523  3001               	movlw	1
  8948  0524  00B4               	movwf	??___ftadd
  8949  0525  0834               	movf	??___ftadd,w
  8950  0526  07BA               	addwf	___ftadd@exp1,f
  8951  0527                     l2611:	
  8952  0527  083A               	movf	___ftadd@exp1,w
  8953  0528  0639               	xorwf	___ftadd@exp2,w
  8954  0529  1903               	btfsc	3,2
  8955  052A  2D51               	goto	l719
  8956  052B  2D1D               	goto	l2609
  8957  052C                     l2613:	
  8958  052C  083A               	movf	___ftadd@exp1,w
  8959  052D  0239               	subwf	___ftadd@exp2,w
  8960  052E  1803               	skipnc
  8961  052F  2D51               	goto	l719
  8962  0530                     l2615:	
  8963  0530  3001               	movlw	1
  8964  0531                     u2415:	
  8965  0531  35AE               	lslf	___ftadd@f1,f
  8966  0532  0DAF               	rlf	___ftadd@f1+1,f
  8967  0533  0DB0               	rlf	___ftadd@f1+2,f
  8968  0534  0B89               	decfsz	9,f
  8969  0535  2D31               	goto	u2415
  8970  0536  3001               	movlw	1
  8971  0537  02BA               	subwf	___ftadd@exp1,f
  8972  0538  0839               	movf	___ftadd@exp2,w
  8973  0539  063A               	xorwf	___ftadd@exp1,w
  8974  053A  1903               	skipnz
  8975  053B  2D4D               	goto	l2623
  8976  053C  3001               	movlw	1
  8977  053D  02B8               	subwf	___ftadd@sign,f
  8978  053E  0838               	movf	___ftadd@sign,w
  8979  053F  3907               	andlw	7
  8980  0540  1903               	btfsc	3,2
  8981  0541  2D4D               	goto	l2623
  8982  0542  2D30               	goto	l2615
  8983  0543                     l2621:	
  8984  0543  3001               	movlw	1
  8985  0544                     u2445:	
  8986  0544  36B3               	lsrf	___ftadd@f2+2,f
  8987  0545  0CB2               	rrf	___ftadd@f2+1,f
  8988  0546  0CB1               	rrf	___ftadd@f2,f
  8989  0547  0B89               	decfsz	9,f
  8990  0548  2D44               	goto	u2445
  8991  0549  3001               	movlw	1
  8992  054A  00B4               	movwf	??___ftadd
  8993  054B  0834               	movf	??___ftadd,w
  8994  054C  07B9               	addwf	___ftadd@exp2,f
  8995  054D                     l2623:	
  8996  054D  083A               	movf	___ftadd@exp1,w
  8997  054E  0639               	xorwf	___ftadd@exp2,w
  8998  054F  1D03               	skipz
  8999  0550  2D43               	goto	l2621
  9000  0551                     l719:	
  9001  0551  1FB8               	btfss	___ftadd@sign,7
  9002  0552  2D63               	goto	l2627
  9003  0553  30FF               	movlw	255
  9004  0554  06AE               	xorwf	___ftadd@f1,f
  9005  0555  30FF               	movlw	255
  9006  0556  06AF               	xorwf	___ftadd@f1+1,f
  9007  0557  30FF               	movlw	255
  9008  0558  06B0               	xorwf	___ftadd@f1+2,f
  9009  0559  3001               	movlw	1
  9010  055A  07AE               	addwf	___ftadd@f1,f
  9011  055B  3000               	movlw	0
  9012  055C  1803               	skipnc
  9013  055D  3001               	movlw	1
  9014  055E  07AF               	addwf	___ftadd@f1+1,f
  9015  055F  3000               	movlw	0
  9016  0560  1803               	skipnc
  9017  0561  3001               	movlw	1
  9018  0562  07B0               	addwf	___ftadd@f1+2,f
  9019  0563                     l2627:	
  9020  0563  1F38               	btfss	___ftadd@sign,6
  9021  0564  2D75               	goto	l2631
  9022  0565  30FF               	movlw	255
  9023  0566  06B1               	xorwf	___ftadd@f2,f
  9024  0567  30FF               	movlw	255
  9025  0568  06B2               	xorwf	___ftadd@f2+1,f
  9026  0569  30FF               	movlw	255
  9027  056A  06B3               	xorwf	___ftadd@f2+2,f
  9028  056B  3001               	movlw	1
  9029  056C  07B1               	addwf	___ftadd@f2,f
  9030  056D  3000               	movlw	0
  9031  056E  1803               	skipnc
  9032  056F  3001               	movlw	1
  9033  0570  07B2               	addwf	___ftadd@f2+1,f
  9034  0571  3000               	movlw	0
  9035  0572  1803               	skipnc
  9036  0573  3001               	movlw	1
  9037  0574  07B3               	addwf	___ftadd@f2+2,f
  9038  0575                     l2631:	
  9039  0575  01B8               	clrf	___ftadd@sign
  9040  0576  082E               	movf	___ftadd@f1,w
  9041  0577  07B1               	addwf	___ftadd@f2,f
  9042  0578  082F               	movf	___ftadd@f1+1,w
  9043  0579  3DB2               	addwfc	___ftadd@f2+1,f
  9044  057A  0830               	movf	___ftadd@f1+2,w
  9045  057B  3DB3               	addwfc	___ftadd@f2+2,f
  9046  057C  1FB3               	btfss	___ftadd@f2+2,7
  9047  057D  2D90               	goto	l2641
  9048  057E  30FF               	movlw	255
  9049  057F  06B1               	xorwf	___ftadd@f2,f
  9050  0580  30FF               	movlw	255
  9051  0581  06B2               	xorwf	___ftadd@f2+1,f
  9052  0582  30FF               	movlw	255
  9053  0583  06B3               	xorwf	___ftadd@f2+2,f
  9054  0584  3001               	movlw	1
  9055  0585  07B1               	addwf	___ftadd@f2,f
  9056  0586  3000               	movlw	0
  9057  0587  1803               	skipnc
  9058  0588  3001               	movlw	1
  9059  0589  07B2               	addwf	___ftadd@f2+1,f
  9060  058A  3000               	movlw	0
  9061  058B  1803               	skipnc
  9062  058C  3001               	movlw	1
  9063  058D  07B3               	addwf	___ftadd@f2+2,f
  9064  058E  01B8               	clrf	___ftadd@sign
  9065  058F  0AB8               	incf	___ftadd@sign,f
  9066  0590                     l2641:	
  9067  0590  0831               	movf	___ftadd@f2,w
  9068  0591  00A0               	movwf	___ftpack@arg
  9069  0592  0832               	movf	___ftadd@f2+1,w
  9070  0593  00A1               	movwf	___ftpack@arg+1
  9071  0594  0833               	movf	___ftadd@f2+2,w
  9072  0595  00A2               	movwf	___ftpack@arg+2
  9073  0596  083A               	movf	___ftadd@exp1,w
  9074  0597  00B4               	movwf	??___ftadd
  9075  0598  0834               	movf	??___ftadd,w
  9076  0599  00A3               	movwf	___ftpack@exp
  9077  059A  0838               	movf	___ftadd@sign,w
  9078  059B  00B5               	movwf	??___ftadd+1
  9079  059C  0835               	movf	??___ftadd+1,w
  9080  059D  00A4               	movwf	___ftpack@sign
  9081  059E  318C  2444         	fcall	___ftpack
  9082  05A0  0020               	movlb	0	; select bank0
  9083  05A1  0820               	movf	?___ftpack,w
  9084  05A2  00AE               	movwf	?___ftadd
  9085  05A3  0821               	movf	?___ftpack+1,w
  9086  05A4  00AF               	movwf	?___ftadd+1
  9087  05A5  0822               	movf	?___ftpack+2,w
  9088  05A6  00B0               	movwf	?___ftadd+2
  9089  05A7  0008               	return
  9090  05A8                     __end_of___ftadd:	
  9091                           
  9092                           	psect	text37
  9093  17DE                     __ptext37:	
  9094 ;; *************** function ___awtoft *****************
  9095 ;; Defined at:
  9096 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9097 ;; Parameters:    Size  Location     Type
  9098 ;;  c               2    8[BANK0 ] int 
  9099 ;; Auto vars:     Size  Location     Type
  9100 ;;  sign            1   13[BANK0 ] unsigned char 
  9101 ;; Return value:  Size  Location     Type
  9102 ;;                  3    8[BANK0 ] float 
  9103 ;; Registers used:
  9104 ;;		wreg, status,2, status,0, pclath, cstack
  9105 ;; Tracked objects:
  9106 ;;		On entry : 0/0
  9107 ;;		On exit  : 0/0
  9108 ;;		Unchanged: 0/0
  9109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9110 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;Total ram usage:        6 bytes
  9115 ;; Hardware stack levels used:    1
  9116 ;; Hardware stack levels required when called:    8
  9117 ;; This function calls:
  9118 ;;		___ftpack
  9119 ;; This function is called by:
  9120 ;;		_getADCValue
  9121 ;;		_loop
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125                           
  9126                           ;psect for function ___awtoft
  9127  17DE                     ___awtoft:	
  9128                           
  9129                           ;incstack = 0
  9130                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9131  17DE  0020               	movlb	0	; select bank0
  9132  17DF  01AD               	clrf	___awtoft@sign
  9133  17E0  1FA9               	btfss	___awtoft@c+1,7
  9134  17E1  2FE9               	goto	l3019
  9135  17E2  09A8               	comf	___awtoft@c,f
  9136  17E3  09A9               	comf	___awtoft@c+1,f
  9137  17E4  0AA8               	incf	___awtoft@c,f
  9138  17E5  1903               	skipnz
  9139  17E6  0AA9               	incf	___awtoft@c+1,f
  9140  17E7  01AD               	clrf	___awtoft@sign
  9141  17E8  0AAD               	incf	___awtoft@sign,f
  9142  17E9                     l3019:	
  9143  17E9  0828               	movf	___awtoft@c,w
  9144  17EA  00A0               	movwf	___ftpack@arg
  9145  17EB  0829               	movf	___awtoft@c+1,w
  9146  17EC  00A1               	movwf	___ftpack@arg+1
  9147  17ED  01A2               	clrf	___ftpack@arg+2
  9148  17EE  308E               	movlw	142
  9149  17EF  00AB               	movwf	??___awtoft
  9150  17F0  082B               	movf	??___awtoft,w
  9151  17F1  00A3               	movwf	___ftpack@exp
  9152  17F2  082D               	movf	___awtoft@sign,w
  9153  17F3  00AC               	movwf	??___awtoft+1
  9154  17F4  082C               	movf	??___awtoft+1,w
  9155  17F5  00A4               	movwf	___ftpack@sign
  9156  17F6  318C  2444         	fcall	___ftpack
  9157  17F8  0020               	movlb	0	; select bank0
  9158  17F9  0820               	movf	?___ftpack,w
  9159  17FA  00A8               	movwf	?___awtoft
  9160  17FB  0821               	movf	?___ftpack+1,w
  9161  17FC  00A9               	movwf	?___awtoft+1
  9162  17FD  0822               	movf	?___ftpack+2,w
  9163  17FE  00AA               	movwf	?___awtoft+2
  9164  17FF  0008               	return
  9165  1800                     __end_of___awtoft:	
  9166                           
  9167                           	psect	text38
  9168  1696                     __ptext38:	
  9169 ;; *************** function _checkTXPower *****************
  9170 ;; Defined at:
  9171 ;;		line 189 in file "main.c"
  9172 ;; Parameters:    Size  Location     Type
  9173 ;;		None
  9174 ;; Auto vars:     Size  Location     Type
  9175 ;;  rxPacket        1    8[BANK0 ] PTR struct .
  9176 ;;		 -> RXPacket(33), 
  9177 ;; Return value:  Size  Location     Type
  9178 ;;                  1    wreg      void 
  9179 ;; Registers used:
  9180 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9181 ;; Tracked objects:
  9182 ;;		On entry : 0/0
  9183 ;;		On exit  : 0/0
  9184 ;;		Unchanged: 0/0
  9185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9190 ;;Total ram usage:        2 bytes
  9191 ;; Hardware stack levels used:    1
  9192 ;; Hardware stack levels required when called:   11
  9193 ;; This function calls:
  9194 ;;		_nrf24l01ChangeTXPower
  9195 ;;		_nrf24l01GetRXPacket
  9196 ;; This function is called by:
  9197 ;;		_loop
  9198 ;; This function uses a non-reentrant model
  9199 ;;
  9200                           
  9201                           
  9202                           ;psect for function _checkTXPower
  9203  1696                     _checkTXPower:	
  9204                           
  9205                           ;main.c: 190: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  9206                           
  9207                           ;incstack = 0
  9208                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9209  1696  3180  2002  3196   	fcall	_nrf24l01GetRXPacket
  9210  1699  0020               	movlb	0	; select bank0
  9211  169A  00A7               	movwf	??_checkTXPower
  9212  169B  0827               	movf	??_checkTXPower,w
  9213  169C  00A8               	movwf	checkTXPower@rxPacket
  9214                           
  9215                           ;main.c: 192: if (rxPacket->packetData.ACKRPD){
  9216  169D  0828               	movf	checkTXPower@rxPacket,w
  9217  169E  0086               	movwf	6
  9218  169F  3001               	movlw	1	; select bank2/3
  9219  16A0  0087               	movwf	7
  9220  16A1  1C81               	btfss	1,1
  9221  16A2  0008               	return
  9222                           
  9223                           ;main.c: 193: nrf24l01ChangeTXPower(-1);
  9224  16A3  30FF               	movlw	255
  9225  16A4  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  9226  16A5  30FF               	movlw	255
  9227  16A6  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  9228  16A7  318A  2251         	fcall	_nrf24l01ChangeTXPower
  9229  16A9  0008               	return
  9230  16AA                     __end_of_checkTXPower:	
  9231                           
  9232                           	psect	text39
  9233  0002                     __ptext39:	
  9234 ;; *************** function _nrf24l01GetRXPacket *****************
  9235 ;; Defined at:
  9236 ;;		line 140 in file "nrf24l01.c"
  9237 ;; Parameters:    Size  Location     Type
  9238 ;;		None
  9239 ;; Auto vars:     Size  Location     Type
  9240 ;;		None
  9241 ;; Return value:  Size  Location     Type
  9242 ;;                  1    wreg      PTR struct .
  9243 ;; Registers used:
  9244 ;;		wreg
  9245 ;; Tracked objects:
  9246 ;;		On entry : 0/0
  9247 ;;		On exit  : 0/0
  9248 ;;		Unchanged: 0/0
  9249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9254 ;;Total ram usage:        0 bytes
  9255 ;; Hardware stack levels used:    1
  9256 ;; Hardware stack levels required when called:    7
  9257 ;; This function calls:
  9258 ;;		Nothing
  9259 ;; This function is called by:
  9260 ;;		_handleRXData
  9261 ;;		_checkTXPower
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           
  9266                           ;psect for function _nrf24l01GetRXPacket
  9267  0002                     _nrf24l01GetRXPacket:	
  9268                           
  9269                           ;nrf24l01.c: 141: return &RXPacket;
  9270                           
  9271                           ;incstack = 0
  9272                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  9273  0002  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  9274  0003  0008               	return
  9275  0004                     __end_of_nrf24l01GetRXPacket:	
  9276                           
  9277                           	psect	text40
  9278  0A51                     __ptext40:	
  9279 ;; *************** function _nrf24l01ChangeTXPower *****************
  9280 ;; Defined at:
  9281 ;;		line 33 in file "nrf24l01.c"
  9282 ;; Parameters:    Size  Location     Type
  9283 ;;  addPower        2    3[BANK0 ] int 
  9284 ;; Auto vars:     Size  Location     Type
  9285 ;;  rfSetup         1    6[BANK0 ] struct .
  9286 ;; Return value:  Size  Location     Type
  9287 ;;                  1    wreg      void 
  9288 ;; Registers used:
  9289 ;;		wreg, status,2, status,0, pclath, cstack
  9290 ;; Tracked objects:
  9291 ;;		On entry : 0/0
  9292 ;;		On exit  : 0/0
  9293 ;;		Unchanged: 0/0
  9294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9295 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;Total ram usage:        4 bytes
  9300 ;; Hardware stack levels used:    1
  9301 ;; Hardware stack levels required when called:   10
  9302 ;; This function calls:
  9303 ;;		_nrf24l01Send
  9304 ;; This function is called by:
  9305 ;;		_checkTXPower
  9306 ;;		_nrf24l01SendPacket
  9307 ;; This function uses a non-reentrant model
  9308 ;;
  9309                           
  9310                           
  9311                           ;psect for function _nrf24l01ChangeTXPower
  9312  0A51                     _nrf24l01ChangeTXPower:	
  9313                           
  9314                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  9315                           
  9316                           ;incstack = 0
  9317                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  9318  0A51  0020               	movlb	0	; select bank0
  9319  0A52  01A0               	clrf	nrf24l01Send@data
  9320  0A53  3006               	movlw	6
  9321  0A54  3197  279D  318A   	fcall	_nrf24l01Send
  9322  0A57  0020               	movlb	0	; select bank0
  9323  0A58  00A5               	movwf	??_nrf24l01ChangeTXPower
  9324  0A59  0825               	movf	??_nrf24l01ChangeTXPower,w
  9325  0A5A  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  9326                           
  9327                           ;nrf24l01.c: 38: if (addPower > 0){
  9328  0A5B  0824               	movf	nrf24l01ChangeTXPower@addPower+1,w
  9329  0A5C  3A80               	xorlw	128
  9330  0A5D  00A5               	movwf	??_nrf24l01ChangeTXPower
  9331  0A5E  3080               	movlw	128
  9332  0A5F  0225               	subwf	??_nrf24l01ChangeTXPower,w
  9333  0A60  1D03               	skipz
  9334  0A61  2A64               	goto	u1855
  9335  0A62  3001               	movlw	1
  9336  0A63  0223               	subwf	nrf24l01ChangeTXPower@addPower,w
  9337  0A64                     u1855:	
  9338  0A64  1C03               	skipc
  9339  0A65  2A76               	goto	l2365
  9340                           
  9341                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  9342  0A66  0020               	movlb	0	; select bank0
  9343  0A67  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9344  0A68  3903               	andlw	3
  9345  0A69  3A03               	xorlw	3
  9346  0A6A  1903               	skipnz
  9347  0A6B  2A76               	goto	l2365
  9348                           
  9349                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  9350  0A6C  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9351  0A6D  3903               	andlw	3
  9352  0A6E  00A5               	movwf	??_nrf24l01ChangeTXPower
  9353  0A6F  0AA5               	incf	??_nrf24l01ChangeTXPower,f
  9354  0A70  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  9355  0A71  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9356  0A72  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9357  0A73  39F9               	andlw	-7
  9358  0A74  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9359  0A75  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  9360  0A76                     l2365:	
  9361                           
  9362                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  9363  0A76  0020               	movlb	0	; select bank0
  9364  0A77  1FA4               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  9365  0A78  2A88               	goto	l2371
  9366                           
  9367                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  9368  0A79  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9369  0A7A  3903               	andlw	3
  9370  0A7B  3A00               	xorlw	0
  9371  0A7C  1903               	skipnz
  9372  0A7D  2A88               	goto	l2371
  9373                           
  9374                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  9375  0A7E  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  9376  0A7F  3903               	andlw	3
  9377  0A80  00A5               	movwf	??_nrf24l01ChangeTXPower
  9378  0A81  03A5               	decf	??_nrf24l01ChangeTXPower,f
  9379  0A82  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
  9380  0A83  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9381  0A84  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9382  0A85  39F9               	andlw	-7
  9383  0A86  0625               	xorwf	??_nrf24l01ChangeTXPower,w
  9384  0A87  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
  9385  0A88                     l2371:	
  9386                           
  9387                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  9388  0A88  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
  9389  0A89  00A5               	movwf	??_nrf24l01ChangeTXPower
  9390  0A8A  0825               	movf	??_nrf24l01ChangeTXPower,w
  9391  0A8B  00A0               	movwf	nrf24l01Send@data
  9392  0A8C  3026               	movlw	38
  9393  0A8D  3197  279D         	fcall	_nrf24l01Send
  9394  0A8F  0008               	return
  9395  0A90                     __end_of_nrf24l01ChangeTXPower:	
  9396                           
  9397                           	psect	text41
  9398  179D                     __ptext41:	
  9399 ;; *************** function _nrf24l01Send *****************
  9400 ;; Defined at:
  9401 ;;		line 9 in file "nrf24l01.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;  command         1    wreg     unsigned char 
  9404 ;;  data            1    0[BANK0 ] unsigned char 
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;  command         1    2[BANK0 ] unsigned char 
  9407 ;; Return value:  Size  Location     Type
  9408 ;;                  1    wreg      unsigned char 
  9409 ;; Registers used:
  9410 ;;		wreg, status,2, status,0, pclath, cstack
  9411 ;; Tracked objects:
  9412 ;;		On entry : 0/0
  9413 ;;		On exit  : 0/0
  9414 ;;		Unchanged: 0/0
  9415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9416 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;Total ram usage:        3 bytes
  9421 ;; Hardware stack levels used:    1
  9422 ;; Hardware stack levels required when called:    9
  9423 ;; This function calls:
  9424 ;;		_enableInterrupts
  9425 ;;		_nrf24l01SPIEnd
  9426 ;;		_nrf24l01SPISend
  9427 ;;		_nrf24l01SPIStart
  9428 ;; This function is called by:
  9429 ;;		_loop
  9430 ;;		_nrf24l01ChangeTXPower
  9431 ;;		_nrf24l01SetRXMode
  9432 ;;		_nrf24l01SetRXPipe
  9433 ;;		_nrf24l01InitRegisters
  9434 ;; This function uses a non-reentrant model
  9435 ;;
  9436                           
  9437                           
  9438                           ;psect for function _nrf24l01Send
  9439  179D                     _nrf24l01Send:	
  9440                           
  9441                           ;incstack = 0
  9442                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  9443                           ;nrf24l01Send@command stored from wreg
  9444  179D  0020               	movlb	0	; select bank0
  9445  179E  00A2               	movwf	nrf24l01Send@command
  9446                           
  9447                           ;nrf24l01.c: 12: enableInterrupts(0);
  9448  179F  3000               	movlw	0
  9449  17A0  3196  2646  3197   	fcall	_enableInterrupts
  9450                           
  9451                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  9452  17A3  3196  264E  3197   	fcall	_nrf24l01SPIStart
  9453                           
  9454                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  9455  17A6  0020               	movlb	0	; select bank0
  9456  17A7  0822               	movf	nrf24l01Send@command,w
  9457  17A8  3196  2656  3197   	fcall	_nrf24l01SPISend
  9458                           
  9459                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  9460  17AB  0020               	movlb	0	; select bank0
  9461  17AC  0820               	movf	nrf24l01Send@data,w
  9462  17AD  3196  2656  3197   	fcall	_nrf24l01SPISend
  9463  17B0  0020               	movlb	0	; select bank0
  9464  17B1  00A1               	movwf	??_nrf24l01Send
  9465  17B2  0821               	movf	??_nrf24l01Send,w
  9466  17B3  00A0               	movwf	nrf24l01Send@data
  9467                           
  9468                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  9469  17B4  3196  263F  3197   	fcall	_nrf24l01SPIEnd
  9470                           
  9471                           ;nrf24l01.c: 27: enableInterrupts(1);
  9472  17B7  3001               	movlw	1
  9473  17B8  3196  2646         	fcall	_enableInterrupts
  9474                           
  9475                           ;nrf24l01.c: 29: return data;
  9476  17BA  0020               	movlb	0	; select bank0
  9477  17BB  0820               	movf	nrf24l01Send@data,w
  9478  17BC  0008               	return
  9479  17BD                     __end_of_nrf24l01Send:	
  9480                           
  9481                           	psect	text42
  9482  170D                     __ptext42:	
  9483 ;; *************** function ___lbtoft *****************
  9484 ;; Defined at:
  9485 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9486 ;; Parameters:    Size  Location     Type
  9487 ;;  c               1    wreg     unsigned char 
  9488 ;; Auto vars:     Size  Location     Type
  9489 ;;  c               1   15[BANK0 ] unsigned char 
  9490 ;; Return value:  Size  Location     Type
  9491 ;;                  3    8[BANK0 ] float 
  9492 ;; Registers used:
  9493 ;;		wreg, status,2, status,0, pclath, cstack
  9494 ;; Tracked objects:
  9495 ;;		On entry : 0/0
  9496 ;;		On exit  : 0/0
  9497 ;;		Unchanged: 0/0
  9498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9499 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9501 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;Total ram usage:        8 bytes
  9504 ;; Hardware stack levels used:    1
  9505 ;; Hardware stack levels required when called:    8
  9506 ;; This function calls:
  9507 ;;		___ftpack
  9508 ;; This function is called by:
  9509 ;;		_loop
  9510 ;;		_main
  9511 ;; This function uses a non-reentrant model
  9512 ;;
  9513                           
  9514                           
  9515                           ;psect for function ___lbtoft
  9516  170D                     ___lbtoft:	
  9517                           
  9518                           ;incstack = 0
  9519                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  9520                           ;___lbtoft@c stored from wreg
  9521  170D  0020               	movlb	0	; select bank0
  9522  170E  00AF               	movwf	___lbtoft@c
  9523  170F  082F               	movf	___lbtoft@c,w
  9524  1710  00AB               	movwf	??___lbtoft
  9525  1711  01AC               	clrf	??___lbtoft+1
  9526  1712  01AD               	clrf	??___lbtoft+2
  9527  1713  082B               	movf	??___lbtoft,w
  9528  1714  00A0               	movwf	___ftpack@arg
  9529  1715  082C               	movf	??___lbtoft+1,w
  9530  1716  00A1               	movwf	___ftpack@arg+1
  9531  1717  082D               	movf	??___lbtoft+2,w
  9532  1718  00A2               	movwf	___ftpack@arg+2
  9533  1719  308E               	movlw	142
  9534  171A  00AE               	movwf	??___lbtoft+3
  9535  171B  082E               	movf	??___lbtoft+3,w
  9536  171C  00A3               	movwf	___ftpack@exp
  9537  171D  01A4               	clrf	___ftpack@sign
  9538  171E  318C  2444         	fcall	___ftpack
  9539  1720  0020               	movlb	0	; select bank0
  9540  1721  0820               	movf	?___ftpack,w
  9541  1722  00A8               	movwf	?___lbtoft
  9542  1723  0821               	movf	?___ftpack+1,w
  9543  1724  00A9               	movwf	?___lbtoft+1
  9544  1725  0822               	movf	?___ftpack+2,w
  9545  1726  00AA               	movwf	?___lbtoft+2
  9546  1727  0008               	return
  9547  1728                     __end_of___lbtoft:	
  9548                           
  9549                           	psect	text43
  9550  0C44                     __ptext43:	
  9551 ;; *************** function ___ftpack *****************
  9552 ;; Defined at:
  9553 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9554 ;; Parameters:    Size  Location     Type
  9555 ;;  arg             3    0[BANK0 ] unsigned um
  9556 ;;  exp             1    3[BANK0 ] unsigned char 
  9557 ;;  sign            1    4[BANK0 ] unsigned char 
  9558 ;; Auto vars:     Size  Location     Type
  9559 ;;		None
  9560 ;; Return value:  Size  Location     Type
  9561 ;;                  3    0[BANK0 ] float 
  9562 ;; Registers used:
  9563 ;;		wreg, status,2, status,0
  9564 ;; Tracked objects:
  9565 ;;		On entry : 0/0
  9566 ;;		On exit  : 0/0
  9567 ;;		Unchanged: 0/0
  9568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9569 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9571 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9572 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9573 ;;Total ram usage:        8 bytes
  9574 ;; Hardware stack levels used:    1
  9575 ;; Hardware stack levels required when called:    7
  9576 ;; This function calls:
  9577 ;;		Nothing
  9578 ;; This function is called by:
  9579 ;;		___awtoft
  9580 ;;		___ftadd
  9581 ;;		___ftdiv
  9582 ;;		___ftmul
  9583 ;;		___lbtoft
  9584 ;;		___lltoft
  9585 ;; This function uses a non-reentrant model
  9586 ;;
  9587                           
  9588                           
  9589                           ;psect for function ___ftpack
  9590  0C44                     ___ftpack:	
  9591                           
  9592                           ;incstack = 0
  9593                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9594  0C44  0020               	movlb	0	; select bank0
  9595  0C45  0823               	movf	___ftpack@exp,w
  9596  0C46  1903               	btfsc	3,2
  9597  0C47  2C4D               	goto	l2401
  9598  0C48  0822               	movf	___ftpack@arg+2,w
  9599  0C49  0421               	iorwf	___ftpack@arg+1,w
  9600  0C4A  0420               	iorwf	___ftpack@arg,w
  9601  0C4B  1D03               	skipz
  9602  0C4C  2C5E               	goto	l2407
  9603  0C4D                     l2401:	
  9604  0C4D  3000               	movlw	0
  9605  0C4E  00A0               	movwf	?___ftpack
  9606  0C4F  3000               	movlw	0
  9607  0C50  00A1               	movwf	?___ftpack+1
  9608  0C51  3000               	movlw	0
  9609  0C52  00A2               	movwf	?___ftpack+2
  9610  0C53  0008               	return
  9611  0C54                     l2405:	
  9612  0C54  3001               	movlw	1
  9613  0C55  00A5               	movwf	??___ftpack
  9614  0C56  0825               	movf	??___ftpack,w
  9615  0C57  07A3               	addwf	___ftpack@exp,f
  9616  0C58  3001               	movlw	1
  9617  0C59                     u1945:	
  9618  0C59  36A2               	lsrf	___ftpack@arg+2,f
  9619  0C5A  0CA1               	rrf	___ftpack@arg+1,f
  9620  0C5B  0CA0               	rrf	___ftpack@arg,f
  9621  0C5C  0B89               	decfsz	9,f
  9622  0C5D  2C59               	goto	u1945
  9623  0C5E                     l2407:	
  9624  0C5E  30FE               	movlw	254
  9625  0C5F  0522               	andwf	___ftpack@arg+2,w
  9626  0C60  1903               	btfsc	3,2
  9627  0C61  2C77               	goto	l688
  9628  0C62  2C54               	goto	l2405
  9629  0C63                     l2409:	
  9630  0C63  3001               	movlw	1
  9631  0C64  00A5               	movwf	??___ftpack
  9632  0C65  0825               	movf	??___ftpack,w
  9633  0C66  07A3               	addwf	___ftpack@exp,f
  9634  0C67  3001               	movlw	1
  9635  0C68  07A0               	addwf	___ftpack@arg,f
  9636  0C69  3000               	movlw	0
  9637  0C6A  1803               	skipnc
  9638  0C6B  3001               	movlw	1
  9639  0C6C  07A1               	addwf	___ftpack@arg+1,f
  9640  0C6D  3000               	movlw	0
  9641  0C6E  1803               	skipnc
  9642  0C6F  3001               	movlw	1
  9643  0C70  07A2               	addwf	___ftpack@arg+2,f
  9644  0C71  3001               	movlw	1
  9645  0C72                     u1965:	
  9646  0C72  36A2               	lsrf	___ftpack@arg+2,f
  9647  0C73  0CA1               	rrf	___ftpack@arg+1,f
  9648  0C74  0CA0               	rrf	___ftpack@arg,f
  9649  0C75  0B89               	decfsz	9,f
  9650  0C76  2C72               	goto	u1965
  9651  0C77                     l688:	
  9652  0C77  30FF               	movlw	255
  9653  0C78  0522               	andwf	___ftpack@arg+2,w
  9654  0C79  1903               	btfsc	3,2
  9655  0C7A  2C84               	goto	l2417
  9656  0C7B  2C63               	goto	l2409
  9657  0C7C                     l2415:	
  9658  0C7C  3001               	movlw	1
  9659  0C7D  02A3               	subwf	___ftpack@exp,f
  9660  0C7E  3001               	movlw	1
  9661  0C7F                     u1985:	
  9662  0C7F  35A0               	lslf	___ftpack@arg,f
  9663  0C80  0DA1               	rlf	___ftpack@arg+1,f
  9664  0C81  0DA2               	rlf	___ftpack@arg+2,f
  9665  0C82  0B89               	decfsz	9,f
  9666  0C83  2C7F               	goto	u1985
  9667  0C84                     l2417:	
  9668  0C84  1BA1               	btfsc	___ftpack@arg+1,7
  9669  0C85  2C8A               	goto	l695
  9670  0C86  3002               	movlw	2
  9671  0C87  0223               	subwf	___ftpack@exp,w
  9672  0C88  1803               	skipnc
  9673  0C89  2C7C               	goto	l2415
  9674  0C8A                     l695:	
  9675  0C8A  1823               	btfsc	___ftpack@exp,0
  9676  0C8B  2C92               	goto	l696
  9677  0C8C  30FF               	movlw	255
  9678  0C8D  05A0               	andwf	___ftpack@arg,f
  9679  0C8E  307F               	movlw	127
  9680  0C8F  05A1               	andwf	___ftpack@arg+1,f
  9681  0C90  30FF               	movlw	255
  9682  0C91  05A2               	andwf	___ftpack@arg+2,f
  9683  0C92                     l696:	
  9684  0C92  1003               	clrc
  9685  0C93  0CA3               	rrf	___ftpack@exp,f
  9686  0C94  0823               	movf	___ftpack@exp,w
  9687  0C95  00A5               	movwf	??___ftpack
  9688  0C96  01A6               	clrf	??___ftpack+1
  9689  0C97  01A7               	clrf	??___ftpack+2
  9690  0C98  3010               	movlw	16
  9691  0C99                     u2025:	
  9692  0C99  35A5               	lslf	??___ftpack,f
  9693  0C9A  0DA6               	rlf	??___ftpack+1,f
  9694  0C9B  0DA7               	rlf	??___ftpack+2,f
  9695  0C9C  0B89               	decfsz	9,f
  9696  0C9D  2C99               	goto	u2025
  9697  0C9E  0825               	movf	??___ftpack,w
  9698  0C9F  04A0               	iorwf	___ftpack@arg,f
  9699  0CA0  0826               	movf	??___ftpack+1,w
  9700  0CA1  04A1               	iorwf	___ftpack@arg+1,f
  9701  0CA2  0827               	movf	??___ftpack+2,w
  9702  0CA3  04A2               	iorwf	___ftpack@arg+2,f
  9703  0CA4  0824               	movf	___ftpack@sign,w
  9704  0CA5  1903               	btfsc	3,2
  9705  0CA6  0008               	return
  9706  0CA7  17A2               	bsf	___ftpack@arg+2,7
  9707  0CA8  0008               	return
  9708  0CA9                     __end_of___ftpack:	
  9709                           
  9710                           	psect	intentry
  9711  0004                     __pintentry:	
  9712 ;; *************** function _ISR *****************
  9713 ;; Defined at:
  9714 ;;		line 14 in file "main.c"
  9715 ;; Parameters:    Size  Location     Type
  9716 ;;		None
  9717 ;; Auto vars:     Size  Location     Type
  9718 ;;		None
  9719 ;; Return value:  Size  Location     Type
  9720 ;;                  1    wreg      void 
  9721 ;; Registers used:
  9722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9723 ;; Tracked objects:
  9724 ;;		On entry : 0/0
  9725 ;;		On exit  : 0/0
  9726 ;;		Unchanged: 0/0
  9727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;Total ram usage:        0 bytes
  9733 ;; Hardware stack levels used:    1
  9734 ;; Hardware stack levels required when called:    6
  9735 ;; This function calls:
  9736 ;;		_nrf24l01ISR
  9737 ;; This function is called by:
  9738 ;;		Interrupt level 1
  9739 ;; This function uses a non-reentrant model
  9740 ;;
  9741                           
  9742  0004                     _ISR:	
  9743                           
  9744                           ;incstack = 0
  9745  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9746                           
  9747                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9748  0005  3180               	pagesel	$
  9749                           
  9750                           ;main.c: 16: if (PIR0bits.INTF){
  9751  0006  0020               	movlb	0	; select bank0
  9752  0007  1C10               	btfss	16,0	;volatile
  9753  0008  280D               	goto	i1l167
  9754                           
  9755                           ;main.c: 17: nrf24l01ISR();
  9756  0009  3189  219D         	fcall	_nrf24l01ISR
  9757                           
  9758                           ;main.c: 18: PIR0bits.INTF = 0;
  9759  000B  0020               	movlb	0	; select bank0
  9760  000C  1010               	bcf	16,0	;volatile
  9761  000D                     i1l167:	
  9762  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9763  000E  0009               	retfie
  9764  000F                     __end_of_ISR:	
  9765                           
  9766                           	psect	text45
  9767  099D                     __ptext45:	
  9768 ;; *************** function _nrf24l01ISR *****************
  9769 ;; Defined at:
  9770 ;;		line 261 in file "nrf24l01.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;		None
  9773 ;; Auto vars:     Size  Location     Type
  9774 ;;  status          1   12[COMMON] struct .
  9775 ;; Return value:  Size  Location     Type
  9776 ;;                  1    wreg      void 
  9777 ;; Registers used:
  9778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9779 ;; Tracked objects:
  9780 ;;		On entry : 0/0
  9781 ;;		On exit  : 0/0
  9782 ;;		Unchanged: 0/0
  9783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9785 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9787 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;Total ram usage:        2 bytes
  9789 ;; Hardware stack levels used:    1
  9790 ;; Hardware stack levels required when called:    5
  9791 ;; This function calls:
  9792 ;;		_exception
  9793 ;;		_nrf24l01CheckACK
  9794 ;;		_nrf24l01ReceivePacket
  9795 ;;		i1_nrf24l01Send
  9796 ;; This function is called by:
  9797 ;;		_ISR
  9798 ;; This function uses a non-reentrant model
  9799 ;;
  9800                           
  9801                           
  9802                           ;psect for function _nrf24l01ISR
  9803  099D                     _nrf24l01ISR:	
  9804                           
  9805                           ;nrf24l01.c: 263: n_STATUS_t status;;nrf24l01.c: 264: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  9806                           
  9807                           ;incstack = 0
  9808                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9809  099D  01F1               	clrf	i1nrf24l01Send@data
  9810  099E  3007               	movlw	7
  9811  099F  3196  26F2  3189   	fcall	i1_nrf24l01Send
  9812  09A2  00FB               	movwf	??_nrf24l01ISR
  9813  09A3  087B               	movf	??_nrf24l01ISR,w
  9814  09A4  00FC               	movwf	nrf24l01ISR@status
  9815                           
  9816                           ;nrf24l01.c: 269: };nrf24l01.c: 272: if (status.byte == 0xFF){
  9817  09A5  0A7C               	incf	nrf24l01ISR@status,w
  9818  09A6  1D03               	btfss	3,2
  9819  09A7  29AC               	goto	i1l3407
  9820                           
  9821                           ;nrf24l01.c: 273: exception(2);
  9822  09A8  3002               	movlw	2
  9823  09A9  3196  262B  3189   	fcall	_exception
  9824  09AC                     i1l3407:	
  9825                           
  9826                           ;nrf24l01.c: 274: };nrf24l01.c: 276: if (status.TX_DS){
  9827  09AC  1AFC               	btfsc	nrf24l01ISR@status,5
  9828                           
  9829                           ;nrf24l01.c: 279: nrf24l01.TXBusy = 0;
  9830  09AD  107D               	bcf	_nrf24l01,0	;volatile
  9831                           
  9832                           ;nrf24l01.c: 280: };nrf24l01.c: 283: if (status.RX_DR){
  9833  09AE  1F7C               	btfss	nrf24l01ISR@status,6
  9834  09AF  29D0               	goto	i1l3423
  9835                           
  9836                           ;nrf24l01.c: 286: if (!nrf24l01.RXPending){
  9837  09B0  18FD               	btfsc	_nrf24l01,1	;volatile
  9838  09B1  29CF               	goto	i1l330
  9839                           
  9840                           ;nrf24l01.c: 289: nrf24l01.RXPending = 1;
  9841  09B2  14FD               	bsf	_nrf24l01,1	;volatile
  9842                           
  9843                           ;nrf24l01.c: 291: nrf24l01ReceivePacket();
  9844  09B3  318B  23A4  3189   	fcall	_nrf24l01ReceivePacket
  9845                           
  9846                           ;nrf24l01.c: 294: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  9847  09B6  01F1               	clrf	i1nrf24l01Send@data
  9848  09B7  3009               	movlw	9
  9849  09B8  3196  26F2  3189   	fcall	i1_nrf24l01Send
  9850  09BB  00FB               	movwf	??_nrf24l01ISR
  9851  09BC  0023               	movlb	3	; select bank3
  9852  09BD  0820               	movf	_RXPacket^(0+384),w
  9853  09BE  067B               	xorwf	??_nrf24l01ISR,w
  9854  09BF  39FE               	andlw	-2
  9855  09C0  067B               	xorwf	??_nrf24l01ISR,w
  9856  09C1  00A0               	movwf	_RXPacket^(0+384)
  9857                           
  9858                           ;nrf24l01.c: 297: RXPacket.packetData.Pipe = status.RX_P_NO;
  9859  09C2  0C7C               	rrf	nrf24l01ISR@status,w
  9860  09C3  3907               	andlw	7
  9861  09C4  00FB               	movwf	??_nrf24l01ISR
  9862  09C5  0EFB               	swapf	??_nrf24l01ISR,f
  9863  09C6  0820               	movf	_RXPacket^(0+384),w
  9864  09C7  067B               	xorwf	??_nrf24l01ISR,w
  9865  09C8  398F               	andlw	-113
  9866  09C9  067B               	xorwf	??_nrf24l01ISR,w
  9867  09CA  00A0               	movwf	_RXPacket^(0+384)
  9868                           
  9869                           ;nrf24l01.c: 299: nrf24l01CheckACK();
  9870  09CB  3189  2101  3189   	fcall	_nrf24l01CheckACK
  9871                           
  9872                           ;nrf24l01.c: 300: }
  9873  09CE  29D0               	goto	i1l3423
  9874  09CF                     i1l330:	
  9875                           
  9876                           ;nrf24l01.c: 303: else{;nrf24l01.c: 306: status.RX_DR = 0;
  9877  09CF  137C               	bcf	nrf24l01ISR@status,6
  9878  09D0                     i1l3423:	
  9879                           
  9880                           ;nrf24l01.c: 307: };nrf24l01.c: 309: };nrf24l01.c: 312: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  9881  09D0  087C               	movf	nrf24l01ISR@status,w
  9882  09D1  00FB               	movwf	??_nrf24l01ISR
  9883  09D2  087B               	movf	??_nrf24l01ISR,w
  9884  09D3  00F1               	movwf	i1nrf24l01Send@data
  9885  09D4  3027               	movlw	39
  9886  09D5  3196  26F2         	fcall	i1_nrf24l01Send
  9887  09D7  0008               	return
  9888  09D8                     __end_of_nrf24l01ISR:	
  9889                           
  9890                           	psect	text46
  9891  0BA4                     __ptext46:	
  9892 ;; *************** function _nrf24l01ReceivePacket *****************
  9893 ;; Defined at:
  9894 ;;		line 144 in file "nrf24l01.c"
  9895 ;; Parameters:    Size  Location     Type
  9896 ;;		None
  9897 ;; Auto vars:     Size  Location     Type
  9898 ;;  i               1   10[COMMON] unsigned char 
  9899 ;;  width           1    9[COMMON] unsigned char 
  9900 ;; Return value:  Size  Location     Type
  9901 ;;                  1    wreg      void 
  9902 ;; Registers used:
  9903 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9904 ;; Tracked objects:
  9905 ;;		On entry : 0/0
  9906 ;;		On exit  : 0/0
  9907 ;;		Unchanged: 0/0
  9908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9912 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9913 ;;Total ram usage:        3 bytes
  9914 ;; Hardware stack levels used:    1
  9915 ;; Hardware stack levels required when called:    3
  9916 ;; This function calls:
  9917 ;;		_nrf24l01CEHigh
  9918 ;;		_nrf24l01CELow
  9919 ;;		_nrf24l01SPIEnd
  9920 ;;		_nrf24l01SPISend
  9921 ;;		_nrf24l01SPIStart
  9922 ;;		i1_memset
  9923 ;;		i1_nrf24l01Send
  9924 ;; This function is called by:
  9925 ;;		_nrf24l01ISR
  9926 ;; This function uses a non-reentrant model
  9927 ;;
  9928                           
  9929                           
  9930                           ;psect for function _nrf24l01ReceivePacket
  9931  0BA4                     _nrf24l01ReceivePacket:	
  9932                           
  9933                           ;nrf24l01.c: 147: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  9934                           
  9935                           ;incstack = 0
  9936                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9937  0BA4  30A1               	movlw	low (_RXPacket+1)
  9938  0BA5  00F0               	movwf	i1memset@p1
  9939  0BA6  3001               	movlw	high (_RXPacket+1)
  9940  0BA7  00F1               	movwf	i1memset@p1+1
  9941  0BA8  3000               	movlw	0
  9942  0BA9  00F2               	movwf	i1memset@c
  9943  0BAA  00F3               	movwf	i1memset@c+1
  9944  0BAB  3020               	movlw	32
  9945  0BAC  00F4               	movwf	i1memset@n
  9946  0BAD  3000               	movlw	0
  9947  0BAE  00F5               	movwf	i1memset@n+1
  9948  0BAF  3196  26C1  318B   	fcall	i1_memset
  9949                           
  9950                           ;nrf24l01.c: 148: RXPacket.packetData.byte = 0x00;
  9951  0BB2  0023               	movlb	3	; select bank3
  9952  0BB3  01A0               	clrf	_RXPacket^(0+384)
  9953                           
  9954                           ;nrf24l01.c: 151: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  9955  0BB4  01F1               	clrf	i1nrf24l01Send@data
  9956  0BB5  3060               	movlw	96
  9957  0BB6  3196  26F2  318B   	fcall	i1_nrf24l01Send
  9958  0BB9  00F8               	movwf	??_nrf24l01ReceivePacket
  9959  0BBA  0878               	movf	??_nrf24l01ReceivePacket,w
  9960  0BBB  00F9               	movwf	nrf24l01ReceivePacket@width
  9961                           
  9962                           ;nrf24l01.c: 152: unsigned char i = 0;
  9963  0BBC  01FA               	clrf	nrf24l01ReceivePacket@i
  9964                           
  9965                           ;nrf24l01.c: 155: nrf24l01CELow();
  9966  0BBD  3196  2630  318B   	fcall	_nrf24l01CELow
  9967                           
  9968                           ;nrf24l01.c: 158: nrf24l01SPIStart();
  9969  0BC0  3196  264E  318B   	fcall	_nrf24l01SPIStart
  9970                           
  9971                           ;nrf24l01.c: 161: nrf24l01SPISend((unsigned) 0b01100001);
  9972  0BC3  3061               	movlw	97
  9973  0BC4  3196  2656  318B   	fcall	_nrf24l01SPISend
  9974                           
  9975                           ;nrf24l01.c: 164: RXPacket.packetData.byte = nrf24l01SPISend(0);
  9976  0BC7  3000               	movlw	0
  9977  0BC8  3196  2656  318B   	fcall	_nrf24l01SPISend
  9978  0BCB  00F8               	movwf	??_nrf24l01ReceivePacket
  9979  0BCC  0878               	movf	??_nrf24l01ReceivePacket,w
  9980  0BCD  0023               	movlb	3	; select bank3
  9981  0BCE  00A0               	movwf	_RXPacket^(0+384)
  9982                           
  9983                           ;nrf24l01.c: 165: width--;
  9984  0BCF  3001               	movlw	1
  9985  0BD0  02F9               	subwf	nrf24l01ReceivePacket@width,f
  9986                           
  9987                           ;nrf24l01.c: 167: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  9988  0BD1  01FA               	clrf	nrf24l01ReceivePacket@i
  9989  0BD2  2BE3               	goto	i1l3253
  9990  0BD3                     i1l3249:	
  9991                           
  9992                           ;nrf24l01.c: 169: RXPacket.Message[i] = nrf24l01SPISend(0);
  9993  0BD3  3000               	movlw	0
  9994  0BD4  3196  2656  318B   	fcall	_nrf24l01SPISend
  9995  0BD7  00F8               	movwf	??_nrf24l01ReceivePacket
  9996  0BD8  087A               	movf	nrf24l01ReceivePacket@i,w
  9997  0BD9  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  9998  0BDA  0086               	movwf	6
  9999  0BDB  3001               	movlw	1	; select bank3/4
 10000  0BDC  0087               	movwf	7
 10001  0BDD  0878               	movf	??_nrf24l01ReceivePacket,w
 10002  0BDE  0081               	movwf	1
 10003  0BDF  3001               	movlw	1
 10004  0BE0  00F8               	movwf	??_nrf24l01ReceivePacket
 10005  0BE1  0878               	movf	??_nrf24l01ReceivePacket,w
 10006  0BE2  07FA               	addwf	nrf24l01ReceivePacket@i,f
 10007  0BE3                     i1l3253:	
 10008  0BE3  0879               	movf	nrf24l01ReceivePacket@width,w
 10009  0BE4  027A               	subwf	nrf24l01ReceivePacket@i,w
 10010  0BE5  1803               	skipnc
 10011  0BE6  2BEB               	goto	i1l3257
 10012  0BE7  3020               	movlw	32
 10013  0BE8  027A               	subwf	nrf24l01ReceivePacket@i,w
 10014  0BE9  1C03               	skipc
 10015  0BEA  2BD3               	goto	i1l3249
 10016  0BEB                     i1l3257:	
 10017                           
 10018                           ;nrf24l01.c: 170: };nrf24l01.c: 173: nrf24l01SPIEnd();
 10019  0BEB  3196  263F  318B   	fcall	_nrf24l01SPIEnd
 10020                           
 10021                           ;nrf24l01.c: 176: nrf24l01CEHigh();
 10022  0BEE  3196  262D         	fcall	_nrf24l01CEHigh
 10023  0BF0  0008               	return
 10024  0BF1                     __end_of_nrf24l01ReceivePacket:	
 10025                           
 10026                           	psect	text47
 10027  16C1                     __ptext47:	
 10028 ;; *************** function i1_memset *****************
 10029 ;; Defined at:
 10030 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 10031 ;; Parameters:    Size  Location     Type
 10032 ;;  p1              2    0[COMMON] PTR void 
 10033 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10034 ;;  c               2    2[COMMON] int 
 10035 ;;  n               2    4[COMMON] unsigned int 
 10036 ;; Auto vars:     Size  Location     Type
 10037 ;;  memset          2    6[COMMON] PTR unsigned char 
 10038 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10039 ;; Return value:  Size  Location     Type
 10040 ;;                  1    wreg      PTR void 
 10041 ;; Registers used:
 10042 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10043 ;; Tracked objects:
 10044 ;;		On entry : 0/0
 10045 ;;		On exit  : 0/0
 10046 ;;		Unchanged: 0/0
 10047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10048 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;Total ram usage:        8 bytes
 10053 ;; Hardware stack levels used:    1
 10054 ;; This function calls:
 10055 ;;		Nothing
 10056 ;; This function is called by:
 10057 ;;		_nrf24l01ReceivePacket
 10058 ;; This function uses a non-reentrant model
 10059 ;;
 10060                           
 10061                           
 10062                           ;psect for function i1_memset
 10063  16C1                     i1_memset:	
 10064                           
 10065                           ;incstack = 0
 10066                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10067  16C1  0871               	movf	i1memset@p1+1,w
 10068  16C2  00F7               	movwf	i1memset@p+1
 10069  16C3  0870               	movf	i1memset@p1,w
 10070  16C4  00F6               	movwf	i1memset@p
 10071  16C5                     i1l3125:	
 10072  16C5  3001               	movlw	1
 10073  16C6  02F4               	subwf	i1memset@n,f
 10074  16C7  3000               	movlw	0
 10075  16C8  3BF5               	subwfb	i1memset@n+1,f
 10076  16C9  0A74               	incf	i1memset@n,w
 10077  16CA  1903               	btfsc	3,2
 10078  16CB  0A75               	incf	i1memset@n+1,w
 10079  16CC  1903               	btfsc	3,2
 10080  16CD  0008               	return
 10081  16CE  0876               	movf	i1memset@p,w
 10082  16CF  0086               	movwf	6
 10083  16D0  0877               	movf	i1memset@p+1,w
 10084  16D1  0087               	movwf	7
 10085  16D2  0872               	movf	i1memset@c,w
 10086  16D3  0081               	movwf	1
 10087  16D4  3001               	movlw	1
 10088  16D5  07F6               	addwf	i1memset@p,f
 10089  16D6  3000               	movlw	0
 10090  16D7  3DF7               	addwfc	i1memset@p+1,f
 10091  16D8  2EC5               	goto	i1l3125
 10092  16D9                     __end_ofi1_memset:	
 10093                           ;	Return value of i1_memset is never used
 10094                           
 10095                           
 10096                           	psect	text48
 10097  0901                     __ptext48:	
 10098 ;; *************** function _nrf24l01CheckACK *****************
 10099 ;; Defined at:
 10100 ;;		line 104 in file "nrf24l01.c"
 10101 ;; Parameters:    Size  Location     Type
 10102 ;;		None
 10103 ;; Auto vars:     Size  Location     Type
 10104 ;;		None
 10105 ;; Return value:  Size  Location     Type
 10106 ;;                  1    wreg      void 
 10107 ;; Registers used:
 10108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10109 ;; Tracked objects:
 10110 ;;		On entry : 0/0
 10111 ;;		On exit  : 0/0
 10112 ;;		Unchanged: 0/0
 10113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10118 ;;Total ram usage:        3 bytes
 10119 ;; Hardware stack levels used:    1
 10120 ;; Hardware stack levels required when called:    4
 10121 ;; This function calls:
 10122 ;;		_strcmp
 10123 ;;		i1_nrf24l01SetRXMode
 10124 ;; This function is called by:
 10125 ;;		_nrf24l01ISR
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           
 10130                           ;psect for function _nrf24l01CheckACK
 10131  0901                     _nrf24l01CheckACK:	
 10132                           
 10133                           ;nrf24l01.c: 109: if (!RXPacket.packetData.IsACK){
 10134                           
 10135                           ;incstack = 0
 10136                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10137  0901  0023               	movlb	3	; select bank3
 10138  0902  1DA0               	btfss	_RXPacket^(0+384),3
 10139  0903  0008               	return
 10140                           
 10141                           ;nrf24l01.c: 111: };nrf24l01.c: 114: nrf24l01.RXPending = 0;
 10142                           
 10143                           ;nrf24l01.c: 110: return;
 10144  0904  10FD               	bcf	_nrf24l01,1	;volatile
 10145                           
 10146                           ;nrf24l01.c: 117: if (!TXPacket->packetData.ACKRequest){
 10147  0905  0021               	movlb	1	; select bank1
 10148  0906  0868               	movf	_TXPacket^(0+128),w
 10149  0907  0086               	movwf	6
 10150  0908  0869               	movf	(_TXPacket+1)^(0+128),w
 10151  0909  0087               	movwf	7
 10152  090A  1D01               	btfss	1,2
 10153  090B  0008               	return
 10154                           
 10155                           ;nrf24l01.c: 119: };nrf24l01.c: 122: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
 10156                           
 10157                           ;nrf24l01.c: 118: return;
 10158  090C  0868               	movf	_TXPacket^(0+128),w
 10159  090D  3E01               	addlw	1
 10160  090E  00F7               	movwf	??_nrf24l01CheckACK
 10161  090F  3000               	movlw	0
 10162  0910  3D69               	addwfc	(_TXPacket+1)^(0+128),w
 10163  0911  00F8               	movwf	??_nrf24l01CheckACK+1
 10164  0912  0877               	movf	??_nrf24l01CheckACK,w
 10165  0913  00F0               	movwf	strcmp@s1
 10166  0914  0878               	movf	??_nrf24l01CheckACK+1,w
 10167  0915  00F1               	movwf	strcmp@s1+1
 10168  0916  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 10169  0917  00F9               	movwf	??_nrf24l01CheckACK+2
 10170  0918  0879               	movf	??_nrf24l01CheckACK+2,w
 10171  0919  00F2               	movwf	strcmp@s2
 10172  091A  3188  202E  3189   	fcall	_strcmp
 10173  091D  0870               	movf	?_strcmp,w
 10174  091E  0471               	iorwf	?_strcmp+1,w
 10175  091F  1D03               	btfss	3,2
 10176  0920  0008               	return
 10177                           
 10178                           ;nrf24l01.c: 124: };nrf24l01.c: 126: TXPacket->packetData.ACKRequest = 0;
 10179                           
 10180                           ;nrf24l01.c: 123: return;
 10181  0921  0021               	movlb	1	; select bank1
 10182  0922  0868               	movf	_TXPacket^(0+128),w
 10183  0923  0086               	movwf	6
 10184  0924  0869               	movf	(_TXPacket+1)^(0+128),w
 10185  0925  0087               	movwf	7
 10186  0926  1101               	bcf	1,2
 10187                           
 10188                           ;nrf24l01.c: 133: TXPacket->packetData.ACKRequest = 0;
 10189  0927  0868               	movf	_TXPacket^(0+128),w
 10190  0928  0086               	movwf	6
 10191  0929  0869               	movf	(_TXPacket+1)^(0+128),w
 10192  092A  0087               	movwf	7
 10193  092B  1101               	bcf	1,2
 10194                           
 10195                           ;nrf24l01.c: 136: nrf24l01SetRXMode(0);
 10196  092C  3000               	movlw	0
 10197  092D  318A  22D3         	fcall	i1_nrf24l01SetRXMode
 10198  092F  0008               	return
 10199  0930                     __end_of_nrf24l01CheckACK:	
 10200                           
 10201                           	psect	text49
 10202  0AD3                     __ptext49:	
 10203 ;; *************** function i1_nrf24l01SetRXMode *****************
 10204 ;; Defined at:
 10205 ;;		line 54 in file "nrf24l01.c"
 10206 ;; Parameters:    Size  Location     Type
 10207 ;;  rxMode          1    wreg     unsigned char 
 10208 ;; Auto vars:     Size  Location     Type
 10209 ;;  rxMode          1    6[COMMON] unsigned char 
 10210 ;;  nrf24l01SetR    1    5[COMMON] struct .
 10211 ;; Return value:  Size  Location     Type
 10212 ;;                  1    wreg      void 
 10213 ;; Registers used:
 10214 ;;		wreg, status,2, status,0, pclath, cstack
 10215 ;; Tracked objects:
 10216 ;;		On entry : 0/0
 10217 ;;		On exit  : 0/0
 10218 ;;		Unchanged: 0/0
 10219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;Total ram usage:        3 bytes
 10225 ;; Hardware stack levels used:    1
 10226 ;; Hardware stack levels required when called:    3
 10227 ;; This function calls:
 10228 ;;		_nrf24l01CEHigh
 10229 ;;		_nrf24l01CELow
 10230 ;;		i1_nrf24l01Send
 10231 ;; This function is called by:
 10232 ;;		_nrf24l01CheckACK
 10233 ;; This function uses a non-reentrant model
 10234 ;;
 10235                           
 10236                           
 10237                           ;psect for function i1_nrf24l01SetRXMode
 10238  0AD3                     i1_nrf24l01SetRXMode:	
 10239                           
 10240                           ;incstack = 0
 10241                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 10242                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 10243  0AD3  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
 10244                           
 10245                           ;nrf24l01.c: 56: if (rxMode){
 10246  0AD4  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10247  0AD5  1903               	btfsc	3,2
 10248  0AD6  2AD9               	goto	i1l3097
 10249                           
 10250                           ;nrf24l01.c: 57: if (nrf24l01.TXBusy){
 10251  0AD7  187D               	btfsc	_nrf24l01,0	;volatile
 10252  0AD8  0008               	return
 10253  0AD9                     i1l3097:	
 10254                           ;nrf24l01.c: 58: return;
 10255                           
 10256                           
 10257                           ;nrf24l01.c: 59: };nrf24l01.c: 60: };nrf24l01.c: 62: n_CONFIG_t config;;nrf24l01.c: 65: 
      +                          config.byte = nrf24l01Send((unsigned) 0b00000000 | (unsigned) 0x00, 0);
 10258  0AD9  01F1               	clrf	i1nrf24l01Send@data
 10259  0ADA  3000               	movlw	0
 10260  0ADB  3196  26F2  318A   	fcall	i1_nrf24l01Send
 10261  0ADE  00F4               	movwf	??i1_nrf24l01SetRXMode
 10262  0ADF  0874               	movf	??i1_nrf24l01SetRXMode,w
 10263  0AE0  00F5               	movwf	i1nrf24l01SetRXMode@config
 10264                           
 10265                           ;nrf24l01.c: 68: if (config.PRIM_RX != rxMode){
 10266  0AE1  0875               	movf	i1nrf24l01SetRXMode@config,w
 10267  0AE2  3901               	andlw	1
 10268  0AE3  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 10269  0AE4  1903               	skipnz
 10270  0AE5  2B11               	goto	i1l3117
 10271                           
 10272                           ;nrf24l01.c: 71: nrf24l01CELow();
 10273  0AE6  3196  2630  318A   	fcall	_nrf24l01CELow
 10274                           
 10275                           ;nrf24l01.c: 72: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10276  0AE9  30E4               	movlw	228
 10277  0AEA                     u373_27:	
 10278  0AEA  3200               	nop2
 10279  0AEB  3200               	nop2
 10280  0AEC  0B89               	decfsz	9,f
 10281  0AED  2AEA               	goto	u373_27
 10282  0AEE  3200               	nop2
 10283  0AEF  3200               	nop2
 10284                           
 10285                           ;nrf24l01.c: 75: config.PRIM_RX = rxMode;
 10286  0AF0  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10287  0AF1  3901               	andlw	1
 10288  0AF2  1075               	bcf	i1nrf24l01SetRXMode@config,0
 10289  0AF3  1D03               	skipz
 10290  0AF4  1475               	bsf	i1nrf24l01SetRXMode@config,0
 10291                           
 10292                           ;nrf24l01.c: 76: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
 10293  0AF5  0875               	movf	i1nrf24l01SetRXMode@config,w
 10294  0AF6  00F4               	movwf	??i1_nrf24l01SetRXMode
 10295  0AF7  0874               	movf	??i1_nrf24l01SetRXMode,w
 10296  0AF8  00F1               	movwf	i1nrf24l01Send@data
 10297  0AF9  3020               	movlw	32
 10298  0AFA  3196  26F2  318A   	fcall	i1_nrf24l01Send
 10299                           
 10300                           ;nrf24l01.c: 79: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10301  0AFD  30E4               	movlw	228
 10302  0AFE                     u374_27:	
 10303  0AFE  3200               	nop2
 10304  0AFF  3200               	nop2
 10305  0B00  0B89               	decfsz	9,f
 10306  0B01  2AFE               	goto	u374_27
 10307  0B02  3200               	nop2
 10308  0B03  3200               	nop2
 10309                           
 10310                           ;nrf24l01.c: 82: if (rxMode){
 10311  0B04  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10312  0B05  1903               	btfsc	3,2
 10313  0B06  2B11               	goto	i1l3117
 10314                           
 10315                           ;nrf24l01.c: 83: nrf24l01CEHigh();
 10316  0B07  3196  262D  318A   	fcall	_nrf24l01CEHigh
 10317                           
 10318                           ;nrf24l01.c: 84: _delay((unsigned long)((200)*(32000000/4000000.0)));
 10319  0B0A  30E4               	movlw	228
 10320  0B0B                     u375_27:	
 10321  0B0B  3200               	nop2
 10322  0B0C  3200               	nop2
 10323  0B0D  0B89               	decfsz	9,f
 10324  0B0E  2B0B               	goto	u375_27
 10325  0B0F  3200               	nop2
 10326  0B10  3200               	nop2
 10327  0B11                     i1l3117:	
 10328                           
 10329                           ;nrf24l01.c: 85: };nrf24l01.c: 86: };nrf24l01.c: 89: nrf24l01.RXMode = rxMode;
 10330  0B11  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 10331  0B12  3901               	andlw	1
 10332  0B13  117D               	bcf	_nrf24l01,2	;volatile
 10333  0B14  1D03               	skipz
 10334  0B15  157D               	bsf	_nrf24l01,2	;volatile
 10335  0B16  0008               	return
 10336  0B17                     __end_ofi1_nrf24l01SetRXMode:	
 10337                           
 10338                           	psect	text50
 10339  16F2                     __ptext50:	
 10340 ;; *************** function i1_nrf24l01Send *****************
 10341 ;; Defined at:
 10342 ;;		line 9 in file "nrf24l01.c"
 10343 ;; Parameters:    Size  Location     Type
 10344 ;;  command         1    wreg     unsigned char 
 10345 ;;  data            1    1[COMMON] unsigned char 
 10346 ;; Auto vars:     Size  Location     Type
 10347 ;;  command         1    3[COMMON] unsigned char 
 10348 ;; Return value:  Size  Location     Type
 10349 ;;                  1    wreg      unsigned char 
 10350 ;; Registers used:
 10351 ;;		wreg, status,2, status,0, pclath, cstack
 10352 ;; Tracked objects:
 10353 ;;		On entry : 0/0
 10354 ;;		On exit  : 0/0
 10355 ;;		Unchanged: 0/0
 10356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10357 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10358 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10359 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10360 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10361 ;;Total ram usage:        3 bytes
 10362 ;; Hardware stack levels used:    1
 10363 ;; Hardware stack levels required when called:    2
 10364 ;; This function calls:
 10365 ;;		_enableInterrupts
 10366 ;;		_nrf24l01SPIEnd
 10367 ;;		_nrf24l01SPISend
 10368 ;;		_nrf24l01SPIStart
 10369 ;; This function is called by:
 10370 ;;		_nrf24l01ReceivePacket
 10371 ;;		_nrf24l01ISR
 10372 ;;		i1_nrf24l01SetRXMode
 10373 ;; This function uses a non-reentrant model
 10374 ;;
 10375                           
 10376                           
 10377                           ;psect for function i1_nrf24l01Send
 10378  16F2                     i1_nrf24l01Send:	
 10379                           
 10380                           ;incstack = 0
 10381                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 10382                           ;i1nrf24l01Send@command stored from wreg
 10383  16F2  00F3               	movwf	i1nrf24l01Send@command
 10384                           
 10385                           ;nrf24l01.c: 12: enableInterrupts(0);
 10386  16F3  3000               	movlw	0
 10387  16F4  3196  2646  3196   	fcall	_enableInterrupts
 10388                           
 10389                           ;nrf24l01.c: 15: nrf24l01SPIStart();
 10390  16F7  3196  264E  3196   	fcall	_nrf24l01SPIStart
 10391                           
 10392                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
 10393  16FA  0873               	movf	i1nrf24l01Send@command,w
 10394  16FB  3196  2656  3196   	fcall	_nrf24l01SPISend
 10395                           
 10396                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
 10397  16FE  0871               	movf	i1nrf24l01Send@data,w
 10398  16FF  3196  2656  3196   	fcall	_nrf24l01SPISend
 10399  1702  00F2               	movwf	??i1_nrf24l01Send
 10400  1703  0872               	movf	??i1_nrf24l01Send,w
 10401  1704  00F1               	movwf	i1nrf24l01Send@data
 10402                           
 10403                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
 10404  1705  3196  263F  3196   	fcall	_nrf24l01SPIEnd
 10405                           
 10406                           ;nrf24l01.c: 27: enableInterrupts(1);
 10407  1708  3001               	movlw	1
 10408  1709  3196  2646         	fcall	_enableInterrupts
 10409                           
 10410                           ;nrf24l01.c: 29: return data;
 10411  170B  0871               	movf	i1nrf24l01Send@data,w
 10412  170C  0008               	return
 10413  170D                     __end_ofi1_nrf24l01Send:	
 10414                           
 10415                           	psect	text51
 10416  164E                     __ptext51:	
 10417 ;; *************** function _nrf24l01SPIStart *****************
 10418 ;; Defined at:
 10419 ;;		line 64 in file "interface.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;		None
 10422 ;; Auto vars:     Size  Location     Type
 10423 ;;		None
 10424 ;; Return value:  Size  Location     Type
 10425 ;;                  1    wreg      void 
 10426 ;; Registers used:
 10427 ;;		wreg, status,2, status,0, pclath, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;Total ram usage:        0 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    8
 10440 ;; This function calls:
 10441 ;;		_nrf24l01CSLow
 10442 ;; This function is called by:
 10443 ;;		_nrf24l01Send
 10444 ;;		_nrf24l01ReceivePacket
 10445 ;;		_nrf24l01SendPacket
 10446 ;;		_nrf24l01SetTXPipe
 10447 ;;		_nrf24l01InitRegisters
 10448 ;;		i1_nrf24l01Send
 10449 ;; This function uses a non-reentrant model
 10450 ;;
 10451                           
 10452                           
 10453                           ;psect for function _nrf24l01SPIStart
 10454  164E                     _nrf24l01SPIStart:	
 10455                           
 10456                           ;interface.c: 65: nrf24l01CSLow();
 10457                           
 10458                           ;incstack = 0
 10459 ;; hardware stack exceeded
 10460                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 10461  164E  3196  2636  3196   	fcall	_nrf24l01CSLow
 10462                           
 10463                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10464  1651  301A               	movlw	26
 10465  1652                     u376_27:	
 10466  1652  0B89               	decfsz	9,f
 10467  1653  2E52               	goto	u376_27
 10468  1654  3200               	nop2
 10469  1655  0008               	return
 10470  1656                     __end_of_nrf24l01SPIStart:	
 10471                           
 10472                           	psect	text52
 10473  1636                     __ptext52:	
 10474 ;; *************** function _nrf24l01CSLow *****************
 10475 ;; Defined at:
 10476 ;;		line 17 in file "interface.c"
 10477 ;; Parameters:    Size  Location     Type
 10478 ;;		None
 10479 ;; Auto vars:     Size  Location     Type
 10480 ;;		None
 10481 ;; Return value:  Size  Location     Type
 10482 ;;                  1    wreg      void 
 10483 ;; Registers used:
 10484 ;;		None
 10485 ;; Tracked objects:
 10486 ;;		On entry : 0/0
 10487 ;;		On exit  : 0/0
 10488 ;;		Unchanged: 0/0
 10489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;Total ram usage:        0 bytes
 10495 ;; Hardware stack levels used:    1
 10496 ;; Hardware stack levels required when called:    7
 10497 ;; This function calls:
 10498 ;;		Nothing
 10499 ;; This function is called by:
 10500 ;;		_nrf24l01SPIStart
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           
 10505                           ;psect for function _nrf24l01CSLow
 10506  1636                     _nrf24l01CSLow:	
 10507                           
 10508                           ;interface.c: 18: PORTAbits.RA1 = 0;
 10509                           
 10510                           ;incstack = 0
 10511 ;; hardware stack exceeded
 10512                           ; Regs used in _nrf24l01CSLow: []
 10513  1636  0020               	movlb	0	; select bank0
 10514  1637  108C               	bcf	12,1	;volatile
 10515  1638  0008               	return
 10516  1639                     __end_of_nrf24l01CSLow:	
 10517                           
 10518                           	psect	text53
 10519  1656                     __ptext53:	
 10520 ;; *************** function _nrf24l01SPISend *****************
 10521 ;; Defined at:
 10522 ;;		line 51 in file "interface.c"
 10523 ;; Parameters:    Size  Location     Type
 10524 ;;  data            1    wreg     unsigned char 
 10525 ;; Auto vars:     Size  Location     Type
 10526 ;;  data            1    0[COMMON] unsigned char 
 10527 ;; Return value:  Size  Location     Type
 10528 ;;                  1    wreg      unsigned char 
 10529 ;; Registers used:
 10530 ;;		wreg
 10531 ;; Tracked objects:
 10532 ;;		On entry : 0/0
 10533 ;;		On exit  : 0/0
 10534 ;;		Unchanged: 0/0
 10535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;Total ram usage:        0 bytes
 10541 ;; Hardware stack levels used:    1
 10542 ;; Hardware stack levels required when called:    7
 10543 ;; This function calls:
 10544 ;;		Nothing
 10545 ;; This function is called by:
 10546 ;;		_nrf24l01Send
 10547 ;;		_nrf24l01ReceivePacket
 10548 ;;		_nrf24l01SendPacket
 10549 ;;		_nrf24l01SetTXPipe
 10550 ;;		_nrf24l01InitRegisters
 10551 ;;		i1_nrf24l01Send
 10552 ;; This function uses a non-reentrant model
 10553 ;;
 10554                           
 10555                           
 10556                           ;psect for function _nrf24l01SPISend
 10557  1656                     _nrf24l01SPISend:	
 10558                           
 10559                           ;incstack = 0
 10560 ;; hardware stack exceeded
 10561                           ; Regs used in _nrf24l01SPISend: [wreg]
 10562                           ;nrf24l01SPISend@data stored from wreg
 10563  1656  00F0               	movwf	nrf24l01SPISend@data
 10564                           
 10565                           ;interface.c: 52: SSP1BUF = data;
 10566  1657  0870               	movf	nrf24l01SPISend@data,w
 10567  1658  0024               	movlb	4	; select bank4
 10568  1659  0091               	movwf	17	;volatile
 10569                           
 10570                           ;interface.c: 54: PORTCbits.RC4 = 1;
 10571  165A  0020               	movlb	0	; select bank0
 10572  165B  160E               	bsf	14,4	;volatile
 10573  165C                     i1l48:	
 10574                           ;interface.c: 56: while (!SSP1STATbits.BF){
 10575                           
 10576  165C  0024               	movlb	4	; select bank4
 10577  165D  1814               	btfsc	20,0	;volatile
 10578  165E  2E61               	goto	i1l2433
 10579                           
 10580                           ;interface.c: 57: __nop();
 10581  165F  0000               	nop
 10582  1660  2E5C               	goto	i1l48
 10583  1661                     i1l2433:	
 10584                           
 10585                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 10586  1661  0811               	movf	17,w	;volatile
 10587  1662  0008               	return
 10588  1663                     __end_of_nrf24l01SPISend:	
 10589                           
 10590                           	psect	text54
 10591  163F                     __ptext54:	
 10592 ;; *************** function _nrf24l01SPIEnd *****************
 10593 ;; Defined at:
 10594 ;;		line 70 in file "interface.c"
 10595 ;; Parameters:    Size  Location     Type
 10596 ;;		None
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;		None
 10599 ;; Return value:  Size  Location     Type
 10600 ;;                  1    wreg      void 
 10601 ;; Registers used:
 10602 ;;		wreg, status,2, status,0, pclath, cstack
 10603 ;; Tracked objects:
 10604 ;;		On entry : 0/0
 10605 ;;		On exit  : 0/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;Total ram usage:        0 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; Hardware stack levels required when called:    8
 10615 ;; This function calls:
 10616 ;;		_nrf24l01CSHigh
 10617 ;; This function is called by:
 10618 ;;		_nrf24l01Send
 10619 ;;		_nrf24l01ReceivePacket
 10620 ;;		_nrf24l01SendPacket
 10621 ;;		_nrf24l01SetTXPipe
 10622 ;;		_nrf24l01InitRegisters
 10623 ;;		i1_nrf24l01Send
 10624 ;; This function uses a non-reentrant model
 10625 ;;
 10626                           
 10627                           
 10628                           ;psect for function _nrf24l01SPIEnd
 10629  163F                     _nrf24l01SPIEnd:	
 10630                           
 10631                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 10632                           
 10633                           ;incstack = 0
 10634 ;; hardware stack exceeded
 10635                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 10636  163F  301A               	movlw	26
 10637  1640                     u377_27:	
 10638  1640  0B89               	decfsz	9,f
 10639  1641  2E40               	goto	u377_27
 10640  1642  3200               	nop2
 10641                           
 10642                           ;interface.c: 72: nrf24l01CSHigh();
 10643  1643  3196  2633         	fcall	_nrf24l01CSHigh
 10644  1645  0008               	return
 10645  1646                     __end_of_nrf24l01SPIEnd:	
 10646                           
 10647                           	psect	text55
 10648  1633                     __ptext55:	
 10649 ;; *************** function _nrf24l01CSHigh *****************
 10650 ;; Defined at:
 10651 ;;		line 22 in file "interface.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;		None
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;		None
 10656 ;; Return value:  Size  Location     Type
 10657 ;;                  1    wreg      void 
 10658 ;; Registers used:
 10659 ;;		None
 10660 ;; Tracked objects:
 10661 ;;		On entry : 0/0
 10662 ;;		On exit  : 0/0
 10663 ;;		Unchanged: 0/0
 10664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;Total ram usage:        0 bytes
 10670 ;; Hardware stack levels used:    1
 10671 ;; Hardware stack levels required when called:    7
 10672 ;; This function calls:
 10673 ;;		Nothing
 10674 ;; This function is called by:
 10675 ;;		_nrf24l01SPIEnd
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           
 10680                           ;psect for function _nrf24l01CSHigh
 10681  1633                     _nrf24l01CSHigh:	
 10682                           
 10683                           ;interface.c: 23: PORTAbits.RA1 = 1;
 10684                           
 10685                           ;incstack = 0
 10686 ;; hardware stack exceeded
 10687                           ; Regs used in _nrf24l01CSHigh: []
 10688  1633  0020               	movlb	0	; select bank0
 10689  1634  148C               	bsf	12,1	;volatile
 10690  1635  0008               	return
 10691  1636                     __end_of_nrf24l01CSHigh:	
 10692                           
 10693                           	psect	text56
 10694  1646                     __ptext56:	
 10695 ;; *************** function _enableInterrupts *****************
 10696 ;; Defined at:
 10697 ;;		line 76 in file "interface.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;  enable          1    wreg     unsigned char 
 10700 ;; Auto vars:     Size  Location     Type
 10701 ;;  enable          1    0[COMMON] unsigned char 
 10702 ;; Return value:  Size  Location     Type
 10703 ;;                  1    wreg      void 
 10704 ;; Registers used:
 10705 ;;		wreg, status,0
 10706 ;; Tracked objects:
 10707 ;;		On entry : 0/0
 10708 ;;		On exit  : 0/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;Total ram usage:        0 bytes
 10716 ;; Hardware stack levels used:    1
 10717 ;; Hardware stack levels required when called:    7
 10718 ;; This function calls:
 10719 ;;		Nothing
 10720 ;; This function is called by:
 10721 ;;		_nrf24l01Send
 10722 ;;		_nrf24l01SendPacket
 10723 ;;		i1_nrf24l01Send
 10724 ;; This function uses a non-reentrant model
 10725 ;;
 10726                           
 10727                           
 10728                           ;psect for function _enableInterrupts
 10729  1646                     _enableInterrupts:	
 10730                           
 10731                           ;incstack = 0
 10732 ;; hardware stack exceeded
 10733                           ; Regs used in _enableInterrupts: [wreg+status,0]
 10734                           ;enableInterrupts@enable stored from wreg
 10735  1646  00F0               	movwf	enableInterrupts@enable
 10736                           
 10737                           ;interface.c: 77: PIE0bits.INTE = enable;
 10738  1647  0C70               	rrf	enableInterrupts@enable,w
 10739  1648  0021               	movlb	1	; select bank1
 10740  1649  1C03               	skipc
 10741  164A  1010               	bcf	16,0	;volatile
 10742  164B  1803               	skipnc
 10743  164C  1410               	bsf	16,0	;volatile
 10744  164D  0008               	return
 10745  164E                     __end_of_enableInterrupts:	
 10746                           
 10747                           	psect	text57
 10748  1630                     __ptext57:	
 10749 ;; *************** function _nrf24l01CELow *****************
 10750 ;; Defined at:
 10751 ;;		line 7 in file "interface.c"
 10752 ;; Parameters:    Size  Location     Type
 10753 ;;		None
 10754 ;; Auto vars:     Size  Location     Type
 10755 ;;		None
 10756 ;; Return value:  Size  Location     Type
 10757 ;;                  1    wreg      void 
 10758 ;; Registers used:
 10759 ;;		None
 10760 ;; Tracked objects:
 10761 ;;		On entry : 0/0
 10762 ;;		On exit  : 0/0
 10763 ;;		Unchanged: 0/0
 10764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;Total ram usage:        0 bytes
 10770 ;; Hardware stack levels used:    1
 10771 ;; Hardware stack levels required when called:    7
 10772 ;; This function calls:
 10773 ;;		Nothing
 10774 ;; This function is called by:
 10775 ;;		_nrf24l01SetRXMode
 10776 ;;		_nrf24l01ReceivePacket
 10777 ;;		_nrf24l01SendPacket
 10778 ;;		_nrf24l01Init
 10779 ;;		i1_nrf24l01SetRXMode
 10780 ;; This function uses a non-reentrant model
 10781 ;;
 10782                           
 10783                           
 10784                           ;psect for function _nrf24l01CELow
 10785  1630                     _nrf24l01CELow:	
 10786                           
 10787                           ;interface.c: 8: PORTAbits.RA0 = 0;
 10788                           
 10789                           ;incstack = 0
 10790 ;; hardware stack exceeded
 10791                           ; Regs used in _nrf24l01CELow: []
 10792  1630  0020               	movlb	0	; select bank0
 10793  1631  100C               	bcf	12,0	;volatile
 10794  1632  0008               	return
 10795  1633                     __end_of_nrf24l01CELow:	
 10796                           
 10797                           	psect	text58
 10798  162D                     __ptext58:	
 10799 ;; *************** function _nrf24l01CEHigh *****************
 10800 ;; Defined at:
 10801 ;;		line 12 in file "interface.c"
 10802 ;; Parameters:    Size  Location     Type
 10803 ;;		None
 10804 ;; Auto vars:     Size  Location     Type
 10805 ;;		None
 10806 ;; Return value:  Size  Location     Type
 10807 ;;                  1    wreg      void 
 10808 ;; Registers used:
 10809 ;;		None
 10810 ;; Tracked objects:
 10811 ;;		On entry : 0/0
 10812 ;;		On exit  : 0/0
 10813 ;;		Unchanged: 0/0
 10814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;Total ram usage:        0 bytes
 10820 ;; Hardware stack levels used:    1
 10821 ;; Hardware stack levels required when called:    7
 10822 ;; This function calls:
 10823 ;;		Nothing
 10824 ;; This function is called by:
 10825 ;;		_nrf24l01SetRXMode
 10826 ;;		_nrf24l01ReceivePacket
 10827 ;;		_nrf24l01SendPacket
 10828 ;;		_nrf24l01Init
 10829 ;;		i1_nrf24l01SetRXMode
 10830 ;; This function uses a non-reentrant model
 10831 ;;
 10832                           
 10833                           
 10834                           ;psect for function _nrf24l01CEHigh
 10835  162D                     _nrf24l01CEHigh:	
 10836                           
 10837                           ;interface.c: 13: PORTAbits.RA0 = 1;
 10838                           
 10839                           ;incstack = 0
 10840 ;; hardware stack exceeded
 10841                           ; Regs used in _nrf24l01CEHigh: []
 10842  162D  0020               	movlb	0	; select bank0
 10843  162E  140C               	bsf	12,0	;volatile
 10844  162F  0008               	return
 10845  1630                     __end_of_nrf24l01CEHigh:	
 10846                           
 10847                           	psect	text59
 10848  082E                     __ptext59:	
 10849 ;; *************** function _strcmp *****************
 10850 ;; Defined at:
 10851 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;  s1              2    0[COMMON] PTR const unsigned char 
 10854 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), RXPacket.Message(32), 
 10855 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 10856 ;;  s2              1    2[COMMON] PTR const unsigned char 
 10857 ;;		 -> RXPacket.Message(32), RXPacket(33), 
 10858 ;; Auto vars:     Size  Location     Type
 10859 ;;  r               1    4[COMMON] char 
 10860 ;; Return value:  Size  Location     Type
 10861 ;;                  2    0[COMMON] int 
 10862 ;; Registers used:
 10863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10864 ;; Tracked objects:
 10865 ;;		On entry : 0/0
 10866 ;;		On exit  : 0/0
 10867 ;;		Unchanged: 0/0
 10868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10869 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10872 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10873 ;;Total ram usage:        5 bytes
 10874 ;; Hardware stack levels used:    1
 10875 ;; This function calls:
 10876 ;;		Nothing
 10877 ;; This function is called by:
 10878 ;;		_nrf24l01CheckACK
 10879 ;; This function uses a non-reentrant model
 10880 ;;
 10881                           
 10882                           
 10883                           ;psect for function _strcmp
 10884  082E                     _strcmp:	
 10885                           
 10886                           ;incstack = 0
 10887                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
 10888  082E  2837               	goto	i1l3003
 10889  082F                     i1l2999:	
 10890  082F  3001               	movlw	1
 10891  0830  07F0               	addwf	strcmp@s1,f
 10892  0831  3000               	movlw	0
 10893  0832  3DF1               	addwfc	strcmp@s1+1,f
 10894  0833  3001               	movlw	1
 10895  0834  00F3               	movwf	??_strcmp
 10896  0835  0873               	movf	??_strcmp,w
 10897  0836  07F2               	addwf	strcmp@s2,f
 10898  0837                     i1l3003:	
 10899  0837  0870               	movf	strcmp@s1,w
 10900  0838  0086               	movwf	6
 10901  0839  0871               	movf	strcmp@s1+1,w
 10902  083A  0087               	movwf	7
 10903  083B  0872               	movf	strcmp@s2,w
 10904  083C  0084               	movwf	4
 10905  083D  3001               	movlw	1	; select bank2/3
 10906  083E  0085               	movwf	5
 10907  083F  0300               	decf	0,w
 10908  0840  3AFF               	xorlw	255
 10909  0841  0701               	addwf	1,w
 10910  0842  00F3               	movwf	??_strcmp
 10911  0843  0873               	movf	??_strcmp,w
 10912  0844  00F4               	movwf	strcmp@r
 10913  0845  0874               	movf	strcmp@r,w
 10914  0846  1D03               	btfss	3,2
 10915  0847  284F               	goto	i1l3007
 10916  0848  0870               	movf	strcmp@s1,w
 10917  0849  0086               	movwf	6
 10918  084A  0871               	movf	strcmp@s1+1,w
 10919  084B  0087               	movwf	7
 10920  084C  0801               	movf	1,w
 10921  084D  1D03               	btfss	3,2
 10922  084E  282F               	goto	i1l2999
 10923  084F                     i1l3007:	
 10924  084F  0874               	movf	strcmp@r,w
 10925  0850  00F0               	movwf	?_strcmp
 10926  0851  01F1               	clrf	?_strcmp+1
 10927  0852  1BF0               	btfsc	?_strcmp,7
 10928  0853  03F1               	decf	?_strcmp+1,f
 10929  0854  0008               	return
 10930  0855                     __end_of_strcmp:	
 10931                           
 10932                           	psect	text60
 10933  162B                     __ptext60:	
 10934 ;; *************** function _exception *****************
 10935 ;; Defined at:
 10936 ;;		line 80 in file "interface.c"
 10937 ;; Parameters:    Size  Location     Type
 10938 ;;  exception       1    wreg     unsigned char 
 10939 ;; Auto vars:     Size  Location     Type
 10940 ;;  exception       1    0[COMMON] unsigned char 
 10941 ;; Return value:  Size  Location     Type
 10942 ;;                  1    wreg      void 
 10943 ;; Registers used:
 10944 ;;		wreg
 10945 ;; Tracked objects:
 10946 ;;		On entry : 0/0
 10947 ;;		On exit  : 0/0
 10948 ;;		Unchanged: 0/0
 10949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10954 ;;Total ram usage:        0 bytes
 10955 ;; Hardware stack levels used:    1
 10956 ;; This function calls:
 10957 ;;		Nothing
 10958 ;; This function is called by:
 10959 ;;		_nrf24l01ISR
 10960 ;; This function uses a non-reentrant model
 10961 ;;
 10962                           
 10963                           
 10964                           ;psect for function _exception
 10965  162B                     _exception:	
 10966                           
 10967                           ;incstack = 0
 10968                           ; Regs used in _exception: [wreg]
 10969  162B  0001               	reset	;# 
 10970  162C  0008               	return
 10971  162D                     __end_of_exception:	
 10972  007E                     btemp	set	126	;btemp
 10973  007E                     int$flags	set	126
 10974  007E                     wtemp0	set	126


Data Sizes:
    Strings     49
    Constant    46
    Data        1
    BSS         85
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80     72      76
    BANK2            80     48      68
    BANK3            80      0      61
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> setMessage@status(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), RXPacket.Message(BANK3[32]), 
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), RXPacket.Message(BANK3[32]), 
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), romDataMap(BANK3[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), RXPacket.Message(BANK3[32]), 
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 28
		 -> romDataMap.name(BANK3[16]), ftoa@buf(BANK2[17]), STR_9(CODE[5]), STR_7(CODE[6]), 
		 -> STR_6(CODE[7]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), romDataMap(BANK3[28]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_10(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@Packet	PTR struct . size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    TXPacket	PTR struct . size(2) Largest target is 33
		 -> NULL(NULL[0]), RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    nrf24l01SendACK@packet	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_9(CODE[5]), STR_7(CODE[6]), STR_6(CODE[7]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[4]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    setMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    handleRXData@RXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01ReceivePacket
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _sleep->_handleRXData
    _handleRXData->_nrf24l01SendACK
    _nrf24l01SendACK->_nrf24l01SendPacket
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SendPacket->_nrf24l01ChangeTXPower
    _nrf24l01SetRXMode->_nrf24l01Send
    _setMessage->_ftoa
    _strcat->_ftoa
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_setMessage
    _setMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0  112298
                                             36 BANK1     36    36      0
                           ___lbtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5331
                                             19 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5331
                                              7 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2239
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     658
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                49    49      0   67943
                                             35 BANK1      1     1      0
                                              0 BANK2     48    48      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                2     0      2    9176
                                             18 BANK0      2     0      2
                            ___lwdiv
                         _doWDTSleep
                       _handleRXData
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _handleRXData                                         2     2      0    5913
                                             16 BANK0      2     2      0
                _nrf24l01GetRXPacket
                    _nrf24l01SendACK
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SendACK                                      2     2      0    5868
                                             14 BANK0      2     2      0
                 _nrf24l01SendPacket
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SetTXPipe                                    3     3      0     314
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SendPacket                                   7     5      2    5386
                                              7 BANK0      7     5      2
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     170
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2299
                                              3 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     340
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          10     3      7   17903
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     743
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     476
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   15156
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3131
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4770
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3655
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     314
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   11891
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (2) _doWDTSleep                                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    3965
                                             27 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4525
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3242
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              7 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              3 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    2143
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    2995
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2973
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                 0     0      0    1578
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (11) _nrf24l01ISR                                         2     2      0    1578
                                             11 COMMON     2     2      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01ReceivePacket                               3     3      0     534
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) i1_memset                                            8     2      6     152
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CheckACK                                    3     3      0     643
                                              7 COMMON     3     3      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (13) i1_nrf24l01SetRXMode                                 3     3      0     423
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (14) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _strcmp                                              5     2      3     220
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (12) _exception                                           1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lbtoft
     ___ftpack
   _loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___lbtoft
       ___ftpack
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       ___lbtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
       _memset (ARG)
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
     _sleep
       ___lwdiv
       _doWDTSleep
       _handleRXData
         _nrf24l01GetRXPacket
         _nrf24l01SendACK
           _nrf24l01SendPacket
             _enableInterrupts
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01ChangeTXPower
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
             _nrf24l01SetRXMode
               _nrf24l01CEHigh
               _nrf24l01CELow
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _strlen
           _nrf24l01SetTXPipe
             ___bmul
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     ___lbtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _memset (ARG)
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
   _sleep
     ___lwdiv
     _doWDTSleep
     _handleRXData
       _nrf24l01GetRXPacket
       _nrf24l01SendACK
         _nrf24l01SendPacket
           _enableInterrupts
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01ChangeTXPower
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strlen
         _nrf24l01SetTXPipe
           ___bmul
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     30      44       9       85.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Jul 29 17:08:49 2018

                ___bmul@product 0022                     __CFG_CP$OFF 0000             ___wmul@multiplicand 0022  
           nrf24l01Send@command 0022                    ___ftadd@exp1 003A                    ___ftadd@exp2 0039  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0038                             l305 069A  
                           l190 0DA5                             l338 17CA                             l470 0179  
                           l462 00F5                             l459 00D6                             l485 1731  
                           l719 0551                             l695 0C8A                             l696 0C92  
                           l688 0C77                             l779 0D26                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             wreg 0009               sleep@milliseconds 0032  
           nrf24l01SendPacket@i 002D                            ?_ISR 0070                    ___ftdiv@cntr 0045  
                  ___ftdiv@sign 004A                  ??_nrf24l01Init 0033                            l2401 0C4D  
                          l3019 17E9                            l3035 0E1B                            l2405 0C54  
                          l3029 0E05                            l2415 0C7C                            l2407 0C5E  
                          l2335 0B62                            l2417 0C84                            l2409 0C63  
                          l3057 0E75                            l3049 0E5C                            l3145 0A1D  
                          l2371 0A88                            l2611 0527                            l2603 050A  
                          l3171 0D74                            l3083 0957                            l3075 0939  
                          l2355 0B9D                            l2507 076B                            l3155 0A4C  
                          l2365 0A76                            l2621 0543                            l2613 052C  
                          l3173 0D7C                            l2533 1670                            l3077 0945  
                          l2509 073A                            l3157 0A32                            l3341 0479  
                          l3333 042F                            l2631 0575                            l2623 054D  
                          l2615 0530                            l3183 0DC7                            l3175 0D68  
                          l3087 0960                            l2455 069F                            l3503 096A  
                          l2641 0590                            l2609 051D                            l2705 0094  
                          l2377 1783                            l2481 070E                            l2473 06D4  
                          l2457 06B0                            l2385 1675                            l3505 098D  
                ??_nrf24l01Send 0021                            l2627 0563                            l3187 0DDF  
                          l2811 0EAE                            l2571 0C3B                            l2651 0A99  
                          l2539 172B                            l2723 00DD                            l2715 00A3  
                          l2379 178F                            l3347 0488                            l3515 07E9  
                          l2581 04DA                            l3189 0DE6                            l2557 0C02  
                          l2653 0AA7                            l2661 0ACA                            l2717 00D2  
                          l2477 06ED                            l2389 167B                            l2591 04F0  
                          l2903 0D1C                            l2567 0C30                            l2559 0C10  
                          l2751 0156                            l2719 00D8                            l2495 0724  
                          l3439 022D                            l3391 08C5                            l2585 04E1  
                          l2841 0F1B                            l2833 0F07                            l2817 0EC4  
                          l2905 0D2A                            l2657 0ABF                            l2761 018C  
                          l2745 0129                            l2729 0104                            l2497 0735  
                          l3385 08AD                            l3633 0FFC                            l2771 01A4  
                          l2763 018F                            l2755 0165                            l2739 0123  
                          l2691 0056                            l3387 08B9                            l3395 08CE  
                          l2845 0F23                            l2829 0EFF                            l2909 0D38  
                          l2917 0881                            l2781 01F4                            l2919 0891  
                          l2793 0A05                            l2777 01E9                            l2697 0066  
                          l2961 085A                            l2867 1768                            l2779 0033  
                          l2955 16DE                            l2963 0866                            l2947 1694  
                          l2789 09EF                            l2877 0CC4                            l2965 086E  
                          l2895 0CFD                            l2897 0D0E                            l2977 05EE  
                          l2995 17D6                            STR_1 1835                    __CFG_WDTE$ON 0000  
                          STR_2 1835                            STR_3 1831                            STR_4 181E  
                          STR_5 1823                            STR_6 180C                            STR_7 1813  
                          STR_8 182D                            STR_9 1828                            u2025 0C99  
                          u3005 0886                            u2205 0C05                            u2225 0C11  
                          u2235 0C25                            u2075 0708                            u2245 0C31  
                          u2165 1732                            u2415 0531                            u2175 1737  
                          u3215 093C                            u3145 0E2D                            u2505 0A9C  
                          u2355 050B                            u3155 0E3D                            u3235 0946  
                          u3084 17D0                            u2445 0544                            u3165 0E5D  
                          u2525 0AB5                            u3245 0950                            u3085 17CF  
                          u3175 0E6C                            u2535 0AC0                            u3255 0958  
                          u2385 051E                            u3185 0E76                            u3505 08BF  
                          u3515 08C6                            u2645 014C                            u1855 0A64  
                          u2815 0F08                            u1945 0C59                            u2825 0F0E  
                          u2665 015D                            u3617 0F6D                            u2915 0CCC  
                          u2675 016F                            u3707 0B74                            u3627 0816  
                          u1965 0C72                            u2685 0181                            u3717 0B89  
                          u3485 08B0                            u3637 0825                            u2855 0F24  
                          u3727 0B97                            u3647 06AA                            u1985 0C7F  
                          u2865 0F2A                            u2785 0ED0                            u2945 0CFE  
                          u3657 0715                            u3585 097B                            u2795 0EE0  
                          u3667 072F                            u3677 0750                            u2975 0D1D  
                          u3687 075C                            i1l48 165C                            u3697 076F  
                          _WPUA 020C                            _WPUC 020E  __size_of_nrf24l01InterfaceInit 001C  
                  __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 1760  
                          _main 0F4B                            _ftoa 05A8                    ___ftpack@arg 0020  
                          _loop 01FA                    ___ftpack@exp 0023                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          indf1 0001                            fsr1l 0006                            btemp 007E  
__size_of_nrf24l01ReceivePacket 004D                   __CFG_BORV$LOW 0000   __end_of_nrf24l01ReceivePacket 0BF1  
                          start 000F           nrf24l01SetRXPipe@pipe 0025                   __CFG_CSWEN$ON 0000  
             ___bmul@multiplier 0023                   __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0065  
                  ___ftmul@sign 0066     __size_of_nrf24l01SendPacket 00DB                           ??_ISR 007D  
                  ___fttol@exp1 00A5            __size_of_getADCValue 00A6                 ??_nrf24l01CELow 0070  
                  ___fttol@lval 00A1                 ??_nrf24l01CSLow 0070                           ?_main 0070  
                         ?_ftoa 00A6                           ?_loop 0070                 __end_of___ftadd 05A8  
                         STR_10 1801                 __end_of___ftdiv 0E97                 __end_of___ftneg 080A  
               __end_of___lldiv 0C44                 __end_of___ftmul 0F4B                 __end_of___llmod 0AD3  
               __end_of___ftsub 177E                 __end_of___fttol 0D48                  __CFG_DEBUG$OFF 0000  
               __end_of___lwdiv 0965                           i1l330 09CF                           i1l167 000D  
               __end_of___lwmod 08D3          enableInterrupts@enable 0070                      i1memset@p1 0070  
                 __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D  
                 ___awtoft@sign 002D                 __end_of_dpowers 1028                 __end_of_isdigit 1672  
                         _sleep 0A14                   ___ftpack@sign 0024                           ftoa@f 00A6  
                         ftoa@l 00AE                  __CFG_BOREN$OFF 0000                _enableInterrupts 1646  
                         status 0003                           wtemp0 007E                 __end_of_sprintf 01FA  
   __end_ofi1_nrf24l01SetRXMode 0B17                __end_ofi1_memset 16D9  __size_of_nrf24l01ChangeTXPower 003F  
             getADCValue@adcSum 0054   __end_of_nrf24l01ChangeTXPower 0A90                _nrf24l01SPIStart 164E  
               __initialization 0011                _nrf24l01CheckACK 0901          nrf24l01InitRegisters@i 0031  
                  __end_of_main 1000                    __end_of_ftoa 069A            __end_of_handleRXData 1696  
                  __end_of_loop 03AC    nrf24l01ChangeTXPower@rfSetup 0026                ??_nrf24l01CEHigh 0070  
                        ??_main 00C4                          ??_ftoa 006F                   ___fttol@sign1 00A0  
                        ??_loop 00C3                ??_nrf24l01CSHigh 0070                ??_nrf24l01SPIEnd 0070  
           _nrf24l01GetRXPacket 0002        __size_of_nrf24l01SPISend 000D                ___llmod@dividend 0032  
                        _ADRESH 009C                          _ADRESL 009B                          ?_sleep 0032  
              __end_of___awtoft 1800                          _ANSELA 018C                          _ANSELC 018E  
              __end_of___ftpack 0CA9                __end_of___lbtoft 1728                __end_of___lltoft 08A6  
                        i1l3003 0837                          i1l3007 084F                          _ODCONA 028C  
      __size_of_nrf24l01GetPipe 0038                          _ODCONC 028E                          i1l3117 0B11  
                        i1l3125 16C5                          i1l2433 1661                          i1l3253 0BE3  
                        i1l3423 09D0                          i1l3407 09AC                          i1l3097 0AD9  
                        i1l3257 0BEB                          i1l3249 0BD3                          i1l2999 082F  
                        _INLVLA 038C                          _INLVLC 038E           __size_of_checkTXPower 0014  
                        u373_27 0AEA                          u374_27 0AFE                          u375_27 0B0B  
                        u376_27 1652                          u377_27 1640                          _STATUS 0003  
      __size_of_nrf24l01SendACK 002E            ?_nrf24l01GetRXPacket 0070            __size_of_nrf24l01ISR 003B  
       nrf24l01SetRXMode@config 0024                          ___bmul 1672                          ___ftge 09D8  
       nrf24l01SetRXMode@rxMode 0025                          ___wmul 1728                       ??___ftadd 0034  
                __CFG_STVREN$ON 0000                       ??___ftdiv 0041                       ??___ftneg 005A  
                     ??___lldiv 0028                       ??___ftmul 005D                       ??___llmod 0036  
                     ??___ftsub 0041                       ??___fttol 006B                       ??___lwdiv 0024  
                     ??___lwmod 0024            __end_of_nrf24l01Init 082E            __end_of_nrf24l01Send 17BD  
                        _memset 16D9           _nrf24l01InitRegisters 03AC                          _strcat 0855  
                        _strcmp 082E                          _strcpy 07E3                          _strlen 177E  
                        ftoa@cp 00B2           ___ftmul@f3_as_product 0062       i1nrf24l01SetRXMode@config 0075  
                     ??_isdigit 0020                          loop@ta 0123                          loop@vt 0120  
     i1nrf24l01SetRXMode@rxMode 0076                    _checkTXPower 1696                       ??_sprintf 0042  
            getADCValue@adcLoop 0051         __end_of__initialization 0029                      ___ftadd@f1 002E  
                    ___ftadd@f2 0031                      ___ftge@ff1 0020                      ___ftge@ff2 0023  
         ??_nrf24l01GetRXPacket 0020        nrf24l01SendPacket@Packet 0027              getADCValue@channel 0053  
                    ___ftdiv@f1 003E                      ___ftdiv@f2 003B                      ___ftdiv@f3 0046  
                    ___ftneg@f1 0057                      ___awtoft@c 0028                      ___lbtoft@c 002F  
           ___bmul@multiplicand 0020                      ___ftmul@f1 0057                      ___ftmul@f2 005A  
                    ___ftsub@f1 003E                      ___ftsub@f2 003B                      ___fttol@f1 0067  
                __pcstackCOMMON 0070                    __pidataBANK1 07FF                      ___lltoft@c 0028  
                    _doWDTSleep 16AA                   __end_of_sleep 0A51                       ?i1_memset 0070  
                       ??_sleep 0034                    sprintf@width 004F                     loop@rfSetup 012E  
                    __pbssBANK1 00E8                      __pbssBANK2 0150                      __pbssBANK3 01A0  
             ??_nrf24l01SPISend 0070              __size_of_exception 0002           __size_of_handleRXData 0012  
       __size_ofi1_nrf24l01Send 001B               ??_nrf24l01GetPipe 0026                      __pmaintext 0F4B  
                main@bootStatus 00C5                         ?___bmul 0020                         ?___ftge 0020  
                       ?___wmul 0020               ??_nrf24l01SendACK 002E                 __CFG_PPS1WAY$ON 0000  
             _nrf24l01SetRXMode 0B5B               _nrf24l01SetRXPipe 17BD          ?_nrf24l01InitRegisters 0070  
                    __pintentry 0004               _nrf24l01SetTXPipe 0B17             nrf24l01SPISend@data 0070  
                       ?_memset 0020              ?_nrf24l01SetRXMode 0070                       ?___awtoft 0028  
                     ?___ftpack 0020                       ?___lbtoft 0028              ?_nrf24l01SetRXPipe 0070  
      __end_of_enableInterrupts 164E              ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0028  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00B3                         ?_strcmp 0070  
                       ?_strcpy 0020                         ?_strlen 0020           __end_of_n_ADDRESS_MUL 1801  
                    ??i1_memset 0076             ??_nrf24l01SetRXMode 0023        __end_of_nrf24l01SPIStart 1656  
           ??_nrf24l01SetRXPipe 0023             ??_nrf24l01SetTXPipe 0024                         _SSP1BUF 0211  
      __end_of_nrf24l01CheckACK 0930                    _handleRXData 1684           _nrf24l01InterfaceInit 1744  
    __end_of_nrf24l01SendPacket 0775                   ??_getADCValue 004E           __size_of_nrf24l01Init 0024  
         __size_of_nrf24l01Send 0020       __end_of_nrf24l01SetRXMode 0BA4       __end_of_nrf24l01SetRXPipe 17DE  
     __end_of_nrf24l01SetTXPipe 0B5B           _nrf24l01ReceivePacket 0BA4                 __size_of___bmul 0012  
               __size_of___ftge 003C                         ___ftadd 04B2                     ?_doWDTSleep 0070  
                       ___ftdiv 0DEE                         ___ftneg 0801                         ___lldiv 0BF1  
               __size_of___wmul 001C                         ___ftmul 0E97                         ___llmod 0A90  
                       ___ftsub 1760                         ___fttol 0CA9                         ___lwdiv 0930  
                       ___lwmod 08A6                      ??___awtoft 002B                      ??___ftpack 0025  
                    ??___lbtoft 002B           __end_of_nrf24l01CELow 1633                 __size_of_memset 0019  
         __end_of_nrf24l01CSLow 1639                      ??___lltoft 002C                         __ptext1 07E3  
                       __ptext2 080A                         __ptext3 1744                         __ptext4 03AC  
                       __ptext5 17BD                         __ptext6 0965                         __ptext7 08A6  
                       __ptext8 01FA                         __ptext9 0A14                 __size_of_strcat 0027  
               __size_of_strcmp 0027               __end_of_exception 162D                 __size_of_strcpy 001C  
               __size_of_strlen 001F                    __size_of_ISR 000B                         _counter 0150  
                       _dpowers 1000                         _isdigit 1663                         _romData 00EB  
                       _sprintf 002D                         clrloop0 163A            end_of_initialization 0029  
                       ftoa@buf 0153                         ftoa@rem 00AA                    _nrf24l01Init 080A  
                    _setMessage 0775                    _nrf24l01Send 179D                      _romDataMap 01C1  
                       memset@c 0022                         memset@n 0024                         memset@p 0026  
              nrf24l01GetPipe@i 002A                 ___lldiv@divisor 0020                 ___lldiv@counter 002D  
         _nrf24l01ChangeTXPower 0A51                setMessage@packet 00B9    __size_ofi1_nrf24l01SetRXMode 0044  
              setMessage@status 00C1                         strcmp@r 0074           i1nrf24l01Send@command 0073  
                       strlen@s 0020             __end_of_getADCValue 0DEE                       _PORTAbits 000C  
                     _PORTCbits 000E                       _TRISAbits 008C                       _TRISCbits 008E  
              nrf24l01Send@data 0020                __CFG_FEXTOSC$OFF 0000             __size_of_doWDTSleep 0017  
                 ??_nrf24l01ISR 007B          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0049  
                i1_nrf24l01Send 16F2                      main@packet 00C7          ?_nrf24l01ReceivePacket 0070  
    __size_of_nrf24l01SetRXMode 0049      __size_of_nrf24l01SetRXPipe 0021                     ___ftmul@exp 0061  
    __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 1684                  __end_of___ftge 0A14  
                __end_of___wmul 1744                       i1memset@c 0072                       i1memset@n 0074  
                     i1memset@p 0076                  __end_of_memset 16F2                  __end_of_strcat 087C  
                __end_of_strcmp 0855                  __end_of_strcpy 07FF                  __end_of_strlen 179D  
           start_initialization 0011                 _nrf24l01SPISend 1656                     __end_of_ISR 000F  
                    ftoa@status 00A9               __size_ofi1_memset 0018       nrf24l01SetRXPipe@enRXAddr 0026  
               _nrf24l01GetPipe 0965     __end_of_nrf24l01GetRXPacket 0004         __size_of_nrf24l01CEHigh 0003  
       __size_of_nrf24l01CSHigh 0003                     ?_setMessage 00B9          __end_ofi1_nrf24l01Send 170D  
               _nrf24l01SendACK 08D3         __size_of_nrf24l01SPIEnd 0007                 ___llmod@divisor 002E  
               ___llmod@counter 0037          ?_nrf24l01ChangeTXPower 0023         ??_nrf24l01InitRegisters 0027  
              __CFG_LPBOREN$OFF 0000                     _getADCValue 0D48                        ??___bmul 0021  
                      ??___ftge 0026             __end_of_nrf24l01ISR 09D8                        ??___wmul 0024  
                   __pdataBANK1 00EB                        ??_memset 0026               ?_enableInterrupts 0070  
                      ??_strcat 0070                        ??_strcmp 0073                        ??_strcpy 0022  
                      ??_strlen 0022               __size_of___awtoft 0022               __size_of___ftpack 0065  
             __size_of___lbtoft 001B              ??_enableInterrupts 0070               __size_of___lltoft 002A  
                   __pbssCOMMON 007D                       ___latbits 0002                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK2 0120                 doWDTSleep@wdtps 0021  
             ?_nrf24l01SPIStart 0070            checkTXPower@rxPacket 0028                    _isdigit$1811 0020  
             ?_nrf24l01CheckACK 0070              ??_nrf24l01SPIStart 0070              ??_nrf24l01CheckACK 0077  
               ?i1_nrf24l01Send 0071                     sprintf@flag 0048                     sprintf@prec 0051  
                    loop@packet 012F             nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028  
              ___lwdiv@dividend 0022                    ??_doWDTSleep 0020                        ?___ftadd 002E  
                      ?___ftdiv 003B                        ?___ftneg 0057                        ?___lldiv 0020  
                      ?___ftmul 0057                        ?___llmod 002E                        ?___ftsub 003B  
                      ?___fttol 0067                        ?___lwdiv 0020                        ?___lwmod 0020  
          __end_of_n_ADDRESS_P0 181E         __end_of_nrf24l01SPISend 1663              i1nrf24l01Send@data 0071  
     nrf24l01InitRegisters@enAA 002E             __size_of_setMessage 006E              _nrf24l01SendPacket 069A  
       __end_of_nrf24l01GetPipe 099D                        ?_isdigit 0070                       _loop$2062 0126  
                     _loop$2063 0129         __end_of_nrf24l01SendACK 0901                       _exception 162B  
           ?_nrf24l01SendPacket 0027                ___lwdiv@quotient 0025                        ?_sprintf 0038  
           i1_nrf24l01SetRXMode 0AD3                  __size_of_sleep 003D              __end_of_doWDTSleep 16C1  
                ___wmul@product 0024                     _nrf24l01ISR 099D                       clear_ram0 1639  
                      _PIE0bits 0090                        _PIR0bits 0010                       _sleepLoop 00EA  
          ??_nrf24l01SendPacket 0029                 setMessage@value 00BD                 setMessage@topic 00BB  
          ?i1_nrf24l01SetRXMode 0070                      _ADCON0bits 009D                      _ADCON1bits 009E  
             ___wmul@multiplier 0020                        _WPUAbits 020C                        i1_memset 16C1  
                 ?_checkTXPower 0070                        _RXPacket 01A0                        _TXPacket 00E8  
                    ?_exception 0070                  _nrf24l01CEHigh 162D         ??_nrf24l01InterfaceInit 0020  
                _nrf24l01CSHigh 1633               nrf24l01ISR@status 007C                  _nrf24l01SPIEnd 163F  
       ??_nrf24l01ReceivePacket 0078          __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003  
         ??i1_nrf24l01SetRXMode 0074                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
              __size_of___ftneg 0009                __size_of___lldiv 0053                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 009F  
         nrf24l01SendACK@packet 002F                __size_of___lwdiv 0035                __size_of___lwmod 002D  
                      ___awtoft 17DE                        ___ftpack 0C44                        ___lbtoft 170D  
              ?_nrf24l01SPISend 0070                        ___lltoft 087C                      _ANSELAbits 018C  
                    _ANSELCbits 018E                  ??_checkTXPower 0027                ?_nrf24l01GetPipe 0070  
                    sprintf@val 004A                   _n_ADDRESS_MUL 1800                      strcat@from 00B5  
        __end_of_nrf24l01CEHigh 1630                __size_of_isdigit 000F                 ___lwdiv@divisor 0020  
        __end_of_nrf24l01CSHigh 1636                ?_nrf24l01SendACK 0070                 ___lwdiv@counter 0027  
                      __ptext10 1684                        __ptext11 08D3                        __ptext20 16D9  
                      __ptext12 0B17                        __ptext21 05A8                        __ptext13 1672  
                      __ptext30 0801                        __ptext22 002D                        __ptext14 069A  
                      __ptext31 0E97                        __ptext23 1663                        __ptext15 177E  
                      __ptext40 0A51                        __ptext32 09D8                        __ptext24 1728  
                      __ptext16 0B5B                        __ptext41 179D                        __ptext33 0D48  
                      __ptext25 0A90                        __ptext17 0930                        __ptext50 16F2  
                      __ptext42 170D                        __ptext34 16AA                        __ptext26 0BF1  
                      __ptext18 0775                        __ptext51 164E                        __ptext43 0C44  
                      __ptext35 0DEE                        __ptext27 087C                        __ptext19 0855  
                      __ptext60 162B                        __ptext52 1636                        __ptext36 04B2  
                      __ptext28 0CA9                        __ptext53 1656                        __ptext45 099D  
                      __ptext37 17DE                        __ptext29 1760                        __ptext54 163F  
                      __ptext46 0BA4                        __ptext38 1696                        __ptext55 1633  
                      __ptext47 16C1                        __ptext39 0002                        __ptext56 1646  
                      __ptext48 0901                        __ptext57 1630                        __ptext49 0AD3  
                      __ptext58 162D                        __ptext59 082E                    _SSP1CON1bits 0215  
        __end_of_nrf24l01SPIEnd 1646                        _nrf24l01 007D                __size_of_sprintf 01CD  
                   _OSCCON1bits 0919                    ??_setMessage 00C0                      strcpy@from 0020  
 nrf24l01ChangeTXPower@addPower 0023                        _loop$882 012C         ??_nrf24l01ChangeTXPower 0025  
                 __size_of_main 00B5                   __size_of_ftoa 00F2                   __size_of_loop 01B2  
  nrf24l01InitRegisters@channel 0029    nrf24l01InitRegisters@feature 002B              exception@exception 0070  
                    _RC0PPSbits 0EA0    nrf24l01InitRegisters@rfSetup 002C                      _RC1PPSbits 0EA1  
                  ?_getADCValue 004B                      _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0106  
 __end_of_nrf24l01InitRegisters 04B2                        int$flags 007E    nrf24l01InitRegisters@setupAW 002A  
                    _ODCONAbits 028C                    _SSP1STATbits 0214                        main@pipe 00C6  
        nrf24l01ReceivePacket@i 007A                   _nrf24l01CELow 1630                   _nrf24l01CSLow 1636  
            __end_of_setMessage 07E3                      _INTCONbits 000B                 ?_nrf24l01CEHigh 0070  
                    _FVRCONbits 0117                ??i1_nrf24l01Send 0072                     ??_exception 0070  
               ?_nrf24l01CSHigh 0070                  __pstringtext10 1831                  __pstringtext11 1835  
                __pstringtext12 0000                        isdigit@c 0021                        memset@p1 0020  
                 ?_handleRXData 0070                 ?_nrf24l01SPIEnd 0070            handleRXData@RXPacket 0031  
                      intlevel1 0000                       sprintf@ap 0049                       sprintf@sp 004E  
                  _n_ADDRESS_P0 1819       __size_of_enableInterrupts 0008                ___lwmod@dividend 0022  
              ___lldiv@dividend 0024               __CFG_CLKOUTEN$OFF 0000    __size_of_nrf24l01GetRXPacket 0002  
   nrf24l01InitRegisters@config 0030       __size_of_nrf24l01SPIStart 0008       __size_of_nrf24l01CheckACK 002F  
   nrf24l01InitRegisters@status 002D      nrf24l01ReceivePacket@width 0079                  ?_nrf24l01CELow 0070  
                 __pstringtext1 1000                   __pstringtext2 1819                   __pstringtext3 1800  
                 __pstringtext4 180C                   __pstringtext5 1813                   __pstringtext6 181E  
                 __pstringtext7 1823                   __pstringtext8 1828                   __pstringtext9 182D  
                ?_nrf24l01CSLow 0070                        sprintf@c 0053                        sprintf@f 0038  
    nrf24l01InitRegisters@DynPD 002F                        strcat@cp 00B7                        strcat@to 00B3  
                      strcmp@s1 0070                        strcmp@s2 0072                ___lldiv@quotient 0029  
               ___lwmod@divisor 0020                        strcpy@cp 0024                        strlen@cp 0024  
                      strcpy@to 0023                 ___lwmod@counter 0025                  ??_handleRXData 0030  
                    _WDTCONbits 0097                   ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020  
                  ?_nrf24l01ISR 0070            __end_of_checkTXPower 16AA  
