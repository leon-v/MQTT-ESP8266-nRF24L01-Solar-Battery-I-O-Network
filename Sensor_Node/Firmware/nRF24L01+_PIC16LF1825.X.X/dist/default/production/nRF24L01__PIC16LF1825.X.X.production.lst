

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Jul 19 16:47:14 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	_romArray_text,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2
    53                           	psect	intentry,global,class=CODE,delta=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2
    57                           	psect	text31,local,class=CODE,merge=1,delta=2
    58                           	psect	text32,local,class=CODE,merge=1,delta=2
    59                           	psect	text33,local,class=CODE,merge=1,delta=2
    60                           	psect	text34,local,class=CODE,merge=1,delta=2
    61                           	psect	text35,local,class=CODE,merge=1,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    69                           	psect	text43,local,class=CODE,merge=1,delta=2
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    73                           	dabs	1,0x7E,2
    74  0000                     
    75                           ; Version 2.00
    76                           ; Generated 27/05/2018 GMT
    77                           ; 
    78                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC16LF18325 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109  0000                     	;# 
   110  0001                     	;# 
   111  0002                     	;# 
   112  0003                     	;# 
   113  0004                     	;# 
   114  0005                     	;# 
   115  0006                     	;# 
   116  0007                     	;# 
   117  0008                     	;# 
   118  0009                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000E                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0014                     	;# 
   128  0015                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001E                     	;# 
   141  001F                     	;# 
   142  008C                     	;# 
   143  008E                     	;# 
   144  0090                     	;# 
   145  0091                     	;# 
   146  0092                     	;# 
   147  0093                     	;# 
   148  0094                     	;# 
   149  0097                     	;# 
   150  009B                     	;# 
   151  009B                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010E                     	;# 
   158  0111                     	;# 
   159  0112                     	;# 
   160  0113                     	;# 
   161  0114                     	;# 
   162  0115                     	;# 
   163  0116                     	;# 
   164  0117                     	;# 
   165  0118                     	;# 
   166  0119                     	;# 
   167  018C                     	;# 
   168  018E                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  0199                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019C                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019D                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019E                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  019F                     	;# 
   193  019F                     	;# 
   194  020C                     	;# 
   195  020E                     	;# 
   196  0211                     	;# 
   197  0211                     	;# 
   198  0212                     	;# 
   199  0212                     	;# 
   200  0213                     	;# 
   201  0213                     	;# 
   202  0214                     	;# 
   203  0214                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0215                     	;# 
   208  0216                     	;# 
   209  0216                     	;# 
   210  0217                     	;# 
   211  0217                     	;# 
   212  0219                     	;# 
   213  021A                     	;# 
   214  021B                     	;# 
   215  021C                     	;# 
   216  021D                     	;# 
   217  021D                     	;# 
   218  021E                     	;# 
   219  021F                     	;# 
   220  028C                     	;# 
   221  028E                     	;# 
   222  0291                     	;# 
   223  0291                     	;# 
   224  0292                     	;# 
   225  0293                     	;# 
   226  0294                     	;# 
   227  0295                     	;# 
   228  0295                     	;# 
   229  0296                     	;# 
   230  0297                     	;# 
   231  0298                     	;# 
   232  029F                     	;# 
   233  030C                     	;# 
   234  030E                     	;# 
   235  0311                     	;# 
   236  0311                     	;# 
   237  0312                     	;# 
   238  0313                     	;# 
   239  0314                     	;# 
   240  0315                     	;# 
   241  0315                     	;# 
   242  0316                     	;# 
   243  0317                     	;# 
   244  0318                     	;# 
   245  038C                     	;# 
   246  038E                     	;# 
   247  0391                     	;# 
   248  0392                     	;# 
   249  0393                     	;# 
   250  0397                     	;# 
   251  0398                     	;# 
   252  0399                     	;# 
   253  039A                     	;# 
   254  039C                     	;# 
   255  039D                     	;# 
   256  039E                     	;# 
   257  039F                     	;# 
   258  0411                     	;# 
   259  0411                     	;# 
   260  0412                     	;# 
   261  0413                     	;# 
   262  0414                     	;# 
   263  0415                     	;# 
   264  0416                     	;# 
   265  0417                     	;# 
   266  0418                     	;# 
   267  0418                     	;# 
   268  0419                     	;# 
   269  041A                     	;# 
   270  041B                     	;# 
   271  041C                     	;# 
   272  041D                     	;# 
   273  041E                     	;# 
   274  041F                     	;# 
   275  0498                     	;# 
   276  0498                     	;# 
   277  0499                     	;# 
   278  049A                     	;# 
   279  049B                     	;# 
   280  049B                     	;# 
   281  049C                     	;# 
   282  049D                     	;# 
   283  049E                     	;# 
   284  049F                     	;# 
   285  0617                     	;# 
   286  0618                     	;# 
   287  0619                     	;# 
   288  0619                     	;# 
   289  061A                     	;# 
   290  061B                     	;# 
   291  061C                     	;# 
   292  061C                     	;# 
   293  061F                     	;# 
   294  0691                     	;# 
   295  0692                     	;# 
   296  0693                     	;# 
   297  0694                     	;# 
   298  0695                     	;# 
   299  0696                     	;# 
   300  0697                     	;# 
   301  0698                     	;# 
   302  0699                     	;# 
   303  0711                     	;# 
   304  0712                     	;# 
   305  0713                     	;# 
   306  0714                     	;# 
   307  0715                     	;# 
   308  0716                     	;# 
   309  0717                     	;# 
   310  0718                     	;# 
   311  0719                     	;# 
   312  0891                     	;# 
   313  0891                     	;# 
   314  0891                     	;# 
   315  0891                     	;# 
   316  0891                     	;# 
   317  0891                     	;# 
   318  0892                     	;# 
   319  0892                     	;# 
   320  0892                     	;# 
   321  0893                     	;# 
   322  0893                     	;# 
   323  0893                     	;# 
   324  0893                     	;# 
   325  0893                     	;# 
   326  0893                     	;# 
   327  0894                     	;# 
   328  0894                     	;# 
   329  0894                     	;# 
   330  0895                     	;# 
   331  0895                     	;# 
   332  0895                     	;# 
   333  0896                     	;# 
   334  0896                     	;# 
   335  0896                     	;# 
   336  089B                     	;# 
   337  0911                     	;# 
   338  0912                     	;# 
   339  0913                     	;# 
   340  0914                     	;# 
   341  0915                     	;# 
   342  0916                     	;# 
   343  0918                     	;# 
   344  0919                     	;# 
   345  091A                     	;# 
   346  091B                     	;# 
   347  091C                     	;# 
   348  091D                     	;# 
   349  091E                     	;# 
   350  091F                     	;# 
   351  0E0F                     	;# 
   352  0E10                     	;# 
   353  0E11                     	;# 
   354  0E12                     	;# 
   355  0E13                     	;# 
   356  0E14                     	;# 
   357  0E15                     	;# 
   358  0E16                     	;# 
   359  0E17                     	;# 
   360  0E18                     	;# 
   361  0E19                     	;# 
   362  0E1A                     	;# 
   363  0E1B                     	;# 
   364  0E1C                     	;# 
   365  0E1D                     	;# 
   366  0E1E                     	;# 
   367  0E1F                     	;# 
   368  0E20                     	;# 
   369  0E21                     	;# 
   370  0E22                     	;# 
   371  0E24                     	;# 
   372  0E25                     	;# 
   373  0E28                     	;# 
   374  0E29                     	;# 
   375  0E2A                     	;# 
   376  0E2B                     	;# 
   377  0E2C                     	;# 
   378  0E2D                     	;# 
   379  0E2E                     	;# 
   380  0E2F                     	;# 
   381  0E90                     	;# 
   382  0E91                     	;# 
   383  0E92                     	;# 
   384  0E94                     	;# 
   385  0E95                     	;# 
   386  0EA0                     	;# 
   387  0EA1                     	;# 
   388  0EA2                     	;# 
   389  0EA3                     	;# 
   390  0EA4                     	;# 
   391  0EA5                     	;# 
   392  0F0F                     	;# 
   393  0F10                     	;# 
   394  0F11                     	;# 
   395  0F12                     	;# 
   396  0F13                     	;# 
   397  0F14                     	;# 
   398  0F15                     	;# 
   399  0F16                     	;# 
   400  0F17                     	;# 
   401  0F18                     	;# 
   402  0F19                     	;# 
   403  0F1A                     	;# 
   404  0F1B                     	;# 
   405  0F1C                     	;# 
   406  0F1D                     	;# 
   407  0F1E                     	;# 
   408  0F1F                     	;# 
   409  0F20                     	;# 
   410  0F21                     	;# 
   411  0F22                     	;# 
   412  0F23                     	;# 
   413  0F24                     	;# 
   414  0F25                     	;# 
   415  0F26                     	;# 
   416  0F27                     	;# 
   417  0F28                     	;# 
   418  0F29                     	;# 
   419  0F2A                     	;# 
   420  0F2B                     	;# 
   421  0F2C                     	;# 
   422  0F2D                     	;# 
   423  0F2E                     	;# 
   424  0F2F                     	;# 
   425  0F30                     	;# 
   426  0F31                     	;# 
   427  0F32                     	;# 
   428  0F33                     	;# 
   429  0F34                     	;# 
   430  0F35                     	;# 
   431  0F36                     	;# 
   432  0F37                     	;# 
   433  0FE4                     	;# 
   434  0FE5                     	;# 
   435  0FE6                     	;# 
   436  0FE7                     	;# 
   437  0FE8                     	;# 
   438  0FE9                     	;# 
   439  0FEA                     	;# 
   440  0FEB                     	;# 
   441  0FED                     	;# 
   442  0FEE                     	;# 
   443  0FEF                     	;# 
   444  0000                     	;# 
   445  0001                     	;# 
   446  0002                     	;# 
   447  0003                     	;# 
   448  0004                     	;# 
   449  0005                     	;# 
   450  0006                     	;# 
   451  0007                     	;# 
   452  0008                     	;# 
   453  0009                     	;# 
   454  000A                     	;# 
   455  000B                     	;# 
   456  000C                     	;# 
   457  000E                     	;# 
   458  0010                     	;# 
   459  0011                     	;# 
   460  0012                     	;# 
   461  0013                     	;# 
   462  0014                     	;# 
   463  0015                     	;# 
   464  0015                     	;# 
   465  0016                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001C                     	;# 
   474  001D                     	;# 
   475  001E                     	;# 
   476  001F                     	;# 
   477  008C                     	;# 
   478  008E                     	;# 
   479  0090                     	;# 
   480  0091                     	;# 
   481  0092                     	;# 
   482  0093                     	;# 
   483  0094                     	;# 
   484  0097                     	;# 
   485  009B                     	;# 
   486  009B                     	;# 
   487  009C                     	;# 
   488  009D                     	;# 
   489  009E                     	;# 
   490  009F                     	;# 
   491  010C                     	;# 
   492  010E                     	;# 
   493  0111                     	;# 
   494  0112                     	;# 
   495  0113                     	;# 
   496  0114                     	;# 
   497  0115                     	;# 
   498  0116                     	;# 
   499  0117                     	;# 
   500  0118                     	;# 
   501  0119                     	;# 
   502  018C                     	;# 
   503  018E                     	;# 
   504  0199                     	;# 
   505  0199                     	;# 
   506  0199                     	;# 
   507  019A                     	;# 
   508  019A                     	;# 
   509  019A                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019C                     	;# 
   516  019C                     	;# 
   517  019C                     	;# 
   518  019D                     	;# 
   519  019D                     	;# 
   520  019D                     	;# 
   521  019E                     	;# 
   522  019E                     	;# 
   523  019E                     	;# 
   524  019F                     	;# 
   525  019F                     	;# 
   526  019F                     	;# 
   527  019F                     	;# 
   528  019F                     	;# 
   529  020C                     	;# 
   530  020E                     	;# 
   531  0211                     	;# 
   532  0211                     	;# 
   533  0212                     	;# 
   534  0212                     	;# 
   535  0213                     	;# 
   536  0213                     	;# 
   537  0214                     	;# 
   538  0214                     	;# 
   539  0215                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0215                     	;# 
   543  0216                     	;# 
   544  0216                     	;# 
   545  0217                     	;# 
   546  0217                     	;# 
   547  0219                     	;# 
   548  021A                     	;# 
   549  021B                     	;# 
   550  021C                     	;# 
   551  021D                     	;# 
   552  021D                     	;# 
   553  021E                     	;# 
   554  021F                     	;# 
   555  028C                     	;# 
   556  028E                     	;# 
   557  0291                     	;# 
   558  0291                     	;# 
   559  0292                     	;# 
   560  0293                     	;# 
   561  0294                     	;# 
   562  0295                     	;# 
   563  0295                     	;# 
   564  0296                     	;# 
   565  0297                     	;# 
   566  0298                     	;# 
   567  029F                     	;# 
   568  030C                     	;# 
   569  030E                     	;# 
   570  0311                     	;# 
   571  0311                     	;# 
   572  0312                     	;# 
   573  0313                     	;# 
   574  0314                     	;# 
   575  0315                     	;# 
   576  0315                     	;# 
   577  0316                     	;# 
   578  0317                     	;# 
   579  0318                     	;# 
   580  038C                     	;# 
   581  038E                     	;# 
   582  0391                     	;# 
   583  0392                     	;# 
   584  0393                     	;# 
   585  0397                     	;# 
   586  0398                     	;# 
   587  0399                     	;# 
   588  039A                     	;# 
   589  039C                     	;# 
   590  039D                     	;# 
   591  039E                     	;# 
   592  039F                     	;# 
   593  0411                     	;# 
   594  0411                     	;# 
   595  0412                     	;# 
   596  0413                     	;# 
   597  0414                     	;# 
   598  0415                     	;# 
   599  0416                     	;# 
   600  0417                     	;# 
   601  0418                     	;# 
   602  0418                     	;# 
   603  0419                     	;# 
   604  041A                     	;# 
   605  041B                     	;# 
   606  041C                     	;# 
   607  041D                     	;# 
   608  041E                     	;# 
   609  041F                     	;# 
   610  0498                     	;# 
   611  0498                     	;# 
   612  0499                     	;# 
   613  049A                     	;# 
   614  049B                     	;# 
   615  049B                     	;# 
   616  049C                     	;# 
   617  049D                     	;# 
   618  049E                     	;# 
   619  049F                     	;# 
   620  0617                     	;# 
   621  0618                     	;# 
   622  0619                     	;# 
   623  0619                     	;# 
   624  061A                     	;# 
   625  061B                     	;# 
   626  061C                     	;# 
   627  061C                     	;# 
   628  061F                     	;# 
   629  0691                     	;# 
   630  0692                     	;# 
   631  0693                     	;# 
   632  0694                     	;# 
   633  0695                     	;# 
   634  0696                     	;# 
   635  0697                     	;# 
   636  0698                     	;# 
   637  0699                     	;# 
   638  0711                     	;# 
   639  0712                     	;# 
   640  0713                     	;# 
   641  0714                     	;# 
   642  0715                     	;# 
   643  0716                     	;# 
   644  0717                     	;# 
   645  0718                     	;# 
   646  0719                     	;# 
   647  0891                     	;# 
   648  0891                     	;# 
   649  0891                     	;# 
   650  0891                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0892                     	;# 
   654  0892                     	;# 
   655  0892                     	;# 
   656  0893                     	;# 
   657  0893                     	;# 
   658  0893                     	;# 
   659  0893                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0894                     	;# 
   663  0894                     	;# 
   664  0894                     	;# 
   665  0895                     	;# 
   666  0895                     	;# 
   667  0895                     	;# 
   668  0896                     	;# 
   669  0896                     	;# 
   670  0896                     	;# 
   671  089B                     	;# 
   672  0911                     	;# 
   673  0912                     	;# 
   674  0913                     	;# 
   675  0914                     	;# 
   676  0915                     	;# 
   677  0916                     	;# 
   678  0918                     	;# 
   679  0919                     	;# 
   680  091A                     	;# 
   681  091B                     	;# 
   682  091C                     	;# 
   683  091D                     	;# 
   684  091E                     	;# 
   685  091F                     	;# 
   686  0E0F                     	;# 
   687  0E10                     	;# 
   688  0E11                     	;# 
   689  0E12                     	;# 
   690  0E13                     	;# 
   691  0E14                     	;# 
   692  0E15                     	;# 
   693  0E16                     	;# 
   694  0E17                     	;# 
   695  0E18                     	;# 
   696  0E19                     	;# 
   697  0E1A                     	;# 
   698  0E1B                     	;# 
   699  0E1C                     	;# 
   700  0E1D                     	;# 
   701  0E1E                     	;# 
   702  0E1F                     	;# 
   703  0E20                     	;# 
   704  0E21                     	;# 
   705  0E22                     	;# 
   706  0E24                     	;# 
   707  0E25                     	;# 
   708  0E28                     	;# 
   709  0E29                     	;# 
   710  0E2A                     	;# 
   711  0E2B                     	;# 
   712  0E2C                     	;# 
   713  0E2D                     	;# 
   714  0E2E                     	;# 
   715  0E2F                     	;# 
   716  0E90                     	;# 
   717  0E91                     	;# 
   718  0E92                     	;# 
   719  0E94                     	;# 
   720  0E95                     	;# 
   721  0EA0                     	;# 
   722  0EA1                     	;# 
   723  0EA2                     	;# 
   724  0EA3                     	;# 
   725  0EA4                     	;# 
   726  0EA5                     	;# 
   727  0F0F                     	;# 
   728  0F10                     	;# 
   729  0F11                     	;# 
   730  0F12                     	;# 
   731  0F13                     	;# 
   732  0F14                     	;# 
   733  0F15                     	;# 
   734  0F16                     	;# 
   735  0F17                     	;# 
   736  0F18                     	;# 
   737  0F19                     	;# 
   738  0F1A                     	;# 
   739  0F1B                     	;# 
   740  0F1C                     	;# 
   741  0F1D                     	;# 
   742  0F1E                     	;# 
   743  0F1F                     	;# 
   744  0F20                     	;# 
   745  0F21                     	;# 
   746  0F22                     	;# 
   747  0F23                     	;# 
   748  0F24                     	;# 
   749  0F25                     	;# 
   750  0F26                     	;# 
   751  0F27                     	;# 
   752  0F28                     	;# 
   753  0F29                     	;# 
   754  0F2A                     	;# 
   755  0F2B                     	;# 
   756  0F2C                     	;# 
   757  0F2D                     	;# 
   758  0F2E                     	;# 
   759  0F2F                     	;# 
   760  0F30                     	;# 
   761  0F31                     	;# 
   762  0F32                     	;# 
   763  0F33                     	;# 
   764  0F34                     	;# 
   765  0F35                     	;# 
   766  0F36                     	;# 
   767  0F37                     	;# 
   768  0FE4                     	;# 
   769  0FE5                     	;# 
   770  0FE6                     	;# 
   771  0FE7                     	;# 
   772  0FE8                     	;# 
   773  0FE9                     	;# 
   774  0FEA                     	;# 
   775  0FEB                     	;# 
   776  0FED                     	;# 
   777  0FEE                     	;# 
   778  0FEF                     	;# 
   779  0000                     	;# 
   780  0001                     	;# 
   781  0002                     	;# 
   782  0003                     	;# 
   783  0004                     	;# 
   784  0005                     	;# 
   785  0006                     	;# 
   786  0007                     	;# 
   787  0008                     	;# 
   788  0009                     	;# 
   789  000A                     	;# 
   790  000B                     	;# 
   791  000C                     	;# 
   792  000E                     	;# 
   793  0010                     	;# 
   794  0011                     	;# 
   795  0012                     	;# 
   796  0013                     	;# 
   797  0014                     	;# 
   798  0015                     	;# 
   799  0015                     	;# 
   800  0016                     	;# 
   801  0016                     	;# 
   802  0017                     	;# 
   803  0018                     	;# 
   804  0019                     	;# 
   805  0019                     	;# 
   806  001A                     	;# 
   807  001B                     	;# 
   808  001C                     	;# 
   809  001D                     	;# 
   810  001E                     	;# 
   811  001F                     	;# 
   812  008C                     	;# 
   813  008E                     	;# 
   814  0090                     	;# 
   815  0091                     	;# 
   816  0092                     	;# 
   817  0093                     	;# 
   818  0094                     	;# 
   819  0097                     	;# 
   820  009B                     	;# 
   821  009B                     	;# 
   822  009C                     	;# 
   823  009D                     	;# 
   824  009E                     	;# 
   825  009F                     	;# 
   826  010C                     	;# 
   827  010E                     	;# 
   828  0111                     	;# 
   829  0112                     	;# 
   830  0113                     	;# 
   831  0114                     	;# 
   832  0115                     	;# 
   833  0116                     	;# 
   834  0117                     	;# 
   835  0118                     	;# 
   836  0119                     	;# 
   837  018C                     	;# 
   838  018E                     	;# 
   839  0199                     	;# 
   840  0199                     	;# 
   841  0199                     	;# 
   842  019A                     	;# 
   843  019A                     	;# 
   844  019A                     	;# 
   845  019B                     	;# 
   846  019B                     	;# 
   847  019B                     	;# 
   848  019B                     	;# 
   849  019B                     	;# 
   850  019C                     	;# 
   851  019C                     	;# 
   852  019C                     	;# 
   853  019D                     	;# 
   854  019D                     	;# 
   855  019D                     	;# 
   856  019E                     	;# 
   857  019E                     	;# 
   858  019E                     	;# 
   859  019F                     	;# 
   860  019F                     	;# 
   861  019F                     	;# 
   862  019F                     	;# 
   863  019F                     	;# 
   864  020C                     	;# 
   865  020E                     	;# 
   866  0211                     	;# 
   867  0211                     	;# 
   868  0212                     	;# 
   869  0212                     	;# 
   870  0213                     	;# 
   871  0213                     	;# 
   872  0214                     	;# 
   873  0214                     	;# 
   874  0215                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0215                     	;# 
   878  0216                     	;# 
   879  0216                     	;# 
   880  0217                     	;# 
   881  0217                     	;# 
   882  0219                     	;# 
   883  021A                     	;# 
   884  021B                     	;# 
   885  021C                     	;# 
   886  021D                     	;# 
   887  021D                     	;# 
   888  021E                     	;# 
   889  021F                     	;# 
   890  028C                     	;# 
   891  028E                     	;# 
   892  0291                     	;# 
   893  0291                     	;# 
   894  0292                     	;# 
   895  0293                     	;# 
   896  0294                     	;# 
   897  0295                     	;# 
   898  0295                     	;# 
   899  0296                     	;# 
   900  0297                     	;# 
   901  0298                     	;# 
   902  029F                     	;# 
   903  030C                     	;# 
   904  030E                     	;# 
   905  0311                     	;# 
   906  0311                     	;# 
   907  0312                     	;# 
   908  0313                     	;# 
   909  0314                     	;# 
   910  0315                     	;# 
   911  0315                     	;# 
   912  0316                     	;# 
   913  0317                     	;# 
   914  0318                     	;# 
   915  038C                     	;# 
   916  038E                     	;# 
   917  0391                     	;# 
   918  0392                     	;# 
   919  0393                     	;# 
   920  0397                     	;# 
   921  0398                     	;# 
   922  0399                     	;# 
   923  039A                     	;# 
   924  039C                     	;# 
   925  039D                     	;# 
   926  039E                     	;# 
   927  039F                     	;# 
   928  0411                     	;# 
   929  0411                     	;# 
   930  0412                     	;# 
   931  0413                     	;# 
   932  0414                     	;# 
   933  0415                     	;# 
   934  0416                     	;# 
   935  0417                     	;# 
   936  0418                     	;# 
   937  0418                     	;# 
   938  0419                     	;# 
   939  041A                     	;# 
   940  041B                     	;# 
   941  041C                     	;# 
   942  041D                     	;# 
   943  041E                     	;# 
   944  041F                     	;# 
   945  0498                     	;# 
   946  0498                     	;# 
   947  0499                     	;# 
   948  049A                     	;# 
   949  049B                     	;# 
   950  049B                     	;# 
   951  049C                     	;# 
   952  049D                     	;# 
   953  049E                     	;# 
   954  049F                     	;# 
   955  0617                     	;# 
   956  0618                     	;# 
   957  0619                     	;# 
   958  0619                     	;# 
   959  061A                     	;# 
   960  061B                     	;# 
   961  061C                     	;# 
   962  061C                     	;# 
   963  061F                     	;# 
   964  0691                     	;# 
   965  0692                     	;# 
   966  0693                     	;# 
   967  0694                     	;# 
   968  0695                     	;# 
   969  0696                     	;# 
   970  0697                     	;# 
   971  0698                     	;# 
   972  0699                     	;# 
   973  0711                     	;# 
   974  0712                     	;# 
   975  0713                     	;# 
   976  0714                     	;# 
   977  0715                     	;# 
   978  0716                     	;# 
   979  0717                     	;# 
   980  0718                     	;# 
   981  0719                     	;# 
   982  0891                     	;# 
   983  0891                     	;# 
   984  0891                     	;# 
   985  0891                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0892                     	;# 
   989  0892                     	;# 
   990  0892                     	;# 
   991  0893                     	;# 
   992  0893                     	;# 
   993  0893                     	;# 
   994  0893                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0894                     	;# 
   998  0894                     	;# 
   999  0894                     	;# 
  1000  0895                     	;# 
  1001  0895                     	;# 
  1002  0895                     	;# 
  1003  0896                     	;# 
  1004  0896                     	;# 
  1005  0896                     	;# 
  1006  089B                     	;# 
  1007  0911                     	;# 
  1008  0912                     	;# 
  1009  0913                     	;# 
  1010  0914                     	;# 
  1011  0915                     	;# 
  1012  0916                     	;# 
  1013  0918                     	;# 
  1014  0919                     	;# 
  1015  091A                     	;# 
  1016  091B                     	;# 
  1017  091C                     	;# 
  1018  091D                     	;# 
  1019  091E                     	;# 
  1020  091F                     	;# 
  1021  0E0F                     	;# 
  1022  0E10                     	;# 
  1023  0E11                     	;# 
  1024  0E12                     	;# 
  1025  0E13                     	;# 
  1026  0E14                     	;# 
  1027  0E15                     	;# 
  1028  0E16                     	;# 
  1029  0E17                     	;# 
  1030  0E18                     	;# 
  1031  0E19                     	;# 
  1032  0E1A                     	;# 
  1033  0E1B                     	;# 
  1034  0E1C                     	;# 
  1035  0E1D                     	;# 
  1036  0E1E                     	;# 
  1037  0E1F                     	;# 
  1038  0E20                     	;# 
  1039  0E21                     	;# 
  1040  0E22                     	;# 
  1041  0E24                     	;# 
  1042  0E25                     	;# 
  1043  0E28                     	;# 
  1044  0E29                     	;# 
  1045  0E2A                     	;# 
  1046  0E2B                     	;# 
  1047  0E2C                     	;# 
  1048  0E2D                     	;# 
  1049  0E2E                     	;# 
  1050  0E2F                     	;# 
  1051  0E90                     	;# 
  1052  0E91                     	;# 
  1053  0E92                     	;# 
  1054  0E94                     	;# 
  1055  0E95                     	;# 
  1056  0EA0                     	;# 
  1057  0EA1                     	;# 
  1058  0EA2                     	;# 
  1059  0EA3                     	;# 
  1060  0EA4                     	;# 
  1061  0EA5                     	;# 
  1062  0F0F                     	;# 
  1063  0F10                     	;# 
  1064  0F11                     	;# 
  1065  0F12                     	;# 
  1066  0F13                     	;# 
  1067  0F14                     	;# 
  1068  0F15                     	;# 
  1069  0F16                     	;# 
  1070  0F17                     	;# 
  1071  0F18                     	;# 
  1072  0F19                     	;# 
  1073  0F1A                     	;# 
  1074  0F1B                     	;# 
  1075  0F1C                     	;# 
  1076  0F1D                     	;# 
  1077  0F1E                     	;# 
  1078  0F1F                     	;# 
  1079  0F20                     	;# 
  1080  0F21                     	;# 
  1081  0F22                     	;# 
  1082  0F23                     	;# 
  1083  0F24                     	;# 
  1084  0F25                     	;# 
  1085  0F26                     	;# 
  1086  0F27                     	;# 
  1087  0F28                     	;# 
  1088  0F29                     	;# 
  1089  0F2A                     	;# 
  1090  0F2B                     	;# 
  1091  0F2C                     	;# 
  1092  0F2D                     	;# 
  1093  0F2E                     	;# 
  1094  0F2F                     	;# 
  1095  0F30                     	;# 
  1096  0F31                     	;# 
  1097  0F32                     	;# 
  1098  0F33                     	;# 
  1099  0F34                     	;# 
  1100  0F35                     	;# 
  1101  0F36                     	;# 
  1102  0F37                     	;# 
  1103  0FE4                     	;# 
  1104  0FE5                     	;# 
  1105  0FE6                     	;# 
  1106  0FE7                     	;# 
  1107  0FE8                     	;# 
  1108  0FE9                     	;# 
  1109  0FEA                     	;# 
  1110  0FEB                     	;# 
  1111  0FED                     	;# 
  1112  0FEE                     	;# 
  1113  0FEF                     	;# 
  1114  0000                     	;# 
  1115  0001                     	;# 
  1116  0002                     	;# 
  1117  0003                     	;# 
  1118  0004                     	;# 
  1119  0005                     	;# 
  1120  0006                     	;# 
  1121  0007                     	;# 
  1122  0008                     	;# 
  1123  0009                     	;# 
  1124  000A                     	;# 
  1125  000B                     	;# 
  1126  000C                     	;# 
  1127  000E                     	;# 
  1128  0010                     	;# 
  1129  0011                     	;# 
  1130  0012                     	;# 
  1131  0013                     	;# 
  1132  0014                     	;# 
  1133  0015                     	;# 
  1134  0015                     	;# 
  1135  0016                     	;# 
  1136  0016                     	;# 
  1137  0017                     	;# 
  1138  0018                     	;# 
  1139  0019                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  001D                     	;# 
  1145  001E                     	;# 
  1146  001F                     	;# 
  1147  008C                     	;# 
  1148  008E                     	;# 
  1149  0090                     	;# 
  1150  0091                     	;# 
  1151  0092                     	;# 
  1152  0093                     	;# 
  1153  0094                     	;# 
  1154  0097                     	;# 
  1155  009B                     	;# 
  1156  009B                     	;# 
  1157  009C                     	;# 
  1158  009D                     	;# 
  1159  009E                     	;# 
  1160  009F                     	;# 
  1161  010C                     	;# 
  1162  010E                     	;# 
  1163  0111                     	;# 
  1164  0112                     	;# 
  1165  0113                     	;# 
  1166  0114                     	;# 
  1167  0115                     	;# 
  1168  0116                     	;# 
  1169  0117                     	;# 
  1170  0118                     	;# 
  1171  0119                     	;# 
  1172  018C                     	;# 
  1173  018E                     	;# 
  1174  0199                     	;# 
  1175  0199                     	;# 
  1176  0199                     	;# 
  1177  019A                     	;# 
  1178  019A                     	;# 
  1179  019A                     	;# 
  1180  019B                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019B                     	;# 
  1185  019C                     	;# 
  1186  019C                     	;# 
  1187  019C                     	;# 
  1188  019D                     	;# 
  1189  019D                     	;# 
  1190  019D                     	;# 
  1191  019E                     	;# 
  1192  019E                     	;# 
  1193  019E                     	;# 
  1194  019F                     	;# 
  1195  019F                     	;# 
  1196  019F                     	;# 
  1197  019F                     	;# 
  1198  019F                     	;# 
  1199  020C                     	;# 
  1200  020E                     	;# 
  1201  0211                     	;# 
  1202  0211                     	;# 
  1203  0212                     	;# 
  1204  0212                     	;# 
  1205  0213                     	;# 
  1206  0213                     	;# 
  1207  0214                     	;# 
  1208  0214                     	;# 
  1209  0215                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0216                     	;# 
  1214  0216                     	;# 
  1215  0217                     	;# 
  1216  0217                     	;# 
  1217  0219                     	;# 
  1218  021A                     	;# 
  1219  021B                     	;# 
  1220  021C                     	;# 
  1221  021D                     	;# 
  1222  021D                     	;# 
  1223  021E                     	;# 
  1224  021F                     	;# 
  1225  028C                     	;# 
  1226  028E                     	;# 
  1227  0291                     	;# 
  1228  0291                     	;# 
  1229  0292                     	;# 
  1230  0293                     	;# 
  1231  0294                     	;# 
  1232  0295                     	;# 
  1233  0295                     	;# 
  1234  0296                     	;# 
  1235  0297                     	;# 
  1236  0298                     	;# 
  1237  029F                     	;# 
  1238  030C                     	;# 
  1239  030E                     	;# 
  1240  0311                     	;# 
  1241  0311                     	;# 
  1242  0312                     	;# 
  1243  0313                     	;# 
  1244  0314                     	;# 
  1245  0315                     	;# 
  1246  0315                     	;# 
  1247  0316                     	;# 
  1248  0317                     	;# 
  1249  0318                     	;# 
  1250  038C                     	;# 
  1251  038E                     	;# 
  1252  0391                     	;# 
  1253  0392                     	;# 
  1254  0393                     	;# 
  1255  0397                     	;# 
  1256  0398                     	;# 
  1257  0399                     	;# 
  1258  039A                     	;# 
  1259  039C                     	;# 
  1260  039D                     	;# 
  1261  039E                     	;# 
  1262  039F                     	;# 
  1263  0411                     	;# 
  1264  0411                     	;# 
  1265  0412                     	;# 
  1266  0413                     	;# 
  1267  0414                     	;# 
  1268  0415                     	;# 
  1269  0416                     	;# 
  1270  0417                     	;# 
  1271  0418                     	;# 
  1272  0418                     	;# 
  1273  0419                     	;# 
  1274  041A                     	;# 
  1275  041B                     	;# 
  1276  041C                     	;# 
  1277  041D                     	;# 
  1278  041E                     	;# 
  1279  041F                     	;# 
  1280  0498                     	;# 
  1281  0498                     	;# 
  1282  0499                     	;# 
  1283  049A                     	;# 
  1284  049B                     	;# 
  1285  049B                     	;# 
  1286  049C                     	;# 
  1287  049D                     	;# 
  1288  049E                     	;# 
  1289  049F                     	;# 
  1290  0617                     	;# 
  1291  0618                     	;# 
  1292  0619                     	;# 
  1293  0619                     	;# 
  1294  061A                     	;# 
  1295  061B                     	;# 
  1296  061C                     	;# 
  1297  061C                     	;# 
  1298  061F                     	;# 
  1299  0691                     	;# 
  1300  0692                     	;# 
  1301  0693                     	;# 
  1302  0694                     	;# 
  1303  0695                     	;# 
  1304  0696                     	;# 
  1305  0697                     	;# 
  1306  0698                     	;# 
  1307  0699                     	;# 
  1308  0711                     	;# 
  1309  0712                     	;# 
  1310  0713                     	;# 
  1311  0714                     	;# 
  1312  0715                     	;# 
  1313  0716                     	;# 
  1314  0717                     	;# 
  1315  0718                     	;# 
  1316  0719                     	;# 
  1317  0891                     	;# 
  1318  0891                     	;# 
  1319  0891                     	;# 
  1320  0891                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0892                     	;# 
  1324  0892                     	;# 
  1325  0892                     	;# 
  1326  0893                     	;# 
  1327  0893                     	;# 
  1328  0893                     	;# 
  1329  0893                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0894                     	;# 
  1333  0894                     	;# 
  1334  0894                     	;# 
  1335  0895                     	;# 
  1336  0895                     	;# 
  1337  0895                     	;# 
  1338  0896                     	;# 
  1339  0896                     	;# 
  1340  0896                     	;# 
  1341  089B                     	;# 
  1342  0911                     	;# 
  1343  0912                     	;# 
  1344  0913                     	;# 
  1345  0914                     	;# 
  1346  0915                     	;# 
  1347  0916                     	;# 
  1348  0918                     	;# 
  1349  0919                     	;# 
  1350  091A                     	;# 
  1351  091B                     	;# 
  1352  091C                     	;# 
  1353  091D                     	;# 
  1354  091E                     	;# 
  1355  091F                     	;# 
  1356  0E0F                     	;# 
  1357  0E10                     	;# 
  1358  0E11                     	;# 
  1359  0E12                     	;# 
  1360  0E13                     	;# 
  1361  0E14                     	;# 
  1362  0E15                     	;# 
  1363  0E16                     	;# 
  1364  0E17                     	;# 
  1365  0E18                     	;# 
  1366  0E19                     	;# 
  1367  0E1A                     	;# 
  1368  0E1B                     	;# 
  1369  0E1C                     	;# 
  1370  0E1D                     	;# 
  1371  0E1E                     	;# 
  1372  0E1F                     	;# 
  1373  0E20                     	;# 
  1374  0E21                     	;# 
  1375  0E22                     	;# 
  1376  0E24                     	;# 
  1377  0E25                     	;# 
  1378  0E28                     	;# 
  1379  0E29                     	;# 
  1380  0E2A                     	;# 
  1381  0E2B                     	;# 
  1382  0E2C                     	;# 
  1383  0E2D                     	;# 
  1384  0E2E                     	;# 
  1385  0E2F                     	;# 
  1386  0E90                     	;# 
  1387  0E91                     	;# 
  1388  0E92                     	;# 
  1389  0E94                     	;# 
  1390  0E95                     	;# 
  1391  0EA0                     	;# 
  1392  0EA1                     	;# 
  1393  0EA2                     	;# 
  1394  0EA3                     	;# 
  1395  0EA4                     	;# 
  1396  0EA5                     	;# 
  1397  0F0F                     	;# 
  1398  0F10                     	;# 
  1399  0F11                     	;# 
  1400  0F12                     	;# 
  1401  0F13                     	;# 
  1402  0F14                     	;# 
  1403  0F15                     	;# 
  1404  0F16                     	;# 
  1405  0F17                     	;# 
  1406  0F18                     	;# 
  1407  0F19                     	;# 
  1408  0F1A                     	;# 
  1409  0F1B                     	;# 
  1410  0F1C                     	;# 
  1411  0F1D                     	;# 
  1412  0F1E                     	;# 
  1413  0F1F                     	;# 
  1414  0F20                     	;# 
  1415  0F21                     	;# 
  1416  0F22                     	;# 
  1417  0F23                     	;# 
  1418  0F24                     	;# 
  1419  0F25                     	;# 
  1420  0F26                     	;# 
  1421  0F27                     	;# 
  1422  0F28                     	;# 
  1423  0F29                     	;# 
  1424  0F2A                     	;# 
  1425  0F2B                     	;# 
  1426  0F2C                     	;# 
  1427  0F2D                     	;# 
  1428  0F2E                     	;# 
  1429  0F2F                     	;# 
  1430  0F30                     	;# 
  1431  0F31                     	;# 
  1432  0F32                     	;# 
  1433  0F33                     	;# 
  1434  0F34                     	;# 
  1435  0F35                     	;# 
  1436  0F36                     	;# 
  1437  0F37                     	;# 
  1438  0FE4                     	;# 
  1439  0FE5                     	;# 
  1440  0FE6                     	;# 
  1441  0FE7                     	;# 
  1442  0FE8                     	;# 
  1443  0FE9                     	;# 
  1444  0FEA                     	;# 
  1445  0FEB                     	;# 
  1446  0FED                     	;# 
  1447  0FEE                     	;# 
  1448  0FEF                     	;# 
  1449  0000                     	;# 
  1450  0001                     	;# 
  1451  0002                     	;# 
  1452  0003                     	;# 
  1453  0004                     	;# 
  1454  0005                     	;# 
  1455  0006                     	;# 
  1456  0007                     	;# 
  1457  0008                     	;# 
  1458  0009                     	;# 
  1459  000A                     	;# 
  1460  000B                     	;# 
  1461  000C                     	;# 
  1462  000E                     	;# 
  1463  0010                     	;# 
  1464  0011                     	;# 
  1465  0012                     	;# 
  1466  0013                     	;# 
  1467  0014                     	;# 
  1468  0015                     	;# 
  1469  0015                     	;# 
  1470  0016                     	;# 
  1471  0016                     	;# 
  1472  0017                     	;# 
  1473  0018                     	;# 
  1474  0019                     	;# 
  1475  0019                     	;# 
  1476  001A                     	;# 
  1477  001B                     	;# 
  1478  001C                     	;# 
  1479  001D                     	;# 
  1480  001E                     	;# 
  1481  001F                     	;# 
  1482  008C                     	;# 
  1483  008E                     	;# 
  1484  0090                     	;# 
  1485  0091                     	;# 
  1486  0092                     	;# 
  1487  0093                     	;# 
  1488  0094                     	;# 
  1489  0097                     	;# 
  1490  009B                     	;# 
  1491  009B                     	;# 
  1492  009C                     	;# 
  1493  009D                     	;# 
  1494  009E                     	;# 
  1495  009F                     	;# 
  1496  010C                     	;# 
  1497  010E                     	;# 
  1498  0111                     	;# 
  1499  0112                     	;# 
  1500  0113                     	;# 
  1501  0114                     	;# 
  1502  0115                     	;# 
  1503  0116                     	;# 
  1504  0117                     	;# 
  1505  0118                     	;# 
  1506  0119                     	;# 
  1507  018C                     	;# 
  1508  018E                     	;# 
  1509  0199                     	;# 
  1510  0199                     	;# 
  1511  0199                     	;# 
  1512  019A                     	;# 
  1513  019A                     	;# 
  1514  019A                     	;# 
  1515  019B                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019C                     	;# 
  1521  019C                     	;# 
  1522  019C                     	;# 
  1523  019D                     	;# 
  1524  019D                     	;# 
  1525  019D                     	;# 
  1526  019E                     	;# 
  1527  019E                     	;# 
  1528  019E                     	;# 
  1529  019F                     	;# 
  1530  019F                     	;# 
  1531  019F                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  020C                     	;# 
  1535  020E                     	;# 
  1536  0211                     	;# 
  1537  0211                     	;# 
  1538  0212                     	;# 
  1539  0212                     	;# 
  1540  0213                     	;# 
  1541  0213                     	;# 
  1542  0214                     	;# 
  1543  0214                     	;# 
  1544  0215                     	;# 
  1545  0215                     	;# 
  1546  0215                     	;# 
  1547  0215                     	;# 
  1548  0216                     	;# 
  1549  0216                     	;# 
  1550  0217                     	;# 
  1551  0217                     	;# 
  1552  0219                     	;# 
  1553  021A                     	;# 
  1554  021B                     	;# 
  1555  021C                     	;# 
  1556  021D                     	;# 
  1557  021D                     	;# 
  1558  021E                     	;# 
  1559  021F                     	;# 
  1560  028C                     	;# 
  1561  028E                     	;# 
  1562  0291                     	;# 
  1563  0291                     	;# 
  1564  0292                     	;# 
  1565  0293                     	;# 
  1566  0294                     	;# 
  1567  0295                     	;# 
  1568  0295                     	;# 
  1569  0296                     	;# 
  1570  0297                     	;# 
  1571  0298                     	;# 
  1572  029F                     	;# 
  1573  030C                     	;# 
  1574  030E                     	;# 
  1575  0311                     	;# 
  1576  0311                     	;# 
  1577  0312                     	;# 
  1578  0313                     	;# 
  1579  0314                     	;# 
  1580  0315                     	;# 
  1581  0315                     	;# 
  1582  0316                     	;# 
  1583  0317                     	;# 
  1584  0318                     	;# 
  1585  038C                     	;# 
  1586  038E                     	;# 
  1587  0391                     	;# 
  1588  0392                     	;# 
  1589  0393                     	;# 
  1590  0397                     	;# 
  1591  0398                     	;# 
  1592  0399                     	;# 
  1593  039A                     	;# 
  1594  039C                     	;# 
  1595  039D                     	;# 
  1596  039E                     	;# 
  1597  039F                     	;# 
  1598  0411                     	;# 
  1599  0411                     	;# 
  1600  0412                     	;# 
  1601  0413                     	;# 
  1602  0414                     	;# 
  1603  0415                     	;# 
  1604  0416                     	;# 
  1605  0417                     	;# 
  1606  0418                     	;# 
  1607  0418                     	;# 
  1608  0419                     	;# 
  1609  041A                     	;# 
  1610  041B                     	;# 
  1611  041C                     	;# 
  1612  041D                     	;# 
  1613  041E                     	;# 
  1614  041F                     	;# 
  1615  0498                     	;# 
  1616  0498                     	;# 
  1617  0499                     	;# 
  1618  049A                     	;# 
  1619  049B                     	;# 
  1620  049B                     	;# 
  1621  049C                     	;# 
  1622  049D                     	;# 
  1623  049E                     	;# 
  1624  049F                     	;# 
  1625  0617                     	;# 
  1626  0618                     	;# 
  1627  0619                     	;# 
  1628  0619                     	;# 
  1629  061A                     	;# 
  1630  061B                     	;# 
  1631  061C                     	;# 
  1632  061C                     	;# 
  1633  061F                     	;# 
  1634  0691                     	;# 
  1635  0692                     	;# 
  1636  0693                     	;# 
  1637  0694                     	;# 
  1638  0695                     	;# 
  1639  0696                     	;# 
  1640  0697                     	;# 
  1641  0698                     	;# 
  1642  0699                     	;# 
  1643  0711                     	;# 
  1644  0712                     	;# 
  1645  0713                     	;# 
  1646  0714                     	;# 
  1647  0715                     	;# 
  1648  0716                     	;# 
  1649  0717                     	;# 
  1650  0718                     	;# 
  1651  0719                     	;# 
  1652  0891                     	;# 
  1653  0891                     	;# 
  1654  0891                     	;# 
  1655  0891                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0892                     	;# 
  1659  0892                     	;# 
  1660  0892                     	;# 
  1661  0893                     	;# 
  1662  0893                     	;# 
  1663  0893                     	;# 
  1664  0893                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0894                     	;# 
  1668  0894                     	;# 
  1669  0894                     	;# 
  1670  0895                     	;# 
  1671  0895                     	;# 
  1672  0895                     	;# 
  1673  0896                     	;# 
  1674  0896                     	;# 
  1675  0896                     	;# 
  1676  089B                     	;# 
  1677  0911                     	;# 
  1678  0912                     	;# 
  1679  0913                     	;# 
  1680  0914                     	;# 
  1681  0915                     	;# 
  1682  0916                     	;# 
  1683  0918                     	;# 
  1684  0919                     	;# 
  1685  091A                     	;# 
  1686  091B                     	;# 
  1687  091C                     	;# 
  1688  091D                     	;# 
  1689  091E                     	;# 
  1690  091F                     	;# 
  1691  0E0F                     	;# 
  1692  0E10                     	;# 
  1693  0E11                     	;# 
  1694  0E12                     	;# 
  1695  0E13                     	;# 
  1696  0E14                     	;# 
  1697  0E15                     	;# 
  1698  0E16                     	;# 
  1699  0E17                     	;# 
  1700  0E18                     	;# 
  1701  0E19                     	;# 
  1702  0E1A                     	;# 
  1703  0E1B                     	;# 
  1704  0E1C                     	;# 
  1705  0E1D                     	;# 
  1706  0E1E                     	;# 
  1707  0E1F                     	;# 
  1708  0E20                     	;# 
  1709  0E21                     	;# 
  1710  0E22                     	;# 
  1711  0E24                     	;# 
  1712  0E25                     	;# 
  1713  0E28                     	;# 
  1714  0E29                     	;# 
  1715  0E2A                     	;# 
  1716  0E2B                     	;# 
  1717  0E2C                     	;# 
  1718  0E2D                     	;# 
  1719  0E2E                     	;# 
  1720  0E2F                     	;# 
  1721  0E90                     	;# 
  1722  0E91                     	;# 
  1723  0E92                     	;# 
  1724  0E94                     	;# 
  1725  0E95                     	;# 
  1726  0EA0                     	;# 
  1727  0EA1                     	;# 
  1728  0EA2                     	;# 
  1729  0EA3                     	;# 
  1730  0EA4                     	;# 
  1731  0EA5                     	;# 
  1732  0F0F                     	;# 
  1733  0F10                     	;# 
  1734  0F11                     	;# 
  1735  0F12                     	;# 
  1736  0F13                     	;# 
  1737  0F14                     	;# 
  1738  0F15                     	;# 
  1739  0F16                     	;# 
  1740  0F17                     	;# 
  1741  0F18                     	;# 
  1742  0F19                     	;# 
  1743  0F1A                     	;# 
  1744  0F1B                     	;# 
  1745  0F1C                     	;# 
  1746  0F1D                     	;# 
  1747  0F1E                     	;# 
  1748  0F1F                     	;# 
  1749  0F20                     	;# 
  1750  0F21                     	;# 
  1751  0F22                     	;# 
  1752  0F23                     	;# 
  1753  0F24                     	;# 
  1754  0F25                     	;# 
  1755  0F26                     	;# 
  1756  0F27                     	;# 
  1757  0F28                     	;# 
  1758  0F29                     	;# 
  1759  0F2A                     	;# 
  1760  0F2B                     	;# 
  1761  0F2C                     	;# 
  1762  0F2D                     	;# 
  1763  0F2E                     	;# 
  1764  0F2F                     	;# 
  1765  0F30                     	;# 
  1766  0F31                     	;# 
  1767  0F32                     	;# 
  1768  0F33                     	;# 
  1769  0F34                     	;# 
  1770  0F35                     	;# 
  1771  0F36                     	;# 
  1772  0F37                     	;# 
  1773  0FE4                     	;# 
  1774  0FE5                     	;# 
  1775  0FE6                     	;# 
  1776  0FE7                     	;# 
  1777  0FE8                     	;# 
  1778  0FE9                     	;# 
  1779  0FEA                     	;# 
  1780  0FEB                     	;# 
  1781  0FED                     	;# 
  1782  0FEE                     	;# 
  1783  0FEF                     	;# 
  1784  0000                     	;# 
  1785  0001                     	;# 
  1786  0002                     	;# 
  1787  0003                     	;# 
  1788  0004                     	;# 
  1789  0005                     	;# 
  1790  0006                     	;# 
  1791  0007                     	;# 
  1792  0008                     	;# 
  1793  0009                     	;# 
  1794  000A                     	;# 
  1795  000B                     	;# 
  1796  000C                     	;# 
  1797  000E                     	;# 
  1798  0010                     	;# 
  1799  0011                     	;# 
  1800  0012                     	;# 
  1801  0013                     	;# 
  1802  0014                     	;# 
  1803  0015                     	;# 
  1804  0015                     	;# 
  1805  0016                     	;# 
  1806  0016                     	;# 
  1807  0017                     	;# 
  1808  0018                     	;# 
  1809  0019                     	;# 
  1810  0019                     	;# 
  1811  001A                     	;# 
  1812  001B                     	;# 
  1813  001C                     	;# 
  1814  001D                     	;# 
  1815  001E                     	;# 
  1816  001F                     	;# 
  1817  008C                     	;# 
  1818  008E                     	;# 
  1819  0090                     	;# 
  1820  0091                     	;# 
  1821  0092                     	;# 
  1822  0093                     	;# 
  1823  0094                     	;# 
  1824  0097                     	;# 
  1825  009B                     	;# 
  1826  009B                     	;# 
  1827  009C                     	;# 
  1828  009D                     	;# 
  1829  009E                     	;# 
  1830  009F                     	;# 
  1831  010C                     	;# 
  1832  010E                     	;# 
  1833  0111                     	;# 
  1834  0112                     	;# 
  1835  0113                     	;# 
  1836  0114                     	;# 
  1837  0115                     	;# 
  1838  0116                     	;# 
  1839  0117                     	;# 
  1840  0118                     	;# 
  1841  0119                     	;# 
  1842  018C                     	;# 
  1843  018E                     	;# 
  1844  0199                     	;# 
  1845  0199                     	;# 
  1846  0199                     	;# 
  1847  019A                     	;# 
  1848  019A                     	;# 
  1849  019A                     	;# 
  1850  019B                     	;# 
  1851  019B                     	;# 
  1852  019B                     	;# 
  1853  019B                     	;# 
  1854  019B                     	;# 
  1855  019C                     	;# 
  1856  019C                     	;# 
  1857  019C                     	;# 
  1858  019D                     	;# 
  1859  019D                     	;# 
  1860  019D                     	;# 
  1861  019E                     	;# 
  1862  019E                     	;# 
  1863  019E                     	;# 
  1864  019F                     	;# 
  1865  019F                     	;# 
  1866  019F                     	;# 
  1867  019F                     	;# 
  1868  019F                     	;# 
  1869  020C                     	;# 
  1870  020E                     	;# 
  1871  0211                     	;# 
  1872  0211                     	;# 
  1873  0212                     	;# 
  1874  0212                     	;# 
  1875  0213                     	;# 
  1876  0213                     	;# 
  1877  0214                     	;# 
  1878  0214                     	;# 
  1879  0215                     	;# 
  1880  0215                     	;# 
  1881  0215                     	;# 
  1882  0215                     	;# 
  1883  0216                     	;# 
  1884  0216                     	;# 
  1885  0217                     	;# 
  1886  0217                     	;# 
  1887  0219                     	;# 
  1888  021A                     	;# 
  1889  021B                     	;# 
  1890  021C                     	;# 
  1891  021D                     	;# 
  1892  021D                     	;# 
  1893  021E                     	;# 
  1894  021F                     	;# 
  1895  028C                     	;# 
  1896  028E                     	;# 
  1897  0291                     	;# 
  1898  0291                     	;# 
  1899  0292                     	;# 
  1900  0293                     	;# 
  1901  0294                     	;# 
  1902  0295                     	;# 
  1903  0295                     	;# 
  1904  0296                     	;# 
  1905  0297                     	;# 
  1906  0298                     	;# 
  1907  029F                     	;# 
  1908  030C                     	;# 
  1909  030E                     	;# 
  1910  0311                     	;# 
  1911  0311                     	;# 
  1912  0312                     	;# 
  1913  0313                     	;# 
  1914  0314                     	;# 
  1915  0315                     	;# 
  1916  0315                     	;# 
  1917  0316                     	;# 
  1918  0317                     	;# 
  1919  0318                     	;# 
  1920  038C                     	;# 
  1921  038E                     	;# 
  1922  0391                     	;# 
  1923  0392                     	;# 
  1924  0393                     	;# 
  1925  0397                     	;# 
  1926  0398                     	;# 
  1927  0399                     	;# 
  1928  039A                     	;# 
  1929  039C                     	;# 
  1930  039D                     	;# 
  1931  039E                     	;# 
  1932  039F                     	;# 
  1933  0411                     	;# 
  1934  0411                     	;# 
  1935  0412                     	;# 
  1936  0413                     	;# 
  1937  0414                     	;# 
  1938  0415                     	;# 
  1939  0416                     	;# 
  1940  0417                     	;# 
  1941  0418                     	;# 
  1942  0418                     	;# 
  1943  0419                     	;# 
  1944  041A                     	;# 
  1945  041B                     	;# 
  1946  041C                     	;# 
  1947  041D                     	;# 
  1948  041E                     	;# 
  1949  041F                     	;# 
  1950  0498                     	;# 
  1951  0498                     	;# 
  1952  0499                     	;# 
  1953  049A                     	;# 
  1954  049B                     	;# 
  1955  049B                     	;# 
  1956  049C                     	;# 
  1957  049D                     	;# 
  1958  049E                     	;# 
  1959  049F                     	;# 
  1960  0617                     	;# 
  1961  0618                     	;# 
  1962  0619                     	;# 
  1963  0619                     	;# 
  1964  061A                     	;# 
  1965  061B                     	;# 
  1966  061C                     	;# 
  1967  061C                     	;# 
  1968  061F                     	;# 
  1969  0691                     	;# 
  1970  0692                     	;# 
  1971  0693                     	;# 
  1972  0694                     	;# 
  1973  0695                     	;# 
  1974  0696                     	;# 
  1975  0697                     	;# 
  1976  0698                     	;# 
  1977  0699                     	;# 
  1978  0711                     	;# 
  1979  0712                     	;# 
  1980  0713                     	;# 
  1981  0714                     	;# 
  1982  0715                     	;# 
  1983  0716                     	;# 
  1984  0717                     	;# 
  1985  0718                     	;# 
  1986  0719                     	;# 
  1987  0891                     	;# 
  1988  0891                     	;# 
  1989  0891                     	;# 
  1990  0891                     	;# 
  1991  0891                     	;# 
  1992  0891                     	;# 
  1993  0892                     	;# 
  1994  0892                     	;# 
  1995  0892                     	;# 
  1996  0893                     	;# 
  1997  0893                     	;# 
  1998  0893                     	;# 
  1999  0893                     	;# 
  2000  0893                     	;# 
  2001  0893                     	;# 
  2002  0894                     	;# 
  2003  0894                     	;# 
  2004  0894                     	;# 
  2005  0895                     	;# 
  2006  0895                     	;# 
  2007  0895                     	;# 
  2008  0896                     	;# 
  2009  0896                     	;# 
  2010  0896                     	;# 
  2011  089B                     	;# 
  2012  0911                     	;# 
  2013  0912                     	;# 
  2014  0913                     	;# 
  2015  0914                     	;# 
  2016  0915                     	;# 
  2017  0916                     	;# 
  2018  0918                     	;# 
  2019  0919                     	;# 
  2020  091A                     	;# 
  2021  091B                     	;# 
  2022  091C                     	;# 
  2023  091D                     	;# 
  2024  091E                     	;# 
  2025  091F                     	;# 
  2026  0E0F                     	;# 
  2027  0E10                     	;# 
  2028  0E11                     	;# 
  2029  0E12                     	;# 
  2030  0E13                     	;# 
  2031  0E14                     	;# 
  2032  0E15                     	;# 
  2033  0E16                     	;# 
  2034  0E17                     	;# 
  2035  0E18                     	;# 
  2036  0E19                     	;# 
  2037  0E1A                     	;# 
  2038  0E1B                     	;# 
  2039  0E1C                     	;# 
  2040  0E1D                     	;# 
  2041  0E1E                     	;# 
  2042  0E1F                     	;# 
  2043  0E20                     	;# 
  2044  0E21                     	;# 
  2045  0E22                     	;# 
  2046  0E24                     	;# 
  2047  0E25                     	;# 
  2048  0E28                     	;# 
  2049  0E29                     	;# 
  2050  0E2A                     	;# 
  2051  0E2B                     	;# 
  2052  0E2C                     	;# 
  2053  0E2D                     	;# 
  2054  0E2E                     	;# 
  2055  0E2F                     	;# 
  2056  0E90                     	;# 
  2057  0E91                     	;# 
  2058  0E92                     	;# 
  2059  0E94                     	;# 
  2060  0E95                     	;# 
  2061  0EA0                     	;# 
  2062  0EA1                     	;# 
  2063  0EA2                     	;# 
  2064  0EA3                     	;# 
  2065  0EA4                     	;# 
  2066  0EA5                     	;# 
  2067  0F0F                     	;# 
  2068  0F10                     	;# 
  2069  0F11                     	;# 
  2070  0F12                     	;# 
  2071  0F13                     	;# 
  2072  0F14                     	;# 
  2073  0F15                     	;# 
  2074  0F16                     	;# 
  2075  0F17                     	;# 
  2076  0F18                     	;# 
  2077  0F19                     	;# 
  2078  0F1A                     	;# 
  2079  0F1B                     	;# 
  2080  0F1C                     	;# 
  2081  0F1D                     	;# 
  2082  0F1E                     	;# 
  2083  0F1F                     	;# 
  2084  0F20                     	;# 
  2085  0F21                     	;# 
  2086  0F22                     	;# 
  2087  0F23                     	;# 
  2088  0F24                     	;# 
  2089  0F25                     	;# 
  2090  0F26                     	;# 
  2091  0F27                     	;# 
  2092  0F28                     	;# 
  2093  0F29                     	;# 
  2094  0F2A                     	;# 
  2095  0F2B                     	;# 
  2096  0F2C                     	;# 
  2097  0F2D                     	;# 
  2098  0F2E                     	;# 
  2099  0F2F                     	;# 
  2100  0F30                     	;# 
  2101  0F31                     	;# 
  2102  0F32                     	;# 
  2103  0F33                     	;# 
  2104  0F34                     	;# 
  2105  0F35                     	;# 
  2106  0F36                     	;# 
  2107  0F37                     	;# 
  2108  0FE4                     	;# 
  2109  0FE5                     	;# 
  2110  0FE6                     	;# 
  2111  0FE7                     	;# 
  2112  0FE8                     	;# 
  2113  0FE9                     	;# 
  2114  0FEA                     	;# 
  2115  0FEB                     	;# 
  2116  0FED                     	;# 
  2117  0FEE                     	;# 
  2118  0FEF                     	;# 
  2119  1FE0                     _romArray_absaddr	set	8160
  2120                           
  2121                           	psect	stringtext1
  2122  1000                     __pstringtext1:	
  2123  1000                     _resetRomData:	
  2124  1000  34AA               	retlw	170
  2125  1001  3455               	retlw	85
  2126  1002  346E               	retlw	110
  2127  1003  3463               	retlw	99
  2128  1004  346F               	retlw	111
  2129  1005  346E               	retlw	110
  2130  1006  3466               	retlw	102
  2131  1007  3469               	retlw	105
  2132  1008  3467               	retlw	103
  2133  1009  3475               	retlw	117
  2134  100A  3472               	retlw	114
  2135  100B  3465               	retlw	101
  2136  100C  3464               	retlw	100
  2137  100D  3400               	retlw	0
  2138  100E  3400               	retlw	0
  2139  100F  3400               	retlw	0
  2140  1010  3400               	retlw	0
  2141  1011  3400               	retlw	0
  2142  1012  3400               	retlw	0
  2143  1013                     __end_of_resetRomData:	
  2144                           
  2145                           	psect	stringtext2
  2146  1019                     __pstringtext2:	
  2147  1019                     _n_ADDRESS_P0:	
  2148  1019  34AD               	retlw	173
  2149  101A  3487               	retlw	135
  2150  101B  3466               	retlw	102
  2151  101C  34BC               	retlw	188
  2152  101D  34BB               	retlw	187
  2153  101E                     __end_of_n_ADDRESS_P0:	
  2154                           
  2155                           	psect	stringtext3
  2156  1040                     __pstringtext3:	
  2157  1040                     _n_ADDRESS_MUL:	
  2158  1040  3421               	retlw	33
  2159  1041                     __end_of_n_ADDRESS_MUL:	
  2160  1FE0                     _romArray_absaddr	set	8160
  2161                           
  2162                           	psect	_romArray_text
  2163  1FE0                     __p_romArray_text:	
  2164  1FE0                     _romArray:	
  2165  1FE0  3400               	retlw	0
  2166  1FE1  3400               	retlw	0
  2167  1FE2  3400               	retlw	0
  2168  1FE3  3400               	retlw	0
  2169  1FE4  3400               	retlw	0
  2170  1FE5  3400               	retlw	0
  2171  1FE6  3400               	retlw	0
  2172  1FE7  3400               	retlw	0
  2173  1FE8  3400               	retlw	0
  2174  1FE9  3400               	retlw	0
  2175  1FEA  3400               	retlw	0
  2176  1FEB  3400               	retlw	0
  2177  1FEC  3400               	retlw	0
  2178  1FED  3400               	retlw	0
  2179  1FEE  3400               	retlw	0
  2180  1FEF  3400               	retlw	0
  2181  1FF0  3400               	retlw	0
  2182  1FF1  3400               	retlw	0
  2183  1FF2  3400               	retlw	0
  2184  1FF3  3400               	retlw	0
  2185  1FF4  3400               	retlw	0
  2186  1FF5  3400               	retlw	0
  2187  1FF6  3400               	retlw	0
  2188  1FF7  3400               	retlw	0
  2189  1FF8  3400               	retlw	0
  2190  1FF9  3400               	retlw	0
  2191  1FFA  3400               	retlw	0
  2192  1FFB  3400               	retlw	0
  2193  1FFC  3400               	retlw	0
  2194  1FFD  3400               	retlw	0
  2195  1FFE  3400               	retlw	0
  2196  1FFF  3400               	retlw	0
  2197  2000                     __end_of_romArray:	
  2198  0003                     _STATUSbits	set	3
  2199  0010                     _PIR0bits	set	16
  2200  000E                     _PORTCbits	set	14
  2201  000C                     _PORTAbits	set	12
  2202  000B                     _INTCONbits	set	11
  2203  0097                     _WDTCONbits	set	151
  2204  009E                     _ADCON1bits	set	158
  2205  009C                     _ADRESH	set	156
  2206  009B                     _ADRESL	set	155
  2207  009D                     _ADCON0bits	set	157
  2208  0090                     _PIE0bits	set	144
  2209  008E                     _TRISCbits	set	142
  2210  008C                     _TRISAbits	set	140
  2211  0117                     _FVRCONbits	set	279
  2212  018E                     _ANSELCbits	set	398
  2213  018C                     _ANSELAbits	set	396
  2214  018E                     _ANSELC	set	398
  2215  018C                     _ANSELA	set	396
  2216  020C                     _WPUAbits	set	524
  2217  020E                     _WPUC	set	526
  2218  020C                     _WPUA	set	524
  2219  0211                     _SSP1BUF	set	529
  2220  0214                     _SSP1STATbits	set	532
  2221  0215                     _SSP1CON1bits	set	533
  2222  028E                     _ODCONC	set	654
  2223  028C                     _ODCONA	set	652
  2224  038E                     _INLVLC	set	910
  2225  038C                     _INLVLA	set	908
  2226  0894                     _PMDATH	set	2196
  2227  0893                     _PMDATL	set	2195
  2228  0896                     _PMCON2	set	2198
  2229  0895                     _PMCON1bits	set	2197
  2230  0892                     _PMADRH	set	2194
  2231  0891                     _PMADRL	set	2193
  2232  0895                     _PMCON1	set	2197
  2233  0919                     _OSCCON1bits	set	2329
  2234  0EA0                     _RC0PPSbits	set	3744
  2235  0EA2                     _RC2PPSbits	set	3746
  2236  0EA1                     _RC1PPSbits	set	3745
  2237                           
  2238                           	psect	stringtext4
  2239  1013                     __pstringtext4:	
  2240  1013                     STR_8:	
  2241  1013  3452               	retlw	82	;'R'
  2242  1014  3446               	retlw	70	;'F'
  2243  1015  3450               	retlw	80	;'P'
  2244  1016  3457               	retlw	87	;'W'
  2245  1017  3452               	retlw	82	;'R'
  2246  1018  3400               	retlw	0
  2247                           
  2248                           	psect	stringtext5
  2249  101E                     __pstringtext5:	
  2250  101E                     STR_5:	
  2251  101E  3441               	retlw	65	;'A'
  2252  101F  344E               	retlw	78	;'N'
  2253  1020  3443               	retlw	67	;'C'
  2254  1021  3433               	retlw	51	;'3'
  2255  1022  3400               	retlw	0
  2256                           
  2257                           	psect	stringtext6
  2258  1023                     __pstringtext6:	
  2259  1023                     STR_7:	
  2260  1023  3454               	retlw	84	;'T'
  2261  1024  3445               	retlw	69	;'E'
  2262  1025  344D               	retlw	77	;'M'
  2263  1026  3450               	retlw	80	;'P'
  2264  1027  3400               	retlw	0
  2265                           
  2266                           	psect	stringtext7
  2267  1028                     __pstringtext7:	
  2268  1028                     STR_4:	
  2269  1028  3456               	retlw	86	;'V'
  2270  1029  3442               	retlw	66	;'B'
  2271  102A  3441               	retlw	65	;'A'
  2272  102B  3454               	retlw	84	;'T'
  2273  102C  3400               	retlw	0
  2274                           
  2275                           	psect	stringtext8
  2276  102D                     __pstringtext8:	
  2277  102D                     STR_10:	
  2278  102D  3442               	retlw	66	;'B'
  2279  102E  344F               	retlw	79	;'O'
  2280  102F  344F               	retlw	79	;'O'
  2281  1030  3454               	retlw	84	;'T'
  2282  1031  3400               	retlw	0
  2283                           
  2284                           	psect	stringtext9
  2285  1032                     __pstringtext9:	
  2286  1032                     STR_9:	
  2287  1032  3455               	retlw	85	;'U'
  2288  1033  3457               	retlw	87	;'W'
  2289  1034  3432               	retlw	50	;'2'
  2290  1035  3400               	retlw	0
  2291                           
  2292                           	psect	stringtext10
  2293  1036                     __pstringtext10:	
  2294  1036                     STR_3:	
  2295  1036  3444               	retlw	68	;'D'
  2296  1037  3442               	retlw	66	;'B'
  2297  1038  3447               	retlw	71	;'G'
  2298  1039  3400               	retlw	0
  2299                           
  2300                           	psect	stringtext11
  2301  103A                     __pstringtext11:	
  2302  103A                     STR_6:	
  2303  103A  3446               	retlw	70	;'F'
  2304  103B  3456               	retlw	86	;'V'
  2305  103C  3452               	retlw	82	;'R'
  2306  103D  3400               	retlw	0
  2307                           
  2308                           	psect	stringtext12
  2309  103E                     __pstringtext12:	
  2310  103E                     STR_1:	
  2311  103E  342F               	retlw	47	;'/'
  2312  103F  3400               	retlw	0
  2313                           
  2314                           	psect	stringtext13
  2315  0000                     __pstringtext13:	
  2316  103E                     
  2317                           ; #config settings
  2318  0000                     
  2319                           	psect	cinit
  2320  0011                     start_initialization:	
  2321  0011                     __initialization:	
  2322                           
  2323                           ; Clear objects allocated to BANK0
  2324  0011  3059               	movlw	low __pbssBANK0
  2325  0012  0084               	movwf	4
  2326  0013  3000               	movlw	high __pbssBANK0
  2327  0014  0085               	movwf	5
  2328  0015  3016               	movlw	22
  2329  0016  318D  25D3  3180   	fcall	clear_ram0
  2330                           
  2331                           ; Clear objects allocated to BANK1
  2332  0019  0021               	movlb	1	; select bank1
  2333  001A  01E3               	clrf	__pbssBANK1& (0+127)
  2334  001B  01E4               	clrf	(__pbssBANK1+1)& (0+127)
  2335  001C  01E5               	clrf	(__pbssBANK1+2)& (0+127)
  2336  001D  01E6               	clrf	(__pbssBANK1+3)& (0+127)
  2337                           
  2338                           ; Clear objects allocated to BANK2
  2339  001E  3020               	movlw	low __pbssBANK2
  2340  001F  0084               	movwf	4
  2341  0020  3001               	movlw	high __pbssBANK2
  2342  0021  0085               	movwf	5
  2343  0022  3041               	movlw	65
  2344  0023  318D  25D3         	fcall	clear_ram0
  2345  0025                     end_of_initialization:	
  2346                           ;End of C runtime variable initialization code
  2347                           
  2348  0025                     __end_of__initialization:	
  2349  0025  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2350  0026  0020               	movlb	0
  2351  0027  3183  2BD0         	ljmp	_main	;jump to C main() function
  2352                           
  2353                           	psect	bssBANK0
  2354  0059                     __pbssBANK0:	
  2355  0059                     _TXPacket:	
  2356  0059                     	ds	1
  2357  005A                     _sleepLoop:	
  2358  005A                     	ds	1
  2359  005B                     _nrf24l01:	
  2360  005B                     	ds	1
  2361  005C                     _romData:	
  2362  005C                     	ds	19
  2363                           
  2364                           	psect	bssBANK1
  2365  00E3                     __pbssBANK1:	
  2366  00E3                     _counter:	
  2367  00E3                     	ds	4
  2368                           
  2369                           	psect	bssBANK2
  2370  0120                     __pbssBANK2:	
  2371  0120                     _romHolder:	
  2372  0120                     	ds	32
  2373  0140                     _RXPacket:	
  2374  0140                     	ds	33
  2375                           
  2376                           	psect	clrtext
  2377  0DD3                     clear_ram0:	
  2378                           ;	Called with FSR0 containing the base address, and
  2379                           ;	WREG with the size to clear
  2380                           
  2381  0DD3  0064               	clrwdt	;clear the watchdog before getting into this loop
  2382  0DD4                     clrloop0:	
  2383  0DD4  0180               	clrf	0	;clear RAM location pointed to by FSR
  2384  0DD5  3101               	addfsr 0,1
  2385  0DD6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2386  0DD7  2DD4               	goto	clrloop0	;have we reached the end yet?
  2387  0DD8  3400               	retlw	0	;all done for this memory range, return
  2388                           
  2389                           	psect	cstackBANK1
  2390  00A0                     __pcstackBANK1:	
  2391  00A0                     loop@rfSetup:	
  2392                           
  2393                           ; 1 bytes @ 0x0
  2394  00A0                     	ds	1
  2395  00A1                     loop@packet:	
  2396                           
  2397                           ; 33 bytes @ 0x1
  2398  00A1                     	ds	33
  2399  00C2                     main@packet:	
  2400                           
  2401                           ; 33 bytes @ 0x22
  2402  00C2                     	ds	33
  2403                           
  2404                           	psect	cstackCOMMON
  2405  0070                     __pcstackCOMMON:	
  2406  0070                     ?_nrf24l01ISR:	
  2407  0070                     ?_nrf24l01SetRXMode:	
  2408                           ; 1 bytes @ 0x0
  2409                           
  2410  0070                     ?_nrf24l01GetRXPacket:	
  2411                           ; 1 bytes @ 0x0
  2412                           
  2413  0070                     ?_nrf24l01SendPacket:	
  2414                           ; 1 bytes @ 0x0
  2415                           
  2416  0070                     ?_nrf24l01Init:	
  2417                           ; 1 bytes @ 0x0
  2418                           
  2419  0070                     ?_flashRealod:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0070                     ?_flashUpdate:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0070                     ?_nrf24l01CELow:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0070                     ??_nrf24l01CELow:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0070                     ?_nrf24l01CEHigh:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0070                     ??_nrf24l01CEHigh:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0070                     ?_nrf24l01CSLow:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0070                     ??_nrf24l01CSLow:	
  2441                           ; 1 bytes @ 0x0
  2442                           
  2443  0070                     ?_nrf24l01CSHigh:	
  2444                           ; 1 bytes @ 0x0
  2445                           
  2446  0070                     ??_nrf24l01CSHigh:	
  2447                           ; 1 bytes @ 0x0
  2448                           
  2449  0070                     ?_nrf24l01InterfaceInit:	
  2450                           ; 1 bytes @ 0x0
  2451                           
  2452  0070                     ?_nrf24l01SPISend:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0070                     ??_nrf24l01SPISend:	
  2456                           ; 1 bytes @ 0x0
  2457                           
  2458  0070                     ?_nrf24l01SPIStart:	
  2459                           ; 1 bytes @ 0x0
  2460                           
  2461  0070                     ??_nrf24l01SPIStart:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464  0070                     ?_nrf24l01SPIEnd:	
  2465                           ; 1 bytes @ 0x0
  2466                           
  2467  0070                     ??_nrf24l01SPIEnd:	
  2468                           ; 1 bytes @ 0x0
  2469                           
  2470  0070                     ?_enableInterrupts:	
  2471                           ; 1 bytes @ 0x0
  2472                           
  2473  0070                     ??_enableInterrupts:	
  2474                           ; 1 bytes @ 0x0
  2475                           
  2476  0070                     ?_exception:	
  2477                           ; 1 bytes @ 0x0
  2478                           
  2479  0070                     ?_ISR:	
  2480                           ; 1 bytes @ 0x0
  2481                           
  2482  0070                     ?_sleep:	
  2483                           ; 1 bytes @ 0x0
  2484                           
  2485  0070                     ?_checkTXPower:	
  2486                           ; 1 bytes @ 0x0
  2487                           
  2488  0070                     ?_loop:	
  2489                           ; 1 bytes @ 0x0
  2490                           
  2491  0070                     ?_main:	
  2492                           ; 1 bytes @ 0x0
  2493                           
  2494  0070                     ?_nrf24l01CheckACK:	
  2495                           ; 1 bytes @ 0x0
  2496                           
  2497  0070                     ?_nrf24l01ReceivePacket:	
  2498                           ; 1 bytes @ 0x0
  2499                           
  2500  0070                     ?_nrf24l01InitRegisters:	
  2501                           ; 1 bytes @ 0x0
  2502                           
  2503  0070                     ?i1_flashWriteByte:	
  2504                           ; 1 bytes @ 0x0
  2505                           
  2506  0070                     ?i1_flashUpdate:	
  2507                           ; 1 bytes @ 0x0
  2508                           
  2509  0070                     ?i1_nrf24l01SetRXMode:	
  2510                           ; 1 bytes @ 0x0
  2511                           
  2512  0070                     ?i1_memset:	
  2513                           ; 1 bytes @ 0x0
  2514                           
  2515  0070                     ?_strcmp:	
  2516                           ; 1 bytes @ 0x0
  2517                           
  2518  0070                     ?___wmul:	
  2519                           ; 2 bytes @ 0x0
  2520                           
  2521  0070                     nrf24l01SPISend@data:	
  2522                           ; 2 bytes @ 0x0
  2523                           
  2524  0070                     enableInterrupts@enable:	
  2525                           ; 1 bytes @ 0x0
  2526                           
  2527  0070                     strcmp@s2:	
  2528                           ; 1 bytes @ 0x0
  2529                           
  2530  0070                     ___wmul@multiplier:	
  2531                           ; 1 bytes @ 0x0
  2532                           
  2533  0070                     i1flashWriteByte@offset:	
  2534                           ; 2 bytes @ 0x0
  2535                           
  2536  0070                     i1memset@p1:	
  2537                           ; 2 bytes @ 0x0
  2538                           
  2539                           
  2540                           ; 2 bytes @ 0x0
  2541  0070                     	ds	1
  2542  0071                     ?i1_nrf24l01Send:	
  2543  0071                     i1nrf24l01Send@data:	
  2544                           ; 1 bytes @ 0x1
  2545                           
  2546                           
  2547                           ; 1 bytes @ 0x1
  2548  0071                     	ds	1
  2549  0072                     ??_strcmp:	
  2550  0072                     ??i1_nrf24l01Send:	
  2551                           ; 1 bytes @ 0x2
  2552                           
  2553  0072                     ___wmul@multiplicand:	
  2554                           ; 1 bytes @ 0x2
  2555                           
  2556  0072                     i1flashWriteByte@data:	
  2557                           ; 2 bytes @ 0x2
  2558                           
  2559  0072                     i1memset@c:	
  2560                           ; 2 bytes @ 0x2
  2561                           
  2562                           
  2563                           ; 2 bytes @ 0x2
  2564  0072                     	ds	1
  2565  0073                     strcmp@r:	
  2566  0073                     i1nrf24l01Send@command:	
  2567                           ; 1 bytes @ 0x3
  2568                           
  2569                           
  2570                           ; 1 bytes @ 0x3
  2571  0073                     	ds	1
  2572  0074                     ??___wmul:	
  2573  0074                     ??i1_flashWriteByte:	
  2574                           ; 1 bytes @ 0x4
  2575                           
  2576  0074                     ??i1_nrf24l01SetRXMode:	
  2577                           ; 1 bytes @ 0x4
  2578                           
  2579  0074                     strcmp@s1:	
  2580                           ; 1 bytes @ 0x4
  2581                           
  2582  0074                     ___wmul@product:	
  2583                           ; 1 bytes @ 0x4
  2584                           
  2585  0074                     i1flashWriteByte@address:	
  2586                           ; 2 bytes @ 0x4
  2587                           
  2588  0074                     i1memset@n:	
  2589                           ; 2 bytes @ 0x4
  2590                           
  2591                           
  2592                           ; 2 bytes @ 0x4
  2593  0074                     	ds	1
  2594  0075                     i1nrf24l01SetRXMode@config:	
  2595                           
  2596                           ; 1 bytes @ 0x5
  2597  0075                     	ds	1
  2598  0076                     ??i1_flashUpdate:	
  2599  0076                     ??i1_memset:	
  2600                           ; 1 bytes @ 0x6
  2601                           
  2602  0076                     i1nrf24l01SetRXMode@rxMode:	
  2603                           ; 1 bytes @ 0x6
  2604                           
  2605  0076                     i1memset@p:	
  2606                           ; 1 bytes @ 0x6
  2607                           
  2608                           
  2609                           ; 2 bytes @ 0x6
  2610  0076                     	ds	1
  2611  0077                     ??_nrf24l01CheckACK:	
  2612                           
  2613                           ; 1 bytes @ 0x7
  2614  0077                     	ds	1
  2615  0078                     ??_nrf24l01ReceivePacket:	
  2616  0078                     i1flashUpdate@i:	
  2617                           ; 1 bytes @ 0x8
  2618                           
  2619                           
  2620                           ; 2 bytes @ 0x8
  2621  0078                     	ds	1
  2622  0079                     nrf24l01ReceivePacket@width:	
  2623                           
  2624                           ; 1 bytes @ 0x9
  2625  0079                     	ds	1
  2626  007A                     ??_exception:	
  2627  007A                     nrf24l01ReceivePacket@i:	
  2628                           ; 1 bytes @ 0xA
  2629                           
  2630                           
  2631                           ; 1 bytes @ 0xA
  2632  007A                     	ds	2
  2633  007C                     exception@exception:	
  2634                           
  2635                           ; 1 bytes @ 0xC
  2636  007C                     	ds	1
  2637  007D                     ??_nrf24l01ISR:	
  2638                           
  2639                           ; 1 bytes @ 0xD
  2640  007D                     	ds	1
  2641  007E                     ??_ISR:	
  2642                           
  2643                           	psect	cstackBANK0
  2644  0020                     __pcstackBANK0:	
  2645                           ; 1 bytes @ 0xE
  2646                           
  2647  0020                     nrf24l01ISR@status:	
  2648                           
  2649                           ; 1 bytes @ 0x0
  2650  0020                     	ds	1
  2651  0021                     ?_strcat:	
  2652  0021                     ??_nrf24l01GetRXPacket:	
  2653                           ; 1 bytes @ 0x1
  2654                           
  2655  0021                     ?_nrf24l01Send:	
  2656                           ; 1 bytes @ 0x1
  2657                           
  2658  0021                     ?_strcpy:	
  2659                           ; 1 bytes @ 0x1
  2660                           
  2661  0021                     ?_flashWriteByte:	
  2662                           ; 1 bytes @ 0x1
  2663                           
  2664  0021                     ??_nrf24l01InterfaceInit:	
  2665                           ; 1 bytes @ 0x1
  2666                           
  2667  0021                     ??_sleep:	
  2668                           ; 1 bytes @ 0x1
  2669                           
  2670  0021                     ?___bmul:	
  2671                           ; 1 bytes @ 0x1
  2672                           
  2673  0021                     ?_memset:	
  2674                           ; 1 bytes @ 0x1
  2675                           
  2676  0021                     ?_strlen:	
  2677                           ; 2 bytes @ 0x1
  2678                           
  2679  0021                     ?_flashReadByte:	
  2680                           ; 2 bytes @ 0x1
  2681                           
  2682  0021                     ?___lmul:	
  2683                           ; 2 bytes @ 0x1
  2684                           
  2685  0021                     ?___lldiv:	
  2686                           ; 4 bytes @ 0x1
  2687                           
  2688  0021                     ?___llmod:	
  2689                           ; 4 bytes @ 0x1
  2690                           
  2691  0021                     nrf24l01Send@data:	
  2692                           ; 4 bytes @ 0x1
  2693                           
  2694  0021                     ___bmul@multiplicand:	
  2695                           ; 1 bytes @ 0x1
  2696                           
  2697  0021                     flashWriteByte@offset:	
  2698                           ; 1 bytes @ 0x1
  2699                           
  2700  0021                     flashReadByte@offset:	
  2701                           ; 2 bytes @ 0x1
  2702                           
  2703  0021                     memset@p1:	
  2704                           ; 2 bytes @ 0x1
  2705                           
  2706  0021                     strcat@from:	
  2707                           ; 2 bytes @ 0x1
  2708                           
  2709  0021                     strcpy@from:	
  2710                           ; 2 bytes @ 0x1
  2711                           
  2712  0021                     ___lmul@multiplier:	
  2713                           ; 2 bytes @ 0x1
  2714                           
  2715  0021                     ___lldiv@divisor:	
  2716                           ; 4 bytes @ 0x1
  2717                           
  2718  0021                     ___llmod@divisor:	
  2719                           ; 4 bytes @ 0x1
  2720                           
  2721                           
  2722                           ; 4 bytes @ 0x1
  2723  0021                     	ds	1
  2724  0022                     ??_nrf24l01Send:	
  2725  0022                     ??___bmul:	
  2726                           ; 1 bytes @ 0x2
  2727                           
  2728                           
  2729                           ; 1 bytes @ 0x2
  2730  0022                     	ds	1
  2731  0023                     ??_strcat:	
  2732  0023                     ??_strcpy:	
  2733                           ; 1 bytes @ 0x3
  2734                           
  2735  0023                     ??_strlen:	
  2736                           ; 1 bytes @ 0x3
  2737                           
  2738  0023                     ??_flashReadByte:	
  2739                           ; 1 bytes @ 0x3
  2740                           
  2741  0023                     nrf24l01Send@command:	
  2742                           ; 1 bytes @ 0x3
  2743                           
  2744  0023                     ___bmul@product:	
  2745                           ; 1 bytes @ 0x3
  2746                           
  2747  0023                     flashWriteByte@data:	
  2748                           ; 1 bytes @ 0x3
  2749                           
  2750  0023                     memset@c:	
  2751                           ; 2 bytes @ 0x3
  2752                           
  2753                           
  2754                           ; 2 bytes @ 0x3
  2755  0023                     	ds	1
  2756  0024                     ??_nrf24l01SetRXMode:	
  2757  0024                     ?_nrf24l01ChangeTXPower:	
  2758                           ; 1 bytes @ 0x4
  2759                           
  2760  0024                     ___bmul@multiplier:	
  2761                           ; 1 bytes @ 0x4
  2762                           
  2763  0024                     strcat@cp:	
  2764                           ; 1 bytes @ 0x4
  2765                           
  2766  0024                     strcpy@to:	
  2767                           ; 1 bytes @ 0x4
  2768                           
  2769  0024                     nrf24l01ChangeTXPower@addPower:	
  2770                           ; 1 bytes @ 0x4
  2771                           
  2772                           
  2773                           ; 2 bytes @ 0x4
  2774  0024                     	ds	1
  2775  0025                     ??_flashWriteByte:	
  2776  0025                     ??_nrf24l01InitRegisters:	
  2777                           ; 1 bytes @ 0x5
  2778                           
  2779  0025                     nrf24l01SetRXMode@config:	
  2780                           ; 1 bytes @ 0x5
  2781                           
  2782  0025                     strcat@to:	
  2783                           ; 1 bytes @ 0x5
  2784                           
  2785  0025                     strcpy@cp:	
  2786                           ; 1 bytes @ 0x5
  2787                           
  2788  0025                     flashWriteByte@address:	
  2789                           ; 1 bytes @ 0x5
  2790                           
  2791  0025                     memset@n:	
  2792                           ; 2 bytes @ 0x5
  2793                           
  2794  0025                     ___lmul@multiplicand:	
  2795                           ; 2 bytes @ 0x5
  2796                           
  2797  0025                     ___lldiv@dividend:	
  2798                           ; 4 bytes @ 0x5
  2799                           
  2800  0025                     ___llmod@dividend:	
  2801                           ; 4 bytes @ 0x5
  2802                           
  2803                           
  2804                           ; 4 bytes @ 0x5
  2805  0025                     	ds	1
  2806  0026                     ??_nrf24l01ChangeTXPower:	
  2807  0026                     nrf24l01SetRXMode@rxMode:	
  2808                           ; 1 bytes @ 0x6
  2809                           
  2810  0026                     flashReadByte@result:	
  2811                           ; 1 bytes @ 0x6
  2812                           
  2813                           
  2814                           ; 2 bytes @ 0x6
  2815  0026                     	ds	1
  2816  0027                     ??_memset:	
  2817  0027                     ??_flashUpdate:	
  2818                           ; 1 bytes @ 0x7
  2819                           
  2820  0027                     nrf24l01ChangeTXPower@rfSetup:	
  2821                           ; 1 bytes @ 0x7
  2822                           
  2823  0027                     nrf24l01InitRegisters@channel:	
  2824                           ; 1 bytes @ 0x7
  2825                           
  2826  0027                     strlen@s:	
  2827                           ; 1 bytes @ 0x7
  2828                           
  2829  0027                     memset@p:	
  2830                           ; 1 bytes @ 0x7
  2831                           
  2832                           
  2833                           ; 2 bytes @ 0x7
  2834  0027                     	ds	1
  2835  0028                     ??_checkTXPower:	
  2836  0028                     nrf24l01InitRegisters@addressRegister:	
  2837                           ; 1 bytes @ 0x8
  2838                           
  2839  0028                     strlen@cp:	
  2840                           ; 1 bytes @ 0x8
  2841                           
  2842  0028                     flashReadByte@address:	
  2843                           ; 1 bytes @ 0x8
  2844                           
  2845                           
  2846                           ; 2 bytes @ 0x8
  2847  0028                     	ds	1
  2848  0029                     ??_nrf24l01SendPacket:	
  2849  0029                     ??___lmul:	
  2850                           ; 1 bytes @ 0x9
  2851                           
  2852  0029                     ??___lldiv:	
  2853                           ; 1 bytes @ 0x9
  2854                           
  2855  0029                     ??___llmod:	
  2856                           ; 1 bytes @ 0x9
  2857                           
  2858  0029                     checkTXPower@rxPacket:	
  2859                           ; 1 bytes @ 0x9
  2860                           
  2861  0029                     nrf24l01InitRegisters@setupAW:	
  2862                           ; 1 bytes @ 0x9
  2863                           
  2864  0029                     flashUpdate@i:	
  2865                           ; 1 bytes @ 0x9
  2866                           
  2867  0029                     ___lmul@product:	
  2868                           ; 2 bytes @ 0x9
  2869                           
  2870                           
  2871                           ; 4 bytes @ 0x9
  2872  0029                     	ds	1
  2873  002A                     ??_flashRealod:	
  2874  002A                     nrf24l01InitRegisters@feature:	
  2875                           ; 1 bytes @ 0xA
  2876                           
  2877  002A                     ___llmod@counter:	
  2878                           ; 1 bytes @ 0xA
  2879                           
  2880  002A                     ___lldiv@quotient:	
  2881                           ; 1 bytes @ 0xA
  2882                           
  2883                           
  2884                           ; 4 bytes @ 0xA
  2885  002A                     	ds	1
  2886  002B                     nrf24l01SendPacket@Packet:	
  2887  002B                     nrf24l01InitRegisters@rfSetup:	
  2888                           ; 1 bytes @ 0xB
  2889                           
  2890  002B                     flashRealod@i:	
  2891                           ; 1 bytes @ 0xB
  2892                           
  2893                           
  2894                           ; 2 bytes @ 0xB
  2895  002B                     	ds	1
  2896  002C                     nrf24l01SendPacket@i:	
  2897  002C                     nrf24l01InitRegisters@status:	
  2898                           ; 1 bytes @ 0xC
  2899                           
  2900                           
  2901                           ; 1 bytes @ 0xC
  2902  002C                     	ds	1
  2903  002D                     nrf24l01InitRegisters@enRXAddr:	
  2904                           
  2905                           ; 1 bytes @ 0xD
  2906  002D                     	ds	1
  2907  002E                     nrf24l01InitRegisters@enAA:	
  2908  002E                     ___lldiv@counter:	
  2909                           ; 1 bytes @ 0xE
  2910                           
  2911                           
  2912                           ; 1 bytes @ 0xE
  2913  002E                     	ds	1
  2914  002F                     ?_ultoa:	
  2915  002F                     ?_getADCValue:	
  2916                           ; 1 bytes @ 0xF
  2917                           
  2918  002F                     nrf24l01InitRegisters@DynPD:	
  2919                           ; 4 bytes @ 0xF
  2920                           
  2921  002F                     getADCValue@divider:	
  2922                           ; 1 bytes @ 0xF
  2923                           
  2924  002F                     ultoa@val:	
  2925                           ; 4 bytes @ 0xF
  2926                           
  2927                           
  2928                           ; 4 bytes @ 0xF
  2929  002F                     	ds	1
  2930  0030                     nrf24l01InitRegisters@lastAddressByte:	
  2931                           
  2932                           ; 1 bytes @ 0x10
  2933  0030                     	ds	1
  2934  0031                     nrf24l01InitRegisters@config:	
  2935                           
  2936                           ; 1 bytes @ 0x11
  2937  0031                     	ds	1
  2938  0032                     nrf24l01InitRegisters@i:	
  2939                           
  2940                           ; 2 bytes @ 0x12
  2941  0032                     	ds	1
  2942  0033                     ??_getADCValue:	
  2943  0033                     ultoa@base:	
  2944                           ; 1 bytes @ 0x13
  2945                           
  2946                           
  2947                           ; 2 bytes @ 0x13
  2948  0033                     	ds	1
  2949  0034                     ??_nrf24l01Init:	
  2950                           
  2951                           ; 1 bytes @ 0x14
  2952  0034                     	ds	1
  2953  0035                     ??_ultoa:	
  2954                           
  2955                           ; 1 bytes @ 0x15
  2956  0035                     	ds	1
  2957  0036                     ultoa@v:	
  2958                           
  2959                           ; 4 bytes @ 0x16
  2960  0036                     	ds	1
  2961  0037                     getADCValue@channel:	
  2962                           
  2963                           ; 1 bytes @ 0x17
  2964  0037                     	ds	1
  2965  0038                     getADCValue@adcLoop:	
  2966                           
  2967                           ; 1 bytes @ 0x18
  2968  0038                     	ds	1
  2969  0039                     getADCValue@adcSum:	
  2970                           
  2971                           ; 4 bytes @ 0x19
  2972  0039                     	ds	1
  2973  003A                     ultoa@c:	
  2974                           
  2975                           ; 1 bytes @ 0x1A
  2976  003A                     	ds	1
  2977  003B                     ultoa@buf:	
  2978                           
  2979                           ; 1 bytes @ 0x1B
  2980  003B                     	ds	2
  2981  003D                     ?_setMessage:	
  2982  003D                     setMessage@topic:	
  2983                           ; 1 bytes @ 0x1D
  2984                           
  2985                           
  2986                           ; 2 bytes @ 0x1D
  2987  003D                     	ds	2
  2988  003F                     setMessage@value:	
  2989                           
  2990                           ; 4 bytes @ 0x1F
  2991  003F                     	ds	4
  2992  0043                     ??_setMessage:	
  2993  0043                     setMessage@tempString:	
  2994                           ; 1 bytes @ 0x23
  2995                           
  2996                           
  2997                           ; 16 bytes @ 0x23
  2998  0043                     	ds	16
  2999  0053                     setMessage@packet:	
  3000                           
  3001                           ; 1 bytes @ 0x33
  3002  0053                     	ds	1
  3003  0054                     ??_loop:	
  3004                           
  3005                           ; 1 bytes @ 0x34
  3006  0054                     	ds	4
  3007  0058                     ??_main:	
  3008                           
  3009                           ; 1 bytes @ 0x38
  3010  0058                     	ds	1
  3011                           
  3012                           	psect	maintext
  3013  03D0                     __pmaintext:	
  3014 ;;
  3015 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3016 ;;
  3017 ;; *************** function _main *****************
  3018 ;; Defined at:
  3019 ;;		line 157 in file "main.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;		None
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;  packet         33   34[BANK1 ] struct .
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  1    wreg      void 
  3026 ;; Registers used:
  3027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3028 ;; Tracked objects:
  3029 ;;		On entry : B1F/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3034 ;;      Locals:         0       0      33       0       0       0       0       0       0       0       0       0       
      +0       0
  3035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3036 ;;      Totals:         0       1      33       0       0       0       0       0       0       0       0       0       
      +0       0
  3037 ;;Total ram usage:       34 bytes
  3038 ;; Hardware stack levels required when called:   13
  3039 ;; This function calls:
  3040 ;;		_flashRealod
  3041 ;;		_flashUpdate
  3042 ;;		_loop
  3043 ;;		_nrf24l01Init
  3044 ;;		_nrf24l01SendPacket
  3045 ;;		_setMessage
  3046 ;;		_sleep
  3047 ;;		_strcpy
  3048 ;; This function is called by:
  3049 ;;		Startup code after reset
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           
  3054                           ;psect for function _main
  3055  03D0                     _main:	
  3056                           
  3057                           ;main.c: 160: ANSELA = 0x00;
  3058                           
  3059                           ;incstack = 0
  3060                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3061  03D0  0023               	movlb	3	; select bank3
  3062  03D1  018C               	clrf	12	;volatile
  3063                           
  3064                           ;main.c: 161: ANSELC = 0x00;
  3065  03D2  018E               	clrf	14	;volatile
  3066                           
  3067                           ;main.c: 163: ODCONA = 0x00;
  3068  03D3  0025               	movlb	5	; select bank5
  3069  03D4  018C               	clrf	12	;volatile
  3070                           
  3071                           ;main.c: 164: ODCONC = 0x00;
  3072  03D5  018E               	clrf	14	;volatile
  3073                           
  3074                           ;main.c: 169: INLVLA = 0x00;
  3075  03D6  0027               	movlb	7	; select bank7
  3076  03D7  018C               	clrf	12	;volatile
  3077                           
  3078                           ;main.c: 170: INLVLC = 0x00;
  3079  03D8  018E               	clrf	14	;volatile
  3080                           
  3081                           ;main.c: 172: WPUA = 0x00;
  3082  03D9  0024               	movlb	4	; select bank4
  3083  03DA  018C               	clrf	12	;volatile
  3084                           
  3085                           ;main.c: 173: WPUC = 0x00;
  3086  03DB  018E               	clrf	14	;volatile
  3087                           
  3088                           ;main.c: 175: TRISCbits.TRISC5 = 0;
  3089  03DC  0021               	movlb	1	; select bank1
  3090  03DD  128E               	bcf	14,5	;volatile
  3091                           
  3092                           ;main.c: 176: TRISCbits.TRISC4 = 0;
  3093  03DE  120E               	bcf	14,4	;volatile
  3094                           
  3095                           ;main.c: 178: PORTCbits.RC4 = 0;
  3096  03DF  0020               	movlb	0	; select bank0
  3097  03E0  120E               	bcf	14,4	;volatile
  3098                           
  3099                           ;main.c: 185: INTCONbits.PEIE = 0;
  3100  03E1  130B               	bcf	11,6	;volatile
  3101                           
  3102                           ;main.c: 186: INTCONbits.GIE = 0;
  3103  03E2  138B               	bcf	11,7	;volatile
  3104                           
  3105                           ;main.c: 188: OSCCON1bits.NOSC = 0b000;
  3106  03E3  308F               	movlw	-113
  3107  03E4  0032               	movlb	18	; select bank18
  3108  03E5  0599               	andwf	25,f	;volatile
  3109                           
  3110                           ;main.c: 189: OSCCON1bits.NDIV = 0b000;
  3111  03E6  30F0               	movlw	-16
  3112  03E7  0599               	andwf	25,f	;volatile
  3113                           
  3114                           ;main.c: 191: _delay((unsigned long)((10)*(16000000/4000.0)));
  3115  03E8  3034               	movlw	52
  3116  03E9  0020               	movlb	0	; select bank0
  3117  03EA  00D8               	movwf	??_main
  3118  03EB  30F1               	movlw	241
  3119  03EC                     u1697:	
  3120  03EC  0B89               	decfsz	9,f
  3121  03ED  2BEC               	goto	u1697
  3122  03EE  0BD8               	decfsz	??_main,f
  3123  03EF  2BEC               	goto	u1697
  3124  03F0  3200               	nop2
  3125                           
  3126                           ;main.c: 193: flashRealod();
  3127  03F1  318F  270B  3183   	fcall	_flashRealod
  3128                           
  3129                           ;main.c: 195: if (romData.check != 0x07){
  3130  03F4  3007               	movlw	7
  3131  03F5  0020               	movlb	0	; select bank0
  3132  03F6  065C               	xorwf	_romData,w
  3133  03F7  1903               	btfsc	3,2
  3134  03F8  2C0B               	goto	l3125
  3135                           
  3136                           ;main.c: 196: romData.check = 0x07;
  3137  03F9  3007               	movlw	7
  3138  03FA  00D8               	movwf	??_main
  3139  03FB  0858               	movf	??_main,w
  3140  03FC  00DC               	movwf	_romData
  3141                           
  3142                           ;main.c: 197: strcpy(romData.name, "UW2");
  3143  03FD  3032               	movlw	low (STR_9| (0+32768))
  3144  03FE  00A1               	movwf	strcpy@from
  3145  03FF  3090               	movlw	high (STR_9| (0+32768))
  3146  0400  00A2               	movwf	strcpy@from+1
  3147  0401  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3148  0402  318E  26B4  3183   	fcall	_strcpy
  3149                           
  3150                           ;main.c: 198: romData.bootMode = 0x00;
  3151  0405  0020               	movlb	0	; select bank0
  3152  0406  01ED               	clrf	_romData+17
  3153  0407  01EE               	clrf	_romData+18
  3154                           
  3155                           ;main.c: 199: flashUpdate();
  3156  0408  318F  276C  3183   	fcall	_flashUpdate
  3157  040B                     l3125:	
  3158                           
  3159                           ;main.c: 200: };main.c: 202: nrf24l01Init();
  3160  040B  3187  27D8  3183   	fcall	_nrf24l01Init
  3161                           
  3162                           ;main.c: 208: ADCON0bits.ADON = 0;
  3163  040E  0021               	movlb	1	; select bank1
  3164  040F  101D               	bcf	29,0	;volatile
  3165                           
  3166                           ;main.c: 211: ANSELAbits.ANSA4 = 1;
  3167  0410  0023               	movlb	3	; select bank3
  3168  0411  160C               	bsf	12,4	;volatile
  3169                           
  3170                           ;main.c: 212: TRISAbits.TRISA4 = 1;
  3171  0412  0021               	movlb	1	; select bank1
  3172  0413  160C               	bsf	12,4	;volatile
  3173                           
  3174                           ;main.c: 213: WPUAbits.WPUA4 = 0;
  3175  0414  0024               	movlb	4	; select bank4
  3176  0415  120C               	bcf	12,4	;volatile
  3177                           
  3178                           ;main.c: 216: ANSELCbits.ANSC3 = 1;
  3179  0416  0023               	movlb	3	; select bank3
  3180  0417  158E               	bsf	14,3	;volatile
  3181                           
  3182                           ;main.c: 217: TRISCbits.TRISC3 = 1;
  3183  0418  0021               	movlb	1	; select bank1
  3184  0419  158E               	bsf	14,3	;volatile
  3185                           
  3186                           ;main.c: 220: FVRCONbits.TSEN = 0;
  3187  041A  0022               	movlb	2	; select bank2
  3188  041B  1297               	bcf	23,5	;volatile
  3189                           
  3190                           ;main.c: 221: FVRCONbits.TSRNG = 0;
  3191  041C  1217               	bcf	23,4	;volatile
  3192                           
  3193                           ;main.c: 222: FVRCONbits.TSEN = 1;
  3194  041D  1697               	bsf	23,5	;volatile
  3195                           
  3196                           ;main.c: 225: FVRCONbits.FVREN = 0;
  3197  041E  1397               	bcf	23,7	;volatile
  3198                           
  3199                           ;main.c: 226: FVRCONbits.ADFVR = 1;
  3200  041F  0817               	movf	23,w	;volatile
  3201  0420  39FC               	andlw	-4
  3202  0421  3801               	iorlw	1
  3203  0422  0097               	movwf	23	;volatile
  3204                           
  3205                           ;main.c: 227: FVRCONbits.FVREN = 1;
  3206  0423  1797               	bsf	23,7	;volatile
  3207                           
  3208                           ;main.c: 229: ADCON1bits.ADCS = 0b111;
  3209  0424  3070               	movlw	112
  3210  0425  0021               	movlb	1	; select bank1
  3211  0426  049E               	iorwf	30,f	;volatile
  3212                           
  3213                           ;main.c: 230: ADCON1bits.ADFM = 1;
  3214  0427  179E               	bsf	30,7	;volatile
  3215                           
  3216                           ;main.c: 231: ADCON1bits.ADNREF = 0b0;
  3217  0428  111E               	bcf	30,2	;volatile
  3218                           
  3219                           ;main.c: 232: ADCON1bits.ADPREF = 0b00;
  3220  0429  30FC               	movlw	-4
  3221  042A  059E               	andwf	30,f	;volatile
  3222                           
  3223                           ;main.c: 234: ADCON0bits.CHS = 3;
  3224  042B  081D               	movf	29,w	;volatile
  3225  042C  3903               	andlw	-253
  3226  042D  380C               	iorlw	12
  3227  042E  009D               	movwf	29	;volatile
  3228                           
  3229                           ;main.c: 235: ADCON0bits.ADON = 1;
  3230  042F  141D               	bsf	29,0	;volatile
  3231                           
  3232                           ;main.c: 240: TRISAbits.TRISA2 = 1;
  3233  0430  150C               	bsf	12,2	;volatile
  3234                           
  3235                           ;main.c: 241: PIE0bits.INTE = 1;
  3236  0431  1410               	bsf	16,0	;volatile
  3237                           
  3238                           ;main.c: 242: INTCONbits.INTEDG = 0;
  3239  0432  100B               	bcf	11,0	;volatile
  3240                           
  3241                           ;main.c: 246: WDTCONbits.WDTPS = 11;
  3242  0433  0817               	movf	23,w	;volatile
  3243  0434  39C1               	andlw	-63
  3244  0435  3816               	iorlw	22
  3245  0436  0097               	movwf	23	;volatile
  3246                           
  3247                           ;main.c: 249: TRISAbits.TRISA5 = 0;
  3248  0437  128C               	bcf	12,5	;volatile
  3249                           
  3250                           ;main.c: 250: PORTAbits.RA5 = 0;
  3251  0438  0020               	movlb	0	; select bank0
  3252  0439  128C               	bcf	12,5	;volatile
  3253                           
  3254                           ;main.c: 253: INTCONbits.PEIE = 1;
  3255  043A  170B               	bsf	11,6	;volatile
  3256                           
  3257                           ;main.c: 254: INTCONbits.GIE = 1;
  3258  043B  178B               	bsf	11,7	;volatile
  3259                           
  3260                           ;main.c: 256: nrf24l01Packet_t packet;;main.c: 258: setMessage(&packet, "BOOT", romData.
      +                          bootMode);
  3261  043C  302D               	movlw	low (STR_10| (0+32768))
  3262  043D  00BD               	movwf	setMessage@topic
  3263  043E  3090               	movlw	high (STR_10| (0+32768))
  3264  043F  00BE               	movwf	setMessage@topic+1
  3265  0440  086D               	movf	_romData+17,w
  3266  0441  00BF               	movwf	setMessage@value
  3267  0442  086E               	movf	_romData+18,w
  3268  0443  00C0               	movwf	setMessage@value+1
  3269  0444  01C1               	clrf	setMessage@value+2
  3270  0445  01C2               	clrf	setMessage@value+3
  3271  0446  30C2               	movlw	(low (main@packet| 0))& (0+255)
  3272  0447  3185  2539  3183   	fcall	_setMessage
  3273                           
  3274                           ;main.c: 259: packet.packetData.byte = 0;
  3275  044A  0021               	movlb	1	; select bank1
  3276  044B  01C2               	clrf	main@packet^(0+128)
  3277                           
  3278                           ;main.c: 260: packet.packetData.ACKRequest = 0;
  3279  044C  1142               	bcf	main@packet^(0+128),2
  3280                           
  3281                           ;main.c: 261: nrf24l01SendPacket(&packet);
  3282  044D  30C2               	movlw	(low (main@packet| 0))& (0+255)
  3283  044E  3182  2293  3183   	fcall	_nrf24l01SendPacket
  3284                           
  3285                           ;main.c: 262: sleep();
  3286  0451  318D  25FD  3183   	fcall	_sleep
  3287  0454                     l3189:	
  3288                           ;main.c: 264: while(1){
  3289                           
  3290                           
  3291                           ;main.c: 265: loop();
  3292  0454  3181  217F  3183   	fcall	_loop
  3293  0457  2C54               	goto	l3189
  3294  0458                     __end_of_main:	
  3295                           ;main.c: 266: };main.c: 268: return;
  3296                           
  3297                           
  3298                           	psect	text1
  3299  0EB4                     __ptext1:	
  3300 ;; *************** function _strcpy *****************
  3301 ;; Defined at:
  3302 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;  to              1    wreg     PTR unsigned char 
  3305 ;;		 -> romData(19), 
  3306 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  3307 ;;		 -> STR_9(4), 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;  to              1    4[BANK0 ] PTR unsigned char 
  3310 ;;		 -> romData(19), 
  3311 ;;  cp              1    5[BANK0 ] PTR unsigned char 
  3312 ;;		 -> romData(19), 
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  1    wreg      PTR unsigned char 
  3315 ;; Registers used:
  3316 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3322 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3323 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3324 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3325 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3326 ;;Total ram usage:        5 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    7
  3329 ;; This function calls:
  3330 ;;		Nothing
  3331 ;; This function is called by:
  3332 ;;		_main
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           
  3337                           ;psect for function _strcpy
  3338  0EB4                     _strcpy:	
  3339                           
  3340                           ;incstack = 0
  3341                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3342                           ;strcpy@to stored from wreg
  3343  0EB4  0020               	movlb	0	; select bank0
  3344  0EB5  00A4               	movwf	strcpy@to
  3345  0EB6  0824               	movf	strcpy@to,w
  3346  0EB7  00A3               	movwf	??_strcpy
  3347  0EB8  0823               	movf	??_strcpy,w
  3348  0EB9  00A5               	movwf	strcpy@cp
  3349  0EBA                     l2805:	
  3350  0EBA  0825               	movf	strcpy@cp,w
  3351  0EBB  0086               	movwf	6
  3352  0EBC  0187               	clrf	7
  3353  0EBD  0821               	movf	strcpy@from,w
  3354  0EBE  0084               	movwf	4
  3355  0EBF  0822               	movf	strcpy@from+1,w
  3356  0EC0  0085               	movwf	5
  3357  0EC1  0800               	movf	0,w	;code access
  3358  0EC2  3FC0               	movwi [0]fsr1
  3359  0EC3  0889               	movf	9,f
  3360  0EC4  1903               	btfsc	3,2
  3361  0EC5  0008               	return
  3362  0EC6  3001               	movlw	1
  3363  0EC7  00A3               	movwf	??_strcpy
  3364  0EC8  0823               	movf	??_strcpy,w
  3365  0EC9  07A5               	addwf	strcpy@cp,f
  3366  0ECA  3001               	movlw	1
  3367  0ECB  07A1               	addwf	strcpy@from,f
  3368  0ECC  3000               	movlw	0
  3369  0ECD  3DA2               	addwfc	strcpy@from+1,f
  3370  0ECE  2EBA               	goto	l2805
  3371  0ECF                     __end_of_strcpy:	
  3372                           ;	Return value of _strcpy is never used
  3373                           
  3374                           
  3375                           	psect	text2
  3376  07D8                     __ptext2:	
  3377 ;; *************** function _nrf24l01Init *****************
  3378 ;; Defined at:
  3379 ;;		line 490 in file "nrf24l01.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;		None
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;		None
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      void 
  3386 ;; Registers used:
  3387 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3395 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3397 ;;Total ram usage:        2 bytes
  3398 ;; Hardware stack levels used:    1
  3399 ;; Hardware stack levels required when called:   11
  3400 ;; This function calls:
  3401 ;;		_nrf24l01CEHigh
  3402 ;;		_nrf24l01CELow
  3403 ;;		_nrf24l01InitRegisters
  3404 ;;		_nrf24l01InterfaceInit
  3405 ;; This function is called by:
  3406 ;;		_main
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           
  3411                           ;psect for function _nrf24l01Init
  3412  07D8                     _nrf24l01Init:	
  3413                           
  3414                           ;nrf24l01.c: 493: nrf24l01InterfaceInit();
  3415                           
  3416                           ;incstack = 0
  3417                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3418  07D8  318E  26CF  3187   	fcall	_nrf24l01InterfaceInit
  3419                           
  3420                           ;nrf24l01.c: 498: nrf24l01CELow();
  3421  07DB  318D  25CA  3187   	fcall	_nrf24l01CELow
  3422                           
  3423                           ;nrf24l01.c: 500: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3424  07DE  3002               	movlw	2
  3425  07DF  0020               	movlb	0	; select bank0
  3426  07E0  00B5               	movwf	??_nrf24l01Init+1
  3427  07E1  3004               	movlw	4
  3428  07E2  00B4               	movwf	??_nrf24l01Init
  3429  07E3  30BA               	movlw	186
  3430  07E4                     u1707:	
  3431  07E4  0B89               	decfsz	9,f
  3432  07E5  2FE4               	goto	u1707
  3433  07E6  0BB4               	decfsz	??_nrf24l01Init,f
  3434  07E7  2FE4               	goto	u1707
  3435  07E8  0BB5               	decfsz	??_nrf24l01Init+1,f
  3436  07E9  2FE4               	goto	u1707
  3437  07EA  0000               	nop
  3438                           
  3439                           ;nrf24l01.c: 502: nrf24l01InitRegisters();
  3440  07EB  3180  2029  3187   	fcall	_nrf24l01InitRegisters
  3441                           
  3442                           ;nrf24l01.c: 504: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3443  07EE  3002               	movlw	2
  3444  07EF  0020               	movlb	0	; select bank0
  3445  07F0  00B5               	movwf	??_nrf24l01Init+1
  3446  07F1  3004               	movlw	4
  3447  07F2  00B4               	movwf	??_nrf24l01Init
  3448  07F3  30BA               	movlw	186
  3449  07F4                     u1717:	
  3450  07F4  0B89               	decfsz	9,f
  3451  07F5  2FF4               	goto	u1717
  3452  07F6  0BB4               	decfsz	??_nrf24l01Init,f
  3453  07F7  2FF4               	goto	u1717
  3454  07F8  0BB5               	decfsz	??_nrf24l01Init+1,f
  3455  07F9  2FF4               	goto	u1717
  3456  07FA  0000               	nop
  3457                           
  3458                           ;nrf24l01.c: 506: nrf24l01CEHigh();
  3459  07FB  318D  25C7         	fcall	_nrf24l01CEHigh
  3460  07FD  0008               	return
  3461  07FE                     __end_of_nrf24l01Init:	
  3462                           
  3463                           	psect	text3
  3464  0ECF                     __ptext3:	
  3465 ;; *************** function _nrf24l01InterfaceInit *****************
  3466 ;; Defined at:
  3467 ;;		line 28 in file "interface.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;		None
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;		None
  3472 ;; Return value:  Size  Location     Type
  3473 ;;                  1    wreg      void 
  3474 ;; Registers used:
  3475 ;;		wreg, status,2, status,0
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3485 ;;Total ram usage:        0 bytes
  3486 ;; Hardware stack levels used:    1
  3487 ;; Hardware stack levels required when called:    7
  3488 ;; This function calls:
  3489 ;;		Nothing
  3490 ;; This function is called by:
  3491 ;;		_nrf24l01Init
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495                           
  3496                           ;psect for function _nrf24l01InterfaceInit
  3497  0ECF                     _nrf24l01InterfaceInit:	
  3498                           
  3499                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3500                           
  3501                           ;incstack = 0
  3502                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3503  0ECF  0021               	movlb	1	; select bank1
  3504  0ED0  100C               	bcf	12,0	;volatile
  3505                           
  3506                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3507  0ED1  108C               	bcf	12,1	;volatile
  3508                           
  3509                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3510  0ED2  148E               	bsf	14,1	;volatile
  3511                           
  3512                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3513  0ED3  110E               	bcf	14,2	;volatile
  3514                           
  3515                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3516  0ED4  100E               	bcf	14,0	;volatile
  3517                           
  3518                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3519  0ED5  0024               	movlb	4	; select bank4
  3520  0ED6  1295               	bcf	21,5	;volatile
  3521                           
  3522                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3523  0ED7  003D               	movlb	29	; select bank29
  3524  0ED8  0821               	movf	33,w	;volatile
  3525  0ED9  39E0               	andlw	-32
  3526  0EDA  3811               	iorlw	17
  3527  0EDB  00A1               	movwf	33	;volatile
  3528                           
  3529                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3530  0EDC  0822               	movf	34,w	;volatile
  3531  0EDD  39E0               	andlw	-32
  3532  0EDE  3819               	iorlw	25
  3533  0EDF  00A2               	movwf	34	;volatile
  3534                           
  3535                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3536  0EE0  0820               	movf	32,w	;volatile
  3537  0EE1  39E0               	andlw	-32
  3538  0EE2  3818               	iorlw	24
  3539  0EE3  00A0               	movwf	32	;volatile
  3540                           
  3541                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3542  0EE4  0024               	movlb	4	; select bank4
  3543  0EE5  1215               	bcf	21,4	;volatile
  3544                           
  3545                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3546  0EE6  1714               	bsf	20,6	;volatile
  3547                           
  3548                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0000;
  3549  0EE7  30F0               	movlw	-16
  3550  0EE8  0595               	andwf	21,f	;volatile
  3551                           
  3552                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3553  0EE9  1695               	bsf	21,5	;volatile
  3554  0EEA  0008               	return
  3555  0EEB                     __end_of_nrf24l01InterfaceInit:	
  3556                           
  3557                           	psect	text4
  3558  0029                     __ptext4:	
  3559 ;; *************** function _nrf24l01InitRegisters *****************
  3560 ;; Defined at:
  3561 ;;		line 358 in file "nrf24l01.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;		None
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;  i               2   18[BANK0 ] unsigned int 
  3566 ;;  config          1   17[BANK0 ] struct .
  3567 ;;  lastAddressB    1   16[BANK0 ] unsigned char 
  3568 ;;  DynPD           1   15[BANK0 ] struct .
  3569 ;;  enAA            1   14[BANK0 ] struct .
  3570 ;;  enRXAddr        1   13[BANK0 ] struct .
  3571 ;;  status          1   12[BANK0 ] struct .
  3572 ;;  rfSetup         1   11[BANK0 ] struct .
  3573 ;;  feature         1   10[BANK0 ] struct .
  3574 ;;  setupAW         1    9[BANK0 ] struct .
  3575 ;;  addressRegis    1    8[BANK0 ] unsigned char 
  3576 ;;  channel         1    7[BANK0 ] struct .
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  1    wreg      void 
  3579 ;; Registers used:
  3580 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3587 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3588 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3589 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3590 ;;Total ram usage:       15 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:   10
  3593 ;; This function calls:
  3594 ;;		___bmul
  3595 ;;		_nrf24l01SPIEnd
  3596 ;;		_nrf24l01SPISend
  3597 ;;		_nrf24l01SPIStart
  3598 ;;		_nrf24l01Send
  3599 ;; This function is called by:
  3600 ;;		_nrf24l01Init
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           
  3605                           ;psect for function _nrf24l01InitRegisters
  3606  0029                     _nrf24l01InitRegisters:	
  3607                           
  3608                           ;nrf24l01.c: 360: n_CONFIG_t config;;nrf24l01.c: 362: config.PWR_UP = 0;
  3609                           
  3610                           ;incstack = 0
  3611                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3612  0029  0020               	movlb	0	; select bank0
  3613  002A  10B1               	bcf	nrf24l01InitRegisters@config,1
  3614                           
  3615                           ;nrf24l01.c: 363: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3616  002B  0831               	movf	nrf24l01InitRegisters@config,w
  3617  002C  00A5               	movwf	??_nrf24l01InitRegisters
  3618  002D  0825               	movf	??_nrf24l01InitRegisters,w
  3619  002E  00A1               	movwf	nrf24l01Send@data
  3620  002F  3020               	movlw	32
  3621  0030  318F  272B  3180   	fcall	_nrf24l01Send
  3622                           
  3623                           ;nrf24l01.c: 365: n_SETUP_AW_t setupAW;;nrf24l01.c: 366: setupAW.byte = 0x00;
  3624  0033  0020               	movlb	0	; select bank0
  3625  0034  01A9               	clrf	nrf24l01InitRegisters@setupAW
  3626                           
  3627                           ;nrf24l01.c: 367: setupAW.AW = 0b11;
  3628  0035  3003               	movlw	3
  3629  0036  04A9               	iorwf	nrf24l01InitRegisters@setupAW,f
  3630                           
  3631                           ;nrf24l01.c: 368: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3632  0037  0829               	movf	nrf24l01InitRegisters@setupAW,w
  3633  0038  00A5               	movwf	??_nrf24l01InitRegisters
  3634  0039  0825               	movf	??_nrf24l01InitRegisters,w
  3635  003A  00A1               	movwf	nrf24l01Send@data
  3636  003B  3022               	movlw	34
  3637  003C  318F  272B  3180   	fcall	_nrf24l01Send
  3638                           
  3639                           ;nrf24l01.c: 371: n_RF_CH_t channel;;nrf24l01.c: 372: channel.RF_CH = 2;
  3640  003F  0020               	movlb	0	; select bank0
  3641  0040  0827               	movf	nrf24l01InitRegisters@channel,w
  3642  0041  3980               	andlw	-128
  3643  0042  3802               	iorlw	2
  3644  0043  00A7               	movwf	nrf24l01InitRegisters@channel
  3645                           
  3646                           ;nrf24l01.c: 373: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3647  0044  0827               	movf	nrf24l01InitRegisters@channel,w
  3648  0045  00A5               	movwf	??_nrf24l01InitRegisters
  3649  0046  0825               	movf	??_nrf24l01InitRegisters,w
  3650  0047  00A1               	movwf	nrf24l01Send@data
  3651  0048  3025               	movlw	37
  3652  0049  318F  272B  3180   	fcall	_nrf24l01Send
  3653                           
  3654                           ;nrf24l01.c: 376: n_RF_SETUP_t rfSetup;;nrf24l01.c: 377: rfSetup.byte = 0x00;
  3655  004C  0020               	movlb	0	; select bank0
  3656  004D  01AB               	clrf	nrf24l01InitRegisters@rfSetup
  3657                           
  3658                           ;nrf24l01.c: 378: rfSetup.RF_DR_LOW = 0;
  3659  004E  12AB               	bcf	nrf24l01InitRegisters@rfSetup,5
  3660                           
  3661                           ;nrf24l01.c: 379: rfSetup.RF_DR_HIGH = 1;
  3662  004F  15AB               	bsf	nrf24l01InitRegisters@rfSetup,3
  3663                           
  3664                           ;nrf24l01.c: 380: rfSetup.RF_PWR = 3;
  3665  0050  3006               	movlw	6
  3666  0051  04AB               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3667                           
  3668                           ;nrf24l01.c: 381: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3669  0052  082B               	movf	nrf24l01InitRegisters@rfSetup,w
  3670  0053  00A5               	movwf	??_nrf24l01InitRegisters
  3671  0054  0825               	movf	??_nrf24l01InitRegisters,w
  3672  0055  00A1               	movwf	nrf24l01Send@data
  3673  0056  3026               	movlw	38
  3674  0057  318F  272B  3180   	fcall	_nrf24l01Send
  3675                           
  3676                           ;nrf24l01.c: 384: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 385: enRXAddr.ERX_P0 = 1;
  3677  005A  0020               	movlb	0	; select bank0
  3678  005B  142D               	bsf	nrf24l01InitRegisters@enRXAddr,0
  3679                           
  3680                           ;nrf24l01.c: 386: enRXAddr.ERX_P1 = 1;
  3681  005C  14AD               	bsf	nrf24l01InitRegisters@enRXAddr,1
  3682                           
  3683                           ;nrf24l01.c: 387: enRXAddr.ERX_P2 = 1;
  3684  005D  152D               	bsf	nrf24l01InitRegisters@enRXAddr,2
  3685                           
  3686                           ;nrf24l01.c: 388: enRXAddr.ERX_P3 = 1;
  3687  005E  15AD               	bsf	nrf24l01InitRegisters@enRXAddr,3
  3688                           
  3689                           ;nrf24l01.c: 389: enRXAddr.ERX_P4 = 1;
  3690  005F  162D               	bsf	nrf24l01InitRegisters@enRXAddr,4
  3691                           
  3692                           ;nrf24l01.c: 390: enRXAddr.ERX_P5 = 1;
  3693  0060  16AD               	bsf	nrf24l01InitRegisters@enRXAddr,5
  3694                           
  3695                           ;nrf24l01.c: 391: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, enRXAddr.byte);
  3696  0061  082D               	movf	nrf24l01InitRegisters@enRXAddr,w
  3697  0062  00A5               	movwf	??_nrf24l01InitRegisters
  3698  0063  0825               	movf	??_nrf24l01InitRegisters,w
  3699  0064  00A1               	movwf	nrf24l01Send@data
  3700  0065  3022               	movlw	34
  3701  0066  318F  272B  3180   	fcall	_nrf24l01Send
  3702                           
  3703                           ;nrf24l01.c: 394: n_EN_AA_t enAA;;nrf24l01.c: 395: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3704  0069  0020               	movlb	0	; select bank0
  3705  006A  01A1               	clrf	nrf24l01Send@data
  3706  006B  3001               	movlw	1
  3707  006C  318F  272B  3180   	fcall	_nrf24l01Send
  3708  006F  0020               	movlb	0	; select bank0
  3709  0070  00A5               	movwf	??_nrf24l01InitRegisters
  3710  0071  0825               	movf	??_nrf24l01InitRegisters,w
  3711  0072  00AE               	movwf	nrf24l01InitRegisters@enAA
  3712                           
  3713                           ;nrf24l01.c: 396: enAA.ENAA_P0 = 0;
  3714  0073  102E               	bcf	nrf24l01InitRegisters@enAA,0
  3715                           
  3716                           ;nrf24l01.c: 397: enAA.ENAA_P1 = 0;
  3717  0074  10AE               	bcf	nrf24l01InitRegisters@enAA,1
  3718                           
  3719                           ;nrf24l01.c: 398: enAA.ENAA_P2 = 0;
  3720  0075  112E               	bcf	nrf24l01InitRegisters@enAA,2
  3721                           
  3722                           ;nrf24l01.c: 399: enAA.ENAA_P3 = 0;
  3723  0076  11AE               	bcf	nrf24l01InitRegisters@enAA,3
  3724                           
  3725                           ;nrf24l01.c: 400: enAA.ENAA_P4 = 0;
  3726  0077  122E               	bcf	nrf24l01InitRegisters@enAA,4
  3727                           
  3728                           ;nrf24l01.c: 401: enAA.ENAA_P5 = 0;
  3729  0078  12AE               	bcf	nrf24l01InitRegisters@enAA,5
  3730                           
  3731                           ;nrf24l01.c: 402: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3732  0079  082E               	movf	nrf24l01InitRegisters@enAA,w
  3733  007A  00A5               	movwf	??_nrf24l01InitRegisters
  3734  007B  0825               	movf	??_nrf24l01InitRegisters,w
  3735  007C  00A1               	movwf	nrf24l01Send@data
  3736  007D  3021               	movlw	33
  3737  007E  318F  272B  3180   	fcall	_nrf24l01Send
  3738                           
  3739                           ;nrf24l01.c: 406: n_FEATURE_t feature;;nrf24l01.c: 407: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3740  0081  0020               	movlb	0	; select bank0
  3741  0082  01A1               	clrf	nrf24l01Send@data
  3742  0083  301D               	movlw	29
  3743  0084  318F  272B  3180   	fcall	_nrf24l01Send
  3744  0087  0020               	movlb	0	; select bank0
  3745  0088  00A5               	movwf	??_nrf24l01InitRegisters
  3746  0089  0825               	movf	??_nrf24l01InitRegisters,w
  3747  008A  00AA               	movwf	nrf24l01InitRegisters@feature
  3748                           
  3749                           ;nrf24l01.c: 408: feature.EN_DPL = 1;
  3750  008B  152A               	bsf	nrf24l01InitRegisters@feature,2
  3751                           
  3752                           ;nrf24l01.c: 409: feature.EN_DYN_ACK = 1;
  3753  008C  142A               	bsf	nrf24l01InitRegisters@feature,0
  3754                           
  3755                           ;nrf24l01.c: 410: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3756  008D  082A               	movf	nrf24l01InitRegisters@feature,w
  3757  008E  00A5               	movwf	??_nrf24l01InitRegisters
  3758  008F  0825               	movf	??_nrf24l01InitRegisters,w
  3759  0090  00A1               	movwf	nrf24l01Send@data
  3760  0091  303D               	movlw	61
  3761  0092  318F  272B  3180   	fcall	_nrf24l01Send
  3762                           
  3763                           ;nrf24l01.c: 412: n_DYNPD_t DynPD;;nrf24l01.c: 413: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3764  0095  0020               	movlb	0	; select bank0
  3765  0096  01A1               	clrf	nrf24l01Send@data
  3766  0097  301C               	movlw	28
  3767  0098  318F  272B  3180   	fcall	_nrf24l01Send
  3768  009B  0020               	movlb	0	; select bank0
  3769  009C  00A5               	movwf	??_nrf24l01InitRegisters
  3770  009D  0825               	movf	??_nrf24l01InitRegisters,w
  3771  009E  00AF               	movwf	nrf24l01InitRegisters@DynPD
  3772                           
  3773                           ;nrf24l01.c: 414: DynPD.DPL_P0 = 1;
  3774  009F  142F               	bsf	nrf24l01InitRegisters@DynPD,0
  3775                           
  3776                           ;nrf24l01.c: 415: DynPD.DPL_P1 = 1;
  3777  00A0  14AF               	bsf	nrf24l01InitRegisters@DynPD,1
  3778                           
  3779                           ;nrf24l01.c: 416: DynPD.DPL_P2 = 1;
  3780  00A1  152F               	bsf	nrf24l01InitRegisters@DynPD,2
  3781                           
  3782                           ;nrf24l01.c: 417: DynPD.DPL_P3 = 1;
  3783  00A2  15AF               	bsf	nrf24l01InitRegisters@DynPD,3
  3784                           
  3785                           ;nrf24l01.c: 418: DynPD.DPL_P4 = 1;
  3786  00A3  162F               	bsf	nrf24l01InitRegisters@DynPD,4
  3787                           
  3788                           ;nrf24l01.c: 419: DynPD.DPL_P5 = 1;
  3789  00A4  16AF               	bsf	nrf24l01InitRegisters@DynPD,5
  3790                           
  3791                           ;nrf24l01.c: 420: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3792  00A5  082F               	movf	nrf24l01InitRegisters@DynPD,w
  3793  00A6  00A5               	movwf	??_nrf24l01InitRegisters
  3794  00A7  0825               	movf	??_nrf24l01InitRegisters,w
  3795  00A8  00A1               	movwf	nrf24l01Send@data
  3796  00A9  303C               	movlw	60
  3797  00AA  318F  272B  3180   	fcall	_nrf24l01Send
  3798                           
  3799                           ;nrf24l01.c: 424: unsigned int i;;nrf24l01.c: 425: unsigned char addressRegister;;nrf24l
      +                          01.c: 426: unsigned char lastAddressByte;;nrf24l01.c: 427: for (i = 0; i < 6; i++){
  3800  00AD  0020               	movlb	0	; select bank0
  3801  00AE  01B2               	clrf	nrf24l01InitRegisters@i
  3802  00AF  01B3               	clrf	nrf24l01InitRegisters@i+1
  3803  00B0  3000               	movlw	0
  3804  00B1  0233               	subwf	nrf24l01InitRegisters@i+1,w
  3805  00B2  3006               	movlw	6
  3806  00B3  1903               	skipnz
  3807  00B4  0232               	subwf	nrf24l01InitRegisters@i,w
  3808  00B5  1803               	btfsc	3,0
  3809  00B6  2919               	goto	l2631
  3810  00B7                     l2609:	
  3811                           
  3812                           ;nrf24l01.c: 429: addressRegister = (unsigned) 0x0A + i;
  3813  00B7  0832               	movf	nrf24l01InitRegisters@i,w
  3814  00B8  3E0A               	addlw	10
  3815  00B9  00A5               	movwf	??_nrf24l01InitRegisters
  3816  00BA  0825               	movf	??_nrf24l01InitRegisters,w
  3817  00BB  00A8               	movwf	nrf24l01InitRegisters@addressRegister
  3818                           
  3819                           ;nrf24l01.c: 431: lastAddressByte = n_ADDRESS_P0[4];
  3820  00BC  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3821  00BD  0084               	movwf	4
  3822  00BE  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3823  00BF  0085               	movwf	5
  3824  00C0  0800               	movf	0,w	;code access
  3825  00C1  00A5               	movwf	??_nrf24l01InitRegisters
  3826  00C2  0825               	movf	??_nrf24l01InitRegisters,w
  3827  00C3  00B0               	movwf	nrf24l01InitRegisters@lastAddressByte
  3828                           
  3829                           ;nrf24l01.c: 432: lastAddressByte+= n_ADDRESS_MUL * i;
  3830  00C4  0832               	movf	nrf24l01InitRegisters@i,w
  3831  00C5  00A5               	movwf	??_nrf24l01InitRegisters
  3832  00C6  0825               	movf	??_nrf24l01InitRegisters,w
  3833  00C7  00A1               	movwf	___bmul@multiplicand
  3834  00C8  3040               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3835  00C9  0084               	movwf	4
  3836  00CA  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3837  00CB  0085               	movwf	5
  3838  00CC  0800               	movf	0,w	;code access
  3839  00CD  318E  260F  3180   	fcall	___bmul
  3840  00D0  0020               	movlb	0	; select bank0
  3841  00D1  00A6               	movwf	??_nrf24l01InitRegisters+1
  3842  00D2  0826               	movf	??_nrf24l01InitRegisters+1,w
  3843  00D3  07B0               	addwf	nrf24l01InitRegisters@lastAddressByte,f
  3844                           
  3845                           ;nrf24l01.c: 434: nrf24l01SPIStart();
  3846  00D4  318D  25E8  3180   	fcall	_nrf24l01SPIStart
  3847                           
  3848                           ;nrf24l01.c: 435: nrf24l01SPISend((unsigned) 0b00100000 | addressRegister);
  3849  00D7  0020               	movlb	0	; select bank0
  3850  00D8  0828               	movf	nrf24l01InitRegisters@addressRegister,w
  3851  00D9  3820               	iorlw	32
  3852  00DA  318D  25F0  3180   	fcall	_nrf24l01SPISend
  3853                           
  3854                           ;nrf24l01.c: 437: nrf24l01SPISend(lastAddressByte);
  3855  00DD  0020               	movlb	0	; select bank0
  3856  00DE  0830               	movf	nrf24l01InitRegisters@lastAddressByte,w
  3857  00DF  318D  25F0  3180   	fcall	_nrf24l01SPISend
  3858                           
  3859                           ;nrf24l01.c: 439: if (i < 2){
  3860  00E2  3000               	movlw	0
  3861  00E3  0020               	movlb	0	; select bank0
  3862  00E4  0233               	subwf	nrf24l01InitRegisters@i+1,w
  3863  00E5  3002               	movlw	2
  3864  00E6  1903               	skipnz
  3865  00E7  0232               	subwf	nrf24l01InitRegisters@i,w
  3866  00E8  1803               	skipnc
  3867  00E9  290A               	goto	l2625
  3868                           
  3869                           ;nrf24l01.c: 440: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3870  00EA  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3871  00EB  0084               	movwf	4
  3872  00EC  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3873  00ED  0085               	movwf	5
  3874  00EE  0800               	movf	0,w	;code access
  3875  00EF  318D  25F0  3180   	fcall	_nrf24l01SPISend
  3876                           
  3877                           ;nrf24l01.c: 441: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3878  00F2  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3879  00F3  0084               	movwf	4
  3880  00F4  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3881  00F5  0085               	movwf	5
  3882  00F6  0800               	movf	0,w	;code access
  3883  00F7  318D  25F0  3180   	fcall	_nrf24l01SPISend
  3884                           
  3885                           ;nrf24l01.c: 442: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3886  00FA  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3887  00FB  0084               	movwf	4
  3888  00FC  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3889  00FD  0085               	movwf	5
  3890  00FE  0800               	movf	0,w	;code access
  3891  00FF  318D  25F0  3180   	fcall	_nrf24l01SPISend
  3892                           
  3893                           ;nrf24l01.c: 443: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3894  0102  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3895  0103  0084               	movwf	4
  3896  0104  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3897  0105  0085               	movwf	5
  3898  0106  0800               	movf	0,w	;code access
  3899  0107  318D  25F0  3180   	fcall	_nrf24l01SPISend
  3900  010A                     l2625:	
  3901                           
  3902                           ;nrf24l01.c: 444: };nrf24l01.c: 446: nrf24l01SPIEnd();
  3903  010A  318D  25D9  3180   	fcall	_nrf24l01SPIEnd
  3904  010D  3001               	movlw	1
  3905  010E  0020               	movlb	0	; select bank0
  3906  010F  07B2               	addwf	nrf24l01InitRegisters@i,f
  3907  0110  3000               	movlw	0
  3908  0111  3DB3               	addwfc	nrf24l01InitRegisters@i+1,f
  3909  0112  3000               	movlw	0
  3910  0113  0233               	subwf	nrf24l01InitRegisters@i+1,w
  3911  0114  3006               	movlw	6
  3912  0115  1903               	skipnz
  3913  0116  0232               	subwf	nrf24l01InitRegisters@i,w
  3914  0117  1C03               	skipc
  3915  0118  28B7               	goto	l2609
  3916  0119                     l2631:	
  3917                           
  3918                           ;nrf24l01.c: 452: };nrf24l01.c: 454: lastAddressByte = n_ADDRESS_P0[4];
  3919  0119  301D               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3920  011A  0084               	movwf	4
  3921  011B  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3922  011C  0085               	movwf	5
  3923  011D  0800               	movf	0,w	;code access
  3924  011E  00A5               	movwf	??_nrf24l01InitRegisters
  3925  011F  0825               	movf	??_nrf24l01InitRegisters,w
  3926  0120  00B0               	movwf	nrf24l01InitRegisters@lastAddressByte
  3927                           
  3928                           ;nrf24l01.c: 455: lastAddressByte+= n_ADDRESS_MUL * 2;
  3929  0121  3040               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3930  0122  0084               	movwf	4
  3931  0123  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3932  0124  0085               	movwf	5
  3933  0125  0800               	movf	0,w	;code access
  3934  0126  0709               	addwf	9,w
  3935  0127  00A5               	movwf	??_nrf24l01InitRegisters
  3936  0128  0825               	movf	??_nrf24l01InitRegisters,w
  3937  0129  07B0               	addwf	nrf24l01InitRegisters@lastAddressByte,f
  3938                           
  3939                           ;nrf24l01.c: 457: nrf24l01SPIStart();
  3940  012A  318D  25E8  3180   	fcall	_nrf24l01SPIStart
  3941                           
  3942                           ;nrf24l01.c: 458: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  3943  012D  3030               	movlw	48
  3944  012E  318D  25F0  3180   	fcall	_nrf24l01SPISend
  3945                           
  3946                           ;nrf24l01.c: 459: nrf24l01SPISend(lastAddressByte);
  3947  0131  0020               	movlb	0	; select bank0
  3948  0132  0830               	movf	nrf24l01InitRegisters@lastAddressByte,w
  3949  0133  318D  25F0  3180   	fcall	_nrf24l01SPISend
  3950                           
  3951                           ;nrf24l01.c: 460: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3952  0136  301C               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3953  0137  0084               	movwf	4
  3954  0138  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3955  0139  0085               	movwf	5
  3956  013A  0800               	movf	0,w	;code access
  3957  013B  318D  25F0  3180   	fcall	_nrf24l01SPISend
  3958                           
  3959                           ;nrf24l01.c: 461: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3960  013E  301B               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3961  013F  0084               	movwf	4
  3962  0140  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3963  0141  0085               	movwf	5
  3964  0142  0800               	movf	0,w	;code access
  3965  0143  318D  25F0  3180   	fcall	_nrf24l01SPISend
  3966                           
  3967                           ;nrf24l01.c: 462: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3968  0146  301A               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3969  0147  0084               	movwf	4
  3970  0148  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3971  0149  0085               	movwf	5
  3972  014A  0800               	movf	0,w	;code access
  3973  014B  318D  25F0  3180   	fcall	_nrf24l01SPISend
  3974                           
  3975                           ;nrf24l01.c: 463: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3976  014E  3019               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3977  014F  0084               	movwf	4
  3978  0150  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3979  0151  0085               	movwf	5
  3980  0152  0800               	movf	0,w	;code access
  3981  0153  318D  25F0  3180   	fcall	_nrf24l01SPISend
  3982                           
  3983                           ;nrf24l01.c: 465: nrf24l01SPIEnd();
  3984  0156  318D  25D9  3180   	fcall	_nrf24l01SPIEnd
  3985                           
  3986                           ;nrf24l01.c: 469: n_STATUS_t status;;nrf24l01.c: 470: status.byte = 0x00;
  3987  0159  0020               	movlb	0	; select bank0
  3988  015A  01AC               	clrf	nrf24l01InitRegisters@status
  3989                           
  3990                           ;nrf24l01.c: 471: status.RX_DR = 1;
  3991  015B  172C               	bsf	nrf24l01InitRegisters@status,6
  3992                           
  3993                           ;nrf24l01.c: 472: status.TX_DS = 1;
  3994  015C  16AC               	bsf	nrf24l01InitRegisters@status,5
  3995                           
  3996                           ;nrf24l01.c: 473: status.MAX_RT = 1;
  3997  015D  162C               	bsf	nrf24l01InitRegisters@status,4
  3998                           
  3999                           ;nrf24l01.c: 474: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  4000  015E  082C               	movf	nrf24l01InitRegisters@status,w
  4001  015F  00A5               	movwf	??_nrf24l01InitRegisters
  4002  0160  0825               	movf	??_nrf24l01InitRegisters,w
  4003  0161  00A1               	movwf	nrf24l01Send@data
  4004  0162  3027               	movlw	39
  4005  0163  318F  272B  3180   	fcall	_nrf24l01Send
  4006                           
  4007                           ;nrf24l01.c: 477: nrf24l01Send((unsigned) 0b11100001, 0);
  4008  0166  0020               	movlb	0	; select bank0
  4009  0167  01A1               	clrf	nrf24l01Send@data
  4010  0168  30E1               	movlw	225
  4011  0169  318F  272B  3180   	fcall	_nrf24l01Send
  4012                           
  4013                           ;nrf24l01.c: 478: nrf24l01Send((unsigned) 0b11100010, 0);
  4014  016C  0020               	movlb	0	; select bank0
  4015  016D  01A1               	clrf	nrf24l01Send@data
  4016  016E  30E2               	movlw	226
  4017  016F  318F  272B  3180   	fcall	_nrf24l01Send
  4018                           
  4019                           ;nrf24l01.c: 481: config.PRIM_RX = 1;
  4020  0172  0020               	movlb	0	; select bank0
  4021  0173  1431               	bsf	nrf24l01InitRegisters@config,0
  4022                           
  4023                           ;nrf24l01.c: 482: config.EN_CRC = 1;
  4024  0174  15B1               	bsf	nrf24l01InitRegisters@config,3
  4025                           
  4026                           ;nrf24l01.c: 483: config.CRCO = 1;
  4027  0175  1531               	bsf	nrf24l01InitRegisters@config,2
  4028                           
  4029                           ;nrf24l01.c: 484: config.PWR_UP = 1;
  4030  0176  14B1               	bsf	nrf24l01InitRegisters@config,1
  4031                           
  4032                           ;nrf24l01.c: 485: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  4033  0177  0831               	movf	nrf24l01InitRegisters@config,w
  4034  0178  00A5               	movwf	??_nrf24l01InitRegisters
  4035  0179  0825               	movf	??_nrf24l01InitRegisters,w
  4036  017A  00A1               	movwf	nrf24l01Send@data
  4037  017B  3020               	movlw	32
  4038  017C  318F  272B         	fcall	_nrf24l01Send
  4039  017E  0008               	return
  4040  017F                     __end_of_nrf24l01InitRegisters:	
  4041                           
  4042                           	psect	text5
  4043  0E0F                     __ptext5:	
  4044 ;; *************** function ___bmul *****************
  4045 ;; Defined at:
  4046 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  multiplier      1    wreg     unsigned char 
  4049 ;;  multiplicand    1    1[BANK0 ] unsigned char 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  multiplier      1    4[BANK0 ] unsigned char 
  4052 ;;  product         1    3[BANK0 ] unsigned char 
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  1    wreg      unsigned char 
  4055 ;; Registers used:
  4056 ;;		wreg, status,2, status,0
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4062 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4063 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4065 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4066 ;;Total ram usage:        4 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    7
  4069 ;; This function calls:
  4070 ;;		Nothing
  4071 ;; This function is called by:
  4072 ;;		_nrf24l01InitRegisters
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           
  4077                           ;psect for function ___bmul
  4078  0E0F                     ___bmul:	
  4079                           
  4080                           ;incstack = 0
  4081                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4082                           ;___bmul@multiplier stored from wreg
  4083  0E0F  0020               	movlb	0	; select bank0
  4084  0E10  00A4               	movwf	___bmul@multiplier
  4085  0E11  01A3               	clrf	___bmul@product
  4086  0E12                     l2229:	
  4087  0E12  1C24               	btfss	___bmul@multiplier,0
  4088  0E13  2E18               	goto	l2233
  4089  0E14  0821               	movf	___bmul@multiplicand,w
  4090  0E15  00A2               	movwf	??___bmul
  4091  0E16  0822               	movf	??___bmul,w
  4092  0E17  07A3               	addwf	___bmul@product,f
  4093  0E18                     l2233:	
  4094  0E18  1003               	clrc
  4095  0E19  0DA1               	rlf	___bmul@multiplicand,f
  4096  0E1A  1003               	clrc
  4097  0E1B  0CA4               	rrf	___bmul@multiplier,f
  4098  0E1C  0824               	movf	___bmul@multiplier,w
  4099  0E1D  1D03               	btfss	3,2
  4100  0E1E  2E12               	goto	l2229
  4101  0E1F  0823               	movf	___bmul@product,w
  4102  0E20  0008               	return
  4103  0E21                     __end_of___bmul:	
  4104                           
  4105                           	psect	text6
  4106  017F                     __ptext6:	
  4107 ;; *************** function _loop *****************
  4108 ;; Defined at:
  4109 ;;		line 100 in file "main.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;		None
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  packet         33    1[BANK1 ] struct .
  4114 ;;  rfSetup         1    0[BANK1 ] struct .
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      void 
  4117 ;; Registers used:
  4118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4125 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  4126 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4127 ;;      Totals:         0       4      34       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;Total ram usage:       38 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:   12
  4131 ;; This function calls:
  4132 ;;		_checkTXPower
  4133 ;;		_getADCValue
  4134 ;;		_nrf24l01Send
  4135 ;;		_nrf24l01SendPacket
  4136 ;;		_setMessage
  4137 ;;		_sleep
  4138 ;; This function is called by:
  4139 ;;		_main
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           
  4144                           ;psect for function _loop
  4145  017F                     _loop:	
  4146                           
  4147                           ;incstack = 0
  4148                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4149  017F  0064               	clrwdt	;# 
  4150                           
  4151                           ;main.c: 105: nrf24l01Packet_t packet;;main.c: 107: setMessage(&packet, "DBG", counter);
  4152  0180  3036               	movlw	low (STR_3| (0+32768))
  4153  0181  0020               	movlb	0	; select bank0
  4154  0182  00BD               	movwf	setMessage@topic
  4155  0183  3090               	movlw	high (STR_3| (0+32768))
  4156  0184  00BE               	movwf	setMessage@topic+1
  4157  0185  0021               	movlb	1	; select bank1
  4158  0186  0866               	movf	(_counter+3)^(0+128),w
  4159  0187  0020               	movlb	0	; select bank0
  4160  0188  00C2               	movwf	setMessage@value+3
  4161  0189  0021               	movlb	1	; select bank1
  4162  018A  0865               	movf	(_counter+2)^(0+128),w
  4163  018B  0020               	movlb	0	; select bank0
  4164  018C  00C1               	movwf	setMessage@value+2
  4165  018D  0021               	movlb	1	; select bank1
  4166  018E  0864               	movf	(_counter+1)^(0+128),w
  4167  018F  0020               	movlb	0	; select bank0
  4168  0190  00C0               	movwf	setMessage@value+1
  4169  0191  0021               	movlb	1	; select bank1
  4170  0192  0863               	movf	_counter^(0+128),w
  4171  0193  0020               	movlb	0	; select bank0
  4172  0194  00BF               	movwf	setMessage@value
  4173  0195  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4174  0196  3185  2539  3181   	fcall	_setMessage
  4175                           
  4176                           ;main.c: 108: packet.packetData.byte = 0;
  4177  0199  0021               	movlb	1	; select bank1
  4178  019A  01A1               	clrf	loop@packet^(0+128)
  4179                           
  4180                           ;main.c: 109: packet.packetData.ACKRequest = 0;
  4181  019B  1121               	bcf	loop@packet^(0+128),2
  4182                           
  4183                           ;main.c: 110: nrf24l01SendPacket(&packet);
  4184  019C  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4185  019D  3182  2293  3181   	fcall	_nrf24l01SendPacket
  4186                           
  4187                           ;main.c: 111: checkTXPower();
  4188  01A0  318E  2621  3181   	fcall	_checkTXPower
  4189                           
  4190                           ;main.c: 112: sleep();
  4191  01A3  318D  25FD  3181   	fcall	_sleep
  4192                           
  4193                           ;main.c: 114: setMessage(&packet, "VBAT", getADCValue(0b000100, 2526));
  4194  01A6  3028               	movlw	low (STR_4| (0+32768))
  4195  01A7  0020               	movlb	0	; select bank0
  4196  01A8  00BD               	movwf	setMessage@topic
  4197  01A9  3090               	movlw	high (STR_4| (0+32768))
  4198  01AA  00BE               	movwf	setMessage@topic+1
  4199  01AB  3000               	movlw	0
  4200  01AC  00B2               	movwf	getADCValue@divider+3
  4201  01AD  3000               	movlw	0
  4202  01AE  00B1               	movwf	getADCValue@divider+2
  4203  01AF  3009               	movlw	9
  4204  01B0  00B0               	movwf	getADCValue@divider+1
  4205  01B1  30DE               	movlw	222
  4206  01B2  00AF               	movwf	getADCValue@divider
  4207  01B3  3004               	movlw	4
  4208  01B4  3184  2458  3181   	fcall	_getADCValue
  4209  01B7  0020               	movlb	0	; select bank0
  4210  01B8  0832               	movf	?_getADCValue+3,w
  4211  01B9  00C2               	movwf	setMessage@value+3
  4212  01BA  0831               	movf	?_getADCValue+2,w
  4213  01BB  00C1               	movwf	setMessage@value+2
  4214  01BC  0830               	movf	?_getADCValue+1,w
  4215  01BD  00C0               	movwf	setMessage@value+1
  4216  01BE  082F               	movf	?_getADCValue,w
  4217  01BF  00BF               	movwf	setMessage@value
  4218  01C0  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4219  01C1  3185  2539  3181   	fcall	_setMessage
  4220                           
  4221                           ;main.c: 115: packet.packetData.byte = 0;
  4222  01C4  0021               	movlb	1	; select bank1
  4223  01C5  01A1               	clrf	loop@packet^(0+128)
  4224                           
  4225                           ;main.c: 116: packet.packetData.ACKRequest = 0;
  4226  01C6  1121               	bcf	loop@packet^(0+128),2
  4227                           
  4228                           ;main.c: 117: nrf24l01SendPacket(&packet);
  4229  01C7  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4230  01C8  3182  2293  3181   	fcall	_nrf24l01SendPacket
  4231                           
  4232                           ;main.c: 118: checkTXPower();
  4233  01CB  318E  2621  3181   	fcall	_checkTXPower
  4234                           
  4235                           ;main.c: 119: sleep();
  4236  01CE  318D  25FD  3181   	fcall	_sleep
  4237                           
  4238                           ;main.c: 122: setMessage(&packet, "ANC3", getADCValue(0b010011, 2500));
  4239  01D1  301E               	movlw	low (STR_5| (0+32768))
  4240  01D2  0020               	movlb	0	; select bank0
  4241  01D3  00BD               	movwf	setMessage@topic
  4242  01D4  3090               	movlw	high (STR_5| (0+32768))
  4243  01D5  00BE               	movwf	setMessage@topic+1
  4244  01D6  3000               	movlw	0
  4245  01D7  00B2               	movwf	getADCValue@divider+3
  4246  01D8  3000               	movlw	0
  4247  01D9  00B1               	movwf	getADCValue@divider+2
  4248  01DA  3009               	movlw	9
  4249  01DB  00B0               	movwf	getADCValue@divider+1
  4250  01DC  30C4               	movlw	196
  4251  01DD  00AF               	movwf	getADCValue@divider
  4252  01DE  3013               	movlw	19
  4253  01DF  3184  2458  3181   	fcall	_getADCValue
  4254  01E2  0020               	movlb	0	; select bank0
  4255  01E3  0832               	movf	?_getADCValue+3,w
  4256  01E4  00C2               	movwf	setMessage@value+3
  4257  01E5  0831               	movf	?_getADCValue+2,w
  4258  01E6  00C1               	movwf	setMessage@value+2
  4259  01E7  0830               	movf	?_getADCValue+1,w
  4260  01E8  00C0               	movwf	setMessage@value+1
  4261  01E9  082F               	movf	?_getADCValue,w
  4262  01EA  00BF               	movwf	setMessage@value
  4263  01EB  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4264  01EC  3185  2539  3181   	fcall	_setMessage
  4265                           
  4266                           ;main.c: 123: packet.packetData.byte = 0;
  4267  01EF  0021               	movlb	1	; select bank1
  4268  01F0  01A1               	clrf	loop@packet^(0+128)
  4269                           
  4270                           ;main.c: 124: packet.packetData.ACKRequest = 0;
  4271  01F1  1121               	bcf	loop@packet^(0+128),2
  4272                           
  4273                           ;main.c: 125: nrf24l01SendPacket(&packet);
  4274  01F2  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4275  01F3  3182  2293  3181   	fcall	_nrf24l01SendPacket
  4276                           
  4277                           ;main.c: 126: checkTXPower();
  4278  01F6  318E  2621  3181   	fcall	_checkTXPower
  4279                           
  4280                           ;main.c: 127: sleep();
  4281  01F9  318D  25FD  3181   	fcall	_sleep
  4282                           
  4283                           ;main.c: 129: setMessage(&packet, "FVR", getADCValue(0b111111, 2500));
  4284  01FC  303A               	movlw	low (STR_6| (0+32768))
  4285  01FD  0020               	movlb	0	; select bank0
  4286  01FE  00BD               	movwf	setMessage@topic
  4287  01FF  3090               	movlw	high (STR_6| (0+32768))
  4288  0200  00BE               	movwf	setMessage@topic+1
  4289  0201  3000               	movlw	0
  4290  0202  00B2               	movwf	getADCValue@divider+3
  4291  0203  3000               	movlw	0
  4292  0204  00B1               	movwf	getADCValue@divider+2
  4293  0205  3009               	movlw	9
  4294  0206  00B0               	movwf	getADCValue@divider+1
  4295  0207  30C4               	movlw	196
  4296  0208  00AF               	movwf	getADCValue@divider
  4297  0209  303F               	movlw	63
  4298  020A  3184  2458  3181   	fcall	_getADCValue
  4299  020D  0020               	movlb	0	; select bank0
  4300  020E  0832               	movf	?_getADCValue+3,w
  4301  020F  00C2               	movwf	setMessage@value+3
  4302  0210  0831               	movf	?_getADCValue+2,w
  4303  0211  00C1               	movwf	setMessage@value+2
  4304  0212  0830               	movf	?_getADCValue+1,w
  4305  0213  00C0               	movwf	setMessage@value+1
  4306  0214  082F               	movf	?_getADCValue,w
  4307  0215  00BF               	movwf	setMessage@value
  4308  0216  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4309  0217  3185  2539  3181   	fcall	_setMessage
  4310                           
  4311                           ;main.c: 130: packet.packetData.byte = 0;
  4312  021A  0021               	movlb	1	; select bank1
  4313  021B  01A1               	clrf	loop@packet^(0+128)
  4314                           
  4315                           ;main.c: 131: packet.packetData.ACKRequest = 0;
  4316  021C  1121               	bcf	loop@packet^(0+128),2
  4317                           
  4318                           ;main.c: 132: nrf24l01SendPacket(&packet);
  4319  021D  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4320  021E  3182  2293  3181   	fcall	_nrf24l01SendPacket
  4321                           
  4322                           ;main.c: 133: checkTXPower();
  4323  0221  318E  2621  3181   	fcall	_checkTXPower
  4324                           
  4325                           ;main.c: 134: sleep();
  4326  0224  318D  25FD  3181   	fcall	_sleep
  4327                           
  4328                           ;main.c: 136: setMessage(&packet, "TEMP", getADCValue(0b111101, 162) - 40000);
  4329  0227  3023               	movlw	low (STR_7| (0+32768))
  4330  0228  0020               	movlb	0	; select bank0
  4331  0229  00BD               	movwf	setMessage@topic
  4332  022A  3090               	movlw	high (STR_7| (0+32768))
  4333  022B  00BE               	movwf	setMessage@topic+1
  4334  022C  30C0               	movlw	192
  4335  022D  00D4               	movwf	??_loop
  4336  022E  3063               	movlw	99
  4337  022F  00D5               	movwf	??_loop+1
  4338  0230  30FF               	movlw	255
  4339  0231  00D6               	movwf	??_loop+2
  4340  0232  30FF               	movlw	255
  4341  0233  00D7               	movwf	??_loop+3
  4342  0234  3000               	movlw	0
  4343  0235  00B2               	movwf	getADCValue@divider+3
  4344  0236  3000               	movlw	0
  4345  0237  00B1               	movwf	getADCValue@divider+2
  4346  0238  3000               	movlw	0
  4347  0239  00B0               	movwf	getADCValue@divider+1
  4348  023A  30A2               	movlw	162
  4349  023B  00AF               	movwf	getADCValue@divider
  4350  023C  303D               	movlw	61
  4351  023D  3184  2458  3181   	fcall	_getADCValue
  4352  0240  0020               	movlb	0	; select bank0
  4353  0241  082F               	movf	?_getADCValue,w
  4354  0242  07D4               	addwf	??_loop,f
  4355  0243  0830               	movf	?_getADCValue+1,w
  4356  0244  3DD5               	addwfc	??_loop+1,f
  4357  0245  0831               	movf	?_getADCValue+2,w
  4358  0246  3DD6               	addwfc	??_loop+2,f
  4359  0247  0832               	movf	?_getADCValue+3,w
  4360  0248  3DD7               	addwfc	??_loop+3,f
  4361  0249  0857               	movf	??_loop+3,w
  4362  024A  00C2               	movwf	setMessage@value+3
  4363  024B  0856               	movf	??_loop+2,w
  4364  024C  00C1               	movwf	setMessage@value+2
  4365  024D  0855               	movf	??_loop+1,w
  4366  024E  00C0               	movwf	setMessage@value+1
  4367  024F  0854               	movf	??_loop,w
  4368  0250  00BF               	movwf	setMessage@value
  4369  0251  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4370  0252  3185  2539  3181   	fcall	_setMessage
  4371                           
  4372                           ;main.c: 137: packet.packetData.byte = 0;
  4373  0255  0021               	movlb	1	; select bank1
  4374  0256  01A1               	clrf	loop@packet^(0+128)
  4375                           
  4376                           ;main.c: 138: packet.packetData.ACKRequest = 0;
  4377  0257  1121               	bcf	loop@packet^(0+128),2
  4378                           
  4379                           ;main.c: 139: nrf24l01SendPacket(&packet);
  4380  0258  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4381  0259  3182  2293  3181   	fcall	_nrf24l01SendPacket
  4382                           
  4383                           ;main.c: 140: checkTXPower();
  4384  025C  318E  2621  3181   	fcall	_checkTXPower
  4385                           
  4386                           ;main.c: 141: sleep();
  4387  025F  318D  25FD  3181   	fcall	_sleep
  4388                           
  4389                           ;main.c: 143: n_RF_SETUP_t rfSetup;;main.c: 144: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4390  0262  0020               	movlb	0	; select bank0
  4391  0263  01A1               	clrf	nrf24l01Send@data
  4392  0264  3006               	movlw	6
  4393  0265  318F  272B  3181   	fcall	_nrf24l01Send
  4394  0268  0020               	movlb	0	; select bank0
  4395  0269  00D4               	movwf	??_loop
  4396  026A  0854               	movf	??_loop,w
  4397  026B  0021               	movlb	1	; select bank1
  4398  026C  00A0               	movwf	loop@rfSetup^(0+128)
  4399                           
  4400                           ;main.c: 146: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4401  026D  3013               	movlw	low (STR_8| (0+32768))
  4402  026E  0020               	movlb	0	; select bank0
  4403  026F  00BD               	movwf	setMessage@topic
  4404  0270  3090               	movlw	high (STR_8| (0+32768))
  4405  0271  00BE               	movwf	setMessage@topic+1
  4406  0272  0021               	movlb	1	; select bank1
  4407  0273  0C20               	rrf	loop@rfSetup^(0+128),w
  4408  0274  3903               	andlw	3
  4409  0275  0020               	movlb	0	; select bank0
  4410  0276  00D4               	movwf	??_loop
  4411  0277  01D5               	clrf	??_loop+1
  4412  0278  01D6               	clrf	??_loop+2
  4413  0279  01D7               	clrf	??_loop+3
  4414  027A  0857               	movf	??_loop+3,w
  4415  027B  00C2               	movwf	setMessage@value+3
  4416  027C  0856               	movf	??_loop+2,w
  4417  027D  00C1               	movwf	setMessage@value+2
  4418  027E  0855               	movf	??_loop+1,w
  4419  027F  00C0               	movwf	setMessage@value+1
  4420  0280  0854               	movf	??_loop,w
  4421  0281  00BF               	movwf	setMessage@value
  4422  0282  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4423  0283  3185  2539  3181   	fcall	_setMessage
  4424                           
  4425                           ;main.c: 147: packet.packetData.byte = 0;
  4426  0286  0021               	movlb	1	; select bank1
  4427  0287  01A1               	clrf	loop@packet^(0+128)
  4428                           
  4429                           ;main.c: 148: packet.packetData.ACKRequest = 0;
  4430  0288  1121               	bcf	loop@packet^(0+128),2
  4431                           
  4432                           ;main.c: 149: nrf24l01SendPacket(&packet);
  4433  0289  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4434  028A  3182  2293  3181   	fcall	_nrf24l01SendPacket
  4435                           
  4436                           ;main.c: 150: checkTXPower();
  4437  028D  318E  2621  3181   	fcall	_checkTXPower
  4438                           
  4439                           ;main.c: 151: sleep();
  4440  0290  318D  25FD         	fcall	_sleep
  4441  0292  0008               	return
  4442  0293                     __end_of_loop:	
  4443                           
  4444                           	psect	text7
  4445  0DFD                     __ptext7:	
  4446 ;; *************** function _sleep *****************
  4447 ;; Defined at:
  4448 ;;		line 49 in file "main.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;		None
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;		None
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  1    wreg      void 
  4455 ;; Registers used:
  4456 ;;		wreg
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;Total ram usage:        0 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    7
  4469 ;; This function calls:
  4470 ;;		Nothing
  4471 ;; This function is called by:
  4472 ;;		_loop
  4473 ;;		_main
  4474 ;;		_checkRxData
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           
  4479                           ;psect for function _sleep
  4480  0DFD                     _sleep:	
  4481  0DFD                     l221:	
  4482                           ;incstack = 0
  4483                           ; Regs used in _sleep: [wreg]
  4484                           ;main.c: 50: while (1){
  4485                           
  4486                           
  4487                           ;main.c: 52: counter++;
  4488  0DFD  3001               	movlw	1
  4489  0DFE  0021               	movlb	1	; select bank1
  4490  0DFF  07E3               	addwf	_counter^(0+128),f
  4491  0E00  3000               	movlw	0
  4492  0E01  3DE4               	addwfc	(_counter+1)^(0+128),f
  4493  0E02  3000               	movlw	0
  4494  0E03  3DE5               	addwfc	(_counter+2)^(0+128),f
  4495  0E04  3000               	movlw	0
  4496  0E05  3DE6               	addwfc	(_counter+3)^(0+128),f
  4497  0E06  0063               	sleep	;# 
  4498                           
  4499                           ;main.c: 55: __nop();
  4500  0E07  0000               	nop
  4501                           
  4502                           ;main.c: 56: __nop();
  4503  0E08  0000               	nop
  4504                           
  4505                           ;main.c: 58: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  4506  0E09  0020               	movlb	0	; select bank0
  4507  0E0A  1A03               	btfsc	3,4	;volatile
  4508  0E0B  2DFD               	goto	l221
  4509  0E0C  1D83               	btfss	3,3	;volatile
  4510  0E0D  0008               	return
  4511  0E0E  2DFD               	goto	l221
  4512  0E0F                     __end_of_sleep:	
  4513                           ;main.c: 59: return;
  4514                           
  4515                           
  4516                           	psect	text8
  4517  0539                     __ptext8:	
  4518 ;; *************** function _setMessage *****************
  4519 ;; Defined at:
  4520 ;;		line 76 in file "main.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;  packet          1    wreg     PTR struct .
  4523 ;;		 -> main@packet(33), loop@packet(33), 
  4524 ;;  topic           2   29[BANK0 ] PTR const unsigned char 
  4525 ;;		 -> STR_10(5), STR_8(6), STR_7(5), STR_6(4), 
  4526 ;;		 -> STR_5(5), STR_4(5), STR_3(4), 
  4527 ;;  value           4   31[BANK0 ] unsigned long 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  packet          1   51[BANK0 ] PTR struct .
  4530 ;;		 -> main@packet(33), loop@packet(33), 
  4531 ;;  tempString     16   35[BANK0 ] unsigned char [16]
  4532 ;; Return value:  Size  Location     Type
  4533 ;;                  1    wreg      void 
  4534 ;; Registers used:
  4535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4536 ;; Tracked objects:
  4537 ;;		On entry : 0/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4541 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4542 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4544 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4545 ;;Total ram usage:       23 bytes
  4546 ;; Hardware stack levels used:    1
  4547 ;; Hardware stack levels required when called:    9
  4548 ;; This function calls:
  4549 ;;		_memset
  4550 ;;		_strcat
  4551 ;;		_ultoa
  4552 ;; This function is called by:
  4553 ;;		_loop
  4554 ;;		_main
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           
  4559                           ;psect for function _setMessage
  4560  0539                     _setMessage:	
  4561                           
  4562                           ;incstack = 0
  4563                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4564                           ;setMessage@packet stored from wreg
  4565  0539  0020               	movlb	0	; select bank0
  4566  053A  00D3               	movwf	setMessage@packet
  4567                           
  4568                           ;main.c: 77: memset(packet->Message, 0, sizeof(packet->Message));
  4569  053B  0853               	movf	setMessage@packet,w
  4570  053C  3E01               	addlw	1
  4571  053D  00A1               	movwf	memset@p1
  4572  053E  3000               	movlw	0
  4573  053F  00A2               	movwf	memset@p1+1
  4574  0540  3000               	movlw	0
  4575  0541  00A3               	movwf	memset@c
  4576  0542  00A4               	movwf	memset@c+1
  4577  0543  3020               	movlw	32
  4578  0544  00A5               	movwf	memset@n
  4579  0545  3000               	movlw	0
  4580  0546  00A6               	movwf	memset@n+1
  4581  0547  318E  2665  3185   	fcall	_memset
  4582                           
  4583                           ;main.c: 79: strcat(packet->Message, romData.name);
  4584  054A  305D               	movlw	low (_romData+1)
  4585  054B  0020               	movlb	0	; select bank0
  4586  054C  00A1               	movwf	strcat@from
  4587  054D  3000               	movlw	high (_romData+1)
  4588  054E  00A2               	movwf	strcat@from+1
  4589  054F  0853               	movf	setMessage@packet,w
  4590  0550  3E01               	addlw	1
  4591  0551  318F  27DA  3185   	fcall	_strcat
  4592                           
  4593                           ;main.c: 81: strcat(packet->Message, "/");
  4594  0554  303E               	movlw	low (STR_1| (0+32768))
  4595  0555  0020               	movlb	0	; select bank0
  4596  0556  00A1               	movwf	strcat@from
  4597  0557  3090               	movlw	high (STR_1| (0+32768))
  4598  0558  00A2               	movwf	strcat@from+1
  4599  0559  0853               	movf	setMessage@packet,w
  4600  055A  3E01               	addlw	1
  4601  055B  318F  27DA  3185   	fcall	_strcat
  4602                           
  4603                           ;main.c: 82: strcat(packet->Message, topic);
  4604  055E  0020               	movlb	0	; select bank0
  4605  055F  083E               	movf	setMessage@topic+1,w
  4606  0560  00A2               	movwf	strcat@from+1
  4607  0561  083D               	movf	setMessage@topic,w
  4608  0562  00A1               	movwf	strcat@from
  4609  0563  0853               	movf	setMessage@packet,w
  4610  0564  3E01               	addlw	1
  4611  0565  318F  27DA  3185   	fcall	_strcat
  4612                           
  4613                           ;main.c: 84: char tempString[16];;main.c: 86: ultoa(tempString, value, 10);
  4614  0568  0020               	movlb	0	; select bank0
  4615  0569  0842               	movf	setMessage@value+3,w
  4616  056A  00B2               	movwf	ultoa@val+3
  4617  056B  0841               	movf	setMessage@value+2,w
  4618  056C  00B1               	movwf	ultoa@val+2
  4619  056D  0840               	movf	setMessage@value+1,w
  4620  056E  00B0               	movwf	ultoa@val+1
  4621  056F  083F               	movf	setMessage@value,w
  4622  0570  00AF               	movwf	ultoa@val
  4623  0571  300A               	movlw	10
  4624  0572  00B3               	movwf	ultoa@base
  4625  0573  3000               	movlw	0
  4626  0574  00B4               	movwf	ultoa@base+1
  4627  0575  3043               	movlw	(low (setMessage@tempString| 0))& (0+255)
  4628  0576  3183  2347  3185   	fcall	_ultoa
  4629                           
  4630                           ;main.c: 88: strcat(packet->Message, "/");
  4631  0579  303E               	movlw	low (STR_1| (0+32768))
  4632  057A  0020               	movlb	0	; select bank0
  4633  057B  00A1               	movwf	strcat@from
  4634  057C  3090               	movlw	high (STR_1| (0+32768))
  4635  057D  00A2               	movwf	strcat@from+1
  4636  057E  0853               	movf	setMessage@packet,w
  4637  057F  3E01               	addlw	1
  4638  0580  318F  27DA  3185   	fcall	_strcat
  4639                           
  4640                           ;main.c: 89: strcat(packet->Message, tempString);
  4641  0583  3043               	movlw	low setMessage@tempString
  4642  0584  0020               	movlb	0	; select bank0
  4643  0585  00A1               	movwf	strcat@from
  4644  0586  3000               	movlw	high setMessage@tempString
  4645  0587  00A2               	movwf	strcat@from+1
  4646  0588  0853               	movf	setMessage@packet,w
  4647  0589  3E01               	addlw	1
  4648  058A  318F  27DA         	fcall	_strcat
  4649  058C  0008               	return
  4650  058D                     __end_of_setMessage:	
  4651                           
  4652                           	psect	text9
  4653  0347                     __ptext9:	
  4654 ;; *************** function _ultoa *****************
  4655 ;; Defined at:
  4656 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltoa.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;  buf             1    wreg     PTR unsigned char 
  4659 ;;		 -> setMessage@tempString(16), 
  4660 ;;  val             4   15[BANK0 ] unsigned long 
  4661 ;;  base            2   19[BANK0 ] int 
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;  buf             1   27[BANK0 ] PTR unsigned char 
  4664 ;;		 -> setMessage@tempString(16), 
  4665 ;;  v               4   22[BANK0 ] unsigned long 
  4666 ;;  c               1   26[BANK0 ] unsigned char 
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  1    wreg      PTR unsigned char 
  4669 ;; Registers used:
  4670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4676 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;Total ram usage:       13 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    8
  4683 ;; This function calls:
  4684 ;;		___lldiv
  4685 ;;		___llmod
  4686 ;; This function is called by:
  4687 ;;		_setMessage
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           
  4692                           ;psect for function _ultoa
  4693  0347                     _ultoa:	
  4694                           
  4695                           ;incstack = 0
  4696                           ; Regs used in _ultoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4697                           ;ultoa@buf stored from wreg
  4698  0347  0020               	movlb	0	; select bank0
  4699  0348  00BB               	movwf	ultoa@buf
  4700  0349  0832               	movf	ultoa@val+3,w
  4701  034A  00B9               	movwf	ultoa@v+3
  4702  034B  0831               	movf	ultoa@val+2,w
  4703  034C  00B8               	movwf	ultoa@v+2
  4704  034D  0830               	movf	ultoa@val+1,w
  4705  034E  00B7               	movwf	ultoa@v+1
  4706  034F  082F               	movf	ultoa@val,w
  4707  0350  00B6               	movwf	ultoa@v
  4708  0351                     l2131:	
  4709  0351  0833               	movf	ultoa@base,w
  4710  0352  00A1               	movwf	___lldiv@divisor
  4711  0353  0834               	movf	ultoa@base+1,w
  4712  0354  00A2               	movwf	___lldiv@divisor+1
  4713  0355  0D89               	rlf	9,f
  4714  0356  3B89               	subwfb	9,f
  4715  0357  0989               	comf	9,f
  4716  0358  00A3               	movwf	___lldiv@divisor+2
  4717  0359  00A4               	movwf	___lldiv@divisor+3
  4718  035A  0839               	movf	ultoa@v+3,w
  4719  035B  00A8               	movwf	___lldiv@dividend+3
  4720  035C  0838               	movf	ultoa@v+2,w
  4721  035D  00A7               	movwf	___lldiv@dividend+2
  4722  035E  0837               	movf	ultoa@v+1,w
  4723  035F  00A6               	movwf	___lldiv@dividend+1
  4724  0360  0836               	movf	ultoa@v,w
  4725  0361  00A5               	movwf	___lldiv@dividend
  4726  0362  3185  258D  3183   	fcall	___lldiv
  4727  0365  0020               	movlb	0	; select bank0
  4728  0366  0824               	movf	?___lldiv+3,w
  4729  0367  00B9               	movwf	ultoa@v+3
  4730  0368  0823               	movf	?___lldiv+2,w
  4731  0369  00B8               	movwf	ultoa@v+2
  4732  036A  0822               	movf	?___lldiv+1,w
  4733  036B  00B7               	movwf	ultoa@v+1
  4734  036C  0821               	movf	?___lldiv,w
  4735  036D  00B6               	movwf	ultoa@v
  4736  036E  3001               	movlw	1
  4737  036F  00B5               	movwf	??_ultoa
  4738  0370  0835               	movf	??_ultoa,w
  4739  0371  07BB               	addwf	ultoa@buf,f
  4740  0372  0839               	movf	ultoa@v+3,w
  4741  0373  0438               	iorwf	ultoa@v+2,w
  4742  0374  0437               	iorwf	ultoa@v+1,w
  4743  0375  0436               	iorwf	ultoa@v,w
  4744  0376  1D03               	skipz
  4745  0377  2B51               	goto	l2131
  4746  0378  083B               	movf	ultoa@buf,w
  4747  0379  0086               	movwf	6
  4748  037A  0187               	clrf	7
  4749  037B  0181               	clrf	1
  4750  037C  3001               	movlw	1
  4751  037D  02BB               	subwf	ultoa@buf,f
  4752  037E                     l2141:	
  4753  037E  0833               	movf	ultoa@base,w
  4754  037F  00A1               	movwf	___llmod@divisor
  4755  0380  0834               	movf	ultoa@base+1,w
  4756  0381  00A2               	movwf	___llmod@divisor+1
  4757  0382  0D89               	rlf	9,f
  4758  0383  3B89               	subwfb	9,f
  4759  0384  0989               	comf	9,f
  4760  0385  00A3               	movwf	___llmod@divisor+2
  4761  0386  00A4               	movwf	___llmod@divisor+3
  4762  0387  0832               	movf	ultoa@val+3,w
  4763  0388  00A8               	movwf	___llmod@dividend+3
  4764  0389  0831               	movf	ultoa@val+2,w
  4765  038A  00A7               	movwf	___llmod@dividend+2
  4766  038B  0830               	movf	ultoa@val+1,w
  4767  038C  00A6               	movwf	___llmod@dividend+1
  4768  038D  082F               	movf	ultoa@val,w
  4769  038E  00A5               	movwf	___llmod@dividend
  4770  038F  3185  25E0  3183   	fcall	___llmod
  4771  0392  0020               	movlb	0	; select bank0
  4772  0393  0821               	movf	?___llmod,w
  4773  0394  00B5               	movwf	??_ultoa
  4774  0395  0835               	movf	??_ultoa,w
  4775  0396  00BA               	movwf	ultoa@c
  4776  0397  0833               	movf	ultoa@base,w
  4777  0398  00A1               	movwf	___lldiv@divisor
  4778  0399  0834               	movf	ultoa@base+1,w
  4779  039A  00A2               	movwf	___lldiv@divisor+1
  4780  039B  0D89               	rlf	9,f
  4781  039C  3B89               	subwfb	9,f
  4782  039D  0989               	comf	9,f
  4783  039E  00A3               	movwf	___lldiv@divisor+2
  4784  039F  00A4               	movwf	___lldiv@divisor+3
  4785  03A0  0832               	movf	ultoa@val+3,w
  4786  03A1  00A8               	movwf	___lldiv@dividend+3
  4787  03A2  0831               	movf	ultoa@val+2,w
  4788  03A3  00A7               	movwf	___lldiv@dividend+2
  4789  03A4  0830               	movf	ultoa@val+1,w
  4790  03A5  00A6               	movwf	___lldiv@dividend+1
  4791  03A6  082F               	movf	ultoa@val,w
  4792  03A7  00A5               	movwf	___lldiv@dividend
  4793  03A8  3185  258D  3183   	fcall	___lldiv
  4794  03AB  0020               	movlb	0	; select bank0
  4795  03AC  0824               	movf	?___lldiv+3,w
  4796  03AD  00B2               	movwf	ultoa@val+3
  4797  03AE  0823               	movf	?___lldiv+2,w
  4798  03AF  00B1               	movwf	ultoa@val+2
  4799  03B0  0822               	movf	?___lldiv+1,w
  4800  03B1  00B0               	movwf	ultoa@val+1
  4801  03B2  0821               	movf	?___lldiv,w
  4802  03B3  00AF               	movwf	ultoa@val
  4803  03B4  300A               	movlw	10
  4804  03B5  023A               	subwf	ultoa@c,w
  4805  03B6  1C03               	skipc
  4806  03B7  2BBC               	goto	l868
  4807  03B8  3007               	movlw	7
  4808  03B9  00B5               	movwf	??_ultoa
  4809  03BA  0835               	movf	??_ultoa,w
  4810  03BB  07BA               	addwf	ultoa@c,f
  4811  03BC                     l868:	
  4812  03BC  3030               	movlw	48
  4813  03BD  00B5               	movwf	??_ultoa
  4814  03BE  0835               	movf	??_ultoa,w
  4815  03BF  07BA               	addwf	ultoa@c,f
  4816  03C0  083A               	movf	ultoa@c,w
  4817  03C1  00B5               	movwf	??_ultoa
  4818  03C2  083B               	movf	ultoa@buf,w
  4819  03C3  0086               	movwf	6
  4820  03C4  0187               	clrf	7
  4821  03C5  0835               	movf	??_ultoa,w
  4822  03C6  0081               	movwf	1
  4823  03C7  3001               	movlw	1
  4824  03C8  02BB               	subwf	ultoa@buf,f
  4825  03C9  0832               	movf	ultoa@val+3,w
  4826  03CA  0431               	iorwf	ultoa@val+2,w
  4827  03CB  0430               	iorwf	ultoa@val+1,w
  4828  03CC  042F               	iorwf	ultoa@val,w
  4829  03CD  1903               	btfsc	3,2
  4830  03CE  0008               	return
  4831  03CF  2B7E               	goto	l2141
  4832  03D0                     __end_of_ultoa:	
  4833                           ;	Return value of _ultoa is never used
  4834                           
  4835                           
  4836                           	psect	text10
  4837  05E0                     __ptext10:	
  4838 ;; *************** function ___llmod *****************
  4839 ;; Defined at:
  4840 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;  divisor         4    1[BANK0 ] unsigned long 
  4843 ;;  dividend        4    5[BANK0 ] unsigned long 
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;  counter         1   10[BANK0 ] unsigned char 
  4846 ;; Return value:  Size  Location     Type
  4847 ;;                  4    1[BANK0 ] unsigned long 
  4848 ;; Registers used:
  4849 ;;		wreg, status,2, status,0
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4855 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4856 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4857 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4858 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4859 ;;Total ram usage:       10 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; Hardware stack levels required when called:    7
  4862 ;; This function calls:
  4863 ;;		Nothing
  4864 ;; This function is called by:
  4865 ;;		_ultoa
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           
  4870                           ;psect for function ___llmod
  4871  05E0                     ___llmod:	
  4872                           
  4873                           ;incstack = 0
  4874                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4875  05E0  0020               	movlb	0	; select bank0
  4876  05E1  0824               	movf	___llmod@divisor+3,w
  4877  05E2  0423               	iorwf	___llmod@divisor+2,w
  4878  05E3  0422               	iorwf	___llmod@divisor+1,w
  4879  05E4  0421               	iorwf	___llmod@divisor,w
  4880  05E5  1903               	skipnz
  4881  05E6  2E1A               	goto	l2013
  4882  05E7  01AA               	clrf	___llmod@counter
  4883  05E8  0AAA               	incf	___llmod@counter,f
  4884  05E9                     l2003:	
  4885  05E9  1BA4               	btfsc	___llmod@divisor+3,7
  4886  05EA  2DF7               	goto	l2005
  4887  05EB  3001               	movlw	1
  4888  05EC                     u885:	
  4889  05EC  35A1               	lslf	___llmod@divisor,f
  4890  05ED  0DA2               	rlf	___llmod@divisor+1,f
  4891  05EE  0DA3               	rlf	___llmod@divisor+2,f
  4892  05EF  0DA4               	rlf	___llmod@divisor+3,f
  4893  05F0  0B89               	decfsz	9,f
  4894  05F1  2DEC               	goto	u885
  4895  05F2  3001               	movlw	1
  4896  05F3  00A9               	movwf	??___llmod
  4897  05F4  0829               	movf	??___llmod,w
  4898  05F5  07AA               	addwf	___llmod@counter,f
  4899  05F6  2DE9               	goto	l2003
  4900  05F7                     l2005:	
  4901  05F7  0824               	movf	___llmod@divisor+3,w
  4902  05F8  0228               	subwf	___llmod@dividend+3,w
  4903  05F9  1D03               	skipz
  4904  05FA  2E05               	goto	u905
  4905  05FB  0823               	movf	___llmod@divisor+2,w
  4906  05FC  0227               	subwf	___llmod@dividend+2,w
  4907  05FD  1D03               	skipz
  4908  05FE  2E05               	goto	u905
  4909  05FF  0822               	movf	___llmod@divisor+1,w
  4910  0600  0226               	subwf	___llmod@dividend+1,w
  4911  0601  1D03               	skipz
  4912  0602  2E05               	goto	u905
  4913  0603  0821               	movf	___llmod@divisor,w
  4914  0604  0225               	subwf	___llmod@dividend,w
  4915  0605                     u905:	
  4916  0605  1C03               	skipc
  4917  0606  2E0F               	goto	l2009
  4918  0607  0821               	movf	___llmod@divisor,w
  4919  0608  02A5               	subwf	___llmod@dividend,f
  4920  0609  0822               	movf	___llmod@divisor+1,w
  4921  060A  3BA6               	subwfb	___llmod@dividend+1,f
  4922  060B  0823               	movf	___llmod@divisor+2,w
  4923  060C  3BA7               	subwfb	___llmod@dividend+2,f
  4924  060D  0824               	movf	___llmod@divisor+3,w
  4925  060E  3BA8               	subwfb	___llmod@dividend+3,f
  4926  060F                     l2009:	
  4927  060F  3001               	movlw	1
  4928  0610                     u915:	
  4929  0610  36A4               	lsrf	___llmod@divisor+3,f
  4930  0611  0CA3               	rrf	___llmod@divisor+2,f
  4931  0612  0CA2               	rrf	___llmod@divisor+1,f
  4932  0613  0CA1               	rrf	___llmod@divisor,f
  4933  0614  0B89               	decfsz	9,f
  4934  0615  2E10               	goto	u915
  4935  0616  3001               	movlw	1
  4936  0617  02AA               	subwf	___llmod@counter,f
  4937  0618  1D03               	btfss	3,2
  4938  0619  2DF7               	goto	l2005
  4939  061A                     l2013:	
  4940  061A  0828               	movf	___llmod@dividend+3,w
  4941  061B  00A4               	movwf	?___llmod+3
  4942  061C  0827               	movf	___llmod@dividend+2,w
  4943  061D  00A3               	movwf	?___llmod+2
  4944  061E  0826               	movf	___llmod@dividend+1,w
  4945  061F  00A2               	movwf	?___llmod+1
  4946  0620  0825               	movf	___llmod@dividend,w
  4947  0621  00A1               	movwf	?___llmod
  4948  0622  0008               	return
  4949  0623                     __end_of___llmod:	
  4950                           
  4951                           	psect	text11
  4952  0FDA                     __ptext11:	
  4953 ;; *************** function _strcat *****************
  4954 ;; Defined at:
  4955 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;  to              1    wreg     PTR unsigned char 
  4958 ;;		 -> main@packet(33), loop@packet(33), 
  4959 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  4960 ;;		 -> STR_10(5), STR_8(6), STR_7(5), STR_6(4), 
  4961 ;;		 -> STR_5(5), STR_4(5), STR_3(4), STR_2(2), 
  4962 ;;		 -> setMessage@tempString(16), STR_1(2), romData.name(16), romData(19), 
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;  to              1    5[BANK0 ] PTR unsigned char 
  4965 ;;		 -> main@packet(33), loop@packet(33), 
  4966 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  4967 ;;		 -> main@packet(33), loop@packet(33), 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  1    wreg      PTR unsigned char 
  4970 ;; Registers used:
  4971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4977 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4980 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4981 ;;Total ram usage:        5 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    7
  4984 ;; This function calls:
  4985 ;;		Nothing
  4986 ;; This function is called by:
  4987 ;;		_setMessage
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           
  4992                           ;psect for function _strcat
  4993  0FDA                     _strcat:	
  4994                           
  4995                           ;incstack = 0
  4996                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  4997                           ;strcat@to stored from wreg
  4998  0FDA  0020               	movlb	0	; select bank0
  4999  0FDB  00A5               	movwf	strcat@to
  5000  0FDC  0825               	movf	strcat@to,w
  5001  0FDD  00A3               	movwf	??_strcat
  5002  0FDE  0823               	movf	??_strcat,w
  5003  0FDF  00A4               	movwf	strcat@cp
  5004  0FE0                     l2121:	
  5005  0FE0  0824               	movf	strcat@cp,w
  5006  0FE1  0086               	movwf	6
  5007  0FE2  0187               	clrf	7
  5008  0FE3  0801               	movf	1,w
  5009  0FE4  1903               	btfsc	3,2
  5010  0FE5  2FF3               	goto	l2127
  5011  0FE6  3001               	movlw	1
  5012  0FE7  00A3               	movwf	??_strcat
  5013  0FE8  0823               	movf	??_strcat,w
  5014  0FE9  07A4               	addwf	strcat@cp,f
  5015  0FEA  2FE0               	goto	l2121
  5016  0FEB                     l2123:	
  5017  0FEB  3001               	movlw	1
  5018  0FEC  00A3               	movwf	??_strcat
  5019  0FED  0823               	movf	??_strcat,w
  5020  0FEE  07A4               	addwf	strcat@cp,f
  5021  0FEF  3001               	movlw	1
  5022  0FF0  07A1               	addwf	strcat@from,f
  5023  0FF1  3000               	movlw	0
  5024  0FF2  3DA2               	addwfc	strcat@from+1,f
  5025  0FF3                     l2127:	
  5026  0FF3  0824               	movf	strcat@cp,w
  5027  0FF4  0086               	movwf	6
  5028  0FF5  0187               	clrf	7
  5029  0FF6  0821               	movf	strcat@from,w
  5030  0FF7  0084               	movwf	4
  5031  0FF8  0822               	movf	strcat@from+1,w
  5032  0FF9  0085               	movwf	5
  5033  0FFA  0800               	movf	0,w	;code access
  5034  0FFB  3FC0               	movwi [0]fsr1
  5035  0FFC  0889               	movf	9,f
  5036  0FFD  1903               	btfsc	3,2
  5037  0FFE  0008               	return
  5038  0FFF  2FEB               	goto	l2123
  5039  1000                     __end_of_strcat:	
  5040                           ;	Return value of _strcat is never used
  5041                           
  5042                           
  5043                           	psect	text12
  5044  0E65                     __ptext12:	
  5045 ;; *************** function _memset *****************
  5046 ;; Defined at:
  5047 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;  p1              2    1[BANK0 ] PTR void 
  5050 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5051 ;;  c               2    3[BANK0 ] int 
  5052 ;;  n               2    5[BANK0 ] unsigned int 
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;  p               2    7[BANK0 ] PTR unsigned char 
  5055 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  2    1[BANK0 ] PTR void 
  5058 ;; Registers used:
  5059 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5060 ;; Tracked objects:
  5061 ;;		On entry : 0/0
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5065 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5069 ;;Total ram usage:        8 bytes
  5070 ;; Hardware stack levels used:    1
  5071 ;; Hardware stack levels required when called:    7
  5072 ;; This function calls:
  5073 ;;		Nothing
  5074 ;; This function is called by:
  5075 ;;		_setMessage
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           
  5080                           ;psect for function _memset
  5081  0E65                     _memset:	
  5082                           
  5083                           ;incstack = 0
  5084                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5085  0E65  0020               	movlb	0	; select bank0
  5086  0E66  0822               	movf	memset@p1+1,w
  5087  0E67  00A8               	movwf	memset@p+1
  5088  0E68  0821               	movf	memset@p1,w
  5089  0E69  00A7               	movwf	memset@p
  5090  0E6A                     l2937:	
  5091  0E6A  3001               	movlw	1
  5092  0E6B  02A5               	subwf	memset@n,f
  5093  0E6C  3000               	movlw	0
  5094  0E6D  3BA6               	subwfb	memset@n+1,f
  5095  0E6E  0A25               	incf	memset@n,w
  5096  0E6F  1903               	btfsc	3,2
  5097  0E70  0A26               	incf	memset@n+1,w
  5098  0E71  1903               	btfsc	3,2
  5099  0E72  0008               	return
  5100  0E73  0827               	movf	memset@p,w
  5101  0E74  0086               	movwf	6
  5102  0E75  0828               	movf	memset@p+1,w
  5103  0E76  0087               	movwf	7
  5104  0E77  0823               	movf	memset@c,w
  5105  0E78  0081               	movwf	1
  5106  0E79  3001               	movlw	1
  5107  0E7A  07A7               	addwf	memset@p,f
  5108  0E7B  3000               	movlw	0
  5109  0E7C  3DA8               	addwfc	memset@p+1,f
  5110  0E7D  2E6A               	goto	l2937
  5111  0E7E                     __end_of_memset:	
  5112                           ;	Return value of _memset is never used
  5113                           
  5114                           
  5115                           	psect	text13
  5116  0293                     __ptext13:	
  5117 ;; *************** function _nrf24l01SendPacket *****************
  5118 ;; Defined at:
  5119 ;;		line 170 in file "nrf24l01.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;  Packet          1    wreg     PTR struct .
  5122 ;;		 -> main@packet(33), loop@packet(33), 
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;  Packet          1   11[BANK0 ] PTR struct .
  5125 ;;		 -> main@packet(33), loop@packet(33), 
  5126 ;;  i               1   12[BANK0 ] unsigned char 
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  1    wreg      void 
  5129 ;; Registers used:
  5130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5137 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5138 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5139 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5140 ;;Total ram usage:        4 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; Hardware stack levels required when called:   11
  5143 ;; This function calls:
  5144 ;;		_enableInterrupts
  5145 ;;		_nrf24l01CEHigh
  5146 ;;		_nrf24l01CELow
  5147 ;;		_nrf24l01ChangeTXPower
  5148 ;;		_nrf24l01SPIEnd
  5149 ;;		_nrf24l01SPISend
  5150 ;;		_nrf24l01SPIStart
  5151 ;;		_nrf24l01SetRXMode
  5152 ;;		_strlen
  5153 ;; This function is called by:
  5154 ;;		_loop
  5155 ;;		_main
  5156 ;;		_nrf24l01SendACK
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           
  5161                           ;psect for function _nrf24l01SendPacket
  5162  0293                     _nrf24l01SendPacket:	
  5163                           
  5164                           ;incstack = 0
  5165                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5166                           ;nrf24l01SendPacket@Packet stored from wreg
  5167  0293  0020               	movlb	0	; select bank0
  5168  0294  00AB               	movwf	nrf24l01SendPacket@Packet
  5169                           
  5170                           ;nrf24l01.c: 172: TXPacket = Packet;
  5171  0295  082B               	movf	nrf24l01SendPacket@Packet,w
  5172  0296  00A9               	movwf	??_nrf24l01SendPacket
  5173  0297  0829               	movf	??_nrf24l01SendPacket,w
  5174  0298  00D9               	movwf	_TXPacket
  5175  0299                     l324:	
  5176                           ;nrf24l01.c: 175: unsigned char i;;nrf24l01.c: 179: RESEND:
  5177                           
  5178                           
  5179                           ;nrf24l01.c: 182: i = 0xFF;
  5180  0299  30FF               	movlw	255
  5181  029A  0020               	movlb	0	; select bank0
  5182  029B  00A9               	movwf	??_nrf24l01SendPacket
  5183  029C  0829               	movf	??_nrf24l01SendPacket,w
  5184  029D  00AC               	movwf	nrf24l01SendPacket@i
  5185  029E                     l2435:	
  5186                           ;nrf24l01.c: 183: while (nrf24l01.TXBusy){
  5187                           
  5188  029E  0020               	movlb	0	; select bank0
  5189  029F  1C5B               	btfss	_nrf24l01,0	;volatile
  5190  02A0  2AAA               	goto	l328
  5191                           
  5192                           ;nrf24l01.c: 184: if (!--i) {
  5193  02A1  3001               	movlw	1
  5194  02A2  02AC               	subwf	nrf24l01SendPacket@i,f
  5195  02A3  1903               	btfsc	3,2
  5196  02A4  2A99               	goto	l324
  5197                           
  5198                           ;nrf24l01.c: 186: };nrf24l01.c: 187: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5199                           
  5200                           ;nrf24l01.c: 185: goto RESEND;
  5201  02A5  3085               	movlw	133
  5202  02A6                     u1727:	
  5203  02A6  0B89               	decfsz	9,f
  5204  02A7  2AA6               	goto	u1727
  5205  02A8  0000               	nop
  5206  02A9  2A9E               	goto	l2435
  5207  02AA                     l328:	
  5208                           
  5209                           ;nrf24l01.c: 188: };nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  5210  02AA  145B               	bsf	_nrf24l01,0	;volatile
  5211                           
  5212                           ;nrf24l01.c: 194: enableInterrupts(0);
  5213  02AB  3000               	movlw	0
  5214  02AC  318D  25E0  3182   	fcall	_enableInterrupts
  5215                           
  5216                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  5217  02AF  3000               	movlw	0
  5218  02B0  3186  269E  3182   	fcall	_nrf24l01SetRXMode
  5219                           
  5220                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  5221  02B3  318D  25E8  3182   	fcall	_nrf24l01SPIStart
  5222                           
  5223                           ;nrf24l01.c: 203: nrf24l01SPISend((unsigned) 0b10110000);
  5224  02B6  30B0               	movlw	176
  5225  02B7  318D  25F0  3182   	fcall	_nrf24l01SPISend
  5226                           
  5227                           ;nrf24l01.c: 205: nrf24l01SPISend(TXPacket->packetData.byte);
  5228  02BA  0020               	movlb	0	; select bank0
  5229  02BB  0859               	movf	_TXPacket,w
  5230  02BC  0086               	movwf	6
  5231  02BD  0187               	clrf	7
  5232  02BE  0801               	movf	1,w
  5233  02BF  318D  25F0  3182   	fcall	_nrf24l01SPISend
  5234                           
  5235                           ;nrf24l01.c: 208: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  5236  02C2  0020               	movlb	0	; select bank0
  5237  02C3  01AC               	clrf	nrf24l01SendPacket@i
  5238  02C4  2AD5               	goto	l2447
  5239  02C5                     l2443:	
  5240                           
  5241                           ;nrf24l01.c: 209: nrf24l01SPISend(TXPacket->Message[i]);
  5242  02C5  082C               	movf	nrf24l01SendPacket@i,w
  5243  02C6  3E01               	addlw	1
  5244  02C7  0759               	addwf	_TXPacket,w
  5245  02C8  00A9               	movwf	??_nrf24l01SendPacket
  5246  02C9  0829               	movf	??_nrf24l01SendPacket,w
  5247  02CA  0086               	movwf	6
  5248  02CB  0187               	clrf	7
  5249  02CC  0801               	movf	1,w
  5250  02CD  318D  25F0  3182   	fcall	_nrf24l01SPISend
  5251  02D0  3001               	movlw	1
  5252  02D1  0020               	movlb	0	; select bank0
  5253  02D2  00A9               	movwf	??_nrf24l01SendPacket
  5254  02D3  0829               	movf	??_nrf24l01SendPacket,w
  5255  02D4  07AC               	addwf	nrf24l01SendPacket@i,f
  5256  02D5                     l2447:	
  5257  02D5  0859               	movf	_TXPacket,w
  5258  02D6  3E01               	addlw	1
  5259  02D7  318F  278F  3182   	fcall	_strlen
  5260  02DA  0020               	movlb	0	; select bank0
  5261  02DB  082C               	movf	nrf24l01SendPacket@i,w
  5262  02DC  00A9               	movwf	??_nrf24l01SendPacket
  5263  02DD  01AA               	clrf	??_nrf24l01SendPacket+1
  5264  02DE  0822               	movf	?_strlen+1,w
  5265  02DF  022A               	subwf	??_nrf24l01SendPacket+1,w
  5266  02E0  1D03               	skipz
  5267  02E1  2AE4               	goto	u1305
  5268  02E2  0821               	movf	?_strlen,w
  5269  02E3  0229               	subwf	??_nrf24l01SendPacket,w
  5270  02E4                     u1305:	
  5271  02E4  1803               	skipnc
  5272  02E5  2AEA               	goto	l2451
  5273  02E6  3020               	movlw	32
  5274  02E7  022C               	subwf	nrf24l01SendPacket@i,w
  5275  02E8  1C03               	skipc
  5276  02E9  2AC5               	goto	l2443
  5277  02EA                     l2451:	
  5278                           
  5279                           ;nrf24l01.c: 210: };nrf24l01.c: 213: nrf24l01SPIEnd();
  5280  02EA  318D  25D9  3182   	fcall	_nrf24l01SPIEnd
  5281                           
  5282                           ;nrf24l01.c: 216: nrf24l01CEHigh();
  5283  02ED  318D  25C7  3182   	fcall	_nrf24l01CEHigh
  5284                           
  5285                           ;nrf24l01.c: 217: _delay((unsigned long)((20)*(16000000/4000000.0)));
  5286  02F0  301A               	movlw	26
  5287  02F1                     u1737:	
  5288  02F1  0B89               	decfsz	9,f
  5289  02F2  2AF1               	goto	u1737
  5290  02F3  3200               	nop2
  5291                           
  5292                           ;nrf24l01.c: 218: nrf24l01CELow();
  5293  02F4  318D  25CA  3182   	fcall	_nrf24l01CELow
  5294                           
  5295                           ;nrf24l01.c: 221: enableInterrupts(1);
  5296  02F7  3001               	movlw	1
  5297  02F8  318D  25E0  3182   	fcall	_enableInterrupts
  5298                           
  5299                           ;nrf24l01.c: 224: i = 0xFF;
  5300  02FB  30FF               	movlw	255
  5301  02FC  0020               	movlb	0	; select bank0
  5302  02FD  00A9               	movwf	??_nrf24l01SendPacket
  5303  02FE  0829               	movf	??_nrf24l01SendPacket,w
  5304  02FF  00AC               	movwf	nrf24l01SendPacket@i
  5305  0300                     l2465:	
  5306                           ;nrf24l01.c: 225: while (nrf24l01.TXBusy){
  5307                           
  5308  0300  0020               	movlb	0	; select bank0
  5309  0301  1C5B               	btfss	_nrf24l01,0	;volatile
  5310  0302  2B14               	goto	l2467
  5311                           
  5312                           ;nrf24l01.c: 226: if (!--i) {
  5313  0303  3001               	movlw	1
  5314  0304  02AC               	subwf	nrf24l01SendPacket@i,f
  5315  0305  1D03               	btfss	3,2
  5316  0306  2B0F               	goto	l2463
  5317                           
  5318                           ;nrf24l01.c: 227: nrf24l01ChangeTXPower(1);
  5319  0307  3001               	movlw	1
  5320  0308  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  5321  0309  3000               	movlw	0
  5322  030A  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  5323  030B  3186  2623  3182   	fcall	_nrf24l01ChangeTXPower
  5324                           
  5325                           ;nrf24l01.c: 228: goto RESEND;
  5326  030E  2A99               	goto	l324
  5327  030F                     l2463:	
  5328                           
  5329                           ;nrf24l01.c: 229: };nrf24l01.c: 230: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5330  030F  3085               	movlw	133
  5331  0310                     u1747:	
  5332  0310  0B89               	decfsz	9,f
  5333  0311  2B10               	goto	u1747
  5334  0312  0000               	nop
  5335  0313  2B00               	goto	l2465
  5336  0314                     l2467:	
  5337                           
  5338                           ;nrf24l01.c: 231: };nrf24l01.c: 235: i = 0xFF;
  5339  0314  30FF               	movlw	255
  5340  0315  00A9               	movwf	??_nrf24l01SendPacket
  5341  0316  0829               	movf	??_nrf24l01SendPacket,w
  5342  0317  00AC               	movwf	nrf24l01SendPacket@i
  5343  0318                     l2475:	
  5344                           ;nrf24l01.c: 236: while (TXPacket->packetData.ACKRequest){
  5345                           
  5346  0318  0020               	movlb	0	; select bank0
  5347  0319  0859               	movf	_TXPacket,w
  5348  031A  0086               	movwf	6
  5349  031B  0187               	clrf	7
  5350  031C  1D01               	btfss	1,2
  5351  031D  0008               	return
  5352                           
  5353                           ;nrf24l01.c: 237: if (!--i) {
  5354  031E  3001               	movlw	1
  5355  031F  02AC               	subwf	nrf24l01SendPacket@i,f
  5356  0320  1D03               	btfss	3,2
  5357  0321  2B3D               	goto	l2473
  5358                           
  5359                           ;nrf24l01.c: 238: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  5360  0322  3002               	movlw	2
  5361  0323  0020               	movlb	0	; select bank0
  5362  0324  00AA               	movwf	??_nrf24l01SendPacket+1
  5363  0325  3004               	movlw	4
  5364  0326  00A9               	movwf	??_nrf24l01SendPacket
  5365  0327  30BA               	movlw	186
  5366  0328                     u1757:	
  5367  0328  0B89               	decfsz	9,f
  5368  0329  2B28               	goto	u1757
  5369  032A  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5370  032B  2B28               	goto	u1757
  5371  032C  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5372  032D  2B28               	goto	u1757
  5373  032E  0000               	nop
  5374                           
  5375                           ;nrf24l01.c: 239: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  5376  032F  3002               	movlw	2
  5377  0330  0020               	movlb	0	; select bank0
  5378  0331  00AA               	movwf	??_nrf24l01SendPacket+1
  5379  0332  3004               	movlw	4
  5380  0333  00A9               	movwf	??_nrf24l01SendPacket
  5381  0334  30BA               	movlw	186
  5382  0335                     u1767:	
  5383  0335  0B89               	decfsz	9,f
  5384  0336  2B35               	goto	u1767
  5385  0337  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5386  0338  2B35               	goto	u1767
  5387  0339  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  5388  033A  2B35               	goto	u1767
  5389  033B  0000               	nop
  5390                           
  5391                           ;nrf24l01.c: 240: goto RESEND;
  5392  033C  2A99               	goto	l324
  5393  033D                     l2473:	
  5394                           
  5395                           ;nrf24l01.c: 241: };nrf24l01.c: 242: _delay((unsigned long)((1000)*(16000000/4000000.0))
      +                          );
  5396  033D  3006               	movlw	6
  5397  033E  0020               	movlb	0	; select bank0
  5398  033F  00A9               	movwf	??_nrf24l01SendPacket
  5399  0340  3030               	movlw	48
  5400  0341                     u1777:	
  5401  0341  0B89               	decfsz	9,f
  5402  0342  2B41               	goto	u1777
  5403  0343  0BA9               	decfsz	??_nrf24l01SendPacket,f
  5404  0344  2B41               	goto	u1777
  5405  0345  0000               	nop
  5406  0346  2B18               	goto	l2475
  5407  0347                     __end_of_nrf24l01SendPacket:	
  5408                           
  5409                           	psect	text14
  5410  0F8F                     __ptext14:	
  5411 ;; *************** function _strlen *****************
  5412 ;; Defined at:
  5413 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;  s               1    wreg     PTR const unsigned char 
  5416 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5417 ;;		 -> loop@packet(33), 
  5418 ;; Auto vars:     Size  Location     Type
  5419 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  5420 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5421 ;;		 -> loop@packet(33), 
  5422 ;;  cp              1    8[BANK0 ] PTR const unsigned char 
  5423 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5424 ;;		 -> loop@packet(33), 
  5425 ;; Return value:  Size  Location     Type
  5426 ;;                  2    1[BANK0 ] unsigned int 
  5427 ;; Registers used:
  5428 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5429 ;; Tracked objects:
  5430 ;;		On entry : 0/0
  5431 ;;		On exit  : 0/0
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5434 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5435 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5436 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;Total ram usage:        8 bytes
  5439 ;; Hardware stack levels used:    1
  5440 ;; Hardware stack levels required when called:    7
  5441 ;; This function calls:
  5442 ;;		Nothing
  5443 ;; This function is called by:
  5444 ;;		_nrf24l01SendPacket
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           
  5449                           ;psect for function _strlen
  5450  0F8F                     _strlen:	
  5451                           
  5452                           ;incstack = 0
  5453                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5454                           ;strlen@s stored from wreg
  5455  0F8F  0020               	movlb	0	; select bank0
  5456  0F90  00A7               	movwf	strlen@s
  5457  0F91  0827               	movf	strlen@s,w
  5458  0F92  00A3               	movwf	??_strlen
  5459  0F93  0823               	movf	??_strlen,w
  5460  0F94  00A8               	movwf	strlen@cp
  5461  0F95                     l2193:	
  5462  0F95  0828               	movf	strlen@cp,w
  5463  0F96  0086               	movwf	6
  5464  0F97  0187               	clrf	7
  5465  0F98  0801               	movf	1,w
  5466  0F99  1903               	btfsc	3,2
  5467  0F9A  2FA0               	goto	l2195
  5468  0F9B  3001               	movlw	1
  5469  0F9C  00A3               	movwf	??_strlen
  5470  0F9D  0823               	movf	??_strlen,w
  5471  0F9E  07A8               	addwf	strlen@cp,f
  5472  0F9F  2F95               	goto	l2193
  5473  0FA0                     l2195:	
  5474  0FA0  0827               	movf	strlen@s,w
  5475  0FA1  00A3               	movwf	??_strlen
  5476  0FA2  3000               	movlw	0
  5477  0FA3  00A4               	movwf	??_strlen+1
  5478  0FA4  09A3               	comf	??_strlen,f
  5479  0FA5  09A4               	comf	??_strlen+1,f
  5480  0FA6  0AA3               	incf	??_strlen,f
  5481  0FA7  1903               	skipnz
  5482  0FA8  0AA4               	incf	??_strlen+1,f
  5483  0FA9  0828               	movf	strlen@cp,w
  5484  0FAA  00A5               	movwf	??_strlen+2
  5485  0FAB  3000               	movlw	0
  5486  0FAC  00A6               	movwf	??_strlen+3
  5487  0FAD  0823               	movf	??_strlen,w
  5488  0FAE  0725               	addwf	??_strlen+2,w
  5489  0FAF  00A1               	movwf	?_strlen
  5490  0FB0  0824               	movf	??_strlen+1,w
  5491  0FB1  3D26               	addwfc	??_strlen+3,w
  5492  0FB2  00A2               	movwf	?_strlen+1
  5493  0FB3  0008               	return
  5494  0FB4                     __end_of_strlen:	
  5495                           
  5496                           	psect	text15
  5497  069E                     __ptext15:	
  5498 ;; *************** function _nrf24l01SetRXMode *****************
  5499 ;; Defined at:
  5500 ;;		line 54 in file "nrf24l01.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;  rxMode          1    wreg     unsigned char 
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;  rxMode          1    6[BANK0 ] unsigned char 
  5505 ;;  config          1    5[BANK0 ] struct .
  5506 ;; Return value:  Size  Location     Type
  5507 ;;                  1    wreg      void 
  5508 ;; Registers used:
  5509 ;;		wreg, status,2, status,0, pclath, cstack
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5518 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;Total ram usage:        3 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; Hardware stack levels required when called:   10
  5522 ;; This function calls:
  5523 ;;		_nrf24l01CEHigh
  5524 ;;		_nrf24l01CELow
  5525 ;;		_nrf24l01Send
  5526 ;; This function is called by:
  5527 ;;		_nrf24l01SendPacket
  5528 ;;		_checkRxData
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           
  5533                           ;psect for function _nrf24l01SetRXMode
  5534  069E                     _nrf24l01SetRXMode:	
  5535                           
  5536                           ;incstack = 0
  5537                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5538                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5539  069E  0020               	movlb	0	; select bank0
  5540  069F  00A6               	movwf	nrf24l01SetRXMode@rxMode
  5541                           
  5542                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  5543  06A0  01A1               	clrf	nrf24l01Send@data
  5544  06A1  3000               	movlw	0
  5545  06A2  318F  272B  3186   	fcall	_nrf24l01Send
  5546  06A5  0020               	movlb	0	; select bank0
  5547  06A6  00A4               	movwf	??_nrf24l01SetRXMode
  5548  06A7  0824               	movf	??_nrf24l01SetRXMode,w
  5549  06A8  00A5               	movwf	nrf24l01SetRXMode@config
  5550                           
  5551                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  5552  06A9  0825               	movf	nrf24l01SetRXMode@config,w
  5553  06AA  3901               	andlw	1
  5554  06AB  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  5555  06AC  1903               	skipnz
  5556  06AD  2ED2               	goto	l2107
  5557                           
  5558                           ;nrf24l01.c: 65: nrf24l01CELow();
  5559  06AE  318D  25CA  3186   	fcall	_nrf24l01CELow
  5560                           
  5561                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5562  06B1  30A0               	movlw	160
  5563  06B2                     u1787:	
  5564  06B2  3200               	nop2
  5565  06B3  0B89               	decfsz	9,f
  5566  06B4  2EB2               	goto	u1787
  5567                           
  5568                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  5569  06B5  0020               	movlb	0	; select bank0
  5570  06B6  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5571  06B7  3901               	andlw	1
  5572  06B8  1025               	bcf	nrf24l01SetRXMode@config,0
  5573  06B9  1D03               	skipz
  5574  06BA  1425               	bsf	nrf24l01SetRXMode@config,0
  5575                           
  5576                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  5577  06BB  0825               	movf	nrf24l01SetRXMode@config,w
  5578  06BC  00A4               	movwf	??_nrf24l01SetRXMode
  5579  06BD  0824               	movf	??_nrf24l01SetRXMode,w
  5580  06BE  00A1               	movwf	nrf24l01Send@data
  5581  06BF  3020               	movlw	32
  5582  06C0  318F  272B  3186   	fcall	_nrf24l01Send
  5583                           
  5584                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5585  06C3  30A0               	movlw	160
  5586  06C4                     u1797:	
  5587  06C4  3200               	nop2
  5588  06C5  0B89               	decfsz	9,f
  5589  06C6  2EC4               	goto	u1797
  5590                           
  5591                           ;nrf24l01.c: 76: if (rxMode){
  5592  06C7  0020               	movlb	0	; select bank0
  5593  06C8  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5594  06C9  1903               	btfsc	3,2
  5595  06CA  2ED2               	goto	l2107
  5596                           
  5597                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  5598  06CB  318D  25C7  3186   	fcall	_nrf24l01CEHigh
  5599                           
  5600                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5601  06CE  30A0               	movlw	160
  5602  06CF                     u1807:	
  5603  06CF  3200               	nop2
  5604  06D0  0B89               	decfsz	9,f
  5605  06D1  2ECF               	goto	u1807
  5606  06D2                     l2107:	
  5607                           
  5608                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  5609  06D2  0020               	movlb	0	; select bank0
  5610  06D3  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5611  06D4  3901               	andlw	1
  5612  06D5  115B               	bcf	_nrf24l01,2	;volatile
  5613  06D6  1D03               	skipz
  5614  06D7  155B               	bsf	_nrf24l01,2	;volatile
  5615  06D8  0008               	return
  5616  06D9                     __end_of_nrf24l01SetRXMode:	
  5617                           
  5618                           	psect	text16
  5619  0458                     __ptext16:	
  5620 ;; *************** function _getADCValue *****************
  5621 ;; Defined at:
  5622 ;;		line 23 in file "main.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;  channel         1    wreg     unsigned char 
  5625 ;;  divider         4   15[BANK0 ] unsigned long 
  5626 ;; Auto vars:     Size  Location     Type
  5627 ;;  channel         1   23[BANK0 ] unsigned char 
  5628 ;;  adcSum          4   25[BANK0 ] unsigned long 
  5629 ;;  adcLoop         1   24[BANK0 ] unsigned char 
  5630 ;; Return value:  Size  Location     Type
  5631 ;;                  4   15[BANK0 ] unsigned long 
  5632 ;; Registers used:
  5633 ;;		wreg, status,2, status,0, pclath, cstack
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5639 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5640 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5641 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5642 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5643 ;;Total ram usage:       14 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; Hardware stack levels required when called:    8
  5646 ;; This function calls:
  5647 ;;		___lldiv
  5648 ;;		___lmul
  5649 ;; This function is called by:
  5650 ;;		_loop
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           
  5655                           ;psect for function _getADCValue
  5656  0458                     _getADCValue:	
  5657                           
  5658                           ;incstack = 0
  5659                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  5660                           ;getADCValue@channel stored from wreg
  5661  0458  0020               	movlb	0	; select bank0
  5662  0459  00B7               	movwf	getADCValue@channel
  5663                           
  5664                           ;main.c: 25: unsigned long adcSum = 0;
  5665  045A  3000               	movlw	0
  5666  045B  00BC               	movwf	getADCValue@adcSum+3
  5667  045C  3000               	movlw	0
  5668  045D  00BB               	movwf	getADCValue@adcSum+2
  5669  045E  3000               	movlw	0
  5670  045F  00BA               	movwf	getADCValue@adcSum+1
  5671  0460  3000               	movlw	0
  5672  0461  00B9               	movwf	getADCValue@adcSum
  5673                           
  5674                           ;main.c: 26: unsigned char adcLoop = 255;
  5675  0462  30FF               	movlw	255
  5676  0463  00B3               	movwf	??_getADCValue
  5677  0464  0833               	movf	??_getADCValue,w
  5678  0465  00B8               	movwf	getADCValue@adcLoop
  5679                           
  5680                           ;main.c: 28: ADCON0bits.CHS = channel;
  5681  0466  0837               	movf	getADCValue@channel,w
  5682  0467  00B3               	movwf	??_getADCValue
  5683  0468  0DB3               	rlf	??_getADCValue,f
  5684  0469  0DB3               	rlf	??_getADCValue,f
  5685  046A  0021               	movlb	1	; select bank1
  5686  046B  081D               	movf	29,w	;volatile
  5687  046C  0020               	movlb	0	; select bank0
  5688  046D  0633               	xorwf	??_getADCValue,w
  5689  046E  3903               	andlw	-253
  5690  046F  0633               	xorwf	??_getADCValue,w
  5691  0470  0021               	movlb	1	; select bank1
  5692  0471  009D               	movwf	29	;volatile
  5693                           
  5694                           ;main.c: 29: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5695  0472  30A0               	movlw	160
  5696  0473                     u1817:	
  5697  0473  3200               	nop2
  5698  0474  0B89               	decfsz	9,f
  5699  0475  2C73               	goto	u1817
  5700  0476                     l2391:	
  5701                           ;main.c: 31: while (--adcLoop){
  5702                           
  5703  0476  3001               	movlw	1
  5704  0477  0020               	movlb	0	; select bank0
  5705  0478  02B8               	subwf	getADCValue@adcLoop,f
  5706  0479  1903               	btfsc	3,2
  5707  047A  2CA0               	goto	l2393
  5708                           
  5709                           ;main.c: 33: ADCON0bits.ADGO = 1;
  5710  047B  0021               	movlb	1	; select bank1
  5711  047C  149D               	bsf	29,1	;volatile
  5712  047D                     l214:	
  5713                           ;main.c: 35: while (ADCON0bits.ADGO){
  5714                           
  5715  047D  0021               	movlb	1	; select bank1
  5716  047E  1C9D               	btfss	29,1	;volatile
  5717  047F  2C82               	goto	l2389
  5718                           
  5719                           ;main.c: 36: __nop();
  5720  0480  0000               	nop
  5721  0481  2C7D               	goto	l214
  5722  0482                     l2389:	
  5723                           
  5724                           ;main.c: 37: };main.c: 39: adcSum+= ADRESL;
  5725  0482  081B               	movf	27,w	;volatile
  5726  0483  0020               	movlb	0	; select bank0
  5727  0484  00B3               	movwf	??_getADCValue
  5728  0485  01B4               	clrf	??_getADCValue+1
  5729  0486  01B5               	clrf	??_getADCValue+2
  5730  0487  01B6               	clrf	??_getADCValue+3
  5731  0488  0833               	movf	??_getADCValue,w
  5732  0489  07B9               	addwf	getADCValue@adcSum,f
  5733  048A  0834               	movf	??_getADCValue+1,w
  5734  048B  3DBA               	addwfc	getADCValue@adcSum+1,f
  5735  048C  0835               	movf	??_getADCValue+2,w
  5736  048D  3DBB               	addwfc	getADCValue@adcSum+2,f
  5737  048E  0836               	movf	??_getADCValue+3,w
  5738  048F  3DBC               	addwfc	getADCValue@adcSum+3,f
  5739                           
  5740                           ;main.c: 40: adcSum+= (unsigned) (ADRESH << 8);
  5741  0490  0021               	movlb	1	; select bank1
  5742  0491  081C               	movf	28,w	;volatile
  5743  0492  0020               	movlb	0	; select bank0
  5744  0493  00B3               	movwf	??_getADCValue
  5745  0494  01B4               	clrf	??_getADCValue+1
  5746  0495  0833               	movf	??_getADCValue,w
  5747  0496  00B4               	movwf	??_getADCValue+1
  5748  0497  01B3               	clrf	??_getADCValue
  5749  0498  0833               	movf	??_getADCValue,w
  5750  0499  07B9               	addwf	getADCValue@adcSum,f
  5751  049A  0834               	movf	??_getADCValue+1,w
  5752  049B  3DBA               	addwfc	getADCValue@adcSum+1,f
  5753  049C  3000               	movlw	0
  5754  049D  3DBB               	addwfc	getADCValue@adcSum+2,f
  5755  049E  3DBC               	addwfc	getADCValue@adcSum+3,f
  5756  049F  2C76               	goto	l2391
  5757  04A0                     l2393:	
  5758                           
  5759                           ;main.c: 41: };main.c: 43: adcSum*= 100;
  5760  04A0  3000               	movlw	0
  5761  04A1  00A4               	movwf	___lmul@multiplier+3
  5762  04A2  3000               	movlw	0
  5763  04A3  00A3               	movwf	___lmul@multiplier+2
  5764  04A4  3000               	movlw	0
  5765  04A5  00A2               	movwf	___lmul@multiplier+1
  5766  04A6  3064               	movlw	100
  5767  04A7  00A1               	movwf	___lmul@multiplier
  5768  04A8  083C               	movf	getADCValue@adcSum+3,w
  5769  04A9  00A8               	movwf	___lmul@multiplicand+3
  5770  04AA  083B               	movf	getADCValue@adcSum+2,w
  5771  04AB  00A7               	movwf	___lmul@multiplicand+2
  5772  04AC  083A               	movf	getADCValue@adcSum+1,w
  5773  04AD  00A6               	movwf	___lmul@multiplicand+1
  5774  04AE  0839               	movf	getADCValue@adcSum,w
  5775  04AF  00A5               	movwf	___lmul@multiplicand
  5776  04B0  3187  2778  3184   	fcall	___lmul
  5777  04B3  0020               	movlb	0	; select bank0
  5778  04B4  0824               	movf	?___lmul+3,w
  5779  04B5  00BC               	movwf	getADCValue@adcSum+3
  5780  04B6  0823               	movf	?___lmul+2,w
  5781  04B7  00BB               	movwf	getADCValue@adcSum+2
  5782  04B8  0822               	movf	?___lmul+1,w
  5783  04B9  00BA               	movwf	getADCValue@adcSum+1
  5784  04BA  0821               	movf	?___lmul,w
  5785  04BB  00B9               	movwf	getADCValue@adcSum
  5786                           
  5787                           ;main.c: 44: adcSum/= divider;
  5788  04BC  0832               	movf	getADCValue@divider+3,w
  5789  04BD  00A4               	movwf	___lldiv@divisor+3
  5790  04BE  0831               	movf	getADCValue@divider+2,w
  5791  04BF  00A3               	movwf	___lldiv@divisor+2
  5792  04C0  0830               	movf	getADCValue@divider+1,w
  5793  04C1  00A2               	movwf	___lldiv@divisor+1
  5794  04C2  082F               	movf	getADCValue@divider,w
  5795  04C3  00A1               	movwf	___lldiv@divisor
  5796  04C4  083C               	movf	getADCValue@adcSum+3,w
  5797  04C5  00A8               	movwf	___lldiv@dividend+3
  5798  04C6  083B               	movf	getADCValue@adcSum+2,w
  5799  04C7  00A7               	movwf	___lldiv@dividend+2
  5800  04C8  083A               	movf	getADCValue@adcSum+1,w
  5801  04C9  00A6               	movwf	___lldiv@dividend+1
  5802  04CA  0839               	movf	getADCValue@adcSum,w
  5803  04CB  00A5               	movwf	___lldiv@dividend
  5804  04CC  3185  258D         	fcall	___lldiv
  5805  04CE  0020               	movlb	0	; select bank0
  5806  04CF  0824               	movf	?___lldiv+3,w
  5807  04D0  00BC               	movwf	getADCValue@adcSum+3
  5808  04D1  0823               	movf	?___lldiv+2,w
  5809  04D2  00BB               	movwf	getADCValue@adcSum+2
  5810  04D3  0822               	movf	?___lldiv+1,w
  5811  04D4  00BA               	movwf	getADCValue@adcSum+1
  5812  04D5  0821               	movf	?___lldiv,w
  5813  04D6  00B9               	movwf	getADCValue@adcSum
  5814                           
  5815                           ;main.c: 46: return adcSum;
  5816  04D7  083C               	movf	getADCValue@adcSum+3,w
  5817  04D8  00B2               	movwf	?_getADCValue+3
  5818  04D9  083B               	movf	getADCValue@adcSum+2,w
  5819  04DA  00B1               	movwf	?_getADCValue+2
  5820  04DB  083A               	movf	getADCValue@adcSum+1,w
  5821  04DC  00B0               	movwf	?_getADCValue+1
  5822  04DD  0839               	movf	getADCValue@adcSum,w
  5823  04DE  00AF               	movwf	?_getADCValue
  5824  04DF  0008               	return
  5825  04E0                     __end_of_getADCValue:	
  5826                           
  5827                           	psect	text17
  5828  0778                     __ptext17:	
  5829 ;; *************** function ___lmul *****************
  5830 ;; Defined at:
  5831 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;  multiplier      4    1[BANK0 ] unsigned long 
  5834 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  5835 ;; Auto vars:     Size  Location     Type
  5836 ;;  product         4    9[BANK0 ] unsigned long 
  5837 ;; Return value:  Size  Location     Type
  5838 ;;                  4    1[BANK0 ] unsigned long 
  5839 ;; Registers used:
  5840 ;;		wreg, status,2, status,0
  5841 ;; Tracked objects:
  5842 ;;		On entry : 0/0
  5843 ;;		On exit  : 0/0
  5844 ;;		Unchanged: 0/0
  5845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5846 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5847 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5849 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5850 ;;Total ram usage:       12 bytes
  5851 ;; Hardware stack levels used:    1
  5852 ;; Hardware stack levels required when called:    7
  5853 ;; This function calls:
  5854 ;;		Nothing
  5855 ;; This function is called by:
  5856 ;;		_getADCValue
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           
  5861                           ;psect for function ___lmul
  5862  0778                     ___lmul:	
  5863                           
  5864                           ;incstack = 0
  5865                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5866  0778  3000               	movlw	0
  5867  0779  0020               	movlb	0	; select bank0
  5868  077A  00AC               	movwf	___lmul@product+3
  5869  077B  3000               	movlw	0
  5870  077C  00AB               	movwf	___lmul@product+2
  5871  077D  3000               	movlw	0
  5872  077E  00AA               	movwf	___lmul@product+1
  5873  077F  3000               	movlw	0
  5874  0780  00A9               	movwf	___lmul@product
  5875  0781                     l2215:	
  5876  0781  1C21               	btfss	___lmul@multiplier,0
  5877  0782  2F8B               	goto	l2219
  5878  0783  0825               	movf	___lmul@multiplicand,w
  5879  0784  07A9               	addwf	___lmul@product,f
  5880  0785  0826               	movf	___lmul@multiplicand+1,w
  5881  0786  3DAA               	addwfc	___lmul@product+1,f
  5882  0787  0827               	movf	___lmul@multiplicand+2,w
  5883  0788  3DAB               	addwfc	___lmul@product+2,f
  5884  0789  0828               	movf	___lmul@multiplicand+3,w
  5885  078A  3DAC               	addwfc	___lmul@product+3,f
  5886  078B                     l2219:	
  5887  078B  3001               	movlw	1
  5888  078C                     u1135:	
  5889  078C  35A5               	lslf	___lmul@multiplicand,f
  5890  078D  0DA6               	rlf	___lmul@multiplicand+1,f
  5891  078E  0DA7               	rlf	___lmul@multiplicand+2,f
  5892  078F  0DA8               	rlf	___lmul@multiplicand+3,f
  5893  0790  0B89               	decfsz	9,f
  5894  0791  2F8C               	goto	u1135
  5895  0792  3001               	movlw	1
  5896  0793                     u1145:	
  5897  0793  36A4               	lsrf	___lmul@multiplier+3,f
  5898  0794  0CA3               	rrf	___lmul@multiplier+2,f
  5899  0795  0CA2               	rrf	___lmul@multiplier+1,f
  5900  0796  0CA1               	rrf	___lmul@multiplier,f
  5901  0797  0B89               	decfsz	9,f
  5902  0798  2F93               	goto	u1145
  5903  0799  0824               	movf	___lmul@multiplier+3,w
  5904  079A  0423               	iorwf	___lmul@multiplier+2,w
  5905  079B  0422               	iorwf	___lmul@multiplier+1,w
  5906  079C  0421               	iorwf	___lmul@multiplier,w
  5907  079D  1D03               	skipz
  5908  079E  2F81               	goto	l2215
  5909  079F  082C               	movf	___lmul@product+3,w
  5910  07A0  00A4               	movwf	?___lmul+3
  5911  07A1  082B               	movf	___lmul@product+2,w
  5912  07A2  00A3               	movwf	?___lmul+2
  5913  07A3  082A               	movf	___lmul@product+1,w
  5914  07A4  00A2               	movwf	?___lmul+1
  5915  07A5  0829               	movf	___lmul@product,w
  5916  07A6  00A1               	movwf	?___lmul
  5917  07A7  0008               	return
  5918  07A8                     __end_of___lmul:	
  5919                           
  5920                           	psect	text18
  5921  058D                     __ptext18:	
  5922 ;; *************** function ___lldiv *****************
  5923 ;; Defined at:
  5924 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;  divisor         4    1[BANK0 ] unsigned long 
  5927 ;;  dividend        4    5[BANK0 ] unsigned long 
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;  quotient        4   10[BANK0 ] unsigned long 
  5930 ;;  counter         1   14[BANK0 ] unsigned char 
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  4    1[BANK0 ] unsigned long 
  5933 ;; Registers used:
  5934 ;;		wreg, status,2, status,0
  5935 ;; Tracked objects:
  5936 ;;		On entry : 0/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5940 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5941 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5943 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5944 ;;Total ram usage:       14 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; Hardware stack levels required when called:    7
  5947 ;; This function calls:
  5948 ;;		Nothing
  5949 ;; This function is called by:
  5950 ;;		_getADCValue
  5951 ;;		_ultoa
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955                           
  5956                           ;psect for function ___lldiv
  5957  058D                     ___lldiv:	
  5958                           
  5959                           ;incstack = 0
  5960                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5961  058D  3000               	movlw	0
  5962  058E  0020               	movlb	0	; select bank0
  5963  058F  00AD               	movwf	___lldiv@quotient+3
  5964  0590  3000               	movlw	0
  5965  0591  00AC               	movwf	___lldiv@quotient+2
  5966  0592  3000               	movlw	0
  5967  0593  00AB               	movwf	___lldiv@quotient+1
  5968  0594  3000               	movlw	0
  5969  0595  00AA               	movwf	___lldiv@quotient
  5970  0596  0824               	movf	___lldiv@divisor+3,w
  5971  0597  0423               	iorwf	___lldiv@divisor+2,w
  5972  0598  0422               	iorwf	___lldiv@divisor+1,w
  5973  0599  0421               	iorwf	___lldiv@divisor,w
  5974  059A  1903               	skipnz
  5975  059B  2DD7               	goto	l1993
  5976  059C  01AE               	clrf	___lldiv@counter
  5977  059D  0AAE               	incf	___lldiv@counter,f
  5978  059E                     l1979:	
  5979  059E  1BA4               	btfsc	___lldiv@divisor+3,7
  5980  059F  2DAC               	goto	l1981
  5981  05A0  3001               	movlw	1
  5982  05A1                     u815:	
  5983  05A1  35A1               	lslf	___lldiv@divisor,f
  5984  05A2  0DA2               	rlf	___lldiv@divisor+1,f
  5985  05A3  0DA3               	rlf	___lldiv@divisor+2,f
  5986  05A4  0DA4               	rlf	___lldiv@divisor+3,f
  5987  05A5  0B89               	decfsz	9,f
  5988  05A6  2DA1               	goto	u815
  5989  05A7  3001               	movlw	1
  5990  05A8  00A9               	movwf	??___lldiv
  5991  05A9  0829               	movf	??___lldiv,w
  5992  05AA  07AE               	addwf	___lldiv@counter,f
  5993  05AB  2D9E               	goto	l1979
  5994  05AC                     l1981:	
  5995  05AC  3001               	movlw	1
  5996  05AD                     u835:	
  5997  05AD  35AA               	lslf	___lldiv@quotient,f
  5998  05AE  0DAB               	rlf	___lldiv@quotient+1,f
  5999  05AF  0DAC               	rlf	___lldiv@quotient+2,f
  6000  05B0  0DAD               	rlf	___lldiv@quotient+3,f
  6001  05B1  0B89               	decfsz	9,f
  6002  05B2  2DAD               	goto	u835
  6003  05B3  0824               	movf	___lldiv@divisor+3,w
  6004  05B4  0228               	subwf	___lldiv@dividend+3,w
  6005  05B5  1D03               	skipz
  6006  05B6  2DC1               	goto	u845
  6007  05B7  0823               	movf	___lldiv@divisor+2,w
  6008  05B8  0227               	subwf	___lldiv@dividend+2,w
  6009  05B9  1D03               	skipz
  6010  05BA  2DC1               	goto	u845
  6011  05BB  0822               	movf	___lldiv@divisor+1,w
  6012  05BC  0226               	subwf	___lldiv@dividend+1,w
  6013  05BD  1D03               	skipz
  6014  05BE  2DC1               	goto	u845
  6015  05BF  0821               	movf	___lldiv@divisor,w
  6016  05C0  0225               	subwf	___lldiv@dividend,w
  6017  05C1                     u845:	
  6018  05C1  1C03               	skipc
  6019  05C2  2DCC               	goto	l1989
  6020  05C3  0821               	movf	___lldiv@divisor,w
  6021  05C4  02A5               	subwf	___lldiv@dividend,f
  6022  05C5  0822               	movf	___lldiv@divisor+1,w
  6023  05C6  3BA6               	subwfb	___lldiv@dividend+1,f
  6024  05C7  0823               	movf	___lldiv@divisor+2,w
  6025  05C8  3BA7               	subwfb	___lldiv@dividend+2,f
  6026  05C9  0824               	movf	___lldiv@divisor+3,w
  6027  05CA  3BA8               	subwfb	___lldiv@dividend+3,f
  6028  05CB  142A               	bsf	___lldiv@quotient,0
  6029  05CC                     l1989:	
  6030  05CC  3001               	movlw	1
  6031  05CD                     u855:	
  6032  05CD  36A4               	lsrf	___lldiv@divisor+3,f
  6033  05CE  0CA3               	rrf	___lldiv@divisor+2,f
  6034  05CF  0CA2               	rrf	___lldiv@divisor+1,f
  6035  05D0  0CA1               	rrf	___lldiv@divisor,f
  6036  05D1  0B89               	decfsz	9,f
  6037  05D2  2DCD               	goto	u855
  6038  05D3  3001               	movlw	1
  6039  05D4  02AE               	subwf	___lldiv@counter,f
  6040  05D5  1D03               	btfss	3,2
  6041  05D6  2DAC               	goto	l1981
  6042  05D7                     l1993:	
  6043  05D7  082D               	movf	___lldiv@quotient+3,w
  6044  05D8  00A4               	movwf	?___lldiv+3
  6045  05D9  082C               	movf	___lldiv@quotient+2,w
  6046  05DA  00A3               	movwf	?___lldiv+2
  6047  05DB  082B               	movf	___lldiv@quotient+1,w
  6048  05DC  00A2               	movwf	?___lldiv+1
  6049  05DD  082A               	movf	___lldiv@quotient,w
  6050  05DE  00A1               	movwf	?___lldiv
  6051  05DF  0008               	return
  6052  05E0                     __end_of___lldiv:	
  6053                           
  6054                           	psect	text19
  6055  0E21                     __ptext19:	
  6056 ;; *************** function _checkTXPower *****************
  6057 ;; Defined at:
  6058 ;;		line 92 in file "main.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;		None
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  rxPacket        1    9[BANK0 ] PTR struct .
  6063 ;;		 -> RXPacket(33), 
  6064 ;; Return value:  Size  Location     Type
  6065 ;;                  1    wreg      void 
  6066 ;; Registers used:
  6067 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6068 ;; Tracked objects:
  6069 ;;		On entry : 0/0
  6070 ;;		On exit  : 0/0
  6071 ;;		Unchanged: 0/0
  6072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;Total ram usage:        2 bytes
  6078 ;; Hardware stack levels used:    1
  6079 ;; Hardware stack levels required when called:   11
  6080 ;; This function calls:
  6081 ;;		_nrf24l01ChangeTXPower
  6082 ;;		_nrf24l01GetRXPacket
  6083 ;; This function is called by:
  6084 ;;		_loop
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           
  6089                           ;psect for function _checkTXPower
  6090  0E21                     _checkTXPower:	
  6091                           
  6092                           ;main.c: 93: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  6093                           
  6094                           ;incstack = 0
  6095                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6096  0E21  3187  27FE  318E   	fcall	_nrf24l01GetRXPacket
  6097  0E24  0020               	movlb	0	; select bank0
  6098  0E25  00A8               	movwf	??_checkTXPower
  6099  0E26  0828               	movf	??_checkTXPower,w
  6100  0E27  00A9               	movwf	checkTXPower@rxPacket
  6101                           
  6102                           ;main.c: 95: if (rxPacket->packetData.ACKRPD){
  6103  0E28  0829               	movf	checkTXPower@rxPacket,w
  6104  0E29  0086               	movwf	6
  6105  0E2A  3001               	movlw	1	; select bank2/3
  6106  0E2B  0087               	movwf	7
  6107  0E2C  1C81               	btfss	1,1
  6108  0E2D  0008               	return
  6109                           
  6110                           ;main.c: 96: nrf24l01ChangeTXPower(-1);
  6111  0E2E  30FF               	movlw	255
  6112  0E2F  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  6113  0E30  30FF               	movlw	255
  6114  0E31  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  6115  0E32  3186  2623         	fcall	_nrf24l01ChangeTXPower
  6116  0E34  0008               	return
  6117  0E35                     __end_of_checkTXPower:	
  6118                           
  6119                           	psect	text20
  6120  07FE                     __ptext20:	
  6121 ;; *************** function _nrf24l01GetRXPacket *****************
  6122 ;; Defined at:
  6123 ;;		line 129 in file "nrf24l01.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;		None
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;		None
  6128 ;; Return value:  Size  Location     Type
  6129 ;;                  1    wreg      PTR struct .
  6130 ;; Registers used:
  6131 ;;		wreg
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;Total ram usage:        0 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; Hardware stack levels required when called:    7
  6144 ;; This function calls:
  6145 ;;		Nothing
  6146 ;; This function is called by:
  6147 ;;		_checkTXPower
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           
  6152                           ;psect for function _nrf24l01GetRXPacket
  6153  07FE                     _nrf24l01GetRXPacket:	
  6154                           
  6155                           ;nrf24l01.c: 130: return &RXPacket;
  6156                           
  6157                           ;incstack = 0
  6158                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  6159  07FE  3040               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  6160  07FF  0008               	return
  6161  0800                     __end_of_nrf24l01GetRXPacket:	
  6162                           
  6163                           	psect	text21
  6164  0623                     __ptext21:	
  6165 ;; *************** function _nrf24l01ChangeTXPower *****************
  6166 ;; Defined at:
  6167 ;;		line 33 in file "nrf24l01.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  addPower        2    4[BANK0 ] int 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  rfSetup         1    7[BANK0 ] struct .
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1    wreg      void 
  6174 ;; Registers used:
  6175 ;;		wreg, status,2, status,0, pclath, cstack
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6181 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;Total ram usage:        4 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:   10
  6188 ;; This function calls:
  6189 ;;		_nrf24l01Send
  6190 ;; This function is called by:
  6191 ;;		_checkTXPower
  6192 ;;		_nrf24l01SendPacket
  6193 ;; This function uses a non-reentrant model
  6194 ;;
  6195                           
  6196                           
  6197                           ;psect for function _nrf24l01ChangeTXPower
  6198  0623                     _nrf24l01ChangeTXPower:	
  6199                           
  6200                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
  6201                           
  6202                           ;incstack = 0
  6203                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  6204  0623  0020               	movlb	0	; select bank0
  6205  0624  01A1               	clrf	nrf24l01Send@data
  6206  0625  3006               	movlw	6
  6207  0626  318F  272B  3186   	fcall	_nrf24l01Send
  6208  0629  0020               	movlb	0	; select bank0
  6209  062A  00A6               	movwf	??_nrf24l01ChangeTXPower
  6210  062B  0826               	movf	??_nrf24l01ChangeTXPower,w
  6211  062C  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6212                           
  6213                           ;nrf24l01.c: 38: if (addPower > 0){
  6214  062D  0825               	movf	nrf24l01ChangeTXPower@addPower+1,w
  6215  062E  3A80               	xorlw	128
  6216  062F  00A6               	movwf	??_nrf24l01ChangeTXPower
  6217  0630  3080               	movlw	128
  6218  0631  0226               	subwf	??_nrf24l01ChangeTXPower,w
  6219  0632  1D03               	skipz
  6220  0633  2E36               	goto	u1015
  6221  0634  3001               	movlw	1
  6222  0635  0224               	subwf	nrf24l01ChangeTXPower@addPower,w
  6223  0636                     u1015:	
  6224  0636  1C03               	skipc
  6225  0637  2E48               	goto	l2167
  6226                           
  6227                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  6228  0638  0020               	movlb	0	; select bank0
  6229  0639  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6230  063A  3903               	andlw	3
  6231  063B  3A03               	xorlw	3
  6232  063C  1903               	skipnz
  6233  063D  2E48               	goto	l2167
  6234                           
  6235                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  6236  063E  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6237  063F  3903               	andlw	3
  6238  0640  00A6               	movwf	??_nrf24l01ChangeTXPower
  6239  0641  0AA6               	incf	??_nrf24l01ChangeTXPower,f
  6240  0642  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  6241  0643  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6242  0644  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6243  0645  39F9               	andlw	-7
  6244  0646  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6245  0647  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6246  0648                     l2167:	
  6247                           
  6248                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  6249  0648  0020               	movlb	0	; select bank0
  6250  0649  1FA5               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  6251  064A  2E5A               	goto	l2173
  6252                           
  6253                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  6254  064B  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6255  064C  3903               	andlw	3
  6256  064D  3A00               	xorlw	0
  6257  064E  1903               	skipnz
  6258  064F  2E5A               	goto	l2173
  6259                           
  6260                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  6261  0650  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  6262  0651  3903               	andlw	3
  6263  0652  00A6               	movwf	??_nrf24l01ChangeTXPower
  6264  0653  03A6               	decf	??_nrf24l01ChangeTXPower,f
  6265  0654  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  6266  0655  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6267  0656  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6268  0657  39F9               	andlw	-7
  6269  0658  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  6270  0659  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  6271  065A                     l2173:	
  6272                           
  6273                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
  6274  065A  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  6275  065B  00A6               	movwf	??_nrf24l01ChangeTXPower
  6276  065C  0826               	movf	??_nrf24l01ChangeTXPower,w
  6277  065D  00A1               	movwf	nrf24l01Send@data
  6278  065E  3026               	movlw	38
  6279  065F  318F  272B         	fcall	_nrf24l01Send
  6280  0661  0008               	return
  6281  0662                     __end_of_nrf24l01ChangeTXPower:	
  6282                           
  6283                           	psect	text22
  6284  0F2B                     __ptext22:	
  6285 ;; *************** function _nrf24l01Send *****************
  6286 ;; Defined at:
  6287 ;;		line 9 in file "nrf24l01.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;  command         1    wreg     unsigned char 
  6290 ;;  data            1    1[BANK0 ] unsigned char 
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;  command         1    3[BANK0 ] unsigned char 
  6293 ;; Return value:  Size  Location     Type
  6294 ;;                  1    wreg      unsigned char 
  6295 ;; Registers used:
  6296 ;;		wreg, status,2, status,0, pclath, cstack
  6297 ;; Tracked objects:
  6298 ;;		On entry : 0/0
  6299 ;;		On exit  : 0/0
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6302 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;Total ram usage:        3 bytes
  6307 ;; Hardware stack levels used:    1
  6308 ;; Hardware stack levels required when called:    9
  6309 ;; This function calls:
  6310 ;;		_enableInterrupts
  6311 ;;		_nrf24l01SPIEnd
  6312 ;;		_nrf24l01SPISend
  6313 ;;		_nrf24l01SPIStart
  6314 ;; This function is called by:
  6315 ;;		_loop
  6316 ;;		_nrf24l01ChangeTXPower
  6317 ;;		_nrf24l01SetRXMode
  6318 ;;		_nrf24l01InitRegisters
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           
  6323                           ;psect for function _nrf24l01Send
  6324  0F2B                     _nrf24l01Send:	
  6325                           
  6326                           ;incstack = 0
  6327                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6328                           ;nrf24l01Send@command stored from wreg
  6329  0F2B  0020               	movlb	0	; select bank0
  6330  0F2C  00A3               	movwf	nrf24l01Send@command
  6331                           
  6332                           ;nrf24l01.c: 12: enableInterrupts(0);
  6333  0F2D  3000               	movlw	0
  6334  0F2E  318D  25E0  318F   	fcall	_enableInterrupts
  6335                           
  6336                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  6337  0F31  318D  25E8  318F   	fcall	_nrf24l01SPIStart
  6338                           
  6339                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  6340  0F34  0020               	movlb	0	; select bank0
  6341  0F35  0823               	movf	nrf24l01Send@command,w
  6342  0F36  318D  25F0  318F   	fcall	_nrf24l01SPISend
  6343                           
  6344                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  6345  0F39  0020               	movlb	0	; select bank0
  6346  0F3A  0821               	movf	nrf24l01Send@data,w
  6347  0F3B  318D  25F0  318F   	fcall	_nrf24l01SPISend
  6348  0F3E  0020               	movlb	0	; select bank0
  6349  0F3F  00A2               	movwf	??_nrf24l01Send
  6350  0F40  0822               	movf	??_nrf24l01Send,w
  6351  0F41  00A1               	movwf	nrf24l01Send@data
  6352                           
  6353                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  6354  0F42  318D  25D9  318F   	fcall	_nrf24l01SPIEnd
  6355                           
  6356                           ;nrf24l01.c: 27: enableInterrupts(1);
  6357  0F45  3001               	movlw	1
  6358  0F46  318D  25E0         	fcall	_enableInterrupts
  6359                           
  6360                           ;nrf24l01.c: 29: return data;
  6361  0F48  0020               	movlb	0	; select bank0
  6362  0F49  0821               	movf	nrf24l01Send@data,w
  6363  0F4A  0008               	return
  6364  0F4B                     __end_of_nrf24l01Send:	
  6365                           
  6366                           	psect	text23
  6367  0F6C                     __ptext23:	
  6368 ;; *************** function _flashUpdate *****************
  6369 ;; Defined at:
  6370 ;;		line 97 in file "flash.c"
  6371 ;; Parameters:    Size  Location     Type
  6372 ;;		None
  6373 ;; Auto vars:     Size  Location     Type
  6374 ;;  i               2    9[BANK0 ] unsigned int 
  6375 ;; Return value:  Size  Location     Type
  6376 ;;                  1    wreg      void 
  6377 ;; Registers used:
  6378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6379 ;; Tracked objects:
  6380 ;;		On entry : 0/0
  6381 ;;		On exit  : 0/0
  6382 ;;		Unchanged: 0/0
  6383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6385 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6386 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6387 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6388 ;;Total ram usage:        4 bytes
  6389 ;; Hardware stack levels used:    1
  6390 ;; Hardware stack levels required when called:    8
  6391 ;; This function calls:
  6392 ;;		_flashWriteByte
  6393 ;; This function is called by:
  6394 ;;		_main
  6395 ;; This function uses a non-reentrant model
  6396 ;;
  6397                           
  6398                           
  6399                           ;psect for function _flashUpdate
  6400  0F6C                     _flashUpdate:	
  6401                           
  6402                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  6403                           
  6404                           ;incstack = 0
  6405                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6406  0F6C  0020               	movlb	0	; select bank0
  6407  0F6D  01A9               	clrf	flashUpdate@i
  6408  0F6E  01AA               	clrf	flashUpdate@i+1
  6409  0F6F                     L1:	
  6410  0F6F  3000               	movlw	0
  6411  0F70  022A               	subwf	flashUpdate@i+1,w
  6412  0F71  3020               	movlw	32
  6413  0F72  1903               	skipnz
  6414  0F73  0229               	subwf	flashUpdate@i,w
  6415  0F74  1803               	btfsc	3,0
  6416  0F75  0008               	return
  6417                           
  6418                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  6419  0F76  082A               	movf	flashUpdate@i+1,w
  6420  0F77  00A2               	movwf	flashWriteByte@offset+1
  6421  0F78  0829               	movf	flashUpdate@i,w
  6422  0F79  00A1               	movwf	flashWriteByte@offset
  6423  0F7A  0829               	movf	flashUpdate@i,w
  6424  0F7B  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6425  0F7C  0086               	movwf	6
  6426  0F7D  3001               	movlw	1	; select bank2/3
  6427  0F7E  0087               	movwf	7
  6428  0F7F  0801               	movf	1,w
  6429  0F80  00A7               	movwf	??_flashUpdate
  6430  0F81  01A8               	clrf	??_flashUpdate+1
  6431  0F82  0827               	movf	??_flashUpdate,w
  6432  0F83  00A3               	movwf	flashWriteByte@data
  6433  0F84  0828               	movf	??_flashUpdate+1,w
  6434  0F85  00A4               	movwf	flashWriteByte@data+1
  6435  0F86  3186  2662  318F   	fcall	_flashWriteByte
  6436  0F89  3001               	movlw	1
  6437  0F8A  0020               	movlb	0	; select bank0
  6438  0F8B  07A9               	addwf	flashUpdate@i,f
  6439  0F8C  3000               	movlw	0
  6440  0F8D  3DAA               	addwfc	flashUpdate@i+1,f
  6441  0F8E  2F6F               	goto	L1
  6442  0F8F                     __end_of_flashUpdate:	
  6443                           
  6444                           	psect	text24
  6445  0662                     __ptext24:	
  6446 ;; *************** function _flashWriteByte *****************
  6447 ;; Defined at:
  6448 ;;		line 8 in file "flash.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;  offset          2    1[BANK0 ] unsigned int 
  6451 ;;  data            2    3[BANK0 ] unsigned int 
  6452 ;; Auto vars:     Size  Location     Type
  6453 ;;  address         2    5[BANK0 ] unsigned int 
  6454 ;; Return value:  Size  Location     Type
  6455 ;;                  1    wreg      void 
  6456 ;; Registers used:
  6457 ;;		wreg, status,2, status,0
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6463 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6464 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6466 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6467 ;;Total ram usage:        6 bytes
  6468 ;; Hardware stack levels used:    1
  6469 ;; Hardware stack levels required when called:    7
  6470 ;; This function calls:
  6471 ;;		Nothing
  6472 ;; This function is called by:
  6473 ;;		_flashUpdate
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           
  6478                           ;psect for function _flashWriteByte
  6479  0662                     _flashWriteByte:	
  6480                           
  6481                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  6482                           
  6483                           ;incstack = 0
  6484                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
  6485  0662  138B               	bcf	11,7	;volatile
  6486                           
  6487                           ;flash.c: 15: PMCON1 = 0x00;
  6488  0663  0031               	movlb	17	; select bank17
  6489  0664  0195               	clrf	21	;volsfr
  6490                           
  6491                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  6492  0665  0020               	movlb	0	; select bank0
  6493  0666  0821               	movf	flashWriteByte@offset,w
  6494  0667  3EE0               	addlw	224
  6495  0668  00A5               	movwf	flashWriteByte@address
  6496  0669  301F               	movlw	31
  6497  066A  3D22               	addwfc	flashWriteByte@offset+1,w
  6498  066B  00A6               	movwf	flashWriteByte@address+1
  6499                           
  6500                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  6501  066C  0825               	movf	flashWriteByte@address,w
  6502  066D  0031               	movlb	17	; select bank17
  6503  066E  0091               	movwf	17	;volatile
  6504                           
  6505                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  6506  066F  0020               	movlb	0	; select bank0
  6507  0670  0826               	movf	flashWriteByte@address+1,w
  6508  0671  0031               	movlb	17	; select bank17
  6509  0672  0092               	movwf	18	;volatile
  6510                           
  6511                           ;flash.c: 21: PMCON1bits.FREE = 1;
  6512  0673  1615               	bsf	21,4	;volsfr
  6513                           
  6514                           ;flash.c: 22: PMCON1bits.WREN = 1;
  6515  0674  1515               	bsf	21,2	;volsfr
  6516                           
  6517                           ;flash.c: 24: PMCON2 = 0x55;
  6518  0675  3055               	movlw	85
  6519  0676  0096               	movwf	22	;volsfr
  6520                           
  6521                           ;flash.c: 25: PMCON2 = 0xAA;
  6522  0677  30AA               	movlw	170
  6523  0678  0096               	movwf	22	;volsfr
  6524                           
  6525                           ;flash.c: 27: PMCON1bits.WR = 1;
  6526  0679  1495               	bsf	21,1	;volsfr
  6527                           
  6528                           ;flash.c: 29: __nop();
  6529  067A  0000               	nop
  6530                           
  6531                           ;flash.c: 30: __nop();
  6532  067B  0000               	nop
  6533                           
  6534                           ;flash.c: 32: PMCON1bits.WREN = 0;
  6535  067C  0031               	movlb	17	; select bank17
  6536  067D  1115               	bcf	21,2	;volsfr
  6537                           
  6538                           ;flash.c: 36: PMCON1 = 0x00;
  6539  067E  0195               	clrf	21	;volsfr
  6540                           
  6541                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  6542  067F  0020               	movlb	0	; select bank0
  6543  0680  0825               	movf	flashWriteByte@address,w
  6544  0681  0031               	movlb	17	; select bank17
  6545  0682  0091               	movwf	17	;volatile
  6546                           
  6547                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  6548  0683  0020               	movlb	0	; select bank0
  6549  0684  0826               	movf	flashWriteByte@address+1,w
  6550  0685  0031               	movlb	17	; select bank17
  6551  0686  0092               	movwf	18	;volatile
  6552                           
  6553                           ;flash.c: 41: PMCON1bits.FREE = 0;
  6554  0687  1215               	bcf	21,4	;volsfr
  6555                           
  6556                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  6557  0688  1695               	bsf	21,5	;volsfr
  6558                           
  6559                           ;flash.c: 43: PMCON1bits.WREN = 1;
  6560  0689  1515               	bsf	21,2	;volsfr
  6561                           
  6562                           ;flash.c: 45: PMDATL = (data >> 0);
  6563  068A  0020               	movlb	0	; select bank0
  6564  068B  0823               	movf	flashWriteByte@data,w
  6565  068C  0031               	movlb	17	; select bank17
  6566  068D  0093               	movwf	19	;volatile
  6567                           
  6568                           ;flash.c: 46: PMDATH = (data >> 8);
  6569  068E  0020               	movlb	0	; select bank0
  6570  068F  0824               	movf	flashWriteByte@data+1,w
  6571  0690  0031               	movlb	17	; select bank17
  6572  0691  0094               	movwf	20	;volatile
  6573                           
  6574                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  6575  0692  1295               	bcf	21,5	;volsfr
  6576                           
  6577                           ;flash.c: 50: PMCON2 = 0x55;
  6578  0693  3055               	movlw	85
  6579  0694  0096               	movwf	22	;volsfr
  6580                           
  6581                           ;flash.c: 51: PMCON2 = 0xAA;
  6582  0695  30AA               	movlw	170
  6583  0696  0096               	movwf	22	;volsfr
  6584                           
  6585                           ;flash.c: 53: PMCON1bits.WR = 1;
  6586  0697  1495               	bsf	21,1	;volsfr
  6587                           
  6588                           ;flash.c: 55: __nop();
  6589  0698  0000               	nop
  6590                           
  6591                           ;flash.c: 56: __nop();
  6592  0699  0000               	nop
  6593                           
  6594                           ;flash.c: 58: PMCON1bits.WREN = 0;
  6595  069A  0031               	movlb	17	; select bank17
  6596  069B  1115               	bcf	21,2	;volsfr
  6597                           
  6598                           ;flash.c: 61: INTCONbits.GIE = 1;
  6599  069C  178B               	bsf	11,7	;volatile
  6600  069D  0008               	return
  6601  069E                     __end_of_flashWriteByte:	
  6602                           
  6603                           	psect	text25
  6604  0F0B                     __ptext25:	
  6605 ;; *************** function _flashRealod *****************
  6606 ;; Defined at:
  6607 ;;		line 90 in file "flash.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;		None
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;  i               2   11[BANK0 ] unsigned int 
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  1    wreg      void 
  6614 ;; Registers used:
  6615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;Total ram usage:        3 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:    8
  6628 ;; This function calls:
  6629 ;;		_flashReadByte
  6630 ;; This function is called by:
  6631 ;;		_main
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           
  6636                           ;psect for function _flashRealod
  6637  0F0B                     _flashRealod:	
  6638                           
  6639                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  6640                           
  6641                           ;incstack = 0
  6642                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6643  0F0B  0020               	movlb	0	; select bank0
  6644  0F0C  01AB               	clrf	flashRealod@i
  6645  0F0D  01AC               	clrf	flashRealod@i+1
  6646  0F0E                     L2:	
  6647  0F0E  3000               	movlw	0
  6648  0F0F  022C               	subwf	flashRealod@i+1,w
  6649  0F10  3020               	movlw	32
  6650  0F11  1903               	skipnz
  6651  0F12  022B               	subwf	flashRealod@i,w
  6652  0F13  1803               	btfsc	3,0
  6653  0F14  0008               	return
  6654                           
  6655                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  6656  0F15  082C               	movf	flashRealod@i+1,w
  6657  0F16  00A2               	movwf	flashReadByte@offset+1
  6658  0F17  082B               	movf	flashRealod@i,w
  6659  0F18  00A1               	movwf	flashReadByte@offset
  6660  0F19  3187  2746  318F   	fcall	_flashReadByte
  6661  0F1C  0020               	movlb	0	; select bank0
  6662  0F1D  0821               	movf	?_flashReadByte,w
  6663  0F1E  00AA               	movwf	??_flashRealod
  6664  0F1F  082B               	movf	flashRealod@i,w
  6665  0F20  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6666  0F21  0086               	movwf	6
  6667  0F22  3001               	movlw	1	; select bank2/3
  6668  0F23  0087               	movwf	7
  6669  0F24  082A               	movf	??_flashRealod,w
  6670  0F25  0081               	movwf	1
  6671  0F26  3001               	movlw	1
  6672  0F27  07AB               	addwf	flashRealod@i,f
  6673  0F28  3000               	movlw	0
  6674  0F29  3DAC               	addwfc	flashRealod@i+1,f
  6675  0F2A  2F0E               	goto	L2
  6676  0F2B                     __end_of_flashRealod:	
  6677                           
  6678                           	psect	text26
  6679  0746                     __ptext26:	
  6680 ;; *************** function _flashReadByte *****************
  6681 ;; Defined at:
  6682 ;;		line 64 in file "flash.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;  offset          2    1[BANK0 ] unsigned int 
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;  address         2    8[BANK0 ] unsigned int 
  6687 ;;  result          2    6[BANK0 ] unsigned int 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  2    1[BANK0 ] unsigned int 
  6690 ;; Registers used:
  6691 ;;		wreg, status,2, status,0
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6697 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;Total ram usage:        9 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:    7
  6704 ;; This function calls:
  6705 ;;		Nothing
  6706 ;; This function is called by:
  6707 ;;		_flashRealod
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           
  6712                           ;psect for function _flashReadByte
  6713  0746                     _flashReadByte:	
  6714                           
  6715                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  6716                           
  6717                           ;incstack = 0
  6718                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  6719  0746  138B               	bcf	11,7	;volatile
  6720                           
  6721                           ;flash.c: 70: PMCON1 = 0x00;
  6722  0747  0031               	movlb	17	; select bank17
  6723  0748  0195               	clrf	21	;volsfr
  6724                           
  6725                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  6726  0749  0020               	movlb	0	; select bank0
  6727  074A  0821               	movf	flashReadByte@offset,w
  6728  074B  3EE0               	addlw	224
  6729  074C  00A8               	movwf	flashReadByte@address
  6730  074D  301F               	movlw	31
  6731  074E  3D22               	addwfc	flashReadByte@offset+1,w
  6732  074F  00A9               	movwf	flashReadByte@address+1
  6733                           
  6734                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  6735  0750  0828               	movf	flashReadByte@address,w
  6736  0751  0031               	movlb	17	; select bank17
  6737  0752  0091               	movwf	17	;volatile
  6738                           
  6739                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  6740  0753  0020               	movlb	0	; select bank0
  6741  0754  0829               	movf	flashReadByte@address+1,w
  6742  0755  0031               	movlb	17	; select bank17
  6743  0756  0092               	movwf	18	;volatile
  6744                           
  6745                           ;flash.c: 76: PMCON1bits.RD = 1;
  6746  0757  1415               	bsf	21,0	;volsfr
  6747                           
  6748                           ;flash.c: 78: __nop();
  6749  0758  0000               	nop
  6750                           
  6751                           ;flash.c: 79: __nop();
  6752  0759  0000               	nop
  6753                           
  6754                           ;flash.c: 81: unsigned int result = 0;
  6755  075A  0020               	movlb	0	; select bank0
  6756  075B  01A6               	clrf	flashReadByte@result
  6757  075C  01A7               	clrf	flashReadByte@result+1
  6758                           
  6759                           ;flash.c: 82: result = PMDATL;
  6760  075D  0031               	movlb	17	; select bank17
  6761  075E  0813               	movf	19,w	;volatile
  6762  075F  0020               	movlb	0	; select bank0
  6763  0760  00A3               	movwf	??_flashReadByte
  6764  0761  01A4               	clrf	??_flashReadByte+1
  6765  0762  0823               	movf	??_flashReadByte,w
  6766  0763  00A6               	movwf	flashReadByte@result
  6767  0764  0824               	movf	??_flashReadByte+1,w
  6768  0765  00A7               	movwf	flashReadByte@result+1
  6769                           
  6770                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  6771  0766  0031               	movlb	17	; select bank17
  6772  0767  0814               	movf	20,w	;volatile
  6773  0768  0020               	movlb	0	; select bank0
  6774  0769  00A3               	movwf	??_flashReadByte
  6775  076A  01A4               	clrf	??_flashReadByte+1
  6776  076B  0823               	movf	??_flashReadByte,w
  6777  076C  00A4               	movwf	??_flashReadByte+1
  6778  076D  01A3               	clrf	??_flashReadByte
  6779  076E  0823               	movf	??_flashReadByte,w
  6780  076F  04A6               	iorwf	flashReadByte@result,f
  6781  0770  0824               	movf	??_flashReadByte+1,w
  6782  0771  04A7               	iorwf	flashReadByte@result+1,f
  6783                           
  6784                           ;flash.c: 85: INTCONbits.GIE = 1;
  6785  0772  178B               	bsf	11,7	;volatile
  6786                           
  6787                           ;flash.c: 87: return result;
  6788  0773  0827               	movf	flashReadByte@result+1,w
  6789  0774  00A2               	movwf	?_flashReadByte+1
  6790  0775  0826               	movf	flashReadByte@result,w
  6791  0776  00A1               	movwf	?_flashReadByte
  6792  0777  0008               	return
  6793  0778                     __end_of_flashReadByte:	
  6794                           
  6795                           	psect	intentry
  6796  0004                     __pintentry:	
  6797 ;; *************** function _ISR *****************
  6798 ;; Defined at:
  6799 ;;		line 15 in file "main.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;		None
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;		None
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  1    wreg      void 
  6806 ;; Registers used:
  6807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6817 ;;Total ram usage:        0 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    6
  6820 ;; This function calls:
  6821 ;;		_nrf24l01ISR
  6822 ;; This function is called by:
  6823 ;;		Interrupt level 1
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827  0004                     _ISR:	
  6828                           
  6829                           ;incstack = 0
  6830  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6831                           
  6832                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6833  0005  3180               	pagesel	$
  6834                           
  6835                           ;main.c: 17: if (PIR0bits.INTF){
  6836  0006  0020               	movlb	0	; select bank0
  6837  0007  1C10               	btfss	16,0	;volatile
  6838  0008  280D               	goto	i1l209
  6839                           
  6840                           ;main.c: 18: nrf24l01ISR();
  6841  0009  3187  2710         	fcall	_nrf24l01ISR
  6842                           
  6843                           ;main.c: 19: PIR0bits.INTF = 0;
  6844  000B  0020               	movlb	0	; select bank0
  6845  000C  1010               	bcf	16,0	;volatile
  6846  000D                     i1l209:	
  6847  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6848  000E  0009               	retfie
  6849  000F                     __end_of_ISR:	
  6850                           
  6851                           	psect	text28
  6852  0710                     __ptext28:	
  6853 ;; *************** function _nrf24l01ISR *****************
  6854 ;; Defined at:
  6855 ;;		line 246 in file "nrf24l01.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;		None
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;  status          1    0[BANK0 ] struct .
  6860 ;; Return value:  Size  Location     Type
  6861 ;;                  1    wreg      void 
  6862 ;; Registers used:
  6863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6872 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6873 ;;Total ram usage:        2 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:    5
  6876 ;; This function calls:
  6877 ;;		_exception
  6878 ;;		_nrf24l01CheckACK
  6879 ;;		_nrf24l01ReceivePacket
  6880 ;;		i1_nrf24l01Send
  6881 ;;		i1_nrf24l01SetRXMode
  6882 ;; This function is called by:
  6883 ;;		_ISR
  6884 ;; This function uses a non-reentrant model
  6885 ;;
  6886                           
  6887                           
  6888                           ;psect for function _nrf24l01ISR
  6889  0710                     _nrf24l01ISR:	
  6890                           
  6891                           ;nrf24l01.c: 248: n_STATUS_t status;;nrf24l01.c: 249: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
  6892                           
  6893                           ;incstack = 0
  6894                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6895  0710  01F1               	clrf	i1nrf24l01Send@data
  6896  0711  3007               	movlw	7
  6897  0712  318E  2699  3187   	fcall	i1_nrf24l01Send
  6898  0715  00FD               	movwf	??_nrf24l01ISR
  6899  0716  087D               	movf	??_nrf24l01ISR,w
  6900  0717  0020               	movlb	0	; select bank0
  6901  0718  00A0               	movwf	nrf24l01ISR@status
  6902                           
  6903                           ;nrf24l01.c: 254: };nrf24l01.c: 257: if (status.byte == 0xFF){
  6904  0719  0A20               	incf	nrf24l01ISR@status,w
  6905  071A  1D03               	btfss	3,2
  6906  071B  2F20               	goto	i1l2997
  6907                           
  6908                           ;nrf24l01.c: 258: exception(2);
  6909  071C  3002               	movlw	2
  6910  071D  318E  2635  3187   	fcall	_exception
  6911  0720                     i1l2997:	
  6912                           
  6913                           ;nrf24l01.c: 259: };nrf24l01.c: 261: if (status.TX_DS){
  6914  0720  0020               	movlb	0	; select bank0
  6915  0721  1EA0               	btfss	nrf24l01ISR@status,5
  6916  0722  2F2F               	goto	i1l3005
  6917                           
  6918                           ;nrf24l01.c: 264: nrf24l01.TXBusy = 0;
  6919  0723  105B               	bcf	_nrf24l01,0	;volatile
  6920                           
  6921                           ;nrf24l01.c: 267: if (!nrf24l01.RXMode){
  6922  0724  195B               	btfsc	_nrf24l01,2	;volatile
  6923  0725  2F2F               	goto	i1l3005
  6924                           
  6925                           ;nrf24l01.c: 268: if (TXPacket->packetData.ACKRequest){
  6926  0726  0859               	movf	_TXPacket,w
  6927  0727  0086               	movwf	6
  6928  0728  0187               	clrf	7
  6929  0729  1D01               	btfss	1,2
  6930  072A  2F2F               	goto	i1l3005
  6931                           
  6932                           ;nrf24l01.c: 271: nrf24l01SetRXMode(1);
  6933  072B  3001               	movlw	1
  6934  072C  3186  26D9  3187   	fcall	i1_nrf24l01SetRXMode
  6935  072F                     i1l3005:	
  6936                           
  6937                           ;nrf24l01.c: 272: };nrf24l01.c: 273: };nrf24l01.c: 274: };nrf24l01.c: 277: if (status.RX
      +                          _DR){
  6938  072F  0020               	movlb	0	; select bank0
  6939  0730  1F20               	btfss	nrf24l01ISR@status,6
  6940  0731  2F3D               	goto	i1l3015
  6941                           
  6942                           ;nrf24l01.c: 280: if (!nrf24l01.RXPending){
  6943  0732  18DB               	btfsc	_nrf24l01,1	;volatile
  6944  0733  2F3C               	goto	i1l351
  6945                           
  6946                           ;nrf24l01.c: 283: nrf24l01.RXPending = 1;
  6947  0734  14DB               	bsf	_nrf24l01,1	;volatile
  6948                           
  6949                           ;nrf24l01.c: 287: nrf24l01ReceivePacket();
  6950  0735  3184  24E0  3187   	fcall	_nrf24l01ReceivePacket
  6951                           
  6952                           ;nrf24l01.c: 288: nrf24l01CheckACK();
  6953  0738  318E  26EB  3187   	fcall	_nrf24l01CheckACK
  6954                           
  6955                           ;nrf24l01.c: 289: }
  6956  073B  2F3D               	goto	i1l3015
  6957  073C                     i1l351:	
  6958                           
  6959                           ;nrf24l01.c: 292: else{;nrf24l01.c: 295: status.RX_DR = 0;
  6960  073C  1320               	bcf	nrf24l01ISR@status,6
  6961  073D                     i1l3015:	
  6962                           
  6963                           ;nrf24l01.c: 296: };nrf24l01.c: 298: };nrf24l01.c: 301: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
  6964  073D  0020               	movlb	0	; select bank0
  6965  073E  0820               	movf	nrf24l01ISR@status,w
  6966  073F  00FD               	movwf	??_nrf24l01ISR
  6967  0740  087D               	movf	??_nrf24l01ISR,w
  6968  0741  00F1               	movwf	i1nrf24l01Send@data
  6969  0742  3027               	movlw	39
  6970  0743  318E  2699         	fcall	i1_nrf24l01Send
  6971  0745  0008               	return
  6972  0746                     __end_of_nrf24l01ISR:	
  6973                           
  6974                           	psect	text29
  6975  04E0                     __ptext29:	
  6976 ;; *************** function _nrf24l01ReceivePacket *****************
  6977 ;; Defined at:
  6978 ;;		line 133 in file "nrf24l01.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;		None
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;  i               1   10[COMMON] unsigned char 
  6983 ;;  width           1    9[COMMON] unsigned char 
  6984 ;; Return value:  Size  Location     Type
  6985 ;;                  1    wreg      void 
  6986 ;; Registers used:
  6987 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6996 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6997 ;;Total ram usage:        3 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:    3
  7000 ;; This function calls:
  7001 ;;		_nrf24l01CEHigh
  7002 ;;		_nrf24l01CELow
  7003 ;;		_nrf24l01SPIEnd
  7004 ;;		_nrf24l01SPISend
  7005 ;;		_nrf24l01SPIStart
  7006 ;;		i1_memset
  7007 ;;		i1_nrf24l01Send
  7008 ;; This function is called by:
  7009 ;;		_nrf24l01ISR
  7010 ;; This function uses a non-reentrant model
  7011 ;;
  7012                           
  7013                           
  7014                           ;psect for function _nrf24l01ReceivePacket
  7015  04E0                     _nrf24l01ReceivePacket:	
  7016                           
  7017                           ;nrf24l01.c: 136: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  7018                           
  7019                           ;incstack = 0
  7020                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7021  04E0  3041               	movlw	low (_RXPacket+1)
  7022  04E1  00F0               	movwf	i1memset@p1
  7023  04E2  3001               	movlw	high (_RXPacket+1)
  7024  04E3  00F1               	movwf	i1memset@p1+1
  7025  04E4  3000               	movlw	0
  7026  04E5  00F2               	movwf	i1memset@c
  7027  04E6  00F3               	movwf	i1memset@c+1
  7028  04E7  3020               	movlw	32
  7029  04E8  00F4               	movwf	i1memset@n
  7030  04E9  3000               	movlw	0
  7031  04EA  00F5               	movwf	i1memset@n+1
  7032  04EB  318E  264D  3184   	fcall	i1_memset
  7033                           
  7034                           ;nrf24l01.c: 137: RXPacket.packetData.byte = 0x00;
  7035  04EE  0022               	movlb	2	; select bank2
  7036  04EF  01C0               	clrf	_RXPacket^(0+256)
  7037                           
  7038                           ;nrf24l01.c: 140: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  7039  04F0  01F1               	clrf	i1nrf24l01Send@data
  7040  04F1  3060               	movlw	96
  7041  04F2  318E  2699  3184   	fcall	i1_nrf24l01Send
  7042  04F5  00F8               	movwf	??_nrf24l01ReceivePacket
  7043  04F6  0878               	movf	??_nrf24l01ReceivePacket,w
  7044  04F7  00F9               	movwf	nrf24l01ReceivePacket@width
  7045                           
  7046                           ;nrf24l01.c: 141: unsigned char i = 0;
  7047  04F8  01FA               	clrf	nrf24l01ReceivePacket@i
  7048                           
  7049                           ;nrf24l01.c: 144: nrf24l01CELow();
  7050  04F9  318D  25CA  3184   	fcall	_nrf24l01CELow
  7051                           
  7052                           ;nrf24l01.c: 147: nrf24l01SPIStart();
  7053  04FC  318D  25E8  3184   	fcall	_nrf24l01SPIStart
  7054                           
  7055                           ;nrf24l01.c: 150: nrf24l01SPISend((unsigned) 0b01100001);
  7056  04FF  3061               	movlw	97
  7057  0500  318D  25F0  3184   	fcall	_nrf24l01SPISend
  7058                           
  7059                           ;nrf24l01.c: 153: RXPacket.packetData.byte = nrf24l01SPISend(0);
  7060  0503  3000               	movlw	0
  7061  0504  318D  25F0  3184   	fcall	_nrf24l01SPISend
  7062  0507  00F8               	movwf	??_nrf24l01ReceivePacket
  7063  0508  0878               	movf	??_nrf24l01ReceivePacket,w
  7064  0509  0022               	movlb	2	; select bank2
  7065  050A  00C0               	movwf	_RXPacket^(0+256)
  7066                           
  7067                           ;nrf24l01.c: 154: width--;
  7068  050B  3001               	movlw	1
  7069  050C  02F9               	subwf	nrf24l01ReceivePacket@width,f
  7070                           
  7071                           ;nrf24l01.c: 156: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  7072  050D  01FA               	clrf	nrf24l01ReceivePacket@i
  7073  050E  2D1F               	goto	i1l2981
  7074  050F                     i1l2977:	
  7075                           
  7076                           ;nrf24l01.c: 158: RXPacket.Message[i] = nrf24l01SPISend(0);
  7077  050F  3000               	movlw	0
  7078  0510  318D  25F0  3184   	fcall	_nrf24l01SPISend
  7079  0513  00F8               	movwf	??_nrf24l01ReceivePacket
  7080  0514  087A               	movf	nrf24l01ReceivePacket@i,w
  7081  0515  3E41               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  7082  0516  0086               	movwf	6
  7083  0517  3001               	movlw	1	; select bank2/3
  7084  0518  0087               	movwf	7
  7085  0519  0878               	movf	??_nrf24l01ReceivePacket,w
  7086  051A  0081               	movwf	1
  7087  051B  3001               	movlw	1
  7088  051C  00F8               	movwf	??_nrf24l01ReceivePacket
  7089  051D  0878               	movf	??_nrf24l01ReceivePacket,w
  7090  051E  07FA               	addwf	nrf24l01ReceivePacket@i,f
  7091  051F                     i1l2981:	
  7092  051F  0879               	movf	nrf24l01ReceivePacket@width,w
  7093  0520  027A               	subwf	nrf24l01ReceivePacket@i,w
  7094  0521  1803               	skipnc
  7095  0522  2D27               	goto	i1l2985
  7096  0523  3020               	movlw	32
  7097  0524  027A               	subwf	nrf24l01ReceivePacket@i,w
  7098  0525  1C03               	skipc
  7099  0526  2D0F               	goto	i1l2977
  7100  0527                     i1l2985:	
  7101                           
  7102                           ;nrf24l01.c: 159: };nrf24l01.c: 162: nrf24l01SPIEnd();
  7103  0527  318D  25D9  3184   	fcall	_nrf24l01SPIEnd
  7104                           
  7105                           ;nrf24l01.c: 164: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  7106  052A  01F1               	clrf	i1nrf24l01Send@data
  7107  052B  3009               	movlw	9
  7108  052C  318E  2699  3184   	fcall	i1_nrf24l01Send
  7109  052F  00F8               	movwf	??_nrf24l01ReceivePacket
  7110  0530  0022               	movlb	2	; select bank2
  7111  0531  0840               	movf	_RXPacket^(0+256),w
  7112  0532  0678               	xorwf	??_nrf24l01ReceivePacket,w
  7113  0533  39FE               	andlw	-2
  7114  0534  0678               	xorwf	??_nrf24l01ReceivePacket,w
  7115  0535  00C0               	movwf	_RXPacket^(0+256)
  7116                           
  7117                           ;nrf24l01.c: 167: nrf24l01CEHigh();
  7118  0536  318D  25C7         	fcall	_nrf24l01CEHigh
  7119  0538  0008               	return
  7120  0539                     __end_of_nrf24l01ReceivePacket:	
  7121                           
  7122                           	psect	text30
  7123  0E4D                     __ptext30:	
  7124 ;; *************** function i1_memset *****************
  7125 ;; Defined at:
  7126 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;  p1              2    0[COMMON] PTR void 
  7129 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7130 ;;  c               2    2[COMMON] int 
  7131 ;;  n               2    4[COMMON] unsigned int 
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;  memset          2    6[COMMON] PTR unsigned char 
  7134 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7135 ;; Return value:  Size  Location     Type
  7136 ;;                  1    wreg      PTR void 
  7137 ;; Registers used:
  7138 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7139 ;; Tracked objects:
  7140 ;;		On entry : 0/0
  7141 ;;		On exit  : 0/0
  7142 ;;		Unchanged: 0/0
  7143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7144 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7145 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7147 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;Total ram usage:        8 bytes
  7149 ;; Hardware stack levels used:    1
  7150 ;; This function calls:
  7151 ;;		Nothing
  7152 ;; This function is called by:
  7153 ;;		_nrf24l01ReceivePacket
  7154 ;; This function uses a non-reentrant model
  7155 ;;
  7156                           
  7157                           
  7158                           ;psect for function i1_memset
  7159  0E4D                     i1_memset:	
  7160                           
  7161                           ;incstack = 0
  7162                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7163  0E4D  0871               	movf	i1memset@p1+1,w
  7164  0E4E  00F7               	movwf	i1memset@p+1
  7165  0E4F  0870               	movf	i1memset@p1,w
  7166  0E50  00F6               	movwf	i1memset@p
  7167  0E51                     i1l2945:	
  7168  0E51  3001               	movlw	1
  7169  0E52  02F4               	subwf	i1memset@n,f
  7170  0E53  3000               	movlw	0
  7171  0E54  3BF5               	subwfb	i1memset@n+1,f
  7172  0E55  0A74               	incf	i1memset@n,w
  7173  0E56  1903               	btfsc	3,2
  7174  0E57  0A75               	incf	i1memset@n+1,w
  7175  0E58  1903               	btfsc	3,2
  7176  0E59  0008               	return
  7177  0E5A  0876               	movf	i1memset@p,w
  7178  0E5B  0086               	movwf	6
  7179  0E5C  0877               	movf	i1memset@p+1,w
  7180  0E5D  0087               	movwf	7
  7181  0E5E  0872               	movf	i1memset@c,w
  7182  0E5F  0081               	movwf	1
  7183  0E60  3001               	movlw	1
  7184  0E61  07F6               	addwf	i1memset@p,f
  7185  0E62  3000               	movlw	0
  7186  0E63  3DF7               	addwfc	i1memset@p+1,f
  7187  0E64  2E51               	goto	i1l2945
  7188  0E65                     __end_ofi1_memset:	
  7189                           ;	Return value of i1_memset is never used
  7190                           
  7191                           
  7192                           	psect	text31
  7193  0EEB                     __ptext31:	
  7194 ;; *************** function _nrf24l01CheckACK *****************
  7195 ;; Defined at:
  7196 ;;		line 96 in file "nrf24l01.c"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;		None
  7199 ;; Auto vars:     Size  Location     Type
  7200 ;;		None
  7201 ;; Return value:  Size  Location     Type
  7202 ;;                  1    wreg      void 
  7203 ;; Registers used:
  7204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7213 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7214 ;;Total ram usage:        1 bytes
  7215 ;; Hardware stack levels used:    1
  7216 ;; Hardware stack levels required when called:    4
  7217 ;; This function calls:
  7218 ;;		_strcmp
  7219 ;;		i1_nrf24l01SetRXMode
  7220 ;; This function is called by:
  7221 ;;		_nrf24l01ISR
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           
  7226                           ;psect for function _nrf24l01CheckACK
  7227  0EEB                     _nrf24l01CheckACK:	
  7228                           
  7229                           ;nrf24l01.c: 100: if (!RXPacket.packetData.IsACK){
  7230                           
  7231                           ;incstack = 0
  7232                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7233  0EEB  0022               	movlb	2	; select bank2
  7234  0EEC  1DC0               	btfss	_RXPacket^(0+256),3
  7235  0EED  0008               	return
  7236                           
  7237                           ;nrf24l01.c: 102: };nrf24l01.c: 105: nrf24l01.RXPending = 0;
  7238                           
  7239                           ;nrf24l01.c: 101: return;
  7240  0EEE  0020               	movlb	0	; select bank0
  7241  0EEF  10DB               	bcf	_nrf24l01,1	;volatile
  7242                           
  7243                           ;nrf24l01.c: 108: if (!TXPacket->packetData.ACKRequest){
  7244  0EF0  0859               	movf	_TXPacket,w
  7245  0EF1  0086               	movwf	6
  7246  0EF2  0187               	clrf	7
  7247  0EF3  1D01               	btfss	1,2
  7248  0EF4  0008               	return
  7249                           
  7250                           ;nrf24l01.c: 110: };nrf24l01.c: 113: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
  7251                           
  7252                           ;nrf24l01.c: 109: return;
  7253  0EF5  3041               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  7254  0EF6  00F7               	movwf	??_nrf24l01CheckACK
  7255  0EF7  0877               	movf	??_nrf24l01CheckACK,w
  7256  0EF8  00F0               	movwf	strcmp@s2
  7257  0EF9  0859               	movf	_TXPacket,w
  7258  0EFA  3E01               	addlw	1
  7259  0EFB  318F  27B4  318E   	fcall	_strcmp
  7260  0EFE  0870               	movf	?_strcmp,w
  7261  0EFF  0471               	iorwf	?_strcmp+1,w
  7262  0F00  1D03               	btfss	3,2
  7263  0F01  0008               	return
  7264                           
  7265                           ;nrf24l01.c: 115: };nrf24l01.c: 122: TXPacket->packetData.ACKRequest = 0;
  7266                           
  7267                           ;nrf24l01.c: 114: return;
  7268  0F02  0020               	movlb	0	; select bank0
  7269  0F03  0859               	movf	_TXPacket,w
  7270  0F04  0086               	movwf	6
  7271  0F05  0187               	clrf	7
  7272  0F06  1101               	bcf	1,2
  7273                           
  7274                           ;nrf24l01.c: 125: nrf24l01SetRXMode(0);
  7275  0F07  3000               	movlw	0
  7276  0F08  3186  26D9         	fcall	i1_nrf24l01SetRXMode
  7277  0F0A  0008               	return
  7278  0F0B                     __end_of_nrf24l01CheckACK:	
  7279                           
  7280                           	psect	text32
  7281  06D9                     __ptext32:	
  7282 ;; *************** function i1_nrf24l01SetRXMode *****************
  7283 ;; Defined at:
  7284 ;;		line 54 in file "nrf24l01.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;  rxMode          1    wreg     unsigned char 
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;  rxMode          1    6[COMMON] unsigned char 
  7289 ;;  nrf24l01SetR    1    5[COMMON] struct .
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  1    wreg      void 
  7292 ;; Registers used:
  7293 ;;		wreg, status,2, status,0, pclath, cstack
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7300 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7302 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7303 ;;Total ram usage:        3 bytes
  7304 ;; Hardware stack levels used:    1
  7305 ;; Hardware stack levels required when called:    3
  7306 ;; This function calls:
  7307 ;;		_nrf24l01CEHigh
  7308 ;;		_nrf24l01CELow
  7309 ;;		i1_nrf24l01Send
  7310 ;; This function is called by:
  7311 ;;		_nrf24l01CheckACK
  7312 ;;		_nrf24l01ISR
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           
  7317                           ;psect for function i1_nrf24l01SetRXMode
  7318  06D9                     i1_nrf24l01SetRXMode:	
  7319                           
  7320                           ;incstack = 0
  7321                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  7322                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  7323  06D9  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  7324                           
  7325                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send((unsigned
      +                          ) 0b00000000 | (unsigned) 0x00, 0);
  7326  06DA  01F1               	clrf	i1nrf24l01Send@data
  7327  06DB  3000               	movlw	0
  7328  06DC  318E  2699  3186   	fcall	i1_nrf24l01Send
  7329  06DF  00F4               	movwf	??i1_nrf24l01SetRXMode
  7330  06E0  0874               	movf	??i1_nrf24l01SetRXMode,w
  7331  06E1  00F5               	movwf	i1nrf24l01SetRXMode@config
  7332                           
  7333                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  7334  06E2  0875               	movf	i1nrf24l01SetRXMode@config,w
  7335  06E3  3901               	andlw	1
  7336  06E4  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  7337  06E5  1903               	skipnz
  7338  06E6  2F09               	goto	i1l2273
  7339                           
  7340                           ;nrf24l01.c: 65: nrf24l01CELow();
  7341  06E7  318D  25CA  3186   	fcall	_nrf24l01CELow
  7342                           
  7343                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7344  06EA  30A0               	movlw	160
  7345  06EB                     u182_27:	
  7346  06EB  3200               	nop2
  7347  06EC  0B89               	decfsz	9,f
  7348  06ED  2EEB               	goto	u182_27
  7349                           
  7350                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  7351  06EE  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7352  06EF  3901               	andlw	1
  7353  06F0  1075               	bcf	i1nrf24l01SetRXMode@config,0
  7354  06F1  1D03               	skipz
  7355  06F2  1475               	bsf	i1nrf24l01SetRXMode@config,0
  7356                           
  7357                           ;nrf24l01.c: 70: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  7358  06F3  0875               	movf	i1nrf24l01SetRXMode@config,w
  7359  06F4  00F4               	movwf	??i1_nrf24l01SetRXMode
  7360  06F5  0874               	movf	??i1_nrf24l01SetRXMode,w
  7361  06F6  00F1               	movwf	i1nrf24l01Send@data
  7362  06F7  3020               	movlw	32
  7363  06F8  318E  2699  3186   	fcall	i1_nrf24l01Send
  7364                           
  7365                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7366  06FB  30A0               	movlw	160
  7367  06FC                     u183_27:	
  7368  06FC  3200               	nop2
  7369  06FD  0B89               	decfsz	9,f
  7370  06FE  2EFC               	goto	u183_27
  7371                           
  7372                           ;nrf24l01.c: 76: if (rxMode){
  7373  06FF  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7374  0700  1903               	btfsc	3,2
  7375  0701  2F09               	goto	i1l2273
  7376                           
  7377                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  7378  0702  318D  25C7  3186   	fcall	_nrf24l01CEHigh
  7379                           
  7380                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7381  0705  30A0               	movlw	160
  7382  0706                     u184_27:	
  7383  0706  3200               	nop2
  7384  0707  0B89               	decfsz	9,f
  7385  0708  2F06               	goto	u184_27
  7386  0709                     i1l2273:	
  7387                           
  7388                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  7389  0709  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7390  070A  3901               	andlw	1
  7391  070B  0020               	movlb	0	; select bank0
  7392  070C  115B               	bcf	_nrf24l01,2	;volatile
  7393  070D  1D03               	skipz
  7394  070E  155B               	bsf	_nrf24l01,2	;volatile
  7395  070F  0008               	return
  7396  0710                     __end_ofi1_nrf24l01SetRXMode:	
  7397                           
  7398                           	psect	text33
  7399  0E99                     __ptext33:	
  7400 ;; *************** function i1_nrf24l01Send *****************
  7401 ;; Defined at:
  7402 ;;		line 9 in file "nrf24l01.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;  command         1    wreg     unsigned char 
  7405 ;;  data            1    1[COMMON] unsigned char 
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;  command         1    3[COMMON] unsigned char 
  7408 ;; Return value:  Size  Location     Type
  7409 ;;                  1    wreg      unsigned char 
  7410 ;; Registers used:
  7411 ;;		wreg, status,2, status,0, pclath, cstack
  7412 ;; Tracked objects:
  7413 ;;		On entry : 0/0
  7414 ;;		On exit  : 0/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7417 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7419 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7420 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;Total ram usage:        3 bytes
  7422 ;; Hardware stack levels used:    1
  7423 ;; Hardware stack levels required when called:    2
  7424 ;; This function calls:
  7425 ;;		_enableInterrupts
  7426 ;;		_nrf24l01SPIEnd
  7427 ;;		_nrf24l01SPISend
  7428 ;;		_nrf24l01SPIStart
  7429 ;; This function is called by:
  7430 ;;		_nrf24l01ReceivePacket
  7431 ;;		_nrf24l01ISR
  7432 ;;		i1_nrf24l01SetRXMode
  7433 ;; This function uses a non-reentrant model
  7434 ;;
  7435                           
  7436                           
  7437                           ;psect for function i1_nrf24l01Send
  7438  0E99                     i1_nrf24l01Send:	
  7439                           
  7440                           ;incstack = 0
  7441                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  7442                           ;i1nrf24l01Send@command stored from wreg
  7443  0E99  00F3               	movwf	i1nrf24l01Send@command
  7444                           
  7445                           ;nrf24l01.c: 12: enableInterrupts(0);
  7446  0E9A  3000               	movlw	0
  7447  0E9B  318D  25E0  318E   	fcall	_enableInterrupts
  7448                           
  7449                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  7450  0E9E  318D  25E8  318E   	fcall	_nrf24l01SPIStart
  7451                           
  7452                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  7453  0EA1  0873               	movf	i1nrf24l01Send@command,w
  7454  0EA2  318D  25F0  318E   	fcall	_nrf24l01SPISend
  7455                           
  7456                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  7457  0EA5  0871               	movf	i1nrf24l01Send@data,w
  7458  0EA6  318D  25F0  318E   	fcall	_nrf24l01SPISend
  7459  0EA9  00F2               	movwf	??i1_nrf24l01Send
  7460  0EAA  0872               	movf	??i1_nrf24l01Send,w
  7461  0EAB  00F1               	movwf	i1nrf24l01Send@data
  7462                           
  7463                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  7464  0EAC  318D  25D9  318E   	fcall	_nrf24l01SPIEnd
  7465                           
  7466                           ;nrf24l01.c: 27: enableInterrupts(1);
  7467  0EAF  3001               	movlw	1
  7468  0EB0  318D  25E0         	fcall	_enableInterrupts
  7469                           
  7470                           ;nrf24l01.c: 29: return data;
  7471  0EB2  0871               	movf	i1nrf24l01Send@data,w
  7472  0EB3  0008               	return
  7473  0EB4                     __end_ofi1_nrf24l01Send:	
  7474                           
  7475                           	psect	text34
  7476  0DE8                     __ptext34:	
  7477 ;; *************** function _nrf24l01SPIStart *****************
  7478 ;; Defined at:
  7479 ;;		line 65 in file "interface.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;		None
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;		None
  7484 ;; Return value:  Size  Location     Type
  7485 ;;                  1    wreg      void 
  7486 ;; Registers used:
  7487 ;;		wreg, status,2, status,0, pclath, cstack
  7488 ;; Tracked objects:
  7489 ;;		On entry : 0/0
  7490 ;;		On exit  : 0/0
  7491 ;;		Unchanged: 0/0
  7492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;Total ram usage:        0 bytes
  7498 ;; Hardware stack levels used:    1
  7499 ;; Hardware stack levels required when called:    8
  7500 ;; This function calls:
  7501 ;;		_nrf24l01CSLow
  7502 ;; This function is called by:
  7503 ;;		_nrf24l01Send
  7504 ;;		_nrf24l01ReceivePacket
  7505 ;;		_nrf24l01SendPacket
  7506 ;;		_nrf24l01InitRegisters
  7507 ;;		i1_nrf24l01Send
  7508 ;; This function uses a non-reentrant model
  7509 ;;
  7510                           
  7511                           
  7512                           ;psect for function _nrf24l01SPIStart
  7513  0DE8                     _nrf24l01SPIStart:	
  7514                           
  7515                           ;interface.c: 66: nrf24l01CSLow();
  7516                           
  7517                           ;incstack = 0
  7518 ;; hardware stack exceeded
  7519                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
  7520  0DE8  318D  25D0  318D   	fcall	_nrf24l01CSLow
  7521                           
  7522                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
  7523  0DEB  300D               	movlw	13
  7524  0DEC                     u185_27:	
  7525  0DEC  0B89               	decfsz	9,f
  7526  0DED  2DEC               	goto	u185_27
  7527  0DEE  0000               	nop
  7528  0DEF  0008               	return
  7529  0DF0                     __end_of_nrf24l01SPIStart:	
  7530                           
  7531                           	psect	text35
  7532  0DD0                     __ptext35:	
  7533 ;; *************** function _nrf24l01CSLow *****************
  7534 ;; Defined at:
  7535 ;;		line 18 in file "interface.c"
  7536 ;; Parameters:    Size  Location     Type
  7537 ;;		None
  7538 ;; Auto vars:     Size  Location     Type
  7539 ;;		None
  7540 ;; Return value:  Size  Location     Type
  7541 ;;                  1    wreg      void 
  7542 ;; Registers used:
  7543 ;;		None
  7544 ;; Tracked objects:
  7545 ;;		On entry : 0/0
  7546 ;;		On exit  : 0/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7553 ;;Total ram usage:        0 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; Hardware stack levels required when called:    7
  7556 ;; This function calls:
  7557 ;;		Nothing
  7558 ;; This function is called by:
  7559 ;;		_nrf24l01SPIStart
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           
  7564                           ;psect for function _nrf24l01CSLow
  7565  0DD0                     _nrf24l01CSLow:	
  7566                           
  7567                           ;interface.c: 19: PORTAbits.RA1 = 0;
  7568                           
  7569                           ;incstack = 0
  7570 ;; hardware stack exceeded
  7571                           ; Regs used in _nrf24l01CSLow: []
  7572  0DD0  0020               	movlb	0	; select bank0
  7573  0DD1  108C               	bcf	12,1	;volatile
  7574  0DD2  0008               	return
  7575  0DD3                     __end_of_nrf24l01CSLow:	
  7576                           
  7577                           	psect	text36
  7578  0DF0                     __ptext36:	
  7579 ;; *************** function _nrf24l01SPISend *****************
  7580 ;; Defined at:
  7581 ;;		line 52 in file "interface.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  data            1    wreg     unsigned char 
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;  data            1    0[COMMON] unsigned char 
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  1    wreg      unsigned char 
  7588 ;; Registers used:
  7589 ;;		wreg
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;Total ram usage:        0 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:    7
  7602 ;; This function calls:
  7603 ;;		Nothing
  7604 ;; This function is called by:
  7605 ;;		_nrf24l01Send
  7606 ;;		_nrf24l01ReceivePacket
  7607 ;;		_nrf24l01SendPacket
  7608 ;;		_nrf24l01InitRegisters
  7609 ;;		i1_nrf24l01Send
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           
  7614                           ;psect for function _nrf24l01SPISend
  7615  0DF0                     _nrf24l01SPISend:	
  7616                           
  7617                           ;incstack = 0
  7618 ;; hardware stack exceeded
  7619                           ; Regs used in _nrf24l01SPISend: [wreg]
  7620                           ;nrf24l01SPISend@data stored from wreg
  7621  0DF0  00F0               	movwf	nrf24l01SPISend@data
  7622                           
  7623                           ;interface.c: 53: SSP1BUF = data;
  7624  0DF1  0870               	movf	nrf24l01SPISend@data,w
  7625  0DF2  0024               	movlb	4	; select bank4
  7626  0DF3  0091               	movwf	17	;volatile
  7627                           
  7628                           ;interface.c: 55: PORTCbits.RC4 = 1;
  7629  0DF4  0020               	movlb	0	; select bank0
  7630  0DF5  160E               	bsf	14,4	;volatile
  7631  0DF6                     i1l94:	
  7632                           ;interface.c: 57: while (!SSP1STATbits.BF){
  7633                           
  7634  0DF6  0024               	movlb	4	; select bank4
  7635  0DF7  1814               	btfsc	20,0	;volatile
  7636  0DF8  2DFB               	goto	i1l1943
  7637                           
  7638                           ;interface.c: 58: __nop();
  7639  0DF9  0000               	nop
  7640  0DFA  2DF6               	goto	i1l94
  7641  0DFB                     i1l1943:	
  7642                           
  7643                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
  7644  0DFB  0811               	movf	17,w	;volatile
  7645  0DFC  0008               	return
  7646  0DFD                     __end_of_nrf24l01SPISend:	
  7647                           
  7648                           	psect	text37
  7649  0DD9                     __ptext37:	
  7650 ;; *************** function _nrf24l01SPIEnd *****************
  7651 ;; Defined at:
  7652 ;;		line 71 in file "interface.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;		None
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;		None
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  1    wreg      void 
  7659 ;; Registers used:
  7660 ;;		wreg, status,2, status,0, pclath, cstack
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;Total ram usage:        0 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    8
  7673 ;; This function calls:
  7674 ;;		_nrf24l01CSHigh
  7675 ;; This function is called by:
  7676 ;;		_nrf24l01Send
  7677 ;;		_nrf24l01ReceivePacket
  7678 ;;		_nrf24l01SendPacket
  7679 ;;		_nrf24l01InitRegisters
  7680 ;;		i1_nrf24l01Send
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           
  7685                           ;psect for function _nrf24l01SPIEnd
  7686  0DD9                     _nrf24l01SPIEnd:	
  7687                           
  7688                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
  7689                           
  7690                           ;incstack = 0
  7691 ;; hardware stack exceeded
  7692                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
  7693  0DD9  300D               	movlw	13
  7694  0DDA                     u186_27:	
  7695  0DDA  0B89               	decfsz	9,f
  7696  0DDB  2DDA               	goto	u186_27
  7697  0DDC  0000               	nop
  7698                           
  7699                           ;interface.c: 73: nrf24l01CSHigh();
  7700  0DDD  318D  25CD         	fcall	_nrf24l01CSHigh
  7701  0DDF  0008               	return
  7702  0DE0                     __end_of_nrf24l01SPIEnd:	
  7703                           
  7704                           	psect	text38
  7705  0DCD                     __ptext38:	
  7706 ;; *************** function _nrf24l01CSHigh *****************
  7707 ;; Defined at:
  7708 ;;		line 23 in file "interface.c"
  7709 ;; Parameters:    Size  Location     Type
  7710 ;;		None
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;		None
  7713 ;; Return value:  Size  Location     Type
  7714 ;;                  1    wreg      void 
  7715 ;; Registers used:
  7716 ;;		None
  7717 ;; Tracked objects:
  7718 ;;		On entry : 0/0
  7719 ;;		On exit  : 0/0
  7720 ;;		Unchanged: 0/0
  7721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7726 ;;Total ram usage:        0 bytes
  7727 ;; Hardware stack levels used:    1
  7728 ;; Hardware stack levels required when called:    7
  7729 ;; This function calls:
  7730 ;;		Nothing
  7731 ;; This function is called by:
  7732 ;;		_nrf24l01SPIEnd
  7733 ;; This function uses a non-reentrant model
  7734 ;;
  7735                           
  7736                           
  7737                           ;psect for function _nrf24l01CSHigh
  7738  0DCD                     _nrf24l01CSHigh:	
  7739                           
  7740                           ;interface.c: 24: PORTAbits.RA1 = 1;
  7741                           
  7742                           ;incstack = 0
  7743 ;; hardware stack exceeded
  7744                           ; Regs used in _nrf24l01CSHigh: []
  7745  0DCD  0020               	movlb	0	; select bank0
  7746  0DCE  148C               	bsf	12,1	;volatile
  7747  0DCF  0008               	return
  7748  0DD0                     __end_of_nrf24l01CSHigh:	
  7749                           
  7750                           	psect	text39
  7751  0DE0                     __ptext39:	
  7752 ;; *************** function _enableInterrupts *****************
  7753 ;; Defined at:
  7754 ;;		line 77 in file "interface.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  enable          1    wreg     unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  enable          1    0[COMMON] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;                  1    wreg      void 
  7761 ;; Registers used:
  7762 ;;		wreg, status,0
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;Total ram usage:        0 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    7
  7775 ;; This function calls:
  7776 ;;		Nothing
  7777 ;; This function is called by:
  7778 ;;		_nrf24l01Send
  7779 ;;		_nrf24l01SendPacket
  7780 ;;		i1_nrf24l01Send
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           
  7785                           ;psect for function _enableInterrupts
  7786  0DE0                     _enableInterrupts:	
  7787                           
  7788                           ;incstack = 0
  7789 ;; hardware stack exceeded
  7790                           ; Regs used in _enableInterrupts: [wreg+status,0]
  7791                           ;enableInterrupts@enable stored from wreg
  7792  0DE0  00F0               	movwf	enableInterrupts@enable
  7793                           
  7794                           ;interface.c: 78: PIE0bits.INTE = enable;
  7795  0DE1  0C70               	rrf	enableInterrupts@enable,w
  7796  0DE2  0021               	movlb	1	; select bank1
  7797  0DE3  1C03               	skipc
  7798  0DE4  1010               	bcf	16,0	;volatile
  7799  0DE5  1803               	skipnc
  7800  0DE6  1410               	bsf	16,0	;volatile
  7801  0DE7  0008               	return
  7802  0DE8                     __end_of_enableInterrupts:	
  7803                           
  7804                           	psect	text40
  7805  0DCA                     __ptext40:	
  7806 ;; *************** function _nrf24l01CELow *****************
  7807 ;; Defined at:
  7808 ;;		line 8 in file "interface.c"
  7809 ;; Parameters:    Size  Location     Type
  7810 ;;		None
  7811 ;; Auto vars:     Size  Location     Type
  7812 ;;		None
  7813 ;; Return value:  Size  Location     Type
  7814 ;;                  1    wreg      void 
  7815 ;; Registers used:
  7816 ;;		None
  7817 ;; Tracked objects:
  7818 ;;		On entry : 0/0
  7819 ;;		On exit  : 0/0
  7820 ;;		Unchanged: 0/0
  7821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7826 ;;Total ram usage:        0 bytes
  7827 ;; Hardware stack levels used:    1
  7828 ;; Hardware stack levels required when called:    7
  7829 ;; This function calls:
  7830 ;;		Nothing
  7831 ;; This function is called by:
  7832 ;;		_nrf24l01SetRXMode
  7833 ;;		_nrf24l01ReceivePacket
  7834 ;;		_nrf24l01SendPacket
  7835 ;;		_nrf24l01Init
  7836 ;;		i1_nrf24l01SetRXMode
  7837 ;; This function uses a non-reentrant model
  7838 ;;
  7839                           
  7840                           
  7841                           ;psect for function _nrf24l01CELow
  7842  0DCA                     _nrf24l01CELow:	
  7843                           
  7844                           ;interface.c: 9: PORTAbits.RA0 = 0;
  7845                           
  7846                           ;incstack = 0
  7847 ;; hardware stack exceeded
  7848                           ; Regs used in _nrf24l01CELow: []
  7849  0DCA  0020               	movlb	0	; select bank0
  7850  0DCB  100C               	bcf	12,0	;volatile
  7851  0DCC  0008               	return
  7852  0DCD                     __end_of_nrf24l01CELow:	
  7853                           
  7854                           	psect	text41
  7855  0DC7                     __ptext41:	
  7856 ;; *************** function _nrf24l01CEHigh *****************
  7857 ;; Defined at:
  7858 ;;		line 13 in file "interface.c"
  7859 ;; Parameters:    Size  Location     Type
  7860 ;;		None
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;		None
  7863 ;; Return value:  Size  Location     Type
  7864 ;;                  1    wreg      void 
  7865 ;; Registers used:
  7866 ;;		None
  7867 ;; Tracked objects:
  7868 ;;		On entry : 0/0
  7869 ;;		On exit  : 0/0
  7870 ;;		Unchanged: 0/0
  7871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7876 ;;Total ram usage:        0 bytes
  7877 ;; Hardware stack levels used:    1
  7878 ;; Hardware stack levels required when called:    7
  7879 ;; This function calls:
  7880 ;;		Nothing
  7881 ;; This function is called by:
  7882 ;;		_nrf24l01SetRXMode
  7883 ;;		_nrf24l01ReceivePacket
  7884 ;;		_nrf24l01SendPacket
  7885 ;;		_nrf24l01Init
  7886 ;;		i1_nrf24l01SetRXMode
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           
  7891                           ;psect for function _nrf24l01CEHigh
  7892  0DC7                     _nrf24l01CEHigh:	
  7893                           
  7894                           ;interface.c: 14: PORTAbits.RA0 = 1;
  7895                           
  7896                           ;incstack = 0
  7897 ;; hardware stack exceeded
  7898                           ; Regs used in _nrf24l01CEHigh: []
  7899  0DC7  0020               	movlb	0	; select bank0
  7900  0DC8  140C               	bsf	12,0	;volatile
  7901  0DC9  0008               	return
  7902  0DCA                     __end_of_nrf24l01CEHigh:	
  7903                           
  7904                           	psect	text42
  7905  0FB4                     __ptext42:	
  7906 ;; *************** function _strcmp *****************
  7907 ;; Defined at:
  7908 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  7909 ;; Parameters:    Size  Location     Type
  7910 ;;  s1              1    wreg     PTR const unsigned char 
  7911 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7912 ;;		 -> loop@packet(33), 
  7913 ;;  s2              1    0[COMMON] PTR const unsigned char 
  7914 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;  s1              1    4[COMMON] PTR const unsigned char 
  7917 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7918 ;;		 -> loop@packet(33), 
  7919 ;;  r               1    3[COMMON] char 
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  2    0[COMMON] int 
  7922 ;; Registers used:
  7923 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7929 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7931 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7932 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7933 ;;Total ram usage:        5 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; This function calls:
  7936 ;;		Nothing
  7937 ;; This function is called by:
  7938 ;;		_nrf24l01CheckACK
  7939 ;; This function uses a non-reentrant model
  7940 ;;
  7941                           
  7942                           
  7943                           ;psect for function _strcmp
  7944  0FB4                     _strcmp:	
  7945                           
  7946                           ;incstack = 0
  7947                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  7948                           ;strcmp@s1 stored from wreg
  7949  0FB4  00F4               	movwf	strcmp@s1
  7950  0FB5  2FBE               	goto	i1l2181
  7951  0FB6                     i1l2177:	
  7952  0FB6  3001               	movlw	1
  7953  0FB7  00F2               	movwf	??_strcmp
  7954  0FB8  0872               	movf	??_strcmp,w
  7955  0FB9  07F4               	addwf	strcmp@s1,f
  7956  0FBA  3001               	movlw	1
  7957  0FBB  00F2               	movwf	??_strcmp
  7958  0FBC  0872               	movf	??_strcmp,w
  7959  0FBD  07F0               	addwf	strcmp@s2,f
  7960  0FBE                     i1l2181:	
  7961  0FBE  0874               	movf	strcmp@s1,w
  7962  0FBF  0086               	movwf	6
  7963  0FC0  0187               	clrf	7
  7964  0FC1  0870               	movf	strcmp@s2,w
  7965  0FC2  0084               	movwf	4
  7966  0FC3  3001               	movlw	1	; select bank2/3
  7967  0FC4  0085               	movwf	5
  7968  0FC5  0300               	decf	0,w
  7969  0FC6  3AFF               	xorlw	255
  7970  0FC7  0701               	addwf	1,w
  7971  0FC8  00F2               	movwf	??_strcmp
  7972  0FC9  0872               	movf	??_strcmp,w
  7973  0FCA  00F3               	movwf	strcmp@r
  7974  0FCB  0873               	movf	strcmp@r,w
  7975  0FCC  1D03               	btfss	3,2
  7976  0FCD  2FD4               	goto	i1l2185
  7977  0FCE  0874               	movf	strcmp@s1,w
  7978  0FCF  0086               	movwf	6
  7979  0FD0  0187               	clrf	7
  7980  0FD1  0801               	movf	1,w
  7981  0FD2  1D03               	btfss	3,2
  7982  0FD3  2FB6               	goto	i1l2177
  7983  0FD4                     i1l2185:	
  7984  0FD4  0873               	movf	strcmp@r,w
  7985  0FD5  00F0               	movwf	?_strcmp
  7986  0FD6  01F1               	clrf	?_strcmp+1
  7987  0FD7  1BF0               	btfsc	?_strcmp,7
  7988  0FD8  03F1               	decf	?_strcmp+1,f
  7989  0FD9  0008               	return
  7990  0FDA                     __end_of_strcmp:	
  7991                           
  7992                           	psect	text43
  7993  0E35                     __ptext43:	
  7994 ;; *************** function _exception *****************
  7995 ;; Defined at:
  7996 ;;		line 81 in file "interface.c"
  7997 ;; Parameters:    Size  Location     Type
  7998 ;;  exception       1    wreg     unsigned char 
  7999 ;; Auto vars:     Size  Location     Type
  8000 ;;  exception       1   12[COMMON] unsigned char 
  8001 ;; Return value:  Size  Location     Type
  8002 ;;                  1    wreg      void 
  8003 ;; Registers used:
  8004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8005 ;; Tracked objects:
  8006 ;;		On entry : 0/0
  8007 ;;		On exit  : 0/0
  8008 ;;		Unchanged: 0/0
  8009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;Total ram usage:        3 bytes
  8015 ;; Hardware stack levels used:    1
  8016 ;; Hardware stack levels required when called:    2
  8017 ;; This function calls:
  8018 ;;		___wmul
  8019 ;;		i1_flashUpdate
  8020 ;; This function is called by:
  8021 ;;		_nrf24l01ISR
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025                           
  8026                           ;psect for function _exception
  8027  0E35                     _exception:	
  8028                           
  8029                           ;incstack = 0
  8030                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8031                           ;exception@exception stored from wreg
  8032  0E35  00FC               	movwf	exception@exception
  8033                           
  8034                           ;interface.c: 82: romData.bootMode = (unsigned) (exception * 10);
  8035  0E36  087C               	movf	exception@exception,w
  8036  0E37  00FA               	movwf	??_exception
  8037  0E38  01FB               	clrf	??_exception+1
  8038  0E39  087A               	movf	??_exception,w
  8039  0E3A  00F0               	movwf	___wmul@multiplier
  8040  0E3B  087B               	movf	??_exception+1,w
  8041  0E3C  00F1               	movwf	___wmul@multiplier+1
  8042  0E3D  300A               	movlw	10
  8043  0E3E  00F2               	movwf	___wmul@multiplicand
  8044  0E3F  3000               	movlw	0
  8045  0E40  00F3               	movwf	___wmul@multiplicand+1
  8046  0E41  318E  267E  318E   	fcall	___wmul
  8047  0E44  0871               	movf	?___wmul+1,w
  8048  0E45  0020               	movlb	0	; select bank0
  8049  0E46  00EE               	movwf	_romData+18
  8050  0E47  0870               	movf	?___wmul,w
  8051  0E48  00ED               	movwf	_romData+17
  8052                           
  8053                           ;interface.c: 83: flashUpdate();
  8054  0E49  318F  274B         	fcall	i1_flashUpdate
  8055  0E4B  0001               	reset	;# 
  8056  0E4C  0008               	return
  8057  0E4D                     __end_of_exception:	
  8058                           
  8059                           	psect	text44
  8060  0F4B                     __ptext44:	
  8061 ;; *************** function i1_flashUpdate *****************
  8062 ;; Defined at:
  8063 ;;		line 97 in file "flash.c"
  8064 ;; Parameters:    Size  Location     Type
  8065 ;;		None
  8066 ;; Auto vars:     Size  Location     Type
  8067 ;;  flashUpdate     2    8[COMMON] unsigned int 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;                  1    wreg      void 
  8070 ;; Registers used:
  8071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8078 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8080 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;Total ram usage:        4 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; Hardware stack levels required when called:    1
  8084 ;; This function calls:
  8085 ;;		i1_flashWriteByte
  8086 ;; This function is called by:
  8087 ;;		_exception
  8088 ;; This function uses a non-reentrant model
  8089 ;;
  8090                           
  8091                           
  8092                           ;psect for function i1_flashUpdate
  8093  0F4B                     i1_flashUpdate:	
  8094                           
  8095                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  8096                           
  8097                           ;incstack = 0
  8098                           ; Regs used in i1_flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8099  0F4B  01F8               	clrf	i1flashUpdate@i
  8100  0F4C  01F9               	clrf	i1flashUpdate@i+1
  8101  0F4D                     L3:	
  8102  0F4D  3000               	movlw	0
  8103  0F4E  0279               	subwf	i1flashUpdate@i+1,w
  8104  0F4F  3020               	movlw	32
  8105  0F50  1903               	skipnz
  8106  0F51  0278               	subwf	i1flashUpdate@i,w
  8107  0F52  1803               	btfsc	3,0
  8108  0F53  0008               	return
  8109                           
  8110                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  8111  0F54  0879               	movf	i1flashUpdate@i+1,w
  8112  0F55  00F1               	movwf	i1flashWriteByte@offset+1
  8113  0F56  0878               	movf	i1flashUpdate@i,w
  8114  0F57  00F0               	movwf	i1flashWriteByte@offset
  8115  0F58  0878               	movf	i1flashUpdate@i,w
  8116  0F59  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  8117  0F5A  0086               	movwf	6
  8118  0F5B  3001               	movlw	1	; select bank2/3
  8119  0F5C  0087               	movwf	7
  8120  0F5D  0801               	movf	1,w
  8121  0F5E  00F6               	movwf	??i1_flashUpdate
  8122  0F5F  01F7               	clrf	??i1_flashUpdate+1
  8123  0F60  0876               	movf	??i1_flashUpdate,w
  8124  0F61  00F2               	movwf	i1flashWriteByte@data
  8125  0F62  0877               	movf	??i1_flashUpdate+1,w
  8126  0F63  00F3               	movwf	i1flashWriteByte@data+1
  8127  0F64  3187  27A8  318F   	fcall	i1_flashWriteByte
  8128  0F67  3001               	movlw	1
  8129  0F68  07F8               	addwf	i1flashUpdate@i,f
  8130  0F69  3000               	movlw	0
  8131  0F6A  3DF9               	addwfc	i1flashUpdate@i+1,f
  8132  0F6B  2F4D               	goto	L3
  8133  0F6C                     __end_ofi1_flashUpdate:	
  8134                           
  8135                           	psect	text45
  8136  07A8                     __ptext45:	
  8137 ;; *************** function i1_flashWriteByte *****************
  8138 ;; Defined at:
  8139 ;;		line 8 in file "flash.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;  offset          2    0[COMMON] unsigned int 
  8142 ;;  data            2    2[COMMON] unsigned int 
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;  flashWriteBy    2    4[COMMON] unsigned int 
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  1    wreg      void 
  8147 ;; Registers used:
  8148 ;;		wreg, status,2, status,0
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8154 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;Total ram usage:        6 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; This function calls:
  8161 ;;		Nothing
  8162 ;; This function is called by:
  8163 ;;		i1_flashUpdate
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           
  8168                           ;psect for function i1_flashWriteByte
  8169  07A8                     i1_flashWriteByte:	
  8170                           
  8171                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  8172                           
  8173                           ;incstack = 0
  8174                           ; Regs used in i1_flashWriteByte: [wreg+status,2+status,0]
  8175  07A8  138B               	bcf	11,7	;volatile
  8176                           
  8177                           ;flash.c: 15: PMCON1 = 0x00;
  8178  07A9  0031               	movlb	17	; select bank17
  8179  07AA  0195               	clrf	21	;volsfr
  8180                           
  8181                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  8182  07AB  0870               	movf	i1flashWriteByte@offset,w
  8183  07AC  3EE0               	addlw	224
  8184  07AD  00F4               	movwf	i1flashWriteByte@address
  8185  07AE  301F               	movlw	31
  8186  07AF  3D71               	addwfc	i1flashWriteByte@offset+1,w
  8187  07B0  00F5               	movwf	i1flashWriteByte@address+1
  8188                           
  8189                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  8190  07B1  0874               	movf	i1flashWriteByte@address,w
  8191  07B2  0091               	movwf	17	;volatile
  8192                           
  8193                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  8194  07B3  0875               	movf	i1flashWriteByte@address+1,w
  8195  07B4  0092               	movwf	18	;volatile
  8196                           
  8197                           ;flash.c: 21: PMCON1bits.FREE = 1;
  8198  07B5  1615               	bsf	21,4	;volsfr
  8199                           
  8200                           ;flash.c: 22: PMCON1bits.WREN = 1;
  8201  07B6  1515               	bsf	21,2	;volsfr
  8202                           
  8203                           ;flash.c: 24: PMCON2 = 0x55;
  8204  07B7  3055               	movlw	85
  8205  07B8  0096               	movwf	22	;volsfr
  8206                           
  8207                           ;flash.c: 25: PMCON2 = 0xAA;
  8208  07B9  30AA               	movlw	170
  8209  07BA  0096               	movwf	22	;volsfr
  8210                           
  8211                           ;flash.c: 27: PMCON1bits.WR = 1;
  8212  07BB  1495               	bsf	21,1	;volsfr
  8213                           
  8214                           ;flash.c: 29: __nop();
  8215  07BC  0000               	nop
  8216                           
  8217                           ;flash.c: 30: __nop();
  8218  07BD  0000               	nop
  8219                           
  8220                           ;flash.c: 32: PMCON1bits.WREN = 0;
  8221  07BE  0031               	movlb	17	; select bank17
  8222  07BF  1115               	bcf	21,2	;volsfr
  8223                           
  8224                           ;flash.c: 36: PMCON1 = 0x00;
  8225  07C0  0195               	clrf	21	;volsfr
  8226                           
  8227                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  8228  07C1  0874               	movf	i1flashWriteByte@address,w
  8229  07C2  0091               	movwf	17	;volatile
  8230                           
  8231                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  8232  07C3  0875               	movf	i1flashWriteByte@address+1,w
  8233  07C4  0092               	movwf	18	;volatile
  8234                           
  8235                           ;flash.c: 41: PMCON1bits.FREE = 0;
  8236  07C5  1215               	bcf	21,4	;volsfr
  8237                           
  8238                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  8239  07C6  1695               	bsf	21,5	;volsfr
  8240                           
  8241                           ;flash.c: 43: PMCON1bits.WREN = 1;
  8242  07C7  1515               	bsf	21,2	;volsfr
  8243                           
  8244                           ;flash.c: 45: PMDATL = (data >> 0);
  8245  07C8  0872               	movf	i1flashWriteByte@data,w
  8246  07C9  0093               	movwf	19	;volatile
  8247                           
  8248                           ;flash.c: 46: PMDATH = (data >> 8);
  8249  07CA  0873               	movf	i1flashWriteByte@data+1,w
  8250  07CB  0094               	movwf	20	;volatile
  8251                           
  8252                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  8253  07CC  1295               	bcf	21,5	;volsfr
  8254                           
  8255                           ;flash.c: 50: PMCON2 = 0x55;
  8256  07CD  3055               	movlw	85
  8257  07CE  0096               	movwf	22	;volsfr
  8258                           
  8259                           ;flash.c: 51: PMCON2 = 0xAA;
  8260  07CF  30AA               	movlw	170
  8261  07D0  0096               	movwf	22	;volsfr
  8262                           
  8263                           ;flash.c: 53: PMCON1bits.WR = 1;
  8264  07D1  1495               	bsf	21,1	;volsfr
  8265                           
  8266                           ;flash.c: 55: __nop();
  8267  07D2  0000               	nop
  8268                           
  8269                           ;flash.c: 56: __nop();
  8270  07D3  0000               	nop
  8271                           
  8272                           ;flash.c: 58: PMCON1bits.WREN = 0;
  8273  07D4  0031               	movlb	17	; select bank17
  8274  07D5  1115               	bcf	21,2	;volsfr
  8275                           
  8276                           ;flash.c: 61: INTCONbits.GIE = 1;
  8277  07D6  178B               	bsf	11,7	;volatile
  8278  07D7  0008               	return
  8279  07D8                     __end_ofi1_flashWriteByte:	
  8280                           
  8281                           	psect	text46
  8282  0E7E                     __ptext46:	
  8283 ;; *************** function ___wmul *****************
  8284 ;; Defined at:
  8285 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  8286 ;; Parameters:    Size  Location     Type
  8287 ;;  multiplier      2    0[COMMON] unsigned int 
  8288 ;;  multiplicand    2    2[COMMON] unsigned int 
  8289 ;; Auto vars:     Size  Location     Type
  8290 ;;  product         2    4[COMMON] unsigned int 
  8291 ;; Return value:  Size  Location     Type
  8292 ;;                  2    0[COMMON] unsigned int 
  8293 ;; Registers used:
  8294 ;;		wreg, status,2, status,0
  8295 ;; Tracked objects:
  8296 ;;		On entry : 0/0
  8297 ;;		On exit  : 0/0
  8298 ;;		Unchanged: 0/0
  8299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8300 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;Total ram usage:        6 bytes
  8305 ;; Hardware stack levels used:    1
  8306 ;; This function calls:
  8307 ;;		Nothing
  8308 ;; This function is called by:
  8309 ;;		_exception
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           
  8314                           ;psect for function ___wmul
  8315  0E7E                     ___wmul:	
  8316                           
  8317                           ;incstack = 0
  8318                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8319  0E7E  01F4               	clrf	___wmul@product
  8320  0E7F  01F5               	clrf	___wmul@product+1
  8321  0E80                     i1l2201:	
  8322  0E80  1C70               	btfss	___wmul@multiplier,0
  8323  0E81  2E86               	goto	i1l450
  8324  0E82  0872               	movf	___wmul@multiplicand,w
  8325  0E83  07F4               	addwf	___wmul@product,f
  8326  0E84  0873               	movf	___wmul@multiplicand+1,w
  8327  0E85  3DF5               	addwfc	___wmul@product+1,f
  8328  0E86                     i1l450:	
  8329  0E86  3001               	movlw	1
  8330  0E87                     u109_25:	
  8331  0E87  35F2               	lslf	___wmul@multiplicand,f
  8332  0E88  0DF3               	rlf	___wmul@multiplicand+1,f
  8333  0E89  0B89               	decfsz	9,f
  8334  0E8A  2E87               	goto	u109_25
  8335  0E8B  3001               	movlw	1
  8336  0E8C                     u110_25:	
  8337  0E8C  36F1               	lsrf	___wmul@multiplier+1,f
  8338  0E8D  0CF0               	rrf	___wmul@multiplier,f
  8339  0E8E  0B89               	decfsz	9,f
  8340  0E8F  2E8C               	goto	u110_25
  8341  0E90  0870               	movf	___wmul@multiplier,w
  8342  0E91  0471               	iorwf	___wmul@multiplier+1,w
  8343  0E92  1D03               	btfss	3,2
  8344  0E93  2E80               	goto	i1l2201
  8345  0E94  0875               	movf	___wmul@product+1,w
  8346  0E95  00F1               	movwf	?___wmul+1
  8347  0E96  0874               	movf	___wmul@product,w
  8348  0E97  00F0               	movwf	?___wmul
  8349  0E98  0008               	return
  8350  0E99                     __end_of___wmul:	
  8351  007E                     btemp	set	126	;btemp
  8352  007E                     int$flags	set	126
  8353  007E                     wtemp0	set	126


Data Sizes:
    Strings     40
    Constant    25
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      79
    BANK1            80     67      71
    BANK2            80      0      65
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_9(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_10(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), STR_2(CODE[2]), 
		 -> setMessage@tempString(BANK0[16]), STR_1(CODE[2]), romData.name(BANK0[16]), romData(BANK0[19]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    ultoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    sp__ltoa	PTR unsigned char  size(1) Largest target is 0

    nrf24l01SendPacket@Packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    TXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    sp__ultoa	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_10(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    setMessage@packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->i1_flashUpdate
    i1_flashUpdate->i1_flashWriteByte

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->___bmul
    _loop->_setMessage
    _setMessage->_getADCValue
    _ultoa->___lldiv
    _nrf24l01SendPacket->_strlen
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___lldiv
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    _flashUpdate->_flashWriteByte
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    _main->_loop

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0   31160
                                             56 BANK0      1     1      0
                                             34 BANK1     33    33      0
                        _flashRealod
                        _flashUpdate
                               _loop
                       _nrf24l01Init
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    2788
                                             20 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               15    15      0    2788
                                              5 BANK0     15    15      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     181
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _loop                                                38    38      0   16956
                                             52 BANK0      4     4      0
                                              0 BANK1     34    34      0
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          23    17      6    5078
                                             29 BANK0     23    17      6
                        _getADCValue (ARG)
                             _memset
                             _strcat
                              _ultoa
 ---------------------------------------------------------------------------------
 (2) _ultoa                                               13     7      6    1736
                                             15 BANK0     13     7      6
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     337
                                              1 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     723
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     565
                                              1 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   4     4      0    5328
                                              9 BANK0      4     4      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     126
                                              1 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2277
                                              4 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4    1460
                                             15 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     270
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     696
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              8 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              4 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    2143
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (1) _flashUpdate                                          4     4      0     423
                                              7 BANK0      4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (2) _flashWriteByte                                       6     2      4     333
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     271
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     181
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    2674
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    2674
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     639
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     211
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     1     1      0     617
                                              7 COMMON     1     1      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     3      2     216
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     589
                                             10 COMMON     3     3      0
                             ___wmul
                      i1_flashUpdate
 ---------------------------------------------------------------------------------
 (10) i1_flashUpdate                                       4     4      0     297
                                              6 COMMON     4     4      0
                   i1_flashWriteByte
 ---------------------------------------------------------------------------------
 (11) i1_flashWriteByte                                    6     2      4     207
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     270
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flashRealod
     _flashReadByte
   _flashUpdate
     _flashWriteByte
   _loop
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       _getADCValue (ARG)
         ___lldiv
         ___lmul
       _memset (ARG)
       _strcat (ARG)
       _ultoa (ARG)
         ___lldiv
         ___llmod
     _sleep
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _setMessage
     _getADCValue (ARG)
       ___lldiv
       ___lmul
     _memset (ARG)
     _strcat (ARG)
     _ultoa (ARG)
       ___lldiv
       ___llmod
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       ___wmul
       i1_flashUpdate
         i1_flashWriteByte
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     43      47       7       88.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E5      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E5      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Jul 19 16:47:14 2018

                 flashReadByte@result 0026                          flashRealod@i 002B  
                      ___bmul@product 0023                           __CFG_CP$OFF 0000  
                 ___wmul@multiplicand 0072                   nrf24l01Send@command 0023  
                         __CFG_LVP$ON 0000                                   l221 0DFD  
                                 l214 047D                                   l324 0299  
                                 l328 02AA                                   l868 03BC  
                        flashUpdate@i 0029                          __CFG_CPD$OFF 0000  
                                 _ISR 0004                                   u815 05A1  
                                 u905 0605                                   u835 05AD  
                                 u915 0610                                   u845 05C1  
                                 u855 05CD                                   u885 05EC  
                                 wreg 0009                   nrf24l01SendPacket@i 002C  
                                ?_ISR 0070                        ??_nrf24l01Init 0034  
                                l2003 05E9                                  l2005 05F7  
                                l2013 061A                                  l2121 0FE0  
                                l2009 060F                                  l2107 06D2  
                                l2123 0FEB                                  l2131 0351  
                                l2141 037E                                  l2215 0781  
                                l2127 0FF3                                  l2233 0E18  
                                l2219 078B                                  l2173 065A  
                                l2229 0E12                                  l3125 040B  
                                l2167 0648                                  l2193 0F95  
                                l2195 0FA0                                  l2451 02EA  
                                l2443 02C5                                  l2435 029E  
                                l2391 0476                                  l2463 030F  
                                l2447 02D5                                  l2631 0119  
                                l2393 04A0                                  l2473 033D  
                                l2465 0300                                  l2625 010A  
                                l2609 00B7                        ??_nrf24l01Send 0022  
                                l2475 0318                                  l2467 0314  
                                l2389 0482                                  l2805 0EBA  
                                l3189 0454                                  l1981 05AC  
                                l1993 05D7                                  l2937 0E6A  
                                l1979 059E                                  l1989 05CC  
                                STR_1 103E                          __CFG_WDTE$ON 0000  
                                STR_2 103E                                  STR_3 1036  
                                STR_4 1028                                  STR_5 101E  
                                STR_6 103A                                  STR_7 1023  
                                STR_8 1013                                  STR_9 1032  
                                u1015 0636                                  u1135 078C  
                                u1145 0793                                  u1305 02E4  
                                u1707 07E4                                  u1717 07F4  
                                u1807 06CF                                  u1727 02A6  
                                u1817 0473                                  u1737 02F1  
                                u1747 0310                                  u1757 0328  
                                u1767 0335                                  u1777 0341  
                                u1697 03EC                                  u1787 06B2  
                                u1797 06C4                                  i1l94 0DF6  
                                _WPUA 020C                                  _WPUC 020E  
      __size_of_nrf24l01InterfaceInit 001C                          __CFG_WRT$OFF 0000  
                       __CFG_FCMEN$ON 0000         __end_of_nrf24l01InterfaceInit 0EEB  
                                _main 03D0                                  _loop 017F  
                     ??_flashReadByte 0023                                  fsr0h 0005  
                                fsr1h 0007                                  indf0 0000  
                                fsr0l 0004                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
      __size_of_nrf24l01ReceivePacket 0059                         __CFG_BORV$LOW 0000  
       __end_of_nrf24l01ReceivePacket 0539                                  start 000F  
                       __CFG_CSWEN$ON 0000                     ___bmul@multiplier 0024  
                       __CFG_MCLRE$ON 0000           __size_of_nrf24l01SendPacket 00B4  
                               ??_ISR 007E                  __size_of_getADCValue 0088  
                     ??_nrf24l01CELow 0070                       ??_nrf24l01CSLow 0070  
                               ?_main 0070                                 ?_loop 0070  
                               STR_10 102D                       __end_of___lldiv 05E0  
                     __end_of___llmod 0623                        __CFG_DEBUG$OFF 0000  
                               i1l209 000D                                 i1l351 073C  
                               i1l450 0E86                enableInterrupts@enable 0070  
                    i1_flashWriteByte 07A8                            i1memset@p1 0070  
                      i1flashUpdate@i 0078                   ___lmul@multiplicand 0025  
                       __CFG_PWRTE$ON 0000                                 _sleep 0DFD  
                               _ultoa 0347                        __CFG_BOREN$OFF 0000  
                    _enableInterrupts 0DE0                                 status 0003  
                               wtemp0 007E           __end_ofi1_nrf24l01SetRXMode 0710  
                    __end_ofi1_memset 0E65        __size_of_nrf24l01ChangeTXPower 003F  
                   getADCValue@adcSum 0039         __end_of_nrf24l01ChangeTXPower 0662  
                    _nrf24l01SPIStart 0DE8                       __initialization 0011  
                    _nrf24l01CheckACK 0EEB                nrf24l01InitRegisters@i 0032  
                        __end_of_main 0458                          __end_of_loop 0293  
        nrf24l01ChangeTXPower@rfSetup 0027                      ??_nrf24l01CEHigh 0070  
                              ??_main 0058                                ??_loop 0054  
                    ??_nrf24l01CSHigh 0070                      ??_nrf24l01SPIEnd 0070  
                 _nrf24l01GetRXPacket 07FE                __size_ofi1_flashUpdate 0021  
            __size_of_nrf24l01SPISend 000D                      ___llmod@dividend 0025  
                              _ADRESH 009C                                _ADRESL 009B  
                              ?_sleep 0070                                _ANSELA 018C  
                              _ANSELC 018E                                ?_ultoa 002F  
                    ??_flashWriteByte 0025                                u110_25 0E8C  
                              i1l2201 0E80                                i1l3005 072F  
                              i1l3015 073D                                _ODCONA 028C  
                              _ODCONC 028E                                i1l2181 0FBE  
                              i1l2185 0FD4                                i1l2177 0FB6  
                              i1l2273 0709                                i1l1943 0DFB  
                              i1l2945 0E51                                i1l2981 051F  
                              i1l2985 0527                                i1l2977 050F  
                              u109_25 0E87                                i1l2997 0720  
                              _INLVLA 038C                                _INLVLC 038E  
               __size_of_checkTXPower 0014                                u182_27 06EB  
                              u183_27 06FC                                _PMADRH 0892  
                              u184_27 0706                                _PMADRL 0891  
                              u185_27 0DEC                                _PMDATH 0894  
                              u186_27 0DDA                                _PMDATL 0893  
                              _PMCON1 0895                                _PMCON2 0896  
                ?_nrf24l01GetRXPacket 0070                  __size_of_flashRealod 0020  
                  flashWriteByte@data 0023                  __size_of_flashUpdate 0023  
                __size_of_nrf24l01ISR 0036               nrf24l01SetRXMode@config 0025  
                              ___bmul 0E0F                                ___lmul 0778  
             nrf24l01SetRXMode@rxMode 0026                                ___wmul 0E7E  
                      __CFG_STVREN$ON 0000                             ??___lldiv 0029  
                           ??___llmod 0029                  __end_of_nrf24l01Init 07FE  
                __end_of_nrf24l01Send 0F4B                                _memset 0E65  
               _nrf24l01InitRegisters 0029                                _strcat 0FDA  
                              _strcmp 0FB4                                _strcpy 0EB4  
                              _strlen 0F8F             i1nrf24l01SetRXMode@config 0075  
                    __end_of_romArray 2000             i1nrf24l01SetRXMode@rxMode 0076  
                        _checkTXPower 0E21                                ultoa@c 003A  
                              ultoa@v 0036                    getADCValue@adcLoop 0038  
             __end_of__initialization 0025                 ??_nrf24l01GetRXPacket 0021  
            nrf24l01SendPacket@Packet 002B                    getADCValue@channel 0037  
                       i1_flashUpdate 0F4B                   ___bmul@multiplicand 0021  
                  getADCValue@divider 002F                        __pcstackCOMMON 0070  
                       __end_of_sleep 0E0F                         __end_of_ultoa 03D0  
       nrf24l01InitRegisters@enRXAddr 002D                             ?i1_memset 0070  
                             ??_sleep 0021                           loop@rfSetup 00A0  
                             ??_ultoa 0035                            __pbssBANK0 0059  
                          __pbssBANK1 00E3                            __pbssBANK2 0120  
                   ??_nrf24l01SPISend 0070                    __size_of_exception 0018  
                      ?i1_flashUpdate 0070               __size_ofi1_nrf24l01Send 001B  
            __end_ofi1_flashWriteByte 07D8                            __pmaintext 03D0  
                             ?___bmul 0021                               ?___lmul 0021  
nrf24l01InitRegisters@lastAddressByte 0030                               ?___wmul 0070  
                     __CFG_PPS1WAY$ON 0000                     _nrf24l01SetRXMode 069E  
              ?_nrf24l01InitRegisters 0070                            __pintentry 0004  
                 nrf24l01SPISend@data 0070                               ?_memset 0021  
                      ___lmul@product 0029                    ?_nrf24l01SetRXMode 0070  
            __end_of_enableInterrupts 0DE8                   __CFG_RSTOSC$HFINT32 0000  
                             ?_strcat 0021                               ?_strcmp 0070  
                             ?_strcpy 0021                               ?_strlen 0021  
               __end_of_n_ADDRESS_MUL 1041                            ??i1_memset 0076  
                 ??_nrf24l01SetRXMode 0024              __end_of_nrf24l01SPIStart 0DF0  
                             _SSP1BUF 0211              __end_of_nrf24l01CheckACK 0F0B  
               _nrf24l01InterfaceInit 0ECF                 __end_of_flashReadByte 0778  
                    __p_romArray_text 1FE0            __end_of_nrf24l01SendPacket 0347  
                       ??_getADCValue 0033                 __size_of_nrf24l01Init 0026  
               __size_of_nrf24l01Send 0020             __end_of_nrf24l01SetRXMode 06D9  
               _nrf24l01ReceivePacket 04E0                       __size_of___bmul 0012  
                     __size_of___lmul 0030                               ___lldiv 058D  
                     __size_of___wmul 001B                               ___llmod 05E0  
nrf24l01InitRegisters@addressRegister 0028                 __end_of_nrf24l01CELow 0DCD  
                     __size_of_memset 0019                 __end_of_nrf24l01CSLow 0DD3  
                             __ptext1 0EB4                               __ptext2 07D8  
                             __ptext3 0ECF                               __ptext4 0029  
                             __ptext5 0E0F                               __ptext6 017F  
                             __ptext7 0DFD                               __ptext8 0539  
                             __ptext9 0347                       __size_of_strcat 0026  
                     __size_of_strcmp 0026                     __end_of_exception 0E4D  
                     __size_of_strcpy 001B                       __size_of_strlen 0025  
                        __size_of_ISR 000B                               _counter 00E3  
             i1flashWriteByte@address 0074                      _romArray_absaddr 1FE0  
                             _romData 005C                               clrloop0 0DD4  
                end_of_initialization 0025                          _nrf24l01Init 07D8  
                          _setMessage 0539                       ??i1_flashUpdate 0076  
                        _nrf24l01Send 0F2B                               memset@c 0023  
                             memset@n 0025                               memset@p 0027  
                     ___lldiv@divisor 0021                       ___lldiv@counter 002E  
               _nrf24l01ChangeTXPower 0623                      setMessage@packet 0053  
        __size_ofi1_nrf24l01SetRXMode 0037                               strcmp@r 0073  
               i1nrf24l01Send@command 0073                               strlen@s 0027  
                 __end_of_getADCValue 04E0                             _PORTAbits 000C  
                           _PORTCbits 000E                             _TRISAbits 008C  
                           _TRISCbits 008E                      nrf24l01Send@data 0021  
                    __CFG_FEXTOSC$OFF 0000                         ??_flashRealod 002A  
                       ??_flashUpdate 0027                         ??_nrf24l01ISR 007D  
              ?_nrf24l01InterfaceInit 0070                        i1_nrf24l01Send 0E99  
                          main@packet 00C2                ?_nrf24l01ReceivePacket 0070  
          __size_of_nrf24l01SetRXMode 003B                        __end_of___bmul 0E21  
                      __end_of___lmul 07A8                        __end_of___wmul 0E99  
                           i1memset@c 0072                             i1memset@n 0074  
                           i1memset@p 0076                        __end_of_memset 0E7E  
                      __end_of_strcat 1000                        __end_of_strcmp 0FDA  
                      __end_of_strcpy 0ECF                        __end_of_strlen 0FB4  
                 start_initialization 0011                       _nrf24l01SPISend 0DF0  
                         __end_of_ISR 000F                 flashWriteByte@address 0025  
                   __size_ofi1_memset 0018           __end_of_nrf24l01GetRXPacket 0800  
             __size_of_nrf24l01CEHigh 0003               __size_of_nrf24l01CSHigh 0003  
                         ?_setMessage 003D                __end_ofi1_nrf24l01Send 0EB4  
             __size_of_nrf24l01SPIEnd 0007                       ___llmod@divisor 0021  
                     ___llmod@counter 002A                ?_nrf24l01ChangeTXPower 0024  
             ??_nrf24l01InitRegisters 0025                      __CFG_LPBOREN$OFF 0000  
                   ?i1_flashWriteByte 0070                   __end_of_flashRealod 0F2B  
                         _getADCValue 0458               __size_of_flashWriteByte 003C  
                            ??___bmul 0022                   __end_of_flashUpdate 0F8F  
                            ??___lmul 0029                   __end_of_nrf24l01ISR 0746  
                setMessage@tempString 0043                              ??___wmul 0074  
                  ??i1_flashWriteByte 0074                  __end_of_resetRomData 1013  
                            ??_memset 0027                     ?_enableInterrupts 0070  
                            ??_strcat 0023                              ??_strcmp 0072  
                            ??_strcpy 0023                              ??_strlen 0023  
                  ??_enableInterrupts 0070                             ___latbits 0002  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                   ?_nrf24l01SPIStart 0070                  checkTXPower@rxPacket 0029  
                   ?_nrf24l01CheckACK 0070                    ??_nrf24l01SPIStart 0070  
                  ??_nrf24l01CheckACK 0077                       ?i1_nrf24l01Send 0071  
                          loop@packet 00A1                              ?___lldiv 0021  
                            ?___llmod 0021                  __end_of_n_ADDRESS_P0 101E  
             __end_of_nrf24l01SPISend 0DFD                    i1nrf24l01Send@data 0071  
           nrf24l01InitRegisters@enAA 002E                   __size_of_setMessage 0054  
                  _nrf24l01SendPacket 0293                             _exception 0E35  
                 ?_nrf24l01SendPacket 0070                   i1_nrf24l01SetRXMode 06D9  
                      __size_of_sleep 0012                        __size_of_ultoa 0089  
                         _flashRealod 0F0B                        ___wmul@product 0074  
              i1flashWriteByte@offset 0070                           _flashUpdate 0F6C  
                         _nrf24l01ISR 0710                             clear_ram0 0DD3  
                            _PIE0bits 0090                              _PIR0bits 0010  
                           _romHolder 0120                             _sleepLoop 005A  
                ??_nrf24l01SendPacket 0029                       setMessage@value 003F  
                     setMessage@topic 003D                  ?i1_nrf24l01SetRXMode 0070  
                          _ADCON0bits 009D                            _ADCON1bits 009E  
                   ___wmul@multiplier 0070                              _WPUAbits 020C  
                            i1_memset 0E4D                         ?_checkTXPower 0070  
                            _RXPacket 0140                __size_of_flashReadByte 0032  
                            _TXPacket 0059                            ?_exception 0070  
                      _nrf24l01CEHigh 0DC7                     ___lmul@multiplier 0021  
             ??_nrf24l01InterfaceInit 0021                        _nrf24l01CSHigh 0DCD  
                   nrf24l01ISR@status 0020                        _nrf24l01SPIEnd 0DD9  
             ??_nrf24l01ReceivePacket 0078                __size_of_nrf24l01CELow 0003  
               __end_ofi1_flashUpdate 0F6C                __size_of_nrf24l01CSLow 0003  
                flashWriteByte@offset 0021                        _flashWriteByte 0662  
               ??i1_nrf24l01SetRXMode 0074                      __size_of___lldiv 0053  
                    __size_of___llmod 0043                      ?_nrf24l01SPISend 0070  
                          _ANSELAbits 018C                            _ANSELCbits 018E  
                      ??_checkTXPower 0028                         _n_ADDRESS_MUL 1040  
                          strcat@from 0021                __end_of_nrf24l01CEHigh 0DCA  
              __end_of_nrf24l01CSHigh 0DD0                              __ptext10 05E0  
                            __ptext11 0FDA                              __ptext20 07FE  
                            __ptext12 0E65                              __ptext21 0623  
                            __ptext13 0293                              __ptext30 0E4D  
                            __ptext22 0F2B                              __ptext14 0F8F  
                            __ptext31 0EEB                              __ptext23 0F6C  
                            __ptext15 069E                              __ptext40 0DCA  
                            __ptext32 06D9                              __ptext24 0662  
                            __ptext16 0458                              __ptext41 0DC7  
                            __ptext33 0E99                              __ptext25 0F0B  
                            __ptext17 0778                              __ptext42 0FB4  
                            __ptext34 0DE8                              __ptext26 0746  
                            __ptext18 058D                              __ptext43 0E35  
                            __ptext35 0DD0                              __ptext19 0E21  
                            __ptext44 0F4B                              __ptext36 0DF0  
                            __ptext28 0710                              __ptext45 07A8  
                            __ptext37 0DD9                              __ptext29 04E0  
                            __ptext46 0E7E                              __ptext38 0DCD  
                            __ptext39 0DE0                          _SSP1CON1bits 0215  
              __end_of_nrf24l01SPIEnd 0DE0                              _nrf24l01 005B  
                        _resetRomData 1000                           _OSCCON1bits 0919  
                        ??_setMessage 0043                            strcpy@from 0021  
       nrf24l01ChangeTXPower@addPower 0024               ??_nrf24l01ChangeTXPower 0026  
                       __size_of_main 0088                         __size_of_loop 0114  
        nrf24l01InitRegisters@channel 0027                __end_of_flashWriteByte 069E  
        nrf24l01InitRegisters@feature 002A                    exception@exception 007C  
                          _RC0PPSbits 0EA0                              _romArray 1FE0  
                       _flashReadByte 0746          nrf24l01InitRegisters@rfSetup 002B  
                          _RC1PPSbits 0EA1                          ?_getADCValue 002F  
                          _RC2PPSbits 0EA2        __size_of_nrf24l01InitRegisters 0156  
       __end_of_nrf24l01InitRegisters 017F                              int$flags 007E  
        nrf24l01InitRegisters@setupAW 0029                          _SSP1STATbits 0214  
              nrf24l01ReceivePacket@i 007A                         _nrf24l01CELow 0DCA  
                       _nrf24l01CSLow 0DD0                    __end_of_setMessage 058D  
                          _INTCONbits 000B             __size_ofi1_flashWriteByte 0030  
                     ?_nrf24l01CEHigh 0070                            _FVRCONbits 0117  
                    ??i1_nrf24l01Send 0072                           ??_exception 007A  
                     ?_nrf24l01CSHigh 0070                        __pstringtext10 1036  
                      __pstringtext11 103A                        __pstringtext12 103E  
                      __pstringtext13 0000                              memset@p1 0021  
                           ultoa@base 0033                       ?_nrf24l01SPIEnd 0070  
                            intlevel1 0000                          _n_ADDRESS_P0 1019  
           __size_of_enableInterrupts 0008                            _PMCON1bits 0895  
                    ___lldiv@dividend 0025                     __CFG_CLKOUTEN$OFF 0000  
                     ?_flashWriteByte 0021          __size_of_nrf24l01GetRXPacket 0002  
                      ?_flashReadByte 0021                  i1flashWriteByte@data 0072  
         nrf24l01InitRegisters@config 0031             __size_of_nrf24l01SPIStart 0008  
           __size_of_nrf24l01CheckACK 0020           nrf24l01InitRegisters@status 002C  
          nrf24l01ReceivePacket@width 0079                        ?_nrf24l01CELow 0070  
                       __pstringtext1 1000                         __pstringtext2 1019  
                       __pstringtext3 1040                         __pstringtext4 1013  
                       __pstringtext5 101E                         __pstringtext6 1023  
                       __pstringtext7 1028                         __pstringtext8 102D  
                       __pstringtext9 1032                        ?_nrf24l01CSLow 0070  
                            ultoa@buf 003B                              ultoa@val 002F  
          nrf24l01InitRegisters@DynPD 002F                              strcat@cp 0024  
                            strcat@to 0025                              strcmp@s1 0074  
                            strcmp@s2 0070                      ___lldiv@quotient 002A  
                            strcpy@cp 0025                              strlen@cp 0028  
                            strcpy@to 0024                            _WDTCONbits 0097  
                       ?_nrf24l01Init 0070                         ?_nrf24l01Send 0021  
                        ?_flashRealod 0070                            _STATUSbits 0003  
                flashReadByte@address 0028                          ?_flashUpdate 0070  
                        ?_nrf24l01ISR 0070                  __end_of_checkTXPower 0E35  
                 flashReadByte@offset 0021  
