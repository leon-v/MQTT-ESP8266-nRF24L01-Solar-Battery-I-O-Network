

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Jul 16 17:06:47 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	_romArray_text,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text18,local,class=CODE,merge=1,delta=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2
    57                           	psect	text31,local,class=CODE,merge=1,delta=2
    58                           	psect	text32,local,class=CODE,merge=1,delta=2
    59                           	psect	text33,local,class=CODE,merge=1,delta=2
    60                           	psect	text34,local,class=CODE,merge=1,delta=2
    61                           	psect	text35,local,class=CODE,merge=1,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2
    69                           	psect	text43,local,class=CODE,merge=1,delta=2
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    72                           	dabs	1,0x7E,2
    73  0000                     
    74                           ; Version 2.00
    75                           ; Generated 27/05/2018 GMT
    76                           ; 
    77                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC16LF18325 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000E                     	;# 
   122  0010                     	;# 
   123  0011                     	;# 
   124  0012                     	;# 
   125  0013                     	;# 
   126  0014                     	;# 
   127  0015                     	;# 
   128  0015                     	;# 
   129  0016                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001D                     	;# 
   139  001E                     	;# 
   140  001F                     	;# 
   141  008C                     	;# 
   142  008E                     	;# 
   143  0090                     	;# 
   144  0091                     	;# 
   145  0092                     	;# 
   146  0093                     	;# 
   147  0094                     	;# 
   148  0097                     	;# 
   149  009B                     	;# 
   150  009B                     	;# 
   151  009C                     	;# 
   152  009D                     	;# 
   153  009E                     	;# 
   154  009F                     	;# 
   155  010C                     	;# 
   156  010E                     	;# 
   157  0111                     	;# 
   158  0112                     	;# 
   159  0113                     	;# 
   160  0114                     	;# 
   161  0115                     	;# 
   162  0116                     	;# 
   163  0117                     	;# 
   164  0118                     	;# 
   165  0119                     	;# 
   166  018C                     	;# 
   167  018E                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  019F                     	;# 
   193  020C                     	;# 
   194  020E                     	;# 
   195  0211                     	;# 
   196  0211                     	;# 
   197  0212                     	;# 
   198  0212                     	;# 
   199  0213                     	;# 
   200  0213                     	;# 
   201  0214                     	;# 
   202  0214                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0216                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0217                     	;# 
   211  0219                     	;# 
   212  021A                     	;# 
   213  021B                     	;# 
   214  021C                     	;# 
   215  021D                     	;# 
   216  021D                     	;# 
   217  021E                     	;# 
   218  021F                     	;# 
   219  028C                     	;# 
   220  028E                     	;# 
   221  0291                     	;# 
   222  0291                     	;# 
   223  0292                     	;# 
   224  0293                     	;# 
   225  0294                     	;# 
   226  0295                     	;# 
   227  0295                     	;# 
   228  0296                     	;# 
   229  0297                     	;# 
   230  0298                     	;# 
   231  029F                     	;# 
   232  030C                     	;# 
   233  030E                     	;# 
   234  0311                     	;# 
   235  0311                     	;# 
   236  0312                     	;# 
   237  0313                     	;# 
   238  0314                     	;# 
   239  0315                     	;# 
   240  0315                     	;# 
   241  0316                     	;# 
   242  0317                     	;# 
   243  0318                     	;# 
   244  038C                     	;# 
   245  038E                     	;# 
   246  0391                     	;# 
   247  0392                     	;# 
   248  0393                     	;# 
   249  0397                     	;# 
   250  0398                     	;# 
   251  0399                     	;# 
   252  039A                     	;# 
   253  039C                     	;# 
   254  039D                     	;# 
   255  039E                     	;# 
   256  039F                     	;# 
   257  0411                     	;# 
   258  0411                     	;# 
   259  0412                     	;# 
   260  0413                     	;# 
   261  0414                     	;# 
   262  0415                     	;# 
   263  0416                     	;# 
   264  0417                     	;# 
   265  0418                     	;# 
   266  0418                     	;# 
   267  0419                     	;# 
   268  041A                     	;# 
   269  041B                     	;# 
   270  041C                     	;# 
   271  041D                     	;# 
   272  041E                     	;# 
   273  041F                     	;# 
   274  0498                     	;# 
   275  0498                     	;# 
   276  0499                     	;# 
   277  049A                     	;# 
   278  049B                     	;# 
   279  049B                     	;# 
   280  049C                     	;# 
   281  049D                     	;# 
   282  049E                     	;# 
   283  049F                     	;# 
   284  0617                     	;# 
   285  0618                     	;# 
   286  0619                     	;# 
   287  0619                     	;# 
   288  061A                     	;# 
   289  061B                     	;# 
   290  061C                     	;# 
   291  061C                     	;# 
   292  061F                     	;# 
   293  0691                     	;# 
   294  0692                     	;# 
   295  0693                     	;# 
   296  0694                     	;# 
   297  0695                     	;# 
   298  0696                     	;# 
   299  0697                     	;# 
   300  0698                     	;# 
   301  0699                     	;# 
   302  0711                     	;# 
   303  0712                     	;# 
   304  0713                     	;# 
   305  0714                     	;# 
   306  0715                     	;# 
   307  0716                     	;# 
   308  0717                     	;# 
   309  0718                     	;# 
   310  0719                     	;# 
   311  0891                     	;# 
   312  0891                     	;# 
   313  0891                     	;# 
   314  0891                     	;# 
   315  0891                     	;# 
   316  0891                     	;# 
   317  0892                     	;# 
   318  0892                     	;# 
   319  0892                     	;# 
   320  0893                     	;# 
   321  0893                     	;# 
   322  0893                     	;# 
   323  0893                     	;# 
   324  0893                     	;# 
   325  0893                     	;# 
   326  0894                     	;# 
   327  0894                     	;# 
   328  0894                     	;# 
   329  0895                     	;# 
   330  0895                     	;# 
   331  0895                     	;# 
   332  0896                     	;# 
   333  0896                     	;# 
   334  0896                     	;# 
   335  089B                     	;# 
   336  0911                     	;# 
   337  0912                     	;# 
   338  0913                     	;# 
   339  0914                     	;# 
   340  0915                     	;# 
   341  0916                     	;# 
   342  0918                     	;# 
   343  0919                     	;# 
   344  091A                     	;# 
   345  091B                     	;# 
   346  091C                     	;# 
   347  091D                     	;# 
   348  091E                     	;# 
   349  091F                     	;# 
   350  0E0F                     	;# 
   351  0E10                     	;# 
   352  0E11                     	;# 
   353  0E12                     	;# 
   354  0E13                     	;# 
   355  0E14                     	;# 
   356  0E15                     	;# 
   357  0E16                     	;# 
   358  0E17                     	;# 
   359  0E18                     	;# 
   360  0E19                     	;# 
   361  0E1A                     	;# 
   362  0E1B                     	;# 
   363  0E1C                     	;# 
   364  0E1D                     	;# 
   365  0E1E                     	;# 
   366  0E1F                     	;# 
   367  0E20                     	;# 
   368  0E21                     	;# 
   369  0E22                     	;# 
   370  0E24                     	;# 
   371  0E25                     	;# 
   372  0E28                     	;# 
   373  0E29                     	;# 
   374  0E2A                     	;# 
   375  0E2B                     	;# 
   376  0E2C                     	;# 
   377  0E2D                     	;# 
   378  0E2E                     	;# 
   379  0E2F                     	;# 
   380  0E90                     	;# 
   381  0E91                     	;# 
   382  0E92                     	;# 
   383  0E94                     	;# 
   384  0E95                     	;# 
   385  0EA0                     	;# 
   386  0EA1                     	;# 
   387  0EA2                     	;# 
   388  0EA3                     	;# 
   389  0EA4                     	;# 
   390  0EA5                     	;# 
   391  0F0F                     	;# 
   392  0F10                     	;# 
   393  0F11                     	;# 
   394  0F12                     	;# 
   395  0F13                     	;# 
   396  0F14                     	;# 
   397  0F15                     	;# 
   398  0F16                     	;# 
   399  0F17                     	;# 
   400  0F18                     	;# 
   401  0F19                     	;# 
   402  0F1A                     	;# 
   403  0F1B                     	;# 
   404  0F1C                     	;# 
   405  0F1D                     	;# 
   406  0F1E                     	;# 
   407  0F1F                     	;# 
   408  0F20                     	;# 
   409  0F21                     	;# 
   410  0F22                     	;# 
   411  0F23                     	;# 
   412  0F24                     	;# 
   413  0F25                     	;# 
   414  0F26                     	;# 
   415  0F27                     	;# 
   416  0F28                     	;# 
   417  0F29                     	;# 
   418  0F2A                     	;# 
   419  0F2B                     	;# 
   420  0F2C                     	;# 
   421  0F2D                     	;# 
   422  0F2E                     	;# 
   423  0F2F                     	;# 
   424  0F30                     	;# 
   425  0F31                     	;# 
   426  0F32                     	;# 
   427  0F33                     	;# 
   428  0F34                     	;# 
   429  0F35                     	;# 
   430  0F36                     	;# 
   431  0F37                     	;# 
   432  0FE4                     	;# 
   433  0FE5                     	;# 
   434  0FE6                     	;# 
   435  0FE7                     	;# 
   436  0FE8                     	;# 
   437  0FE9                     	;# 
   438  0FEA                     	;# 
   439  0FEB                     	;# 
   440  0FED                     	;# 
   441  0FEE                     	;# 
   442  0FEF                     	;# 
   443  0000                     	;# 
   444  0001                     	;# 
   445  0002                     	;# 
   446  0003                     	;# 
   447  0004                     	;# 
   448  0005                     	;# 
   449  0006                     	;# 
   450  0007                     	;# 
   451  0008                     	;# 
   452  0009                     	;# 
   453  000A                     	;# 
   454  000B                     	;# 
   455  000C                     	;# 
   456  000E                     	;# 
   457  0010                     	;# 
   458  0011                     	;# 
   459  0012                     	;# 
   460  0013                     	;# 
   461  0014                     	;# 
   462  0015                     	;# 
   463  0015                     	;# 
   464  0016                     	;# 
   465  0016                     	;# 
   466  0017                     	;# 
   467  0018                     	;# 
   468  0019                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001C                     	;# 
   473  001D                     	;# 
   474  001E                     	;# 
   475  001F                     	;# 
   476  008C                     	;# 
   477  008E                     	;# 
   478  0090                     	;# 
   479  0091                     	;# 
   480  0092                     	;# 
   481  0093                     	;# 
   482  0094                     	;# 
   483  0097                     	;# 
   484  009B                     	;# 
   485  009B                     	;# 
   486  009C                     	;# 
   487  009D                     	;# 
   488  009E                     	;# 
   489  009F                     	;# 
   490  010C                     	;# 
   491  010E                     	;# 
   492  0111                     	;# 
   493  0112                     	;# 
   494  0113                     	;# 
   495  0114                     	;# 
   496  0115                     	;# 
   497  0116                     	;# 
   498  0117                     	;# 
   499  0118                     	;# 
   500  0119                     	;# 
   501  018C                     	;# 
   502  018E                     	;# 
   503  0199                     	;# 
   504  0199                     	;# 
   505  0199                     	;# 
   506  019A                     	;# 
   507  019A                     	;# 
   508  019A                     	;# 
   509  019B                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019C                     	;# 
   515  019C                     	;# 
   516  019C                     	;# 
   517  019D                     	;# 
   518  019D                     	;# 
   519  019D                     	;# 
   520  019E                     	;# 
   521  019E                     	;# 
   522  019E                     	;# 
   523  019F                     	;# 
   524  019F                     	;# 
   525  019F                     	;# 
   526  019F                     	;# 
   527  019F                     	;# 
   528  020C                     	;# 
   529  020E                     	;# 
   530  0211                     	;# 
   531  0211                     	;# 
   532  0212                     	;# 
   533  0212                     	;# 
   534  0213                     	;# 
   535  0213                     	;# 
   536  0214                     	;# 
   537  0214                     	;# 
   538  0215                     	;# 
   539  0215                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0216                     	;# 
   543  0216                     	;# 
   544  0217                     	;# 
   545  0217                     	;# 
   546  0219                     	;# 
   547  021A                     	;# 
   548  021B                     	;# 
   549  021C                     	;# 
   550  021D                     	;# 
   551  021D                     	;# 
   552  021E                     	;# 
   553  021F                     	;# 
   554  028C                     	;# 
   555  028E                     	;# 
   556  0291                     	;# 
   557  0291                     	;# 
   558  0292                     	;# 
   559  0293                     	;# 
   560  0294                     	;# 
   561  0295                     	;# 
   562  0295                     	;# 
   563  0296                     	;# 
   564  0297                     	;# 
   565  0298                     	;# 
   566  029F                     	;# 
   567  030C                     	;# 
   568  030E                     	;# 
   569  0311                     	;# 
   570  0311                     	;# 
   571  0312                     	;# 
   572  0313                     	;# 
   573  0314                     	;# 
   574  0315                     	;# 
   575  0315                     	;# 
   576  0316                     	;# 
   577  0317                     	;# 
   578  0318                     	;# 
   579  038C                     	;# 
   580  038E                     	;# 
   581  0391                     	;# 
   582  0392                     	;# 
   583  0393                     	;# 
   584  0397                     	;# 
   585  0398                     	;# 
   586  0399                     	;# 
   587  039A                     	;# 
   588  039C                     	;# 
   589  039D                     	;# 
   590  039E                     	;# 
   591  039F                     	;# 
   592  0411                     	;# 
   593  0411                     	;# 
   594  0412                     	;# 
   595  0413                     	;# 
   596  0414                     	;# 
   597  0415                     	;# 
   598  0416                     	;# 
   599  0417                     	;# 
   600  0418                     	;# 
   601  0418                     	;# 
   602  0419                     	;# 
   603  041A                     	;# 
   604  041B                     	;# 
   605  041C                     	;# 
   606  041D                     	;# 
   607  041E                     	;# 
   608  041F                     	;# 
   609  0498                     	;# 
   610  0498                     	;# 
   611  0499                     	;# 
   612  049A                     	;# 
   613  049B                     	;# 
   614  049B                     	;# 
   615  049C                     	;# 
   616  049D                     	;# 
   617  049E                     	;# 
   618  049F                     	;# 
   619  0617                     	;# 
   620  0618                     	;# 
   621  0619                     	;# 
   622  0619                     	;# 
   623  061A                     	;# 
   624  061B                     	;# 
   625  061C                     	;# 
   626  061C                     	;# 
   627  061F                     	;# 
   628  0691                     	;# 
   629  0692                     	;# 
   630  0693                     	;# 
   631  0694                     	;# 
   632  0695                     	;# 
   633  0696                     	;# 
   634  0697                     	;# 
   635  0698                     	;# 
   636  0699                     	;# 
   637  0711                     	;# 
   638  0712                     	;# 
   639  0713                     	;# 
   640  0714                     	;# 
   641  0715                     	;# 
   642  0716                     	;# 
   643  0717                     	;# 
   644  0718                     	;# 
   645  0719                     	;# 
   646  0891                     	;# 
   647  0891                     	;# 
   648  0891                     	;# 
   649  0891                     	;# 
   650  0891                     	;# 
   651  0891                     	;# 
   652  0892                     	;# 
   653  0892                     	;# 
   654  0892                     	;# 
   655  0893                     	;# 
   656  0893                     	;# 
   657  0893                     	;# 
   658  0893                     	;# 
   659  0893                     	;# 
   660  0893                     	;# 
   661  0894                     	;# 
   662  0894                     	;# 
   663  0894                     	;# 
   664  0895                     	;# 
   665  0895                     	;# 
   666  0895                     	;# 
   667  0896                     	;# 
   668  0896                     	;# 
   669  0896                     	;# 
   670  089B                     	;# 
   671  0911                     	;# 
   672  0912                     	;# 
   673  0913                     	;# 
   674  0914                     	;# 
   675  0915                     	;# 
   676  0916                     	;# 
   677  0918                     	;# 
   678  0919                     	;# 
   679  091A                     	;# 
   680  091B                     	;# 
   681  091C                     	;# 
   682  091D                     	;# 
   683  091E                     	;# 
   684  091F                     	;# 
   685  0E0F                     	;# 
   686  0E10                     	;# 
   687  0E11                     	;# 
   688  0E12                     	;# 
   689  0E13                     	;# 
   690  0E14                     	;# 
   691  0E15                     	;# 
   692  0E16                     	;# 
   693  0E17                     	;# 
   694  0E18                     	;# 
   695  0E19                     	;# 
   696  0E1A                     	;# 
   697  0E1B                     	;# 
   698  0E1C                     	;# 
   699  0E1D                     	;# 
   700  0E1E                     	;# 
   701  0E1F                     	;# 
   702  0E20                     	;# 
   703  0E21                     	;# 
   704  0E22                     	;# 
   705  0E24                     	;# 
   706  0E25                     	;# 
   707  0E28                     	;# 
   708  0E29                     	;# 
   709  0E2A                     	;# 
   710  0E2B                     	;# 
   711  0E2C                     	;# 
   712  0E2D                     	;# 
   713  0E2E                     	;# 
   714  0E2F                     	;# 
   715  0E90                     	;# 
   716  0E91                     	;# 
   717  0E92                     	;# 
   718  0E94                     	;# 
   719  0E95                     	;# 
   720  0EA0                     	;# 
   721  0EA1                     	;# 
   722  0EA2                     	;# 
   723  0EA3                     	;# 
   724  0EA4                     	;# 
   725  0EA5                     	;# 
   726  0F0F                     	;# 
   727  0F10                     	;# 
   728  0F11                     	;# 
   729  0F12                     	;# 
   730  0F13                     	;# 
   731  0F14                     	;# 
   732  0F15                     	;# 
   733  0F16                     	;# 
   734  0F17                     	;# 
   735  0F18                     	;# 
   736  0F19                     	;# 
   737  0F1A                     	;# 
   738  0F1B                     	;# 
   739  0F1C                     	;# 
   740  0F1D                     	;# 
   741  0F1E                     	;# 
   742  0F1F                     	;# 
   743  0F20                     	;# 
   744  0F21                     	;# 
   745  0F22                     	;# 
   746  0F23                     	;# 
   747  0F24                     	;# 
   748  0F25                     	;# 
   749  0F26                     	;# 
   750  0F27                     	;# 
   751  0F28                     	;# 
   752  0F29                     	;# 
   753  0F2A                     	;# 
   754  0F2B                     	;# 
   755  0F2C                     	;# 
   756  0F2D                     	;# 
   757  0F2E                     	;# 
   758  0F2F                     	;# 
   759  0F30                     	;# 
   760  0F31                     	;# 
   761  0F32                     	;# 
   762  0F33                     	;# 
   763  0F34                     	;# 
   764  0F35                     	;# 
   765  0F36                     	;# 
   766  0F37                     	;# 
   767  0FE4                     	;# 
   768  0FE5                     	;# 
   769  0FE6                     	;# 
   770  0FE7                     	;# 
   771  0FE8                     	;# 
   772  0FE9                     	;# 
   773  0FEA                     	;# 
   774  0FEB                     	;# 
   775  0FED                     	;# 
   776  0FEE                     	;# 
   777  0FEF                     	;# 
   778  0000                     	;# 
   779  0001                     	;# 
   780  0002                     	;# 
   781  0003                     	;# 
   782  0004                     	;# 
   783  0005                     	;# 
   784  0006                     	;# 
   785  0007                     	;# 
   786  0008                     	;# 
   787  0009                     	;# 
   788  000A                     	;# 
   789  000B                     	;# 
   790  000C                     	;# 
   791  000E                     	;# 
   792  0010                     	;# 
   793  0011                     	;# 
   794  0012                     	;# 
   795  0013                     	;# 
   796  0014                     	;# 
   797  0015                     	;# 
   798  0015                     	;# 
   799  0016                     	;# 
   800  0016                     	;# 
   801  0017                     	;# 
   802  0018                     	;# 
   803  0019                     	;# 
   804  0019                     	;# 
   805  001A                     	;# 
   806  001B                     	;# 
   807  001C                     	;# 
   808  001D                     	;# 
   809  001E                     	;# 
   810  001F                     	;# 
   811  008C                     	;# 
   812  008E                     	;# 
   813  0090                     	;# 
   814  0091                     	;# 
   815  0092                     	;# 
   816  0093                     	;# 
   817  0094                     	;# 
   818  0097                     	;# 
   819  009B                     	;# 
   820  009B                     	;# 
   821  009C                     	;# 
   822  009D                     	;# 
   823  009E                     	;# 
   824  009F                     	;# 
   825  010C                     	;# 
   826  010E                     	;# 
   827  0111                     	;# 
   828  0112                     	;# 
   829  0113                     	;# 
   830  0114                     	;# 
   831  0115                     	;# 
   832  0116                     	;# 
   833  0117                     	;# 
   834  0118                     	;# 
   835  0119                     	;# 
   836  018C                     	;# 
   837  018E                     	;# 
   838  0199                     	;# 
   839  0199                     	;# 
   840  0199                     	;# 
   841  019A                     	;# 
   842  019A                     	;# 
   843  019A                     	;# 
   844  019B                     	;# 
   845  019B                     	;# 
   846  019B                     	;# 
   847  019B                     	;# 
   848  019B                     	;# 
   849  019C                     	;# 
   850  019C                     	;# 
   851  019C                     	;# 
   852  019D                     	;# 
   853  019D                     	;# 
   854  019D                     	;# 
   855  019E                     	;# 
   856  019E                     	;# 
   857  019E                     	;# 
   858  019F                     	;# 
   859  019F                     	;# 
   860  019F                     	;# 
   861  019F                     	;# 
   862  019F                     	;# 
   863  020C                     	;# 
   864  020E                     	;# 
   865  0211                     	;# 
   866  0211                     	;# 
   867  0212                     	;# 
   868  0212                     	;# 
   869  0213                     	;# 
   870  0213                     	;# 
   871  0214                     	;# 
   872  0214                     	;# 
   873  0215                     	;# 
   874  0215                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0216                     	;# 
   878  0216                     	;# 
   879  0217                     	;# 
   880  0217                     	;# 
   881  0219                     	;# 
   882  021A                     	;# 
   883  021B                     	;# 
   884  021C                     	;# 
   885  021D                     	;# 
   886  021D                     	;# 
   887  021E                     	;# 
   888  021F                     	;# 
   889  028C                     	;# 
   890  028E                     	;# 
   891  0291                     	;# 
   892  0291                     	;# 
   893  0292                     	;# 
   894  0293                     	;# 
   895  0294                     	;# 
   896  0295                     	;# 
   897  0295                     	;# 
   898  0296                     	;# 
   899  0297                     	;# 
   900  0298                     	;# 
   901  029F                     	;# 
   902  030C                     	;# 
   903  030E                     	;# 
   904  0311                     	;# 
   905  0311                     	;# 
   906  0312                     	;# 
   907  0313                     	;# 
   908  0314                     	;# 
   909  0315                     	;# 
   910  0315                     	;# 
   911  0316                     	;# 
   912  0317                     	;# 
   913  0318                     	;# 
   914  038C                     	;# 
   915  038E                     	;# 
   916  0391                     	;# 
   917  0392                     	;# 
   918  0393                     	;# 
   919  0397                     	;# 
   920  0398                     	;# 
   921  0399                     	;# 
   922  039A                     	;# 
   923  039C                     	;# 
   924  039D                     	;# 
   925  039E                     	;# 
   926  039F                     	;# 
   927  0411                     	;# 
   928  0411                     	;# 
   929  0412                     	;# 
   930  0413                     	;# 
   931  0414                     	;# 
   932  0415                     	;# 
   933  0416                     	;# 
   934  0417                     	;# 
   935  0418                     	;# 
   936  0418                     	;# 
   937  0419                     	;# 
   938  041A                     	;# 
   939  041B                     	;# 
   940  041C                     	;# 
   941  041D                     	;# 
   942  041E                     	;# 
   943  041F                     	;# 
   944  0498                     	;# 
   945  0498                     	;# 
   946  0499                     	;# 
   947  049A                     	;# 
   948  049B                     	;# 
   949  049B                     	;# 
   950  049C                     	;# 
   951  049D                     	;# 
   952  049E                     	;# 
   953  049F                     	;# 
   954  0617                     	;# 
   955  0618                     	;# 
   956  0619                     	;# 
   957  0619                     	;# 
   958  061A                     	;# 
   959  061B                     	;# 
   960  061C                     	;# 
   961  061C                     	;# 
   962  061F                     	;# 
   963  0691                     	;# 
   964  0692                     	;# 
   965  0693                     	;# 
   966  0694                     	;# 
   967  0695                     	;# 
   968  0696                     	;# 
   969  0697                     	;# 
   970  0698                     	;# 
   971  0699                     	;# 
   972  0711                     	;# 
   973  0712                     	;# 
   974  0713                     	;# 
   975  0714                     	;# 
   976  0715                     	;# 
   977  0716                     	;# 
   978  0717                     	;# 
   979  0718                     	;# 
   980  0719                     	;# 
   981  0891                     	;# 
   982  0891                     	;# 
   983  0891                     	;# 
   984  0891                     	;# 
   985  0891                     	;# 
   986  0891                     	;# 
   987  0892                     	;# 
   988  0892                     	;# 
   989  0892                     	;# 
   990  0893                     	;# 
   991  0893                     	;# 
   992  0893                     	;# 
   993  0893                     	;# 
   994  0893                     	;# 
   995  0893                     	;# 
   996  0894                     	;# 
   997  0894                     	;# 
   998  0894                     	;# 
   999  0895                     	;# 
  1000  0895                     	;# 
  1001  0895                     	;# 
  1002  0896                     	;# 
  1003  0896                     	;# 
  1004  0896                     	;# 
  1005  089B                     	;# 
  1006  0911                     	;# 
  1007  0912                     	;# 
  1008  0913                     	;# 
  1009  0914                     	;# 
  1010  0915                     	;# 
  1011  0916                     	;# 
  1012  0918                     	;# 
  1013  0919                     	;# 
  1014  091A                     	;# 
  1015  091B                     	;# 
  1016  091C                     	;# 
  1017  091D                     	;# 
  1018  091E                     	;# 
  1019  091F                     	;# 
  1020  0E0F                     	;# 
  1021  0E10                     	;# 
  1022  0E11                     	;# 
  1023  0E12                     	;# 
  1024  0E13                     	;# 
  1025  0E14                     	;# 
  1026  0E15                     	;# 
  1027  0E16                     	;# 
  1028  0E17                     	;# 
  1029  0E18                     	;# 
  1030  0E19                     	;# 
  1031  0E1A                     	;# 
  1032  0E1B                     	;# 
  1033  0E1C                     	;# 
  1034  0E1D                     	;# 
  1035  0E1E                     	;# 
  1036  0E1F                     	;# 
  1037  0E20                     	;# 
  1038  0E21                     	;# 
  1039  0E22                     	;# 
  1040  0E24                     	;# 
  1041  0E25                     	;# 
  1042  0E28                     	;# 
  1043  0E29                     	;# 
  1044  0E2A                     	;# 
  1045  0E2B                     	;# 
  1046  0E2C                     	;# 
  1047  0E2D                     	;# 
  1048  0E2E                     	;# 
  1049  0E2F                     	;# 
  1050  0E90                     	;# 
  1051  0E91                     	;# 
  1052  0E92                     	;# 
  1053  0E94                     	;# 
  1054  0E95                     	;# 
  1055  0EA0                     	;# 
  1056  0EA1                     	;# 
  1057  0EA2                     	;# 
  1058  0EA3                     	;# 
  1059  0EA4                     	;# 
  1060  0EA5                     	;# 
  1061  0F0F                     	;# 
  1062  0F10                     	;# 
  1063  0F11                     	;# 
  1064  0F12                     	;# 
  1065  0F13                     	;# 
  1066  0F14                     	;# 
  1067  0F15                     	;# 
  1068  0F16                     	;# 
  1069  0F17                     	;# 
  1070  0F18                     	;# 
  1071  0F19                     	;# 
  1072  0F1A                     	;# 
  1073  0F1B                     	;# 
  1074  0F1C                     	;# 
  1075  0F1D                     	;# 
  1076  0F1E                     	;# 
  1077  0F1F                     	;# 
  1078  0F20                     	;# 
  1079  0F21                     	;# 
  1080  0F22                     	;# 
  1081  0F23                     	;# 
  1082  0F24                     	;# 
  1083  0F25                     	;# 
  1084  0F26                     	;# 
  1085  0F27                     	;# 
  1086  0F28                     	;# 
  1087  0F29                     	;# 
  1088  0F2A                     	;# 
  1089  0F2B                     	;# 
  1090  0F2C                     	;# 
  1091  0F2D                     	;# 
  1092  0F2E                     	;# 
  1093  0F2F                     	;# 
  1094  0F30                     	;# 
  1095  0F31                     	;# 
  1096  0F32                     	;# 
  1097  0F33                     	;# 
  1098  0F34                     	;# 
  1099  0F35                     	;# 
  1100  0F36                     	;# 
  1101  0F37                     	;# 
  1102  0FE4                     	;# 
  1103  0FE5                     	;# 
  1104  0FE6                     	;# 
  1105  0FE7                     	;# 
  1106  0FE8                     	;# 
  1107  0FE9                     	;# 
  1108  0FEA                     	;# 
  1109  0FEB                     	;# 
  1110  0FED                     	;# 
  1111  0FEE                     	;# 
  1112  0FEF                     	;# 
  1113  0000                     	;# 
  1114  0001                     	;# 
  1115  0002                     	;# 
  1116  0003                     	;# 
  1117  0004                     	;# 
  1118  0005                     	;# 
  1119  0006                     	;# 
  1120  0007                     	;# 
  1121  0008                     	;# 
  1122  0009                     	;# 
  1123  000A                     	;# 
  1124  000B                     	;# 
  1125  000C                     	;# 
  1126  000E                     	;# 
  1127  0010                     	;# 
  1128  0011                     	;# 
  1129  0012                     	;# 
  1130  0013                     	;# 
  1131  0014                     	;# 
  1132  0015                     	;# 
  1133  0015                     	;# 
  1134  0016                     	;# 
  1135  0016                     	;# 
  1136  0017                     	;# 
  1137  0018                     	;# 
  1138  0019                     	;# 
  1139  0019                     	;# 
  1140  001A                     	;# 
  1141  001B                     	;# 
  1142  001C                     	;# 
  1143  001D                     	;# 
  1144  001E                     	;# 
  1145  001F                     	;# 
  1146  008C                     	;# 
  1147  008E                     	;# 
  1148  0090                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0093                     	;# 
  1152  0094                     	;# 
  1153  0097                     	;# 
  1154  009B                     	;# 
  1155  009B                     	;# 
  1156  009C                     	;# 
  1157  009D                     	;# 
  1158  009E                     	;# 
  1159  009F                     	;# 
  1160  010C                     	;# 
  1161  010E                     	;# 
  1162  0111                     	;# 
  1163  0112                     	;# 
  1164  0113                     	;# 
  1165  0114                     	;# 
  1166  0115                     	;# 
  1167  0116                     	;# 
  1168  0117                     	;# 
  1169  0118                     	;# 
  1170  0119                     	;# 
  1171  018C                     	;# 
  1172  018E                     	;# 
  1173  0199                     	;# 
  1174  0199                     	;# 
  1175  0199                     	;# 
  1176  019A                     	;# 
  1177  019A                     	;# 
  1178  019A                     	;# 
  1179  019B                     	;# 
  1180  019B                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019C                     	;# 
  1185  019C                     	;# 
  1186  019C                     	;# 
  1187  019D                     	;# 
  1188  019D                     	;# 
  1189  019D                     	;# 
  1190  019E                     	;# 
  1191  019E                     	;# 
  1192  019E                     	;# 
  1193  019F                     	;# 
  1194  019F                     	;# 
  1195  019F                     	;# 
  1196  019F                     	;# 
  1197  019F                     	;# 
  1198  020C                     	;# 
  1199  020E                     	;# 
  1200  0211                     	;# 
  1201  0211                     	;# 
  1202  0212                     	;# 
  1203  0212                     	;# 
  1204  0213                     	;# 
  1205  0213                     	;# 
  1206  0214                     	;# 
  1207  0214                     	;# 
  1208  0215                     	;# 
  1209  0215                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0216                     	;# 
  1213  0216                     	;# 
  1214  0217                     	;# 
  1215  0217                     	;# 
  1216  0219                     	;# 
  1217  021A                     	;# 
  1218  021B                     	;# 
  1219  021C                     	;# 
  1220  021D                     	;# 
  1221  021D                     	;# 
  1222  021E                     	;# 
  1223  021F                     	;# 
  1224  028C                     	;# 
  1225  028E                     	;# 
  1226  0291                     	;# 
  1227  0291                     	;# 
  1228  0292                     	;# 
  1229  0293                     	;# 
  1230  0294                     	;# 
  1231  0295                     	;# 
  1232  0295                     	;# 
  1233  0296                     	;# 
  1234  0297                     	;# 
  1235  0298                     	;# 
  1236  029F                     	;# 
  1237  030C                     	;# 
  1238  030E                     	;# 
  1239  0311                     	;# 
  1240  0311                     	;# 
  1241  0312                     	;# 
  1242  0313                     	;# 
  1243  0314                     	;# 
  1244  0315                     	;# 
  1245  0315                     	;# 
  1246  0316                     	;# 
  1247  0317                     	;# 
  1248  0318                     	;# 
  1249  038C                     	;# 
  1250  038E                     	;# 
  1251  0391                     	;# 
  1252  0392                     	;# 
  1253  0393                     	;# 
  1254  0397                     	;# 
  1255  0398                     	;# 
  1256  0399                     	;# 
  1257  039A                     	;# 
  1258  039C                     	;# 
  1259  039D                     	;# 
  1260  039E                     	;# 
  1261  039F                     	;# 
  1262  0411                     	;# 
  1263  0411                     	;# 
  1264  0412                     	;# 
  1265  0413                     	;# 
  1266  0414                     	;# 
  1267  0415                     	;# 
  1268  0416                     	;# 
  1269  0417                     	;# 
  1270  0418                     	;# 
  1271  0418                     	;# 
  1272  0419                     	;# 
  1273  041A                     	;# 
  1274  041B                     	;# 
  1275  041C                     	;# 
  1276  041D                     	;# 
  1277  041E                     	;# 
  1278  041F                     	;# 
  1279  0498                     	;# 
  1280  0498                     	;# 
  1281  0499                     	;# 
  1282  049A                     	;# 
  1283  049B                     	;# 
  1284  049B                     	;# 
  1285  049C                     	;# 
  1286  049D                     	;# 
  1287  049E                     	;# 
  1288  049F                     	;# 
  1289  0617                     	;# 
  1290  0618                     	;# 
  1291  0619                     	;# 
  1292  0619                     	;# 
  1293  061A                     	;# 
  1294  061B                     	;# 
  1295  061C                     	;# 
  1296  061C                     	;# 
  1297  061F                     	;# 
  1298  0691                     	;# 
  1299  0692                     	;# 
  1300  0693                     	;# 
  1301  0694                     	;# 
  1302  0695                     	;# 
  1303  0696                     	;# 
  1304  0697                     	;# 
  1305  0698                     	;# 
  1306  0699                     	;# 
  1307  0711                     	;# 
  1308  0712                     	;# 
  1309  0713                     	;# 
  1310  0714                     	;# 
  1311  0715                     	;# 
  1312  0716                     	;# 
  1313  0717                     	;# 
  1314  0718                     	;# 
  1315  0719                     	;# 
  1316  0891                     	;# 
  1317  0891                     	;# 
  1318  0891                     	;# 
  1319  0891                     	;# 
  1320  0891                     	;# 
  1321  0891                     	;# 
  1322  0892                     	;# 
  1323  0892                     	;# 
  1324  0892                     	;# 
  1325  0893                     	;# 
  1326  0893                     	;# 
  1327  0893                     	;# 
  1328  0893                     	;# 
  1329  0893                     	;# 
  1330  0893                     	;# 
  1331  0894                     	;# 
  1332  0894                     	;# 
  1333  0894                     	;# 
  1334  0895                     	;# 
  1335  0895                     	;# 
  1336  0895                     	;# 
  1337  0896                     	;# 
  1338  0896                     	;# 
  1339  0896                     	;# 
  1340  089B                     	;# 
  1341  0911                     	;# 
  1342  0912                     	;# 
  1343  0913                     	;# 
  1344  0914                     	;# 
  1345  0915                     	;# 
  1346  0916                     	;# 
  1347  0918                     	;# 
  1348  0919                     	;# 
  1349  091A                     	;# 
  1350  091B                     	;# 
  1351  091C                     	;# 
  1352  091D                     	;# 
  1353  091E                     	;# 
  1354  091F                     	;# 
  1355  0E0F                     	;# 
  1356  0E10                     	;# 
  1357  0E11                     	;# 
  1358  0E12                     	;# 
  1359  0E13                     	;# 
  1360  0E14                     	;# 
  1361  0E15                     	;# 
  1362  0E16                     	;# 
  1363  0E17                     	;# 
  1364  0E18                     	;# 
  1365  0E19                     	;# 
  1366  0E1A                     	;# 
  1367  0E1B                     	;# 
  1368  0E1C                     	;# 
  1369  0E1D                     	;# 
  1370  0E1E                     	;# 
  1371  0E1F                     	;# 
  1372  0E20                     	;# 
  1373  0E21                     	;# 
  1374  0E22                     	;# 
  1375  0E24                     	;# 
  1376  0E25                     	;# 
  1377  0E28                     	;# 
  1378  0E29                     	;# 
  1379  0E2A                     	;# 
  1380  0E2B                     	;# 
  1381  0E2C                     	;# 
  1382  0E2D                     	;# 
  1383  0E2E                     	;# 
  1384  0E2F                     	;# 
  1385  0E90                     	;# 
  1386  0E91                     	;# 
  1387  0E92                     	;# 
  1388  0E94                     	;# 
  1389  0E95                     	;# 
  1390  0EA0                     	;# 
  1391  0EA1                     	;# 
  1392  0EA2                     	;# 
  1393  0EA3                     	;# 
  1394  0EA4                     	;# 
  1395  0EA5                     	;# 
  1396  0F0F                     	;# 
  1397  0F10                     	;# 
  1398  0F11                     	;# 
  1399  0F12                     	;# 
  1400  0F13                     	;# 
  1401  0F14                     	;# 
  1402  0F15                     	;# 
  1403  0F16                     	;# 
  1404  0F17                     	;# 
  1405  0F18                     	;# 
  1406  0F19                     	;# 
  1407  0F1A                     	;# 
  1408  0F1B                     	;# 
  1409  0F1C                     	;# 
  1410  0F1D                     	;# 
  1411  0F1E                     	;# 
  1412  0F1F                     	;# 
  1413  0F20                     	;# 
  1414  0F21                     	;# 
  1415  0F22                     	;# 
  1416  0F23                     	;# 
  1417  0F24                     	;# 
  1418  0F25                     	;# 
  1419  0F26                     	;# 
  1420  0F27                     	;# 
  1421  0F28                     	;# 
  1422  0F29                     	;# 
  1423  0F2A                     	;# 
  1424  0F2B                     	;# 
  1425  0F2C                     	;# 
  1426  0F2D                     	;# 
  1427  0F2E                     	;# 
  1428  0F2F                     	;# 
  1429  0F30                     	;# 
  1430  0F31                     	;# 
  1431  0F32                     	;# 
  1432  0F33                     	;# 
  1433  0F34                     	;# 
  1434  0F35                     	;# 
  1435  0F36                     	;# 
  1436  0F37                     	;# 
  1437  0FE4                     	;# 
  1438  0FE5                     	;# 
  1439  0FE6                     	;# 
  1440  0FE7                     	;# 
  1441  0FE8                     	;# 
  1442  0FE9                     	;# 
  1443  0FEA                     	;# 
  1444  0FEB                     	;# 
  1445  0FED                     	;# 
  1446  0FEE                     	;# 
  1447  0FEF                     	;# 
  1448  0000                     	;# 
  1449  0001                     	;# 
  1450  0002                     	;# 
  1451  0003                     	;# 
  1452  0004                     	;# 
  1453  0005                     	;# 
  1454  0006                     	;# 
  1455  0007                     	;# 
  1456  0008                     	;# 
  1457  0009                     	;# 
  1458  000A                     	;# 
  1459  000B                     	;# 
  1460  000C                     	;# 
  1461  000E                     	;# 
  1462  0010                     	;# 
  1463  0011                     	;# 
  1464  0012                     	;# 
  1465  0013                     	;# 
  1466  0014                     	;# 
  1467  0015                     	;# 
  1468  0015                     	;# 
  1469  0016                     	;# 
  1470  0016                     	;# 
  1471  0017                     	;# 
  1472  0018                     	;# 
  1473  0019                     	;# 
  1474  0019                     	;# 
  1475  001A                     	;# 
  1476  001B                     	;# 
  1477  001C                     	;# 
  1478  001D                     	;# 
  1479  001E                     	;# 
  1480  001F                     	;# 
  1481  008C                     	;# 
  1482  008E                     	;# 
  1483  0090                     	;# 
  1484  0091                     	;# 
  1485  0092                     	;# 
  1486  0093                     	;# 
  1487  0094                     	;# 
  1488  0097                     	;# 
  1489  009B                     	;# 
  1490  009B                     	;# 
  1491  009C                     	;# 
  1492  009D                     	;# 
  1493  009E                     	;# 
  1494  009F                     	;# 
  1495  010C                     	;# 
  1496  010E                     	;# 
  1497  0111                     	;# 
  1498  0112                     	;# 
  1499  0113                     	;# 
  1500  0114                     	;# 
  1501  0115                     	;# 
  1502  0116                     	;# 
  1503  0117                     	;# 
  1504  0118                     	;# 
  1505  0119                     	;# 
  1506  018C                     	;# 
  1507  018E                     	;# 
  1508  0199                     	;# 
  1509  0199                     	;# 
  1510  0199                     	;# 
  1511  019A                     	;# 
  1512  019A                     	;# 
  1513  019A                     	;# 
  1514  019B                     	;# 
  1515  019B                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019C                     	;# 
  1520  019C                     	;# 
  1521  019C                     	;# 
  1522  019D                     	;# 
  1523  019D                     	;# 
  1524  019D                     	;# 
  1525  019E                     	;# 
  1526  019E                     	;# 
  1527  019E                     	;# 
  1528  019F                     	;# 
  1529  019F                     	;# 
  1530  019F                     	;# 
  1531  019F                     	;# 
  1532  019F                     	;# 
  1533  020C                     	;# 
  1534  020E                     	;# 
  1535  0211                     	;# 
  1536  0211                     	;# 
  1537  0212                     	;# 
  1538  0212                     	;# 
  1539  0213                     	;# 
  1540  0213                     	;# 
  1541  0214                     	;# 
  1542  0214                     	;# 
  1543  0215                     	;# 
  1544  0215                     	;# 
  1545  0215                     	;# 
  1546  0215                     	;# 
  1547  0216                     	;# 
  1548  0216                     	;# 
  1549  0217                     	;# 
  1550  0217                     	;# 
  1551  0219                     	;# 
  1552  021A                     	;# 
  1553  021B                     	;# 
  1554  021C                     	;# 
  1555  021D                     	;# 
  1556  021D                     	;# 
  1557  021E                     	;# 
  1558  021F                     	;# 
  1559  028C                     	;# 
  1560  028E                     	;# 
  1561  0291                     	;# 
  1562  0291                     	;# 
  1563  0292                     	;# 
  1564  0293                     	;# 
  1565  0294                     	;# 
  1566  0295                     	;# 
  1567  0295                     	;# 
  1568  0296                     	;# 
  1569  0297                     	;# 
  1570  0298                     	;# 
  1571  029F                     	;# 
  1572  030C                     	;# 
  1573  030E                     	;# 
  1574  0311                     	;# 
  1575  0311                     	;# 
  1576  0312                     	;# 
  1577  0313                     	;# 
  1578  0314                     	;# 
  1579  0315                     	;# 
  1580  0315                     	;# 
  1581  0316                     	;# 
  1582  0317                     	;# 
  1583  0318                     	;# 
  1584  038C                     	;# 
  1585  038E                     	;# 
  1586  0391                     	;# 
  1587  0392                     	;# 
  1588  0393                     	;# 
  1589  0397                     	;# 
  1590  0398                     	;# 
  1591  0399                     	;# 
  1592  039A                     	;# 
  1593  039C                     	;# 
  1594  039D                     	;# 
  1595  039E                     	;# 
  1596  039F                     	;# 
  1597  0411                     	;# 
  1598  0411                     	;# 
  1599  0412                     	;# 
  1600  0413                     	;# 
  1601  0414                     	;# 
  1602  0415                     	;# 
  1603  0416                     	;# 
  1604  0417                     	;# 
  1605  0418                     	;# 
  1606  0418                     	;# 
  1607  0419                     	;# 
  1608  041A                     	;# 
  1609  041B                     	;# 
  1610  041C                     	;# 
  1611  041D                     	;# 
  1612  041E                     	;# 
  1613  041F                     	;# 
  1614  0498                     	;# 
  1615  0498                     	;# 
  1616  0499                     	;# 
  1617  049A                     	;# 
  1618  049B                     	;# 
  1619  049B                     	;# 
  1620  049C                     	;# 
  1621  049D                     	;# 
  1622  049E                     	;# 
  1623  049F                     	;# 
  1624  0617                     	;# 
  1625  0618                     	;# 
  1626  0619                     	;# 
  1627  0619                     	;# 
  1628  061A                     	;# 
  1629  061B                     	;# 
  1630  061C                     	;# 
  1631  061C                     	;# 
  1632  061F                     	;# 
  1633  0691                     	;# 
  1634  0692                     	;# 
  1635  0693                     	;# 
  1636  0694                     	;# 
  1637  0695                     	;# 
  1638  0696                     	;# 
  1639  0697                     	;# 
  1640  0698                     	;# 
  1641  0699                     	;# 
  1642  0711                     	;# 
  1643  0712                     	;# 
  1644  0713                     	;# 
  1645  0714                     	;# 
  1646  0715                     	;# 
  1647  0716                     	;# 
  1648  0717                     	;# 
  1649  0718                     	;# 
  1650  0719                     	;# 
  1651  0891                     	;# 
  1652  0891                     	;# 
  1653  0891                     	;# 
  1654  0891                     	;# 
  1655  0891                     	;# 
  1656  0891                     	;# 
  1657  0892                     	;# 
  1658  0892                     	;# 
  1659  0892                     	;# 
  1660  0893                     	;# 
  1661  0893                     	;# 
  1662  0893                     	;# 
  1663  0893                     	;# 
  1664  0893                     	;# 
  1665  0893                     	;# 
  1666  0894                     	;# 
  1667  0894                     	;# 
  1668  0894                     	;# 
  1669  0895                     	;# 
  1670  0895                     	;# 
  1671  0895                     	;# 
  1672  0896                     	;# 
  1673  0896                     	;# 
  1674  0896                     	;# 
  1675  089B                     	;# 
  1676  0911                     	;# 
  1677  0912                     	;# 
  1678  0913                     	;# 
  1679  0914                     	;# 
  1680  0915                     	;# 
  1681  0916                     	;# 
  1682  0918                     	;# 
  1683  0919                     	;# 
  1684  091A                     	;# 
  1685  091B                     	;# 
  1686  091C                     	;# 
  1687  091D                     	;# 
  1688  091E                     	;# 
  1689  091F                     	;# 
  1690  0E0F                     	;# 
  1691  0E10                     	;# 
  1692  0E11                     	;# 
  1693  0E12                     	;# 
  1694  0E13                     	;# 
  1695  0E14                     	;# 
  1696  0E15                     	;# 
  1697  0E16                     	;# 
  1698  0E17                     	;# 
  1699  0E18                     	;# 
  1700  0E19                     	;# 
  1701  0E1A                     	;# 
  1702  0E1B                     	;# 
  1703  0E1C                     	;# 
  1704  0E1D                     	;# 
  1705  0E1E                     	;# 
  1706  0E1F                     	;# 
  1707  0E20                     	;# 
  1708  0E21                     	;# 
  1709  0E22                     	;# 
  1710  0E24                     	;# 
  1711  0E25                     	;# 
  1712  0E28                     	;# 
  1713  0E29                     	;# 
  1714  0E2A                     	;# 
  1715  0E2B                     	;# 
  1716  0E2C                     	;# 
  1717  0E2D                     	;# 
  1718  0E2E                     	;# 
  1719  0E2F                     	;# 
  1720  0E90                     	;# 
  1721  0E91                     	;# 
  1722  0E92                     	;# 
  1723  0E94                     	;# 
  1724  0E95                     	;# 
  1725  0EA0                     	;# 
  1726  0EA1                     	;# 
  1727  0EA2                     	;# 
  1728  0EA3                     	;# 
  1729  0EA4                     	;# 
  1730  0EA5                     	;# 
  1731  0F0F                     	;# 
  1732  0F10                     	;# 
  1733  0F11                     	;# 
  1734  0F12                     	;# 
  1735  0F13                     	;# 
  1736  0F14                     	;# 
  1737  0F15                     	;# 
  1738  0F16                     	;# 
  1739  0F17                     	;# 
  1740  0F18                     	;# 
  1741  0F19                     	;# 
  1742  0F1A                     	;# 
  1743  0F1B                     	;# 
  1744  0F1C                     	;# 
  1745  0F1D                     	;# 
  1746  0F1E                     	;# 
  1747  0F1F                     	;# 
  1748  0F20                     	;# 
  1749  0F21                     	;# 
  1750  0F22                     	;# 
  1751  0F23                     	;# 
  1752  0F24                     	;# 
  1753  0F25                     	;# 
  1754  0F26                     	;# 
  1755  0F27                     	;# 
  1756  0F28                     	;# 
  1757  0F29                     	;# 
  1758  0F2A                     	;# 
  1759  0F2B                     	;# 
  1760  0F2C                     	;# 
  1761  0F2D                     	;# 
  1762  0F2E                     	;# 
  1763  0F2F                     	;# 
  1764  0F30                     	;# 
  1765  0F31                     	;# 
  1766  0F32                     	;# 
  1767  0F33                     	;# 
  1768  0F34                     	;# 
  1769  0F35                     	;# 
  1770  0F36                     	;# 
  1771  0F37                     	;# 
  1772  0FE4                     	;# 
  1773  0FE5                     	;# 
  1774  0FE6                     	;# 
  1775  0FE7                     	;# 
  1776  0FE8                     	;# 
  1777  0FE9                     	;# 
  1778  0FEA                     	;# 
  1779  0FEB                     	;# 
  1780  0FED                     	;# 
  1781  0FEE                     	;# 
  1782  0FEF                     	;# 
  1783  0000                     	;# 
  1784  0001                     	;# 
  1785  0002                     	;# 
  1786  0003                     	;# 
  1787  0004                     	;# 
  1788  0005                     	;# 
  1789  0006                     	;# 
  1790  0007                     	;# 
  1791  0008                     	;# 
  1792  0009                     	;# 
  1793  000A                     	;# 
  1794  000B                     	;# 
  1795  000C                     	;# 
  1796  000E                     	;# 
  1797  0010                     	;# 
  1798  0011                     	;# 
  1799  0012                     	;# 
  1800  0013                     	;# 
  1801  0014                     	;# 
  1802  0015                     	;# 
  1803  0015                     	;# 
  1804  0016                     	;# 
  1805  0016                     	;# 
  1806  0017                     	;# 
  1807  0018                     	;# 
  1808  0019                     	;# 
  1809  0019                     	;# 
  1810  001A                     	;# 
  1811  001B                     	;# 
  1812  001C                     	;# 
  1813  001D                     	;# 
  1814  001E                     	;# 
  1815  001F                     	;# 
  1816  008C                     	;# 
  1817  008E                     	;# 
  1818  0090                     	;# 
  1819  0091                     	;# 
  1820  0092                     	;# 
  1821  0093                     	;# 
  1822  0094                     	;# 
  1823  0097                     	;# 
  1824  009B                     	;# 
  1825  009B                     	;# 
  1826  009C                     	;# 
  1827  009D                     	;# 
  1828  009E                     	;# 
  1829  009F                     	;# 
  1830  010C                     	;# 
  1831  010E                     	;# 
  1832  0111                     	;# 
  1833  0112                     	;# 
  1834  0113                     	;# 
  1835  0114                     	;# 
  1836  0115                     	;# 
  1837  0116                     	;# 
  1838  0117                     	;# 
  1839  0118                     	;# 
  1840  0119                     	;# 
  1841  018C                     	;# 
  1842  018E                     	;# 
  1843  0199                     	;# 
  1844  0199                     	;# 
  1845  0199                     	;# 
  1846  019A                     	;# 
  1847  019A                     	;# 
  1848  019A                     	;# 
  1849  019B                     	;# 
  1850  019B                     	;# 
  1851  019B                     	;# 
  1852  019B                     	;# 
  1853  019B                     	;# 
  1854  019C                     	;# 
  1855  019C                     	;# 
  1856  019C                     	;# 
  1857  019D                     	;# 
  1858  019D                     	;# 
  1859  019D                     	;# 
  1860  019E                     	;# 
  1861  019E                     	;# 
  1862  019E                     	;# 
  1863  019F                     	;# 
  1864  019F                     	;# 
  1865  019F                     	;# 
  1866  019F                     	;# 
  1867  019F                     	;# 
  1868  020C                     	;# 
  1869  020E                     	;# 
  1870  0211                     	;# 
  1871  0211                     	;# 
  1872  0212                     	;# 
  1873  0212                     	;# 
  1874  0213                     	;# 
  1875  0213                     	;# 
  1876  0214                     	;# 
  1877  0214                     	;# 
  1878  0215                     	;# 
  1879  0215                     	;# 
  1880  0215                     	;# 
  1881  0215                     	;# 
  1882  0216                     	;# 
  1883  0216                     	;# 
  1884  0217                     	;# 
  1885  0217                     	;# 
  1886  0219                     	;# 
  1887  021A                     	;# 
  1888  021B                     	;# 
  1889  021C                     	;# 
  1890  021D                     	;# 
  1891  021D                     	;# 
  1892  021E                     	;# 
  1893  021F                     	;# 
  1894  028C                     	;# 
  1895  028E                     	;# 
  1896  0291                     	;# 
  1897  0291                     	;# 
  1898  0292                     	;# 
  1899  0293                     	;# 
  1900  0294                     	;# 
  1901  0295                     	;# 
  1902  0295                     	;# 
  1903  0296                     	;# 
  1904  0297                     	;# 
  1905  0298                     	;# 
  1906  029F                     	;# 
  1907  030C                     	;# 
  1908  030E                     	;# 
  1909  0311                     	;# 
  1910  0311                     	;# 
  1911  0312                     	;# 
  1912  0313                     	;# 
  1913  0314                     	;# 
  1914  0315                     	;# 
  1915  0315                     	;# 
  1916  0316                     	;# 
  1917  0317                     	;# 
  1918  0318                     	;# 
  1919  038C                     	;# 
  1920  038E                     	;# 
  1921  0391                     	;# 
  1922  0392                     	;# 
  1923  0393                     	;# 
  1924  0397                     	;# 
  1925  0398                     	;# 
  1926  0399                     	;# 
  1927  039A                     	;# 
  1928  039C                     	;# 
  1929  039D                     	;# 
  1930  039E                     	;# 
  1931  039F                     	;# 
  1932  0411                     	;# 
  1933  0411                     	;# 
  1934  0412                     	;# 
  1935  0413                     	;# 
  1936  0414                     	;# 
  1937  0415                     	;# 
  1938  0416                     	;# 
  1939  0417                     	;# 
  1940  0418                     	;# 
  1941  0418                     	;# 
  1942  0419                     	;# 
  1943  041A                     	;# 
  1944  041B                     	;# 
  1945  041C                     	;# 
  1946  041D                     	;# 
  1947  041E                     	;# 
  1948  041F                     	;# 
  1949  0498                     	;# 
  1950  0498                     	;# 
  1951  0499                     	;# 
  1952  049A                     	;# 
  1953  049B                     	;# 
  1954  049B                     	;# 
  1955  049C                     	;# 
  1956  049D                     	;# 
  1957  049E                     	;# 
  1958  049F                     	;# 
  1959  0617                     	;# 
  1960  0618                     	;# 
  1961  0619                     	;# 
  1962  0619                     	;# 
  1963  061A                     	;# 
  1964  061B                     	;# 
  1965  061C                     	;# 
  1966  061C                     	;# 
  1967  061F                     	;# 
  1968  0691                     	;# 
  1969  0692                     	;# 
  1970  0693                     	;# 
  1971  0694                     	;# 
  1972  0695                     	;# 
  1973  0696                     	;# 
  1974  0697                     	;# 
  1975  0698                     	;# 
  1976  0699                     	;# 
  1977  0711                     	;# 
  1978  0712                     	;# 
  1979  0713                     	;# 
  1980  0714                     	;# 
  1981  0715                     	;# 
  1982  0716                     	;# 
  1983  0717                     	;# 
  1984  0718                     	;# 
  1985  0719                     	;# 
  1986  0891                     	;# 
  1987  0891                     	;# 
  1988  0891                     	;# 
  1989  0891                     	;# 
  1990  0891                     	;# 
  1991  0891                     	;# 
  1992  0892                     	;# 
  1993  0892                     	;# 
  1994  0892                     	;# 
  1995  0893                     	;# 
  1996  0893                     	;# 
  1997  0893                     	;# 
  1998  0893                     	;# 
  1999  0893                     	;# 
  2000  0893                     	;# 
  2001  0894                     	;# 
  2002  0894                     	;# 
  2003  0894                     	;# 
  2004  0895                     	;# 
  2005  0895                     	;# 
  2006  0895                     	;# 
  2007  0896                     	;# 
  2008  0896                     	;# 
  2009  0896                     	;# 
  2010  089B                     	;# 
  2011  0911                     	;# 
  2012  0912                     	;# 
  2013  0913                     	;# 
  2014  0914                     	;# 
  2015  0915                     	;# 
  2016  0916                     	;# 
  2017  0918                     	;# 
  2018  0919                     	;# 
  2019  091A                     	;# 
  2020  091B                     	;# 
  2021  091C                     	;# 
  2022  091D                     	;# 
  2023  091E                     	;# 
  2024  091F                     	;# 
  2025  0E0F                     	;# 
  2026  0E10                     	;# 
  2027  0E11                     	;# 
  2028  0E12                     	;# 
  2029  0E13                     	;# 
  2030  0E14                     	;# 
  2031  0E15                     	;# 
  2032  0E16                     	;# 
  2033  0E17                     	;# 
  2034  0E18                     	;# 
  2035  0E19                     	;# 
  2036  0E1A                     	;# 
  2037  0E1B                     	;# 
  2038  0E1C                     	;# 
  2039  0E1D                     	;# 
  2040  0E1E                     	;# 
  2041  0E1F                     	;# 
  2042  0E20                     	;# 
  2043  0E21                     	;# 
  2044  0E22                     	;# 
  2045  0E24                     	;# 
  2046  0E25                     	;# 
  2047  0E28                     	;# 
  2048  0E29                     	;# 
  2049  0E2A                     	;# 
  2050  0E2B                     	;# 
  2051  0E2C                     	;# 
  2052  0E2D                     	;# 
  2053  0E2E                     	;# 
  2054  0E2F                     	;# 
  2055  0E90                     	;# 
  2056  0E91                     	;# 
  2057  0E92                     	;# 
  2058  0E94                     	;# 
  2059  0E95                     	;# 
  2060  0EA0                     	;# 
  2061  0EA1                     	;# 
  2062  0EA2                     	;# 
  2063  0EA3                     	;# 
  2064  0EA4                     	;# 
  2065  0EA5                     	;# 
  2066  0F0F                     	;# 
  2067  0F10                     	;# 
  2068  0F11                     	;# 
  2069  0F12                     	;# 
  2070  0F13                     	;# 
  2071  0F14                     	;# 
  2072  0F15                     	;# 
  2073  0F16                     	;# 
  2074  0F17                     	;# 
  2075  0F18                     	;# 
  2076  0F19                     	;# 
  2077  0F1A                     	;# 
  2078  0F1B                     	;# 
  2079  0F1C                     	;# 
  2080  0F1D                     	;# 
  2081  0F1E                     	;# 
  2082  0F1F                     	;# 
  2083  0F20                     	;# 
  2084  0F21                     	;# 
  2085  0F22                     	;# 
  2086  0F23                     	;# 
  2087  0F24                     	;# 
  2088  0F25                     	;# 
  2089  0F26                     	;# 
  2090  0F27                     	;# 
  2091  0F28                     	;# 
  2092  0F29                     	;# 
  2093  0F2A                     	;# 
  2094  0F2B                     	;# 
  2095  0F2C                     	;# 
  2096  0F2D                     	;# 
  2097  0F2E                     	;# 
  2098  0F2F                     	;# 
  2099  0F30                     	;# 
  2100  0F31                     	;# 
  2101  0F32                     	;# 
  2102  0F33                     	;# 
  2103  0F34                     	;# 
  2104  0F35                     	;# 
  2105  0F36                     	;# 
  2106  0F37                     	;# 
  2107  0FE4                     	;# 
  2108  0FE5                     	;# 
  2109  0FE6                     	;# 
  2110  0FE7                     	;# 
  2111  0FE8                     	;# 
  2112  0FE9                     	;# 
  2113  0FEA                     	;# 
  2114  0FEB                     	;# 
  2115  0FED                     	;# 
  2116  0FEE                     	;# 
  2117  0FEF                     	;# 
  2118  1FE0                     _romArray_absaddr	set	8160
  2119                           
  2120                           	psect	stringtext1
  2121  1000                     __pstringtext1:	
  2122  1000                     _resetRomData:	
  2123  1000  34AA               	retlw	170
  2124  1001  3455               	retlw	85
  2125  1002  346E               	retlw	110
  2126  1003  3463               	retlw	99
  2127  1004  346F               	retlw	111
  2128  1005  346E               	retlw	110
  2129  1006  3466               	retlw	102
  2130  1007  3469               	retlw	105
  2131  1008  3467               	retlw	103
  2132  1009  3475               	retlw	117
  2133  100A  3472               	retlw	114
  2134  100B  3465               	retlw	101
  2135  100C  3464               	retlw	100
  2136  100D  3400               	retlw	0
  2137  100E  3400               	retlw	0
  2138  100F  3400               	retlw	0
  2139  1010  3400               	retlw	0
  2140  1011  3400               	retlw	0
  2141  1012  3400               	retlw	0
  2142  1013                     __end_of_resetRomData:	
  2143                           
  2144                           	psect	stringtext2
  2145  1019                     __pstringtext2:	
  2146  1019                     _n_ADDRESS_P0:	
  2147  1019  34AD               	retlw	173
  2148  101A  3487               	retlw	135
  2149  101B  3466               	retlw	102
  2150  101C  34BC               	retlw	188
  2151  101D  34BB               	retlw	187
  2152  101E                     __end_of_n_ADDRESS_P0:	
  2153                           
  2154                           	psect	stringtext3
  2155  1040                     __pstringtext3:	
  2156  1040                     _n_ADDRESS_MUL:	
  2157  1040  3421               	retlw	33
  2158  1041                     __end_of_n_ADDRESS_MUL:	
  2159  1FE0                     _romArray_absaddr	set	8160
  2160                           
  2161                           	psect	_romArray_text
  2162  1FE0                     __p_romArray_text:	
  2163  1FE0                     _romArray:	
  2164  1FE0  3400               	retlw	0
  2165  1FE1  3400               	retlw	0
  2166  1FE2  3400               	retlw	0
  2167  1FE3  3400               	retlw	0
  2168  1FE4  3400               	retlw	0
  2169  1FE5  3400               	retlw	0
  2170  1FE6  3400               	retlw	0
  2171  1FE7  3400               	retlw	0
  2172  1FE8  3400               	retlw	0
  2173  1FE9  3400               	retlw	0
  2174  1FEA  3400               	retlw	0
  2175  1FEB  3400               	retlw	0
  2176  1FEC  3400               	retlw	0
  2177  1FED  3400               	retlw	0
  2178  1FEE  3400               	retlw	0
  2179  1FEF  3400               	retlw	0
  2180  1FF0  3400               	retlw	0
  2181  1FF1  3400               	retlw	0
  2182  1FF2  3400               	retlw	0
  2183  1FF3  3400               	retlw	0
  2184  1FF4  3400               	retlw	0
  2185  1FF5  3400               	retlw	0
  2186  1FF6  3400               	retlw	0
  2187  1FF7  3400               	retlw	0
  2188  1FF8  3400               	retlw	0
  2189  1FF9  3400               	retlw	0
  2190  1FFA  3400               	retlw	0
  2191  1FFB  3400               	retlw	0
  2192  1FFC  3400               	retlw	0
  2193  1FFD  3400               	retlw	0
  2194  1FFE  3400               	retlw	0
  2195  1FFF  3400               	retlw	0
  2196  2000                     __end_of_romArray:	
  2197  0003                     _STATUSbits	set	3
  2198  0010                     _PIR0bits	set	16
  2199  000E                     _PORTCbits	set	14
  2200  000C                     _PORTAbits	set	12
  2201  000B                     _INTCONbits	set	11
  2202  0097                     _WDTCONbits	set	151
  2203  009E                     _ADCON1bits	set	158
  2204  009C                     _ADRESH	set	156
  2205  009B                     _ADRESL	set	155
  2206  009D                     _ADCON0bits	set	157
  2207  0090                     _PIE0bits	set	144
  2208  008E                     _TRISCbits	set	142
  2209  008C                     _TRISAbits	set	140
  2210  0117                     _FVRCONbits	set	279
  2211  018E                     _ANSELCbits	set	398
  2212  018C                     _ANSELAbits	set	396
  2213  018E                     _ANSELC	set	398
  2214  018C                     _ANSELA	set	396
  2215  020C                     _WPUAbits	set	524
  2216  020E                     _WPUC	set	526
  2217  020C                     _WPUA	set	524
  2218  0211                     _SSP1BUF	set	529
  2219  0214                     _SSP1STATbits	set	532
  2220  0215                     _SSP1CON1bits	set	533
  2221  028E                     _ODCONC	set	654
  2222  028C                     _ODCONA	set	652
  2223  038E                     _INLVLC	set	910
  2224  038C                     _INLVLA	set	908
  2225  0894                     _PMDATH	set	2196
  2226  0893                     _PMDATL	set	2195
  2227  0896                     _PMCON2	set	2198
  2228  0895                     _PMCON1bits	set	2197
  2229  0892                     _PMADRH	set	2194
  2230  0891                     _PMADRL	set	2193
  2231  0895                     _PMCON1	set	2197
  2232  0919                     _OSCCON1bits	set	2329
  2233  0EA0                     _RC0PPSbits	set	3744
  2234  0EA2                     _RC2PPSbits	set	3746
  2235  0EA1                     _RC1PPSbits	set	3745
  2236                           
  2237                           	psect	stringtext4
  2238  1013                     __pstringtext4:	
  2239  1013                     STR_8:	
  2240  1013  3452               	retlw	82	;'R'
  2241  1014  3446               	retlw	70	;'F'
  2242  1015  3450               	retlw	80	;'P'
  2243  1016  3457               	retlw	87	;'W'
  2244  1017  3452               	retlw	82	;'R'
  2245  1018  3400               	retlw	0
  2246                           
  2247                           	psect	stringtext5
  2248  101E                     __pstringtext5:	
  2249  101E                     STR_5:	
  2250  101E  3441               	retlw	65	;'A'
  2251  101F  344E               	retlw	78	;'N'
  2252  1020  3443               	retlw	67	;'C'
  2253  1021  3433               	retlw	51	;'3'
  2254  1022  3400               	retlw	0
  2255                           
  2256                           	psect	stringtext6
  2257  1023                     __pstringtext6:	
  2258  1023                     STR_7:	
  2259  1023  3454               	retlw	84	;'T'
  2260  1024  3445               	retlw	69	;'E'
  2261  1025  344D               	retlw	77	;'M'
  2262  1026  3450               	retlw	80	;'P'
  2263  1027  3400               	retlw	0
  2264                           
  2265                           	psect	stringtext7
  2266  1028                     __pstringtext7:	
  2267  1028                     STR_4:	
  2268  1028  3456               	retlw	86	;'V'
  2269  1029  3442               	retlw	66	;'B'
  2270  102A  3441               	retlw	65	;'A'
  2271  102B  3454               	retlw	84	;'T'
  2272  102C  3400               	retlw	0
  2273                           
  2274                           	psect	stringtext8
  2275  102D                     __pstringtext8:	
  2276  102D                     STR_10:	
  2277  102D  3442               	retlw	66	;'B'
  2278  102E  344F               	retlw	79	;'O'
  2279  102F  344F               	retlw	79	;'O'
  2280  1030  3454               	retlw	84	;'T'
  2281  1031  3400               	retlw	0
  2282                           
  2283                           	psect	stringtext9
  2284  1032                     __pstringtext9:	
  2285  1032                     STR_9:	
  2286  1032  3455               	retlw	85	;'U'
  2287  1033  3457               	retlw	87	;'W'
  2288  1034  3432               	retlw	50	;'2'
  2289  1035  3400               	retlw	0
  2290                           
  2291                           	psect	stringtext10
  2292  1036                     __pstringtext10:	
  2293  1036                     STR_3:	
  2294  1036  3444               	retlw	68	;'D'
  2295  1037  3442               	retlw	66	;'B'
  2296  1038  3447               	retlw	71	;'G'
  2297  1039  3400               	retlw	0
  2298                           
  2299                           	psect	stringtext11
  2300  103A                     __pstringtext11:	
  2301  103A                     STR_6:	
  2302  103A  3446               	retlw	70	;'F'
  2303  103B  3456               	retlw	86	;'V'
  2304  103C  3452               	retlw	82	;'R'
  2305  103D  3400               	retlw	0
  2306                           
  2307                           	psect	stringtext12
  2308  103E                     __pstringtext12:	
  2309  103E                     STR_1:	
  2310  103E  342F               	retlw	47	;'/'
  2311  103F  3400               	retlw	0
  2312                           
  2313                           	psect	stringtext13
  2314  0000                     __pstringtext13:	
  2315  103E                     
  2316                           ; #config settings
  2317  0000                     
  2318                           	psect	cinit
  2319  0011                     start_initialization:	
  2320  0011                     __initialization:	
  2321                           
  2322                           ; Clear objects allocated to BANK0
  2323  0011  3059               	movlw	low __pbssBANK0
  2324  0012  0084               	movwf	4
  2325  0013  3000               	movlw	high __pbssBANK0
  2326  0014  0085               	movwf	5
  2327  0015  3016               	movlw	22
  2328  0016  318E  26AC  3180   	fcall	clear_ram0
  2329                           
  2330                           ; Clear objects allocated to BANK1
  2331  0019  0021               	movlb	1	; select bank1
  2332  001A  01E3               	clrf	__pbssBANK1& (0+127)
  2333  001B  01E4               	clrf	(__pbssBANK1+1)& (0+127)
  2334  001C  01E5               	clrf	(__pbssBANK1+2)& (0+127)
  2335  001D  01E6               	clrf	(__pbssBANK1+3)& (0+127)
  2336                           
  2337                           ; Clear objects allocated to BANK2
  2338  001E  3020               	movlw	low __pbssBANK2
  2339  001F  0084               	movwf	4
  2340  0020  3001               	movlw	high __pbssBANK2
  2341  0021  0085               	movwf	5
  2342  0022  3041               	movlw	65
  2343  0023  318E  26AC         	fcall	clear_ram0
  2344  0025                     end_of_initialization:	
  2345                           ;End of C runtime variable initialization code
  2346                           
  2347  0025                     __end_of__initialization:	
  2348  0025  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2349  0026  0020               	movlb	0
  2350  0027  3182  2A7D         	ljmp	_main	;jump to C main() function
  2351                           
  2352                           	psect	bssBANK0
  2353  0059                     __pbssBANK0:	
  2354  0059                     _TXPacket:	
  2355  0059                     	ds	1
  2356  005A                     _sleepLoop:	
  2357  005A                     	ds	1
  2358  005B                     _nrf24l01:	
  2359  005B                     	ds	1
  2360  005C                     _romData:	
  2361  005C                     	ds	19
  2362                           
  2363                           	psect	bssBANK1
  2364  00E3                     __pbssBANK1:	
  2365  00E3                     _counter:	
  2366  00E3                     	ds	4
  2367                           
  2368                           	psect	bssBANK2
  2369  0120                     __pbssBANK2:	
  2370  0120                     _romHolder:	
  2371  0120                     	ds	32
  2372  0140                     _RXPacket:	
  2373  0140                     	ds	33
  2374                           
  2375                           	psect	clrtext
  2376  0EAC                     clear_ram0:	
  2377                           ;	Called with FSR0 containing the base address, and
  2378                           ;	WREG with the size to clear
  2379                           
  2380  0EAC  0064               	clrwdt	;clear the watchdog before getting into this loop
  2381  0EAD                     clrloop0:	
  2382  0EAD  0180               	clrf	0	;clear RAM location pointed to by FSR
  2383  0EAE  3101               	addfsr 0,1
  2384  0EAF  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2385  0EB0  2EAD               	goto	clrloop0	;have we reached the end yet?
  2386  0EB1  3400               	retlw	0	;all done for this memory range, return
  2387                           
  2388                           	psect	cstackBANK1
  2389  00A0                     __pcstackBANK1:	
  2390  00A0                     loop@rfSetup:	
  2391                           
  2392                           ; 1 bytes @ 0x0
  2393  00A0                     	ds	1
  2394  00A1                     loop@packet:	
  2395                           
  2396                           ; 33 bytes @ 0x1
  2397  00A1                     	ds	33
  2398  00C2                     main@packet:	
  2399                           
  2400                           ; 33 bytes @ 0x22
  2401  00C2                     	ds	33
  2402                           
  2403                           	psect	cstackCOMMON
  2404  0070                     __pcstackCOMMON:	
  2405  0070                     ?_nrf24l01ISR:	
  2406  0070                     ?_nrf24l01SetRXMode:	
  2407                           ; 1 bytes @ 0x0
  2408                           
  2409  0070                     ?_nrf24l01GetRXPacket:	
  2410                           ; 1 bytes @ 0x0
  2411                           
  2412  0070                     ?_nrf24l01SendPacket:	
  2413                           ; 1 bytes @ 0x0
  2414                           
  2415  0070                     ?_nrf24l01Init:	
  2416                           ; 1 bytes @ 0x0
  2417                           
  2418  0070                     ?_flashRealod:	
  2419                           ; 1 bytes @ 0x0
  2420                           
  2421  0070                     ?_flashUpdate:	
  2422                           ; 1 bytes @ 0x0
  2423                           
  2424  0070                     ?_nrf24l01CELow:	
  2425                           ; 1 bytes @ 0x0
  2426                           
  2427  0070                     ??_nrf24l01CELow:	
  2428                           ; 1 bytes @ 0x0
  2429                           
  2430  0070                     ?_nrf24l01CEHigh:	
  2431                           ; 1 bytes @ 0x0
  2432                           
  2433  0070                     ??_nrf24l01CEHigh:	
  2434                           ; 1 bytes @ 0x0
  2435                           
  2436  0070                     ?_nrf24l01CSLow:	
  2437                           ; 1 bytes @ 0x0
  2438                           
  2439  0070                     ??_nrf24l01CSLow:	
  2440                           ; 1 bytes @ 0x0
  2441                           
  2442  0070                     ?_nrf24l01CSHigh:	
  2443                           ; 1 bytes @ 0x0
  2444                           
  2445  0070                     ??_nrf24l01CSHigh:	
  2446                           ; 1 bytes @ 0x0
  2447                           
  2448  0070                     ?_nrf24l01InterfaceInit:	
  2449                           ; 1 bytes @ 0x0
  2450                           
  2451  0070                     ?_nrf24l01SPISend:	
  2452                           ; 1 bytes @ 0x0
  2453                           
  2454  0070                     ??_nrf24l01SPISend:	
  2455                           ; 1 bytes @ 0x0
  2456                           
  2457  0070                     ?_nrf24l01SPIStart:	
  2458                           ; 1 bytes @ 0x0
  2459                           
  2460  0070                     ??_nrf24l01SPIStart:	
  2461                           ; 1 bytes @ 0x0
  2462                           
  2463  0070                     ?_nrf24l01SPIEnd:	
  2464                           ; 1 bytes @ 0x0
  2465                           
  2466  0070                     ??_nrf24l01SPIEnd:	
  2467                           ; 1 bytes @ 0x0
  2468                           
  2469  0070                     ?_enableInterrupts:	
  2470                           ; 1 bytes @ 0x0
  2471                           
  2472  0070                     ??_enableInterrupts:	
  2473                           ; 1 bytes @ 0x0
  2474                           
  2475  0070                     ?_exception:	
  2476                           ; 1 bytes @ 0x0
  2477                           
  2478  0070                     ?_ISR:	
  2479                           ; 1 bytes @ 0x0
  2480                           
  2481  0070                     ?_sleep:	
  2482                           ; 1 bytes @ 0x0
  2483                           
  2484  0070                     ?_checkTXPower:	
  2485                           ; 1 bytes @ 0x0
  2486                           
  2487  0070                     ?_loop:	
  2488                           ; 1 bytes @ 0x0
  2489                           
  2490  0070                     ?_main:	
  2491                           ; 1 bytes @ 0x0
  2492                           
  2493  0070                     ?_nrf24l01CheckACK:	
  2494                           ; 1 bytes @ 0x0
  2495                           
  2496  0070                     ?_nrf24l01ReceivePacket:	
  2497                           ; 1 bytes @ 0x0
  2498                           
  2499  0070                     ?_nrf24l01InitRegisters:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0070                     ?i1_flashWriteByte:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0070                     ?i1_flashUpdate:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0070                     ?i1_nrf24l01SetRXMode:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0070                     ?i1_memset:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0070                     ?_strcmp:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0070                     ?___wmul:	
  2518                           ; 2 bytes @ 0x0
  2519                           
  2520  0070                     nrf24l01SPISend@data:	
  2521                           ; 2 bytes @ 0x0
  2522                           
  2523  0070                     enableInterrupts@enable:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0070                     nrf24l01InitRegisters@isReciever:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0070                     strcmp@s2:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0070                     ___wmul@multiplier:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535  0070                     i1flashWriteByte@offset:	
  2536                           ; 2 bytes @ 0x0
  2537                           
  2538  0070                     i1memset@p1:	
  2539                           ; 2 bytes @ 0x0
  2540                           
  2541                           
  2542                           ; 2 bytes @ 0x0
  2543  0070                     	ds	1
  2544  0071                     ?i1_nrf24l01Send:	
  2545  0071                     i1nrf24l01Send@data:	
  2546                           ; 1 bytes @ 0x1
  2547                           
  2548                           
  2549                           ; 1 bytes @ 0x1
  2550  0071                     	ds	1
  2551  0072                     ??_strcmp:	
  2552  0072                     ??i1_nrf24l01Send:	
  2553                           ; 1 bytes @ 0x2
  2554                           
  2555  0072                     ___wmul@multiplicand:	
  2556                           ; 1 bytes @ 0x2
  2557                           
  2558  0072                     i1flashWriteByte@data:	
  2559                           ; 2 bytes @ 0x2
  2560                           
  2561  0072                     i1memset@c:	
  2562                           ; 2 bytes @ 0x2
  2563                           
  2564                           
  2565                           ; 2 bytes @ 0x2
  2566  0072                     	ds	1
  2567  0073                     strcmp@r:	
  2568  0073                     i1nrf24l01Send@command:	
  2569                           ; 1 bytes @ 0x3
  2570                           
  2571                           
  2572                           ; 1 bytes @ 0x3
  2573  0073                     	ds	1
  2574  0074                     ??___wmul:	
  2575  0074                     ??i1_flashWriteByte:	
  2576                           ; 1 bytes @ 0x4
  2577                           
  2578  0074                     ??i1_nrf24l01SetRXMode:	
  2579                           ; 1 bytes @ 0x4
  2580                           
  2581  0074                     strcmp@s1:	
  2582                           ; 1 bytes @ 0x4
  2583                           
  2584  0074                     ___wmul@product:	
  2585                           ; 1 bytes @ 0x4
  2586                           
  2587  0074                     i1flashWriteByte@address:	
  2588                           ; 2 bytes @ 0x4
  2589                           
  2590  0074                     i1memset@n:	
  2591                           ; 2 bytes @ 0x4
  2592                           
  2593                           
  2594                           ; 2 bytes @ 0x4
  2595  0074                     	ds	1
  2596  0075                     i1nrf24l01SetRXMode@config:	
  2597                           
  2598                           ; 1 bytes @ 0x5
  2599  0075                     	ds	1
  2600  0076                     ??i1_flashUpdate:	
  2601  0076                     ??i1_memset:	
  2602                           ; 1 bytes @ 0x6
  2603                           
  2604  0076                     i1nrf24l01SetRXMode@rxMode:	
  2605                           ; 1 bytes @ 0x6
  2606                           
  2607  0076                     i1memset@p:	
  2608                           ; 1 bytes @ 0x6
  2609                           
  2610                           
  2611                           ; 2 bytes @ 0x6
  2612  0076                     	ds	1
  2613  0077                     ??_nrf24l01CheckACK:	
  2614                           
  2615                           ; 1 bytes @ 0x7
  2616  0077                     	ds	1
  2617  0078                     ??_nrf24l01ReceivePacket:	
  2618  0078                     i1flashUpdate@i:	
  2619                           ; 1 bytes @ 0x8
  2620                           
  2621                           
  2622                           ; 2 bytes @ 0x8
  2623  0078                     	ds	1
  2624  0079                     nrf24l01ReceivePacket@width:	
  2625                           
  2626                           ; 1 bytes @ 0x9
  2627  0079                     	ds	1
  2628  007A                     ??_exception:	
  2629  007A                     nrf24l01ReceivePacket@i:	
  2630                           ; 1 bytes @ 0xA
  2631                           
  2632                           
  2633                           ; 1 bytes @ 0xA
  2634  007A                     	ds	2
  2635  007C                     exception@exception:	
  2636                           
  2637                           ; 1 bytes @ 0xC
  2638  007C                     	ds	1
  2639  007D                     ??_nrf24l01ISR:	
  2640                           
  2641                           ; 1 bytes @ 0xD
  2642  007D                     	ds	1
  2643  007E                     ??_ISR:	
  2644                           
  2645                           	psect	cstackBANK0
  2646  0020                     __pcstackBANK0:	
  2647                           ; 1 bytes @ 0xE
  2648                           
  2649  0020                     nrf24l01ISR@status:	
  2650                           
  2651                           ; 1 bytes @ 0x0
  2652  0020                     	ds	1
  2653  0021                     ?_strcat:	
  2654  0021                     ??_nrf24l01GetRXPacket:	
  2655                           ; 1 bytes @ 0x1
  2656                           
  2657  0021                     ?_nrf24l01Send:	
  2658                           ; 1 bytes @ 0x1
  2659                           
  2660  0021                     ?_strcpy:	
  2661                           ; 1 bytes @ 0x1
  2662                           
  2663  0021                     ?_flashWriteByte:	
  2664                           ; 1 bytes @ 0x1
  2665                           
  2666  0021                     ??_nrf24l01InterfaceInit:	
  2667                           ; 1 bytes @ 0x1
  2668                           
  2669  0021                     ??_sleep:	
  2670                           ; 1 bytes @ 0x1
  2671                           
  2672  0021                     ?_memset:	
  2673                           ; 1 bytes @ 0x1
  2674                           
  2675  0021                     ?_strlen:	
  2676                           ; 2 bytes @ 0x1
  2677                           
  2678  0021                     ?_flashReadByte:	
  2679                           ; 2 bytes @ 0x1
  2680                           
  2681  0021                     ?___lmul:	
  2682                           ; 2 bytes @ 0x1
  2683                           
  2684  0021                     ?___lldiv:	
  2685                           ; 4 bytes @ 0x1
  2686                           
  2687  0021                     ?___llmod:	
  2688                           ; 4 bytes @ 0x1
  2689                           
  2690  0021                     nrf24l01Send@data:	
  2691                           ; 4 bytes @ 0x1
  2692                           
  2693  0021                     flashWriteByte@offset:	
  2694                           ; 1 bytes @ 0x1
  2695                           
  2696  0021                     flashReadByte@offset:	
  2697                           ; 2 bytes @ 0x1
  2698                           
  2699  0021                     memset@p1:	
  2700                           ; 2 bytes @ 0x1
  2701                           
  2702  0021                     strcat@from:	
  2703                           ; 2 bytes @ 0x1
  2704                           
  2705  0021                     strcpy@from:	
  2706                           ; 2 bytes @ 0x1
  2707                           
  2708  0021                     ___lmul@multiplier:	
  2709                           ; 2 bytes @ 0x1
  2710                           
  2711  0021                     ___lldiv@divisor:	
  2712                           ; 4 bytes @ 0x1
  2713                           
  2714  0021                     ___llmod@divisor:	
  2715                           ; 4 bytes @ 0x1
  2716                           
  2717                           
  2718                           ; 4 bytes @ 0x1
  2719  0021                     	ds	1
  2720  0022                     ??_nrf24l01Send:	
  2721                           
  2722                           ; 1 bytes @ 0x2
  2723  0022                     	ds	1
  2724  0023                     ??_strcat:	
  2725  0023                     ??_strcpy:	
  2726                           ; 1 bytes @ 0x3
  2727                           
  2728  0023                     ??_strlen:	
  2729                           ; 1 bytes @ 0x3
  2730                           
  2731  0023                     ??_flashReadByte:	
  2732                           ; 1 bytes @ 0x3
  2733                           
  2734  0023                     nrf24l01Send@command:	
  2735                           ; 1 bytes @ 0x3
  2736                           
  2737  0023                     flashWriteByte@data:	
  2738                           ; 1 bytes @ 0x3
  2739                           
  2740  0023                     memset@c:	
  2741                           ; 2 bytes @ 0x3
  2742                           
  2743                           
  2744                           ; 2 bytes @ 0x3
  2745  0023                     	ds	1
  2746  0024                     ??_nrf24l01SetRXMode:	
  2747  0024                     ?_nrf24l01ChangeTXPower:	
  2748                           ; 1 bytes @ 0x4
  2749                           
  2750  0024                     ??_nrf24l01InitRegisters:	
  2751                           ; 1 bytes @ 0x4
  2752                           
  2753  0024                     strcat@cp:	
  2754                           ; 1 bytes @ 0x4
  2755                           
  2756  0024                     strcpy@to:	
  2757                           ; 1 bytes @ 0x4
  2758                           
  2759  0024                     nrf24l01ChangeTXPower@addPower:	
  2760                           ; 1 bytes @ 0x4
  2761                           
  2762                           
  2763                           ; 2 bytes @ 0x4
  2764  0024                     	ds	1
  2765  0025                     ??_flashWriteByte:	
  2766  0025                     nrf24l01SetRXMode@config:	
  2767                           ; 1 bytes @ 0x5
  2768                           
  2769  0025                     nrf24l01InitRegisters@channel:	
  2770                           ; 1 bytes @ 0x5
  2771                           
  2772  0025                     strcat@to:	
  2773                           ; 1 bytes @ 0x5
  2774                           
  2775  0025                     strcpy@cp:	
  2776                           ; 1 bytes @ 0x5
  2777                           
  2778  0025                     flashWriteByte@address:	
  2779                           ; 1 bytes @ 0x5
  2780                           
  2781  0025                     memset@n:	
  2782                           ; 2 bytes @ 0x5
  2783                           
  2784  0025                     ___lmul@multiplicand:	
  2785                           ; 2 bytes @ 0x5
  2786                           
  2787  0025                     ___lldiv@dividend:	
  2788                           ; 4 bytes @ 0x5
  2789                           
  2790  0025                     ___llmod@dividend:	
  2791                           ; 4 bytes @ 0x5
  2792                           
  2793                           
  2794                           ; 4 bytes @ 0x5
  2795  0025                     	ds	1
  2796  0026                     ??_nrf24l01ChangeTXPower:	
  2797  0026                     nrf24l01SetRXMode@rxMode:	
  2798                           ; 1 bytes @ 0x6
  2799                           
  2800  0026                     nrf24l01InitRegisters@setupAW:	
  2801                           ; 1 bytes @ 0x6
  2802                           
  2803  0026                     flashReadByte@result:	
  2804                           ; 1 bytes @ 0x6
  2805                           
  2806                           
  2807                           ; 2 bytes @ 0x6
  2808  0026                     	ds	1
  2809  0027                     ??_memset:	
  2810  0027                     ??_flashUpdate:	
  2811                           ; 1 bytes @ 0x7
  2812                           
  2813  0027                     nrf24l01ChangeTXPower@rfSetup:	
  2814                           ; 1 bytes @ 0x7
  2815                           
  2816  0027                     nrf24l01InitRegisters@feature:	
  2817                           ; 1 bytes @ 0x7
  2818                           
  2819  0027                     strlen@s:	
  2820                           ; 1 bytes @ 0x7
  2821                           
  2822  0027                     memset@p:	
  2823                           ; 1 bytes @ 0x7
  2824                           
  2825                           
  2826                           ; 2 bytes @ 0x7
  2827  0027                     	ds	1
  2828  0028                     ??_checkTXPower:	
  2829  0028                     nrf24l01InitRegisters@rfSetup:	
  2830                           ; 1 bytes @ 0x8
  2831                           
  2832  0028                     strlen@cp:	
  2833                           ; 1 bytes @ 0x8
  2834                           
  2835  0028                     flashReadByte@address:	
  2836                           ; 1 bytes @ 0x8
  2837                           
  2838                           
  2839                           ; 2 bytes @ 0x8
  2840  0028                     	ds	1
  2841  0029                     ??_nrf24l01SendPacket:	
  2842  0029                     ??___lmul:	
  2843                           ; 1 bytes @ 0x9
  2844                           
  2845  0029                     ??___lldiv:	
  2846                           ; 1 bytes @ 0x9
  2847                           
  2848  0029                     ??___llmod:	
  2849                           ; 1 bytes @ 0x9
  2850                           
  2851  0029                     checkTXPower@rxPacket:	
  2852                           ; 1 bytes @ 0x9
  2853                           
  2854  0029                     nrf24l01InitRegisters@status:	
  2855                           ; 1 bytes @ 0x9
  2856                           
  2857  0029                     flashUpdate@i:	
  2858                           ; 1 bytes @ 0x9
  2859                           
  2860  0029                     ___lmul@product:	
  2861                           ; 2 bytes @ 0x9
  2862                           
  2863                           
  2864                           ; 4 bytes @ 0x9
  2865  0029                     	ds	1
  2866  002A                     ??_flashRealod:	
  2867  002A                     nrf24l01InitRegisters@enRXAddr:	
  2868                           ; 1 bytes @ 0xA
  2869                           
  2870  002A                     ___llmod@counter:	
  2871                           ; 1 bytes @ 0xA
  2872                           
  2873  002A                     ___lldiv@quotient:	
  2874                           ; 1 bytes @ 0xA
  2875                           
  2876                           
  2877                           ; 4 bytes @ 0xA
  2878  002A                     	ds	1
  2879  002B                     nrf24l01SendPacket@Packet:	
  2880  002B                     nrf24l01InitRegisters@enAA:	
  2881                           ; 1 bytes @ 0xB
  2882                           
  2883  002B                     flashRealod@i:	
  2884                           ; 1 bytes @ 0xB
  2885                           
  2886                           
  2887                           ; 2 bytes @ 0xB
  2888  002B                     	ds	1
  2889  002C                     nrf24l01SendPacket@i:	
  2890  002C                     nrf24l01InitRegisters@DynPD:	
  2891                           ; 1 bytes @ 0xC
  2892                           
  2893                           
  2894                           ; 1 bytes @ 0xC
  2895  002C                     	ds	1
  2896  002D                     nrf24l01InitRegisters@config:	
  2897                           
  2898                           ; 1 bytes @ 0xD
  2899  002D                     	ds	1
  2900  002E                     ??_nrf24l01Init:	
  2901  002E                     ___lldiv@counter:	
  2902                           ; 1 bytes @ 0xE
  2903                           
  2904                           
  2905                           ; 1 bytes @ 0xE
  2906  002E                     	ds	1
  2907  002F                     ?_ultoa:	
  2908  002F                     ?_getADCValue:	
  2909                           ; 1 bytes @ 0xF
  2910                           
  2911  002F                     getADCValue@divider:	
  2912                           ; 4 bytes @ 0xF
  2913                           
  2914  002F                     ultoa@val:	
  2915                           ; 4 bytes @ 0xF
  2916                           
  2917                           
  2918                           ; 4 bytes @ 0xF
  2919  002F                     	ds	1
  2920  0030                     nrf24l01Init@isReciever:	
  2921                           
  2922                           ; 1 bytes @ 0x10
  2923  0030                     	ds	3
  2924  0033                     ??_getADCValue:	
  2925  0033                     ultoa@base:	
  2926                           ; 1 bytes @ 0x13
  2927                           
  2928                           
  2929                           ; 2 bytes @ 0x13
  2930  0033                     	ds	2
  2931  0035                     ??_ultoa:	
  2932                           
  2933                           ; 1 bytes @ 0x15
  2934  0035                     	ds	1
  2935  0036                     ultoa@v:	
  2936                           
  2937                           ; 4 bytes @ 0x16
  2938  0036                     	ds	1
  2939  0037                     getADCValue@channel:	
  2940                           
  2941                           ; 1 bytes @ 0x17
  2942  0037                     	ds	1
  2943  0038                     getADCValue@adcLoop:	
  2944                           
  2945                           ; 1 bytes @ 0x18
  2946  0038                     	ds	1
  2947  0039                     getADCValue@adcSum:	
  2948                           
  2949                           ; 4 bytes @ 0x19
  2950  0039                     	ds	1
  2951  003A                     ultoa@c:	
  2952                           
  2953                           ; 1 bytes @ 0x1A
  2954  003A                     	ds	1
  2955  003B                     ultoa@buf:	
  2956                           
  2957                           ; 1 bytes @ 0x1B
  2958  003B                     	ds	2
  2959  003D                     ?_setMessage:	
  2960  003D                     setMessage@topic:	
  2961                           ; 1 bytes @ 0x1D
  2962                           
  2963                           
  2964                           ; 2 bytes @ 0x1D
  2965  003D                     	ds	2
  2966  003F                     setMessage@value:	
  2967                           
  2968                           ; 4 bytes @ 0x1F
  2969  003F                     	ds	4
  2970  0043                     ??_setMessage:	
  2971  0043                     setMessage@tempString:	
  2972                           ; 1 bytes @ 0x23
  2973                           
  2974                           
  2975                           ; 16 bytes @ 0x23
  2976  0043                     	ds	16
  2977  0053                     setMessage@packet:	
  2978                           
  2979                           ; 1 bytes @ 0x33
  2980  0053                     	ds	1
  2981  0054                     ??_loop:	
  2982                           
  2983                           ; 1 bytes @ 0x34
  2984  0054                     	ds	4
  2985  0058                     ??_main:	
  2986                           
  2987                           ; 1 bytes @ 0x38
  2988  0058                     	ds	1
  2989                           
  2990                           	psect	maintext
  2991  027D                     __pmaintext:	
  2992 ;;
  2993 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2994 ;;
  2995 ;; *************** function _main *****************
  2996 ;; Defined at:
  2997 ;;		line 157 in file "main.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;		None
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;  packet         33   34[BANK1 ] struct .
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  1    wreg      void 
  3004 ;; Registers used:
  3005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : B1F/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3012 ;;      Locals:         0       0      33       0       0       0       0       0       0       0       0       0       
      +0       0
  3013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3014 ;;      Totals:         0       1      33       0       0       0       0       0       0       0       0       0       
      +0       0
  3015 ;;Total ram usage:       34 bytes
  3016 ;; Hardware stack levels required when called:   13
  3017 ;; This function calls:
  3018 ;;		_flashRealod
  3019 ;;		_flashUpdate
  3020 ;;		_loop
  3021 ;;		_nrf24l01Init
  3022 ;;		_nrf24l01SendPacket
  3023 ;;		_setMessage
  3024 ;;		_sleep
  3025 ;;		_strcpy
  3026 ;; This function is called by:
  3027 ;;		Startup code after reset
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           
  3032                           ;psect for function _main
  3033  027D                     _main:	
  3034                           
  3035                           ;main.c: 160: ANSELA = 0x00;
  3036                           
  3037                           ;incstack = 0
  3038                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3039  027D  0023               	movlb	3	; select bank3
  3040  027E  018C               	clrf	12	;volatile
  3041                           
  3042                           ;main.c: 161: ANSELC = 0x00;
  3043  027F  018E               	clrf	14	;volatile
  3044                           
  3045                           ;main.c: 163: ODCONA = 0x00;
  3046  0280  0025               	movlb	5	; select bank5
  3047  0281  018C               	clrf	12	;volatile
  3048                           
  3049                           ;main.c: 164: ODCONC = 0x00;
  3050  0282  018E               	clrf	14	;volatile
  3051                           
  3052                           ;main.c: 169: INLVLA = 0x00;
  3053  0283  0027               	movlb	7	; select bank7
  3054  0284  018C               	clrf	12	;volatile
  3055                           
  3056                           ;main.c: 170: INLVLC = 0x00;
  3057  0285  018E               	clrf	14	;volatile
  3058                           
  3059                           ;main.c: 172: WPUA = 0x00;
  3060  0286  0024               	movlb	4	; select bank4
  3061  0287  018C               	clrf	12	;volatile
  3062                           
  3063                           ;main.c: 173: WPUC = 0x00;
  3064  0288  018E               	clrf	14	;volatile
  3065                           
  3066                           ;main.c: 175: TRISCbits.TRISC5 = 0;
  3067  0289  0021               	movlb	1	; select bank1
  3068  028A  128E               	bcf	14,5	;volatile
  3069                           
  3070                           ;main.c: 176: TRISCbits.TRISC4 = 0;
  3071  028B  120E               	bcf	14,4	;volatile
  3072                           
  3073                           ;main.c: 178: PORTCbits.RC4 = 0;
  3074  028C  0020               	movlb	0	; select bank0
  3075  028D  120E               	bcf	14,4	;volatile
  3076                           
  3077                           ;main.c: 185: INTCONbits.PEIE = 0;
  3078  028E  130B               	bcf	11,6	;volatile
  3079                           
  3080                           ;main.c: 186: INTCONbits.GIE = 0;
  3081  028F  138B               	bcf	11,7	;volatile
  3082                           
  3083                           ;main.c: 188: OSCCON1bits.NOSC = 0b000;
  3084  0290  308F               	movlw	-113
  3085  0291  0032               	movlb	18	; select bank18
  3086  0292  0599               	andwf	25,f	;volatile
  3087                           
  3088                           ;main.c: 189: OSCCON1bits.NDIV = 0b000;
  3089  0293  30F0               	movlw	-16
  3090  0294  0599               	andwf	25,f	;volatile
  3091                           
  3092                           ;main.c: 191: _delay((unsigned long)((10)*(16000000/4000.0)));
  3093  0295  3034               	movlw	52
  3094  0296  0020               	movlb	0	; select bank0
  3095  0297  00D8               	movwf	??_main
  3096  0298  30F1               	movlw	241
  3097  0299                     u1617:	
  3098  0299  0B89               	decfsz	9,f
  3099  029A  2A99               	goto	u1617
  3100  029B  0BD8               	decfsz	??_main,f
  3101  029C  2A99               	goto	u1617
  3102  029D  3200               	nop2
  3103                           
  3104                           ;main.c: 193: flashRealod();
  3105  029E  318F  27C0  3182   	fcall	_flashRealod
  3106                           
  3107                           ;main.c: 195: if (romData.check != 0x07){
  3108  02A1  3007               	movlw	7
  3109  02A2  0020               	movlb	0	; select bank0
  3110  02A3  065C               	xorwf	_romData,w
  3111  02A4  1903               	btfsc	3,2
  3112  02A5  2AB8               	goto	l3007
  3113                           
  3114                           ;main.c: 196: romData.check = 0x07;
  3115  02A6  3007               	movlw	7
  3116  02A7  00D8               	movwf	??_main
  3117  02A8  0858               	movf	??_main,w
  3118  02A9  00DC               	movwf	_romData
  3119                           
  3120                           ;main.c: 197: strcpy(romData.name, "UW2");
  3121  02AA  3032               	movlw	low (STR_9| (0+32768))
  3122  02AB  00A1               	movwf	strcpy@from
  3123  02AC  3090               	movlw	high (STR_9| (0+32768))
  3124  02AD  00A2               	movwf	strcpy@from+1
  3125  02AE  305D               	movlw	(low ((_romData| 0+1)))& (0+255)
  3126  02AF  318F  2769  3182   	fcall	_strcpy
  3127                           
  3128                           ;main.c: 198: romData.bootMode = 0x00;
  3129  02B2  0020               	movlb	0	; select bank0
  3130  02B3  01ED               	clrf	_romData+17
  3131  02B4  01EE               	clrf	_romData+18
  3132                           
  3133                           ;main.c: 199: flashUpdate();
  3134  02B5  3187  27AA  3182   	fcall	_flashUpdate
  3135  02B8                     l3007:	
  3136                           
  3137                           ;main.c: 200: };main.c: 202: nrf24l01Init(0);
  3138  02B8  3000               	movlw	0
  3139  02B9  3187  270F  3182   	fcall	_nrf24l01Init
  3140                           
  3141                           ;main.c: 209: ADCON0bits.ADON = 0;
  3142  02BC  0021               	movlb	1	; select bank1
  3143  02BD  101D               	bcf	29,0	;volatile
  3144                           
  3145                           ;main.c: 212: ANSELAbits.ANSA4 = 1;
  3146  02BE  0023               	movlb	3	; select bank3
  3147  02BF  160C               	bsf	12,4	;volatile
  3148                           
  3149                           ;main.c: 213: TRISAbits.TRISA4 = 1;
  3150  02C0  0021               	movlb	1	; select bank1
  3151  02C1  160C               	bsf	12,4	;volatile
  3152                           
  3153                           ;main.c: 214: WPUAbits.WPUA4 = 0;
  3154  02C2  0024               	movlb	4	; select bank4
  3155  02C3  120C               	bcf	12,4	;volatile
  3156                           
  3157                           ;main.c: 217: ANSELCbits.ANSC3 = 1;
  3158  02C4  0023               	movlb	3	; select bank3
  3159  02C5  158E               	bsf	14,3	;volatile
  3160                           
  3161                           ;main.c: 218: TRISCbits.TRISC3 = 1;
  3162  02C6  0021               	movlb	1	; select bank1
  3163  02C7  158E               	bsf	14,3	;volatile
  3164                           
  3165                           ;main.c: 221: FVRCONbits.TSEN = 0;
  3166  02C8  0022               	movlb	2	; select bank2
  3167  02C9  1297               	bcf	23,5	;volatile
  3168                           
  3169                           ;main.c: 222: FVRCONbits.TSRNG = 0;
  3170  02CA  1217               	bcf	23,4	;volatile
  3171                           
  3172                           ;main.c: 223: FVRCONbits.TSEN = 1;
  3173  02CB  1697               	bsf	23,5	;volatile
  3174                           
  3175                           ;main.c: 226: FVRCONbits.FVREN = 0;
  3176  02CC  1397               	bcf	23,7	;volatile
  3177                           
  3178                           ;main.c: 227: FVRCONbits.ADFVR = 1;
  3179  02CD  0817               	movf	23,w	;volatile
  3180  02CE  39FC               	andlw	-4
  3181  02CF  3801               	iorlw	1
  3182  02D0  0097               	movwf	23	;volatile
  3183                           
  3184                           ;main.c: 228: FVRCONbits.FVREN = 1;
  3185  02D1  1797               	bsf	23,7	;volatile
  3186                           
  3187                           ;main.c: 230: ADCON1bits.ADCS = 0b111;
  3188  02D2  3070               	movlw	112
  3189  02D3  0021               	movlb	1	; select bank1
  3190  02D4  049E               	iorwf	30,f	;volatile
  3191                           
  3192                           ;main.c: 231: ADCON1bits.ADFM = 1;
  3193  02D5  179E               	bsf	30,7	;volatile
  3194                           
  3195                           ;main.c: 232: ADCON1bits.ADNREF = 0b0;
  3196  02D6  111E               	bcf	30,2	;volatile
  3197                           
  3198                           ;main.c: 233: ADCON1bits.ADPREF = 0b00;
  3199  02D7  30FC               	movlw	-4
  3200  02D8  059E               	andwf	30,f	;volatile
  3201                           
  3202                           ;main.c: 235: ADCON0bits.CHS = 3;
  3203  02D9  081D               	movf	29,w	;volatile
  3204  02DA  3903               	andlw	-253
  3205  02DB  380C               	iorlw	12
  3206  02DC  009D               	movwf	29	;volatile
  3207                           
  3208                           ;main.c: 236: ADCON0bits.ADON = 1;
  3209  02DD  141D               	bsf	29,0	;volatile
  3210                           
  3211                           ;main.c: 241: TRISAbits.TRISA2 = 1;
  3212  02DE  150C               	bsf	12,2	;volatile
  3213                           
  3214                           ;main.c: 242: PIE0bits.INTE = 1;
  3215  02DF  1410               	bsf	16,0	;volatile
  3216                           
  3217                           ;main.c: 243: INTCONbits.INTEDG = 0;
  3218  02E0  100B               	bcf	11,0	;volatile
  3219                           
  3220                           ;main.c: 247: WDTCONbits.WDTPS = 10;
  3221  02E1  0817               	movf	23,w	;volatile
  3222  02E2  39C1               	andlw	-63
  3223  02E3  3814               	iorlw	20
  3224  02E4  0097               	movwf	23	;volatile
  3225                           
  3226                           ;main.c: 250: TRISAbits.TRISA5 = 0;
  3227  02E5  128C               	bcf	12,5	;volatile
  3228                           
  3229                           ;main.c: 251: PORTAbits.RA5 = 0;
  3230  02E6  0020               	movlb	0	; select bank0
  3231  02E7  128C               	bcf	12,5	;volatile
  3232                           
  3233                           ;main.c: 254: INTCONbits.PEIE = 1;
  3234  02E8  170B               	bsf	11,6	;volatile
  3235                           
  3236                           ;main.c: 255: INTCONbits.GIE = 1;
  3237  02E9  178B               	bsf	11,7	;volatile
  3238                           
  3239                           ;main.c: 257: nrf24l01Packet_t packet;;main.c: 259: setMessage(&packet, "BOOT", romData.
      +                          bootMode);
  3240  02EA  302D               	movlw	low (STR_10| (0+32768))
  3241  02EB  00BD               	movwf	setMessage@topic
  3242  02EC  3090               	movlw	high (STR_10| (0+32768))
  3243  02ED  00BE               	movwf	setMessage@topic+1
  3244  02EE  086D               	movf	_romData+17,w
  3245  02EF  00BF               	movwf	setMessage@value
  3246  02F0  086E               	movf	_romData+18,w
  3247  02F1  00C0               	movwf	setMessage@value+1
  3248  02F2  01C1               	clrf	setMessage@value+2
  3249  02F3  01C2               	clrf	setMessage@value+3
  3250  02F4  30C2               	movlw	(low (main@packet| 0))& (0+255)
  3251  02F5  3184  2470  3182   	fcall	_setMessage
  3252                           
  3253                           ;main.c: 260: packet.packetData.byte = 0;
  3254  02F8  0021               	movlb	1	; select bank1
  3255  02F9  01C2               	clrf	main@packet^(0+128)
  3256                           
  3257                           ;main.c: 261: packet.packetData.ACKRequest = 0;
  3258  02FA  1142               	bcf	main@packet^(0+128),2
  3259                           
  3260                           ;main.c: 262: nrf24l01SendPacket(&packet);
  3261  02FB  30C2               	movlw	(low (main@packet| 0))& (0+255)
  3262  02FC  3181  21E7  3182   	fcall	_nrf24l01SendPacket
  3263                           
  3264                           ;main.c: 263: sleep();
  3265  02FF  3187  27EE  3182   	fcall	_sleep
  3266  0302                     l3071:	
  3267                           ;main.c: 265: while(1){
  3268                           
  3269                           
  3270                           ;main.c: 266: loop();
  3271  0302  3180  2029  3182   	fcall	_loop
  3272  0305  2B02               	goto	l3071
  3273  0306                     __end_of_main:	
  3274                           ;main.c: 267: };main.c: 269: return;
  3275                           
  3276                           
  3277                           	psect	text1
  3278  0F69                     __ptext1:	
  3279 ;; *************** function _strcpy *****************
  3280 ;; Defined at:
  3281 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;  to              1    wreg     PTR unsigned char 
  3284 ;;		 -> romData(19), 
  3285 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  3286 ;;		 -> STR_9(4), 
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;  to              1    4[BANK0 ] PTR unsigned char 
  3289 ;;		 -> romData(19), 
  3290 ;;  cp              1    5[BANK0 ] PTR unsigned char 
  3291 ;;		 -> romData(19), 
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  1    wreg      PTR unsigned char 
  3294 ;; Registers used:
  3295 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3301 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3302 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3303 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3304 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3305 ;;Total ram usage:        5 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    7
  3308 ;; This function calls:
  3309 ;;		Nothing
  3310 ;; This function is called by:
  3311 ;;		_main
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           
  3316                           ;psect for function _strcpy
  3317  0F69                     _strcpy:	
  3318                           
  3319                           ;incstack = 0
  3320                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3321                           ;strcpy@to stored from wreg
  3322  0F69  0020               	movlb	0	; select bank0
  3323  0F6A  00A4               	movwf	strcpy@to
  3324  0F6B  0824               	movf	strcpy@to,w
  3325  0F6C  00A3               	movwf	??_strcpy
  3326  0F6D  0823               	movf	??_strcpy,w
  3327  0F6E  00A5               	movwf	strcpy@cp
  3328  0F6F                     l2687:	
  3329  0F6F  0825               	movf	strcpy@cp,w
  3330  0F70  0086               	movwf	6
  3331  0F71  0187               	clrf	7
  3332  0F72  0821               	movf	strcpy@from,w
  3333  0F73  0084               	movwf	4
  3334  0F74  0822               	movf	strcpy@from+1,w
  3335  0F75  0085               	movwf	5
  3336  0F76  0800               	movf	0,w	;code access
  3337  0F77  3FC0               	movwi [0]fsr1
  3338  0F78  0889               	movf	9,f
  3339  0F79  1903               	btfsc	3,2
  3340  0F7A  0008               	return
  3341  0F7B  3001               	movlw	1
  3342  0F7C  00A3               	movwf	??_strcpy
  3343  0F7D  0823               	movf	??_strcpy,w
  3344  0F7E  07A5               	addwf	strcpy@cp,f
  3345  0F7F  3001               	movlw	1
  3346  0F80  07A1               	addwf	strcpy@from,f
  3347  0F81  3000               	movlw	0
  3348  0F82  3DA2               	addwfc	strcpy@from+1,f
  3349  0F83  2F6F               	goto	l2687
  3350  0F84                     __end_of_strcpy:	
  3351                           ;	Return value of _strcpy is never used
  3352                           
  3353                           
  3354                           	psect	text2
  3355  070F                     __ptext2:	
  3356 ;; *************** function _nrf24l01Init *****************
  3357 ;; Defined at:
  3358 ;;		line 387 in file "nrf24l01.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  isReciever      1    wreg     unsigned char 
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  isReciever      1   16[BANK0 ] unsigned char 
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  1    wreg      void 
  3365 ;; Registers used:
  3366 ;;		wreg, status,2, status,0, pclath, cstack
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3373 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3374 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3375 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3376 ;;Total ram usage:        3 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; Hardware stack levels required when called:   11
  3379 ;; This function calls:
  3380 ;;		_nrf24l01CEHigh
  3381 ;;		_nrf24l01CELow
  3382 ;;		_nrf24l01InitRegisters
  3383 ;;		_nrf24l01InterfaceInit
  3384 ;; This function is called by:
  3385 ;;		_main
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           
  3390                           ;psect for function _nrf24l01Init
  3391  070F                     _nrf24l01Init:	
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  3395                           ;nrf24l01Init@isReciever stored from wreg
  3396  070F  0020               	movlb	0	; select bank0
  3397  0710  00B0               	movwf	nrf24l01Init@isReciever
  3398                           
  3399                           ;nrf24l01.c: 390: nrf24l01InterfaceInit();
  3400  0711  318F  2784  3187   	fcall	_nrf24l01InterfaceInit
  3401                           
  3402                           ;nrf24l01.c: 395: nrf24l01CELow();
  3403  0714  318E  26A3  3187   	fcall	_nrf24l01CELow
  3404                           
  3405                           ;nrf24l01.c: 397: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3406  0717  3002               	movlw	2
  3407  0718  0020               	movlb	0	; select bank0
  3408  0719  00AF               	movwf	??_nrf24l01Init+1
  3409  071A  3004               	movlw	4
  3410  071B  00AE               	movwf	??_nrf24l01Init
  3411  071C  30BA               	movlw	186
  3412  071D                     u1627:	
  3413  071D  0B89               	decfsz	9,f
  3414  071E  2F1D               	goto	u1627
  3415  071F  0BAE               	decfsz	??_nrf24l01Init,f
  3416  0720  2F1D               	goto	u1627
  3417  0721  0BAF               	decfsz	??_nrf24l01Init+1,f
  3418  0722  2F1D               	goto	u1627
  3419  0723  0000               	nop
  3420                           
  3421                           ;nrf24l01.c: 399: nrf24l01InitRegisters(isReciever);
  3422  0724  0020               	movlb	0	; select bank0
  3423  0725  0830               	movf	nrf24l01Init@isReciever,w
  3424  0726  3181  213D  3187   	fcall	_nrf24l01InitRegisters
  3425                           
  3426                           ;nrf24l01.c: 401: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3427  0729  3002               	movlw	2
  3428  072A  0020               	movlb	0	; select bank0
  3429  072B  00AF               	movwf	??_nrf24l01Init+1
  3430  072C  3004               	movlw	4
  3431  072D  00AE               	movwf	??_nrf24l01Init
  3432  072E  30BA               	movlw	186
  3433  072F                     u1637:	
  3434  072F  0B89               	decfsz	9,f
  3435  0730  2F2F               	goto	u1637
  3436  0731  0BAE               	decfsz	??_nrf24l01Init,f
  3437  0732  2F2F               	goto	u1637
  3438  0733  0BAF               	decfsz	??_nrf24l01Init+1,f
  3439  0734  2F2F               	goto	u1637
  3440  0735  0000               	nop
  3441                           
  3442                           ;nrf24l01.c: 403: nrf24l01CEHigh();
  3443  0736  318E  26A0         	fcall	_nrf24l01CEHigh
  3444  0738  0008               	return
  3445  0739                     __end_of_nrf24l01Init:	
  3446                           
  3447                           	psect	text3
  3448  0F84                     __ptext3:	
  3449 ;; *************** function _nrf24l01InterfaceInit *****************
  3450 ;; Defined at:
  3451 ;;		line 28 in file "interface.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;		None
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;		None
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      void 
  3458 ;; Registers used:
  3459 ;;		wreg, status,2, status,0
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3469 ;;Total ram usage:        0 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; Hardware stack levels required when called:    7
  3472 ;; This function calls:
  3473 ;;		Nothing
  3474 ;; This function is called by:
  3475 ;;		_nrf24l01Init
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           
  3480                           ;psect for function _nrf24l01InterfaceInit
  3481  0F84                     _nrf24l01InterfaceInit:	
  3482                           
  3483                           ;interface.c: 30: TRISAbits.TRISA0 = 0;
  3484                           
  3485                           ;incstack = 0
  3486                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3487  0F84  0021               	movlb	1	; select bank1
  3488  0F85  100C               	bcf	12,0	;volatile
  3489                           
  3490                           ;interface.c: 31: TRISAbits.TRISA1 = 0;
  3491  0F86  108C               	bcf	12,1	;volatile
  3492                           
  3493                           ;interface.c: 33: TRISCbits.TRISC1 = 1;
  3494  0F87  148E               	bsf	14,1	;volatile
  3495                           
  3496                           ;interface.c: 34: TRISCbits.TRISC2 = 0;
  3497  0F88  110E               	bcf	14,2	;volatile
  3498                           
  3499                           ;interface.c: 35: TRISCbits.TRISC0 = 0;
  3500  0F89  100E               	bcf	14,0	;volatile
  3501                           
  3502                           ;interface.c: 37: SSP1CON1bits.SSPEN = 0;
  3503  0F8A  0024               	movlb	4	; select bank4
  3504  0F8B  1295               	bcf	21,5	;volatile
  3505                           
  3506                           ;interface.c: 39: RC1PPSbits.RC1PPS = 0b10001;
  3507  0F8C  003D               	movlb	29	; select bank29
  3508  0F8D  0821               	movf	33,w	;volatile
  3509  0F8E  39E0               	andlw	-32
  3510  0F8F  3811               	iorlw	17
  3511  0F90  00A1               	movwf	33	;volatile
  3512                           
  3513                           ;interface.c: 40: RC2PPSbits.RC2PPS = 0b11001;
  3514  0F91  0822               	movf	34,w	;volatile
  3515  0F92  39E0               	andlw	-32
  3516  0F93  3819               	iorlw	25
  3517  0F94  00A2               	movwf	34	;volatile
  3518                           
  3519                           ;interface.c: 41: RC0PPSbits.RC0PPS = 0b11000;
  3520  0F95  0820               	movf	32,w	;volatile
  3521  0F96  39E0               	andlw	-32
  3522  0F97  3818               	iorlw	24
  3523  0F98  00A0               	movwf	32	;volatile
  3524                           
  3525                           ;interface.c: 43: SSP1CON1bits.CKP = 0;
  3526  0F99  0024               	movlb	4	; select bank4
  3527  0F9A  1215               	bcf	21,4	;volatile
  3528                           
  3529                           ;interface.c: 44: SSP1STATbits.CKE = 1;
  3530  0F9B  1714               	bsf	20,6	;volatile
  3531                           
  3532                           ;interface.c: 45: SSP1CON1bits.SSPM = 0b0000;
  3533  0F9C  30F0               	movlw	-16
  3534  0F9D  0595               	andwf	21,f	;volatile
  3535                           
  3536                           ;interface.c: 47: SSP1CON1bits.SSPEN = 1;
  3537  0F9E  1695               	bsf	21,5	;volatile
  3538  0F9F  0008               	return
  3539  0FA0                     __end_of_nrf24l01InterfaceInit:	
  3540                           
  3541                           	psect	text4
  3542  013D                     __ptext4:	
  3543 ;; *************** function _nrf24l01InitRegisters *****************
  3544 ;; Defined at:
  3545 ;;		line 302 in file "nrf24l01.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;  isReciever      1    wreg     unsigned char 
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;  isReciever      1    0[COMMON] unsigned char 
  3550 ;;  config          1   13[BANK0 ] struct .
  3551 ;;  DynPD           1   12[BANK0 ] struct .
  3552 ;;  enAA            1   11[BANK0 ] struct .
  3553 ;;  enRXAddr        1   10[BANK0 ] struct .
  3554 ;;  status          1    9[BANK0 ] struct .
  3555 ;;  rfSetup         1    8[BANK0 ] struct .
  3556 ;;  feature         1    7[BANK0 ] struct .
  3557 ;;  setupAW         1    6[BANK0 ] struct .
  3558 ;;  channel         1    5[BANK0 ] struct .
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  1    wreg      void 
  3561 ;; Registers used:
  3562 ;;		wreg, status,2, status,0, pclath, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3569 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3570 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3571 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3572 ;;Total ram usage:       10 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:   10
  3575 ;; This function calls:
  3576 ;;		_nrf24l01Send
  3577 ;; This function is called by:
  3578 ;;		_nrf24l01Init
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           
  3583                           ;psect for function _nrf24l01InitRegisters
  3584  013D                     _nrf24l01InitRegisters:	
  3585                           
  3586                           ;nrf24l01.c: 304: n_CONFIG_t config;;nrf24l01.c: 306: config.PWR_UP = 0;
  3587                           
  3588                           ;incstack = 0
  3589                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  3590  013D  0020               	movlb	0	; select bank0
  3591  013E  10AD               	bcf	nrf24l01InitRegisters@config,1
  3592                           
  3593                           ;nrf24l01.c: 307: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3594  013F  082D               	movf	nrf24l01InitRegisters@config,w
  3595  0140  00A4               	movwf	??_nrf24l01InitRegisters
  3596  0141  0824               	movf	??_nrf24l01InitRegisters,w
  3597  0142  00A1               	movwf	nrf24l01Send@data
  3598  0143  3020               	movlw	32
  3599  0144  318F  27E0  3181   	fcall	_nrf24l01Send
  3600                           
  3601                           ;nrf24l01.c: 309: n_SETUP_AW_t setupAW;;nrf24l01.c: 310: setupAW.byte = 0x00;
  3602  0147  0020               	movlb	0	; select bank0
  3603  0148  01A6               	clrf	nrf24l01InitRegisters@setupAW
  3604                           
  3605                           ;nrf24l01.c: 311: setupAW.AW = 0b11;
  3606  0149  3003               	movlw	3
  3607  014A  04A6               	iorwf	nrf24l01InitRegisters@setupAW,f
  3608                           
  3609                           ;nrf24l01.c: 312: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  3610  014B  0826               	movf	nrf24l01InitRegisters@setupAW,w
  3611  014C  00A4               	movwf	??_nrf24l01InitRegisters
  3612  014D  0824               	movf	??_nrf24l01InitRegisters,w
  3613  014E  00A1               	movwf	nrf24l01Send@data
  3614  014F  3022               	movlw	34
  3615  0150  318F  27E0  3181   	fcall	_nrf24l01Send
  3616                           
  3617                           ;nrf24l01.c: 315: n_RF_CH_t channel;;nrf24l01.c: 316: channel.RF_CH = 2;
  3618  0153  0020               	movlb	0	; select bank0
  3619  0154  0825               	movf	nrf24l01InitRegisters@channel,w
  3620  0155  3980               	andlw	-128
  3621  0156  3802               	iorlw	2
  3622  0157  00A5               	movwf	nrf24l01InitRegisters@channel
  3623                           
  3624                           ;nrf24l01.c: 317: nrf24l01Send(0b00100000 | 0x05, channel.byte);
  3625  0158  0825               	movf	nrf24l01InitRegisters@channel,w
  3626  0159  00A4               	movwf	??_nrf24l01InitRegisters
  3627  015A  0824               	movf	??_nrf24l01InitRegisters,w
  3628  015B  00A1               	movwf	nrf24l01Send@data
  3629  015C  3025               	movlw	37
  3630  015D  318F  27E0  3181   	fcall	_nrf24l01Send
  3631                           
  3632                           ;nrf24l01.c: 320: n_RF_SETUP_t rfSetup;;nrf24l01.c: 321: rfSetup.byte = 0x00;
  3633  0160  0020               	movlb	0	; select bank0
  3634  0161  01A8               	clrf	nrf24l01InitRegisters@rfSetup
  3635                           
  3636                           ;nrf24l01.c: 322: rfSetup.RF_DR_LOW = 0;
  3637  0162  12A8               	bcf	nrf24l01InitRegisters@rfSetup,5
  3638                           
  3639                           ;nrf24l01.c: 323: rfSetup.RF_DR_HIGH = 1;
  3640  0163  15A8               	bsf	nrf24l01InitRegisters@rfSetup,3
  3641                           
  3642                           ;nrf24l01.c: 324: rfSetup.RF_PWR = 3;
  3643  0164  3006               	movlw	6
  3644  0165  04A8               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3645                           
  3646                           ;nrf24l01.c: 325: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  3647  0166  0828               	movf	nrf24l01InitRegisters@rfSetup,w
  3648  0167  00A4               	movwf	??_nrf24l01InitRegisters
  3649  0168  0824               	movf	??_nrf24l01InitRegisters,w
  3650  0169  00A1               	movwf	nrf24l01Send@data
  3651  016A  3026               	movlw	38
  3652  016B  318F  27E0  3181   	fcall	_nrf24l01Send
  3653                           
  3654                           ;nrf24l01.c: 328: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 329: enRXAddr.ERX_P0 = 1;
  3655  016E  0020               	movlb	0	; select bank0
  3656  016F  142A               	bsf	nrf24l01InitRegisters@enRXAddr,0
  3657                           
  3658                           ;nrf24l01.c: 330: enRXAddr.ERX_P1 = 1;
  3659  0170  14AA               	bsf	nrf24l01InitRegisters@enRXAddr,1
  3660                           
  3661                           ;nrf24l01.c: 331: enRXAddr.ERX_P2 = 1;
  3662  0171  152A               	bsf	nrf24l01InitRegisters@enRXAddr,2
  3663                           
  3664                           ;nrf24l01.c: 332: enRXAddr.ERX_P3 = 1;
  3665  0172  15AA               	bsf	nrf24l01InitRegisters@enRXAddr,3
  3666                           
  3667                           ;nrf24l01.c: 333: enRXAddr.ERX_P4 = 1;
  3668  0173  162A               	bsf	nrf24l01InitRegisters@enRXAddr,4
  3669                           
  3670                           ;nrf24l01.c: 334: enRXAddr.ERX_P5 = 1;
  3671  0174  16AA               	bsf	nrf24l01InitRegisters@enRXAddr,5
  3672                           
  3673                           ;nrf24l01.c: 335: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  3674  0175  082A               	movf	nrf24l01InitRegisters@enRXAddr,w
  3675  0176  00A4               	movwf	??_nrf24l01InitRegisters
  3676  0177  0824               	movf	??_nrf24l01InitRegisters,w
  3677  0178  00A1               	movwf	nrf24l01Send@data
  3678  0179  3022               	movlw	34
  3679  017A  318F  27E0  3181   	fcall	_nrf24l01Send
  3680                           
  3681                           ;nrf24l01.c: 338: n_EN_AA_t enAA;;nrf24l01.c: 339: enAA.byte = nrf24l01Send(0b00000000 |
      +                           0x01, 0);
  3682  017D  0020               	movlb	0	; select bank0
  3683  017E  01A1               	clrf	nrf24l01Send@data
  3684  017F  3001               	movlw	1
  3685  0180  318F  27E0  3181   	fcall	_nrf24l01Send
  3686  0183  0020               	movlb	0	; select bank0
  3687  0184  00A4               	movwf	??_nrf24l01InitRegisters
  3688  0185  0824               	movf	??_nrf24l01InitRegisters,w
  3689  0186  00AB               	movwf	nrf24l01InitRegisters@enAA
  3690                           
  3691                           ;nrf24l01.c: 340: enAA.ENAA_P0 = 0;
  3692  0187  102B               	bcf	nrf24l01InitRegisters@enAA,0
  3693                           
  3694                           ;nrf24l01.c: 341: enAA.ENAA_P1 = 0;
  3695  0188  10AB               	bcf	nrf24l01InitRegisters@enAA,1
  3696                           
  3697                           ;nrf24l01.c: 342: enAA.ENAA_P2 = 0;
  3698  0189  112B               	bcf	nrf24l01InitRegisters@enAA,2
  3699                           
  3700                           ;nrf24l01.c: 343: enAA.ENAA_P3 = 0;
  3701  018A  11AB               	bcf	nrf24l01InitRegisters@enAA,3
  3702                           
  3703                           ;nrf24l01.c: 344: enAA.ENAA_P4 = 0;
  3704  018B  122B               	bcf	nrf24l01InitRegisters@enAA,4
  3705                           
  3706                           ;nrf24l01.c: 345: enAA.ENAA_P5 = 0;
  3707  018C  12AB               	bcf	nrf24l01InitRegisters@enAA,5
  3708                           
  3709                           ;nrf24l01.c: 346: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  3710  018D  082B               	movf	nrf24l01InitRegisters@enAA,w
  3711  018E  00A4               	movwf	??_nrf24l01InitRegisters
  3712  018F  0824               	movf	??_nrf24l01InitRegisters,w
  3713  0190  00A1               	movwf	nrf24l01Send@data
  3714  0191  3021               	movlw	33
  3715  0192  318F  27E0  3181   	fcall	_nrf24l01Send
  3716                           
  3717                           ;nrf24l01.c: 350: n_FEATURE_t feature;;nrf24l01.c: 351: feature.byte = nrf24l01Send(0b00
      +                          000000 | 0x1D, 0);
  3718  0195  0020               	movlb	0	; select bank0
  3719  0196  01A1               	clrf	nrf24l01Send@data
  3720  0197  301D               	movlw	29
  3721  0198  318F  27E0  3181   	fcall	_nrf24l01Send
  3722  019B  0020               	movlb	0	; select bank0
  3723  019C  00A4               	movwf	??_nrf24l01InitRegisters
  3724  019D  0824               	movf	??_nrf24l01InitRegisters,w
  3725  019E  00A7               	movwf	nrf24l01InitRegisters@feature
  3726                           
  3727                           ;nrf24l01.c: 352: feature.EN_DPL = 1;
  3728  019F  1527               	bsf	nrf24l01InitRegisters@feature,2
  3729                           
  3730                           ;nrf24l01.c: 353: feature.EN_DYN_ACK = 1;
  3731  01A0  1427               	bsf	nrf24l01InitRegisters@feature,0
  3732                           
  3733                           ;nrf24l01.c: 354: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  3734  01A1  0827               	movf	nrf24l01InitRegisters@feature,w
  3735  01A2  00A4               	movwf	??_nrf24l01InitRegisters
  3736  01A3  0824               	movf	??_nrf24l01InitRegisters,w
  3737  01A4  00A1               	movwf	nrf24l01Send@data
  3738  01A5  303D               	movlw	61
  3739  01A6  318F  27E0  3181   	fcall	_nrf24l01Send
  3740                           
  3741                           ;nrf24l01.c: 356: n_DYNPD_t DynPD;;nrf24l01.c: 357: DynPD.byte = nrf24l01Send(0b00000000
      +                           | 0x1C, 0);
  3742  01A9  0020               	movlb	0	; select bank0
  3743  01AA  01A1               	clrf	nrf24l01Send@data
  3744  01AB  301C               	movlw	28
  3745  01AC  318F  27E0  3181   	fcall	_nrf24l01Send
  3746  01AF  0020               	movlb	0	; select bank0
  3747  01B0  00A4               	movwf	??_nrf24l01InitRegisters
  3748  01B1  0824               	movf	??_nrf24l01InitRegisters,w
  3749  01B2  00AC               	movwf	nrf24l01InitRegisters@DynPD
  3750                           
  3751                           ;nrf24l01.c: 358: DynPD.DPL_P0 = 1;
  3752  01B3  142C               	bsf	nrf24l01InitRegisters@DynPD,0
  3753                           
  3754                           ;nrf24l01.c: 359: DynPD.DPL_P1 = 1;
  3755  01B4  14AC               	bsf	nrf24l01InitRegisters@DynPD,1
  3756                           
  3757                           ;nrf24l01.c: 360: DynPD.DPL_P2 = 1;
  3758  01B5  152C               	bsf	nrf24l01InitRegisters@DynPD,2
  3759                           
  3760                           ;nrf24l01.c: 361: DynPD.DPL_P3 = 1;
  3761  01B6  15AC               	bsf	nrf24l01InitRegisters@DynPD,3
  3762                           
  3763                           ;nrf24l01.c: 362: DynPD.DPL_P4 = 1;
  3764  01B7  162C               	bsf	nrf24l01InitRegisters@DynPD,4
  3765                           
  3766                           ;nrf24l01.c: 363: DynPD.DPL_P5 = 1;
  3767  01B8  16AC               	bsf	nrf24l01InitRegisters@DynPD,5
  3768                           
  3769                           ;nrf24l01.c: 364: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  3770  01B9  082C               	movf	nrf24l01InitRegisters@DynPD,w
  3771  01BA  00A4               	movwf	??_nrf24l01InitRegisters
  3772  01BB  0824               	movf	??_nrf24l01InitRegisters,w
  3773  01BC  00A1               	movwf	nrf24l01Send@data
  3774  01BD  303C               	movlw	60
  3775  01BE  318F  27E0  3181   	fcall	_nrf24l01Send
  3776                           
  3777                           ;nrf24l01.c: 367: n_STATUS_t status;;nrf24l01.c: 368: status.byte = 0x00;
  3778  01C1  0020               	movlb	0	; select bank0
  3779  01C2  01A9               	clrf	nrf24l01InitRegisters@status
  3780                           
  3781                           ;nrf24l01.c: 369: status.RX_DR = 1;
  3782  01C3  1729               	bsf	nrf24l01InitRegisters@status,6
  3783                           
  3784                           ;nrf24l01.c: 370: status.TX_DS = 1;
  3785  01C4  16A9               	bsf	nrf24l01InitRegisters@status,5
  3786                           
  3787                           ;nrf24l01.c: 371: status.MAX_RT = 1;
  3788  01C5  1629               	bsf	nrf24l01InitRegisters@status,4
  3789                           
  3790                           ;nrf24l01.c: 372: nrf24l01Send(0b00100000 | 0x07, status.byte);
  3791  01C6  0829               	movf	nrf24l01InitRegisters@status,w
  3792  01C7  00A4               	movwf	??_nrf24l01InitRegisters
  3793  01C8  0824               	movf	??_nrf24l01InitRegisters,w
  3794  01C9  00A1               	movwf	nrf24l01Send@data
  3795  01CA  3027               	movlw	39
  3796  01CB  318F  27E0  3181   	fcall	_nrf24l01Send
  3797                           
  3798                           ;nrf24l01.c: 375: nrf24l01Send(0b11100001, 0);
  3799  01CE  0020               	movlb	0	; select bank0
  3800  01CF  01A1               	clrf	nrf24l01Send@data
  3801  01D0  30E1               	movlw	225
  3802  01D1  318F  27E0  3181   	fcall	_nrf24l01Send
  3803                           
  3804                           ;nrf24l01.c: 376: nrf24l01Send(0b11100010, 0);
  3805  01D4  0020               	movlb	0	; select bank0
  3806  01D5  01A1               	clrf	nrf24l01Send@data
  3807  01D6  30E2               	movlw	226
  3808  01D7  318F  27E0  3181   	fcall	_nrf24l01Send
  3809                           
  3810                           ;nrf24l01.c: 379: config.PRIM_RX = 1;
  3811  01DA  0020               	movlb	0	; select bank0
  3812  01DB  142D               	bsf	nrf24l01InitRegisters@config,0
  3813                           
  3814                           ;nrf24l01.c: 380: config.EN_CRC = 1;
  3815  01DC  15AD               	bsf	nrf24l01InitRegisters@config,3
  3816                           
  3817                           ;nrf24l01.c: 381: config.CRCO = 1;
  3818  01DD  152D               	bsf	nrf24l01InitRegisters@config,2
  3819                           
  3820                           ;nrf24l01.c: 382: config.PWR_UP = 1;
  3821  01DE  14AD               	bsf	nrf24l01InitRegisters@config,1
  3822                           
  3823                           ;nrf24l01.c: 383: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3824  01DF  082D               	movf	nrf24l01InitRegisters@config,w
  3825  01E0  00A4               	movwf	??_nrf24l01InitRegisters
  3826  01E1  0824               	movf	??_nrf24l01InitRegisters,w
  3827  01E2  00A1               	movwf	nrf24l01Send@data
  3828  01E3  3020               	movlw	32
  3829  01E4  318F  27E0         	fcall	_nrf24l01Send
  3830  01E6  0008               	return
  3831  01E7                     __end_of_nrf24l01InitRegisters:	
  3832                           
  3833                           	psect	text5
  3834  0029                     __ptext5:	
  3835 ;; *************** function _loop *****************
  3836 ;; Defined at:
  3837 ;;		line 100 in file "main.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;		None
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  packet         33    1[BANK1 ] struct .
  3842 ;;  rfSetup         1    0[BANK1 ] struct .
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3853 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3854 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3855 ;;      Totals:         0       4      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3856 ;;Total ram usage:       38 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:   12
  3859 ;; This function calls:
  3860 ;;		_checkTXPower
  3861 ;;		_getADCValue
  3862 ;;		_nrf24l01Send
  3863 ;;		_nrf24l01SendPacket
  3864 ;;		_setMessage
  3865 ;;		_sleep
  3866 ;; This function is called by:
  3867 ;;		_main
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           
  3872                           ;psect for function _loop
  3873  0029                     _loop:	
  3874                           
  3875                           ;incstack = 0
  3876                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3877  0029  0064               	clrwdt	;# 
  3878                           
  3879                           ;main.c: 105: nrf24l01Packet_t packet;;main.c: 107: setMessage(&packet, "DBG", counter);
  3880  002A  3036               	movlw	low (STR_3| (0+32768))
  3881  002B  0020               	movlb	0	; select bank0
  3882  002C  00BD               	movwf	setMessage@topic
  3883  002D  3090               	movlw	high (STR_3| (0+32768))
  3884  002E  00BE               	movwf	setMessage@topic+1
  3885  002F  0021               	movlb	1	; select bank1
  3886  0030  0866               	movf	(_counter+3)^(0+128),w
  3887  0031  0020               	movlb	0	; select bank0
  3888  0032  00C2               	movwf	setMessage@value+3
  3889  0033  0021               	movlb	1	; select bank1
  3890  0034  0865               	movf	(_counter+2)^(0+128),w
  3891  0035  0020               	movlb	0	; select bank0
  3892  0036  00C1               	movwf	setMessage@value+2
  3893  0037  0021               	movlb	1	; select bank1
  3894  0038  0864               	movf	(_counter+1)^(0+128),w
  3895  0039  0020               	movlb	0	; select bank0
  3896  003A  00C0               	movwf	setMessage@value+1
  3897  003B  0021               	movlb	1	; select bank1
  3898  003C  0863               	movf	_counter^(0+128),w
  3899  003D  0020               	movlb	0	; select bank0
  3900  003E  00BF               	movwf	setMessage@value
  3901  003F  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  3902  0040  3184  2470  3180   	fcall	_setMessage
  3903                           
  3904                           ;main.c: 108: packet.packetData.byte = 0;
  3905  0043  0021               	movlb	1	; select bank1
  3906  0044  01A1               	clrf	loop@packet^(0+128)
  3907                           
  3908                           ;main.c: 109: packet.packetData.ACKRequest = 0;
  3909  0045  1121               	bcf	loop@packet^(0+128),2
  3910                           
  3911                           ;main.c: 110: nrf24l01SendPacket(&packet);
  3912  0046  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  3913  0047  3181  21E7  3180   	fcall	_nrf24l01SendPacket
  3914                           
  3915                           ;main.c: 111: checkTXPower();
  3916  004A  318E  26D6  3180   	fcall	_checkTXPower
  3917                           
  3918                           ;main.c: 112: sleep();
  3919  004D  3187  27EE  3180   	fcall	_sleep
  3920                           
  3921                           ;main.c: 114: setMessage(&packet, "VBAT", getADCValue(0b000100, 2526));
  3922  0050  3028               	movlw	low (STR_4| (0+32768))
  3923  0051  0020               	movlb	0	; select bank0
  3924  0052  00BD               	movwf	setMessage@topic
  3925  0053  3090               	movlw	high (STR_4| (0+32768))
  3926  0054  00BE               	movwf	setMessage@topic+1
  3927  0055  3000               	movlw	0
  3928  0056  00B2               	movwf	getADCValue@divider+3
  3929  0057  3000               	movlw	0
  3930  0058  00B1               	movwf	getADCValue@divider+2
  3931  0059  3009               	movlw	9
  3932  005A  00B0               	movwf	getADCValue@divider+1
  3933  005B  30DE               	movlw	222
  3934  005C  00AF               	movwf	getADCValue@divider
  3935  005D  3004               	movlw	4
  3936  005E  3183  238F  3180   	fcall	_getADCValue
  3937  0061  0020               	movlb	0	; select bank0
  3938  0062  0832               	movf	?_getADCValue+3,w
  3939  0063  00C2               	movwf	setMessage@value+3
  3940  0064  0831               	movf	?_getADCValue+2,w
  3941  0065  00C1               	movwf	setMessage@value+2
  3942  0066  0830               	movf	?_getADCValue+1,w
  3943  0067  00C0               	movwf	setMessage@value+1
  3944  0068  082F               	movf	?_getADCValue,w
  3945  0069  00BF               	movwf	setMessage@value
  3946  006A  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  3947  006B  3184  2470  3180   	fcall	_setMessage
  3948                           
  3949                           ;main.c: 115: packet.packetData.byte = 0;
  3950  006E  0021               	movlb	1	; select bank1
  3951  006F  01A1               	clrf	loop@packet^(0+128)
  3952                           
  3953                           ;main.c: 116: packet.packetData.ACKRequest = 1;
  3954  0070  1521               	bsf	loop@packet^(0+128),2
  3955                           
  3956                           ;main.c: 117: nrf24l01SendPacket(&packet);
  3957  0071  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  3958  0072  3181  21E7  3180   	fcall	_nrf24l01SendPacket
  3959                           
  3960                           ;main.c: 118: checkTXPower();
  3961  0075  318E  26D6  3180   	fcall	_checkTXPower
  3962                           
  3963                           ;main.c: 119: sleep();
  3964  0078  3187  27EE  3180   	fcall	_sleep
  3965                           
  3966                           ;main.c: 122: setMessage(&packet, "ANC3", getADCValue(0b010011, 2500));
  3967  007B  301E               	movlw	low (STR_5| (0+32768))
  3968  007C  0020               	movlb	0	; select bank0
  3969  007D  00BD               	movwf	setMessage@topic
  3970  007E  3090               	movlw	high (STR_5| (0+32768))
  3971  007F  00BE               	movwf	setMessage@topic+1
  3972  0080  3000               	movlw	0
  3973  0081  00B2               	movwf	getADCValue@divider+3
  3974  0082  3000               	movlw	0
  3975  0083  00B1               	movwf	getADCValue@divider+2
  3976  0084  3009               	movlw	9
  3977  0085  00B0               	movwf	getADCValue@divider+1
  3978  0086  30C4               	movlw	196
  3979  0087  00AF               	movwf	getADCValue@divider
  3980  0088  3013               	movlw	19
  3981  0089  3183  238F  3180   	fcall	_getADCValue
  3982  008C  0020               	movlb	0	; select bank0
  3983  008D  0832               	movf	?_getADCValue+3,w
  3984  008E  00C2               	movwf	setMessage@value+3
  3985  008F  0831               	movf	?_getADCValue+2,w
  3986  0090  00C1               	movwf	setMessage@value+2
  3987  0091  0830               	movf	?_getADCValue+1,w
  3988  0092  00C0               	movwf	setMessage@value+1
  3989  0093  082F               	movf	?_getADCValue,w
  3990  0094  00BF               	movwf	setMessage@value
  3991  0095  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  3992  0096  3184  2470  3180   	fcall	_setMessage
  3993                           
  3994                           ;main.c: 123: packet.packetData.byte = 0;
  3995  0099  0021               	movlb	1	; select bank1
  3996  009A  01A1               	clrf	loop@packet^(0+128)
  3997                           
  3998                           ;main.c: 124: packet.packetData.ACKRequest = 1;
  3999  009B  1521               	bsf	loop@packet^(0+128),2
  4000                           
  4001                           ;main.c: 125: nrf24l01SendPacket(&packet);
  4002  009C  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4003  009D  3181  21E7  3180   	fcall	_nrf24l01SendPacket
  4004                           
  4005                           ;main.c: 126: checkTXPower();
  4006  00A0  318E  26D6  3180   	fcall	_checkTXPower
  4007                           
  4008                           ;main.c: 127: sleep();
  4009  00A3  3187  27EE  3180   	fcall	_sleep
  4010                           
  4011                           ;main.c: 129: setMessage(&packet, "FVR", getADCValue(0b111111, 2500));
  4012  00A6  303A               	movlw	low (STR_6| (0+32768))
  4013  00A7  0020               	movlb	0	; select bank0
  4014  00A8  00BD               	movwf	setMessage@topic
  4015  00A9  3090               	movlw	high (STR_6| (0+32768))
  4016  00AA  00BE               	movwf	setMessage@topic+1
  4017  00AB  3000               	movlw	0
  4018  00AC  00B2               	movwf	getADCValue@divider+3
  4019  00AD  3000               	movlw	0
  4020  00AE  00B1               	movwf	getADCValue@divider+2
  4021  00AF  3009               	movlw	9
  4022  00B0  00B0               	movwf	getADCValue@divider+1
  4023  00B1  30C4               	movlw	196
  4024  00B2  00AF               	movwf	getADCValue@divider
  4025  00B3  303F               	movlw	63
  4026  00B4  3183  238F  3180   	fcall	_getADCValue
  4027  00B7  0020               	movlb	0	; select bank0
  4028  00B8  0832               	movf	?_getADCValue+3,w
  4029  00B9  00C2               	movwf	setMessage@value+3
  4030  00BA  0831               	movf	?_getADCValue+2,w
  4031  00BB  00C1               	movwf	setMessage@value+2
  4032  00BC  0830               	movf	?_getADCValue+1,w
  4033  00BD  00C0               	movwf	setMessage@value+1
  4034  00BE  082F               	movf	?_getADCValue,w
  4035  00BF  00BF               	movwf	setMessage@value
  4036  00C0  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4037  00C1  3184  2470  3180   	fcall	_setMessage
  4038                           
  4039                           ;main.c: 130: packet.packetData.byte = 0;
  4040  00C4  0021               	movlb	1	; select bank1
  4041  00C5  01A1               	clrf	loop@packet^(0+128)
  4042                           
  4043                           ;main.c: 131: packet.packetData.ACKRequest = 1;
  4044  00C6  1521               	bsf	loop@packet^(0+128),2
  4045                           
  4046                           ;main.c: 132: nrf24l01SendPacket(&packet);
  4047  00C7  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4048  00C8  3181  21E7  3180   	fcall	_nrf24l01SendPacket
  4049                           
  4050                           ;main.c: 133: checkTXPower();
  4051  00CB  318E  26D6  3180   	fcall	_checkTXPower
  4052                           
  4053                           ;main.c: 134: sleep();
  4054  00CE  3187  27EE  3180   	fcall	_sleep
  4055                           
  4056                           ;main.c: 136: setMessage(&packet, "TEMP", getADCValue(0b111101, 162) - 40000);
  4057  00D1  3023               	movlw	low (STR_7| (0+32768))
  4058  00D2  0020               	movlb	0	; select bank0
  4059  00D3  00BD               	movwf	setMessage@topic
  4060  00D4  3090               	movlw	high (STR_7| (0+32768))
  4061  00D5  00BE               	movwf	setMessage@topic+1
  4062  00D6  30C0               	movlw	192
  4063  00D7  00D4               	movwf	??_loop
  4064  00D8  3063               	movlw	99
  4065  00D9  00D5               	movwf	??_loop+1
  4066  00DA  30FF               	movlw	255
  4067  00DB  00D6               	movwf	??_loop+2
  4068  00DC  30FF               	movlw	255
  4069  00DD  00D7               	movwf	??_loop+3
  4070  00DE  3000               	movlw	0
  4071  00DF  00B2               	movwf	getADCValue@divider+3
  4072  00E0  3000               	movlw	0
  4073  00E1  00B1               	movwf	getADCValue@divider+2
  4074  00E2  3000               	movlw	0
  4075  00E3  00B0               	movwf	getADCValue@divider+1
  4076  00E4  30A2               	movlw	162
  4077  00E5  00AF               	movwf	getADCValue@divider
  4078  00E6  303D               	movlw	61
  4079  00E7  3183  238F  3180   	fcall	_getADCValue
  4080  00EA  0020               	movlb	0	; select bank0
  4081  00EB  082F               	movf	?_getADCValue,w
  4082  00EC  07D4               	addwf	??_loop,f
  4083  00ED  0830               	movf	?_getADCValue+1,w
  4084  00EE  3DD5               	addwfc	??_loop+1,f
  4085  00EF  0831               	movf	?_getADCValue+2,w
  4086  00F0  3DD6               	addwfc	??_loop+2,f
  4087  00F1  0832               	movf	?_getADCValue+3,w
  4088  00F2  3DD7               	addwfc	??_loop+3,f
  4089  00F3  0857               	movf	??_loop+3,w
  4090  00F4  00C2               	movwf	setMessage@value+3
  4091  00F5  0856               	movf	??_loop+2,w
  4092  00F6  00C1               	movwf	setMessage@value+2
  4093  00F7  0855               	movf	??_loop+1,w
  4094  00F8  00C0               	movwf	setMessage@value+1
  4095  00F9  0854               	movf	??_loop,w
  4096  00FA  00BF               	movwf	setMessage@value
  4097  00FB  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4098  00FC  3184  2470  3180   	fcall	_setMessage
  4099                           
  4100                           ;main.c: 137: packet.packetData.byte = 0;
  4101  00FF  0021               	movlb	1	; select bank1
  4102  0100  01A1               	clrf	loop@packet^(0+128)
  4103                           
  4104                           ;main.c: 138: packet.packetData.ACKRequest = 1;
  4105  0101  1521               	bsf	loop@packet^(0+128),2
  4106                           
  4107                           ;main.c: 139: nrf24l01SendPacket(&packet);
  4108  0102  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4109  0103  3181  21E7  3180   	fcall	_nrf24l01SendPacket
  4110                           
  4111                           ;main.c: 140: checkTXPower();
  4112  0106  318E  26D6  3180   	fcall	_checkTXPower
  4113                           
  4114                           ;main.c: 141: sleep();
  4115  0109  3187  27EE  3180   	fcall	_sleep
  4116                           
  4117                           ;main.c: 143: n_RF_SETUP_t rfSetup;;main.c: 144: rfSetup.byte = nrf24l01Send(0b00000000 
      +                          | 0x06, 0);
  4118  010C  0020               	movlb	0	; select bank0
  4119  010D  01A1               	clrf	nrf24l01Send@data
  4120  010E  3006               	movlw	6
  4121  010F  318F  27E0  3180   	fcall	_nrf24l01Send
  4122  0112  0020               	movlb	0	; select bank0
  4123  0113  00D4               	movwf	??_loop
  4124  0114  0854               	movf	??_loop,w
  4125  0115  0021               	movlb	1	; select bank1
  4126  0116  00A0               	movwf	loop@rfSetup^(0+128)
  4127                           
  4128                           ;main.c: 146: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4129  0117  3013               	movlw	low (STR_8| (0+32768))
  4130  0118  0020               	movlb	0	; select bank0
  4131  0119  00BD               	movwf	setMessage@topic
  4132  011A  3090               	movlw	high (STR_8| (0+32768))
  4133  011B  00BE               	movwf	setMessage@topic+1
  4134  011C  0021               	movlb	1	; select bank1
  4135  011D  0C20               	rrf	loop@rfSetup^(0+128),w
  4136  011E  3903               	andlw	3
  4137  011F  0020               	movlb	0	; select bank0
  4138  0120  00D4               	movwf	??_loop
  4139  0121  01D5               	clrf	??_loop+1
  4140  0122  01D6               	clrf	??_loop+2
  4141  0123  01D7               	clrf	??_loop+3
  4142  0124  0857               	movf	??_loop+3,w
  4143  0125  00C2               	movwf	setMessage@value+3
  4144  0126  0856               	movf	??_loop+2,w
  4145  0127  00C1               	movwf	setMessage@value+2
  4146  0128  0855               	movf	??_loop+1,w
  4147  0129  00C0               	movwf	setMessage@value+1
  4148  012A  0854               	movf	??_loop,w
  4149  012B  00BF               	movwf	setMessage@value
  4150  012C  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4151  012D  3184  2470  3180   	fcall	_setMessage
  4152                           
  4153                           ;main.c: 147: packet.packetData.byte = 0;
  4154  0130  0021               	movlb	1	; select bank1
  4155  0131  01A1               	clrf	loop@packet^(0+128)
  4156                           
  4157                           ;main.c: 148: packet.packetData.ACKRequest = 1;
  4158  0132  1521               	bsf	loop@packet^(0+128),2
  4159                           
  4160                           ;main.c: 149: nrf24l01SendPacket(&packet);
  4161  0133  30A1               	movlw	(low (loop@packet| 0))& (0+255)
  4162  0134  3181  21E7  3180   	fcall	_nrf24l01SendPacket
  4163                           
  4164                           ;main.c: 150: checkTXPower();
  4165  0137  318E  26D6  3180   	fcall	_checkTXPower
  4166                           
  4167                           ;main.c: 151: sleep();
  4168  013A  3187  27EE         	fcall	_sleep
  4169  013C  0008               	return
  4170  013D                     __end_of_loop:	
  4171                           
  4172                           	psect	text6
  4173  07EE                     __ptext6:	
  4174 ;; *************** function _sleep *****************
  4175 ;; Defined at:
  4176 ;;		line 49 in file "main.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;		None
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;		None
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  1    wreg      void 
  4183 ;; Registers used:
  4184 ;;		wreg
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4194 ;;Total ram usage:        0 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    7
  4197 ;; This function calls:
  4198 ;;		Nothing
  4199 ;; This function is called by:
  4200 ;;		_loop
  4201 ;;		_main
  4202 ;;		_checkRxData
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           
  4207                           ;psect for function _sleep
  4208  07EE                     _sleep:	
  4209  07EE                     l221:	
  4210                           ;incstack = 0
  4211                           ; Regs used in _sleep: [wreg]
  4212                           ;main.c: 50: while (1){
  4213                           
  4214                           
  4215                           ;main.c: 52: counter++;
  4216  07EE  3001               	movlw	1
  4217  07EF  0021               	movlb	1	; select bank1
  4218  07F0  07E3               	addwf	_counter^(0+128),f
  4219  07F1  3000               	movlw	0
  4220  07F2  3DE4               	addwfc	(_counter+1)^(0+128),f
  4221  07F3  3000               	movlw	0
  4222  07F4  3DE5               	addwfc	(_counter+2)^(0+128),f
  4223  07F5  3000               	movlw	0
  4224  07F6  3DE6               	addwfc	(_counter+3)^(0+128),f
  4225  07F7  0063               	sleep	;# 
  4226                           
  4227                           ;main.c: 55: __nop();
  4228  07F8  0000               	nop
  4229                           
  4230                           ;main.c: 56: __nop();
  4231  07F9  0000               	nop
  4232                           
  4233                           ;main.c: 58: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  4234  07FA  0020               	movlb	0	; select bank0
  4235  07FB  1A03               	btfsc	3,4	;volatile
  4236  07FC  2FEE               	goto	l221
  4237  07FD  1D83               	btfss	3,3	;volatile
  4238  07FE  0008               	return
  4239  07FF  2FEE               	goto	l221
  4240  0800                     __end_of_sleep:	
  4241                           ;main.c: 59: return;
  4242                           
  4243                           
  4244                           	psect	text7
  4245  0470                     __ptext7:	
  4246 ;; *************** function _setMessage *****************
  4247 ;; Defined at:
  4248 ;;		line 76 in file "main.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;  packet          1    wreg     PTR struct .
  4251 ;;		 -> main@packet(33), loop@packet(33), 
  4252 ;;  topic           2   29[BANK0 ] PTR const unsigned char 
  4253 ;;		 -> STR_10(5), STR_8(6), STR_7(5), STR_6(4), 
  4254 ;;		 -> STR_5(5), STR_4(5), STR_3(4), 
  4255 ;;  value           4   31[BANK0 ] unsigned long 
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;  packet          1   51[BANK0 ] PTR struct .
  4258 ;;		 -> main@packet(33), loop@packet(33), 
  4259 ;;  tempString     16   35[BANK0 ] unsigned char [16]
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4269 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4270 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4272 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4273 ;;Total ram usage:       23 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    9
  4276 ;; This function calls:
  4277 ;;		_memset
  4278 ;;		_strcat
  4279 ;;		_ultoa
  4280 ;; This function is called by:
  4281 ;;		_loop
  4282 ;;		_main
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           
  4287                           ;psect for function _setMessage
  4288  0470                     _setMessage:	
  4289                           
  4290                           ;incstack = 0
  4291                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4292                           ;setMessage@packet stored from wreg
  4293  0470  0020               	movlb	0	; select bank0
  4294  0471  00D3               	movwf	setMessage@packet
  4295                           
  4296                           ;main.c: 77: memset(packet->Message, 0, sizeof(packet->Message));
  4297  0472  0853               	movf	setMessage@packet,w
  4298  0473  3E01               	addlw	1
  4299  0474  00A1               	movwf	memset@p1
  4300  0475  3000               	movlw	0
  4301  0476  00A2               	movwf	memset@p1+1
  4302  0477  3000               	movlw	0
  4303  0478  00A3               	movwf	memset@c
  4304  0479  00A4               	movwf	memset@c+1
  4305  047A  3020               	movlw	32
  4306  047B  00A5               	movwf	memset@n
  4307  047C  3000               	movlw	0
  4308  047D  00A6               	movwf	memset@n+1
  4309  047E  318F  271A  3184   	fcall	_memset
  4310                           
  4311                           ;main.c: 79: strcat(packet->Message, romData.name);
  4312  0481  305D               	movlw	low (_romData+1)
  4313  0482  0020               	movlb	0	; select bank0
  4314  0483  00A1               	movwf	strcat@from
  4315  0484  3000               	movlw	high (_romData+1)
  4316  0485  00A2               	movwf	strcat@from+1
  4317  0486  0853               	movf	setMessage@packet,w
  4318  0487  3E01               	addlw	1
  4319  0488  3187  2739  3184   	fcall	_strcat
  4320                           
  4321                           ;main.c: 81: strcat(packet->Message, "/");
  4322  048B  303E               	movlw	low (STR_1| (0+32768))
  4323  048C  0020               	movlb	0	; select bank0
  4324  048D  00A1               	movwf	strcat@from
  4325  048E  3090               	movlw	high (STR_1| (0+32768))
  4326  048F  00A2               	movwf	strcat@from+1
  4327  0490  0853               	movf	setMessage@packet,w
  4328  0491  3E01               	addlw	1
  4329  0492  3187  2739  3184   	fcall	_strcat
  4330                           
  4331                           ;main.c: 82: strcat(packet->Message, topic);
  4332  0495  0020               	movlb	0	; select bank0
  4333  0496  083E               	movf	setMessage@topic+1,w
  4334  0497  00A2               	movwf	strcat@from+1
  4335  0498  083D               	movf	setMessage@topic,w
  4336  0499  00A1               	movwf	strcat@from
  4337  049A  0853               	movf	setMessage@packet,w
  4338  049B  3E01               	addlw	1
  4339  049C  3187  2739  3184   	fcall	_strcat
  4340                           
  4341                           ;main.c: 84: char tempString[16];;main.c: 86: ultoa(tempString, value, 10);
  4342  049F  0020               	movlb	0	; select bank0
  4343  04A0  0842               	movf	setMessage@value+3,w
  4344  04A1  00B2               	movwf	ultoa@val+3
  4345  04A2  0841               	movf	setMessage@value+2,w
  4346  04A3  00B1               	movwf	ultoa@val+2
  4347  04A4  0840               	movf	setMessage@value+1,w
  4348  04A5  00B0               	movwf	ultoa@val+1
  4349  04A6  083F               	movf	setMessage@value,w
  4350  04A7  00AF               	movwf	ultoa@val
  4351  04A8  300A               	movlw	10
  4352  04A9  00B3               	movwf	ultoa@base
  4353  04AA  3000               	movlw	0
  4354  04AB  00B4               	movwf	ultoa@base+1
  4355  04AC  3043               	movlw	(low (setMessage@tempString| 0))& (0+255)
  4356  04AD  3183  2306  3184   	fcall	_ultoa
  4357                           
  4358                           ;main.c: 88: strcat(packet->Message, "/");
  4359  04B0  303E               	movlw	low (STR_1| (0+32768))
  4360  04B1  0020               	movlb	0	; select bank0
  4361  04B2  00A1               	movwf	strcat@from
  4362  04B3  3090               	movlw	high (STR_1| (0+32768))
  4363  04B4  00A2               	movwf	strcat@from+1
  4364  04B5  0853               	movf	setMessage@packet,w
  4365  04B6  3E01               	addlw	1
  4366  04B7  3187  2739  3184   	fcall	_strcat
  4367                           
  4368                           ;main.c: 89: strcat(packet->Message, tempString);
  4369  04BA  3043               	movlw	low setMessage@tempString
  4370  04BB  0020               	movlb	0	; select bank0
  4371  04BC  00A1               	movwf	strcat@from
  4372  04BD  3000               	movlw	high setMessage@tempString
  4373  04BE  00A2               	movwf	strcat@from+1
  4374  04BF  0853               	movf	setMessage@packet,w
  4375  04C0  3E01               	addlw	1
  4376  04C1  3187  2739         	fcall	_strcat
  4377  04C3  0008               	return
  4378  04C4                     __end_of_setMessage:	
  4379                           
  4380                           	psect	text8
  4381  0306                     __ptext8:	
  4382 ;; *************** function _ultoa *****************
  4383 ;; Defined at:
  4384 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltoa.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;  buf             1    wreg     PTR unsigned char 
  4387 ;;		 -> setMessage@tempString(16), 
  4388 ;;  val             4   15[BANK0 ] unsigned long 
  4389 ;;  base            2   19[BANK0 ] int 
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;  buf             1   27[BANK0 ] PTR unsigned char 
  4392 ;;		 -> setMessage@tempString(16), 
  4393 ;;  v               4   22[BANK0 ] unsigned long 
  4394 ;;  c               1   26[BANK0 ] unsigned char 
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  1    wreg      PTR unsigned char 
  4397 ;; Registers used:
  4398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4404 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4405 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;Total ram usage:       13 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    8
  4411 ;; This function calls:
  4412 ;;		___lldiv
  4413 ;;		___llmod
  4414 ;; This function is called by:
  4415 ;;		_setMessage
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           
  4420                           ;psect for function _ultoa
  4421  0306                     _ultoa:	
  4422                           
  4423                           ;incstack = 0
  4424                           ; Regs used in _ultoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4425                           ;ultoa@buf stored from wreg
  4426  0306  0020               	movlb	0	; select bank0
  4427  0307  00BB               	movwf	ultoa@buf
  4428  0308  0832               	movf	ultoa@val+3,w
  4429  0309  00B9               	movwf	ultoa@v+3
  4430  030A  0831               	movf	ultoa@val+2,w
  4431  030B  00B8               	movwf	ultoa@v+2
  4432  030C  0830               	movf	ultoa@val+1,w
  4433  030D  00B7               	movwf	ultoa@v+1
  4434  030E  082F               	movf	ultoa@val,w
  4435  030F  00B6               	movwf	ultoa@v
  4436  0310                     l2071:	
  4437  0310  0833               	movf	ultoa@base,w
  4438  0311  00A1               	movwf	___lldiv@divisor
  4439  0312  0834               	movf	ultoa@base+1,w
  4440  0313  00A2               	movwf	___lldiv@divisor+1
  4441  0314  0D89               	rlf	9,f
  4442  0315  3B89               	subwfb	9,f
  4443  0316  0989               	comf	9,f
  4444  0317  00A3               	movwf	___lldiv@divisor+2
  4445  0318  00A4               	movwf	___lldiv@divisor+3
  4446  0319  0839               	movf	ultoa@v+3,w
  4447  031A  00A8               	movwf	___lldiv@dividend+3
  4448  031B  0838               	movf	ultoa@v+2,w
  4449  031C  00A7               	movwf	___lldiv@dividend+2
  4450  031D  0837               	movf	ultoa@v+1,w
  4451  031E  00A6               	movwf	___lldiv@dividend+1
  4452  031F  0836               	movf	ultoa@v,w
  4453  0320  00A5               	movwf	___lldiv@dividend
  4454  0321  3184  24C4  3183   	fcall	___lldiv
  4455  0324  0020               	movlb	0	; select bank0
  4456  0325  0824               	movf	?___lldiv+3,w
  4457  0326  00B9               	movwf	ultoa@v+3
  4458  0327  0823               	movf	?___lldiv+2,w
  4459  0328  00B8               	movwf	ultoa@v+2
  4460  0329  0822               	movf	?___lldiv+1,w
  4461  032A  00B7               	movwf	ultoa@v+1
  4462  032B  0821               	movf	?___lldiv,w
  4463  032C  00B6               	movwf	ultoa@v
  4464  032D  3001               	movlw	1
  4465  032E  00B5               	movwf	??_ultoa
  4466  032F  0835               	movf	??_ultoa,w
  4467  0330  07BB               	addwf	ultoa@buf,f
  4468  0331  0839               	movf	ultoa@v+3,w
  4469  0332  0438               	iorwf	ultoa@v+2,w
  4470  0333  0437               	iorwf	ultoa@v+1,w
  4471  0334  0436               	iorwf	ultoa@v,w
  4472  0335  1D03               	skipz
  4473  0336  2B10               	goto	l2071
  4474  0337  083B               	movf	ultoa@buf,w
  4475  0338  0086               	movwf	6
  4476  0339  0187               	clrf	7
  4477  033A  0181               	clrf	1
  4478  033B  3001               	movlw	1
  4479  033C  02BB               	subwf	ultoa@buf,f
  4480  033D                     l2081:	
  4481  033D  0833               	movf	ultoa@base,w
  4482  033E  00A1               	movwf	___llmod@divisor
  4483  033F  0834               	movf	ultoa@base+1,w
  4484  0340  00A2               	movwf	___llmod@divisor+1
  4485  0341  0D89               	rlf	9,f
  4486  0342  3B89               	subwfb	9,f
  4487  0343  0989               	comf	9,f
  4488  0344  00A3               	movwf	___llmod@divisor+2
  4489  0345  00A4               	movwf	___llmod@divisor+3
  4490  0346  0832               	movf	ultoa@val+3,w
  4491  0347  00A8               	movwf	___llmod@dividend+3
  4492  0348  0831               	movf	ultoa@val+2,w
  4493  0349  00A7               	movwf	___llmod@dividend+2
  4494  034A  0830               	movf	ultoa@val+1,w
  4495  034B  00A6               	movwf	___llmod@dividend+1
  4496  034C  082F               	movf	ultoa@val,w
  4497  034D  00A5               	movwf	___llmod@dividend
  4498  034E  3185  2517  3183   	fcall	___llmod
  4499  0351  0020               	movlb	0	; select bank0
  4500  0352  0821               	movf	?___llmod,w
  4501  0353  00B5               	movwf	??_ultoa
  4502  0354  0835               	movf	??_ultoa,w
  4503  0355  00BA               	movwf	ultoa@c
  4504  0356  0833               	movf	ultoa@base,w
  4505  0357  00A1               	movwf	___lldiv@divisor
  4506  0358  0834               	movf	ultoa@base+1,w
  4507  0359  00A2               	movwf	___lldiv@divisor+1
  4508  035A  0D89               	rlf	9,f
  4509  035B  3B89               	subwfb	9,f
  4510  035C  0989               	comf	9,f
  4511  035D  00A3               	movwf	___lldiv@divisor+2
  4512  035E  00A4               	movwf	___lldiv@divisor+3
  4513  035F  0832               	movf	ultoa@val+3,w
  4514  0360  00A8               	movwf	___lldiv@dividend+3
  4515  0361  0831               	movf	ultoa@val+2,w
  4516  0362  00A7               	movwf	___lldiv@dividend+2
  4517  0363  0830               	movf	ultoa@val+1,w
  4518  0364  00A6               	movwf	___lldiv@dividend+1
  4519  0365  082F               	movf	ultoa@val,w
  4520  0366  00A5               	movwf	___lldiv@dividend
  4521  0367  3184  24C4  3183   	fcall	___lldiv
  4522  036A  0020               	movlb	0	; select bank0
  4523  036B  0824               	movf	?___lldiv+3,w
  4524  036C  00B2               	movwf	ultoa@val+3
  4525  036D  0823               	movf	?___lldiv+2,w
  4526  036E  00B1               	movwf	ultoa@val+2
  4527  036F  0822               	movf	?___lldiv+1,w
  4528  0370  00B0               	movwf	ultoa@val+1
  4529  0371  0821               	movf	?___lldiv,w
  4530  0372  00AF               	movwf	ultoa@val
  4531  0373  300A               	movlw	10
  4532  0374  023A               	subwf	ultoa@c,w
  4533  0375  1C03               	skipc
  4534  0376  2B7B               	goto	l866
  4535  0377  3007               	movlw	7
  4536  0378  00B5               	movwf	??_ultoa
  4537  0379  0835               	movf	??_ultoa,w
  4538  037A  07BA               	addwf	ultoa@c,f
  4539  037B                     l866:	
  4540  037B  3030               	movlw	48
  4541  037C  00B5               	movwf	??_ultoa
  4542  037D  0835               	movf	??_ultoa,w
  4543  037E  07BA               	addwf	ultoa@c,f
  4544  037F  083A               	movf	ultoa@c,w
  4545  0380  00B5               	movwf	??_ultoa
  4546  0381  083B               	movf	ultoa@buf,w
  4547  0382  0086               	movwf	6
  4548  0383  0187               	clrf	7
  4549  0384  0835               	movf	??_ultoa,w
  4550  0385  0081               	movwf	1
  4551  0386  3001               	movlw	1
  4552  0387  02BB               	subwf	ultoa@buf,f
  4553  0388  0832               	movf	ultoa@val+3,w
  4554  0389  0431               	iorwf	ultoa@val+2,w
  4555  038A  0430               	iorwf	ultoa@val+1,w
  4556  038B  042F               	iorwf	ultoa@val,w
  4557  038C  1903               	btfsc	3,2
  4558  038D  0008               	return
  4559  038E  2B3D               	goto	l2081
  4560  038F                     __end_of_ultoa:	
  4561                           ;	Return value of _ultoa is never used
  4562                           
  4563                           
  4564                           	psect	text9
  4565  0517                     __ptext9:	
  4566 ;; *************** function ___llmod *****************
  4567 ;; Defined at:
  4568 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  divisor         4    1[BANK0 ] unsigned long 
  4571 ;;  dividend        4    5[BANK0 ] unsigned long 
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;  counter         1   10[BANK0 ] unsigned char 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  4    1[BANK0 ] unsigned long 
  4576 ;; Registers used:
  4577 ;;		wreg, status,2, status,0
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4583 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;Total ram usage:       10 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:    7
  4590 ;; This function calls:
  4591 ;;		Nothing
  4592 ;; This function is called by:
  4593 ;;		_ultoa
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           
  4598                           ;psect for function ___llmod
  4599  0517                     ___llmod:	
  4600                           
  4601                           ;incstack = 0
  4602                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4603  0517  0020               	movlb	0	; select bank0
  4604  0518  0824               	movf	___llmod@divisor+3,w
  4605  0519  0423               	iorwf	___llmod@divisor+2,w
  4606  051A  0422               	iorwf	___llmod@divisor+1,w
  4607  051B  0421               	iorwf	___llmod@divisor,w
  4608  051C  1903               	skipnz
  4609  051D  2D51               	goto	l1953
  4610  051E  01AA               	clrf	___llmod@counter
  4611  051F  0AAA               	incf	___llmod@counter,f
  4612  0520                     l1943:	
  4613  0520  1BA4               	btfsc	___llmod@divisor+3,7
  4614  0521  2D2E               	goto	l1945
  4615  0522  3001               	movlw	1
  4616  0523                     u845:	
  4617  0523  35A1               	lslf	___llmod@divisor,f
  4618  0524  0DA2               	rlf	___llmod@divisor+1,f
  4619  0525  0DA3               	rlf	___llmod@divisor+2,f
  4620  0526  0DA4               	rlf	___llmod@divisor+3,f
  4621  0527  0B89               	decfsz	9,f
  4622  0528  2D23               	goto	u845
  4623  0529  3001               	movlw	1
  4624  052A  00A9               	movwf	??___llmod
  4625  052B  0829               	movf	??___llmod,w
  4626  052C  07AA               	addwf	___llmod@counter,f
  4627  052D  2D20               	goto	l1943
  4628  052E                     l1945:	
  4629  052E  0824               	movf	___llmod@divisor+3,w
  4630  052F  0228               	subwf	___llmod@dividend+3,w
  4631  0530  1D03               	skipz
  4632  0531  2D3C               	goto	u865
  4633  0532  0823               	movf	___llmod@divisor+2,w
  4634  0533  0227               	subwf	___llmod@dividend+2,w
  4635  0534  1D03               	skipz
  4636  0535  2D3C               	goto	u865
  4637  0536  0822               	movf	___llmod@divisor+1,w
  4638  0537  0226               	subwf	___llmod@dividend+1,w
  4639  0538  1D03               	skipz
  4640  0539  2D3C               	goto	u865
  4641  053A  0821               	movf	___llmod@divisor,w
  4642  053B  0225               	subwf	___llmod@dividend,w
  4643  053C                     u865:	
  4644  053C  1C03               	skipc
  4645  053D  2D46               	goto	l1949
  4646  053E  0821               	movf	___llmod@divisor,w
  4647  053F  02A5               	subwf	___llmod@dividend,f
  4648  0540  0822               	movf	___llmod@divisor+1,w
  4649  0541  3BA6               	subwfb	___llmod@dividend+1,f
  4650  0542  0823               	movf	___llmod@divisor+2,w
  4651  0543  3BA7               	subwfb	___llmod@dividend+2,f
  4652  0544  0824               	movf	___llmod@divisor+3,w
  4653  0545  3BA8               	subwfb	___llmod@dividend+3,f
  4654  0546                     l1949:	
  4655  0546  3001               	movlw	1
  4656  0547                     u875:	
  4657  0547  36A4               	lsrf	___llmod@divisor+3,f
  4658  0548  0CA3               	rrf	___llmod@divisor+2,f
  4659  0549  0CA2               	rrf	___llmod@divisor+1,f
  4660  054A  0CA1               	rrf	___llmod@divisor,f
  4661  054B  0B89               	decfsz	9,f
  4662  054C  2D47               	goto	u875
  4663  054D  3001               	movlw	1
  4664  054E  02AA               	subwf	___llmod@counter,f
  4665  054F  1D03               	btfss	3,2
  4666  0550  2D2E               	goto	l1945
  4667  0551                     l1953:	
  4668  0551  0828               	movf	___llmod@dividend+3,w
  4669  0552  00A4               	movwf	?___llmod+3
  4670  0553  0827               	movf	___llmod@dividend+2,w
  4671  0554  00A3               	movwf	?___llmod+2
  4672  0555  0826               	movf	___llmod@dividend+1,w
  4673  0556  00A2               	movwf	?___llmod+1
  4674  0557  0825               	movf	___llmod@dividend,w
  4675  0558  00A1               	movwf	?___llmod
  4676  0559  0008               	return
  4677  055A                     __end_of___llmod:	
  4678                           
  4679                           	psect	text10
  4680  0739                     __ptext10:	
  4681 ;; *************** function _strcat *****************
  4682 ;; Defined at:
  4683 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;  to              1    wreg     PTR unsigned char 
  4686 ;;		 -> main@packet(33), loop@packet(33), 
  4687 ;;  from            2    1[BANK0 ] PTR const unsigned char 
  4688 ;;		 -> STR_10(5), STR_8(6), STR_7(5), STR_6(4), 
  4689 ;;		 -> STR_5(5), STR_4(5), STR_3(4), STR_2(2), 
  4690 ;;		 -> setMessage@tempString(16), STR_1(2), romData.name(16), romData(19), 
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;  to              1    5[BANK0 ] PTR unsigned char 
  4693 ;;		 -> main@packet(33), loop@packet(33), 
  4694 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  4695 ;;		 -> main@packet(33), loop@packet(33), 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  1    wreg      PTR unsigned char 
  4698 ;; Registers used:
  4699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4705 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4706 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4708 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4709 ;;Total ram usage:        5 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:    7
  4712 ;; This function calls:
  4713 ;;		Nothing
  4714 ;; This function is called by:
  4715 ;;		_setMessage
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           
  4720                           ;psect for function _strcat
  4721  0739                     _strcat:	
  4722                           
  4723                           ;incstack = 0
  4724                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  4725                           ;strcat@to stored from wreg
  4726  0739  0020               	movlb	0	; select bank0
  4727  073A  00A5               	movwf	strcat@to
  4728  073B  0825               	movf	strcat@to,w
  4729  073C  00A3               	movwf	??_strcat
  4730  073D  0823               	movf	??_strcat,w
  4731  073E  00A4               	movwf	strcat@cp
  4732  073F                     l2061:	
  4733  073F  0824               	movf	strcat@cp,w
  4734  0740  0086               	movwf	6
  4735  0741  0187               	clrf	7
  4736  0742  0801               	movf	1,w
  4737  0743  1903               	btfsc	3,2
  4738  0744  2F52               	goto	l2067
  4739  0745  3001               	movlw	1
  4740  0746  00A3               	movwf	??_strcat
  4741  0747  0823               	movf	??_strcat,w
  4742  0748  07A4               	addwf	strcat@cp,f
  4743  0749  2F3F               	goto	l2061
  4744  074A                     l2063:	
  4745  074A  3001               	movlw	1
  4746  074B  00A3               	movwf	??_strcat
  4747  074C  0823               	movf	??_strcat,w
  4748  074D  07A4               	addwf	strcat@cp,f
  4749  074E  3001               	movlw	1
  4750  074F  07A1               	addwf	strcat@from,f
  4751  0750  3000               	movlw	0
  4752  0751  3DA2               	addwfc	strcat@from+1,f
  4753  0752                     l2067:	
  4754  0752  0824               	movf	strcat@cp,w
  4755  0753  0086               	movwf	6
  4756  0754  0187               	clrf	7
  4757  0755  0821               	movf	strcat@from,w
  4758  0756  0084               	movwf	4
  4759  0757  0822               	movf	strcat@from+1,w
  4760  0758  0085               	movwf	5
  4761  0759  0800               	movf	0,w	;code access
  4762  075A  3FC0               	movwi [0]fsr1
  4763  075B  0889               	movf	9,f
  4764  075C  1903               	btfsc	3,2
  4765  075D  0008               	return
  4766  075E  2F4A               	goto	l2063
  4767  075F                     __end_of_strcat:	
  4768                           ;	Return value of _strcat is never used
  4769                           
  4770                           
  4771                           	psect	text11
  4772  0F1A                     __ptext11:	
  4773 ;; *************** function _memset *****************
  4774 ;; Defined at:
  4775 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  p1              2    1[BANK0 ] PTR void 
  4778 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  4779 ;;  c               2    3[BANK0 ] int 
  4780 ;;  n               2    5[BANK0 ] unsigned int 
  4781 ;; Auto vars:     Size  Location     Type
  4782 ;;  p               2    7[BANK0 ] PTR unsigned char 
  4783 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  4784 ;; Return value:  Size  Location     Type
  4785 ;;                  2    1[BANK0 ] PTR void 
  4786 ;; Registers used:
  4787 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4788 ;; Tracked objects:
  4789 ;;		On entry : 0/0
  4790 ;;		On exit  : 0/0
  4791 ;;		Unchanged: 0/0
  4792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4793 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4794 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4796 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;Total ram usage:        8 bytes
  4798 ;; Hardware stack levels used:    1
  4799 ;; Hardware stack levels required when called:    7
  4800 ;; This function calls:
  4801 ;;		Nothing
  4802 ;; This function is called by:
  4803 ;;		_setMessage
  4804 ;; This function uses a non-reentrant model
  4805 ;;
  4806                           
  4807                           
  4808                           ;psect for function _memset
  4809  0F1A                     _memset:	
  4810                           
  4811                           ;incstack = 0
  4812                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  4813  0F1A  0020               	movlb	0	; select bank0
  4814  0F1B  0822               	movf	memset@p1+1,w
  4815  0F1C  00A8               	movwf	memset@p+1
  4816  0F1D  0821               	movf	memset@p1,w
  4817  0F1E  00A7               	movwf	memset@p
  4818  0F1F                     l2819:	
  4819  0F1F  3001               	movlw	1
  4820  0F20  02A5               	subwf	memset@n,f
  4821  0F21  3000               	movlw	0
  4822  0F22  3BA6               	subwfb	memset@n+1,f
  4823  0F23  0A25               	incf	memset@n,w
  4824  0F24  1903               	btfsc	3,2
  4825  0F25  0A26               	incf	memset@n+1,w
  4826  0F26  1903               	btfsc	3,2
  4827  0F27  0008               	return
  4828  0F28  0827               	movf	memset@p,w
  4829  0F29  0086               	movwf	6
  4830  0F2A  0828               	movf	memset@p+1,w
  4831  0F2B  0087               	movwf	7
  4832  0F2C  0823               	movf	memset@c,w
  4833  0F2D  0081               	movwf	1
  4834  0F2E  3001               	movlw	1
  4835  0F2F  07A7               	addwf	memset@p,f
  4836  0F30  3000               	movlw	0
  4837  0F31  3DA8               	addwfc	memset@p+1,f
  4838  0F32  2F1F               	goto	l2819
  4839  0F33                     __end_of_memset:	
  4840                           ;	Return value of _memset is never used
  4841                           
  4842                           
  4843                           	psect	text12
  4844  01E7                     __ptext12:	
  4845 ;; *************** function _nrf24l01SendPacket *****************
  4846 ;; Defined at:
  4847 ;;		line 170 in file "nrf24l01.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  Packet          1    wreg     PTR struct .
  4850 ;;		 -> main@packet(33), loop@packet(33), 
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;  Packet          1   11[BANK0 ] PTR struct .
  4853 ;;		 -> main@packet(33), loop@packet(33), 
  4854 ;;  i               1   12[BANK0 ] unsigned char 
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  1    wreg      void 
  4857 ;; Registers used:
  4858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4865 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4866 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;Total ram usage:        4 bytes
  4869 ;; Hardware stack levels used:    1
  4870 ;; Hardware stack levels required when called:   11
  4871 ;; This function calls:
  4872 ;;		_enableInterrupts
  4873 ;;		_nrf24l01CEHigh
  4874 ;;		_nrf24l01CELow
  4875 ;;		_nrf24l01ChangeTXPower
  4876 ;;		_nrf24l01SPIEnd
  4877 ;;		_nrf24l01SPISend
  4878 ;;		_nrf24l01SPIStart
  4879 ;;		_nrf24l01SetRXMode
  4880 ;;		_strlen
  4881 ;; This function is called by:
  4882 ;;		_loop
  4883 ;;		_main
  4884 ;;		_nrf24l01SendACK
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           
  4889                           ;psect for function _nrf24l01SendPacket
  4890  01E7                     _nrf24l01SendPacket:	
  4891                           
  4892                           ;incstack = 0
  4893                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4894                           ;nrf24l01SendPacket@Packet stored from wreg
  4895  01E7  0020               	movlb	0	; select bank0
  4896  01E8  00AB               	movwf	nrf24l01SendPacket@Packet
  4897                           
  4898                           ;nrf24l01.c: 172: TXPacket = Packet;
  4899  01E9  082B               	movf	nrf24l01SendPacket@Packet,w
  4900  01EA  00A9               	movwf	??_nrf24l01SendPacket
  4901  01EB  0829               	movf	??_nrf24l01SendPacket,w
  4902  01EC  00D9               	movwf	_TXPacket
  4903  01ED                     l324:	
  4904                           ;nrf24l01.c: 175: unsigned char i;;nrf24l01.c: 179: RESEND:
  4905                           
  4906                           
  4907                           ;nrf24l01.c: 182: i = 0xFF;
  4908  01ED  30FF               	movlw	255
  4909  01EE  00A9               	movwf	??_nrf24l01SendPacket
  4910  01EF  0829               	movf	??_nrf24l01SendPacket,w
  4911  01F0  00AC               	movwf	nrf24l01SendPacket@i
  4912  01F1                     l2361:	
  4913                           ;nrf24l01.c: 183: while (nrf24l01.TXBusy){
  4914                           
  4915  01F1  0020               	movlb	0	; select bank0
  4916  01F2  1C5B               	btfss	_nrf24l01,0	;volatile
  4917  01F3  29FD               	goto	l328
  4918                           
  4919                           ;nrf24l01.c: 184: if (!--i) {
  4920  01F4  3001               	movlw	1
  4921  01F5  02AC               	subwf	nrf24l01SendPacket@i,f
  4922  01F6  1903               	btfsc	3,2
  4923  01F7  29ED               	goto	l324
  4924                           
  4925                           ;nrf24l01.c: 186: };nrf24l01.c: 187: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  4926                           
  4927                           ;nrf24l01.c: 185: goto RESEND;
  4928  01F8  3085               	movlw	133
  4929  01F9                     u1647:	
  4930  01F9  0B89               	decfsz	9,f
  4931  01FA  29F9               	goto	u1647
  4932  01FB  0000               	nop
  4933  01FC  29F1               	goto	l2361
  4934  01FD                     l328:	
  4935                           
  4936                           ;nrf24l01.c: 188: };nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  4937  01FD  145B               	bsf	_nrf24l01,0	;volatile
  4938                           
  4939                           ;nrf24l01.c: 194: enableInterrupts(0);
  4940  01FE  3000               	movlw	0
  4941  01FF  318E  26B9  3181   	fcall	_enableInterrupts
  4942                           
  4943                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  4944  0202  3000               	movlw	0
  4945  0203  3185  25D5  3181   	fcall	_nrf24l01SetRXMode
  4946                           
  4947                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  4948  0206  318E  26C1  3181   	fcall	_nrf24l01SPIStart
  4949                           
  4950                           ;nrf24l01.c: 203: nrf24l01SPISend(0b10110000);
  4951  0209  30B0               	movlw	176
  4952  020A  318E  26C9  3181   	fcall	_nrf24l01SPISend
  4953                           
  4954                           ;nrf24l01.c: 205: nrf24l01SPISend(TXPacket->packetData.byte);
  4955  020D  0020               	movlb	0	; select bank0
  4956  020E  0859               	movf	_TXPacket,w
  4957  020F  0086               	movwf	6
  4958  0210  0187               	clrf	7
  4959  0211  0801               	movf	1,w
  4960  0212  318E  26C9  3181   	fcall	_nrf24l01SPISend
  4961                           
  4962                           ;nrf24l01.c: 208: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  4963  0215  0020               	movlb	0	; select bank0
  4964  0216  01AC               	clrf	nrf24l01SendPacket@i
  4965  0217  2A28               	goto	l2373
  4966  0218                     l2369:	
  4967                           
  4968                           ;nrf24l01.c: 209: nrf24l01SPISend(TXPacket->Message[i]);
  4969  0218  082C               	movf	nrf24l01SendPacket@i,w
  4970  0219  3E01               	addlw	1
  4971  021A  0759               	addwf	_TXPacket,w
  4972  021B  00A9               	movwf	??_nrf24l01SendPacket
  4973  021C  0829               	movf	??_nrf24l01SendPacket,w
  4974  021D  0086               	movwf	6
  4975  021E  0187               	clrf	7
  4976  021F  0801               	movf	1,w
  4977  0220  318E  26C9  3181   	fcall	_nrf24l01SPISend
  4978  0223  3001               	movlw	1
  4979  0224  0020               	movlb	0	; select bank0
  4980  0225  00A9               	movwf	??_nrf24l01SendPacket
  4981  0226  0829               	movf	??_nrf24l01SendPacket,w
  4982  0227  07AC               	addwf	nrf24l01SendPacket@i,f
  4983  0228                     l2373:	
  4984  0228  0859               	movf	_TXPacket,w
  4985  0229  3E01               	addlw	1
  4986  022A  3187  2785  3181   	fcall	_strlen
  4987  022D  0020               	movlb	0	; select bank0
  4988  022E  082C               	movf	nrf24l01SendPacket@i,w
  4989  022F  00A9               	movwf	??_nrf24l01SendPacket
  4990  0230  01AA               	clrf	??_nrf24l01SendPacket+1
  4991  0231  0822               	movf	?_strlen+1,w
  4992  0232  022A               	subwf	??_nrf24l01SendPacket+1,w
  4993  0233  1D03               	skipz
  4994  0234  2A37               	goto	u1245
  4995  0235  0821               	movf	?_strlen,w
  4996  0236  0229               	subwf	??_nrf24l01SendPacket,w
  4997  0237                     u1245:	
  4998  0237  1803               	skipnc
  4999  0238  2A3D               	goto	l2377
  5000  0239  3020               	movlw	32
  5001  023A  022C               	subwf	nrf24l01SendPacket@i,w
  5002  023B  1C03               	skipc
  5003  023C  2A18               	goto	l2369
  5004  023D                     l2377:	
  5005                           
  5006                           ;nrf24l01.c: 210: };nrf24l01.c: 213: nrf24l01SPIEnd();
  5007  023D  318E  26B2  3181   	fcall	_nrf24l01SPIEnd
  5008                           
  5009                           ;nrf24l01.c: 216: nrf24l01CEHigh();
  5010  0240  318E  26A0  3181   	fcall	_nrf24l01CEHigh
  5011                           
  5012                           ;nrf24l01.c: 217: _delay((unsigned long)((20)*(16000000/4000000.0)));
  5013  0243  301A               	movlw	26
  5014  0244                     u1657:	
  5015  0244  0B89               	decfsz	9,f
  5016  0245  2A44               	goto	u1657
  5017  0246  3200               	nop2
  5018                           
  5019                           ;nrf24l01.c: 218: nrf24l01CELow();
  5020  0247  318E  26A3  3181   	fcall	_nrf24l01CELow
  5021                           
  5022                           ;nrf24l01.c: 221: enableInterrupts(1);
  5023  024A  3001               	movlw	1
  5024  024B  318E  26B9  3181   	fcall	_enableInterrupts
  5025                           
  5026                           ;nrf24l01.c: 224: i = 0xFF;
  5027  024E  30FF               	movlw	255
  5028  024F  0020               	movlb	0	; select bank0
  5029  0250  00A9               	movwf	??_nrf24l01SendPacket
  5030  0251  0829               	movf	??_nrf24l01SendPacket,w
  5031  0252  00AC               	movwf	nrf24l01SendPacket@i
  5032  0253                     l2395:	
  5033                           ;nrf24l01.c: 225: while (nrf24l01.TXBusy){
  5034                           
  5035  0253  0020               	movlb	0	; select bank0
  5036  0254  1C5B               	btfss	_nrf24l01,0	;volatile
  5037  0255  2A6A               	goto	l2397
  5038                           
  5039                           ;nrf24l01.c: 226: if (!--i) {
  5040  0256  3001               	movlw	1
  5041  0257  02AC               	subwf	nrf24l01SendPacket@i,f
  5042  0258  1903               	btfsc	3,2
  5043  0259  29ED               	goto	l324
  5044                           
  5045                           ;nrf24l01.c: 228: };nrf24l01.c: 229: if (i > 128){
  5046                           
  5047                           ;nrf24l01.c: 227: goto RESEND;
  5048  025A  3081               	movlw	129
  5049  025B  022C               	subwf	nrf24l01SendPacket@i,w
  5050  025C  1C03               	skipc
  5051  025D  2A65               	goto	l2393
  5052                           
  5053                           ;nrf24l01.c: 230: nrf24l01ChangeTXPower(1);
  5054  025E  3001               	movlw	1
  5055  025F  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  5056  0260  3000               	movlw	0
  5057  0261  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  5058  0262  3185  255A  3181   	fcall	_nrf24l01ChangeTXPower
  5059  0265                     l2393:	
  5060                           
  5061                           ;nrf24l01.c: 231: };nrf24l01.c: 232: _delay((unsigned long)((100)*(16000000/4000000.0)))
      +                          ;
  5062  0265  3085               	movlw	133
  5063  0266                     u1667:	
  5064  0266  0B89               	decfsz	9,f
  5065  0267  2A66               	goto	u1667
  5066  0268  0000               	nop
  5067  0269  2A53               	goto	l2395
  5068  026A                     l2397:	
  5069                           
  5070                           ;nrf24l01.c: 233: };nrf24l01.c: 237: i = 0xFF;
  5071  026A  30FF               	movlw	255
  5072  026B  00A9               	movwf	??_nrf24l01SendPacket
  5073  026C  0829               	movf	??_nrf24l01SendPacket,w
  5074  026D  00AC               	movwf	nrf24l01SendPacket@i
  5075  026E                     l2405:	
  5076                           ;nrf24l01.c: 238: while (TXPacket->packetData.ACKRequest){
  5077                           
  5078  026E  0020               	movlb	0	; select bank0
  5079  026F  0859               	movf	_TXPacket,w
  5080  0270  0086               	movwf	6
  5081  0271  0187               	clrf	7
  5082  0272  1D01               	btfss	1,2
  5083  0273  0008               	return
  5084                           
  5085                           ;nrf24l01.c: 239: if (!--i) {
  5086  0274  3001               	movlw	1
  5087  0275  02AC               	subwf	nrf24l01SendPacket@i,f
  5088  0276  1903               	btfsc	3,2
  5089  0277  29ED               	goto	l324
  5090                           
  5091                           ;nrf24l01.c: 241: };nrf24l01.c: 242: _delay((unsigned long)((40)*(16000000/4000000.0)));
  5092                           
  5093                           ;nrf24l01.c: 240: goto RESEND;
  5094  0278  3035               	movlw	53
  5095  0279                     u1677:	
  5096  0279  0B89               	decfsz	9,f
  5097  027A  2A79               	goto	u1677
  5098  027B  0000               	nop
  5099  027C  2A6E               	goto	l2405
  5100  027D                     __end_of_nrf24l01SendPacket:	
  5101                           
  5102                           	psect	text13
  5103  0785                     __ptext13:	
  5104 ;; *************** function _strlen *****************
  5105 ;; Defined at:
  5106 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;  s               1    wreg     PTR const unsigned char 
  5109 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5110 ;;		 -> loop@packet(33), 
  5111 ;; Auto vars:     Size  Location     Type
  5112 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  5113 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5114 ;;		 -> loop@packet(33), 
  5115 ;;  cp              1    8[BANK0 ] PTR const unsigned char 
  5116 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  5117 ;;		 -> loop@packet(33), 
  5118 ;; Return value:  Size  Location     Type
  5119 ;;                  2    1[BANK0 ] unsigned int 
  5120 ;; Registers used:
  5121 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5122 ;; Tracked objects:
  5123 ;;		On entry : 0/0
  5124 ;;		On exit  : 0/0
  5125 ;;		Unchanged: 0/0
  5126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5127 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5128 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5129 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5130 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5131 ;;Total ram usage:        8 bytes
  5132 ;; Hardware stack levels used:    1
  5133 ;; Hardware stack levels required when called:    7
  5134 ;; This function calls:
  5135 ;;		Nothing
  5136 ;; This function is called by:
  5137 ;;		_nrf24l01SendPacket
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140                           
  5141                           
  5142                           ;psect for function _strlen
  5143  0785                     _strlen:	
  5144                           
  5145                           ;incstack = 0
  5146                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5147                           ;strlen@s stored from wreg
  5148  0785  0020               	movlb	0	; select bank0
  5149  0786  00A7               	movwf	strlen@s
  5150  0787  0827               	movf	strlen@s,w
  5151  0788  00A3               	movwf	??_strlen
  5152  0789  0823               	movf	??_strlen,w
  5153  078A  00A8               	movwf	strlen@cp
  5154  078B                     l2133:	
  5155  078B  0828               	movf	strlen@cp,w
  5156  078C  0086               	movwf	6
  5157  078D  0187               	clrf	7
  5158  078E  0801               	movf	1,w
  5159  078F  1903               	btfsc	3,2
  5160  0790  2F96               	goto	l2135
  5161  0791  3001               	movlw	1
  5162  0792  00A3               	movwf	??_strlen
  5163  0793  0823               	movf	??_strlen,w
  5164  0794  07A8               	addwf	strlen@cp,f
  5165  0795  2F8B               	goto	l2133
  5166  0796                     l2135:	
  5167  0796  0827               	movf	strlen@s,w
  5168  0797  00A3               	movwf	??_strlen
  5169  0798  3000               	movlw	0
  5170  0799  00A4               	movwf	??_strlen+1
  5171  079A  09A3               	comf	??_strlen,f
  5172  079B  09A4               	comf	??_strlen+1,f
  5173  079C  0AA3               	incf	??_strlen,f
  5174  079D  1903               	skipnz
  5175  079E  0AA4               	incf	??_strlen+1,f
  5176  079F  0828               	movf	strlen@cp,w
  5177  07A0  00A5               	movwf	??_strlen+2
  5178  07A1  3000               	movlw	0
  5179  07A2  00A6               	movwf	??_strlen+3
  5180  07A3  0823               	movf	??_strlen,w
  5181  07A4  0725               	addwf	??_strlen+2,w
  5182  07A5  00A1               	movwf	?_strlen
  5183  07A6  0824               	movf	??_strlen+1,w
  5184  07A7  3D26               	addwfc	??_strlen+3,w
  5185  07A8  00A2               	movwf	?_strlen+1
  5186  07A9  0008               	return
  5187  07AA                     __end_of_strlen:	
  5188                           
  5189                           	psect	text14
  5190  05D5                     __ptext14:	
  5191 ;; *************** function _nrf24l01SetRXMode *****************
  5192 ;; Defined at:
  5193 ;;		line 54 in file "nrf24l01.c"
  5194 ;; Parameters:    Size  Location     Type
  5195 ;;  rxMode          1    wreg     unsigned char 
  5196 ;; Auto vars:     Size  Location     Type
  5197 ;;  rxMode          1    6[BANK0 ] unsigned char 
  5198 ;;  config          1    5[BANK0 ] struct .
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  1    wreg      void 
  5201 ;; Registers used:
  5202 ;;		wreg, status,2, status,0, pclath, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5211 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;Total ram usage:        3 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:   10
  5215 ;; This function calls:
  5216 ;;		_nrf24l01CEHigh
  5217 ;;		_nrf24l01CELow
  5218 ;;		_nrf24l01Send
  5219 ;; This function is called by:
  5220 ;;		_nrf24l01SendPacket
  5221 ;;		_checkRxData
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           
  5226                           ;psect for function _nrf24l01SetRXMode
  5227  05D5                     _nrf24l01SetRXMode:	
  5228                           
  5229                           ;incstack = 0
  5230                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5231                           ;nrf24l01SetRXMode@rxMode stored from wreg
  5232  05D5  0020               	movlb	0	; select bank0
  5233  05D6  00A6               	movwf	nrf24l01SetRXMode@rxMode
  5234                           
  5235                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  5236  05D7  01A1               	clrf	nrf24l01Send@data
  5237  05D8  3000               	movlw	0
  5238  05D9  318F  27E0  3185   	fcall	_nrf24l01Send
  5239  05DC  0020               	movlb	0	; select bank0
  5240  05DD  00A4               	movwf	??_nrf24l01SetRXMode
  5241  05DE  0824               	movf	??_nrf24l01SetRXMode,w
  5242  05DF  00A5               	movwf	nrf24l01SetRXMode@config
  5243                           
  5244                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  5245  05E0  0825               	movf	nrf24l01SetRXMode@config,w
  5246  05E1  3901               	andlw	1
  5247  05E2  0626               	xorwf	nrf24l01SetRXMode@rxMode,w
  5248  05E3  1903               	skipnz
  5249  05E4  2E09               	goto	l2047
  5250                           
  5251                           ;nrf24l01.c: 65: nrf24l01CELow();
  5252  05E5  318E  26A3  3185   	fcall	_nrf24l01CELow
  5253                           
  5254                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5255  05E8  30A0               	movlw	160
  5256  05E9                     u1687:	
  5257  05E9  3200               	nop2
  5258  05EA  0B89               	decfsz	9,f
  5259  05EB  2DE9               	goto	u1687
  5260                           
  5261                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  5262  05EC  0020               	movlb	0	; select bank0
  5263  05ED  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5264  05EE  3901               	andlw	1
  5265  05EF  1025               	bcf	nrf24l01SetRXMode@config,0
  5266  05F0  1D03               	skipz
  5267  05F1  1425               	bsf	nrf24l01SetRXMode@config,0
  5268                           
  5269                           ;nrf24l01.c: 70: nrf24l01Send(0b00100000 | 0x00, config.byte);
  5270  05F2  0825               	movf	nrf24l01SetRXMode@config,w
  5271  05F3  00A4               	movwf	??_nrf24l01SetRXMode
  5272  05F4  0824               	movf	??_nrf24l01SetRXMode,w
  5273  05F5  00A1               	movwf	nrf24l01Send@data
  5274  05F6  3020               	movlw	32
  5275  05F7  318F  27E0  3185   	fcall	_nrf24l01Send
  5276                           
  5277                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5278  05FA  30A0               	movlw	160
  5279  05FB                     u1697:	
  5280  05FB  3200               	nop2
  5281  05FC  0B89               	decfsz	9,f
  5282  05FD  2DFB               	goto	u1697
  5283                           
  5284                           ;nrf24l01.c: 76: if (rxMode){
  5285  05FE  0020               	movlb	0	; select bank0
  5286  05FF  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5287  0600  1903               	btfsc	3,2
  5288  0601  2E09               	goto	l2047
  5289                           
  5290                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  5291  0602  318E  26A0  3185   	fcall	_nrf24l01CEHigh
  5292                           
  5293                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5294  0605  30A0               	movlw	160
  5295  0606                     u1707:	
  5296  0606  3200               	nop2
  5297  0607  0B89               	decfsz	9,f
  5298  0608  2E06               	goto	u1707
  5299  0609                     l2047:	
  5300                           
  5301                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  5302  0609  0020               	movlb	0	; select bank0
  5303  060A  0826               	movf	nrf24l01SetRXMode@rxMode,w
  5304  060B  3901               	andlw	1
  5305  060C  115B               	bcf	_nrf24l01,2	;volatile
  5306  060D  1D03               	skipz
  5307  060E  155B               	bsf	_nrf24l01,2	;volatile
  5308  060F  0008               	return
  5309  0610                     __end_of_nrf24l01SetRXMode:	
  5310                           
  5311                           	psect	text15
  5312  038F                     __ptext15:	
  5313 ;; *************** function _getADCValue *****************
  5314 ;; Defined at:
  5315 ;;		line 23 in file "main.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;  channel         1    wreg     unsigned char 
  5318 ;;  divider         4   15[BANK0 ] unsigned long 
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;  channel         1   23[BANK0 ] unsigned char 
  5321 ;;  adcSum          4   25[BANK0 ] unsigned long 
  5322 ;;  adcLoop         1   24[BANK0 ] unsigned char 
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  4   15[BANK0 ] unsigned long 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0, pclath, cstack
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5332 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5334 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5335 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5336 ;;Total ram usage:       14 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:    8
  5339 ;; This function calls:
  5340 ;;		___lldiv
  5341 ;;		___lmul
  5342 ;; This function is called by:
  5343 ;;		_loop
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           
  5348                           ;psect for function _getADCValue
  5349  038F                     _getADCValue:	
  5350                           
  5351                           ;incstack = 0
  5352                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  5353                           ;getADCValue@channel stored from wreg
  5354  038F  0020               	movlb	0	; select bank0
  5355  0390  00B7               	movwf	getADCValue@channel
  5356                           
  5357                           ;main.c: 25: unsigned long adcSum = 0;
  5358  0391  3000               	movlw	0
  5359  0392  00BC               	movwf	getADCValue@adcSum+3
  5360  0393  3000               	movlw	0
  5361  0394  00BB               	movwf	getADCValue@adcSum+2
  5362  0395  3000               	movlw	0
  5363  0396  00BA               	movwf	getADCValue@adcSum+1
  5364  0397  3000               	movlw	0
  5365  0398  00B9               	movwf	getADCValue@adcSum
  5366                           
  5367                           ;main.c: 26: unsigned char adcLoop = 255;
  5368  0399  30FF               	movlw	255
  5369  039A  00B3               	movwf	??_getADCValue
  5370  039B  0833               	movf	??_getADCValue,w
  5371  039C  00B8               	movwf	getADCValue@adcLoop
  5372                           
  5373                           ;main.c: 28: ADCON0bits.CHS = channel;
  5374  039D  0837               	movf	getADCValue@channel,w
  5375  039E  00B3               	movwf	??_getADCValue
  5376  039F  0DB3               	rlf	??_getADCValue,f
  5377  03A0  0DB3               	rlf	??_getADCValue,f
  5378  03A1  0021               	movlb	1	; select bank1
  5379  03A2  081D               	movf	29,w	;volatile
  5380  03A3  0020               	movlb	0	; select bank0
  5381  03A4  0633               	xorwf	??_getADCValue,w
  5382  03A5  3903               	andlw	-253
  5383  03A6  0633               	xorwf	??_getADCValue,w
  5384  03A7  0021               	movlb	1	; select bank1
  5385  03A8  009D               	movwf	29	;volatile
  5386                           
  5387                           ;main.c: 29: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5388  03A9  30A0               	movlw	160
  5389  03AA                     u1717:	
  5390  03AA  3200               	nop2
  5391  03AB  0B89               	decfsz	9,f
  5392  03AC  2BAA               	goto	u1717
  5393  03AD                     l2317:	
  5394                           ;main.c: 31: while (--adcLoop){
  5395                           
  5396  03AD  3001               	movlw	1
  5397  03AE  0020               	movlb	0	; select bank0
  5398  03AF  02B8               	subwf	getADCValue@adcLoop,f
  5399  03B0  1903               	btfsc	3,2
  5400  03B1  2BD7               	goto	l2319
  5401                           
  5402                           ;main.c: 33: ADCON0bits.ADGO = 1;
  5403  03B2  0021               	movlb	1	; select bank1
  5404  03B3  149D               	bsf	29,1	;volatile
  5405  03B4                     l214:	
  5406                           ;main.c: 35: while (ADCON0bits.ADGO){
  5407                           
  5408  03B4  0021               	movlb	1	; select bank1
  5409  03B5  1C9D               	btfss	29,1	;volatile
  5410  03B6  2BB9               	goto	l2315
  5411                           
  5412                           ;main.c: 36: __nop();
  5413  03B7  0000               	nop
  5414  03B8  2BB4               	goto	l214
  5415  03B9                     l2315:	
  5416                           
  5417                           ;main.c: 37: };main.c: 39: adcSum+= ADRESL;
  5418  03B9  081B               	movf	27,w	;volatile
  5419  03BA  0020               	movlb	0	; select bank0
  5420  03BB  00B3               	movwf	??_getADCValue
  5421  03BC  01B4               	clrf	??_getADCValue+1
  5422  03BD  01B5               	clrf	??_getADCValue+2
  5423  03BE  01B6               	clrf	??_getADCValue+3
  5424  03BF  0833               	movf	??_getADCValue,w
  5425  03C0  07B9               	addwf	getADCValue@adcSum,f
  5426  03C1  0834               	movf	??_getADCValue+1,w
  5427  03C2  3DBA               	addwfc	getADCValue@adcSum+1,f
  5428  03C3  0835               	movf	??_getADCValue+2,w
  5429  03C4  3DBB               	addwfc	getADCValue@adcSum+2,f
  5430  03C5  0836               	movf	??_getADCValue+3,w
  5431  03C6  3DBC               	addwfc	getADCValue@adcSum+3,f
  5432                           
  5433                           ;main.c: 40: adcSum+= (unsigned) (ADRESH << 8);
  5434  03C7  0021               	movlb	1	; select bank1
  5435  03C8  081C               	movf	28,w	;volatile
  5436  03C9  0020               	movlb	0	; select bank0
  5437  03CA  00B3               	movwf	??_getADCValue
  5438  03CB  01B4               	clrf	??_getADCValue+1
  5439  03CC  0833               	movf	??_getADCValue,w
  5440  03CD  00B4               	movwf	??_getADCValue+1
  5441  03CE  01B3               	clrf	??_getADCValue
  5442  03CF  0833               	movf	??_getADCValue,w
  5443  03D0  07B9               	addwf	getADCValue@adcSum,f
  5444  03D1  0834               	movf	??_getADCValue+1,w
  5445  03D2  3DBA               	addwfc	getADCValue@adcSum+1,f
  5446  03D3  3000               	movlw	0
  5447  03D4  3DBB               	addwfc	getADCValue@adcSum+2,f
  5448  03D5  3DBC               	addwfc	getADCValue@adcSum+3,f
  5449  03D6  2BAD               	goto	l2317
  5450  03D7                     l2319:	
  5451                           
  5452                           ;main.c: 41: };main.c: 43: adcSum*= 100;
  5453  03D7  3000               	movlw	0
  5454  03D8  00A4               	movwf	___lmul@multiplier+3
  5455  03D9  3000               	movlw	0
  5456  03DA  00A3               	movwf	___lmul@multiplier+2
  5457  03DB  3000               	movlw	0
  5458  03DC  00A2               	movwf	___lmul@multiplier+1
  5459  03DD  3064               	movlw	100
  5460  03DE  00A1               	movwf	___lmul@multiplier
  5461  03DF  083C               	movf	getADCValue@adcSum+3,w
  5462  03E0  00A8               	movwf	___lmul@multiplicand+3
  5463  03E1  083B               	movf	getADCValue@adcSum+2,w
  5464  03E2  00A7               	movwf	___lmul@multiplicand+2
  5465  03E3  083A               	movf	getADCValue@adcSum+1,w
  5466  03E4  00A6               	movwf	___lmul@multiplicand+1
  5467  03E5  0839               	movf	getADCValue@adcSum,w
  5468  03E6  00A5               	movwf	___lmul@multiplicand
  5469  03E7  3186  26AF  3183   	fcall	___lmul
  5470  03EA  0020               	movlb	0	; select bank0
  5471  03EB  0824               	movf	?___lmul+3,w
  5472  03EC  00BC               	movwf	getADCValue@adcSum+3
  5473  03ED  0823               	movf	?___lmul+2,w
  5474  03EE  00BB               	movwf	getADCValue@adcSum+2
  5475  03EF  0822               	movf	?___lmul+1,w
  5476  03F0  00BA               	movwf	getADCValue@adcSum+1
  5477  03F1  0821               	movf	?___lmul,w
  5478  03F2  00B9               	movwf	getADCValue@adcSum
  5479                           
  5480                           ;main.c: 44: adcSum/= divider;
  5481  03F3  0832               	movf	getADCValue@divider+3,w
  5482  03F4  00A4               	movwf	___lldiv@divisor+3
  5483  03F5  0831               	movf	getADCValue@divider+2,w
  5484  03F6  00A3               	movwf	___lldiv@divisor+2
  5485  03F7  0830               	movf	getADCValue@divider+1,w
  5486  03F8  00A2               	movwf	___lldiv@divisor+1
  5487  03F9  082F               	movf	getADCValue@divider,w
  5488  03FA  00A1               	movwf	___lldiv@divisor
  5489  03FB  083C               	movf	getADCValue@adcSum+3,w
  5490  03FC  00A8               	movwf	___lldiv@dividend+3
  5491  03FD  083B               	movf	getADCValue@adcSum+2,w
  5492  03FE  00A7               	movwf	___lldiv@dividend+2
  5493  03FF  083A               	movf	getADCValue@adcSum+1,w
  5494  0400  00A6               	movwf	___lldiv@dividend+1
  5495  0401  0839               	movf	getADCValue@adcSum,w
  5496  0402  00A5               	movwf	___lldiv@dividend
  5497  0403  3184  24C4         	fcall	___lldiv
  5498  0405  0020               	movlb	0	; select bank0
  5499  0406  0824               	movf	?___lldiv+3,w
  5500  0407  00BC               	movwf	getADCValue@adcSum+3
  5501  0408  0823               	movf	?___lldiv+2,w
  5502  0409  00BB               	movwf	getADCValue@adcSum+2
  5503  040A  0822               	movf	?___lldiv+1,w
  5504  040B  00BA               	movwf	getADCValue@adcSum+1
  5505  040C  0821               	movf	?___lldiv,w
  5506  040D  00B9               	movwf	getADCValue@adcSum
  5507                           
  5508                           ;main.c: 46: return adcSum;
  5509  040E  083C               	movf	getADCValue@adcSum+3,w
  5510  040F  00B2               	movwf	?_getADCValue+3
  5511  0410  083B               	movf	getADCValue@adcSum+2,w
  5512  0411  00B1               	movwf	?_getADCValue+2
  5513  0412  083A               	movf	getADCValue@adcSum+1,w
  5514  0413  00B0               	movwf	?_getADCValue+1
  5515  0414  0839               	movf	getADCValue@adcSum,w
  5516  0415  00AF               	movwf	?_getADCValue
  5517  0416  0008               	return
  5518  0417                     __end_of_getADCValue:	
  5519                           
  5520                           	psect	text16
  5521  06AF                     __ptext16:	
  5522 ;; *************** function ___lmul *****************
  5523 ;; Defined at:
  5524 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  multiplier      4    1[BANK0 ] unsigned long 
  5527 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  product         4    9[BANK0 ] unsigned long 
  5530 ;; Return value:  Size  Location     Type
  5531 ;;                  4    1[BANK0 ] unsigned long 
  5532 ;; Registers used:
  5533 ;;		wreg, status,2, status,0
  5534 ;; Tracked objects:
  5535 ;;		On entry : 0/0
  5536 ;;		On exit  : 0/0
  5537 ;;		Unchanged: 0/0
  5538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5539 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;Total ram usage:       12 bytes
  5544 ;; Hardware stack levels used:    1
  5545 ;; Hardware stack levels required when called:    7
  5546 ;; This function calls:
  5547 ;;		Nothing
  5548 ;; This function is called by:
  5549 ;;		_getADCValue
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           
  5554                           ;psect for function ___lmul
  5555  06AF                     ___lmul:	
  5556                           
  5557                           ;incstack = 0
  5558                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5559  06AF  3000               	movlw	0
  5560  06B0  0020               	movlb	0	; select bank0
  5561  06B1  00AC               	movwf	___lmul@product+3
  5562  06B2  3000               	movlw	0
  5563  06B3  00AB               	movwf	___lmul@product+2
  5564  06B4  3000               	movlw	0
  5565  06B5  00AA               	movwf	___lmul@product+1
  5566  06B6  3000               	movlw	0
  5567  06B7  00A9               	movwf	___lmul@product
  5568  06B8                     l2155:	
  5569  06B8  1C21               	btfss	___lmul@multiplier,0
  5570  06B9  2EC2               	goto	l2159
  5571  06BA  0825               	movf	___lmul@multiplicand,w
  5572  06BB  07A9               	addwf	___lmul@product,f
  5573  06BC  0826               	movf	___lmul@multiplicand+1,w
  5574  06BD  3DAA               	addwfc	___lmul@product+1,f
  5575  06BE  0827               	movf	___lmul@multiplicand+2,w
  5576  06BF  3DAB               	addwfc	___lmul@product+2,f
  5577  06C0  0828               	movf	___lmul@multiplicand+3,w
  5578  06C1  3DAC               	addwfc	___lmul@product+3,f
  5579  06C2                     l2159:	
  5580  06C2  3001               	movlw	1
  5581  06C3                     u1095:	
  5582  06C3  35A5               	lslf	___lmul@multiplicand,f
  5583  06C4  0DA6               	rlf	___lmul@multiplicand+1,f
  5584  06C5  0DA7               	rlf	___lmul@multiplicand+2,f
  5585  06C6  0DA8               	rlf	___lmul@multiplicand+3,f
  5586  06C7  0B89               	decfsz	9,f
  5587  06C8  2EC3               	goto	u1095
  5588  06C9  3001               	movlw	1
  5589  06CA                     u1105:	
  5590  06CA  36A4               	lsrf	___lmul@multiplier+3,f
  5591  06CB  0CA3               	rrf	___lmul@multiplier+2,f
  5592  06CC  0CA2               	rrf	___lmul@multiplier+1,f
  5593  06CD  0CA1               	rrf	___lmul@multiplier,f
  5594  06CE  0B89               	decfsz	9,f
  5595  06CF  2ECA               	goto	u1105
  5596  06D0  0824               	movf	___lmul@multiplier+3,w
  5597  06D1  0423               	iorwf	___lmul@multiplier+2,w
  5598  06D2  0422               	iorwf	___lmul@multiplier+1,w
  5599  06D3  0421               	iorwf	___lmul@multiplier,w
  5600  06D4  1D03               	skipz
  5601  06D5  2EB8               	goto	l2155
  5602  06D6  082C               	movf	___lmul@product+3,w
  5603  06D7  00A4               	movwf	?___lmul+3
  5604  06D8  082B               	movf	___lmul@product+2,w
  5605  06D9  00A3               	movwf	?___lmul+2
  5606  06DA  082A               	movf	___lmul@product+1,w
  5607  06DB  00A2               	movwf	?___lmul+1
  5608  06DC  0829               	movf	___lmul@product,w
  5609  06DD  00A1               	movwf	?___lmul
  5610  06DE  0008               	return
  5611  06DF                     __end_of___lmul:	
  5612                           
  5613                           	psect	text17
  5614  04C4                     __ptext17:	
  5615 ;; *************** function ___lldiv *****************
  5616 ;; Defined at:
  5617 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  divisor         4    1[BANK0 ] unsigned long 
  5620 ;;  dividend        4    5[BANK0 ] unsigned long 
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;  quotient        4   10[BANK0 ] unsigned long 
  5623 ;;  counter         1   14[BANK0 ] unsigned char 
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  4    1[BANK0 ] unsigned long 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2, status,0
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5633 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5634 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5635 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5636 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5637 ;;Total ram usage:       14 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    7
  5640 ;; This function calls:
  5641 ;;		Nothing
  5642 ;; This function is called by:
  5643 ;;		_getADCValue
  5644 ;;		_ultoa
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           
  5649                           ;psect for function ___lldiv
  5650  04C4                     ___lldiv:	
  5651                           
  5652                           ;incstack = 0
  5653                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5654  04C4  3000               	movlw	0
  5655  04C5  0020               	movlb	0	; select bank0
  5656  04C6  00AD               	movwf	___lldiv@quotient+3
  5657  04C7  3000               	movlw	0
  5658  04C8  00AC               	movwf	___lldiv@quotient+2
  5659  04C9  3000               	movlw	0
  5660  04CA  00AB               	movwf	___lldiv@quotient+1
  5661  04CB  3000               	movlw	0
  5662  04CC  00AA               	movwf	___lldiv@quotient
  5663  04CD  0824               	movf	___lldiv@divisor+3,w
  5664  04CE  0423               	iorwf	___lldiv@divisor+2,w
  5665  04CF  0422               	iorwf	___lldiv@divisor+1,w
  5666  04D0  0421               	iorwf	___lldiv@divisor,w
  5667  04D1  1903               	skipnz
  5668  04D2  2D0E               	goto	l1933
  5669  04D3  01AE               	clrf	___lldiv@counter
  5670  04D4  0AAE               	incf	___lldiv@counter,f
  5671  04D5                     l1919:	
  5672  04D5  1BA4               	btfsc	___lldiv@divisor+3,7
  5673  04D6  2CE3               	goto	l1921
  5674  04D7  3001               	movlw	1
  5675  04D8                     u775:	
  5676  04D8  35A1               	lslf	___lldiv@divisor,f
  5677  04D9  0DA2               	rlf	___lldiv@divisor+1,f
  5678  04DA  0DA3               	rlf	___lldiv@divisor+2,f
  5679  04DB  0DA4               	rlf	___lldiv@divisor+3,f
  5680  04DC  0B89               	decfsz	9,f
  5681  04DD  2CD8               	goto	u775
  5682  04DE  3001               	movlw	1
  5683  04DF  00A9               	movwf	??___lldiv
  5684  04E0  0829               	movf	??___lldiv,w
  5685  04E1  07AE               	addwf	___lldiv@counter,f
  5686  04E2  2CD5               	goto	l1919
  5687  04E3                     l1921:	
  5688  04E3  3001               	movlw	1
  5689  04E4                     u795:	
  5690  04E4  35AA               	lslf	___lldiv@quotient,f
  5691  04E5  0DAB               	rlf	___lldiv@quotient+1,f
  5692  04E6  0DAC               	rlf	___lldiv@quotient+2,f
  5693  04E7  0DAD               	rlf	___lldiv@quotient+3,f
  5694  04E8  0B89               	decfsz	9,f
  5695  04E9  2CE4               	goto	u795
  5696  04EA  0824               	movf	___lldiv@divisor+3,w
  5697  04EB  0228               	subwf	___lldiv@dividend+3,w
  5698  04EC  1D03               	skipz
  5699  04ED  2CF8               	goto	u805
  5700  04EE  0823               	movf	___lldiv@divisor+2,w
  5701  04EF  0227               	subwf	___lldiv@dividend+2,w
  5702  04F0  1D03               	skipz
  5703  04F1  2CF8               	goto	u805
  5704  04F2  0822               	movf	___lldiv@divisor+1,w
  5705  04F3  0226               	subwf	___lldiv@dividend+1,w
  5706  04F4  1D03               	skipz
  5707  04F5  2CF8               	goto	u805
  5708  04F6  0821               	movf	___lldiv@divisor,w
  5709  04F7  0225               	subwf	___lldiv@dividend,w
  5710  04F8                     u805:	
  5711  04F8  1C03               	skipc
  5712  04F9  2D03               	goto	l1929
  5713  04FA  0821               	movf	___lldiv@divisor,w
  5714  04FB  02A5               	subwf	___lldiv@dividend,f
  5715  04FC  0822               	movf	___lldiv@divisor+1,w
  5716  04FD  3BA6               	subwfb	___lldiv@dividend+1,f
  5717  04FE  0823               	movf	___lldiv@divisor+2,w
  5718  04FF  3BA7               	subwfb	___lldiv@dividend+2,f
  5719  0500  0824               	movf	___lldiv@divisor+3,w
  5720  0501  3BA8               	subwfb	___lldiv@dividend+3,f
  5721  0502  142A               	bsf	___lldiv@quotient,0
  5722  0503                     l1929:	
  5723  0503  3001               	movlw	1
  5724  0504                     u815:	
  5725  0504  36A4               	lsrf	___lldiv@divisor+3,f
  5726  0505  0CA3               	rrf	___lldiv@divisor+2,f
  5727  0506  0CA2               	rrf	___lldiv@divisor+1,f
  5728  0507  0CA1               	rrf	___lldiv@divisor,f
  5729  0508  0B89               	decfsz	9,f
  5730  0509  2D04               	goto	u815
  5731  050A  3001               	movlw	1
  5732  050B  02AE               	subwf	___lldiv@counter,f
  5733  050C  1D03               	btfss	3,2
  5734  050D  2CE3               	goto	l1921
  5735  050E                     l1933:	
  5736  050E  082D               	movf	___lldiv@quotient+3,w
  5737  050F  00A4               	movwf	?___lldiv+3
  5738  0510  082C               	movf	___lldiv@quotient+2,w
  5739  0511  00A3               	movwf	?___lldiv+2
  5740  0512  082B               	movf	___lldiv@quotient+1,w
  5741  0513  00A2               	movwf	?___lldiv+1
  5742  0514  082A               	movf	___lldiv@quotient,w
  5743  0515  00A1               	movwf	?___lldiv
  5744  0516  0008               	return
  5745  0517                     __end_of___lldiv:	
  5746                           
  5747                           	psect	text18
  5748  0ED6                     __ptext18:	
  5749 ;; *************** function _checkTXPower *****************
  5750 ;; Defined at:
  5751 ;;		line 92 in file "main.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;		None
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;  rxPacket        1    9[BANK0 ] PTR struct .
  5756 ;;		 -> RXPacket(33), 
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  1    wreg      void 
  5759 ;; Registers used:
  5760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;Total ram usage:        2 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; Hardware stack levels required when called:   11
  5773 ;; This function calls:
  5774 ;;		_nrf24l01ChangeTXPower
  5775 ;;		_nrf24l01GetRXPacket
  5776 ;; This function is called by:
  5777 ;;		_loop
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           
  5782                           ;psect for function _checkTXPower
  5783  0ED6                     _checkTXPower:	
  5784                           
  5785                           ;main.c: 93: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
  5786                           
  5787                           ;incstack = 0
  5788                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5789  0ED6  3180  2002  318E   	fcall	_nrf24l01GetRXPacket
  5790  0ED9  0020               	movlb	0	; select bank0
  5791  0EDA  00A8               	movwf	??_checkTXPower
  5792  0EDB  0828               	movf	??_checkTXPower,w
  5793  0EDC  00A9               	movwf	checkTXPower@rxPacket
  5794                           
  5795                           ;main.c: 95: if (rxPacket->packetData.ACKRPD){
  5796  0EDD  0829               	movf	checkTXPower@rxPacket,w
  5797  0EDE  0086               	movwf	6
  5798  0EDF  3001               	movlw	1	; select bank2/3
  5799  0EE0  0087               	movwf	7
  5800  0EE1  1C81               	btfss	1,1
  5801  0EE2  0008               	return
  5802                           
  5803                           ;main.c: 96: nrf24l01ChangeTXPower(-1);
  5804  0EE3  30FF               	movlw	255
  5805  0EE4  00A4               	movwf	nrf24l01ChangeTXPower@addPower
  5806  0EE5  30FF               	movlw	255
  5807  0EE6  00A5               	movwf	nrf24l01ChangeTXPower@addPower+1
  5808  0EE7  3185  255A         	fcall	_nrf24l01ChangeTXPower
  5809  0EE9  0008               	return
  5810  0EEA                     __end_of_checkTXPower:	
  5811                           
  5812                           	psect	text19
  5813  0002                     __ptext19:	
  5814 ;; *************** function _nrf24l01GetRXPacket *****************
  5815 ;; Defined at:
  5816 ;;		line 129 in file "nrf24l01.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;		None
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;		None
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      PTR struct .
  5823 ;; Registers used:
  5824 ;;		wreg
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;Total ram usage:        0 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    7
  5837 ;; This function calls:
  5838 ;;		Nothing
  5839 ;; This function is called by:
  5840 ;;		_checkTXPower
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _nrf24l01GetRXPacket
  5846  0002                     _nrf24l01GetRXPacket:	
  5847                           
  5848                           ;nrf24l01.c: 130: return &RXPacket;
  5849                           
  5850                           ;incstack = 0
  5851                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
  5852  0002  3040               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5853  0003  0008               	return
  5854  0004                     __end_of_nrf24l01GetRXPacket:	
  5855                           
  5856                           	psect	text20
  5857  055A                     __ptext20:	
  5858 ;; *************** function _nrf24l01ChangeTXPower *****************
  5859 ;; Defined at:
  5860 ;;		line 33 in file "nrf24l01.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;  addPower        2    4[BANK0 ] int 
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;  rfSetup         1    7[BANK0 ] struct .
  5865 ;; Return value:  Size  Location     Type
  5866 ;;                  1    wreg      void 
  5867 ;; Registers used:
  5868 ;;		wreg, status,2, status,0, pclath, cstack
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5874 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5877 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5878 ;;Total ram usage:        4 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:   10
  5881 ;; This function calls:
  5882 ;;		_nrf24l01Send
  5883 ;; This function is called by:
  5884 ;;		_checkTXPower
  5885 ;;		_nrf24l01SendPacket
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889                           
  5890                           ;psect for function _nrf24l01ChangeTXPower
  5891  055A                     _nrf24l01ChangeTXPower:	
  5892                           
  5893                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send(0b000
      +                          00000 | 0x06, 0);
  5894                           
  5895                           ;incstack = 0
  5896                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
  5897  055A  0020               	movlb	0	; select bank0
  5898  055B  01A1               	clrf	nrf24l01Send@data
  5899  055C  3006               	movlw	6
  5900  055D  318F  27E0  3185   	fcall	_nrf24l01Send
  5901  0560  0020               	movlb	0	; select bank0
  5902  0561  00A6               	movwf	??_nrf24l01ChangeTXPower
  5903  0562  0826               	movf	??_nrf24l01ChangeTXPower,w
  5904  0563  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  5905                           
  5906                           ;nrf24l01.c: 38: if (addPower > 0){
  5907  0564  0825               	movf	nrf24l01ChangeTXPower@addPower+1,w
  5908  0565  3A80               	xorlw	128
  5909  0566  00A6               	movwf	??_nrf24l01ChangeTXPower
  5910  0567  3080               	movlw	128
  5911  0568  0226               	subwf	??_nrf24l01ChangeTXPower,w
  5912  0569  1D03               	skipz
  5913  056A  2D6D               	goto	u975
  5914  056B  3001               	movlw	1
  5915  056C  0224               	subwf	nrf24l01ChangeTXPower@addPower,w
  5916  056D                     u975:	
  5917  056D  1C03               	skipc
  5918  056E  2D7F               	goto	l2107
  5919                           
  5920                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
  5921  056F  0020               	movlb	0	; select bank0
  5922  0570  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  5923  0571  3903               	andlw	3
  5924  0572  3A03               	xorlw	3
  5925  0573  1903               	skipnz
  5926  0574  2D7F               	goto	l2107
  5927                           
  5928                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
  5929  0575  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  5930  0576  3903               	andlw	3
  5931  0577  00A6               	movwf	??_nrf24l01ChangeTXPower
  5932  0578  0AA6               	incf	??_nrf24l01ChangeTXPower,f
  5933  0579  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  5934  057A  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  5935  057B  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  5936  057C  39F9               	andlw	-7
  5937  057D  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  5938  057E  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  5939  057F                     l2107:	
  5940                           
  5941                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
  5942  057F  0020               	movlb	0	; select bank0
  5943  0580  1FA5               	btfss	nrf24l01ChangeTXPower@addPower+1,7
  5944  0581  2D91               	goto	l2113
  5945                           
  5946                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
  5947  0582  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  5948  0583  3903               	andlw	3
  5949  0584  3A00               	xorlw	0
  5950  0585  1903               	skipnz
  5951  0586  2D91               	goto	l2113
  5952                           
  5953                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
  5954  0587  0C27               	rrf	nrf24l01ChangeTXPower@rfSetup,w
  5955  0588  3903               	andlw	3
  5956  0589  00A6               	movwf	??_nrf24l01ChangeTXPower
  5957  058A  03A6               	decf	??_nrf24l01ChangeTXPower,f
  5958  058B  0DA6               	rlf	??_nrf24l01ChangeTXPower,f
  5959  058C  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  5960  058D  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  5961  058E  39F9               	andlw	-7
  5962  058F  0626               	xorwf	??_nrf24l01ChangeTXPower,w
  5963  0590  00A7               	movwf	nrf24l01ChangeTXPower@rfSetup
  5964  0591                     l2113:	
  5965                           
  5966                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send(0b00100000 | 0x06, rfS
      +                          etup.byte);
  5967  0591  0827               	movf	nrf24l01ChangeTXPower@rfSetup,w
  5968  0592  00A6               	movwf	??_nrf24l01ChangeTXPower
  5969  0593  0826               	movf	??_nrf24l01ChangeTXPower,w
  5970  0594  00A1               	movwf	nrf24l01Send@data
  5971  0595  3026               	movlw	38
  5972  0596  318F  27E0         	fcall	_nrf24l01Send
  5973  0598  0008               	return
  5974  0599                     __end_of_nrf24l01ChangeTXPower:	
  5975                           
  5976                           	psect	text21
  5977  0FE0                     __ptext21:	
  5978 ;; *************** function _nrf24l01Send *****************
  5979 ;; Defined at:
  5980 ;;		line 9 in file "nrf24l01.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;  command         1    wreg     unsigned char 
  5983 ;;  data            1    1[BANK0 ] unsigned char 
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;  command         1    3[BANK0 ] unsigned char 
  5986 ;; Return value:  Size  Location     Type
  5987 ;;                  1    wreg      unsigned char 
  5988 ;; Registers used:
  5989 ;;		wreg, status,2, status,0, pclath, cstack
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5995 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;Total ram usage:        3 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; Hardware stack levels required when called:    9
  6002 ;; This function calls:
  6003 ;;		_enableInterrupts
  6004 ;;		_nrf24l01SPIEnd
  6005 ;;		_nrf24l01SPISend
  6006 ;;		_nrf24l01SPIStart
  6007 ;; This function is called by:
  6008 ;;		_loop
  6009 ;;		_nrf24l01ChangeTXPower
  6010 ;;		_nrf24l01SetRXMode
  6011 ;;		_nrf24l01InitRegisters
  6012 ;; This function uses a non-reentrant model
  6013 ;;
  6014                           
  6015                           
  6016                           ;psect for function _nrf24l01Send
  6017  0FE0                     _nrf24l01Send:	
  6018                           
  6019                           ;incstack = 0
  6020                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  6021                           ;nrf24l01Send@command stored from wreg
  6022  0FE0  0020               	movlb	0	; select bank0
  6023  0FE1  00A3               	movwf	nrf24l01Send@command
  6024                           
  6025                           ;nrf24l01.c: 12: enableInterrupts(0);
  6026  0FE2  3000               	movlw	0
  6027  0FE3  318E  26B9  318F   	fcall	_enableInterrupts
  6028                           
  6029                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  6030  0FE6  318E  26C1  318F   	fcall	_nrf24l01SPIStart
  6031                           
  6032                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  6033  0FE9  0020               	movlb	0	; select bank0
  6034  0FEA  0823               	movf	nrf24l01Send@command,w
  6035  0FEB  318E  26C9  318F   	fcall	_nrf24l01SPISend
  6036                           
  6037                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  6038  0FEE  0020               	movlb	0	; select bank0
  6039  0FEF  0821               	movf	nrf24l01Send@data,w
  6040  0FF0  318E  26C9  318F   	fcall	_nrf24l01SPISend
  6041  0FF3  0020               	movlb	0	; select bank0
  6042  0FF4  00A2               	movwf	??_nrf24l01Send
  6043  0FF5  0822               	movf	??_nrf24l01Send,w
  6044  0FF6  00A1               	movwf	nrf24l01Send@data
  6045                           
  6046                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  6047  0FF7  318E  26B2  318F   	fcall	_nrf24l01SPIEnd
  6048                           
  6049                           ;nrf24l01.c: 27: enableInterrupts(1);
  6050  0FFA  3001               	movlw	1
  6051  0FFB  318E  26B9         	fcall	_enableInterrupts
  6052                           
  6053                           ;nrf24l01.c: 29: return data;
  6054  0FFD  0020               	movlb	0	; select bank0
  6055  0FFE  0821               	movf	nrf24l01Send@data,w
  6056  0FFF  0008               	return
  6057  1000                     __end_of_nrf24l01Send:	
  6058                           
  6059                           	psect	text22
  6060  07AA                     __ptext22:	
  6061 ;; *************** function _flashUpdate *****************
  6062 ;; Defined at:
  6063 ;;		line 97 in file "flash.c"
  6064 ;; Parameters:    Size  Location     Type
  6065 ;;		None
  6066 ;; Auto vars:     Size  Location     Type
  6067 ;;  i               2    9[BANK0 ] unsigned int 
  6068 ;; Return value:  Size  Location     Type
  6069 ;;                  1    wreg      void 
  6070 ;; Registers used:
  6071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;Total ram usage:        4 bytes
  6082 ;; Hardware stack levels used:    1
  6083 ;; Hardware stack levels required when called:    8
  6084 ;; This function calls:
  6085 ;;		_flashWriteByte
  6086 ;; This function is called by:
  6087 ;;		_main
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           
  6092                           ;psect for function _flashUpdate
  6093  07AA                     _flashUpdate:	
  6094                           
  6095                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  6096                           
  6097                           ;incstack = 0
  6098                           ; Regs used in _flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6099  07AA  0020               	movlb	0	; select bank0
  6100  07AB  01A9               	clrf	flashUpdate@i
  6101  07AC  01AA               	clrf	flashUpdate@i+1
  6102  07AD                     L1:	
  6103  07AD  3000               	movlw	0
  6104  07AE  022A               	subwf	flashUpdate@i+1,w
  6105  07AF  3020               	movlw	32
  6106  07B0  1903               	skipnz
  6107  07B1  0229               	subwf	flashUpdate@i,w
  6108  07B2  1803               	btfsc	3,0
  6109  07B3  0008               	return
  6110                           
  6111                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  6112  07B4  082A               	movf	flashUpdate@i+1,w
  6113  07B5  00A2               	movwf	flashWriteByte@offset+1
  6114  07B6  0829               	movf	flashUpdate@i,w
  6115  07B7  00A1               	movwf	flashWriteByte@offset
  6116  07B8  0829               	movf	flashUpdate@i,w
  6117  07B9  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6118  07BA  0086               	movwf	6
  6119  07BB  3001               	movlw	1	; select bank2/3
  6120  07BC  0087               	movwf	7
  6121  07BD  0801               	movf	1,w
  6122  07BE  00A7               	movwf	??_flashUpdate
  6123  07BF  01A8               	clrf	??_flashUpdate+1
  6124  07C0  0827               	movf	??_flashUpdate,w
  6125  07C1  00A3               	movwf	flashWriteByte@data
  6126  07C2  0828               	movf	??_flashUpdate+1,w
  6127  07C3  00A4               	movwf	flashWriteByte@data+1
  6128  07C4  3185  2599  3187   	fcall	_flashWriteByte
  6129  07C7  3001               	movlw	1
  6130  07C8  0020               	movlb	0	; select bank0
  6131  07C9  07A9               	addwf	flashUpdate@i,f
  6132  07CA  3000               	movlw	0
  6133  07CB  3DAA               	addwfc	flashUpdate@i+1,f
  6134  07CC  2FAD               	goto	L1
  6135  07CD                     __end_of_flashUpdate:	
  6136                           
  6137                           	psect	text23
  6138  0599                     __ptext23:	
  6139 ;; *************** function _flashWriteByte *****************
  6140 ;; Defined at:
  6141 ;;		line 8 in file "flash.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;  offset          2    1[BANK0 ] unsigned int 
  6144 ;;  data            2    3[BANK0 ] unsigned int 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;  address         2    5[BANK0 ] unsigned int 
  6147 ;; Return value:  Size  Location     Type
  6148 ;;                  1    wreg      void 
  6149 ;; Registers used:
  6150 ;;		wreg, status,2, status,0
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6156 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6157 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6159 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;Total ram usage:        6 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:    7
  6163 ;; This function calls:
  6164 ;;		Nothing
  6165 ;; This function is called by:
  6166 ;;		_flashUpdate
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           
  6171                           ;psect for function _flashWriteByte
  6172  0599                     _flashWriteByte:	
  6173                           
  6174                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  6175                           
  6176                           ;incstack = 0
  6177                           ; Regs used in _flashWriteByte: [wreg+status,2+status,0]
  6178  0599  138B               	bcf	11,7	;volatile
  6179                           
  6180                           ;flash.c: 15: PMCON1 = 0x00;
  6181  059A  0031               	movlb	17	; select bank17
  6182  059B  0195               	clrf	21	;volsfr
  6183                           
  6184                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  6185  059C  0020               	movlb	0	; select bank0
  6186  059D  0821               	movf	flashWriteByte@offset,w
  6187  059E  3EE0               	addlw	224
  6188  059F  00A5               	movwf	flashWriteByte@address
  6189  05A0  301F               	movlw	31
  6190  05A1  3D22               	addwfc	flashWriteByte@offset+1,w
  6191  05A2  00A6               	movwf	flashWriteByte@address+1
  6192                           
  6193                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  6194  05A3  0825               	movf	flashWriteByte@address,w
  6195  05A4  0031               	movlb	17	; select bank17
  6196  05A5  0091               	movwf	17	;volatile
  6197                           
  6198                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  6199  05A6  0020               	movlb	0	; select bank0
  6200  05A7  0826               	movf	flashWriteByte@address+1,w
  6201  05A8  0031               	movlb	17	; select bank17
  6202  05A9  0092               	movwf	18	;volatile
  6203                           
  6204                           ;flash.c: 21: PMCON1bits.FREE = 1;
  6205  05AA  1615               	bsf	21,4	;volsfr
  6206                           
  6207                           ;flash.c: 22: PMCON1bits.WREN = 1;
  6208  05AB  1515               	bsf	21,2	;volsfr
  6209                           
  6210                           ;flash.c: 24: PMCON2 = 0x55;
  6211  05AC  3055               	movlw	85
  6212  05AD  0096               	movwf	22	;volsfr
  6213                           
  6214                           ;flash.c: 25: PMCON2 = 0xAA;
  6215  05AE  30AA               	movlw	170
  6216  05AF  0096               	movwf	22	;volsfr
  6217                           
  6218                           ;flash.c: 27: PMCON1bits.WR = 1;
  6219  05B0  1495               	bsf	21,1	;volsfr
  6220                           
  6221                           ;flash.c: 29: __nop();
  6222  05B1  0000               	nop
  6223                           
  6224                           ;flash.c: 30: __nop();
  6225  05B2  0000               	nop
  6226                           
  6227                           ;flash.c: 32: PMCON1bits.WREN = 0;
  6228  05B3  0031               	movlb	17	; select bank17
  6229  05B4  1115               	bcf	21,2	;volsfr
  6230                           
  6231                           ;flash.c: 36: PMCON1 = 0x00;
  6232  05B5  0195               	clrf	21	;volsfr
  6233                           
  6234                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  6235  05B6  0020               	movlb	0	; select bank0
  6236  05B7  0825               	movf	flashWriteByte@address,w
  6237  05B8  0031               	movlb	17	; select bank17
  6238  05B9  0091               	movwf	17	;volatile
  6239                           
  6240                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  6241  05BA  0020               	movlb	0	; select bank0
  6242  05BB  0826               	movf	flashWriteByte@address+1,w
  6243  05BC  0031               	movlb	17	; select bank17
  6244  05BD  0092               	movwf	18	;volatile
  6245                           
  6246                           ;flash.c: 41: PMCON1bits.FREE = 0;
  6247  05BE  1215               	bcf	21,4	;volsfr
  6248                           
  6249                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  6250  05BF  1695               	bsf	21,5	;volsfr
  6251                           
  6252                           ;flash.c: 43: PMCON1bits.WREN = 1;
  6253  05C0  1515               	bsf	21,2	;volsfr
  6254                           
  6255                           ;flash.c: 45: PMDATL = (data >> 0);
  6256  05C1  0020               	movlb	0	; select bank0
  6257  05C2  0823               	movf	flashWriteByte@data,w
  6258  05C3  0031               	movlb	17	; select bank17
  6259  05C4  0093               	movwf	19	;volatile
  6260                           
  6261                           ;flash.c: 46: PMDATH = (data >> 8);
  6262  05C5  0020               	movlb	0	; select bank0
  6263  05C6  0824               	movf	flashWriteByte@data+1,w
  6264  05C7  0031               	movlb	17	; select bank17
  6265  05C8  0094               	movwf	20	;volatile
  6266                           
  6267                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  6268  05C9  1295               	bcf	21,5	;volsfr
  6269                           
  6270                           ;flash.c: 50: PMCON2 = 0x55;
  6271  05CA  3055               	movlw	85
  6272  05CB  0096               	movwf	22	;volsfr
  6273                           
  6274                           ;flash.c: 51: PMCON2 = 0xAA;
  6275  05CC  30AA               	movlw	170
  6276  05CD  0096               	movwf	22	;volsfr
  6277                           
  6278                           ;flash.c: 53: PMCON1bits.WR = 1;
  6279  05CE  1495               	bsf	21,1	;volsfr
  6280                           
  6281                           ;flash.c: 55: __nop();
  6282  05CF  0000               	nop
  6283                           
  6284                           ;flash.c: 56: __nop();
  6285  05D0  0000               	nop
  6286                           
  6287                           ;flash.c: 58: PMCON1bits.WREN = 0;
  6288  05D1  0031               	movlb	17	; select bank17
  6289  05D2  1115               	bcf	21,2	;volsfr
  6290                           
  6291                           ;flash.c: 61: INTCONbits.GIE = 1;
  6292  05D3  178B               	bsf	11,7	;volatile
  6293  05D4  0008               	return
  6294  05D5                     __end_of_flashWriteByte:	
  6295                           
  6296                           	psect	text24
  6297  0FC0                     __ptext24:	
  6298 ;; *************** function _flashRealod *****************
  6299 ;; Defined at:
  6300 ;;		line 90 in file "flash.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;		None
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  i               2   11[BANK0 ] unsigned int 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  1    wreg      void 
  6307 ;; Registers used:
  6308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;Total ram usage:        3 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    8
  6321 ;; This function calls:
  6322 ;;		_flashReadByte
  6323 ;; This function is called by:
  6324 ;;		_main
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           
  6329                           ;psect for function _flashRealod
  6330  0FC0                     _flashRealod:	
  6331                           
  6332                           ;flash.c: 92: for (unsigned int i = 0; i < 32; i++){
  6333                           
  6334                           ;incstack = 0
  6335                           ; Regs used in _flashRealod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6336  0FC0  0020               	movlb	0	; select bank0
  6337  0FC1  01AB               	clrf	flashRealod@i
  6338  0FC2  01AC               	clrf	flashRealod@i+1
  6339  0FC3                     L2:	
  6340  0FC3  3000               	movlw	0
  6341  0FC4  022C               	subwf	flashRealod@i+1,w
  6342  0FC5  3020               	movlw	32
  6343  0FC6  1903               	skipnz
  6344  0FC7  022B               	subwf	flashRealod@i,w
  6345  0FC8  1803               	btfsc	3,0
  6346  0FC9  0008               	return
  6347                           
  6348                           ;flash.c: 93: romHolder.array[i] = flashReadByte(i);
  6349  0FCA  082C               	movf	flashRealod@i+1,w
  6350  0FCB  00A2               	movwf	flashReadByte@offset+1
  6351  0FCC  082B               	movf	flashRealod@i,w
  6352  0FCD  00A1               	movwf	flashReadByte@offset
  6353  0FCE  3186  267D  318F   	fcall	_flashReadByte
  6354  0FD1  0020               	movlb	0	; select bank0
  6355  0FD2  0821               	movf	?_flashReadByte,w
  6356  0FD3  00AA               	movwf	??_flashRealod
  6357  0FD4  082B               	movf	flashRealod@i,w
  6358  0FD5  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  6359  0FD6  0086               	movwf	6
  6360  0FD7  3001               	movlw	1	; select bank2/3
  6361  0FD8  0087               	movwf	7
  6362  0FD9  082A               	movf	??_flashRealod,w
  6363  0FDA  0081               	movwf	1
  6364  0FDB  3001               	movlw	1
  6365  0FDC  07AB               	addwf	flashRealod@i,f
  6366  0FDD  3000               	movlw	0
  6367  0FDE  3DAC               	addwfc	flashRealod@i+1,f
  6368  0FDF  2FC3               	goto	L2
  6369  0FE0                     __end_of_flashRealod:	
  6370                           
  6371                           	psect	text25
  6372  067D                     __ptext25:	
  6373 ;; *************** function _flashReadByte *****************
  6374 ;; Defined at:
  6375 ;;		line 64 in file "flash.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;  offset          2    1[BANK0 ] unsigned int 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  address         2    8[BANK0 ] unsigned int 
  6380 ;;  result          2    6[BANK0 ] unsigned int 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;                  2    1[BANK0 ] unsigned int 
  6383 ;; Registers used:
  6384 ;;		wreg, status,2, status,0
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6390 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;Total ram usage:        9 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    7
  6397 ;; This function calls:
  6398 ;;		Nothing
  6399 ;; This function is called by:
  6400 ;;		_flashRealod
  6401 ;; This function uses a non-reentrant model
  6402 ;;
  6403                           
  6404                           
  6405                           ;psect for function _flashReadByte
  6406  067D                     _flashReadByte:	
  6407                           
  6408                           ;flash.c: 66: unsigned int address;;flash.c: 68: INTCONbits.GIE = 0;
  6409                           
  6410                           ;incstack = 0
  6411                           ; Regs used in _flashReadByte: [wreg+status,2+status,0]
  6412  067D  138B               	bcf	11,7	;volatile
  6413                           
  6414                           ;flash.c: 70: PMCON1 = 0x00;
  6415  067E  0031               	movlb	17	; select bank17
  6416  067F  0195               	clrf	21	;volsfr
  6417                           
  6418                           ;flash.c: 72: address = (0x2000U - 32) + offset;
  6419  0680  0020               	movlb	0	; select bank0
  6420  0681  0821               	movf	flashReadByte@offset,w
  6421  0682  3EE0               	addlw	224
  6422  0683  00A8               	movwf	flashReadByte@address
  6423  0684  301F               	movlw	31
  6424  0685  3D22               	addwfc	flashReadByte@offset+1,w
  6425  0686  00A9               	movwf	flashReadByte@address+1
  6426                           
  6427                           ;flash.c: 73: PMADRL = (char) (address >> 0);
  6428  0687  0828               	movf	flashReadByte@address,w
  6429  0688  0031               	movlb	17	; select bank17
  6430  0689  0091               	movwf	17	;volatile
  6431                           
  6432                           ;flash.c: 74: PMADRH = (char) (address >> 8);
  6433  068A  0020               	movlb	0	; select bank0
  6434  068B  0829               	movf	flashReadByte@address+1,w
  6435  068C  0031               	movlb	17	; select bank17
  6436  068D  0092               	movwf	18	;volatile
  6437                           
  6438                           ;flash.c: 76: PMCON1bits.RD = 1;
  6439  068E  1415               	bsf	21,0	;volsfr
  6440                           
  6441                           ;flash.c: 78: __nop();
  6442  068F  0000               	nop
  6443                           
  6444                           ;flash.c: 79: __nop();
  6445  0690  0000               	nop
  6446                           
  6447                           ;flash.c: 81: unsigned int result = 0;
  6448  0691  0020               	movlb	0	; select bank0
  6449  0692  01A6               	clrf	flashReadByte@result
  6450  0693  01A7               	clrf	flashReadByte@result+1
  6451                           
  6452                           ;flash.c: 82: result = PMDATL;
  6453  0694  0031               	movlb	17	; select bank17
  6454  0695  0813               	movf	19,w	;volatile
  6455  0696  0020               	movlb	0	; select bank0
  6456  0697  00A3               	movwf	??_flashReadByte
  6457  0698  01A4               	clrf	??_flashReadByte+1
  6458  0699  0823               	movf	??_flashReadByte,w
  6459  069A  00A6               	movwf	flashReadByte@result
  6460  069B  0824               	movf	??_flashReadByte+1,w
  6461  069C  00A7               	movwf	flashReadByte@result+1
  6462                           
  6463                           ;flash.c: 83: result|= ( (unsigned) (PMDATH) << 8);
  6464  069D  0031               	movlb	17	; select bank17
  6465  069E  0814               	movf	20,w	;volatile
  6466  069F  0020               	movlb	0	; select bank0
  6467  06A0  00A3               	movwf	??_flashReadByte
  6468  06A1  01A4               	clrf	??_flashReadByte+1
  6469  06A2  0823               	movf	??_flashReadByte,w
  6470  06A3  00A4               	movwf	??_flashReadByte+1
  6471  06A4  01A3               	clrf	??_flashReadByte
  6472  06A5  0823               	movf	??_flashReadByte,w
  6473  06A6  04A6               	iorwf	flashReadByte@result,f
  6474  06A7  0824               	movf	??_flashReadByte+1,w
  6475  06A8  04A7               	iorwf	flashReadByte@result+1,f
  6476                           
  6477                           ;flash.c: 85: INTCONbits.GIE = 1;
  6478  06A9  178B               	bsf	11,7	;volatile
  6479                           
  6480                           ;flash.c: 87: return result;
  6481  06AA  0827               	movf	flashReadByte@result+1,w
  6482  06AB  00A2               	movwf	?_flashReadByte+1
  6483  06AC  0826               	movf	flashReadByte@result,w
  6484  06AD  00A1               	movwf	?_flashReadByte
  6485  06AE  0008               	return
  6486  06AF                     __end_of_flashReadByte:	
  6487                           
  6488                           	psect	intentry
  6489  0004                     __pintentry:	
  6490 ;; *************** function _ISR *****************
  6491 ;; Defined at:
  6492 ;;		line 15 in file "main.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;		None
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  1    wreg      void 
  6499 ;; Registers used:
  6500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6510 ;;Total ram usage:        0 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    6
  6513 ;; This function calls:
  6514 ;;		_nrf24l01ISR
  6515 ;; This function is called by:
  6516 ;;		Interrupt level 1
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520  0004                     _ISR:	
  6521                           
  6522                           ;incstack = 0
  6523  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6524                           
  6525                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6526  0005  3180               	pagesel	$
  6527                           
  6528                           ;main.c: 17: if (PIR0bits.INTF){
  6529  0006  0020               	movlb	0	; select bank0
  6530  0007  1C10               	btfss	16,0	;volatile
  6531  0008  280D               	goto	i1l209
  6532                           
  6533                           ;main.c: 18: nrf24l01ISR();
  6534  0009  3186  2647         	fcall	_nrf24l01ISR
  6535                           
  6536                           ;main.c: 19: PIR0bits.INTF = 0;
  6537  000B  0020               	movlb	0	; select bank0
  6538  000C  1010               	bcf	16,0	;volatile
  6539  000D                     i1l209:	
  6540  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6541  000E  0009               	retfie
  6542  000F                     __end_of_ISR:	
  6543                           
  6544                           	psect	text27
  6545  0647                     __ptext27:	
  6546 ;; *************** function _nrf24l01ISR *****************
  6547 ;; Defined at:
  6548 ;;		line 246 in file "nrf24l01.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;		None
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;  status          1    0[BANK0 ] struct .
  6553 ;; Return value:  Size  Location     Type
  6554 ;;                  1    wreg      void 
  6555 ;; Registers used:
  6556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6557 ;; Tracked objects:
  6558 ;;		On entry : 0/0
  6559 ;;		On exit  : 0/0
  6560 ;;		Unchanged: 0/0
  6561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6563 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;Total ram usage:        2 bytes
  6567 ;; Hardware stack levels used:    1
  6568 ;; Hardware stack levels required when called:    5
  6569 ;; This function calls:
  6570 ;;		_exception
  6571 ;;		_nrf24l01CheckACK
  6572 ;;		_nrf24l01ReceivePacket
  6573 ;;		i1_nrf24l01Send
  6574 ;;		i1_nrf24l01SetRXMode
  6575 ;; This function is called by:
  6576 ;;		_ISR
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           
  6581                           ;psect for function _nrf24l01ISR
  6582  0647                     _nrf24l01ISR:	
  6583                           
  6584                           ;nrf24l01.c: 248: n_STATUS_t status;;nrf24l01.c: 249: status.byte = nrf24l01Send(0b00000
      +                          000 | 0x07, 0);
  6585                           
  6586                           ;incstack = 0
  6587                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6588  0647  01F1               	clrf	i1nrf24l01Send@data
  6589  0648  3007               	movlw	7
  6590  0649  318F  274E  3186   	fcall	i1_nrf24l01Send
  6591  064C  00FD               	movwf	??_nrf24l01ISR
  6592  064D  087D               	movf	??_nrf24l01ISR,w
  6593  064E  0020               	movlb	0	; select bank0
  6594  064F  00A0               	movwf	nrf24l01ISR@status
  6595                           
  6596                           ;nrf24l01.c: 254: };nrf24l01.c: 257: if (status.byte == 0xFF){
  6597  0650  0A20               	incf	nrf24l01ISR@status,w
  6598  0651  1D03               	btfss	3,2
  6599  0652  2E57               	goto	i1l2879
  6600                           
  6601                           ;nrf24l01.c: 258: exception(2);
  6602  0653  3002               	movlw	2
  6603  0654  318E  26EA  3186   	fcall	_exception
  6604  0657                     i1l2879:	
  6605                           
  6606                           ;nrf24l01.c: 259: };nrf24l01.c: 261: if (status.TX_DS){
  6607  0657  0020               	movlb	0	; select bank0
  6608  0658  1EA0               	btfss	nrf24l01ISR@status,5
  6609  0659  2E66               	goto	i1l2887
  6610                           
  6611                           ;nrf24l01.c: 264: nrf24l01.TXBusy = 0;
  6612  065A  105B               	bcf	_nrf24l01,0	;volatile
  6613                           
  6614                           ;nrf24l01.c: 267: if (!nrf24l01.RXMode){
  6615  065B  195B               	btfsc	_nrf24l01,2	;volatile
  6616  065C  2E66               	goto	i1l2887
  6617                           
  6618                           ;nrf24l01.c: 268: if (TXPacket->packetData.ACKRequest){
  6619  065D  0859               	movf	_TXPacket,w
  6620  065E  0086               	movwf	6
  6621  065F  0187               	clrf	7
  6622  0660  1D01               	btfss	1,2
  6623  0661  2E66               	goto	i1l2887
  6624                           
  6625                           ;nrf24l01.c: 271: nrf24l01SetRXMode(1);
  6626  0662  3001               	movlw	1
  6627  0663  3186  2610  3186   	fcall	i1_nrf24l01SetRXMode
  6628  0666                     i1l2887:	
  6629                           
  6630                           ;nrf24l01.c: 272: };nrf24l01.c: 273: };nrf24l01.c: 274: };nrf24l01.c: 277: if (status.RX
      +                          _DR){
  6631  0666  0020               	movlb	0	; select bank0
  6632  0667  1F20               	btfss	nrf24l01ISR@status,6
  6633  0668  2E74               	goto	i1l2897
  6634                           
  6635                           ;nrf24l01.c: 280: if (!nrf24l01.RXPending){
  6636  0669  18DB               	btfsc	_nrf24l01,1	;volatile
  6637  066A  2E73               	goto	i1l352
  6638                           
  6639                           ;nrf24l01.c: 283: nrf24l01.RXPending = 1;
  6640  066B  14DB               	bsf	_nrf24l01,1	;volatile
  6641                           
  6642                           ;nrf24l01.c: 284: nrf24l01ReceivePacket();
  6643  066C  3184  2417  3186   	fcall	_nrf24l01ReceivePacket
  6644                           
  6645                           ;nrf24l01.c: 285: nrf24l01CheckACK();
  6646  066F  318F  27A0  3186   	fcall	_nrf24l01CheckACK
  6647                           
  6648                           ;nrf24l01.c: 286: }
  6649  0672  2E74               	goto	i1l2897
  6650  0673                     i1l352:	
  6651                           
  6652                           ;nrf24l01.c: 289: else{;nrf24l01.c: 292: status.RX_DR = 0;
  6653  0673  1320               	bcf	nrf24l01ISR@status,6
  6654  0674                     i1l2897:	
  6655                           
  6656                           ;nrf24l01.c: 293: };nrf24l01.c: 295: };nrf24l01.c: 298: nrf24l01Send(0b00100000 | 0x07, 
      +                          status.byte);
  6657  0674  0020               	movlb	0	; select bank0
  6658  0675  0820               	movf	nrf24l01ISR@status,w
  6659  0676  00FD               	movwf	??_nrf24l01ISR
  6660  0677  087D               	movf	??_nrf24l01ISR,w
  6661  0678  00F1               	movwf	i1nrf24l01Send@data
  6662  0679  3027               	movlw	39
  6663  067A  318F  274E         	fcall	i1_nrf24l01Send
  6664  067C  0008               	return
  6665  067D                     __end_of_nrf24l01ISR:	
  6666                           
  6667                           	psect	text28
  6668  0417                     __ptext28:	
  6669 ;; *************** function _nrf24l01ReceivePacket *****************
  6670 ;; Defined at:
  6671 ;;		line 133 in file "nrf24l01.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;		None
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  i               1   10[COMMON] unsigned char 
  6676 ;;  width           1    9[COMMON] unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  1    wreg      void 
  6679 ;; Registers used:
  6680 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;Total ram usage:        3 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    3
  6693 ;; This function calls:
  6694 ;;		_nrf24l01CEHigh
  6695 ;;		_nrf24l01CELow
  6696 ;;		_nrf24l01SPIEnd
  6697 ;;		_nrf24l01SPISend
  6698 ;;		_nrf24l01SPIStart
  6699 ;;		i1_memset
  6700 ;;		i1_nrf24l01Send
  6701 ;; This function is called by:
  6702 ;;		_nrf24l01ISR
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           
  6707                           ;psect for function _nrf24l01ReceivePacket
  6708  0417                     _nrf24l01ReceivePacket:	
  6709                           
  6710                           ;nrf24l01.c: 136: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  6711                           
  6712                           ;incstack = 0
  6713                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6714  0417  3041               	movlw	low (_RXPacket+1)
  6715  0418  00F0               	movwf	i1memset@p1
  6716  0419  3001               	movlw	high (_RXPacket+1)
  6717  041A  00F1               	movwf	i1memset@p1+1
  6718  041B  3000               	movlw	0
  6719  041C  00F2               	movwf	i1memset@c
  6720  041D  00F3               	movwf	i1memset@c+1
  6721  041E  3020               	movlw	32
  6722  041F  00F4               	movwf	i1memset@n
  6723  0420  3000               	movlw	0
  6724  0421  00F5               	movwf	i1memset@n+1
  6725  0422  318F  2702  3184   	fcall	i1_memset
  6726                           
  6727                           ;nrf24l01.c: 137: RXPacket.packetData.byte = 0x00;
  6728  0425  0022               	movlb	2	; select bank2
  6729  0426  01C0               	clrf	_RXPacket^(0+256)
  6730                           
  6731                           ;nrf24l01.c: 140: unsigned char width = nrf24l01Send(0b01100000, 0);
  6732  0427  01F1               	clrf	i1nrf24l01Send@data
  6733  0428  3060               	movlw	96
  6734  0429  318F  274E  3184   	fcall	i1_nrf24l01Send
  6735  042C  00F8               	movwf	??_nrf24l01ReceivePacket
  6736  042D  0878               	movf	??_nrf24l01ReceivePacket,w
  6737  042E  00F9               	movwf	nrf24l01ReceivePacket@width
  6738                           
  6739                           ;nrf24l01.c: 141: unsigned char i = 0;
  6740  042F  01FA               	clrf	nrf24l01ReceivePacket@i
  6741                           
  6742                           ;nrf24l01.c: 144: nrf24l01CELow();
  6743  0430  318E  26A3  3184   	fcall	_nrf24l01CELow
  6744                           
  6745                           ;nrf24l01.c: 147: nrf24l01SPIStart();
  6746  0433  318E  26C1  3184   	fcall	_nrf24l01SPIStart
  6747                           
  6748                           ;nrf24l01.c: 150: nrf24l01SPISend(0b01100001);
  6749  0436  3061               	movlw	97
  6750  0437  318E  26C9  3184   	fcall	_nrf24l01SPISend
  6751                           
  6752                           ;nrf24l01.c: 153: RXPacket.packetData.byte = nrf24l01SPISend(0);
  6753  043A  3000               	movlw	0
  6754  043B  318E  26C9  3184   	fcall	_nrf24l01SPISend
  6755  043E  00F8               	movwf	??_nrf24l01ReceivePacket
  6756  043F  0878               	movf	??_nrf24l01ReceivePacket,w
  6757  0440  0022               	movlb	2	; select bank2
  6758  0441  00C0               	movwf	_RXPacket^(0+256)
  6759                           
  6760                           ;nrf24l01.c: 154: width--;
  6761  0442  3001               	movlw	1
  6762  0443  02F9               	subwf	nrf24l01ReceivePacket@width,f
  6763                           
  6764                           ;nrf24l01.c: 156: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
  6765  0444  01FA               	clrf	nrf24l01ReceivePacket@i
  6766  0445  2C56               	goto	i1l2863
  6767  0446                     i1l2859:	
  6768                           
  6769                           ;nrf24l01.c: 158: RXPacket.Message[i] = nrf24l01SPISend(0);
  6770  0446  3000               	movlw	0
  6771  0447  318E  26C9  3184   	fcall	_nrf24l01SPISend
  6772  044A  00F8               	movwf	??_nrf24l01ReceivePacket
  6773  044B  087A               	movf	nrf24l01ReceivePacket@i,w
  6774  044C  3E41               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  6775  044D  0086               	movwf	6
  6776  044E  3001               	movlw	1	; select bank2/3
  6777  044F  0087               	movwf	7
  6778  0450  0878               	movf	??_nrf24l01ReceivePacket,w
  6779  0451  0081               	movwf	1
  6780  0452  3001               	movlw	1
  6781  0453  00F8               	movwf	??_nrf24l01ReceivePacket
  6782  0454  0878               	movf	??_nrf24l01ReceivePacket,w
  6783  0455  07FA               	addwf	nrf24l01ReceivePacket@i,f
  6784  0456                     i1l2863:	
  6785  0456  0879               	movf	nrf24l01ReceivePacket@width,w
  6786  0457  027A               	subwf	nrf24l01ReceivePacket@i,w
  6787  0458  1803               	skipnc
  6788  0459  2C5E               	goto	i1l2867
  6789  045A  3020               	movlw	32
  6790  045B  027A               	subwf	nrf24l01ReceivePacket@i,w
  6791  045C  1C03               	skipc
  6792  045D  2C46               	goto	i1l2859
  6793  045E                     i1l2867:	
  6794                           
  6795                           ;nrf24l01.c: 159: };nrf24l01.c: 162: nrf24l01SPIEnd();
  6796  045E  318E  26B2  3184   	fcall	_nrf24l01SPIEnd
  6797                           
  6798                           ;nrf24l01.c: 164: RXPacket.packetData.RPD = nrf24l01Send(0b00000000 | 0x09, 0);
  6799  0461  01F1               	clrf	i1nrf24l01Send@data
  6800  0462  3009               	movlw	9
  6801  0463  318F  274E  3184   	fcall	i1_nrf24l01Send
  6802  0466  00F8               	movwf	??_nrf24l01ReceivePacket
  6803  0467  0022               	movlb	2	; select bank2
  6804  0468  0840               	movf	_RXPacket^(0+256),w
  6805  0469  0678               	xorwf	??_nrf24l01ReceivePacket,w
  6806  046A  39FE               	andlw	-2
  6807  046B  0678               	xorwf	??_nrf24l01ReceivePacket,w
  6808  046C  00C0               	movwf	_RXPacket^(0+256)
  6809                           
  6810                           ;nrf24l01.c: 167: nrf24l01CEHigh();
  6811  046D  318E  26A0         	fcall	_nrf24l01CEHigh
  6812  046F  0008               	return
  6813  0470                     __end_of_nrf24l01ReceivePacket:	
  6814                           
  6815                           	psect	text29
  6816  0F02                     __ptext29:	
  6817 ;; *************** function i1_memset *****************
  6818 ;; Defined at:
  6819 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  p1              2    0[COMMON] PTR void 
  6822 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6823 ;;  c               2    2[COMMON] int 
  6824 ;;  n               2    4[COMMON] unsigned int 
  6825 ;; Auto vars:     Size  Location     Type
  6826 ;;  memset          2    6[COMMON] PTR unsigned char 
  6827 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      PTR void 
  6830 ;; Registers used:
  6831 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6837 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6838 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6840 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;Total ram usage:        8 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; This function calls:
  6844 ;;		Nothing
  6845 ;; This function is called by:
  6846 ;;		_nrf24l01ReceivePacket
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           
  6851                           ;psect for function i1_memset
  6852  0F02                     i1_memset:	
  6853                           
  6854                           ;incstack = 0
  6855                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6856  0F02  0871               	movf	i1memset@p1+1,w
  6857  0F03  00F7               	movwf	i1memset@p+1
  6858  0F04  0870               	movf	i1memset@p1,w
  6859  0F05  00F6               	movwf	i1memset@p
  6860  0F06                     i1l2827:	
  6861  0F06  3001               	movlw	1
  6862  0F07  02F4               	subwf	i1memset@n,f
  6863  0F08  3000               	movlw	0
  6864  0F09  3BF5               	subwfb	i1memset@n+1,f
  6865  0F0A  0A74               	incf	i1memset@n,w
  6866  0F0B  1903               	btfsc	3,2
  6867  0F0C  0A75               	incf	i1memset@n+1,w
  6868  0F0D  1903               	btfsc	3,2
  6869  0F0E  0008               	return
  6870  0F0F  0876               	movf	i1memset@p,w
  6871  0F10  0086               	movwf	6
  6872  0F11  0877               	movf	i1memset@p+1,w
  6873  0F12  0087               	movwf	7
  6874  0F13  0872               	movf	i1memset@c,w
  6875  0F14  0081               	movwf	1
  6876  0F15  3001               	movlw	1
  6877  0F16  07F6               	addwf	i1memset@p,f
  6878  0F17  3000               	movlw	0
  6879  0F18  3DF7               	addwfc	i1memset@p+1,f
  6880  0F19  2F06               	goto	i1l2827
  6881  0F1A                     __end_ofi1_memset:	
  6882                           ;	Return value of i1_memset is never used
  6883                           
  6884                           
  6885                           	psect	text30
  6886  0FA0                     __ptext30:	
  6887 ;; *************** function _nrf24l01CheckACK *****************
  6888 ;; Defined at:
  6889 ;;		line 96 in file "nrf24l01.c"
  6890 ;; Parameters:    Size  Location     Type
  6891 ;;		None
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;		None
  6894 ;; Return value:  Size  Location     Type
  6895 ;;                  1    wreg      void 
  6896 ;; Registers used:
  6897 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6905 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;Total ram usage:        1 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    4
  6910 ;; This function calls:
  6911 ;;		_strcmp
  6912 ;;		i1_nrf24l01SetRXMode
  6913 ;; This function is called by:
  6914 ;;		_nrf24l01ISR
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918                           
  6919                           ;psect for function _nrf24l01CheckACK
  6920  0FA0                     _nrf24l01CheckACK:	
  6921                           
  6922                           ;nrf24l01.c: 100: if (!RXPacket.packetData.IsACK){
  6923                           
  6924                           ;incstack = 0
  6925                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6926  0FA0  0022               	movlb	2	; select bank2
  6927  0FA1  1DC0               	btfss	_RXPacket^(0+256),3
  6928  0FA2  0008               	return
  6929                           
  6930                           ;nrf24l01.c: 102: };nrf24l01.c: 105: nrf24l01.RXPending = 0;
  6931                           
  6932                           ;nrf24l01.c: 101: return;
  6933  0FA3  0020               	movlb	0	; select bank0
  6934  0FA4  10DB               	bcf	_nrf24l01,1	;volatile
  6935                           
  6936                           ;nrf24l01.c: 108: if (!TXPacket->packetData.ACKRequest){
  6937  0FA5  0859               	movf	_TXPacket,w
  6938  0FA6  0086               	movwf	6
  6939  0FA7  0187               	clrf	7
  6940  0FA8  1D01               	btfss	1,2
  6941  0FA9  0008               	return
  6942                           
  6943                           ;nrf24l01.c: 110: };nrf24l01.c: 113: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
  6944                           
  6945                           ;nrf24l01.c: 109: return;
  6946  0FAA  3041               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  6947  0FAB  00F7               	movwf	??_nrf24l01CheckACK
  6948  0FAC  0877               	movf	??_nrf24l01CheckACK,w
  6949  0FAD  00F0               	movwf	strcmp@s2
  6950  0FAE  0859               	movf	_TXPacket,w
  6951  0FAF  3E01               	addlw	1
  6952  0FB0  3187  275F  318F   	fcall	_strcmp
  6953  0FB3  0870               	movf	?_strcmp,w
  6954  0FB4  0471               	iorwf	?_strcmp+1,w
  6955  0FB5  1D03               	btfss	3,2
  6956  0FB6  0008               	return
  6957                           
  6958                           ;nrf24l01.c: 115: };nrf24l01.c: 122: TXPacket->packetData.ACKRequest = 0;
  6959                           
  6960                           ;nrf24l01.c: 114: return;
  6961  0FB7  0020               	movlb	0	; select bank0
  6962  0FB8  0859               	movf	_TXPacket,w
  6963  0FB9  0086               	movwf	6
  6964  0FBA  0187               	clrf	7
  6965  0FBB  1101               	bcf	1,2
  6966                           
  6967                           ;nrf24l01.c: 125: nrf24l01SetRXMode(0);
  6968  0FBC  3000               	movlw	0
  6969  0FBD  3186  2610         	fcall	i1_nrf24l01SetRXMode
  6970  0FBF  0008               	return
  6971  0FC0                     __end_of_nrf24l01CheckACK:	
  6972                           
  6973                           	psect	text31
  6974  0610                     __ptext31:	
  6975 ;; *************** function i1_nrf24l01SetRXMode *****************
  6976 ;; Defined at:
  6977 ;;		line 54 in file "nrf24l01.c"
  6978 ;; Parameters:    Size  Location     Type
  6979 ;;  rxMode          1    wreg     unsigned char 
  6980 ;; Auto vars:     Size  Location     Type
  6981 ;;  rxMode          1    6[COMMON] unsigned char 
  6982 ;;  nrf24l01SetR    1    5[COMMON] struct .
  6983 ;; Return value:  Size  Location     Type
  6984 ;;                  1    wreg      void 
  6985 ;; Registers used:
  6986 ;;		wreg, status,2, status,0, pclath, cstack
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6996 ;;Total ram usage:        3 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; Hardware stack levels required when called:    3
  6999 ;; This function calls:
  7000 ;;		_nrf24l01CEHigh
  7001 ;;		_nrf24l01CELow
  7002 ;;		i1_nrf24l01Send
  7003 ;; This function is called by:
  7004 ;;		_nrf24l01CheckACK
  7005 ;;		_nrf24l01ISR
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           
  7010                           ;psect for function i1_nrf24l01SetRXMode
  7011  0610                     i1_nrf24l01SetRXMode:	
  7012                           
  7013                           ;incstack = 0
  7014                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  7015                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  7016  0610  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
  7017                           
  7018                           ;nrf24l01.c: 56: n_CONFIG_t config;;nrf24l01.c: 59: config.byte = nrf24l01Send(0b0000000
      +                          0 | 0x00, 0);
  7019  0611  01F1               	clrf	i1nrf24l01Send@data
  7020  0612  3000               	movlw	0
  7021  0613  318F  274E  3186   	fcall	i1_nrf24l01Send
  7022  0616  00F4               	movwf	??i1_nrf24l01SetRXMode
  7023  0617  0874               	movf	??i1_nrf24l01SetRXMode,w
  7024  0618  00F5               	movwf	i1nrf24l01SetRXMode@config
  7025                           
  7026                           ;nrf24l01.c: 62: if (config.PRIM_RX != rxMode){
  7027  0619  0875               	movf	i1nrf24l01SetRXMode@config,w
  7028  061A  3901               	andlw	1
  7029  061B  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
  7030  061C  1903               	skipnz
  7031  061D  2E40               	goto	i1l2199
  7032                           
  7033                           ;nrf24l01.c: 65: nrf24l01CELow();
  7034  061E  318E  26A3  3186   	fcall	_nrf24l01CELow
  7035                           
  7036                           ;nrf24l01.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7037  0621  30A0               	movlw	160
  7038  0622                     u172_27:	
  7039  0622  3200               	nop2
  7040  0623  0B89               	decfsz	9,f
  7041  0624  2E22               	goto	u172_27
  7042                           
  7043                           ;nrf24l01.c: 69: config.PRIM_RX = rxMode;
  7044  0625  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7045  0626  3901               	andlw	1
  7046  0627  1075               	bcf	i1nrf24l01SetRXMode@config,0
  7047  0628  1D03               	skipz
  7048  0629  1475               	bsf	i1nrf24l01SetRXMode@config,0
  7049                           
  7050                           ;nrf24l01.c: 70: nrf24l01Send(0b00100000 | 0x00, config.byte);
  7051  062A  0875               	movf	i1nrf24l01SetRXMode@config,w
  7052  062B  00F4               	movwf	??i1_nrf24l01SetRXMode
  7053  062C  0874               	movf	??i1_nrf24l01SetRXMode,w
  7054  062D  00F1               	movwf	i1nrf24l01Send@data
  7055  062E  3020               	movlw	32
  7056  062F  318F  274E  3186   	fcall	i1_nrf24l01Send
  7057                           
  7058                           ;nrf24l01.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7059  0632  30A0               	movlw	160
  7060  0633                     u173_27:	
  7061  0633  3200               	nop2
  7062  0634  0B89               	decfsz	9,f
  7063  0635  2E33               	goto	u173_27
  7064                           
  7065                           ;nrf24l01.c: 76: if (rxMode){
  7066  0636  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7067  0637  1903               	btfsc	3,2
  7068  0638  2E40               	goto	i1l2199
  7069                           
  7070                           ;nrf24l01.c: 77: nrf24l01CEHigh();
  7071  0639  318E  26A0  3186   	fcall	_nrf24l01CEHigh
  7072                           
  7073                           ;nrf24l01.c: 78: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7074  063C  30A0               	movlw	160
  7075  063D                     u174_27:	
  7076  063D  3200               	nop2
  7077  063E  0B89               	decfsz	9,f
  7078  063F  2E3D               	goto	u174_27
  7079  0640                     i1l2199:	
  7080                           
  7081                           ;nrf24l01.c: 79: };nrf24l01.c: 80: };nrf24l01.c: 83: nrf24l01.RXMode = rxMode;
  7082  0640  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
  7083  0641  3901               	andlw	1
  7084  0642  0020               	movlb	0	; select bank0
  7085  0643  115B               	bcf	_nrf24l01,2	;volatile
  7086  0644  1D03               	skipz
  7087  0645  155B               	bsf	_nrf24l01,2	;volatile
  7088  0646  0008               	return
  7089  0647                     __end_ofi1_nrf24l01SetRXMode:	
  7090                           
  7091                           	psect	text32
  7092  0F4E                     __ptext32:	
  7093 ;; *************** function i1_nrf24l01Send *****************
  7094 ;; Defined at:
  7095 ;;		line 9 in file "nrf24l01.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;  command         1    wreg     unsigned char 
  7098 ;;  data            1    1[COMMON] unsigned char 
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;  command         1    3[COMMON] unsigned char 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  1    wreg      unsigned char 
  7103 ;; Registers used:
  7104 ;;		wreg, status,2, status,0, pclath, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7110 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;Total ram usage:        3 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    2
  7117 ;; This function calls:
  7118 ;;		_enableInterrupts
  7119 ;;		_nrf24l01SPIEnd
  7120 ;;		_nrf24l01SPISend
  7121 ;;		_nrf24l01SPIStart
  7122 ;; This function is called by:
  7123 ;;		_nrf24l01ReceivePacket
  7124 ;;		_nrf24l01ISR
  7125 ;;		i1_nrf24l01SetRXMode
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           
  7130                           ;psect for function i1_nrf24l01Send
  7131  0F4E                     i1_nrf24l01Send:	
  7132                           
  7133                           ;incstack = 0
  7134                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  7135                           ;i1nrf24l01Send@command stored from wreg
  7136  0F4E  00F3               	movwf	i1nrf24l01Send@command
  7137                           
  7138                           ;nrf24l01.c: 12: enableInterrupts(0);
  7139  0F4F  3000               	movlw	0
  7140  0F50  318E  26B9  318F   	fcall	_enableInterrupts
  7141                           
  7142                           ;nrf24l01.c: 15: nrf24l01SPIStart();
  7143  0F53  318E  26C1  318F   	fcall	_nrf24l01SPIStart
  7144                           
  7145                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
  7146  0F56  0873               	movf	i1nrf24l01Send@command,w
  7147  0F57  318E  26C9  318F   	fcall	_nrf24l01SPISend
  7148                           
  7149                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
  7150  0F5A  0871               	movf	i1nrf24l01Send@data,w
  7151  0F5B  318E  26C9  318F   	fcall	_nrf24l01SPISend
  7152  0F5E  00F2               	movwf	??i1_nrf24l01Send
  7153  0F5F  0872               	movf	??i1_nrf24l01Send,w
  7154  0F60  00F1               	movwf	i1nrf24l01Send@data
  7155                           
  7156                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
  7157  0F61  318E  26B2  318F   	fcall	_nrf24l01SPIEnd
  7158                           
  7159                           ;nrf24l01.c: 27: enableInterrupts(1);
  7160  0F64  3001               	movlw	1
  7161  0F65  318E  26B9         	fcall	_enableInterrupts
  7162                           
  7163                           ;nrf24l01.c: 29: return data;
  7164  0F67  0871               	movf	i1nrf24l01Send@data,w
  7165  0F68  0008               	return
  7166  0F69                     __end_ofi1_nrf24l01Send:	
  7167                           
  7168                           	psect	text33
  7169  0EC1                     __ptext33:	
  7170 ;; *************** function _nrf24l01SPIStart *****************
  7171 ;; Defined at:
  7172 ;;		line 65 in file "interface.c"
  7173 ;; Parameters:    Size  Location     Type
  7174 ;;		None
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;		None
  7177 ;; Return value:  Size  Location     Type
  7178 ;;                  1    wreg      void 
  7179 ;; Registers used:
  7180 ;;		wreg, status,2, status,0, pclath, cstack
  7181 ;; Tracked objects:
  7182 ;;		On entry : 0/0
  7183 ;;		On exit  : 0/0
  7184 ;;		Unchanged: 0/0
  7185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7190 ;;Total ram usage:        0 bytes
  7191 ;; Hardware stack levels used:    1
  7192 ;; Hardware stack levels required when called:    8
  7193 ;; This function calls:
  7194 ;;		_nrf24l01CSLow
  7195 ;; This function is called by:
  7196 ;;		_nrf24l01Send
  7197 ;;		_nrf24l01ReceivePacket
  7198 ;;		_nrf24l01SendPacket
  7199 ;;		i1_nrf24l01Send
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203                           
  7204                           ;psect for function _nrf24l01SPIStart
  7205  0EC1                     _nrf24l01SPIStart:	
  7206                           
  7207                           ;interface.c: 66: nrf24l01CSLow();
  7208                           
  7209                           ;incstack = 0
  7210 ;; hardware stack exceeded
  7211                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
  7212  0EC1  318E  26A9  318E   	fcall	_nrf24l01CSLow
  7213                           
  7214                           ;interface.c: 67: _delay((unsigned long)((10)*(16000000/4000000.0)));
  7215  0EC4  300D               	movlw	13
  7216  0EC5                     u175_27:	
  7217  0EC5  0B89               	decfsz	9,f
  7218  0EC6  2EC5               	goto	u175_27
  7219  0EC7  0000               	nop
  7220  0EC8  0008               	return
  7221  0EC9                     __end_of_nrf24l01SPIStart:	
  7222                           
  7223                           	psect	text34
  7224  0EA9                     __ptext34:	
  7225 ;; *************** function _nrf24l01CSLow *****************
  7226 ;; Defined at:
  7227 ;;		line 18 in file "interface.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;		None
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;		None
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      void 
  7234 ;; Registers used:
  7235 ;;		None
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;Total ram usage:        0 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    7
  7248 ;; This function calls:
  7249 ;;		Nothing
  7250 ;; This function is called by:
  7251 ;;		_nrf24l01SPIStart
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           
  7256                           ;psect for function _nrf24l01CSLow
  7257  0EA9                     _nrf24l01CSLow:	
  7258                           
  7259                           ;interface.c: 19: PORTAbits.RA1 = 0;
  7260                           
  7261                           ;incstack = 0
  7262 ;; hardware stack exceeded
  7263                           ; Regs used in _nrf24l01CSLow: []
  7264  0EA9  0020               	movlb	0	; select bank0
  7265  0EAA  108C               	bcf	12,1	;volatile
  7266  0EAB  0008               	return
  7267  0EAC                     __end_of_nrf24l01CSLow:	
  7268                           
  7269                           	psect	text35
  7270  0EC9                     __ptext35:	
  7271 ;; *************** function _nrf24l01SPISend *****************
  7272 ;; Defined at:
  7273 ;;		line 52 in file "interface.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  data            1    wreg     unsigned char 
  7276 ;; Auto vars:     Size  Location     Type
  7277 ;;  data            1    0[COMMON] unsigned char 
  7278 ;; Return value:  Size  Location     Type
  7279 ;;                  1    wreg      unsigned char 
  7280 ;; Registers used:
  7281 ;;		wreg
  7282 ;; Tracked objects:
  7283 ;;		On entry : 0/0
  7284 ;;		On exit  : 0/0
  7285 ;;		Unchanged: 0/0
  7286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;Total ram usage:        0 bytes
  7292 ;; Hardware stack levels used:    1
  7293 ;; Hardware stack levels required when called:    7
  7294 ;; This function calls:
  7295 ;;		Nothing
  7296 ;; This function is called by:
  7297 ;;		_nrf24l01Send
  7298 ;;		_nrf24l01ReceivePacket
  7299 ;;		_nrf24l01SendPacket
  7300 ;;		i1_nrf24l01Send
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           
  7305                           ;psect for function _nrf24l01SPISend
  7306  0EC9                     _nrf24l01SPISend:	
  7307                           
  7308                           ;incstack = 0
  7309 ;; hardware stack exceeded
  7310                           ; Regs used in _nrf24l01SPISend: [wreg]
  7311                           ;nrf24l01SPISend@data stored from wreg
  7312  0EC9  00F0               	movwf	nrf24l01SPISend@data
  7313                           
  7314                           ;interface.c: 53: SSP1BUF = data;
  7315  0ECA  0870               	movf	nrf24l01SPISend@data,w
  7316  0ECB  0024               	movlb	4	; select bank4
  7317  0ECC  0091               	movwf	17	;volatile
  7318                           
  7319                           ;interface.c: 55: PORTCbits.RC4 = 1;
  7320  0ECD  0020               	movlb	0	; select bank0
  7321  0ECE  160E               	bsf	14,4	;volatile
  7322  0ECF                     i1l94:	
  7323                           ;interface.c: 57: while (!SSP1STATbits.BF){
  7324                           
  7325  0ECF  0024               	movlb	4	; select bank4
  7326  0ED0  1814               	btfsc	20,0	;volatile
  7327  0ED1  2ED4               	goto	i1l1883
  7328                           
  7329                           ;interface.c: 58: __nop();
  7330  0ED2  0000               	nop
  7331  0ED3  2ECF               	goto	i1l94
  7332  0ED4                     i1l1883:	
  7333                           
  7334                           ;interface.c: 59: };interface.c: 61: return SSP1BUF;
  7335  0ED4  0811               	movf	17,w	;volatile
  7336  0ED5  0008               	return
  7337  0ED6                     __end_of_nrf24l01SPISend:	
  7338                           
  7339                           	psect	text36
  7340  0EB2                     __ptext36:	
  7341 ;; *************** function _nrf24l01SPIEnd *****************
  7342 ;; Defined at:
  7343 ;;		line 71 in file "interface.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;		None
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;		None
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  1    wreg      void 
  7350 ;; Registers used:
  7351 ;;		wreg, status,2, status,0, pclath, cstack
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;Total ram usage:        0 bytes
  7362 ;; Hardware stack levels used:    1
  7363 ;; Hardware stack levels required when called:    8
  7364 ;; This function calls:
  7365 ;;		_nrf24l01CSHigh
  7366 ;; This function is called by:
  7367 ;;		_nrf24l01Send
  7368 ;;		_nrf24l01ReceivePacket
  7369 ;;		_nrf24l01SendPacket
  7370 ;;		i1_nrf24l01Send
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           
  7375                           ;psect for function _nrf24l01SPIEnd
  7376  0EB2                     _nrf24l01SPIEnd:	
  7377                           
  7378                           ;interface.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
  7379                           
  7380                           ;incstack = 0
  7381 ;; hardware stack exceeded
  7382                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
  7383  0EB2  300D               	movlw	13
  7384  0EB3                     u176_27:	
  7385  0EB3  0B89               	decfsz	9,f
  7386  0EB4  2EB3               	goto	u176_27
  7387  0EB5  0000               	nop
  7388                           
  7389                           ;interface.c: 73: nrf24l01CSHigh();
  7390  0EB6  318E  26A6         	fcall	_nrf24l01CSHigh
  7391  0EB8  0008               	return
  7392  0EB9                     __end_of_nrf24l01SPIEnd:	
  7393                           
  7394                           	psect	text37
  7395  0EA6                     __ptext37:	
  7396 ;; *************** function _nrf24l01CSHigh *****************
  7397 ;; Defined at:
  7398 ;;		line 23 in file "interface.c"
  7399 ;; Parameters:    Size  Location     Type
  7400 ;;		None
  7401 ;; Auto vars:     Size  Location     Type
  7402 ;;		None
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  1    wreg      void 
  7405 ;; Registers used:
  7406 ;;		None
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/0
  7409 ;;		On exit  : 0/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7416 ;;Total ram usage:        0 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; Hardware stack levels required when called:    7
  7419 ;; This function calls:
  7420 ;;		Nothing
  7421 ;; This function is called by:
  7422 ;;		_nrf24l01SPIEnd
  7423 ;; This function uses a non-reentrant model
  7424 ;;
  7425                           
  7426                           
  7427                           ;psect for function _nrf24l01CSHigh
  7428  0EA6                     _nrf24l01CSHigh:	
  7429                           
  7430                           ;interface.c: 24: PORTAbits.RA1 = 1;
  7431                           
  7432                           ;incstack = 0
  7433 ;; hardware stack exceeded
  7434                           ; Regs used in _nrf24l01CSHigh: []
  7435  0EA6  0020               	movlb	0	; select bank0
  7436  0EA7  148C               	bsf	12,1	;volatile
  7437  0EA8  0008               	return
  7438  0EA9                     __end_of_nrf24l01CSHigh:	
  7439                           
  7440                           	psect	text38
  7441  0EB9                     __ptext38:	
  7442 ;; *************** function _enableInterrupts *****************
  7443 ;; Defined at:
  7444 ;;		line 77 in file "interface.c"
  7445 ;; Parameters:    Size  Location     Type
  7446 ;;  enable          1    wreg     unsigned char 
  7447 ;; Auto vars:     Size  Location     Type
  7448 ;;  enable          1    0[COMMON] unsigned char 
  7449 ;; Return value:  Size  Location     Type
  7450 ;;                  1    wreg      void 
  7451 ;; Registers used:
  7452 ;;		wreg, status,0
  7453 ;; Tracked objects:
  7454 ;;		On entry : 0/0
  7455 ;;		On exit  : 0/0
  7456 ;;		Unchanged: 0/0
  7457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7462 ;;Total ram usage:        0 bytes
  7463 ;; Hardware stack levels used:    1
  7464 ;; Hardware stack levels required when called:    7
  7465 ;; This function calls:
  7466 ;;		Nothing
  7467 ;; This function is called by:
  7468 ;;		_nrf24l01Send
  7469 ;;		_nrf24l01SendPacket
  7470 ;;		i1_nrf24l01Send
  7471 ;; This function uses a non-reentrant model
  7472 ;;
  7473                           
  7474                           
  7475                           ;psect for function _enableInterrupts
  7476  0EB9                     _enableInterrupts:	
  7477                           
  7478                           ;incstack = 0
  7479 ;; hardware stack exceeded
  7480                           ; Regs used in _enableInterrupts: [wreg+status,0]
  7481                           ;enableInterrupts@enable stored from wreg
  7482  0EB9  00F0               	movwf	enableInterrupts@enable
  7483                           
  7484                           ;interface.c: 78: PIE0bits.INTE = enable;
  7485  0EBA  0C70               	rrf	enableInterrupts@enable,w
  7486  0EBB  0021               	movlb	1	; select bank1
  7487  0EBC  1C03               	skipc
  7488  0EBD  1010               	bcf	16,0	;volatile
  7489  0EBE  1803               	skipnc
  7490  0EBF  1410               	bsf	16,0	;volatile
  7491  0EC0  0008               	return
  7492  0EC1                     __end_of_enableInterrupts:	
  7493                           
  7494                           	psect	text39
  7495  0EA3                     __ptext39:	
  7496 ;; *************** function _nrf24l01CELow *****************
  7497 ;; Defined at:
  7498 ;;		line 8 in file "interface.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;		None
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;		None
  7503 ;; Return value:  Size  Location     Type
  7504 ;;                  1    wreg      void 
  7505 ;; Registers used:
  7506 ;;		None
  7507 ;; Tracked objects:
  7508 ;;		On entry : 0/0
  7509 ;;		On exit  : 0/0
  7510 ;;		Unchanged: 0/0
  7511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;Total ram usage:        0 bytes
  7517 ;; Hardware stack levels used:    1
  7518 ;; Hardware stack levels required when called:    7
  7519 ;; This function calls:
  7520 ;;		Nothing
  7521 ;; This function is called by:
  7522 ;;		_nrf24l01SetRXMode
  7523 ;;		_nrf24l01ReceivePacket
  7524 ;;		_nrf24l01SendPacket
  7525 ;;		_nrf24l01Init
  7526 ;;		i1_nrf24l01SetRXMode
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           
  7531                           ;psect for function _nrf24l01CELow
  7532  0EA3                     _nrf24l01CELow:	
  7533                           
  7534                           ;interface.c: 9: PORTAbits.RA0 = 0;
  7535                           
  7536                           ;incstack = 0
  7537 ;; hardware stack exceeded
  7538                           ; Regs used in _nrf24l01CELow: []
  7539  0EA3  0020               	movlb	0	; select bank0
  7540  0EA4  100C               	bcf	12,0	;volatile
  7541  0EA5  0008               	return
  7542  0EA6                     __end_of_nrf24l01CELow:	
  7543                           
  7544                           	psect	text40
  7545  0EA0                     __ptext40:	
  7546 ;; *************** function _nrf24l01CEHigh *****************
  7547 ;; Defined at:
  7548 ;;		line 13 in file "interface.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;		None
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;		None
  7553 ;; Return value:  Size  Location     Type
  7554 ;;                  1    wreg      void 
  7555 ;; Registers used:
  7556 ;;		None
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7566 ;;Total ram usage:        0 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; Hardware stack levels required when called:    7
  7569 ;; This function calls:
  7570 ;;		Nothing
  7571 ;; This function is called by:
  7572 ;;		_nrf24l01SetRXMode
  7573 ;;		_nrf24l01ReceivePacket
  7574 ;;		_nrf24l01SendPacket
  7575 ;;		_nrf24l01Init
  7576 ;;		i1_nrf24l01SetRXMode
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580                           
  7581                           ;psect for function _nrf24l01CEHigh
  7582  0EA0                     _nrf24l01CEHigh:	
  7583                           
  7584                           ;interface.c: 14: PORTAbits.RA0 = 1;
  7585                           
  7586                           ;incstack = 0
  7587 ;; hardware stack exceeded
  7588                           ; Regs used in _nrf24l01CEHigh: []
  7589  0EA0  0020               	movlb	0	; select bank0
  7590  0EA1  140C               	bsf	12,0	;volatile
  7591  0EA2  0008               	return
  7592  0EA3                     __end_of_nrf24l01CEHigh:	
  7593                           
  7594                           	psect	text41
  7595  075F                     __ptext41:	
  7596 ;; *************** function _strcmp *****************
  7597 ;; Defined at:
  7598 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;  s1              1    wreg     PTR const unsigned char 
  7601 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7602 ;;		 -> loop@packet(33), 
  7603 ;;  s2              1    0[COMMON] PTR const unsigned char 
  7604 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;  s1              1    4[COMMON] PTR const unsigned char 
  7607 ;;		 -> packet.Message(32), packet.Message(32), NULL(0), main@packet(33), 
  7608 ;;		 -> loop@packet(33), 
  7609 ;;  r               1    3[COMMON] char 
  7610 ;; Return value:  Size  Location     Type
  7611 ;;                  2    0[COMMON] int 
  7612 ;; Registers used:
  7613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7619 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;Total ram usage:        5 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; This function calls:
  7626 ;;		Nothing
  7627 ;; This function is called by:
  7628 ;;		_nrf24l01CheckACK
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           
  7633                           ;psect for function _strcmp
  7634  075F                     _strcmp:	
  7635                           
  7636                           ;incstack = 0
  7637                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  7638                           ;strcmp@s1 stored from wreg
  7639  075F  00F4               	movwf	strcmp@s1
  7640  0760  2F69               	goto	i1l2121
  7641  0761                     i1l2117:	
  7642  0761  3001               	movlw	1
  7643  0762  00F2               	movwf	??_strcmp
  7644  0763  0872               	movf	??_strcmp,w
  7645  0764  07F4               	addwf	strcmp@s1,f
  7646  0765  3001               	movlw	1
  7647  0766  00F2               	movwf	??_strcmp
  7648  0767  0872               	movf	??_strcmp,w
  7649  0768  07F0               	addwf	strcmp@s2,f
  7650  0769                     i1l2121:	
  7651  0769  0874               	movf	strcmp@s1,w
  7652  076A  0086               	movwf	6
  7653  076B  0187               	clrf	7
  7654  076C  0870               	movf	strcmp@s2,w
  7655  076D  0084               	movwf	4
  7656  076E  3001               	movlw	1	; select bank2/3
  7657  076F  0085               	movwf	5
  7658  0770  0300               	decf	0,w
  7659  0771  3AFF               	xorlw	255
  7660  0772  0701               	addwf	1,w
  7661  0773  00F2               	movwf	??_strcmp
  7662  0774  0872               	movf	??_strcmp,w
  7663  0775  00F3               	movwf	strcmp@r
  7664  0776  0873               	movf	strcmp@r,w
  7665  0777  1D03               	btfss	3,2
  7666  0778  2F7F               	goto	i1l2125
  7667  0779  0874               	movf	strcmp@s1,w
  7668  077A  0086               	movwf	6
  7669  077B  0187               	clrf	7
  7670  077C  0801               	movf	1,w
  7671  077D  1D03               	btfss	3,2
  7672  077E  2F61               	goto	i1l2117
  7673  077F                     i1l2125:	
  7674  077F  0873               	movf	strcmp@r,w
  7675  0780  00F0               	movwf	?_strcmp
  7676  0781  01F1               	clrf	?_strcmp+1
  7677  0782  1BF0               	btfsc	?_strcmp,7
  7678  0783  03F1               	decf	?_strcmp+1,f
  7679  0784  0008               	return
  7680  0785                     __end_of_strcmp:	
  7681                           
  7682                           	psect	text42
  7683  0EEA                     __ptext42:	
  7684 ;; *************** function _exception *****************
  7685 ;; Defined at:
  7686 ;;		line 81 in file "interface.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;  exception       1    wreg     unsigned char 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;  exception       1   12[COMMON] unsigned char 
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  1    wreg      void 
  7693 ;; Registers used:
  7694 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;Total ram usage:        3 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    2
  7707 ;; This function calls:
  7708 ;;		___wmul
  7709 ;;		i1_flashUpdate
  7710 ;; This function is called by:
  7711 ;;		_nrf24l01ISR
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           
  7716                           ;psect for function _exception
  7717  0EEA                     _exception:	
  7718                           
  7719                           ;incstack = 0
  7720                           ; Regs used in _exception: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7721                           ;exception@exception stored from wreg
  7722  0EEA  00FC               	movwf	exception@exception
  7723                           
  7724                           ;interface.c: 82: romData.bootMode = (unsigned) (exception * 10);
  7725  0EEB  087C               	movf	exception@exception,w
  7726  0EEC  00FA               	movwf	??_exception
  7727  0EED  01FB               	clrf	??_exception+1
  7728  0EEE  087A               	movf	??_exception,w
  7729  0EEF  00F0               	movwf	___wmul@multiplier
  7730  0EF0  087B               	movf	??_exception+1,w
  7731  0EF1  00F1               	movwf	___wmul@multiplier+1
  7732  0EF2  300A               	movlw	10
  7733  0EF3  00F2               	movwf	___wmul@multiplicand
  7734  0EF4  3000               	movlw	0
  7735  0EF5  00F3               	movwf	___wmul@multiplicand+1
  7736  0EF6  318F  2733  318E   	fcall	___wmul
  7737  0EF9  0871               	movf	?___wmul+1,w
  7738  0EFA  0020               	movlb	0	; select bank0
  7739  0EFB  00EE               	movwf	_romData+18
  7740  0EFC  0870               	movf	?___wmul,w
  7741  0EFD  00ED               	movwf	_romData+17
  7742                           
  7743                           ;interface.c: 83: flashUpdate();
  7744  0EFE  3187  27CD         	fcall	i1_flashUpdate
  7745  0F00  0001               	reset	;# 
  7746  0F01  0008               	return
  7747  0F02                     __end_of_exception:	
  7748                           
  7749                           	psect	text43
  7750  07CD                     __ptext43:	
  7751 ;; *************** function i1_flashUpdate *****************
  7752 ;; Defined at:
  7753 ;;		line 97 in file "flash.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;		None
  7756 ;; Auto vars:     Size  Location     Type
  7757 ;;  flashUpdate     2    8[COMMON] unsigned int 
  7758 ;; Return value:  Size  Location     Type
  7759 ;;                  1    wreg      void 
  7760 ;; Registers used:
  7761 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7762 ;; Tracked objects:
  7763 ;;		On entry : 0/0
  7764 ;;		On exit  : 0/0
  7765 ;;		Unchanged: 0/0
  7766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;Total ram usage:        4 bytes
  7772 ;; Hardware stack levels used:    1
  7773 ;; Hardware stack levels required when called:    1
  7774 ;; This function calls:
  7775 ;;		i1_flashWriteByte
  7776 ;; This function is called by:
  7777 ;;		_exception
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           
  7782                           ;psect for function i1_flashUpdate
  7783  07CD                     i1_flashUpdate:	
  7784                           
  7785                           ;flash.c: 98: for (unsigned int i = 0; i < 32; i++){
  7786                           
  7787                           ;incstack = 0
  7788                           ; Regs used in i1_flashUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7789  07CD  01F8               	clrf	i1flashUpdate@i
  7790  07CE  01F9               	clrf	i1flashUpdate@i+1
  7791  07CF                     L3:	
  7792  07CF  3000               	movlw	0
  7793  07D0  0279               	subwf	i1flashUpdate@i+1,w
  7794  07D1  3020               	movlw	32
  7795  07D2  1903               	skipnz
  7796  07D3  0278               	subwf	i1flashUpdate@i,w
  7797  07D4  1803               	btfsc	3,0
  7798  07D5  0008               	return
  7799                           
  7800                           ;flash.c: 99: flashWriteByte(i, romHolder.array[i]);
  7801  07D6  0879               	movf	i1flashUpdate@i+1,w
  7802  07D7  00F1               	movwf	i1flashWriteByte@offset+1
  7803  07D8  0878               	movf	i1flashUpdate@i,w
  7804  07D9  00F0               	movwf	i1flashWriteByte@offset
  7805  07DA  0878               	movf	i1flashUpdate@i,w
  7806  07DB  3E20               	addlw	(low (_romHolder| (0+256)))& (0+255)
  7807  07DC  0086               	movwf	6
  7808  07DD  3001               	movlw	1	; select bank2/3
  7809  07DE  0087               	movwf	7
  7810  07DF  0801               	movf	1,w
  7811  07E0  00F6               	movwf	??i1_flashUpdate
  7812  07E1  01F7               	clrf	??i1_flashUpdate+1
  7813  07E2  0876               	movf	??i1_flashUpdate,w
  7814  07E3  00F2               	movwf	i1flashWriteByte@data
  7815  07E4  0877               	movf	??i1_flashUpdate+1,w
  7816  07E5  00F3               	movwf	i1flashWriteByte@data+1
  7817  07E6  3186  26DF  3187   	fcall	i1_flashWriteByte
  7818  07E9  3001               	movlw	1
  7819  07EA  07F8               	addwf	i1flashUpdate@i,f
  7820  07EB  3000               	movlw	0
  7821  07EC  3DF9               	addwfc	i1flashUpdate@i+1,f
  7822  07ED  2FCF               	goto	L3
  7823  07EE                     __end_ofi1_flashUpdate:	
  7824                           
  7825                           	psect	text44
  7826  06DF                     __ptext44:	
  7827 ;; *************** function i1_flashWriteByte *****************
  7828 ;; Defined at:
  7829 ;;		line 8 in file "flash.c"
  7830 ;; Parameters:    Size  Location     Type
  7831 ;;  offset          2    0[COMMON] unsigned int 
  7832 ;;  data            2    2[COMMON] unsigned int 
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;  flashWriteBy    2    4[COMMON] unsigned int 
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  1    wreg      void 
  7837 ;; Registers used:
  7838 ;;		wreg, status,2, status,0
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7844 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7845 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7847 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7848 ;;Total ram usage:        6 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; This function calls:
  7851 ;;		Nothing
  7852 ;; This function is called by:
  7853 ;;		i1_flashUpdate
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           
  7858                           ;psect for function i1_flashWriteByte
  7859  06DF                     i1_flashWriteByte:	
  7860                           
  7861                           ;flash.c: 10: unsigned int address;;flash.c: 12: INTCONbits.GIE = 0;
  7862                           
  7863                           ;incstack = 0
  7864                           ; Regs used in i1_flashWriteByte: [wreg+status,2+status,0]
  7865  06DF  138B               	bcf	11,7	;volatile
  7866                           
  7867                           ;flash.c: 15: PMCON1 = 0x00;
  7868  06E0  0031               	movlb	17	; select bank17
  7869  06E1  0195               	clrf	21	;volsfr
  7870                           
  7871                           ;flash.c: 17: address = (0x2000U - 32) + offset;
  7872  06E2  0870               	movf	i1flashWriteByte@offset,w
  7873  06E3  3EE0               	addlw	224
  7874  06E4  00F4               	movwf	i1flashWriteByte@address
  7875  06E5  301F               	movlw	31
  7876  06E6  3D71               	addwfc	i1flashWriteByte@offset+1,w
  7877  06E7  00F5               	movwf	i1flashWriteByte@address+1
  7878                           
  7879                           ;flash.c: 18: PMADRL = (char) (address >> 0);
  7880  06E8  0874               	movf	i1flashWriteByte@address,w
  7881  06E9  0091               	movwf	17	;volatile
  7882                           
  7883                           ;flash.c: 19: PMADRH = (char) (address >> 8);
  7884  06EA  0875               	movf	i1flashWriteByte@address+1,w
  7885  06EB  0092               	movwf	18	;volatile
  7886                           
  7887                           ;flash.c: 21: PMCON1bits.FREE = 1;
  7888  06EC  1615               	bsf	21,4	;volsfr
  7889                           
  7890                           ;flash.c: 22: PMCON1bits.WREN = 1;
  7891  06ED  1515               	bsf	21,2	;volsfr
  7892                           
  7893                           ;flash.c: 24: PMCON2 = 0x55;
  7894  06EE  3055               	movlw	85
  7895  06EF  0096               	movwf	22	;volsfr
  7896                           
  7897                           ;flash.c: 25: PMCON2 = 0xAA;
  7898  06F0  30AA               	movlw	170
  7899  06F1  0096               	movwf	22	;volsfr
  7900                           
  7901                           ;flash.c: 27: PMCON1bits.WR = 1;
  7902  06F2  1495               	bsf	21,1	;volsfr
  7903                           
  7904                           ;flash.c: 29: __nop();
  7905  06F3  0000               	nop
  7906                           
  7907                           ;flash.c: 30: __nop();
  7908  06F4  0000               	nop
  7909                           
  7910                           ;flash.c: 32: PMCON1bits.WREN = 0;
  7911  06F5  0031               	movlb	17	; select bank17
  7912  06F6  1115               	bcf	21,2	;volsfr
  7913                           
  7914                           ;flash.c: 36: PMCON1 = 0x00;
  7915  06F7  0195               	clrf	21	;volsfr
  7916                           
  7917                           ;flash.c: 38: PMADRL = (char) (address >> 0);
  7918  06F8  0874               	movf	i1flashWriteByte@address,w
  7919  06F9  0091               	movwf	17	;volatile
  7920                           
  7921                           ;flash.c: 39: PMADRH = (char) (address >> 8);
  7922  06FA  0875               	movf	i1flashWriteByte@address+1,w
  7923  06FB  0092               	movwf	18	;volatile
  7924                           
  7925                           ;flash.c: 41: PMCON1bits.FREE = 0;
  7926  06FC  1215               	bcf	21,4	;volsfr
  7927                           
  7928                           ;flash.c: 42: PMCON1bits.LWLO = 1;
  7929  06FD  1695               	bsf	21,5	;volsfr
  7930                           
  7931                           ;flash.c: 43: PMCON1bits.WREN = 1;
  7932  06FE  1515               	bsf	21,2	;volsfr
  7933                           
  7934                           ;flash.c: 45: PMDATL = (data >> 0);
  7935  06FF  0872               	movf	i1flashWriteByte@data,w
  7936  0700  0093               	movwf	19	;volatile
  7937                           
  7938                           ;flash.c: 46: PMDATH = (data >> 8);
  7939  0701  0873               	movf	i1flashWriteByte@data+1,w
  7940  0702  0094               	movwf	20	;volatile
  7941                           
  7942                           ;flash.c: 48: PMCON1bits.LWLO = 0;
  7943  0703  1295               	bcf	21,5	;volsfr
  7944                           
  7945                           ;flash.c: 50: PMCON2 = 0x55;
  7946  0704  3055               	movlw	85
  7947  0705  0096               	movwf	22	;volsfr
  7948                           
  7949                           ;flash.c: 51: PMCON2 = 0xAA;
  7950  0706  30AA               	movlw	170
  7951  0707  0096               	movwf	22	;volsfr
  7952                           
  7953                           ;flash.c: 53: PMCON1bits.WR = 1;
  7954  0708  1495               	bsf	21,1	;volsfr
  7955                           
  7956                           ;flash.c: 55: __nop();
  7957  0709  0000               	nop
  7958                           
  7959                           ;flash.c: 56: __nop();
  7960  070A  0000               	nop
  7961                           
  7962                           ;flash.c: 58: PMCON1bits.WREN = 0;
  7963  070B  0031               	movlb	17	; select bank17
  7964  070C  1115               	bcf	21,2	;volsfr
  7965                           
  7966                           ;flash.c: 61: INTCONbits.GIE = 1;
  7967  070D  178B               	bsf	11,7	;volatile
  7968  070E  0008               	return
  7969  070F                     __end_ofi1_flashWriteByte:	
  7970                           
  7971                           	psect	text45
  7972  0F33                     __ptext45:	
  7973 ;; *************** function ___wmul *****************
  7974 ;; Defined at:
  7975 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7976 ;; Parameters:    Size  Location     Type
  7977 ;;  multiplier      2    0[COMMON] unsigned int 
  7978 ;;  multiplicand    2    2[COMMON] unsigned int 
  7979 ;; Auto vars:     Size  Location     Type
  7980 ;;  product         2    4[COMMON] unsigned int 
  7981 ;; Return value:  Size  Location     Type
  7982 ;;                  2    0[COMMON] unsigned int 
  7983 ;; Registers used:
  7984 ;;		wreg, status,2, status,0
  7985 ;; Tracked objects:
  7986 ;;		On entry : 0/0
  7987 ;;		On exit  : 0/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7993 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7994 ;;Total ram usage:        6 bytes
  7995 ;; Hardware stack levels used:    1
  7996 ;; This function calls:
  7997 ;;		Nothing
  7998 ;; This function is called by:
  7999 ;;		_exception
  8000 ;; This function uses a non-reentrant model
  8001 ;;
  8002                           
  8003                           
  8004                           ;psect for function ___wmul
  8005  0F33                     ___wmul:	
  8006                           
  8007                           ;incstack = 0
  8008                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8009  0F33  01F4               	clrf	___wmul@product
  8010  0F34  01F5               	clrf	___wmul@product+1
  8011  0F35                     i1l2141:	
  8012  0F35  1C70               	btfss	___wmul@multiplier,0
  8013  0F36  2F3B               	goto	i1l448
  8014  0F37  0872               	movf	___wmul@multiplicand,w
  8015  0F38  07F4               	addwf	___wmul@product,f
  8016  0F39  0873               	movf	___wmul@multiplicand+1,w
  8017  0F3A  3DF5               	addwfc	___wmul@product+1,f
  8018  0F3B                     i1l448:	
  8019  0F3B  3001               	movlw	1
  8020  0F3C                     u105_25:	
  8021  0F3C  35F2               	lslf	___wmul@multiplicand,f
  8022  0F3D  0DF3               	rlf	___wmul@multiplicand+1,f
  8023  0F3E  0B89               	decfsz	9,f
  8024  0F3F  2F3C               	goto	u105_25
  8025  0F40  3001               	movlw	1
  8026  0F41                     u106_25:	
  8027  0F41  36F1               	lsrf	___wmul@multiplier+1,f
  8028  0F42  0CF0               	rrf	___wmul@multiplier,f
  8029  0F43  0B89               	decfsz	9,f
  8030  0F44  2F41               	goto	u106_25
  8031  0F45  0870               	movf	___wmul@multiplier,w
  8032  0F46  0471               	iorwf	___wmul@multiplier+1,w
  8033  0F47  1D03               	btfss	3,2
  8034  0F48  2F35               	goto	i1l2141
  8035  0F49  0875               	movf	___wmul@product+1,w
  8036  0F4A  00F1               	movwf	?___wmul+1
  8037  0F4B  0874               	movf	___wmul@product,w
  8038  0F4C  00F0               	movwf	?___wmul
  8039  0F4D  0008               	return
  8040  0F4E                     __end_of___wmul:	
  8041  007E                     btemp	set	126	;btemp
  8042  007E                     int$flags	set	126
  8043  007E                     wtemp0	set	126


Data Sizes:
    Strings     40
    Constant    25
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      79
    BANK1            80     67      71
    BANK2            80      0      65
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_9(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), NULL(NULL[0]), main@packet(BANK1[33]), 
		 -> loop@packet(BANK1[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_10(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), STR_2(CODE[2]), 
		 -> setMessage@tempString(BANK0[16]), STR_1(CODE[2]), romData.name(BANK0[16]), romData(BANK0[19]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    ultoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    sp__ltoa	PTR unsigned char  size(1) Largest target is 0

    nrf24l01SendPacket@Packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    TXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 19
		 -> romData(BANK0[19]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), 

    sp__ultoa	PTR unsigned char  size(1) Largest target is 16
		 -> setMessage@tempString(BANK0[16]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_10(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[4]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK1[33]), 

    setMessage@packet	PTR struct . size(1) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK1[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_exception
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send
    _exception->i1_flashUpdate
    i1_flashUpdate->i1_flashWriteByte

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01Send
    _loop->_setMessage
    _setMessage->_getADCValue
    _ultoa->___lldiv
    _nrf24l01SendPacket->_strlen
    _nrf24l01SetRXMode->_nrf24l01Send
    _getADCValue->___lldiv
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    _flashUpdate->_flashWriteByte
    _flashRealod->_flashReadByte

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    _main->_loop

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0   30840
                                             56 BANK0      1     1      0
                                             34 BANK1     33    33      0
                        _flashRealod
                        _flashUpdate
                               _loop
                       _nrf24l01Init
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     200
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         3     3      0    2424
                                             14 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               11    11      0    2402
                                              4 BANK0     10    10      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                38    38      0   16978
                                             52 BANK0      4     4      0
                                              0 BANK1     34    34      0
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          23    17      6    5078
                                             29 BANK0     23    17      6
                        _getADCValue (ARG)
                             _memset
                             _strcat
                              _ultoa
 ---------------------------------------------------------------------------------
 (2) _ultoa                                               13     7      6    1736
                                             15 BANK0     13     7      6
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     337
                                              1 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     723
                                              1 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     565
                                              1 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendPacket                                   4     4      0    5350
                                              9 BANK0      4     4      0
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     126
                                              1 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2277
                                              4 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4    1460
                                             15 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     270
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     696
                                              1 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              8 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              4 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    2143
                                              1 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (1) _flashUpdate                                          4     4      0     423
                                              7 BANK0      4     4      0
                     _flashWriteByte
 ---------------------------------------------------------------------------------
 (2) _flashWriteByte                                       6     2      4     333
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _flashRealod                                          3     3      0     271
                                             10 BANK0      3     3      0
                      _flashReadByte
 ---------------------------------------------------------------------------------
 (2) _flashReadByte                                        9     7      2     181
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    2674
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (8) _nrf24l01ISR                                          2     2      0    2674
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) _nrf24l01ReceivePacket                                3     3      0     639
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_memset                                            8     2      6     211
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (9) _nrf24l01CheckACK                                     1     1      0     617
                                              7 COMMON     1     1      0
                             _strcmp
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0     401
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (10) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _strcmp                                              5     3      2     216
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (9) _exception                                            3     3      0     589
                                             10 COMMON     3     3      0
                             ___wmul
                      i1_flashUpdate
 ---------------------------------------------------------------------------------
 (10) i1_flashUpdate                                       4     4      0     297
                                              6 COMMON     4     4      0
                   i1_flashWriteByte
 ---------------------------------------------------------------------------------
 (11) i1_flashWriteByte                                    6     2      4     207
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     270
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flashRealod
     _flashReadByte
   _flashUpdate
     _flashWriteByte
   _loop
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       _getADCValue (ARG)
         ___lldiv
         ___lmul
       _memset (ARG)
       _strcat (ARG)
       _ultoa (ARG)
         ___lldiv
         ___llmod
     _sleep
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _setMessage
     _getADCValue (ARG)
       ___lldiv
       ___lmul
     _memset (ARG)
     _strcat (ARG)
     _ultoa (ARG)
       ___lldiv
       ___llmod
   _sleep
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
       ___wmul
       i1_flashUpdate
         i1_flashWriteByte
     _nrf24l01CheckACK
       _strcmp
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     43      47       7       88.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E5      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E5      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Jul 16 17:06:47 2018

            flashReadByte@result 0026                     flashRealod@i 002B                      __CFG_CP$OFF 0000  
            ___wmul@multiplicand 0072              nrf24l01Send@command 0023  nrf24l01InitRegisters@isReciever 0070  
                    __CFG_LVP$ON 0000                              l221 07EE                              l214 03B4  
                            l324 01ED                              l328 01FD                              l866 037B  
                   flashUpdate@i 0029                     __CFG_CPD$OFF 0000                              _ISR 0004  
                            u805 04F8                              u815 0504                              u845 0523  
                            u775 04D8                              u865 053C                              u795 04E4  
                            u875 0547                              u975 056D                              wreg 0009  
            nrf24l01SendPacket@i 002C                             ?_ISR 0070                   ??_nrf24l01Init 002E  
                           l2113 0591                             l2107 057F                             l2133 078B  
                           l2061 073F                             l2047 0609                             l2135 0796  
                           l2063 074A                             l2071 0310                             l3007 02B8  
                           l2081 033D                             l2155 06B8                             l2315 03B9  
                           l2067 0752                             l2317 03AD                             l2405 026E  
                           l2159 06C2                             l2319 03D7                             l3071 0302  
                           l2361 01F1                             l2373 0228                             l1921 04E3  
                           l2393 0265                             l2377 023D                             l2369 0218  
                 ??_nrf24l01Send 0022                             l2395 0253                             l1933 050E  
                           l2397 026A                             l1919 04D5                             l1943 0520  
                           l1929 0503                             l1945 052E                             l1953 0551  
                           l2819 0F1F                             l1949 0546                             l2687 0F6F  
                           STR_1 103E                     __CFG_WDTE$ON 0000                             STR_2 103E  
                           STR_3 1036                             STR_4 1028                             STR_5 101E  
                           STR_6 103A                             STR_7 1023                             STR_8 1013  
                           STR_9 1032                             u1105 06CA                             u1245 0237  
                           u1095 06C3                             u1617 0299                             u1707 0606  
                           u1627 071D                             u1717 03AA                             u1637 072F  
                           u1647 01F9                             u1657 0244                             u1667 0266  
                           u1677 0279                             u1687 05E9                             u1697 05FB  
                           i1l94 0ECF                             _WPUA 020C                             _WPUC 020E  
 __size_of_nrf24l01InterfaceInit 001C                     __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000  
  __end_of_nrf24l01InterfaceInit 0FA0                             _main 027D                             _loop 0029  
                ??_flashReadByte 0023                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E   __size_of_nrf24l01ReceivePacket 0059  
                  __CFG_BORV$LOW 0000    __end_of_nrf24l01ReceivePacket 0470                             start 000F  
                  __CFG_CSWEN$ON 0000                    __CFG_MCLRE$ON 0000      __size_of_nrf24l01SendPacket 0096  
                          ??_ISR 007E             __size_of_getADCValue 0088                  ??_nrf24l01CELow 0070  
                ??_nrf24l01CSLow 0070                            ?_main 0070                            ?_loop 0070  
                          STR_10 102D                  __end_of___lldiv 0517                  __end_of___llmod 055A  
                 __CFG_DEBUG$OFF 0000                            i1l209 000D                            i1l352 0673  
                          i1l448 0F3B           enableInterrupts@enable 0070                 i1_flashWriteByte 06DF  
                     i1memset@p1 0070                   i1flashUpdate@i 0078              ___lmul@multiplicand 0025  
                  __CFG_PWRTE$ON 0000                            _sleep 07EE                            _ultoa 0306  
                 __CFG_BOREN$OFF 0000                 _enableInterrupts 0EB9                            status 0003  
                          wtemp0 007E      __end_ofi1_nrf24l01SetRXMode 0647                 __end_ofi1_memset 0F1A  
 __size_of_nrf24l01ChangeTXPower 003F                getADCValue@adcSum 0039    __end_of_nrf24l01ChangeTXPower 0599  
               _nrf24l01SPIStart 0EC1                  __initialization 0011                 _nrf24l01CheckACK 0FA0  
                   __end_of_main 0306                     __end_of_loop 013D     nrf24l01ChangeTXPower@rfSetup 0027  
               ??_nrf24l01CEHigh 0070                           ??_main 0058                           ??_loop 0054  
               ??_nrf24l01CSHigh 0070                 ??_nrf24l01SPIEnd 0070              _nrf24l01GetRXPacket 0002  
         __size_ofi1_flashUpdate 0021         __size_of_nrf24l01SPISend 000D                 ___llmod@dividend 0025  
                         _ADRESH 009C                           _ADRESL 009B                           ?_sleep 0070  
                         _ANSELA 018C                           _ANSELC 018E                           ?_ultoa 002F  
               ??_flashWriteByte 0025                           i1l2121 0769                           i1l2141 0F35  
                         i1l2125 077F                           i1l2117 0761                           _ODCONA 028C  
                         _ODCONC 028E                           u105_25 0F3C                           i1l2199 0640  
                         u106_25 0F41                           i1l1883 0ED4                           i1l2827 0F06  
                         i1l2863 0456                           i1l2867 045E                           i1l2859 0446  
                         i1l2887 0666                           i1l2879 0657                           i1l2897 0674  
                         _INLVLA 038C                           _INLVLC 038E                           u172_27 0622  
          __size_of_checkTXPower 0014                           u173_27 0633                           u174_27 063D  
                         u175_27 0EC5                           _PMADRH 0892                           u176_27 0EB3  
                         _PMADRL 0891                           _PMDATH 0894                           _PMDATL 0893  
                         _PMCON1 0895                           _PMCON2 0896             ?_nrf24l01GetRXPacket 0070  
           __size_of_flashRealod 0020               flashWriteByte@data 0023             __size_of_flashUpdate 0023  
           __size_of_nrf24l01ISR 0036          nrf24l01SetRXMode@config 0025                           ___lmul 06AF  
        nrf24l01SetRXMode@rxMode 0026                           ___wmul 0F33                   __CFG_STVREN$ON 0000  
                      ??___lldiv 0029                        ??___llmod 0029             __end_of_nrf24l01Init 0739  
           __end_of_nrf24l01Send 1000                           _memset 0F1A            _nrf24l01InitRegisters 013D  
                         _strcat 0739                           _strcmp 075F                           _strcpy 0F69  
                         _strlen 0785        i1nrf24l01SetRXMode@config 0075                 __end_of_romArray 2000  
      i1nrf24l01SetRXMode@rxMode 0076                     _checkTXPower 0ED6                           ultoa@c 003A  
                         ultoa@v 0036               getADCValue@adcLoop 0038          __end_of__initialization 0025  
          ??_nrf24l01GetRXPacket 0021         nrf24l01SendPacket@Packet 002B               getADCValue@channel 0037  
                  i1_flashUpdate 07CD               getADCValue@divider 002F                   __pcstackCOMMON 0070  
                  __end_of_sleep 0800                    __end_of_ultoa 038F    nrf24l01InitRegisters@enRXAddr 002A  
                      ?i1_memset 0070                          ??_sleep 0021                      loop@rfSetup 00A0  
                        ??_ultoa 0035                       __pbssBANK0 0059                       __pbssBANK1 00E3  
                     __pbssBANK2 0120                ??_nrf24l01SPISend 0070               __size_of_exception 0018  
                 ?i1_flashUpdate 0070          __size_ofi1_nrf24l01Send 001B         __end_ofi1_flashWriteByte 070F  
                     __pmaintext 027D                          ?___lmul 0021                          ?___wmul 0070  
                __CFG_PPS1WAY$ON 0000                _nrf24l01SetRXMode 05D5           ?_nrf24l01InitRegisters 0070  
                     __pintentry 0004              nrf24l01SPISend@data 0070                          ?_memset 0021  
                 ___lmul@product 0029               ?_nrf24l01SetRXMode 0070         __end_of_enableInterrupts 0EC1  
            __CFG_RSTOSC$HFINT32 0000                          ?_strcat 0021                          ?_strcmp 0070  
                        ?_strcpy 0021                          ?_strlen 0021            __end_of_n_ADDRESS_MUL 1041  
                     ??i1_memset 0076              ??_nrf24l01SetRXMode 0024         __end_of_nrf24l01SPIStart 0EC9  
                        _SSP1BUF 0211         __end_of_nrf24l01CheckACK 0FC0            _nrf24l01InterfaceInit 0F84  
          __end_of_flashReadByte 06AF                 __p_romArray_text 1FE0       __end_of_nrf24l01SendPacket 027D  
                  ??_getADCValue 0033            __size_of_nrf24l01Init 002A            __size_of_nrf24l01Send 0020  
      __end_of_nrf24l01SetRXMode 0610            _nrf24l01ReceivePacket 0417                  __size_of___lmul 0030  
                        ___lldiv 04C4                  __size_of___wmul 001B                          ___llmod 0517  
          __end_of_nrf24l01CELow 0EA6                  __size_of_memset 0019            __end_of_nrf24l01CSLow 0EAC  
                        __ptext1 0F69                          __ptext2 070F                          __ptext3 0F84  
                        __ptext4 013D                          __ptext5 0029                          __ptext6 07EE  
                        __ptext7 0470                          __ptext8 0306                          __ptext9 0517  
                __size_of_strcat 0026                  __size_of_strcmp 0026                __end_of_exception 0F02  
                __size_of_strcpy 001B                  __size_of_strlen 0025                     __size_of_ISR 000B  
                        _counter 00E3          i1flashWriteByte@address 0074                 _romArray_absaddr 1FE0  
                        _romData 005C                          clrloop0 0EAD             end_of_initialization 0025  
                   _nrf24l01Init 070F                       _setMessage 0470                  ??i1_flashUpdate 0076  
                   _nrf24l01Send 0FE0                          memset@c 0023                          memset@n 0025  
                        memset@p 0027                  ___lldiv@divisor 0021                  ___lldiv@counter 002E  
          _nrf24l01ChangeTXPower 055A                 setMessage@packet 0053     __size_ofi1_nrf24l01SetRXMode 0037  
                        strcmp@r 0073            i1nrf24l01Send@command 0073                          strlen@s 0027  
            __end_of_getADCValue 0417                        _PORTAbits 000C                        _PORTCbits 000E  
                      _TRISAbits 008C                        _TRISCbits 008E                 nrf24l01Send@data 0021  
               __CFG_FEXTOSC$OFF 0000                    ??_flashRealod 002A                    ??_flashUpdate 0027  
                  ??_nrf24l01ISR 007D           ?_nrf24l01InterfaceInit 0070                   i1_nrf24l01Send 0F4E  
                     main@packet 00C2           ?_nrf24l01ReceivePacket 0070       __size_of_nrf24l01SetRXMode 003B  
                 __end_of___lmul 06DF                   __end_of___wmul 0F4E                        i1memset@c 0072  
                      i1memset@n 0074                        i1memset@p 0076                   __end_of_memset 0F33  
                 __end_of_strcat 075F                   __end_of_strcmp 0785                   __end_of_strcpy 0F84  
                 __end_of_strlen 07AA              start_initialization 0011                  _nrf24l01SPISend 0EC9  
                    __end_of_ISR 000F            flashWriteByte@address 0025                __size_ofi1_memset 0018  
    __end_of_nrf24l01GetRXPacket 0004          __size_of_nrf24l01CEHigh 0003          __size_of_nrf24l01CSHigh 0003  
                    ?_setMessage 003D           __end_ofi1_nrf24l01Send 0F69          __size_of_nrf24l01SPIEnd 0007  
                ___llmod@divisor 0021                  ___llmod@counter 002A           ?_nrf24l01ChangeTXPower 0024  
        ??_nrf24l01InitRegisters 0024                 __CFG_LPBOREN$OFF 0000                ?i1_flashWriteByte 0070  
            __end_of_flashRealod 0FE0                      _getADCValue 038F          __size_of_flashWriteByte 003C  
            __end_of_flashUpdate 07CD                         ??___lmul 0029              __end_of_nrf24l01ISR 067D  
           setMessage@tempString 0043                         ??___wmul 0074               ??i1_flashWriteByte 0074  
           __end_of_resetRomData 1013                         ??_memset 0027                ?_enableInterrupts 0070  
                       ??_strcat 0023                         ??_strcmp 0072                         ??_strcpy 0023  
                       ??_strlen 0023               ??_enableInterrupts 0070                        ___latbits 0002  
                  __pcstackBANK0 0020                    __pcstackBANK1 00A0                ?_nrf24l01SPIStart 0070  
           checkTXPower@rxPacket 0029                ?_nrf24l01CheckACK 0070               ??_nrf24l01SPIStart 0070  
             ??_nrf24l01CheckACK 0077                  ?i1_nrf24l01Send 0071                       loop@packet 00A1  
                       ?___lldiv 0021                         ?___llmod 0021             __end_of_n_ADDRESS_P0 101E  
        __end_of_nrf24l01SPISend 0ED6               i1nrf24l01Send@data 0071        nrf24l01InitRegisters@enAA 002B  
            __size_of_setMessage 0054               _nrf24l01SendPacket 01E7                        _exception 0EEA  
            ?_nrf24l01SendPacket 0070              i1_nrf24l01SetRXMode 0610                   __size_of_sleep 0012  
                 __size_of_ultoa 0089                      _flashRealod 0FC0                   ___wmul@product 0074  
         i1flashWriteByte@offset 0070                      _flashUpdate 07AA                      _nrf24l01ISR 0647  
                      clear_ram0 0EAC                         _PIE0bits 0090                         _PIR0bits 0010  
                      _romHolder 0120                        _sleepLoop 005A             ??_nrf24l01SendPacket 0029  
                setMessage@value 003F                  setMessage@topic 003D             ?i1_nrf24l01SetRXMode 0070  
                     _ADCON0bits 009D                       _ADCON1bits 009E                ___wmul@multiplier 0070  
                       _WPUAbits 020C                         i1_memset 0F02                    ?_checkTXPower 0070  
                       _RXPacket 0140           __size_of_flashReadByte 0032                         _TXPacket 0059  
                     ?_exception 0070                   _nrf24l01CEHigh 0EA0                ___lmul@multiplier 0021  
        ??_nrf24l01InterfaceInit 0021                   _nrf24l01CSHigh 0EA6                nrf24l01ISR@status 0020  
                 _nrf24l01SPIEnd 0EB2          ??_nrf24l01ReceivePacket 0078           __size_of_nrf24l01CELow 0003  
          __end_ofi1_flashUpdate 07EE           __size_of_nrf24l01CSLow 0003             flashWriteByte@offset 0021  
                 _flashWriteByte 0599            ??i1_nrf24l01SetRXMode 0074                 __size_of___lldiv 0053  
               __size_of___llmod 0043                 ?_nrf24l01SPISend 0070                       _ANSELAbits 018C  
                     _ANSELCbits 018E                   ??_checkTXPower 0028                    _n_ADDRESS_MUL 1040  
                     strcat@from 0021           __end_of_nrf24l01CEHigh 0EA3           __end_of_nrf24l01CSHigh 0EA9  
                       __ptext10 0739                         __ptext11 0F1A                         __ptext20 055A  
                       __ptext12 01E7                         __ptext21 0FE0                         __ptext13 0785  
                       __ptext30 0FA0                         __ptext22 07AA                         __ptext14 05D5  
                       __ptext31 0610                         __ptext23 0599                         __ptext15 038F  
                       __ptext40 0EA0                         __ptext32 0F4E                         __ptext24 0FC0  
                       __ptext16 06AF                         __ptext41 075F                         __ptext33 0EC1  
                       __ptext25 067D                         __ptext17 04C4                         __ptext42 0EEA  
                       __ptext34 0EA9                         __ptext18 0ED6                         __ptext43 07CD  
                       __ptext35 0EC9                         __ptext27 0647                         __ptext19 0002  
                       __ptext44 06DF                         __ptext36 0EB2                         __ptext28 0417  
                       __ptext45 0F33                         __ptext37 0EA6                         __ptext29 0F02  
                       __ptext38 0EB9                         __ptext39 0EA3                     _SSP1CON1bits 0215  
         __end_of_nrf24l01SPIEnd 0EB9                         _nrf24l01 005B                     _resetRomData 1000  
         nrf24l01Init@isReciever 0030                      _OSCCON1bits 0919                     ??_setMessage 0043  
                     strcpy@from 0021    nrf24l01ChangeTXPower@addPower 0024          ??_nrf24l01ChangeTXPower 0026  
                  __size_of_main 0089                    __size_of_loop 0114     nrf24l01InitRegisters@channel 0025  
         __end_of_flashWriteByte 05D5     nrf24l01InitRegisters@feature 0027               exception@exception 007C  
                     _RC0PPSbits 0EA0                         _romArray 1FE0                    _flashReadByte 067D  
   nrf24l01InitRegisters@rfSetup 0028                       _RC1PPSbits 0EA1                     ?_getADCValue 002F  
                     _RC2PPSbits 0EA2   __size_of_nrf24l01InitRegisters 00AA    __end_of_nrf24l01InitRegisters 01E7  
                       int$flags 007E     nrf24l01InitRegisters@setupAW 0026                     _SSP1STATbits 0214  
         nrf24l01ReceivePacket@i 007A                    _nrf24l01CELow 0EA3                    _nrf24l01CSLow 0EA9  
             __end_of_setMessage 04C4                       _INTCONbits 000B        __size_ofi1_flashWriteByte 0030  
                ?_nrf24l01CEHigh 0070                       _FVRCONbits 0117                 ??i1_nrf24l01Send 0072  
                    ??_exception 007A                  ?_nrf24l01CSHigh 0070                   __pstringtext10 1036  
                 __pstringtext11 103A                   __pstringtext12 103E                   __pstringtext13 0000  
                       memset@p1 0021                        ultoa@base 0033                  ?_nrf24l01SPIEnd 0070  
                       intlevel1 0000                     _n_ADDRESS_P0 1019        __size_of_enableInterrupts 0008  
                     _PMCON1bits 0895                 ___lldiv@dividend 0025                __CFG_CLKOUTEN$OFF 0000  
                ?_flashWriteByte 0021     __size_of_nrf24l01GetRXPacket 0002                   ?_flashReadByte 0021  
           i1flashWriteByte@data 0072      nrf24l01InitRegisters@config 002D        __size_of_nrf24l01SPIStart 0008  
      __size_of_nrf24l01CheckACK 0020      nrf24l01InitRegisters@status 0029       nrf24l01ReceivePacket@width 0079  
                 ?_nrf24l01CELow 0070                    __pstringtext1 1000                    __pstringtext2 1019  
                  __pstringtext3 1040                    __pstringtext4 1013                    __pstringtext5 101E  
                  __pstringtext6 1023                    __pstringtext7 1028                    __pstringtext8 102D  
                  __pstringtext9 1032                   ?_nrf24l01CSLow 0070                         ultoa@buf 003B  
                       ultoa@val 002F       nrf24l01InitRegisters@DynPD 002C                         strcat@cp 0024  
                       strcat@to 0025                         strcmp@s1 0074                         strcmp@s2 0070  
               ___lldiv@quotient 002A                         strcpy@cp 0025                         strlen@cp 0028  
                       strcpy@to 0024                       _WDTCONbits 0097                    ?_nrf24l01Init 0070  
                  ?_nrf24l01Send 0021                     ?_flashRealod 0070                       _STATUSbits 0003  
           flashReadByte@address 0028                     ?_flashUpdate 0070                     ?_nrf24l01ISR 0070  
           __end_of_checkTXPower 0EEA              flashReadByte@offset 0021  
