

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Wed Sep 05 13:09:47 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    27                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    28                           	psect	text1,local,class=CODE,merge=1,delta=2
    29                           	psect	text2,local,class=CODE,merge=1,delta=2
    30                           	psect	text3,local,class=CODE,merge=1,delta=2
    31                           	psect	text4,local,class=CODE,merge=1,delta=2
    32                           	psect	text5,local,class=CODE,merge=1,delta=2
    33                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text7,local,class=CODE,merge=1,delta=2
    35                           	psect	text8,local,class=CODE,merge=1,delta=2
    36                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text10,local,class=CODE,merge=1,delta=2
    38                           	psect	text11,local,class=CODE,merge=1,delta=2
    39                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text14,local,class=CODE,merge=1,delta=2
    42                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text16,local,class=CODE,merge=1,delta=2
    44                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text18,local,class=CODE,merge=1,delta=2
    46                           	psect	text19,local,class=CODE,merge=1,delta=2
    47                           	psect	text20,local,class=CODE,merge=1,delta=2
    48                           	psect	text21,local,class=CODE,merge=1,delta=2
    49                           	psect	text22,local,class=CODE,merge=1,delta=2
    50                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text25,local,class=CODE,merge=1,delta=2
    53                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2
    66                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text45,local,class=CODE,merge=1,delta=2
    73                           	psect	text46,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text48,local,class=CODE,merge=1,delta=2
    76                           	dabs	1,0x74,12
    77  0000                     
    78                           ; Version 2.00
    79                           ; Generated 27/05/2018 GMT
    80                           ; 
    81                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC16LF18325 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000E                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0014                     	;# 
   131  0015                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  008C                     	;# 
   146  008E                     	;# 
   147  0090                     	;# 
   148  0091                     	;# 
   149  0092                     	;# 
   150  0093                     	;# 
   151  0094                     	;# 
   152  0097                     	;# 
   153  009B                     	;# 
   154  009B                     	;# 
   155  009C                     	;# 
   156  009D                     	;# 
   157  009E                     	;# 
   158  009F                     	;# 
   159  010C                     	;# 
   160  010E                     	;# 
   161  0111                     	;# 
   162  0112                     	;# 
   163  0113                     	;# 
   164  0114                     	;# 
   165  0115                     	;# 
   166  0116                     	;# 
   167  0117                     	;# 
   168  0118                     	;# 
   169  0119                     	;# 
   170  018C                     	;# 
   171  018E                     	;# 
   172  0199                     	;# 
   173  0199                     	;# 
   174  0199                     	;# 
   175  019A                     	;# 
   176  019A                     	;# 
   177  019A                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019C                     	;# 
   184  019C                     	;# 
   185  019C                     	;# 
   186  019D                     	;# 
   187  019D                     	;# 
   188  019D                     	;# 
   189  019E                     	;# 
   190  019E                     	;# 
   191  019E                     	;# 
   192  019F                     	;# 
   193  019F                     	;# 
   194  019F                     	;# 
   195  019F                     	;# 
   196  019F                     	;# 
   197  020C                     	;# 
   198  020E                     	;# 
   199  0211                     	;# 
   200  0211                     	;# 
   201  0212                     	;# 
   202  0212                     	;# 
   203  0213                     	;# 
   204  0213                     	;# 
   205  0214                     	;# 
   206  0214                     	;# 
   207  0215                     	;# 
   208  0215                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0216                     	;# 
   212  0216                     	;# 
   213  0217                     	;# 
   214  0217                     	;# 
   215  0219                     	;# 
   216  021A                     	;# 
   217  021B                     	;# 
   218  021C                     	;# 
   219  021D                     	;# 
   220  021D                     	;# 
   221  021E                     	;# 
   222  021F                     	;# 
   223  028C                     	;# 
   224  028E                     	;# 
   225  0291                     	;# 
   226  0291                     	;# 
   227  0292                     	;# 
   228  0293                     	;# 
   229  0294                     	;# 
   230  0295                     	;# 
   231  0295                     	;# 
   232  0296                     	;# 
   233  0297                     	;# 
   234  0298                     	;# 
   235  029F                     	;# 
   236  030C                     	;# 
   237  030E                     	;# 
   238  0311                     	;# 
   239  0311                     	;# 
   240  0312                     	;# 
   241  0313                     	;# 
   242  0314                     	;# 
   243  0315                     	;# 
   244  0315                     	;# 
   245  0316                     	;# 
   246  0317                     	;# 
   247  0318                     	;# 
   248  038C                     	;# 
   249  038E                     	;# 
   250  0391                     	;# 
   251  0392                     	;# 
   252  0393                     	;# 
   253  0397                     	;# 
   254  0398                     	;# 
   255  0399                     	;# 
   256  039A                     	;# 
   257  039C                     	;# 
   258  039D                     	;# 
   259  039E                     	;# 
   260  039F                     	;# 
   261  0411                     	;# 
   262  0411                     	;# 
   263  0412                     	;# 
   264  0413                     	;# 
   265  0414                     	;# 
   266  0415                     	;# 
   267  0416                     	;# 
   268  0417                     	;# 
   269  0418                     	;# 
   270  0418                     	;# 
   271  0419                     	;# 
   272  041A                     	;# 
   273  041B                     	;# 
   274  041C                     	;# 
   275  041D                     	;# 
   276  041E                     	;# 
   277  041F                     	;# 
   278  0498                     	;# 
   279  0498                     	;# 
   280  0499                     	;# 
   281  049A                     	;# 
   282  049B                     	;# 
   283  049B                     	;# 
   284  049C                     	;# 
   285  049D                     	;# 
   286  049E                     	;# 
   287  049F                     	;# 
   288  0617                     	;# 
   289  0618                     	;# 
   290  0619                     	;# 
   291  0619                     	;# 
   292  061A                     	;# 
   293  061B                     	;# 
   294  061C                     	;# 
   295  061C                     	;# 
   296  061F                     	;# 
   297  0691                     	;# 
   298  0692                     	;# 
   299  0693                     	;# 
   300  0694                     	;# 
   301  0695                     	;# 
   302  0696                     	;# 
   303  0697                     	;# 
   304  0698                     	;# 
   305  0699                     	;# 
   306  0711                     	;# 
   307  0712                     	;# 
   308  0713                     	;# 
   309  0714                     	;# 
   310  0715                     	;# 
   311  0716                     	;# 
   312  0717                     	;# 
   313  0718                     	;# 
   314  0719                     	;# 
   315  0891                     	;# 
   316  0891                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0891                     	;# 
   320  0891                     	;# 
   321  0892                     	;# 
   322  0892                     	;# 
   323  0892                     	;# 
   324  0893                     	;# 
   325  0893                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0893                     	;# 
   329  0893                     	;# 
   330  0894                     	;# 
   331  0894                     	;# 
   332  0894                     	;# 
   333  0895                     	;# 
   334  0895                     	;# 
   335  0895                     	;# 
   336  0896                     	;# 
   337  0896                     	;# 
   338  0896                     	;# 
   339  089B                     	;# 
   340  0911                     	;# 
   341  0912                     	;# 
   342  0913                     	;# 
   343  0914                     	;# 
   344  0915                     	;# 
   345  0916                     	;# 
   346  0918                     	;# 
   347  0919                     	;# 
   348  091A                     	;# 
   349  091B                     	;# 
   350  091C                     	;# 
   351  091D                     	;# 
   352  091E                     	;# 
   353  091F                     	;# 
   354  0E0F                     	;# 
   355  0E10                     	;# 
   356  0E11                     	;# 
   357  0E12                     	;# 
   358  0E13                     	;# 
   359  0E14                     	;# 
   360  0E15                     	;# 
   361  0E16                     	;# 
   362  0E17                     	;# 
   363  0E18                     	;# 
   364  0E19                     	;# 
   365  0E1A                     	;# 
   366  0E1B                     	;# 
   367  0E1C                     	;# 
   368  0E1D                     	;# 
   369  0E1E                     	;# 
   370  0E1F                     	;# 
   371  0E20                     	;# 
   372  0E21                     	;# 
   373  0E22                     	;# 
   374  0E24                     	;# 
   375  0E25                     	;# 
   376  0E28                     	;# 
   377  0E29                     	;# 
   378  0E2A                     	;# 
   379  0E2B                     	;# 
   380  0E2C                     	;# 
   381  0E2D                     	;# 
   382  0E2E                     	;# 
   383  0E2F                     	;# 
   384  0E90                     	;# 
   385  0E91                     	;# 
   386  0E92                     	;# 
   387  0E94                     	;# 
   388  0E95                     	;# 
   389  0EA0                     	;# 
   390  0EA1                     	;# 
   391  0EA2                     	;# 
   392  0EA3                     	;# 
   393  0EA4                     	;# 
   394  0EA5                     	;# 
   395  0F0F                     	;# 
   396  0F10                     	;# 
   397  0F11                     	;# 
   398  0F12                     	;# 
   399  0F13                     	;# 
   400  0F14                     	;# 
   401  0F15                     	;# 
   402  0F16                     	;# 
   403  0F17                     	;# 
   404  0F18                     	;# 
   405  0F19                     	;# 
   406  0F1A                     	;# 
   407  0F1B                     	;# 
   408  0F1C                     	;# 
   409  0F1D                     	;# 
   410  0F1E                     	;# 
   411  0F1F                     	;# 
   412  0F20                     	;# 
   413  0F21                     	;# 
   414  0F22                     	;# 
   415  0F23                     	;# 
   416  0F24                     	;# 
   417  0F25                     	;# 
   418  0F26                     	;# 
   419  0F27                     	;# 
   420  0F28                     	;# 
   421  0F29                     	;# 
   422  0F2A                     	;# 
   423  0F2B                     	;# 
   424  0F2C                     	;# 
   425  0F2D                     	;# 
   426  0F2E                     	;# 
   427  0F2F                     	;# 
   428  0F30                     	;# 
   429  0F31                     	;# 
   430  0F32                     	;# 
   431  0F33                     	;# 
   432  0F34                     	;# 
   433  0F35                     	;# 
   434  0F36                     	;# 
   435  0F37                     	;# 
   436  0FE4                     	;# 
   437  0FE5                     	;# 
   438  0FE6                     	;# 
   439  0FE7                     	;# 
   440  0FE8                     	;# 
   441  0FE9                     	;# 
   442  0FEA                     	;# 
   443  0FEB                     	;# 
   444  0FED                     	;# 
   445  0FEE                     	;# 
   446  0FEF                     	;# 
   447  0000                     	;# 
   448  0001                     	;# 
   449  0002                     	;# 
   450  0003                     	;# 
   451  0004                     	;# 
   452  0005                     	;# 
   453  0006                     	;# 
   454  0007                     	;# 
   455  0008                     	;# 
   456  0009                     	;# 
   457  000A                     	;# 
   458  000B                     	;# 
   459  000C                     	;# 
   460  000E                     	;# 
   461  0010                     	;# 
   462  0011                     	;# 
   463  0012                     	;# 
   464  0013                     	;# 
   465  0014                     	;# 
   466  0015                     	;# 
   467  0015                     	;# 
   468  0016                     	;# 
   469  0016                     	;# 
   470  0017                     	;# 
   471  0018                     	;# 
   472  0019                     	;# 
   473  0019                     	;# 
   474  001A                     	;# 
   475  001B                     	;# 
   476  001C                     	;# 
   477  001D                     	;# 
   478  001E                     	;# 
   479  001F                     	;# 
   480  008C                     	;# 
   481  008E                     	;# 
   482  0090                     	;# 
   483  0091                     	;# 
   484  0092                     	;# 
   485  0093                     	;# 
   486  0094                     	;# 
   487  0097                     	;# 
   488  009B                     	;# 
   489  009B                     	;# 
   490  009C                     	;# 
   491  009D                     	;# 
   492  009E                     	;# 
   493  009F                     	;# 
   494  010C                     	;# 
   495  010E                     	;# 
   496  0111                     	;# 
   497  0112                     	;# 
   498  0113                     	;# 
   499  0114                     	;# 
   500  0115                     	;# 
   501  0116                     	;# 
   502  0117                     	;# 
   503  0118                     	;# 
   504  0119                     	;# 
   505  018C                     	;# 
   506  018E                     	;# 
   507  0199                     	;# 
   508  0199                     	;# 
   509  0199                     	;# 
   510  019A                     	;# 
   511  019A                     	;# 
   512  019A                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019C                     	;# 
   519  019C                     	;# 
   520  019C                     	;# 
   521  019D                     	;# 
   522  019D                     	;# 
   523  019D                     	;# 
   524  019E                     	;# 
   525  019E                     	;# 
   526  019E                     	;# 
   527  019F                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  020C                     	;# 
   533  020E                     	;# 
   534  0211                     	;# 
   535  0211                     	;# 
   536  0212                     	;# 
   537  0212                     	;# 
   538  0213                     	;# 
   539  0213                     	;# 
   540  0214                     	;# 
   541  0214                     	;# 
   542  0215                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0216                     	;# 
   547  0216                     	;# 
   548  0217                     	;# 
   549  0217                     	;# 
   550  0219                     	;# 
   551  021A                     	;# 
   552  021B                     	;# 
   553  021C                     	;# 
   554  021D                     	;# 
   555  021D                     	;# 
   556  021E                     	;# 
   557  021F                     	;# 
   558  028C                     	;# 
   559  028E                     	;# 
   560  0291                     	;# 
   561  0291                     	;# 
   562  0292                     	;# 
   563  0293                     	;# 
   564  0294                     	;# 
   565  0295                     	;# 
   566  0295                     	;# 
   567  0296                     	;# 
   568  0297                     	;# 
   569  0298                     	;# 
   570  029F                     	;# 
   571  030C                     	;# 
   572  030E                     	;# 
   573  0311                     	;# 
   574  0311                     	;# 
   575  0312                     	;# 
   576  0313                     	;# 
   577  0314                     	;# 
   578  0315                     	;# 
   579  0315                     	;# 
   580  0316                     	;# 
   581  0317                     	;# 
   582  0318                     	;# 
   583  038C                     	;# 
   584  038E                     	;# 
   585  0391                     	;# 
   586  0392                     	;# 
   587  0393                     	;# 
   588  0397                     	;# 
   589  0398                     	;# 
   590  0399                     	;# 
   591  039A                     	;# 
   592  039C                     	;# 
   593  039D                     	;# 
   594  039E                     	;# 
   595  039F                     	;# 
   596  0411                     	;# 
   597  0411                     	;# 
   598  0412                     	;# 
   599  0413                     	;# 
   600  0414                     	;# 
   601  0415                     	;# 
   602  0416                     	;# 
   603  0417                     	;# 
   604  0418                     	;# 
   605  0418                     	;# 
   606  0419                     	;# 
   607  041A                     	;# 
   608  041B                     	;# 
   609  041C                     	;# 
   610  041D                     	;# 
   611  041E                     	;# 
   612  041F                     	;# 
   613  0498                     	;# 
   614  0498                     	;# 
   615  0499                     	;# 
   616  049A                     	;# 
   617  049B                     	;# 
   618  049B                     	;# 
   619  049C                     	;# 
   620  049D                     	;# 
   621  049E                     	;# 
   622  049F                     	;# 
   623  0617                     	;# 
   624  0618                     	;# 
   625  0619                     	;# 
   626  0619                     	;# 
   627  061A                     	;# 
   628  061B                     	;# 
   629  061C                     	;# 
   630  061C                     	;# 
   631  061F                     	;# 
   632  0691                     	;# 
   633  0692                     	;# 
   634  0693                     	;# 
   635  0694                     	;# 
   636  0695                     	;# 
   637  0696                     	;# 
   638  0697                     	;# 
   639  0698                     	;# 
   640  0699                     	;# 
   641  0711                     	;# 
   642  0712                     	;# 
   643  0713                     	;# 
   644  0714                     	;# 
   645  0715                     	;# 
   646  0716                     	;# 
   647  0717                     	;# 
   648  0718                     	;# 
   649  0719                     	;# 
   650  0891                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0891                     	;# 
   656  0892                     	;# 
   657  0892                     	;# 
   658  0892                     	;# 
   659  0893                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0893                     	;# 
   665  0894                     	;# 
   666  0894                     	;# 
   667  0894                     	;# 
   668  0895                     	;# 
   669  0895                     	;# 
   670  0895                     	;# 
   671  0896                     	;# 
   672  0896                     	;# 
   673  0896                     	;# 
   674  089B                     	;# 
   675  0911                     	;# 
   676  0912                     	;# 
   677  0913                     	;# 
   678  0914                     	;# 
   679  0915                     	;# 
   680  0916                     	;# 
   681  0918                     	;# 
   682  0919                     	;# 
   683  091A                     	;# 
   684  091B                     	;# 
   685  091C                     	;# 
   686  091D                     	;# 
   687  091E                     	;# 
   688  091F                     	;# 
   689  0E0F                     	;# 
   690  0E10                     	;# 
   691  0E11                     	;# 
   692  0E12                     	;# 
   693  0E13                     	;# 
   694  0E14                     	;# 
   695  0E15                     	;# 
   696  0E16                     	;# 
   697  0E17                     	;# 
   698  0E18                     	;# 
   699  0E19                     	;# 
   700  0E1A                     	;# 
   701  0E1B                     	;# 
   702  0E1C                     	;# 
   703  0E1D                     	;# 
   704  0E1E                     	;# 
   705  0E1F                     	;# 
   706  0E20                     	;# 
   707  0E21                     	;# 
   708  0E22                     	;# 
   709  0E24                     	;# 
   710  0E25                     	;# 
   711  0E28                     	;# 
   712  0E29                     	;# 
   713  0E2A                     	;# 
   714  0E2B                     	;# 
   715  0E2C                     	;# 
   716  0E2D                     	;# 
   717  0E2E                     	;# 
   718  0E2F                     	;# 
   719  0E90                     	;# 
   720  0E91                     	;# 
   721  0E92                     	;# 
   722  0E94                     	;# 
   723  0E95                     	;# 
   724  0EA0                     	;# 
   725  0EA1                     	;# 
   726  0EA2                     	;# 
   727  0EA3                     	;# 
   728  0EA4                     	;# 
   729  0EA5                     	;# 
   730  0F0F                     	;# 
   731  0F10                     	;# 
   732  0F11                     	;# 
   733  0F12                     	;# 
   734  0F13                     	;# 
   735  0F14                     	;# 
   736  0F15                     	;# 
   737  0F16                     	;# 
   738  0F17                     	;# 
   739  0F18                     	;# 
   740  0F19                     	;# 
   741  0F1A                     	;# 
   742  0F1B                     	;# 
   743  0F1C                     	;# 
   744  0F1D                     	;# 
   745  0F1E                     	;# 
   746  0F1F                     	;# 
   747  0F20                     	;# 
   748  0F21                     	;# 
   749  0F22                     	;# 
   750  0F23                     	;# 
   751  0F24                     	;# 
   752  0F25                     	;# 
   753  0F26                     	;# 
   754  0F27                     	;# 
   755  0F28                     	;# 
   756  0F29                     	;# 
   757  0F2A                     	;# 
   758  0F2B                     	;# 
   759  0F2C                     	;# 
   760  0F2D                     	;# 
   761  0F2E                     	;# 
   762  0F2F                     	;# 
   763  0F30                     	;# 
   764  0F31                     	;# 
   765  0F32                     	;# 
   766  0F33                     	;# 
   767  0F34                     	;# 
   768  0F35                     	;# 
   769  0F36                     	;# 
   770  0F37                     	;# 
   771  0FE4                     	;# 
   772  0FE5                     	;# 
   773  0FE6                     	;# 
   774  0FE7                     	;# 
   775  0FE8                     	;# 
   776  0FE9                     	;# 
   777  0FEA                     	;# 
   778  0FEB                     	;# 
   779  0FED                     	;# 
   780  0FEE                     	;# 
   781  0FEF                     	;# 
   782  0000                     	;# 
   783  0001                     	;# 
   784  0002                     	;# 
   785  0003                     	;# 
   786  0004                     	;# 
   787  0005                     	;# 
   788  0006                     	;# 
   789  0007                     	;# 
   790  0008                     	;# 
   791  0009                     	;# 
   792  000A                     	;# 
   793  000B                     	;# 
   794  000C                     	;# 
   795  000E                     	;# 
   796  0010                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0013                     	;# 
   800  0014                     	;# 
   801  0015                     	;# 
   802  0015                     	;# 
   803  0016                     	;# 
   804  0016                     	;# 
   805  0017                     	;# 
   806  0018                     	;# 
   807  0019                     	;# 
   808  0019                     	;# 
   809  001A                     	;# 
   810  001B                     	;# 
   811  001C                     	;# 
   812  001D                     	;# 
   813  001E                     	;# 
   814  001F                     	;# 
   815  008C                     	;# 
   816  008E                     	;# 
   817  0090                     	;# 
   818  0091                     	;# 
   819  0092                     	;# 
   820  0093                     	;# 
   821  0094                     	;# 
   822  0097                     	;# 
   823  009B                     	;# 
   824  009B                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009E                     	;# 
   828  009F                     	;# 
   829  010C                     	;# 
   830  010E                     	;# 
   831  0111                     	;# 
   832  0112                     	;# 
   833  0113                     	;# 
   834  0114                     	;# 
   835  0115                     	;# 
   836  0116                     	;# 
   837  0117                     	;# 
   838  0118                     	;# 
   839  0119                     	;# 
   840  018C                     	;# 
   841  018E                     	;# 
   842  0199                     	;# 
   843  0199                     	;# 
   844  0199                     	;# 
   845  019A                     	;# 
   846  019A                     	;# 
   847  019A                     	;# 
   848  019B                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019C                     	;# 
   854  019C                     	;# 
   855  019C                     	;# 
   856  019D                     	;# 
   857  019D                     	;# 
   858  019D                     	;# 
   859  019E                     	;# 
   860  019E                     	;# 
   861  019E                     	;# 
   862  019F                     	;# 
   863  019F                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  020C                     	;# 
   868  020E                     	;# 
   869  0211                     	;# 
   870  0211                     	;# 
   871  0212                     	;# 
   872  0212                     	;# 
   873  0213                     	;# 
   874  0213                     	;# 
   875  0214                     	;# 
   876  0214                     	;# 
   877  0215                     	;# 
   878  0215                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0216                     	;# 
   882  0216                     	;# 
   883  0217                     	;# 
   884  0217                     	;# 
   885  0219                     	;# 
   886  021A                     	;# 
   887  021B                     	;# 
   888  021C                     	;# 
   889  021D                     	;# 
   890  021D                     	;# 
   891  021E                     	;# 
   892  021F                     	;# 
   893  028C                     	;# 
   894  028E                     	;# 
   895  0291                     	;# 
   896  0291                     	;# 
   897  0292                     	;# 
   898  0293                     	;# 
   899  0294                     	;# 
   900  0295                     	;# 
   901  0295                     	;# 
   902  0296                     	;# 
   903  0297                     	;# 
   904  0298                     	;# 
   905  029F                     	;# 
   906  030C                     	;# 
   907  030E                     	;# 
   908  0311                     	;# 
   909  0311                     	;# 
   910  0312                     	;# 
   911  0313                     	;# 
   912  0314                     	;# 
   913  0315                     	;# 
   914  0315                     	;# 
   915  0316                     	;# 
   916  0317                     	;# 
   917  0318                     	;# 
   918  038C                     	;# 
   919  038E                     	;# 
   920  0391                     	;# 
   921  0392                     	;# 
   922  0393                     	;# 
   923  0397                     	;# 
   924  0398                     	;# 
   925  0399                     	;# 
   926  039A                     	;# 
   927  039C                     	;# 
   928  039D                     	;# 
   929  039E                     	;# 
   930  039F                     	;# 
   931  0411                     	;# 
   932  0411                     	;# 
   933  0412                     	;# 
   934  0413                     	;# 
   935  0414                     	;# 
   936  0415                     	;# 
   937  0416                     	;# 
   938  0417                     	;# 
   939  0418                     	;# 
   940  0418                     	;# 
   941  0419                     	;# 
   942  041A                     	;# 
   943  041B                     	;# 
   944  041C                     	;# 
   945  041D                     	;# 
   946  041E                     	;# 
   947  041F                     	;# 
   948  0498                     	;# 
   949  0498                     	;# 
   950  0499                     	;# 
   951  049A                     	;# 
   952  049B                     	;# 
   953  049B                     	;# 
   954  049C                     	;# 
   955  049D                     	;# 
   956  049E                     	;# 
   957  049F                     	;# 
   958  0617                     	;# 
   959  0618                     	;# 
   960  0619                     	;# 
   961  0619                     	;# 
   962  061A                     	;# 
   963  061B                     	;# 
   964  061C                     	;# 
   965  061C                     	;# 
   966  061F                     	;# 
   967  0691                     	;# 
   968  0692                     	;# 
   969  0693                     	;# 
   970  0694                     	;# 
   971  0695                     	;# 
   972  0696                     	;# 
   973  0697                     	;# 
   974  0698                     	;# 
   975  0699                     	;# 
   976  0711                     	;# 
   977  0712                     	;# 
   978  0713                     	;# 
   979  0714                     	;# 
   980  0715                     	;# 
   981  0716                     	;# 
   982  0717                     	;# 
   983  0718                     	;# 
   984  0719                     	;# 
   985  0891                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0892                     	;# 
   992  0892                     	;# 
   993  0892                     	;# 
   994  0893                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0894                     	;# 
  1001  0894                     	;# 
  1002  0894                     	;# 
  1003  0895                     	;# 
  1004  0895                     	;# 
  1005  0895                     	;# 
  1006  0896                     	;# 
  1007  0896                     	;# 
  1008  0896                     	;# 
  1009  089B                     	;# 
  1010  0911                     	;# 
  1011  0912                     	;# 
  1012  0913                     	;# 
  1013  0914                     	;# 
  1014  0915                     	;# 
  1015  0916                     	;# 
  1016  0918                     	;# 
  1017  0919                     	;# 
  1018  091A                     	;# 
  1019  091B                     	;# 
  1020  091C                     	;# 
  1021  091D                     	;# 
  1022  091E                     	;# 
  1023  091F                     	;# 
  1024  0E0F                     	;# 
  1025  0E10                     	;# 
  1026  0E11                     	;# 
  1027  0E12                     	;# 
  1028  0E13                     	;# 
  1029  0E14                     	;# 
  1030  0E15                     	;# 
  1031  0E16                     	;# 
  1032  0E17                     	;# 
  1033  0E18                     	;# 
  1034  0E19                     	;# 
  1035  0E1A                     	;# 
  1036  0E1B                     	;# 
  1037  0E1C                     	;# 
  1038  0E1D                     	;# 
  1039  0E1E                     	;# 
  1040  0E1F                     	;# 
  1041  0E20                     	;# 
  1042  0E21                     	;# 
  1043  0E22                     	;# 
  1044  0E24                     	;# 
  1045  0E25                     	;# 
  1046  0E28                     	;# 
  1047  0E29                     	;# 
  1048  0E2A                     	;# 
  1049  0E2B                     	;# 
  1050  0E2C                     	;# 
  1051  0E2D                     	;# 
  1052  0E2E                     	;# 
  1053  0E2F                     	;# 
  1054  0E90                     	;# 
  1055  0E91                     	;# 
  1056  0E92                     	;# 
  1057  0E94                     	;# 
  1058  0E95                     	;# 
  1059  0EA0                     	;# 
  1060  0EA1                     	;# 
  1061  0EA2                     	;# 
  1062  0EA3                     	;# 
  1063  0EA4                     	;# 
  1064  0EA5                     	;# 
  1065  0F0F                     	;# 
  1066  0F10                     	;# 
  1067  0F11                     	;# 
  1068  0F12                     	;# 
  1069  0F13                     	;# 
  1070  0F14                     	;# 
  1071  0F15                     	;# 
  1072  0F16                     	;# 
  1073  0F17                     	;# 
  1074  0F18                     	;# 
  1075  0F19                     	;# 
  1076  0F1A                     	;# 
  1077  0F1B                     	;# 
  1078  0F1C                     	;# 
  1079  0F1D                     	;# 
  1080  0F1E                     	;# 
  1081  0F1F                     	;# 
  1082  0F20                     	;# 
  1083  0F21                     	;# 
  1084  0F22                     	;# 
  1085  0F23                     	;# 
  1086  0F24                     	;# 
  1087  0F25                     	;# 
  1088  0F26                     	;# 
  1089  0F27                     	;# 
  1090  0F28                     	;# 
  1091  0F29                     	;# 
  1092  0F2A                     	;# 
  1093  0F2B                     	;# 
  1094  0F2C                     	;# 
  1095  0F2D                     	;# 
  1096  0F2E                     	;# 
  1097  0F2F                     	;# 
  1098  0F30                     	;# 
  1099  0F31                     	;# 
  1100  0F32                     	;# 
  1101  0F33                     	;# 
  1102  0F34                     	;# 
  1103  0F35                     	;# 
  1104  0F36                     	;# 
  1105  0F37                     	;# 
  1106  0FE4                     	;# 
  1107  0FE5                     	;# 
  1108  0FE6                     	;# 
  1109  0FE7                     	;# 
  1110  0FE8                     	;# 
  1111  0FE9                     	;# 
  1112  0FEA                     	;# 
  1113  0FEB                     	;# 
  1114  0FED                     	;# 
  1115  0FEE                     	;# 
  1116  0FEF                     	;# 
  1117  0000                     	;# 
  1118  0001                     	;# 
  1119  0002                     	;# 
  1120  0003                     	;# 
  1121  0004                     	;# 
  1122  0005                     	;# 
  1123  0006                     	;# 
  1124  0007                     	;# 
  1125  0008                     	;# 
  1126  0009                     	;# 
  1127  000A                     	;# 
  1128  000B                     	;# 
  1129  000C                     	;# 
  1130  000E                     	;# 
  1131  0010                     	;# 
  1132  0011                     	;# 
  1133  0012                     	;# 
  1134  0013                     	;# 
  1135  0014                     	;# 
  1136  0015                     	;# 
  1137  0015                     	;# 
  1138  0016                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  0019                     	;# 
  1144  001A                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  001D                     	;# 
  1148  001E                     	;# 
  1149  001F                     	;# 
  1150  008C                     	;# 
  1151  008E                     	;# 
  1152  0090                     	;# 
  1153  0091                     	;# 
  1154  0092                     	;# 
  1155  0093                     	;# 
  1156  0094                     	;# 
  1157  0097                     	;# 
  1158  009B                     	;# 
  1159  009B                     	;# 
  1160  009C                     	;# 
  1161  009D                     	;# 
  1162  009E                     	;# 
  1163  009F                     	;# 
  1164  010C                     	;# 
  1165  010E                     	;# 
  1166  0111                     	;# 
  1167  0112                     	;# 
  1168  0113                     	;# 
  1169  0114                     	;# 
  1170  0115                     	;# 
  1171  0116                     	;# 
  1172  0117                     	;# 
  1173  0118                     	;# 
  1174  0119                     	;# 
  1175  018C                     	;# 
  1176  018E                     	;# 
  1177  0199                     	;# 
  1178  0199                     	;# 
  1179  0199                     	;# 
  1180  019A                     	;# 
  1181  019A                     	;# 
  1182  019A                     	;# 
  1183  019B                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019C                     	;# 
  1189  019C                     	;# 
  1190  019C                     	;# 
  1191  019D                     	;# 
  1192  019D                     	;# 
  1193  019D                     	;# 
  1194  019E                     	;# 
  1195  019E                     	;# 
  1196  019E                     	;# 
  1197  019F                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  020C                     	;# 
  1203  020E                     	;# 
  1204  0211                     	;# 
  1205  0211                     	;# 
  1206  0212                     	;# 
  1207  0212                     	;# 
  1208  0213                     	;# 
  1209  0213                     	;# 
  1210  0214                     	;# 
  1211  0214                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0216                     	;# 
  1217  0216                     	;# 
  1218  0217                     	;# 
  1219  0217                     	;# 
  1220  0219                     	;# 
  1221  021A                     	;# 
  1222  021B                     	;# 
  1223  021C                     	;# 
  1224  021D                     	;# 
  1225  021D                     	;# 
  1226  021E                     	;# 
  1227  021F                     	;# 
  1228  028C                     	;# 
  1229  028E                     	;# 
  1230  0291                     	;# 
  1231  0291                     	;# 
  1232  0292                     	;# 
  1233  0293                     	;# 
  1234  0294                     	;# 
  1235  0295                     	;# 
  1236  0295                     	;# 
  1237  0296                     	;# 
  1238  0297                     	;# 
  1239  0298                     	;# 
  1240  029F                     	;# 
  1241  030C                     	;# 
  1242  030E                     	;# 
  1243  0311                     	;# 
  1244  0311                     	;# 
  1245  0312                     	;# 
  1246  0313                     	;# 
  1247  0314                     	;# 
  1248  0315                     	;# 
  1249  0315                     	;# 
  1250  0316                     	;# 
  1251  0317                     	;# 
  1252  0318                     	;# 
  1253  038C                     	;# 
  1254  038E                     	;# 
  1255  0391                     	;# 
  1256  0392                     	;# 
  1257  0393                     	;# 
  1258  0397                     	;# 
  1259  0398                     	;# 
  1260  0399                     	;# 
  1261  039A                     	;# 
  1262  039C                     	;# 
  1263  039D                     	;# 
  1264  039E                     	;# 
  1265  039F                     	;# 
  1266  0411                     	;# 
  1267  0411                     	;# 
  1268  0412                     	;# 
  1269  0413                     	;# 
  1270  0414                     	;# 
  1271  0415                     	;# 
  1272  0416                     	;# 
  1273  0417                     	;# 
  1274  0418                     	;# 
  1275  0418                     	;# 
  1276  0419                     	;# 
  1277  041A                     	;# 
  1278  041B                     	;# 
  1279  041C                     	;# 
  1280  041D                     	;# 
  1281  041E                     	;# 
  1282  041F                     	;# 
  1283  0498                     	;# 
  1284  0498                     	;# 
  1285  0499                     	;# 
  1286  049A                     	;# 
  1287  049B                     	;# 
  1288  049B                     	;# 
  1289  049C                     	;# 
  1290  049D                     	;# 
  1291  049E                     	;# 
  1292  049F                     	;# 
  1293  0617                     	;# 
  1294  0618                     	;# 
  1295  0619                     	;# 
  1296  0619                     	;# 
  1297  061A                     	;# 
  1298  061B                     	;# 
  1299  061C                     	;# 
  1300  061C                     	;# 
  1301  061F                     	;# 
  1302  0691                     	;# 
  1303  0692                     	;# 
  1304  0693                     	;# 
  1305  0694                     	;# 
  1306  0695                     	;# 
  1307  0696                     	;# 
  1308  0697                     	;# 
  1309  0698                     	;# 
  1310  0699                     	;# 
  1311  0711                     	;# 
  1312  0712                     	;# 
  1313  0713                     	;# 
  1314  0714                     	;# 
  1315  0715                     	;# 
  1316  0716                     	;# 
  1317  0717                     	;# 
  1318  0718                     	;# 
  1319  0719                     	;# 
  1320  0891                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0892                     	;# 
  1327  0892                     	;# 
  1328  0892                     	;# 
  1329  0893                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0894                     	;# 
  1336  0894                     	;# 
  1337  0894                     	;# 
  1338  0895                     	;# 
  1339  0895                     	;# 
  1340  0895                     	;# 
  1341  0896                     	;# 
  1342  0896                     	;# 
  1343  0896                     	;# 
  1344  089B                     	;# 
  1345  0911                     	;# 
  1346  0912                     	;# 
  1347  0913                     	;# 
  1348  0914                     	;# 
  1349  0915                     	;# 
  1350  0916                     	;# 
  1351  0918                     	;# 
  1352  0919                     	;# 
  1353  091A                     	;# 
  1354  091B                     	;# 
  1355  091C                     	;# 
  1356  091D                     	;# 
  1357  091E                     	;# 
  1358  091F                     	;# 
  1359  0E0F                     	;# 
  1360  0E10                     	;# 
  1361  0E11                     	;# 
  1362  0E12                     	;# 
  1363  0E13                     	;# 
  1364  0E14                     	;# 
  1365  0E15                     	;# 
  1366  0E16                     	;# 
  1367  0E17                     	;# 
  1368  0E18                     	;# 
  1369  0E19                     	;# 
  1370  0E1A                     	;# 
  1371  0E1B                     	;# 
  1372  0E1C                     	;# 
  1373  0E1D                     	;# 
  1374  0E1E                     	;# 
  1375  0E1F                     	;# 
  1376  0E20                     	;# 
  1377  0E21                     	;# 
  1378  0E22                     	;# 
  1379  0E24                     	;# 
  1380  0E25                     	;# 
  1381  0E28                     	;# 
  1382  0E29                     	;# 
  1383  0E2A                     	;# 
  1384  0E2B                     	;# 
  1385  0E2C                     	;# 
  1386  0E2D                     	;# 
  1387  0E2E                     	;# 
  1388  0E2F                     	;# 
  1389  0E90                     	;# 
  1390  0E91                     	;# 
  1391  0E92                     	;# 
  1392  0E94                     	;# 
  1393  0E95                     	;# 
  1394  0EA0                     	;# 
  1395  0EA1                     	;# 
  1396  0EA2                     	;# 
  1397  0EA3                     	;# 
  1398  0EA4                     	;# 
  1399  0EA5                     	;# 
  1400  0F0F                     	;# 
  1401  0F10                     	;# 
  1402  0F11                     	;# 
  1403  0F12                     	;# 
  1404  0F13                     	;# 
  1405  0F14                     	;# 
  1406  0F15                     	;# 
  1407  0F16                     	;# 
  1408  0F17                     	;# 
  1409  0F18                     	;# 
  1410  0F19                     	;# 
  1411  0F1A                     	;# 
  1412  0F1B                     	;# 
  1413  0F1C                     	;# 
  1414  0F1D                     	;# 
  1415  0F1E                     	;# 
  1416  0F1F                     	;# 
  1417  0F20                     	;# 
  1418  0F21                     	;# 
  1419  0F22                     	;# 
  1420  0F23                     	;# 
  1421  0F24                     	;# 
  1422  0F25                     	;# 
  1423  0F26                     	;# 
  1424  0F27                     	;# 
  1425  0F28                     	;# 
  1426  0F29                     	;# 
  1427  0F2A                     	;# 
  1428  0F2B                     	;# 
  1429  0F2C                     	;# 
  1430  0F2D                     	;# 
  1431  0F2E                     	;# 
  1432  0F2F                     	;# 
  1433  0F30                     	;# 
  1434  0F31                     	;# 
  1435  0F32                     	;# 
  1436  0F33                     	;# 
  1437  0F34                     	;# 
  1438  0F35                     	;# 
  1439  0F36                     	;# 
  1440  0F37                     	;# 
  1441  0FE4                     	;# 
  1442  0FE5                     	;# 
  1443  0FE6                     	;# 
  1444  0FE7                     	;# 
  1445  0FE8                     	;# 
  1446  0FE9                     	;# 
  1447  0FEA                     	;# 
  1448  0FEB                     	;# 
  1449  0FED                     	;# 
  1450  0FEE                     	;# 
  1451  0FEF                     	;# 
  1452  0000                     	;# 
  1453  0001                     	;# 
  1454  0002                     	;# 
  1455  0003                     	;# 
  1456  0004                     	;# 
  1457  0005                     	;# 
  1458  0006                     	;# 
  1459  0007                     	;# 
  1460  0008                     	;# 
  1461  0009                     	;# 
  1462  000A                     	;# 
  1463  000B                     	;# 
  1464  000C                     	;# 
  1465  000E                     	;# 
  1466  0010                     	;# 
  1467  0011                     	;# 
  1468  0012                     	;# 
  1469  0013                     	;# 
  1470  0014                     	;# 
  1471  0015                     	;# 
  1472  0015                     	;# 
  1473  0016                     	;# 
  1474  0016                     	;# 
  1475  0017                     	;# 
  1476  0018                     	;# 
  1477  0019                     	;# 
  1478  0019                     	;# 
  1479  001A                     	;# 
  1480  001B                     	;# 
  1481  001C                     	;# 
  1482  001D                     	;# 
  1483  001E                     	;# 
  1484  001F                     	;# 
  1485  008C                     	;# 
  1486  008E                     	;# 
  1487  0090                     	;# 
  1488  0091                     	;# 
  1489  0092                     	;# 
  1490  0093                     	;# 
  1491  0094                     	;# 
  1492  0097                     	;# 
  1493  009B                     	;# 
  1494  009B                     	;# 
  1495  009C                     	;# 
  1496  009D                     	;# 
  1497  009E                     	;# 
  1498  009F                     	;# 
  1499  010C                     	;# 
  1500  010E                     	;# 
  1501  0111                     	;# 
  1502  0112                     	;# 
  1503  0113                     	;# 
  1504  0114                     	;# 
  1505  0115                     	;# 
  1506  0116                     	;# 
  1507  0117                     	;# 
  1508  0118                     	;# 
  1509  0119                     	;# 
  1510  018C                     	;# 
  1511  018E                     	;# 
  1512  0199                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  019A                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019C                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019D                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019E                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  020C                     	;# 
  1538  020E                     	;# 
  1539  0211                     	;# 
  1540  0211                     	;# 
  1541  0212                     	;# 
  1542  0212                     	;# 
  1543  0213                     	;# 
  1544  0213                     	;# 
  1545  0214                     	;# 
  1546  0214                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0216                     	;# 
  1552  0216                     	;# 
  1553  0217                     	;# 
  1554  0217                     	;# 
  1555  0219                     	;# 
  1556  021A                     	;# 
  1557  021B                     	;# 
  1558  021C                     	;# 
  1559  021D                     	;# 
  1560  021D                     	;# 
  1561  021E                     	;# 
  1562  021F                     	;# 
  1563  028C                     	;# 
  1564  028E                     	;# 
  1565  0291                     	;# 
  1566  0291                     	;# 
  1567  0292                     	;# 
  1568  0293                     	;# 
  1569  0294                     	;# 
  1570  0295                     	;# 
  1571  0295                     	;# 
  1572  0296                     	;# 
  1573  0297                     	;# 
  1574  0298                     	;# 
  1575  029F                     	;# 
  1576  030C                     	;# 
  1577  030E                     	;# 
  1578  0311                     	;# 
  1579  0311                     	;# 
  1580  0312                     	;# 
  1581  0313                     	;# 
  1582  0314                     	;# 
  1583  0315                     	;# 
  1584  0315                     	;# 
  1585  0316                     	;# 
  1586  0317                     	;# 
  1587  0318                     	;# 
  1588  038C                     	;# 
  1589  038E                     	;# 
  1590  0391                     	;# 
  1591  0392                     	;# 
  1592  0393                     	;# 
  1593  0397                     	;# 
  1594  0398                     	;# 
  1595  0399                     	;# 
  1596  039A                     	;# 
  1597  039C                     	;# 
  1598  039D                     	;# 
  1599  039E                     	;# 
  1600  039F                     	;# 
  1601  0411                     	;# 
  1602  0411                     	;# 
  1603  0412                     	;# 
  1604  0413                     	;# 
  1605  0414                     	;# 
  1606  0415                     	;# 
  1607  0416                     	;# 
  1608  0417                     	;# 
  1609  0418                     	;# 
  1610  0418                     	;# 
  1611  0419                     	;# 
  1612  041A                     	;# 
  1613  041B                     	;# 
  1614  041C                     	;# 
  1615  041D                     	;# 
  1616  041E                     	;# 
  1617  041F                     	;# 
  1618  0498                     	;# 
  1619  0498                     	;# 
  1620  0499                     	;# 
  1621  049A                     	;# 
  1622  049B                     	;# 
  1623  049B                     	;# 
  1624  049C                     	;# 
  1625  049D                     	;# 
  1626  049E                     	;# 
  1627  049F                     	;# 
  1628  0617                     	;# 
  1629  0618                     	;# 
  1630  0619                     	;# 
  1631  0619                     	;# 
  1632  061A                     	;# 
  1633  061B                     	;# 
  1634  061C                     	;# 
  1635  061C                     	;# 
  1636  061F                     	;# 
  1637  0691                     	;# 
  1638  0692                     	;# 
  1639  0693                     	;# 
  1640  0694                     	;# 
  1641  0695                     	;# 
  1642  0696                     	;# 
  1643  0697                     	;# 
  1644  0698                     	;# 
  1645  0699                     	;# 
  1646  0711                     	;# 
  1647  0712                     	;# 
  1648  0713                     	;# 
  1649  0714                     	;# 
  1650  0715                     	;# 
  1651  0716                     	;# 
  1652  0717                     	;# 
  1653  0718                     	;# 
  1654  0719                     	;# 
  1655  0891                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0892                     	;# 
  1662  0892                     	;# 
  1663  0892                     	;# 
  1664  0893                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0894                     	;# 
  1671  0894                     	;# 
  1672  0894                     	;# 
  1673  0895                     	;# 
  1674  0895                     	;# 
  1675  0895                     	;# 
  1676  0896                     	;# 
  1677  0896                     	;# 
  1678  0896                     	;# 
  1679  089B                     	;# 
  1680  0911                     	;# 
  1681  0912                     	;# 
  1682  0913                     	;# 
  1683  0914                     	;# 
  1684  0915                     	;# 
  1685  0916                     	;# 
  1686  0918                     	;# 
  1687  0919                     	;# 
  1688  091A                     	;# 
  1689  091B                     	;# 
  1690  091C                     	;# 
  1691  091D                     	;# 
  1692  091E                     	;# 
  1693  091F                     	;# 
  1694  0E0F                     	;# 
  1695  0E10                     	;# 
  1696  0E11                     	;# 
  1697  0E12                     	;# 
  1698  0E13                     	;# 
  1699  0E14                     	;# 
  1700  0E15                     	;# 
  1701  0E16                     	;# 
  1702  0E17                     	;# 
  1703  0E18                     	;# 
  1704  0E19                     	;# 
  1705  0E1A                     	;# 
  1706  0E1B                     	;# 
  1707  0E1C                     	;# 
  1708  0E1D                     	;# 
  1709  0E1E                     	;# 
  1710  0E1F                     	;# 
  1711  0E20                     	;# 
  1712  0E21                     	;# 
  1713  0E22                     	;# 
  1714  0E24                     	;# 
  1715  0E25                     	;# 
  1716  0E28                     	;# 
  1717  0E29                     	;# 
  1718  0E2A                     	;# 
  1719  0E2B                     	;# 
  1720  0E2C                     	;# 
  1721  0E2D                     	;# 
  1722  0E2E                     	;# 
  1723  0E2F                     	;# 
  1724  0E90                     	;# 
  1725  0E91                     	;# 
  1726  0E92                     	;# 
  1727  0E94                     	;# 
  1728  0E95                     	;# 
  1729  0EA0                     	;# 
  1730  0EA1                     	;# 
  1731  0EA2                     	;# 
  1732  0EA3                     	;# 
  1733  0EA4                     	;# 
  1734  0EA5                     	;# 
  1735  0F0F                     	;# 
  1736  0F10                     	;# 
  1737  0F11                     	;# 
  1738  0F12                     	;# 
  1739  0F13                     	;# 
  1740  0F14                     	;# 
  1741  0F15                     	;# 
  1742  0F16                     	;# 
  1743  0F17                     	;# 
  1744  0F18                     	;# 
  1745  0F19                     	;# 
  1746  0F1A                     	;# 
  1747  0F1B                     	;# 
  1748  0F1C                     	;# 
  1749  0F1D                     	;# 
  1750  0F1E                     	;# 
  1751  0F1F                     	;# 
  1752  0F20                     	;# 
  1753  0F21                     	;# 
  1754  0F22                     	;# 
  1755  0F23                     	;# 
  1756  0F24                     	;# 
  1757  0F25                     	;# 
  1758  0F26                     	;# 
  1759  0F27                     	;# 
  1760  0F28                     	;# 
  1761  0F29                     	;# 
  1762  0F2A                     	;# 
  1763  0F2B                     	;# 
  1764  0F2C                     	;# 
  1765  0F2D                     	;# 
  1766  0F2E                     	;# 
  1767  0F2F                     	;# 
  1768  0F30                     	;# 
  1769  0F31                     	;# 
  1770  0F32                     	;# 
  1771  0F33                     	;# 
  1772  0F34                     	;# 
  1773  0F35                     	;# 
  1774  0F36                     	;# 
  1775  0F37                     	;# 
  1776  0FE4                     	;# 
  1777  0FE5                     	;# 
  1778  0FE6                     	;# 
  1779  0FE7                     	;# 
  1780  0FE8                     	;# 
  1781  0FE9                     	;# 
  1782  0FEA                     	;# 
  1783  0FEB                     	;# 
  1784  0FED                     	;# 
  1785  0FEE                     	;# 
  1786  0FEF                     	;# 
  1787  0000                     	;# 
  1788  0001                     	;# 
  1789  0002                     	;# 
  1790  0003                     	;# 
  1791  0004                     	;# 
  1792  0005                     	;# 
  1793  0006                     	;# 
  1794  0007                     	;# 
  1795  0008                     	;# 
  1796  0009                     	;# 
  1797  000A                     	;# 
  1798  000B                     	;# 
  1799  000C                     	;# 
  1800  000E                     	;# 
  1801  0010                     	;# 
  1802  0011                     	;# 
  1803  0012                     	;# 
  1804  0013                     	;# 
  1805  0014                     	;# 
  1806  0015                     	;# 
  1807  0015                     	;# 
  1808  0016                     	;# 
  1809  0016                     	;# 
  1810  0017                     	;# 
  1811  0018                     	;# 
  1812  0019                     	;# 
  1813  0019                     	;# 
  1814  001A                     	;# 
  1815  001B                     	;# 
  1816  001C                     	;# 
  1817  001D                     	;# 
  1818  001E                     	;# 
  1819  001F                     	;# 
  1820  008C                     	;# 
  1821  008E                     	;# 
  1822  0090                     	;# 
  1823  0091                     	;# 
  1824  0092                     	;# 
  1825  0093                     	;# 
  1826  0094                     	;# 
  1827  0097                     	;# 
  1828  009B                     	;# 
  1829  009B                     	;# 
  1830  009C                     	;# 
  1831  009D                     	;# 
  1832  009E                     	;# 
  1833  009F                     	;# 
  1834  010C                     	;# 
  1835  010E                     	;# 
  1836  0111                     	;# 
  1837  0112                     	;# 
  1838  0113                     	;# 
  1839  0114                     	;# 
  1840  0115                     	;# 
  1841  0116                     	;# 
  1842  0117                     	;# 
  1843  0118                     	;# 
  1844  0119                     	;# 
  1845  018C                     	;# 
  1846  018E                     	;# 
  1847  0199                     	;# 
  1848  0199                     	;# 
  1849  0199                     	;# 
  1850  019A                     	;# 
  1851  019A                     	;# 
  1852  019A                     	;# 
  1853  019B                     	;# 
  1854  019B                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019C                     	;# 
  1859  019C                     	;# 
  1860  019C                     	;# 
  1861  019D                     	;# 
  1862  019D                     	;# 
  1863  019D                     	;# 
  1864  019E                     	;# 
  1865  019E                     	;# 
  1866  019E                     	;# 
  1867  019F                     	;# 
  1868  019F                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  020C                     	;# 
  1873  020E                     	;# 
  1874  0211                     	;# 
  1875  0211                     	;# 
  1876  0212                     	;# 
  1877  0212                     	;# 
  1878  0213                     	;# 
  1879  0213                     	;# 
  1880  0214                     	;# 
  1881  0214                     	;# 
  1882  0215                     	;# 
  1883  0215                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0216                     	;# 
  1887  0216                     	;# 
  1888  0217                     	;# 
  1889  0217                     	;# 
  1890  0219                     	;# 
  1891  021A                     	;# 
  1892  021B                     	;# 
  1893  021C                     	;# 
  1894  021D                     	;# 
  1895  021D                     	;# 
  1896  021E                     	;# 
  1897  021F                     	;# 
  1898  028C                     	;# 
  1899  028E                     	;# 
  1900  0291                     	;# 
  1901  0291                     	;# 
  1902  0292                     	;# 
  1903  0293                     	;# 
  1904  0294                     	;# 
  1905  0295                     	;# 
  1906  0295                     	;# 
  1907  0296                     	;# 
  1908  0297                     	;# 
  1909  0298                     	;# 
  1910  029F                     	;# 
  1911  030C                     	;# 
  1912  030E                     	;# 
  1913  0311                     	;# 
  1914  0311                     	;# 
  1915  0312                     	;# 
  1916  0313                     	;# 
  1917  0314                     	;# 
  1918  0315                     	;# 
  1919  0315                     	;# 
  1920  0316                     	;# 
  1921  0317                     	;# 
  1922  0318                     	;# 
  1923  038C                     	;# 
  1924  038E                     	;# 
  1925  0391                     	;# 
  1926  0392                     	;# 
  1927  0393                     	;# 
  1928  0397                     	;# 
  1929  0398                     	;# 
  1930  0399                     	;# 
  1931  039A                     	;# 
  1932  039C                     	;# 
  1933  039D                     	;# 
  1934  039E                     	;# 
  1935  039F                     	;# 
  1936  0411                     	;# 
  1937  0411                     	;# 
  1938  0412                     	;# 
  1939  0413                     	;# 
  1940  0414                     	;# 
  1941  0415                     	;# 
  1942  0416                     	;# 
  1943  0417                     	;# 
  1944  0418                     	;# 
  1945  0418                     	;# 
  1946  0419                     	;# 
  1947  041A                     	;# 
  1948  041B                     	;# 
  1949  041C                     	;# 
  1950  041D                     	;# 
  1951  041E                     	;# 
  1952  041F                     	;# 
  1953  0498                     	;# 
  1954  0498                     	;# 
  1955  0499                     	;# 
  1956  049A                     	;# 
  1957  049B                     	;# 
  1958  049B                     	;# 
  1959  049C                     	;# 
  1960  049D                     	;# 
  1961  049E                     	;# 
  1962  049F                     	;# 
  1963  0617                     	;# 
  1964  0618                     	;# 
  1965  0619                     	;# 
  1966  0619                     	;# 
  1967  061A                     	;# 
  1968  061B                     	;# 
  1969  061C                     	;# 
  1970  061C                     	;# 
  1971  061F                     	;# 
  1972  0691                     	;# 
  1973  0692                     	;# 
  1974  0693                     	;# 
  1975  0694                     	;# 
  1976  0695                     	;# 
  1977  0696                     	;# 
  1978  0697                     	;# 
  1979  0698                     	;# 
  1980  0699                     	;# 
  1981  0711                     	;# 
  1982  0712                     	;# 
  1983  0713                     	;# 
  1984  0714                     	;# 
  1985  0715                     	;# 
  1986  0716                     	;# 
  1987  0717                     	;# 
  1988  0718                     	;# 
  1989  0719                     	;# 
  1990  0891                     	;# 
  1991  0891                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0892                     	;# 
  1997  0892                     	;# 
  1998  0892                     	;# 
  1999  0893                     	;# 
  2000  0893                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0894                     	;# 
  2006  0894                     	;# 
  2007  0894                     	;# 
  2008  0895                     	;# 
  2009  0895                     	;# 
  2010  0895                     	;# 
  2011  0896                     	;# 
  2012  0896                     	;# 
  2013  0896                     	;# 
  2014  089B                     	;# 
  2015  0911                     	;# 
  2016  0912                     	;# 
  2017  0913                     	;# 
  2018  0914                     	;# 
  2019  0915                     	;# 
  2020  0916                     	;# 
  2021  0918                     	;# 
  2022  0919                     	;# 
  2023  091A                     	;# 
  2024  091B                     	;# 
  2025  091C                     	;# 
  2026  091D                     	;# 
  2027  091E                     	;# 
  2028  091F                     	;# 
  2029  0E0F                     	;# 
  2030  0E10                     	;# 
  2031  0E11                     	;# 
  2032  0E12                     	;# 
  2033  0E13                     	;# 
  2034  0E14                     	;# 
  2035  0E15                     	;# 
  2036  0E16                     	;# 
  2037  0E17                     	;# 
  2038  0E18                     	;# 
  2039  0E19                     	;# 
  2040  0E1A                     	;# 
  2041  0E1B                     	;# 
  2042  0E1C                     	;# 
  2043  0E1D                     	;# 
  2044  0E1E                     	;# 
  2045  0E1F                     	;# 
  2046  0E20                     	;# 
  2047  0E21                     	;# 
  2048  0E22                     	;# 
  2049  0E24                     	;# 
  2050  0E25                     	;# 
  2051  0E28                     	;# 
  2052  0E29                     	;# 
  2053  0E2A                     	;# 
  2054  0E2B                     	;# 
  2055  0E2C                     	;# 
  2056  0E2D                     	;# 
  2057  0E2E                     	;# 
  2058  0E2F                     	;# 
  2059  0E90                     	;# 
  2060  0E91                     	;# 
  2061  0E92                     	;# 
  2062  0E94                     	;# 
  2063  0E95                     	;# 
  2064  0EA0                     	;# 
  2065  0EA1                     	;# 
  2066  0EA2                     	;# 
  2067  0EA3                     	;# 
  2068  0EA4                     	;# 
  2069  0EA5                     	;# 
  2070  0F0F                     	;# 
  2071  0F10                     	;# 
  2072  0F11                     	;# 
  2073  0F12                     	;# 
  2074  0F13                     	;# 
  2075  0F14                     	;# 
  2076  0F15                     	;# 
  2077  0F16                     	;# 
  2078  0F17                     	;# 
  2079  0F18                     	;# 
  2080  0F19                     	;# 
  2081  0F1A                     	;# 
  2082  0F1B                     	;# 
  2083  0F1C                     	;# 
  2084  0F1D                     	;# 
  2085  0F1E                     	;# 
  2086  0F1F                     	;# 
  2087  0F20                     	;# 
  2088  0F21                     	;# 
  2089  0F22                     	;# 
  2090  0F23                     	;# 
  2091  0F24                     	;# 
  2092  0F25                     	;# 
  2093  0F26                     	;# 
  2094  0F27                     	;# 
  2095  0F28                     	;# 
  2096  0F29                     	;# 
  2097  0F2A                     	;# 
  2098  0F2B                     	;# 
  2099  0F2C                     	;# 
  2100  0F2D                     	;# 
  2101  0F2E                     	;# 
  2102  0F2F                     	;# 
  2103  0F30                     	;# 
  2104  0F31                     	;# 
  2105  0F32                     	;# 
  2106  0F33                     	;# 
  2107  0F34                     	;# 
  2108  0F35                     	;# 
  2109  0F36                     	;# 
  2110  0F37                     	;# 
  2111  0FE4                     	;# 
  2112  0FE5                     	;# 
  2113  0FE6                     	;# 
  2114  0FE7                     	;# 
  2115  0FE8                     	;# 
  2116  0FE9                     	;# 
  2117  0FEA                     	;# 
  2118  0FEB                     	;# 
  2119  0FED                     	;# 
  2120  0FEE                     	;# 
  2121  0FEF                     	;# 
  2122  0000                     	;# 
  2123  0001                     	;# 
  2124  0002                     	;# 
  2125  0003                     	;# 
  2126  0004                     	;# 
  2127  0005                     	;# 
  2128  0006                     	;# 
  2129  0007                     	;# 
  2130  0008                     	;# 
  2131  0009                     	;# 
  2132  000A                     	;# 
  2133  000B                     	;# 
  2134  000C                     	;# 
  2135  000E                     	;# 
  2136  0010                     	;# 
  2137  0011                     	;# 
  2138  0012                     	;# 
  2139  0013                     	;# 
  2140  0014                     	;# 
  2141  0015                     	;# 
  2142  0015                     	;# 
  2143  0016                     	;# 
  2144  0016                     	;# 
  2145  0017                     	;# 
  2146  0018                     	;# 
  2147  0019                     	;# 
  2148  0019                     	;# 
  2149  001A                     	;# 
  2150  001B                     	;# 
  2151  001C                     	;# 
  2152  001D                     	;# 
  2153  001E                     	;# 
  2154  001F                     	;# 
  2155  008C                     	;# 
  2156  008E                     	;# 
  2157  0090                     	;# 
  2158  0091                     	;# 
  2159  0092                     	;# 
  2160  0093                     	;# 
  2161  0094                     	;# 
  2162  0097                     	;# 
  2163  009B                     	;# 
  2164  009B                     	;# 
  2165  009C                     	;# 
  2166  009D                     	;# 
  2167  009E                     	;# 
  2168  009F                     	;# 
  2169  010C                     	;# 
  2170  010E                     	;# 
  2171  0111                     	;# 
  2172  0112                     	;# 
  2173  0113                     	;# 
  2174  0114                     	;# 
  2175  0115                     	;# 
  2176  0116                     	;# 
  2177  0117                     	;# 
  2178  0118                     	;# 
  2179  0119                     	;# 
  2180  018C                     	;# 
  2181  018E                     	;# 
  2182  0199                     	;# 
  2183  0199                     	;# 
  2184  0199                     	;# 
  2185  019A                     	;# 
  2186  019A                     	;# 
  2187  019A                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019C                     	;# 
  2194  019C                     	;# 
  2195  019C                     	;# 
  2196  019D                     	;# 
  2197  019D                     	;# 
  2198  019D                     	;# 
  2199  019E                     	;# 
  2200  019E                     	;# 
  2201  019E                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  019F                     	;# 
  2206  019F                     	;# 
  2207  020C                     	;# 
  2208  020E                     	;# 
  2209  0211                     	;# 
  2210  0211                     	;# 
  2211  0212                     	;# 
  2212  0212                     	;# 
  2213  0213                     	;# 
  2214  0213                     	;# 
  2215  0214                     	;# 
  2216  0214                     	;# 
  2217  0215                     	;# 
  2218  0215                     	;# 
  2219  0215                     	;# 
  2220  0215                     	;# 
  2221  0216                     	;# 
  2222  0216                     	;# 
  2223  0217                     	;# 
  2224  0217                     	;# 
  2225  0219                     	;# 
  2226  021A                     	;# 
  2227  021B                     	;# 
  2228  021C                     	;# 
  2229  021D                     	;# 
  2230  021D                     	;# 
  2231  021E                     	;# 
  2232  021F                     	;# 
  2233  028C                     	;# 
  2234  028E                     	;# 
  2235  0291                     	;# 
  2236  0291                     	;# 
  2237  0292                     	;# 
  2238  0293                     	;# 
  2239  0294                     	;# 
  2240  0295                     	;# 
  2241  0295                     	;# 
  2242  0296                     	;# 
  2243  0297                     	;# 
  2244  0298                     	;# 
  2245  029F                     	;# 
  2246  030C                     	;# 
  2247  030E                     	;# 
  2248  0311                     	;# 
  2249  0311                     	;# 
  2250  0312                     	;# 
  2251  0313                     	;# 
  2252  0314                     	;# 
  2253  0315                     	;# 
  2254  0315                     	;# 
  2255  0316                     	;# 
  2256  0317                     	;# 
  2257  0318                     	;# 
  2258  038C                     	;# 
  2259  038E                     	;# 
  2260  0391                     	;# 
  2261  0392                     	;# 
  2262  0393                     	;# 
  2263  0397                     	;# 
  2264  0398                     	;# 
  2265  0399                     	;# 
  2266  039A                     	;# 
  2267  039C                     	;# 
  2268  039D                     	;# 
  2269  039E                     	;# 
  2270  039F                     	;# 
  2271  0411                     	;# 
  2272  0411                     	;# 
  2273  0412                     	;# 
  2274  0413                     	;# 
  2275  0414                     	;# 
  2276  0415                     	;# 
  2277  0416                     	;# 
  2278  0417                     	;# 
  2279  0418                     	;# 
  2280  0418                     	;# 
  2281  0419                     	;# 
  2282  041A                     	;# 
  2283  041B                     	;# 
  2284  041C                     	;# 
  2285  041D                     	;# 
  2286  041E                     	;# 
  2287  041F                     	;# 
  2288  0498                     	;# 
  2289  0498                     	;# 
  2290  0499                     	;# 
  2291  049A                     	;# 
  2292  049B                     	;# 
  2293  049B                     	;# 
  2294  049C                     	;# 
  2295  049D                     	;# 
  2296  049E                     	;# 
  2297  049F                     	;# 
  2298  0617                     	;# 
  2299  0618                     	;# 
  2300  0619                     	;# 
  2301  0619                     	;# 
  2302  061A                     	;# 
  2303  061B                     	;# 
  2304  061C                     	;# 
  2305  061C                     	;# 
  2306  061F                     	;# 
  2307  0691                     	;# 
  2308  0692                     	;# 
  2309  0693                     	;# 
  2310  0694                     	;# 
  2311  0695                     	;# 
  2312  0696                     	;# 
  2313  0697                     	;# 
  2314  0698                     	;# 
  2315  0699                     	;# 
  2316  0711                     	;# 
  2317  0712                     	;# 
  2318  0713                     	;# 
  2319  0714                     	;# 
  2320  0715                     	;# 
  2321  0716                     	;# 
  2322  0717                     	;# 
  2323  0718                     	;# 
  2324  0719                     	;# 
  2325  0891                     	;# 
  2326  0891                     	;# 
  2327  0891                     	;# 
  2328  0891                     	;# 
  2329  0891                     	;# 
  2330  0891                     	;# 
  2331  0892                     	;# 
  2332  0892                     	;# 
  2333  0892                     	;# 
  2334  0893                     	;# 
  2335  0893                     	;# 
  2336  0893                     	;# 
  2337  0893                     	;# 
  2338  0893                     	;# 
  2339  0893                     	;# 
  2340  0894                     	;# 
  2341  0894                     	;# 
  2342  0894                     	;# 
  2343  0895                     	;# 
  2344  0895                     	;# 
  2345  0895                     	;# 
  2346  0896                     	;# 
  2347  0896                     	;# 
  2348  0896                     	;# 
  2349  089B                     	;# 
  2350  0911                     	;# 
  2351  0912                     	;# 
  2352  0913                     	;# 
  2353  0914                     	;# 
  2354  0915                     	;# 
  2355  0916                     	;# 
  2356  0918                     	;# 
  2357  0919                     	;# 
  2358  091A                     	;# 
  2359  091B                     	;# 
  2360  091C                     	;# 
  2361  091D                     	;# 
  2362  091E                     	;# 
  2363  091F                     	;# 
  2364  0E0F                     	;# 
  2365  0E10                     	;# 
  2366  0E11                     	;# 
  2367  0E12                     	;# 
  2368  0E13                     	;# 
  2369  0E14                     	;# 
  2370  0E15                     	;# 
  2371  0E16                     	;# 
  2372  0E17                     	;# 
  2373  0E18                     	;# 
  2374  0E19                     	;# 
  2375  0E1A                     	;# 
  2376  0E1B                     	;# 
  2377  0E1C                     	;# 
  2378  0E1D                     	;# 
  2379  0E1E                     	;# 
  2380  0E1F                     	;# 
  2381  0E20                     	;# 
  2382  0E21                     	;# 
  2383  0E22                     	;# 
  2384  0E24                     	;# 
  2385  0E25                     	;# 
  2386  0E28                     	;# 
  2387  0E29                     	;# 
  2388  0E2A                     	;# 
  2389  0E2B                     	;# 
  2390  0E2C                     	;# 
  2391  0E2D                     	;# 
  2392  0E2E                     	;# 
  2393  0E2F                     	;# 
  2394  0E90                     	;# 
  2395  0E91                     	;# 
  2396  0E92                     	;# 
  2397  0E94                     	;# 
  2398  0E95                     	;# 
  2399  0EA0                     	;# 
  2400  0EA1                     	;# 
  2401  0EA2                     	;# 
  2402  0EA3                     	;# 
  2403  0EA4                     	;# 
  2404  0EA5                     	;# 
  2405  0F0F                     	;# 
  2406  0F10                     	;# 
  2407  0F11                     	;# 
  2408  0F12                     	;# 
  2409  0F13                     	;# 
  2410  0F14                     	;# 
  2411  0F15                     	;# 
  2412  0F16                     	;# 
  2413  0F17                     	;# 
  2414  0F18                     	;# 
  2415  0F19                     	;# 
  2416  0F1A                     	;# 
  2417  0F1B                     	;# 
  2418  0F1C                     	;# 
  2419  0F1D                     	;# 
  2420  0F1E                     	;# 
  2421  0F1F                     	;# 
  2422  0F20                     	;# 
  2423  0F21                     	;# 
  2424  0F22                     	;# 
  2425  0F23                     	;# 
  2426  0F24                     	;# 
  2427  0F25                     	;# 
  2428  0F26                     	;# 
  2429  0F27                     	;# 
  2430  0F28                     	;# 
  2431  0F29                     	;# 
  2432  0F2A                     	;# 
  2433  0F2B                     	;# 
  2434  0F2C                     	;# 
  2435  0F2D                     	;# 
  2436  0F2E                     	;# 
  2437  0F2F                     	;# 
  2438  0F30                     	;# 
  2439  0F31                     	;# 
  2440  0F32                     	;# 
  2441  0F33                     	;# 
  2442  0F34                     	;# 
  2443  0F35                     	;# 
  2444  0F36                     	;# 
  2445  0F37                     	;# 
  2446  0FE4                     	;# 
  2447  0FE5                     	;# 
  2448  0FE6                     	;# 
  2449  0FE7                     	;# 
  2450  0FE8                     	;# 
  2451  0FE9                     	;# 
  2452  0FEA                     	;# 
  2453  0FEB                     	;# 
  2454  0FED                     	;# 
  2455  0FEE                     	;# 
  2456  0FEF                     	;# 
  2457                           
  2458                           	psect	idataBANK1
  2459  07FE                     __pidataBANK1:	
  2460 ;;nrf24l01Service@width	offset	0
  2461 ;;nrf24l01Service@i	offset	1
  2462 ;;strcpy@cp	offset	0
  2463 ;;strcpy@to	offset=-2 (param)
  2464 ;;strcpy@from	offset=-4 (param)
  2465 ;;strcmp@s1	offset	0
  2466 ;;strcmp@r	offset	1
  2467 ;;strcmp@s2	offset=-1 (param)
  2468 ;;nrf24l01SetTXPipe@pipe	offset	0
  2469 ;;___bmul@multiplier	offset	0
  2470 ;;___bmul@product	offset	1
  2471 ;;___bmul@multiplicand	offset=-1 (param)
  2472 ;;nrf24l01SendTXBuffer@packet	offset	0
  2473 ;;nrf24l01SendTXBuffer@i	offset	1
  2474 ;;nrf24l01SendTXBuffer@width	offset	2
  2475 ;;strlen@s	offset	0
  2476 ;;strlen@cp	offset	1
  2477 ;;nrf24l01SetRXMode@rxMode	offset	0
  2478 ;;nrf24l01Send@command	offset	0
  2479 ;;nrf24l01Send@data	offset=-1 (param)
  2480 ;;nrf24l01SPISend@data	offset	0
  2481 ;;memset@p	offset	0
  2482 ;;memset@p1	offset=-2 (param)
  2483 ;;memset@c	offset=-4 (param)
  2484 ;;memset@n	offset=-6 (param)
  2485 ;;nrf24l01Service@width	offset	0
  2486 ;;nrf24l01Service@i	offset	1
  2487 ;;strcpy@cp	offset	0
  2488 ;;strcpy@to	offset=-2 (param)
  2489 ;;strcpy@from	offset=-4 (param)
  2490 ;;strcmp@s1	offset	0
  2491 ;;strcmp@r	offset	1
  2492 ;;strcmp@s2	offset=-1 (param)
  2493 ;;nrf24l01SetTXPipe@pipe	offset	0
  2494 ;;___bmul@multiplier	offset	0
  2495 ;;___bmul@product	offset	1
  2496 ;;___bmul@multiplicand	offset=-1 (param)
  2497 ;;nrf24l01SendTXBuffer@packet	offset	0
  2498 ;;nrf24l01SendTXBuffer@i	offset	1
  2499 ;;nrf24l01SendTXBuffer@width	offset	2
  2500 ;;strlen@s	offset	0
  2501 ;;strlen@cp	offset	1
  2502 ;;nrf24l01SetRXMode@rxMode	offset	0
  2503 ;;nrf24l01Send@command	offset	0
  2504 ;;nrf24l01Send@data	offset=-1 (param)
  2505 ;;nrf24l01SPISend@data	offset	0
  2506 ;;memset@p	offset	0
  2507 ;;memset@p1	offset=-2 (param)
  2508 ;;memset@c	offset=-4 (param)
  2509 ;;memset@n	offset=-6 (param)
  2510                           
  2511                           
  2512                           ;initializer for _romData
  2513  07FE  34C1               	retlw	low (_romDataMap| (0+256))
  2514                           
  2515                           	psect	stringtext1
  2516  1000                     __pstringtext1:	
  2517  1000                     _dpowers:	
  2518  1000  3401               	retlw	1
  2519  1001  3400               	retlw	0
  2520  1002  3400               	retlw	0
  2521  1003  3400               	retlw	0
  2522  1004  340A               	retlw	10
  2523  1005  3400               	retlw	0
  2524  1006  3400               	retlw	0
  2525  1007  3400               	retlw	0
  2526  1008  3464               	retlw	100
  2527  1009  3400               	retlw	0
  2528  100A  3400               	retlw	0
  2529  100B  3400               	retlw	0
  2530  100C  34E8               	retlw	232
  2531  100D  3403               	retlw	3
  2532  100E  3400               	retlw	0
  2533  100F  3400               	retlw	0
  2534  1010  3410               	retlw	16
  2535  1011  3427               	retlw	39
  2536  1012  3400               	retlw	0
  2537  1013  3400               	retlw	0
  2538  1014  34A0               	retlw	160
  2539  1015  3486               	retlw	134
  2540  1016  3401               	retlw	1
  2541  1017  3400               	retlw	0
  2542  1018  3440               	retlw	64
  2543  1019  3442               	retlw	66
  2544  101A  340F               	retlw	15
  2545  101B  3400               	retlw	0
  2546  101C  3480               	retlw	128
  2547  101D  3496               	retlw	150
  2548  101E  3498               	retlw	152
  2549  101F  3400               	retlw	0
  2550  1020  3400               	retlw	0
  2551  1021  34E1               	retlw	225
  2552  1022  34F5               	retlw	245
  2553  1023  3405               	retlw	5
  2554  1024  3400               	retlw	0
  2555  1025  34CA               	retlw	202
  2556  1026  349A               	retlw	154
  2557  1027  343B               	retlw	59
  2558  1028                     __end_of_dpowers:	
  2559                           
  2560                           	psect	stringtext2
  2561  103A                     __pstringtext2:	
  2562  103A                     _n_ADDRESS_P0:	
  2563  103A  34AD               	retlw	173
  2564  103B  3487               	retlw	135
  2565  103C  3466               	retlw	102
  2566  103D  34BC               	retlw	188
  2567  103E  34BB               	retlw	187
  2568  103F                     __end_of_n_ADDRESS_P0:	
  2569                           
  2570                           	psect	stringtext3
  2571  1028                     __pstringtext3:	
  2572  1028                     _n_ADDRESS_MUL:	
  2573  1028  3421               	retlw	33
  2574  1029                     __end_of_n_ADDRESS_MUL:	
  2575  001A                     _TMR1H	set	26
  2576  0019                     _TMR1L	set	25
  2577  001C                     _T1GCONbits	set	28
  2578  001B                     _T1CONbits	set	27
  2579  000B                     _INTCONbits	set	11
  2580  0011                     _PIR1bits	set	17
  2581  0010                     _PIR0bits	set	16
  2582  000C                     _PORTAbits	set	12
  2583  000E                     _PORTCbits	set	14
  2584  0003                     _STATUSbits	set	3
  2585  0091                     _PIE1bits	set	145
  2586  009E                     _ADCON1bits	set	158
  2587  009C                     _ADRESH	set	156
  2588  009B                     _ADRESL	set	155
  2589  009D                     _ADCON0bits	set	157
  2590  0090                     _PIE0bits	set	144
  2591  0097                     _WDTCONbits	set	151
  2592  008E                     _TRISCbits	set	142
  2593  008C                     _TRISAbits	set	140
  2594  0117                     _FVRCONbits	set	279
  2595  018E                     _ANSELCbits	set	398
  2596  018C                     _ANSELAbits	set	396
  2597  018E                     _ANSELC	set	398
  2598  018C                     _ANSELA	set	396
  2599  020C                     _WPUAbits	set	524
  2600  020E                     _WPUC	set	526
  2601  020C                     _WPUA	set	524
  2602  0211                     _SSP1BUF	set	529
  2603  0214                     _SSP1STATbits	set	532
  2604  0215                     _SSP1CON1bits	set	533
  2605  028C                     _ODCONAbits	set	652
  2606  028E                     _ODCONC	set	654
  2607  028C                     _ODCONA	set	652
  2608  0391                     _IOCAPbits	set	913
  2609  038E                     _INLVLC	set	910
  2610  038C                     _INLVLA	set	908
  2611  0896                     _NVMCON2	set	2198
  2612  0895                     _NVMCON1bits	set	2197
  2613  0893                     _NVMDATL	set	2195
  2614  0891                     _NVMADRL	set	2193
  2615  0892                     _NVMADRH	set	2194
  2616  0919                     _OSCCON1bits	set	2329
  2617  0EA0                     _RC0PPSbits	set	3744
  2618  0EA2                     _RC2PPSbits	set	3746
  2619  0EA1                     _RC1PPSbits	set	3745
  2620  1029                     STR_8:	
  2621  1029  3425               	retlw	37	;'%'
  2622  102A  346C               	retlw	108	;'l'
  2623  102B  3475               	retlw	117	;'u'
  2624  102C  342E               	retlw	46	;'.'
  2625  102D  3425               	retlw	37	;'%'
  2626  102E  3436               	retlw	54	;'6'
  2627  102F  342E               	retlw	46	;'.'
  2628  1030  3436               	retlw	54	;'6'
  2629  1031  346C               	retlw	108	;'l'
  2630  1032  3475               	retlw	117	;'u'
  2631  1033  3400               	retlw	0
  2632                           
  2633                           	psect	stringtext4
  2634  1034                     __pstringtext4:	
  2635  1034                     STR_3:	
  2636  1034  3443               	retlw	67	;'C'
  2637  1035  344F               	retlw	79	;'O'
  2638  1036  3455               	retlw	85	;'U'
  2639  1037  344E               	retlw	78	;'N'
  2640  1038  3454               	retlw	84	;'T'
  2641  1039  3400               	retlw	0
  2642                           
  2643                           	psect	stringtext5
  2644  103F                     __pstringtext5:	
  2645  103F                     STR_5:	
  2646  103F  3454               	retlw	84	;'T'
  2647  1040  3445               	retlw	69	;'E'
  2648  1041  344D               	retlw	77	;'M'
  2649  1042  3450               	retlw	80	;'P'
  2650  1043  3400               	retlw	0
  2651                           
  2652                           	psect	stringtext6
  2653  1044                     __pstringtext6:	
  2654  1044                     STR_4:	
  2655  1044  3456               	retlw	86	;'V'
  2656  1045  3442               	retlw	66	;'B'
  2657  1046  3441               	retlw	65	;'A'
  2658  1047  3454               	retlw	84	;'T'
  2659  1048  3400               	retlw	0
  2660                           
  2661                           	psect	stringtext7
  2662  1049                     __pstringtext7:	
  2663  1049                     STR_7:	
  2664  1049  3442               	retlw	66	;'B'
  2665  104A  344F               	retlw	79	;'O'
  2666  104B  344F               	retlw	79	;'O'
  2667  104C  3454               	retlw	84	;'T'
  2668  104D  3400               	retlw	0
  2669                           
  2670                           	psect	stringtext8
  2671  104E                     __pstringtext8:	
  2672  104E                     STR_6:	
  2673  104E  3455               	retlw	85	;'U'
  2674  104F  3457               	retlw	87	;'W'
  2675  1050  3454               	retlw	84	;'T'
  2676  1051  3400               	retlw	0
  2677                           
  2678                           	psect	stringtext9
  2679  1052                     __pstringtext9:	
  2680  1052                     STR_1:	
  2681  1052  342F               	retlw	47	;'/'
  2682  1053  3400               	retlw	0
  2683                           
  2684                           	psect	stringtext10
  2685  0000                     __pstringtext10:	
  2686  1052                     
  2687                           ; #config settings
  2688  0000                     
  2689                           	psect	cinit
  2690  002F                     start_initialization:	
  2691  002F                     __initialization:	
  2692                           
  2693                           ; Initialize objects allocated to BANK1
  2694  002F  0021               	movlb	1	; select bank1
  2695  0030  3187  27FE  3180   	fcall	__pidataBANK1	;fetch initializer
  2696  0033  00E9               	movwf	__pdataBANK1& (0+127)
  2697                           
  2698                           ; Clear objects allocated to BANK0
  2699  0034  3062               	movlw	low __pbssBANK0
  2700  0035  0084               	movwf	4
  2701  0036  3000               	movlw	high __pbssBANK0
  2702  0037  0085               	movwf	5
  2703  0038  3007               	movlw	7
  2704  0039  3188  201C  3180   	fcall	clear_ram0
  2705                           
  2706                           ; Clear objects allocated to BANK1
  2707  003C  30DF               	movlw	low __pbssBANK1
  2708  003D  0084               	movwf	4
  2709  003E  3000               	movlw	high __pbssBANK1
  2710  003F  0085               	movwf	5
  2711  0040  300A               	movlw	10
  2712  0041  3188  201C  3180   	fcall	clear_ram0
  2713                           
  2714                           ; Clear objects allocated to BANK2
  2715  0044  304D               	movlw	low __pbssBANK2
  2716  0045  0084               	movwf	4
  2717  0046  3001               	movlw	high __pbssBANK2
  2718  0047  0085               	movwf	5
  2719  0048  3021               	movlw	33
  2720  0049  3188  201C  3180   	fcall	clear_ram0
  2721                           
  2722                           ; Clear objects allocated to BANK3
  2723  004C  30A0               	movlw	low __pbssBANK3
  2724  004D  0084               	movwf	4
  2725  004E  3001               	movlw	high __pbssBANK3
  2726  004F  0085               	movwf	5
  2727  0050  304E               	movlw	78
  2728  0051  3188  201C  3180   	fcall	clear_ram0
  2729                           
  2730                           ; Clear objects allocated to BANK4
  2731  0054  3020               	movlw	low __pbssBANK4
  2732  0055  0084               	movwf	4
  2733  0056  3002               	movlw	high __pbssBANK4
  2734  0057  0085               	movwf	5
  2735  0058  3021               	movlw	33
  2736  0059  3188  201C         	fcall	clear_ram0
  2737  005B                     end_of_initialization:	
  2738                           ;End of C runtime variable initialization code
  2739                           
  2740  005B                     __end_of__initialization:	
  2741  005B  0020               	movlb	0
  2742                           
  2743                           ;Initialize the stack pointer (FSR1)
  2744  005C  3061               	movlw	low ___sp
  2745  005D  0086               	movwf	6
  2746  005E  3021               	movlw	high ___sp
  2747  005F  0087               	movwf	7
  2748  0060  3187  2F69         	ljmp	_main	;jump to C main() function
  2749                           
  2750                           	psect	bssBANK0
  2751  0062                     __pbssBANK0:	
  2752  0062                     _status:	
  2753  0062                     	ds	5
  2754  0067                     _waiting:	
  2755  0067                     	ds	1
  2756  0068                     _lastTXPacket:	
  2757  0068                     	ds	1
  2758                           
  2759                           	psect	bssBANK1
  2760  00DF                     __pbssBANK1:	
  2761  00DF                     _distance:	
  2762  00DF                     	ds	2
  2763  00E1                     _rcount:	
  2764  00E1                     	ds	2
  2765  00E3                     _rlimit:	
  2766  00E3                     	ds	2
  2767  00E5                     _rloop:	
  2768  00E5                     	ds	2
  2769  00E7                     _counter:	
  2770  00E7                     	ds	2
  2771                           
  2772                           	psect	dataBANK1
  2773  00E9                     __pdataBANK1:	
  2774  00E9                     _romData:	
  2775  00E9                     	ds	1
  2776                           
  2777                           	psect	bssBANK2
  2778  014D                     __pbssBANK2:	
  2779  014D                     _RXPacket:	
  2780  014D                     	ds	33
  2781                           
  2782                           	psect	bssBANK3
  2783  01A0                     __pbssBANK3:	
  2784  01A0                     _TXPacket:	
  2785  01A0                     	ds	33
  2786  01C1                     _romDataMap:	
  2787  01C1                     	ds	28
  2788  01DD                     ftoa@buf:	
  2789  01DD                     	ds	17
  2790                           
  2791                           	psect	bssBANK4
  2792  0220                     __pbssBANK4:	
  2793  0220                     _userRXPacket:	
  2794  0220                     	ds	33
  2795                           
  2796                           	psect	clrtext
  2797  081C                     clear_ram0:	
  2798                           ;	Called with FSR0 containing the base address, and
  2799                           ;	WREG with the size to clear
  2800                           
  2801  081C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2802  081D                     clrloop0:	
  2803  081D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2804  081E  3101               	addfsr 0,1
  2805  081F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2806  0820  281D               	goto	clrloop0	;have we reached the end yet?
  2807  0821  3400               	retlw	0	;all done for this memory range, return
  2808                           
  2809                           	psect	cstackBANK2
  2810  0120                     __pcstackBANK2:	
  2811  0120                     loop@vt:	
  2812                           
  2813                           ; 3 bytes @ 0x0
  2814  0120                     	ds	3
  2815  0123                     loop@ta:	
  2816                           
  2817                           ; 3 bytes @ 0x3
  2818  0123                     	ds	3
  2819  0126                     _loop$2253:	
  2820                           
  2821                           ; 3 bytes @ 0x6
  2822  0126                     	ds	3
  2823  0129                     _loop$2254:	
  2824                           
  2825                           ; 3 bytes @ 0x9
  2826  0129                     	ds	3
  2827  012C                     loop@packet:	
  2828                           
  2829                           ; 33 bytes @ 0xC
  2830  012C                     	ds	33
  2831                           
  2832                           	psect	cstackBANK1
  2833  00A0                     __pcstackBANK1:	
  2834  00A0                     ?_ftoa:	
  2835  00A0                     ftoa@f:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838                           
  2839                           ; 3 bytes @ 0x0
  2840  00A0                     	ds	3
  2841  00A3                     ftoa@status:	
  2842                           
  2843                           ; 1 bytes @ 0x3
  2844  00A3                     	ds	1
  2845  00A4                     ftoa@rem:	
  2846                           
  2847                           ; 4 bytes @ 0x4
  2848  00A4                     	ds	4
  2849  00A8                     ftoa@l:	
  2850                           
  2851                           ; 4 bytes @ 0x8
  2852  00A8                     	ds	4
  2853  00AC                     ftoa@cp:	
  2854                           
  2855                           ; 1 bytes @ 0xC
  2856  00AC                     	ds	1
  2857  00AD                     ?_strcat:	
  2858  00AD                     strcat@to:	
  2859                           ; 2 bytes @ 0xD
  2860                           
  2861                           
  2862                           ; 2 bytes @ 0xD
  2863  00AD                     	ds	2
  2864  00AF                     strcat@from:	
  2865                           
  2866                           ; 2 bytes @ 0xF
  2867  00AF                     	ds	2
  2868  00B1                     strcat@cp:	
  2869                           
  2870                           ; 2 bytes @ 0x11
  2871  00B1                     	ds	2
  2872  00B3                     ?_sendMessage:	
  2873  00B3                     sendMessage@packet:	
  2874                           ; 1 bytes @ 0x13
  2875                           
  2876                           
  2877                           ; 2 bytes @ 0x13
  2878  00B3                     	ds	2
  2879  00B5                     sendMessage@topic:	
  2880                           
  2881                           ; 2 bytes @ 0x15
  2882  00B5                     	ds	2
  2883  00B7                     sendMessage@value:	
  2884                           
  2885                           ; 3 bytes @ 0x17
  2886  00B7                     	ds	3
  2887  00BA                     sendMessage@ftoaStatus:	
  2888                           
  2889                           ; 2 bytes @ 0x1A
  2890  00BA                     	ds	2
  2891  00BC                     ??_main:	
  2892                           
  2893                           ; 1 bytes @ 0x1C
  2894  00BC                     	ds	1
  2895  00BD                     main@pipe:	
  2896                           
  2897                           ; 1 bytes @ 0x1D
  2898  00BD                     	ds	1
  2899  00BE                     main@packet:	
  2900                           
  2901                           ; 33 bytes @ 0x1E
  2902  00BE                     	ds	33
  2903                           
  2904                           	psect	cstackCOMMON
  2905  0070                     __pcstackCOMMON:	
  2906  0070                     ?_isdigit:	
  2907  0070                     ?_EEPROMWrite:	
  2908                           ; 1 bit 
  2909                           
  2910  0070                     ?_nrf24l01ISR:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ??_nrf24l01ISR:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ?_nrf24l01SendPacket:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_nrf24l01Init:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_nrf24l01SetRXPipe:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ??_nrf24l01SetRXPipe:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_EEPROMRead:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ??_isdigit:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ??___ftpack:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_nrf24l01InterfaceInit:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ??_nrf24l01InterfaceInit:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_resetWDT:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ??_resetWDT:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_sleepMs:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_ISR:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_loop:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_nrf24l01GetPipe:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_main:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_nrf24l01InitRegisters:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ??___lldiv:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ??___ftge:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ??___llmod:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0070                     ?___wmul:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0070                     ?___lwmod:	
  2980                           ; 2 bytes @ 0x0
  2981                           
  2982  0070                     ?___awtoft:	
  2983                           ; 2 bytes @ 0x0
  2984                           
  2985  0070                     ?___lbtoft:	
  2986                           ; 3 bytes @ 0x0
  2987                           
  2988  0070                     ?___lltoft:	
  2989                           ; 3 bytes @ 0x0
  2990                           
  2991  0070                     ?___lwtoft:	
  2992                           ; 3 bytes @ 0x0
  2993                           
  2994  0070                     ___llmod@counter:	
  2995                           ; 3 bytes @ 0x0
  2996                           
  2997  0070                     _isdigit$1998:	
  2998                           ; 1 bytes @ 0x0
  2999                           
  3000  0070                     sleepMs@milliseconds:	
  3001                           ; 1 bytes @ 0x0
  3002                           
  3003  0070                     nrf24l01SendPacket@txPacket:	
  3004                           ; 2 bytes @ 0x0
  3005                           
  3006  0070                     EEPROMWrite@address:	
  3007                           ; 2 bytes @ 0x0
  3008                           
  3009  0070                     EEPROMRead@address:	
  3010                           ; 2 bytes @ 0x0
  3011                           
  3012  0070                     ___wmul@multiplier:	
  3013                           ; 2 bytes @ 0x0
  3014                           
  3015  0070                     ___awtoft@c:	
  3016                           ; 2 bytes @ 0x0
  3017                           
  3018  0070                     ___lwmod@divisor:	
  3019                           ; 2 bytes @ 0x0
  3020                           
  3021  0070                     ___lwtoft@c:	
  3022                           ; 2 bytes @ 0x0
  3023                           
  3024  0070                     ___lltoft@c:	
  3025                           ; 2 bytes @ 0x0
  3026                           
  3027                           
  3028                           ; 4 bytes @ 0x0
  3029  0070                     	ds	1
  3030  0071                     nrf24l01SetRXPipe@pipe:	
  3031  0071                     isdigit@c:	
  3032                           ; 1 bytes @ 0x1
  3033                           
  3034                           
  3035                           ; 1 bytes @ 0x1
  3036  0071                     	ds	1
  3037  0072                     ??_nrf24l01SendPacket:	
  3038  0072                     ??_EEPROMRead:	
  3039                           ; 1 bytes @ 0x2
  3040                           
  3041  0072                     ??_sleepMs:	
  3042                           ; 1 bytes @ 0x2
  3043                           
  3044  0072                     nrf24l01SetRXPipe@enRXAddr:	
  3045                           ; 1 bytes @ 0x2
  3046                           
  3047  0072                     EEPROMWrite@data:	
  3048                           ; 1 bytes @ 0x2
  3049                           
  3050  0072                     ___wmul@multiplicand:	
  3051                           ; 1 bytes @ 0x2
  3052                           
  3053  0072                     ___lwmod@dividend:	
  3054                           ; 2 bytes @ 0x2
  3055                           
  3056                           
  3057                           ; 2 bytes @ 0x2
  3058  0072                     	ds	1
  3059  0073                     ??_EEPROMWrite:	
  3060  0073                     ??_nrf24l01InitRegisters:	
  3061                           ; 1 bytes @ 0x3
  3062                           
  3063  0073                     ??___awtoft:	
  3064                           ; 1 bytes @ 0x3
  3065                           
  3066  0073                     ??___lwtoft:	
  3067                           ; 1 bytes @ 0x3
  3068                           
  3069  0073                     sleepMs@wdtps:	
  3070                           ; 1 bytes @ 0x3
  3071                           
  3072  0073                     EEPROMWrite@GIEBitValue:	
  3073                           ; 1 bytes @ 0x3
  3074                           
  3075  0073                     ___awtoft@sign:	
  3076                           ; 1 bytes @ 0x3
  3077                           
  3078                           
  3079                           ; 1 bytes @ 0x3
  3080  0073                     	ds	1
  3081  0074                     ??_strcat:	
  3082  0074                     ??_ftoa:	
  3083                           ; 1 bytes @ 0x4
  3084                           
  3085  0074                     ??_sendMessage:	
  3086                           ; 1 bytes @ 0x4
  3087                           
  3088  0074                     ??_loop:	
  3089                           ; 1 bytes @ 0x4
  3090                           
  3091  0074                     ??___wmul:	
  3092                           ; 1 bytes @ 0x4
  3093                           
  3094  0074                     ??___ftmul:	
  3095                           ; 1 bytes @ 0x4
  3096                           
  3097  0074                     ??___ftneg:	
  3098                           ; 1 bytes @ 0x4
  3099                           
  3100  0074                     ??___ftsub:	
  3101                           ; 1 bytes @ 0x4
  3102                           
  3103  0074                     ??___fttol:	
  3104                           ; 1 bytes @ 0x4
  3105                           
  3106  0074                     ??___lbtoft:	
  3107                           ; 1 bytes @ 0x4
  3108                           
  3109  0074                     ??___lltoft:	
  3110                           ; 1 bytes @ 0x4
  3111                           
  3112  0074                     ??___lwmod:	
  3113                           ; 1 bytes @ 0x4
  3114                           
  3115                           
  3116                           	psect	cstackBANK0
  3117  0020                     __pcstackBANK0:	
  3118                           ; 1 bytes @ 0x4
  3119                           
  3120  0020                     ??_ISR:	
  3121                           
  3122                           ; 1 bytes @ 0x0
  3123  0020                     	ds	7
  3124  0027                     ?___ftge:	
  3125  0027                     ?___ftpack:	
  3126                           ; 1 bit 
  3127                           
  3128  0027                     ?___lldiv:	
  3129                           ; 3 bytes @ 0x7
  3130                           
  3131  0027                     nrf24l01InitRegisters@channel:	
  3132                           ; 4 bytes @ 0x7
  3133                           
  3134  0027                     ___lwmod@counter:	
  3135                           ; 1 bytes @ 0x7
  3136                           
  3137  0027                     nrf24l01SendPacket@loopCount:	
  3138                           ; 1 bytes @ 0x7
  3139                           
  3140  0027                     ___wmul@product:	
  3141                           ; 2 bytes @ 0x7
  3142                           
  3143  0027                     ___ftpack@arg:	
  3144                           ; 2 bytes @ 0x7
  3145                           
  3146  0027                     ___ftge@ff1:	
  3147                           ; 3 bytes @ 0x7
  3148                           
  3149  0027                     ___lldiv@divisor:	
  3150                           ; 3 bytes @ 0x7
  3151                           
  3152                           
  3153                           ; 4 bytes @ 0x7
  3154  0027                     	ds	1
  3155  0028                     ??_nrf24l01GetPipe:	
  3156  0028                     nrf24l01InitRegisters@setupAW:	
  3157                           ; 1 bytes @ 0x8
  3158                           
  3159                           
  3160                           ; 1 bytes @ 0x8
  3161  0028                     	ds	1
  3162  0029                     nrf24l01GetPipe@pipe:	
  3163  0029                     nrf24l01InitRegisters@feature:	
  3164                           ; 1 bytes @ 0x9
  3165                           
  3166                           
  3167                           ; 1 bytes @ 0x9
  3168  0029                     	ds	1
  3169  002A                     nrf24l01GetPipe@name:	
  3170  002A                     nrf24l01InitRegisters@rfSetup:	
  3171                           ; 1 bytes @ 0xA
  3172                           
  3173  002A                     ___ftpack@exp:	
  3174                           ; 1 bytes @ 0xA
  3175                           
  3176  002A                     ___ftge@ff2:	
  3177                           ; 1 bytes @ 0xA
  3178                           
  3179                           
  3180                           ; 3 bytes @ 0xA
  3181  002A                     	ds	1
  3182  002B                     nrf24l01GetPipe@i:	
  3183  002B                     nrf24l01InitRegisters@enAA:	
  3184                           ; 1 bytes @ 0xB
  3185                           
  3186  002B                     ___ftpack@sign:	
  3187                           ; 1 bytes @ 0xB
  3188                           
  3189  002B                     ___lldiv@dividend:	
  3190                           ; 1 bytes @ 0xB
  3191                           
  3192                           
  3193                           ; 4 bytes @ 0xB
  3194  002B                     	ds	1
  3195  002C                     ?___ftadd:	
  3196  002C                     nrf24l01InitRegisters@DynPD:	
  3197                           ; 3 bytes @ 0xC
  3198                           
  3199  002C                     ___lbtoft@c:	
  3200                           ; 1 bytes @ 0xC
  3201                           
  3202  002C                     ___lltoft@exp:	
  3203                           ; 1 bytes @ 0xC
  3204                           
  3205  002C                     ___ftadd@f1:	
  3206                           ; 1 bytes @ 0xC
  3207                           
  3208                           
  3209                           ; 3 bytes @ 0xC
  3210  002C                     	ds	1
  3211  002D                     nrf24l01InitRegisters@i:	
  3212                           
  3213                           ; 2 bytes @ 0xD
  3214  002D                     	ds	2
  3215  002F                     ??_nrf24l01Init:	
  3216  002F                     ___ftadd@f2:	
  3217                           ; 1 bytes @ 0xF
  3218                           
  3219  002F                     ___lldiv@quotient:	
  3220                           ; 3 bytes @ 0xF
  3221                           
  3222                           
  3223                           ; 4 bytes @ 0xF
  3224  002F                     	ds	3
  3225  0032                     ??___ftadd:	
  3226                           
  3227                           ; 1 bytes @ 0x12
  3228  0032                     	ds	1
  3229  0033                     ___lldiv@counter:	
  3230  0033                     ___ftadd@sign:	
  3231                           ; 1 bytes @ 0x13
  3232                           
  3233                           
  3234                           ; 1 bytes @ 0x13
  3235  0033                     	ds	1
  3236  0034                     ?___llmod:	
  3237  0034                     ___ftadd@exp2:	
  3238                           ; 4 bytes @ 0x14
  3239                           
  3240  0034                     ___llmod@divisor:	
  3241                           ; 1 bytes @ 0x14
  3242                           
  3243                           
  3244                           ; 4 bytes @ 0x14
  3245  0034                     	ds	1
  3246  0035                     ___ftadd@exp1:	
  3247                           
  3248                           ; 1 bytes @ 0x15
  3249  0035                     	ds	1
  3250  0036                     ?___ftdiv:	
  3251  0036                     ?___ftsub:	
  3252                           ; 3 bytes @ 0x16
  3253                           
  3254  0036                     ___ftdiv@f2:	
  3255                           ; 3 bytes @ 0x16
  3256                           
  3257  0036                     ___ftsub@f2:	
  3258                           ; 3 bytes @ 0x16
  3259                           
  3260                           
  3261                           ; 3 bytes @ 0x16
  3262  0036                     	ds	2
  3263  0038                     ___llmod@dividend:	
  3264                           
  3265                           ; 4 bytes @ 0x18
  3266  0038                     	ds	1
  3267  0039                     ___ftdiv@f1:	
  3268  0039                     ___ftsub@f1:	
  3269                           ; 3 bytes @ 0x19
  3270                           
  3271                           
  3272                           ; 3 bytes @ 0x19
  3273  0039                     	ds	3
  3274  003C                     ??___ftdiv:	
  3275  003C                     ?_sprintf:	
  3276                           ; 1 bytes @ 0x1C
  3277                           
  3278  003C                     sprintf@f:	
  3279                           ; 2 bytes @ 0x1C
  3280                           
  3281                           
  3282                           ; 2 bytes @ 0x1C
  3283  003C                     	ds	1
  3284  003D                     ___ftdiv@cntr:	
  3285                           
  3286                           ; 1 bytes @ 0x1D
  3287  003D                     	ds	1
  3288  003E                     ___ftdiv@f3:	
  3289                           
  3290                           ; 3 bytes @ 0x1E
  3291  003E                     	ds	3
  3292  0041                     ___ftdiv@exp:	
  3293                           
  3294                           ; 1 bytes @ 0x21
  3295  0041                     	ds	1
  3296  0042                     ___ftdiv@sign:	
  3297                           
  3298                           ; 1 bytes @ 0x22
  3299  0042                     	ds	1
  3300  0043                     ?_getADCValue:	
  3301                           
  3302                           ; 3 bytes @ 0x23
  3303  0043                     	ds	3
  3304  0046                     ??_sprintf:	
  3305  0046                     ??_getADCValue:	
  3306                           ; 1 bytes @ 0x26
  3307                           
  3308                           
  3309                           ; 1 bytes @ 0x26
  3310  0046                     	ds	1
  3311  0047                     getADCValue@channel:	
  3312                           
  3313                           ; 1 bytes @ 0x27
  3314  0047                     	ds	1
  3315  0048                     getADCValue@adcLoop:	
  3316                           
  3317                           ; 1 bytes @ 0x28
  3318  0048                     	ds	1
  3319  0049                     getADCValue@adcSum:	
  3320                           
  3321                           ; 3 bytes @ 0x29
  3322  0049                     	ds	1
  3323  004A                     sprintf@flag:	
  3324                           
  3325                           ; 1 bytes @ 0x2A
  3326  004A                     	ds	1
  3327  004B                     sprintf@ap:	
  3328                           
  3329                           ; 1 bytes @ 0x2B
  3330  004B                     	ds	1
  3331  004C                     ?___ftmul:	
  3332  004C                     ?___ftneg:	
  3333                           ; 3 bytes @ 0x2C
  3334                           
  3335  004C                     ___ftmul@f1:	
  3336                           ; 3 bytes @ 0x2C
  3337                           
  3338  004C                     ___ftneg@f1:	
  3339                           ; 3 bytes @ 0x2C
  3340                           
  3341  004C                     sprintf@val:	
  3342                           ; 3 bytes @ 0x2C
  3343                           
  3344                           
  3345                           ; 4 bytes @ 0x2C
  3346  004C                     	ds	3
  3347  004F                     ___ftmul@f2:	
  3348                           
  3349                           ; 3 bytes @ 0x2F
  3350  004F                     	ds	1
  3351  0050                     sprintf@sp:	
  3352                           
  3353                           ; 1 bytes @ 0x30
  3354  0050                     	ds	1
  3355  0051                     sprintf@width:	
  3356                           
  3357                           ; 2 bytes @ 0x31
  3358  0051                     	ds	1
  3359  0052                     ___ftmul@exp:	
  3360                           
  3361                           ; 1 bytes @ 0x32
  3362  0052                     	ds	1
  3363  0053                     sprintf@prec:	
  3364  0053                     ___ftmul@f3_as_product:	
  3365                           ; 2 bytes @ 0x33
  3366                           
  3367                           
  3368                           ; 3 bytes @ 0x33
  3369  0053                     	ds	2
  3370  0055                     sprintf@c:	
  3371                           
  3372                           ; 1 bytes @ 0x35
  3373  0055                     	ds	1
  3374  0056                     ___ftmul@cntr:	
  3375                           
  3376                           ; 1 bytes @ 0x36
  3377  0056                     	ds	1
  3378  0057                     ___ftmul@sign:	
  3379                           
  3380                           ; 1 bytes @ 0x37
  3381  0057                     	ds	1
  3382  0058                     ?___fttol:	
  3383  0058                     ___fttol@f1:	
  3384                           ; 4 bytes @ 0x38
  3385                           
  3386                           
  3387                           ; 3 bytes @ 0x38
  3388  0058                     	ds	4
  3389  005C                     ___fttol@sign1:	
  3390                           
  3391                           ; 1 bytes @ 0x3C
  3392  005C                     	ds	1
  3393  005D                     ___fttol@lval:	
  3394                           
  3395                           ; 4 bytes @ 0x3D
  3396  005D                     	ds	4
  3397  0061                     ___fttol@exp1:	
  3398                           
  3399                           ; 1 bytes @ 0x41
  3400  0061                     	ds	1
  3401                           
  3402                           	psect	maintext
  3403  0769                     __pmaintext:	
  3404 ;;
  3405 ;;Main: autosize = 0, tempsize = 1, incstack = 4, save=0
  3406 ;;
  3407 ;; *************** function _main *****************
  3408 ;; Defined at:
  3409 ;;		line 173 in file "main.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;		None
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  packet         33   30[BANK1 ] struct .
  3414 ;;  pipe            1   29[BANK1 ] unsigned char 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  1    wreg      void 
  3417 ;; Registers used:
  3418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : B1F/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3425 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3426 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3427 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3428 ;;Total ram usage:       35 bytes
  3429 ;; Hardware stack levels required when called:   15
  3430 ;; This function calls:
  3431 ;;		_EEPROMRead
  3432 ;;		_EEPROMWrite
  3433 ;;		___lbtoft
  3434 ;;		_loop
  3435 ;;		_nrf24l01GetPipe
  3436 ;;		_nrf24l01Init
  3437 ;;		_nrf24l01SetRXPipe
  3438 ;;		_nrf24l01SetTXPipe
  3439 ;;		_sendMessage
  3440 ;;		_strcpy
  3441 ;; This function is called by:
  3442 ;;		Startup code after reset
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           
  3447                           ;psect for function _main
  3448  0769                     _main:	
  3449                           
  3450                           ;main.c: 177: ANSELA = 0x00;
  3451                           
  3452                           ;incstack = 0
  3453                           ; Regs used in _main: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  3454  0769  0023               	movlb	3	; select bank3
  3455  076A  018C               	clrf	12	;volatile
  3456                           
  3457                           ;main.c: 178: ANSELC = 0x00;
  3458  076B  018E               	clrf	14	;volatile
  3459                           
  3460                           ;main.c: 180: ODCONA = 0x00;
  3461  076C  0025               	movlb	5	; select bank5
  3462  076D  018C               	clrf	12	;volatile
  3463                           
  3464                           ;main.c: 181: ODCONC = 0x00;
  3465  076E  018E               	clrf	14	;volatile
  3466                           
  3467                           ;main.c: 186: INLVLA = 0x00;
  3468  076F  0027               	movlb	7	; select bank7
  3469  0770  018C               	clrf	12	;volatile
  3470                           
  3471                           ;main.c: 187: INLVLC = 0x00;
  3472  0771  018E               	clrf	14	;volatile
  3473                           
  3474                           ;main.c: 189: WPUA = 0x00;
  3475  0772  0024               	movlb	4	; select bank4
  3476  0773  018C               	clrf	12	;volatile
  3477                           
  3478                           ;main.c: 190: WPUC = 0x00;
  3479  0774  018E               	clrf	14	;volatile
  3480                           
  3481                           ;main.c: 192: TRISCbits.TRISC5 = 0;
  3482  0775  0021               	movlb	1	; select bank1
  3483  0776  128E               	bcf	14,5	;volatile
  3484                           
  3485                           ;main.c: 193: TRISCbits.TRISC4 = 0;
  3486  0777  120E               	bcf	14,4	;volatile
  3487                           
  3488                           ;main.c: 195: PORTCbits.RC4 = 0;
  3489  0778  0020               	movlb	0	; select bank0
  3490  0779  120E               	bcf	14,4	;volatile
  3491                           
  3492                           ;main.c: 202: INTCONbits.PEIE = 0;
  3493  077A  130B               	bcf	11,6	;volatile
  3494                           
  3495                           ;main.c: 203: INTCONbits.GIE = 0;
  3496  077B  138B               	bcf	11,7	;volatile
  3497                           
  3498                           ;main.c: 205: OSCCON1bits.NOSC = 0b000;
  3499  077C  308F               	movlw	-113
  3500  077D  0032               	movlb	18	; select bank18
  3501  077E  0599               	andwf	25,f	;volatile
  3502                           
  3503                           ;main.c: 206: OSCCON1bits.NDIV = 0b000;
  3504  077F  30F0               	movlw	-16
  3505  0780  0599               	andwf	25,f	;volatile
  3506                           
  3507                           ;main.c: 208: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3508  0781  300B               	movlw	11
  3509  0782  0021               	movlb	1	; select bank1
  3510  0783  00BC               	movwf	??_main^(0+128)
  3511  0784  3062               	movlw	98
  3512  0785                     u5387:	
  3513  0785  0B89               	decfsz	9,f
  3514  0786  2F85               	goto	u5387
  3515  0787  0BBC               	decfsz	??_main^(0+128),f
  3516  0788  2F85               	goto	u5387
  3517  0789  0000               	nop
  3518                           
  3519                           ;main.c: 212: strcpy(romData->name, "UWT");
  3520  078A  304E               	movlw	low (STR_6| (0+32768))
  3521  078B  001E               	movwi fsr1++
  3522  078C  3090               	movlw	high (STR_6| (0+32768))
  3523  078D  001E               	movwi fsr1++
  3524  078E  0021               	movlb	1	; select bank1
  3525  078F  0869               	movf	_romData^(0+128),w
  3526  0790  3E01               	addlw	1
  3527  0791  001E               	movwi fsr1++
  3528  0792  3001               	movlw	1
  3529  0793  001E               	movwi fsr1++
  3530  0794  318A  223A  3187   	fcall	_strcpy
  3531                           
  3532                           ;main.c: 214: nrf24l01Init();
  3533  0797  3189  217D  3187   	fcall	_nrf24l01Init
  3534                           
  3535                           ;main.c: 216: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3536  079A  0021               	movlb	1	; select bank1
  3537  079B  0869               	movf	_romData^(0+128),w
  3538  079C  3E01               	addlw	1
  3539  079D  318A  22EF  3187   	fcall	_nrf24l01GetPipe
  3540  07A0  00FF               	movwf	127
  3541  07A1  087F               	movf	127,w
  3542  07A2  0021               	movlb	1	; select bank1
  3543  07A3  00BD               	movwf	main@pipe^(0+128)
  3544                           
  3545                           ;main.c: 217: nrf24l01SetTXPipe(pipe);
  3546  07A4  083D               	movf	main@pipe^(0+128),w
  3547  07A5  318B  239A  3187   	fcall	_nrf24l01SetTXPipe
  3548                           
  3549                           ;main.c: 218: nrf24l01SetRXPipe(pipe);
  3550  07A8  083D               	movf	main@pipe^(0+128),w
  3551  07A9  3189  2122  3187   	fcall	_nrf24l01SetRXPipe
  3552                           
  3553                           ;main.c: 222: ADCON0bits.ADON = 0;
  3554  07AC  0021               	movlb	1	; select bank1
  3555  07AD  101D               	bcf	29,0	;volatile
  3556                           
  3557                           ;main.c: 225: PORTAbits.RA4 = 0;
  3558  07AE  0020               	movlb	0	; select bank0
  3559  07AF  120C               	bcf	12,4	;volatile
  3560                           
  3561                           ;main.c: 226: TRISAbits.TRISA4 = 1;
  3562  07B0  0021               	movlb	1	; select bank1
  3563  07B1  160C               	bsf	12,4	;volatile
  3564                           
  3565                           ;main.c: 227: WPUAbits.WPUA4 = 0;
  3566  07B2  0024               	movlb	4	; select bank4
  3567  07B3  120C               	bcf	12,4	;volatile
  3568                           
  3569                           ;main.c: 228: ODCONAbits.ODCA4 = 1;
  3570  07B4  0025               	movlb	5	; select bank5
  3571  07B5  160C               	bsf	12,4	;volatile
  3572                           
  3573                           ;main.c: 229: ANSELAbits.ANSA4 = 1;
  3574  07B6  0023               	movlb	3	; select bank3
  3575  07B7  160C               	bsf	12,4	;volatile
  3576                           
  3577                           ;main.c: 232: ANSELCbits.ANSC3 = 1;
  3578  07B8  158E               	bsf	14,3	;volatile
  3579                           
  3580                           ;main.c: 233: TRISCbits.TRISC3 = 1;
  3581  07B9  0021               	movlb	1	; select bank1
  3582  07BA  158E               	bsf	14,3	;volatile
  3583                           
  3584                           ;main.c: 236: FVRCONbits.TSEN = 1;
  3585  07BB  0022               	movlb	2	; select bank2
  3586  07BC  1697               	bsf	23,5	;volatile
  3587                           
  3588                           ;main.c: 237: FVRCONbits.TSRNG = 1;
  3589  07BD  1617               	bsf	23,4	;volatile
  3590                           
  3591                           ;main.c: 240: FVRCONbits.FVREN = 0;
  3592  07BE  1397               	bcf	23,7	;volatile
  3593                           
  3594                           ;main.c: 241: FVRCONbits.ADFVR = 0b10;
  3595  07BF  0817               	movf	23,w	;volatile
  3596  07C0  39FC               	andlw	-4
  3597  07C1  3802               	iorlw	2
  3598  07C2  0097               	movwf	23	;volatile
  3599                           
  3600                           ;main.c: 243: ADCON1bits.ADCS = 0b111;
  3601  07C3  3070               	movlw	112
  3602  07C4  0021               	movlb	1	; select bank1
  3603  07C5  049E               	iorwf	30,f	;volatile
  3604                           
  3605                           ;main.c: 244: ADCON1bits.ADFM = 1;
  3606  07C6  179E               	bsf	30,7	;volatile
  3607                           
  3608                           ;main.c: 245: ADCON1bits.ADPREF = 0b11;
  3609  07C7  3003               	movlw	3
  3610  07C8  049E               	iorwf	30,f	;volatile
  3611                           
  3612                           ;main.c: 246: ADCON1bits.ADNREF = 0b00;
  3613  07C9  111E               	bcf	30,2	;volatile
  3614                           
  3615                           ;main.c: 247: PIE1bits.ADIE = 1;
  3616  07CA  1711               	bsf	17,6	;volatile
  3617                           
  3618                           ;main.c: 250: ADCON0bits.CHS = 3;
  3619  07CB  081D               	movf	29,w	;volatile
  3620  07CC  3903               	andlw	-253
  3621  07CD  380C               	iorlw	12
  3622  07CE  009D               	movwf	29	;volatile
  3623                           
  3624                           ;main.c: 255: TRISAbits.TRISA2 = 1;
  3625  07CF  150C               	bsf	12,2	;volatile
  3626                           
  3627                           ;main.c: 256: PIE0bits.INTE = 1;
  3628  07D0  1410               	bsf	16,0	;volatile
  3629                           
  3630                           ;main.c: 257: INTCONbits.INTEDG = 0;
  3631  07D1  100B               	bcf	11,0	;volatile
  3632                           
  3633                           ;main.c: 260: TRISAbits.TRISA5 = 0;
  3634  07D2  128C               	bcf	12,5	;volatile
  3635                           
  3636                           ;main.c: 261: PORTAbits.RA5 = 0;
  3637  07D3  0020               	movlb	0	; select bank0
  3638  07D4  128C               	bcf	12,5	;volatile
  3639                           
  3640                           ;main.c: 266: INTCONbits.PEIE = 1;
  3641  07D5  170B               	bsf	11,6	;volatile
  3642                           
  3643                           ;main.c: 267: INTCONbits.GIE = 1;
  3644  07D6  178B               	bsf	11,7	;volatile
  3645                           
  3646                           ;main.c: 269: nrf24l01Packet_t packet;;main.c: 271: sendMessage(&packet, "BOOT", EEPROMR
      +                          ead(0));
  3647  07D7  30BE               	movlw	low main@packet
  3648  07D8  0021               	movlb	1	; select bank1
  3649  07D9  00B3               	movwf	sendMessage@packet^(0+128)
  3650  07DA  3000               	movlw	high main@packet
  3651  07DB  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  3652  07DC  3049               	movlw	low (STR_7| (0+32768))
  3653  07DD  00B5               	movwf	sendMessage@topic^(0+128)
  3654  07DE  3090               	movlw	high (STR_7| (0+32768))
  3655  07DF  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  3656  07E0  3000               	movlw	0
  3657  07E1  00F0               	movwf	EEPROMRead@address
  3658  07E2  00F1               	movwf	EEPROMRead@address+1
  3659  07E3  3188  2044  3187   	fcall	_EEPROMRead
  3660  07E6  3188  20AD  3187   	fcall	___lbtoft
  3661  07E9  0870               	movf	?___lbtoft,w
  3662  07EA  0021               	movlb	1	; select bank1
  3663  07EB  00B7               	movwf	sendMessage@value^(0+128)
  3664  07EC  0871               	movf	?___lbtoft+1,w
  3665  07ED  00B8               	movwf	(sendMessage@value+1)^(0+128)
  3666  07EE  0872               	movf	?___lbtoft+2,w
  3667  07EF  00B9               	movwf	(sendMessage@value+2)^(0+128)
  3668  07F0  318D  25A5  3187   	fcall	_sendMessage
  3669                           
  3670                           ;main.c: 272: EEPROMWrite(0, 0);
  3671  07F3  3000               	movlw	0
  3672  07F4  00F0               	movwf	EEPROMWrite@address
  3673  07F5  00F1               	movwf	EEPROMWrite@address+1
  3674  07F6  01F2               	clrf	EEPROMWrite@data
  3675  07F7  3189  215E  3187   	fcall	_EEPROMWrite
  3676  07FA                     l4881:	
  3677                           ;main.c: 275: while(1){
  3678                           
  3679                           
  3680                           ;main.c: 276: loop();
  3681  07FA  3184  2429  3187   	fcall	_loop
  3682  07FD  2FFA               	goto	l4881
  3683  07FE                     __end_of_main:	
  3684                           ;main.c: 277: };main.c: 279: return;
  3685                           
  3686                           
  3687                           	psect	text1
  3688  097D                     __ptext1:	
  3689 ;; *************** function _nrf24l01Init *****************
  3690 ;; Defined at:
  3691 ;;		line 457 in file "nrf24l01.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;		None
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;		None
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  1    wreg      void 
  3698 ;; Registers used:
  3699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+10, btemp+11, pclath, cstack
  3700 ;; Tracked objects:
  3701 ;;		On entry : 0/0
  3702 ;;		On exit  : 0/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3708 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3709 ;;Total ram usage:        1 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; Hardware stack levels required when called:   11
  3712 ;; This function calls:
  3713 ;;		_nrf24l01InitRegisters
  3714 ;;		_nrf24l01InterfaceInit
  3715 ;; This function is called by:
  3716 ;;		_main
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           
  3721                           ;psect for function _nrf24l01Init
  3722  097D                     _nrf24l01Init:	
  3723                           
  3724                           ;nrf24l01.c: 460: nrf24l01InterfaceInit();
  3725                           
  3726                           ;incstack = 0
  3727                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+10+btemp+11
      +                          +pclath+cstack]
  3728  097D  3189  2140  3189   	fcall	_nrf24l01InterfaceInit
  3729                           
  3730                           ;nrf24l01.c: 465: PORTAbits.RA0 = 0;
  3731  0980  0020               	movlb	0	; select bank0
  3732  0981  100C               	bcf	12,0	;volatile
  3733                           
  3734                           ;nrf24l01.c: 467: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3735  0982  300B               	movlw	11
  3736  0983  0020               	movlb	0	; select bank0
  3737  0984  00AF               	movwf	??_nrf24l01Init
  3738  0985  3062               	movlw	98
  3739  0986                     u5397:	
  3740  0986  0B89               	decfsz	9,f
  3741  0987  2986               	goto	u5397
  3742  0988  0BAF               	decfsz	??_nrf24l01Init,f
  3743  0989  2986               	goto	u5397
  3744  098A  0000               	nop
  3745                           
  3746                           ;nrf24l01.c: 469: nrf24l01InitRegisters();
  3747  098B  3182  222F  3189   	fcall	_nrf24l01InitRegisters
  3748                           
  3749                           ;nrf24l01.c: 471: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3750  098E  300B               	movlw	11
  3751  098F  0020               	movlb	0	; select bank0
  3752  0990  00AF               	movwf	??_nrf24l01Init
  3753  0991  3062               	movlw	98
  3754  0992                     u5407:	
  3755  0992  0B89               	decfsz	9,f
  3756  0993  2992               	goto	u5407
  3757  0994  0BAF               	decfsz	??_nrf24l01Init,f
  3758  0995  2992               	goto	u5407
  3759  0996  0000               	nop
  3760                           
  3761                           ;nrf24l01.c: 473: PORTAbits.RA0 = 1;
  3762  0997  0020               	movlb	0	; select bank0
  3763  0998  140C               	bsf	12,0	;volatile
  3764                           
  3765                           ;nrf24l01.c: 475: status.TX = 0;
  3766  0999  01E2               	clrf	_status	;volatile
  3767                           
  3768                           ;nrf24l01.c: 476: status.RX = 0;
  3769  099A  01E3               	clrf	_status+1	;volatile
  3770  099B  0008               	return
  3771  099C                     __end_of_nrf24l01Init:	
  3772                           
  3773                           	psect	text2
  3774  0940                     __ptext2:	
  3775 ;; *************** function _nrf24l01InterfaceInit *****************
  3776 ;; Defined at:
  3777 ;;		line 9 in file "interface.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;		None
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;		None
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  1    wreg      void 
  3784 ;; Registers used:
  3785 ;;		wreg, status,2, status,0
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3795 ;;Total ram usage:        0 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    7
  3798 ;; This function calls:
  3799 ;;		Nothing
  3800 ;; This function is called by:
  3801 ;;		_nrf24l01Init
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           
  3806                           ;psect for function _nrf24l01InterfaceInit
  3807  0940                     _nrf24l01InterfaceInit:	
  3808                           
  3809                           ;interface.c: 11: TRISAbits.TRISA0 = 0;
  3810                           
  3811                           ;incstack = 0
  3812                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3813  0940  0021               	movlb	1	; select bank1
  3814  0941  100C               	bcf	12,0	;volatile
  3815                           
  3816                           ;interface.c: 12: TRISAbits.TRISA1 = 0;
  3817  0942  108C               	bcf	12,1	;volatile
  3818                           
  3819                           ;interface.c: 14: TRISCbits.TRISC1 = 1;
  3820  0943  148E               	bsf	14,1	;volatile
  3821                           
  3822                           ;interface.c: 15: TRISCbits.TRISC2 = 0;
  3823  0944  110E               	bcf	14,2	;volatile
  3824                           
  3825                           ;interface.c: 16: TRISCbits.TRISC0 = 0;
  3826  0945  100E               	bcf	14,0	;volatile
  3827                           
  3828                           ;interface.c: 18: SSP1CON1bits.SSPEN = 0;
  3829  0946  0024               	movlb	4	; select bank4
  3830  0947  1295               	bcf	21,5	;volatile
  3831                           
  3832                           ;interface.c: 20: RC1PPSbits.RC1PPS = 0b10001;
  3833  0948  003D               	movlb	29	; select bank29
  3834  0949  0821               	movf	33,w	;volatile
  3835  094A  39E0               	andlw	-32
  3836  094B  3811               	iorlw	17
  3837  094C  00A1               	movwf	33	;volatile
  3838                           
  3839                           ;interface.c: 21: RC2PPSbits.RC2PPS = 0b11001;
  3840  094D  0822               	movf	34,w	;volatile
  3841  094E  39E0               	andlw	-32
  3842  094F  3819               	iorlw	25
  3843  0950  00A2               	movwf	34	;volatile
  3844                           
  3845                           ;interface.c: 22: RC0PPSbits.RC0PPS = 0b11000;
  3846  0951  0820               	movf	32,w	;volatile
  3847  0952  39E0               	andlw	-32
  3848  0953  3818               	iorlw	24
  3849  0954  00A0               	movwf	32	;volatile
  3850                           
  3851                           ;interface.c: 24: SSP1CON1bits.CKP = 0;
  3852  0955  0024               	movlb	4	; select bank4
  3853  0956  1215               	bcf	21,4	;volatile
  3854                           
  3855                           ;interface.c: 25: SSP1STATbits.CKE = 1;
  3856  0957  1714               	bsf	20,6	;volatile
  3857                           
  3858                           ;interface.c: 26: SSP1CON1bits.SSPM = 0b0001;
  3859  0958  0815               	movf	21,w	;volatile
  3860  0959  39F0               	andlw	-16
  3861  095A  3801               	iorlw	1
  3862  095B  0095               	movwf	21	;volatile
  3863                           
  3864                           ;interface.c: 28: SSP1CON1bits.SSPEN = 1;
  3865  095C  1695               	bsf	21,5	;volatile
  3866  095D  0008               	return
  3867  095E                     __end_of_nrf24l01InterfaceInit:	
  3868                           
  3869                           	psect	text3
  3870  022F                     __ptext3:	
  3871 ;; *************** function _nrf24l01InitRegisters *****************
  3872 ;; Defined at:
  3873 ;;		line 355 in file "nrf24l01.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;		None
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;  i               2   13[BANK0 ] unsigned int 
  3878 ;;  DynPD           1   12[BANK0 ] struct .
  3879 ;;  enAA            1   11[BANK0 ] struct .
  3880 ;;  rfSetup         1   10[BANK0 ] struct .
  3881 ;;  feature         1    9[BANK0 ] struct .
  3882 ;;  setupAW         1    8[BANK0 ] struct .
  3883 ;;  channel         1    7[BANK0 ] struct .
  3884 ;; Return value:  Size  Location     Type
  3885 ;;                  1    wreg      void 
  3886 ;; Registers used:
  3887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+10, btemp+11, pclath, cstack
  3888 ;; Tracked objects:
  3889 ;;		On entry : 0/0
  3890 ;;		On exit  : 0/0
  3891 ;;		Unchanged: 0/0
  3892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3894 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3895 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3896 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3897 ;;Total ram usage:        9 bytes
  3898 ;; Hardware stack levels used:    1
  3899 ;; Hardware stack levels required when called:   10
  3900 ;; This function calls:
  3901 ;;		___bmul
  3902 ;;		_nrf24l01SPIEnd
  3903 ;;		_nrf24l01SPISend
  3904 ;;		_nrf24l01SPIStart
  3905 ;;		_nrf24l01Send
  3906 ;;		_nrf24l01SetRXPipe
  3907 ;;		_nrf24l01SetTXPipe
  3908 ;; This function is called by:
  3909 ;;		_nrf24l01Init
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           
  3914                           ;psect for function _nrf24l01InitRegisters
  3915  022F                     _nrf24l01InitRegisters:	
  3916                           
  3917                           ;nrf24l01.c: 358: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3918                           
  3919                           ;incstack = 0
  3920                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+10
      +                          +btemp+11+pclath+cstack]
  3921  022F  3000               	movlw	0
  3922  0230  001E               	movwi fsr1++
  3923  0231  3000               	movlw	0
  3924  0232  3188  206D  3182   	fcall	_nrf24l01Send
  3925  0235  00FF               	movwf	127
  3926  0236  087F               	movf	127,w
  3927  0237  0020               	movlb	0	; select bank0
  3928  0238  00E5               	movwf	_status+3	;volatile
  3929                           
  3930                           ;nrf24l01.c: 360: status.configRegister.PWR_UP = 0;
  3931  0239  10E5               	bcf	_status+3,1	;volatile
  3932                           
  3933                           ;nrf24l01.c: 361: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3934  023A  0865               	movf	_status+3,w	;volatile
  3935  023B  001E               	movwi fsr1++
  3936  023C  3020               	movlw	32
  3937  023D  3188  206D  3182   	fcall	_nrf24l01Send
  3938                           
  3939                           ;nrf24l01.c: 363: n_SETUP_AW_t setupAW;;nrf24l01.c: 364: setupAW.byte = 0x00;
  3940  0240  0020               	movlb	0	; select bank0
  3941  0241  01A8               	clrf	nrf24l01InitRegisters@setupAW
  3942                           
  3943                           ;nrf24l01.c: 365: setupAW.AW = 0b11;
  3944  0242  3003               	movlw	3
  3945  0243  04A8               	iorwf	nrf24l01InitRegisters@setupAW,f
  3946                           
  3947                           ;nrf24l01.c: 366: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3948  0244  0828               	movf	nrf24l01InitRegisters@setupAW,w
  3949  0245  001E               	movwi fsr1++
  3950  0246  3023               	movlw	35
  3951  0247  3188  206D  3182   	fcall	_nrf24l01Send
  3952                           
  3953                           ;nrf24l01.c: 369: n_RF_CH_t channel;;nrf24l01.c: 370: channel.RF_CH = 2;
  3954  024A  0020               	movlb	0	; select bank0
  3955  024B  0827               	movf	nrf24l01InitRegisters@channel,w
  3956  024C  3980               	andlw	-128
  3957  024D  3802               	iorlw	2
  3958  024E  00A7               	movwf	nrf24l01InitRegisters@channel
  3959                           
  3960                           ;nrf24l01.c: 371: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3961  024F  0827               	movf	nrf24l01InitRegisters@channel,w
  3962  0250  001E               	movwi fsr1++
  3963  0251  3025               	movlw	37
  3964  0252  3188  206D  3182   	fcall	_nrf24l01Send
  3965                           
  3966                           ;nrf24l01.c: 374: n_RF_SETUP_t rfSetup;;nrf24l01.c: 375: rfSetup.byte = 0x00;
  3967  0255  0020               	movlb	0	; select bank0
  3968  0256  01AA               	clrf	nrf24l01InitRegisters@rfSetup
  3969                           
  3970                           ;nrf24l01.c: 376: rfSetup.RF_DR_LOW = 0;
  3971  0257  12AA               	bcf	nrf24l01InitRegisters@rfSetup,5
  3972                           
  3973                           ;nrf24l01.c: 377: rfSetup.RF_DR_HIGH = 1;
  3974  0258  15AA               	bsf	nrf24l01InitRegisters@rfSetup,3
  3975                           
  3976                           ;nrf24l01.c: 378: rfSetup.RF_PWR = 3;
  3977  0259  3006               	movlw	6
  3978  025A  04AA               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3979                           
  3980                           ;nrf24l01.c: 379: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3981  025B  082A               	movf	nrf24l01InitRegisters@rfSetup,w
  3982  025C  001E               	movwi fsr1++
  3983  025D  3026               	movlw	38
  3984  025E  3188  206D  3182   	fcall	_nrf24l01Send
  3985                           
  3986                           ;nrf24l01.c: 382: nrf24l01SetRXPipe(0xFF);
  3987  0261  30FF               	movlw	255
  3988  0262  3189  2122  3182   	fcall	_nrf24l01SetRXPipe
  3989                           
  3990                           ;nrf24l01.c: 385: n_EN_AA_t enAA;;nrf24l01.c: 386: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3991  0265  3000               	movlw	0
  3992  0266  001E               	movwi fsr1++
  3993  0267  3001               	movlw	1
  3994  0268  3188  206D  3182   	fcall	_nrf24l01Send
  3995  026B  00FF               	movwf	127
  3996  026C  087F               	movf	127,w
  3997  026D  0020               	movlb	0	; select bank0
  3998  026E  00AB               	movwf	nrf24l01InitRegisters@enAA
  3999                           
  4000                           ;nrf24l01.c: 387: enAA.ENAA_P0 = 0;
  4001  026F  102B               	bcf	nrf24l01InitRegisters@enAA,0
  4002                           
  4003                           ;nrf24l01.c: 388: enAA.ENAA_P1 = 0;
  4004  0270  10AB               	bcf	nrf24l01InitRegisters@enAA,1
  4005                           
  4006                           ;nrf24l01.c: 389: enAA.ENAA_P2 = 0;
  4007  0271  112B               	bcf	nrf24l01InitRegisters@enAA,2
  4008                           
  4009                           ;nrf24l01.c: 390: enAA.ENAA_P3 = 0;
  4010  0272  11AB               	bcf	nrf24l01InitRegisters@enAA,3
  4011                           
  4012                           ;nrf24l01.c: 391: enAA.ENAA_P4 = 0;
  4013  0273  122B               	bcf	nrf24l01InitRegisters@enAA,4
  4014                           
  4015                           ;nrf24l01.c: 392: enAA.ENAA_P5 = 0;
  4016  0274  12AB               	bcf	nrf24l01InitRegisters@enAA,5
  4017                           
  4018                           ;nrf24l01.c: 393: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  4019  0275  082B               	movf	nrf24l01InitRegisters@enAA,w
  4020  0276  001E               	movwi fsr1++
  4021  0277  3021               	movlw	33
  4022  0278  3188  206D  3182   	fcall	_nrf24l01Send
  4023                           
  4024                           ;nrf24l01.c: 397: n_FEATURE_t feature;;nrf24l01.c: 398: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  4025  027B  3000               	movlw	0
  4026  027C  001E               	movwi fsr1++
  4027  027D  301D               	movlw	29
  4028  027E  3188  206D  3182   	fcall	_nrf24l01Send
  4029  0281  00FF               	movwf	127
  4030  0282  087F               	movf	127,w
  4031  0283  0020               	movlb	0	; select bank0
  4032  0284  00A9               	movwf	nrf24l01InitRegisters@feature
  4033                           
  4034                           ;nrf24l01.c: 399: feature.EN_DPL = 1;
  4035  0285  1529               	bsf	nrf24l01InitRegisters@feature,2
  4036                           
  4037                           ;nrf24l01.c: 400: feature.EN_DYN_ACK = 1;
  4038  0286  1429               	bsf	nrf24l01InitRegisters@feature,0
  4039                           
  4040                           ;nrf24l01.c: 401: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  4041  0287  0829               	movf	nrf24l01InitRegisters@feature,w
  4042  0288  001E               	movwi fsr1++
  4043  0289  303D               	movlw	61
  4044  028A  3188  206D  3182   	fcall	_nrf24l01Send
  4045                           
  4046                           ;nrf24l01.c: 403: n_DYNPD_t DynPD;;nrf24l01.c: 404: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  4047  028D  3000               	movlw	0
  4048  028E  001E               	movwi fsr1++
  4049  028F  301C               	movlw	28
  4050  0290  3188  206D  3182   	fcall	_nrf24l01Send
  4051  0293  00FF               	movwf	127
  4052  0294  087F               	movf	127,w
  4053  0295  0020               	movlb	0	; select bank0
  4054  0296  00AC               	movwf	nrf24l01InitRegisters@DynPD
  4055                           
  4056                           ;nrf24l01.c: 405: DynPD.DPL_P0 = 1;
  4057  0297  142C               	bsf	nrf24l01InitRegisters@DynPD,0
  4058                           
  4059                           ;nrf24l01.c: 406: DynPD.DPL_P1 = 1;
  4060  0298  14AC               	bsf	nrf24l01InitRegisters@DynPD,1
  4061                           
  4062                           ;nrf24l01.c: 407: DynPD.DPL_P2 = 1;
  4063  0299  152C               	bsf	nrf24l01InitRegisters@DynPD,2
  4064                           
  4065                           ;nrf24l01.c: 408: DynPD.DPL_P3 = 1;
  4066  029A  15AC               	bsf	nrf24l01InitRegisters@DynPD,3
  4067                           
  4068                           ;nrf24l01.c: 409: DynPD.DPL_P4 = 1;
  4069  029B  162C               	bsf	nrf24l01InitRegisters@DynPD,4
  4070                           
  4071                           ;nrf24l01.c: 410: DynPD.DPL_P5 = 1;
  4072  029C  16AC               	bsf	nrf24l01InitRegisters@DynPD,5
  4073                           
  4074                           ;nrf24l01.c: 411: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  4075  029D  082C               	movf	nrf24l01InitRegisters@DynPD,w
  4076  029E  001E               	movwi fsr1++
  4077  029F  303C               	movlw	60
  4078  02A0  3188  206D  3182   	fcall	_nrf24l01Send
  4079                           
  4080                           ;nrf24l01.c: 414: unsigned int i;;nrf24l01.c: 415: for (i = 0; i < 6; i++){
  4081  02A3  0020               	movlb	0	; select bank0
  4082  02A4  01AD               	clrf	nrf24l01InitRegisters@i
  4083  02A5  01AE               	clrf	nrf24l01InitRegisters@i+1
  4084  02A6  3000               	movlw	0
  4085  02A7  022E               	subwf	nrf24l01InitRegisters@i+1,w
  4086  02A8  3006               	movlw	6
  4087  02A9  1903               	skipnz
  4088  02AA  022D               	subwf	nrf24l01InitRegisters@i,w
  4089  02AB  1803               	btfsc	3,0
  4090  02AC  2B03               	goto	l4613
  4091  02AD                     l4597:	
  4092                           
  4093                           ;nrf24l01.c: 417: nrf24l01SPIStart();
  4094  02AD  3188  203B  3182   	fcall	_nrf24l01SPIStart
  4095                           
  4096                           ;nrf24l01.c: 418: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  4097  02B0  0020               	movlb	0	; select bank0
  4098  02B1  082D               	movf	nrf24l01InitRegisters@i,w
  4099  02B2  3E0A               	addlw	10
  4100  02B3  3820               	iorlw	32
  4101  02B4  3188  205E  3182   	fcall	_nrf24l01SPISend
  4102                           
  4103                           ;nrf24l01.c: 420: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  4104  02B7  303E               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4105  02B8  0084               	movwf	4
  4106  02B9  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4107  02BA  0085               	movwf	5
  4108  02BB  0800               	movf	0,w	;code access
  4109  02BC  00F3               	movwf	??_nrf24l01InitRegisters
  4110  02BD  0020               	movlb	0	; select bank0
  4111  02BE  082D               	movf	nrf24l01InitRegisters@i,w
  4112  02BF  001E               	movwi fsr1++
  4113  02C0  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4114  02C1  0084               	movwf	4
  4115  02C2  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4116  02C3  0085               	movwf	5
  4117  02C4  0800               	movf	0,w	;code access
  4118  02C5  3188  2095  3182   	fcall	___bmul
  4119  02C8  0773               	addwf	??_nrf24l01InitRegisters,w
  4120  02C9  3188  205E  3182   	fcall	_nrf24l01SPISend
  4121                           
  4122                           ;nrf24l01.c: 422: if (i < 2){
  4123  02CC  3000               	movlw	0
  4124  02CD  0020               	movlb	0	; select bank0
  4125  02CE  022E               	subwf	nrf24l01InitRegisters@i+1,w
  4126  02CF  3002               	movlw	2
  4127  02D0  1903               	skipnz
  4128  02D1  022D               	subwf	nrf24l01InitRegisters@i,w
  4129  02D2  1803               	skipnc
  4130  02D3  2AF4               	goto	l4607
  4131                           
  4132                           ;nrf24l01.c: 423: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4133  02D4  303D               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4134  02D5  0084               	movwf	4
  4135  02D6  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4136  02D7  0085               	movwf	5
  4137  02D8  0800               	movf	0,w	;code access
  4138  02D9  3188  205E  3182   	fcall	_nrf24l01SPISend
  4139                           
  4140                           ;nrf24l01.c: 424: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4141  02DC  303C               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4142  02DD  0084               	movwf	4
  4143  02DE  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4144  02DF  0085               	movwf	5
  4145  02E0  0800               	movf	0,w	;code access
  4146  02E1  3188  205E  3182   	fcall	_nrf24l01SPISend
  4147                           
  4148                           ;nrf24l01.c: 425: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4149  02E4  303B               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4150  02E5  0084               	movwf	4
  4151  02E6  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4152  02E7  0085               	movwf	5
  4153  02E8  0800               	movf	0,w	;code access
  4154  02E9  3188  205E  3182   	fcall	_nrf24l01SPISend
  4155                           
  4156                           ;nrf24l01.c: 426: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4157  02EC  303A               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4158  02ED  0084               	movwf	4
  4159  02EE  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4160  02EF  0085               	movwf	5
  4161  02F0  0800               	movf	0,w	;code access
  4162  02F1  3188  205E  3182   	fcall	_nrf24l01SPISend
  4163  02F4                     l4607:	
  4164                           
  4165                           ;nrf24l01.c: 427: };nrf24l01.c: 429: nrf24l01SPIEnd();
  4166  02F4  3188  2032  3182   	fcall	_nrf24l01SPIEnd
  4167  02F7  3001               	movlw	1
  4168  02F8  0020               	movlb	0	; select bank0
  4169  02F9  07AD               	addwf	nrf24l01InitRegisters@i,f
  4170  02FA  3000               	movlw	0
  4171  02FB  3DAE               	addwfc	nrf24l01InitRegisters@i+1,f
  4172  02FC  3000               	movlw	0
  4173  02FD  022E               	subwf	nrf24l01InitRegisters@i+1,w
  4174  02FE  3006               	movlw	6
  4175  02FF  1903               	skipnz
  4176  0300  022D               	subwf	nrf24l01InitRegisters@i,w
  4177  0301  1C03               	skipc
  4178  0302  2AAD               	goto	l4597
  4179  0303                     l4613:	
  4180                           
  4181                           ;nrf24l01.c: 430: };nrf24l01.c: 432: nrf24l01SetTXPipe(0);
  4182  0303  3000               	movlw	0
  4183  0304  318B  239A  3182   	fcall	_nrf24l01SetTXPipe
  4184                           
  4185                           ;nrf24l01.c: 436: status.statusRegister.byte = 0x00;
  4186  0307  0020               	movlb	0	; select bank0
  4187  0308  01E4               	clrf	_status+2	;volatile
  4188                           
  4189                           ;nrf24l01.c: 437: status.statusRegister.RX_DR = 1;
  4190  0309  1764               	bsf	_status+2,6	;volatile
  4191                           
  4192                           ;nrf24l01.c: 438: status.statusRegister.TX_DS = 1;
  4193  030A  16E4               	bsf	_status+2,5	;volatile
  4194                           
  4195                           ;nrf24l01.c: 439: status.statusRegister.MAX_RT = 1;
  4196  030B  1664               	bsf	_status+2,4	;volatile
  4197                           
  4198                           ;nrf24l01.c: 440: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  4199  030C  0864               	movf	_status+2,w	;volatile
  4200  030D  001E               	movwi fsr1++
  4201  030E  3027               	movlw	39
  4202  030F  3188  206D  3182   	fcall	_nrf24l01Send
  4203                           
  4204                           ;nrf24l01.c: 442: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  4205  0312  3000               	movlw	0
  4206  0313  001E               	movwi fsr1++
  4207  0314  3007               	movlw	7
  4208  0315  3188  206D  3182   	fcall	_nrf24l01Send
  4209  0318  00FF               	movwf	127
  4210  0319  087F               	movf	127,w
  4211  031A  0020               	movlb	0	; select bank0
  4212  031B  00E4               	movwf	_status+2	;volatile
  4213                           
  4214                           ;nrf24l01.c: 445: nrf24l01Send((unsigned) 0b11100001, 0);
  4215  031C  3000               	movlw	0
  4216  031D  001E               	movwi fsr1++
  4217  031E  30E1               	movlw	225
  4218  031F  3188  206D  3182   	fcall	_nrf24l01Send
  4219                           
  4220                           ;nrf24l01.c: 446: nrf24l01Send((unsigned) 0b11100010, 0);
  4221  0322  3000               	movlw	0
  4222  0323  001E               	movwi fsr1++
  4223  0324  30E2               	movlw	226
  4224  0325  3188  206D  3182   	fcall	_nrf24l01Send
  4225                           
  4226                           ;nrf24l01.c: 449: status.configRegister.PRIM_RX = 1;
  4227  0328  0020               	movlb	0	; select bank0
  4228  0329  1465               	bsf	_status+3,0	;volatile
  4229                           
  4230                           ;nrf24l01.c: 450: status.configRegister.EN_CRC = 1;
  4231  032A  15E5               	bsf	_status+3,3	;volatile
  4232                           
  4233                           ;nrf24l01.c: 451: status.configRegister.CRCO = 1;
  4234  032B  1565               	bsf	_status+3,2	;volatile
  4235                           
  4236                           ;nrf24l01.c: 452: status.configRegister.PWR_UP = 1;
  4237  032C  14E5               	bsf	_status+3,1	;volatile
  4238                           
  4239                           ;nrf24l01.c: 453: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  4240  032D  0865               	movf	_status+3,w	;volatile
  4241  032E  001E               	movwi fsr1++
  4242  032F  3020               	movlw	32
  4243  0330  3188  206D         	fcall	_nrf24l01Send
  4244  0332  0008               	return
  4245  0333                     __end_of_nrf24l01InitRegisters:	
  4246                           
  4247                           	psect	text4
  4248  0922                     __ptext4:	
  4249 ;; *************** function _nrf24l01SetRXPipe *****************
  4250 ;; Defined at:
  4251 ;;		line 109 in file "nrf24l01.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;  pipe            1    wreg     unsigned char 
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;  pipe            1    1[COMMON] unsigned char 
  4256 ;;  enRXAddr        1    2[COMMON] struct .
  4257 ;; Return value:  Size  Location     Type
  4258 ;;                  1    wreg      void 
  4259 ;; Registers used:
  4260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath
  4261 ;; Tracked objects:
  4262 ;;		On entry : 0/0
  4263 ;;		On exit  : 0/0
  4264 ;;		Unchanged: 0/0
  4265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4267 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4269 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4270 ;;Total ram usage:        3 bytes
  4271 ;; Hardware stack levels used:    1
  4272 ;; Hardware stack levels required when called:    9
  4273 ;; This function calls:
  4274 ;;		_nrf24l01Send
  4275 ;; This function is called by:
  4276 ;;		_main
  4277 ;;		_nrf24l01InitRegisters
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           
  4282                           ;psect for function _nrf24l01SetRXPipe
  4283  0922                     _nrf24l01SetRXPipe:	
  4284                           
  4285                           ;incstack = 0
  4286                           ; Regs used in _nrf24l01SetRXPipe: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath]
  4287                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4288  0922  00F1               	movwf	nrf24l01SetRXPipe@pipe
  4289                           
  4290                           ;nrf24l01.c: 111: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 113: if (pipe > 5){
  4291  0923  3006               	movlw	6
  4292  0924  0271               	subwf	nrf24l01SetRXPipe@pipe,w
  4293  0925  1C03               	skipc
  4294  0926  292E               	goto	l279
  4295                           
  4296                           ;nrf24l01.c: 114: enRXAddr.ERX_P0 = 1;
  4297  0927  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4298                           
  4299                           ;nrf24l01.c: 115: enRXAddr.ERX_P1 = 1;
  4300  0928  14F2               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4301                           
  4302                           ;nrf24l01.c: 116: enRXAddr.ERX_P2 = 1;
  4303  0929  1572               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4304                           
  4305                           ;nrf24l01.c: 117: enRXAddr.ERX_P3 = 1;
  4306  092A  15F2               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4307                           
  4308                           ;nrf24l01.c: 118: enRXAddr.ERX_P4 = 1;
  4309  092B  1672               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4310                           
  4311                           ;nrf24l01.c: 119: enRXAddr.ERX_P5 = 1;
  4312  092C  16F2               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4313                           
  4314                           ;nrf24l01.c: 120: }
  4315  092D  293A               	goto	l4281
  4316  092E                     l279:	
  4317                           
  4318                           ;nrf24l01.c: 122: else{;nrf24l01.c: 123: enRXAddr.ERX_P0 = 1;
  4319  092E  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4320                           
  4321                           ;nrf24l01.c: 124: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4322  092F  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4323  0930  00F0               	movwf	??_nrf24l01SetRXPipe
  4324  0931  0A71               	incf	nrf24l01SetRXPipe@pipe,w
  4325  0932  2934               	goto	u4844
  4326  0933                     u4845:	
  4327  0933  35F0               	lslf	??_nrf24l01SetRXPipe,f
  4328  0934                     u4844:	
  4329  0934  0B89               	decfsz	9,f
  4330  0935  2933               	goto	u4845
  4331  0936  0870               	movf	??_nrf24l01SetRXPipe,w
  4332  0937  00FF               	movwf	127
  4333  0938  087F               	movf	127,w
  4334  0939  00F2               	movwf	nrf24l01SetRXPipe@enRXAddr
  4335  093A                     l4281:	
  4336                           
  4337                           ;nrf24l01.c: 125: };nrf24l01.c: 127: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4338  093A  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4339  093B  001E               	movwi fsr1++
  4340  093C  3022               	movlw	34
  4341  093D  3188  206D         	fcall	_nrf24l01Send
  4342  093F  0008               	return
  4343  0940                     __end_of_nrf24l01SetRXPipe:	
  4344                           
  4345                           	psect	text5
  4346  0AEF                     __ptext5:	
  4347 ;; *************** function _nrf24l01GetPipe *****************
  4348 ;; Defined at:
  4349 ;;		line 161 in file "main.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;  name            1    wreg     PTR unsigned char 
  4352 ;;		 -> romDataMap(28), 
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;  name            1   10[BANK0 ] PTR unsigned char 
  4355 ;;		 -> romDataMap(28), 
  4356 ;;  i               1   11[BANK0 ] unsigned char 
  4357 ;;  pipe            1    9[BANK0 ] unsigned char 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  1    wreg      unsigned char 
  4360 ;; Registers used:
  4361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11, pclath, cstack
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;Total ram usage:        4 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    8
  4374 ;; This function calls:
  4375 ;;		___lwmod
  4376 ;;		_strlen
  4377 ;; This function is called by:
  4378 ;;		_main
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           
  4383                           ;psect for function _nrf24l01GetPipe
  4384  0AEF                     _nrf24l01GetPipe:	
  4385                           
  4386                           ;incstack = 0
  4387                           ; Regs used in _nrf24l01GetPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+btemp
      +                          +11+pclath+cstack]
  4388                           ;nrf24l01GetPipe@name stored from wreg
  4389  0AEF  0020               	movlb	0	; select bank0
  4390  0AF0  00AA               	movwf	nrf24l01GetPipe@name
  4391                           
  4392                           ;main.c: 162: unsigned char pipe = 0;
  4393  0AF1  01A9               	clrf	nrf24l01GetPipe@pipe
  4394                           
  4395                           ;main.c: 163: unsigned char i = 0;
  4396  0AF2  01AB               	clrf	nrf24l01GetPipe@i
  4397                           
  4398                           ;main.c: 166: for (i = 0; i < strlen(name); i++){
  4399  0AF3  01AB               	clrf	nrf24l01GetPipe@i
  4400  0AF4                     l4739:	
  4401  0AF4  082A               	movf	nrf24l01GetPipe@name,w
  4402  0AF5  3189  2104  318A   	fcall	_strlen
  4403  0AF8  0020               	movlb	0	; select bank0
  4404  0AF9  082B               	movf	nrf24l01GetPipe@i,w
  4405  0AFA  00FE               	movwf	126
  4406  0AFB  01FF               	clrf	127
  4407  0AFC  0875               	movf	117,w
  4408  0AFD  027F               	subwf	127,w
  4409  0AFE  1D03               	skipz
  4410  0AFF  2B02               	goto	u5265
  4411  0B00  0874               	movf	116,w
  4412  0B01  027E               	subwf	126,w
  4413  0B02                     u5265:	
  4414  0B02  1803               	btfsc	3,0
  4415  0B03  2B14               	goto	l4741
  4416                           
  4417                           ;main.c: 167: pipe+= name[i];
  4418  0B04  082B               	movf	nrf24l01GetPipe@i,w
  4419  0B05  072A               	addwf	nrf24l01GetPipe@name,w
  4420  0B06  00A8               	movwf	??_nrf24l01GetPipe
  4421  0B07  0828               	movf	??_nrf24l01GetPipe,w
  4422  0B08  0084               	movwf	4
  4423  0B09  3001               	movlw	1	; select bank2/3
  4424  0B0A  0085               	movwf	5
  4425  0B0B  0800               	movf	0,w
  4426  0B0C  00FF               	movwf	127
  4427  0B0D  087F               	movf	127,w
  4428  0B0E  07A9               	addwf	nrf24l01GetPipe@pipe,f
  4429  0B0F  3001               	movlw	1
  4430  0B10  00FF               	movwf	127
  4431  0B11  087F               	movf	127,w
  4432  0B12  07AB               	addwf	nrf24l01GetPipe@i,f
  4433  0B13  2AF4               	goto	l4739
  4434  0B14                     l4741:	
  4435                           
  4436                           ;main.c: 168: };main.c: 170: return (unsigned) pipe % 6;
  4437  0B14  3006               	movlw	6
  4438  0B15  00F0               	movwf	___lwmod@divisor
  4439  0B16  3000               	movlw	0
  4440  0B17  00F1               	movwf	___lwmod@divisor+1
  4441  0B18  0829               	movf	nrf24l01GetPipe@pipe,w
  4442  0B19  00FE               	movwf	126
  4443  0B1A  01FF               	clrf	127
  4444  0B1B  087E               	movf	126,w
  4445  0B1C  00F2               	movwf	___lwmod@dividend
  4446  0B1D  087F               	movf	127,w
  4447  0B1E  00F3               	movwf	___lwmod@dividend+1
  4448  0B1F  318A  2290         	fcall	___lwmod
  4449  0B21  0870               	movf	?___lwmod,w
  4450  0B22  0008               	return
  4451  0B23                     __end_of_nrf24l01GetPipe:	
  4452                           
  4453                           	psect	text6
  4454  0A90                     __ptext6:	
  4455 ;; *************** function ___lwmod *****************
  4456 ;; Defined at:
  4457 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  divisor         2    0[COMMON] unsigned int 
  4460 ;;  dividend        2    2[COMMON] unsigned int 
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;  counter         1    7[BANK0 ] unsigned char 
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  2    0[COMMON] unsigned int 
  4465 ;; Registers used:
  4466 ;;		wreg, status,2, status,0, btemp+11
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4472 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;Total ram usage:        5 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    7
  4479 ;; This function calls:
  4480 ;;		Nothing
  4481 ;; This function is called by:
  4482 ;;		_nrf24l01GetPipe
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           
  4487                           ;psect for function ___lwmod
  4488  0A90                     ___lwmod:	
  4489                           
  4490                           ;incstack = 0
  4491                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+11]
  4492  0A90  0870               	movf	___lwmod@divisor,w
  4493  0A91  0471               	iorwf	___lwmod@divisor+1,w
  4494  0A92  1903               	btfsc	3,2
  4495  0A93  2AB8               	goto	l4659
  4496  0A94  0020               	movlb	0	; select bank0
  4497  0A95  01A7               	clrf	___lwmod@counter
  4498  0A96  0AA7               	incf	___lwmod@counter,f
  4499  0A97                     l4649:	
  4500  0A97  1BF1               	btfsc	___lwmod@divisor+1,7
  4501  0A98  2AA3               	goto	l4651
  4502  0A99  3001               	movlw	1
  4503  0A9A                     u5155:	
  4504  0A9A  35F0               	lslf	___lwmod@divisor,f
  4505  0A9B  0DF1               	rlf	___lwmod@divisor+1,f
  4506  0A9C  0B89               	decfsz	9,f
  4507  0A9D  2A9A               	goto	u5155
  4508  0A9E  3001               	movlw	1
  4509  0A9F  00FF               	movwf	127
  4510  0AA0  087F               	movf	127,w
  4511  0AA1  07A7               	addwf	___lwmod@counter,f
  4512  0AA2  2A97               	goto	l4649
  4513  0AA3                     l4651:	
  4514  0AA3  0871               	movf	___lwmod@divisor+1,w
  4515  0AA4  0273               	subwf	___lwmod@dividend+1,w
  4516  0AA5  1D03               	skipz
  4517  0AA6  2AA9               	goto	u5175
  4518  0AA7  0870               	movf	___lwmod@divisor,w
  4519  0AA8  0272               	subwf	___lwmod@dividend,w
  4520  0AA9                     u5175:	
  4521  0AA9  1C03               	skipc
  4522  0AAA  2AAF               	goto	l4655
  4523  0AAB  0870               	movf	___lwmod@divisor,w
  4524  0AAC  02F2               	subwf	___lwmod@dividend,f
  4525  0AAD  0871               	movf	___lwmod@divisor+1,w
  4526  0AAE  3BF3               	subwfb	___lwmod@dividend+1,f
  4527  0AAF                     l4655:	
  4528  0AAF  3001               	movlw	1
  4529  0AB0                     u5185:	
  4530  0AB0  36F1               	lsrf	___lwmod@divisor+1,f
  4531  0AB1  0CF0               	rrf	___lwmod@divisor,f
  4532  0AB2  0B89               	decfsz	9,f
  4533  0AB3  2AB0               	goto	u5185
  4534  0AB4  3001               	movlw	1
  4535  0AB5  02A7               	subwf	___lwmod@counter,f
  4536  0AB6  1D03               	btfss	3,2
  4537  0AB7  2AA3               	goto	l4651
  4538  0AB8                     l4659:	
  4539  0AB8  0873               	movf	___lwmod@dividend+1,w
  4540  0AB9  00F1               	movwf	?___lwmod+1
  4541  0ABA  0872               	movf	___lwmod@dividend,w
  4542  0ABB  00F0               	movwf	?___lwmod
  4543  0ABC  0008               	return
  4544  0ABD                     __end_of___lwmod:	
  4545                           
  4546                           	psect	text7
  4547  0429                     __ptext7:	
  4548 ;; *************** function _loop *****************
  4549 ;; Defined at:
  4550 ;;		line 107 in file "main.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;		None
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  packet         33   12[BANK2 ] struct .
  4555 ;;  ta              3    3[BANK2 ] float 
  4556 ;;  vt              3    0[BANK2 ] float 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  1    wreg      void 
  4559 ;; Registers used:
  4560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4567 ;;      Locals:         0       0       0      45       0       0       0       0       0       0       0       0       
      +0       0
  4568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4569 ;;      Totals:         0       0       0      45       0       0       0       0       0       0       0       0       
      +0       0
  4570 ;;Total ram usage:       45 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:   14
  4573 ;; This function calls:
  4574 ;;		___ftadd
  4575 ;;		___ftdiv
  4576 ;;		___ftmul
  4577 ;;		___ftneg
  4578 ;;		___lwtoft
  4579 ;;		_getADCValue
  4580 ;;		_sendMessage
  4581 ;; This function is called by:
  4582 ;;		_main
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           
  4587                           ;psect for function _loop
  4588  0429                     _loop:	
  4589                           
  4590                           ;main.c: 109: nrf24l01Packet_t packet;;main.c: 117: sendMessage(&packet, "COUNT", counte
      +                          r);
  4591                           
  4592                           ;incstack = 0
  4593                           ; Regs used in _loop: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  4594  0429  302C               	movlw	low loop@packet
  4595  042A  0021               	movlb	1	; select bank1
  4596  042B  00B3               	movwf	sendMessage@packet^(0+128)
  4597  042C  3001               	movlw	high loop@packet
  4598  042D  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  4599  042E  3034               	movlw	low (STR_3| (0+32768))
  4600  042F  00B5               	movwf	sendMessage@topic^(0+128)
  4601  0430  3090               	movlw	high (STR_3| (0+32768))
  4602  0431  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  4603  0432  0868               	movf	(_counter+1)^(0+128),w
  4604  0433  00F1               	movwf	___lwtoft@c+1
  4605  0434  0867               	movf	_counter^(0+128),w
  4606  0435  00F0               	movwf	___lwtoft@c
  4607  0436  3188  2080  3184   	fcall	___lwtoft
  4608  0439  0870               	movf	?___lwtoft,w
  4609  043A  0021               	movlb	1	; select bank1
  4610  043B  00B7               	movwf	sendMessage@value^(0+128)
  4611  043C  0871               	movf	?___lwtoft+1,w
  4612  043D  00B8               	movwf	(sendMessage@value+1)^(0+128)
  4613  043E  0872               	movf	?___lwtoft+2,w
  4614  043F  00B9               	movwf	(sendMessage@value+2)^(0+128)
  4615  0440  318D  25A5  3184   	fcall	_sendMessage
  4616                           
  4617                           ;main.c: 124: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4618  0443  30CF               	movlw	207
  4619  0444  0020               	movlb	0	; select bank0
  4620  0445  00CC               	movwf	___ftmul@f1
  4621  0446  3046               	movlw	70
  4622  0447  00CD               	movwf	___ftmul@f1+1
  4623  0448  3040               	movlw	64
  4624  0449  00CE               	movwf	___ftmul@f1+2
  4625  044A  3004               	movlw	4
  4626  044B  318E  26B2  3184   	fcall	_getADCValue
  4627  044E  0020               	movlb	0	; select bank0
  4628  044F  0843               	movf	?_getADCValue,w
  4629  0450  00CF               	movwf	___ftmul@f2
  4630  0451  0844               	movf	?_getADCValue+1,w
  4631  0452  00D0               	movwf	___ftmul@f2+1
  4632  0453  0845               	movf	?_getADCValue+2,w
  4633  0454  00D1               	movwf	___ftmul@f2+2
  4634  0455  3186  26B5  3184   	fcall	___ftmul
  4635  0458  0020               	movlb	0	; select bank0
  4636  0459  084C               	movf	?___ftmul,w
  4637  045A  0022               	movlb	2	; select bank2
  4638  045B  00A6               	movwf	_loop$2253^(0+256)
  4639  045C  0020               	movlb	0	; select bank0
  4640  045D  084D               	movf	?___ftmul+1,w
  4641  045E  0022               	movlb	2	; select bank2
  4642  045F  00A7               	movwf	(_loop$2253+1)^(0+256)
  4643  0460  0020               	movlb	0	; select bank0
  4644  0461  084E               	movf	?___ftmul+2,w
  4645  0462  0022               	movlb	2	; select bank2
  4646  0463  00A8               	movwf	(_loop$2253+2)^(0+256)
  4647                           
  4648                           ;main.c: 124: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4649  0464  302C               	movlw	low loop@packet
  4650  0465  0021               	movlb	1	; select bank1
  4651  0466  00B3               	movwf	sendMessage@packet^(0+128)
  4652  0467  3001               	movlw	high loop@packet
  4653  0468  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  4654  0469  3044               	movlw	low (STR_4| (0+32768))
  4655  046A  00B5               	movwf	sendMessage@topic^(0+128)
  4656  046B  3090               	movlw	high (STR_4| (0+32768))
  4657  046C  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  4658  046D  0022               	movlb	2	; select bank2
  4659  046E  0826               	movf	_loop$2253^(0+256),w
  4660  046F  0021               	movlb	1	; select bank1
  4661  0470  00B7               	movwf	sendMessage@value^(0+128)
  4662  0471  0022               	movlb	2	; select bank2
  4663  0472  0827               	movf	(_loop$2253+1)^(0+256),w
  4664  0473  0021               	movlb	1	; select bank1
  4665  0474  00B8               	movwf	(sendMessage@value+1)^(0+128)
  4666  0475  0022               	movlb	2	; select bank2
  4667  0476  0828               	movf	(_loop$2253+2)^(0+256),w
  4668  0477  0021               	movlb	1	; select bank1
  4669  0478  00B9               	movwf	(sendMessage@value+2)^(0+128)
  4670  0479  318D  25A5  3184   	fcall	_sendMessage
  4671                           
  4672                           ;main.c: 136: FVRCONbits.TSEN = 1;
  4673  047C  0022               	movlb	2	; select bank2
  4674  047D  1697               	bsf	23,5	;volatile
  4675                           
  4676                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4677  047E  303D               	movlw	61
  4678  047F  318E  26B2  3184   	fcall	_getADCValue
  4679  0482  0020               	movlb	0	; select bank0
  4680  0483  0843               	movf	?_getADCValue,w
  4681  0484  00CC               	movwf	___ftneg@f1
  4682  0485  0844               	movf	?_getADCValue+1,w
  4683  0486  00CD               	movwf	___ftneg@f1+1
  4684  0487  0845               	movf	?_getADCValue+2,w
  4685  0488  00CE               	movwf	___ftneg@f1+2
  4686  0489  3188  2029  3184   	fcall	___ftneg
  4687  048C  0020               	movlb	0	; select bank0
  4688  048D  084C               	movf	?___ftneg,w
  4689  048E  0022               	movlb	2	; select bank2
  4690  048F  00A9               	movwf	_loop$2254^(0+256)
  4691  0490  0020               	movlb	0	; select bank0
  4692  0491  084D               	movf	?___ftneg+1,w
  4693  0492  0022               	movlb	2	; select bank2
  4694  0493  00AA               	movwf	(_loop$2254+1)^(0+256)
  4695  0494  0020               	movlb	0	; select bank0
  4696  0495  084E               	movf	?___ftneg+2,w
  4697  0496  0022               	movlb	2	; select bank2
  4698  0497  00AB               	movwf	(_loop$2254+2)^(0+256)
  4699                           
  4700                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4701  0498  3000               	movlw	0
  4702  0499  0020               	movlb	0	; select bank0
  4703  049A  00B6               	movwf	___ftdiv@f2
  4704  049B  3000               	movlw	0
  4705  049C  00B7               	movwf	___ftdiv@f2+1
  4706  049D  3040               	movlw	64
  4707  049E  00B8               	movwf	___ftdiv@f2+2
  4708  049F  3012               	movlw	18
  4709  04A0  00AC               	movwf	___ftadd@f1
  4710  04A1  3003               	movlw	3
  4711  04A2  00AD               	movwf	___ftadd@f1+1
  4712  04A3  3040               	movlw	64
  4713  04A4  00AE               	movwf	___ftadd@f1+2
  4714  04A5  0022               	movlb	2	; select bank2
  4715  04A6  0829               	movf	_loop$2254^(0+256),w
  4716  04A7  0020               	movlb	0	; select bank0
  4717  04A8  00AF               	movwf	___ftadd@f2
  4718  04A9  0022               	movlb	2	; select bank2
  4719  04AA  082A               	movf	(_loop$2254+1)^(0+256),w
  4720  04AB  0020               	movlb	0	; select bank0
  4721  04AC  00B0               	movwf	___ftadd@f2+1
  4722  04AD  0022               	movlb	2	; select bank2
  4723  04AE  082B               	movf	(_loop$2254+2)^(0+256),w
  4724  04AF  0020               	movlb	0	; select bank0
  4725  04B0  00B1               	movwf	___ftadd@f2+2
  4726  04B1  3183  2333  3184   	fcall	___ftadd
  4727  04B4  0020               	movlb	0	; select bank0
  4728  04B5  082C               	movf	?___ftadd,w
  4729  04B6  00B9               	movwf	___ftdiv@f1
  4730  04B7  082D               	movf	?___ftadd+1,w
  4731  04B8  00BA               	movwf	___ftdiv@f1+1
  4732  04B9  082E               	movf	?___ftadd+2,w
  4733  04BA  00BB               	movwf	___ftdiv@f1+2
  4734  04BB  318F  2757  3184   	fcall	___ftdiv
  4735  04BE  0020               	movlb	0	; select bank0
  4736  04BF  0836               	movf	?___ftdiv,w
  4737  04C0  0022               	movlb	2	; select bank2
  4738  04C1  00A0               	movwf	loop@vt^(0+256)
  4739  04C2  0020               	movlb	0	; select bank0
  4740  04C3  0837               	movf	?___ftdiv+1,w
  4741  04C4  0022               	movlb	2	; select bank2
  4742  04C5  00A1               	movwf	(loop@vt+1)^(0+256)
  4743  04C6  0020               	movlb	0	; select bank0
  4744  04C7  0838               	movf	?___ftdiv+2,w
  4745  04C8  0022               	movlb	2	; select bank2
  4746  04C9  00A2               	movwf	(loop@vt+2)^(0+256)
  4747                           
  4748                           ;main.c: 138: FVRCONbits.TSEN = 0;
  4749  04CA  1297               	bcf	23,5	;volatile
  4750                           
  4751                           ;main.c: 143: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4752  04CB  30A9               	movlw	169
  4753  04CC  0020               	movlb	0	; select bank0
  4754  04CD  00AC               	movwf	___ftadd@f1
  4755  04CE  30D1               	movlw	209
  4756  04CF  00AD               	movwf	___ftadd@f1+1
  4757  04D0  3043               	movlw	67
  4758  04D1  00AE               	movwf	___ftadd@f1+2
  4759  04D2  3004               	movlw	4
  4760  04D3  00B6               	movwf	___ftdiv@f2
  4761  04D4  30AD               	movlw	173
  4762  04D5  00B7               	movwf	___ftdiv@f2+1
  4763  04D6  30BA               	movlw	186
  4764  04D7  00B8               	movwf	___ftdiv@f2+2
  4765  04D8  0022               	movlb	2	; select bank2
  4766  04D9  0820               	movf	loop@vt^(0+256),w
  4767  04DA  0020               	movlb	0	; select bank0
  4768  04DB  00B9               	movwf	___ftdiv@f1
  4769  04DC  0022               	movlb	2	; select bank2
  4770  04DD  0821               	movf	(loop@vt+1)^(0+256),w
  4771  04DE  0020               	movlb	0	; select bank0
  4772  04DF  00BA               	movwf	___ftdiv@f1+1
  4773  04E0  0022               	movlb	2	; select bank2
  4774  04E1  0822               	movf	(loop@vt+2)^(0+256),w
  4775  04E2  0020               	movlb	0	; select bank0
  4776  04E3  00BB               	movwf	___ftdiv@f1+2
  4777  04E4  318F  2757  3184   	fcall	___ftdiv
  4778  04E7  0020               	movlb	0	; select bank0
  4779  04E8  0836               	movf	?___ftdiv,w
  4780  04E9  00AF               	movwf	___ftadd@f2
  4781  04EA  0837               	movf	?___ftdiv+1,w
  4782  04EB  00B0               	movwf	___ftadd@f2+1
  4783  04EC  0838               	movf	?___ftdiv+2,w
  4784  04ED  00B1               	movwf	___ftadd@f2+2
  4785  04EE  3183  2333  3184   	fcall	___ftadd
  4786  04F1  0020               	movlb	0	; select bank0
  4787  04F2  082C               	movf	?___ftadd,w
  4788  04F3  0022               	movlb	2	; select bank2
  4789  04F4  00A3               	movwf	loop@ta^(0+256)
  4790  04F5  0020               	movlb	0	; select bank0
  4791  04F6  082D               	movf	?___ftadd+1,w
  4792  04F7  0022               	movlb	2	; select bank2
  4793  04F8  00A4               	movwf	(loop@ta+1)^(0+256)
  4794  04F9  0020               	movlb	0	; select bank0
  4795  04FA  082E               	movf	?___ftadd+2,w
  4796  04FB  0022               	movlb	2	; select bank2
  4797  04FC  00A5               	movwf	(loop@ta+2)^(0+256)
  4798                           
  4799                           ;main.c: 145: sendMessage(&packet, "TEMP", ta);
  4800  04FD  302C               	movlw	low loop@packet
  4801  04FE  0021               	movlb	1	; select bank1
  4802  04FF  00B3               	movwf	sendMessage@packet^(0+128)
  4803  0500  3001               	movlw	high loop@packet
  4804  0501  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  4805  0502  303F               	movlw	low (STR_5| (0+32768))
  4806  0503  00B5               	movwf	sendMessage@topic^(0+128)
  4807  0504  3090               	movlw	high (STR_5| (0+32768))
  4808  0505  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  4809  0506  0022               	movlb	2	; select bank2
  4810  0507  0823               	movf	loop@ta^(0+256),w
  4811  0508  0021               	movlb	1	; select bank1
  4812  0509  00B7               	movwf	sendMessage@value^(0+128)
  4813  050A  0022               	movlb	2	; select bank2
  4814  050B  0824               	movf	(loop@ta+1)^(0+256),w
  4815  050C  0021               	movlb	1	; select bank1
  4816  050D  00B8               	movwf	(sendMessage@value+1)^(0+128)
  4817  050E  0022               	movlb	2	; select bank2
  4818  050F  0825               	movf	(loop@ta+2)^(0+256),w
  4819  0510  0021               	movlb	1	; select bank1
  4820  0511  00B9               	movwf	(sendMessage@value+2)^(0+128)
  4821  0512  318D  25A5         	fcall	_sendMessage
  4822  0514  0008               	return
  4823  0515                     __end_of_loop:	
  4824                           
  4825                           	psect	text8
  4826  0DA5                     __ptext8:	
  4827 ;; *************** function _sendMessage *****************
  4828 ;; Defined at:
  4829 ;;		line 87 in file "main.c"
  4830 ;; Parameters:    Size  Location     Type
  4831 ;;  packet          2   19[BANK1 ] PTR struct .
  4832 ;;		 -> main@packet(33), loop@packet(33), 
  4833 ;;  topic           2   21[BANK1 ] PTR const unsigned char 
  4834 ;;		 -> STR_7(5), STR_5(5), STR_4(5), STR_3(6), 
  4835 ;;  value           3   23[BANK1 ] float 
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;  ftoaStatus      2   26[BANK1 ] int 
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  1    wreg      void 
  4840 ;; Registers used:
  4841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4847 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  4851 ;;Total ram usage:        9 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:   13
  4854 ;; This function calls:
  4855 ;;		_ftoa
  4856 ;;		_memset
  4857 ;;		_nrf24l01SendPacket
  4858 ;;		_sleepMs
  4859 ;;		_strcat
  4860 ;;		_strcpy
  4861 ;; This function is called by:
  4862 ;;		_loop
  4863 ;;		_main
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867                           
  4868                           ;psect for function _sendMessage
  4869  0DA5                     _sendMessage:	
  4870                           
  4871                           ;main.c: 89: int ftoaStatus;;main.c: 91: memset(packet->Message, 0, sizeof(packet->Messa
      +                          ge));
  4872                           
  4873                           ;incstack = 0
  4874                           ; Regs used in _sendMessage: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath+cstack]
  4875  0DA5  3020               	movlw	32
  4876  0DA6  001E               	movwi fsr1++
  4877  0DA7  3000               	movlw	0
  4878  0DA8  001E               	movwi fsr1++
  4879  0DA9  3000               	movlw	0
  4880  0DAA  001E               	movwi fsr1++
  4881  0DAB  001E               	movwi fsr1++
  4882  0DAC  0021               	movlb	1	; select bank1
  4883  0DAD  0833               	movf	sendMessage@packet^(0+128),w
  4884  0DAE  3E01               	addlw	1
  4885  0DAF  00FE               	movwf	126
  4886  0DB0  3000               	movlw	0
  4887  0DB1  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4888  0DB2  00FF               	movwf	127
  4889  0DB3  087E               	movf	126,w
  4890  0DB4  001E               	movwi fsr1++
  4891  0DB5  087F               	movf	127,w
  4892  0DB6  001E               	movwi fsr1++
  4893  0DB7  318A  22BD  318D   	fcall	_memset
  4894                           
  4895                           ;main.c: 92: strcpy(packet->Message, romData->name);
  4896  0DBA  0021               	movlb	1	; select bank1
  4897  0DBB  0869               	movf	_romData^(0+128),w
  4898  0DBC  3E01               	addlw	1
  4899  0DBD  001E               	movwi fsr1++
  4900  0DBE  3001               	movlw	1
  4901  0DBF  001E               	movwi fsr1++
  4902  0DC0  0833               	movf	sendMessage@packet^(0+128),w
  4903  0DC1  3E01               	addlw	1
  4904  0DC2  00FE               	movwf	126
  4905  0DC3  3000               	movlw	0
  4906  0DC4  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4907  0DC5  00FF               	movwf	127
  4908  0DC6  087E               	movf	126,w
  4909  0DC7  001E               	movwi fsr1++
  4910  0DC8  087F               	movf	127,w
  4911  0DC9  001E               	movwi fsr1++
  4912  0DCA  318A  223A  318D   	fcall	_strcpy
  4913                           
  4914                           ;main.c: 93: strcat(packet->Message, "/");
  4915  0DCD  0021               	movlb	1	; select bank1
  4916  0DCE  0833               	movf	sendMessage@packet^(0+128),w
  4917  0DCF  3E01               	addlw	1
  4918  0DD0  00AD               	movwf	strcat@to^(0+128)
  4919  0DD1  3000               	movlw	0
  4920  0DD2  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4921  0DD3  00AE               	movwf	(strcat@to+1)^(0+128)
  4922  0DD4  3052               	movlw	low (STR_1| (0+32768))
  4923  0DD5  00AF               	movwf	strcat@from^(0+128)
  4924  0DD6  3090               	movlw	high (STR_1| (0+32768))
  4925  0DD7  00B0               	movwf	(strcat@from^(0+128)+1)
  4926  0DD8  3189  21E7  318D   	fcall	_strcat
  4927                           
  4928                           ;main.c: 94: strcat(packet->Message, topic);
  4929  0DDB  0021               	movlb	1	; select bank1
  4930  0DDC  0833               	movf	sendMessage@packet^(0+128),w
  4931  0DDD  3E01               	addlw	1
  4932  0DDE  00AD               	movwf	strcat@to^(0+128)
  4933  0DDF  3000               	movlw	0
  4934  0DE0  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4935  0DE1  00AE               	movwf	(strcat@to+1)^(0+128)
  4936  0DE2  0836               	movf	(sendMessage@topic+1)^(0+128),w
  4937  0DE3  00B0               	movwf	(strcat@from+1)^(0+128)
  4938  0DE4  0835               	movf	sendMessage@topic^(0+128),w
  4939  0DE5  00AF               	movwf	strcat@from^(0+128)
  4940  0DE6  3189  21E7  318D   	fcall	_strcat
  4941                           
  4942                           ;main.c: 95: strcat(packet->Message, "/");
  4943  0DE9  0021               	movlb	1	; select bank1
  4944  0DEA  0833               	movf	sendMessage@packet^(0+128),w
  4945  0DEB  3E01               	addlw	1
  4946  0DEC  00AD               	movwf	strcat@to^(0+128)
  4947  0DED  3000               	movlw	0
  4948  0DEE  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4949  0DEF  00AE               	movwf	(strcat@to+1)^(0+128)
  4950  0DF0  3052               	movlw	low (STR_1| (0+32768))
  4951  0DF1  00AF               	movwf	strcat@from^(0+128)
  4952  0DF2  3090               	movlw	high (STR_1| (0+32768))
  4953  0DF3  00B0               	movwf	(strcat@from^(0+128)+1)
  4954  0DF4  3189  21E7  318D   	fcall	_strcat
  4955                           
  4956                           ;main.c: 96: strcat(packet->Message, ftoa(value, &ftoaStatus));
  4957  0DF7  0021               	movlb	1	; select bank1
  4958  0DF8  0833               	movf	sendMessage@packet^(0+128),w
  4959  0DF9  3E01               	addlw	1
  4960  0DFA  00AD               	movwf	strcat@to^(0+128)
  4961  0DFB  3000               	movlw	0
  4962  0DFC  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4963  0DFD  00AE               	movwf	(strcat@to+1)^(0+128)
  4964  0DFE  0837               	movf	sendMessage@value^(0+128),w
  4965  0DFF  00A0               	movwf	ftoa@f^(0+128)
  4966  0E00  0838               	movf	(sendMessage@value+1)^(0+128),w
  4967  0E01  00A1               	movwf	(ftoa@f+1)^(0+128)
  4968  0E02  0839               	movf	(sendMessage@value+2)^(0+128),w
  4969  0E03  00A2               	movwf	(ftoa@f+2)^(0+128)
  4970  0E04  30BA               	movlw	(low (sendMessage@ftoaStatus| 0))& (0+255)
  4971  0E05  00FF               	movwf	127
  4972  0E06  087F               	movf	127,w
  4973  0E07  00A3               	movwf	ftoa@status^(0+128)
  4974  0E08  3185  2515  318D   	fcall	_ftoa
  4975  0E0B  0021               	movlb	1	; select bank1
  4976  0E0C  00AF               	movwf	strcat@from^(0+128)
  4977  0E0D  3001               	movlw	1
  4978  0E0E  00B0               	movwf	(strcat@from+1)^(0+128)
  4979  0E0F  3189  21E7  318D   	fcall	_strcat
  4980                           
  4981                           ;main.c: 98: packet->packetData.byte = 0;
  4982  0E12  0021               	movlb	1	; select bank1
  4983  0E13  0833               	movf	sendMessage@packet^(0+128),w
  4984  0E14  0084               	movwf	4
  4985  0E15  0834               	movf	(sendMessage@packet+1)^(0+128),w
  4986  0E16  0085               	movwf	5
  4987  0E17  0180               	clrf	0
  4988                           
  4989                           ;main.c: 99: packet->packetData.ACKRequest = 1;
  4990  0E18  0833               	movf	sendMessage@packet^(0+128),w
  4991  0E19  0084               	movwf	4
  4992  0E1A  0834               	movf	(sendMessage@packet+1)^(0+128),w
  4993  0E1B  0085               	movwf	5
  4994  0E1C  1500               	bsf	0,2
  4995                           
  4996                           ;main.c: 101: nrf24l01SendPacket(packet);
  4997  0E1D  0834               	movf	(sendMessage@packet+1)^(0+128),w
  4998  0E1E  00F1               	movwf	nrf24l01SendPacket@txPacket+1
  4999  0E1F  0833               	movf	sendMessage@packet^(0+128),w
  5000  0E20  00F0               	movwf	nrf24l01SendPacket@txPacket
  5001  0E21  318B  23D7  318D   	fcall	_nrf24l01SendPacket
  5002                           
  5003                           ;main.c: 103: sleepMs(2000);
  5004  0E24  30D0               	movlw	208
  5005  0E25  00F0               	movwf	sleepMs@milliseconds
  5006  0E26  3007               	movlw	7
  5007  0E27  00F1               	movwf	sleepMs@milliseconds+1
  5008  0E28  318A  2264         	fcall	_sleepMs
  5009  0E2A  0008               	return
  5010  0E2B                     __end_of_sendMessage:	
  5011                           
  5012                           	psect	text9
  5013  09E7                     __ptext9:	
  5014 ;; *************** function _strcat *****************
  5015 ;; Defined at:
  5016 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;  to              2   13[BANK1 ] PTR unsigned char 
  5019 ;;		 -> main@packet(33), loop@packet(33), 
  5020 ;;  from            2   15[BANK1 ] PTR const unsigned char 
  5021 ;;		 -> ftoa@buf(17), STR_7(5), STR_5(5), STR_4(5), 
  5022 ;;		 -> STR_3(6), STR_2(2), STR_1(2), 
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;  cp              2   17[BANK1 ] PTR unsigned char 
  5025 ;;		 -> main@packet(33), loop@packet(33), 
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  2   13[BANK1 ] PTR unsigned char 
  5028 ;; Registers used:
  5029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5035 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5036 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5038 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5039 ;;Total ram usage:        6 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    7
  5042 ;; This function calls:
  5043 ;;		Nothing
  5044 ;; This function is called by:
  5045 ;;		_sendMessage
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           
  5050                           ;psect for function _strcat
  5051  09E7                     _strcat:	
  5052                           
  5053                           ;incstack = 0
  5054                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5055  09E7  0021               	movlb	1	; select bank1
  5056  09E8  082E               	movf	(strcat@to+1)^(0+128),w
  5057  09E9  00B2               	movwf	(strcat@cp+1)^(0+128)
  5058  09EA  082D               	movf	strcat@to^(0+128),w
  5059  09EB  00B1               	movwf	strcat@cp^(0+128)
  5060  09EC                     l4211:	
  5061  09EC  0831               	movf	strcat@cp^(0+128),w
  5062  09ED  0084               	movwf	4
  5063  09EE  0832               	movf	(strcat@cp+1)^(0+128),w
  5064  09EF  0085               	movwf	5
  5065  09F0  0800               	movf	0,w
  5066  09F1  1903               	btfsc	3,2
  5067  09F2  2A00               	goto	l4215
  5068  09F3  3001               	movlw	1
  5069  09F4  07B1               	addwf	strcat@cp^(0+128),f
  5070  09F5  3000               	movlw	0
  5071  09F6  3DB2               	addwfc	(strcat@cp+1)^(0+128),f
  5072  09F7  29EC               	goto	l4211
  5073  09F8                     l4213:	
  5074  09F8  3001               	movlw	1
  5075  09F9  07B1               	addwf	strcat@cp^(0+128),f
  5076  09FA  3000               	movlw	0
  5077  09FB  3DB2               	addwfc	(strcat@cp+1)^(0+128),f
  5078  09FC  3001               	movlw	1
  5079  09FD  07AF               	addwf	strcat@from^(0+128),f
  5080  09FE  3000               	movlw	0
  5081  09FF  3DB0               	addwfc	(strcat@from+1)^(0+128),f
  5082  0A00                     l4215:	
  5083  0A00  082F               	movf	strcat@from^(0+128),w
  5084  0A01  0084               	movwf	4
  5085  0A02  0830               	movf	(strcat@from+1)^(0+128),w
  5086  0A03  0085               	movwf	5
  5087  0A04  0800               	movf	0,w	;code access
  5088  0A05  00FF               	movwf	127
  5089  0A06  0831               	movf	strcat@cp^(0+128),w
  5090  0A07  0084               	movwf	4
  5091  0A08  0832               	movf	(strcat@cp+1)^(0+128),w
  5092  0A09  0085               	movwf	5
  5093  0A0A  087F               	movf	127,w
  5094  0A0B  0080               	movwf	0
  5095  0A0C  0800               	movf	0,w
  5096  0A0D  1903               	btfsc	3,2
  5097  0A0E  0008               	return
  5098  0A0F  29F8               	goto	l4213
  5099  0A10                     __end_of_strcat:	
  5100                           ;	Return value of _strcat is never used
  5101                           
  5102                           
  5103                           	psect	text10
  5104  0BD7                     __ptext10:	
  5105 ;; *************** function _nrf24l01SendPacket *****************
  5106 ;; Defined at:
  5107 ;;		line 131 in file "nrf24l01.c"
  5108 ;; Parameters:    Size  Location     Type
  5109 ;;  txPacket        2    0[COMMON] PTR struct .
  5110 ;;		 -> main@packet(33), loop@packet(33), 
  5111 ;; Auto vars:     Size  Location     Type
  5112 ;;  loopCount       2    7[BANK0 ] unsigned int 
  5113 ;; Return value:  Size  Location     Type
  5114 ;;                  1    wreg      void 
  5115 ;; Registers used:
  5116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
  5117 ;; Tracked objects:
  5118 ;;		On entry : 0/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5122 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5123 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5124 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5125 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5126 ;;Total ram usage:        5 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; Hardware stack levels required when called:   12
  5129 ;; This function calls:
  5130 ;;		_nrf24l01Service
  5131 ;;		_strcpy
  5132 ;; This function is called by:
  5133 ;;		_sendMessage
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           
  5138                           ;psect for function _nrf24l01SendPacket
  5139  0BD7                     _nrf24l01SendPacket:	
  5140                           
  5141                           ;nrf24l01.c: 134: unsigned int loopCount = 1000;
  5142                           
  5143                           ;incstack = 0
  5144                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-bte
      +                          mp+11+pclath]
  5145  0BD7  30E8               	movlw	232
  5146  0BD8  0020               	movlb	0	; select bank0
  5147  0BD9  00A7               	movwf	nrf24l01SendPacket@loopCount
  5148  0BDA  3003               	movlw	3
  5149  0BDB  00A8               	movwf	nrf24l01SendPacket@loopCount+1
  5150  0BDC                     l4249:	
  5151                           ;nrf24l01.c: 135: while (status.TX != 0){
  5152                           
  5153  0BDC  0862               	movf	_status,w	;volatile
  5154  0BDD  1903               	btfsc	3,2
  5155  0BDE  2BF5               	goto	l4251
  5156                           
  5157                           ;nrf24l01.c: 137: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  5158  0BDF  300B               	movlw	11
  5159  0BE0  00F2               	movwf	??_nrf24l01SendPacket
  5160  0BE1  3062               	movlw	98
  5161  0BE2                     u5417:	
  5162  0BE2  0B89               	decfsz	9,f
  5163  0BE3  2BE2               	goto	u5417
  5164  0BE4  0BF2               	decfsz	??_nrf24l01SendPacket,f
  5165  0BE5  2BE2               	goto	u5417
  5166  0BE6  3200               	nop2
  5167                           
  5168                           ;nrf24l01.c: 138: nrf24l01Service();
  5169  0BE7  3185  25FC  318B   	fcall	_nrf24l01Service
  5170                           
  5171                           ;nrf24l01.c: 140: if (!loopCount--){
  5172  0BEA  3001               	movlw	1
  5173  0BEB  0020               	movlb	0	; select bank0
  5174  0BEC  02A7               	subwf	nrf24l01SendPacket@loopCount,f
  5175  0BED  3000               	movlw	0
  5176  0BEE  3BA8               	subwfb	nrf24l01SendPacket@loopCount+1,f
  5177  0BEF  0A27               	incf	nrf24l01SendPacket@loopCount,w
  5178  0BF0  1D03               	skipz
  5179  0BF1  2BDC               	goto	l4249
  5180  0BF2  0A28               	incf	nrf24l01SendPacket@loopCount+1,w
  5181  0BF3  1D03               	btfss	3,2
  5182  0BF4  2BDC               	goto	l4249
  5183  0BF5                     l4251:	
  5184                           ;nrf24l01.c: 142: break;
  5185                           
  5186                           
  5187                           ;nrf24l01.c: 143: };nrf24l01.c: 144: };nrf24l01.c: 147: strcpy(TXPacket.Message, txPacke
      +                          t->Message);
  5188  0BF5  0870               	movf	nrf24l01SendPacket@txPacket,w
  5189  0BF6  3E01               	addlw	1
  5190  0BF7  00FE               	movwf	126
  5191  0BF8  3000               	movlw	0
  5192  0BF9  3D71               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5193  0BFA  00FF               	movwf	127
  5194  0BFB  087E               	movf	126,w
  5195  0BFC  001E               	movwi fsr1++
  5196  0BFD  087F               	movf	127,w
  5197  0BFE  001E               	movwi fsr1++
  5198  0BFF  30A1               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5199  0C00  001E               	movwi fsr1++
  5200  0C01  3001               	movlw	1
  5201  0C02  001E               	movwi fsr1++
  5202  0C03  318A  223A  318B   	fcall	_strcpy
  5203                           
  5204                           ;nrf24l01.c: 148: TXPacket.packetData.byte = txPacket->packetData.byte;
  5205  0C06  0870               	movf	nrf24l01SendPacket@txPacket,w
  5206  0C07  0084               	movwf	4
  5207  0C08  0871               	movf	nrf24l01SendPacket@txPacket+1,w
  5208  0C09  0085               	movwf	5
  5209  0C0A  0800               	movf	0,w
  5210  0C0B  00FF               	movwf	127
  5211  0C0C  087F               	movf	127,w
  5212  0C0D  0023               	movlb	3	; select bank3
  5213  0C0E  00A0               	movwf	_TXPacket^(0+384)
  5214                           
  5215                           ;nrf24l01.c: 151: status.TX = 1;
  5216  0C0F  3001               	movlw	1
  5217  0C10  00FF               	movwf	127
  5218  0C11  087F               	movf	127,w
  5219  0C12  0020               	movlb	0	; select bank0
  5220  0C13  00E2               	movwf	_status	;volatile
  5221                           
  5222                           ;nrf24l01.c: 154: nrf24l01Service();
  5223  0C14  3185  25FC         	fcall	_nrf24l01Service
  5224  0C16  0008               	return
  5225  0C17                     __end_of_nrf24l01SendPacket:	
  5226                           
  5227                           	psect	text11
  5228  05FC                     __ptext11:	
  5229 ;; *************** function _nrf24l01Service *****************
  5230 ;; Defined at:
  5231 ;;		line 250 in file "nrf24l01.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;		None
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  width           1  [STACK] unsigned char 
  5236 ;;  i               1  [STACK] unsigned char 
  5237 ;; Return value:  Size  Location     Type
  5238 ;;                  1    wreg      void 
  5239 ;; Registers used:
  5240 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 1D/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;Total ram usage:        0 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:   11
  5253 ;; This function calls:
  5254 ;;		_memset
  5255 ;;		_nrf24l01SPIEnd
  5256 ;;		_nrf24l01SPISend
  5257 ;;		_nrf24l01SPIStart
  5258 ;;		_nrf24l01Send
  5259 ;;		_nrf24l01SendTXBuffer
  5260 ;;		_nrf24l01SetRXMode
  5261 ;;		_nrf24l01SetTXPipe
  5262 ;;		_strcmp
  5263 ;;		_strcpy
  5264 ;; This function is called by:
  5265 ;;		_nrf24l01SendPacket
  5266 ;;		_nrf24l01ISR
  5267 ;; This function uses a reentrant model
  5268 ;;
  5269                           
  5270                           
  5271                           ;psect for function _nrf24l01Service
  5272  05FC                     _nrf24l01Service:	
  5273                           
  5274                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5275  05FC  3142               	addfsr 1,2
  5276                           
  5277                           ;nrf24l01.c: 252: unsigned char i;;nrf24l01.c: 254: if (status.TX == 1){
  5278                           
  5279                           ;incstack = 0
  5280 ;; hardware stack exceeded
  5281                           ; Regs used in _nrf24l01Service: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+
      +                          11+pclath]
  5282  05FD  0020               	movlb	0	; select bank0
  5283  05FE  0362               	decf	_status,w	;volatile
  5284  05FF  1D03               	btfss	3,2
  5285  0600  2E07               	goto	l4455
  5286                           
  5287                           ;nrf24l01.c: 257: status.TX = 2;
  5288  0601  3002               	movlw	2
  5289  0602  00E2               	movwf	_status	;volatile
  5290                           
  5291                           ;nrf24l01.c: 258: nrf24l01SendTXBuffer(&TXPacket);
  5292  0603  30A0               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  5293  0604  318C  245A  3185   	fcall	_nrf24l01SendTXBuffer
  5294  0607                     l4455:	
  5295                           
  5296                           ;nrf24l01.c: 259: };nrf24l01.c: 262: if (status.TX == 3){
  5297  0607  3003               	movlw	3
  5298  0608  0662               	xorwf	_status,w	;volatile
  5299  0609  1D03               	btfss	3,2
  5300  060A  2E11               	goto	l4461
  5301                           
  5302                           ;nrf24l01.c: 265: if (!status.retryCount--){
  5303  060B  03E6               	decf	_status+4,f	;volatile
  5304  060C  0A66               	incf	_status+4,w	;volatile
  5305  060D  1D03               	btfss	3,2
  5306  060E  2E11               	goto	l4461
  5307                           
  5308                           ;nrf24l01.c: 266: status.TX = 1;
  5309  060F  3001               	movlw	1
  5310  0610  00E2               	movwf	_status	;volatile
  5311  0611                     l4461:	
  5312                           
  5313                           ;nrf24l01.c: 267: };nrf24l01.c: 268: };nrf24l01.c: 271: if (status.RX == 1){
  5314  0611  0363               	decf	_status+1,w	;volatile
  5315  0612  1D03               	btfss	3,2
  5316  0613  2E84               	goto	l4501
  5317                           
  5318                           ;nrf24l01.c: 274: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5319  0614  3020               	movlw	32
  5320  0615  001E               	movwi fsr1++
  5321  0616  3000               	movlw	0
  5322  0617  001E               	movwi fsr1++
  5323  0618  3000               	movlw	0
  5324  0619  001E               	movwi fsr1++
  5325  061A  001E               	movwi fsr1++
  5326  061B  304E               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5327  061C  001E               	movwi fsr1++
  5328  061D  3001               	movlw	1
  5329  061E  001E               	movwi fsr1++
  5330  061F  318A  22BD  3185   	fcall	_memset
  5331                           
  5332                           ;nrf24l01.c: 275: RXPacket.packetData.byte = 0x00;
  5333  0622  0022               	movlb	2	; select bank2
  5334  0623  01CD               	clrf	_RXPacket^(0+256)
  5335                           
  5336                           ;nrf24l01.c: 278: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5337  0624  3000               	movlw	0
  5338  0625  001E               	movwi fsr1++
  5339  0626  3060               	movlw	96
  5340  0627  3188  206D  3185   	fcall	_nrf24l01Send
  5341                           
  5342                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5343  062A  3FFE               	movwi [-2]fsr1
  5344                           
  5345                           ;nrf24l01.c: 281: PORTAbits.RA0 = 0;
  5346  062B  0020               	movlb	0	; select bank0
  5347  062C  100C               	bcf	12,0	;volatile
  5348                           
  5349                           ;nrf24l01.c: 284: nrf24l01SPIStart();
  5350  062D  3188  203B  3185   	fcall	_nrf24l01SPIStart
  5351                           
  5352                           ;nrf24l01.c: 287: nrf24l01SPISend((unsigned) 0b01100001);
  5353  0630  3061               	movlw	97
  5354  0631  3188  205E  3185   	fcall	_nrf24l01SPISend
  5355                           
  5356                           ;nrf24l01.c: 290: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5357  0634  3000               	movlw	0
  5358  0635  3188  205E  3185   	fcall	_nrf24l01SPISend
  5359  0638  0022               	movlb	2	; select bank2
  5360  0639  00CD               	movwf	_RXPacket^(0+256)
  5361                           
  5362                           ;nrf24l01.c: 291: width--;
  5363                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5364  063A  3F7E               	moviw [-2]fsr1
  5365  063B  00F4               	movwf	116
  5366  063C  3001               	movlw	1
  5367  063D  0274               	subwf	116,w
  5368  063E  3FFE               	movwi [-2]fsr1
  5369                           
  5370                           ;nrf24l01.c: 293: for (i = 0; i < width; i++) {
  5371                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5372  063F  3000               	movlw	0
  5373  0640  3FFF               	movwi [-1]fsr1
  5374  0641                     l4485:	
  5375                           
  5376                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5377  0641  3F7F               	moviw [-1]fsr1
  5378  0642  00FF               	movwf	127
  5379                           
  5380                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5381  0643  3F7E               	moviw [-2]fsr1
  5382  0644  027F               	subwf	127,w
  5383  0645  1803               	btfsc	3,0
  5384  0646  2E56               	goto	l4487
  5385                           
  5386                           ;nrf24l01.c: 295: RXPacket.Message[i] = nrf24l01SPISend(0);
  5387                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5388  0647  3F7F               	moviw [-1]fsr1
  5389  0648  3E4E               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5390  0649  0084               	movwf	4
  5391  064A  3001               	movlw	1	; select bank2/3
  5392  064B  3001               	movlw	1	; select bank2/3
  5393  064C  0085               	movwf	5
  5394  064D  3000               	movlw	0
  5395  064E  3188  205E  3185   	fcall	_nrf24l01SPISend
  5396  0651  0080               	movwf	0
  5397                           
  5398                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5399  0652  3F7F               	moviw [-1]fsr1
  5400  0653  3E01               	addlw	1
  5401  0654  3FFF               	movwi [-1]fsr1
  5402  0655  2E41               	goto	l4485
  5403  0656                     l4487:	
  5404                           
  5405                           ;nrf24l01.c: 296: };nrf24l01.c: 299: nrf24l01SPIEnd();
  5406  0656  3188  2032  3185   	fcall	_nrf24l01SPIEnd
  5407                           
  5408                           ;nrf24l01.c: 302: PORTAbits.RA0 = 1;
  5409  0659  0020               	movlb	0	; select bank0
  5410  065A  140C               	bsf	12,0	;volatile
  5411                           
  5412                           ;nrf24l01.c: 305: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5413  065B  0C64               	rrf	_status+2,w	;volatile
  5414  065C  3907               	andlw	7
  5415  065D  00FF               	movwf	127
  5416  065E  0EFF               	swapf	127,f
  5417  065F  0022               	movlb	2	; select bank2
  5418  0660  084D               	movf	_RXPacket^(0+256),w
  5419  0661  067F               	xorwf	127,w
  5420  0662  398F               	andlw	-113
  5421  0663  067F               	xorwf	127,w
  5422  0664  00CD               	movwf	_RXPacket^(0+256)
  5423                           
  5424                           ;nrf24l01.c: 308: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5425  0665  3000               	movlw	0
  5426  0666  001E               	movwi fsr1++
  5427  0667  3009               	movlw	9
  5428  0668  3188  206D  3185   	fcall	_nrf24l01Send
  5429  066B  00FF               	movwf	127
  5430  066C  0022               	movlb	2	; select bank2
  5431  066D  084D               	movf	_RXPacket^(0+256),w
  5432  066E  067F               	xorwf	127,w
  5433  066F  39FE               	andlw	-2
  5434  0670  067F               	xorwf	127,w
  5435  0671  00CD               	movwf	_RXPacket^(0+256)
  5436                           
  5437                           ;nrf24l01.c: 311: strcpy(userRXPacket.Message, RXPacket.Message);
  5438  0672  304E               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5439  0673  001E               	movwi fsr1++
  5440  0674  3001               	movlw	1
  5441  0675  001E               	movwi fsr1++
  5442  0676  3021               	movlw	(low ((_userRXPacket| (0+512)+1)))& (0+255)
  5443  0677  001E               	movwi fsr1++
  5444  0678  3002               	movlw	2
  5445  0679  001E               	movwi fsr1++
  5446  067A  318A  223A  3185   	fcall	_strcpy
  5447                           
  5448                           ;nrf24l01.c: 312: userRXPacket.packetData.byte = RXPacket.packetData.byte;
  5449  067D  0022               	movlb	2	; select bank2
  5450  067E  084D               	movf	_RXPacket^(0+256),w
  5451  067F  0024               	movlb	4	; select bank4
  5452  0680  00A0               	movwf	_userRXPacket^(0+512)
  5453                           
  5454                           ;nrf24l01.c: 314: status.RX = 2;
  5455  0681  3002               	movlw	2
  5456  0682  0020               	movlb	0	; select bank0
  5457  0683  00E3               	movwf	_status+1	;volatile
  5458  0684                     l4501:	
  5459                           
  5460                           ;nrf24l01.c: 315: };nrf24l01.c: 318: if (status.RX == 2){
  5461  0684  3002               	movlw	2
  5462  0685  0663               	xorwf	_status+1,w	;volatile
  5463  0686  1D03               	btfss	3,2
  5464  0687  2EA1               	goto	l4513
  5465                           
  5466                           ;nrf24l01.c: 321: if (RXPacket.packetData.IsACK){
  5467  0688  0022               	movlb	2	; select bank2
  5468  0689  1DCD               	btfss	_RXPacket^(0+256),3
  5469  068A  2EA1               	goto	l4513
  5470                           
  5471                           ;nrf24l01.c: 323: if (status.TX == 3){
  5472  068B  3003               	movlw	3
  5473  068C  0020               	movlb	0	; select bank0
  5474  068D  0662               	xorwf	_status,w	;volatile
  5475  068E  1D03               	btfss	3,2
  5476  068F  2EA1               	goto	l4513
  5477                           
  5478                           ;nrf24l01.c: 325: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5479  0690  30A1               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5480  0691  001E               	movwi fsr1++
  5481  0692  304E               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5482  0693  3189  21BE  3185   	fcall	_strcmp
  5483  0696  0874               	movf	116,w
  5484  0697  0475               	iorwf	117,w
  5485  0698  1D03               	btfss	3,2
  5486  0699  2EA1               	goto	l4513
  5487                           
  5488                           ;nrf24l01.c: 327: status.TX = 0;
  5489  069A  0020               	movlb	0	; select bank0
  5490  069B  01E2               	clrf	_status	;volatile
  5491                           
  5492                           ;nrf24l01.c: 328: status.RX = 0;
  5493  069C  01E3               	clrf	_status+1	;volatile
  5494                           
  5495                           ;nrf24l01.c: 330: nrf24l01SetRXMode(0);
  5496  069D  3000               	movlw	0
  5497  069E  318B  2323  3185   	fcall	_nrf24l01SetRXMode
  5498  06A1                     l4513:	
  5499                           
  5500                           ;nrf24l01.c: 332: };nrf24l01.c: 333: };nrf24l01.c: 334: };nrf24l01.c: 335: };nrf24l01.c:
      +                           338: if (status.RX == 2){
  5501  06A1  3002               	movlw	2
  5502  06A2  0020               	movlb	0	; select bank0
  5503  06A3  0663               	xorwf	_status+1,w	;volatile
  5504  06A4  1D03               	btfss	3,2
  5505  06A5  2EB3               	goto	l321
  5506                           
  5507                           ;nrf24l01.c: 339: if (RXPacket.packetData.ACKRequest){
  5508  06A6  0022               	movlb	2	; select bank2
  5509  06A7  1D4D               	btfss	_RXPacket^(0+256),2
  5510  06A8  2EB3               	goto	l321
  5511                           
  5512                           ;nrf24l01.c: 342: RXPacket.packetData.ACKRequest = 0;
  5513  06A9  114D               	bcf	_RXPacket^(0+256),2
  5514                           
  5515                           ;nrf24l01.c: 343: RXPacket.packetData.IsACK = 1;
  5516  06AA  15CD               	bsf	_RXPacket^(0+256),3
  5517                           
  5518                           ;nrf24l01.c: 346: nrf24l01SetTXPipe(RXPacket.packetData.Pipe);
  5519  06AB  0E4D               	swapf	_RXPacket^(0+256),w
  5520  06AC  3907               	andlw	7
  5521  06AD  318B  239A  3185   	fcall	_nrf24l01SetTXPipe
  5522                           
  5523                           ;nrf24l01.c: 349: nrf24l01SendTXBuffer(&RXPacket);
  5524  06B0  304D               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5525  06B1  318C  245A         	fcall	_nrf24l01SendTXBuffer
  5526  06B3                     l321:	
  5527                           
  5528                           ; _nrf24l01Service: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  5529  06B3  317E               	addfsr 1,-2
  5530  06B4  0008               	return
  5531  06B5                     __end_of_nrf24l01Service:	
  5532                           
  5533                           	psect	text12
  5534  0A3A                     __ptext12:	
  5535 ;; *************** function _strcpy *****************
  5536 ;; Defined at:
  5537 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;  to              2  [STACK] PTR unsigned char 
  5540 ;;		 -> TXPacket(33), userRXPacket(33), main@packet(33), loop@packet(33), 
  5541 ;;		 -> romDataMap(28), 
  5542 ;;  from            2  [STACK] PTR const unsigned char 
  5543 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), RXPacket.Message(32), 
  5544 ;;		 -> RXPacket(33), main@packet(33), STR_6(4), loop@packet(33), 
  5545 ;;		 -> romDataMap(28), 
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;  cp              2  [STACK] PTR unsigned char 
  5548 ;;		 -> TXPacket(33), userRXPacket(33), main@packet(33), loop@packet(33), 
  5549 ;;		 -> romDataMap(28), 
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  2  [STACK] PTR unsigned char 
  5552 ;; Registers used:
  5553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  5554 ;; Tracked objects:
  5555 ;;		On entry : 1C/1
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5563 ;;Total ram usage:        0 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    7
  5566 ;; This function calls:
  5567 ;;		Nothing
  5568 ;; This function is called by:
  5569 ;;		_sendMessage
  5570 ;;		_main
  5571 ;;		_nrf24l01SendPacket
  5572 ;;		_nrf24l01Service
  5573 ;; This function uses a reentrant model
  5574 ;;
  5575                           
  5576                           
  5577                           ;psect for function _strcpy
  5578  0A3A                     _strcpy:	
  5579                           
  5580                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5581  0A3A  3142               	addfsr 1,2
  5582                           
  5583                           ;stkvar	strcpy@to @ sp[(-2)+-2]
  5584                           
  5585                           ;incstack = 0
  5586 ;; hardware stack exceeded
  5587                           ; Regs used in _strcpy: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  5588  0A3B  0806               	movf	6,w
  5589  0A3C  0084               	movwf	4
  5590  0A3D  0807               	movf	7,w
  5591  0A3E  0085               	movwf	5
  5592  0A3F  313C               	addfsr 0,-4
  5593                           
  5594                           ;stkvar	strcpy@cp @ sp[(-2)+0]
  5595  0A40  3F00               	moviw [0]fsr0
  5596  0A41  3FFE               	movwi [-2]fsr1
  5597  0A42  3F01               	moviw [1]fsr0
  5598  0A43  3FFF               	movwi [-1]fsr1
  5599  0A44                     l4205:	
  5600                           
  5601                           ;stkvar	strcpy@from @ sp[(-2)+-4]
  5602  0A44  3F7A               	moviw [-6]fsr1
  5603  0A45  0084               	movwf	4
  5604  0A46  3F7B               	moviw [-5]fsr1
  5605  0A47  0085               	movwf	5
  5606  0A48  0800               	movf	0,w	;code access
  5607  0A49  00FF               	movwf	127
  5608                           
  5609                           ;stkvar	strcpy@cp @ sp[(-2)+0]
  5610  0A4A  3F7E               	moviw [-2]fsr1
  5611  0A4B  0084               	movwf	4
  5612  0A4C  3F7F               	moviw [-1]fsr1
  5613  0A4D  0085               	movwf	5
  5614  0A4E  087F               	movf	127,w
  5615  0A4F  0080               	movwf	0
  5616  0A50  0800               	movf	0,w
  5617  0A51  1903               	btfsc	3,2
  5618  0A52  2A62               	goto	l989
  5619                           
  5620                           ;stkvar	strcpy@cp @ sp[(-2)+0]
  5621  0A53  3F7E               	moviw [-2]fsr1
  5622  0A54  3E01               	addlw	1
  5623  0A55  3FFE               	movwi [-2]fsr1
  5624  0A56  01F4               	clrf	116
  5625  0A57  3F7F               	moviw [-1]fsr1
  5626  0A58  3D74               	addwfc	116,w
  5627  0A59  3FFF               	movwi [-1]fsr1
  5628                           
  5629                           ;stkvar	strcpy@from @ sp[(-2)+-4]
  5630  0A5A  3F7A               	moviw [-6]fsr1
  5631  0A5B  3E01               	addlw	1
  5632  0A5C  3FFA               	movwi [-6]fsr1
  5633  0A5D  01F4               	clrf	116
  5634  0A5E  3F7B               	moviw [-5]fsr1
  5635  0A5F  3D74               	addwfc	116,w
  5636  0A60  3FFB               	movwi [-5]fsr1
  5637  0A61  2A44               	goto	l4205
  5638  0A62                     l989:	
  5639                           
  5640                           ; _strcpy: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsiz
      +                          e = 4, vargsize = 0
  5641  0A62  317A               	addfsr 1,-6
  5642  0A63  0008               	return
  5643  0A64                     __end_of_strcpy:	
  5644                           
  5645                           	psect	text13
  5646  09BE                     __ptext13:	
  5647 ;; *************** function _strcmp *****************
  5648 ;; Defined at:
  5649 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;  s1              1    wreg     PTR const unsigned char 
  5652 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5653 ;;  s2              1  [STACK] PTR const unsigned char 
  5654 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5655 ;; Auto vars:     Size  Location     Type
  5656 ;;  s1              1  [STACK] PTR const unsigned char 
  5657 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5658 ;;  r               1  [STACK] char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  2  [STACK] int 
  5661 ;; Registers used:
  5662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5663 ;; Tracked objects:
  5664 ;;		On entry : 1F/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5672 ;;Total ram usage:        0 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    7
  5675 ;; This function calls:
  5676 ;;		Nothing
  5677 ;; This function is called by:
  5678 ;;		_nrf24l01Service
  5679 ;; This function uses a reentrant model
  5680 ;;
  5681                           
  5682                           
  5683                           ;psect for function _strcmp
  5684  09BE                     _strcmp:	
  5685                           
  5686                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5687  09BE  3142               	addfsr 1,2
  5688                           
  5689                           ;incstack = 0
  5690 ;; hardware stack exceeded
  5691                           ; Regs used in _strcmp: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5692                           ;strcmp@s1 stored from wreg
  5693                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5694  09BF  3FFE               	movwi [-2]fsr1
  5695  09C0  29CE               	goto	l4317
  5696  09C1                     l4319:	
  5697                           
  5698                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5699  09C1  3F7E               	moviw [-2]fsr1
  5700  09C2  0084               	movwf	4
  5701  09C3  3001               	movlw	1	; select bank2/3
  5702  09C4  0085               	movwf	5
  5703  09C5  0800               	movf	0,w
  5704  09C6  1903               	btfsc	3,2
  5705  09C7  29E0               	goto	l4321
  5706                           
  5707                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5708  09C8  3F7E               	moviw [-2]fsr1
  5709  09C9  3E01               	addlw	1
  5710  09CA  3FFE               	movwi [-2]fsr1
  5711                           
  5712                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5713  09CB  3F7D               	moviw [-3]fsr1
  5714  09CC  3E01               	addlw	1
  5715  09CD  3FFD               	movwi [-3]fsr1
  5716  09CE                     l4317:	
  5717                           
  5718                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5719  09CE  3F7D               	moviw [-3]fsr1
  5720  09CF  0084               	movwf	4
  5721  09D0  3001               	movlw	1	; select bank2/3
  5722  09D1  0085               	movwf	5
  5723  09D2  0800               	movf	0,w
  5724  09D3  00FF               	movwf	127
  5725                           
  5726                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5727  09D4  3F7E               	moviw [-2]fsr1
  5728  09D5  0084               	movwf	4
  5729  09D6  3001               	movlw	1	; select bank2/3
  5730  09D7  0085               	movwf	5
  5731  09D8  0800               	movf	0,w
  5732  09D9  00F4               	movwf	116
  5733  09DA  087F               	movf	127,w
  5734  09DB  0274               	subwf	116,w
  5735                           
  5736                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5737  09DC  3FFF               	movwi [-1]fsr1
  5738  09DD  0889               	movf	9,f
  5739  09DE  1903               	btfsc	3,2
  5740  09DF  29C1               	goto	l4319
  5741  09E0                     l4321:	
  5742                           
  5743                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5744  09E0  3F7F               	moviw [-1]fsr1
  5745  09E1  00F4               	movwf	116
  5746  09E2  01F5               	clrf	117
  5747  09E3  1BF4               	btfsc	116,7
  5748  09E4  03F5               	decf	117,f
  5749                           
  5750                           ; _strcmp: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  5751  09E5  317D               	addfsr 1,-3
  5752  09E6  0008               	return
  5753  09E7                     __end_of_strcmp:	
  5754                           
  5755                           	psect	text14
  5756  0B9A                     __ptext14:	
  5757 ;; *************** function _nrf24l01SetTXPipe *****************
  5758 ;; Defined at:
  5759 ;;		line 96 in file "nrf24l01.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;  pipe            1    wreg     unsigned char 
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  pipe            1  [STACK] unsigned char 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      void 
  5766 ;; Registers used:
  5767 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+10, btemp+11, pclath
  5768 ;; Tracked objects:
  5769 ;;		On entry : 1C/1
  5770 ;;		On exit  : 1F/1
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5777 ;;Total ram usage:        0 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    8
  5780 ;; This function calls:
  5781 ;;		___bmul
  5782 ;;		_nrf24l01SPIEnd
  5783 ;;		_nrf24l01SPISend
  5784 ;;		_nrf24l01SPIStart
  5785 ;; This function is called by:
  5786 ;;		_main
  5787 ;;		_nrf24l01Service
  5788 ;;		_nrf24l01InitRegisters
  5789 ;; This function uses a reentrant model
  5790 ;;
  5791                           
  5792                           
  5793                           ;psect for function _nrf24l01SetTXPipe
  5794  0B9A                     _nrf24l01SetTXPipe:	
  5795                           
  5796                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5797  0B9A  3141               	addfsr 1,1
  5798                           
  5799                           ;incstack = 0
  5800 ;; hardware stack exceeded
  5801                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+10+bte
      +                          mp+11+pclath]
  5802                           ;nrf24l01SetTXPipe@pipe stored from wreg
  5803                           ;stkvar	nrf24l01SetTXPipe@pipe @ sp[(-1)+0]
  5804  0B9B  3FFF               	movwi [-1]fsr1
  5805                           
  5806                           ;nrf24l01.c: 99: nrf24l01SPIStart();
  5807  0B9C  3188  203B  318B   	fcall	_nrf24l01SPIStart
  5808                           
  5809                           ;nrf24l01.c: 100: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  5810  0B9F  3030               	movlw	48
  5811  0BA0  3188  205E  318B   	fcall	_nrf24l01SPISend
  5812                           
  5813                           ;nrf24l01.c: 101: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  5814  0BA3  303E               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  5815  0BA4  0084               	movwf	4
  5816  0BA5  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  5817  0BA6  0085               	movwf	5
  5818  0BA7  0800               	movf	0,w	;code access
  5819  0BA8  00FE               	movwf	126
  5820  0BA9  3021               	movlw	33
  5821  0BAA  001E               	movwi fsr1++
  5822                           
  5823                           ;stkvar	nrf24l01SetTXPipe@pipe @ sp[(-2)+0]
  5824  0BAB  3F7E               	moviw [-2]fsr1
  5825  0BAC  3188  2095  318B   	fcall	___bmul
  5826  0BAF  077E               	addwf	126,w
  5827  0BB0  3188  205E  318B   	fcall	_nrf24l01SPISend
  5828                           
  5829                           ;nrf24l01.c: 102: nrf24l01SPISend(n_ADDRESS_P0[3]);
  5830  0BB3  303D               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  5831  0BB4  0084               	movwf	4
  5832  0BB5  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  5833  0BB6  0085               	movwf	5
  5834  0BB7  0800               	movf	0,w	;code access
  5835  0BB8  3188  205E  318B   	fcall	_nrf24l01SPISend
  5836                           
  5837                           ;nrf24l01.c: 103: nrf24l01SPISend(n_ADDRESS_P0[2]);
  5838  0BBB  303C               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  5839  0BBC  0084               	movwf	4
  5840  0BBD  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  5841  0BBE  0085               	movwf	5
  5842  0BBF  0800               	movf	0,w	;code access
  5843  0BC0  3188  205E  318B   	fcall	_nrf24l01SPISend
  5844                           
  5845                           ;nrf24l01.c: 104: nrf24l01SPISend(n_ADDRESS_P0[1]);
  5846  0BC3  303B               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  5847  0BC4  0084               	movwf	4
  5848  0BC5  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  5849  0BC6  0085               	movwf	5
  5850  0BC7  0800               	movf	0,w	;code access
  5851  0BC8  3188  205E  318B   	fcall	_nrf24l01SPISend
  5852                           
  5853                           ;nrf24l01.c: 105: nrf24l01SPISend(n_ADDRESS_P0[0]);
  5854  0BCB  303A               	movlw	low (_n_ADDRESS_P0| (0+32768))
  5855  0BCC  0084               	movwf	4
  5856  0BCD  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  5857  0BCE  0085               	movwf	5
  5858  0BCF  0800               	movf	0,w	;code access
  5859  0BD0  3188  205E  318B   	fcall	_nrf24l01SPISend
  5860                           
  5861                           ;nrf24l01.c: 106: nrf24l01SPIEnd();
  5862  0BD3  3188  2032         	fcall	_nrf24l01SPIEnd
  5863                           
  5864                           ; _nrf24l01SetTXPipe: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  5865  0BD5  317F               	addfsr 1,-1
  5866  0BD6  0008               	return
  5867  0BD7                     __end_of_nrf24l01SetTXPipe:	
  5868                           
  5869                           	psect	text15
  5870  0895                     __ptext15:	
  5871 ;; *************** function ___bmul *****************
  5872 ;; Defined at:
  5873 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;  multiplier      1    wreg     unsigned char 
  5876 ;;  multiplicand    1  [STACK] unsigned char 
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;  multiplier      1  [STACK] unsigned char 
  5879 ;;  product         1  [STACK] unsigned char 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  1    wreg      unsigned char 
  5882 ;; Registers used:
  5883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11
  5884 ;; Tracked objects:
  5885 ;;		On entry : 1B/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;Total ram usage:        0 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    7
  5896 ;; This function calls:
  5897 ;;		Nothing
  5898 ;; This function is called by:
  5899 ;;		_nrf24l01SetTXPipe
  5900 ;;		_nrf24l01InitRegisters
  5901 ;; This function uses a reentrant model
  5902 ;;
  5903                           
  5904                           
  5905                           ;psect for function ___bmul
  5906  0895                     ___bmul:	
  5907                           
  5908                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5909  0895  3142               	addfsr 1,2
  5910                           
  5911                           ;incstack = 0
  5912 ;; hardware stack exceeded
  5913                           ; Regs used in ___bmul: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11]
  5914                           ;___bmul@multiplier stored from wreg
  5915                           ;stkvar	___bmul@multiplier @ sp[(-2)+0]
  5916  0896  3FFE               	movwi [-2]fsr1
  5917                           
  5918                           ;stkvar	___bmul@product @ sp[(-2)+1]
  5919  0897  3000               	movlw	0
  5920  0898  3FFF               	movwi [-1]fsr1
  5921  0899                     l564:	
  5922                           
  5923                           ;stkvar	___bmul@multiplier @ sp[(-2)+0]
  5924  0899  3F7E               	moviw [-2]fsr1
  5925  089A  1C09               	btfss	9,0
  5926  089B  28A1               	goto	l4013
  5927                           
  5928                           ;stkvar	___bmul@multiplicand @ sp[(-2)+-1]
  5929  089C  3F7D               	moviw [-3]fsr1
  5930  089D  00FF               	movwf	127
  5931                           
  5932                           ;stkvar	___bmul@product @ sp[(-2)+1]
  5933  089E  3F7F               	moviw [-1]fsr1
  5934  089F  077F               	addwf	127,w
  5935  08A0  3FFF               	movwi [-1]fsr1
  5936  08A1                     l4013:	
  5937                           
  5938                           ;stkvar	___bmul@multiplicand @ sp[(-2)+-1]
  5939  08A1  3F7D               	moviw [-3]fsr1
  5940  08A2  3589               	lslf	9,f
  5941  08A3  3FFD               	movwi [-3]fsr1
  5942                           
  5943                           ;stkvar	___bmul@multiplier @ sp[(-2)+0]
  5944  08A4  3F7E               	moviw [-2]fsr1
  5945  08A5  3689               	lsrf	9,f
  5946  08A6  3FFE               	movwi [-2]fsr1
  5947                           
  5948                           ;stkvar	___bmul@multiplier @ sp[(-2)+0]
  5949  08A7  3F7E               	moviw [-2]fsr1
  5950  08A8  1D03               	btfss	3,2
  5951  08A9  2899               	goto	l564
  5952                           
  5953                           ;stkvar	___bmul@product @ sp[(-2)+1]
  5954  08AA  3F7F               	moviw [-1]fsr1
  5955                           
  5956                           ; ___bmul: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  5957  08AB  317D               	addfsr 1,-3
  5958  08AC  0008               	return
  5959  08AD                     __end_of___bmul:	
  5960                           
  5961                           	psect	text16
  5962  0C5A                     __ptext16:	
  5963 ;; *************** function _nrf24l01SendTXBuffer *****************
  5964 ;; Defined at:
  5965 ;;		line 213 in file "nrf24l01.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;  packet          1    wreg     PTR struct .
  5968 ;;		 -> RXPacket(33), TXPacket(33), 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  packet          1  [STACK] PTR struct .
  5971 ;;		 -> RXPacket(33), TXPacket(33), 
  5972 ;;  i               1  [STACK] unsigned char 
  5973 ;;  width           1  [STACK] unsigned char 
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  1    wreg      void 
  5976 ;; Registers used:
  5977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11, pclath
  5978 ;; Tracked objects:
  5979 ;;		On entry : 1E/0
  5980 ;;		On exit  : 1F/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5987 ;;Total ram usage:        0 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:   10
  5990 ;; This function calls:
  5991 ;;		_nrf24l01SPIEnd
  5992 ;;		_nrf24l01SPISend
  5993 ;;		_nrf24l01SPIStart
  5994 ;;		_nrf24l01SetRXMode
  5995 ;;		_strlen
  5996 ;; This function is called by:
  5997 ;;		_nrf24l01Service
  5998 ;; This function uses a reentrant model
  5999 ;;
  6000                           
  6001                           
  6002                           ;psect for function _nrf24l01SendTXBuffer
  6003  0C5A                     _nrf24l01SendTXBuffer:	
  6004                           
  6005                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6006  0C5A  3143               	addfsr 1,3
  6007                           
  6008                           ;incstack = 0
  6009 ;; hardware stack exceeded
  6010                           ; Regs used in _nrf24l01SendTXBuffer: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11+
      +                          pclath]
  6011                           ;nrf24l01SendTXBuffer@packet stored from wreg
  6012                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  6013  0C5B  3FFD               	movwi [-3]fsr1
  6014                           
  6015                           ;nrf24l01.c: 216: lastTXPacket = packet;
  6016                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  6017  0C5C  3F7D               	moviw [-3]fsr1
  6018  0C5D  0020               	movlb	0	; select bank0
  6019  0C5E  00E8               	movwf	_lastTXPacket
  6020                           
  6021                           ;nrf24l01.c: 218: unsigned char i;;nrf24l01.c: 221: nrf24l01SetRXMode(0);
  6022  0C5F  3000               	movlw	0
  6023  0C60  318B  2323  318C   	fcall	_nrf24l01SetRXMode
  6024                           
  6025                           ;nrf24l01.c: 224: nrf24l01SPIStart();
  6026  0C63  3188  203B  318C   	fcall	_nrf24l01SPIStart
  6027                           
  6028                           ;nrf24l01.c: 227: nrf24l01SPISend((unsigned) 0b10110000);
  6029  0C66  30B0               	movlw	176
  6030  0C67  3188  205E  318C   	fcall	_nrf24l01SPISend
  6031                           
  6032                           ;nrf24l01.c: 230: nrf24l01SPISend(lastTXPacket->packetData.byte);
  6033  0C6A  0020               	movlb	0	; select bank0
  6034  0C6B  0868               	movf	_lastTXPacket,w
  6035  0C6C  0084               	movwf	4
  6036  0C6D  3001               	movlw	1	; select bank2/3
  6037  0C6E  3001               	movlw	1	; select bank2/3
  6038  0C6F  0085               	movwf	5
  6039  0C70  0800               	movf	0,w
  6040  0C71  3188  205E  318C   	fcall	_nrf24l01SPISend
  6041                           
  6042                           ;nrf24l01.c: 233: unsigned char width = strlen(lastTXPacket->Message);
  6043  0C74  0020               	movlb	0	; select bank0
  6044  0C75  0868               	movf	_lastTXPacket,w
  6045  0C76  3E01               	addlw	1
  6046  0C77  3189  2104  318C   	fcall	_strlen
  6047  0C7A  0874               	movf	116,w
  6048                           
  6049                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6050  0C7B  3FFF               	movwi [-1]fsr1
  6051                           
  6052                           ;nrf24l01.c: 235: for (i = 0; i < width; i++) {
  6053                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6054  0C7C  3000               	movlw	0
  6055  0C7D  3FFE               	movwi [-2]fsr1
  6056  0C7E                     l4301:	
  6057                           
  6058                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6059  0C7E  3F7E               	moviw [-2]fsr1
  6060  0C7F  00FF               	movwf	127
  6061                           
  6062                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6063  0C80  3F7F               	moviw [-1]fsr1
  6064  0C81  027F               	subwf	127,w
  6065  0C82  1803               	btfsc	3,0
  6066  0C83  2C95               	goto	l4303
  6067                           
  6068                           ;nrf24l01.c: 236: nrf24l01SPISend(lastTXPacket->Message[i]);
  6069                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6070  0C84  3F7E               	moviw [-2]fsr1
  6071  0C85  0020               	movlb	0	; select bank0
  6072  0C86  0768               	addwf	_lastTXPacket,w
  6073  0C87  00FF               	movwf	127
  6074  0C88  0A7F               	incf	127,w
  6075  0C89  0084               	movwf	4
  6076  0C8A  3001               	movlw	1	; select bank2/3
  6077  0C8B  3001               	movlw	1	; select bank2/3
  6078  0C8C  0085               	movwf	5
  6079  0C8D  0800               	movf	0,w
  6080  0C8E  3188  205E  318C   	fcall	_nrf24l01SPISend
  6081                           
  6082                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6083  0C91  3F7E               	moviw [-2]fsr1
  6084  0C92  3E01               	addlw	1
  6085  0C93  3FFE               	movwi [-2]fsr1
  6086  0C94  2C7E               	goto	l4301
  6087  0C95                     l4303:	
  6088                           
  6089                           ;nrf24l01.c: 237: };nrf24l01.c: 240: nrf24l01SPIEnd();
  6090  0C95  3188  2032  318C   	fcall	_nrf24l01SPIEnd
  6091                           
  6092                           ;nrf24l01.c: 243: PORTAbits.RA0 = 1;
  6093  0C98  0020               	movlb	0	; select bank0
  6094  0C99  140C               	bsf	12,0	;volatile
  6095                           
  6096                           ;nrf24l01.c: 244: _delay((unsigned long)((12)*(32000000/4000000.0)));
  6097  0C9A  3020               	movlw	32
  6098  0C9B                     u5427:	
  6099  0C9B  0B89               	decfsz	9,f
  6100  0C9C  2C9B               	goto	u5427
  6101                           
  6102                           ;nrf24l01.c: 245: PORTAbits.RA0 = 0;
  6103  0C9D  0020               	movlb	0	; select bank0
  6104  0C9E  100C               	bcf	12,0	;volatile
  6105                           
  6106                           ; _nrf24l01SendTXBuffer: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
  6107  0C9F  317D               	addfsr 1,-3
  6108  0CA0  0008               	return
  6109  0CA1                     __end_of_nrf24l01SendTXBuffer:	
  6110                           
  6111                           	psect	text17
  6112  0904                     __ptext17:	
  6113 ;; *************** function _strlen *****************
  6114 ;; Defined at:
  6115 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;  s               1    wreg     PTR const unsigned char 
  6118 ;;		 -> NULL(0), RXPacket.Message(32), RXPacket(33), TXPacket.Message(32), 
  6119 ;;		 -> TXPacket(33), romDataMap(28), 
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;  s               1  [STACK] PTR const unsigned char 
  6122 ;;		 -> NULL(0), RXPacket.Message(32), RXPacket(33), TXPacket.Message(32), 
  6123 ;;		 -> TXPacket(33), romDataMap(28), 
  6124 ;;  cp              1  [STACK] PTR const unsigned char 
  6125 ;;		 -> NULL(0), RXPacket.Message(32), RXPacket(33), TXPacket.Message(32), 
  6126 ;;		 -> TXPacket(33), romDataMap(28), 
  6127 ;; Return value:  Size  Location     Type
  6128 ;;                  2  [STACK] unsigned int 
  6129 ;; Registers used:
  6130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  6131 ;; Tracked objects:
  6132 ;;		On entry : 1F/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;Total ram usage:        0 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; Hardware stack levels required when called:    7
  6143 ;; This function calls:
  6144 ;;		Nothing
  6145 ;; This function is called by:
  6146 ;;		_nrf24l01GetPipe
  6147 ;;		_nrf24l01SendTXBuffer
  6148 ;; This function uses a reentrant model
  6149 ;;
  6150                           
  6151                           
  6152                           ;psect for function _strlen
  6153  0904                     _strlen:	
  6154                           
  6155                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6156  0904  3142               	addfsr 1,2
  6157                           
  6158                           ;incstack = 0
  6159 ;; hardware stack exceeded
  6160                           ; Regs used in _strlen: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  6161                           ;strlen@s stored from wreg
  6162                           ;stkvar	strlen@s @ sp[(-2)+0]
  6163  0905  3FFE               	movwi [-2]fsr1
  6164                           
  6165                           ;stkvar	strlen@s @ sp[(-2)+0]
  6166  0906  0806               	movf	6,w
  6167  0907  0084               	movwf	4
  6168  0908  0807               	movf	7,w
  6169  0909  0085               	movwf	5
  6170  090A  313E               	addfsr 0,-2
  6171                           
  6172                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6173  090B  3F00               	moviw [0]fsr0
  6174  090C  3FFF               	movwi [-1]fsr1
  6175  090D                     l3867:	
  6176                           
  6177                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6178  090D  3F7F               	moviw [-1]fsr1
  6179  090E  0084               	movwf	4
  6180  090F  3001               	movlw	1	; select bank2/3
  6181  0910  0085               	movwf	5
  6182  0911  0800               	movf	0,w
  6183  0912  1903               	btfsc	3,2
  6184  0913  2918               	goto	l3869
  6185                           
  6186                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6187  0914  3F7F               	moviw [-1]fsr1
  6188  0915  3E01               	addlw	1
  6189  0916  3FFF               	movwi [-1]fsr1
  6190  0917  290D               	goto	l3867
  6191  0918                     l3869:	
  6192                           
  6193                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6194  0918  3F7F               	moviw [-1]fsr1
  6195  0919  00FF               	movwf	127
  6196                           
  6197                           ;stkvar	strlen@s @ sp[(-2)+0]
  6198  091A  3F7E               	moviw [-2]fsr1
  6199  091B  027F               	subwf	127,w
  6200  091C  00F4               	movwf	116
  6201  091D  01F5               	clrf	117
  6202  091E  1BF4               	btfsc	116,7
  6203  091F  03F5               	decf	117,f
  6204                           
  6205                           ; _strlen: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsiz
      +                          e = 0, vargsize = 0
  6206  0920  317E               	addfsr 1,-2
  6207  0921  0008               	return
  6208  0922                     __end_of_strlen:	
  6209                           
  6210                           	psect	text18
  6211  0B23                     __ptext18:	
  6212 ;; *************** function _nrf24l01SetRXMode *****************
  6213 ;; Defined at:
  6214 ;;		line 49 in file "nrf24l01.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;  rxMode          1    wreg     unsigned char 
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;  rxMode          1  [STACK] unsigned char 
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  1    wreg      void 
  6221 ;; Registers used:
  6222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  6223 ;; Tracked objects:
  6224 ;;		On entry : 1F/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;Total ram usage:        0 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    9
  6235 ;; This function calls:
  6236 ;;		_nrf24l01Send
  6237 ;; This function is called by:
  6238 ;;		_nrf24l01ISR
  6239 ;;		_nrf24l01SendTXBuffer
  6240 ;;		_nrf24l01Service
  6241 ;; This function uses a reentrant model
  6242 ;;
  6243                           
  6244                           
  6245                           ;psect for function _nrf24l01SetRXMode
  6246  0B23                     _nrf24l01SetRXMode:	
  6247                           
  6248                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6249  0B23  3141               	addfsr 1,1
  6250                           
  6251                           ;incstack = 0
  6252 ;; hardware stack exceeded
  6253                           ; Regs used in _nrf24l01SetRXMode: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  6254                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6255                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6256  0B24  3FFF               	movwi [-1]fsr1
  6257                           
  6258                           ;nrf24l01.c: 52: if (rxMode){
  6259                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6260  0B25  3F7F               	moviw [-1]fsr1
  6261  0B26  1903               	btfsc	3,2
  6262  0B27  2B2D               	goto	l3879
  6263                           
  6264                           ;nrf24l01.c: 54: if (status.TX == 2){
  6265  0B28  3002               	movlw	2
  6266  0B29  0020               	movlb	0	; select bank0
  6267  0B2A  0662               	xorwf	_status,w	;volatile
  6268  0B2B  1903               	btfsc	3,2
  6269  0B2C  2B5C               	goto	l266
  6270  0B2D                     l3879:	
  6271                           
  6272                           ;nrf24l01.c: 56: };nrf24l01.c: 57: };nrf24l01.c: 60: if (!rxMode){
  6273                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6274  0B2D  3F7F               	moviw [-1]fsr1
  6275  0B2E  1D03               	btfss	3,2
  6276  0B2F  2B35               	goto	l3885
  6277                           
  6278                           ;nrf24l01.c: 61: if (status.TX == 3){
  6279  0B30  3003               	movlw	3
  6280  0B31  0020               	movlb	0	; select bank0
  6281  0B32  0662               	xorwf	_status,w	;volatile
  6282  0B33  1903               	btfsc	3,2
  6283  0B34  2B5C               	goto	l266
  6284  0B35                     l3885:	
  6285                           
  6286                           ;nrf24l01.c: 63: };nrf24l01.c: 64: };nrf24l01.c: 70: if (status.configRegister.PRIM_RX !
      +                          = rxMode){
  6287                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6288  0B35  3F7F               	moviw [-1]fsr1
  6289  0B36  00FF               	movwf	127
  6290  0B37  0020               	movlb	0	; select bank0
  6291  0B38  0865               	movf	_status+3,w	;volatile
  6292  0B39  3901               	andlw	1
  6293  0B3A  067F               	xorwf	127,w
  6294  0B3B  1903               	skipnz
  6295  0B3C  2B5C               	goto	l266
  6296                           
  6297                           ;nrf24l01.c: 73: PORTAbits.RA0 = 0;
  6298  0B3D  100C               	bcf	12,0	;volatile
  6299                           
  6300                           ;nrf24l01.c: 74: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6301  0B3E  30C0               	movlw	192
  6302  0B3F                     u5437:	
  6303  0B3F  3200               	nop2
  6304  0B40  0B89               	decfsz	9,f
  6305  0B41  2B3F               	goto	u5437
  6306                           
  6307                           ;nrf24l01.c: 77: status.configRegister.PRIM_RX = rxMode;
  6308                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6309  0B42  3F7F               	moviw [-1]fsr1
  6310  0B43  3901               	andlw	1
  6311  0B44  0020               	movlb	0	; select bank0
  6312  0B45  1D03               	skipz
  6313  0B46  1465               	bsf	_status+3,0	;volatile
  6314  0B47  1903               	skipnz
  6315  0B48  1065               	bcf	_status+3,0	;volatile
  6316                           
  6317                           ;nrf24l01.c: 78: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configRegi
      +                          ster.byte);
  6318  0B49  0865               	movf	_status+3,w	;volatile
  6319  0B4A  001E               	movwi fsr1++
  6320  0B4B  3020               	movlw	32
  6321  0B4C  3188  206D  318B   	fcall	_nrf24l01Send
  6322                           
  6323                           ;nrf24l01.c: 81: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6324  0B4F  30C0               	movlw	192
  6325  0B50                     u5447:	
  6326  0B50  3200               	nop2
  6327  0B51  0B89               	decfsz	9,f
  6328  0B52  2B50               	goto	u5447
  6329                           
  6330                           ;nrf24l01.c: 84: if (rxMode){
  6331                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6332  0B53  3F7F               	moviw [-1]fsr1
  6333  0B54  1903               	btfsc	3,2
  6334  0B55  2B5C               	goto	l266
  6335                           
  6336                           ;nrf24l01.c: 85: PORTAbits.RA0 = 1;
  6337  0B56  0020               	movlb	0	; select bank0
  6338  0B57  140C               	bsf	12,0	;volatile
  6339                           
  6340                           ;nrf24l01.c: 86: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6341  0B58  30C0               	movlw	192
  6342  0B59                     u5457:	
  6343  0B59  3200               	nop2
  6344  0B5A  0B89               	decfsz	9,f
  6345  0B5B  2B59               	goto	u5457
  6346  0B5C                     l266:	
  6347                           
  6348                           ; _nrf24l01SetRXMode: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  6349  0B5C  317F               	addfsr 1,-1
  6350  0B5D  0008               	return
  6351  0B5E                     __end_of_nrf24l01SetRXMode:	
  6352                           
  6353                           	psect	text19
  6354  086D                     __ptext19:	
  6355 ;; *************** function _nrf24l01Send *****************
  6356 ;; Defined at:
  6357 ;;		line 10 in file "nrf24l01.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;  command         1    wreg     unsigned char 
  6360 ;;  data            1  [STACK] unsigned char 
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;  command         1  [STACK] unsigned char 
  6363 ;; Return value:  Size  Location     Type
  6364 ;;                  1    wreg      unsigned char 
  6365 ;; Registers used:
  6366 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 1F/1
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;Total ram usage:        0 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    8
  6379 ;; This function calls:
  6380 ;;		_nrf24l01SPIEnd
  6381 ;;		_nrf24l01SPISend
  6382 ;;		_nrf24l01SPIStart
  6383 ;; This function is called by:
  6384 ;;		_nrf24l01SetRXMode
  6385 ;;		_nrf24l01SetRXPipe
  6386 ;;		_nrf24l01ISR
  6387 ;;		_nrf24l01Service
  6388 ;;		_nrf24l01InitRegisters
  6389 ;;		_nrf24l01ChangeTXPower
  6390 ;; This function uses a reentrant model
  6391 ;;
  6392                           
  6393                           
  6394                           ;psect for function _nrf24l01Send
  6395  086D                     _nrf24l01Send:	
  6396                           
  6397                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6398  086D  3141               	addfsr 1,1
  6399                           
  6400                           ;incstack = 0
  6401 ;; hardware stack exceeded
  6402                           ; Regs used in _nrf24l01Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath]
  6403                           ;nrf24l01Send@command stored from wreg
  6404                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6405  086E  3FFF               	movwi [-1]fsr1
  6406                           
  6407                           ;nrf24l01.c: 13: nrf24l01SPIStart();
  6408  086F  3188  203B  3188   	fcall	_nrf24l01SPIStart
  6409                           
  6410                           ;nrf24l01.c: 16: nrf24l01SPISend(command);
  6411                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6412  0872  3F7F               	moviw [-1]fsr1
  6413  0873  3188  205E  3188   	fcall	_nrf24l01SPISend
  6414                           
  6415                           ;nrf24l01.c: 19: data = nrf24l01SPISend(data);
  6416                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6417  0876  3F7E               	moviw [-2]fsr1
  6418  0877  3188  205E  3188   	fcall	_nrf24l01SPISend
  6419                           
  6420                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6421  087A  3FFE               	movwi [-2]fsr1
  6422                           
  6423                           ;nrf24l01.c: 22: nrf24l01SPIEnd();
  6424  087B  3188  2032         	fcall	_nrf24l01SPIEnd
  6425                           
  6426                           ;nrf24l01.c: 24: return data;
  6427                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6428  087D  3F7E               	moviw [-2]fsr1
  6429                           
  6430                           ; _nrf24l01Send: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, 
      +                          argsize = 1, vargsize = 0
  6431  087E  317E               	addfsr 1,-2
  6432  087F  0008               	return
  6433  0880                     __end_of_nrf24l01Send:	
  6434                           
  6435                           	psect	text20
  6436  083B                     __ptext20:	
  6437 ;; *************** function _nrf24l01SPIStart *****************
  6438 ;; Defined at:
  6439 ;;		line 69 in file "interface.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;		None
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;		None
  6444 ;; Return value:  Size  Location     Type
  6445 ;;                  1    wreg      void 
  6446 ;; Registers used:
  6447 ;;		wreg
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6457 ;;Total ram usage:        0 bytes
  6458 ;; Hardware stack levels used:    1
  6459 ;; Hardware stack levels required when called:    7
  6460 ;; This function calls:
  6461 ;;		Nothing
  6462 ;; This function is called by:
  6463 ;;		_nrf24l01Send
  6464 ;;		_nrf24l01SetTXPipe
  6465 ;;		_nrf24l01SendTXBuffer
  6466 ;;		_nrf24l01Service
  6467 ;;		_nrf24l01InitRegisters
  6468 ;; This function uses a reentrant model
  6469 ;;
  6470                           
  6471                           
  6472                           ;psect for function _nrf24l01SPIStart
  6473  083B                     _nrf24l01SPIStart:	
  6474                           
  6475                           ;interface.c: 70: PIE0bits.INTE = 0;
  6476                           
  6477                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6478                           ;incstack = 0
  6479 ;; hardware stack exceeded
  6480                           ; Regs used in _nrf24l01SPIStart: [wreg]
  6481  083B  0021               	movlb	1	; select bank1
  6482  083C  1010               	bcf	16,0	;volatile
  6483                           
  6484                           ;interface.c: 71: PORTAbits.RA1 = 0;
  6485  083D  0020               	movlb	0	; select bank0
  6486  083E  108C               	bcf	12,1	;volatile
  6487                           
  6488                           ;interface.c: 72: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6489  083F  301A               	movlw	26
  6490  0840                     u5467:	
  6491  0840  0B89               	decfsz	9,f
  6492  0841  2840               	goto	u5467
  6493  0842  3200               	nop2
  6494                           
  6495                           ; _nrf24l01SPIStart: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           0, argsize = 0, vargsize = 0
  6496  0843  0008               	return
  6497  0844                     __end_of_nrf24l01SPIStart:	
  6498                           
  6499                           	psect	text21
  6500  085E                     __ptext21:	
  6501 ;; *************** function _nrf24l01SPISend *****************
  6502 ;; Defined at:
  6503 ;;		line 57 in file "interface.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  data            1    wreg     unsigned char 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;  data            1  [STACK] unsigned char 
  6508 ;; Return value:  Size  Location     Type
  6509 ;;                  1    wreg      unsigned char 
  6510 ;; Registers used:
  6511 ;;		wreg, fsr1l, fsr1h
  6512 ;; Tracked objects:
  6513 ;;		On entry : 0/0
  6514 ;;		On exit  : 1F/4
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;Total ram usage:        0 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; Hardware stack levels required when called:    7
  6524 ;; This function calls:
  6525 ;;		Nothing
  6526 ;; This function is called by:
  6527 ;;		_nrf24l01Send
  6528 ;;		_nrf24l01SetTXPipe
  6529 ;;		_nrf24l01SendTXBuffer
  6530 ;;		_nrf24l01Service
  6531 ;;		_nrf24l01InitRegisters
  6532 ;; This function uses a reentrant model
  6533 ;;
  6534                           
  6535                           
  6536                           ;psect for function _nrf24l01SPISend
  6537  085E                     _nrf24l01SPISend:	
  6538                           
  6539                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6540  085E  3141               	addfsr 1,1
  6541                           
  6542                           ;incstack = 0
  6543 ;; hardware stack exceeded
  6544                           ; Regs used in _nrf24l01SPISend: [wreg+fsr1l+fsr1h]
  6545                           ;nrf24l01SPISend@data stored from wreg
  6546                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6547  085F  3FFF               	movwi [-1]fsr1
  6548                           
  6549                           ;interface.c: 58: SSP1BUF = data;
  6550                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6551  0860  3F7F               	moviw [-1]fsr1
  6552  0861  0024               	movlb	4	; select bank4
  6553  0862  0091               	movwf	17	;volatile
  6554                           
  6555                           ;interface.c: 60: PORTCbits.RC4 = 1;
  6556  0863  0020               	movlb	0	; select bank0
  6557  0864  160E               	bsf	14,4	;volatile
  6558  0865                     l55:	
  6559                           ;interface.c: 62: while (!SSP1STATbits.BF){
  6560                           
  6561  0865  0024               	movlb	4	; select bank4
  6562  0866  1814               	btfsc	20,0	;volatile
  6563  0867  286A               	goto	l3651
  6564                           
  6565                           ;interface.c: 63: __nop();
  6566  0868  0000               	nop
  6567  0869  2865               	goto	l55
  6568  086A                     l3651:	
  6569                           
  6570                           ;interface.c: 64: };interface.c: 66: return SSP1BUF;
  6571  086A  0811               	movf	17,w	;volatile
  6572                           
  6573                           ; _nrf24l01SPISend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  6574  086B  317F               	addfsr 1,-1
  6575  086C  0008               	return
  6576  086D                     __end_of_nrf24l01SPISend:	
  6577                           
  6578                           	psect	text22
  6579  0832                     __ptext22:	
  6580 ;; *************** function _nrf24l01SPIEnd *****************
  6581 ;; Defined at:
  6582 ;;		line 75 in file "interface.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;		None
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;		None
  6587 ;; Return value:  Size  Location     Type
  6588 ;;                  1    wreg      void 
  6589 ;; Registers used:
  6590 ;;		wreg
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 1F/1
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;Total ram usage:        0 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    7
  6603 ;; This function calls:
  6604 ;;		Nothing
  6605 ;; This function is called by:
  6606 ;;		_nrf24l01Send
  6607 ;;		_nrf24l01SetTXPipe
  6608 ;;		_nrf24l01SendTXBuffer
  6609 ;;		_nrf24l01Service
  6610 ;;		_nrf24l01InitRegisters
  6611 ;; This function uses a reentrant model
  6612 ;;
  6613                           
  6614                           
  6615                           ;psect for function _nrf24l01SPIEnd
  6616  0832                     _nrf24l01SPIEnd:	
  6617                           
  6618                           ;interface.c: 76: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6619                           
  6620                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6621                           ;incstack = 0
  6622 ;; hardware stack exceeded
  6623                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  6624  0832  301A               	movlw	26
  6625  0833                     u5477:	
  6626  0833  0B89               	decfsz	9,f
  6627  0834  2833               	goto	u5477
  6628  0835  3200               	nop2
  6629                           
  6630                           ;interface.c: 77: PORTAbits.RA1 = 1;
  6631  0836  0020               	movlb	0	; select bank0
  6632  0837  148C               	bsf	12,1	;volatile
  6633                           
  6634                           ;interface.c: 78: PIE0bits.INTE = 1;
  6635  0838  0021               	movlb	1	; select bank1
  6636  0839  1410               	bsf	16,0	;volatile
  6637                           
  6638                           ; _nrf24l01SPIEnd: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  6639  083A  0008               	return
  6640  083B                     __end_of_nrf24l01SPIEnd:	
  6641                           
  6642                           	psect	text23
  6643  0ABD                     __ptext23:	
  6644 ;; *************** function _memset *****************
  6645 ;; Defined at:
  6646 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;  p1              2  [STACK] PTR void 
  6649 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6650 ;;  c               2  [STACK] int 
  6651 ;;  n               2  [STACK] unsigned int 
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;  p               2  [STACK] PTR unsigned char 
  6654 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6655 ;; Return value:  Size  Location     Type
  6656 ;;                  2  [STACK] PTR void 
  6657 ;; Registers used:
  6658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+8, btemp+9, btemp+11
  6659 ;; Tracked objects:
  6660 ;;		On entry : 1E/1
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;Total ram usage:        0 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    7
  6671 ;; This function calls:
  6672 ;;		Nothing
  6673 ;; This function is called by:
  6674 ;;		_sendMessage
  6675 ;;		_nrf24l01Service
  6676 ;; This function uses a reentrant model
  6677 ;;
  6678                           
  6679                           
  6680                           ;psect for function _memset
  6681  0ABD                     _memset:	
  6682                           
  6683                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6684  0ABD  3142               	addfsr 1,2
  6685                           
  6686                           ;stkvar	memset@p1 @ sp[(-2)+-2]
  6687                           
  6688                           ;incstack = 0
  6689 ;; hardware stack exceeded
  6690                           ; Regs used in _memset: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+8+btemp+9+btemp+1
      +                          1]
  6691  0ABE  0806               	movf	6,w
  6692  0ABF  0084               	movwf	4
  6693  0AC0  0807               	movf	7,w
  6694  0AC1  0085               	movwf	5
  6695  0AC2  313C               	addfsr 0,-4
  6696                           
  6697                           ;stkvar	memset@p @ sp[(-2)+0]
  6698  0AC3  3F00               	moviw [0]fsr0
  6699  0AC4  3FFE               	movwi [-2]fsr1
  6700  0AC5  3F01               	moviw [1]fsr0
  6701  0AC6  3FFF               	movwi [-1]fsr1
  6702  0AC7                     l4199:	
  6703                           
  6704                           ;stkvar	memset@n @ sp[(-2)+-6]
  6705  0AC7  3F78               	moviw [-8]fsr1
  6706  0AC8  00F4               	movwf	116
  6707  0AC9  3001               	movlw	1
  6708  0ACA  0274               	subwf	116,w
  6709  0ACB  3FF8               	movwi [-8]fsr1
  6710  0ACC  3F79               	moviw [-7]fsr1
  6711  0ACD  00F4               	movwf	116
  6712  0ACE  3000               	movlw	0
  6713  0ACF  3B74               	subwfb	116,w
  6714  0AD0  3FF9               	movwi [-7]fsr1
  6715  0AD1  3F78               	moviw [-8]fsr1
  6716  0AD2  3AFF               	xorlw	255
  6717  0AD3  00F4               	movwf	116
  6718  0AD4  3F79               	moviw [-7]fsr1
  6719  0AD5  3AFF               	xorlw	255
  6720  0AD6  04F4               	iorwf	116,f
  6721  0AD7  1903               	btfsc	3,2
  6722  0AD8  2AED               	goto	l966
  6723                           
  6724                           ;stkvar	memset@c @ sp[(-2)+-4]
  6725  0AD9  3F7A               	moviw [-6]fsr1
  6726  0ADA  00FF               	movwf	127
  6727                           
  6728                           ;stkvar	memset@p @ sp[(-2)+0]
  6729  0ADB  3F7E               	moviw [-2]fsr1
  6730  0ADC  00FC               	movwf	124
  6731  0ADD  3F7F               	moviw [-1]fsr1
  6732  0ADE  00FD               	movwf	125
  6733  0ADF  087C               	movf	124,w
  6734  0AE0  0084               	movwf	4
  6735  0AE1  087D               	movf	125,w
  6736  0AE2  0085               	movwf	5
  6737  0AE3  087F               	movf	127,w
  6738  0AE4  0080               	movwf	0
  6739                           
  6740                           ;stkvar	memset@p @ sp[(-2)+0]
  6741  0AE5  3F7E               	moviw [-2]fsr1
  6742  0AE6  3E01               	addlw	1
  6743  0AE7  3FFE               	movwi [-2]fsr1
  6744  0AE8  01F4               	clrf	116
  6745  0AE9  3F7F               	moviw [-1]fsr1
  6746  0AEA  3D74               	addwfc	116,w
  6747  0AEB  3FFF               	movwi [-1]fsr1
  6748  0AEC  2AC7               	goto	l4199
  6749  0AED                     l966:	
  6750                           
  6751                           ; _memset: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsiz
      +                          e = 6, vargsize = 0
  6752  0AED  3178               	addfsr 1,-8
  6753  0AEE  0008               	return
  6754  0AEF                     __end_of_memset:	
  6755                           
  6756                           	psect	text24
  6757  0515                     __ptext24:	
  6758 ;; *************** function _ftoa *****************
  6759 ;; Defined at:
  6760 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;  f               3    0[BANK1 ] float 
  6763 ;;  status          1    3[BANK1 ] PTR int 
  6764 ;;		 -> sendMessage@ftoaStatus(2), 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  l               4    8[BANK1 ] unsigned long 
  6767 ;;  rem             4    4[BANK1 ] unsigned long 
  6768 ;;  cp              1   12[BANK1 ] PTR unsigned char 
  6769 ;;		 -> ftoa@buf(17), 
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      PTR unsigned char 
  6772 ;; Registers used:
  6773 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6779 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;Total ram usage:       13 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:   10
  6786 ;; This function calls:
  6787 ;;		___ftge
  6788 ;;		___ftmul
  6789 ;;		___ftneg
  6790 ;;		___ftsub
  6791 ;;		___fttol
  6792 ;;		___lltoft
  6793 ;;		_sprintf
  6794 ;; This function is called by:
  6795 ;;		_sendMessage
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           
  6800                           ;psect for function _ftoa
  6801  0515                     _ftoa:	
  6802                           
  6803                           ;incstack = 0
  6804                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6805  0515  30DD               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6806  0516  00FF               	movwf	127
  6807  0517  087F               	movf	127,w
  6808  0518  0021               	movlb	1	; select bank1
  6809  0519  00AC               	movwf	ftoa@cp^(0+128)
  6810  051A  0820               	movf	ftoa@f^(0+128),w
  6811  051B  0020               	movlb	0	; select bank0
  6812  051C  00A7               	movwf	___ftge@ff1
  6813  051D  0021               	movlb	1	; select bank1
  6814  051E  0821               	movf	(ftoa@f+1)^(0+128),w
  6815  051F  0020               	movlb	0	; select bank0
  6816  0520  00A8               	movwf	___ftge@ff1+1
  6817  0521  0021               	movlb	1	; select bank1
  6818  0522  0822               	movf	(ftoa@f+2)^(0+128),w
  6819  0523  0020               	movlb	0	; select bank0
  6820  0524  00A9               	movwf	___ftge@ff1+2
  6821  0525  3000               	movlw	0
  6822  0526  00AA               	movwf	___ftge@ff2
  6823  0527  3000               	movlw	0
  6824  0528  00AB               	movwf	___ftge@ff2+1
  6825  0529  3000               	movlw	0
  6826  052A  00AC               	movwf	___ftge@ff2+2
  6827  052B  318B  235E  3185   	fcall	___ftge
  6828  052E  1803               	btfsc	3,0
  6829  052F  2D57               	goto	l4227
  6830  0530  302D               	movlw	45
  6831  0531  00FF               	movwf	127
  6832  0532  0021               	movlb	1	; select bank1
  6833  0533  082C               	movf	ftoa@cp^(0+128),w
  6834  0534  0084               	movwf	4
  6835  0535  3001               	movlw	1	; select bank2/3
  6836  0536  0085               	movwf	5
  6837  0537  087F               	movf	127,w
  6838  0538  0080               	movwf	0
  6839  0539  3001               	movlw	1
  6840  053A  00FF               	movwf	127
  6841  053B  087F               	movf	127,w
  6842  053C  07AC               	addwf	ftoa@cp^(0+128),f
  6843  053D  0820               	movf	ftoa@f^(0+128),w
  6844  053E  0020               	movlb	0	; select bank0
  6845  053F  00CC               	movwf	___ftneg@f1
  6846  0540  0021               	movlb	1	; select bank1
  6847  0541  0821               	movf	(ftoa@f+1)^(0+128),w
  6848  0542  0020               	movlb	0	; select bank0
  6849  0543  00CD               	movwf	___ftneg@f1+1
  6850  0544  0021               	movlb	1	; select bank1
  6851  0545  0822               	movf	(ftoa@f+2)^(0+128),w
  6852  0546  0020               	movlb	0	; select bank0
  6853  0547  00CE               	movwf	___ftneg@f1+2
  6854  0548  3188  2029  3185   	fcall	___ftneg
  6855  054B  0020               	movlb	0	; select bank0
  6856  054C  084C               	movf	?___ftneg,w
  6857  054D  0021               	movlb	1	; select bank1
  6858  054E  00A0               	movwf	ftoa@f^(0+128)
  6859  054F  0020               	movlb	0	; select bank0
  6860  0550  084D               	movf	?___ftneg+1,w
  6861  0551  0021               	movlb	1	; select bank1
  6862  0552  00A1               	movwf	(ftoa@f+1)^(0+128)
  6863  0553  0020               	movlb	0	; select bank0
  6864  0554  084E               	movf	?___ftneg+2,w
  6865  0555  0021               	movlb	1	; select bank1
  6866  0556  00A2               	movwf	(ftoa@f+2)^(0+128)
  6867  0557                     l4227:	
  6868  0557  0021               	movlb	1	; select bank1
  6869  0558  0820               	movf	ftoa@f^(0+128),w
  6870  0559  0020               	movlb	0	; select bank0
  6871  055A  00D8               	movwf	___fttol@f1
  6872  055B  0021               	movlb	1	; select bank1
  6873  055C  0821               	movf	(ftoa@f+1)^(0+128),w
  6874  055D  0020               	movlb	0	; select bank0
  6875  055E  00D9               	movwf	___fttol@f1+1
  6876  055F  0021               	movlb	1	; select bank1
  6877  0560  0822               	movf	(ftoa@f+2)^(0+128),w
  6878  0561  0020               	movlb	0	; select bank0
  6879  0562  00DA               	movwf	___fttol@f1+2
  6880  0563  318E  262B  3185   	fcall	___fttol
  6881  0566  0020               	movlb	0	; select bank0
  6882  0567  085B               	movf	?___fttol+3,w
  6883  0568  0021               	movlb	1	; select bank1
  6884  0569  00AB               	movwf	(ftoa@l+3)^(0+128)
  6885  056A  0020               	movlb	0	; select bank0
  6886  056B  085A               	movf	?___fttol+2,w
  6887  056C  0021               	movlb	1	; select bank1
  6888  056D  00AA               	movwf	(ftoa@l+2)^(0+128)
  6889  056E  0020               	movlb	0	; select bank0
  6890  056F  0859               	movf	?___fttol+1,w
  6891  0570  0021               	movlb	1	; select bank1
  6892  0571  00A9               	movwf	(ftoa@l+1)^(0+128)
  6893  0572  0020               	movlb	0	; select bank0
  6894  0573  0858               	movf	?___fttol,w
  6895  0574  0021               	movlb	1	; select bank1
  6896  0575  00A8               	movwf	ftoa@l^(0+128)
  6897  0576  082B               	movf	(ftoa@l+3)^(0+128),w
  6898  0577  00F3               	movwf	___lltoft@c+3
  6899  0578  082A               	movf	(ftoa@l+2)^(0+128),w
  6900  0579  00F2               	movwf	___lltoft@c+2
  6901  057A  0829               	movf	(ftoa@l+1)^(0+128),w
  6902  057B  00F1               	movwf	___lltoft@c+1
  6903  057C  0828               	movf	ftoa@l^(0+128),w
  6904  057D  00F0               	movwf	___lltoft@c
  6905  057E  318A  2210  3185   	fcall	___lltoft
  6906  0581  0870               	movf	?___lltoft,w
  6907  0582  0020               	movlb	0	; select bank0
  6908  0583  00B6               	movwf	___ftsub@f2
  6909  0584  0871               	movf	?___lltoft+1,w
  6910  0585  00B7               	movwf	___ftsub@f2+1
  6911  0586  0872               	movf	?___lltoft+2,w
  6912  0587  00B8               	movwf	___ftsub@f2+2
  6913  0588  0021               	movlb	1	; select bank1
  6914  0589  0820               	movf	ftoa@f^(0+128),w
  6915  058A  0020               	movlb	0	; select bank0
  6916  058B  00B9               	movwf	___ftsub@f1
  6917  058C  0021               	movlb	1	; select bank1
  6918  058D  0821               	movf	(ftoa@f+1)^(0+128),w
  6919  058E  0020               	movlb	0	; select bank0
  6920  058F  00BA               	movwf	___ftsub@f1+1
  6921  0590  0021               	movlb	1	; select bank1
  6922  0591  0822               	movf	(ftoa@f+2)^(0+128),w
  6923  0592  0020               	movlb	0	; select bank0
  6924  0593  00BB               	movwf	___ftsub@f1+2
  6925  0594  3188  20C8  3185   	fcall	___ftsub
  6926  0597  0020               	movlb	0	; select bank0
  6927  0598  0836               	movf	?___ftsub,w
  6928  0599  0021               	movlb	1	; select bank1
  6929  059A  00A0               	movwf	ftoa@f^(0+128)
  6930  059B  0020               	movlb	0	; select bank0
  6931  059C  0837               	movf	?___ftsub+1,w
  6932  059D  0021               	movlb	1	; select bank1
  6933  059E  00A1               	movwf	(ftoa@f+1)^(0+128)
  6934  059F  0020               	movlb	0	; select bank0
  6935  05A0  0838               	movf	?___ftsub+2,w
  6936  05A1  0021               	movlb	1	; select bank1
  6937  05A2  00A2               	movwf	(ftoa@f+2)^(0+128)
  6938  05A3  0820               	movf	ftoa@f^(0+128),w
  6939  05A4  0020               	movlb	0	; select bank0
  6940  05A5  00CF               	movwf	___ftmul@f2
  6941  05A6  0021               	movlb	1	; select bank1
  6942  05A7  0821               	movf	(ftoa@f+1)^(0+128),w
  6943  05A8  0020               	movlb	0	; select bank0
  6944  05A9  00D0               	movwf	___ftmul@f2+1
  6945  05AA  0021               	movlb	1	; select bank1
  6946  05AB  0822               	movf	(ftoa@f+2)^(0+128),w
  6947  05AC  0020               	movlb	0	; select bank0
  6948  05AD  00D1               	movwf	___ftmul@f2+2
  6949  05AE  3024               	movlw	36
  6950  05AF  00CC               	movwf	___ftmul@f1
  6951  05B0  3074               	movlw	116
  6952  05B1  00CD               	movwf	___ftmul@f1+1
  6953  05B2  3049               	movlw	73
  6954  05B3  00CE               	movwf	___ftmul@f1+2
  6955  05B4  3186  26B5  3185   	fcall	___ftmul
  6956  05B7  0020               	movlb	0	; select bank0
  6957  05B8  084C               	movf	?___ftmul,w
  6958  05B9  00D8               	movwf	___fttol@f1
  6959  05BA  084D               	movf	?___ftmul+1,w
  6960  05BB  00D9               	movwf	___fttol@f1+1
  6961  05BC  084E               	movf	?___ftmul+2,w
  6962  05BD  00DA               	movwf	___fttol@f1+2
  6963  05BE  318E  262B  3185   	fcall	___fttol
  6964  05C1  0020               	movlb	0	; select bank0
  6965  05C2  085B               	movf	?___fttol+3,w
  6966  05C3  0021               	movlb	1	; select bank1
  6967  05C4  00A7               	movwf	(ftoa@rem+3)^(0+128)
  6968  05C5  0020               	movlb	0	; select bank0
  6969  05C6  085A               	movf	?___fttol+2,w
  6970  05C7  0021               	movlb	1	; select bank1
  6971  05C8  00A6               	movwf	(ftoa@rem+2)^(0+128)
  6972  05C9  0020               	movlb	0	; select bank0
  6973  05CA  0859               	movf	?___fttol+1,w
  6974  05CB  0021               	movlb	1	; select bank1
  6975  05CC  00A5               	movwf	(ftoa@rem+1)^(0+128)
  6976  05CD  0020               	movlb	0	; select bank0
  6977  05CE  0858               	movf	?___fttol,w
  6978  05CF  0021               	movlb	1	; select bank1
  6979  05D0  00A4               	movwf	ftoa@rem^(0+128)
  6980  05D1  3029               	movlw	low (STR_8| (0+32768))
  6981  05D2  0020               	movlb	0	; select bank0
  6982  05D3  00BC               	movwf	sprintf@f
  6983  05D4  3090               	movlw	high (STR_8| (0+32768))
  6984  05D5  00BD               	movwf	sprintf@f+1
  6985  05D6  0021               	movlb	1	; select bank1
  6986  05D7  082B               	movf	(ftoa@l+3)^(0+128),w
  6987  05D8  0020               	movlb	0	; select bank0
  6988  05D9  00C1               	movwf	?_sprintf+5
  6989  05DA  0021               	movlb	1	; select bank1
  6990  05DB  082A               	movf	(ftoa@l+2)^(0+128),w
  6991  05DC  0020               	movlb	0	; select bank0
  6992  05DD  00C0               	movwf	?_sprintf+4
  6993  05DE  0021               	movlb	1	; select bank1
  6994  05DF  0829               	movf	(ftoa@l+1)^(0+128),w
  6995  05E0  0020               	movlb	0	; select bank0
  6996  05E1  00BF               	movwf	?_sprintf+3
  6997  05E2  0021               	movlb	1	; select bank1
  6998  05E3  0828               	movf	ftoa@l^(0+128),w
  6999  05E4  0020               	movlb	0	; select bank0
  7000  05E5  00BE               	movwf	?_sprintf+2
  7001  05E6  0021               	movlb	1	; select bank1
  7002  05E7  0827               	movf	(ftoa@rem+3)^(0+128),w
  7003  05E8  0020               	movlb	0	; select bank0
  7004  05E9  00C5               	movwf	?_sprintf+9
  7005  05EA  0021               	movlb	1	; select bank1
  7006  05EB  0826               	movf	(ftoa@rem+2)^(0+128),w
  7007  05EC  0020               	movlb	0	; select bank0
  7008  05ED  00C4               	movwf	?_sprintf+8
  7009  05EE  0021               	movlb	1	; select bank1
  7010  05EF  0825               	movf	(ftoa@rem+1)^(0+128),w
  7011  05F0  0020               	movlb	0	; select bank0
  7012  05F1  00C3               	movwf	?_sprintf+7
  7013  05F2  0021               	movlb	1	; select bank1
  7014  05F3  0824               	movf	ftoa@rem^(0+128),w
  7015  05F4  0020               	movlb	0	; select bank0
  7016  05F5  00C2               	movwf	?_sprintf+6
  7017  05F6  0021               	movlb	1	; select bank1
  7018  05F7  082C               	movf	ftoa@cp^(0+128),w
  7019  05F8  3180  2062         	fcall	_sprintf
  7020  05FA  30DD               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  7021  05FB  0008               	return
  7022  05FC                     __end_of_ftoa:	
  7023                           
  7024                           	psect	text25
  7025  0062                     __ptext25:	
  7026 ;; *************** function _sprintf *****************
  7027 ;; Defined at:
  7028 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  7029 ;; Parameters:    Size  Location     Type
  7030 ;;  sp              1    wreg     PTR unsigned char 
  7031 ;;		 -> ftoa@buf(17), 
  7032 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  7033 ;;		 -> STR_8(11), 
  7034 ;; Auto vars:     Size  Location     Type
  7035 ;;  sp              1   48[BANK0 ] PTR unsigned char 
  7036 ;;		 -> ftoa@buf(17), 
  7037 ;;  val             4   44[BANK0 ] unsigned long 
  7038 ;;  tmpval          4    0        struct .
  7039 ;;  prec            2   51[BANK0 ] int 
  7040 ;;  width           2   49[BANK0 ] int 
  7041 ;;  cp              2    0        PTR const unsigned char 
  7042 ;;  len             2    0        unsigned int 
  7043 ;;  c               1   53[BANK0 ] unsigned char 
  7044 ;;  ap              1   43[BANK0 ] PTR void [1]
  7045 ;;		 -> ?_sprintf(2), 
  7046 ;;  flag            1   42[BANK0 ] unsigned char 
  7047 ;; Return value:  Size  Location     Type
  7048 ;;                  2   28[BANK0 ] int 
  7049 ;; Registers used:
  7050 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7056 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7059 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7060 ;;Total ram usage:       26 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    8
  7063 ;; This function calls:
  7064 ;;		___lldiv
  7065 ;;		___llmod
  7066 ;;		___wmul
  7067 ;;		_isdigit
  7068 ;; This function is called by:
  7069 ;;		_ftoa
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           
  7074                           ;psect for function _sprintf
  7075  0062                     _sprintf:	
  7076                           
  7077                           ;incstack = 0
  7078                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  7079                           ;sprintf@sp stored from wreg
  7080  0062  0020               	movlb	0	; select bank0
  7081  0063  00D0               	movwf	sprintf@sp
  7082                           
  7083                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  7084  0064  303E               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7085  0065  00FF               	movwf	127
  7086  0066  087F               	movf	127,w
  7087  0067  00CB               	movwf	sprintf@ap
  7088  0068                     l4003:	
  7089                           ;doprnt.c: 548: while((c = *f++)) {
  7090                           
  7091  0068  083D               	movf	sprintf@f+1,w
  7092  0069  00FF               	movwf	127
  7093  006A  083C               	movf	sprintf@f,w
  7094  006B  00FE               	movwf	126
  7095  006C  0ABC               	incf	sprintf@f,f
  7096  006D  1903               	skipnz
  7097  006E  0ABD               	incf	sprintf@f+1,f
  7098  006F  087E               	movf	126,w
  7099  0070  0084               	movwf	4
  7100  0071  087F               	movf	127,w
  7101  0072  0085               	movwf	5
  7102  0073  0800               	movf	0,w	;code access
  7103  0074  00FF               	movwf	127
  7104  0075  087F               	movf	127,w
  7105  0076  00D5               	movwf	sprintf@c
  7106  0077  0855               	movf	sprintf@c,w
  7107  0078  1903               	btfsc	3,2
  7108  0079  2A29               	goto	l4005
  7109                           
  7110                           ;doprnt.c: 550: if(c != '%')
  7111  007A  3025               	movlw	37
  7112  007B  0655               	xorwf	sprintf@c,w
  7113  007C  1903               	btfsc	3,2
  7114  007D  288B               	goto	l3911
  7115                           
  7116                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  7117  007E  0855               	movf	sprintf@c,w
  7118  007F  00FF               	movwf	127
  7119  0080  0850               	movf	sprintf@sp,w
  7120  0081  0084               	movwf	4
  7121  0082  3001               	movlw	1	; select bank2/3
  7122  0083  0085               	movwf	5
  7123  0084  087F               	movf	127,w
  7124  0085  0080               	movwf	0
  7125  0086  3001               	movlw	1
  7126  0087  00FF               	movwf	127
  7127  0088  087F               	movf	127,w
  7128  0089  07D0               	addwf	sprintf@sp,f
  7129                           
  7130                           ;doprnt.c: 554: continue;
  7131  008A  2868               	goto	l4003
  7132  008B                     l3911:	
  7133                           
  7134                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  7135  008B  01D1               	clrf	sprintf@width
  7136  008C  01D2               	clrf	sprintf@width+1
  7137                           
  7138                           ;doprnt.c: 560: flag = 0;
  7139  008D  01CA               	clrf	sprintf@flag
  7140                           
  7141                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  7142  008E  083C               	movf	sprintf@f,w
  7143  008F  0084               	movwf	4
  7144  0090  083D               	movf	sprintf@f+1,w
  7145  0091  0085               	movwf	5
  7146  0092  0800               	movf	0,w	;code access
  7147  0093  3188  2050  3180   	fcall	_isdigit
  7148  0096  1C03               	btfss	3,0
  7149  0097  28C9               	goto	l3925
  7150                           
  7151                           ;doprnt.c: 610: width = 0;
  7152  0098  0020               	movlb	0	; select bank0
  7153  0099  01D1               	clrf	sprintf@width
  7154  009A  01D2               	clrf	sprintf@width+1
  7155  009B                     l3917:	
  7156                           ;doprnt.c: 611: do {
  7157                           
  7158                           
  7159                           ;doprnt.c: 612: width *= 10;
  7160  009B  300A               	movlw	10
  7161  009C  00F0               	movwf	___wmul@multiplier
  7162  009D  3000               	movlw	0
  7163  009E  00F1               	movwf	___wmul@multiplier+1
  7164  009F  0020               	movlb	0	; select bank0
  7165  00A0  0852               	movf	sprintf@width+1,w
  7166  00A1  00F3               	movwf	___wmul@multiplicand+1
  7167  00A2  0851               	movf	sprintf@width,w
  7168  00A3  00F2               	movwf	___wmul@multiplicand
  7169  00A4  3188  20E6  3180   	fcall	___wmul
  7170  00A7  0871               	movf	?___wmul+1,w
  7171  00A8  0020               	movlb	0	; select bank0
  7172  00A9  00D2               	movwf	sprintf@width+1
  7173  00AA  0870               	movf	?___wmul,w
  7174  00AB  00D1               	movwf	sprintf@width
  7175                           
  7176                           ;doprnt.c: 613: width += *f++ - '0';
  7177  00AC  083C               	movf	sprintf@f,w
  7178  00AD  0084               	movwf	4
  7179  00AE  083D               	movf	sprintf@f+1,w
  7180  00AF  0085               	movwf	5
  7181  00B0  0800               	movf	0,w	;code access
  7182  00B1  3ED0               	addlw	208
  7183  00B2  00FE               	movwf	126
  7184  00B3  30FF               	movlw	255
  7185  00B4  1803               	skipnc
  7186  00B5  3000               	movlw	0
  7187  00B6  00FF               	movwf	127
  7188  00B7  087E               	movf	126,w
  7189  00B8  07D1               	addwf	sprintf@width,f
  7190  00B9  087F               	movf	127,w
  7191  00BA  3DD2               	addwfc	sprintf@width+1,f
  7192  00BB  3001               	movlw	1
  7193  00BC  07BC               	addwf	sprintf@f,f
  7194  00BD  3000               	movlw	0
  7195  00BE  3DBD               	addwfc	sprintf@f+1,f
  7196                           
  7197                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  7198  00BF  083C               	movf	sprintf@f,w
  7199  00C0  0084               	movwf	4
  7200  00C1  083D               	movf	sprintf@f+1,w
  7201  00C2  0085               	movwf	5
  7202  00C3  0800               	movf	0,w	;code access
  7203  00C4  3188  2050  3180   	fcall	_isdigit
  7204  00C7  1803               	btfsc	3,0
  7205  00C8  289B               	goto	l3917
  7206  00C9                     l3925:	
  7207                           
  7208                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  7209  00C9  0020               	movlb	0	; select bank0
  7210  00CA  083C               	movf	sprintf@f,w
  7211  00CB  0084               	movwf	4
  7212  00CC  083D               	movf	sprintf@f+1,w
  7213  00CD  0085               	movwf	5
  7214  00CE  0012               	moviw fsr0++
  7215  00CF  3A2E               	xorlw	46
  7216  00D0  1D03               	btfss	3,2
  7217  00D1  2907               	goto	l3937
  7218                           
  7219                           ;doprnt.c: 625: f++;
  7220  00D2  3001               	movlw	1
  7221  00D3  07BC               	addwf	sprintf@f,f
  7222  00D4  3000               	movlw	0
  7223  00D5  3DBD               	addwfc	sprintf@f+1,f
  7224                           
  7225                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  7226  00D6  01D3               	clrf	sprintf@prec
  7227  00D7  01D4               	clrf	sprintf@prec+1
  7228  00D8                     l3935:	
  7229                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  7230                           
  7231  00D8  083C               	movf	sprintf@f,w
  7232  00D9  0084               	movwf	4
  7233  00DA  083D               	movf	sprintf@f+1,w
  7234  00DB  0085               	movwf	5
  7235  00DC  0800               	movf	0,w	;code access
  7236  00DD  3188  2050  3180   	fcall	_isdigit
  7237  00E0  1C03               	btfss	3,0
  7238  00E1  2912               	goto	l3943
  7239                           
  7240                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  7241  00E2  0020               	movlb	0	; select bank0
  7242  00E3  083C               	movf	sprintf@f,w
  7243  00E4  0084               	movwf	4
  7244  00E5  083D               	movf	sprintf@f+1,w
  7245  00E6  0085               	movwf	5
  7246  00E7  0800               	movf	0,w	;code access
  7247  00E8  00FE               	movwf	126
  7248  00E9  01FF               	clrf	127
  7249  00EA  0854               	movf	sprintf@prec+1,w
  7250  00EB  00F1               	movwf	___wmul@multiplier+1
  7251  00EC  0853               	movf	sprintf@prec,w
  7252  00ED  00F0               	movwf	___wmul@multiplier
  7253  00EE  300A               	movlw	10
  7254  00EF  00F2               	movwf	___wmul@multiplicand
  7255  00F0  3000               	movlw	0
  7256  00F1  00F3               	movwf	___wmul@multiplicand+1
  7257  00F2  3188  20E6  3180   	fcall	___wmul
  7258  00F5  087E               	movf	126,w
  7259  00F6  0770               	addwf	?___wmul,w
  7260  00F7  00FC               	movwf	124
  7261  00F8  087F               	movf	127,w
  7262  00F9  3D71               	addwfc	?___wmul+1,w
  7263  00FA  00FD               	movwf	125
  7264  00FB  087C               	movf	124,w
  7265  00FC  3ED0               	addlw	208
  7266  00FD  0020               	movlb	0	; select bank0
  7267  00FE  00D3               	movwf	sprintf@prec
  7268  00FF  30FF               	movlw	255
  7269  0100  3D7D               	addwfc	125,w
  7270  0101  00D4               	movwf	sprintf@prec+1
  7271  0102  3001               	movlw	1
  7272  0103  07BC               	addwf	sprintf@f,f
  7273  0104  3000               	movlw	0
  7274  0105  3DBD               	addwfc	sprintf@f+1,f
  7275  0106  28D8               	goto	l3935
  7276  0107                     l3937:	
  7277                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  7278                           
  7279                           
  7280                           ;doprnt.c: 645: prec = 0;
  7281  0107  0020               	movlb	0	; select bank0
  7282  0108  01D3               	clrf	sprintf@prec
  7283  0109  01D4               	clrf	sprintf@prec+1
  7284                           
  7285                           ;doprnt.c: 654: switch(c = *f++) {
  7286                           
  7287                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  7288  010A  2912               	goto	l3943
  7289  010B                     l515:	
  7290                           ;doprnt.c: 660: case 'l':
  7291                           
  7292                           ;doprnt.c: 657: goto alldone;
  7293                           
  7294                           ;doprnt.c: 656: case 0:
  7295                           
  7296                           
  7297                           ;doprnt.c: 662: flag |= 0x10;
  7298  010B  164A               	bsf	sprintf@flag,4
  7299                           
  7300                           ;doprnt.c: 663: goto loop;
  7301  010C  2912               	goto	l3943
  7302  010D                     l3939:	
  7303                           ;doprnt.c: 836: case 'u':
  7304                           
  7305                           ;doprnt.c: 832: continue;
  7306                           
  7307                           ;doprnt.c: 821: default:
  7308                           
  7309                           
  7310                           ;doprnt.c: 837: flag |= 0xC0;
  7311  010D  30C0               	movlw	192
  7312  010E  00FF               	movwf	127
  7313  010F  087F               	movf	127,w
  7314  0110  04CA               	iorwf	sprintf@flag,f
  7315                           
  7316                           ;doprnt.c: 841: }
  7317                           
  7318                           ;doprnt.c: 838: break;
  7319  0111  292A               	goto	l518
  7320  0112                     l3943:	
  7321  0112  0020               	movlb	0	; select bank0
  7322  0113  083D               	movf	sprintf@f+1,w
  7323  0114  00FF               	movwf	127
  7324  0115  083C               	movf	sprintf@f,w
  7325  0116  00FE               	movwf	126
  7326  0117  0ABC               	incf	sprintf@f,f
  7327  0118  1903               	skipnz
  7328  0119  0ABD               	incf	sprintf@f+1,f
  7329  011A  087E               	movf	126,w
  7330  011B  0084               	movwf	4
  7331  011C  087F               	movf	127,w
  7332  011D  0085               	movwf	5
  7333  011E  0800               	movf	0,w	;code access
  7334  011F  00D5               	movwf	sprintf@c
  7335                           
  7336                           ; Switch size 1, requested type "space"
  7337                           ; Number of cases is 3, Range of values is 0 to 117
  7338                           ; switch strategies available:
  7339                           ; Name         Instructions Cycles
  7340                           ; simple_byte           10     6 (average)
  7341                           ; direct_byte          242     6 (fixed)
  7342                           ; jumptable            260     6 (fixed)
  7343                           ;	Chosen strategy is simple_byte
  7344  0120  3A00               	xorlw	0	; case 0
  7345  0121  1903               	skipnz
  7346  0122  2A29               	goto	l4005
  7347  0123  3A6C               	xorlw	108	; case 108
  7348  0124  1903               	skipnz
  7349  0125  290B               	goto	l515
  7350  0126  3A19               	xorlw	25	; case 117
  7351  0127  1903               	skipnz
  7352  0128  290D               	goto	l3939
  7353  0129  2868               	goto	l4003
  7354  012A                     l518:	
  7355                           
  7356                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7357  012A  1E4A               	btfss	sprintf@flag,4
  7358  012B  2939               	goto	l3949
  7359                           
  7360                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7361  012C  084B               	movf	sprintf@ap,w
  7362  012D  0084               	movwf	4
  7363  012E  0185               	clrf	5
  7364  012F  3F00               	moviw [0]fsr0
  7365  0130  00CC               	movwf	sprintf@val
  7366  0131  3F01               	moviw [1]fsr0
  7367  0132  00CD               	movwf	sprintf@val+1
  7368  0133  3F02               	moviw [2]fsr0
  7369  0134  00CE               	movwf	sprintf@val+2
  7370  0135  3F03               	moviw [3]fsr0
  7371  0136  00CF               	movwf	sprintf@val+3
  7372  0137  3004               	movlw	4
  7373  0138  2947               	goto	L1
  7374  0139                     l3949:	
  7375                           
  7376                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7377  0139  084B               	movf	sprintf@ap,w
  7378  013A  0084               	movwf	4
  7379  013B  0185               	clrf	5
  7380  013C  3F00               	moviw [0]fsr0
  7381  013D  00FE               	movwf	126
  7382  013E  3F01               	moviw [1]fsr0
  7383  013F  00FF               	movwf	127
  7384  0140  087E               	movf	126,w
  7385  0141  00CC               	movwf	sprintf@val
  7386  0142  087F               	movf	127,w
  7387  0143  00CD               	movwf	sprintf@val+1
  7388  0144  01CE               	clrf	sprintf@val+2
  7389  0145  01CF               	clrf	sprintf@val+3
  7390  0146  3002               	movlw	2
  7391  0147                     L1:	
  7392  0147  00FF               	movwf	127
  7393  0148  087F               	movf	127,w
  7394  0149  07CB               	addwf	sprintf@ap,f
  7395                           
  7396                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7397  014A  0853               	movf	sprintf@prec,w
  7398  014B  0454               	iorwf	sprintf@prec+1,w
  7399  014C  1D03               	btfss	3,2
  7400  014D  2958               	goto	l3959
  7401  014E  084F               	movf	sprintf@val+3,w
  7402  014F  044E               	iorwf	sprintf@val+2,w
  7403  0150  044D               	iorwf	sprintf@val+1,w
  7404  0151  044C               	iorwf	sprintf@val,w
  7405  0152  1D03               	skipz
  7406  0153  2958               	goto	l3959
  7407                           
  7408                           ;doprnt.c: 1310: prec++;
  7409  0154  3001               	movlw	1
  7410  0155  07D3               	addwf	sprintf@prec,f
  7411  0156  3000               	movlw	0
  7412  0157  3DD4               	addwfc	sprintf@prec+1,f
  7413  0158                     l3959:	
  7414                           
  7415                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7416  0158  01D5               	clrf	sprintf@c
  7417  0159  0AD5               	incf	sprintf@c,f
  7418  015A  300A               	movlw	10
  7419  015B  0655               	xorwf	sprintf@c,w
  7420  015C  1903               	btfsc	3,2
  7421  015D  298B               	goto	l3973
  7422  015E                     l3965:	
  7423                           
  7424                           ;doprnt.c: 1325: if(val < dpowers[c])
  7425  015E  0855               	movf	sprintf@c,w
  7426  015F  00FE               	movwf	126
  7427  0160  01FF               	clrf	127
  7428  0161  35FE               	lslf	126,f
  7429  0162  0DFF               	rlf	127,f
  7430  0163  35FE               	lslf	126,f
  7431  0164  0DFF               	rlf	127,f
  7432  0165  3000               	movlw	low (_dpowers| (0+32768))
  7433  0166  077E               	addwf	126,w
  7434  0167  0084               	movwf	4
  7435  0168  3090               	movlw	high (_dpowers| (0+32768))
  7436  0169  3D7F               	addwfc	127,w
  7437  016A  0085               	movwf	5
  7438  016B  3F00               	moviw [0]fsr0
  7439  016C  00C6               	movwf	??_sprintf
  7440  016D  3F01               	moviw [1]fsr0
  7441  016E  00C7               	movwf	??_sprintf+1
  7442  016F  3F02               	moviw [2]fsr0
  7443  0170  00C8               	movwf	??_sprintf+2
  7444  0171  3F03               	moviw [3]fsr0
  7445  0172  00C9               	movwf	??_sprintf+3
  7446  0173  0849               	movf	??_sprintf+3,w
  7447  0174  024F               	subwf	sprintf@val+3,w
  7448  0175  1D03               	skipz
  7449  0176  2981               	goto	u4305
  7450  0177  0848               	movf	??_sprintf+2,w
  7451  0178  024E               	subwf	sprintf@val+2,w
  7452  0179  1D03               	skipz
  7453  017A  2981               	goto	u4305
  7454  017B  0847               	movf	??_sprintf+1,w
  7455  017C  024D               	subwf	sprintf@val+1,w
  7456  017D  1D03               	skipz
  7457  017E  2981               	goto	u4305
  7458  017F  0846               	movf	??_sprintf,w
  7459  0180  024C               	subwf	sprintf@val,w
  7460  0181                     u4305:	
  7461  0181  1C03               	btfss	3,0
  7462  0182  298B               	goto	l3973
  7463                           
  7464                           ;doprnt.c: 1326: break;
  7465  0183  3001               	movlw	1
  7466  0184  00FF               	movwf	127
  7467  0185  087F               	movf	127,w
  7468  0186  07D5               	addwf	sprintf@c,f
  7469  0187  300A               	movlw	10
  7470  0188  0655               	xorwf	sprintf@c,w
  7471  0189  1D03               	btfss	3,2
  7472  018A  295E               	goto	l3965
  7473  018B                     l3973:	
  7474                           
  7475                           ;doprnt.c: 1358: if(c < prec)
  7476  018B  0854               	movf	sprintf@prec+1,w
  7477  018C  3A80               	xorlw	128
  7478  018D  3C80               	sublw	128
  7479  018E  1D03               	skipz
  7480  018F  2992               	goto	u4325
  7481  0190  0853               	movf	sprintf@prec,w
  7482  0191  0255               	subwf	sprintf@c,w
  7483  0192                     u4325:	
  7484  0192  1803               	skipnc
  7485  0193  299A               	goto	l3977
  7486                           
  7487                           ;doprnt.c: 1359: c = prec;
  7488  0194  0020               	movlb	0	; select bank0
  7489  0195  0853               	movf	sprintf@prec,w
  7490  0196  00FF               	movwf	127
  7491  0197  087F               	movf	127,w
  7492  0198  00D5               	movwf	sprintf@c
  7493  0199  29AE               	goto	l3981
  7494  019A                     l3977:	
  7495                           
  7496                           ;doprnt.c: 1360: else if(prec < c)
  7497  019A  0020               	movlb	0	; select bank0
  7498  019B  0854               	movf	sprintf@prec+1,w
  7499  019C  3A80               	xorlw	128
  7500  019D  00C6               	movwf	??_sprintf
  7501  019E  3080               	movlw	128
  7502  019F  0246               	subwf	??_sprintf,w
  7503  01A0  1D03               	skipz
  7504  01A1  29A4               	goto	u4335
  7505  01A2  0855               	movf	sprintf@c,w
  7506  01A3  0253               	subwf	sprintf@prec,w
  7507  01A4                     u4335:	
  7508  01A4  1803               	skipnc
  7509  01A5  29AE               	goto	l3981
  7510                           
  7511                           ;doprnt.c: 1361: prec = c;
  7512  01A6  0020               	movlb	0	; select bank0
  7513  01A7  0855               	movf	sprintf@c,w
  7514  01A8  00FE               	movwf	126
  7515  01A9  01FF               	clrf	127
  7516  01AA  087E               	movf	126,w
  7517  01AB  00D3               	movwf	sprintf@prec
  7518  01AC  087F               	movf	127,w
  7519  01AD  00D4               	movwf	sprintf@prec+1
  7520  01AE                     l3981:	
  7521                           
  7522                           ;doprnt.c: 1400: if(width > c)
  7523  01AE  0020               	movlb	0	; select bank0
  7524  01AF  0852               	movf	sprintf@width+1,w
  7525  01B0  3A80               	xorlw	128
  7526  01B1  3C80               	sublw	128
  7527  01B2  1D03               	skipz
  7528  01B3  29B6               	goto	u4345
  7529  01B4  0851               	movf	sprintf@width,w
  7530  01B5  0255               	subwf	sprintf@c,w
  7531  01B6                     u4345:	
  7532  01B6  1803               	skipnc
  7533  01B7  29C1               	goto	l3985
  7534                           
  7535                           ;doprnt.c: 1401: width -= c;
  7536  01B8  0020               	movlb	0	; select bank0
  7537  01B9  0855               	movf	sprintf@c,w
  7538  01BA  00FE               	movwf	126
  7539  01BB  01FF               	clrf	127
  7540  01BC  087E               	movf	126,w
  7541  01BD  02D1               	subwf	sprintf@width,f
  7542  01BE  087F               	movf	127,w
  7543  01BF  3BD2               	subwfb	sprintf@width+1,f
  7544  01C0  29C4               	goto	l3987
  7545  01C1                     l3985:	
  7546                           
  7547                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7548  01C1  0020               	movlb	0	; select bank0
  7549  01C2  01D1               	clrf	sprintf@width
  7550  01C3  01D2               	clrf	sprintf@width+1
  7551  01C4                     l3987:	
  7552                           
  7553                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7554  01C4  0851               	movf	sprintf@width,w
  7555  01C5  0452               	iorwf	sprintf@width+1,w
  7556  01C6  1903               	btfsc	3,2
  7557  01C7  2A1E               	goto	l4001
  7558                           
  7559                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7560                           
  7561                           ;doprnt.c: 1448: do
  7562  01C8  3020               	movlw	32
  7563  01C9  00FF               	movwf	127
  7564  01CA  0850               	movf	sprintf@sp,w
  7565  01CB  0084               	movwf	4
  7566  01CC  3001               	movlw	1	; select bank2/3
  7567  01CD  0085               	movwf	5
  7568  01CE  087F               	movf	127,w
  7569  01CF  0080               	movwf	0
  7570  01D0  3001               	movlw	1
  7571  01D1  00FF               	movwf	127
  7572  01D2  087F               	movf	127,w
  7573  01D3  07D0               	addwf	sprintf@sp,f
  7574                           
  7575                           ;doprnt.c: 1450: while(--width);
  7576  01D4  30FF               	movlw	255
  7577  01D5  07D1               	addwf	sprintf@width,f
  7578  01D6  30FF               	movlw	255
  7579  01D7  3DD2               	addwfc	sprintf@width+1,f
  7580  01D8  29C4               	goto	l3987
  7581  01D9                     l3995:	
  7582                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7583                           
  7584                           
  7585                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7586  01D9  3000               	movlw	0
  7587  01DA  00B7               	movwf	___llmod@divisor+3
  7588  01DB  3000               	movlw	0
  7589  01DC  00B6               	movwf	___llmod@divisor+2
  7590  01DD  3000               	movlw	0
  7591  01DE  00B5               	movwf	___llmod@divisor+1
  7592  01DF  300A               	movlw	10
  7593  01E0  00B4               	movwf	___llmod@divisor
  7594  01E1  0854               	movf	sprintf@prec+1,w
  7595  01E2  0085               	movwf	5
  7596  01E3  0853               	movf	sprintf@prec,w
  7597  01E4  0084               	movwf	4
  7598  01E5  3584               	lslf	4,f
  7599  01E6  0D85               	rlf	5,f
  7600  01E7  3584               	lslf	4,f
  7601  01E8  0D85               	rlf	5,f
  7602  01E9  3000               	movlw	low (_dpowers| (0+32768))
  7603  01EA  0784               	addwf	4,f
  7604  01EB  3090               	movlw	high (_dpowers| (0+32768))
  7605  01EC  3D85               	addwfc	5,f
  7606  01ED  3F00               	moviw [0]fsr0
  7607  01EE  00A7               	movwf	___lldiv@divisor
  7608  01EF  3F01               	moviw [1]fsr0
  7609  01F0  00A8               	movwf	___lldiv@divisor+1
  7610  01F1  3F02               	moviw [2]fsr0
  7611  01F2  00A9               	movwf	___lldiv@divisor+2
  7612  01F3  3F03               	moviw [3]fsr0
  7613  01F4  00AA               	movwf	___lldiv@divisor+3
  7614  01F5  084F               	movf	sprintf@val+3,w
  7615  01F6  00AE               	movwf	___lldiv@dividend+3
  7616  01F7  084E               	movf	sprintf@val+2,w
  7617  01F8  00AD               	movwf	___lldiv@dividend+2
  7618  01F9  084D               	movf	sprintf@val+1,w
  7619  01FA  00AC               	movwf	___lldiv@dividend+1
  7620  01FB  084C               	movf	sprintf@val,w
  7621  01FC  00AB               	movwf	___lldiv@dividend
  7622  01FD  318C  24ED  3180   	fcall	___lldiv
  7623  0200  0020               	movlb	0	; select bank0
  7624  0201  082A               	movf	?___lldiv+3,w
  7625  0202  00BB               	movwf	___llmod@dividend+3
  7626  0203  0829               	movf	?___lldiv+2,w
  7627  0204  00BA               	movwf	___llmod@dividend+2
  7628  0205  0828               	movf	?___lldiv+1,w
  7629  0206  00B9               	movwf	___llmod@dividend+1
  7630  0207  0827               	movf	?___lldiv,w
  7631  0208  00B8               	movwf	___llmod@dividend
  7632  0209  318C  2417  3180   	fcall	___llmod
  7633  020C  0020               	movlb	0	; select bank0
  7634  020D  0834               	movf	?___llmod,w
  7635  020E  3E30               	addlw	48
  7636  020F  00FF               	movwf	127
  7637  0210  087F               	movf	127,w
  7638  0211  00D5               	movwf	sprintf@c
  7639                           
  7640                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7641  0212  0855               	movf	sprintf@c,w
  7642  0213  00FF               	movwf	127
  7643  0214  0850               	movf	sprintf@sp,w
  7644  0215  0084               	movwf	4
  7645  0216  3001               	movlw	1	; select bank2/3
  7646  0217  0085               	movwf	5
  7647  0218  087F               	movf	127,w
  7648  0219  0080               	movwf	0
  7649  021A  3001               	movlw	1
  7650  021B  00FF               	movwf	127
  7651  021C  087F               	movf	127,w
  7652  021D  07D0               	addwf	sprintf@sp,f
  7653  021E                     l4001:	
  7654  021E  30FF               	movlw	255
  7655  021F  07D3               	addwf	sprintf@prec,f
  7656  0220  30FF               	movlw	255
  7657  0221  3DD4               	addwfc	sprintf@prec+1,f
  7658  0222  0A53               	incf	sprintf@prec,w
  7659  0223  1D03               	skipz
  7660  0224  29D9               	goto	l3995
  7661  0225  0A54               	incf	sprintf@prec+1,w
  7662  0226  1903               	btfsc	3,2
  7663  0227  2868               	goto	l4003
  7664  0228  29D9               	goto	l3995
  7665  0229                     l4005:	
  7666                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7667                           
  7668                           
  7669                           ;doprnt.c: 1557: *sp = 0;
  7670  0229  0850               	movf	sprintf@sp,w
  7671  022A  0084               	movwf	4
  7672  022B  3001               	movlw	1	; select bank2/3
  7673  022C  0085               	movwf	5
  7674  022D  0180               	clrf	0
  7675  022E  0008               	return
  7676  022F                     __end_of_sprintf:	
  7677                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7678                           
  7679                           
  7680                           	psect	text26
  7681  0850                     __ptext26:	
  7682 ;; *************** function _isdigit *****************
  7683 ;; Defined at:
  7684 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;  c               1    wreg     unsigned char 
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;  c               1    1[COMMON] unsigned char 
  7689 ;; Return value:  Size  Location     Type
  7690 ;;		None               void
  7691 ;; Registers used:
  7692 ;;		wreg, status,2, status,0
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7699 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;Total ram usage:        2 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; Hardware stack levels required when called:    7
  7705 ;; This function calls:
  7706 ;;		Nothing
  7707 ;; This function is called by:
  7708 ;;		_sprintf
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           
  7713                           ;psect for function _isdigit
  7714  0850                     _isdigit:	
  7715                           
  7716                           ;incstack = 0
  7717                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7718                           ;isdigit@c stored from wreg
  7719  0850  00F1               	movwf	isdigit@c
  7720  0851  01F0               	clrf	_isdigit$1998
  7721  0852  303A               	movlw	58
  7722  0853  0271               	subwf	isdigit@c,w
  7723  0854  1803               	skipnc
  7724  0855  285C               	goto	l3719
  7725  0856  3030               	movlw	48
  7726  0857  0271               	subwf	isdigit@c,w
  7727  0858  1C03               	skipc
  7728  0859  285C               	goto	l3719
  7729  085A  01F0               	clrf	_isdigit$1998
  7730  085B  0AF0               	incf	_isdigit$1998,f
  7731  085C                     l3719:	
  7732  085C  0C70               	rrf	_isdigit$1998,w
  7733  085D  0008               	return
  7734  085E                     __end_of_isdigit:	
  7735                           
  7736                           	psect	text27
  7737  08E6                     __ptext27:	
  7738 ;; *************** function ___wmul *****************
  7739 ;; Defined at:
  7740 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7741 ;; Parameters:    Size  Location     Type
  7742 ;;  multiplier      2    0[COMMON] unsigned int 
  7743 ;;  multiplicand    2    2[COMMON] unsigned int 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;  product         2    7[BANK0 ] unsigned int 
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  2    0[COMMON] unsigned int 
  7748 ;; Registers used:
  7749 ;;		wreg, status,2, status,0
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7755 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7758 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7759 ;;Total ram usage:        6 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:    7
  7762 ;; This function calls:
  7763 ;;		Nothing
  7764 ;; This function is called by:
  7765 ;;		_sprintf
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           
  7770                           ;psect for function ___wmul
  7771  08E6                     ___wmul:	
  7772                           
  7773                           ;incstack = 0
  7774                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7775  08E6  0020               	movlb	0	; select bank0
  7776  08E7  01A7               	clrf	___wmul@product
  7777  08E8  01A8               	clrf	___wmul@product+1
  7778  08E9                     l3725:	
  7779  08E9  1C70               	btfss	___wmul@multiplier,0
  7780  08EA  28F0               	goto	l541
  7781  08EB  0872               	movf	___wmul@multiplicand,w
  7782  08EC  0020               	movlb	0	; select bank0
  7783  08ED  07A7               	addwf	___wmul@product,f
  7784  08EE  0873               	movf	___wmul@multiplicand+1,w
  7785  08EF  3DA8               	addwfc	___wmul@product+1,f
  7786  08F0                     l541:	
  7787  08F0  3001               	movlw	1
  7788  08F1                     u3755:	
  7789  08F1  35F2               	lslf	___wmul@multiplicand,f
  7790  08F2  0DF3               	rlf	___wmul@multiplicand+1,f
  7791  08F3  0B89               	decfsz	9,f
  7792  08F4  28F1               	goto	u3755
  7793  08F5  3001               	movlw	1
  7794  08F6                     u3765:	
  7795  08F6  36F1               	lsrf	___wmul@multiplier+1,f
  7796  08F7  0CF0               	rrf	___wmul@multiplier,f
  7797  08F8  0B89               	decfsz	9,f
  7798  08F9  28F6               	goto	u3765
  7799  08FA  0870               	movf	___wmul@multiplier,w
  7800  08FB  0471               	iorwf	___wmul@multiplier+1,w
  7801  08FC  1D03               	btfss	3,2
  7802  08FD  28E9               	goto	l3725
  7803  08FE  0020               	movlb	0	; select bank0
  7804  08FF  0828               	movf	___wmul@product+1,w
  7805  0900  00F1               	movwf	?___wmul+1
  7806  0901  0827               	movf	___wmul@product,w
  7807  0902  00F0               	movwf	?___wmul
  7808  0903  0008               	return
  7809  0904                     __end_of___wmul:	
  7810                           
  7811                           	psect	text28
  7812  0C17                     __ptext28:	
  7813 ;; *************** function ___llmod *****************
  7814 ;; Defined at:
  7815 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7816 ;; Parameters:    Size  Location     Type
  7817 ;;  divisor         4   20[BANK0 ] unsigned long 
  7818 ;;  dividend        4   24[BANK0 ] unsigned long 
  7819 ;; Auto vars:     Size  Location     Type
  7820 ;;  counter         1    0[COMMON] unsigned char 
  7821 ;; Return value:  Size  Location     Type
  7822 ;;                  4   20[BANK0 ] unsigned long 
  7823 ;; Registers used:
  7824 ;;		wreg, status,2, status,0, btemp+11
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7830 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;Total ram usage:        9 bytes
  7835 ;; Hardware stack levels used:    1
  7836 ;; Hardware stack levels required when called:    7
  7837 ;; This function calls:
  7838 ;;		Nothing
  7839 ;; This function is called by:
  7840 ;;		_sprintf
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           
  7845                           ;psect for function ___llmod
  7846  0C17                     ___llmod:	
  7847                           
  7848                           ;incstack = 0
  7849                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+11]
  7850  0C17  0020               	movlb	0	; select bank0
  7851  0C18  0837               	movf	___llmod@divisor+3,w
  7852  0C19  0436               	iorwf	___llmod@divisor+2,w
  7853  0C1A  0435               	iorwf	___llmod@divisor+1,w
  7854  0C1B  0434               	iorwf	___llmod@divisor,w
  7855  0C1C  1903               	skipnz
  7856  0C1D  2C51               	goto	l3857
  7857  0C1E  01F0               	clrf	___llmod@counter
  7858  0C1F  0AF0               	incf	___llmod@counter,f
  7859  0C20                     l3847:	
  7860  0C20  1BB7               	btfsc	___llmod@divisor+3,7
  7861  0C21  2C2E               	goto	l3849
  7862  0C22  3001               	movlw	1
  7863  0C23                     u4095:	
  7864  0C23  35B4               	lslf	___llmod@divisor,f
  7865  0C24  0DB5               	rlf	___llmod@divisor+1,f
  7866  0C25  0DB6               	rlf	___llmod@divisor+2,f
  7867  0C26  0DB7               	rlf	___llmod@divisor+3,f
  7868  0C27  0B89               	decfsz	9,f
  7869  0C28  2C23               	goto	u4095
  7870  0C29  3001               	movlw	1
  7871  0C2A  00FF               	movwf	127
  7872  0C2B  087F               	movf	127,w
  7873  0C2C  07F0               	addwf	___llmod@counter,f
  7874  0C2D  2C20               	goto	l3847
  7875  0C2E                     l3849:	
  7876  0C2E  0837               	movf	___llmod@divisor+3,w
  7877  0C2F  023B               	subwf	___llmod@dividend+3,w
  7878  0C30  1D03               	skipz
  7879  0C31  2C3C               	goto	u4115
  7880  0C32  0836               	movf	___llmod@divisor+2,w
  7881  0C33  023A               	subwf	___llmod@dividend+2,w
  7882  0C34  1D03               	skipz
  7883  0C35  2C3C               	goto	u4115
  7884  0C36  0835               	movf	___llmod@divisor+1,w
  7885  0C37  0239               	subwf	___llmod@dividend+1,w
  7886  0C38  1D03               	skipz
  7887  0C39  2C3C               	goto	u4115
  7888  0C3A  0834               	movf	___llmod@divisor,w
  7889  0C3B  0238               	subwf	___llmod@dividend,w
  7890  0C3C                     u4115:	
  7891  0C3C  1C03               	skipc
  7892  0C3D  2C46               	goto	l3853
  7893  0C3E  0834               	movf	___llmod@divisor,w
  7894  0C3F  02B8               	subwf	___llmod@dividend,f
  7895  0C40  0835               	movf	___llmod@divisor+1,w
  7896  0C41  3BB9               	subwfb	___llmod@dividend+1,f
  7897  0C42  0836               	movf	___llmod@divisor+2,w
  7898  0C43  3BBA               	subwfb	___llmod@dividend+2,f
  7899  0C44  0837               	movf	___llmod@divisor+3,w
  7900  0C45  3BBB               	subwfb	___llmod@dividend+3,f
  7901  0C46                     l3853:	
  7902  0C46  3001               	movlw	1
  7903  0C47                     u4125:	
  7904  0C47  36B7               	lsrf	___llmod@divisor+3,f
  7905  0C48  0CB6               	rrf	___llmod@divisor+2,f
  7906  0C49  0CB5               	rrf	___llmod@divisor+1,f
  7907  0C4A  0CB4               	rrf	___llmod@divisor,f
  7908  0C4B  0B89               	decfsz	9,f
  7909  0C4C  2C47               	goto	u4125
  7910  0C4D  3001               	movlw	1
  7911  0C4E  02F0               	subwf	___llmod@counter,f
  7912  0C4F  1D03               	btfss	3,2
  7913  0C50  2C2E               	goto	l3849
  7914  0C51                     l3857:	
  7915  0C51  083B               	movf	___llmod@dividend+3,w
  7916  0C52  00B7               	movwf	?___llmod+3
  7917  0C53  083A               	movf	___llmod@dividend+2,w
  7918  0C54  00B6               	movwf	?___llmod+2
  7919  0C55  0839               	movf	___llmod@dividend+1,w
  7920  0C56  00B5               	movwf	?___llmod+1
  7921  0C57  0838               	movf	___llmod@dividend,w
  7922  0C58  00B4               	movwf	?___llmod
  7923  0C59  0008               	return
  7924  0C5A                     __end_of___llmod:	
  7925                           
  7926                           	psect	text29
  7927  0CED                     __ptext29:	
  7928 ;; *************** function ___lldiv *****************
  7929 ;; Defined at:
  7930 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;  divisor         4    7[BANK0 ] unsigned long 
  7933 ;;  dividend        4   11[BANK0 ] unsigned long 
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;  quotient        4   15[BANK0 ] unsigned long 
  7936 ;;  counter         1   19[BANK0 ] unsigned char 
  7937 ;; Return value:  Size  Location     Type
  7938 ;;                  4    7[BANK0 ] unsigned long 
  7939 ;; Registers used:
  7940 ;;		wreg, status,2, status,0, btemp+11
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7946 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7950 ;;Total ram usage:       13 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; Hardware stack levels required when called:    7
  7953 ;; This function calls:
  7954 ;;		Nothing
  7955 ;; This function is called by:
  7956 ;;		_sprintf
  7957 ;; This function uses a non-reentrant model
  7958 ;;
  7959                           
  7960                           
  7961                           ;psect for function ___lldiv
  7962  0CED                     ___lldiv:	
  7963                           
  7964                           ;incstack = 0
  7965                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+11]
  7966  0CED  3000               	movlw	0
  7967  0CEE  0020               	movlb	0	; select bank0
  7968  0CEF  00B2               	movwf	___lldiv@quotient+3
  7969  0CF0  3000               	movlw	0
  7970  0CF1  00B1               	movwf	___lldiv@quotient+2
  7971  0CF2  3000               	movlw	0
  7972  0CF3  00B0               	movwf	___lldiv@quotient+1
  7973  0CF4  3000               	movlw	0
  7974  0CF5  00AF               	movwf	___lldiv@quotient
  7975  0CF6  082A               	movf	___lldiv@divisor+3,w
  7976  0CF7  0429               	iorwf	___lldiv@divisor+2,w
  7977  0CF8  0428               	iorwf	___lldiv@divisor+1,w
  7978  0CF9  0427               	iorwf	___lldiv@divisor,w
  7979  0CFA  1903               	skipnz
  7980  0CFB  2D37               	goto	l3759
  7981  0CFC  01B3               	clrf	___lldiv@counter
  7982  0CFD  0AB3               	incf	___lldiv@counter,f
  7983  0CFE                     l3745:	
  7984  0CFE  1BAA               	btfsc	___lldiv@divisor+3,7
  7985  0CFF  2D0C               	goto	l3747
  7986  0D00  3001               	movlw	1
  7987  0D01                     u3795:	
  7988  0D01  35A7               	lslf	___lldiv@divisor,f
  7989  0D02  0DA8               	rlf	___lldiv@divisor+1,f
  7990  0D03  0DA9               	rlf	___lldiv@divisor+2,f
  7991  0D04  0DAA               	rlf	___lldiv@divisor+3,f
  7992  0D05  0B89               	decfsz	9,f
  7993  0D06  2D01               	goto	u3795
  7994  0D07  3001               	movlw	1
  7995  0D08  00FF               	movwf	127
  7996  0D09  087F               	movf	127,w
  7997  0D0A  07B3               	addwf	___lldiv@counter,f
  7998  0D0B  2CFE               	goto	l3745
  7999  0D0C                     l3747:	
  8000  0D0C  3001               	movlw	1
  8001  0D0D                     u3815:	
  8002  0D0D  35AF               	lslf	___lldiv@quotient,f
  8003  0D0E  0DB0               	rlf	___lldiv@quotient+1,f
  8004  0D0F  0DB1               	rlf	___lldiv@quotient+2,f
  8005  0D10  0DB2               	rlf	___lldiv@quotient+3,f
  8006  0D11  0B89               	decfsz	9,f
  8007  0D12  2D0D               	goto	u3815
  8008  0D13  082A               	movf	___lldiv@divisor+3,w
  8009  0D14  022E               	subwf	___lldiv@dividend+3,w
  8010  0D15  1D03               	skipz
  8011  0D16  2D21               	goto	u3825
  8012  0D17  0829               	movf	___lldiv@divisor+2,w
  8013  0D18  022D               	subwf	___lldiv@dividend+2,w
  8014  0D19  1D03               	skipz
  8015  0D1A  2D21               	goto	u3825
  8016  0D1B  0828               	movf	___lldiv@divisor+1,w
  8017  0D1C  022C               	subwf	___lldiv@dividend+1,w
  8018  0D1D  1D03               	skipz
  8019  0D1E  2D21               	goto	u3825
  8020  0D1F  0827               	movf	___lldiv@divisor,w
  8021  0D20  022B               	subwf	___lldiv@dividend,w
  8022  0D21                     u3825:	
  8023  0D21  1C03               	skipc
  8024  0D22  2D2C               	goto	l3755
  8025  0D23  0827               	movf	___lldiv@divisor,w
  8026  0D24  02AB               	subwf	___lldiv@dividend,f
  8027  0D25  0828               	movf	___lldiv@divisor+1,w
  8028  0D26  3BAC               	subwfb	___lldiv@dividend+1,f
  8029  0D27  0829               	movf	___lldiv@divisor+2,w
  8030  0D28  3BAD               	subwfb	___lldiv@dividend+2,f
  8031  0D29  082A               	movf	___lldiv@divisor+3,w
  8032  0D2A  3BAE               	subwfb	___lldiv@dividend+3,f
  8033  0D2B  142F               	bsf	___lldiv@quotient,0
  8034  0D2C                     l3755:	
  8035  0D2C  3001               	movlw	1
  8036  0D2D                     u3835:	
  8037  0D2D  36AA               	lsrf	___lldiv@divisor+3,f
  8038  0D2E  0CA9               	rrf	___lldiv@divisor+2,f
  8039  0D2F  0CA8               	rrf	___lldiv@divisor+1,f
  8040  0D30  0CA7               	rrf	___lldiv@divisor,f
  8041  0D31  0B89               	decfsz	9,f
  8042  0D32  2D2D               	goto	u3835
  8043  0D33  3001               	movlw	1
  8044  0D34  02B3               	subwf	___lldiv@counter,f
  8045  0D35  1D03               	btfss	3,2
  8046  0D36  2D0C               	goto	l3747
  8047  0D37                     l3759:	
  8048  0D37  0832               	movf	___lldiv@quotient+3,w
  8049  0D38  00AA               	movwf	?___lldiv+3
  8050  0D39  0831               	movf	___lldiv@quotient+2,w
  8051  0D3A  00A9               	movwf	?___lldiv+2
  8052  0D3B  0830               	movf	___lldiv@quotient+1,w
  8053  0D3C  00A8               	movwf	?___lldiv+1
  8054  0D3D  082F               	movf	___lldiv@quotient,w
  8055  0D3E  00A7               	movwf	?___lldiv
  8056  0D3F  0008               	return
  8057  0D40                     __end_of___lldiv:	
  8058                           
  8059                           	psect	text30
  8060  0A10                     __ptext30:	
  8061 ;; *************** function ___lltoft *****************
  8062 ;; Defined at:
  8063 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  8064 ;; Parameters:    Size  Location     Type
  8065 ;;  c               4    0[COMMON] unsigned long 
  8066 ;; Auto vars:     Size  Location     Type
  8067 ;;  exp             1   12[BANK0 ] unsigned char 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;                  3    0[COMMON] float 
  8070 ;; Registers used:
  8071 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8077 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8078 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8080 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;Total ram usage:        5 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; Hardware stack levels required when called:    8
  8084 ;; This function calls:
  8085 ;;		___ftpack
  8086 ;; This function is called by:
  8087 ;;		_ftoa
  8088 ;; This function uses a non-reentrant model
  8089 ;;
  8090                           
  8091                           
  8092                           ;psect for function ___lltoft
  8093  0A10                     ___lltoft:	
  8094                           
  8095                           ;incstack = 0
  8096                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8097  0A10  308E               	movlw	142
  8098  0A11  00FF               	movwf	127
  8099  0A12  087F               	movf	127,w
  8100  0A13  0020               	movlb	0	; select bank0
  8101  0A14  00AC               	movwf	___lltoft@exp
  8102  0A15                     l4163:	
  8103  0A15  30FF               	movlw	255
  8104  0A16  0573               	andwf	___lltoft@c+3,w
  8105  0A17  1903               	btfsc	3,2
  8106  0A18  2A25               	goto	l4165
  8107  0A19  3001               	movlw	1
  8108  0A1A                     u4685:	
  8109  0A1A  36F3               	lsrf	___lltoft@c+3,f
  8110  0A1B  0CF2               	rrf	___lltoft@c+2,f
  8111  0A1C  0CF1               	rrf	___lltoft@c+1,f
  8112  0A1D  0CF0               	rrf	___lltoft@c,f
  8113  0A1E  0B89               	decfsz	9,f
  8114  0A1F  2A1A               	goto	u4685
  8115  0A20  3001               	movlw	1
  8116  0A21  00FF               	movwf	127
  8117  0A22  087F               	movf	127,w
  8118  0A23  07AC               	addwf	___lltoft@exp,f
  8119  0A24  2A15               	goto	l4163
  8120  0A25                     l4165:	
  8121  0A25  0870               	movf	___lltoft@c,w
  8122  0A26  00A7               	movwf	___ftpack@arg
  8123  0A27  0871               	movf	___lltoft@c+1,w
  8124  0A28  00A8               	movwf	___ftpack@arg+1
  8125  0A29  0872               	movf	___lltoft@c+2,w
  8126  0A2A  00A9               	movwf	___ftpack@arg+2
  8127  0A2B  082C               	movf	___lltoft@exp,w
  8128  0A2C  00FF               	movwf	127
  8129  0A2D  087F               	movf	127,w
  8130  0A2E  00AA               	movwf	___ftpack@exp
  8131  0A2F  01AB               	clrf	___ftpack@sign
  8132  0A30  318D  2540         	fcall	___ftpack
  8133  0A32  0020               	movlb	0	; select bank0
  8134  0A33  0827               	movf	?___ftpack,w
  8135  0A34  00F0               	movwf	?___lltoft
  8136  0A35  0828               	movf	?___ftpack+1,w
  8137  0A36  00F1               	movwf	?___lltoft+1
  8138  0A37  0829               	movf	?___ftpack+2,w
  8139  0A38  00F2               	movwf	?___lltoft+2
  8140  0A39  0008               	return
  8141  0A3A                     __end_of___lltoft:	
  8142                           
  8143                           	psect	text31
  8144  0E2B                     __ptext31:	
  8145 ;; *************** function ___fttol *****************
  8146 ;; Defined at:
  8147 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;  f1              3   56[BANK0 ] float 
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;  lval            4   61[BANK0 ] unsigned long 
  8152 ;;  exp1            1   65[BANK0 ] unsigned char 
  8153 ;;  sign1           1   60[BANK0 ] unsigned char 
  8154 ;; Return value:  Size  Location     Type
  8155 ;;                  4   56[BANK0 ] long 
  8156 ;; Registers used:
  8157 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8158 ;; Tracked objects:
  8159 ;;		On entry : 0/0
  8160 ;;		On exit  : 0/0
  8161 ;;		Unchanged: 0/0
  8162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8163 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;Total ram usage:       10 bytes
  8168 ;; Hardware stack levels used:    1
  8169 ;; Hardware stack levels required when called:    7
  8170 ;; This function calls:
  8171 ;;		Nothing
  8172 ;; This function is called by:
  8173 ;;		_ftoa
  8174 ;; This function uses a non-reentrant model
  8175 ;;
  8176                           
  8177                           
  8178                           ;psect for function ___fttol
  8179  0E2B                     ___fttol:	
  8180                           
  8181                           ;incstack = 0
  8182                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+9-btemp+11]
  8183  0E2B  0020               	movlb	0	; select bank0
  8184  0E2C  0858               	movf	___fttol@f1,w
  8185  0E2D  00FD               	movwf	125
  8186  0E2E  0859               	movf	___fttol@f1+1,w
  8187  0E2F  00FE               	movwf	126
  8188  0E30  085A               	movf	___fttol@f1+2,w
  8189  0E31  00FF               	movwf	127
  8190  0E32  1003               	clrc
  8191  0E33  0D7E               	rlf	126,w
  8192  0E34  0D7F               	rlf	127,w
  8193  0E35  00FF               	movwf	127
  8194  0E36  087F               	movf	127,w
  8195  0E37  00E1               	movwf	___fttol@exp1
  8196  0E38  0861               	movf	___fttol@exp1,w
  8197  0E39  1D03               	btfss	3,2
  8198  0E3A  2E44               	goto	l4119
  8199  0E3B  3000               	movlw	0
  8200  0E3C  00DB               	movwf	?___fttol+3
  8201  0E3D  3000               	movlw	0
  8202  0E3E  00DA               	movwf	?___fttol+2
  8203  0E3F  3000               	movlw	0
  8204  0E40  00D9               	movwf	?___fttol+1
  8205  0E41  3000               	movlw	0
  8206  0E42  00D8               	movwf	?___fttol
  8207  0E43  0008               	return
  8208  0E44                     l4119:	
  8209  0E44  0858               	movf	___fttol@f1,w
  8210  0E45  00FD               	movwf	125
  8211  0E46  0859               	movf	___fttol@f1+1,w
  8212  0E47  00FE               	movwf	126
  8213  0E48  085A               	movf	___fttol@f1+2,w
  8214  0E49  00FF               	movwf	127
  8215  0E4A  3017               	movlw	23
  8216  0E4B                     u4595:	
  8217  0E4B  36FF               	lsrf	127,f
  8218  0E4C  0CFE               	rrf	126,f
  8219  0E4D  0CFD               	rrf	125,f
  8220  0E4E  0B89               	decfsz	9,f
  8221  0E4F  2E4B               	goto	u4595
  8222  0E50  087D               	movf	125,w
  8223  0E51  00FF               	movwf	127
  8224  0E52  087F               	movf	127,w
  8225  0E53  00DC               	movwf	___fttol@sign1
  8226  0E54  17D9               	bsf	___fttol@f1+1,7
  8227  0E55  30FF               	movlw	255
  8228  0E56  05D8               	andwf	___fttol@f1,f
  8229  0E57  30FF               	movlw	255
  8230  0E58  05D9               	andwf	___fttol@f1+1,f
  8231  0E59  3000               	movlw	0
  8232  0E5A  05DA               	andwf	___fttol@f1+2,f
  8233  0E5B  0858               	movf	___fttol@f1,w
  8234  0E5C  00DD               	movwf	___fttol@lval
  8235  0E5D  0859               	movf	___fttol@f1+1,w
  8236  0E5E  00DE               	movwf	___fttol@lval+1
  8237  0E5F  085A               	movf	___fttol@f1+2,w
  8238  0E60  00DF               	movwf	___fttol@lval+2
  8239  0E61  01E0               	clrf	___fttol@lval+3
  8240  0E62  308E               	movlw	142
  8241  0E63  02E1               	subwf	___fttol@exp1,f
  8242  0E64  1FE1               	btfss	___fttol@exp1,7
  8243  0E65  2E82               	goto	l4141
  8244  0E66  0861               	movf	___fttol@exp1,w
  8245  0E67  3A80               	xorlw	128
  8246  0E68  3E8F               	addlw	143
  8247  0E69  1803               	skipnc
  8248  0E6A  2E74               	goto	l4137
  8249  0E6B  3000               	movlw	0
  8250  0E6C  00DB               	movwf	?___fttol+3
  8251  0E6D  3000               	movlw	0
  8252  0E6E  00DA               	movwf	?___fttol+2
  8253  0E6F  3000               	movlw	0
  8254  0E70  00D9               	movwf	?___fttol+1
  8255  0E71  3000               	movlw	0
  8256  0E72  00D8               	movwf	?___fttol
  8257  0E73  0008               	return
  8258  0E74                     l4137:	
  8259  0E74  3001               	movlw	1
  8260  0E75                     u4625:	
  8261  0E75  36E0               	lsrf	___fttol@lval+3,f
  8262  0E76  0CDF               	rrf	___fttol@lval+2,f
  8263  0E77  0CDE               	rrf	___fttol@lval+1,f
  8264  0E78  0CDD               	rrf	___fttol@lval,f
  8265  0E79  0B89               	decfsz	9,f
  8266  0E7A  2E75               	goto	u4625
  8267  0E7B  3001               	movlw	1
  8268  0E7C  00FF               	movwf	127
  8269  0E7D  087F               	movf	127,w
  8270  0E7E  07E1               	addwf	___fttol@exp1,f
  8271  0E7F  1903               	btfsc	3,2
  8272  0E80  2E9B               	goto	l4149
  8273  0E81  2E74               	goto	l4137
  8274  0E82                     l4141:	
  8275  0E82  3018               	movlw	24
  8276  0E83  0261               	subwf	___fttol@exp1,w
  8277  0E84  1C03               	skipc
  8278  0E85  2E98               	goto	l835
  8279  0E86  3000               	movlw	0
  8280  0E87  00DB               	movwf	?___fttol+3
  8281  0E88  3000               	movlw	0
  8282  0E89  00DA               	movwf	?___fttol+2
  8283  0E8A  3000               	movlw	0
  8284  0E8B  00D9               	movwf	?___fttol+1
  8285  0E8C  3000               	movlw	0
  8286  0E8D  00D8               	movwf	?___fttol
  8287  0E8E  0008               	return
  8288  0E8F                     l4147:	
  8289  0E8F  3001               	movlw	1
  8290  0E90                     u4655:	
  8291  0E90  35DD               	lslf	___fttol@lval,f
  8292  0E91  0DDE               	rlf	___fttol@lval+1,f
  8293  0E92  0DDF               	rlf	___fttol@lval+2,f
  8294  0E93  0DE0               	rlf	___fttol@lval+3,f
  8295  0E94  0B89               	decfsz	9,f
  8296  0E95  2E90               	goto	u4655
  8297  0E96  3001               	movlw	1
  8298  0E97  02E1               	subwf	___fttol@exp1,f
  8299  0E98                     l835:	
  8300  0E98  0861               	movf	___fttol@exp1,w
  8301  0E99  1D03               	btfss	3,2
  8302  0E9A  2E8F               	goto	l4147
  8303  0E9B                     l4149:	
  8304  0E9B  085C               	movf	___fttol@sign1,w
  8305  0E9C  1903               	btfsc	3,2
  8306  0E9D  2EA9               	goto	l4153
  8307  0E9E  09DD               	comf	___fttol@lval,f
  8308  0E9F  09DE               	comf	___fttol@lval+1,f
  8309  0EA0  09DF               	comf	___fttol@lval+2,f
  8310  0EA1  09E0               	comf	___fttol@lval+3,f
  8311  0EA2  0ADD               	incf	___fttol@lval,f
  8312  0EA3  1903               	skipnz
  8313  0EA4  0ADE               	incf	___fttol@lval+1,f
  8314  0EA5  1903               	skipnz
  8315  0EA6  0ADF               	incf	___fttol@lval+2,f
  8316  0EA7  1903               	skipnz
  8317  0EA8  0AE0               	incf	___fttol@lval+3,f
  8318  0EA9                     l4153:	
  8319  0EA9  0860               	movf	___fttol@lval+3,w
  8320  0EAA  00DB               	movwf	?___fttol+3
  8321  0EAB  085F               	movf	___fttol@lval+2,w
  8322  0EAC  00DA               	movwf	?___fttol+2
  8323  0EAD  085E               	movf	___fttol@lval+1,w
  8324  0EAE  00D9               	movwf	?___fttol+1
  8325  0EAF  085D               	movf	___fttol@lval,w
  8326  0EB0  00D8               	movwf	?___fttol
  8327  0EB1  0008               	return
  8328  0EB2                     __end_of___fttol:	
  8329                           
  8330                           	psect	text32
  8331  08C8                     __ptext32:	
  8332 ;; *************** function ___ftsub *****************
  8333 ;; Defined at:
  8334 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;  f2              3   22[BANK0 ] float 
  8337 ;;  f1              3   25[BANK0 ] float 
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;		None
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  3   22[BANK0 ] float 
  8342 ;; Registers used:
  8343 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8349 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;Total ram usage:        6 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    9
  8356 ;; This function calls:
  8357 ;;		___ftadd
  8358 ;; This function is called by:
  8359 ;;		_ftoa
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           
  8364                           ;psect for function ___ftsub
  8365  08C8                     ___ftsub:	
  8366                           
  8367                           ;incstack = 0
  8368                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8369  08C8  0020               	movlb	0	; select bank0
  8370  08C9  0838               	movf	___ftsub@f2+2,w
  8371  08CA  0437               	iorwf	___ftsub@f2+1,w
  8372  08CB  0436               	iorwf	___ftsub@f2,w
  8373  08CC  1903               	skipnz
  8374  08CD  28D0               	goto	l4109
  8375  08CE  3080               	movlw	128
  8376  08CF  06B8               	xorwf	___ftsub@f2+2,f
  8377  08D0                     l4109:	
  8378  08D0  0839               	movf	___ftsub@f1,w
  8379  08D1  00AC               	movwf	___ftadd@f1
  8380  08D2  083A               	movf	___ftsub@f1+1,w
  8381  08D3  00AD               	movwf	___ftadd@f1+1
  8382  08D4  083B               	movf	___ftsub@f1+2,w
  8383  08D5  00AE               	movwf	___ftadd@f1+2
  8384  08D6  0836               	movf	___ftsub@f2,w
  8385  08D7  00AF               	movwf	___ftadd@f2
  8386  08D8  0837               	movf	___ftsub@f2+1,w
  8387  08D9  00B0               	movwf	___ftadd@f2+1
  8388  08DA  0838               	movf	___ftsub@f2+2,w
  8389  08DB  00B1               	movwf	___ftadd@f2+2
  8390  08DC  3183  2333         	fcall	___ftadd
  8391  08DE  0020               	movlb	0	; select bank0
  8392  08DF  082C               	movf	?___ftadd,w
  8393  08E0  00B6               	movwf	?___ftsub
  8394  08E1  082D               	movf	?___ftadd+1,w
  8395  08E2  00B7               	movwf	?___ftsub+1
  8396  08E3  082E               	movf	?___ftadd+2,w
  8397  08E4  00B8               	movwf	?___ftsub+2
  8398  08E5  0008               	return
  8399  08E6                     __end_of___ftsub:	
  8400                           
  8401                           	psect	text33
  8402  0829                     __ptext33:	
  8403 ;; *************** function ___ftneg *****************
  8404 ;; Defined at:
  8405 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8406 ;; Parameters:    Size  Location     Type
  8407 ;;  f1              3   44[BANK0 ] float 
  8408 ;; Auto vars:     Size  Location     Type
  8409 ;;		None
  8410 ;; Return value:  Size  Location     Type
  8411 ;;                  3   44[BANK0 ] float 
  8412 ;; Registers used:
  8413 ;;		wreg
  8414 ;; Tracked objects:
  8415 ;;		On entry : 0/0
  8416 ;;		On exit  : 0/0
  8417 ;;		Unchanged: 0/0
  8418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8419 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8422 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8423 ;;Total ram usage:        3 bytes
  8424 ;; Hardware stack levels used:    1
  8425 ;; Hardware stack levels required when called:    7
  8426 ;; This function calls:
  8427 ;;		Nothing
  8428 ;; This function is called by:
  8429 ;;		_loop
  8430 ;;		_ftoa
  8431 ;; This function uses a non-reentrant model
  8432 ;;
  8433                           
  8434                           
  8435                           ;psect for function ___ftneg
  8436  0829                     ___ftneg:	
  8437                           
  8438                           ;incstack = 0
  8439                           ; Regs used in ___ftneg: [wreg]
  8440  0829  0020               	movlb	0	; select bank0
  8441  082A  084E               	movf	___ftneg@f1+2,w
  8442  082B  044D               	iorwf	___ftneg@f1+1,w
  8443  082C  044C               	iorwf	___ftneg@f1,w
  8444  082D  1903               	skipnz
  8445  082E  0008               	return
  8446  082F  3080               	movlw	128
  8447  0830  06CE               	xorwf	___ftneg@f1+2,f
  8448  0831  0008               	return
  8449  0832                     __end_of___ftneg:	
  8450                           
  8451                           	psect	text34
  8452  06B5                     __ptext34:	
  8453 ;; *************** function ___ftmul *****************
  8454 ;; Defined at:
  8455 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8456 ;; Parameters:    Size  Location     Type
  8457 ;;  f1              3   44[BANK0 ] float 
  8458 ;;  f2              3   47[BANK0 ] float 
  8459 ;; Auto vars:     Size  Location     Type
  8460 ;;  f3_as_produc    3   51[BANK0 ] unsigned um
  8461 ;;  sign            1   55[BANK0 ] unsigned char 
  8462 ;;  cntr            1   54[BANK0 ] unsigned char 
  8463 ;;  exp             1   50[BANK0 ] unsigned char 
  8464 ;; Return value:  Size  Location     Type
  8465 ;;                  3   44[BANK0 ] float 
  8466 ;; Registers used:
  8467 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8468 ;; Tracked objects:
  8469 ;;		On entry : 0/0
  8470 ;;		On exit  : 0/0
  8471 ;;		Unchanged: 0/0
  8472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8473 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8474 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8476 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8477 ;;Total ram usage:       12 bytes
  8478 ;; Hardware stack levels used:    1
  8479 ;; Hardware stack levels required when called:    8
  8480 ;; This function calls:
  8481 ;;		___ftpack
  8482 ;; This function is called by:
  8483 ;;		_loop
  8484 ;;		_ftoa
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           
  8489                           ;psect for function ___ftmul
  8490  06B5                     ___ftmul:	
  8491                           
  8492                           ;incstack = 0
  8493                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8494  06B5  0020               	movlb	0	; select bank0
  8495  06B6  084C               	movf	___ftmul@f1,w
  8496  06B7  00FD               	movwf	125
  8497  06B8  084D               	movf	___ftmul@f1+1,w
  8498  06B9  00FE               	movwf	126
  8499  06BA  084E               	movf	___ftmul@f1+2,w
  8500  06BB  00FF               	movwf	127
  8501  06BC  1003               	clrc
  8502  06BD  0D7E               	rlf	126,w
  8503  06BE  0D7F               	rlf	127,w
  8504  06BF  00FF               	movwf	127
  8505  06C0  087F               	movf	127,w
  8506  06C1  00D2               	movwf	___ftmul@exp
  8507  06C2  0852               	movf	___ftmul@exp,w
  8508  06C3  1D03               	btfss	3,2
  8509  06C4  2ECC               	goto	l4049
  8510  06C5  3000               	movlw	0
  8511  06C6  00CC               	movwf	?___ftmul
  8512  06C7  3000               	movlw	0
  8513  06C8  00CD               	movwf	?___ftmul+1
  8514  06C9  3000               	movlw	0
  8515  06CA  00CE               	movwf	?___ftmul+2
  8516  06CB  0008               	return
  8517  06CC                     l4049:	
  8518  06CC  084F               	movf	___ftmul@f2,w
  8519  06CD  00FD               	movwf	125
  8520  06CE  0850               	movf	___ftmul@f2+1,w
  8521  06CF  00FE               	movwf	126
  8522  06D0  0851               	movf	___ftmul@f2+2,w
  8523  06D1  00FF               	movwf	127
  8524  06D2  1003               	clrc
  8525  06D3  0D7E               	rlf	126,w
  8526  06D4  0D7F               	rlf	127,w
  8527  06D5  00FF               	movwf	127
  8528  06D6  087F               	movf	127,w
  8529  06D7  00D7               	movwf	___ftmul@sign
  8530  06D8  0857               	movf	___ftmul@sign,w
  8531  06D9  1D03               	btfss	3,2
  8532  06DA  2EE2               	goto	l4055
  8533  06DB  3000               	movlw	0
  8534  06DC  00CC               	movwf	?___ftmul
  8535  06DD  3000               	movlw	0
  8536  06DE  00CD               	movwf	?___ftmul+1
  8537  06DF  3000               	movlw	0
  8538  06E0  00CE               	movwf	?___ftmul+2
  8539  06E1  0008               	return
  8540  06E2                     l4055:	
  8541  06E2  0857               	movf	___ftmul@sign,w
  8542  06E3  3E7B               	addlw	123
  8543  06E4  00FF               	movwf	127
  8544  06E5  087F               	movf	127,w
  8545  06E6  07D2               	addwf	___ftmul@exp,f
  8546  06E7  084C               	movf	___ftmul@f1,w
  8547  06E8  00FD               	movwf	125
  8548  06E9  084D               	movf	___ftmul@f1+1,w
  8549  06EA  00FE               	movwf	126
  8550  06EB  084E               	movf	___ftmul@f1+2,w
  8551  06EC  00FF               	movwf	127
  8552  06ED  3010               	movlw	16
  8553  06EE                     u4465:	
  8554  06EE  36FF               	lsrf	127,f
  8555  06EF  0CFE               	rrf	126,f
  8556  06F0  0CFD               	rrf	125,f
  8557  06F1  0B89               	decfsz	9,f
  8558  06F2  2EEE               	goto	u4465
  8559  06F3  087D               	movf	125,w
  8560  06F4  00FF               	movwf	127
  8561  06F5  087F               	movf	127,w
  8562  06F6  00D7               	movwf	___ftmul@sign
  8563  06F7  084F               	movf	___ftmul@f2,w
  8564  06F8  00FD               	movwf	125
  8565  06F9  0850               	movf	___ftmul@f2+1,w
  8566  06FA  00FE               	movwf	126
  8567  06FB  0851               	movf	___ftmul@f2+2,w
  8568  06FC  00FF               	movwf	127
  8569  06FD  3010               	movlw	16
  8570  06FE                     u4475:	
  8571  06FE  36FF               	lsrf	127,f
  8572  06FF  0CFE               	rrf	126,f
  8573  0700  0CFD               	rrf	125,f
  8574  0701  0B89               	decfsz	9,f
  8575  0702  2EFE               	goto	u4475
  8576  0703  087D               	movf	125,w
  8577  0704  00FF               	movwf	127
  8578  0705  087F               	movf	127,w
  8579  0706  06D7               	xorwf	___ftmul@sign,f
  8580  0707  3080               	movlw	128
  8581  0708  00FF               	movwf	127
  8582  0709  087F               	movf	127,w
  8583  070A  05D7               	andwf	___ftmul@sign,f
  8584  070B  17CD               	bsf	___ftmul@f1+1,7
  8585  070C  17D0               	bsf	___ftmul@f2+1,7
  8586  070D  30FF               	movlw	255
  8587  070E  05CF               	andwf	___ftmul@f2,f
  8588  070F  30FF               	movlw	255
  8589  0710  05D0               	andwf	___ftmul@f2+1,f
  8590  0711  3000               	movlw	0
  8591  0712  05D1               	andwf	___ftmul@f2+2,f
  8592  0713  3000               	movlw	0
  8593  0714  00D3               	movwf	___ftmul@f3_as_product
  8594  0715  3000               	movlw	0
  8595  0716  00D4               	movwf	___ftmul@f3_as_product+1
  8596  0717  3000               	movlw	0
  8597  0718  00D5               	movwf	___ftmul@f3_as_product+2
  8598  0719  3007               	movlw	7
  8599  071A  00FF               	movwf	127
  8600  071B  087F               	movf	127,w
  8601  071C  00D6               	movwf	___ftmul@cntr
  8602  071D                     l4071:	
  8603  071D  1C4C               	btfss	___ftmul@f1,0
  8604  071E  2F25               	goto	l4075
  8605  071F  084F               	movf	___ftmul@f2,w
  8606  0720  07D3               	addwf	___ftmul@f3_as_product,f
  8607  0721  0850               	movf	___ftmul@f2+1,w
  8608  0722  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8609  0723  0851               	movf	___ftmul@f2+2,w
  8610  0724  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8611  0725                     l4075:	
  8612  0725  3001               	movlw	1
  8613  0726                     u4495:	
  8614  0726  36CE               	lsrf	___ftmul@f1+2,f
  8615  0727  0CCD               	rrf	___ftmul@f1+1,f
  8616  0728  0CCC               	rrf	___ftmul@f1,f
  8617  0729  0B89               	decfsz	9,f
  8618  072A  2F26               	goto	u4495
  8619  072B  3001               	movlw	1
  8620  072C                     u4505:	
  8621  072C  35CF               	lslf	___ftmul@f2,f
  8622  072D  0DD0               	rlf	___ftmul@f2+1,f
  8623  072E  0DD1               	rlf	___ftmul@f2+2,f
  8624  072F  0B89               	decfsz	9,f
  8625  0730  2F2C               	goto	u4505
  8626  0731  3001               	movlw	1
  8627  0732  02D6               	subwf	___ftmul@cntr,f
  8628  0733  1D03               	btfss	3,2
  8629  0734  2F1D               	goto	l4071
  8630  0735  3009               	movlw	9
  8631  0736  00FF               	movwf	127
  8632  0737  087F               	movf	127,w
  8633  0738  00D6               	movwf	___ftmul@cntr
  8634  0739                     l4083:	
  8635  0739  1C4C               	btfss	___ftmul@f1,0
  8636  073A  2F41               	goto	l4087
  8637  073B  084F               	movf	___ftmul@f2,w
  8638  073C  07D3               	addwf	___ftmul@f3_as_product,f
  8639  073D  0850               	movf	___ftmul@f2+1,w
  8640  073E  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8641  073F  0851               	movf	___ftmul@f2+2,w
  8642  0740  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8643  0741                     l4087:	
  8644  0741  3001               	movlw	1
  8645  0742                     u4535:	
  8646  0742  36CE               	lsrf	___ftmul@f1+2,f
  8647  0743  0CCD               	rrf	___ftmul@f1+1,f
  8648  0744  0CCC               	rrf	___ftmul@f1,f
  8649  0745  0B89               	decfsz	9,f
  8650  0746  2F42               	goto	u4535
  8651  0747  3001               	movlw	1
  8652  0748                     u4545:	
  8653  0748  36D5               	lsrf	___ftmul@f3_as_product+2,f
  8654  0749  0CD4               	rrf	___ftmul@f3_as_product+1,f
  8655  074A  0CD3               	rrf	___ftmul@f3_as_product,f
  8656  074B  0B89               	decfsz	9,f
  8657  074C  2F48               	goto	u4545
  8658  074D  3001               	movlw	1
  8659  074E  02D6               	subwf	___ftmul@cntr,f
  8660  074F  1D03               	btfss	3,2
  8661  0750  2F39               	goto	l4083
  8662  0751  0853               	movf	___ftmul@f3_as_product,w
  8663  0752  00A7               	movwf	___ftpack@arg
  8664  0753  0854               	movf	___ftmul@f3_as_product+1,w
  8665  0754  00A8               	movwf	___ftpack@arg+1
  8666  0755  0855               	movf	___ftmul@f3_as_product+2,w
  8667  0756  00A9               	movwf	___ftpack@arg+2
  8668  0757  0852               	movf	___ftmul@exp,w
  8669  0758  00FF               	movwf	127
  8670  0759  087F               	movf	127,w
  8671  075A  00AA               	movwf	___ftpack@exp
  8672  075B  0857               	movf	___ftmul@sign,w
  8673  075C  00FF               	movwf	127
  8674  075D  087F               	movf	127,w
  8675  075E  00AB               	movwf	___ftpack@sign
  8676  075F  318D  2540         	fcall	___ftpack
  8677  0761  0020               	movlb	0	; select bank0
  8678  0762  0827               	movf	?___ftpack,w
  8679  0763  00CC               	movwf	?___ftmul
  8680  0764  0828               	movf	?___ftpack+1,w
  8681  0765  00CD               	movwf	?___ftmul+1
  8682  0766  0829               	movf	?___ftpack+2,w
  8683  0767  00CE               	movwf	?___ftmul+2
  8684  0768  0008               	return
  8685  0769                     __end_of___ftmul:	
  8686                           
  8687                           	psect	text35
  8688  0B5E                     __ptext35:	
  8689 ;; *************** function ___ftge *****************
  8690 ;; Defined at:
  8691 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8692 ;; Parameters:    Size  Location     Type
  8693 ;;  ff1             3    7[BANK0 ] float 
  8694 ;;  ff2             3   10[BANK0 ] float 
  8695 ;; Auto vars:     Size  Location     Type
  8696 ;;		None
  8697 ;; Return value:  Size  Location     Type
  8698 ;;		None               void
  8699 ;; Registers used:
  8700 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8701 ;; Tracked objects:
  8702 ;;		On entry : 0/0
  8703 ;;		On exit  : 0/0
  8704 ;;		Unchanged: 0/0
  8705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8706 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;Total ram usage:        6 bytes
  8711 ;; Hardware stack levels used:    1
  8712 ;; Hardware stack levels required when called:    7
  8713 ;; This function calls:
  8714 ;;		Nothing
  8715 ;; This function is called by:
  8716 ;;		_ftoa
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720                           
  8721                           ;psect for function ___ftge
  8722  0B5E                     ___ftge:	
  8723                           
  8724                           ;incstack = 0
  8725                           ; Regs used in ___ftge: [wreg+status,2+status,0+btemp+9-btemp+11]
  8726  0B5E  0020               	movlb	0	; select bank0
  8727  0B5F  1FA9               	btfss	___ftge@ff1+2,7
  8728  0B60  2B75               	goto	l4027
  8729  0B61  0927               	comf	___ftge@ff1,w
  8730  0B62  00FD               	movwf	125
  8731  0B63  0928               	comf	___ftge@ff1+1,w
  8732  0B64  00FE               	movwf	126
  8733  0B65  0929               	comf	___ftge@ff1+2,w
  8734  0B66  00FF               	movwf	127
  8735  0B67  0AFD               	incf	125,f
  8736  0B68  1903               	skipnz
  8737  0B69  0AFE               	incf	126,f
  8738  0B6A  1903               	skipnz
  8739  0B6B  0AFF               	incf	127,f
  8740  0B6C  3000               	movlw	0
  8741  0B6D  077D               	addwf	125,w
  8742  0B6E  00A7               	movwf	___ftge@ff1
  8743  0B6F  3000               	movlw	0
  8744  0B70  3D7E               	addwfc	126,w
  8745  0B71  00A8               	movwf	___ftge@ff1+1
  8746  0B72  3080               	movlw	128
  8747  0B73  3D7F               	addwfc	127,w
  8748  0B74  00A9               	movwf	___ftge@ff1+2
  8749  0B75                     l4027:	
  8750  0B75  1FAC               	btfss	___ftge@ff2+2,7
  8751  0B76  2B8B               	goto	l4031
  8752  0B77  092A               	comf	___ftge@ff2,w
  8753  0B78  00FD               	movwf	125
  8754  0B79  092B               	comf	___ftge@ff2+1,w
  8755  0B7A  00FE               	movwf	126
  8756  0B7B  092C               	comf	___ftge@ff2+2,w
  8757  0B7C  00FF               	movwf	127
  8758  0B7D  0AFD               	incf	125,f
  8759  0B7E  1903               	skipnz
  8760  0B7F  0AFE               	incf	126,f
  8761  0B80  1903               	skipnz
  8762  0B81  0AFF               	incf	127,f
  8763  0B82  3000               	movlw	0
  8764  0B83  077D               	addwf	125,w
  8765  0B84  00AA               	movwf	___ftge@ff2
  8766  0B85  3000               	movlw	0
  8767  0B86  3D7E               	addwfc	126,w
  8768  0B87  00AB               	movwf	___ftge@ff2+1
  8769  0B88  3080               	movlw	128
  8770  0B89  3D7F               	addwfc	127,w
  8771  0B8A  00AC               	movwf	___ftge@ff2+2
  8772  0B8B                     l4031:	
  8773  0B8B  3080               	movlw	128
  8774  0B8C  06A9               	xorwf	___ftge@ff1+2,f
  8775  0B8D  3080               	movlw	128
  8776  0B8E  06AC               	xorwf	___ftge@ff2+2,f
  8777  0B8F  082C               	movf	___ftge@ff2+2,w
  8778  0B90  0229               	subwf	___ftge@ff1+2,w
  8779  0B91  1D03               	skipz
  8780  0B92  0008               	return
  8781  0B93  082B               	movf	___ftge@ff2+1,w
  8782  0B94  0228               	subwf	___ftge@ff1+1,w
  8783  0B95  1D03               	skipz
  8784  0B96  0008               	return
  8785  0B97  082A               	movf	___ftge@ff2,w
  8786  0B98  0227               	subwf	___ftge@ff1,w
  8787  0B99  0008               	return
  8788  0B9A                     __end_of___ftge:	
  8789                           
  8790                           	psect	text36
  8791  0EB2                     __ptext36:	
  8792 ;; *************** function _getADCValue *****************
  8793 ;; Defined at:
  8794 ;;		line 31 in file "main.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;  channel         1    wreg     unsigned char 
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;  channel         1   39[BANK0 ] unsigned char 
  8799 ;;  adcSum          3   41[BANK0 ] float 
  8800 ;;  adcLoop         1   40[BANK0 ] unsigned char 
  8801 ;; Return value:  Size  Location     Type
  8802 ;;                  3   35[BANK0 ] float 
  8803 ;; Registers used:
  8804 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8805 ;; Tracked objects:
  8806 ;;		On entry : 0/0
  8807 ;;		On exit  : 0/0
  8808 ;;		Unchanged: 0/0
  8809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8810 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8813 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8814 ;;Total ram usage:        9 bytes
  8815 ;; Hardware stack levels used:    1
  8816 ;; Hardware stack levels required when called:    9
  8817 ;; This function calls:
  8818 ;;		___awtoft
  8819 ;;		___ftadd
  8820 ;;		___ftdiv
  8821 ;;		_sleepMs
  8822 ;; This function is called by:
  8823 ;;		_loop
  8824 ;; This function uses a non-reentrant model
  8825 ;;
  8826                           
  8827                           
  8828                           ;psect for function _getADCValue
  8829  0EB2                     _getADCValue:	
  8830                           
  8831                           ;incstack = 0
  8832                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack
      +                          ]
  8833                           ;getADCValue@channel stored from wreg
  8834  0EB2  0020               	movlb	0	; select bank0
  8835  0EB3  00C7               	movwf	getADCValue@channel
  8836                           
  8837                           ;main.c: 34: float adcSum = 0;
  8838  0EB4  3000               	movlw	0
  8839  0EB5  00C9               	movwf	getADCValue@adcSum
  8840  0EB6  3000               	movlw	0
  8841  0EB7  00CA               	movwf	getADCValue@adcSum+1
  8842  0EB8  3000               	movlw	0
  8843  0EB9  00CB               	movwf	getADCValue@adcSum+2
  8844                           
  8845                           ;main.c: 35: unsigned char adcLoop = 111;
  8846  0EBA  306F               	movlw	111
  8847  0EBB  00FF               	movwf	127
  8848  0EBC  087F               	movf	127,w
  8849  0EBD  00C8               	movwf	getADCValue@adcLoop
  8850                           
  8851                           ;main.c: 37: ADCON0bits.CHS = channel;
  8852  0EBE  0847               	movf	getADCValue@channel,w
  8853  0EBF  00C6               	movwf	??_getADCValue
  8854  0EC0  0DC6               	rlf	??_getADCValue,f
  8855  0EC1  0DC6               	rlf	??_getADCValue,f
  8856  0EC2  0021               	movlb	1	; select bank1
  8857  0EC3  081D               	movf	29,w	;volatile
  8858  0EC4  0020               	movlb	0	; select bank0
  8859  0EC5  0646               	xorwf	??_getADCValue,w
  8860  0EC6  3903               	andlw	-253
  8861  0EC7  0646               	xorwf	??_getADCValue,w
  8862  0EC8  0021               	movlb	1	; select bank1
  8863  0EC9  009D               	movwf	29	;volatile
  8864                           
  8865                           ;main.c: 38: FVRCONbits.FVREN = 1;
  8866  0ECA  0022               	movlb	2	; select bank2
  8867  0ECB  1797               	bsf	23,7	;volatile
  8868                           
  8869                           ;main.c: 39: ADCON0bits.ADON = 1;
  8870  0ECC  0021               	movlb	1	; select bank1
  8871  0ECD  141D               	bsf	29,0	;volatile
  8872                           
  8873                           ;main.c: 41: sleepMs(1);
  8874  0ECE  3001               	movlw	1
  8875  0ECF  00F0               	movwf	sleepMs@milliseconds
  8876  0ED0  3000               	movlw	0
  8877  0ED1  00F1               	movwf	sleepMs@milliseconds+1
  8878  0ED2  318A  2264  318E   	fcall	_sleepMs
  8879  0ED5                     l4411:	
  8880                           ;main.c: 43: while (adcLoop--){
  8881                           
  8882  0ED5  3001               	movlw	1
  8883  0ED6  0020               	movlb	0	; select bank0
  8884  0ED7  02C8               	subwf	getADCValue@adcLoop,f
  8885  0ED8  0A48               	incf	getADCValue@adcLoop,w
  8886  0ED9  1903               	btfsc	3,2
  8887  0EDA  2F0E               	goto	l178
  8888                           
  8889                           ;main.c: 45: ADCON0bits.ADGO = 1;
  8890  0EDB  0021               	movlb	1	; select bank1
  8891  0EDC  149D               	bsf	29,1	;volatile
  8892  0EDD                     l4407:	
  8893                           ;main.c: 47: while (ADCON0bits.ADGO){
  8894                           
  8895  0EDD  0021               	movlb	1	; select bank1
  8896  0EDE  1C9D               	btfss	29,1	;volatile
  8897  0EDF  2EE8               	goto	l4409
  8898                           
  8899                           ;main.c: 48: sleepMs(1);
  8900  0EE0  3001               	movlw	1
  8901  0EE1  00F0               	movwf	sleepMs@milliseconds
  8902  0EE2  3000               	movlw	0
  8903  0EE3  00F1               	movwf	sleepMs@milliseconds+1
  8904  0EE4  318A  2264  318E   	fcall	_sleepMs
  8905  0EE7  2EDD               	goto	l4407
  8906  0EE8                     l4409:	
  8907                           
  8908                           ;main.c: 49: };main.c: 51: adcSum+= (ADRESL | (ADRESH << 8));
  8909  0EE8  081C               	movf	28,w	;volatile
  8910  0EE9  00FE               	movwf	126
  8911  0EEA  01FF               	clrf	127
  8912  0EEB  087E               	movf	126,w
  8913  0EEC  00FF               	movwf	127
  8914  0EED  01FE               	clrf	126
  8915  0EEE  087E               	movf	126,w
  8916  0EEF  041B               	iorwf	27,w	;volatile
  8917  0EF0  00F0               	movwf	___awtoft@c
  8918  0EF1  087F               	movf	127,w
  8919  0EF2  00F1               	movwf	___awtoft@c+1
  8920  0EF3  3189  219C  318E   	fcall	___awtoft
  8921  0EF6  0870               	movf	?___awtoft,w
  8922  0EF7  0020               	movlb	0	; select bank0
  8923  0EF8  00AC               	movwf	___ftadd@f1
  8924  0EF9  0871               	movf	?___awtoft+1,w
  8925  0EFA  00AD               	movwf	___ftadd@f1+1
  8926  0EFB  0872               	movf	?___awtoft+2,w
  8927  0EFC  00AE               	movwf	___ftadd@f1+2
  8928  0EFD  0849               	movf	getADCValue@adcSum,w
  8929  0EFE  00AF               	movwf	___ftadd@f2
  8930  0EFF  084A               	movf	getADCValue@adcSum+1,w
  8931  0F00  00B0               	movwf	___ftadd@f2+1
  8932  0F01  084B               	movf	getADCValue@adcSum+2,w
  8933  0F02  00B1               	movwf	___ftadd@f2+2
  8934  0F03  3183  2333  318E   	fcall	___ftadd
  8935  0F06  0020               	movlb	0	; select bank0
  8936  0F07  082C               	movf	?___ftadd,w
  8937  0F08  00C9               	movwf	getADCValue@adcSum
  8938  0F09  082D               	movf	?___ftadd+1,w
  8939  0F0A  00CA               	movwf	getADCValue@adcSum+1
  8940  0F0B  082E               	movf	?___ftadd+2,w
  8941  0F0C  00CB               	movwf	getADCValue@adcSum+2
  8942  0F0D  2ED5               	goto	l4411
  8943  0F0E                     l178:	
  8944                           
  8945                           ;main.c: 53: };main.c: 55: FVRCONbits.FVREN = 0;
  8946  0F0E  0022               	movlb	2	; select bank2
  8947  0F0F  1397               	bcf	23,7	;volatile
  8948                           
  8949                           ;main.c: 56: ADCON0bits.ADON = 0;
  8950  0F10  0021               	movlb	1	; select bank1
  8951  0F11  101D               	bcf	29,0	;volatile
  8952                           
  8953                           ;main.c: 59: adcSum/= 111;
  8954  0F12  3000               	movlw	0
  8955  0F13  0020               	movlb	0	; select bank0
  8956  0F14  00B6               	movwf	___ftdiv@f2
  8957  0F15  30DE               	movlw	222
  8958  0F16  00B7               	movwf	___ftdiv@f2+1
  8959  0F17  3042               	movlw	66
  8960  0F18  00B8               	movwf	___ftdiv@f2+2
  8961  0F19  0849               	movf	getADCValue@adcSum,w
  8962  0F1A  00B9               	movwf	___ftdiv@f1
  8963  0F1B  084A               	movf	getADCValue@adcSum+1,w
  8964  0F1C  00BA               	movwf	___ftdiv@f1+1
  8965  0F1D  084B               	movf	getADCValue@adcSum+2,w
  8966  0F1E  00BB               	movwf	___ftdiv@f1+2
  8967  0F1F  318F  2757  318E   	fcall	___ftdiv
  8968  0F22  0020               	movlb	0	; select bank0
  8969  0F23  0836               	movf	?___ftdiv,w
  8970  0F24  00C9               	movwf	getADCValue@adcSum
  8971  0F25  0837               	movf	?___ftdiv+1,w
  8972  0F26  00CA               	movwf	getADCValue@adcSum+1
  8973  0F27  0838               	movf	?___ftdiv+2,w
  8974  0F28  00CB               	movwf	getADCValue@adcSum+2
  8975                           
  8976                           ;main.c: 62: if (ADCON1bits.ADPREF == 0b11){
  8977  0F29  0021               	movlb	1	; select bank1
  8978  0F2A  081E               	movf	30,w	;volatile
  8979  0F2B  3903               	andlw	3
  8980  0F2C  3A03               	xorlw	3
  8981  0F2D  1903               	btfsc	3,2
  8982  0F2E  2F48               	goto	l4423
  8983  0F2F  2F4F               	goto	l4425
  8984  0F30                     l4419:	
  8985                           ;main.c: 64: case 0b10:
  8986                           
  8987                           ;main.c: 63: switch (FVRCONbits.ADFVR){
  8988                           
  8989                           
  8990                           ;main.c: 65: adcSum/= 500;
  8991  0F30  3000               	movlw	0
  8992  0F31  0020               	movlb	0	; select bank0
  8993  0F32  00B6               	movwf	___ftdiv@f2
  8994  0F33  30FA               	movlw	250
  8995  0F34  00B7               	movwf	___ftdiv@f2+1
  8996  0F35  3043               	movlw	67
  8997  0F36  00B8               	movwf	___ftdiv@f2+2
  8998  0F37  0849               	movf	getADCValue@adcSum,w
  8999  0F38  00B9               	movwf	___ftdiv@f1
  9000  0F39  084A               	movf	getADCValue@adcSum+1,w
  9001  0F3A  00BA               	movwf	___ftdiv@f1+1
  9002  0F3B  084B               	movf	getADCValue@adcSum+2,w
  9003  0F3C  00BB               	movwf	___ftdiv@f1+2
  9004  0F3D  318F  2757  318E   	fcall	___ftdiv
  9005  0F40  0020               	movlb	0	; select bank0
  9006  0F41  0836               	movf	?___ftdiv,w
  9007  0F42  00C9               	movwf	getADCValue@adcSum
  9008  0F43  0837               	movf	?___ftdiv+1,w
  9009  0F44  00CA               	movwf	getADCValue@adcSum+1
  9010  0F45  0838               	movf	?___ftdiv+2,w
  9011  0F46  00CB               	movwf	getADCValue@adcSum+2
  9012                           
  9013                           ;main.c: 67: }
  9014                           
  9015                           ;main.c: 66: break;
  9016  0F47  2F4F               	goto	l4425
  9017  0F48                     l4423:	
  9018  0F48  0022               	movlb	2	; select bank2
  9019  0F49  0817               	movf	23,w	;volatile
  9020  0F4A  3903               	andlw	3
  9021                           
  9022                           ; Switch size 1, requested type "space"
  9023                           ; Number of cases is 1, Range of values is 2 to 2
  9024                           ; switch strategies available:
  9025                           ; Name         Instructions Cycles
  9026                           ; simple_byte            4     3 (average)
  9027                           ; direct_byte           11     9 (fixed)
  9028                           ; jumptable            263     9 (fixed)
  9029                           ;	Chosen strategy is simple_byte
  9030  0F4B  3A02               	xorlw	2	; case 2
  9031  0F4C  1903               	skipnz
  9032  0F4D  2F30               	goto	l4419
  9033  0F4E  2F4F               	goto	l4425
  9034  0F4F                     l4425:	
  9035                           
  9036                           ;main.c: 68: };main.c: 71: return adcSum;
  9037  0F4F  0020               	movlb	0	; select bank0
  9038  0F50  0849               	movf	getADCValue@adcSum,w
  9039  0F51  00C3               	movwf	?_getADCValue
  9040  0F52  084A               	movf	getADCValue@adcSum+1,w
  9041  0F53  00C4               	movwf	?_getADCValue+1
  9042  0F54  084B               	movf	getADCValue@adcSum+2,w
  9043  0F55  00C5               	movwf	?_getADCValue+2
  9044  0F56  0008               	return
  9045  0F57                     __end_of_getADCValue:	
  9046                           
  9047                           	psect	text37
  9048  0A64                     __ptext37:	
  9049 ;; *************** function _sleepMs *****************
  9050 ;; Defined at:
  9051 ;;		line 37 in file "interface.c"
  9052 ;; Parameters:    Size  Location     Type
  9053 ;;  milliseconds    2    0[COMMON] unsigned int 
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;  wdtps           1    3[COMMON] unsigned char 
  9056 ;; Return value:  Size  Location     Type
  9057 ;;                  1    wreg      void 
  9058 ;; Registers used:
  9059 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  9060 ;; Tracked objects:
  9061 ;;		On entry : 0/0
  9062 ;;		On exit  : 0/0
  9063 ;;		Unchanged: 0/0
  9064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9065 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;Total ram usage:        4 bytes
  9070 ;; Hardware stack levels used:    1
  9071 ;; Hardware stack levels required when called:    8
  9072 ;; This function calls:
  9073 ;;		_resetWDT
  9074 ;; This function is called by:
  9075 ;;		_getADCValue
  9076 ;;		_sendMessage
  9077 ;;		_sleepListren
  9078 ;;		_hcsr04GetAerage
  9079 ;; This function uses a non-reentrant model
  9080 ;;
  9081                           
  9082                           
  9083                           ;psect for function _sleepMs
  9084  0A64                     _sleepMs:	
  9085                           
  9086                           ;interface.c: 39: unsigned char wdtps;;interface.c: 40: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  9087                           
  9088                           ;incstack = 0
  9089                           ; Regs used in _sleepMs: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  9090  0A64  01F3               	clrf	sleepMs@wdtps
  9091  0A65  3013               	movlw	19
  9092  0A66  0273               	subwf	sleepMs@wdtps,w
  9093  0A67  1803               	btfsc	3,0
  9094  0A68  2A8D               	goto	l4191
  9095  0A69                     l4175:	
  9096                           
  9097                           ;interface.c: 41: if ((milliseconds >> wdtps) & 0b1){
  9098  0A69  0871               	movf	sleepMs@milliseconds+1,w
  9099  0A6A  00FF               	movwf	127
  9100  0A6B  0870               	movf	sleepMs@milliseconds,w
  9101  0A6C  00FE               	movwf	126
  9102  0A6D  0A73               	incf	sleepMs@wdtps,w
  9103  0A6E  2A71               	goto	u4714
  9104  0A6F                     u4715:	
  9105  0A6F  36FF               	lsrf	127,f
  9106  0A70  0CFE               	rrf	126,f
  9107  0A71                     u4714:	
  9108  0A71  0B89               	decfsz	9,f
  9109  0A72  2A6F               	goto	u4715
  9110  0A73  1C7E               	btfss	126,0
  9111  0A74  2A85               	goto	l4187
  9112  0A75                     l4177:	
  9113                           ;interface.c: 42: START_SLEEP:
  9114                           
  9115                           
  9116                           ;interface.c: 43: WDTCONbits.WDTPS = wdtps;
  9117  0A75  0873               	movf	sleepMs@wdtps,w
  9118  0A76  00F2               	movwf	??_sleepMs
  9119  0A77  0DF2               	rlf	??_sleepMs,f
  9120  0A78  0021               	movlb	1	; select bank1
  9121  0A79  0817               	movf	23,w	;volatile
  9122  0A7A  0672               	xorwf	??_sleepMs,w
  9123  0A7B  39C1               	andlw	-63
  9124  0A7C  0672               	xorwf	??_sleepMs,w
  9125  0A7D  0097               	movwf	23	;volatile
  9126  0A7E  0063               	sleep	;# 
  9127                           
  9128                           ;interface.c: 45: __nop();
  9129  0A7F  0000               	nop
  9130                           
  9131                           ;interface.c: 46: __nop();
  9132  0A80  0000               	nop
  9133                           
  9134                           ;interface.c: 48: if( STATUSbits.nTO || STATUSbits.nPD){
  9135  0A81  0020               	movlb	0	; select bank0
  9136  0A82  1E03               	btfss	3,4	;volatile
  9137  0A83  1983               	btfsc	3,3	;volatile
  9138                           
  9139                           ;interface.c: 49: goto START_SLEEP;
  9140  0A84  2A75               	goto	l4177
  9141  0A85                     l4187:	
  9142  0A85  3001               	movlw	1
  9143  0A86  00FF               	movwf	127
  9144  0A87  087F               	movf	127,w
  9145  0A88  07F3               	addwf	sleepMs@wdtps,f
  9146  0A89  3013               	movlw	19
  9147  0A8A  0273               	subwf	sleepMs@wdtps,w
  9148  0A8B  1C03               	skipc
  9149  0A8C  2A69               	goto	l4175
  9150  0A8D                     l4191:	
  9151                           
  9152                           ;interface.c: 50: };interface.c: 51: };interface.c: 52: };interface.c: 54: resetWDT();
  9153  0A8D  3188  2022         	fcall	_resetWDT
  9154  0A8F  0008               	return
  9155  0A90                     __end_of_sleepMs:	
  9156                           
  9157                           	psect	text38
  9158  0822                     __ptext38:	
  9159 ;; *************** function _resetWDT *****************
  9160 ;; Defined at:
  9161 ;;		line 32 in file "interface.c"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;		None
  9164 ;; Auto vars:     Size  Location     Type
  9165 ;;		None
  9166 ;; Return value:  Size  Location     Type
  9167 ;;                  1    wreg      void 
  9168 ;; Registers used:
  9169 ;;		wreg, status,2, status,0
  9170 ;; Tracked objects:
  9171 ;;		On entry : 0/0
  9172 ;;		On exit  : 0/0
  9173 ;;		Unchanged: 0/0
  9174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9179 ;;Total ram usage:        0 bytes
  9180 ;; Hardware stack levels used:    1
  9181 ;; Hardware stack levels required when called:    7
  9182 ;; This function calls:
  9183 ;;		Nothing
  9184 ;; This function is called by:
  9185 ;;		_sleepMs
  9186 ;; This function uses a non-reentrant model
  9187 ;;
  9188                           
  9189                           
  9190                           ;psect for function _resetWDT
  9191  0822                     _resetWDT:	
  9192                           
  9193                           ;interface.c: 33: WDTCONbits.WDTPS = 0b01100;
  9194                           
  9195                           ;incstack = 0
  9196                           ; Regs used in _resetWDT: [wreg+status,2+status,0]
  9197  0822  0021               	movlb	1	; select bank1
  9198  0823  0817               	movf	23,w	;volatile
  9199  0824  39C1               	andlw	-63
  9200  0825  3818               	iorlw	24
  9201  0826  0097               	movwf	23	;volatile
  9202  0827  0064               	clrwdt	;# 
  9203  0828  0008               	return
  9204  0829                     __end_of_resetWDT:	
  9205                           
  9206                           	psect	text39
  9207  0F57                     __ptext39:	
  9208 ;; *************** function ___ftdiv *****************
  9209 ;; Defined at:
  9210 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;  f2              3   22[BANK0 ] float 
  9213 ;;  f1              3   25[BANK0 ] float 
  9214 ;; Auto vars:     Size  Location     Type
  9215 ;;  f3              3   30[BANK0 ] float 
  9216 ;;  sign            1   34[BANK0 ] unsigned char 
  9217 ;;  exp             1   33[BANK0 ] unsigned char 
  9218 ;;  cntr            1   29[BANK0 ] unsigned char 
  9219 ;; Return value:  Size  Location     Type
  9220 ;;                  3   22[BANK0 ] float 
  9221 ;; Registers used:
  9222 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9223 ;; Tracked objects:
  9224 ;;		On entry : 0/0
  9225 ;;		On exit  : 0/0
  9226 ;;		Unchanged: 0/0
  9227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9228 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9232 ;;Total ram usage:       13 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; Hardware stack levels required when called:    8
  9235 ;; This function calls:
  9236 ;;		___ftpack
  9237 ;; This function is called by:
  9238 ;;		_getADCValue
  9239 ;;		_loop
  9240 ;;		_hcsr04GetAerage
  9241 ;; This function uses a non-reentrant model
  9242 ;;
  9243                           
  9244                           
  9245                           ;psect for function ___ftdiv
  9246  0F57                     ___ftdiv:	
  9247                           
  9248                           ;incstack = 0
  9249                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9250  0F57  0020               	movlb	0	; select bank0
  9251  0F58  0839               	movf	___ftdiv@f1,w
  9252  0F59  00FD               	movwf	125
  9253  0F5A  083A               	movf	___ftdiv@f1+1,w
  9254  0F5B  00FE               	movwf	126
  9255  0F5C  083B               	movf	___ftdiv@f1+2,w
  9256  0F5D  00FF               	movwf	127
  9257  0F5E  1003               	clrc
  9258  0F5F  0D7E               	rlf	126,w
  9259  0F60  0D7F               	rlf	127,w
  9260  0F61  00FF               	movwf	127
  9261  0F62  087F               	movf	127,w
  9262  0F63  00C1               	movwf	___ftdiv@exp
  9263  0F64  0841               	movf	___ftdiv@exp,w
  9264  0F65  1D03               	btfss	3,2
  9265  0F66  2F6E               	goto	l4343
  9266  0F67  3000               	movlw	0
  9267  0F68  00B6               	movwf	?___ftdiv
  9268  0F69  3000               	movlw	0
  9269  0F6A  00B7               	movwf	?___ftdiv+1
  9270  0F6B  3000               	movlw	0
  9271  0F6C  00B8               	movwf	?___ftdiv+2
  9272  0F6D  0008               	return
  9273  0F6E                     l4343:	
  9274  0F6E  0836               	movf	___ftdiv@f2,w
  9275  0F6F  00FD               	movwf	125
  9276  0F70  0837               	movf	___ftdiv@f2+1,w
  9277  0F71  00FE               	movwf	126
  9278  0F72  0838               	movf	___ftdiv@f2+2,w
  9279  0F73  00FF               	movwf	127
  9280  0F74  1003               	clrc
  9281  0F75  0D7E               	rlf	126,w
  9282  0F76  0D7F               	rlf	127,w
  9283  0F77  00FF               	movwf	127
  9284  0F78  087F               	movf	127,w
  9285  0F79  00C2               	movwf	___ftdiv@sign
  9286  0F7A  0842               	movf	___ftdiv@sign,w
  9287  0F7B  1D03               	btfss	3,2
  9288  0F7C  2F84               	goto	l4349
  9289  0F7D  3000               	movlw	0
  9290  0F7E  00B6               	movwf	?___ftdiv
  9291  0F7F  3000               	movlw	0
  9292  0F80  00B7               	movwf	?___ftdiv+1
  9293  0F81  3000               	movlw	0
  9294  0F82  00B8               	movwf	?___ftdiv+2
  9295  0F83  0008               	return
  9296  0F84                     l4349:	
  9297  0F84  3000               	movlw	0
  9298  0F85  00BE               	movwf	___ftdiv@f3
  9299  0F86  3000               	movlw	0
  9300  0F87  00BF               	movwf	___ftdiv@f3+1
  9301  0F88  3000               	movlw	0
  9302  0F89  00C0               	movwf	___ftdiv@f3+2
  9303  0F8A  3089               	movlw	137
  9304  0F8B  0742               	addwf	___ftdiv@sign,w
  9305  0F8C  00BC               	movwf	??___ftdiv
  9306  0F8D  083C               	movf	??___ftdiv,w
  9307  0F8E  02C1               	subwf	___ftdiv@exp,f
  9308  0F8F  0839               	movf	___ftdiv@f1,w
  9309  0F90  00FD               	movwf	125
  9310  0F91  083A               	movf	___ftdiv@f1+1,w
  9311  0F92  00FE               	movwf	126
  9312  0F93  083B               	movf	___ftdiv@f1+2,w
  9313  0F94  00FF               	movwf	127
  9314  0F95  3010               	movlw	16
  9315  0F96                     u4915:	
  9316  0F96  36FF               	lsrf	127,f
  9317  0F97  0CFE               	rrf	126,f
  9318  0F98  0CFD               	rrf	125,f
  9319  0F99  0B89               	decfsz	9,f
  9320  0F9A  2F96               	goto	u4915
  9321  0F9B  087D               	movf	125,w
  9322  0F9C  00FF               	movwf	127
  9323  0F9D  087F               	movf	127,w
  9324  0F9E  00C2               	movwf	___ftdiv@sign
  9325  0F9F  0836               	movf	___ftdiv@f2,w
  9326  0FA0  00FD               	movwf	125
  9327  0FA1  0837               	movf	___ftdiv@f2+1,w
  9328  0FA2  00FE               	movwf	126
  9329  0FA3  0838               	movf	___ftdiv@f2+2,w
  9330  0FA4  00FF               	movwf	127
  9331  0FA5  3010               	movlw	16
  9332  0FA6                     u4925:	
  9333  0FA6  36FF               	lsrf	127,f
  9334  0FA7  0CFE               	rrf	126,f
  9335  0FA8  0CFD               	rrf	125,f
  9336  0FA9  0B89               	decfsz	9,f
  9337  0FAA  2FA6               	goto	u4925
  9338  0FAB  087D               	movf	125,w
  9339  0FAC  00FF               	movwf	127
  9340  0FAD  087F               	movf	127,w
  9341  0FAE  06C2               	xorwf	___ftdiv@sign,f
  9342  0FAF  3080               	movlw	128
  9343  0FB0  00FF               	movwf	127
  9344  0FB1  087F               	movf	127,w
  9345  0FB2  05C2               	andwf	___ftdiv@sign,f
  9346  0FB3  17BA               	bsf	___ftdiv@f1+1,7
  9347  0FB4  30FF               	movlw	255
  9348  0FB5  05B9               	andwf	___ftdiv@f1,f
  9349  0FB6  30FF               	movlw	255
  9350  0FB7  05BA               	andwf	___ftdiv@f1+1,f
  9351  0FB8  3000               	movlw	0
  9352  0FB9  05BB               	andwf	___ftdiv@f1+2,f
  9353  0FBA  17B7               	bsf	___ftdiv@f2+1,7
  9354  0FBB  30FF               	movlw	255
  9355  0FBC  05B6               	andwf	___ftdiv@f2,f
  9356  0FBD  30FF               	movlw	255
  9357  0FBE  05B7               	andwf	___ftdiv@f2+1,f
  9358  0FBF  3000               	movlw	0
  9359  0FC0  05B8               	andwf	___ftdiv@f2+2,f
  9360  0FC1  3018               	movlw	24
  9361  0FC2  00FF               	movwf	127
  9362  0FC3  087F               	movf	127,w
  9363  0FC4  00BD               	movwf	___ftdiv@cntr
  9364  0FC5                     l4367:	
  9365  0FC5  3001               	movlw	1
  9366  0FC6                     u4935:	
  9367  0FC6  35BE               	lslf	___ftdiv@f3,f
  9368  0FC7  0DBF               	rlf	___ftdiv@f3+1,f
  9369  0FC8  0DC0               	rlf	___ftdiv@f3+2,f
  9370  0FC9  0B89               	decfsz	9,f
  9371  0FCA  2FC6               	goto	u4935
  9372  0FCB  0838               	movf	___ftdiv@f2+2,w
  9373  0FCC  023B               	subwf	___ftdiv@f1+2,w
  9374  0FCD  1D03               	skipz
  9375  0FCE  2FD5               	goto	u4945
  9376  0FCF  0837               	movf	___ftdiv@f2+1,w
  9377  0FD0  023A               	subwf	___ftdiv@f1+1,w
  9378  0FD1  1D03               	skipz
  9379  0FD2  2FD5               	goto	u4945
  9380  0FD3  0836               	movf	___ftdiv@f2,w
  9381  0FD4  0239               	subwf	___ftdiv@f1,w
  9382  0FD5                     u4945:	
  9383  0FD5  1C03               	skipc
  9384  0FD6  2FDE               	goto	l4375
  9385  0FD7  0836               	movf	___ftdiv@f2,w
  9386  0FD8  02B9               	subwf	___ftdiv@f1,f
  9387  0FD9  0837               	movf	___ftdiv@f2+1,w
  9388  0FDA  3BBA               	subwfb	___ftdiv@f1+1,f
  9389  0FDB  0838               	movf	___ftdiv@f2+2,w
  9390  0FDC  3BBB               	subwfb	___ftdiv@f1+2,f
  9391  0FDD  143E               	bsf	___ftdiv@f3,0
  9392  0FDE                     l4375:	
  9393  0FDE  3001               	movlw	1
  9394  0FDF                     u4955:	
  9395  0FDF  35B9               	lslf	___ftdiv@f1,f
  9396  0FE0  0DBA               	rlf	___ftdiv@f1+1,f
  9397  0FE1  0DBB               	rlf	___ftdiv@f1+2,f
  9398  0FE2  0B89               	decfsz	9,f
  9399  0FE3  2FDF               	goto	u4955
  9400  0FE4  3001               	movlw	1
  9401  0FE5  02BD               	subwf	___ftdiv@cntr,f
  9402  0FE6  1D03               	btfss	3,2
  9403  0FE7  2FC5               	goto	l4367
  9404  0FE8  083E               	movf	___ftdiv@f3,w
  9405  0FE9  00A7               	movwf	___ftpack@arg
  9406  0FEA  083F               	movf	___ftdiv@f3+1,w
  9407  0FEB  00A8               	movwf	___ftpack@arg+1
  9408  0FEC  0840               	movf	___ftdiv@f3+2,w
  9409  0FED  00A9               	movwf	___ftpack@arg+2
  9410  0FEE  0841               	movf	___ftdiv@exp,w
  9411  0FEF  00FF               	movwf	127
  9412  0FF0  087F               	movf	127,w
  9413  0FF1  00AA               	movwf	___ftpack@exp
  9414  0FF2  0842               	movf	___ftdiv@sign,w
  9415  0FF3  00FF               	movwf	127
  9416  0FF4  087F               	movf	127,w
  9417  0FF5  00AB               	movwf	___ftpack@sign
  9418  0FF6  318D  2540         	fcall	___ftpack
  9419  0FF8  0020               	movlb	0	; select bank0
  9420  0FF9  0827               	movf	?___ftpack,w
  9421  0FFA  00B6               	movwf	?___ftdiv
  9422  0FFB  0828               	movf	?___ftpack+1,w
  9423  0FFC  00B7               	movwf	?___ftdiv+1
  9424  0FFD  0829               	movf	?___ftpack+2,w
  9425  0FFE  00B8               	movwf	?___ftdiv+2
  9426  0FFF  0008               	return
  9427  1000                     __end_of___ftdiv:	
  9428                           
  9429                           	psect	text40
  9430  0333                     __ptext40:	
  9431 ;; *************** function ___ftadd *****************
  9432 ;; Defined at:
  9433 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;  f1              3   12[BANK0 ] float 
  9436 ;;  f2              3   15[BANK0 ] float 
  9437 ;; Auto vars:     Size  Location     Type
  9438 ;;  exp1            1   21[BANK0 ] unsigned char 
  9439 ;;  exp2            1   20[BANK0 ] unsigned char 
  9440 ;;  sign            1   19[BANK0 ] unsigned char 
  9441 ;; Return value:  Size  Location     Type
  9442 ;;                  3   12[BANK0 ] float 
  9443 ;; Registers used:
  9444 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9445 ;; Tracked objects:
  9446 ;;		On entry : 0/0
  9447 ;;		On exit  : 0/0
  9448 ;;		Unchanged: 0/0
  9449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9450 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;Total ram usage:       10 bytes
  9455 ;; Hardware stack levels used:    1
  9456 ;; Hardware stack levels required when called:    8
  9457 ;; This function calls:
  9458 ;;		___ftpack
  9459 ;; This function is called by:
  9460 ;;		_getADCValue
  9461 ;;		_loop
  9462 ;;		___ftsub
  9463 ;;		_hcsr04GetAerage
  9464 ;; This function uses a non-reentrant model
  9465 ;;
  9466                           
  9467                           
  9468                           ;psect for function ___ftadd
  9469  0333                     ___ftadd:	
  9470                           
  9471                           ;incstack = 0
  9472                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9473  0333  0020               	movlb	0	; select bank0
  9474  0334  082C               	movf	___ftadd@f1,w
  9475  0335  00FD               	movwf	125
  9476  0336  082D               	movf	___ftadd@f1+1,w
  9477  0337  00FE               	movwf	126
  9478  0338  082E               	movf	___ftadd@f1+2,w
  9479  0339  00FF               	movwf	127
  9480  033A  1003               	clrc
  9481  033B  0D7E               	rlf	126,w
  9482  033C  0D7F               	rlf	127,w
  9483  033D  00FF               	movwf	127
  9484  033E  087F               	movf	127,w
  9485  033F  00B5               	movwf	___ftadd@exp1
  9486  0340  082F               	movf	___ftadd@f2,w
  9487  0341  00FD               	movwf	125
  9488  0342  0830               	movf	___ftadd@f2+1,w
  9489  0343  00FE               	movwf	126
  9490  0344  0831               	movf	___ftadd@f2+2,w
  9491  0345  00FF               	movwf	127
  9492  0346  1003               	clrc
  9493  0347  0D7E               	rlf	126,w
  9494  0348  0D7F               	rlf	127,w
  9495  0349  00FF               	movwf	127
  9496  034A  087F               	movf	127,w
  9497  034B  00B4               	movwf	___ftadd@exp2
  9498  034C  0835               	movf	___ftadd@exp1,w
  9499  034D  1903               	btfsc	3,2
  9500  034E  2B5B               	goto	l3771
  9501  034F  0834               	movf	___ftadd@exp2,w
  9502  0350  0235               	subwf	___ftadd@exp1,w
  9503  0351  1803               	skipnc
  9504  0352  2B62               	goto	l3775
  9505  0353  0335               	decf	___ftadd@exp1,w
  9506  0354  3AFF               	xorlw	255
  9507  0355  0734               	addwf	___ftadd@exp2,w
  9508  0356  00B2               	movwf	??___ftadd
  9509  0357  3019               	movlw	25
  9510  0358  0232               	subwf	??___ftadd,w
  9511  0359  1C03               	skipc
  9512  035A  2B62               	goto	l3775
  9513  035B                     l3771:	
  9514  035B  082F               	movf	___ftadd@f2,w
  9515  035C  00AC               	movwf	?___ftadd
  9516  035D  0830               	movf	___ftadd@f2+1,w
  9517  035E  00AD               	movwf	?___ftadd+1
  9518  035F  0831               	movf	___ftadd@f2+2,w
  9519  0360  00AE               	movwf	?___ftadd+2
  9520  0361  0008               	return
  9521  0362                     l3775:	
  9522  0362  0834               	movf	___ftadd@exp2,w
  9523  0363  1903               	btfsc	3,2
  9524  0364  0008               	return
  9525  0365  0835               	movf	___ftadd@exp1,w
  9526  0366  0234               	subwf	___ftadd@exp2,w
  9527  0367  1803               	skipnc
  9528  0368  2B71               	goto	l3781
  9529  0369  0334               	decf	___ftadd@exp2,w
  9530  036A  3AFF               	xorlw	255
  9531  036B  0735               	addwf	___ftadd@exp1,w
  9532  036C  00B2               	movwf	??___ftadd
  9533  036D  3019               	movlw	25
  9534  036E  0232               	subwf	??___ftadd,w
  9535  036F  1803               	btfsc	3,0
  9536  0370  0008               	return
  9537  0371                     l3781:	
  9538  0371  3006               	movlw	6
  9539  0372  00FF               	movwf	127
  9540  0373  087F               	movf	127,w
  9541  0374  00B3               	movwf	___ftadd@sign
  9542  0375  1BAE               	btfsc	___ftadd@f1+2,7
  9543  0376  17B3               	bsf	___ftadd@sign,7
  9544  0377  1BB1               	btfsc	___ftadd@f2+2,7
  9545  0378  1733               	bsf	___ftadd@sign,6
  9546  0379  17AD               	bsf	___ftadd@f1+1,7
  9547  037A  30FF               	movlw	255
  9548  037B  05AC               	andwf	___ftadd@f1,f
  9549  037C  30FF               	movlw	255
  9550  037D  05AD               	andwf	___ftadd@f1+1,f
  9551  037E  3000               	movlw	0
  9552  037F  05AE               	andwf	___ftadd@f1+2,f
  9553  0380  17B0               	bsf	___ftadd@f2+1,7
  9554  0381  30FF               	movlw	255
  9555  0382  05AF               	andwf	___ftadd@f2,f
  9556  0383  30FF               	movlw	255
  9557  0384  05B0               	andwf	___ftadd@f2+1,f
  9558  0385  3000               	movlw	0
  9559  0386  05B1               	andwf	___ftadd@f2+2,f
  9560  0387  0834               	movf	___ftadd@exp2,w
  9561  0388  0235               	subwf	___ftadd@exp1,w
  9562  0389  1803               	skipnc
  9563  038A  2BAD               	goto	l3805
  9564  038B                     l3793:	
  9565  038B  3001               	movlw	1
  9566  038C                     u3945:	
  9567  038C  35AF               	lslf	___ftadd@f2,f
  9568  038D  0DB0               	rlf	___ftadd@f2+1,f
  9569  038E  0DB1               	rlf	___ftadd@f2+2,f
  9570  038F  0B89               	decfsz	9,f
  9571  0390  2B8C               	goto	u3945
  9572  0391  3001               	movlw	1
  9573  0392  02B4               	subwf	___ftadd@exp2,f
  9574  0393  0834               	movf	___ftadd@exp2,w
  9575  0394  0635               	xorwf	___ftadd@exp1,w
  9576  0395  1903               	skipnz
  9577  0396  2BA8               	goto	l3803
  9578  0397  3001               	movlw	1
  9579  0398  02B3               	subwf	___ftadd@sign,f
  9580  0399  0833               	movf	___ftadd@sign,w
  9581  039A  3907               	andlw	7
  9582  039B  1903               	btfsc	3,2
  9583  039C  2BA8               	goto	l3803
  9584  039D  2B8B               	goto	l3793
  9585  039E                     l3799:	
  9586  039E  3001               	movlw	1
  9587  039F                     u3975:	
  9588  039F  36AE               	lsrf	___ftadd@f1+2,f
  9589  03A0  0CAD               	rrf	___ftadd@f1+1,f
  9590  03A1  0CAC               	rrf	___ftadd@f1,f
  9591  03A2  0B89               	decfsz	9,f
  9592  03A3  2B9F               	goto	u3975
  9593  03A4  3001               	movlw	1
  9594  03A5  00FF               	movwf	127
  9595  03A6  087F               	movf	127,w
  9596  03A7  07B5               	addwf	___ftadd@exp1,f
  9597  03A8                     l3803:	
  9598  03A8  0835               	movf	___ftadd@exp1,w
  9599  03A9  0634               	xorwf	___ftadd@exp2,w
  9600  03AA  1903               	btfsc	3,2
  9601  03AB  2BD2               	goto	l775
  9602  03AC  2B9E               	goto	l3799
  9603  03AD                     l3805:	
  9604  03AD  0835               	movf	___ftadd@exp1,w
  9605  03AE  0234               	subwf	___ftadd@exp2,w
  9606  03AF  1803               	skipnc
  9607  03B0  2BD2               	goto	l775
  9608  03B1                     l3807:	
  9609  03B1  3001               	movlw	1
  9610  03B2                     u4005:	
  9611  03B2  35AC               	lslf	___ftadd@f1,f
  9612  03B3  0DAD               	rlf	___ftadd@f1+1,f
  9613  03B4  0DAE               	rlf	___ftadd@f1+2,f
  9614  03B5  0B89               	decfsz	9,f
  9615  03B6  2BB2               	goto	u4005
  9616  03B7  3001               	movlw	1
  9617  03B8  02B5               	subwf	___ftadd@exp1,f
  9618  03B9  0834               	movf	___ftadd@exp2,w
  9619  03BA  0635               	xorwf	___ftadd@exp1,w
  9620  03BB  1903               	skipnz
  9621  03BC  2BCE               	goto	l3817
  9622  03BD  3001               	movlw	1
  9623  03BE  02B3               	subwf	___ftadd@sign,f
  9624  03BF  0833               	movf	___ftadd@sign,w
  9625  03C0  3907               	andlw	7
  9626  03C1  1903               	btfsc	3,2
  9627  03C2  2BCE               	goto	l3817
  9628  03C3  2BB1               	goto	l3807
  9629  03C4                     l3813:	
  9630  03C4  3001               	movlw	1
  9631  03C5                     u4035:	
  9632  03C5  36B1               	lsrf	___ftadd@f2+2,f
  9633  03C6  0CB0               	rrf	___ftadd@f2+1,f
  9634  03C7  0CAF               	rrf	___ftadd@f2,f
  9635  03C8  0B89               	decfsz	9,f
  9636  03C9  2BC5               	goto	u4035
  9637  03CA  3001               	movlw	1
  9638  03CB  00FF               	movwf	127
  9639  03CC  087F               	movf	127,w
  9640  03CD  07B4               	addwf	___ftadd@exp2,f
  9641  03CE                     l3817:	
  9642  03CE  0835               	movf	___ftadd@exp1,w
  9643  03CF  0634               	xorwf	___ftadd@exp2,w
  9644  03D0  1D03               	skipz
  9645  03D1  2BC4               	goto	l3813
  9646  03D2                     l775:	
  9647  03D2  1FB3               	btfss	___ftadd@sign,7
  9648  03D3  2BE4               	goto	l3821
  9649  03D4  30FF               	movlw	255
  9650  03D5  06AC               	xorwf	___ftadd@f1,f
  9651  03D6  30FF               	movlw	255
  9652  03D7  06AD               	xorwf	___ftadd@f1+1,f
  9653  03D8  30FF               	movlw	255
  9654  03D9  06AE               	xorwf	___ftadd@f1+2,f
  9655  03DA  3001               	movlw	1
  9656  03DB  07AC               	addwf	___ftadd@f1,f
  9657  03DC  3000               	movlw	0
  9658  03DD  1803               	skipnc
  9659  03DE  3001               	movlw	1
  9660  03DF  07AD               	addwf	___ftadd@f1+1,f
  9661  03E0  3000               	movlw	0
  9662  03E1  1803               	skipnc
  9663  03E2  3001               	movlw	1
  9664  03E3  07AE               	addwf	___ftadd@f1+2,f
  9665  03E4                     l3821:	
  9666  03E4  1F33               	btfss	___ftadd@sign,6
  9667  03E5  2BF6               	goto	l3825
  9668  03E6  30FF               	movlw	255
  9669  03E7  06AF               	xorwf	___ftadd@f2,f
  9670  03E8  30FF               	movlw	255
  9671  03E9  06B0               	xorwf	___ftadd@f2+1,f
  9672  03EA  30FF               	movlw	255
  9673  03EB  06B1               	xorwf	___ftadd@f2+2,f
  9674  03EC  3001               	movlw	1
  9675  03ED  07AF               	addwf	___ftadd@f2,f
  9676  03EE  3000               	movlw	0
  9677  03EF  1803               	skipnc
  9678  03F0  3001               	movlw	1
  9679  03F1  07B0               	addwf	___ftadd@f2+1,f
  9680  03F2  3000               	movlw	0
  9681  03F3  1803               	skipnc
  9682  03F4  3001               	movlw	1
  9683  03F5  07B1               	addwf	___ftadd@f2+2,f
  9684  03F6                     l3825:	
  9685  03F6  01B3               	clrf	___ftadd@sign
  9686  03F7  082C               	movf	___ftadd@f1,w
  9687  03F8  07AF               	addwf	___ftadd@f2,f
  9688  03F9  082D               	movf	___ftadd@f1+1,w
  9689  03FA  3DB0               	addwfc	___ftadd@f2+1,f
  9690  03FB  082E               	movf	___ftadd@f1+2,w
  9691  03FC  3DB1               	addwfc	___ftadd@f2+2,f
  9692  03FD  1FB1               	btfss	___ftadd@f2+2,7
  9693  03FE  2C11               	goto	l3835
  9694  03FF  30FF               	movlw	255
  9695  0400  06AF               	xorwf	___ftadd@f2,f
  9696  0401  30FF               	movlw	255
  9697  0402  06B0               	xorwf	___ftadd@f2+1,f
  9698  0403  30FF               	movlw	255
  9699  0404  06B1               	xorwf	___ftadd@f2+2,f
  9700  0405  3001               	movlw	1
  9701  0406  07AF               	addwf	___ftadd@f2,f
  9702  0407  3000               	movlw	0
  9703  0408  1803               	skipnc
  9704  0409  3001               	movlw	1
  9705  040A  07B0               	addwf	___ftadd@f2+1,f
  9706  040B  3000               	movlw	0
  9707  040C  1803               	skipnc
  9708  040D  3001               	movlw	1
  9709  040E  07B1               	addwf	___ftadd@f2+2,f
  9710  040F  01B3               	clrf	___ftadd@sign
  9711  0410  0AB3               	incf	___ftadd@sign,f
  9712  0411                     l3835:	
  9713  0411  082F               	movf	___ftadd@f2,w
  9714  0412  00A7               	movwf	___ftpack@arg
  9715  0413  0830               	movf	___ftadd@f2+1,w
  9716  0414  00A8               	movwf	___ftpack@arg+1
  9717  0415  0831               	movf	___ftadd@f2+2,w
  9718  0416  00A9               	movwf	___ftpack@arg+2
  9719  0417  0835               	movf	___ftadd@exp1,w
  9720  0418  00FF               	movwf	127
  9721  0419  087F               	movf	127,w
  9722  041A  00AA               	movwf	___ftpack@exp
  9723  041B  0833               	movf	___ftadd@sign,w
  9724  041C  00FF               	movwf	127
  9725  041D  087F               	movf	127,w
  9726  041E  00AB               	movwf	___ftpack@sign
  9727  041F  318D  2540         	fcall	___ftpack
  9728  0421  0020               	movlb	0	; select bank0
  9729  0422  0827               	movf	?___ftpack,w
  9730  0423  00AC               	movwf	?___ftadd
  9731  0424  0828               	movf	?___ftpack+1,w
  9732  0425  00AD               	movwf	?___ftadd+1
  9733  0426  0829               	movf	?___ftpack+2,w
  9734  0427  00AE               	movwf	?___ftadd+2
  9735  0428  0008               	return
  9736  0429                     __end_of___ftadd:	
  9737                           
  9738                           	psect	text41
  9739  099C                     __ptext41:	
  9740 ;; *************** function ___awtoft *****************
  9741 ;; Defined at:
  9742 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;  c               2    0[COMMON] int 
  9745 ;; Auto vars:     Size  Location     Type
  9746 ;;  sign            1    3[COMMON] unsigned char 
  9747 ;; Return value:  Size  Location     Type
  9748 ;;                  3    0[COMMON] float 
  9749 ;; Registers used:
  9750 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9751 ;; Tracked objects:
  9752 ;;		On entry : 0/0
  9753 ;;		On exit  : 0/0
  9754 ;;		Unchanged: 0/0
  9755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9756 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;Total ram usage:        4 bytes
  9761 ;; Hardware stack levels used:    1
  9762 ;; Hardware stack levels required when called:    8
  9763 ;; This function calls:
  9764 ;;		___ftpack
  9765 ;; This function is called by:
  9766 ;;		_getADCValue
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           
  9771                           ;psect for function ___awtoft
  9772  099C                     ___awtoft:	
  9773                           
  9774                           ;incstack = 0
  9775                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9776  099C  01F3               	clrf	___awtoft@sign
  9777  099D  1FF1               	btfss	___awtoft@c+1,7
  9778  099E  29A6               	goto	l4333
  9779  099F  09F0               	comf	___awtoft@c,f
  9780  09A0  09F1               	comf	___awtoft@c+1,f
  9781  09A1  0AF0               	incf	___awtoft@c,f
  9782  09A2  1903               	skipnz
  9783  09A3  0AF1               	incf	___awtoft@c+1,f
  9784  09A4  01F3               	clrf	___awtoft@sign
  9785  09A5  0AF3               	incf	___awtoft@sign,f
  9786  09A6                     l4333:	
  9787  09A6  0870               	movf	___awtoft@c,w
  9788  09A7  0020               	movlb	0	; select bank0
  9789  09A8  00A7               	movwf	___ftpack@arg
  9790  09A9  0871               	movf	___awtoft@c+1,w
  9791  09AA  00A8               	movwf	___ftpack@arg+1
  9792  09AB  01A9               	clrf	___ftpack@arg+2
  9793  09AC  308E               	movlw	142
  9794  09AD  00FF               	movwf	127
  9795  09AE  087F               	movf	127,w
  9796  09AF  00AA               	movwf	___ftpack@exp
  9797  09B0  0873               	movf	___awtoft@sign,w
  9798  09B1  00FF               	movwf	127
  9799  09B2  087F               	movf	127,w
  9800  09B3  00AB               	movwf	___ftpack@sign
  9801  09B4  318D  2540         	fcall	___ftpack
  9802  09B6  0020               	movlb	0	; select bank0
  9803  09B7  0827               	movf	?___ftpack,w
  9804  09B8  00F0               	movwf	?___awtoft
  9805  09B9  0828               	movf	?___ftpack+1,w
  9806  09BA  00F1               	movwf	?___awtoft+1
  9807  09BB  0829               	movf	?___ftpack+2,w
  9808  09BC  00F2               	movwf	?___awtoft+2
  9809  09BD  0008               	return
  9810  09BE                     __end_of___awtoft:	
  9811                           
  9812                           	psect	text42
  9813  0880                     __ptext42:	
  9814 ;; *************** function ___lwtoft *****************
  9815 ;; Defined at:
  9816 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  9817 ;; Parameters:    Size  Location     Type
  9818 ;;  c               2    0[COMMON] unsigned int 
  9819 ;; Auto vars:     Size  Location     Type
  9820 ;;		None
  9821 ;; Return value:  Size  Location     Type
  9822 ;;                  3    0[COMMON] float 
  9823 ;; Registers used:
  9824 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9825 ;; Tracked objects:
  9826 ;;		On entry : 0/0
  9827 ;;		On exit  : 0/0
  9828 ;;		Unchanged: 0/0
  9829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9830 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;Total ram usage:        3 bytes
  9835 ;; Hardware stack levels used:    1
  9836 ;; Hardware stack levels required when called:    8
  9837 ;; This function calls:
  9838 ;;		___ftpack
  9839 ;; This function is called by:
  9840 ;;		_loop
  9841 ;;		_hcsr04GetAerage
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           
  9846                           ;psect for function ___lwtoft
  9847  0880                     ___lwtoft:	
  9848                           
  9849                           ;incstack = 0
  9850                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9851  0880  0870               	movf	___lwtoft@c,w
  9852  0881  0020               	movlb	0	; select bank0
  9853  0882  00A7               	movwf	___ftpack@arg
  9854  0883  0871               	movf	___lwtoft@c+1,w
  9855  0884  00A8               	movwf	___ftpack@arg+1
  9856  0885  01A9               	clrf	___ftpack@arg+2
  9857  0886  308E               	movlw	142
  9858  0887  00FF               	movwf	127
  9859  0888  087F               	movf	127,w
  9860  0889  00AA               	movwf	___ftpack@exp
  9861  088A  01AB               	clrf	___ftpack@sign
  9862  088B  318D  2540         	fcall	___ftpack
  9863  088D  0020               	movlb	0	; select bank0
  9864  088E  0827               	movf	?___ftpack,w
  9865  088F  00F0               	movwf	?___lwtoft
  9866  0890  0828               	movf	?___ftpack+1,w
  9867  0891  00F1               	movwf	?___lwtoft+1
  9868  0892  0829               	movf	?___ftpack+2,w
  9869  0893  00F2               	movwf	?___lwtoft+2
  9870  0894  0008               	return
  9871  0895                     __end_of___lwtoft:	
  9872                           
  9873                           	psect	text43
  9874  08AD                     __ptext43:	
  9875 ;; *************** function ___lbtoft *****************
  9876 ;; Defined at:
  9877 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  9878 ;; Parameters:    Size  Location     Type
  9879 ;;  c               1    wreg     unsigned char 
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;  c               1   12[BANK0 ] unsigned char 
  9882 ;; Return value:  Size  Location     Type
  9883 ;;                  3    0[COMMON] float 
  9884 ;; Registers used:
  9885 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9891 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;Total ram usage:        5 bytes
  9896 ;; Hardware stack levels used:    1
  9897 ;; Hardware stack levels required when called:    8
  9898 ;; This function calls:
  9899 ;;		___ftpack
  9900 ;; This function is called by:
  9901 ;;		_main
  9902 ;; This function uses a non-reentrant model
  9903 ;;
  9904                           
  9905                           
  9906                           ;psect for function ___lbtoft
  9907  08AD                     ___lbtoft:	
  9908                           
  9909                           ;incstack = 0
  9910                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9911                           ;___lbtoft@c stored from wreg
  9912  08AD  0020               	movlb	0	; select bank0
  9913  08AE  00AC               	movwf	___lbtoft@c
  9914  08AF  082C               	movf	___lbtoft@c,w
  9915  08B0  00FD               	movwf	125
  9916  08B1  01FE               	clrf	126
  9917  08B2  01FF               	clrf	127
  9918  08B3  087D               	movf	125,w
  9919  08B4  00A7               	movwf	___ftpack@arg
  9920  08B5  087E               	movf	126,w
  9921  08B6  00A8               	movwf	___ftpack@arg+1
  9922  08B7  087F               	movf	127,w
  9923  08B8  00A9               	movwf	___ftpack@arg+2
  9924  08B9  308E               	movlw	142
  9925  08BA  00FF               	movwf	127
  9926  08BB  087F               	movf	127,w
  9927  08BC  00AA               	movwf	___ftpack@exp
  9928  08BD  01AB               	clrf	___ftpack@sign
  9929  08BE  318D  2540         	fcall	___ftpack
  9930  08C0  0020               	movlb	0	; select bank0
  9931  08C1  0827               	movf	?___ftpack,w
  9932  08C2  00F0               	movwf	?___lbtoft
  9933  08C3  0828               	movf	?___ftpack+1,w
  9934  08C4  00F1               	movwf	?___lbtoft+1
  9935  08C5  0829               	movf	?___ftpack+2,w
  9936  08C6  00F2               	movwf	?___lbtoft+2
  9937  08C7  0008               	return
  9938  08C8                     __end_of___lbtoft:	
  9939                           
  9940                           	psect	text44
  9941  0D40                     __ptext44:	
  9942 ;; *************** function ___ftpack *****************
  9943 ;; Defined at:
  9944 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  9945 ;; Parameters:    Size  Location     Type
  9946 ;;  arg             3    7[BANK0 ] unsigned um
  9947 ;;  exp             1   10[BANK0 ] unsigned char 
  9948 ;;  sign            1   11[BANK0 ] unsigned char 
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;		None
  9951 ;; Return value:  Size  Location     Type
  9952 ;;                  3    7[BANK0 ] float 
  9953 ;; Registers used:
  9954 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  9955 ;; Tracked objects:
  9956 ;;		On entry : 0/0
  9957 ;;		On exit  : 0/0
  9958 ;;		Unchanged: 0/0
  9959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9960 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;Total ram usage:        5 bytes
  9965 ;; Hardware stack levels used:    1
  9966 ;; Hardware stack levels required when called:    7
  9967 ;; This function calls:
  9968 ;;		Nothing
  9969 ;; This function is called by:
  9970 ;;		___awtoft
  9971 ;;		___ftadd
  9972 ;;		___ftdiv
  9973 ;;		___ftmul
  9974 ;;		___lbtoft
  9975 ;;		___lltoft
  9976 ;;		___lwtoft
  9977 ;; This function uses a non-reentrant model
  9978 ;;
  9979                           
  9980                           
  9981                           ;psect for function ___ftpack
  9982  0D40                     ___ftpack:	
  9983                           
  9984                           ;incstack = 0
  9985                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+9-btemp+11]
  9986  0D40  0020               	movlb	0	; select bank0
  9987  0D41  082A               	movf	___ftpack@exp,w
  9988  0D42  1903               	btfsc	3,2
  9989  0D43  2D49               	goto	l3669
  9990  0D44  0829               	movf	___ftpack@arg+2,w
  9991  0D45  0428               	iorwf	___ftpack@arg+1,w
  9992  0D46  0427               	iorwf	___ftpack@arg,w
  9993  0D47  1D03               	skipz
  9994  0D48  2D5A               	goto	l3677
  9995  0D49                     l3669:	
  9996  0D49  3000               	movlw	0
  9997  0D4A  00A7               	movwf	?___ftpack
  9998  0D4B  3000               	movlw	0
  9999  0D4C  00A8               	movwf	?___ftpack+1
 10000  0D4D  3000               	movlw	0
 10001  0D4E  00A9               	movwf	?___ftpack+2
 10002  0D4F  0008               	return
 10003  0D50                     l3673:	
 10004  0D50  3001               	movlw	1
 10005  0D51  00FF               	movwf	127
 10006  0D52  087F               	movf	127,w
 10007  0D53  07AA               	addwf	___ftpack@exp,f
 10008  0D54  3001               	movlw	1
 10009  0D55                     u3625:	
 10010  0D55  36A9               	lsrf	___ftpack@arg+2,f
 10011  0D56  0CA8               	rrf	___ftpack@arg+1,f
 10012  0D57  0CA7               	rrf	___ftpack@arg,f
 10013  0D58  0B89               	decfsz	9,f
 10014  0D59  2D55               	goto	u3625
 10015  0D5A                     l3677:	
 10016  0D5A  30FE               	movlw	254
 10017  0D5B  0529               	andwf	___ftpack@arg+2,w
 10018  0D5C  1903               	btfsc	3,2
 10019  0D5D  2D73               	goto	l3685
 10020  0D5E  2D50               	goto	l3673
 10021  0D5F                     l3679:	
 10022  0D5F  3001               	movlw	1
 10023  0D60  00FF               	movwf	127
 10024  0D61  087F               	movf	127,w
 10025  0D62  07AA               	addwf	___ftpack@exp,f
 10026  0D63  3001               	movlw	1
 10027  0D64  07A7               	addwf	___ftpack@arg,f
 10028  0D65  3000               	movlw	0
 10029  0D66  1803               	skipnc
 10030  0D67  3001               	movlw	1
 10031  0D68  07A8               	addwf	___ftpack@arg+1,f
 10032  0D69  3000               	movlw	0
 10033  0D6A  1803               	skipnc
 10034  0D6B  3001               	movlw	1
 10035  0D6C  07A9               	addwf	___ftpack@arg+2,f
 10036  0D6D  3001               	movlw	1
 10037  0D6E                     u3645:	
 10038  0D6E  36A9               	lsrf	___ftpack@arg+2,f
 10039  0D6F  0CA8               	rrf	___ftpack@arg+1,f
 10040  0D70  0CA7               	rrf	___ftpack@arg,f
 10041  0D71  0B89               	decfsz	9,f
 10042  0D72  2D6E               	goto	u3645
 10043  0D73                     l3685:	
 10044  0D73  30FF               	movlw	255
 10045  0D74  0529               	andwf	___ftpack@arg+2,w
 10046  0D75  1903               	btfsc	3,2
 10047  0D76  2D80               	goto	l3689
 10048  0D77  2D5F               	goto	l3679
 10049  0D78                     l3687:	
 10050  0D78  3001               	movlw	1
 10051  0D79  02AA               	subwf	___ftpack@exp,f
 10052  0D7A  3001               	movlw	1
 10053  0D7B                     u3665:	
 10054  0D7B  35A7               	lslf	___ftpack@arg,f
 10055  0D7C  0DA8               	rlf	___ftpack@arg+1,f
 10056  0D7D  0DA9               	rlf	___ftpack@arg+2,f
 10057  0D7E  0B89               	decfsz	9,f
 10058  0D7F  2D7B               	goto	u3665
 10059  0D80                     l3689:	
 10060  0D80  1BA8               	btfsc	___ftpack@arg+1,7
 10061  0D81  2D86               	goto	l751
 10062  0D82  3002               	movlw	2
 10063  0D83  022A               	subwf	___ftpack@exp,w
 10064  0D84  1803               	skipnc
 10065  0D85  2D78               	goto	l3687
 10066  0D86                     l751:	
 10067  0D86  182A               	btfsc	___ftpack@exp,0
 10068  0D87  2D8E               	goto	l752
 10069  0D88  30FF               	movlw	255
 10070  0D89  05A7               	andwf	___ftpack@arg,f
 10071  0D8A  307F               	movlw	127
 10072  0D8B  05A8               	andwf	___ftpack@arg+1,f
 10073  0D8C  30FF               	movlw	255
 10074  0D8D  05A9               	andwf	___ftpack@arg+2,f
 10075  0D8E                     l752:	
 10076  0D8E  1003               	clrc
 10077  0D8F  0CAA               	rrf	___ftpack@exp,f
 10078  0D90  082A               	movf	___ftpack@exp,w
 10079  0D91  00FD               	movwf	125
 10080  0D92  01FE               	clrf	126
 10081  0D93  01FF               	clrf	127
 10082  0D94  3010               	movlw	16
 10083  0D95                     u3705:	
 10084  0D95  35FD               	lslf	125,f
 10085  0D96  0DFE               	rlf	126,f
 10086  0D97  0DFF               	rlf	127,f
 10087  0D98  0B89               	decfsz	9,f
 10088  0D99  2D95               	goto	u3705
 10089  0D9A  087D               	movf	125,w
 10090  0D9B  04A7               	iorwf	___ftpack@arg,f
 10091  0D9C  087E               	movf	126,w
 10092  0D9D  04A8               	iorwf	___ftpack@arg+1,f
 10093  0D9E  087F               	movf	127,w
 10094  0D9F  04A9               	iorwf	___ftpack@arg+2,f
 10095  0DA0  082B               	movf	___ftpack@sign,w
 10096  0DA1  1903               	btfsc	3,2
 10097  0DA2  0008               	return
 10098  0DA3  17A9               	bsf	___ftpack@arg+2,7
 10099  0DA4  0008               	return
 10100  0DA5                     __end_of___ftpack:	
 10101                           
 10102                           	psect	text45
 10103  095E                     __ptext45:	
 10104 ;; *************** function _EEPROMWrite *****************
 10105 ;; Defined at:
 10106 ;;		line 7 in file "eeprom.c"
 10107 ;; Parameters:    Size  Location     Type
 10108 ;;  address         2    0[COMMON] unsigned int 
 10109 ;;  data            1    2[COMMON] unsigned char 
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;  GIEBitValue     1    3[COMMON] unsigned char 
 10112 ;; Return value:  Size  Location     Type
 10113 ;;                  1    wreg      void 
 10114 ;; Registers used:
 10115 ;;		wreg, status,2, status,0
 10116 ;; Tracked objects:
 10117 ;;		On entry : 0/0
 10118 ;;		On exit  : 0/0
 10119 ;;		Unchanged: 0/0
 10120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10121 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10124 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10125 ;;Total ram usage:        4 bytes
 10126 ;; Hardware stack levels used:    1
 10127 ;; Hardware stack levels required when called:    7
 10128 ;; This function calls:
 10129 ;;		Nothing
 10130 ;; This function is called by:
 10131 ;;		_main
 10132 ;;		_exception
 10133 ;; This function uses a non-reentrant model
 10134 ;;
 10135                           
 10136                           
 10137                           ;psect for function _EEPROMWrite
 10138  095E                     _EEPROMWrite:	
 10139                           
 10140                           ;eeprom.c: 9: unsigned char GIEBitValue = INTCONbits.GIE;
 10141                           
 10142                           ;incstack = 0
 10143                           ; Regs used in _EEPROMWrite: [wreg+status,2+status,0]
 10144  095E  3000               	movlw	0
 10145  095F  1B8B               	btfsc	11,7	;volatile
 10146  0960  3001               	movlw	1
 10147  0961  00F3               	movwf	EEPROMWrite@GIEBitValue
 10148                           
 10149                           ;eeprom.c: 11: NVMADRH = ((address >> 8) & 0xFF);
 10150  0962  0871               	movf	EEPROMWrite@address+1,w
 10151  0963  0031               	movlb	17	; select bank17
 10152  0964  0092               	movwf	18	;volatile
 10153                           
 10154                           ;eeprom.c: 12: NVMADRL = (address & 0xFF);
 10155  0965  0870               	movf	EEPROMWrite@address,w
 10156  0966  0091               	movwf	17	;volatile
 10157                           
 10158                           ;eeprom.c: 13: NVMDATL = data;
 10159  0967  0872               	movf	EEPROMWrite@data,w
 10160  0968  0093               	movwf	19	;volatile
 10161                           
 10162                           ;eeprom.c: 14: NVMCON1bits.NVMREGS = 1;
 10163  0969  1715               	bsf	21,6	;volsfr
 10164                           
 10165                           ;eeprom.c: 15: NVMCON1bits.WREN = 1;
 10166  096A  1515               	bsf	21,2	;volsfr
 10167                           
 10168                           ;eeprom.c: 16: INTCONbits.GIE = 0;
 10169  096B  138B               	bcf	11,7	;volatile
 10170                           
 10171                           ;eeprom.c: 17: NVMCON2 = 0x55;
 10172  096C  3055               	movlw	85
 10173  096D  0096               	movwf	22	;volsfr
 10174                           
 10175                           ;eeprom.c: 18: NVMCON2 = 0xAA;
 10176  096E  30AA               	movlw	170
 10177  096F  0096               	movwf	22	;volsfr
 10178                           
 10179                           ;eeprom.c: 19: NVMCON1bits.WR = 1;
 10180  0970  1495               	bsf	21,1	;volsfr
 10181                           
 10182                           ;eeprom.c: 21: while (NVMCON1bits.WR){
 10183  0971  2973               	goto	l347
 10184  0972                     l348:	
 10185                           
 10186                           ;eeprom.c: 22: __nop();
 10187  0972  0000               	nop
 10188  0973                     l347:	
 10189  0973  0031               	movlb	17	; select bank17
 10190  0974  1895               	btfsc	21,1	;volsfr
 10191  0975  2972               	goto	l348
 10192                           
 10193                           ;eeprom.c: 23: };eeprom.c: 25: NVMCON1bits.WREN = 0;
 10194  0976  1115               	bcf	21,2	;volsfr
 10195                           
 10196                           ;eeprom.c: 26: INTCONbits.GIE = GIEBitValue;
 10197  0977  0C73               	rrf	EEPROMWrite@GIEBitValue,w
 10198  0978  1C03               	skipc
 10199  0979  138B               	bcf	11,7	;volatile
 10200  097A  1803               	skipnc
 10201  097B  178B               	bsf	11,7	;volatile
 10202  097C  0008               	return
 10203  097D                     __end_of_EEPROMWrite:	
 10204                           
 10205                           	psect	text46
 10206  0844                     __ptext46:	
 10207 ;; *************** function _EEPROMRead *****************
 10208 ;; Defined at:
 10209 ;;		line 29 in file "eeprom.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;  address         2    0[COMMON] unsigned int 
 10212 ;; Auto vars:     Size  Location     Type
 10213 ;;		None
 10214 ;; Return value:  Size  Location     Type
 10215 ;;                  1    wreg      unsigned char 
 10216 ;; Registers used:
 10217 ;;		wreg, status,2
 10218 ;; Tracked objects:
 10219 ;;		On entry : 0/0
 10220 ;;		On exit  : 0/0
 10221 ;;		Unchanged: 0/0
 10222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10223 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;Total ram usage:        2 bytes
 10228 ;; Hardware stack levels used:    1
 10229 ;; Hardware stack levels required when called:    7
 10230 ;; This function calls:
 10231 ;;		Nothing
 10232 ;; This function is called by:
 10233 ;;		_main
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           
 10238                           ;psect for function _EEPROMRead
 10239  0844                     _EEPROMRead:	
 10240                           
 10241                           ;eeprom.c: 30: NVMADRH = ((address >> 8) & 0xFF);
 10242                           
 10243                           ;incstack = 0
 10244                           ; Regs used in _EEPROMRead: [wreg+status,2]
 10245  0844  0871               	movf	EEPROMRead@address+1,w
 10246  0845  0031               	movlb	17	; select bank17
 10247  0846  0092               	movwf	18	;volatile
 10248                           
 10249                           ;eeprom.c: 31: NVMADRL = (address & 0xFF);
 10250  0847  0870               	movf	EEPROMRead@address,w
 10251  0848  0091               	movwf	17	;volatile
 10252                           
 10253                           ;eeprom.c: 32: NVMCON1bits.NVMREGS = 1;
 10254  0849  1715               	bsf	21,6	;volsfr
 10255                           
 10256                           ;eeprom.c: 33: NVMCON1bits.RD = 1;
 10257  084A  1415               	bsf	21,0	;volsfr
 10258                           
 10259                           ;eeprom.c: 34: __nop();
 10260  084B  0000               	nop
 10261                           
 10262                           ;eeprom.c: 35: __nop();
 10263  084C  0000               	nop
 10264                           
 10265                           ;eeprom.c: 37: return (NVMDATL);
 10266  084D  0031               	movlb	17	; select bank17
 10267  084E  0813               	movf	19,w	;volatile
 10268  084F  0008               	return
 10269  0850                     __end_of_EEPROMRead:	
 10270                           
 10271                           	psect	intentry
 10272  0004                     __pintentry:	
 10273 ;; *************** function _ISR *****************
 10274 ;; Defined at:
 10275 ;;		line 13 in file "main.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;		None
 10278 ;; Auto vars:     Size  Location     Type
 10279 ;;		None
 10280 ;; Return value:  Size  Location     Type
 10281 ;;                  1    wreg      void 
 10282 ;; Registers used:
 10283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
 10284 ;; Tracked objects:
 10285 ;;		On entry : 0/0
 10286 ;;		On exit  : 0/0
 10287 ;;		Unchanged: 0/0
 10288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10291 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10292 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;Total ram usage:        7 bytes
 10294 ;; Hardware stack levels used:    1
 10295 ;; Hardware stack levels required when called:    6
 10296 ;; This function calls:
 10297 ;;		_nrf24l01ISR
 10298 ;; This function is called by:
 10299 ;;		Interrupt level 1
 10300 ;; This function uses a non-reentrant model
 10301 ;;
 10302                           
 10303  0004                     _ISR:	
 10304                           
 10305                           ;incstack = 0
 10306                           ; Regs used in _ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+cs
      +                          tack]
 10307  0004  3180               	pagesel	$
 10308  0005  0874               	movf	116,w
 10309  0006  0020               	movlb	0	; select bank0
 10310  0007  00A0               	movwf	??_ISR
 10311  0008  0875               	movf	117,w
 10312  0009  00A1               	movwf	??_ISR+1
 10313  000A  087C               	movf	124,w
 10314  000B  00A2               	movwf	??_ISR+2
 10315  000C  087D               	movf	125,w
 10316  000D  00A3               	movwf	??_ISR+3
 10317  000E  087E               	movf	126,w
 10318  000F  00A4               	movwf	??_ISR+4
 10319  0010  087F               	movf	127,w
 10320  0011  00A5               	movwf	??_ISR+5
 10321  0012  30A9               	movlw	low ___int_sp
 10322  0013  0086               	movwf	6
 10323  0014  3022               	movlw	high ___int_sp
 10324  0015  0087               	movwf	7
 10325  0016  0875               	movf	117,w
 10326  0017  00A6               	movwf	??_ISR+6
 10327                           
 10328                           ;main.c: 20: if (PIR0bits.INTF){
 10329  0018  1C10               	btfss	16,0	;volatile
 10330  0019  281E               	goto	i1l4789
 10331                           
 10332                           ;main.c: 21: nrf24l01ISR();
 10333  001A  318C  24A1         	fcall	_nrf24l01ISR
 10334                           
 10335                           ;main.c: 22: PIR0bits.INTF = 0;
 10336  001C  0020               	movlb	0	; select bank0
 10337  001D  1010               	bcf	16,0	;volatile
 10338  001E                     i1l4789:	
 10339                           
 10340                           ;main.c: 23: };main.c: 25: if (PIR1bits.ADIF){
 10341  001E  1B11               	btfsc	17,6	;volatile
 10342                           
 10343                           ;main.c: 26: PIR1bits.ADIF = 0;
 10344  001F  1311               	bcf	17,6	;volatile
 10345  0020  0826               	movf	??_ISR+6,w
 10346  0021  00FF               	movwf	127
 10347  0022  0825               	movf	??_ISR+5,w
 10348  0023  00FE               	movwf	126
 10349  0024  0824               	movf	??_ISR+4,w
 10350  0025  00FD               	movwf	125
 10351  0026  0823               	movf	??_ISR+3,w
 10352  0027  00FC               	movwf	124
 10353  0028  0822               	movf	??_ISR+2,w
 10354  0029  00F5               	movwf	117
 10355  002A  0821               	movf	??_ISR+1,w
 10356  002B  00F4               	movwf	116
 10357  002C  0009               	retfie
 10358  002D                     __end_of_ISR:	
 10359                           
 10360                           	psect	text48
 10361  0CA1                     __ptext48:	
 10362 ;; *************** function _nrf24l01ISR *****************
 10363 ;; Defined at:
 10364 ;;		line 157 in file "nrf24l01.c"
 10365 ;; Parameters:    Size  Location     Type
 10366 ;;		None
 10367 ;; Auto vars:     Size  Location     Type
 10368 ;;		None
 10369 ;; Return value:  Size  Location     Type
 10370 ;;                  1    wreg      void 
 10371 ;; Registers used:
 10372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
 10373 ;; Tracked objects:
 10374 ;;		On entry : 0/0
 10375 ;;		On exit  : 0/0
 10376 ;;		Unchanged: 0/0
 10377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;Total ram usage:        0 bytes
 10383 ;; Hardware stack levels used:    1
 10384 ;; Hardware stack levels required when called:    5
 10385 ;; This function calls:
 10386 ;;		_nrf24l01Send
 10387 ;;		_nrf24l01Service
 10388 ;;		_nrf24l01SetRXMode
 10389 ;; This function is called by:
 10390 ;;		_ISR
 10391 ;; This function uses a non-reentrant model
 10392 ;;
 10393                           
 10394                           
 10395                           ;psect for function _nrf24l01ISR
 10396  0CA1                     _nrf24l01ISR:	
 10397                           
 10398                           ;nrf24l01.c: 160: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
 10399                           
 10400                           ;incstack = 0
 10401                           ; Regs used in _nrf24l01ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath]
 10402  0CA1  3000               	movlw	0
 10403  0CA2  001E               	movwi fsr1++
 10404  0CA3  3007               	movlw	7
 10405  0CA4  3188  206D  318C   	fcall	_nrf24l01Send
 10406  0CA7  00FF               	movwf	127
 10407  0CA8  087F               	movf	127,w
 10408  0CA9  0020               	movlb	0	; select bank0
 10409  0CAA  00E4               	movwf	_status+2	;volatile
 10410                           
 10411                           ;nrf24l01.c: 162: counter++;
 10412  0CAB  3001               	movlw	1
 10413  0CAC  0021               	movlb	1	; select bank1
 10414  0CAD  07E7               	addwf	_counter^(0+128),f
 10415  0CAE  3000               	movlw	0
 10416  0CAF  3DE8               	addwfc	(_counter+1)^(0+128),f
 10417                           
 10418                           ;nrf24l01.c: 165: if (status.statusRegister.RX_DR){
 10419  0CB0  0020               	movlb	0	; select bank0
 10420  0CB1  1F64               	btfss	_status+2,6	;volatile
 10421  0CB2  2CBF               	goto	i1l4699
 10422                           
 10423                           ;nrf24l01.c: 168: if (status.RX == 0){
 10424  0CB3  0863               	movf	_status+1,w	;volatile
 10425  0CB4  1D03               	btfss	3,2
 10426  0CB5  2CBB               	goto	i1l292
 10427                           
 10428                           ;nrf24l01.c: 169: status.RX = 1;
 10429  0CB6  3001               	movlw	1
 10430  0CB7  00FF               	movwf	127
 10431  0CB8  087F               	movf	127,w
 10432  0CB9  00E3               	movwf	_status+1	;volatile
 10433                           
 10434                           ;nrf24l01.c: 170: }
 10435  0CBA  2CBC               	goto	i1l4697
 10436  0CBB                     i1l292:	
 10437                           
 10438                           ;nrf24l01.c: 173: else{;nrf24l01.c: 174: status.statusRegister.RX_DR = 0;
 10439  0CBB  1364               	bcf	_status+2,6	;volatile
 10440  0CBC                     i1l4697:	
 10441                           
 10442                           ;nrf24l01.c: 175: };nrf24l01.c: 178: nrf24l01Service();
 10443  0CBC  3185  25FC  318C   	fcall	_nrf24l01Service
 10444  0CBF                     i1l4699:	
 10445                           
 10446                           ;nrf24l01.c: 179: };nrf24l01.c: 183: if (status.statusRegister.TX_DS){
 10447  0CBF  0020               	movlb	0	; select bank0
 10448  0CC0  1EE4               	btfss	_status+2,5	;volatile
 10449  0CC1  2CE6               	goto	i1l4715
 10450                           
 10451                           ;nrf24l01.c: 187: if (lastTXPacket->packetData.ACKRequest){
 10452  0CC2  0868               	movf	_lastTXPacket,w
 10453  0CC3  0084               	movwf	4
 10454  0CC4  3001               	movlw	1	; select bank2/3
 10455  0CC5  0085               	movwf	5
 10456  0CC6  1D00               	btfss	0,2
 10457  0CC7  2CD5               	goto	i1l4707
 10458                           
 10459                           ;nrf24l01.c: 188: status.TX = 3;
 10460  0CC8  3003               	movlw	3
 10461  0CC9  00FF               	movwf	127
 10462  0CCA  087F               	movf	127,w
 10463  0CCB  00E2               	movwf	_status	;volatile
 10464                           
 10465                           ;nrf24l01.c: 189: status.retryCount = 0xFF;
 10466  0CCC  30FF               	movlw	255
 10467  0CCD  00FF               	movwf	127
 10468  0CCE  087F               	movf	127,w
 10469  0CCF  00E6               	movwf	_status+4	;volatile
 10470                           
 10471                           ;nrf24l01.c: 190: nrf24l01SetRXMode(1);
 10472  0CD0  3001               	movlw	1
 10473  0CD1  318B  2323  318C   	fcall	_nrf24l01SetRXMode
 10474                           
 10475                           ;nrf24l01.c: 191: }
 10476  0CD4  2CE3               	goto	i1l4713
 10477  0CD5                     i1l4707:	
 10478                           
 10479                           ;nrf24l01.c: 195: else if(lastTXPacket->packetData.IsACK){
 10480  0CD5  0020               	movlb	0	; select bank0
 10481  0CD6  0868               	movf	_lastTXPacket,w
 10482  0CD7  0084               	movwf	4
 10483  0CD8  3001               	movlw	1	; select bank2/3
 10484  0CD9  0085               	movwf	5
 10485  0CDA  1D80               	btfss	0,3
 10486  0CDB  2CE1               	goto	i1l4711
 10487                           
 10488                           ;nrf24l01.c: 196: nrf24l01SetRXMode(1);
 10489  0CDC  3001               	movlw	1
 10490  0CDD  318B  2323  318C   	fcall	_nrf24l01SetRXMode
 10491                           
 10492                           ;nrf24l01.c: 197: }
 10493  0CE0  2CE3               	goto	i1l4713
 10494  0CE1                     i1l4711:	
 10495                           
 10496                           ;nrf24l01.c: 200: else{;nrf24l01.c: 201: status.TX = 0;
 10497  0CE1  0020               	movlb	0	; select bank0
 10498  0CE2  01E2               	clrf	_status	;volatile
 10499  0CE3                     i1l4713:	
 10500                           
 10501                           ;nrf24l01.c: 202: };nrf24l01.c: 204: nrf24l01Service();
 10502  0CE3  3185  25FC  318C   	fcall	_nrf24l01Service
 10503  0CE6                     i1l4715:	
 10504                           
 10505                           ;nrf24l01.c: 205: };nrf24l01.c: 210: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          7, status.statusRegister.byte);
 10506  0CE6  0020               	movlb	0	; select bank0
 10507  0CE7  0864               	movf	_status+2,w	;volatile
 10508  0CE8  001E               	movwi fsr1++
 10509  0CE9  3027               	movlw	39
 10510  0CEA  3188  206D         	fcall	_nrf24l01Send
 10511  0CEC  0008               	return
 10512  0CED                     __end_of_nrf24l01ISR:	
 10513  0074                     btemp	set	116	;btemp
 10514  0074                     wtemp0	set	116
 10515  0076                     wtemp1	set	118
 10516  0078                     wtemp2	set	120
 10517  007A                     wtemp3	set	122
 10518  007C                     wtemp4	set	124
 10519  007E                     wtemp5	set	126
 10520  0074                     ttemp0	set	116
 10521  0077                     ttemp1	set	119
 10522  007A                     ttemp2	set	122
 10523  007D                     ttemp3	set	125
 10524  0074                     ltemp0	set	116
 10525  0078                     ltemp1	set	120
 10526  007C                     ltemp2	set	124
 10527  0076                     ltemp3	set	118


Data Sizes:
    Strings     38
    Constant    46
    Data        1
    BSS         161
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            4      4       4
    BANK0            80     66      73
    BANK1            80     63      74
    BANK2            80     45      78
    BANK3            80      0      78
    BANK4            80      0      33
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@ftoaStatus(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), TXPacket.Message(BANK3[32]), 
		 -> TXPacket(BANK3[33]), romDataMap(BANK3[28]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), TXPacket.Message(BANK3[32]), 
		 -> TXPacket(BANK3[33]), romDataMap(BANK3[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK3[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), RXPacket.Message(BANK2[32]), 
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), STR_6(CODE[4]), loop@packet(BANK2[33]), 
		 -> romDataMap(BANK3[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), userRXPacket(BANK4[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 
		 -> romDataMap(BANK3[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), userRXPacket(BANK4[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 
		 -> romDataMap(BANK3[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK3[17]), STR_7(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[6]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendTXBuffer@packet	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), TXPacket(BANK3[33]), 

    lastTXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket(BANK2[33]), TXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> userRXPacket(BANK4[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_7(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[6]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), userRXPacket(BANK4[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 
		 -> romDataMap(BANK3[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 


Critical Paths under _main in COMMON

    _main->_EEPROMWrite
    _main->___lbtoft
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01GetPipe->___lwmod
    _sendMessage->___lbtoft
    _sendMessage->_sleepMs
    _ftoa->___lltoft
    _sprintf->___wmul
    ___ftsub->___lltoft
    _getADCValue->___awtoft
    _getADCValue->_sleepMs
    ___ftadd->___awtoft

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01GetPipe->___lwmod
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sendMessage
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   95083
                                             28 BANK1     35    35      0
                         _EEPROMRead
                        _EEPROMWrite
                           ___lbtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1914
                                             15 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    1914
                                              3 COMMON     1     1      0
                                              7 BANK0      8     8      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    3     3      0     611
                                              0 COMMON     3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      4     4      0     807
                                              8 BANK0      4     4      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     440
                                              0 COMMON     4     0      4
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _loop                                                45    45      0   61050
                                              0 BANK2     45    45      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft
                        _getADCValue
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                          9     2      7   25847
                                             19 BANK1      9     2      7
                         _EEPROMRead (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                 _nrf24l01SendPacket
                            _sleepMs
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     751
                                             13 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   5     3      2    3379
                                              0 COMMON     3     1      2
                                              7 BANK0      2     2      0
                    _nrf24l01Service
                             _strcpy
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    3014
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                  _nrf24l01SetTXPipe
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (12) _strcpy                                              6     2      4     221
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SetTXPipe                                   1     1      0     226
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) ___bmul                                              3     2      1     164
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                13     9      4   19094
                                              0 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    24     10    3016
                                             28 BANK0     26    16     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     552
                                              0 COMMON     4     0      4
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     440
                                              0 COMMON     1     1      0
                                             20 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     449
                                              7 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    3741
                                              0 COMMON     4     0      4
                                             12 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             10     6      4     579
                                             56 BANK0     10     6      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6104
                                             22 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                             44 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             12     6      6    4439
                                             44 BANK0     12     6      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     406
                                              7 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                          9     6      3   15553
                                             35 BANK0      9     6      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _sleepMs                                              4     2      2     785
                                              0 COMMON     4     2      2
                           _resetWDT
 ---------------------------------------------------------------------------------
 (3) _resetWDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             13     7      6    4995
                                             22 BANK0     13     7      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             10     4      6    5800
                                             12 BANK0     10     4      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3772
                                              0 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3878
                                              0 COMMON     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lbtoft                                             5     1      4    3566
                                              0 COMMON     4     0      4
                                             12 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             5     0      5    3535
                                              7 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (1) _EEPROMWrite                                          4     1      3     543
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _EEPROMRead                                           2     0      2     166
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  7     7      0    4095
                                              0 BANK0      7     7      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         0     0      0    4095
                       _nrf24l01Send
                    _nrf24l01Service
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    3014
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                  _nrf24l01SetTXPipe
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (12) _strcpy                                              6     2      4     221
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SetTXPipe                                   1     1      0     226
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) ___bmul                                              3     2      1     164
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMRead
   _EEPROMWrite
   ___lbtoft
     ___ftpack
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___lwtoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _sendMessage
       _EEPROMRead (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _nrf24l01Service
           _memset
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _nrf24l01SendTXBuffer
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
             _nrf24l01SetRXMode
               _nrf24l01Send
                 _nrf24l01SPIEnd
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
             _strlen
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _nrf24l01SetTXPipe
             ___bmul
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _strcmp
           _strcpy
         _strcpy
       _sleepMs (ARG)
         _resetWDT
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _sleepMs
                   _resetWDT
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
   _sendMessage
     _EEPROMRead (ARG)
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _nrf24l01Service
         _memset
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _nrf24l01SendTXBuffer
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strlen
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _nrf24l01SetTXPipe
           ___bmul
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _strcmp
         _strcpy
       _strcpy
     _sleepMs (ARG)
       _resetWDT
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01Service
       _memset
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SendTXBuffer
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strlen
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _strcmp
       _strcpy
     _nrf24l01SetRXMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            4      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               4      4       4       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0      10       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     42      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3F      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     2D      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      21      13       41.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     154      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     164      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Wed Sep 05 13:09:47 2018

                   __CFG_CP$OFF 0000                              l55 0865                sendMessage@value 00B7  
              sendMessage@topic 00B5             ___wmul@multiplicand 0072                    ___ftadd@exp1 0035  
                  ___ftadd@exp2 0034               sendMessage@packet 00B3                     __CFG_LVP$ON 0000  
                  ___ftadd@sign 0033                             l321 06B3                             l178 0F0E  
                           l266 0B5C                             l347 0973                             l515 010B  
                           l348 0972                             l541 08F0                             l518 012A  
                           l279 092E                             l564 0899                             l751 0D86  
                           l752 0D8E                             l835 0E98                             l775 03D2  
                           l966 0AED                             l989 0A62                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             wreg 0009                    _userRXPacket 0220  
                          ?_ISR 0070                    ___ftdiv@cntr 003D                    ___ftdiv@sign 0042  
                ??_nrf24l01Init 002F                            l4001 021E                            l4003 0068  
                          l4005 0229                            l4013 08A1                            l4031 0B8B  
                          l4027 0B75                            l4211 09EC                            l4109 08D0  
                          l4141 0E82                            l4301 0C7E                            l4205 0A44  
                          l4213 09F8                            l4071 071D                            l4055 06E2  
                          l4119 0E44                            l4303 0C95                            l4215 0A00  
                          l4049 06CC                            l4153 0EA9                            l4137 0E74  
                          l4321 09E0                            l4411 0ED5                            l4083 0739  
                          l4075 0725                            l4147 0E8F                            l4163 0A15  
                          l4227 0557                            l4251 0BF5                            l4333 09A6  
                          l4149 0E9B                            l4165 0A25                            l4317 09CE  
                          l4501 0684                            l4343 0F6E                            l4191 0A8D  
                          l4175 0A69                            l4423 0F48                            l4407 0EDD  
                          l4087 0741                            l4319 09C1                            l4177 0A75  
                          l4425 0F4F                            l4409 0EE8                            l4513 06A1  
                          l4249 0BDC                            l4281 093A                            l3803 03A8  
                          l4187 0A85                            l4419 0F30                            l3651 086A  
                          l3821 03E4                            l3813 03C4                            l3805 03AD  
                          l4349 0F84                            l3725 08E9                            l4461 0611  
                          l4613 0303                            l3807 03B1                            l4375 0FDE  
                          l4367 0FC5                            l3719 085C                            l3911 008B  
                          l4199 0AC7                            l4455 0607                            l4607 02F4  
                          l3673 0D50                            l3825 03F6                            l3817 03CE  
                          l3745 0CFE                            l3835 0411                            l3771 035B  
                          l3755 0D2C                            l3747 0D0C                            l4651 0AA3  
                          l3685 0D73                            l3677 0D5A                            l3669 0D49  
                          l3781 0371                            l3853 0C46                            l3917 009B  
                          l3925 00C9                            l4485 0641                            l4741 0B14  
                          l3687 0D78                            l3679 0D5F                            l3775 0362  
                          l3759 0D37                            l3847 0C20                            l3943 0112  
                          l3935 00D8                            l4487 0656                            l4655 0AAF  
                          l3689 0D80                            l3793 038B                            l3849 0C2E  
                          l3857 0C51                            l3937 0107                            l4649 0A97  
                          l3939 010D                            l3867 090D                            l4659 0AB8  
                          l4739 0AF4                            l3981 01AE                            l3973 018B  
                          l3965 015E                            l3949 0139                            l3885 0B35  
                          l3869 0918                            l4597 02AD                            l3799 039E  
                          l3959 0158                            l3879 0B2D                            l3985 01C1  
                          l3977 019A                            l4881 07FA                            l3995 01D9  
                          l3987 01C4                            STR_1 1052                    __CFG_WDTE$ON 0000  
                          STR_2 1052                            STR_3 1034                            STR_4 1044  
                          STR_5 103F                            STR_6 104E                            STR_7 1049  
                          STR_8 1029                            u4005 03B2                            u4035 03C5  
                          u4115 0C3C                            u4125 0C47                            u4305 0181  
                          u4325 0192                            u4095 0C23                            u4335 01A4  
                          u3705 0D95                            u3625 0D55                            u4505 072C  
                          u4345 01B6                            u5155 0A9A                            u3645 0D6E  
                          u4535 0742                            u3815 0D0D                            u5175 0AA9  
                          u5407 0992                            u3665 0D7B                            u4545 0748  
                          u4465 06EE                            u4625 0E75                            u3825 0D21  
                          u5417 0BE2                            u5185 0AB0                            u5265 0B02  
                          u4714 0A71                            u4715 0A6F                            u4475 06FE  
                          u3835 0D2D                            u3755 08F1                            u5427 0C9B  
                          u3765 08F6                            u5437 0B3F                            u4495 0726  
                          u4655 0E90                            u5447 0B50                            u3945 038C  
                          u5457 0B59                            u4915 0F96                            u4595 0E4B  
                          u3795 0D01                            u5467 0840                            u5387 0785  
                          u4844 0934                            u4925 0FA6                            u4685 0A1A  
                          u5477 0833                            u4845 0933                            u5397 0986  
                          u3975 039F                            u4935 0FC6                            u4945 0FD5  
                          u4955 0FDF                            _WPUA 020C                            _WPUC 020E  
__size_of_nrf24l01InterfaceInit 001E                    __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000  
 __end_of_nrf24l01InterfaceInit 095E                            ___sp 2161                            _main 0769  
                          _ftoa 0515                    ___ftpack@arg 0027                            _loop 0429  
                  ___ftpack@exp 002A                            fsr0h 0005                            fsr1h 0007  
                          indf0 0000                            fsr0l 0004                            fsr1l 0006  
                          btemp 0074                   __CFG_BORV$LOW 0000                            start 002D  
         nrf24l01SetRXPipe@pipe 0071             __size_of_EEPROMRead 000C                   __CFG_CSWEN$ON 0000  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0056                    ___ftmul@sign 0057  
   __size_of_nrf24l01SendPacket 0040                           ??_ISR 0020                    ___fttol@exp1 0061  
          __size_of_getADCValue 00A5                    ___fttol@lval 005D                           ?_main 0070  
                         ?_ftoa 00A0                           ?_loop 0070                 __end_of___ftadd 0429  
               __end_of___ftdiv 1000                 __end_of___ftneg 0832                 __end_of___lldiv 0D40  
               __end_of___ftmul 0769                 EEPROMWrite@data 0072                 __end_of___llmod 0C5A  
               __end_of___ftsub 08E6                 __end_of___fttol 0EB2                  __CFG_DEBUG$OFF 0000  
               __end_of___lwmod 0ABD                           i1l292 0CBB                           _TMR1H 001A  
                         _TMR1L 0019                   __CFG_PWRTE$ON 0000                    ___lltoft@exp 002C  
                 ___awtoft@sign 0073                 __end_of_dpowers 1028                 __end_of_isdigit 085E  
                 ___ftpack@sign 002B                           _rloop 00E5                           ftoa@f 00A0  
                         ftoa@l 00A8                  __CFG_BOREN$OFF 0000                 __end_of_sleepMs 0A90  
                         ltemp0 0074                           ltemp1 0078                           ltemp2 007C  
                         ltemp3 0076                           ttemp0 0074                           ttemp1 0077  
                         ttemp2 007A                           ttemp3 007D                           status 0003  
                         wtemp0 0074                           wtemp1 0076                           wtemp2 0078  
                         wtemp3 007A                           wtemp4 007C                           wtemp5 007E  
               __end_of_sprintf 022F               getADCValue@adcSum 0049                _nrf24l01SPIStart 083B  
          __size_of_EEPROMWrite 001F                 __initialization 002F          nrf24l01InitRegisters@i 002D  
                  __end_of_main 07FE                    __end_of_ftoa 05FC                    __end_of_loop 0515  
                        ??_main 00BC                   ___fttol@sign1 005C                          ??_ftoa 0074  
                        ??_loop 0074                    ?_sendMessage 00B3        __size_of_nrf24l01SPISend 000F  
              ___llmod@dividend 0038                          _ADRESH 009C                          _ADRESL 009B  
              __end_of___awtoft 09BE                          _ANSELA 018C                          _ANSELC 018E  
              __end_of___ftpack 0DA5                __end_of___lbtoft 08C8                __end_of___lltoft 0A3A  
                        _ODCONA 028C        __size_of_nrf24l01GetPipe 0034                          _ODCONC 028E  
                        i1l4711 0CE1                          i1l4713 0CE3                          i1l4707 0CD5  
                        i1l4715 0CE6                          i1l4697 0CBC                          i1l4699 0CBF  
                        i1l4789 001E                          _INLVLA 038C                          _INLVLC 038E  
              __end_of___lwtoft 0895        __size_of_nrf24l01Service 00B9            __size_of_nrf24l01ISR 004C  
                        ___bmul 0895                          ___ftge 0B5E                          ___wmul 08E6  
                     ??___ftadd 0032                  __CFG_STVREN$ON 0000                       ??___ftdiv 003C  
                     ??___ftneg 0074                       ??___lldiv 0070                       ??___ftmul 0074  
                     ??___llmod 0070                       ??___ftsub 0074                       ??___fttol 0074  
                     ??___lwmod 0074            __end_of_nrf24l01Init 099C            __end_of_nrf24l01Send 0880  
                        _memset 0ABD           _nrf24l01InitRegisters 022F                          _rcount 00E1  
                        _rlimit 00E3                          _status 0062                          _strcat 09E7  
                        _strcmp 09BE                          _strcpy 0A3A                          _strlen 0904  
                        ftoa@cp 00AC           ___ftmul@f3_as_product 0053                __end_of_resetWDT 0829  
                  ??_EEPROMRead 0072                       ??_isdigit 0070                          loop@ta 0123  
                        loop@vt 0120                       ??_sleepMs 0072                       ??_sprintf 0046  
            getADCValue@adcLoop 0048         __end_of__initialization 005B                      ___ftadd@f1 002C  
                    ___ftadd@f2 002F                      ___ftge@ff1 0027                      ___ftge@ff2 002A  
            getADCValue@channel 0047                      ___ftdiv@f1 0039                      ___ftdiv@f2 0036  
                    ___ftdiv@f3 003E                      ___ftneg@f1 004C                      ___awtoft@c 0070  
                    ___lbtoft@c 002C                      ___ftmul@f1 004C                      ___ftmul@f2 004F  
            __end_of_EEPROMRead 0850                      ___ftsub@f1 0039                      ___ftsub@f2 0036  
                    ___fttol@f1 0058                  __pcstackCOMMON 0070                    __pidataBANK1 07FE  
 __size_of_nrf24l01SendTXBuffer 0047                      ___lltoft@c 0070                      ___lwtoft@c 0070  
                  sprintf@width 0051                      __pbssBANK0 0062                      __pbssBANK1 00DF  
                    __pbssBANK2 014D                      __pbssBANK3 01A0                      __pbssBANK4 0220  
         sendMessage@ftoaStatus 00BA               ??_nrf24l01GetPipe 0028                      __pmaintext 0769  
                       ?___ftge 0027                         ?___wmul 0070                 __CFG_PPS1WAY$ON 0000  
             _nrf24l01SetRXMode 0B23               _nrf24l01SetRXPipe 0922          ?_nrf24l01InitRegisters 0070  
                    __pintentry 0004               _nrf24l01SetTXPipe 0B9A                       ?___awtoft 0070  
                     ?___ftpack 0027                       ?___lbtoft 0070              ?_nrf24l01SetRXPipe 0070  
                     ?___lltoft 0070             __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00AD  
                     ?___lwtoft 0070           __end_of_n_ADDRESS_MUL 1029            __size_of_sendMessage 0086  
      __end_of_nrf24l01SPIStart 0844             ??_nrf24l01SetRXPipe 0070                         _NVMADRH 0892  
                       _NVMADRL 0891                         _NVMDATL 0893                         _NVMCON2 0896  
                       _SSP1BUF 0211           _nrf24l01InterfaceInit 0940      __end_of_nrf24l01SendPacket 0C17  
                     ?_resetWDT 0070                   ??_getADCValue 0046           __size_of_nrf24l01Init 001F  
         __size_of_nrf24l01Send 0013       __end_of_nrf24l01SetRXMode 0B5E       __end_of_nrf24l01SetRXPipe 0940  
     __end_of_nrf24l01SetTXPipe 0BD7                 __size_of___bmul 0018                 __size_of___ftge 003C  
                       ___ftadd 0333                         ___ftdiv 0F57                         ___ftneg 0829  
                       ___lldiv 0CED                 __size_of___wmul 001E                         ___ftmul 06B5  
                       ___llmod 0C17                         ___ftsub 08C8                         ___fttol 0E2B  
                       ___lwmod 0A90                      ??___awtoft 0073                      ??___ftpack 0070  
                    ??___lbtoft 0074                 __size_of_memset 0032          EEPROMWrite@GIEBitValue 0073  
                    ??___lltoft 0074                         __ptext1 097D                         __ptext2 0940  
                       __ptext3 022F                         __ptext4 0922                         __ptext5 0AEF  
                       __ptext6 0A90                         __ptext7 0429                         __ptext8 0DA5  
                       __ptext9 09E7                      ??___lwtoft 0073                 __size_of_strcat 0029  
               __size_of_strcmp 0029                 __size_of_strcpy 002A                 __size_of_strlen 001E  
                  __size_of_ISR 0029                       _T1CONbits 001B                         _counter 00E7  
                       _dpowers 1000                         _isdigit 0850                         _romData 00E9  
                       _sleepMs 0A64                       _IOCAPbits 0391                         _waiting 0067  
                       _sprintf 0062                         clrloop0 081D            end_of_initialization 005B  
                       ftoa@buf 01DD                         ftoa@rem 00A4                    _nrf24l01Init 097D  
                  _nrf24l01Send 086D                      _romDataMap 01C1                   ??_EEPROMWrite 0073  
              nrf24l01GetPipe@i 002B                 ___lldiv@divisor 0027                 ___lldiv@counter 0033  
                    ??_resetWDT 0070             __end_of_getADCValue 0F57                       _PORTAbits 000C  
                     _PORTCbits 000E                       _TRISAbits 008C                       _TRISCbits 008E  
              __CFG_FEXTOSC$OFF 0000                   ??_nrf24l01ISR 0070          ?_nrf24l01InterfaceInit 0070  
                   ___ftdiv@exp 0041                      main@packet 00BE      __size_of_nrf24l01SetRXMode 003B  
    __size_of_nrf24l01SetRXPipe 001E                     ___ftmul@exp 0052      __size_of_nrf24l01SetTXPipe 003D  
           __end_of_EEPROMWrite 097D                  __end_of___bmul 08AD                  __end_of___ftge 0B9A  
                __end_of___wmul 0904                  __end_of_memset 0AEF                  __end_of_strcat 0A10  
                __end_of_strcmp 09E7                    _lastTXPacket 0068                  __end_of_strcpy 0A64  
                __end_of_strlen 0922             start_initialization 002F                 _nrf24l01SPISend 085E  
                   __end_of_ISR 002D    __end_of_nrf24l01SendTXBuffer 0CA1                      ftoa@status 00A3  
     nrf24l01SetRXPipe@enRXAddr 0072                 _nrf24l01GetPipe 0AEF         __size_of_nrf24l01SPIEnd 0009  
               ___llmod@divisor 0034                 ___llmod@counter 0070                 _nrf24l01Service 05FC  
       ??_nrf24l01InitRegisters 0073                __CFG_LPBOREN$OFF 0000                     _getADCValue 0EB2  
                      ??___ftge 0070             __end_of_nrf24l01ISR 0CED                        ??___wmul 0074  
                   __pdataBANK1 00E9                        ??_strcat 0074               __size_of___awtoft 0022  
             __size_of___ftpack 0065               __size_of___lbtoft 001B               __size_of___lltoft 002A  
                     ___latbits 0002               __size_of___lwtoft 0015                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK2 0120                    _isdigit$1998 0070  
                   sprintf@flag 004A                     sprintf@prec 0053                      loop@packet 012C  
                   _EEPROMWrite 095E             nrf24l01GetPipe@name 002A             nrf24l01GetPipe@pipe 0029  
             __size_of_resetWDT 0007                        ?___ftadd 002C                        ?___ftdiv 0036  
                      ?___ftneg 004C                        ?___lldiv 0027                        ?___ftmul 004C  
                      ?___llmod 0034                        ?___ftsub 0036                        ?___fttol 0058  
                      ?___lwmod 0070            __end_of_n_ADDRESS_P0 103F         __end_of_nrf24l01SPISend 086D  
     nrf24l01InitRegisters@enAA 002B                   ??_sendMessage 0074              _nrf24l01SendPacket 0BD7  
           sleepMs@milliseconds 0070         __end_of_nrf24l01GetPipe 0B23                        ?_isdigit 0070  
                     _loop$2253 0126                       _loop$2254 0129                        ?_sleepMs 0070  
           ?_nrf24l01SendPacket 0070                        ?_sprintf 003C              EEPROMWrite@address 0070  
       __end_of_nrf24l01Service 06B5                  ___wmul@product 0027                     _nrf24l01ISR 0CA1  
                     clear_ram0 081C                        _PIE0bits 0090                        _PIE1bits 0091  
                      _PIR0bits 0010                        _PIR1bits 0011            ??_nrf24l01SendPacket 0072  
          _nrf24l01SendTXBuffer 0C5A     nrf24l01SendPacket@loopCount 0027                      _ADCON0bits 009D  
                    _ADCON1bits 009E               ___wmul@multiplier 0070                        _WPUAbits 020C  
                      _RXPacket 014D                        _TXPacket 01A0             __end_of_sendMessage 0E2B  
       ??_nrf24l01InterfaceInit 0070                  _nrf24l01SPIEnd 0832               EEPROMRead@address 0070  
              __size_of___ftadd 00F6                __size_of___ftdiv 00A9                __size_of___ftneg 0009  
              __size_of___lldiv 0053                __size_of___ftmul 00B4                __size_of___llmod 0043  
              __size_of___ftsub 001E                __size_of___fttol 0087                __size_of___lwmod 002D  
                      ___awtoft 099C                        ___ftpack 0D40                        ___lbtoft 08AD  
                      ___int_sp 22A9                        ___lltoft 0A10                      _ANSELAbits 018C  
                      ___lwtoft 0880                      _ANSELCbits 018E                      _EEPROMRead 0844  
              ?_nrf24l01GetPipe 0070                      sprintf@val 004C                   _n_ADDRESS_MUL 1028  
                    strcat@from 00AF                __size_of_isdigit 000E                        __ptext10 0BD7  
                      __ptext11 05FC                        __ptext20 083B                        __ptext12 0A3A  
                      __ptext21 085E                        __ptext13 09BE                      _T1GCONbits 001C  
                      __ptext30 0A10                        __ptext22 0832                        __ptext14 0B9A  
                      __ptext31 0E2B                        __ptext23 0ABD                        __ptext15 0895  
                      __ptext40 0333                        __ptext32 08C8                        __ptext24 0515  
                      __ptext16 0C5A                        __ptext41 099C                        __ptext33 0829  
                      __ptext25 0062                        __ptext17 0904                        __ptext42 0880  
                      __ptext34 06B5                        __ptext26 0850                        __ptext18 0B23  
                      __ptext43 08AD                        __ptext35 0B5E                        __ptext27 08E6  
                      __ptext19 086D                        __ptext44 0D40                        __ptext36 0EB2  
                      __ptext28 0C17                        __ptext45 095E                        __ptext37 0A64  
                      __ptext29 0CED                        __ptext46 0844                        __ptext38 0822  
                      __ptext39 0F57                        __ptext48 0CA1                __size_of_sleepMs 002C  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 083B                        _distance 00DF  
              __size_of_sprintf 01CD                     _OSCCON1bits 0919                   __size_of_main 0095  
                 __size_of_ftoa 00E7                   __size_of_loop 00EC    nrf24l01InitRegisters@channel 0027  
  nrf24l01InitRegisters@feature 0029                    sleepMs@wdtps 0073                      _RC0PPSbits 0EA0  
                      _resetWDT 0822    nrf24l01InitRegisters@rfSetup 002A                      _RC1PPSbits 0EA1  
                  ?_getADCValue 0043                      _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0104  
 __end_of_nrf24l01InitRegisters 0333    nrf24l01InitRegisters@setupAW 0028                      _ODCONAbits 028C  
                  _SSP1STATbits 0214                        main@pipe 00BD      nrf24l01SendPacket@txPacket 0070  
                   _sendMessage 0DA5                      _INTCONbits 000B                     _NVMCON1bits 0895  
                    _FVRCONbits 0117                  __pstringtext10 0000                        isdigit@c 0071  
                      intlevel1 0000                       sprintf@ap 004B                       sprintf@sp 0050  
                  _n_ADDRESS_P0 103A                ___lwmod@dividend 0072                ___lldiv@dividend 002B  
                  ?_EEPROMWrite 0070               __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0009  
                 __pstringtext1 1000                   __pstringtext2 103A                   __pstringtext3 1028  
                 __pstringtext4 1034                   __pstringtext5 103F                   __pstringtext6 1044  
                 __pstringtext7 1049                   __pstringtext8 104E                   __pstringtext9 1052  
                      sprintf@c 0055                        sprintf@f 003C      nrf24l01InitRegisters@DynPD 002C  
                      strcat@cp 00B1                        strcat@to 00AD                     ?_EEPROMRead 0070  
              ___lldiv@quotient 002F                 ___lwmod@divisor 0070                 ___lwmod@counter 0027  
                    _WDTCONbits 0097                   ?_nrf24l01Init 0070                      _STATUSbits 0003  
                  ?_nrf24l01ISR 0070  
