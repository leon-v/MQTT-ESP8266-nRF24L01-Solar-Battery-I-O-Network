

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Jul 27 14:01:06 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
    81                           	psect	intentry,global,class=CODE,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	dabs	1,0x7E,2
    99  0000                     
   100                           ; Version 2.00
   101                           ; Generated 27/05/2018 GMT
   102                           ; 
   103                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   104                           ; All rights reserved.
   105                           ; 
   106                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   107                           ; 
   108                           ; Redistribution and use in source and binary forms, with or without modification, are
   109                           ; permitted provided that the following conditions are met:
   110                           ; 
   111                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   112                           ;        conditions and the following disclaimer.
   113                           ; 
   114                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   115                           ;        of conditions and the following disclaimer in the documentation and/or other
   116                           ;        materials provided with the distribution.
   117                           ; 
   118                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   119                           ;        software without specific prior written permission.
   120                           ; 
   121                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   122                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   123                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   124                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   125                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   126                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   127                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   128                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   129                           ; 
   130                           ; 
   131                           ; Code-generator required, PIC16LF18325 Definitions
   132                           ; 
   133                           ; SFR Addresses
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000E                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  001D                     	;# 
   165  001E                     	;# 
   166  001F                     	;# 
   167  008C                     	;# 
   168  008E                     	;# 
   169  0090                     	;# 
   170  0091                     	;# 
   171  0092                     	;# 
   172  0093                     	;# 
   173  0094                     	;# 
   174  0097                     	;# 
   175  009B                     	;# 
   176  009B                     	;# 
   177  009C                     	;# 
   178  009D                     	;# 
   179  009E                     	;# 
   180  009F                     	;# 
   181  010C                     	;# 
   182  010E                     	;# 
   183  0111                     	;# 
   184  0112                     	;# 
   185  0113                     	;# 
   186  0114                     	;# 
   187  0115                     	;# 
   188  0116                     	;# 
   189  0117                     	;# 
   190  0118                     	;# 
   191  0119                     	;# 
   192  018C                     	;# 
   193  018E                     	;# 
   194  0199                     	;# 
   195  0199                     	;# 
   196  0199                     	;# 
   197  019A                     	;# 
   198  019A                     	;# 
   199  019A                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019B                     	;# 
   205  019C                     	;# 
   206  019C                     	;# 
   207  019C                     	;# 
   208  019D                     	;# 
   209  019D                     	;# 
   210  019D                     	;# 
   211  019E                     	;# 
   212  019E                     	;# 
   213  019E                     	;# 
   214  019F                     	;# 
   215  019F                     	;# 
   216  019F                     	;# 
   217  019F                     	;# 
   218  019F                     	;# 
   219  020C                     	;# 
   220  020E                     	;# 
   221  0211                     	;# 
   222  0211                     	;# 
   223  0212                     	;# 
   224  0212                     	;# 
   225  0213                     	;# 
   226  0213                     	;# 
   227  0214                     	;# 
   228  0214                     	;# 
   229  0215                     	;# 
   230  0215                     	;# 
   231  0215                     	;# 
   232  0215                     	;# 
   233  0216                     	;# 
   234  0216                     	;# 
   235  0217                     	;# 
   236  0217                     	;# 
   237  0219                     	;# 
   238  021A                     	;# 
   239  021B                     	;# 
   240  021C                     	;# 
   241  021D                     	;# 
   242  021D                     	;# 
   243  021E                     	;# 
   244  021F                     	;# 
   245  028C                     	;# 
   246  028E                     	;# 
   247  0291                     	;# 
   248  0291                     	;# 
   249  0292                     	;# 
   250  0293                     	;# 
   251  0294                     	;# 
   252  0295                     	;# 
   253  0295                     	;# 
   254  0296                     	;# 
   255  0297                     	;# 
   256  0298                     	;# 
   257  029F                     	;# 
   258  030C                     	;# 
   259  030E                     	;# 
   260  0311                     	;# 
   261  0311                     	;# 
   262  0312                     	;# 
   263  0313                     	;# 
   264  0314                     	;# 
   265  0315                     	;# 
   266  0315                     	;# 
   267  0316                     	;# 
   268  0317                     	;# 
   269  0318                     	;# 
   270  038C                     	;# 
   271  038E                     	;# 
   272  0391                     	;# 
   273  0392                     	;# 
   274  0393                     	;# 
   275  0397                     	;# 
   276  0398                     	;# 
   277  0399                     	;# 
   278  039A                     	;# 
   279  039C                     	;# 
   280  039D                     	;# 
   281  039E                     	;# 
   282  039F                     	;# 
   283  0411                     	;# 
   284  0411                     	;# 
   285  0412                     	;# 
   286  0413                     	;# 
   287  0414                     	;# 
   288  0415                     	;# 
   289  0416                     	;# 
   290  0417                     	;# 
   291  0418                     	;# 
   292  0418                     	;# 
   293  0419                     	;# 
   294  041A                     	;# 
   295  041B                     	;# 
   296  041C                     	;# 
   297  041D                     	;# 
   298  041E                     	;# 
   299  041F                     	;# 
   300  0498                     	;# 
   301  0498                     	;# 
   302  0499                     	;# 
   303  049A                     	;# 
   304  049B                     	;# 
   305  049B                     	;# 
   306  049C                     	;# 
   307  049D                     	;# 
   308  049E                     	;# 
   309  049F                     	;# 
   310  0617                     	;# 
   311  0618                     	;# 
   312  0619                     	;# 
   313  0619                     	;# 
   314  061A                     	;# 
   315  061B                     	;# 
   316  061C                     	;# 
   317  061C                     	;# 
   318  061F                     	;# 
   319  0691                     	;# 
   320  0692                     	;# 
   321  0693                     	;# 
   322  0694                     	;# 
   323  0695                     	;# 
   324  0696                     	;# 
   325  0697                     	;# 
   326  0698                     	;# 
   327  0699                     	;# 
   328  0711                     	;# 
   329  0712                     	;# 
   330  0713                     	;# 
   331  0714                     	;# 
   332  0715                     	;# 
   333  0716                     	;# 
   334  0717                     	;# 
   335  0718                     	;# 
   336  0719                     	;# 
   337  0891                     	;# 
   338  0891                     	;# 
   339  0891                     	;# 
   340  0891                     	;# 
   341  0891                     	;# 
   342  0891                     	;# 
   343  0892                     	;# 
   344  0892                     	;# 
   345  0892                     	;# 
   346  0893                     	;# 
   347  0893                     	;# 
   348  0893                     	;# 
   349  0893                     	;# 
   350  0893                     	;# 
   351  0893                     	;# 
   352  0894                     	;# 
   353  0894                     	;# 
   354  0894                     	;# 
   355  0895                     	;# 
   356  0895                     	;# 
   357  0895                     	;# 
   358  0896                     	;# 
   359  0896                     	;# 
   360  0896                     	;# 
   361  089B                     	;# 
   362  0911                     	;# 
   363  0912                     	;# 
   364  0913                     	;# 
   365  0914                     	;# 
   366  0915                     	;# 
   367  0916                     	;# 
   368  0918                     	;# 
   369  0919                     	;# 
   370  091A                     	;# 
   371  091B                     	;# 
   372  091C                     	;# 
   373  091D                     	;# 
   374  091E                     	;# 
   375  091F                     	;# 
   376  0E0F                     	;# 
   377  0E10                     	;# 
   378  0E11                     	;# 
   379  0E12                     	;# 
   380  0E13                     	;# 
   381  0E14                     	;# 
   382  0E15                     	;# 
   383  0E16                     	;# 
   384  0E17                     	;# 
   385  0E18                     	;# 
   386  0E19                     	;# 
   387  0E1A                     	;# 
   388  0E1B                     	;# 
   389  0E1C                     	;# 
   390  0E1D                     	;# 
   391  0E1E                     	;# 
   392  0E1F                     	;# 
   393  0E20                     	;# 
   394  0E21                     	;# 
   395  0E22                     	;# 
   396  0E24                     	;# 
   397  0E25                     	;# 
   398  0E28                     	;# 
   399  0E29                     	;# 
   400  0E2A                     	;# 
   401  0E2B                     	;# 
   402  0E2C                     	;# 
   403  0E2D                     	;# 
   404  0E2E                     	;# 
   405  0E2F                     	;# 
   406  0E90                     	;# 
   407  0E91                     	;# 
   408  0E92                     	;# 
   409  0E94                     	;# 
   410  0E95                     	;# 
   411  0EA0                     	;# 
   412  0EA1                     	;# 
   413  0EA2                     	;# 
   414  0EA3                     	;# 
   415  0EA4                     	;# 
   416  0EA5                     	;# 
   417  0F0F                     	;# 
   418  0F10                     	;# 
   419  0F11                     	;# 
   420  0F12                     	;# 
   421  0F13                     	;# 
   422  0F14                     	;# 
   423  0F15                     	;# 
   424  0F16                     	;# 
   425  0F17                     	;# 
   426  0F18                     	;# 
   427  0F19                     	;# 
   428  0F1A                     	;# 
   429  0F1B                     	;# 
   430  0F1C                     	;# 
   431  0F1D                     	;# 
   432  0F1E                     	;# 
   433  0F1F                     	;# 
   434  0F20                     	;# 
   435  0F21                     	;# 
   436  0F22                     	;# 
   437  0F23                     	;# 
   438  0F24                     	;# 
   439  0F25                     	;# 
   440  0F26                     	;# 
   441  0F27                     	;# 
   442  0F28                     	;# 
   443  0F29                     	;# 
   444  0F2A                     	;# 
   445  0F2B                     	;# 
   446  0F2C                     	;# 
   447  0F2D                     	;# 
   448  0F2E                     	;# 
   449  0F2F                     	;# 
   450  0F30                     	;# 
   451  0F31                     	;# 
   452  0F32                     	;# 
   453  0F33                     	;# 
   454  0F34                     	;# 
   455  0F35                     	;# 
   456  0F36                     	;# 
   457  0F37                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE9                     	;# 
   464  0FEA                     	;# 
   465  0FEB                     	;# 
   466  0FED                     	;# 
   467  0FEE                     	;# 
   468  0FEF                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  0008                     	;# 
   478  0009                     	;# 
   479  000A                     	;# 
   480  000B                     	;# 
   481  000C                     	;# 
   482  000E                     	;# 
   483  0010                     	;# 
   484  0011                     	;# 
   485  0012                     	;# 
   486  0013                     	;# 
   487  0014                     	;# 
   488  0015                     	;# 
   489  0015                     	;# 
   490  0016                     	;# 
   491  0016                     	;# 
   492  0017                     	;# 
   493  0018                     	;# 
   494  0019                     	;# 
   495  0019                     	;# 
   496  001A                     	;# 
   497  001B                     	;# 
   498  001C                     	;# 
   499  001D                     	;# 
   500  001E                     	;# 
   501  001F                     	;# 
   502  008C                     	;# 
   503  008E                     	;# 
   504  0090                     	;# 
   505  0091                     	;# 
   506  0092                     	;# 
   507  0093                     	;# 
   508  0094                     	;# 
   509  0097                     	;# 
   510  009B                     	;# 
   511  009B                     	;# 
   512  009C                     	;# 
   513  009D                     	;# 
   514  009E                     	;# 
   515  009F                     	;# 
   516  010C                     	;# 
   517  010E                     	;# 
   518  0111                     	;# 
   519  0112                     	;# 
   520  0113                     	;# 
   521  0114                     	;# 
   522  0115                     	;# 
   523  0116                     	;# 
   524  0117                     	;# 
   525  0118                     	;# 
   526  0119                     	;# 
   527  018C                     	;# 
   528  018E                     	;# 
   529  0199                     	;# 
   530  0199                     	;# 
   531  0199                     	;# 
   532  019A                     	;# 
   533  019A                     	;# 
   534  019A                     	;# 
   535  019B                     	;# 
   536  019B                     	;# 
   537  019B                     	;# 
   538  019B                     	;# 
   539  019B                     	;# 
   540  019C                     	;# 
   541  019C                     	;# 
   542  019C                     	;# 
   543  019D                     	;# 
   544  019D                     	;# 
   545  019D                     	;# 
   546  019E                     	;# 
   547  019E                     	;# 
   548  019E                     	;# 
   549  019F                     	;# 
   550  019F                     	;# 
   551  019F                     	;# 
   552  019F                     	;# 
   553  019F                     	;# 
   554  020C                     	;# 
   555  020E                     	;# 
   556  0211                     	;# 
   557  0211                     	;# 
   558  0212                     	;# 
   559  0212                     	;# 
   560  0213                     	;# 
   561  0213                     	;# 
   562  0214                     	;# 
   563  0214                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0215                     	;# 
   567  0215                     	;# 
   568  0216                     	;# 
   569  0216                     	;# 
   570  0217                     	;# 
   571  0217                     	;# 
   572  0219                     	;# 
   573  021A                     	;# 
   574  021B                     	;# 
   575  021C                     	;# 
   576  021D                     	;# 
   577  021D                     	;# 
   578  021E                     	;# 
   579  021F                     	;# 
   580  028C                     	;# 
   581  028E                     	;# 
   582  0291                     	;# 
   583  0291                     	;# 
   584  0292                     	;# 
   585  0293                     	;# 
   586  0294                     	;# 
   587  0295                     	;# 
   588  0295                     	;# 
   589  0296                     	;# 
   590  0297                     	;# 
   591  0298                     	;# 
   592  029F                     	;# 
   593  030C                     	;# 
   594  030E                     	;# 
   595  0311                     	;# 
   596  0311                     	;# 
   597  0312                     	;# 
   598  0313                     	;# 
   599  0314                     	;# 
   600  0315                     	;# 
   601  0315                     	;# 
   602  0316                     	;# 
   603  0317                     	;# 
   604  0318                     	;# 
   605  038C                     	;# 
   606  038E                     	;# 
   607  0391                     	;# 
   608  0392                     	;# 
   609  0393                     	;# 
   610  0397                     	;# 
   611  0398                     	;# 
   612  0399                     	;# 
   613  039A                     	;# 
   614  039C                     	;# 
   615  039D                     	;# 
   616  039E                     	;# 
   617  039F                     	;# 
   618  0411                     	;# 
   619  0411                     	;# 
   620  0412                     	;# 
   621  0413                     	;# 
   622  0414                     	;# 
   623  0415                     	;# 
   624  0416                     	;# 
   625  0417                     	;# 
   626  0418                     	;# 
   627  0418                     	;# 
   628  0419                     	;# 
   629  041A                     	;# 
   630  041B                     	;# 
   631  041C                     	;# 
   632  041D                     	;# 
   633  041E                     	;# 
   634  041F                     	;# 
   635  0498                     	;# 
   636  0498                     	;# 
   637  0499                     	;# 
   638  049A                     	;# 
   639  049B                     	;# 
   640  049B                     	;# 
   641  049C                     	;# 
   642  049D                     	;# 
   643  049E                     	;# 
   644  049F                     	;# 
   645  0617                     	;# 
   646  0618                     	;# 
   647  0619                     	;# 
   648  0619                     	;# 
   649  061A                     	;# 
   650  061B                     	;# 
   651  061C                     	;# 
   652  061C                     	;# 
   653  061F                     	;# 
   654  0691                     	;# 
   655  0692                     	;# 
   656  0693                     	;# 
   657  0694                     	;# 
   658  0695                     	;# 
   659  0696                     	;# 
   660  0697                     	;# 
   661  0698                     	;# 
   662  0699                     	;# 
   663  0711                     	;# 
   664  0712                     	;# 
   665  0713                     	;# 
   666  0714                     	;# 
   667  0715                     	;# 
   668  0716                     	;# 
   669  0717                     	;# 
   670  0718                     	;# 
   671  0719                     	;# 
   672  0891                     	;# 
   673  0891                     	;# 
   674  0891                     	;# 
   675  0891                     	;# 
   676  0891                     	;# 
   677  0891                     	;# 
   678  0892                     	;# 
   679  0892                     	;# 
   680  0892                     	;# 
   681  0893                     	;# 
   682  0893                     	;# 
   683  0893                     	;# 
   684  0893                     	;# 
   685  0893                     	;# 
   686  0893                     	;# 
   687  0894                     	;# 
   688  0894                     	;# 
   689  0894                     	;# 
   690  0895                     	;# 
   691  0895                     	;# 
   692  0895                     	;# 
   693  0896                     	;# 
   694  0896                     	;# 
   695  0896                     	;# 
   696  089B                     	;# 
   697  0911                     	;# 
   698  0912                     	;# 
   699  0913                     	;# 
   700  0914                     	;# 
   701  0915                     	;# 
   702  0916                     	;# 
   703  0918                     	;# 
   704  0919                     	;# 
   705  091A                     	;# 
   706  091B                     	;# 
   707  091C                     	;# 
   708  091D                     	;# 
   709  091E                     	;# 
   710  091F                     	;# 
   711  0E0F                     	;# 
   712  0E10                     	;# 
   713  0E11                     	;# 
   714  0E12                     	;# 
   715  0E13                     	;# 
   716  0E14                     	;# 
   717  0E15                     	;# 
   718  0E16                     	;# 
   719  0E17                     	;# 
   720  0E18                     	;# 
   721  0E19                     	;# 
   722  0E1A                     	;# 
   723  0E1B                     	;# 
   724  0E1C                     	;# 
   725  0E1D                     	;# 
   726  0E1E                     	;# 
   727  0E1F                     	;# 
   728  0E20                     	;# 
   729  0E21                     	;# 
   730  0E22                     	;# 
   731  0E24                     	;# 
   732  0E25                     	;# 
   733  0E28                     	;# 
   734  0E29                     	;# 
   735  0E2A                     	;# 
   736  0E2B                     	;# 
   737  0E2C                     	;# 
   738  0E2D                     	;# 
   739  0E2E                     	;# 
   740  0E2F                     	;# 
   741  0E90                     	;# 
   742  0E91                     	;# 
   743  0E92                     	;# 
   744  0E94                     	;# 
   745  0E95                     	;# 
   746  0EA0                     	;# 
   747  0EA1                     	;# 
   748  0EA2                     	;# 
   749  0EA3                     	;# 
   750  0EA4                     	;# 
   751  0EA5                     	;# 
   752  0F0F                     	;# 
   753  0F10                     	;# 
   754  0F11                     	;# 
   755  0F12                     	;# 
   756  0F13                     	;# 
   757  0F14                     	;# 
   758  0F15                     	;# 
   759  0F16                     	;# 
   760  0F17                     	;# 
   761  0F18                     	;# 
   762  0F19                     	;# 
   763  0F1A                     	;# 
   764  0F1B                     	;# 
   765  0F1C                     	;# 
   766  0F1D                     	;# 
   767  0F1E                     	;# 
   768  0F1F                     	;# 
   769  0F20                     	;# 
   770  0F21                     	;# 
   771  0F22                     	;# 
   772  0F23                     	;# 
   773  0F24                     	;# 
   774  0F25                     	;# 
   775  0F26                     	;# 
   776  0F27                     	;# 
   777  0F28                     	;# 
   778  0F29                     	;# 
   779  0F2A                     	;# 
   780  0F2B                     	;# 
   781  0F2C                     	;# 
   782  0F2D                     	;# 
   783  0F2E                     	;# 
   784  0F2F                     	;# 
   785  0F30                     	;# 
   786  0F31                     	;# 
   787  0F32                     	;# 
   788  0F33                     	;# 
   789  0F34                     	;# 
   790  0F35                     	;# 
   791  0F36                     	;# 
   792  0F37                     	;# 
   793  0FE4                     	;# 
   794  0FE5                     	;# 
   795  0FE6                     	;# 
   796  0FE7                     	;# 
   797  0FE8                     	;# 
   798  0FE9                     	;# 
   799  0FEA                     	;# 
   800  0FEB                     	;# 
   801  0FED                     	;# 
   802  0FEE                     	;# 
   803  0FEF                     	;# 
   804  0000                     	;# 
   805  0001                     	;# 
   806  0002                     	;# 
   807  0003                     	;# 
   808  0004                     	;# 
   809  0005                     	;# 
   810  0006                     	;# 
   811  0007                     	;# 
   812  0008                     	;# 
   813  0009                     	;# 
   814  000A                     	;# 
   815  000B                     	;# 
   816  000C                     	;# 
   817  000E                     	;# 
   818  0010                     	;# 
   819  0011                     	;# 
   820  0012                     	;# 
   821  0013                     	;# 
   822  0014                     	;# 
   823  0015                     	;# 
   824  0015                     	;# 
   825  0016                     	;# 
   826  0016                     	;# 
   827  0017                     	;# 
   828  0018                     	;# 
   829  0019                     	;# 
   830  0019                     	;# 
   831  001A                     	;# 
   832  001B                     	;# 
   833  001C                     	;# 
   834  001D                     	;# 
   835  001E                     	;# 
   836  001F                     	;# 
   837  008C                     	;# 
   838  008E                     	;# 
   839  0090                     	;# 
   840  0091                     	;# 
   841  0092                     	;# 
   842  0093                     	;# 
   843  0094                     	;# 
   844  0097                     	;# 
   845  009B                     	;# 
   846  009B                     	;# 
   847  009C                     	;# 
   848  009D                     	;# 
   849  009E                     	;# 
   850  009F                     	;# 
   851  010C                     	;# 
   852  010E                     	;# 
   853  0111                     	;# 
   854  0112                     	;# 
   855  0113                     	;# 
   856  0114                     	;# 
   857  0115                     	;# 
   858  0116                     	;# 
   859  0117                     	;# 
   860  0118                     	;# 
   861  0119                     	;# 
   862  018C                     	;# 
   863  018E                     	;# 
   864  0199                     	;# 
   865  0199                     	;# 
   866  0199                     	;# 
   867  019A                     	;# 
   868  019A                     	;# 
   869  019A                     	;# 
   870  019B                     	;# 
   871  019B                     	;# 
   872  019B                     	;# 
   873  019B                     	;# 
   874  019B                     	;# 
   875  019C                     	;# 
   876  019C                     	;# 
   877  019C                     	;# 
   878  019D                     	;# 
   879  019D                     	;# 
   880  019D                     	;# 
   881  019E                     	;# 
   882  019E                     	;# 
   883  019E                     	;# 
   884  019F                     	;# 
   885  019F                     	;# 
   886  019F                     	;# 
   887  019F                     	;# 
   888  019F                     	;# 
   889  020C                     	;# 
   890  020E                     	;# 
   891  0211                     	;# 
   892  0211                     	;# 
   893  0212                     	;# 
   894  0212                     	;# 
   895  0213                     	;# 
   896  0213                     	;# 
   897  0214                     	;# 
   898  0214                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0216                     	;# 
   904  0216                     	;# 
   905  0217                     	;# 
   906  0217                     	;# 
   907  0219                     	;# 
   908  021A                     	;# 
   909  021B                     	;# 
   910  021C                     	;# 
   911  021D                     	;# 
   912  021D                     	;# 
   913  021E                     	;# 
   914  021F                     	;# 
   915  028C                     	;# 
   916  028E                     	;# 
   917  0291                     	;# 
   918  0291                     	;# 
   919  0292                     	;# 
   920  0293                     	;# 
   921  0294                     	;# 
   922  0295                     	;# 
   923  0295                     	;# 
   924  0296                     	;# 
   925  0297                     	;# 
   926  0298                     	;# 
   927  029F                     	;# 
   928  030C                     	;# 
   929  030E                     	;# 
   930  0311                     	;# 
   931  0311                     	;# 
   932  0312                     	;# 
   933  0313                     	;# 
   934  0314                     	;# 
   935  0315                     	;# 
   936  0315                     	;# 
   937  0316                     	;# 
   938  0317                     	;# 
   939  0318                     	;# 
   940  038C                     	;# 
   941  038E                     	;# 
   942  0391                     	;# 
   943  0392                     	;# 
   944  0393                     	;# 
   945  0397                     	;# 
   946  0398                     	;# 
   947  0399                     	;# 
   948  039A                     	;# 
   949  039C                     	;# 
   950  039D                     	;# 
   951  039E                     	;# 
   952  039F                     	;# 
   953  0411                     	;# 
   954  0411                     	;# 
   955  0412                     	;# 
   956  0413                     	;# 
   957  0414                     	;# 
   958  0415                     	;# 
   959  0416                     	;# 
   960  0417                     	;# 
   961  0418                     	;# 
   962  0418                     	;# 
   963  0419                     	;# 
   964  041A                     	;# 
   965  041B                     	;# 
   966  041C                     	;# 
   967  041D                     	;# 
   968  041E                     	;# 
   969  041F                     	;# 
   970  0498                     	;# 
   971  0498                     	;# 
   972  0499                     	;# 
   973  049A                     	;# 
   974  049B                     	;# 
   975  049B                     	;# 
   976  049C                     	;# 
   977  049D                     	;# 
   978  049E                     	;# 
   979  049F                     	;# 
   980  0617                     	;# 
   981  0618                     	;# 
   982  0619                     	;# 
   983  0619                     	;# 
   984  061A                     	;# 
   985  061B                     	;# 
   986  061C                     	;# 
   987  061C                     	;# 
   988  061F                     	;# 
   989  0691                     	;# 
   990  0692                     	;# 
   991  0693                     	;# 
   992  0694                     	;# 
   993  0695                     	;# 
   994  0696                     	;# 
   995  0697                     	;# 
   996  0698                     	;# 
   997  0699                     	;# 
   998  0711                     	;# 
   999  0712                     	;# 
  1000  0713                     	;# 
  1001  0714                     	;# 
  1002  0715                     	;# 
  1003  0716                     	;# 
  1004  0717                     	;# 
  1005  0718                     	;# 
  1006  0719                     	;# 
  1007  0891                     	;# 
  1008  0891                     	;# 
  1009  0891                     	;# 
  1010  0891                     	;# 
  1011  0891                     	;# 
  1012  0891                     	;# 
  1013  0892                     	;# 
  1014  0892                     	;# 
  1015  0892                     	;# 
  1016  0893                     	;# 
  1017  0893                     	;# 
  1018  0893                     	;# 
  1019  0893                     	;# 
  1020  0893                     	;# 
  1021  0893                     	;# 
  1022  0894                     	;# 
  1023  0894                     	;# 
  1024  0894                     	;# 
  1025  0895                     	;# 
  1026  0895                     	;# 
  1027  0895                     	;# 
  1028  0896                     	;# 
  1029  0896                     	;# 
  1030  0896                     	;# 
  1031  089B                     	;# 
  1032  0911                     	;# 
  1033  0912                     	;# 
  1034  0913                     	;# 
  1035  0914                     	;# 
  1036  0915                     	;# 
  1037  0916                     	;# 
  1038  0918                     	;# 
  1039  0919                     	;# 
  1040  091A                     	;# 
  1041  091B                     	;# 
  1042  091C                     	;# 
  1043  091D                     	;# 
  1044  091E                     	;# 
  1045  091F                     	;# 
  1046  0E0F                     	;# 
  1047  0E10                     	;# 
  1048  0E11                     	;# 
  1049  0E12                     	;# 
  1050  0E13                     	;# 
  1051  0E14                     	;# 
  1052  0E15                     	;# 
  1053  0E16                     	;# 
  1054  0E17                     	;# 
  1055  0E18                     	;# 
  1056  0E19                     	;# 
  1057  0E1A                     	;# 
  1058  0E1B                     	;# 
  1059  0E1C                     	;# 
  1060  0E1D                     	;# 
  1061  0E1E                     	;# 
  1062  0E1F                     	;# 
  1063  0E20                     	;# 
  1064  0E21                     	;# 
  1065  0E22                     	;# 
  1066  0E24                     	;# 
  1067  0E25                     	;# 
  1068  0E28                     	;# 
  1069  0E29                     	;# 
  1070  0E2A                     	;# 
  1071  0E2B                     	;# 
  1072  0E2C                     	;# 
  1073  0E2D                     	;# 
  1074  0E2E                     	;# 
  1075  0E2F                     	;# 
  1076  0E90                     	;# 
  1077  0E91                     	;# 
  1078  0E92                     	;# 
  1079  0E94                     	;# 
  1080  0E95                     	;# 
  1081  0EA0                     	;# 
  1082  0EA1                     	;# 
  1083  0EA2                     	;# 
  1084  0EA3                     	;# 
  1085  0EA4                     	;# 
  1086  0EA5                     	;# 
  1087  0F0F                     	;# 
  1088  0F10                     	;# 
  1089  0F11                     	;# 
  1090  0F12                     	;# 
  1091  0F13                     	;# 
  1092  0F14                     	;# 
  1093  0F15                     	;# 
  1094  0F16                     	;# 
  1095  0F17                     	;# 
  1096  0F18                     	;# 
  1097  0F19                     	;# 
  1098  0F1A                     	;# 
  1099  0F1B                     	;# 
  1100  0F1C                     	;# 
  1101  0F1D                     	;# 
  1102  0F1E                     	;# 
  1103  0F1F                     	;# 
  1104  0F20                     	;# 
  1105  0F21                     	;# 
  1106  0F22                     	;# 
  1107  0F23                     	;# 
  1108  0F24                     	;# 
  1109  0F25                     	;# 
  1110  0F26                     	;# 
  1111  0F27                     	;# 
  1112  0F28                     	;# 
  1113  0F29                     	;# 
  1114  0F2A                     	;# 
  1115  0F2B                     	;# 
  1116  0F2C                     	;# 
  1117  0F2D                     	;# 
  1118  0F2E                     	;# 
  1119  0F2F                     	;# 
  1120  0F30                     	;# 
  1121  0F31                     	;# 
  1122  0F32                     	;# 
  1123  0F33                     	;# 
  1124  0F34                     	;# 
  1125  0F35                     	;# 
  1126  0F36                     	;# 
  1127  0F37                     	;# 
  1128  0FE4                     	;# 
  1129  0FE5                     	;# 
  1130  0FE6                     	;# 
  1131  0FE7                     	;# 
  1132  0FE8                     	;# 
  1133  0FE9                     	;# 
  1134  0FEA                     	;# 
  1135  0FEB                     	;# 
  1136  0FED                     	;# 
  1137  0FEE                     	;# 
  1138  0FEF                     	;# 
  1139  0000                     	;# 
  1140  0001                     	;# 
  1141  0002                     	;# 
  1142  0003                     	;# 
  1143  0004                     	;# 
  1144  0005                     	;# 
  1145  0006                     	;# 
  1146  0007                     	;# 
  1147  0008                     	;# 
  1148  0009                     	;# 
  1149  000A                     	;# 
  1150  000B                     	;# 
  1151  000C                     	;# 
  1152  000E                     	;# 
  1153  0010                     	;# 
  1154  0011                     	;# 
  1155  0012                     	;# 
  1156  0013                     	;# 
  1157  0014                     	;# 
  1158  0015                     	;# 
  1159  0015                     	;# 
  1160  0016                     	;# 
  1161  0016                     	;# 
  1162  0017                     	;# 
  1163  0018                     	;# 
  1164  0019                     	;# 
  1165  0019                     	;# 
  1166  001A                     	;# 
  1167  001B                     	;# 
  1168  001C                     	;# 
  1169  001D                     	;# 
  1170  001E                     	;# 
  1171  001F                     	;# 
  1172  008C                     	;# 
  1173  008E                     	;# 
  1174  0090                     	;# 
  1175  0091                     	;# 
  1176  0092                     	;# 
  1177  0093                     	;# 
  1178  0094                     	;# 
  1179  0097                     	;# 
  1180  009B                     	;# 
  1181  009B                     	;# 
  1182  009C                     	;# 
  1183  009D                     	;# 
  1184  009E                     	;# 
  1185  009F                     	;# 
  1186  010C                     	;# 
  1187  010E                     	;# 
  1188  0111                     	;# 
  1189  0112                     	;# 
  1190  0113                     	;# 
  1191  0114                     	;# 
  1192  0115                     	;# 
  1193  0116                     	;# 
  1194  0117                     	;# 
  1195  0118                     	;# 
  1196  0119                     	;# 
  1197  018C                     	;# 
  1198  018E                     	;# 
  1199  0199                     	;# 
  1200  0199                     	;# 
  1201  0199                     	;# 
  1202  019A                     	;# 
  1203  019A                     	;# 
  1204  019A                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019C                     	;# 
  1211  019C                     	;# 
  1212  019C                     	;# 
  1213  019D                     	;# 
  1214  019D                     	;# 
  1215  019D                     	;# 
  1216  019E                     	;# 
  1217  019E                     	;# 
  1218  019E                     	;# 
  1219  019F                     	;# 
  1220  019F                     	;# 
  1221  019F                     	;# 
  1222  019F                     	;# 
  1223  019F                     	;# 
  1224  020C                     	;# 
  1225  020E                     	;# 
  1226  0211                     	;# 
  1227  0211                     	;# 
  1228  0212                     	;# 
  1229  0212                     	;# 
  1230  0213                     	;# 
  1231  0213                     	;# 
  1232  0214                     	;# 
  1233  0214                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0216                     	;# 
  1239  0216                     	;# 
  1240  0217                     	;# 
  1241  0217                     	;# 
  1242  0219                     	;# 
  1243  021A                     	;# 
  1244  021B                     	;# 
  1245  021C                     	;# 
  1246  021D                     	;# 
  1247  021D                     	;# 
  1248  021E                     	;# 
  1249  021F                     	;# 
  1250  028C                     	;# 
  1251  028E                     	;# 
  1252  0291                     	;# 
  1253  0291                     	;# 
  1254  0292                     	;# 
  1255  0293                     	;# 
  1256  0294                     	;# 
  1257  0295                     	;# 
  1258  0295                     	;# 
  1259  0296                     	;# 
  1260  0297                     	;# 
  1261  0298                     	;# 
  1262  029F                     	;# 
  1263  030C                     	;# 
  1264  030E                     	;# 
  1265  0311                     	;# 
  1266  0311                     	;# 
  1267  0312                     	;# 
  1268  0313                     	;# 
  1269  0314                     	;# 
  1270  0315                     	;# 
  1271  0315                     	;# 
  1272  0316                     	;# 
  1273  0317                     	;# 
  1274  0318                     	;# 
  1275  038C                     	;# 
  1276  038E                     	;# 
  1277  0391                     	;# 
  1278  0392                     	;# 
  1279  0393                     	;# 
  1280  0397                     	;# 
  1281  0398                     	;# 
  1282  0399                     	;# 
  1283  039A                     	;# 
  1284  039C                     	;# 
  1285  039D                     	;# 
  1286  039E                     	;# 
  1287  039F                     	;# 
  1288  0411                     	;# 
  1289  0411                     	;# 
  1290  0412                     	;# 
  1291  0413                     	;# 
  1292  0414                     	;# 
  1293  0415                     	;# 
  1294  0416                     	;# 
  1295  0417                     	;# 
  1296  0418                     	;# 
  1297  0418                     	;# 
  1298  0419                     	;# 
  1299  041A                     	;# 
  1300  041B                     	;# 
  1301  041C                     	;# 
  1302  041D                     	;# 
  1303  041E                     	;# 
  1304  041F                     	;# 
  1305  0498                     	;# 
  1306  0498                     	;# 
  1307  0499                     	;# 
  1308  049A                     	;# 
  1309  049B                     	;# 
  1310  049B                     	;# 
  1311  049C                     	;# 
  1312  049D                     	;# 
  1313  049E                     	;# 
  1314  049F                     	;# 
  1315  0617                     	;# 
  1316  0618                     	;# 
  1317  0619                     	;# 
  1318  0619                     	;# 
  1319  061A                     	;# 
  1320  061B                     	;# 
  1321  061C                     	;# 
  1322  061C                     	;# 
  1323  061F                     	;# 
  1324  0691                     	;# 
  1325  0692                     	;# 
  1326  0693                     	;# 
  1327  0694                     	;# 
  1328  0695                     	;# 
  1329  0696                     	;# 
  1330  0697                     	;# 
  1331  0698                     	;# 
  1332  0699                     	;# 
  1333  0711                     	;# 
  1334  0712                     	;# 
  1335  0713                     	;# 
  1336  0714                     	;# 
  1337  0715                     	;# 
  1338  0716                     	;# 
  1339  0717                     	;# 
  1340  0718                     	;# 
  1341  0719                     	;# 
  1342  0891                     	;# 
  1343  0891                     	;# 
  1344  0891                     	;# 
  1345  0891                     	;# 
  1346  0891                     	;# 
  1347  0891                     	;# 
  1348  0892                     	;# 
  1349  0892                     	;# 
  1350  0892                     	;# 
  1351  0893                     	;# 
  1352  0893                     	;# 
  1353  0893                     	;# 
  1354  0893                     	;# 
  1355  0893                     	;# 
  1356  0893                     	;# 
  1357  0894                     	;# 
  1358  0894                     	;# 
  1359  0894                     	;# 
  1360  0895                     	;# 
  1361  0895                     	;# 
  1362  0895                     	;# 
  1363  0896                     	;# 
  1364  0896                     	;# 
  1365  0896                     	;# 
  1366  089B                     	;# 
  1367  0911                     	;# 
  1368  0912                     	;# 
  1369  0913                     	;# 
  1370  0914                     	;# 
  1371  0915                     	;# 
  1372  0916                     	;# 
  1373  0918                     	;# 
  1374  0919                     	;# 
  1375  091A                     	;# 
  1376  091B                     	;# 
  1377  091C                     	;# 
  1378  091D                     	;# 
  1379  091E                     	;# 
  1380  091F                     	;# 
  1381  0E0F                     	;# 
  1382  0E10                     	;# 
  1383  0E11                     	;# 
  1384  0E12                     	;# 
  1385  0E13                     	;# 
  1386  0E14                     	;# 
  1387  0E15                     	;# 
  1388  0E16                     	;# 
  1389  0E17                     	;# 
  1390  0E18                     	;# 
  1391  0E19                     	;# 
  1392  0E1A                     	;# 
  1393  0E1B                     	;# 
  1394  0E1C                     	;# 
  1395  0E1D                     	;# 
  1396  0E1E                     	;# 
  1397  0E1F                     	;# 
  1398  0E20                     	;# 
  1399  0E21                     	;# 
  1400  0E22                     	;# 
  1401  0E24                     	;# 
  1402  0E25                     	;# 
  1403  0E28                     	;# 
  1404  0E29                     	;# 
  1405  0E2A                     	;# 
  1406  0E2B                     	;# 
  1407  0E2C                     	;# 
  1408  0E2D                     	;# 
  1409  0E2E                     	;# 
  1410  0E2F                     	;# 
  1411  0E90                     	;# 
  1412  0E91                     	;# 
  1413  0E92                     	;# 
  1414  0E94                     	;# 
  1415  0E95                     	;# 
  1416  0EA0                     	;# 
  1417  0EA1                     	;# 
  1418  0EA2                     	;# 
  1419  0EA3                     	;# 
  1420  0EA4                     	;# 
  1421  0EA5                     	;# 
  1422  0F0F                     	;# 
  1423  0F10                     	;# 
  1424  0F11                     	;# 
  1425  0F12                     	;# 
  1426  0F13                     	;# 
  1427  0F14                     	;# 
  1428  0F15                     	;# 
  1429  0F16                     	;# 
  1430  0F17                     	;# 
  1431  0F18                     	;# 
  1432  0F19                     	;# 
  1433  0F1A                     	;# 
  1434  0F1B                     	;# 
  1435  0F1C                     	;# 
  1436  0F1D                     	;# 
  1437  0F1E                     	;# 
  1438  0F1F                     	;# 
  1439  0F20                     	;# 
  1440  0F21                     	;# 
  1441  0F22                     	;# 
  1442  0F23                     	;# 
  1443  0F24                     	;# 
  1444  0F25                     	;# 
  1445  0F26                     	;# 
  1446  0F27                     	;# 
  1447  0F28                     	;# 
  1448  0F29                     	;# 
  1449  0F2A                     	;# 
  1450  0F2B                     	;# 
  1451  0F2C                     	;# 
  1452  0F2D                     	;# 
  1453  0F2E                     	;# 
  1454  0F2F                     	;# 
  1455  0F30                     	;# 
  1456  0F31                     	;# 
  1457  0F32                     	;# 
  1458  0F33                     	;# 
  1459  0F34                     	;# 
  1460  0F35                     	;# 
  1461  0F36                     	;# 
  1462  0F37                     	;# 
  1463  0FE4                     	;# 
  1464  0FE5                     	;# 
  1465  0FE6                     	;# 
  1466  0FE7                     	;# 
  1467  0FE8                     	;# 
  1468  0FE9                     	;# 
  1469  0FEA                     	;# 
  1470  0FEB                     	;# 
  1471  0FED                     	;# 
  1472  0FEE                     	;# 
  1473  0FEF                     	;# 
  1474  0000                     	;# 
  1475  0001                     	;# 
  1476  0002                     	;# 
  1477  0003                     	;# 
  1478  0004                     	;# 
  1479  0005                     	;# 
  1480  0006                     	;# 
  1481  0007                     	;# 
  1482  0008                     	;# 
  1483  0009                     	;# 
  1484  000A                     	;# 
  1485  000B                     	;# 
  1486  000C                     	;# 
  1487  000E                     	;# 
  1488  0010                     	;# 
  1489  0011                     	;# 
  1490  0012                     	;# 
  1491  0013                     	;# 
  1492  0014                     	;# 
  1493  0015                     	;# 
  1494  0015                     	;# 
  1495  0016                     	;# 
  1496  0016                     	;# 
  1497  0017                     	;# 
  1498  0018                     	;# 
  1499  0019                     	;# 
  1500  0019                     	;# 
  1501  001A                     	;# 
  1502  001B                     	;# 
  1503  001C                     	;# 
  1504  001D                     	;# 
  1505  001E                     	;# 
  1506  001F                     	;# 
  1507  008C                     	;# 
  1508  008E                     	;# 
  1509  0090                     	;# 
  1510  0091                     	;# 
  1511  0092                     	;# 
  1512  0093                     	;# 
  1513  0094                     	;# 
  1514  0097                     	;# 
  1515  009B                     	;# 
  1516  009B                     	;# 
  1517  009C                     	;# 
  1518  009D                     	;# 
  1519  009E                     	;# 
  1520  009F                     	;# 
  1521  010C                     	;# 
  1522  010E                     	;# 
  1523  0111                     	;# 
  1524  0112                     	;# 
  1525  0113                     	;# 
  1526  0114                     	;# 
  1527  0115                     	;# 
  1528  0116                     	;# 
  1529  0117                     	;# 
  1530  0118                     	;# 
  1531  0119                     	;# 
  1532  018C                     	;# 
  1533  018E                     	;# 
  1534  0199                     	;# 
  1535  0199                     	;# 
  1536  0199                     	;# 
  1537  019A                     	;# 
  1538  019A                     	;# 
  1539  019A                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019B                     	;# 
  1543  019B                     	;# 
  1544  019B                     	;# 
  1545  019C                     	;# 
  1546  019C                     	;# 
  1547  019C                     	;# 
  1548  019D                     	;# 
  1549  019D                     	;# 
  1550  019D                     	;# 
  1551  019E                     	;# 
  1552  019E                     	;# 
  1553  019E                     	;# 
  1554  019F                     	;# 
  1555  019F                     	;# 
  1556  019F                     	;# 
  1557  019F                     	;# 
  1558  019F                     	;# 
  1559  020C                     	;# 
  1560  020E                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0216                     	;# 
  1574  0216                     	;# 
  1575  0217                     	;# 
  1576  0217                     	;# 
  1577  0219                     	;# 
  1578  021A                     	;# 
  1579  021B                     	;# 
  1580  021C                     	;# 
  1581  021D                     	;# 
  1582  021D                     	;# 
  1583  021E                     	;# 
  1584  021F                     	;# 
  1585  028C                     	;# 
  1586  028E                     	;# 
  1587  0291                     	;# 
  1588  0291                     	;# 
  1589  0292                     	;# 
  1590  0293                     	;# 
  1591  0294                     	;# 
  1592  0295                     	;# 
  1593  0295                     	;# 
  1594  0296                     	;# 
  1595  0297                     	;# 
  1596  0298                     	;# 
  1597  029F                     	;# 
  1598  030C                     	;# 
  1599  030E                     	;# 
  1600  0311                     	;# 
  1601  0311                     	;# 
  1602  0312                     	;# 
  1603  0313                     	;# 
  1604  0314                     	;# 
  1605  0315                     	;# 
  1606  0315                     	;# 
  1607  0316                     	;# 
  1608  0317                     	;# 
  1609  0318                     	;# 
  1610  038C                     	;# 
  1611  038E                     	;# 
  1612  0391                     	;# 
  1613  0392                     	;# 
  1614  0393                     	;# 
  1615  0397                     	;# 
  1616  0398                     	;# 
  1617  0399                     	;# 
  1618  039A                     	;# 
  1619  039C                     	;# 
  1620  039D                     	;# 
  1621  039E                     	;# 
  1622  039F                     	;# 
  1623  0411                     	;# 
  1624  0411                     	;# 
  1625  0412                     	;# 
  1626  0413                     	;# 
  1627  0414                     	;# 
  1628  0415                     	;# 
  1629  0416                     	;# 
  1630  0417                     	;# 
  1631  0418                     	;# 
  1632  0418                     	;# 
  1633  0419                     	;# 
  1634  041A                     	;# 
  1635  041B                     	;# 
  1636  041C                     	;# 
  1637  041D                     	;# 
  1638  041E                     	;# 
  1639  041F                     	;# 
  1640  0498                     	;# 
  1641  0498                     	;# 
  1642  0499                     	;# 
  1643  049A                     	;# 
  1644  049B                     	;# 
  1645  049B                     	;# 
  1646  049C                     	;# 
  1647  049D                     	;# 
  1648  049E                     	;# 
  1649  049F                     	;# 
  1650  0617                     	;# 
  1651  0618                     	;# 
  1652  0619                     	;# 
  1653  0619                     	;# 
  1654  061A                     	;# 
  1655  061B                     	;# 
  1656  061C                     	;# 
  1657  061C                     	;# 
  1658  061F                     	;# 
  1659  0691                     	;# 
  1660  0692                     	;# 
  1661  0693                     	;# 
  1662  0694                     	;# 
  1663  0695                     	;# 
  1664  0696                     	;# 
  1665  0697                     	;# 
  1666  0698                     	;# 
  1667  0699                     	;# 
  1668  0711                     	;# 
  1669  0712                     	;# 
  1670  0713                     	;# 
  1671  0714                     	;# 
  1672  0715                     	;# 
  1673  0716                     	;# 
  1674  0717                     	;# 
  1675  0718                     	;# 
  1676  0719                     	;# 
  1677  0891                     	;# 
  1678  0891                     	;# 
  1679  0891                     	;# 
  1680  0891                     	;# 
  1681  0891                     	;# 
  1682  0891                     	;# 
  1683  0892                     	;# 
  1684  0892                     	;# 
  1685  0892                     	;# 
  1686  0893                     	;# 
  1687  0893                     	;# 
  1688  0893                     	;# 
  1689  0893                     	;# 
  1690  0893                     	;# 
  1691  0893                     	;# 
  1692  0894                     	;# 
  1693  0894                     	;# 
  1694  0894                     	;# 
  1695  0895                     	;# 
  1696  0895                     	;# 
  1697  0895                     	;# 
  1698  0896                     	;# 
  1699  0896                     	;# 
  1700  0896                     	;# 
  1701  089B                     	;# 
  1702  0911                     	;# 
  1703  0912                     	;# 
  1704  0913                     	;# 
  1705  0914                     	;# 
  1706  0915                     	;# 
  1707  0916                     	;# 
  1708  0918                     	;# 
  1709  0919                     	;# 
  1710  091A                     	;# 
  1711  091B                     	;# 
  1712  091C                     	;# 
  1713  091D                     	;# 
  1714  091E                     	;# 
  1715  091F                     	;# 
  1716  0E0F                     	;# 
  1717  0E10                     	;# 
  1718  0E11                     	;# 
  1719  0E12                     	;# 
  1720  0E13                     	;# 
  1721  0E14                     	;# 
  1722  0E15                     	;# 
  1723  0E16                     	;# 
  1724  0E17                     	;# 
  1725  0E18                     	;# 
  1726  0E19                     	;# 
  1727  0E1A                     	;# 
  1728  0E1B                     	;# 
  1729  0E1C                     	;# 
  1730  0E1D                     	;# 
  1731  0E1E                     	;# 
  1732  0E1F                     	;# 
  1733  0E20                     	;# 
  1734  0E21                     	;# 
  1735  0E22                     	;# 
  1736  0E24                     	;# 
  1737  0E25                     	;# 
  1738  0E28                     	;# 
  1739  0E29                     	;# 
  1740  0E2A                     	;# 
  1741  0E2B                     	;# 
  1742  0E2C                     	;# 
  1743  0E2D                     	;# 
  1744  0E2E                     	;# 
  1745  0E2F                     	;# 
  1746  0E90                     	;# 
  1747  0E91                     	;# 
  1748  0E92                     	;# 
  1749  0E94                     	;# 
  1750  0E95                     	;# 
  1751  0EA0                     	;# 
  1752  0EA1                     	;# 
  1753  0EA2                     	;# 
  1754  0EA3                     	;# 
  1755  0EA4                     	;# 
  1756  0EA5                     	;# 
  1757  0F0F                     	;# 
  1758  0F10                     	;# 
  1759  0F11                     	;# 
  1760  0F12                     	;# 
  1761  0F13                     	;# 
  1762  0F14                     	;# 
  1763  0F15                     	;# 
  1764  0F16                     	;# 
  1765  0F17                     	;# 
  1766  0F18                     	;# 
  1767  0F19                     	;# 
  1768  0F1A                     	;# 
  1769  0F1B                     	;# 
  1770  0F1C                     	;# 
  1771  0F1D                     	;# 
  1772  0F1E                     	;# 
  1773  0F1F                     	;# 
  1774  0F20                     	;# 
  1775  0F21                     	;# 
  1776  0F22                     	;# 
  1777  0F23                     	;# 
  1778  0F24                     	;# 
  1779  0F25                     	;# 
  1780  0F26                     	;# 
  1781  0F27                     	;# 
  1782  0F28                     	;# 
  1783  0F29                     	;# 
  1784  0F2A                     	;# 
  1785  0F2B                     	;# 
  1786  0F2C                     	;# 
  1787  0F2D                     	;# 
  1788  0F2E                     	;# 
  1789  0F2F                     	;# 
  1790  0F30                     	;# 
  1791  0F31                     	;# 
  1792  0F32                     	;# 
  1793  0F33                     	;# 
  1794  0F34                     	;# 
  1795  0F35                     	;# 
  1796  0F36                     	;# 
  1797  0F37                     	;# 
  1798  0FE4                     	;# 
  1799  0FE5                     	;# 
  1800  0FE6                     	;# 
  1801  0FE7                     	;# 
  1802  0FE8                     	;# 
  1803  0FE9                     	;# 
  1804  0FEA                     	;# 
  1805  0FEB                     	;# 
  1806  0FED                     	;# 
  1807  0FEE                     	;# 
  1808  0FEF                     	;# 
  1809                           
  1810                           	psect	idataBANK1
  1811  11CC                     __pidataBANK1:	
  1812                           
  1813                           ;initializer for _romData
  1814  11CC  34C1               	retlw	low (_romDataMap| (0+256))
  1815                           
  1816                           	psect	stringtext1
  1817  1800                     __pstringtext1:	
  1818  1800                     _dpowers:	
  1819  1800  3401               	retlw	1
  1820  1801  3400               	retlw	0
  1821  1802  3400               	retlw	0
  1822  1803  3400               	retlw	0
  1823  1804  340A               	retlw	10
  1824  1805  3400               	retlw	0
  1825  1806  3400               	retlw	0
  1826  1807  3400               	retlw	0
  1827  1808  3464               	retlw	100
  1828  1809  3400               	retlw	0
  1829  180A  3400               	retlw	0
  1830  180B  3400               	retlw	0
  1831  180C  34E8               	retlw	232
  1832  180D  3403               	retlw	3
  1833  180E  3400               	retlw	0
  1834  180F  3400               	retlw	0
  1835  1810  3410               	retlw	16
  1836  1811  3427               	retlw	39
  1837  1812  3400               	retlw	0
  1838  1813  3400               	retlw	0
  1839  1814  34A0               	retlw	160
  1840  1815  3486               	retlw	134
  1841  1816  3401               	retlw	1
  1842  1817  3400               	retlw	0
  1843  1818  3440               	retlw	64
  1844  1819  3442               	retlw	66
  1845  181A  340F               	retlw	15
  1846  181B  3400               	retlw	0
  1847  181C  3480               	retlw	128
  1848  181D  3496               	retlw	150
  1849  181E  3498               	retlw	152
  1850  181F  3400               	retlw	0
  1851  1820  3400               	retlw	0
  1852  1821  34E1               	retlw	225
  1853  1822  34F5               	retlw	245
  1854  1823  3405               	retlw	5
  1855  1824  3400               	retlw	0
  1856  1825  34CA               	retlw	202
  1857  1826  349A               	retlw	154
  1858  1827  343B               	retlw	59
  1859  1828                     __end_of_dpowers:	
  1860                           
  1861                           	psect	stringtext2
  1862  1841                     __pstringtext2:	
  1863  1841                     _n_ADDRESS_P0:	
  1864  1841  34AD               	retlw	173
  1865  1842  3487               	retlw	135
  1866  1843  3466               	retlw	102
  1867  1844  34BC               	retlw	188
  1868  1845  34BB               	retlw	187
  1869  1846                     __end_of_n_ADDRESS_P0:	
  1870                           
  1871                           	psect	stringtext3
  1872  1828                     __pstringtext3:	
  1873  1828                     _n_ADDRESS_MUL:	
  1874  1828  3421               	retlw	33
  1875  1829                     __end_of_n_ADDRESS_MUL:	
  1876  000B                     _INTCONbits	set	11
  1877  0003                     _STATUS	set	3
  1878  0010                     _PIR0bits	set	16
  1879  000E                     _PORTCbits	set	14
  1880  000C                     _PORTAbits	set	12
  1881  009E                     _ADCON1bits	set	158
  1882  009C                     _ADRESH	set	156
  1883  009B                     _ADRESL	set	155
  1884  009D                     _ADCON0bits	set	157
  1885  0097                     _WDTCONbits	set	151
  1886  0090                     _PIE0bits	set	144
  1887  008E                     _TRISCbits	set	142
  1888  008C                     _TRISAbits	set	140
  1889  0117                     _FVRCONbits	set	279
  1890  018E                     _ANSELCbits	set	398
  1891  018C                     _ANSELAbits	set	396
  1892  018E                     _ANSELC	set	398
  1893  018C                     _ANSELA	set	396
  1894  020C                     _WPUAbits	set	524
  1895  020E                     _WPUC	set	526
  1896  020C                     _WPUA	set	524
  1897  0211                     _SSP1BUF	set	529
  1898  0214                     _SSP1STATbits	set	532
  1899  0215                     _SSP1CON1bits	set	533
  1900  028C                     _ODCONAbits	set	652
  1901  028E                     _ODCONC	set	654
  1902  028C                     _ODCONA	set	652
  1903  038E                     _INLVLC	set	910
  1904  038C                     _INLVLA	set	908
  1905  0919                     _OSCCON1bits	set	2329
  1906  0EA0                     _RC0PPSbits	set	3744
  1907  0EA2                     _RC2PPSbits	set	3746
  1908  0EA1                     _RC1PPSbits	set	3745
  1909  1829                     STR_13:	
  1910  1829  3425               	retlw	37	;'%'
  1911  182A  346C               	retlw	108	;'l'
  1912  182B  3475               	retlw	117	;'u'
  1913  182C  342E               	retlw	46	;'.'
  1914  182D  3425               	retlw	37	;'%'
  1915  182E  3436               	retlw	54	;'6'
  1916  182F  342E               	retlw	46	;'.'
  1917  1830  3436               	retlw	54	;'6'
  1918  1831  346C               	retlw	108	;'l'
  1919  1832  3475               	retlw	117	;'u'
  1920  1833  3400               	retlw	0
  1921                           
  1922                           	psect	stringtext4
  1923  1834                     __pstringtext4:	
  1924  1834                     STR_9:	
  1925  1834  3441               	retlw	65	;'A'
  1926  1835  344E               	retlw	78	;'N'
  1927  1836  3443               	retlw	67	;'C'
  1928  1837  3433               	retlw	51	;'3'
  1929  1838  346D               	retlw	109	;'m'
  1930  1839  3456               	retlw	86	;'V'
  1931  183A  3400               	retlw	0
  1932                           
  1933                           	psect	stringtext5
  1934  183B                     __pstringtext5:	
  1935  183B                     STR_10:	
  1936  183B  3452               	retlw	82	;'R'
  1937  183C  3446               	retlw	70	;'F'
  1938  183D  3450               	retlw	80	;'P'
  1939  183E  3457               	retlw	87	;'W'
  1940  183F  3452               	retlw	82	;'R'
  1941  1840  3400               	retlw	0
  1942                           
  1943                           	psect	stringtext6
  1944  1846                     __pstringtext6:	
  1945  1846                     STR_7:	
  1946  1846  3454               	retlw	84	;'T'
  1947  1847  3445               	retlw	69	;'E'
  1948  1848  344D               	retlw	77	;'M'
  1949  1849  3450               	retlw	80	;'P'
  1950  184A  3400               	retlw	0
  1951                           
  1952                           	psect	stringtext7
  1953  184B                     __pstringtext7:	
  1954  184B                     STR_8:	
  1955  184B  3456               	retlw	86	;'V'
  1956  184C  3442               	retlw	66	;'B'
  1957  184D  3441               	retlw	65	;'A'
  1958  184E  3454               	retlw	84	;'T'
  1959  184F  3400               	retlw	0
  1960                           
  1961                           	psect	stringtext8
  1962  1850                     __pstringtext8:	
  1963  1850                     STR_12:	
  1964  1850  3442               	retlw	66	;'B'
  1965  1851  344F               	retlw	79	;'O'
  1966  1852  344F               	retlw	79	;'O'
  1967  1853  3454               	retlw	84	;'T'
  1968  1854  3400               	retlw	0
  1969                           
  1970                           	psect	stringtext9
  1971  1855                     __pstringtext9:	
  1972  1855                     STR_6:	
  1973  1855  3444               	retlw	68	;'D'
  1974  1856  3442               	retlw	66	;'B'
  1975  1857  3447               	retlw	71	;'G'
  1976  1858  3400               	retlw	0
  1977                           
  1978                           	psect	stringtext10
  1979  1859                     __pstringtext10:	
  1980  1859                     STR_11:	
  1981  1859  3455               	retlw	85	;'U'
  1982  185A  3457               	retlw	87	;'W'
  1983  185B  3454               	retlw	84	;'T'
  1984  185C  3400               	retlw	0
  1985                           
  1986                           	psect	stringtext11
  1987  185D                     __pstringtext11:	
  1988  185D                     STR_1:	
  1989  185D  342F               	retlw	47	;'/'
  1990  185E  3400               	retlw	0
  1991                           
  1992                           	psect	stringtext12
  1993  0000                     __pstringtext12:	
  1994  185D                     
  1995                           ; #config settings
  1996  0000                     
  1997                           	psect	cinit
  1998  0011                     start_initialization:	
  1999  0011                     __initialization:	
  2000                           
  2001                           ; Initialize objects allocated to BANK1
  2002  0011  0021               	movlb	1	; select bank1
  2003  0012  3191  21CC  3180   	fcall	__pidataBANK1	;fetch initializer
  2004  0015  00EC               	movwf	__pdataBANK1& (0+127)
  2005                           
  2006                           ; Clear objects allocated to COMMON
  2007  0016  01FD               	clrf	__pbssCOMMON& (0+127)
  2008                           
  2009                           ; Clear objects allocated to BANK1
  2010  0017  01E8               	clrf	__pbssBANK1& (0+127)
  2011  0018  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  2012  0019  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  2013  001A  01EB               	clrf	(__pbssBANK1+3)& (0+127)
  2014                           
  2015                           ; Clear objects allocated to BANK2
  2016  001B  3050               	movlw	low __pbssBANK2
  2017  001C  0084               	movwf	4
  2018  001D  3001               	movlw	high __pbssBANK2
  2019  001E  0085               	movwf	5
  2020  001F  3014               	movlw	20
  2021  0020  3191  21DB  3180   	fcall	clear_ram0
  2022                           
  2023                           ; Clear objects allocated to BANK3
  2024  0023  30A0               	movlw	low __pbssBANK3
  2025  0024  0084               	movwf	4
  2026  0025  3001               	movlw	high __pbssBANK3
  2027  0026  0085               	movwf	5
  2028  0027  303D               	movlw	61
  2029  0028  3191  21DB         	fcall	clear_ram0
  2030  002A                     end_of_initialization:	
  2031                           ;End of C runtime variable initialization code
  2032                           
  2033  002A                     __end_of__initialization:	
  2034  002A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2035  002B  0020               	movlb	0
  2036  002C  318B  2B49         	ljmp	_main	;jump to C main() function
  2037                           
  2038                           	psect	bssCOMMON
  2039  007D                     __pbssCOMMON:	
  2040  007D                     strtok@sp:	
  2041  007D                     	ds	1
  2042                           
  2043                           	psect	bssBANK1
  2044  00E8                     __pbssBANK1:	
  2045  00E8                     _TXPacket:	
  2046  00E8                     	ds	2
  2047  00EA                     _sleepLoop:	
  2048  00EA                     	ds	1
  2049  00EB                     _nrf24l01:	
  2050  00EB                     	ds	1
  2051                           
  2052                           	psect	dataBANK1
  2053  00EC                     __pdataBANK1:	
  2054  00EC                     _romData:	
  2055  00EC                     	ds	1
  2056                           
  2057                           	psect	bssBANK2
  2058  0150                     __pbssBANK2:	
  2059  0150                     _counter:	
  2060  0150                     	ds	3
  2061  0153                     ftoa@buf:	
  2062  0153                     	ds	17
  2063                           
  2064                           	psect	bssBANK3
  2065  01A0                     __pbssBANK3:	
  2066  01A0                     _RXPacket:	
  2067  01A0                     	ds	33
  2068  01C1                     _romDataMap:	
  2069  01C1                     	ds	28
  2070                           
  2071                           	psect	clrtext
  2072  11DB                     clear_ram0:	
  2073                           ;	Called with FSR0 containing the base address, and
  2074                           ;	WREG with the size to clear
  2075                           
  2076  11DB  0064               	clrwdt	;clear the watchdog before getting into this loop
  2077  11DC                     clrloop0:	
  2078  11DC  0180               	clrf	0	;clear RAM location pointed to by FSR
  2079  11DD  3101               	addfsr 0,1
  2080  11DE  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2081  11DF  29DC               	goto	clrloop0	;have we reached the end yet?
  2082  11E0  3400               	retlw	0	;all done for this memory range, return
  2083                           
  2084                           	psect	cstackBANK2
  2085  0120                     __pcstackBANK2:	
  2086  0120                     loop@vt:	
  2087                           
  2088                           ; 3 bytes @ 0x0
  2089  0120                     	ds	3
  2090  0123                     loop@ta:	
  2091                           
  2092                           ; 3 bytes @ 0x3
  2093  0123                     	ds	3
  2094  0126                     _loop$2140:	
  2095                           
  2096                           ; 3 bytes @ 0x6
  2097  0126                     	ds	3
  2098  0129                     _loop$2141:	
  2099                           
  2100                           ; 3 bytes @ 0x9
  2101  0129                     	ds	3
  2102  012C                     loop@rfSetup:	
  2103                           
  2104                           ; 1 bytes @ 0xC
  2105  012C                     	ds	1
  2106  012D                     _loop$900:	
  2107                           
  2108                           ; 2 bytes @ 0xD
  2109  012D                     	ds	2
  2110  012F                     loop@packet:	
  2111                           
  2112                           ; 33 bytes @ 0xF
  2113  012F                     	ds	33
  2114                           
  2115                           	psect	cstackBANK1
  2116  00A0                     __pcstackBANK1:	
  2117  00A0                     ___fttol@sign1:	
  2118  00A0                     strtod@eexp:	
  2119                           ; 1 bytes @ 0x0
  2120                           
  2121                           
  2122                           ; 1 bytes @ 0x0
  2123  00A0                     	ds	1
  2124  00A1                     strtod@flags:	
  2125  00A1                     ___fttol@lval:	
  2126                           ; 1 bytes @ 0x1
  2127                           
  2128                           
  2129                           ; 4 bytes @ 0x1
  2130  00A1                     	ds	1
  2131  00A2                     strtod@expon:	
  2132                           
  2133                           ; 1 bytes @ 0x2
  2134  00A2                     	ds	1
  2135  00A3                     strtod@_u:	
  2136                           
  2137                           ; 4 bytes @ 0x3
  2138  00A3                     	ds	2
  2139  00A5                     ___fttol@exp1:	
  2140                           
  2141                           ; 1 bytes @ 0x5
  2142  00A5                     	ds	1
  2143  00A6                     ?_ftoa:	
  2144  00A6                     ftoa@f:	
  2145                           ; 1 bytes @ 0x6
  2146                           
  2147                           
  2148                           ; 3 bytes @ 0x6
  2149  00A6                     	ds	1
  2150  00A7                     strtod@s:	
  2151                           
  2152                           ; 1 bytes @ 0x7
  2153  00A7                     	ds	1
  2154  00A8                     ?_atof:	
  2155                           
  2156                           ; 3 bytes @ 0x8
  2157  00A8                     	ds	1
  2158  00A9                     ftoa@status:	
  2159                           
  2160                           ; 1 bytes @ 0x9
  2161  00A9                     	ds	1
  2162  00AA                     ftoa@rem:	
  2163                           
  2164                           ; 4 bytes @ 0xA
  2165  00AA                     	ds	2
  2166  00AC                     handleRXData@string:	
  2167                           
  2168                           ; 16 bytes @ 0xC
  2169  00AC                     	ds	2
  2170  00AE                     ftoa@l:	
  2171                           
  2172                           ; 4 bytes @ 0xE
  2173  00AE                     	ds	4
  2174  00B2                     ftoa@cp:	
  2175                           
  2176                           ; 1 bytes @ 0x12
  2177  00B2                     	ds	1
  2178  00B3                     ?_strcat:	
  2179  00B3                     strcat@to:	
  2180                           ; 2 bytes @ 0x13
  2181                           
  2182                           
  2183                           ; 2 bytes @ 0x13
  2184  00B3                     	ds	2
  2185  00B5                     strcat@from:	
  2186                           
  2187                           ; 2 bytes @ 0x15
  2188  00B5                     	ds	2
  2189  00B7                     strcat@cp:	
  2190                           
  2191                           ; 2 bytes @ 0x17
  2192  00B7                     	ds	2
  2193  00B9                     ?_setMessage:	
  2194  00B9                     setMessage@packet:	
  2195                           ; 1 bytes @ 0x19
  2196                           
  2197                           
  2198                           ; 2 bytes @ 0x19
  2199  00B9                     	ds	2
  2200  00BB                     setMessage@topic:	
  2201                           
  2202                           ; 2 bytes @ 0x1B
  2203  00BB                     	ds	1
  2204  00BC                     handleRXData@RXPacket:	
  2205                           
  2206                           ; 1 bytes @ 0x1C
  2207  00BC                     	ds	1
  2208  00BD                     handleRXData@strings:	
  2209  00BD                     setMessage@value:	
  2210                           ; 1 bytes @ 0x1D
  2211                           
  2212                           
  2213                           ; 3 bytes @ 0x1D
  2214  00BD                     	ds	1
  2215  00BE                     ?_sleep:	
  2216  00BE                     sleep@milliseconds:	
  2217                           ; 1 bytes @ 0x1E
  2218                           
  2219                           
  2220                           ; 2 bytes @ 0x1E
  2221  00BE                     	ds	2
  2222  00C0                     ??_sleep:	
  2223  00C0                     ??_setMessage:	
  2224                           ; 1 bytes @ 0x20
  2225                           
  2226                           
  2227                           ; 1 bytes @ 0x20
  2228  00C0                     	ds	1
  2229  00C1                     setMessage@status:	
  2230                           
  2231                           ; 2 bytes @ 0x21
  2232  00C1                     	ds	2
  2233  00C3                     ??_loop:	
  2234                           
  2235                           ; 1 bytes @ 0x23
  2236  00C3                     	ds	1
  2237  00C4                     ??_main:	
  2238                           
  2239                           ; 1 bytes @ 0x24
  2240  00C4                     	ds	1
  2241  00C5                     main@bootStatus:	
  2242                           
  2243                           ; 1 bytes @ 0x25
  2244  00C5                     	ds	1
  2245  00C6                     main@pipe:	
  2246                           
  2247                           ; 1 bytes @ 0x26
  2248  00C6                     	ds	1
  2249  00C7                     main@packet:	
  2250                           
  2251                           ; 33 bytes @ 0x27
  2252  00C7                     	ds	33
  2253                           
  2254                           	psect	cstackCOMMON
  2255  0070                     __pcstackCOMMON:	
  2256  0070                     ?_isdigit:	
  2257  0070                     ?_isspace:	
  2258                           ; 1 bit 
  2259                           
  2260  0070                     ?_nrf24l01ISR:	
  2261                           ; 1 bit 
  2262                           
  2263  0070                     ?_nrf24l01GetRXPacket:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0070                     ?_nrf24l01SendACK:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0070                     ?_nrf24l01SetRXMode:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0070                     ?_nrf24l01Init:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0070                     ?_nrf24l01SetTXPipe:	
  2276                           ; 1 bytes @ 0x0
  2277                           
  2278  0070                     ?_nrf24l01SetRXPipe:	
  2279                           ; 1 bytes @ 0x0
  2280                           
  2281  0070                     ?_nrf24l01CELow:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  0070                     ??_nrf24l01CELow:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  0070                     ?_nrf24l01CEHigh:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0070                     ??_nrf24l01CEHigh:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0070                     ?_nrf24l01CSLow:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0070                     ??_nrf24l01CSLow:	
  2297                           ; 1 bytes @ 0x0
  2298                           
  2299  0070                     ?_nrf24l01CSHigh:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0070                     ??_nrf24l01CSHigh:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0070                     ?_nrf24l01InterfaceInit:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0070                     ?_nrf24l01SPISend:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0070                     ??_nrf24l01SPISend:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0070                     ?_nrf24l01SPIStart:	
  2315                           ; 1 bytes @ 0x0
  2316                           
  2317  0070                     ??_nrf24l01SPIStart:	
  2318                           ; 1 bytes @ 0x0
  2319                           
  2320  0070                     ?_nrf24l01SPIEnd:	
  2321                           ; 1 bytes @ 0x0
  2322                           
  2323  0070                     ??_nrf24l01SPIEnd:	
  2324                           ; 1 bytes @ 0x0
  2325                           
  2326  0070                     ?_enableInterrupts:	
  2327                           ; 1 bytes @ 0x0
  2328                           
  2329  0070                     ??_enableInterrupts:	
  2330                           ; 1 bytes @ 0x0
  2331                           
  2332  0070                     ?_exception:	
  2333                           ; 1 bytes @ 0x0
  2334                           
  2335  0070                     ??_exception:	
  2336                           ; 1 bytes @ 0x0
  2337                           
  2338  0070                     ?_ISR:	
  2339                           ; 1 bytes @ 0x0
  2340                           
  2341  0070                     ?_doWDTSleep:	
  2342                           ; 1 bytes @ 0x0
  2343                           
  2344  0070                     ?_handleRXData:	
  2345                           ; 1 bytes @ 0x0
  2346                           
  2347  0070                     ?_checkTXPower:	
  2348                           ; 1 bytes @ 0x0
  2349                           
  2350  0070                     ?_loop:	
  2351                           ; 1 bytes @ 0x0
  2352                           
  2353  0070                     ?_nrf24l01GetPipe:	
  2354                           ; 1 bytes @ 0x0
  2355                           
  2356  0070                     ?_main:	
  2357                           ; 1 bytes @ 0x0
  2358                           
  2359  0070                     ?_nrf24l01CheckACK:	
  2360                           ; 1 bytes @ 0x0
  2361                           
  2362  0070                     ?_nrf24l01ReceivePacket:	
  2363                           ; 1 bytes @ 0x0
  2364                           
  2365  0070                     ?_nrf24l01InitRegisters:	
  2366                           ; 1 bytes @ 0x0
  2367                           
  2368  0070                     ?i1_nrf24l01SetRXMode:	
  2369                           ; 1 bytes @ 0x0
  2370                           
  2371  0070                     ?i1_memset:	
  2372                           ; 1 bytes @ 0x0
  2373                           
  2374  0070                     ?i1_strcmp:	
  2375                           ; 1 bytes @ 0x0
  2376                           
  2377  0070                     nrf24l01SPISend@data:	
  2378                           ; 2 bytes @ 0x0
  2379                           
  2380  0070                     enableInterrupts@enable:	
  2381                           ; 1 bytes @ 0x0
  2382                           
  2383  0070                     exception@exception:	
  2384                           ; 1 bytes @ 0x0
  2385                           
  2386  0070                     i1memset@p1:	
  2387                           ; 1 bytes @ 0x0
  2388                           
  2389  0070                     i1strcmp@s1:	
  2390                           ; 2 bytes @ 0x0
  2391                           
  2392                           
  2393                           ; 2 bytes @ 0x0
  2394  0070                     	ds	1
  2395  0071                     ?i1_nrf24l01Send:	
  2396  0071                     i1nrf24l01Send@data:	
  2397                           ; 1 bytes @ 0x1
  2398                           
  2399                           
  2400                           ; 1 bytes @ 0x1
  2401  0071                     	ds	1
  2402  0072                     ??i1_nrf24l01Send:	
  2403  0072                     i1strcmp@s2:	
  2404                           ; 1 bytes @ 0x2
  2405                           
  2406  0072                     i1memset@c:	
  2407                           ; 1 bytes @ 0x2
  2408                           
  2409                           
  2410                           ; 2 bytes @ 0x2
  2411  0072                     	ds	1
  2412  0073                     ??i1_strcmp:	
  2413  0073                     i1nrf24l01Send@command:	
  2414                           ; 1 bytes @ 0x3
  2415                           
  2416                           
  2417                           ; 1 bytes @ 0x3
  2418  0073                     	ds	1
  2419  0074                     ??i1_nrf24l01SetRXMode:	
  2420  0074                     i1strcmp@r:	
  2421                           ; 1 bytes @ 0x4
  2422                           
  2423  0074                     i1memset@n:	
  2424                           ; 1 bytes @ 0x4
  2425                           
  2426                           
  2427                           ; 2 bytes @ 0x4
  2428  0074                     	ds	1
  2429  0075                     i1nrf24l01SetRXMode@config:	
  2430                           
  2431                           ; 1 bytes @ 0x5
  2432  0075                     	ds	1
  2433  0076                     ??i1_memset:	
  2434  0076                     i1nrf24l01SetRXMode@rxMode:	
  2435                           ; 1 bytes @ 0x6
  2436                           
  2437  0076                     i1memset@p:	
  2438                           ; 1 bytes @ 0x6
  2439                           
  2440                           
  2441                           ; 2 bytes @ 0x6
  2442  0076                     	ds	1
  2443  0077                     ??_nrf24l01CheckACK:	
  2444                           
  2445                           ; 1 bytes @ 0x7
  2446  0077                     	ds	1
  2447  0078                     ??_nrf24l01ReceivePacket:	
  2448                           
  2449                           ; 1 bytes @ 0x8
  2450  0078                     	ds	1
  2451  0079                     nrf24l01ReceivePacket@width:	
  2452                           
  2453                           ; 1 bytes @ 0x9
  2454  0079                     	ds	1
  2455  007A                     nrf24l01ReceivePacket@i:	
  2456                           
  2457                           ; 1 bytes @ 0xA
  2458  007A                     	ds	1
  2459  007B                     ??_nrf24l01ISR:	
  2460                           
  2461                           ; 1 bytes @ 0xB
  2462  007B                     	ds	1
  2463  007C                     nrf24l01ISR@status:	
  2464                           
  2465                           ; 1 bytes @ 0xC
  2466  007C                     	ds	1
  2467  007D                     ??_ISR:	
  2468                           
  2469                           	psect	cstackBANK0
  2470  0020                     __pcstackBANK0:	
  2471                           ; 1 bytes @ 0xD
  2472                           
  2473  0020                     ?___ftge:	
  2474  0020                     ??_nrf24l01GetRXPacket:	
  2475                           ; 1 bit 
  2476                           
  2477  0020                     ?_nrf24l01Send:	
  2478                           ; 1 bytes @ 0x0
  2479                           
  2480  0020                     ??_isdigit:	
  2481                           ; 1 bytes @ 0x0
  2482                           
  2483  0020                     ??_isspace:	
  2484                           ; 1 bytes @ 0x0
  2485                           
  2486  0020                     ??_nrf24l01InterfaceInit:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0020                     ??_doWDTSleep:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492  0020                     ?___bmul:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495  0020                     ?_strcpy:	
  2496                           ; 1 bytes @ 0x0
  2497                           
  2498  0020                     ?_strcmp:	
  2499                           ; 2 bytes @ 0x0
  2500                           
  2501  0020                     ?_memset:	
  2502                           ; 2 bytes @ 0x0
  2503                           
  2504  0020                     ?_strlen:	
  2505                           ; 2 bytes @ 0x0
  2506                           
  2507  0020                     ?_strchr:	
  2508                           ; 2 bytes @ 0x0
  2509                           
  2510  0020                     ?___wmul:	
  2511                           ; 2 bytes @ 0x0
  2512                           
  2513  0020                     ?___lwmod:	
  2514                           ; 2 bytes @ 0x0
  2515                           
  2516  0020                     ?___ftpack:	
  2517                           ; 2 bytes @ 0x0
  2518                           
  2519  0020                     ?___lmul:	
  2520                           ; 3 bytes @ 0x0
  2521                           
  2522  0020                     ?___lldiv:	
  2523                           ; 4 bytes @ 0x0
  2524                           
  2525  0020                     nrf24l01Send@data:	
  2526                           ; 4 bytes @ 0x0
  2527                           
  2528  0020                     ___bmul@multiplicand:	
  2529                           ; 1 bytes @ 0x0
  2530                           
  2531  0020                     _isdigit$1851:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534  0020                     _isspace$1854:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0020                     ___wmul@multiplier:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540  0020                     ___lwmod@divisor:	
  2541                           ; 2 bytes @ 0x0
  2542                           
  2543  0020                     memset@p1:	
  2544                           ; 2 bytes @ 0x0
  2545                           
  2546  0020                     strcmp@s1:	
  2547                           ; 2 bytes @ 0x0
  2548                           
  2549  0020                     strcpy@to:	
  2550                           ; 2 bytes @ 0x0
  2551                           
  2552  0020                     strlen@s:	
  2553                           ; 2 bytes @ 0x0
  2554                           
  2555  0020                     strchr@ptr:	
  2556                           ; 2 bytes @ 0x0
  2557                           
  2558  0020                     ___ftpack@arg:	
  2559                           ; 2 bytes @ 0x0
  2560                           
  2561  0020                     ___ftge@ff1:	
  2562                           ; 3 bytes @ 0x0
  2563                           
  2564  0020                     ___lmul@multiplier:	
  2565                           ; 3 bytes @ 0x0
  2566                           
  2567  0020                     ___lldiv@divisor:	
  2568                           ; 4 bytes @ 0x0
  2569                           
  2570                           
  2571                           ; 4 bytes @ 0x0
  2572  0020                     	ds	1
  2573  0021                     ??_nrf24l01Send:	
  2574  0021                     ??___bmul:	
  2575                           ; 1 bytes @ 0x1
  2576                           
  2577  0021                     doWDTSleep@wdtps:	
  2578                           ; 1 bytes @ 0x1
  2579                           
  2580  0021                     isdigit@c:	
  2581                           ; 1 bytes @ 0x1
  2582                           
  2583  0021                     isspace@c:	
  2584                           ; 1 bytes @ 0x1
  2585                           
  2586                           
  2587                           ; 1 bytes @ 0x1
  2588  0021                     	ds	1
  2589  0022                     ??_strlen:	
  2590  0022                     nrf24l01Send@command:	
  2591                           ; 1 bytes @ 0x2
  2592                           
  2593  0022                     ___bmul@product:	
  2594                           ; 1 bytes @ 0x2
  2595                           
  2596  0022                     strcmp@s2:	
  2597                           ; 1 bytes @ 0x2
  2598                           
  2599  0022                     ___wmul@multiplicand:	
  2600                           ; 1 bytes @ 0x2
  2601                           
  2602  0022                     ___lwmod@dividend:	
  2603                           ; 2 bytes @ 0x2
  2604                           
  2605  0022                     memset@c:	
  2606                           ; 2 bytes @ 0x2
  2607                           
  2608  0022                     strcpy@from:	
  2609                           ; 2 bytes @ 0x2
  2610                           
  2611  0022                     strchr@chr:	
  2612                           ; 2 bytes @ 0x2
  2613                           
  2614                           
  2615                           ; 2 bytes @ 0x2
  2616  0022                     	ds	1
  2617  0023                     ??_strcmp:	
  2618  0023                     ??_nrf24l01SetRXMode:	
  2619                           ; 1 bytes @ 0x3
  2620                           
  2621  0023                     ?_nrf24l01ChangeTXPower:	
  2622                           ; 1 bytes @ 0x3
  2623                           
  2624  0023                     ??_nrf24l01SetRXPipe:	
  2625                           ; 1 bytes @ 0x3
  2626                           
  2627  0023                     ___bmul@multiplier:	
  2628                           ; 1 bytes @ 0x3
  2629                           
  2630  0023                     ___ftpack@exp:	
  2631                           ; 1 bytes @ 0x3
  2632                           
  2633  0023                     nrf24l01ChangeTXPower@addPower:	
  2634                           ; 1 bytes @ 0x3
  2635                           
  2636  0023                     ___ftge@ff2:	
  2637                           ; 2 bytes @ 0x3
  2638                           
  2639                           
  2640                           ; 3 bytes @ 0x3
  2641  0023                     	ds	1
  2642  0024                     ??_strcpy:	
  2643  0024                     ??_nrf24l01SetTXPipe:	
  2644                           ; 1 bytes @ 0x4
  2645                           
  2646  0024                     ??_strchr:	
  2647                           ; 1 bytes @ 0x4
  2648                           
  2649  0024                     ??___wmul:	
  2650                           ; 1 bytes @ 0x4
  2651                           
  2652  0024                     ??___lwmod:	
  2653                           ; 1 bytes @ 0x4
  2654                           
  2655  0024                     nrf24l01SetRXMode@config:	
  2656                           ; 1 bytes @ 0x4
  2657                           
  2658  0024                     ___ftpack@sign:	
  2659                           ; 1 bytes @ 0x4
  2660                           
  2661  0024                     strcmp@r:	
  2662                           ; 1 bytes @ 0x4
  2663                           
  2664  0024                     ___wmul@product:	
  2665                           ; 1 bytes @ 0x4
  2666                           
  2667  0024                     memset@n:	
  2668                           ; 2 bytes @ 0x4
  2669                           
  2670  0024                     strcpy@cp:	
  2671                           ; 2 bytes @ 0x4
  2672                           
  2673  0024                     strlen@cp:	
  2674                           ; 2 bytes @ 0x4
  2675                           
  2676  0024                     ___lmul@multiplicand:	
  2677                           ; 2 bytes @ 0x4
  2678                           
  2679  0024                     ___lldiv@dividend:	
  2680                           ; 4 bytes @ 0x4
  2681                           
  2682                           
  2683                           ; 4 bytes @ 0x4
  2684  0024                     	ds	1
  2685  0025                     ??_nrf24l01ChangeTXPower:	
  2686  0025                     ??___ftpack:	
  2687                           ; 1 bytes @ 0x5
  2688                           
  2689  0025                     nrf24l01SetRXMode@rxMode:	
  2690                           ; 1 bytes @ 0x5
  2691                           
  2692  0025                     nrf24l01SetRXPipe@pipe:	
  2693                           ; 1 bytes @ 0x5
  2694                           
  2695  0025                     ___lwmod@counter:	
  2696                           ; 1 bytes @ 0x5
  2697                           
  2698                           
  2699                           ; 1 bytes @ 0x5
  2700  0025                     	ds	1
  2701  0026                     ??_memset:	
  2702  0026                     ??_nrf24l01GetPipe:	
  2703                           ; 1 bytes @ 0x6
  2704                           
  2705  0026                     ??___ftge:	
  2706                           ; 1 bytes @ 0x6
  2707                           
  2708  0026                     nrf24l01ChangeTXPower@rfSetup:	
  2709                           ; 1 bytes @ 0x6
  2710                           
  2711  0026                     nrf24l01SetTXPipe@pipe:	
  2712                           ; 1 bytes @ 0x6
  2713                           
  2714  0026                     nrf24l01SetRXPipe@enRXAddr:	
  2715                           ; 1 bytes @ 0x6
  2716                           
  2717  0026                     memset@p:	
  2718                           ; 1 bytes @ 0x6
  2719                           
  2720                           
  2721                           ; 2 bytes @ 0x6
  2722  0026                     	ds	1
  2723  0027                     ?_nrf24l01SendPacket:	
  2724  0027                     ??_checkTXPower:	
  2725                           ; 1 bytes @ 0x7
  2726                           
  2727  0027                     ??_nrf24l01InitRegisters:	
  2728                           ; 1 bytes @ 0x7
  2729                           
  2730  0027                     ?_strspn:	
  2731                           ; 1 bytes @ 0x7
  2732                           
  2733  0027                     ?_strcspn:	
  2734                           ; 2 bytes @ 0x7
  2735                           
  2736  0027                     nrf24l01SendPacket@Packet:	
  2737                           ; 2 bytes @ 0x7
  2738                           
  2739  0027                     strcspn@s2:	
  2740                           ; 2 bytes @ 0x7
  2741                           
  2742  0027                     strspn@s2:	
  2743                           ; 2 bytes @ 0x7
  2744                           
  2745                           
  2746                           ; 2 bytes @ 0x7
  2747  0027                     	ds	1
  2748  0028                     ??___lmul:	
  2749  0028                     ??___lldiv:	
  2750                           ; 1 bytes @ 0x8
  2751                           
  2752  0028                     ?___altoft:	
  2753                           ; 1 bytes @ 0x8
  2754                           
  2755  0028                     ?___awtoft:	
  2756                           ; 3 bytes @ 0x8
  2757                           
  2758  0028                     ?___lbtoft:	
  2759                           ; 3 bytes @ 0x8
  2760                           
  2761  0028                     ?___lltoft:	
  2762                           ; 3 bytes @ 0x8
  2763                           
  2764  0028                     checkTXPower@rxPacket:	
  2765                           ; 3 bytes @ 0x8
  2766                           
  2767  0028                     nrf24l01GetPipe@pipe:	
  2768                           ; 1 bytes @ 0x8
  2769                           
  2770  0028                     ___awtoft@c:	
  2771                           ; 1 bytes @ 0x8
  2772                           
  2773  0028                     ___lmul@product:	
  2774                           ; 2 bytes @ 0x8
  2775                           
  2776  0028                     ___altoft@c:	
  2777                           ; 4 bytes @ 0x8
  2778                           
  2779  0028                     ___lltoft@c:	
  2780                           ; 4 bytes @ 0x8
  2781                           
  2782                           
  2783                           ; 4 bytes @ 0x8
  2784  0028                     	ds	1
  2785  0029                     ??_nrf24l01SendPacket:	
  2786  0029                     ??_strspn:	
  2787                           ; 1 bytes @ 0x9
  2788                           
  2789  0029                     ??_strcspn:	
  2790                           ; 1 bytes @ 0x9
  2791                           
  2792  0029                     nrf24l01GetPipe@name:	
  2793                           ; 1 bytes @ 0x9
  2794                           
  2795  0029                     nrf24l01InitRegisters@channel:	
  2796                           ; 1 bytes @ 0x9
  2797                           
  2798  0029                     ___lldiv@quotient:	
  2799                           ; 1 bytes @ 0x9
  2800                           
  2801                           
  2802                           ; 4 bytes @ 0x9
  2803  0029                     	ds	1
  2804  002A                     nrf24l01GetPipe@i:	
  2805  002A                     nrf24l01InitRegisters@setupAW:	
  2806                           ; 1 bytes @ 0xA
  2807                           
  2808                           
  2809                           ; 1 bytes @ 0xA
  2810  002A                     	ds	1
  2811  002B                     ??___awtoft:	
  2812  002B                     ??___lbtoft:	
  2813                           ; 1 bytes @ 0xB
  2814                           
  2815  002B                     nrf24l01InitRegisters@feature:	
  2816                           ; 1 bytes @ 0xB
  2817                           
  2818  002B                     strcspn@i:	
  2819                           ; 1 bytes @ 0xB
  2820                           
  2821  002B                     strspn@i:	
  2822                           ; 2 bytes @ 0xB
  2823                           
  2824                           
  2825                           ; 2 bytes @ 0xB
  2826  002B                     	ds	1
  2827  002C                     ??___altoft:	
  2828  002C                     ??___lltoft:	
  2829                           ; 1 bytes @ 0xC
  2830                           
  2831  002C                     nrf24l01InitRegisters@rfSetup:	
  2832                           ; 1 bytes @ 0xC
  2833                           
  2834                           
  2835                           ; 1 bytes @ 0xC
  2836  002C                     	ds	1
  2837  002D                     nrf24l01SendPacket@i:	
  2838  002D                     nrf24l01InitRegisters@status:	
  2839                           ; 1 bytes @ 0xD
  2840                           
  2841  002D                     ___lldiv@counter:	
  2842                           ; 1 bytes @ 0xD
  2843                           
  2844  002D                     ___awtoft@sign:	
  2845                           ; 1 bytes @ 0xD
  2846                           
  2847  002D                     ___lltoft@exp:	
  2848                           ; 1 bytes @ 0xD
  2849                           
  2850  002D                     strcspn@s1:	
  2851                           ; 1 bytes @ 0xD
  2852                           
  2853  002D                     strspn@s1:	
  2854                           ; 1 bytes @ 0xD
  2855                           
  2856                           
  2857                           ; 1 bytes @ 0xD
  2858  002D                     	ds	1
  2859  002E                     ?_strtok:	
  2860  002E                     ??_nrf24l01SendACK:	
  2861                           ; 1 bytes @ 0xE
  2862                           
  2863  002E                     ?___ftadd:	
  2864                           ; 1 bytes @ 0xE
  2865                           
  2866  002E                     ?___llmod:	
  2867                           ; 3 bytes @ 0xE
  2868                           
  2869  002E                     nrf24l01InitRegisters@enAA:	
  2870                           ; 4 bytes @ 0xE
  2871                           
  2872  002E                     ___altoft@exp:	
  2873                           ; 1 bytes @ 0xE
  2874                           
  2875  002E                     strtok@s2:	
  2876                           ; 1 bytes @ 0xE
  2877                           
  2878  002E                     ___ftadd@f1:	
  2879                           ; 2 bytes @ 0xE
  2880                           
  2881  002E                     ___llmod@divisor:	
  2882                           ; 3 bytes @ 0xE
  2883                           
  2884                           
  2885                           ; 4 bytes @ 0xE
  2886  002E                     	ds	1
  2887  002F                     nrf24l01SendACK@packet:	
  2888  002F                     nrf24l01InitRegisters@DynPD:	
  2889                           ; 1 bytes @ 0xF
  2890                           
  2891  002F                     ___altoft@sign:	
  2892                           ; 1 bytes @ 0xF
  2893                           
  2894  002F                     ___lbtoft@c:	
  2895                           ; 1 bytes @ 0xF
  2896                           
  2897                           
  2898                           ; 1 bytes @ 0xF
  2899  002F                     	ds	1
  2900  0030                     ??_strtok:	
  2901  0030                     nrf24l01InitRegisters@config:	
  2902                           ; 1 bytes @ 0x10
  2903                           
  2904                           
  2905                           ; 1 bytes @ 0x10
  2906  0030                     	ds	1
  2907  0031                     nrf24l01InitRegisters@i:	
  2908  0031                     ___ftadd@f2:	
  2909                           ; 2 bytes @ 0x11
  2910                           
  2911                           
  2912                           ; 3 bytes @ 0x11
  2913  0031                     	ds	1
  2914  0032                     ___llmod@dividend:	
  2915                           
  2916                           ; 4 bytes @ 0x12
  2917  0032                     	ds	1
  2918  0033                     ??_nrf24l01Init:	
  2919  0033                     strtok@s1:	
  2920                           ; 1 bytes @ 0x13
  2921                           
  2922                           
  2923                           ; 1 bytes @ 0x13
  2924  0033                     	ds	1
  2925  0034                     ??___ftadd:	
  2926                           
  2927                           ; 1 bytes @ 0x14
  2928  0034                     	ds	2
  2929  0036                     ??___llmod:	
  2930                           
  2931                           ; 1 bytes @ 0x16
  2932  0036                     	ds	1
  2933  0037                     ___llmod@counter:	
  2934                           
  2935                           ; 1 bytes @ 0x17
  2936  0037                     	ds	1
  2937  0038                     ?_sprintf:	
  2938  0038                     ___ftadd@sign:	
  2939                           ; 2 bytes @ 0x18
  2940                           
  2941  0038                     sprintf@f:	
  2942                           ; 1 bytes @ 0x18
  2943                           
  2944                           
  2945                           ; 2 bytes @ 0x18
  2946  0038                     	ds	1
  2947  0039                     ___ftadd@exp2:	
  2948                           
  2949                           ; 1 bytes @ 0x19
  2950  0039                     	ds	1
  2951  003A                     ___ftadd@exp1:	
  2952                           
  2953                           ; 1 bytes @ 0x1A
  2954  003A                     	ds	1
  2955  003B                     ?___ftdiv:	
  2956  003B                     ?___ftsub:	
  2957                           ; 3 bytes @ 0x1B
  2958                           
  2959  003B                     ___ftdiv@f2:	
  2960                           ; 3 bytes @ 0x1B
  2961                           
  2962  003B                     ___ftsub@f2:	
  2963                           ; 3 bytes @ 0x1B
  2964                           
  2965                           
  2966                           ; 3 bytes @ 0x1B
  2967  003B                     	ds	3
  2968  003E                     ___ftdiv@f1:	
  2969  003E                     ___ftsub@f1:	
  2970                           ; 3 bytes @ 0x1E
  2971                           
  2972                           
  2973                           ; 3 bytes @ 0x1E
  2974  003E                     	ds	3
  2975  0041                     ??___ftdiv:	
  2976  0041                     ??___ftsub:	
  2977                           ; 1 bytes @ 0x21
  2978                           
  2979                           
  2980                           ; 1 bytes @ 0x21
  2981  0041                     	ds	1
  2982  0042                     ??_sprintf:	
  2983                           
  2984                           ; 1 bytes @ 0x22
  2985  0042                     	ds	3
  2986  0045                     ___ftdiv@cntr:	
  2987                           
  2988                           ; 1 bytes @ 0x25
  2989  0045                     	ds	1
  2990  0046                     ___ftdiv@f3:	
  2991                           
  2992                           ; 3 bytes @ 0x26
  2993  0046                     	ds	2
  2994  0048                     sprintf@flag:	
  2995                           
  2996                           ; 1 bytes @ 0x28
  2997  0048                     	ds	1
  2998  0049                     sprintf@ap:	
  2999  0049                     ___ftdiv@exp:	
  3000                           ; 1 bytes @ 0x29
  3001                           
  3002                           
  3003                           ; 1 bytes @ 0x29
  3004  0049                     	ds	1
  3005  004A                     ___ftdiv@sign:	
  3006  004A                     sprintf@val:	
  3007                           ; 1 bytes @ 0x2A
  3008                           
  3009                           
  3010                           ; 4 bytes @ 0x2A
  3011  004A                     	ds	1
  3012  004B                     ?_getADCValue:	
  3013                           
  3014                           ; 3 bytes @ 0x2B
  3015  004B                     	ds	3
  3016  004E                     ??_getADCValue:	
  3017  004E                     sprintf@sp:	
  3018                           ; 1 bytes @ 0x2E
  3019                           
  3020                           
  3021                           ; 1 bytes @ 0x2E
  3022  004E                     	ds	1
  3023  004F                     sprintf@width:	
  3024                           
  3025                           ; 2 bytes @ 0x2F
  3026  004F                     	ds	2
  3027  0051                     getADCValue@adcLoop:	
  3028  0051                     sprintf@prec:	
  3029                           ; 2 bytes @ 0x31
  3030                           
  3031                           
  3032                           ; 2 bytes @ 0x31
  3033  0051                     	ds	2
  3034  0053                     getADCValue@channel:	
  3035  0053                     sprintf@c:	
  3036                           ; 1 bytes @ 0x33
  3037                           
  3038                           
  3039                           ; 1 bytes @ 0x33
  3040  0053                     	ds	1
  3041  0054                     getADCValue@adcSum:	
  3042                           
  3043                           ; 3 bytes @ 0x34
  3044  0054                     	ds	3
  3045  0057                     ?___ftmul:	
  3046  0057                     ?___ftneg:	
  3047                           ; 3 bytes @ 0x37
  3048                           
  3049  0057                     ___ftmul@f1:	
  3050                           ; 3 bytes @ 0x37
  3051                           
  3052  0057                     ___ftneg@f1:	
  3053                           ; 3 bytes @ 0x37
  3054                           
  3055                           
  3056                           ; 3 bytes @ 0x37
  3057  0057                     	ds	3
  3058  005A                     ??___ftneg:	
  3059  005A                     ___ftmul@f2:	
  3060                           ; 1 bytes @ 0x3A
  3061                           
  3062                           
  3063                           ; 3 bytes @ 0x3A
  3064  005A                     	ds	3
  3065  005D                     ??___ftmul:	
  3066                           
  3067                           ; 1 bytes @ 0x3D
  3068  005D                     	ds	4
  3069  0061                     ___ftmul@exp:	
  3070                           
  3071                           ; 1 bytes @ 0x41
  3072  0061                     	ds	1
  3073  0062                     ___ftmul@f3_as_product:	
  3074                           
  3075                           ; 3 bytes @ 0x42
  3076  0062                     	ds	3
  3077  0065                     ___ftmul@cntr:	
  3078                           
  3079                           ; 1 bytes @ 0x45
  3080  0065                     	ds	1
  3081  0066                     ___ftmul@sign:	
  3082                           
  3083                           ; 1 bytes @ 0x46
  3084  0066                     	ds	1
  3085  0067                     ?_strtod:	
  3086  0067                     ?___fttol:	
  3087                           ; 3 bytes @ 0x47
  3088                           
  3089  0067                     strtod@res:	
  3090                           ; 4 bytes @ 0x47
  3091                           
  3092  0067                     ___fttol@f1:	
  3093                           ; 1 bytes @ 0x47
  3094                           
  3095                           
  3096                           ; 3 bytes @ 0x47
  3097  0067                     	ds	3
  3098  006A                     ??_strtod:	
  3099                           
  3100                           ; 1 bytes @ 0x4A
  3101  006A                     	ds	1
  3102  006B                     ??___fttol:	
  3103                           
  3104                           ; 1 bytes @ 0x4B
  3105  006B                     	ds	3
  3106  006E                     ??_atof:	
  3107  006E                     atof@s:	
  3108                           ; 1 bytes @ 0x4E
  3109                           
  3110                           
  3111                           ; 1 bytes @ 0x4E
  3112  006E                     	ds	1
  3113  006F                     ??_ftoa:	
  3114  006F                     ??_handleRXData:	
  3115                           ; 1 bytes @ 0x4F
  3116                           
  3117                           
  3118                           ; 1 bytes @ 0x4F
  3119  006F                     	ds	1
  3120  0070                     ??_strcat:	
  3121                           
  3122                           	psect	maintext
  3123  0B49                     __pmaintext:	
  3124                           ; 1 bytes @ 0x50
  3125 ;;
  3126 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3127 ;;
  3128 ;; *************** function _main *****************
  3129 ;; Defined at:
  3130 ;;		line 245 in file "main.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;		None
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;  packet         33   39[BANK1 ] struct .
  3135 ;;  pipe            1   38[BANK1 ] unsigned char 
  3136 ;;  bootStatus      1   37[BANK1 ] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      void 
  3139 ;; Registers used:
  3140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : B1F/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3147 ;;      Locals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3148 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3149 ;;      Totals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  3150 ;;Total ram usage:       36 bytes
  3151 ;; Hardware stack levels required when called:   16
  3152 ;; This function calls:
  3153 ;;		___lbtoft
  3154 ;;		_loop
  3155 ;;		_nrf24l01GetPipe
  3156 ;;		_nrf24l01Init
  3157 ;;		_nrf24l01SendPacket
  3158 ;;		_nrf24l01SetRXPipe
  3159 ;;		_nrf24l01SetTXPipe
  3160 ;;		_setMessage
  3161 ;;		_sleep
  3162 ;;		_strcpy
  3163 ;; This function is called by:
  3164 ;;		Startup code after reset
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           
  3169                           ;psect for function _main
  3170  0B49                     _main:	
  3171                           
  3172                           ;main.c: 247: unsigned char bootStatus = STATUS;
  3173                           
  3174                           ;incstack = 0
  3175                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3176  0B49  0020               	movlb	0	; select bank0
  3177  0B4A  0803               	movf	3,w	;volatile
  3178  0B4B  0021               	movlb	1	; select bank1
  3179  0B4C  00C4               	movwf	??_main^(0+128)
  3180  0B4D  0844               	movf	??_main^(0+128),w
  3181  0B4E  00C5               	movwf	main@bootStatus^(0+128)
  3182                           
  3183                           ;main.c: 250: ANSELA = 0x00;
  3184  0B4F  0023               	movlb	3	; select bank3
  3185  0B50  018C               	clrf	12	;volatile
  3186                           
  3187                           ;main.c: 251: ANSELC = 0x00;
  3188  0B51  018E               	clrf	14	;volatile
  3189                           
  3190                           ;main.c: 253: ODCONA = 0x00;
  3191  0B52  0025               	movlb	5	; select bank5
  3192  0B53  018C               	clrf	12	;volatile
  3193                           
  3194                           ;main.c: 254: ODCONC = 0x00;
  3195  0B54  018E               	clrf	14	;volatile
  3196                           
  3197                           ;main.c: 259: INLVLA = 0x00;
  3198  0B55  0027               	movlb	7	; select bank7
  3199  0B56  018C               	clrf	12	;volatile
  3200                           
  3201                           ;main.c: 260: INLVLC = 0x00;
  3202  0B57  018E               	clrf	14	;volatile
  3203                           
  3204                           ;main.c: 262: WPUA = 0x00;
  3205  0B58  0024               	movlb	4	; select bank4
  3206  0B59  018C               	clrf	12	;volatile
  3207                           
  3208                           ;main.c: 263: WPUC = 0x00;
  3209  0B5A  018E               	clrf	14	;volatile
  3210                           
  3211                           ;main.c: 265: TRISCbits.TRISC5 = 0;
  3212  0B5B  0021               	movlb	1	; select bank1
  3213  0B5C  128E               	bcf	14,5	;volatile
  3214                           
  3215                           ;main.c: 266: TRISCbits.TRISC4 = 0;
  3216  0B5D  120E               	bcf	14,4	;volatile
  3217                           
  3218                           ;main.c: 268: PORTCbits.RC4 = 0;
  3219  0B5E  0020               	movlb	0	; select bank0
  3220  0B5F  120E               	bcf	14,4	;volatile
  3221                           
  3222                           ;main.c: 275: INTCONbits.PEIE = 0;
  3223  0B60  130B               	bcf	11,6	;volatile
  3224                           
  3225                           ;main.c: 276: INTCONbits.GIE = 0;
  3226  0B61  138B               	bcf	11,7	;volatile
  3227                           
  3228                           ;main.c: 278: OSCCON1bits.NOSC = 0b000;
  3229  0B62  308F               	movlw	-113
  3230  0B63  0032               	movlb	18	; select bank18
  3231  0B64  0599               	andwf	25,f	;volatile
  3232                           
  3233                           ;main.c: 279: OSCCON1bits.NDIV = 0b000;
  3234  0B65  30F0               	movlw	-16
  3235  0B66  0599               	andwf	25,f	;volatile
  3236                           
  3237                           ;main.c: 281: _delay((unsigned long)((10)*(32000000/4000.0)));
  3238  0B67  3068               	movlw	104
  3239  0B68  0021               	movlb	1	; select bank1
  3240  0B69  00C4               	movwf	??_main^(0+128)
  3241  0B6A  30E4               	movlw	228
  3242  0B6B                     u4657:	
  3243  0B6B  0B89               	decfsz	9,f
  3244  0B6C  2B6B               	goto	u4657
  3245  0B6D  0BC4               	decfsz	??_main^(0+128),f
  3246  0B6E  2B6B               	goto	u4657
  3247  0B6F  0000               	nop
  3248                           
  3249                           ;main.c: 285: strcpy(romData->name, "UWT");
  3250  0B70  0021               	movlb	1	; select bank1
  3251  0B71  086C               	movf	_romData^(0+128),w
  3252  0B72  3E01               	addlw	1
  3253  0B73  0020               	movlb	0	; select bank0
  3254  0B74  00A0               	movwf	strcpy@to
  3255  0B75  3001               	movlw	1
  3256  0B76  00A1               	movwf	strcpy@to+1
  3257  0B77  3059               	movlw	low (STR_11| (0+32768))
  3258  0B78  00A2               	movwf	strcpy@from
  3259  0B79  3098               	movlw	high (STR_11| (0+32768))
  3260  0B7A  00A3               	movwf	strcpy@from+1
  3261  0B7B  3193  2301  318B   	fcall	_strcpy
  3262                           
  3263                           ;main.c: 287: nrf24l01Init();
  3264  0B7E  3193  23D4  318B   	fcall	_nrf24l01Init
  3265                           
  3266                           ;main.c: 289: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3267  0B81  0021               	movlb	1	; select bank1
  3268  0B82  086C               	movf	_romData^(0+128),w
  3269  0B83  3E01               	addlw	1
  3270  0B84  3195  25AE  318B   	fcall	_nrf24l01GetPipe
  3271  0B87  0021               	movlb	1	; select bank1
  3272  0B88  00C4               	movwf	??_main^(0+128)
  3273  0B89  0844               	movf	??_main^(0+128),w
  3274  0B8A  00C6               	movwf	main@pipe^(0+128)
  3275                           
  3276                           ;main.c: 290: nrf24l01SetTXPipe(pipe);
  3277  0B8B  0846               	movf	main@pipe^(0+128),w
  3278  0B8C  3196  26E1  318B   	fcall	_nrf24l01SetTXPipe
  3279                           
  3280                           ;main.c: 291: nrf24l01SetRXPipe(pipe);
  3281  0B8F  0021               	movlb	1	; select bank1
  3282  0B90  0846               	movf	main@pipe^(0+128),w
  3283  0B91  3193  2391  318B   	fcall	_nrf24l01SetRXPipe
  3284                           
  3285                           ;main.c: 295: ADCON0bits.ADON = 0;
  3286  0B94  0021               	movlb	1	; select bank1
  3287  0B95  101D               	bcf	29,0	;volatile
  3288                           
  3289                           ;main.c: 298: PORTAbits.RA4 = 0;
  3290  0B96  0020               	movlb	0	; select bank0
  3291  0B97  120C               	bcf	12,4	;volatile
  3292                           
  3293                           ;main.c: 299: TRISAbits.TRISA4 = 1;
  3294  0B98  0021               	movlb	1	; select bank1
  3295  0B99  160C               	bsf	12,4	;volatile
  3296                           
  3297                           ;main.c: 300: WPUAbits.WPUA4 = 0;
  3298  0B9A  0024               	movlb	4	; select bank4
  3299  0B9B  120C               	bcf	12,4	;volatile
  3300                           
  3301                           ;main.c: 301: ODCONAbits.ODCA4 = 1;
  3302  0B9C  0025               	movlb	5	; select bank5
  3303  0B9D  160C               	bsf	12,4	;volatile
  3304                           
  3305                           ;main.c: 302: ANSELAbits.ANSA4 = 1;
  3306  0B9E  0023               	movlb	3	; select bank3
  3307  0B9F  160C               	bsf	12,4	;volatile
  3308                           
  3309                           ;main.c: 305: ANSELCbits.ANSC3 = 1;
  3310  0BA0  158E               	bsf	14,3	;volatile
  3311                           
  3312                           ;main.c: 306: TRISCbits.TRISC3 = 1;
  3313  0BA1  0021               	movlb	1	; select bank1
  3314  0BA2  158E               	bsf	14,3	;volatile
  3315                           
  3316                           ;main.c: 309: FVRCONbits.TSEN = 1;
  3317  0BA3  0022               	movlb	2	; select bank2
  3318  0BA4  1697               	bsf	23,5	;volatile
  3319                           
  3320                           ;main.c: 310: FVRCONbits.TSRNG = 1;
  3321  0BA5  1617               	bsf	23,4	;volatile
  3322                           
  3323                           ;main.c: 313: FVRCONbits.FVREN = 0;
  3324  0BA6  1397               	bcf	23,7	;volatile
  3325                           
  3326                           ;main.c: 314: FVRCONbits.ADFVR = 0b10;
  3327  0BA7  0817               	movf	23,w	;volatile
  3328  0BA8  39FC               	andlw	-4
  3329  0BA9  3802               	iorlw	2
  3330  0BAA  0097               	movwf	23	;volatile
  3331                           
  3332                           ;main.c: 316: ADCON1bits.ADCS = 0b111;
  3333  0BAB  3070               	movlw	112
  3334  0BAC  0021               	movlb	1	; select bank1
  3335  0BAD  049E               	iorwf	30,f	;volatile
  3336                           
  3337                           ;main.c: 317: ADCON1bits.ADFM = 1;
  3338  0BAE  179E               	bsf	30,7	;volatile
  3339                           
  3340                           ;main.c: 318: ADCON1bits.ADPREF = 0b11;
  3341  0BAF  3003               	movlw	3
  3342  0BB0  049E               	iorwf	30,f	;volatile
  3343                           
  3344                           ;main.c: 319: ADCON1bits.ADNREF = 0b00;
  3345  0BB1  111E               	bcf	30,2	;volatile
  3346                           
  3347                           ;main.c: 322: ADCON0bits.CHS = 3;
  3348  0BB2  081D               	movf	29,w	;volatile
  3349  0BB3  3903               	andlw	-253
  3350  0BB4  380C               	iorlw	12
  3351  0BB5  009D               	movwf	29	;volatile
  3352                           
  3353                           ;main.c: 327: TRISAbits.TRISA2 = 1;
  3354  0BB6  150C               	bsf	12,2	;volatile
  3355                           
  3356                           ;main.c: 328: PIE0bits.INTE = 1;
  3357  0BB7  1410               	bsf	16,0	;volatile
  3358                           
  3359                           ;main.c: 329: INTCONbits.INTEDG = 0;
  3360  0BB8  100B               	bcf	11,0	;volatile
  3361                           
  3362                           ;main.c: 332: TRISAbits.TRISA5 = 0;
  3363  0BB9  128C               	bcf	12,5	;volatile
  3364                           
  3365                           ;main.c: 333: PORTAbits.RA5 = 0;
  3366  0BBA  0020               	movlb	0	; select bank0
  3367  0BBB  128C               	bcf	12,5	;volatile
  3368                           
  3369                           ;main.c: 336: INTCONbits.PEIE = 1;
  3370  0BBC  170B               	bsf	11,6	;volatile
  3371                           
  3372                           ;main.c: 337: INTCONbits.GIE = 1;
  3373  0BBD  178B               	bsf	11,7	;volatile
  3374                           
  3375                           ;main.c: 339: nrf24l01Packet_t packet;;main.c: 341: setMessage(&packet, "BOOT", bootStat
      +                          us);
  3376  0BBE  30C7               	movlw	low main@packet
  3377  0BBF  0021               	movlb	1	; select bank1
  3378  0BC0  00B9               	movwf	setMessage@packet^(0+128)
  3379  0BC1  3000               	movlw	high main@packet
  3380  0BC2  00BA               	movwf	(setMessage@packet+1)^(0+128)
  3381  0BC3  3050               	movlw	low (STR_12| (0+32768))
  3382  0BC4  00BB               	movwf	setMessage@topic^(0+128)
  3383  0BC5  3098               	movlw	high (STR_12| (0+32768))
  3384  0BC6  00BC               	movwf	(setMessage@topic^(0+128)+1)
  3385  0BC7  0845               	movf	main@bootStatus^(0+128),w
  3386  0BC8  3192  22E6  318B   	fcall	___lbtoft
  3387  0BCB  0020               	movlb	0	; select bank0
  3388  0BCC  0828               	movf	?___lbtoft,w
  3389  0BCD  0021               	movlb	1	; select bank1
  3390  0BCE  00BD               	movwf	setMessage@value^(0+128)
  3391  0BCF  0020               	movlb	0	; select bank0
  3392  0BD0  0829               	movf	?___lbtoft+1,w
  3393  0BD1  0021               	movlb	1	; select bank1
  3394  0BD2  00BE               	movwf	(setMessage@value+1)^(0+128)
  3395  0BD3  0020               	movlb	0	; select bank0
  3396  0BD4  082A               	movf	?___lbtoft+2,w
  3397  0BD5  0021               	movlb	1	; select bank1
  3398  0BD6  00BF               	movwf	(setMessage@value+2)^(0+128)
  3399  0BD7  3187  2778  318B   	fcall	_setMessage
  3400                           
  3401                           ;main.c: 342: packet.packetData.byte = 0;
  3402  0BDA  0021               	movlb	1	; select bank1
  3403  0BDB  01C7               	clrf	main@packet^(0+128)
  3404                           
  3405                           ;main.c: 343: packet.packetData.ACKRequest = 0;
  3406  0BDC  1147               	bcf	main@packet^(0+128),2
  3407                           
  3408                           ;main.c: 344: nrf24l01SendPacket(&packet);
  3409  0BDD  30C7               	movlw	low main@packet
  3410  0BDE  0020               	movlb	0	; select bank0
  3411  0BDF  00A7               	movwf	nrf24l01SendPacket@Packet
  3412  0BE0  3000               	movlw	high main@packet
  3413  0BE1  00A8               	movwf	nrf24l01SendPacket@Packet+1
  3414  0BE2  318D  254E  318B   	fcall	_nrf24l01SendPacket
  3415                           
  3416                           ;main.c: 345: sleep(3000);
  3417  0BE5  30B8               	movlw	184
  3418  0BE6  0021               	movlb	1	; select bank1
  3419  0BE7  00BE               	movwf	sleep@milliseconds^(0+128)
  3420  0BE8  300B               	movlw	11
  3421  0BE9  00BF               	movwf	(sleep@milliseconds^(0+128)+1)
  3422  0BEA  3188  2000  318B   	fcall	_sleep
  3423  0BED                     l4528:	
  3424                           ;main.c: 347: while(1){
  3425                           
  3426                           
  3427                           ;main.c: 348: loop();
  3428  0BED  3184  24C3  318B   	fcall	_loop
  3429  0BF0  2BED               	goto	l4528
  3430  0BF1                     __end_of_main:	
  3431                           ;main.c: 349: };main.c: 351: return;
  3432                           
  3433                           
  3434                           	psect	text1
  3435  13D4                     __ptext1:	
  3436 ;; *************** function _nrf24l01Init *****************
  3437 ;; Defined at:
  3438 ;;		line 450 in file "nrf24l01.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;		None
  3441 ;; Auto vars:     Size  Location     Type
  3442 ;;		None
  3443 ;; Return value:  Size  Location     Type
  3444 ;;                  1    wreg      void 
  3445 ;; Registers used:
  3446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3447 ;; Tracked objects:
  3448 ;;		On entry : 0/0
  3449 ;;		On exit  : 0/0
  3450 ;;		Unchanged: 0/0
  3451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3454 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3455 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3456 ;;Total ram usage:        2 bytes
  3457 ;; Hardware stack levels used:    1
  3458 ;; Hardware stack levels required when called:   12
  3459 ;; This function calls:
  3460 ;;		_nrf24l01CEHigh
  3461 ;;		_nrf24l01CELow
  3462 ;;		_nrf24l01InitRegisters
  3463 ;;		_nrf24l01InterfaceInit
  3464 ;; This function is called by:
  3465 ;;		_main
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           
  3470                           ;psect for function _nrf24l01Init
  3471  13D4                     _nrf24l01Init:	
  3472                           
  3473                           ;nrf24l01.c: 453: nrf24l01InterfaceInit();
  3474                           
  3475                           ;incstack = 0
  3476                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3477  13D4  3193  2338  3193   	fcall	_nrf24l01InterfaceInit
  3478                           
  3479                           ;nrf24l01.c: 458: nrf24l01CELow();
  3480  13D7  3191  21D2  3193   	fcall	_nrf24l01CELow
  3481                           
  3482                           ;nrf24l01.c: 460: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3483  13DA  3003               	movlw	3
  3484  13DB  0020               	movlb	0	; select bank0
  3485  13DC  00B4               	movwf	??_nrf24l01Init+1
  3486  13DD  3008               	movlw	8
  3487  13DE  00B3               	movwf	??_nrf24l01Init
  3488  13DF  3077               	movlw	119
  3489  13E0                     u4667:	
  3490  13E0  0B89               	decfsz	9,f
  3491  13E1  2BE0               	goto	u4667
  3492  13E2  0BB3               	decfsz	??_nrf24l01Init,f
  3493  13E3  2BE0               	goto	u4667
  3494  13E4  0BB4               	decfsz	??_nrf24l01Init+1,f
  3495  13E5  2BE0               	goto	u4667
  3496                           
  3497                           ;nrf24l01.c: 462: nrf24l01InitRegisters();
  3498  13E6  3186  2672  3193   	fcall	_nrf24l01InitRegisters
  3499                           
  3500                           ;nrf24l01.c: 464: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  3501  13E9  3003               	movlw	3
  3502  13EA  0020               	movlb	0	; select bank0
  3503  13EB  00B4               	movwf	??_nrf24l01Init+1
  3504  13EC  3008               	movlw	8
  3505  13ED  00B3               	movwf	??_nrf24l01Init
  3506  13EE  3077               	movlw	119
  3507  13EF                     u4677:	
  3508  13EF  0B89               	decfsz	9,f
  3509  13F0  2BEF               	goto	u4677
  3510  13F1  0BB3               	decfsz	??_nrf24l01Init,f
  3511  13F2  2BEF               	goto	u4677
  3512  13F3  0BB4               	decfsz	??_nrf24l01Init+1,f
  3513  13F4  2BEF               	goto	u4677
  3514                           
  3515                           ;nrf24l01.c: 466: nrf24l01CEHigh();
  3516  13F5  3191  21CF         	fcall	_nrf24l01CEHigh
  3517  13F7  0008               	return
  3518  13F8                     __end_of_nrf24l01Init:	
  3519                           
  3520                           	psect	text2
  3521  1338                     __ptext2:	
  3522 ;; *************** function _nrf24l01InterfaceInit *****************
  3523 ;; Defined at:
  3524 ;;		line 27 in file "interface.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;		None
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;		None
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, status,2, status,0
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3542 ;;Total ram usage:        0 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    7
  3545 ;; This function calls:
  3546 ;;		Nothing
  3547 ;; This function is called by:
  3548 ;;		_nrf24l01Init
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           
  3553                           ;psect for function _nrf24l01InterfaceInit
  3554  1338                     _nrf24l01InterfaceInit:	
  3555                           
  3556                           ;interface.c: 29: TRISAbits.TRISA0 = 0;
  3557                           
  3558                           ;incstack = 0
  3559                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3560  1338  0021               	movlb	1	; select bank1
  3561  1339  100C               	bcf	12,0	;volatile
  3562                           
  3563                           ;interface.c: 30: TRISAbits.TRISA1 = 0;
  3564  133A  108C               	bcf	12,1	;volatile
  3565                           
  3566                           ;interface.c: 32: TRISCbits.TRISC1 = 1;
  3567  133B  148E               	bsf	14,1	;volatile
  3568                           
  3569                           ;interface.c: 33: TRISCbits.TRISC2 = 0;
  3570  133C  110E               	bcf	14,2	;volatile
  3571                           
  3572                           ;interface.c: 34: TRISCbits.TRISC0 = 0;
  3573  133D  100E               	bcf	14,0	;volatile
  3574                           
  3575                           ;interface.c: 36: SSP1CON1bits.SSPEN = 0;
  3576  133E  0024               	movlb	4	; select bank4
  3577  133F  1295               	bcf	21,5	;volatile
  3578                           
  3579                           ;interface.c: 38: RC1PPSbits.RC1PPS = 0b10001;
  3580  1340  003D               	movlb	29	; select bank29
  3581  1341  0821               	movf	33,w	;volatile
  3582  1342  39E0               	andlw	-32
  3583  1343  3811               	iorlw	17
  3584  1344  00A1               	movwf	33	;volatile
  3585                           
  3586                           ;interface.c: 39: RC2PPSbits.RC2PPS = 0b11001;
  3587  1345  0822               	movf	34,w	;volatile
  3588  1346  39E0               	andlw	-32
  3589  1347  3819               	iorlw	25
  3590  1348  00A2               	movwf	34	;volatile
  3591                           
  3592                           ;interface.c: 40: RC0PPSbits.RC0PPS = 0b11000;
  3593  1349  0820               	movf	32,w	;volatile
  3594  134A  39E0               	andlw	-32
  3595  134B  3818               	iorlw	24
  3596  134C  00A0               	movwf	32	;volatile
  3597                           
  3598                           ;interface.c: 42: SSP1CON1bits.CKP = 0;
  3599  134D  0024               	movlb	4	; select bank4
  3600  134E  1215               	bcf	21,4	;volatile
  3601                           
  3602                           ;interface.c: 43: SSP1STATbits.CKE = 1;
  3603  134F  1714               	bsf	20,6	;volatile
  3604                           
  3605                           ;interface.c: 44: SSP1CON1bits.SSPM = 0b0000;
  3606  1350  30F0               	movlw	-16
  3607  1351  0595               	andwf	21,f	;volatile
  3608                           
  3609                           ;interface.c: 46: SSP1CON1bits.SSPEN = 1;
  3610  1352  1695               	bsf	21,5	;volatile
  3611  1353  0008               	return
  3612  1354                     __end_of_nrf24l01InterfaceInit:	
  3613                           
  3614                           	psect	text3
  3615  0672                     __ptext3:	
  3616 ;; *************** function _nrf24l01InitRegisters *****************
  3617 ;; Defined at:
  3618 ;;		line 349 in file "nrf24l01.c"
  3619 ;; Parameters:    Size  Location     Type
  3620 ;;		None
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;  i               2   17[BANK0 ] unsigned int 
  3623 ;;  config          1   16[BANK0 ] struct .
  3624 ;;  DynPD           1   15[BANK0 ] struct .
  3625 ;;  enAA            1   14[BANK0 ] struct .
  3626 ;;  status          1   13[BANK0 ] struct .
  3627 ;;  rfSetup         1   12[BANK0 ] struct .
  3628 ;;  feature         1   11[BANK0 ] struct .
  3629 ;;  setupAW         1   10[BANK0 ] struct .
  3630 ;;  channel         1    9[BANK0 ] struct .
  3631 ;; Return value:  Size  Location     Type
  3632 ;;                  1    wreg      void 
  3633 ;; Registers used:
  3634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3641 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3642 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3643 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3644 ;;Total ram usage:       12 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; Hardware stack levels required when called:   11
  3647 ;; This function calls:
  3648 ;;		___bmul
  3649 ;;		_nrf24l01SPIEnd
  3650 ;;		_nrf24l01SPISend
  3651 ;;		_nrf24l01SPIStart
  3652 ;;		_nrf24l01Send
  3653 ;;		_nrf24l01SetRXPipe
  3654 ;;		_nrf24l01SetTXPipe
  3655 ;; This function is called by:
  3656 ;;		_nrf24l01Init
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           
  3661                           ;psect for function _nrf24l01InitRegisters
  3662  0672                     _nrf24l01InitRegisters:	
  3663                           
  3664                           ;nrf24l01.c: 351: n_CONFIG_t config;;nrf24l01.c: 353: config.PWR_UP = 0;
  3665                           
  3666                           ;incstack = 0
  3667                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3668  0672  0020               	movlb	0	; select bank0
  3669  0673  10B0               	bcf	nrf24l01InitRegisters@config,1
  3670                           
  3671                           ;nrf24l01.c: 354: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3672  0674  0830               	movf	nrf24l01InitRegisters@config,w
  3673  0675  00A7               	movwf	??_nrf24l01InitRegisters
  3674  0676  0827               	movf	??_nrf24l01InitRegisters,w
  3675  0677  00A0               	movwf	nrf24l01Send@data
  3676  0678  3020               	movlw	32
  3677  0679  3187  27E0  3186   	fcall	_nrf24l01Send
  3678                           
  3679                           ;nrf24l01.c: 356: n_SETUP_AW_t setupAW;;nrf24l01.c: 357: setupAW.byte = 0x00;
  3680  067C  0020               	movlb	0	; select bank0
  3681  067D  01AA               	clrf	nrf24l01InitRegisters@setupAW
  3682                           
  3683                           ;nrf24l01.c: 358: setupAW.AW = 0b11;
  3684  067E  3003               	movlw	3
  3685  067F  04AA               	iorwf	nrf24l01InitRegisters@setupAW,f
  3686                           
  3687                           ;nrf24l01.c: 359: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x02, setupAW.byte);
  3688  0680  082A               	movf	nrf24l01InitRegisters@setupAW,w
  3689  0681  00A7               	movwf	??_nrf24l01InitRegisters
  3690  0682  0827               	movf	??_nrf24l01InitRegisters,w
  3691  0683  00A0               	movwf	nrf24l01Send@data
  3692  0684  3022               	movlw	34
  3693  0685  3187  27E0  3186   	fcall	_nrf24l01Send
  3694                           
  3695                           ;nrf24l01.c: 362: n_RF_CH_t channel;;nrf24l01.c: 363: channel.RF_CH = 2;
  3696  0688  0020               	movlb	0	; select bank0
  3697  0689  0829               	movf	nrf24l01InitRegisters@channel,w
  3698  068A  3980               	andlw	-128
  3699  068B  3802               	iorlw	2
  3700  068C  00A9               	movwf	nrf24l01InitRegisters@channel
  3701                           
  3702                           ;nrf24l01.c: 364: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3703  068D  0829               	movf	nrf24l01InitRegisters@channel,w
  3704  068E  00A7               	movwf	??_nrf24l01InitRegisters
  3705  068F  0827               	movf	??_nrf24l01InitRegisters,w
  3706  0690  00A0               	movwf	nrf24l01Send@data
  3707  0691  3025               	movlw	37
  3708  0692  3187  27E0  3186   	fcall	_nrf24l01Send
  3709                           
  3710                           ;nrf24l01.c: 367: n_RF_SETUP_t rfSetup;;nrf24l01.c: 368: rfSetup.byte = 0x00;
  3711  0695  0020               	movlb	0	; select bank0
  3712  0696  01AC               	clrf	nrf24l01InitRegisters@rfSetup
  3713                           
  3714                           ;nrf24l01.c: 369: rfSetup.RF_DR_LOW = 0;
  3715  0697  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  3716                           
  3717                           ;nrf24l01.c: 370: rfSetup.RF_DR_HIGH = 1;
  3718  0698  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  3719                           
  3720                           ;nrf24l01.c: 371: rfSetup.RF_PWR = 3;
  3721  0699  3006               	movlw	6
  3722  069A  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3723                           
  3724                           ;nrf24l01.c: 372: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3725  069B  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  3726  069C  00A7               	movwf	??_nrf24l01InitRegisters
  3727  069D  0827               	movf	??_nrf24l01InitRegisters,w
  3728  069E  00A0               	movwf	nrf24l01Send@data
  3729  069F  3026               	movlw	38
  3730  06A0  3187  27E0  3186   	fcall	_nrf24l01Send
  3731                           
  3732                           ;nrf24l01.c: 375: nrf24l01SetRXPipe(0xFF);
  3733  06A3  30FF               	movlw	255
  3734  06A4  3193  2391  3186   	fcall	_nrf24l01SetRXPipe
  3735                           
  3736                           ;nrf24l01.c: 378: n_EN_AA_t enAA;;nrf24l01.c: 379: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3737  06A7  0020               	movlb	0	; select bank0
  3738  06A8  01A0               	clrf	nrf24l01Send@data
  3739  06A9  3001               	movlw	1
  3740  06AA  3187  27E0  3186   	fcall	_nrf24l01Send
  3741  06AD  0020               	movlb	0	; select bank0
  3742  06AE  00A7               	movwf	??_nrf24l01InitRegisters
  3743  06AF  0827               	movf	??_nrf24l01InitRegisters,w
  3744  06B0  00AE               	movwf	nrf24l01InitRegisters@enAA
  3745                           
  3746                           ;nrf24l01.c: 380: enAA.ENAA_P0 = 0;
  3747  06B1  102E               	bcf	nrf24l01InitRegisters@enAA,0
  3748                           
  3749                           ;nrf24l01.c: 381: enAA.ENAA_P1 = 0;
  3750  06B2  10AE               	bcf	nrf24l01InitRegisters@enAA,1
  3751                           
  3752                           ;nrf24l01.c: 382: enAA.ENAA_P2 = 0;
  3753  06B3  112E               	bcf	nrf24l01InitRegisters@enAA,2
  3754                           
  3755                           ;nrf24l01.c: 383: enAA.ENAA_P3 = 0;
  3756  06B4  11AE               	bcf	nrf24l01InitRegisters@enAA,3
  3757                           
  3758                           ;nrf24l01.c: 384: enAA.ENAA_P4 = 0;
  3759  06B5  122E               	bcf	nrf24l01InitRegisters@enAA,4
  3760                           
  3761                           ;nrf24l01.c: 385: enAA.ENAA_P5 = 0;
  3762  06B6  12AE               	bcf	nrf24l01InitRegisters@enAA,5
  3763                           
  3764                           ;nrf24l01.c: 386: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  3765  06B7  082E               	movf	nrf24l01InitRegisters@enAA,w
  3766  06B8  00A7               	movwf	??_nrf24l01InitRegisters
  3767  06B9  0827               	movf	??_nrf24l01InitRegisters,w
  3768  06BA  00A0               	movwf	nrf24l01Send@data
  3769  06BB  3021               	movlw	33
  3770  06BC  3187  27E0  3186   	fcall	_nrf24l01Send
  3771                           
  3772                           ;nrf24l01.c: 390: n_FEATURE_t feature;;nrf24l01.c: 391: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  3773  06BF  0020               	movlb	0	; select bank0
  3774  06C0  01A0               	clrf	nrf24l01Send@data
  3775  06C1  301D               	movlw	29
  3776  06C2  3187  27E0  3186   	fcall	_nrf24l01Send
  3777  06C5  0020               	movlb	0	; select bank0
  3778  06C6  00A7               	movwf	??_nrf24l01InitRegisters
  3779  06C7  0827               	movf	??_nrf24l01InitRegisters,w
  3780  06C8  00AB               	movwf	nrf24l01InitRegisters@feature
  3781                           
  3782                           ;nrf24l01.c: 392: feature.EN_DPL = 1;
  3783  06C9  152B               	bsf	nrf24l01InitRegisters@feature,2
  3784                           
  3785                           ;nrf24l01.c: 393: feature.EN_DYN_ACK = 1;
  3786  06CA  142B               	bsf	nrf24l01InitRegisters@feature,0
  3787                           
  3788                           ;nrf24l01.c: 394: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  3789  06CB  082B               	movf	nrf24l01InitRegisters@feature,w
  3790  06CC  00A7               	movwf	??_nrf24l01InitRegisters
  3791  06CD  0827               	movf	??_nrf24l01InitRegisters,w
  3792  06CE  00A0               	movwf	nrf24l01Send@data
  3793  06CF  303D               	movlw	61
  3794  06D0  3187  27E0  3186   	fcall	_nrf24l01Send
  3795                           
  3796                           ;nrf24l01.c: 396: n_DYNPD_t DynPD;;nrf24l01.c: 397: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  3797  06D3  0020               	movlb	0	; select bank0
  3798  06D4  01A0               	clrf	nrf24l01Send@data
  3799  06D5  301C               	movlw	28
  3800  06D6  3187  27E0  3186   	fcall	_nrf24l01Send
  3801  06D9  0020               	movlb	0	; select bank0
  3802  06DA  00A7               	movwf	??_nrf24l01InitRegisters
  3803  06DB  0827               	movf	??_nrf24l01InitRegisters,w
  3804  06DC  00AF               	movwf	nrf24l01InitRegisters@DynPD
  3805                           
  3806                           ;nrf24l01.c: 398: DynPD.DPL_P0 = 1;
  3807  06DD  142F               	bsf	nrf24l01InitRegisters@DynPD,0
  3808                           
  3809                           ;nrf24l01.c: 399: DynPD.DPL_P1 = 1;
  3810  06DE  14AF               	bsf	nrf24l01InitRegisters@DynPD,1
  3811                           
  3812                           ;nrf24l01.c: 400: DynPD.DPL_P2 = 1;
  3813  06DF  152F               	bsf	nrf24l01InitRegisters@DynPD,2
  3814                           
  3815                           ;nrf24l01.c: 401: DynPD.DPL_P3 = 1;
  3816  06E0  15AF               	bsf	nrf24l01InitRegisters@DynPD,3
  3817                           
  3818                           ;nrf24l01.c: 402: DynPD.DPL_P4 = 1;
  3819  06E1  162F               	bsf	nrf24l01InitRegisters@DynPD,4
  3820                           
  3821                           ;nrf24l01.c: 403: DynPD.DPL_P5 = 1;
  3822  06E2  16AF               	bsf	nrf24l01InitRegisters@DynPD,5
  3823                           
  3824                           ;nrf24l01.c: 404: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  3825  06E3  082F               	movf	nrf24l01InitRegisters@DynPD,w
  3826  06E4  00A7               	movwf	??_nrf24l01InitRegisters
  3827  06E5  0827               	movf	??_nrf24l01InitRegisters,w
  3828  06E6  00A0               	movwf	nrf24l01Send@data
  3829  06E7  303C               	movlw	60
  3830  06E8  3187  27E0  3186   	fcall	_nrf24l01Send
  3831                           
  3832                           ;nrf24l01.c: 407: unsigned int i;;nrf24l01.c: 408: for (i = 0; i < 6; i++){
  3833  06EB  0020               	movlb	0	; select bank0
  3834  06EC  01B1               	clrf	nrf24l01InitRegisters@i
  3835  06ED  01B2               	clrf	nrf24l01InitRegisters@i+1
  3836  06EE  3000               	movlw	0
  3837  06EF  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3838  06F0  3006               	movlw	6
  3839  06F1  1903               	skipnz
  3840  06F2  0231               	subwf	nrf24l01InitRegisters@i,w
  3841  06F3  1803               	btfsc	3,0
  3842  06F4  2F4E               	goto	l4014
  3843  06F5                     l4000:	
  3844                           
  3845                           ;nrf24l01.c: 410: nrf24l01SPIStart();
  3846  06F5  3191  21F0  3186   	fcall	_nrf24l01SPIStart
  3847                           
  3848                           ;nrf24l01.c: 411: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  3849  06F8  0020               	movlb	0	; select bank0
  3850  06F9  0831               	movf	nrf24l01InitRegisters@i,w
  3851  06FA  3E0A               	addlw	10
  3852  06FB  3820               	iorlw	32
  3853  06FC  3192  2201  3186   	fcall	_nrf24l01SPISend
  3854                           
  3855                           ;nrf24l01.c: 413: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  3856  06FF  3045               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  3857  0700  0084               	movwf	4
  3858  0701  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  3859  0702  0085               	movwf	5
  3860  0703  0800               	movf	0,w	;code access
  3861  0704  0020               	movlb	0	; select bank0
  3862  0705  00A7               	movwf	??_nrf24l01InitRegisters
  3863  0706  0831               	movf	nrf24l01InitRegisters@i,w
  3864  0707  00A8               	movwf	??_nrf24l01InitRegisters+1
  3865  0708  0828               	movf	??_nrf24l01InitRegisters+1,w
  3866  0709  00A0               	movwf	___bmul@multiplicand
  3867  070A  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  3868  070B  0084               	movwf	4
  3869  070C  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  3870  070D  0085               	movwf	5
  3871  070E  0800               	movf	0,w	;code access
  3872  070F  3192  221D  3186   	fcall	___bmul
  3873  0712  0020               	movlb	0	; select bank0
  3874  0713  0727               	addwf	??_nrf24l01InitRegisters,w
  3875  0714  3192  2201  3186   	fcall	_nrf24l01SPISend
  3876                           
  3877                           ;nrf24l01.c: 415: if (i < 2){
  3878  0717  3000               	movlw	0
  3879  0718  0020               	movlb	0	; select bank0
  3880  0719  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3881  071A  3002               	movlw	2
  3882  071B  1903               	skipnz
  3883  071C  0231               	subwf	nrf24l01InitRegisters@i,w
  3884  071D  1803               	skipnc
  3885  071E  2F3F               	goto	l4008
  3886                           
  3887                           ;nrf24l01.c: 416: nrf24l01SPISend(n_ADDRESS_P0[3]);
  3888  071F  3044               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  3889  0720  0084               	movwf	4
  3890  0721  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  3891  0722  0085               	movwf	5
  3892  0723  0800               	movf	0,w	;code access
  3893  0724  3192  2201  3186   	fcall	_nrf24l01SPISend
  3894                           
  3895                           ;nrf24l01.c: 417: nrf24l01SPISend(n_ADDRESS_P0[2]);
  3896  0727  3043               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  3897  0728  0084               	movwf	4
  3898  0729  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  3899  072A  0085               	movwf	5
  3900  072B  0800               	movf	0,w	;code access
  3901  072C  3192  2201  3186   	fcall	_nrf24l01SPISend
  3902                           
  3903                           ;nrf24l01.c: 418: nrf24l01SPISend(n_ADDRESS_P0[1]);
  3904  072F  3042               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  3905  0730  0084               	movwf	4
  3906  0731  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  3907  0732  0085               	movwf	5
  3908  0733  0800               	movf	0,w	;code access
  3909  0734  3192  2201  3186   	fcall	_nrf24l01SPISend
  3910                           
  3911                           ;nrf24l01.c: 419: nrf24l01SPISend(n_ADDRESS_P0[0]);
  3912  0737  3041               	movlw	low (_n_ADDRESS_P0| (0+32768))
  3913  0738  0084               	movwf	4
  3914  0739  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  3915  073A  0085               	movwf	5
  3916  073B  0800               	movf	0,w	;code access
  3917  073C  3192  2201  3186   	fcall	_nrf24l01SPISend
  3918  073F                     l4008:	
  3919                           
  3920                           ;nrf24l01.c: 420: };nrf24l01.c: 422: nrf24l01SPIEnd();
  3921  073F  3191  21E1  3186   	fcall	_nrf24l01SPIEnd
  3922  0742  3001               	movlw	1
  3923  0743  0020               	movlb	0	; select bank0
  3924  0744  07B1               	addwf	nrf24l01InitRegisters@i,f
  3925  0745  3000               	movlw	0
  3926  0746  3DB2               	addwfc	nrf24l01InitRegisters@i+1,f
  3927  0747  3000               	movlw	0
  3928  0748  0232               	subwf	nrf24l01InitRegisters@i+1,w
  3929  0749  3006               	movlw	6
  3930  074A  1903               	skipnz
  3931  074B  0231               	subwf	nrf24l01InitRegisters@i,w
  3932  074C  1C03               	skipc
  3933  074D  2EF5               	goto	l4000
  3934  074E                     l4014:	
  3935                           
  3936                           ;nrf24l01.c: 423: };nrf24l01.c: 425: nrf24l01SetTXPipe(0);
  3937  074E  3000               	movlw	0
  3938  074F  3196  26E1  3186   	fcall	_nrf24l01SetTXPipe
  3939                           
  3940                           ;nrf24l01.c: 429: n_STATUS_t status;;nrf24l01.c: 430: status.byte = 0x00;
  3941  0752  0020               	movlb	0	; select bank0
  3942  0753  01AD               	clrf	nrf24l01InitRegisters@status
  3943                           
  3944                           ;nrf24l01.c: 431: status.RX_DR = 1;
  3945  0754  172D               	bsf	nrf24l01InitRegisters@status,6
  3946                           
  3947                           ;nrf24l01.c: 432: status.TX_DS = 1;
  3948  0755  16AD               	bsf	nrf24l01InitRegisters@status,5
  3949                           
  3950                           ;nrf24l01.c: 433: status.MAX_RT = 1;
  3951  0756  162D               	bsf	nrf24l01InitRegisters@status,4
  3952                           
  3953                           ;nrf24l01.c: 434: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.byte);
  3954  0757  082D               	movf	nrf24l01InitRegisters@status,w
  3955  0758  00A7               	movwf	??_nrf24l01InitRegisters
  3956  0759  0827               	movf	??_nrf24l01InitRegisters,w
  3957  075A  00A0               	movwf	nrf24l01Send@data
  3958  075B  3027               	movlw	39
  3959  075C  3187  27E0  3186   	fcall	_nrf24l01Send
  3960                           
  3961                           ;nrf24l01.c: 437: nrf24l01Send((unsigned) 0b11100001, 0);
  3962  075F  0020               	movlb	0	; select bank0
  3963  0760  01A0               	clrf	nrf24l01Send@data
  3964  0761  30E1               	movlw	225
  3965  0762  3187  27E0  3186   	fcall	_nrf24l01Send
  3966                           
  3967                           ;nrf24l01.c: 438: nrf24l01Send((unsigned) 0b11100010, 0);
  3968  0765  0020               	movlb	0	; select bank0
  3969  0766  01A0               	clrf	nrf24l01Send@data
  3970  0767  30E2               	movlw	226
  3971  0768  3187  27E0  3186   	fcall	_nrf24l01Send
  3972                           
  3973                           ;nrf24l01.c: 441: config.PRIM_RX = 1;
  3974  076B  0020               	movlb	0	; select bank0
  3975  076C  1430               	bsf	nrf24l01InitRegisters@config,0
  3976                           
  3977                           ;nrf24l01.c: 442: config.EN_CRC = 1;
  3978  076D  15B0               	bsf	nrf24l01InitRegisters@config,3
  3979                           
  3980                           ;nrf24l01.c: 443: config.CRCO = 1;
  3981  076E  1530               	bsf	nrf24l01InitRegisters@config,2
  3982                           
  3983                           ;nrf24l01.c: 444: config.PWR_UP = 1;
  3984  076F  14B0               	bsf	nrf24l01InitRegisters@config,1
  3985                           
  3986                           ;nrf24l01.c: 445: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  3987  0770  0830               	movf	nrf24l01InitRegisters@config,w
  3988  0771  00A7               	movwf	??_nrf24l01InitRegisters
  3989  0772  0827               	movf	??_nrf24l01InitRegisters,w
  3990  0773  00A0               	movwf	nrf24l01Send@data
  3991  0774  3020               	movlw	32
  3992  0775  3187  27E0         	fcall	_nrf24l01Send
  3993  0777  0008               	return
  3994  0778                     __end_of_nrf24l01InitRegisters:	
  3995                           
  3996                           	psect	text4
  3997  1391                     __ptext4:	
  3998 ;; *************** function _nrf24l01SetRXPipe *****************
  3999 ;; Defined at:
  4000 ;;		line 328 in file "nrf24l01.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;  pipe            1    wreg     unsigned char 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;  pipe            1    5[BANK0 ] unsigned char 
  4005 ;;  enRXAddr        1    6[BANK0 ] struct .
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  1    wreg      void 
  4008 ;; Registers used:
  4009 ;;		wreg, status,2, status,0, pclath, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4018 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4019 ;;Total ram usage:        4 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:   10
  4022 ;; This function calls:
  4023 ;;		_nrf24l01Send
  4024 ;; This function is called by:
  4025 ;;		_main
  4026 ;;		_nrf24l01InitRegisters
  4027 ;; This function uses a non-reentrant model
  4028 ;;
  4029                           
  4030                           
  4031                           ;psect for function _nrf24l01SetRXPipe
  4032  1391                     _nrf24l01SetRXPipe:	
  4033                           
  4034                           ;incstack = 0
  4035                           ; Regs used in _nrf24l01SetRXPipe: [wreg+status,2+status,0+pclath+cstack]
  4036                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4037  1391  0020               	movlb	0	; select bank0
  4038  1392  00A5               	movwf	nrf24l01SetRXPipe@pipe
  4039                           
  4040                           ;nrf24l01.c: 330: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 332: if (pipe > 5){
  4041  1393  3006               	movlw	6
  4042  1394  0225               	subwf	nrf24l01SetRXPipe@pipe,w
  4043  1395  1C03               	skipc
  4044  1396  2B9E               	goto	l343
  4045                           
  4046                           ;nrf24l01.c: 333: enRXAddr.ERX_P0 = 1;
  4047  1397  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4048                           
  4049                           ;nrf24l01.c: 334: enRXAddr.ERX_P1 = 1;
  4050  1398  14A6               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4051                           
  4052                           ;nrf24l01.c: 335: enRXAddr.ERX_P2 = 1;
  4053  1399  1526               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4054                           
  4055                           ;nrf24l01.c: 336: enRXAddr.ERX_P3 = 1;
  4056  139A  15A6               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4057                           
  4058                           ;nrf24l01.c: 337: enRXAddr.ERX_P4 = 1;
  4059  139B  1626               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4060                           
  4061                           ;nrf24l01.c: 338: enRXAddr.ERX_P5 = 1;
  4062  139C  16A6               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4063                           
  4064                           ;nrf24l01.c: 339: }
  4065  139D  2BAA               	goto	l3744
  4066  139E                     l343:	
  4067                           
  4068                           ;nrf24l01.c: 341: else{;nrf24l01.c: 342: enRXAddr.ERX_P0 = 1;
  4069  139E  1426               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4070                           
  4071                           ;nrf24l01.c: 343: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4072  139F  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4073  13A0  00A3               	movwf	??_nrf24l01SetRXPipe
  4074  13A1  0A25               	incf	nrf24l01SetRXPipe@pipe,w
  4075  13A2  2BA4               	goto	u4214
  4076  13A3                     u4215:	
  4077  13A3  35A3               	lslf	??_nrf24l01SetRXPipe,f
  4078  13A4                     u4214:	
  4079  13A4  0B89               	decfsz	9,f
  4080  13A5  2BA3               	goto	u4215
  4081  13A6  0823               	movf	??_nrf24l01SetRXPipe,w
  4082  13A7  00A4               	movwf	??_nrf24l01SetRXPipe+1
  4083  13A8  0824               	movf	??_nrf24l01SetRXPipe+1,w
  4084  13A9  00A6               	movwf	nrf24l01SetRXPipe@enRXAddr
  4085  13AA                     l3744:	
  4086                           
  4087                           ;nrf24l01.c: 344: };nrf24l01.c: 346: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4088  13AA  0826               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4089  13AB  00A3               	movwf	??_nrf24l01SetRXPipe
  4090  13AC  0823               	movf	??_nrf24l01SetRXPipe,w
  4091  13AD  00A0               	movwf	nrf24l01Send@data
  4092  13AE  3022               	movlw	34
  4093  13AF  3187  27E0         	fcall	_nrf24l01Send
  4094  13B1  0008               	return
  4095  13B2                     __end_of_nrf24l01SetRXPipe:	
  4096                           
  4097                           	psect	text5
  4098  15AE                     __ptext5:	
  4099 ;; *************** function _nrf24l01GetPipe *****************
  4100 ;; Defined at:
  4101 ;;		line 233 in file "main.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  name            1    wreg     PTR unsigned char 
  4104 ;;		 -> romDataMap(28), 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4107 ;;		 -> romDataMap(28), 
  4108 ;;  i               1   10[BANK0 ] unsigned char 
  4109 ;;  pipe            1    8[BANK0 ] unsigned char 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      unsigned char 
  4112 ;; Registers used:
  4113 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4120 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4121 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4122 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4123 ;;Total ram usage:        5 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    8
  4126 ;; This function calls:
  4127 ;;		___lwmod
  4128 ;;		_strlen
  4129 ;; This function is called by:
  4130 ;;		_main
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           
  4135                           ;psect for function _nrf24l01GetPipe
  4136  15AE                     _nrf24l01GetPipe:	
  4137                           
  4138                           ;incstack = 0
  4139                           ; Regs used in _nrf24l01GetPipe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4140                           ;nrf24l01GetPipe@name stored from wreg
  4141  15AE  0020               	movlb	0	; select bank0
  4142  15AF  00A9               	movwf	nrf24l01GetPipe@name
  4143                           
  4144                           ;main.c: 234: unsigned char pipe = 0;
  4145  15B0  01A8               	clrf	nrf24l01GetPipe@pipe
  4146                           
  4147                           ;main.c: 235: unsigned char i = 0;
  4148  15B1  01AA               	clrf	nrf24l01GetPipe@i
  4149                           
  4150                           ;main.c: 238: for (i = 0; i < strlen(name); i++){
  4151  15B2  01AA               	clrf	nrf24l01GetPipe@i
  4152  15B3                     l4184:	
  4153  15B3  0829               	movf	nrf24l01GetPipe@name,w
  4154  15B4  00A0               	movwf	strlen@s
  4155  15B5  3001               	movlw	1
  4156  15B6  00A1               	movwf	strlen@s+1
  4157  15B7  3193  2372  3195   	fcall	_strlen
  4158  15BA  0020               	movlb	0	; select bank0
  4159  15BB  082A               	movf	nrf24l01GetPipe@i,w
  4160  15BC  00A6               	movwf	??_nrf24l01GetPipe
  4161  15BD  01A7               	clrf	??_nrf24l01GetPipe+1
  4162  15BE  0821               	movf	?_strlen+1,w
  4163  15BF  0227               	subwf	??_nrf24l01GetPipe+1,w
  4164  15C0  1D03               	skipz
  4165  15C1  2DC4               	goto	u4575
  4166  15C2  0820               	movf	?_strlen,w
  4167  15C3  0226               	subwf	??_nrf24l01GetPipe,w
  4168  15C4                     u4575:	
  4169  15C4  1803               	btfsc	3,0
  4170  15C5  2DD6               	goto	l4186
  4171                           
  4172                           ;main.c: 239: pipe+= name[i];
  4173  15C6  082A               	movf	nrf24l01GetPipe@i,w
  4174  15C7  0729               	addwf	nrf24l01GetPipe@name,w
  4175  15C8  00A6               	movwf	??_nrf24l01GetPipe
  4176  15C9  0826               	movf	??_nrf24l01GetPipe,w
  4177  15CA  0086               	movwf	6
  4178  15CB  3001               	movlw	1	; select bank2/3
  4179  15CC  0087               	movwf	7
  4180  15CD  0801               	movf	1,w
  4181  15CE  00A7               	movwf	??_nrf24l01GetPipe+1
  4182  15CF  0827               	movf	??_nrf24l01GetPipe+1,w
  4183  15D0  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4184  15D1  3001               	movlw	1
  4185  15D2  00A6               	movwf	??_nrf24l01GetPipe
  4186  15D3  0826               	movf	??_nrf24l01GetPipe,w
  4187  15D4  07AA               	addwf	nrf24l01GetPipe@i,f
  4188  15D5  2DB3               	goto	l4184
  4189  15D6                     l4186:	
  4190                           
  4191                           ;main.c: 240: };main.c: 242: return (unsigned) pipe % 6;
  4192  15D6  3006               	movlw	6
  4193  15D7  00A0               	movwf	___lwmod@divisor
  4194  15D8  3000               	movlw	0
  4195  15D9  00A1               	movwf	___lwmod@divisor+1
  4196  15DA  0828               	movf	nrf24l01GetPipe@pipe,w
  4197  15DB  00A6               	movwf	??_nrf24l01GetPipe
  4198  15DC  01A7               	clrf	??_nrf24l01GetPipe+1
  4199  15DD  0826               	movf	??_nrf24l01GetPipe,w
  4200  15DE  00A2               	movwf	___lwmod@dividend
  4201  15DF  0827               	movf	??_nrf24l01GetPipe+1,w
  4202  15E0  00A3               	movwf	___lwmod@dividend+1
  4203  15E1  3194  24C3         	fcall	___lwmod
  4204  15E3  0020               	movlb	0	; select bank0
  4205  15E4  0820               	movf	?___lwmod,w
  4206  15E5  0008               	return
  4207  15E6                     __end_of_nrf24l01GetPipe:	
  4208                           
  4209                           	psect	text6
  4210  14C3                     __ptext6:	
  4211 ;; *************** function ___lwmod *****************
  4212 ;; Defined at:
  4213 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;  divisor         2    0[BANK0 ] unsigned int 
  4216 ;;  dividend        2    2[BANK0 ] unsigned int 
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;  counter         1    5[BANK0 ] unsigned char 
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  2    0[BANK0 ] unsigned int 
  4221 ;; Registers used:
  4222 ;;		wreg, status,2, status,0
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4228 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4230 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4231 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4232 ;;Total ram usage:        6 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    7
  4235 ;; This function calls:
  4236 ;;		Nothing
  4237 ;; This function is called by:
  4238 ;;		_nrf24l01GetPipe
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           
  4243                           ;psect for function ___lwmod
  4244  14C3                     ___lwmod:	
  4245                           
  4246                           ;incstack = 0
  4247                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4248  14C3  0020               	movlb	0	; select bank0
  4249  14C4  0820               	movf	___lwmod@divisor,w
  4250  14C5  0421               	iorwf	___lwmod@divisor+1,w
  4251  14C6  1903               	btfsc	3,2
  4252  14C7  2CEB               	goto	l4062
  4253  14C8  01A5               	clrf	___lwmod@counter
  4254  14C9  0AA5               	incf	___lwmod@counter,f
  4255  14CA                     l4052:	
  4256  14CA  1BA1               	btfsc	___lwmod@divisor+1,7
  4257  14CB  2CD6               	goto	l4054
  4258  14CC  3001               	movlw	1
  4259  14CD                     u4455:	
  4260  14CD  35A0               	lslf	___lwmod@divisor,f
  4261  14CE  0DA1               	rlf	___lwmod@divisor+1,f
  4262  14CF  0B89               	decfsz	9,f
  4263  14D0  2CCD               	goto	u4455
  4264  14D1  3001               	movlw	1
  4265  14D2  00A4               	movwf	??___lwmod
  4266  14D3  0824               	movf	??___lwmod,w
  4267  14D4  07A5               	addwf	___lwmod@counter,f
  4268  14D5  2CCA               	goto	l4052
  4269  14D6                     l4054:	
  4270  14D6  0821               	movf	___lwmod@divisor+1,w
  4271  14D7  0223               	subwf	___lwmod@dividend+1,w
  4272  14D8  1D03               	skipz
  4273  14D9  2CDC               	goto	u4475
  4274  14DA  0820               	movf	___lwmod@divisor,w
  4275  14DB  0222               	subwf	___lwmod@dividend,w
  4276  14DC                     u4475:	
  4277  14DC  1C03               	skipc
  4278  14DD  2CE2               	goto	l4058
  4279  14DE  0820               	movf	___lwmod@divisor,w
  4280  14DF  02A2               	subwf	___lwmod@dividend,f
  4281  14E0  0821               	movf	___lwmod@divisor+1,w
  4282  14E1  3BA3               	subwfb	___lwmod@dividend+1,f
  4283  14E2                     l4058:	
  4284  14E2  3001               	movlw	1
  4285  14E3                     u4485:	
  4286  14E3  36A1               	lsrf	___lwmod@divisor+1,f
  4287  14E4  0CA0               	rrf	___lwmod@divisor,f
  4288  14E5  0B89               	decfsz	9,f
  4289  14E6  2CE3               	goto	u4485
  4290  14E7  3001               	movlw	1
  4291  14E8  02A5               	subwf	___lwmod@counter,f
  4292  14E9  1D03               	btfss	3,2
  4293  14EA  2CD6               	goto	l4054
  4294  14EB                     l4062:	
  4295  14EB  0823               	movf	___lwmod@dividend+1,w
  4296  14EC  00A1               	movwf	?___lwmod+1
  4297  14ED  0822               	movf	___lwmod@dividend,w
  4298  14EE  00A0               	movwf	?___lwmod
  4299  14EF  0008               	return
  4300  14F0                     __end_of___lwmod:	
  4301                           
  4302                           	psect	text7
  4303  04C3                     __ptext7:	
  4304 ;; *************** function _loop *****************
  4305 ;; Defined at:
  4306 ;;		line 165 in file "main.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;		None
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;  packet         33   15[BANK2 ] struct .
  4311 ;;  ta              3    3[BANK2 ] float 
  4312 ;;  vt              3    0[BANK2 ] float 
  4313 ;;  rfSetup         1   12[BANK2 ] struct .
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  1    wreg      void 
  4316 ;; Registers used:
  4317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4324 ;;      Locals:         0       0       0      48       0       0       0       0       0       0       0       0       
      +0       0
  4325 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4326 ;;      Totals:         0       0       1      48       0       0       0       0       0       0       0       0       
      +0       0
  4327 ;;Total ram usage:       49 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; Hardware stack levels required when called:   15
  4330 ;; This function calls:
  4331 ;;		___awtoft
  4332 ;;		___ftadd
  4333 ;;		___ftdiv
  4334 ;;		___ftmul
  4335 ;;		___ftneg
  4336 ;;		___lbtoft
  4337 ;;		_checkTXPower
  4338 ;;		_getADCValue
  4339 ;;		_nrf24l01Send
  4340 ;;		_nrf24l01SendPacket
  4341 ;;		_setMessage
  4342 ;;		_sleep
  4343 ;; This function is called by:
  4344 ;;		_main
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function _loop
  4350  04C3                     _loop:	
  4351                           
  4352                           ;main.c: 168: nrf24l01Packet_t packet;;main.c: 170: setMessage(&packet, "DBG", counter);
  4353                           
  4354                           ;incstack = 0
  4355                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4356  04C3  302F               	movlw	low loop@packet
  4357  04C4  0021               	movlb	1	; select bank1
  4358  04C5  00B9               	movwf	setMessage@packet^(0+128)
  4359  04C6  3001               	movlw	high loop@packet
  4360  04C7  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4361  04C8  3055               	movlw	low (STR_6| (0+32768))
  4362  04C9  00BB               	movwf	setMessage@topic^(0+128)
  4363  04CA  3098               	movlw	high (STR_6| (0+32768))
  4364  04CB  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4365  04CC  0022               	movlb	2	; select bank2
  4366  04CD  0850               	movf	_counter^(0+256),w
  4367  04CE  0021               	movlb	1	; select bank1
  4368  04CF  00BD               	movwf	setMessage@value^(0+128)
  4369  04D0  0022               	movlb	2	; select bank2
  4370  04D1  0851               	movf	(_counter+1)^(0+256),w
  4371  04D2  0021               	movlb	1	; select bank1
  4372  04D3  00BE               	movwf	(setMessage@value+1)^(0+128)
  4373  04D4  0022               	movlb	2	; select bank2
  4374  04D5  0852               	movf	(_counter+2)^(0+256),w
  4375  04D6  0021               	movlb	1	; select bank1
  4376  04D7  00BF               	movwf	(setMessage@value+2)^(0+128)
  4377  04D8  3187  2778  3184   	fcall	_setMessage
  4378                           
  4379                           ;main.c: 171: packet.packetData.byte = 0;
  4380  04DB  0022               	movlb	2	; select bank2
  4381  04DC  01AF               	clrf	loop@packet^(0+256)
  4382                           
  4383                           ;main.c: 172: packet.packetData.ACKRequest = 0;
  4384  04DD  112F               	bcf	loop@packet^(0+256),2
  4385                           
  4386                           ;main.c: 173: nrf24l01SendPacket(&packet);
  4387  04DE  302F               	movlw	low loop@packet
  4388  04DF  0020               	movlb	0	; select bank0
  4389  04E0  00A7               	movwf	nrf24l01SendPacket@Packet
  4390  04E1  3001               	movlw	high loop@packet
  4391  04E2  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4392  04E3  318D  254E  3184   	fcall	_nrf24l01SendPacket
  4393                           
  4394                           ;main.c: 174: checkTXPower();
  4395  04E6  3192  2255  3184   	fcall	_checkTXPower
  4396                           
  4397                           ;main.c: 175: sleep(2000);
  4398  04E9  30D0               	movlw	208
  4399  04EA  0021               	movlb	1	; select bank1
  4400  04EB  00BE               	movwf	sleep@milliseconds^(0+128)
  4401  04EC  3007               	movlw	7
  4402  04ED  00BF               	movwf	(sleep@milliseconds^(0+128)+1)
  4403  04EE  3188  2000  3184   	fcall	_sleep
  4404                           
  4405                           ;main.c: 179: FVRCONbits.TSEN = 1;
  4406  04F1  0022               	movlb	2	; select bank2
  4407  04F2  1697               	bsf	23,5	;volatile
  4408                           
  4409                           ;main.c: 180: float vt = (2.048 - getADCValue(0b111101)) / (FVRCONbits.TSRNG ? 2 : 4);
  4410  04F3  1A17               	btfsc	23,4	;volatile
  4411  04F4  2CF7               	goto	l4366
  4412  04F5  3004               	movlw	4
  4413  04F6  2CF8               	goto	L1
  4414  04F7                     l4366:	
  4415  04F7  3002               	movlw	2
  4416  04F8                     L1:	
  4417  04F8  00AD               	movwf	_loop$900^(0+256)
  4418  04F9  3000               	movlw	0
  4419  04FA  00AE               	movwf	(_loop$900^(0+256)+1)
  4420  04FB  303D               	movlw	61
  4421  04FC  318A  2216  3184   	fcall	_getADCValue
  4422  04FF  0020               	movlb	0	; select bank0
  4423  0500  084B               	movf	?_getADCValue,w
  4424  0501  00D7               	movwf	___ftneg@f1
  4425  0502  084C               	movf	?_getADCValue+1,w
  4426  0503  00D8               	movwf	___ftneg@f1+1
  4427  0504  084D               	movf	?_getADCValue+2,w
  4428  0505  00D9               	movwf	___ftneg@f1+2
  4429  0506  3191  21F8  3184   	fcall	___ftneg
  4430  0509  0020               	movlb	0	; select bank0
  4431  050A  0857               	movf	?___ftneg,w
  4432  050B  0022               	movlb	2	; select bank2
  4433  050C  00A6               	movwf	_loop$2140^(0+256)
  4434  050D  0020               	movlb	0	; select bank0
  4435  050E  0858               	movf	?___ftneg+1,w
  4436  050F  0022               	movlb	2	; select bank2
  4437  0510  00A7               	movwf	(_loop$2140+1)^(0+256)
  4438  0511  0020               	movlb	0	; select bank0
  4439  0512  0859               	movf	?___ftneg+2,w
  4440  0513  0022               	movlb	2	; select bank2
  4441  0514  00A8               	movwf	(_loop$2140+2)^(0+256)
  4442  0515  082E               	movf	(_loop$900+1)^(0+256),w
  4443  0516  0020               	movlb	0	; select bank0
  4444  0517  00A9               	movwf	___awtoft@c+1
  4445  0518  0022               	movlb	2	; select bank2
  4446  0519  082D               	movf	_loop$900^(0+256),w
  4447  051A  0020               	movlb	0	; select bank0
  4448  051B  00A8               	movwf	___awtoft@c
  4449  051C  3193  23B2  3184   	fcall	___awtoft
  4450  051F  0020               	movlb	0	; select bank0
  4451  0520  0828               	movf	?___awtoft,w
  4452  0521  00BB               	movwf	___ftdiv@f2
  4453  0522  0829               	movf	?___awtoft+1,w
  4454  0523  00BC               	movwf	___ftdiv@f2+1
  4455  0524  082A               	movf	?___awtoft+2,w
  4456  0525  00BD               	movwf	___ftdiv@f2+2
  4457  0526  3012               	movlw	18
  4458  0527  00AE               	movwf	___ftadd@f1
  4459  0528  3003               	movlw	3
  4460  0529  00AF               	movwf	___ftadd@f1+1
  4461  052A  3040               	movlw	64
  4462  052B  00B0               	movwf	___ftadd@f1+2
  4463  052C  0022               	movlb	2	; select bank2
  4464  052D  0826               	movf	_loop$2140^(0+256),w
  4465  052E  0020               	movlb	0	; select bank0
  4466  052F  00B1               	movwf	___ftadd@f2
  4467  0530  0022               	movlb	2	; select bank2
  4468  0531  0827               	movf	(_loop$2140+1)^(0+256),w
  4469  0532  0020               	movlb	0	; select bank0
  4470  0533  00B2               	movwf	___ftadd@f2+1
  4471  0534  0022               	movlb	2	; select bank2
  4472  0535  0828               	movf	(_loop$2140+2)^(0+256),w
  4473  0536  0020               	movlb	0	; select bank0
  4474  0537  00B3               	movwf	___ftadd@f2+2
  4475  0538  318F  270A  3184   	fcall	___ftadd
  4476  053B  0020               	movlb	0	; select bank0
  4477  053C  082E               	movf	?___ftadd,w
  4478  053D  00BE               	movwf	___ftdiv@f1
  4479  053E  082F               	movf	?___ftadd+1,w
  4480  053F  00BF               	movwf	___ftdiv@f1+1
  4481  0540  0830               	movf	?___ftadd+2,w
  4482  0541  00C0               	movwf	___ftdiv@f1+2
  4483  0542  318B  23F1  3184   	fcall	___ftdiv
  4484  0545  0020               	movlb	0	; select bank0
  4485  0546  083B               	movf	?___ftdiv,w
  4486  0547  0022               	movlb	2	; select bank2
  4487  0548  00A0               	movwf	loop@vt^(0+256)
  4488  0549  0020               	movlb	0	; select bank0
  4489  054A  083C               	movf	?___ftdiv+1,w
  4490  054B  0022               	movlb	2	; select bank2
  4491  054C  00A1               	movwf	(loop@vt+1)^(0+256)
  4492  054D  0020               	movlb	0	; select bank0
  4493  054E  083D               	movf	?___ftdiv+2,w
  4494  054F  0022               	movlb	2	; select bank2
  4495  0550  00A2               	movwf	(loop@vt+2)^(0+256)
  4496                           
  4497                           ;main.c: 181: FVRCONbits.TSEN = 0;
  4498  0551  1297               	bcf	23,5	;volatile
  4499                           
  4500                           ;main.c: 189: float ta = (vt / -0.0014) - (0.6063 / -0.0014) - 40;
  4501  0552  3089               	movlw	137
  4502  0553  0020               	movlb	0	; select bank0
  4503  0554  00AE               	movwf	___ftadd@f1
  4504  0555  30C4               	movlw	196
  4505  0556  00AF               	movwf	___ftadd@f1+1
  4506  0557  3043               	movlw	67
  4507  0558  00B0               	movwf	___ftadd@f1+2
  4508  0559  3080               	movlw	128
  4509  055A  00BB               	movwf	___ftdiv@f2
  4510  055B  30B7               	movlw	183
  4511  055C  00BC               	movwf	___ftdiv@f2+1
  4512  055D  30BA               	movlw	186
  4513  055E  00BD               	movwf	___ftdiv@f2+2
  4514  055F  0022               	movlb	2	; select bank2
  4515  0560  0820               	movf	loop@vt^(0+256),w
  4516  0561  0020               	movlb	0	; select bank0
  4517  0562  00BE               	movwf	___ftdiv@f1
  4518  0563  0022               	movlb	2	; select bank2
  4519  0564  0821               	movf	(loop@vt+1)^(0+256),w
  4520  0565  0020               	movlb	0	; select bank0
  4521  0566  00BF               	movwf	___ftdiv@f1+1
  4522  0567  0022               	movlb	2	; select bank2
  4523  0568  0822               	movf	(loop@vt+2)^(0+256),w
  4524  0569  0020               	movlb	0	; select bank0
  4525  056A  00C0               	movwf	___ftdiv@f1+2
  4526  056B  318B  23F1  3184   	fcall	___ftdiv
  4527  056E  0020               	movlb	0	; select bank0
  4528  056F  083B               	movf	?___ftdiv,w
  4529  0570  00B1               	movwf	___ftadd@f2
  4530  0571  083C               	movf	?___ftdiv+1,w
  4531  0572  00B2               	movwf	___ftadd@f2+1
  4532  0573  083D               	movf	?___ftdiv+2,w
  4533  0574  00B3               	movwf	___ftadd@f2+2
  4534  0575  318F  270A  3184   	fcall	___ftadd
  4535  0578  0020               	movlb	0	; select bank0
  4536  0579  082E               	movf	?___ftadd,w
  4537  057A  0022               	movlb	2	; select bank2
  4538  057B  00A3               	movwf	loop@ta^(0+256)
  4539  057C  0020               	movlb	0	; select bank0
  4540  057D  082F               	movf	?___ftadd+1,w
  4541  057E  0022               	movlb	2	; select bank2
  4542  057F  00A4               	movwf	(loop@ta+1)^(0+256)
  4543  0580  0020               	movlb	0	; select bank0
  4544  0581  0830               	movf	?___ftadd+2,w
  4545  0582  0022               	movlb	2	; select bank2
  4546  0583  00A5               	movwf	(loop@ta+2)^(0+256)
  4547                           
  4548                           ;main.c: 191: setMessage(&packet, "TEMP", ta);
  4549  0584  302F               	movlw	low loop@packet
  4550  0585  0021               	movlb	1	; select bank1
  4551  0586  00B9               	movwf	setMessage@packet^(0+128)
  4552  0587  3001               	movlw	high loop@packet
  4553  0588  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4554  0589  3046               	movlw	low (STR_7| (0+32768))
  4555  058A  00BB               	movwf	setMessage@topic^(0+128)
  4556  058B  3098               	movlw	high (STR_7| (0+32768))
  4557  058C  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4558  058D  0022               	movlb	2	; select bank2
  4559  058E  0823               	movf	loop@ta^(0+256),w
  4560  058F  0021               	movlb	1	; select bank1
  4561  0590  00BD               	movwf	setMessage@value^(0+128)
  4562  0591  0022               	movlb	2	; select bank2
  4563  0592  0824               	movf	(loop@ta+1)^(0+256),w
  4564  0593  0021               	movlb	1	; select bank1
  4565  0594  00BE               	movwf	(setMessage@value+1)^(0+128)
  4566  0595  0022               	movlb	2	; select bank2
  4567  0596  0825               	movf	(loop@ta+2)^(0+256),w
  4568  0597  0021               	movlb	1	; select bank1
  4569  0598  00BF               	movwf	(setMessage@value+2)^(0+128)
  4570  0599  3187  2778  3184   	fcall	_setMessage
  4571                           
  4572                           ;main.c: 192: packet.packetData.byte = 0;
  4573  059C  0022               	movlb	2	; select bank2
  4574  059D  01AF               	clrf	loop@packet^(0+256)
  4575                           
  4576                           ;main.c: 193: packet.packetData.ACKRequest = 1;
  4577  059E  152F               	bsf	loop@packet^(0+256),2
  4578                           
  4579                           ;main.c: 194: nrf24l01SendPacket(&packet);
  4580  059F  302F               	movlw	low loop@packet
  4581  05A0  0020               	movlb	0	; select bank0
  4582  05A1  00A7               	movwf	nrf24l01SendPacket@Packet
  4583  05A2  3001               	movlw	high loop@packet
  4584  05A3  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4585  05A4  318D  254E  3184   	fcall	_nrf24l01SendPacket
  4586                           
  4587                           ;main.c: 195: checkTXPower();
  4588  05A7  3192  2255  3184   	fcall	_checkTXPower
  4589                           
  4590                           ;main.c: 196: sleep(2000);
  4591  05AA  30D0               	movlw	208
  4592  05AB  0021               	movlb	1	; select bank1
  4593  05AC  00BE               	movwf	sleep@milliseconds^(0+128)
  4594  05AD  3007               	movlw	7
  4595  05AE  00BF               	movwf	(sleep@milliseconds^(0+128)+1)
  4596  05AF  3188  2000  3184   	fcall	_sleep
  4597                           
  4598                           ;main.c: 203: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4599  05B2  30CF               	movlw	207
  4600  05B3  0020               	movlb	0	; select bank0
  4601  05B4  00D7               	movwf	___ftmul@f1
  4602  05B5  3046               	movlw	70
  4603  05B6  00D8               	movwf	___ftmul@f1+1
  4604  05B7  3040               	movlw	64
  4605  05B8  00D9               	movwf	___ftmul@f1+2
  4606  05B9  3004               	movlw	4
  4607  05BA  318A  2216  3184   	fcall	_getADCValue
  4608  05BD  0020               	movlb	0	; select bank0
  4609  05BE  084B               	movf	?_getADCValue,w
  4610  05BF  00DA               	movwf	___ftmul@f2
  4611  05C0  084C               	movf	?_getADCValue+1,w
  4612  05C1  00DB               	movwf	___ftmul@f2+1
  4613  05C2  084D               	movf	?_getADCValue+2,w
  4614  05C3  00DC               	movwf	___ftmul@f2+2
  4615  05C4  318C  249A  3184   	fcall	___ftmul
  4616  05C7  0020               	movlb	0	; select bank0
  4617  05C8  0857               	movf	?___ftmul,w
  4618  05C9  0022               	movlb	2	; select bank2
  4619  05CA  00A9               	movwf	_loop$2141^(0+256)
  4620  05CB  0020               	movlb	0	; select bank0
  4621  05CC  0858               	movf	?___ftmul+1,w
  4622  05CD  0022               	movlb	2	; select bank2
  4623  05CE  00AA               	movwf	(_loop$2141+1)^(0+256)
  4624  05CF  0020               	movlb	0	; select bank0
  4625  05D0  0859               	movf	?___ftmul+2,w
  4626  05D1  0022               	movlb	2	; select bank2
  4627  05D2  00AB               	movwf	(_loop$2141+2)^(0+256)
  4628                           
  4629                           ;main.c: 203: setMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4630  05D3  302F               	movlw	low loop@packet
  4631  05D4  0021               	movlb	1	; select bank1
  4632  05D5  00B9               	movwf	setMessage@packet^(0+128)
  4633  05D6  3001               	movlw	high loop@packet
  4634  05D7  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4635  05D8  304B               	movlw	low (STR_8| (0+32768))
  4636  05D9  00BB               	movwf	setMessage@topic^(0+128)
  4637  05DA  3098               	movlw	high (STR_8| (0+32768))
  4638  05DB  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4639  05DC  0022               	movlb	2	; select bank2
  4640  05DD  0829               	movf	_loop$2141^(0+256),w
  4641  05DE  0021               	movlb	1	; select bank1
  4642  05DF  00BD               	movwf	setMessage@value^(0+128)
  4643  05E0  0022               	movlb	2	; select bank2
  4644  05E1  082A               	movf	(_loop$2141+1)^(0+256),w
  4645  05E2  0021               	movlb	1	; select bank1
  4646  05E3  00BE               	movwf	(setMessage@value+1)^(0+128)
  4647  05E4  0022               	movlb	2	; select bank2
  4648  05E5  082B               	movf	(_loop$2141+2)^(0+256),w
  4649  05E6  0021               	movlb	1	; select bank1
  4650  05E7  00BF               	movwf	(setMessage@value+2)^(0+128)
  4651  05E8  3187  2778  3184   	fcall	_setMessage
  4652                           
  4653                           ;main.c: 204: packet.packetData.byte = 0;
  4654  05EB  0022               	movlb	2	; select bank2
  4655  05EC  01AF               	clrf	loop@packet^(0+256)
  4656                           
  4657                           ;main.c: 205: packet.packetData.ACKRequest = 0;
  4658  05ED  112F               	bcf	loop@packet^(0+256),2
  4659                           
  4660                           ;main.c: 206: nrf24l01SendPacket(&packet);
  4661  05EE  302F               	movlw	low loop@packet
  4662  05EF  0020               	movlb	0	; select bank0
  4663  05F0  00A7               	movwf	nrf24l01SendPacket@Packet
  4664  05F1  3001               	movlw	high loop@packet
  4665  05F2  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4666  05F3  318D  254E  3184   	fcall	_nrf24l01SendPacket
  4667                           
  4668                           ;main.c: 207: checkTXPower();
  4669  05F6  3192  2255  3184   	fcall	_checkTXPower
  4670                           
  4671                           ;main.c: 208: sleep(2000);
  4672  05F9  30D0               	movlw	208
  4673  05FA  0021               	movlb	1	; select bank1
  4674  05FB  00BE               	movwf	sleep@milliseconds^(0+128)
  4675  05FC  3007               	movlw	7
  4676  05FD  00BF               	movwf	(sleep@milliseconds^(0+128)+1)
  4677  05FE  3188  2000  3184   	fcall	_sleep
  4678                           
  4679                           ;main.c: 211: setMessage(&packet, "ANC3mV", getADCValue(0b010011));
  4680  0601  302F               	movlw	low loop@packet
  4681  0602  0021               	movlb	1	; select bank1
  4682  0603  00B9               	movwf	setMessage@packet^(0+128)
  4683  0604  3001               	movlw	high loop@packet
  4684  0605  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4685  0606  3034               	movlw	low (STR_9| (0+32768))
  4686  0607  00BB               	movwf	setMessage@topic^(0+128)
  4687  0608  3098               	movlw	high (STR_9| (0+32768))
  4688  0609  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4689  060A  3013               	movlw	19
  4690  060B  318A  2216  3184   	fcall	_getADCValue
  4691  060E  0020               	movlb	0	; select bank0
  4692  060F  084B               	movf	?_getADCValue,w
  4693  0610  0021               	movlb	1	; select bank1
  4694  0611  00BD               	movwf	setMessage@value^(0+128)
  4695  0612  0020               	movlb	0	; select bank0
  4696  0613  084C               	movf	?_getADCValue+1,w
  4697  0614  0021               	movlb	1	; select bank1
  4698  0615  00BE               	movwf	(setMessage@value+1)^(0+128)
  4699  0616  0020               	movlb	0	; select bank0
  4700  0617  084D               	movf	?_getADCValue+2,w
  4701  0618  0021               	movlb	1	; select bank1
  4702  0619  00BF               	movwf	(setMessage@value+2)^(0+128)
  4703  061A  3187  2778  3184   	fcall	_setMessage
  4704                           
  4705                           ;main.c: 212: packet.packetData.byte = 0;
  4706  061D  0022               	movlb	2	; select bank2
  4707  061E  01AF               	clrf	loop@packet^(0+256)
  4708                           
  4709                           ;main.c: 213: packet.packetData.ACKRequest = 1;
  4710  061F  152F               	bsf	loop@packet^(0+256),2
  4711                           
  4712                           ;main.c: 214: nrf24l01SendPacket(&packet);
  4713  0620  302F               	movlw	low loop@packet
  4714  0621  0020               	movlb	0	; select bank0
  4715  0622  00A7               	movwf	nrf24l01SendPacket@Packet
  4716  0623  3001               	movlw	high loop@packet
  4717  0624  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4718  0625  318D  254E  3184   	fcall	_nrf24l01SendPacket
  4719                           
  4720                           ;main.c: 215: checkTXPower();
  4721  0628  3192  2255  3184   	fcall	_checkTXPower
  4722                           
  4723                           ;main.c: 216: sleep(2000);
  4724  062B  30D0               	movlw	208
  4725  062C  0021               	movlb	1	; select bank1
  4726  062D  00BE               	movwf	sleep@milliseconds^(0+128)
  4727  062E  3007               	movlw	7
  4728  062F  00BF               	movwf	(sleep@milliseconds^(0+128)+1)
  4729  0630  3188  2000  3184   	fcall	_sleep
  4730                           
  4731                           ;main.c: 219: n_RF_SETUP_t rfSetup;;main.c: 220: rfSetup.byte = nrf24l01Send((unsigned) 
      +                          0b00000000 | (unsigned) 0x06, 0);
  4732  0633  0020               	movlb	0	; select bank0
  4733  0634  01A0               	clrf	nrf24l01Send@data
  4734  0635  3006               	movlw	6
  4735  0636  3187  27E0  3184   	fcall	_nrf24l01Send
  4736  0639  0021               	movlb	1	; select bank1
  4737  063A  00C3               	movwf	??_loop^(0+128)
  4738  063B  0843               	movf	??_loop^(0+128),w
  4739  063C  0022               	movlb	2	; select bank2
  4740  063D  00AC               	movwf	loop@rfSetup^(0+256)
  4741                           
  4742                           ;main.c: 222: setMessage(&packet, "RFPWR", rfSetup.RF_PWR);
  4743  063E  302F               	movlw	low loop@packet
  4744  063F  0021               	movlb	1	; select bank1
  4745  0640  00B9               	movwf	setMessage@packet^(0+128)
  4746  0641  3001               	movlw	high loop@packet
  4747  0642  00BA               	movwf	(setMessage@packet+1)^(0+128)
  4748  0643  303B               	movlw	low (STR_10| (0+32768))
  4749  0644  00BB               	movwf	setMessage@topic^(0+128)
  4750  0645  3098               	movlw	high (STR_10| (0+32768))
  4751  0646  00BC               	movwf	(setMessage@topic^(0+128)+1)
  4752  0647  0022               	movlb	2	; select bank2
  4753  0648  0C2C               	rrf	loop@rfSetup^(0+256),w
  4754  0649  3903               	andlw	3
  4755  064A  3192  22E6  3184   	fcall	___lbtoft
  4756  064D  0020               	movlb	0	; select bank0
  4757  064E  0828               	movf	?___lbtoft,w
  4758  064F  0021               	movlb	1	; select bank1
  4759  0650  00BD               	movwf	setMessage@value^(0+128)
  4760  0651  0020               	movlb	0	; select bank0
  4761  0652  0829               	movf	?___lbtoft+1,w
  4762  0653  0021               	movlb	1	; select bank1
  4763  0654  00BE               	movwf	(setMessage@value+1)^(0+128)
  4764  0655  0020               	movlb	0	; select bank0
  4765  0656  082A               	movf	?___lbtoft+2,w
  4766  0657  0021               	movlb	1	; select bank1
  4767  0658  00BF               	movwf	(setMessage@value+2)^(0+128)
  4768  0659  3187  2778  3184   	fcall	_setMessage
  4769                           
  4770                           ;main.c: 223: packet.packetData.byte = 0;
  4771  065C  0022               	movlb	2	; select bank2
  4772  065D  01AF               	clrf	loop@packet^(0+256)
  4773                           
  4774                           ;main.c: 224: packet.packetData.ACKRequest = 1;
  4775  065E  152F               	bsf	loop@packet^(0+256),2
  4776                           
  4777                           ;main.c: 225: nrf24l01SendPacket(&packet);
  4778  065F  302F               	movlw	low loop@packet
  4779  0660  0020               	movlb	0	; select bank0
  4780  0661  00A7               	movwf	nrf24l01SendPacket@Packet
  4781  0662  3001               	movlw	high loop@packet
  4782  0663  00A8               	movwf	nrf24l01SendPacket@Packet+1
  4783  0664  318D  254E  3184   	fcall	_nrf24l01SendPacket
  4784                           
  4785                           ;main.c: 226: checkTXPower();
  4786  0667  3192  2255  3184   	fcall	_checkTXPower
  4787                           
  4788                           ;main.c: 227: sleep(2000);
  4789  066A  30D0               	movlw	208
  4790  066B  0021               	movlb	1	; select bank1
  4791  066C  00BE               	movwf	sleep@milliseconds^(0+128)
  4792  066D  3007               	movlw	7
  4793  066E  00BF               	movwf	(sleep@milliseconds^(0+128)+1)
  4794  066F  3188  2000         	fcall	_sleep
  4795  0671  0008               	return
  4796  0672                     __end_of_loop:	
  4797                           
  4798                           	psect	text8
  4799  0800                     __ptext8:	
  4800 ;; *************** function _sleep *****************
  4801 ;; Defined at:
  4802 ;;		line 72 in file "main.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;  milliseconds    2   30[BANK1 ] unsigned int 
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4816 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4818 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4819 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4820 ;;Total ram usage:        4 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:   14
  4823 ;; This function calls:
  4824 ;;		_doWDTSleep
  4825 ;;		_handleRXData
  4826 ;;		_nrf24l01SetRXMode
  4827 ;; This function is called by:
  4828 ;;		_loop
  4829 ;;		_main
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           
  4834                           ;psect for function _sleep
  4835  0800                     _sleep:	
  4836                           
  4837                           ;main.c: 75: if (!milliseconds){
  4838                           
  4839                           ;incstack = 0
  4840                           ; Regs used in _sleep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4841  0800  0021               	movlb	1	; select bank1
  4842  0801  083E               	movf	sleep@milliseconds^(0+128),w
  4843  0802  043F               	iorwf	(sleep@milliseconds+1)^(0+128),w
  4844  0803  1D03               	btfss	3,2
  4845  0804  2809               	goto	l4336
  4846                           
  4847                           ;main.c: 76: doWDTSleep(0b00000);
  4848  0805  3000               	movlw	0
  4849  0806  3192  2269         	fcall	_doWDTSleep
  4850                           
  4851                           ;main.c: 77: return;
  4852  0808  0008               	return
  4853  0809                     l4336:	
  4854                           
  4855                           ;main.c: 78: };main.c: 83: milliseconds = (unsigned int) (milliseconds / (256));
  4856  0809  0021               	movlb	1	; select bank1
  4857  080A  083F               	movf	(sleep@milliseconds+1)^(0+128),w
  4858  080B  00C1               	movwf	(??_sleep^(0+128)+1)
  4859  080C  083E               	movf	sleep@milliseconds^(0+128),w
  4860  080D  00C0               	movwf	??_sleep^(0+128)
  4861  080E  0841               	movf	(??_sleep^(0+128)+1),w
  4862  080F  00C0               	movwf	??_sleep^(0+128)
  4863  0810  01C1               	clrf	(??_sleep^(0+128)+1)
  4864  0811  0840               	movf	??_sleep^(0+128),w
  4865  0812  00BE               	movwf	sleep@milliseconds^(0+128)
  4866  0813  0841               	movf	(??_sleep+1)^(0+128),w
  4867  0814  00BF               	movwf	(sleep@milliseconds+1)^(0+128)
  4868                           
  4869                           ;main.c: 86: milliseconds++;
  4870  0815  3001               	movlw	1
  4871  0816  07BE               	addwf	sleep@milliseconds^(0+128),f
  4872  0817  3000               	movlw	0
  4873  0818  3DBF               	addwfc	(sleep@milliseconds+1)^(0+128),f
  4874  0819                     l4346:	
  4875                           ;main.c: 89: while (--milliseconds){
  4876                           
  4877  0819  3001               	movlw	1
  4878  081A  0021               	movlb	1	; select bank1
  4879  081B  02BE               	subwf	sleep@milliseconds^(0+128),f
  4880  081C  3000               	movlw	0
  4881  081D  3BBF               	subwfb	(sleep@milliseconds+1)^(0+128),f
  4882  081E  083E               	movf	sleep@milliseconds^(0+128),w
  4883  081F  043F               	iorwf	(sleep@milliseconds+1)^(0+128),w
  4884  0820  1903               	btfsc	3,2
  4885  0821  0008               	return
  4886                           
  4887                           ;main.c: 92: nrf24l01SetRXMode(1);
  4888  0822  3001               	movlw	1
  4889  0823  3188  2035  3188   	fcall	_nrf24l01SetRXMode
  4890                           
  4891                           ;main.c: 95: doWDTSleep(0b01000);
  4892  0826  3008               	movlw	8
  4893  0827  3192  2269  3188   	fcall	_doWDTSleep
  4894                           
  4895                           ;main.c: 98: nrf24l01SetRXMode(0);
  4896  082A  3000               	movlw	0
  4897  082B  3188  2035  3188   	fcall	_nrf24l01SetRXMode
  4898                           
  4899                           ;main.c: 101: if (nrf24l01.RXPending){
  4900  082E  0021               	movlb	1	; select bank1
  4901  082F  1CEB               	btfss	_nrf24l01^(0+128),1	;volatile
  4902  0830  2819               	goto	l4346
  4903                           
  4904                           ;main.c: 102: handleRXData();
  4905  0831  3189  2186  3188   	fcall	_handleRXData
  4906  0834  2819               	goto	l4346
  4907  0835                     __end_of_sleep:	
  4908                           
  4909                           	psect	text9
  4910  0986                     __ptext9:	
  4911 ;; *************** function _handleRXData *****************
  4912 ;; Defined at:
  4913 ;;		line 36 in file "main.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;		None
  4916 ;; Auto vars:     Size  Location     Type
  4917 ;;  string         16   12[BANK1 ] unsigned char [16]
  4918 ;;  strings         1   29[BANK1 ] PTR unsigned char 
  4919 ;;		 -> RXPacket(33), NULL(0), 
  4920 ;;  RXPacket        1   28[BANK1 ] PTR struct .
  4921 ;;		 -> RXPacket(33), 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  1    wreg      void 
  4924 ;; Registers used:
  4925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Locals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Totals:         0       1      18       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;Total ram usage:       19 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:   13
  4938 ;; This function calls:
  4939 ;;		_atof
  4940 ;;		_nrf24l01GetRXPacket
  4941 ;;		_nrf24l01SendACK
  4942 ;;		_strcmp
  4943 ;;		_strcpy
  4944 ;;		_strtok
  4945 ;; This function is called by:
  4946 ;;		_sleep
  4947 ;; This function uses a non-reentrant model
  4948 ;;
  4949                           
  4950                           
  4951                           ;psect for function _handleRXData
  4952  0986                     _handleRXData:	
  4953                           
  4954                           ;main.c: 38: nrf24l01Packet_t * RXPacket = nrf24l01GetRXPacket();
  4955                           
  4956                           ;incstack = 0
  4957                           ; Regs used in _handleRXData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4958  0986  3180  2002  3189   	fcall	_nrf24l01GetRXPacket
  4959  0989  0020               	movlb	0	; select bank0
  4960  098A  00EF               	movwf	??_handleRXData
  4961  098B  086F               	movf	??_handleRXData,w
  4962  098C  0021               	movlb	1	; select bank1
  4963  098D  00BC               	movwf	handleRXData@RXPacket^(0+128)
  4964                           
  4965                           ;main.c: 40: char string[16];;main.c: 41: char* strings = strtok(RXPacket->Message, "/")
      +                          ;
  4966  098E  305D               	movlw	low (STR_1| (0+32768))
  4967  098F  0020               	movlb	0	; select bank0
  4968  0990  00AE               	movwf	strtok@s2
  4969  0991  3098               	movlw	high (STR_1| (0+32768))
  4970  0992  00AF               	movwf	strtok@s2+1
  4971  0993  0021               	movlb	1	; select bank1
  4972  0994  083C               	movf	handleRXData@RXPacket^(0+128),w
  4973  0995  3E01               	addlw	1
  4974  0996  3197  27B5  3189   	fcall	_strtok
  4975  0999  0020               	movlb	0	; select bank0
  4976  099A  00EF               	movwf	??_handleRXData
  4977  099B  086F               	movf	??_handleRXData,w
  4978  099C  0021               	movlb	1	; select bank1
  4979  099D  00BD               	movwf	handleRXData@strings^(0+128)
  4980                           
  4981                           ;main.c: 43: strcpy(string, strings);
  4982  099E  30AC               	movlw	low handleRXData@string
  4983  099F  0020               	movlb	0	; select bank0
  4984  09A0  00A0               	movwf	strcpy@to
  4985  09A1  3000               	movlw	high handleRXData@string
  4986  09A2  00A1               	movwf	strcpy@to+1
  4987  09A3  0021               	movlb	1	; select bank1
  4988  09A4  083D               	movf	handleRXData@strings^(0+128),w
  4989  09A5  0020               	movlb	0	; select bank0
  4990  09A6  00A2               	movwf	strcpy@from
  4991  09A7  39FF               	andlw	255
  4992  09A8  1D03               	skipz
  4993  09A9  3001               	movlw	1
  4994  09AA  00A3               	movwf	strcpy@from+1
  4995  09AB  3193  2301  3189   	fcall	_strcpy
  4996                           
  4997                           ;main.c: 45: if (strcmp(string, romData->name) != 0){
  4998  09AE  30AC               	movlw	low handleRXData@string
  4999  09AF  0020               	movlb	0	; select bank0
  5000  09B0  00A0               	movwf	strcmp@s1
  5001  09B1  3000               	movlw	high handleRXData@string
  5002  09B2  00A1               	movwf	strcmp@s1+1
  5003  09B3  0021               	movlb	1	; select bank1
  5004  09B4  086C               	movf	_romData^(0+128),w
  5005  09B5  3E01               	addlw	1
  5006  09B6  0020               	movlb	0	; select bank0
  5007  09B7  00EF               	movwf	??_handleRXData
  5008  09B8  086F               	movf	??_handleRXData,w
  5009  09B9  00A2               	movwf	strcmp@s2
  5010  09BA  3194  2446  3189   	fcall	_strcmp
  5011                           
  5012                           ;main.c: 49: };main.c: 52: if (RXPacket->packetData.ACKRequest){
  5013  09BD  0021               	movlb	1	; select bank1
  5014  09BE  083C               	movf	handleRXData@RXPacket^(0+128),w
  5015  09BF  0086               	movwf	6
  5016  09C0  3001               	movlw	1	; select bank2/3
  5017  09C1  0087               	movwf	7
  5018  09C2  1D01               	btfss	1,2
  5019  09C3  29C8               	goto	l180
  5020                           
  5021                           ;main.c: 53: nrf24l01SendACK(RXPacket);
  5022  09C4  083C               	movf	handleRXData@RXPacket^(0+128),w
  5023  09C5  3194  24F0  3189   	fcall	_nrf24l01SendACK
  5024  09C8                     l180:	
  5025                           
  5026                           ;main.c: 54: };main.c: 56: strings = strtok((0), "/");
  5027  09C8  305D               	movlw	low (STR_1| (0+32768))
  5028  09C9  0020               	movlb	0	; select bank0
  5029  09CA  00AE               	movwf	strtok@s2
  5030  09CB  3098               	movlw	high (STR_1| (0+32768))
  5031  09CC  00AF               	movwf	strtok@s2+1
  5032  09CD  3000               	movlw	0
  5033  09CE  3197  27B5  3189   	fcall	_strtok
  5034  09D1  0020               	movlb	0	; select bank0
  5035  09D2  00EF               	movwf	??_handleRXData
  5036  09D3  086F               	movf	??_handleRXData,w
  5037  09D4  0021               	movlb	1	; select bank1
  5038  09D5  00BD               	movwf	handleRXData@strings^(0+128)
  5039                           
  5040                           ;main.c: 57: strcpy(string, strings);
  5041  09D6  30AC               	movlw	low handleRXData@string
  5042  09D7  0020               	movlb	0	; select bank0
  5043  09D8  00A0               	movwf	strcpy@to
  5044  09D9  3000               	movlw	high handleRXData@string
  5045  09DA  00A1               	movwf	strcpy@to+1
  5046  09DB  0021               	movlb	1	; select bank1
  5047  09DC  083D               	movf	handleRXData@strings^(0+128),w
  5048  09DD  0020               	movlb	0	; select bank0
  5049  09DE  00A2               	movwf	strcpy@from
  5050  09DF  39FF               	andlw	255
  5051  09E0  1D03               	skipz
  5052  09E1  3001               	movlw	1
  5053  09E2  00A3               	movwf	strcpy@from+1
  5054  09E3  3193  2301  3189   	fcall	_strcpy
  5055                           
  5056                           ;main.c: 61: strings = strtok((0), "/");
  5057  09E6  305D               	movlw	low (STR_1| (0+32768))
  5058  09E7  0020               	movlb	0	; select bank0
  5059  09E8  00AE               	movwf	strtok@s2
  5060  09E9  3098               	movlw	high (STR_1| (0+32768))
  5061  09EA  00AF               	movwf	strtok@s2+1
  5062  09EB  3000               	movlw	0
  5063  09EC  3197  27B5  3189   	fcall	_strtok
  5064  09EF  0020               	movlb	0	; select bank0
  5065  09F0  00EF               	movwf	??_handleRXData
  5066  09F1  086F               	movf	??_handleRXData,w
  5067  09F2  0021               	movlb	1	; select bank1
  5068  09F3  00BD               	movwf	handleRXData@strings^(0+128)
  5069                           
  5070                           ;main.c: 62: strcpy(string, strings);
  5071  09F4  30AC               	movlw	low handleRXData@string
  5072  09F5  0020               	movlb	0	; select bank0
  5073  09F6  00A0               	movwf	strcpy@to
  5074  09F7  3000               	movlw	high handleRXData@string
  5075  09F8  00A1               	movwf	strcpy@to+1
  5076  09F9  0021               	movlb	1	; select bank1
  5077  09FA  083D               	movf	handleRXData@strings^(0+128),w
  5078  09FB  0020               	movlb	0	; select bank0
  5079  09FC  00A2               	movwf	strcpy@from
  5080  09FD  39FF               	andlw	255
  5081  09FE  1D03               	skipz
  5082  09FF  3001               	movlw	1
  5083  0A00  00A3               	movwf	strcpy@from+1
  5084  0A01  3193  2301  3189   	fcall	_strcpy
  5085                           
  5086                           ;main.c: 66: counter = atof(string);
  5087  0A04  30AC               	movlw	(low (handleRXData@string| 0))& (0+255)
  5088  0A05  3192  2242         	fcall	_atof
  5089  0A07  0021               	movlb	1	; select bank1
  5090  0A08  0828               	movf	?_atof^(0+128),w
  5091  0A09  0022               	movlb	2	; select bank2
  5092  0A0A  00D0               	movwf	_counter^(0+256)
  5093  0A0B  0021               	movlb	1	; select bank1
  5094  0A0C  0829               	movf	(?_atof+1)^(0+128),w
  5095  0A0D  0022               	movlb	2	; select bank2
  5096  0A0E  00D1               	movwf	(_counter+1)^(0+256)
  5097  0A0F  0021               	movlb	1	; select bank1
  5098  0A10  082A               	movf	(?_atof+2)^(0+128),w
  5099  0A11  0022               	movlb	2	; select bank2
  5100  0A12  00D2               	movwf	(_counter+2)^(0+256)
  5101                           
  5102                           ;main.c: 68: nrf24l01.RXPending = 0;
  5103  0A13  0021               	movlb	1	; select bank1
  5104  0A14  10EB               	bcf	_nrf24l01^(0+128),1	;volatile
  5105  0A15  0008               	return
  5106  0A16                     __end_of_handleRXData:	
  5107                           
  5108                           	psect	text10
  5109  17B5                     __ptext10:	
  5110 ;; *************** function _strtok *****************
  5111 ;; Defined at:
  5112 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strtok.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;  s1              1    wreg     PTR unsigned char 
  5115 ;;		 -> RXPacket(33), NULL(0), 
  5116 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
  5117 ;;		 -> STR_3(2), STR_2(2), STR_1(2), 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;  s1              1   19[BANK0 ] PTR unsigned char 
  5120 ;;		 -> RXPacket(33), NULL(0), 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  1    wreg      PTR unsigned char 
  5123 ;; Registers used:
  5124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5130 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5132 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5133 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5134 ;;Total ram usage:        6 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    9
  5137 ;; This function calls:
  5138 ;;		_strcspn
  5139 ;;		_strspn
  5140 ;; This function is called by:
  5141 ;;		_handleRXData
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           
  5146                           ;psect for function _strtok
  5147  17B5                     _strtok:	
  5148                           
  5149                           ;incstack = 0
  5150                           ; Regs used in _strtok: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5151                           ;strtok@s1 stored from wreg
  5152  17B5  0020               	movlb	0	; select bank0
  5153  17B6  00B3               	movwf	strtok@s1
  5154  17B7  0833               	movf	strtok@s1,w
  5155  17B8  1D03               	btfss	3,2
  5156  17B9  2FBE               	goto	l3440
  5157  17BA  087D               	movf	strtok@sp,w
  5158  17BB  00B0               	movwf	??_strtok
  5159  17BC  0830               	movf	??_strtok,w
  5160  17BD  00B3               	movwf	strtok@s1
  5161  17BE                     l3440:	
  5162  17BE  0833               	movf	strtok@s1,w
  5163  17BF  1D03               	btfss	3,2
  5164  17C0  2FC3               	goto	l3446
  5165  17C1  3000               	movlw	0
  5166  17C2  0008               	return
  5167  17C3                     l3446:	
  5168  17C3  082F               	movf	strtok@s2+1,w
  5169  17C4  00A8               	movwf	strspn@s2+1
  5170  17C5  082E               	movf	strtok@s2,w
  5171  17C6  00A7               	movwf	strspn@s2
  5172  17C7  0833               	movf	strtok@s1,w
  5173  17C8  3195  257E  3197   	fcall	_strspn
  5174  17CB  0020               	movlb	0	; select bank0
  5175  17CC  0827               	movf	?_strspn,w
  5176  17CD  00B0               	movwf	??_strtok
  5177  17CE  0830               	movf	??_strtok,w
  5178  17CF  07B3               	addwf	strtok@s1,f
  5179  17D0  0833               	movf	strtok@s1,w
  5180  17D1  0086               	movwf	6
  5181  17D2  3001               	movlw	1	; select bank2/3
  5182  17D3  0087               	movwf	7
  5183  17D4  0801               	movf	1,w
  5184  17D5  1D03               	btfss	3,2
  5185  17D6  2FDA               	goto	l3454
  5186  17D7  01FD               	clrf	strtok@sp
  5187  17D8  3000               	movlw	0
  5188  17D9  0008               	return
  5189  17DA                     l3454:	
  5190  17DA  082F               	movf	strtok@s2+1,w
  5191  17DB  00A8               	movwf	strcspn@s2+1
  5192  17DC  082E               	movf	strtok@s2,w
  5193  17DD  00A7               	movwf	strcspn@s2
  5194  17DE  0833               	movf	strtok@s1,w
  5195  17DF  3195  254E  3197   	fcall	_strcspn
  5196  17E2  0020               	movlb	0	; select bank0
  5197  17E3  0827               	movf	?_strcspn,w
  5198  17E4  00B0               	movwf	??_strtok
  5199  17E5  0828               	movf	?_strcspn+1,w
  5200  17E6  00B1               	movwf	??_strtok+1
  5201  17E7  0833               	movf	strtok@s1,w
  5202  17E8  0730               	addwf	??_strtok,w
  5203  17E9  00B2               	movwf	??_strtok+2
  5204  17EA  0832               	movf	??_strtok+2,w
  5205  17EB  00FD               	movwf	strtok@sp
  5206  17EC  087D               	movf	strtok@sp,w
  5207  17ED  0086               	movwf	6
  5208  17EE  3001               	movlw	1	; select bank2/3
  5209  17EF  0087               	movwf	7
  5210  17F0  0801               	movf	1,w
  5211  17F1  1903               	btfsc	3,2
  5212  17F2  2FFD               	goto	l3462
  5213  17F3  087D               	movf	strtok@sp,w
  5214  17F4  0086               	movwf	6
  5215  17F5  3001               	movlw	1	; select bank2/3
  5216  17F6  0087               	movwf	7
  5217  17F7  0181               	clrf	1
  5218  17F8  3001               	movlw	1
  5219  17F9  00B0               	movwf	??_strtok
  5220  17FA  0830               	movf	??_strtok,w
  5221  17FB  07FD               	addwf	strtok@sp,f
  5222  17FC  2FFE               	goto	l3464
  5223  17FD                     l3462:	
  5224  17FD  01FD               	clrf	strtok@sp
  5225  17FE                     l3464:	
  5226  17FE  0833               	movf	strtok@s1,w
  5227  17FF  0008               	return
  5228  1800                     __end_of_strtok:	
  5229                           
  5230                           	psect	text11
  5231  157E                     __ptext11:	
  5232 ;; *************** function _strspn *****************
  5233 ;; Defined at:
  5234 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strspn.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;  s1              1    wreg     PTR const unsigned char 
  5237 ;;		 -> RXPacket(33), NULL(0), 
  5238 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  5239 ;;		 -> STR_3(2), STR_2(2), STR_1(2), 
  5240 ;; Auto vars:     Size  Location     Type
  5241 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  5242 ;;		 -> RXPacket(33), NULL(0), 
  5243 ;;  i               2   11[BANK0 ] unsigned int 
  5244 ;; Return value:  Size  Location     Type
  5245 ;;                  2    7[BANK0 ] unsigned int 
  5246 ;; Registers used:
  5247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5253 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5254 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5255 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5256 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5257 ;;Total ram usage:        7 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    8
  5260 ;; This function calls:
  5261 ;;		_strchr
  5262 ;; This function is called by:
  5263 ;;		_strtok
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           
  5268                           ;psect for function _strspn
  5269  157E                     _strspn:	
  5270                           
  5271                           ;incstack = 0
  5272                           ; Regs used in _strspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5273                           ;strspn@s1 stored from wreg
  5274  157E  0020               	movlb	0	; select bank0
  5275  157F  00AD               	movwf	strspn@s1
  5276  1580  01AB               	clrf	strspn@i
  5277  1581  01AC               	clrf	strspn@i+1
  5278  1582  2D8B               	goto	l3408
  5279  1583                     l3406:	
  5280  1583  3001               	movlw	1
  5281  1584  00A9               	movwf	??_strspn
  5282  1585  0829               	movf	??_strspn,w
  5283  1586  07AD               	addwf	strspn@s1,f
  5284  1587  3001               	movlw	1
  5285  1588  07AB               	addwf	strspn@i,f
  5286  1589  3000               	movlw	0
  5287  158A  3DAC               	addwfc	strspn@i+1,f
  5288  158B                     l3408:	
  5289  158B  082D               	movf	strspn@s1,w
  5290  158C  0086               	movwf	6
  5291  158D  3001               	movlw	1	; select bank2/3
  5292  158E  0087               	movwf	7
  5293  158F  0801               	movf	1,w
  5294  1590  1903               	btfsc	3,2
  5295  1591  2DA9               	goto	l3412
  5296  1592  0828               	movf	strspn@s2+1,w
  5297  1593  00A1               	movwf	strchr@ptr+1
  5298  1594  0827               	movf	strspn@s2,w
  5299  1595  00A0               	movwf	strchr@ptr
  5300  1596  082D               	movf	strspn@s1,w
  5301  1597  0086               	movwf	6
  5302  1598  3001               	movlw	1	; select bank2/3
  5303  1599  0087               	movwf	7
  5304  159A  0801               	movf	1,w
  5305  159B  00A9               	movwf	??_strspn
  5306  159C  01AA               	clrf	??_strspn+1
  5307  159D  0829               	movf	??_strspn,w
  5308  159E  00A2               	movwf	strchr@chr
  5309  159F  082A               	movf	??_strspn+1,w
  5310  15A0  00A3               	movwf	strchr@chr+1
  5311  15A1  3192  22B1  3195   	fcall	_strchr
  5312  15A4  0020               	movlb	0	; select bank0
  5313  15A5  0820               	movf	?_strchr,w
  5314  15A6  0421               	iorwf	?_strchr+1,w
  5315  15A7  1D03               	btfss	3,2
  5316  15A8  2D83               	goto	l3406
  5317  15A9                     l3412:	
  5318  15A9  082C               	movf	strspn@i+1,w
  5319  15AA  00A8               	movwf	?_strspn+1
  5320  15AB  082B               	movf	strspn@i,w
  5321  15AC  00A7               	movwf	?_strspn
  5322  15AD  0008               	return
  5323  15AE                     __end_of_strspn:	
  5324                           
  5325                           	psect	text12
  5326  154E                     __ptext12:	
  5327 ;; *************** function _strcspn *****************
  5328 ;; Defined at:
  5329 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcspn.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  s1              1    wreg     PTR const unsigned char 
  5332 ;;		 -> RXPacket(33), NULL(0), 
  5333 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  5334 ;;		 -> STR_3(2), STR_2(2), STR_1(2), 
  5335 ;; Auto vars:     Size  Location     Type
  5336 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  5337 ;;		 -> RXPacket(33), NULL(0), 
  5338 ;;  i               2   11[BANK0 ] unsigned int 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  2    7[BANK0 ] unsigned int 
  5341 ;; Registers used:
  5342 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5348 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;Total ram usage:        7 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    8
  5355 ;; This function calls:
  5356 ;;		_strchr
  5357 ;; This function is called by:
  5358 ;;		_strtok
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           
  5363                           ;psect for function _strcspn
  5364  154E                     _strcspn:	
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in _strcspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5368                           ;strcspn@s1 stored from wreg
  5369  154E  0020               	movlb	0	; select bank0
  5370  154F  00AD               	movwf	strcspn@s1
  5371  1550  01AB               	clrf	strcspn@i
  5372  1551  01AC               	clrf	strcspn@i+1
  5373  1552  2D5B               	goto	l3420
  5374  1553                     l3418:	
  5375  1553  3001               	movlw	1
  5376  1554  00A9               	movwf	??_strcspn
  5377  1555  0829               	movf	??_strcspn,w
  5378  1556  07AD               	addwf	strcspn@s1,f
  5379  1557  3001               	movlw	1
  5380  1558  07AB               	addwf	strcspn@i,f
  5381  1559  3000               	movlw	0
  5382  155A  3DAC               	addwfc	strcspn@i+1,f
  5383  155B                     l3420:	
  5384  155B  082D               	movf	strcspn@s1,w
  5385  155C  0086               	movwf	6
  5386  155D  3001               	movlw	1	; select bank2/3
  5387  155E  0087               	movwf	7
  5388  155F  0801               	movf	1,w
  5389  1560  1903               	btfsc	3,2
  5390  1561  2D79               	goto	l3424
  5391  1562  0828               	movf	strcspn@s2+1,w
  5392  1563  00A1               	movwf	strchr@ptr+1
  5393  1564  0827               	movf	strcspn@s2,w
  5394  1565  00A0               	movwf	strchr@ptr
  5395  1566  082D               	movf	strcspn@s1,w
  5396  1567  0086               	movwf	6
  5397  1568  3001               	movlw	1	; select bank2/3
  5398  1569  0087               	movwf	7
  5399  156A  0801               	movf	1,w
  5400  156B  00A9               	movwf	??_strcspn
  5401  156C  01AA               	clrf	??_strcspn+1
  5402  156D  0829               	movf	??_strcspn,w
  5403  156E  00A2               	movwf	strchr@chr
  5404  156F  082A               	movf	??_strcspn+1,w
  5405  1570  00A3               	movwf	strchr@chr+1
  5406  1571  3192  22B1  3195   	fcall	_strchr
  5407  1574  0020               	movlb	0	; select bank0
  5408  1575  0820               	movf	?_strchr,w
  5409  1576  0421               	iorwf	?_strchr+1,w
  5410  1577  1903               	btfsc	3,2
  5411  1578  2D53               	goto	l3418
  5412  1579                     l3424:	
  5413  1579  082C               	movf	strcspn@i+1,w
  5414  157A  00A8               	movwf	?_strcspn+1
  5415  157B  082B               	movf	strcspn@i,w
  5416  157C  00A7               	movwf	?_strcspn
  5417  157D  0008               	return
  5418  157E                     __end_of_strcspn:	
  5419                           
  5420                           	psect	text13
  5421  12B1                     __ptext13:	
  5422 ;; *************** function _strchr *****************
  5423 ;; Defined at:
  5424 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strchr.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
  5427 ;;		 -> STR_3(2), STR_2(2), STR_1(2), 
  5428 ;;  chr             2    2[BANK0 ] int 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;		None
  5431 ;; Return value:  Size  Location     Type
  5432 ;;                  2    0[BANK0 ] PTR unsigned char 
  5433 ;; Registers used:
  5434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5435 ;; Tracked objects:
  5436 ;;		On entry : 0/0
  5437 ;;		On exit  : 0/0
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5440 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;Total ram usage:        7 bytes
  5445 ;; Hardware stack levels used:    1
  5446 ;; Hardware stack levels required when called:    7
  5447 ;; This function calls:
  5448 ;;		Nothing
  5449 ;; This function is called by:
  5450 ;;		_strcspn
  5451 ;;		_strspn
  5452 ;; This function uses a non-reentrant model
  5453 ;;
  5454                           
  5455                           
  5456                           ;psect for function _strchr
  5457  12B1                     _strchr:	
  5458  12B1                     l1047:	
  5459                           ;incstack = 0
  5460                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0+pclath]
  5461                           
  5462  12B1  0020               	movlb	0	; select bank0
  5463  12B2  0820               	movf	strchr@ptr,w
  5464  12B3  0084               	movwf	4
  5465  12B4  0821               	movf	strchr@ptr+1,w
  5466  12B5  0085               	movwf	5
  5467  12B6  0800               	movf	0,w	;code access
  5468  12B7  0622               	xorwf	strchr@chr,w
  5469  12B8  1903               	btfsc	3,2
  5470  12B9  0008               	return
  5471  12BA  0821               	movf	strchr@ptr+1,w
  5472  12BB  00A5               	movwf	??_strchr+1
  5473  12BC  0820               	movf	strchr@ptr,w
  5474  12BD  00A4               	movwf	??_strchr
  5475  12BE  0AA0               	incf	strchr@ptr,f
  5476  12BF  1903               	skipnz
  5477  12C0  0AA1               	incf	strchr@ptr+1,f
  5478  12C1  0824               	movf	??_strchr,w
  5479  12C2  0084               	movwf	4
  5480  12C3  0825               	movf	??_strchr+1,w
  5481  12C4  0085               	movwf	5
  5482  12C5  0012               	moviw fsr0++
  5483  12C6  1D03               	btfss	3,2
  5484  12C7  2AB1               	goto	l1047
  5485  12C8  01A0               	clrf	?_strchr
  5486  12C9  01A1               	clrf	?_strchr+1
  5487  12CA  0008               	return
  5488  12CB                     __end_of_strchr:	
  5489                           
  5490                           	psect	text14
  5491  1301                     __ptext14:	
  5492 ;; *************** function _strcpy *****************
  5493 ;; Defined at:
  5494 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5497 ;;		 -> handleRXData@string(16), romDataMap(28), 
  5498 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5499 ;;		 -> RXPacket(33), STR_11(4), NULL(0), 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5502 ;;		 -> handleRXData@string(16), romDataMap(28), 
  5503 ;; Return value:  Size  Location     Type
  5504 ;;                  2    0[BANK0 ] PTR unsigned char 
  5505 ;; Registers used:
  5506 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5512 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;Total ram usage:        6 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; Hardware stack levels required when called:    7
  5519 ;; This function calls:
  5520 ;;		Nothing
  5521 ;; This function is called by:
  5522 ;;		_handleRXData
  5523 ;;		_main
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function _strcpy
  5529  1301                     _strcpy:	
  5530                           
  5531                           ;incstack = 0
  5532                           ; Regs used in _strcpy: [wreg-fsr1h+pclath]
  5533  1301  0020               	movlb	0	; select bank0
  5534  1302  0821               	movf	strcpy@to+1,w
  5535  1303  00A5               	movwf	strcpy@cp+1
  5536  1304  0820               	movf	strcpy@to,w
  5537  1305  00A4               	movwf	strcpy@cp
  5538  1306                     l4312:	
  5539  1306  0824               	movf	strcpy@cp,w
  5540  1307  0086               	movwf	6
  5541  1308  0825               	movf	strcpy@cp+1,w
  5542  1309  0087               	movwf	7
  5543  130A  0822               	movf	strcpy@from,w
  5544  130B  0084               	movwf	4
  5545  130C  0823               	movf	strcpy@from+1,w
  5546  130D  0085               	movwf	5
  5547  130E  0800               	movf	0,w	;code access
  5548  130F  3FC0               	movwi [0]fsr1
  5549  1310  0889               	movf	9,f
  5550  1311  1903               	btfsc	3,2
  5551  1312  0008               	return
  5552  1313  3001               	movlw	1
  5553  1314  07A4               	addwf	strcpy@cp,f
  5554  1315  3000               	movlw	0
  5555  1316  3DA5               	addwfc	strcpy@cp+1,f
  5556  1317  3001               	movlw	1
  5557  1318  07A2               	addwf	strcpy@from,f
  5558  1319  3000               	movlw	0
  5559  131A  3DA3               	addwfc	strcpy@from+1,f
  5560  131B  2B06               	goto	l4312
  5561  131C                     __end_of_strcpy:	
  5562                           ;	Return value of _strcpy is never used
  5563                           
  5564                           
  5565                           	psect	text15
  5566  1446                     __ptext15:	
  5567 ;; *************** function _strcmp *****************
  5568 ;; Defined at:
  5569 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5570 ;; Parameters:    Size  Location     Type
  5571 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  5572 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), NULL(0), 
  5573 ;;		 -> handleRXData@string(16), 
  5574 ;;  s2              1    2[BANK0 ] PTR const unsigned char 
  5575 ;;		 -> romDataMap.name(16), RXPacket(33), romDataMap(28), 
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;  r               1    4[BANK0 ] char 
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  2    0[BANK0 ] int 
  5580 ;; Registers used:
  5581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5587 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5590 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5591 ;;Total ram usage:        5 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    7
  5594 ;; This function calls:
  5595 ;;		Nothing
  5596 ;; This function is called by:
  5597 ;;		_handleRXData
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           
  5602                           ;psect for function _strcmp
  5603  1446                     _strcmp:	
  5604                           
  5605                           ;incstack = 0
  5606                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0]
  5607  1446  2C50               	goto	l3480
  5608  1447                     l3476:	
  5609  1447  3001               	movlw	1
  5610  1448  0020               	movlb	0	; select bank0
  5611  1449  07A0               	addwf	strcmp@s1,f
  5612  144A  3000               	movlw	0
  5613  144B  3DA1               	addwfc	strcmp@s1+1,f
  5614  144C  3001               	movlw	1
  5615  144D  00A3               	movwf	??_strcmp
  5616  144E  0823               	movf	??_strcmp,w
  5617  144F  07A2               	addwf	strcmp@s2,f
  5618  1450                     l3480:	
  5619  1450  0020               	movlb	0	; select bank0
  5620  1451  0820               	movf	strcmp@s1,w
  5621  1452  0086               	movwf	6
  5622  1453  0821               	movf	strcmp@s1+1,w
  5623  1454  0087               	movwf	7
  5624  1455  0822               	movf	strcmp@s2,w
  5625  1456  0084               	movwf	4
  5626  1457  3001               	movlw	1	; select bank2/3
  5627  1458  0085               	movwf	5
  5628  1459  0300               	decf	0,w
  5629  145A  3AFF               	xorlw	255
  5630  145B  0701               	addwf	1,w
  5631  145C  00A3               	movwf	??_strcmp
  5632  145D  0823               	movf	??_strcmp,w
  5633  145E  00A4               	movwf	strcmp@r
  5634  145F  0824               	movf	strcmp@r,w
  5635  1460  1D03               	btfss	3,2
  5636  1461  2C69               	goto	l3484
  5637  1462  0820               	movf	strcmp@s1,w
  5638  1463  0086               	movwf	6
  5639  1464  0821               	movf	strcmp@s1+1,w
  5640  1465  0087               	movwf	7
  5641  1466  0801               	movf	1,w
  5642  1467  1D03               	btfss	3,2
  5643  1468  2C47               	goto	l3476
  5644  1469                     l3484:	
  5645  1469  0824               	movf	strcmp@r,w
  5646  146A  00A0               	movwf	?_strcmp
  5647  146B  01A1               	clrf	?_strcmp+1
  5648  146C  1BA0               	btfsc	?_strcmp,7
  5649  146D  03A1               	decf	?_strcmp+1,f
  5650  146E  0008               	return
  5651  146F                     __end_of_strcmp:	
  5652                           
  5653                           	psect	text16
  5654  14F0                     __ptext16:	
  5655 ;; *************** function _nrf24l01SendACK *****************
  5656 ;; Defined at:
  5657 ;;		line 92 in file "nrf24l01.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  packet          1    wreg     PTR struct .
  5660 ;;		 -> RXPacket(33), 
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  packet          1   15[BANK0 ] PTR struct .
  5663 ;;		 -> RXPacket(33), 
  5664 ;; Return value:  Size  Location     Type
  5665 ;;                  1    wreg      void 
  5666 ;; Registers used:
  5667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5668 ;; Tracked objects:
  5669 ;;		On entry : 0/0
  5670 ;;		On exit  : 0/0
  5671 ;;		Unchanged: 0/0
  5672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5676 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;Total ram usage:        2 bytes
  5678 ;; Hardware stack levels used:    1
  5679 ;; Hardware stack levels required when called:   12
  5680 ;; This function calls:
  5681 ;;		_nrf24l01SendPacket
  5682 ;;		_nrf24l01SetTXPipe
  5683 ;; This function is called by:
  5684 ;;		_handleRXData
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           
  5689                           ;psect for function _nrf24l01SendACK
  5690  14F0                     _nrf24l01SendACK:	
  5691                           
  5692                           ;incstack = 0
  5693                           ; Regs used in _nrf24l01SendACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5694                           ;nrf24l01SendACK@packet stored from wreg
  5695  14F0  0020               	movlb	0	; select bank0
  5696  14F1  00AF               	movwf	nrf24l01SendACK@packet
  5697                           
  5698                           ;nrf24l01.c: 94: nrf24l01SetTXPipe(packet->packetData.Pipe);
  5699  14F2  082F               	movf	nrf24l01SendACK@packet,w
  5700  14F3  0086               	movwf	6
  5701  14F4  3001               	movlw	1	; select bank2/3
  5702  14F5  0087               	movwf	7
  5703  14F6  0E01               	swapf	1,w
  5704  14F7  3907               	andlw	7
  5705  14F8  3196  26E1  3194   	fcall	_nrf24l01SetTXPipe
  5706                           
  5707                           ;nrf24l01.c: 96: packet->packetData.ACKRequest = 0;
  5708  14FB  0020               	movlb	0	; select bank0
  5709  14FC  082F               	movf	nrf24l01SendACK@packet,w
  5710  14FD  0086               	movwf	6
  5711  14FE  3001               	movlw	1	; select bank2/3
  5712  14FF  0087               	movwf	7
  5713  1500  1101               	bcf	1,2
  5714                           
  5715                           ;nrf24l01.c: 97: packet->packetData.IsACK = 1;
  5716  1501  082F               	movf	nrf24l01SendACK@packet,w
  5717  1502  0086               	movwf	6
  5718  1503  3001               	movlw	1	; select bank2/3
  5719  1504  0087               	movwf	7
  5720  1505  1581               	bsf	1,3
  5721                           
  5722                           ;nrf24l01.c: 98: packet->packetData.ACKRPD = packet->packetData.RPD;
  5723  1506  082F               	movf	nrf24l01SendACK@packet,w
  5724  1507  0086               	movwf	6
  5725  1508  3001               	movlw	1	; select bank2/3
  5726  1509  0087               	movwf	7
  5727  150A  0801               	movf	1,w
  5728  150B  3901               	andlw	1
  5729  150C  00AE               	movwf	??_nrf24l01SendACK
  5730  150D  082F               	movf	nrf24l01SendACK@packet,w
  5731  150E  0086               	movwf	6
  5732  150F  3001               	movlw	1	; select bank2/3
  5733  1510  0087               	movwf	7
  5734  1511  0DAE               	rlf	??_nrf24l01SendACK,f
  5735  1512  0801               	movf	1,w
  5736  1513  062E               	xorwf	??_nrf24l01SendACK,w
  5737  1514  39FD               	andlw	-3
  5738  1515  062E               	xorwf	??_nrf24l01SendACK,w
  5739  1516  0081               	movwf	1
  5740                           
  5741                           ;nrf24l01.c: 101: nrf24l01SendPacket(packet);
  5742  1517  082F               	movf	nrf24l01SendACK@packet,w
  5743  1518  00A7               	movwf	nrf24l01SendPacket@Packet
  5744  1519  3001               	movlw	1
  5745  151A  00A8               	movwf	nrf24l01SendPacket@Packet+1
  5746  151B  318D  254E         	fcall	_nrf24l01SendPacket
  5747  151D  0008               	return
  5748  151E                     __end_of_nrf24l01SendACK:	
  5749                           
  5750                           	psect	text17
  5751  16E1                     __ptext17:	
  5752 ;; *************** function _nrf24l01SetTXPipe *****************
  5753 ;; Defined at:
  5754 ;;		line 315 in file "nrf24l01.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;  pipe            1    wreg     unsigned char 
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;  pipe            1    6[BANK0 ] unsigned char 
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  1    wreg      void 
  5761 ;; Registers used:
  5762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5763 ;; Tracked objects:
  5764 ;;		On entry : 0/0
  5765 ;;		On exit  : 0/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5772 ;;Total ram usage:        3 bytes
  5773 ;; Hardware stack levels used:    1
  5774 ;; Hardware stack levels required when called:    9
  5775 ;; This function calls:
  5776 ;;		___bmul
  5777 ;;		_nrf24l01SPIEnd
  5778 ;;		_nrf24l01SPISend
  5779 ;;		_nrf24l01SPIStart
  5780 ;; This function is called by:
  5781 ;;		_main
  5782 ;;		_nrf24l01SendACK
  5783 ;;		_nrf24l01InitRegisters
  5784 ;; This function uses a non-reentrant model
  5785 ;;
  5786                           
  5787                           
  5788                           ;psect for function _nrf24l01SetTXPipe
  5789  16E1                     _nrf24l01SetTXPipe:	
  5790                           
  5791                           ;incstack = 0
  5792                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5793                           ;nrf24l01SetTXPipe@pipe stored from wreg
  5794  16E1  0020               	movlb	0	; select bank0
  5795  16E2  00A6               	movwf	nrf24l01SetTXPipe@pipe
  5796                           
  5797                           ;nrf24l01.c: 318: nrf24l01SPIStart();
  5798  16E3  3191  21F0  3196   	fcall	_nrf24l01SPIStart
  5799                           
  5800                           ;nrf24l01.c: 319: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  5801  16E6  3030               	movlw	48
  5802  16E7  3192  2201  3196   	fcall	_nrf24l01SPISend
  5803                           
  5804                           ;nrf24l01.c: 320: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  5805  16EA  3045               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  5806  16EB  0084               	movwf	4
  5807  16EC  3098               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  5808  16ED  0085               	movwf	5
  5809  16EE  0800               	movf	0,w	;code access
  5810  16EF  0020               	movlb	0	; select bank0
  5811  16F0  00A4               	movwf	??_nrf24l01SetTXPipe
  5812  16F1  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  5813  16F2  0084               	movwf	4
  5814  16F3  3098               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  5815  16F4  0085               	movwf	5
  5816  16F5  0800               	movf	0,w	;code access
  5817  16F6  00A5               	movwf	??_nrf24l01SetTXPipe+1
  5818  16F7  0825               	movf	??_nrf24l01SetTXPipe+1,w
  5819  16F8  00A0               	movwf	___bmul@multiplicand
  5820  16F9  0826               	movf	nrf24l01SetTXPipe@pipe,w
  5821  16FA  3192  221D  3196   	fcall	___bmul
  5822  16FD  0020               	movlb	0	; select bank0
  5823  16FE  0724               	addwf	??_nrf24l01SetTXPipe,w
  5824  16FF  3192  2201  3196   	fcall	_nrf24l01SPISend
  5825                           
  5826                           ;nrf24l01.c: 321: nrf24l01SPISend(n_ADDRESS_P0[3]);
  5827  1702  3044               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  5828  1703  0084               	movwf	4
  5829  1704  3098               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  5830  1705  0085               	movwf	5
  5831  1706  0800               	movf	0,w	;code access
  5832  1707  3192  2201  3196   	fcall	_nrf24l01SPISend
  5833                           
  5834                           ;nrf24l01.c: 322: nrf24l01SPISend(n_ADDRESS_P0[2]);
  5835  170A  3043               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  5836  170B  0084               	movwf	4
  5837  170C  3098               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  5838  170D  0085               	movwf	5
  5839  170E  0800               	movf	0,w	;code access
  5840  170F  3192  2201  3196   	fcall	_nrf24l01SPISend
  5841                           
  5842                           ;nrf24l01.c: 323: nrf24l01SPISend(n_ADDRESS_P0[1]);
  5843  1712  3042               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  5844  1713  0084               	movwf	4
  5845  1714  3098               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  5846  1715  0085               	movwf	5
  5847  1716  0800               	movf	0,w	;code access
  5848  1717  3192  2201  3196   	fcall	_nrf24l01SPISend
  5849                           
  5850                           ;nrf24l01.c: 324: nrf24l01SPISend(n_ADDRESS_P0[0]);
  5851  171A  3041               	movlw	low (_n_ADDRESS_P0| (0+32768))
  5852  171B  0084               	movwf	4
  5853  171C  3098               	movlw	high (_n_ADDRESS_P0| (0+32768))
  5854  171D  0085               	movwf	5
  5855  171E  0800               	movf	0,w	;code access
  5856  171F  3192  2201  3196   	fcall	_nrf24l01SPISend
  5857                           
  5858                           ;nrf24l01.c: 325: nrf24l01SPIEnd();
  5859  1722  3191  21E1         	fcall	_nrf24l01SPIEnd
  5860  1724  0008               	return
  5861  1725                     __end_of_nrf24l01SetTXPipe:	
  5862                           
  5863                           	psect	text18
  5864  0D4E                     __ptext18:	
  5865 ;; *************** function _nrf24l01SendPacket *****************
  5866 ;; Defined at:
  5867 ;;		line 176 in file "nrf24l01.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;  Packet          2    7[BANK0 ] PTR struct .
  5870 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;  i               1   13[BANK0 ] unsigned char 
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  1    wreg      void 
  5875 ;; Registers used:
  5876 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5882 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5883 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5884 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5885 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5886 ;;Total ram usage:        7 bytes
  5887 ;; Hardware stack levels used:    1
  5888 ;; Hardware stack levels required when called:   11
  5889 ;; This function calls:
  5890 ;;		_enableInterrupts
  5891 ;;		_nrf24l01CEHigh
  5892 ;;		_nrf24l01CELow
  5893 ;;		_nrf24l01ChangeTXPower
  5894 ;;		_nrf24l01SPIEnd
  5895 ;;		_nrf24l01SPISend
  5896 ;;		_nrf24l01SPIStart
  5897 ;;		_nrf24l01SetRXMode
  5898 ;;		_strlen
  5899 ;; This function is called by:
  5900 ;;		_loop
  5901 ;;		_main
  5902 ;;		_nrf24l01SendACK
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           
  5907                           ;psect for function _nrf24l01SendPacket
  5908  0D4E                     _nrf24l01SendPacket:	
  5909                           
  5910                           ;nrf24l01.c: 178: TXPacket = Packet;
  5911                           
  5912                           ;incstack = 0
  5913                           ; Regs used in _nrf24l01SendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5914  0D4E  0020               	movlb	0	; select bank0
  5915  0D4F  0828               	movf	nrf24l01SendPacket@Packet+1,w
  5916  0D50  0021               	movlb	1	; select bank1
  5917  0D51  00E9               	movwf	(_TXPacket+1)^(0+128)
  5918  0D52  0020               	movlb	0	; select bank0
  5919  0D53  0827               	movf	nrf24l01SendPacket@Packet,w
  5920  0D54  0021               	movlb	1	; select bank1
  5921  0D55  00E8               	movwf	_TXPacket^(0+128)
  5922  0D56                     l308:	
  5923                           ;nrf24l01.c: 181: unsigned char i;;nrf24l01.c: 185: RESEND:
  5924                           
  5925                           
  5926                           ;nrf24l01.c: 188: i = 0xFF;
  5927  0D56  30FF               	movlw	255
  5928  0D57  0020               	movlb	0	; select bank0
  5929  0D58  00A9               	movwf	??_nrf24l01SendPacket
  5930  0D59  0829               	movf	??_nrf24l01SendPacket,w
  5931  0D5A  00AD               	movwf	nrf24l01SendPacket@i
  5932  0D5B                     l3052:	
  5933                           ;nrf24l01.c: 189: while (nrf24l01.TXBusy){
  5934                           
  5935  0D5B  0021               	movlb	1	; select bank1
  5936  0D5C  1C6B               	btfss	_nrf24l01^(0+128),0	;volatile
  5937  0D5D  2D68               	goto	l312
  5938                           
  5939                           ;nrf24l01.c: 190: if (!--i) {
  5940  0D5E  3001               	movlw	1
  5941  0D5F  0020               	movlb	0	; select bank0
  5942  0D60  02AD               	subwf	nrf24l01SendPacket@i,f
  5943  0D61  1903               	btfsc	3,2
  5944  0D62  2D56               	goto	l308
  5945                           
  5946                           ;nrf24l01.c: 192: };nrf24l01.c: 193: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  5947                           
  5948                           ;nrf24l01.c: 191: goto RESEND;
  5949  0D63  30A0               	movlw	160
  5950  0D64                     u4687:	
  5951  0D64  3200               	nop2
  5952  0D65  0B89               	decfsz	9,f
  5953  0D66  2D64               	goto	u4687
  5954  0D67  2D5B               	goto	l3052
  5955  0D68                     l312:	
  5956                           
  5957                           ;nrf24l01.c: 194: };nrf24l01.c: 197: nrf24l01.TXBusy = 1;
  5958  0D68  146B               	bsf	_nrf24l01^(0+128),0	;volatile
  5959                           
  5960                           ;nrf24l01.c: 200: enableInterrupts(0);
  5961  0D69  3000               	movlw	0
  5962  0D6A  3191  21E8  318D   	fcall	_enableInterrupts
  5963                           
  5964                           ;nrf24l01.c: 203: nrf24l01SetRXMode(0);
  5965  0D6D  3000               	movlw	0
  5966  0D6E  3188  2035  318D   	fcall	_nrf24l01SetRXMode
  5967                           
  5968                           ;nrf24l01.c: 206: nrf24l01SPIStart();
  5969  0D71  3191  21F0  318D   	fcall	_nrf24l01SPIStart
  5970                           
  5971                           ;nrf24l01.c: 209: nrf24l01SPISend((unsigned) 0b10110000);
  5972  0D74  30B0               	movlw	176
  5973  0D75  3192  2201  318D   	fcall	_nrf24l01SPISend
  5974                           
  5975                           ;nrf24l01.c: 211: nrf24l01SPISend(TXPacket->packetData.byte);
  5976  0D78  0021               	movlb	1	; select bank1
  5977  0D79  0868               	movf	_TXPacket^(0+128),w
  5978  0D7A  0086               	movwf	6
  5979  0D7B  0869               	movf	(_TXPacket+1)^(0+128),w
  5980  0D7C  0087               	movwf	7
  5981  0D7D  0801               	movf	1,w
  5982  0D7E  3192  2201  318D   	fcall	_nrf24l01SPISend
  5983                           
  5984                           ;nrf24l01.c: 214: for (i = 0; (i < strlen(TXPacket->Message)) && (i < sizeof(TXPacket->M
      +                          essage)); i++){
  5985  0D81  0020               	movlb	0	; select bank0
  5986  0D82  01AD               	clrf	nrf24l01SendPacket@i
  5987  0D83  2D9D               	goto	l3064
  5988  0D84                     l3060:	
  5989                           
  5990                           ;nrf24l01.c: 215: nrf24l01SPISend(TXPacket->Message[i]);
  5991  0D84  082D               	movf	nrf24l01SendPacket@i,w
  5992  0D85  3E01               	addlw	1
  5993  0D86  00A9               	movwf	??_nrf24l01SendPacket
  5994  0D87  3000               	movlw	0
  5995  0D88  1803               	skipnc
  5996  0D89  3001               	movlw	1
  5997  0D8A  00AA               	movwf	??_nrf24l01SendPacket+1
  5998  0D8B  0829               	movf	??_nrf24l01SendPacket,w
  5999  0D8C  0021               	movlb	1	; select bank1
  6000  0D8D  0768               	addwf	_TXPacket^(0+128),w
  6001  0D8E  0086               	movwf	6
  6002  0D8F  0020               	movlb	0	; select bank0
  6003  0D90  082A               	movf	??_nrf24l01SendPacket+1,w
  6004  0D91  0021               	movlb	1	; select bank1
  6005  0D92  3D69               	addwfc	(_TXPacket+1)^(0+128),w
  6006  0D93  0087               	movwf	7
  6007  0D94  0801               	movf	1,w
  6008  0D95  3192  2201  318D   	fcall	_nrf24l01SPISend
  6009  0D98  3001               	movlw	1
  6010  0D99  0020               	movlb	0	; select bank0
  6011  0D9A  00A9               	movwf	??_nrf24l01SendPacket
  6012  0D9B  0829               	movf	??_nrf24l01SendPacket,w
  6013  0D9C  07AD               	addwf	nrf24l01SendPacket@i,f
  6014  0D9D                     l3064:	
  6015  0D9D  0021               	movlb	1	; select bank1
  6016  0D9E  0868               	movf	_TXPacket^(0+128),w
  6017  0D9F  3E01               	addlw	1
  6018  0DA0  0020               	movlb	0	; select bank0
  6019  0DA1  00A9               	movwf	??_nrf24l01SendPacket
  6020  0DA2  3000               	movlw	0
  6021  0DA3  0021               	movlb	1	; select bank1
  6022  0DA4  3D69               	addwfc	(_TXPacket+1)^(0+128),w
  6023  0DA5  0020               	movlb	0	; select bank0
  6024  0DA6  00AA               	movwf	??_nrf24l01SendPacket+1
  6025  0DA7  0829               	movf	??_nrf24l01SendPacket,w
  6026  0DA8  00A0               	movwf	strlen@s
  6027  0DA9  082A               	movf	??_nrf24l01SendPacket+1,w
  6028  0DAA  00A1               	movwf	strlen@s+1
  6029  0DAB  3193  2372  318D   	fcall	_strlen
  6030  0DAE  0020               	movlb	0	; select bank0
  6031  0DAF  082D               	movf	nrf24l01SendPacket@i,w
  6032  0DB0  00AB               	movwf	??_nrf24l01SendPacket+2
  6033  0DB1  01AC               	clrf	??_nrf24l01SendPacket+3
  6034  0DB2  0821               	movf	?_strlen+1,w
  6035  0DB3  022C               	subwf	??_nrf24l01SendPacket+3,w
  6036  0DB4  1D03               	skipz
  6037  0DB5  2DB8               	goto	u2945
  6038  0DB6  0820               	movf	?_strlen,w
  6039  0DB7  022B               	subwf	??_nrf24l01SendPacket+2,w
  6040  0DB8                     u2945:	
  6041  0DB8  1803               	skipnc
  6042  0DB9  2DBE               	goto	l3068
  6043  0DBA  3020               	movlw	32
  6044  0DBB  022D               	subwf	nrf24l01SendPacket@i,w
  6045  0DBC  1C03               	skipc
  6046  0DBD  2D84               	goto	l3060
  6047  0DBE                     l3068:	
  6048                           
  6049                           ;nrf24l01.c: 216: };nrf24l01.c: 219: nrf24l01SPIEnd();
  6050  0DBE  3191  21E1  318D   	fcall	_nrf24l01SPIEnd
  6051                           
  6052                           ;nrf24l01.c: 222: nrf24l01CEHigh();
  6053  0DC1  3191  21CF  318D   	fcall	_nrf24l01CEHigh
  6054                           
  6055                           ;nrf24l01.c: 223: _delay((unsigned long)((20)*(32000000/4000000.0)));
  6056  0DC4  3035               	movlw	53
  6057  0DC5                     u4697:	
  6058  0DC5  0B89               	decfsz	9,f
  6059  0DC6  2DC5               	goto	u4697
  6060  0DC7  0000               	nop
  6061                           
  6062                           ;nrf24l01.c: 224: nrf24l01CELow();
  6063  0DC8  3191  21D2  318D   	fcall	_nrf24l01CELow
  6064                           
  6065                           ;nrf24l01.c: 227: enableInterrupts(1);
  6066  0DCB  3001               	movlw	1
  6067  0DCC  3191  21E8  318D   	fcall	_enableInterrupts
  6068                           
  6069                           ;nrf24l01.c: 230: i = 0xFF;
  6070  0DCF  30FF               	movlw	255
  6071  0DD0  0020               	movlb	0	; select bank0
  6072  0DD1  00A9               	movwf	??_nrf24l01SendPacket
  6073  0DD2  0829               	movf	??_nrf24l01SendPacket,w
  6074  0DD3  00AD               	movwf	nrf24l01SendPacket@i
  6075  0DD4                     l3082:	
  6076                           ;nrf24l01.c: 231: while (nrf24l01.TXBusy){
  6077                           
  6078  0DD4  0021               	movlb	1	; select bank1
  6079  0DD5  1C6B               	btfss	_nrf24l01^(0+128),0	;volatile
  6080  0DD6  2DE1               	goto	l3084
  6081                           
  6082                           ;nrf24l01.c: 232: if (!--i) {
  6083  0DD7  3001               	movlw	1
  6084  0DD8  0020               	movlb	0	; select bank0
  6085  0DD9  02AD               	subwf	nrf24l01SendPacket@i,f
  6086  0DDA  1903               	btfsc	3,2
  6087  0DDB  2D56               	goto	l308
  6088                           
  6089                           ;nrf24l01.c: 234: };nrf24l01.c: 235: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  6090                           
  6091                           ;nrf24l01.c: 233: goto RESEND;
  6092  0DDC  30A0               	movlw	160
  6093  0DDD                     u4707:	
  6094  0DDD  3200               	nop2
  6095  0DDE  0B89               	decfsz	9,f
  6096  0DDF  2DDD               	goto	u4707
  6097  0DE0  2DD4               	goto	l3082
  6098  0DE1                     l3084:	
  6099                           
  6100                           ;nrf24l01.c: 236: };nrf24l01.c: 240: i = 0xFF;
  6101  0DE1  30FF               	movlw	255
  6102  0DE2  0020               	movlb	0	; select bank0
  6103  0DE3  00A9               	movwf	??_nrf24l01SendPacket
  6104  0DE4  0829               	movf	??_nrf24l01SendPacket,w
  6105  0DE5  00AD               	movwf	nrf24l01SendPacket@i
  6106  0DE6                     l3094:	
  6107                           ;nrf24l01.c: 241: while (TXPacket->packetData.ACKRequest){
  6108                           
  6109  0DE6  0021               	movlb	1	; select bank1
  6110  0DE7  0868               	movf	_TXPacket^(0+128),w
  6111  0DE8  0086               	movwf	6
  6112  0DE9  0869               	movf	(_TXPacket+1)^(0+128),w
  6113  0DEA  0087               	movwf	7
  6114  0DEB  1D01               	btfss	1,2
  6115  0DEC  0008               	return
  6116                           
  6117                           ;nrf24l01.c: 242: if (!--i) {
  6118  0DED  3001               	movlw	1
  6119  0DEE  0020               	movlb	0	; select bank0
  6120  0DEF  02AD               	subwf	nrf24l01SendPacket@i,f
  6121  0DF0  1D03               	btfss	3,2
  6122  0DF1  2E13               	goto	l3092
  6123                           
  6124                           ;nrf24l01.c: 243: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  6125  0DF2  3003               	movlw	3
  6126  0DF3  0020               	movlb	0	; select bank0
  6127  0DF4  00AA               	movwf	??_nrf24l01SendPacket+1
  6128  0DF5  3008               	movlw	8
  6129  0DF6  00A9               	movwf	??_nrf24l01SendPacket
  6130  0DF7  3077               	movlw	119
  6131  0DF8                     u4717:	
  6132  0DF8  0B89               	decfsz	9,f
  6133  0DF9  2DF8               	goto	u4717
  6134  0DFA  0BA9               	decfsz	??_nrf24l01SendPacket,f
  6135  0DFB  2DF8               	goto	u4717
  6136  0DFC  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  6137  0DFD  2DF8               	goto	u4717
  6138                           
  6139                           ;nrf24l01.c: 244: _delay((unsigned long)((50000)*(32000000/4000000.0)));
  6140  0DFE  3003               	movlw	3
  6141  0DFF  0020               	movlb	0	; select bank0
  6142  0E00  00AA               	movwf	??_nrf24l01SendPacket+1
  6143  0E01  3008               	movlw	8
  6144  0E02  00A9               	movwf	??_nrf24l01SendPacket
  6145  0E03  3077               	movlw	119
  6146  0E04                     u4727:	
  6147  0E04  0B89               	decfsz	9,f
  6148  0E05  2E04               	goto	u4727
  6149  0E06  0BA9               	decfsz	??_nrf24l01SendPacket,f
  6150  0E07  2E04               	goto	u4727
  6151  0E08  0BAA               	decfsz	??_nrf24l01SendPacket+1,f
  6152  0E09  2E04               	goto	u4727
  6153                           
  6154                           ;nrf24l01.c: 245: nrf24l01ChangeTXPower(1);
  6155  0E0A  3001               	movlw	1
  6156  0E0B  0020               	movlb	0	; select bank0
  6157  0E0C  00A3               	movwf	nrf24l01ChangeTXPower@addPower
  6158  0E0D  3000               	movlw	0
  6159  0E0E  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
  6160  0E0F  3196  265F  318D   	fcall	_nrf24l01ChangeTXPower
  6161                           
  6162                           ;nrf24l01.c: 246: goto RESEND;
  6163  0E12  2D56               	goto	l308
  6164  0E13                     l3092:	
  6165                           
  6166                           ;nrf24l01.c: 247: };nrf24l01.c: 248: _delay((unsigned long)((100)*(32000000/4000000.0)))
      +                          ;
  6167  0E13  30A0               	movlw	160
  6168  0E14                     u4737:	
  6169  0E14  3200               	nop2
  6170  0E15  0B89               	decfsz	9,f
  6171  0E16  2E14               	goto	u4737
  6172  0E17  2DE6               	goto	l3094
  6173  0E18                     __end_of_nrf24l01SendPacket:	
  6174                           
  6175                           	psect	text19
  6176  1372                     __ptext19:	
  6177 ;; *************** function _strlen *****************
  6178 ;; Defined at:
  6179 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  6182 ;;		 -> packet.Message(32), packet.Message(32), RXPacket.Message(32), RXPacket(33), 
  6183 ;;		 -> main@packet(33), loop@packet(33), NULL(0), romDataMap(28), 
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  6186 ;;		 -> packet.Message(32), packet.Message(32), RXPacket.Message(32), RXPacket(33), 
  6187 ;;		 -> main@packet(33), loop@packet(33), NULL(0), romDataMap(28), 
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  2    0[BANK0 ] unsigned int 
  6190 ;; Registers used:
  6191 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6197 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6200 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6201 ;;Total ram usage:        6 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; Hardware stack levels required when called:    7
  6204 ;; This function calls:
  6205 ;;		Nothing
  6206 ;; This function is called by:
  6207 ;;		_nrf24l01GetPipe
  6208 ;;		_nrf24l01SendPacket
  6209 ;; This function uses a non-reentrant model
  6210 ;;
  6211                           
  6212                           
  6213                           ;psect for function _strlen
  6214  1372                     _strlen:	
  6215                           
  6216                           ;incstack = 0
  6217                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  6218  1372  0020               	movlb	0	; select bank0
  6219  1373  0821               	movf	strlen@s+1,w
  6220  1374  00A5               	movwf	strlen@cp+1
  6221  1375  0820               	movf	strlen@s,w
  6222  1376  00A4               	movwf	strlen@cp
  6223  1377                     l2820:	
  6224  1377  0824               	movf	strlen@cp,w
  6225  1378  0086               	movwf	6
  6226  1379  0825               	movf	strlen@cp+1,w
  6227  137A  0087               	movwf	7
  6228  137B  0801               	movf	1,w
  6229  137C  1903               	btfsc	3,2
  6230  137D  2B83               	goto	l2822
  6231  137E  3001               	movlw	1
  6232  137F  07A4               	addwf	strlen@cp,f
  6233  1380  3000               	movlw	0
  6234  1381  3DA5               	addwfc	strlen@cp+1,f
  6235  1382  2B77               	goto	l2820
  6236  1383                     l2822:	
  6237  1383  0920               	comf	strlen@s,w
  6238  1384  00A2               	movwf	??_strlen
  6239  1385  0921               	comf	strlen@s+1,w
  6240  1386  00A3               	movwf	??_strlen+1
  6241  1387  0AA2               	incf	??_strlen,f
  6242  1388  1903               	skipnz
  6243  1389  0AA3               	incf	??_strlen+1,f
  6244  138A  0824               	movf	strlen@cp,w
  6245  138B  0722               	addwf	??_strlen,w
  6246  138C  00A0               	movwf	?_strlen
  6247  138D  0825               	movf	strlen@cp+1,w
  6248  138E  3D23               	addwfc	??_strlen+1,w
  6249  138F  00A1               	movwf	?_strlen+1
  6250  1390  0008               	return
  6251  1391                     __end_of_strlen:	
  6252                           
  6253                           	psect	text20
  6254  0835                     __ptext20:	
  6255 ;; *************** function _nrf24l01SetRXMode *****************
  6256 ;; Defined at:
  6257 ;;		line 54 in file "nrf24l01.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;  rxMode          1    wreg     unsigned char 
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;  rxMode          1    5[BANK0 ] unsigned char 
  6262 ;;  config          1    4[BANK0 ] struct .
  6263 ;; Return value:  Size  Location     Type
  6264 ;;                  1    wreg      void 
  6265 ;; Registers used:
  6266 ;;		wreg, status,2, status,0, pclath, cstack
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6275 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6276 ;;Total ram usage:        3 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:   10
  6279 ;; This function calls:
  6280 ;;		_nrf24l01CEHigh
  6281 ;;		_nrf24l01CELow
  6282 ;;		_nrf24l01Send
  6283 ;; This function is called by:
  6284 ;;		_sleep
  6285 ;;		_nrf24l01SendPacket
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           
  6290                           ;psect for function _nrf24l01SetRXMode
  6291  0835                     _nrf24l01SetRXMode:	
  6292                           
  6293                           ;incstack = 0
  6294                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  6295                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6296  0835  0020               	movlb	0	; select bank0
  6297  0836  00A5               	movwf	nrf24l01SetRXMode@rxMode
  6298                           
  6299                           ;nrf24l01.c: 56: if (rxMode){
  6300  0837  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6301  0838  1903               	btfsc	3,2
  6302  0839  283D               	goto	l2778
  6303                           
  6304                           ;nrf24l01.c: 57: if (nrf24l01.TXBusy){
  6305  083A  0021               	movlb	1	; select bank1
  6306  083B  186B               	btfsc	_nrf24l01^(0+128),0	;volatile
  6307  083C  0008               	return
  6308  083D                     l2778:	
  6309                           ;nrf24l01.c: 58: return;
  6310                           
  6311                           
  6312                           ;nrf24l01.c: 59: };nrf24l01.c: 60: };nrf24l01.c: 62: n_CONFIG_t config;;nrf24l01.c: 65: 
      +                          config.byte = nrf24l01Send((unsigned) 0b00000000 | (unsigned) 0x00, 0);
  6313  083D  0020               	movlb	0	; select bank0
  6314  083E  01A0               	clrf	nrf24l01Send@data
  6315  083F  3000               	movlw	0
  6316  0840  3187  27E0  3188   	fcall	_nrf24l01Send
  6317  0843  0020               	movlb	0	; select bank0
  6318  0844  00A3               	movwf	??_nrf24l01SetRXMode
  6319  0845  0823               	movf	??_nrf24l01SetRXMode,w
  6320  0846  00A4               	movwf	nrf24l01SetRXMode@config
  6321                           
  6322                           ;nrf24l01.c: 68: if (config.PRIM_RX != rxMode){
  6323  0847  0824               	movf	nrf24l01SetRXMode@config,w
  6324  0848  3901               	andlw	1
  6325  0849  0625               	xorwf	nrf24l01SetRXMode@rxMode,w
  6326  084A  1903               	skipnz
  6327  084B  2879               	goto	l2798
  6328                           
  6329                           ;nrf24l01.c: 71: nrf24l01CELow();
  6330  084C  3191  21D2  3188   	fcall	_nrf24l01CELow
  6331                           
  6332                           ;nrf24l01.c: 72: _delay((unsigned long)((200)*(32000000/4000000.0)));
  6333  084F  30E4               	movlw	228
  6334  0850                     u4747:	
  6335  0850  3200               	nop2
  6336  0851  3200               	nop2
  6337  0852  0B89               	decfsz	9,f
  6338  0853  2850               	goto	u4747
  6339  0854  3200               	nop2
  6340  0855  3200               	nop2
  6341                           
  6342                           ;nrf24l01.c: 75: config.PRIM_RX = rxMode;
  6343  0856  0020               	movlb	0	; select bank0
  6344  0857  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6345  0858  3901               	andlw	1
  6346  0859  1024               	bcf	nrf24l01SetRXMode@config,0
  6347  085A  1D03               	skipz
  6348  085B  1424               	bsf	nrf24l01SetRXMode@config,0
  6349                           
  6350                           ;nrf24l01.c: 76: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
  6351  085C  0824               	movf	nrf24l01SetRXMode@config,w
  6352  085D  00A3               	movwf	??_nrf24l01SetRXMode
  6353  085E  0823               	movf	??_nrf24l01SetRXMode,w
  6354  085F  00A0               	movwf	nrf24l01Send@data
  6355  0860  3020               	movlw	32
  6356  0861  3187  27E0  3188   	fcall	_nrf24l01Send
  6357                           
  6358                           ;nrf24l01.c: 79: _delay((unsigned long)((200)*(32000000/4000000.0)));
  6359  0864  30E4               	movlw	228
  6360  0865                     u4757:	
  6361  0865  3200               	nop2
  6362  0866  3200               	nop2
  6363  0867  0B89               	decfsz	9,f
  6364  0868  2865               	goto	u4757
  6365  0869  3200               	nop2
  6366  086A  3200               	nop2
  6367                           
  6368                           ;nrf24l01.c: 82: if (rxMode){
  6369  086B  0020               	movlb	0	; select bank0
  6370  086C  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6371  086D  1903               	btfsc	3,2
  6372  086E  2879               	goto	l2798
  6373                           
  6374                           ;nrf24l01.c: 83: nrf24l01CEHigh();
  6375  086F  3191  21CF  3188   	fcall	_nrf24l01CEHigh
  6376                           
  6377                           ;nrf24l01.c: 84: _delay((unsigned long)((200)*(32000000/4000000.0)));
  6378  0872  30E4               	movlw	228
  6379  0873                     u4767:	
  6380  0873  3200               	nop2
  6381  0874  3200               	nop2
  6382  0875  0B89               	decfsz	9,f
  6383  0876  2873               	goto	u4767
  6384  0877  3200               	nop2
  6385  0878  3200               	nop2
  6386  0879                     l2798:	
  6387                           
  6388                           ;nrf24l01.c: 85: };nrf24l01.c: 86: };nrf24l01.c: 89: nrf24l01.RXMode = rxMode;
  6389  0879  0020               	movlb	0	; select bank0
  6390  087A  0825               	movf	nrf24l01SetRXMode@rxMode,w
  6391  087B  3901               	andlw	1
  6392  087C  0021               	movlb	1	; select bank1
  6393  087D  116B               	bcf	_nrf24l01^(0+128),2	;volatile
  6394  087E  1D03               	skipz
  6395  087F  156B               	bsf	_nrf24l01^(0+128),2	;volatile
  6396  0880  0008               	return
  6397  0881                     __end_of_nrf24l01SetRXMode:	
  6398                           
  6399                           	psect	text21
  6400  1242                     __ptext21:	
  6401 ;; *************** function _atof *****************
  6402 ;; Defined at:
  6403 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\atof.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;  s               1    wreg     PTR const unsigned char 
  6406 ;;		 -> handleRXData@string(16), 
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;  s               1   78[BANK0 ] PTR const unsigned char 
  6409 ;;		 -> handleRXData@string(16), 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  3    8[BANK1 ] PTR const unsigned char 
  6412 ;; Registers used:
  6413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6419 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;Total ram usage:        5 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:   10
  6426 ;; This function calls:
  6427 ;;		_strtod
  6428 ;; This function is called by:
  6429 ;;		_handleRXData
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           
  6434                           ;psect for function _atof
  6435  1242                     _atof:	
  6436                           
  6437                           ;incstack = 0
  6438                           ; Regs used in _atof: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6439                           ;atof@s stored from wreg
  6440  1242  0020               	movlb	0	; select bank0
  6441  1243  00EE               	movwf	atof@s
  6442  1244  01E7               	clrf	strtod@res
  6443  1245  086E               	movf	atof@s,w
  6444  1246  3180  202E         	fcall	_strtod
  6445  1248  0020               	movlb	0	; select bank0
  6446  1249  0867               	movf	?_strtod,w
  6447  124A  0021               	movlb	1	; select bank1
  6448  124B  00A8               	movwf	?_atof^(0+128)
  6449  124C  0020               	movlb	0	; select bank0
  6450  124D  0868               	movf	?_strtod+1,w
  6451  124E  0021               	movlb	1	; select bank1
  6452  124F  00A9               	movwf	(?_atof+1)^(0+128)
  6453  1250  0020               	movlb	0	; select bank0
  6454  1251  0869               	movf	?_strtod+2,w
  6455  1252  0021               	movlb	1	; select bank1
  6456  1253  00AA               	movwf	(?_atof+2)^(0+128)
  6457  1254  0008               	return
  6458  1255                     __end_of_atof:	
  6459                           
  6460                           	psect	text22
  6461  002E                     __ptext22:	
  6462 ;; *************** function _strtod *****************
  6463 ;; Defined at:
  6464 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\atof.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;  s               1    wreg     PTR const unsigned char 
  6467 ;;		 -> handleRXData@string(16), 
  6468 ;;  res             1   71[BANK0 ] PTR PTR const unsigned c
  6469 ;;		 -> NULL(0), 
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;  s               1    7[BANK1 ] PTR const unsigned char 
  6472 ;;		 -> handleRXData@string(16), 
  6473 ;;  _u              4    3[BANK1 ] struct .
  6474 ;;  expon           1    2[BANK1 ] char 
  6475 ;;  flags           1    1[BANK1 ] unsigned char 
  6476 ;;  eexp            1    0[BANK1 ] char 
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  3   71[BANK0 ] char 
  6479 ;; Registers used:
  6480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6486 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;      Totals:         0       7       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;Total ram usage:       15 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    9
  6493 ;; This function calls:
  6494 ;;		___altoft
  6495 ;;		___bmul
  6496 ;;		___ftdiv
  6497 ;;		___ftge
  6498 ;;		___ftmul
  6499 ;;		___ftneg
  6500 ;;		___lmul
  6501 ;;		_isdigit
  6502 ;;		_isspace
  6503 ;; This function is called by:
  6504 ;;		_atof
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           
  6509                           ;psect for function _strtod
  6510  002E                     _strtod:	
  6511                           
  6512                           ;incstack = 0
  6513                           ; Regs used in _strtod: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6514                           ;strtod@s stored from wreg
  6515  002E  0021               	movlb	1	; select bank1
  6516  002F  00A7               	movwf	strtod@s^(0+128)
  6517  0030  0020               	movlb	0	; select bank0
  6518  0031  0867               	movf	strtod@res,w
  6519  0032  1903               	btfsc	3,2
  6520  0033  283D               	goto	l3244
  6521  0034  0021               	movlb	1	; select bank1
  6522  0035  0827               	movf	strtod@s^(0+128),w
  6523  0036  0020               	movlb	0	; select bank0
  6524  0037  00EA               	movwf	??_strtod
  6525  0038  0867               	movf	strtod@res,w
  6526  0039  0086               	movwf	6
  6527  003A  0187               	clrf	7
  6528  003B  086A               	movf	??_strtod,w
  6529  003C  0081               	movwf	1
  6530  003D                     l3244:	
  6531  003D  0021               	movlb	1	; select bank1
  6532  003E  0827               	movf	strtod@s^(0+128),w
  6533  003F  0086               	movwf	6
  6534  0040  0187               	clrf	7
  6535  0041  0801               	movf	1,w
  6536  0042  00A0               	movwf	strtod@eexp^(0+128)
  6537  0043  3192  222F  3180   	fcall	_isspace
  6538  0046  1C03               	btfss	3,0
  6539  0047  284F               	goto	l3246
  6540  0048  3001               	movlw	1
  6541  0049  0020               	movlb	0	; select bank0
  6542  004A  00EA               	movwf	??_strtod
  6543  004B  086A               	movf	??_strtod,w
  6544  004C  0021               	movlb	1	; select bank1
  6545  004D  07A7               	addwf	strtod@s^(0+128),f
  6546  004E  283D               	goto	l3244
  6547  004F                     l3246:	
  6548  004F  0021               	movlb	1	; select bank1
  6549  0050  01A1               	clrf	strtod@flags^(0+128)
  6550  0051  302D               	movlw	45
  6551  0052  0620               	xorwf	strtod@eexp^(0+128),w
  6552  0053  1D03               	btfss	3,2
  6553  0054  2858               	goto	l3254
  6554  0055  01A1               	clrf	strtod@flags^(0+128)
  6555  0056  0AA1               	incf	strtod@flags^(0+128),f
  6556  0057  285C               	goto	l3256
  6557  0058                     l3254:	
  6558  0058  302B               	movlw	43
  6559  0059  0620               	xorwf	strtod@eexp^(0+128),w
  6560  005A  1D03               	btfss	3,2
  6561  005B  2862               	goto	l3258
  6562  005C                     l3256:	
  6563  005C  3001               	movlw	1
  6564  005D  0020               	movlb	0	; select bank0
  6565  005E  00EA               	movwf	??_strtod
  6566  005F  086A               	movf	??_strtod,w
  6567  0060  0021               	movlb	1	; select bank1
  6568  0061  07A7               	addwf	strtod@s^(0+128),f
  6569  0062                     l3258:	
  6570  0062  01A0               	clrf	strtod@eexp^(0+128)
  6571  0063  3000               	movlw	0
  6572  0064  00A6               	movwf	(strtod@_u+3)^(0+128)
  6573  0065  3000               	movlw	0
  6574  0066  00A5               	movwf	(strtod@_u+2)^(0+128)
  6575  0067  3000               	movlw	0
  6576  0068  00A4               	movwf	(strtod@_u+1)^(0+128)
  6577  0069  3000               	movlw	0
  6578  006A  00A3               	movwf	strtod@_u^(0+128)
  6579  006B  01A2               	clrf	strtod@expon^(0+128)
  6580  006C  287B               	goto	l3264
  6581  006D                     l3266:	
  6582  006D  0827               	movf	strtod@s^(0+128),w
  6583  006E  0086               	movwf	6
  6584  006F  0187               	clrf	7
  6585  0070  302E               	movlw	46
  6586  0071  0601               	xorwf	1,w
  6587  0072  1D03               	btfss	3,2
  6588  0073  287D               	goto	l3272
  6589  0074  1621               	bsf	strtod@flags^(0+128),4
  6590  0075                     L2:	
  6591  0075  3001               	movlw	1
  6592  0076  0020               	movlb	0	; select bank0
  6593  0077  00EA               	movwf	??_strtod
  6594  0078  086A               	movf	??_strtod,w
  6595  0079  0021               	movlb	1	; select bank1
  6596  007A  07A7               	addwf	strtod@s^(0+128),f
  6597  007B                     l3264:	
  6598  007B  1E21               	btfss	strtod@flags^(0+128),4
  6599  007C  286D               	goto	l3266
  6600  007D                     l3272:	
  6601  007D  0827               	movf	strtod@s^(0+128),w
  6602  007E  0086               	movwf	6
  6603  007F  0187               	clrf	7
  6604  0080  0801               	movf	1,w
  6605  0081  3192  220E  3180   	fcall	_isdigit
  6606  0084  1C03               	btfss	3,0
  6607  0085  28E9               	goto	l3288
  6608  0086  0021               	movlb	1	; select bank1
  6609  0087  14A1               	bsf	strtod@flags^(0+128),1
  6610  0088  3008               	movlw	8
  6611  0089  0620               	xorwf	strtod@eexp^(0+128),w
  6612  008A  1903               	btfsc	3,2
  6613  008B  28E0               	goto	l915
  6614  008C  1E21               	btfss	strtod@flags^(0+128),4
  6615  008D  2894               	goto	l916
  6616  008E  30FF               	movlw	255
  6617  008F  0020               	movlb	0	; select bank0
  6618  0090  00EA               	movwf	??_strtod
  6619  0091  086A               	movf	??_strtod,w
  6620  0092  0021               	movlb	1	; select bank1
  6621  0093  07A2               	addwf	strtod@expon^(0+128),f
  6622  0094                     l916:	
  6623  0094  3001               	movlw	1
  6624  0095  0020               	movlb	0	; select bank0
  6625  0096  00EA               	movwf	??_strtod
  6626  0097  086A               	movf	??_strtod,w
  6627  0098  0021               	movlb	1	; select bank1
  6628  0099  07A0               	addwf	strtod@eexp^(0+128),f
  6629  009A  3000               	movlw	0
  6630  009B  0020               	movlb	0	; select bank0
  6631  009C  00A3               	movwf	___lmul@multiplier+3
  6632  009D  3000               	movlw	0
  6633  009E  00A2               	movwf	___lmul@multiplier+2
  6634  009F  3000               	movlw	0
  6635  00A0  00A1               	movwf	___lmul@multiplier+1
  6636  00A1  300A               	movlw	10
  6637  00A2  00A0               	movwf	___lmul@multiplier
  6638  00A3  0021               	movlb	1	; select bank1
  6639  00A4  0826               	movf	(strtod@_u+3)^(0+128),w
  6640  00A5  0020               	movlb	0	; select bank0
  6641  00A6  00A7               	movwf	___lmul@multiplicand+3
  6642  00A7  0021               	movlb	1	; select bank1
  6643  00A8  0825               	movf	(strtod@_u+2)^(0+128),w
  6644  00A9  0020               	movlb	0	; select bank0
  6645  00AA  00A6               	movwf	___lmul@multiplicand+2
  6646  00AB  0021               	movlb	1	; select bank1
  6647  00AC  0824               	movf	(strtod@_u+1)^(0+128),w
  6648  00AD  0020               	movlb	0	; select bank0
  6649  00AE  00A5               	movwf	___lmul@multiplicand+1
  6650  00AF  0021               	movlb	1	; select bank1
  6651  00B0  0823               	movf	strtod@_u^(0+128),w
  6652  00B1  0020               	movlb	0	; select bank0
  6653  00B2  00A4               	movwf	___lmul@multiplicand
  6654  00B3  3195  251E  3180   	fcall	___lmul
  6655  00B6  0020               	movlb	0	; select bank0
  6656  00B7  0823               	movf	?___lmul+3,w
  6657  00B8  0021               	movlb	1	; select bank1
  6658  00B9  00A6               	movwf	(strtod@_u+3)^(0+128)
  6659  00BA  0020               	movlb	0	; select bank0
  6660  00BB  0822               	movf	?___lmul+2,w
  6661  00BC  0021               	movlb	1	; select bank1
  6662  00BD  00A5               	movwf	(strtod@_u+2)^(0+128)
  6663  00BE  0020               	movlb	0	; select bank0
  6664  00BF  0821               	movf	?___lmul+1,w
  6665  00C0  0021               	movlb	1	; select bank1
  6666  00C1  00A4               	movwf	(strtod@_u+1)^(0+128)
  6667  00C2  0020               	movlb	0	; select bank0
  6668  00C3  0820               	movf	?___lmul,w
  6669  00C4  0021               	movlb	1	; select bank1
  6670  00C5  00A3               	movwf	strtod@_u^(0+128)
  6671  00C6  0827               	movf	strtod@s^(0+128),w
  6672  00C7  0086               	movwf	6
  6673  00C8  0187               	clrf	7
  6674  00C9  0801               	movf	1,w
  6675  00CA  3ED0               	addlw	208
  6676  00CB  0020               	movlb	0	; select bank0
  6677  00CC  00EA               	movwf	??_strtod
  6678  00CD  01EB               	clrf	??_strtod+1
  6679  00CE  01EC               	clrf	??_strtod+2
  6680  00CF  01ED               	clrf	??_strtod+3
  6681  00D0  086A               	movf	??_strtod,w
  6682  00D1  0021               	movlb	1	; select bank1
  6683  00D2  07A3               	addwf	strtod@_u^(0+128),f
  6684  00D3  0020               	movlb	0	; select bank0
  6685  00D4  086B               	movf	??_strtod+1,w
  6686  00D5  0021               	movlb	1	; select bank1
  6687  00D6  3DA4               	addwfc	(strtod@_u+1)^(0+128),f
  6688  00D7  0020               	movlb	0	; select bank0
  6689  00D8  086C               	movf	??_strtod+2,w
  6690  00D9  0021               	movlb	1	; select bank1
  6691  00DA  3DA5               	addwfc	(strtod@_u+2)^(0+128),f
  6692  00DB  0020               	movlb	0	; select bank0
  6693  00DC  086D               	movf	??_strtod+3,w
  6694  00DD  0021               	movlb	1	; select bank1
  6695  00DE  3DA6               	addwfc	(strtod@_u+3)^(0+128),f
  6696  00DF  2875               	goto	L2
  6697  00E0                     l915:	
  6698  00E0  1A21               	btfsc	strtod@flags^(0+128),4
  6699  00E1  2875               	goto	L2
  6700  00E2  3001               	movlw	1
  6701  00E3  0020               	movlb	0	; select bank0
  6702  00E4  00EA               	movwf	??_strtod
  6703  00E5  086A               	movf	??_strtod,w
  6704  00E6  0021               	movlb	1	; select bank1
  6705  00E7  07A2               	addwf	strtod@expon^(0+128),f
  6706  00E8  2875               	goto	L2
  6707  00E9                     l3288:	
  6708  00E9  0021               	movlb	1	; select bank1
  6709  00EA  01A0               	clrf	strtod@eexp^(0+128)
  6710  00EB  0827               	movf	strtod@s^(0+128),w
  6711  00EC  0086               	movwf	6
  6712  00ED  0187               	clrf	7
  6713  00EE  3065               	movlw	101
  6714  00EF  0601               	xorwf	1,w
  6715  00F0  1903               	btfsc	3,2
  6716  00F1  28F9               	goto	l3294
  6717  00F2  0827               	movf	strtod@s^(0+128),w
  6718  00F3  0086               	movwf	6
  6719  00F4  0187               	clrf	7
  6720  00F5  3045               	movlw	69
  6721  00F6  0601               	xorwf	1,w
  6722  00F7  1D03               	btfss	3,2
  6723  00F8  297D               	goto	l3328
  6724  00F9                     l3294:	
  6725  00F9  3001               	movlw	1
  6726  00FA  0020               	movlb	0	; select bank0
  6727  00FB  00EA               	movwf	??_strtod
  6728  00FC  086A               	movf	??_strtod,w
  6729  00FD  0021               	movlb	1	; select bank1
  6730  00FE  07A7               	addwf	strtod@s^(0+128),f
  6731  00FF  0827               	movf	strtod@s^(0+128),w
  6732  0100  0086               	movwf	6
  6733  0101  0187               	clrf	7
  6734  0102  302D               	movlw	45
  6735  0103  0601               	xorwf	1,w
  6736  0104  1D03               	btfss	3,2
  6737  0105  2908               	goto	l3300
  6738  0106  15A1               	bsf	strtod@flags^(0+128),3
  6739  0107  290F               	goto	l3304
  6740  0108                     l3300:	
  6741  0108  0827               	movf	strtod@s^(0+128),w
  6742  0109  0086               	movwf	6
  6743  010A  0187               	clrf	7
  6744  010B  302B               	movlw	43
  6745  010C  0601               	xorwf	1,w
  6746  010D  1D03               	btfss	3,2
  6747  010E  2915               	goto	l3306
  6748  010F                     l3304:	
  6749  010F  3001               	movlw	1
  6750  0110  0020               	movlb	0	; select bank0
  6751  0111  00EA               	movwf	??_strtod
  6752  0112  086A               	movf	??_strtod,w
  6753  0113  0021               	movlb	1	; select bank1
  6754  0114  07A7               	addwf	strtod@s^(0+128),f
  6755  0115                     l3306:	
  6756  0115  0827               	movf	strtod@s^(0+128),w
  6757  0116  0086               	movwf	6
  6758  0117  0187               	clrf	7
  6759  0118  3030               	movlw	48
  6760  0119  0601               	xorwf	1,w
  6761  011A  1903               	btfsc	3,2
  6762  011B  290F               	goto	l3304
  6763  011C  0827               	movf	strtod@s^(0+128),w
  6764  011D  0086               	movwf	6
  6765  011E  0187               	clrf	7
  6766  011F  0801               	movf	1,w
  6767  0120  3192  220E  3180   	fcall	_isdigit
  6768  0123  1C03               	btfss	3,0
  6769  0124  2978               	goto	l3324
  6770  0125  0021               	movlb	1	; select bank1
  6771  0126  0827               	movf	strtod@s^(0+128),w
  6772  0127  0086               	movwf	6
  6773  0128  0187               	clrf	7
  6774  0129  0801               	movf	1,w
  6775  012A  3ED0               	addlw	208
  6776  012B  0020               	movlb	0	; select bank0
  6777  012C  00EA               	movwf	??_strtod
  6778  012D  086A               	movf	??_strtod,w
  6779  012E  0021               	movlb	1	; select bank1
  6780  012F  00A0               	movwf	strtod@eexp^(0+128)
  6781  0130  3001               	movlw	1
  6782  0131  0020               	movlb	0	; select bank0
  6783  0132  00EA               	movwf	??_strtod
  6784  0133  086A               	movf	??_strtod,w
  6785  0134  0021               	movlb	1	; select bank1
  6786  0135  07A7               	addwf	strtod@s^(0+128),f
  6787  0136  0827               	movf	strtod@s^(0+128),w
  6788  0137  0086               	movwf	6
  6789  0138  0187               	clrf	7
  6790  0139  0801               	movf	1,w
  6791  013A  3192  220E  3180   	fcall	_isdigit
  6792  013D  1C03               	btfss	3,0
  6793  013E  2978               	goto	l3324
  6794  013F  0021               	movlb	1	; select bank1
  6795  0140  0827               	movf	strtod@s^(0+128),w
  6796  0141  0086               	movwf	6
  6797  0142  0187               	clrf	7
  6798  0143  300A               	movlw	10
  6799  0144  0020               	movlb	0	; select bank0
  6800  0145  00EA               	movwf	??_strtod
  6801  0146  086A               	movf	??_strtod,w
  6802  0147  00A0               	movwf	___bmul@multiplicand
  6803  0148  0021               	movlb	1	; select bank1
  6804  0149  0820               	movf	strtod@eexp^(0+128),w
  6805  014A  3192  221D  3180   	fcall	___bmul
  6806  014D  0701               	addwf	1,w
  6807  014E  3ED0               	addlw	-48
  6808  014F  0020               	movlb	0	; select bank0
  6809  0150  00EB               	movwf	??_strtod+1
  6810  0151  086B               	movf	??_strtod+1,w
  6811  0152  0021               	movlb	1	; select bank1
  6812  0153  00A0               	movwf	strtod@eexp^(0+128)
  6813  0154  3001               	movlw	1
  6814  0155  0020               	movlb	0	; select bank0
  6815  0156  00EA               	movwf	??_strtod
  6816  0157  086A               	movf	??_strtod,w
  6817  0158  0021               	movlb	1	; select bank1
  6818  0159  07A7               	addwf	strtod@s^(0+128),f
  6819  015A  0827               	movf	strtod@s^(0+128),w
  6820  015B  0086               	movwf	6
  6821  015C  0187               	clrf	7
  6822  015D  0801               	movf	1,w
  6823  015E  3192  220E  3180   	fcall	_isdigit
  6824  0161  1C03               	btfss	3,0
  6825  0162  2978               	goto	l3324
  6826  0163  0021               	movlb	1	; select bank1
  6827  0164  0827               	movf	strtod@s^(0+128),w
  6828  0165  0086               	movwf	6
  6829  0166  0187               	clrf	7
  6830  0167  300A               	movlw	10
  6831  0168  0020               	movlb	0	; select bank0
  6832  0169  00EA               	movwf	??_strtod
  6833  016A  086A               	movf	??_strtod,w
  6834  016B  00A0               	movwf	___bmul@multiplicand
  6835  016C  0021               	movlb	1	; select bank1
  6836  016D  0820               	movf	strtod@eexp^(0+128),w
  6837  016E  3192  221D  3180   	fcall	___bmul
  6838  0171  0701               	addwf	1,w
  6839  0172  3ED0               	addlw	-48
  6840  0173  0020               	movlb	0	; select bank0
  6841  0174  00EB               	movwf	??_strtod+1
  6842  0175  086B               	movf	??_strtod+1,w
  6843  0176  0021               	movlb	1	; select bank1
  6844  0177  00A0               	movwf	strtod@eexp^(0+128)
  6845  0178                     l3324:	
  6846  0178  0021               	movlb	1	; select bank1
  6847  0179  1DA1               	btfss	strtod@flags^(0+128),3
  6848  017A  297D               	goto	l3328
  6849  017B  09A0               	comf	strtod@eexp^(0+128),f
  6850  017C  0AA0               	incf	strtod@eexp^(0+128),f
  6851  017D                     l3328:	
  6852  017D  0820               	movf	strtod@eexp^(0+128),w
  6853  017E  0020               	movlb	0	; select bank0
  6854  017F  00EA               	movwf	??_strtod
  6855  0180  086A               	movf	??_strtod,w
  6856  0181  0021               	movlb	1	; select bank1
  6857  0182  07A2               	addwf	strtod@expon^(0+128),f
  6858  0183  0020               	movlb	0	; select bank0
  6859  0184  0867               	movf	strtod@res,w
  6860  0185  1903               	btfsc	3,2
  6861  0186  2992               	goto	l3336
  6862  0187  0021               	movlb	1	; select bank1
  6863  0188  1CA1               	btfss	strtod@flags^(0+128),1
  6864  0189  2992               	goto	l3336
  6865  018A  0827               	movf	strtod@s^(0+128),w
  6866  018B  0020               	movlb	0	; select bank0
  6867  018C  00EA               	movwf	??_strtod
  6868  018D  0867               	movf	strtod@res,w
  6869  018E  0086               	movwf	6
  6870  018F  0187               	clrf	7
  6871  0190  086A               	movf	??_strtod,w
  6872  0191  0081               	movwf	1
  6873  0192                     l3336:	
  6874  0192  0021               	movlb	1	; select bank1
  6875  0193  0826               	movf	(strtod@_u+3)^(0+128),w
  6876  0194  0020               	movlb	0	; select bank0
  6877  0195  00AB               	movwf	___altoft@c+3
  6878  0196  0021               	movlb	1	; select bank1
  6879  0197  0825               	movf	(strtod@_u+2)^(0+128),w
  6880  0198  0020               	movlb	0	; select bank0
  6881  0199  00AA               	movwf	___altoft@c+2
  6882  019A  0021               	movlb	1	; select bank1
  6883  019B  0824               	movf	(strtod@_u+1)^(0+128),w
  6884  019C  0020               	movlb	0	; select bank0
  6885  019D  00A9               	movwf	___altoft@c+1
  6886  019E  0021               	movlb	1	; select bank1
  6887  019F  0823               	movf	strtod@_u^(0+128),w
  6888  01A0  0020               	movlb	0	; select bank0
  6889  01A1  00A8               	movwf	___altoft@c
  6890  01A2  3196  2622  3180   	fcall	___altoft
  6891  01A5  0020               	movlb	0	; select bank0
  6892  01A6  0828               	movf	?___altoft,w
  6893  01A7  0021               	movlb	1	; select bank1
  6894  01A8  00A3               	movwf	strtod@_u^(0+128)
  6895  01A9  0020               	movlb	0	; select bank0
  6896  01AA  0829               	movf	?___altoft+1,w
  6897  01AB  0021               	movlb	1	; select bank1
  6898  01AC  00A4               	movwf	(strtod@_u+1)^(0+128)
  6899  01AD  0020               	movlb	0	; select bank0
  6900  01AE  082A               	movf	?___altoft+2,w
  6901  01AF  0021               	movlb	1	; select bank1
  6902  01B0  00A5               	movwf	(strtod@_u+2)^(0+128)
  6903  01B1  0825               	movf	(strtod@_u+2)^(0+128),w
  6904  01B2  0424               	iorwf	(strtod@_u+1)^(0+128),w
  6905  01B3  0423               	iorwf	strtod@_u^(0+128),w
  6906  01B4  1D03               	skipz
  6907  01B5  29BE               	goto	l933
  6908  01B6  3000               	movlw	0
  6909  01B7  0020               	movlb	0	; select bank0
  6910  01B8  00E7               	movwf	?_strtod
  6911  01B9  3000               	movlw	0
  6912  01BA  00E8               	movwf	?_strtod+1
  6913  01BB  3000               	movlw	0
  6914  01BC  00E9               	movwf	?_strtod+2
  6915  01BD  0008               	return
  6916  01BE                     l933:	
  6917  01BE  1FA2               	btfss	strtod@expon^(0+128),7
  6918  01BF  2A44               	goto	l3370
  6919  01C0  09A2               	comf	strtod@expon^(0+128),f
  6920  01C1  0AA2               	incf	strtod@expon^(0+128),f
  6921  01C2                     l3350:	
  6922  01C2  0822               	movf	strtod@expon^(0+128),w
  6923  01C3  3A80               	xorlw	128
  6924  01C4  3E76               	addlw	-138
  6925  01C5  1C03               	btfss	3,0
  6926  01C6  2A18               	goto	l3356
  6927  01C7  3003               	movlw	3
  6928  01C8  0020               	movlb	0	; select bank0
  6929  01C9  00BB               	movwf	___ftdiv@f2
  6930  01CA  3015               	movlw	21
  6931  01CB  00BC               	movwf	___ftdiv@f2+1
  6932  01CC  3050               	movlw	80
  6933  01CD  00BD               	movwf	___ftdiv@f2+2
  6934  01CE  0021               	movlb	1	; select bank1
  6935  01CF  0823               	movf	strtod@_u^(0+128),w
  6936  01D0  0020               	movlb	0	; select bank0
  6937  01D1  00BE               	movwf	___ftdiv@f1
  6938  01D2  0021               	movlb	1	; select bank1
  6939  01D3  0824               	movf	(strtod@_u+1)^(0+128),w
  6940  01D4  0020               	movlb	0	; select bank0
  6941  01D5  00BF               	movwf	___ftdiv@f1+1
  6942  01D6  0021               	movlb	1	; select bank1
  6943  01D7  0825               	movf	(strtod@_u+2)^(0+128),w
  6944  01D8  0020               	movlb	0	; select bank0
  6945  01D9  00C0               	movwf	___ftdiv@f1+2
  6946  01DA  318B  23F1  3180   	fcall	___ftdiv
  6947  01DD  0020               	movlb	0	; select bank0
  6948  01DE  083B               	movf	?___ftdiv,w
  6949  01DF  0021               	movlb	1	; select bank1
  6950  01E0  00A3               	movwf	strtod@_u^(0+128)
  6951  01E1  0020               	movlb	0	; select bank0
  6952  01E2  083C               	movf	?___ftdiv+1,w
  6953  01E3  0021               	movlb	1	; select bank1
  6954  01E4  00A4               	movwf	(strtod@_u+1)^(0+128)
  6955  01E5  0020               	movlb	0	; select bank0
  6956  01E6  083D               	movf	?___ftdiv+2,w
  6957  01E7  0021               	movlb	1	; select bank1
  6958  01E8  00A5               	movwf	(strtod@_u+2)^(0+128)
  6959  01E9  30F6               	movlw	246
  6960  01EA  0020               	movlb	0	; select bank0
  6961  01EB  00EA               	movwf	??_strtod
  6962  01EC  086A               	movf	??_strtod,w
  6963  01ED  0021               	movlb	1	; select bank1
  6964  01EE  07A2               	addwf	strtod@expon^(0+128),f
  6965  01EF  29C2               	goto	l3350
  6966  01F0                     l3352:	
  6967  01F0  3000               	movlw	0
  6968  01F1  0020               	movlb	0	; select bank0
  6969  01F2  00BB               	movwf	___ftdiv@f2
  6970  01F3  3020               	movlw	32
  6971  01F4  00BC               	movwf	___ftdiv@f2+1
  6972  01F5  3041               	movlw	65
  6973  01F6  00BD               	movwf	___ftdiv@f2+2
  6974  01F7  0021               	movlb	1	; select bank1
  6975  01F8  0823               	movf	strtod@_u^(0+128),w
  6976  01F9  0020               	movlb	0	; select bank0
  6977  01FA  00BE               	movwf	___ftdiv@f1
  6978  01FB  0021               	movlb	1	; select bank1
  6979  01FC  0824               	movf	(strtod@_u+1)^(0+128),w
  6980  01FD  0020               	movlb	0	; select bank0
  6981  01FE  00BF               	movwf	___ftdiv@f1+1
  6982  01FF  0021               	movlb	1	; select bank1
  6983  0200  0825               	movf	(strtod@_u+2)^(0+128),w
  6984  0201  0020               	movlb	0	; select bank0
  6985  0202  00C0               	movwf	___ftdiv@f1+2
  6986  0203  318B  23F1  3180   	fcall	___ftdiv
  6987  0206  0020               	movlb	0	; select bank0
  6988  0207  083B               	movf	?___ftdiv,w
  6989  0208  0021               	movlb	1	; select bank1
  6990  0209  00A3               	movwf	strtod@_u^(0+128)
  6991  020A  0020               	movlb	0	; select bank0
  6992  020B  083C               	movf	?___ftdiv+1,w
  6993  020C  0021               	movlb	1	; select bank1
  6994  020D  00A4               	movwf	(strtod@_u+1)^(0+128)
  6995  020E  0020               	movlb	0	; select bank0
  6996  020F  083D               	movf	?___ftdiv+2,w
  6997  0210  0021               	movlb	1	; select bank1
  6998  0211  00A5               	movwf	(strtod@_u+2)^(0+128)
  6999  0212  30FF               	movlw	255
  7000  0213  0020               	movlb	0	; select bank0
  7001  0214  00EA               	movwf	??_strtod
  7002  0215  086A               	movf	??_strtod,w
  7003  0216  0021               	movlb	1	; select bank1
  7004  0217  07A2               	addwf	strtod@expon^(0+128),f
  7005  0218                     l3356:	
  7006  0218  0822               	movf	strtod@expon^(0+128),w
  7007  0219  1D03               	btfss	3,2
  7008  021A  29F0               	goto	l3352
  7009  021B  0823               	movf	strtod@_u^(0+128),w
  7010  021C  0020               	movlb	0	; select bank0
  7011  021D  00A0               	movwf	___ftge@ff1
  7012  021E  0021               	movlb	1	; select bank1
  7013  021F  0824               	movf	(strtod@_u+1)^(0+128),w
  7014  0220  0020               	movlb	0	; select bank0
  7015  0221  00A1               	movwf	___ftge@ff1+1
  7016  0222  0021               	movlb	1	; select bank1
  7017  0223  0825               	movf	(strtod@_u+2)^(0+128),w
  7018  0224  0020               	movlb	0	; select bank0
  7019  0225  00A2               	movwf	___ftge@ff1+2
  7020  0226  3000               	movlw	0
  7021  0227  00A3               	movwf	___ftge@ff2
  7022  0228  3080               	movlw	128
  7023  0229  00A4               	movwf	___ftge@ff2+1
  7024  022A  3000               	movlw	0
  7025  022B  00A5               	movwf	___ftge@ff2+2
  7026  022C  3195  25E6  3180   	fcall	___ftge
  7027  022F  1803               	btfsc	3,0
  7028  0230  2ACE               	goto	l944
  7029  0231  0021               	movlb	1	; select bank1
  7030  0232  1C21               	btfss	strtod@flags^(0+128),0
  7031  0233  2A3C               	goto	l3366
  7032  0234  3000               	movlw	0
  7033  0235  0020               	movlb	0	; select bank0
  7034  0236  00E7               	movwf	?_strtod
  7035  0237  3080               	movlw	128
  7036  0238  00E8               	movwf	?_strtod+1
  7037  0239  3080               	movlw	128
  7038  023A  00E9               	movwf	?_strtod+2
  7039  023B  0008               	return
  7040  023C                     l3366:	
  7041  023C  3000               	movlw	0
  7042  023D  0020               	movlb	0	; select bank0
  7043  023E  00E7               	movwf	?_strtod
  7044  023F  3080               	movlw	128
  7045  0240  00E8               	movwf	?_strtod+1
  7046  0241  3000               	movlw	0
  7047  0242  00E9               	movwf	?_strtod+2
  7048  0243  0008               	return
  7049  0244                     l3370:	
  7050  0244  0021               	movlb	1	; select bank1
  7051  0245  0822               	movf	strtod@expon^(0+128),w
  7052  0246  3A80               	xorlw	128
  7053  0247  3E7F               	addlw	-129
  7054  0248  1803               	btfsc	3,0
  7055  0249  2A73               	goto	l3378
  7056  024A  2ACE               	goto	l944
  7057  024B                     l3374:	
  7058  024B  3003               	movlw	3
  7059  024C  0020               	movlb	0	; select bank0
  7060  024D  00D7               	movwf	___ftmul@f1
  7061  024E  3015               	movlw	21
  7062  024F  00D8               	movwf	___ftmul@f1+1
  7063  0250  3050               	movlw	80
  7064  0251  00D9               	movwf	___ftmul@f1+2
  7065  0252  0021               	movlb	1	; select bank1
  7066  0253  0823               	movf	strtod@_u^(0+128),w
  7067  0254  0020               	movlb	0	; select bank0
  7068  0255  00DA               	movwf	___ftmul@f2
  7069  0256  0021               	movlb	1	; select bank1
  7070  0257  0824               	movf	(strtod@_u+1)^(0+128),w
  7071  0258  0020               	movlb	0	; select bank0
  7072  0259  00DB               	movwf	___ftmul@f2+1
  7073  025A  0021               	movlb	1	; select bank1
  7074  025B  0825               	movf	(strtod@_u+2)^(0+128),w
  7075  025C  0020               	movlb	0	; select bank0
  7076  025D  00DC               	movwf	___ftmul@f2+2
  7077  025E  318C  249A  3180   	fcall	___ftmul
  7078  0261  0020               	movlb	0	; select bank0
  7079  0262  0857               	movf	?___ftmul,w
  7080  0263  0021               	movlb	1	; select bank1
  7081  0264  00A3               	movwf	strtod@_u^(0+128)
  7082  0265  0020               	movlb	0	; select bank0
  7083  0266  0858               	movf	?___ftmul+1,w
  7084  0267  0021               	movlb	1	; select bank1
  7085  0268  00A4               	movwf	(strtod@_u+1)^(0+128)
  7086  0269  0020               	movlb	0	; select bank0
  7087  026A  0859               	movf	?___ftmul+2,w
  7088  026B  0021               	movlb	1	; select bank1
  7089  026C  00A5               	movwf	(strtod@_u+2)^(0+128)
  7090  026D  30F6               	movlw	246
  7091  026E  0020               	movlb	0	; select bank0
  7092  026F  00EA               	movwf	??_strtod
  7093  0270  086A               	movf	??_strtod,w
  7094  0271  0021               	movlb	1	; select bank1
  7095  0272  07A2               	addwf	strtod@expon^(0+128),f
  7096  0273                     l3378:	
  7097  0273  300A               	movlw	10
  7098  0274  0222               	subwf	strtod@expon^(0+128),w
  7099  0275  1C03               	btfss	3,0
  7100  0276  2AA0               	goto	l3384
  7101  0277  2A4B               	goto	l3374
  7102  0278                     l3380:	
  7103  0278  3000               	movlw	0
  7104  0279  0020               	movlb	0	; select bank0
  7105  027A  00D7               	movwf	___ftmul@f1
  7106  027B  3020               	movlw	32
  7107  027C  00D8               	movwf	___ftmul@f1+1
  7108  027D  3041               	movlw	65
  7109  027E  00D9               	movwf	___ftmul@f1+2
  7110  027F  0021               	movlb	1	; select bank1
  7111  0280  0823               	movf	strtod@_u^(0+128),w
  7112  0281  0020               	movlb	0	; select bank0
  7113  0282  00DA               	movwf	___ftmul@f2
  7114  0283  0021               	movlb	1	; select bank1
  7115  0284  0824               	movf	(strtod@_u+1)^(0+128),w
  7116  0285  0020               	movlb	0	; select bank0
  7117  0286  00DB               	movwf	___ftmul@f2+1
  7118  0287  0021               	movlb	1	; select bank1
  7119  0288  0825               	movf	(strtod@_u+2)^(0+128),w
  7120  0289  0020               	movlb	0	; select bank0
  7121  028A  00DC               	movwf	___ftmul@f2+2
  7122  028B  318C  249A  3180   	fcall	___ftmul
  7123  028E  0020               	movlb	0	; select bank0
  7124  028F  0857               	movf	?___ftmul,w
  7125  0290  0021               	movlb	1	; select bank1
  7126  0291  00A3               	movwf	strtod@_u^(0+128)
  7127  0292  0020               	movlb	0	; select bank0
  7128  0293  0858               	movf	?___ftmul+1,w
  7129  0294  0021               	movlb	1	; select bank1
  7130  0295  00A4               	movwf	(strtod@_u+1)^(0+128)
  7131  0296  0020               	movlb	0	; select bank0
  7132  0297  0859               	movf	?___ftmul+2,w
  7133  0298  0021               	movlb	1	; select bank1
  7134  0299  00A5               	movwf	(strtod@_u+2)^(0+128)
  7135  029A  30FF               	movlw	255
  7136  029B  0020               	movlb	0	; select bank0
  7137  029C  00EA               	movwf	??_strtod
  7138  029D  086A               	movf	??_strtod,w
  7139  029E  0021               	movlb	1	; select bank1
  7140  029F  07A2               	addwf	strtod@expon^(0+128),f
  7141  02A0                     l3384:	
  7142  02A0  0822               	movf	strtod@expon^(0+128),w
  7143  02A1  1D03               	btfss	3,2
  7144  02A2  2A78               	goto	l3380
  7145  02A3  30FF               	movlw	255
  7146  02A4  0020               	movlb	0	; select bank0
  7147  02A5  00A0               	movwf	___ftge@ff1
  7148  02A6  307F               	movlw	127
  7149  02A7  00A1               	movwf	___ftge@ff1+1
  7150  02A8  307F               	movlw	127
  7151  02A9  00A2               	movwf	___ftge@ff1+2
  7152  02AA  0021               	movlb	1	; select bank1
  7153  02AB  0823               	movf	strtod@_u^(0+128),w
  7154  02AC  0020               	movlb	0	; select bank0
  7155  02AD  00A3               	movwf	___ftge@ff2
  7156  02AE  0021               	movlb	1	; select bank1
  7157  02AF  0824               	movf	(strtod@_u+1)^(0+128),w
  7158  02B0  0020               	movlb	0	; select bank0
  7159  02B1  00A4               	movwf	___ftge@ff2+1
  7160  02B2  0021               	movlb	1	; select bank1
  7161  02B3  0825               	movf	(strtod@_u+2)^(0+128),w
  7162  02B4  0020               	movlb	0	; select bank0
  7163  02B5  00A5               	movwf	___ftge@ff2+2
  7164  02B6  3195  25E6  3180   	fcall	___ftge
  7165  02B9  1803               	btfsc	3,0
  7166  02BA  2ACE               	goto	l944
  7167  02BB  0021               	movlb	1	; select bank1
  7168  02BC  1C21               	btfss	strtod@flags^(0+128),0
  7169  02BD  2AC6               	goto	l3394
  7170  02BE  3000               	movlw	0
  7171  02BF  0020               	movlb	0	; select bank0
  7172  02C0  00E7               	movwf	?_strtod
  7173  02C1  3080               	movlw	128
  7174  02C2  00E8               	movwf	?_strtod+1
  7175  02C3  3080               	movlw	128
  7176  02C4  00E9               	movwf	?_strtod+2
  7177  02C5  0008               	return
  7178  02C6                     l3394:	
  7179  02C6  3000               	movlw	0
  7180  02C7  0020               	movlb	0	; select bank0
  7181  02C8  00E7               	movwf	?_strtod
  7182  02C9  3080               	movlw	128
  7183  02CA  00E8               	movwf	?_strtod+1
  7184  02CB  3000               	movlw	0
  7185  02CC  00E9               	movwf	?_strtod+2
  7186  02CD  0008               	return
  7187  02CE                     l944:	
  7188  02CE  0021               	movlb	1	; select bank1
  7189  02CF  1C21               	btfss	strtod@flags^(0+128),0
  7190  02D0  2AEA               	goto	l3400
  7191  02D1  0823               	movf	strtod@_u^(0+128),w
  7192  02D2  0020               	movlb	0	; select bank0
  7193  02D3  00D7               	movwf	___ftneg@f1
  7194  02D4  0021               	movlb	1	; select bank1
  7195  02D5  0824               	movf	(strtod@_u+1)^(0+128),w
  7196  02D6  0020               	movlb	0	; select bank0
  7197  02D7  00D8               	movwf	___ftneg@f1+1
  7198  02D8  0021               	movlb	1	; select bank1
  7199  02D9  0825               	movf	(strtod@_u+2)^(0+128),w
  7200  02DA  0020               	movlb	0	; select bank0
  7201  02DB  00D9               	movwf	___ftneg@f1+2
  7202  02DC  3191  21F8         	fcall	___ftneg
  7203  02DE  0020               	movlb	0	; select bank0
  7204  02DF  0857               	movf	?___ftneg,w
  7205  02E0  0021               	movlb	1	; select bank1
  7206  02E1  00A3               	movwf	strtod@_u^(0+128)
  7207  02E2  0020               	movlb	0	; select bank0
  7208  02E3  0858               	movf	?___ftneg+1,w
  7209  02E4  0021               	movlb	1	; select bank1
  7210  02E5  00A4               	movwf	(strtod@_u+1)^(0+128)
  7211  02E6  0020               	movlb	0	; select bank0
  7212  02E7  0859               	movf	?___ftneg+2,w
  7213  02E8  0021               	movlb	1	; select bank1
  7214  02E9  00A5               	movwf	(strtod@_u+2)^(0+128)
  7215  02EA                     l3400:	
  7216  02EA  0823               	movf	strtod@_u^(0+128),w
  7217  02EB  0020               	movlb	0	; select bank0
  7218  02EC  00E7               	movwf	?_strtod
  7219  02ED  0021               	movlb	1	; select bank1
  7220  02EE  0824               	movf	(strtod@_u+1)^(0+128),w
  7221  02EF  0020               	movlb	0	; select bank0
  7222  02F0  00E8               	movwf	?_strtod+1
  7223  02F1  0021               	movlb	1	; select bank1
  7224  02F2  0825               	movf	(strtod@_u+2)^(0+128),w
  7225  02F3  0020               	movlb	0	; select bank0
  7226  02F4  00E9               	movwf	?_strtod+2
  7227  02F5  0008               	return
  7228  02F6                     __end_of_strtod:	
  7229                           
  7230                           	psect	text23
  7231  122F                     __ptext23:	
  7232 ;; *************** function _isspace *****************
  7233 ;; Defined at:
  7234 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isspace.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;  c               1    wreg     unsigned char 
  7237 ;; Auto vars:     Size  Location     Type
  7238 ;;  c               1    1[BANK0 ] unsigned char 
  7239 ;; Return value:  Size  Location     Type
  7240 ;;		None               void
  7241 ;; Registers used:
  7242 ;;		wreg, status,2, status,0
  7243 ;; Tracked objects:
  7244 ;;		On entry : 0/0
  7245 ;;		On exit  : 0/0
  7246 ;;		Unchanged: 0/0
  7247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;Total ram usage:        2 bytes
  7253 ;; Hardware stack levels used:    1
  7254 ;; Hardware stack levels required when called:    7
  7255 ;; This function calls:
  7256 ;;		Nothing
  7257 ;; This function is called by:
  7258 ;;		_strtod
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           
  7263                           ;psect for function _isspace
  7264  122F                     _isspace:	
  7265                           
  7266                           ;incstack = 0
  7267                           ; Regs used in _isspace: [wreg+status,2+status,0]
  7268                           ;isspace@c stored from wreg
  7269  122F  0020               	movlb	0	; select bank0
  7270  1230  00A1               	movwf	isspace@c
  7271  1231  01A0               	clrf	_isspace$1854
  7272  1232  0AA0               	incf	_isspace$1854,f
  7273  1233  3020               	movlw	32
  7274  1234  0621               	xorwf	isspace@c,w
  7275  1235  1903               	btfsc	3,2
  7276  1236  2A40               	goto	l3012
  7277  1237  300E               	movlw	14
  7278  1238  0221               	subwf	isspace@c,w
  7279  1239  1803               	skipnc
  7280  123A  2A3F               	goto	l3010
  7281  123B  3009               	movlw	9
  7282  123C  0221               	subwf	isspace@c,w
  7283  123D  1803               	skipnc
  7284  123E  2A40               	goto	l3012
  7285  123F                     l3010:	
  7286  123F  01A0               	clrf	_isspace$1854
  7287  1240                     l3012:	
  7288  1240  0C20               	rrf	_isspace$1854,w
  7289  1241  0008               	return
  7290  1242                     __end_of_isspace:	
  7291                           
  7292                           	psect	text24
  7293  151E                     __ptext24:	
  7294 ;; *************** function ___lmul *****************
  7295 ;; Defined at:
  7296 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  multiplier      4    0[BANK0 ] unsigned long 
  7299 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;  product         4    8[BANK0 ] unsigned long 
  7302 ;; Return value:  Size  Location     Type
  7303 ;;                  4    0[BANK0 ] unsigned long 
  7304 ;; Registers used:
  7305 ;;		wreg, status,2, status,0
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7311 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;Total ram usage:       12 bytes
  7316 ;; Hardware stack levels used:    1
  7317 ;; Hardware stack levels required when called:    7
  7318 ;; This function calls:
  7319 ;;		Nothing
  7320 ;; This function is called by:
  7321 ;;		_strtod
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           
  7326                           ;psect for function ___lmul
  7327  151E                     ___lmul:	
  7328                           
  7329                           ;incstack = 0
  7330                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7331  151E  3000               	movlw	0
  7332  151F  0020               	movlb	0	; select bank0
  7333  1520  00AB               	movwf	___lmul@product+3
  7334  1521  3000               	movlw	0
  7335  1522  00AA               	movwf	___lmul@product+2
  7336  1523  3000               	movlw	0
  7337  1524  00A9               	movwf	___lmul@product+1
  7338  1525  3000               	movlw	0
  7339  1526  00A8               	movwf	___lmul@product
  7340  1527                     l2840:	
  7341  1527  1C20               	btfss	___lmul@multiplier,0
  7342  1528  2D31               	goto	l2844
  7343  1529  0824               	movf	___lmul@multiplicand,w
  7344  152A  07A8               	addwf	___lmul@product,f
  7345  152B  0825               	movf	___lmul@multiplicand+1,w
  7346  152C  3DA9               	addwfc	___lmul@product+1,f
  7347  152D  0826               	movf	___lmul@multiplicand+2,w
  7348  152E  3DAA               	addwfc	___lmul@product+2,f
  7349  152F  0827               	movf	___lmul@multiplicand+3,w
  7350  1530  3DAB               	addwfc	___lmul@product+3,f
  7351  1531                     l2844:	
  7352  1531  3001               	movlw	1
  7353  1532                     u2545:	
  7354  1532  35A4               	lslf	___lmul@multiplicand,f
  7355  1533  0DA5               	rlf	___lmul@multiplicand+1,f
  7356  1534  0DA6               	rlf	___lmul@multiplicand+2,f
  7357  1535  0DA7               	rlf	___lmul@multiplicand+3,f
  7358  1536  0B89               	decfsz	9,f
  7359  1537  2D32               	goto	u2545
  7360  1538  3001               	movlw	1
  7361  1539                     u2555:	
  7362  1539  36A3               	lsrf	___lmul@multiplier+3,f
  7363  153A  0CA2               	rrf	___lmul@multiplier+2,f
  7364  153B  0CA1               	rrf	___lmul@multiplier+1,f
  7365  153C  0CA0               	rrf	___lmul@multiplier,f
  7366  153D  0B89               	decfsz	9,f
  7367  153E  2D39               	goto	u2555
  7368  153F  0823               	movf	___lmul@multiplier+3,w
  7369  1540  0422               	iorwf	___lmul@multiplier+2,w
  7370  1541  0421               	iorwf	___lmul@multiplier+1,w
  7371  1542  0420               	iorwf	___lmul@multiplier,w
  7372  1543  1D03               	skipz
  7373  1544  2D27               	goto	l2840
  7374  1545  082B               	movf	___lmul@product+3,w
  7375  1546  00A3               	movwf	?___lmul+3
  7376  1547  082A               	movf	___lmul@product+2,w
  7377  1548  00A2               	movwf	?___lmul+2
  7378  1549  0829               	movf	___lmul@product+1,w
  7379  154A  00A1               	movwf	?___lmul+1
  7380  154B  0828               	movf	___lmul@product,w
  7381  154C  00A0               	movwf	?___lmul
  7382  154D  0008               	return
  7383  154E                     __end_of___lmul:	
  7384                           
  7385                           	psect	text25
  7386  121D                     __ptext25:	
  7387 ;; *************** function ___bmul *****************
  7388 ;; Defined at:
  7389 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;  multiplier      1    wreg     unsigned char 
  7392 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7395 ;;  product         1    2[BANK0 ] unsigned char 
  7396 ;; Return value:  Size  Location     Type
  7397 ;;                  1    wreg      unsigned char 
  7398 ;; Registers used:
  7399 ;;		wreg, status,2, status,0
  7400 ;; Tracked objects:
  7401 ;;		On entry : 0/0
  7402 ;;		On exit  : 0/0
  7403 ;;		Unchanged: 0/0
  7404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7405 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;Total ram usage:        4 bytes
  7410 ;; Hardware stack levels used:    1
  7411 ;; Hardware stack levels required when called:    7
  7412 ;; This function calls:
  7413 ;;		Nothing
  7414 ;; This function is called by:
  7415 ;;		_nrf24l01SetTXPipe
  7416 ;;		_nrf24l01InitRegisters
  7417 ;;		_strtod
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           
  7422                           ;psect for function ___bmul
  7423  121D                     ___bmul:	
  7424                           
  7425                           ;incstack = 0
  7426                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7427                           ;___bmul@multiplier stored from wreg
  7428  121D  0020               	movlb	0	; select bank0
  7429  121E  00A3               	movwf	___bmul@multiplier
  7430  121F  01A2               	clrf	___bmul@product
  7431  1220                     l2854:	
  7432  1220  1C23               	btfss	___bmul@multiplier,0
  7433  1221  2A26               	goto	l2858
  7434  1222  0820               	movf	___bmul@multiplicand,w
  7435  1223  00A1               	movwf	??___bmul
  7436  1224  0821               	movf	??___bmul,w
  7437  1225  07A2               	addwf	___bmul@product,f
  7438  1226                     l2858:	
  7439  1226  1003               	clrc
  7440  1227  0DA0               	rlf	___bmul@multiplicand,f
  7441  1228  1003               	clrc
  7442  1229  0CA3               	rrf	___bmul@multiplier,f
  7443  122A  0823               	movf	___bmul@multiplier,w
  7444  122B  1D03               	btfss	3,2
  7445  122C  2A20               	goto	l2854
  7446  122D  0822               	movf	___bmul@product,w
  7447  122E  0008               	return
  7448  122F                     __end_of___bmul:	
  7449                           
  7450                           	psect	text26
  7451  1622                     __ptext26:	
  7452 ;; *************** function ___altoft *****************
  7453 ;; Defined at:
  7454 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\altoft.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;  c               4    8[BANK0 ] long 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;  sign            1   15[BANK0 ] unsigned char 
  7459 ;;  exp             1   14[BANK0 ] unsigned char 
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  3    8[BANK0 ] float 
  7462 ;; Registers used:
  7463 ;;		wreg, status,2, status,0, pclath, cstack
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7469 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;Total ram usage:        8 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:    8
  7476 ;; This function calls:
  7477 ;;		___ftpack
  7478 ;; This function is called by:
  7479 ;;		_strtod
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           
  7484                           ;psect for function ___altoft
  7485  1622                     ___altoft:	
  7486                           
  7487                           ;incstack = 0
  7488                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  7489  1622  0020               	movlb	0	; select bank0
  7490  1623  01AF               	clrf	___altoft@sign
  7491  1624  308E               	movlw	142
  7492  1625  00AC               	movwf	??___altoft
  7493  1626  082C               	movf	??___altoft,w
  7494  1627  00AE               	movwf	___altoft@exp
  7495  1628  1FAB               	btfss	___altoft@c+3,7
  7496  1629  2E37               	goto	l2876
  7497  162A  09A8               	comf	___altoft@c,f
  7498  162B  09A9               	comf	___altoft@c+1,f
  7499  162C  09AA               	comf	___altoft@c+2,f
  7500  162D  09AB               	comf	___altoft@c+3,f
  7501  162E  0AA8               	incf	___altoft@c,f
  7502  162F  1903               	skipnz
  7503  1630  0AA9               	incf	___altoft@c+1,f
  7504  1631  1903               	skipnz
  7505  1632  0AAA               	incf	___altoft@c+2,f
  7506  1633  1903               	skipnz
  7507  1634  0AAB               	incf	___altoft@c+3,f
  7508  1635  01AF               	clrf	___altoft@sign
  7509  1636  0AAF               	incf	___altoft@sign,f
  7510  1637                     l2876:	
  7511  1637  30FF               	movlw	255
  7512  1638  052B               	andwf	___altoft@c+3,w
  7513  1639  1903               	btfsc	3,2
  7514  163A  2E47               	goto	l2878
  7515  163B  3001               	movlw	1
  7516  163C                     u2605:	
  7517  163C  36AB               	lsrf	___altoft@c+3,f
  7518  163D  0CAA               	rrf	___altoft@c+2,f
  7519  163E  0CA9               	rrf	___altoft@c+1,f
  7520  163F  0CA8               	rrf	___altoft@c,f
  7521  1640  0B89               	decfsz	9,f
  7522  1641  2E3C               	goto	u2605
  7523  1642  3001               	movlw	1
  7524  1643  00AC               	movwf	??___altoft
  7525  1644  082C               	movf	??___altoft,w
  7526  1645  07AE               	addwf	___altoft@exp,f
  7527  1646  2E37               	goto	l2876
  7528  1647                     l2878:	
  7529  1647  0828               	movf	___altoft@c,w
  7530  1648  00A0               	movwf	___ftpack@arg
  7531  1649  0829               	movf	___altoft@c+1,w
  7532  164A  00A1               	movwf	___ftpack@arg+1
  7533  164B  082A               	movf	___altoft@c+2,w
  7534  164C  00A2               	movwf	___ftpack@arg+2
  7535  164D  082E               	movf	___altoft@exp,w
  7536  164E  00AC               	movwf	??___altoft
  7537  164F  082C               	movf	??___altoft,w
  7538  1650  00A3               	movwf	___ftpack@exp
  7539  1651  082F               	movf	___altoft@sign,w
  7540  1652  00AD               	movwf	??___altoft+1
  7541  1653  082D               	movf	??___altoft+1,w
  7542  1654  00A4               	movwf	___ftpack@sign
  7543  1655  3189  2121         	fcall	___ftpack
  7544  1657  0020               	movlb	0	; select bank0
  7545  1658  0820               	movf	?___ftpack,w
  7546  1659  00A8               	movwf	?___altoft
  7547  165A  0821               	movf	?___ftpack+1,w
  7548  165B  00A9               	movwf	?___altoft+1
  7549  165C  0822               	movf	?___ftpack+2,w
  7550  165D  00AA               	movwf	?___altoft+2
  7551  165E  0008               	return
  7552  165F                     __end_of___altoft:	
  7553                           
  7554                           	psect	text27
  7555  0778                     __ptext27:	
  7556 ;; *************** function _setMessage *****************
  7557 ;; Defined at:
  7558 ;;		line 144 in file "main.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;  packet          2   25[BANK1 ] PTR struct .
  7561 ;;		 -> main@packet(33), loop@packet(33), 
  7562 ;;  topic           2   27[BANK1 ] PTR const unsigned char 
  7563 ;;		 -> STR_12(5), STR_10(6), STR_9(7), STR_8(5), 
  7564 ;;		 -> STR_7(5), STR_6(4), 
  7565 ;;  value           3   29[BANK1 ] float 
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;  status          2   33[BANK1 ] int 
  7568 ;; Return value:  Size  Location     Type
  7569 ;;                  1    wreg      void 
  7570 ;; Registers used:
  7571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7572 ;; Tracked objects:
  7573 ;;		On entry : 0/0
  7574 ;;		On exit  : 0/0
  7575 ;;		Unchanged: 0/0
  7576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7577 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7578 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7579 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7580 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  7581 ;;Total ram usage:       10 bytes
  7582 ;; Hardware stack levels used:    1
  7583 ;; Hardware stack levels required when called:   11
  7584 ;; This function calls:
  7585 ;;		_ftoa
  7586 ;;		_memset
  7587 ;;		_strcat
  7588 ;; This function is called by:
  7589 ;;		_loop
  7590 ;;		_main
  7591 ;; This function uses a non-reentrant model
  7592 ;;
  7593                           
  7594                           
  7595                           ;psect for function _setMessage
  7596  0778                     _setMessage:	
  7597                           
  7598                           ;main.c: 145: memset(packet->Message, 0, sizeof(packet->Message));
  7599                           
  7600                           ;incstack = 0
  7601                           ; Regs used in _setMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7602  0778  0021               	movlb	1	; select bank1
  7603  0779  0839               	movf	setMessage@packet^(0+128),w
  7604  077A  3E01               	addlw	1
  7605  077B  0020               	movlb	0	; select bank0
  7606  077C  00A0               	movwf	memset@p1
  7607  077D  3000               	movlw	0
  7608  077E  0021               	movlb	1	; select bank1
  7609  077F  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  7610  0780  0020               	movlb	0	; select bank0
  7611  0781  00A1               	movwf	memset@p1+1
  7612  0782  3000               	movlw	0
  7613  0783  00A2               	movwf	memset@c
  7614  0784  00A3               	movwf	memset@c+1
  7615  0785  3020               	movlw	32
  7616  0786  00A4               	movwf	memset@n
  7617  0787  3000               	movlw	0
  7618  0788  00A5               	movwf	memset@n+1
  7619  0789  3192  2298  3187   	fcall	_memset
  7620                           
  7621                           ;main.c: 147: strcat(packet->Message, romData->name);
  7622  078C  0021               	movlb	1	; select bank1
  7623  078D  0839               	movf	setMessage@packet^(0+128),w
  7624  078E  3E01               	addlw	1
  7625  078F  00B3               	movwf	strcat@to^(0+128)
  7626  0790  3000               	movlw	0
  7627  0791  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  7628  0792  00B4               	movwf	(strcat@to+1)^(0+128)
  7629  0793  086C               	movf	_romData^(0+128),w
  7630  0794  3E01               	addlw	1
  7631  0795  00B5               	movwf	strcat@from^(0+128)
  7632  0796  3001               	movlw	1
  7633  0797  00B6               	movwf	(strcat@from+1)^(0+128)
  7634  0798  3194  241F  3187   	fcall	_strcat
  7635                           
  7636                           ;main.c: 149: strcat(packet->Message, "/");
  7637  079B  0021               	movlb	1	; select bank1
  7638  079C  0839               	movf	setMessage@packet^(0+128),w
  7639  079D  3E01               	addlw	1
  7640  079E  00B3               	movwf	strcat@to^(0+128)
  7641  079F  3000               	movlw	0
  7642  07A0  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  7643  07A1  00B4               	movwf	(strcat@to+1)^(0+128)
  7644  07A2  305D               	movlw	low (STR_1| (0+32768))
  7645  07A3  00B5               	movwf	strcat@from^(0+128)
  7646  07A4  3098               	movlw	high (STR_1| (0+32768))
  7647  07A5  00B6               	movwf	(strcat@from^(0+128)+1)
  7648  07A6  3194  241F  3187   	fcall	_strcat
  7649                           
  7650                           ;main.c: 150: strcat(packet->Message, topic);
  7651  07A9  0021               	movlb	1	; select bank1
  7652  07AA  0839               	movf	setMessage@packet^(0+128),w
  7653  07AB  3E01               	addlw	1
  7654  07AC  00B3               	movwf	strcat@to^(0+128)
  7655  07AD  3000               	movlw	0
  7656  07AE  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  7657  07AF  00B4               	movwf	(strcat@to+1)^(0+128)
  7658  07B0  083C               	movf	(setMessage@topic+1)^(0+128),w
  7659  07B1  00B6               	movwf	(strcat@from+1)^(0+128)
  7660  07B2  083B               	movf	setMessage@topic^(0+128),w
  7661  07B3  00B5               	movwf	strcat@from^(0+128)
  7662  07B4  3194  241F  3187   	fcall	_strcat
  7663                           
  7664                           ;main.c: 152: int status;;main.c: 153: strcat(packet->Message, "/");
  7665  07B7  0021               	movlb	1	; select bank1
  7666  07B8  0839               	movf	setMessage@packet^(0+128),w
  7667  07B9  3E01               	addlw	1
  7668  07BA  00B3               	movwf	strcat@to^(0+128)
  7669  07BB  3000               	movlw	0
  7670  07BC  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  7671  07BD  00B4               	movwf	(strcat@to+1)^(0+128)
  7672  07BE  305D               	movlw	low (STR_1| (0+32768))
  7673  07BF  00B5               	movwf	strcat@from^(0+128)
  7674  07C0  3098               	movlw	high (STR_1| (0+32768))
  7675  07C1  00B6               	movwf	(strcat@from^(0+128)+1)
  7676  07C2  3194  241F  3187   	fcall	_strcat
  7677                           
  7678                           ;main.c: 154: strcat(packet->Message, ftoa(value, &status));
  7679  07C5  0021               	movlb	1	; select bank1
  7680  07C6  0839               	movf	setMessage@packet^(0+128),w
  7681  07C7  3E01               	addlw	1
  7682  07C8  00B3               	movwf	strcat@to^(0+128)
  7683  07C9  3000               	movlw	0
  7684  07CA  3D3A               	addwfc	(setMessage@packet+1)^(0+128),w
  7685  07CB  00B4               	movwf	(strcat@to+1)^(0+128)
  7686  07CC  083D               	movf	setMessage@value^(0+128),w
  7687  07CD  00A6               	movwf	ftoa@f^(0+128)
  7688  07CE  083E               	movf	(setMessage@value+1)^(0+128),w
  7689  07CF  00A7               	movwf	(ftoa@f+1)^(0+128)
  7690  07D0  083F               	movf	(setMessage@value+2)^(0+128),w
  7691  07D1  00A8               	movwf	(ftoa@f+2)^(0+128)
  7692  07D2  30C1               	movlw	(low (setMessage@status| 0))& (0+255)
  7693  07D3  00C0               	movwf	??_setMessage^(0+128)
  7694  07D4  0840               	movf	??_setMessage^(0+128),w
  7695  07D5  00A9               	movwf	ftoa@status^(0+128)
  7696  07D6  318E  2618  3187   	fcall	_ftoa
  7697  07D9  0021               	movlb	1	; select bank1
  7698  07DA  00B5               	movwf	strcat@from^(0+128)
  7699  07DB  3001               	movlw	1
  7700  07DC  00B6               	movwf	(strcat@from+1)^(0+128)
  7701  07DD  3194  241F         	fcall	_strcat
  7702  07DF  0008               	return
  7703  07E0                     __end_of_setMessage:	
  7704                           
  7705                           	psect	text28
  7706  141F                     __ptext28:	
  7707 ;; *************** function _strcat *****************
  7708 ;; Defined at:
  7709 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  7710 ;; Parameters:    Size  Location     Type
  7711 ;;  to              2   19[BANK1 ] PTR unsigned char 
  7712 ;;		 -> main@packet(33), loop@packet(33), 
  7713 ;;  from            2   21[BANK1 ] PTR const unsigned char 
  7714 ;;		 -> romDataMap.name(16), ftoa@buf(17), STR_12(5), STR_10(6), 
  7715 ;;		 -> STR_9(7), STR_8(5), STR_7(5), STR_6(4), 
  7716 ;;		 -> STR_5(2), STR_4(2), romDataMap(28), 
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;  cp              2   23[BANK1 ] PTR unsigned char 
  7719 ;;		 -> main@packet(33), loop@packet(33), 
  7720 ;; Return value:  Size  Location     Type
  7721 ;;                  2   19[BANK1 ] PTR unsigned char 
  7722 ;; Registers used:
  7723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7724 ;; Tracked objects:
  7725 ;;		On entry : 0/0
  7726 ;;		On exit  : 0/0
  7727 ;;		Unchanged: 0/0
  7728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7729 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7730 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7732 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7733 ;;Total ram usage:        6 bytes
  7734 ;; Hardware stack levels used:    1
  7735 ;; Hardware stack levels required when called:    7
  7736 ;; This function calls:
  7737 ;;		Nothing
  7738 ;; This function is called by:
  7739 ;;		_setMessage
  7740 ;; This function uses a non-reentrant model
  7741 ;;
  7742                           
  7743                           
  7744                           ;psect for function _strcat
  7745  141F                     _strcat:	
  7746                           
  7747                           ;incstack = 0
  7748                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  7749  141F  0021               	movlb	1	; select bank1
  7750  1420  0834               	movf	(strcat@to+1)^(0+128),w
  7751  1421  00B8               	movwf	(strcat@cp+1)^(0+128)
  7752  1422  0833               	movf	strcat@to^(0+128),w
  7753  1423  00B7               	movwf	strcat@cp^(0+128)
  7754  1424                     l3710:	
  7755  1424  0837               	movf	strcat@cp^(0+128),w
  7756  1425  0086               	movwf	6
  7757  1426  0838               	movf	(strcat@cp+1)^(0+128),w
  7758  1427  0087               	movwf	7
  7759  1428  0801               	movf	1,w
  7760  1429  1903               	btfsc	3,2
  7761  142A  2C38               	goto	l3714
  7762  142B  3001               	movlw	1
  7763  142C  07B7               	addwf	strcat@cp^(0+128),f
  7764  142D  3000               	movlw	0
  7765  142E  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  7766  142F  2C24               	goto	l3710
  7767  1430                     l3712:	
  7768  1430  3001               	movlw	1
  7769  1431  07B7               	addwf	strcat@cp^(0+128),f
  7770  1432  3000               	movlw	0
  7771  1433  3DB8               	addwfc	(strcat@cp+1)^(0+128),f
  7772  1434  3001               	movlw	1
  7773  1435  07B5               	addwf	strcat@from^(0+128),f
  7774  1436  3000               	movlw	0
  7775  1437  3DB6               	addwfc	(strcat@from+1)^(0+128),f
  7776  1438                     l3714:	
  7777  1438  0837               	movf	strcat@cp^(0+128),w
  7778  1439  0086               	movwf	6
  7779  143A  0838               	movf	(strcat@cp+1)^(0+128),w
  7780  143B  0087               	movwf	7
  7781  143C  0835               	movf	strcat@from^(0+128),w
  7782  143D  0084               	movwf	4
  7783  143E  0836               	movf	(strcat@from+1)^(0+128),w
  7784  143F  0085               	movwf	5
  7785  1440  0800               	movf	0,w	;code access
  7786  1441  3FC0               	movwi [0]fsr1
  7787  1442  0889               	movf	9,f
  7788  1443  1903               	btfsc	3,2
  7789  1444  0008               	return
  7790  1445  2C30               	goto	l3712
  7791  1446                     __end_of_strcat:	
  7792                           ;	Return value of _strcat is never used
  7793                           
  7794                           
  7795                           	psect	text29
  7796  1298                     __ptext29:	
  7797 ;; *************** function _memset *****************
  7798 ;; Defined at:
  7799 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  7800 ;; Parameters:    Size  Location     Type
  7801 ;;  p1              2    0[BANK0 ] PTR void 
  7802 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7803 ;;  c               2    2[BANK0 ] int 
  7804 ;;  n               2    4[BANK0 ] unsigned int 
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;  p               2    6[BANK0 ] PTR unsigned char 
  7807 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  7808 ;; Return value:  Size  Location     Type
  7809 ;;                  2    0[BANK0 ] PTR void 
  7810 ;; Registers used:
  7811 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7812 ;; Tracked objects:
  7813 ;;		On entry : 0/0
  7814 ;;		On exit  : 0/0
  7815 ;;		Unchanged: 0/0
  7816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7817 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7821 ;;Total ram usage:        8 bytes
  7822 ;; Hardware stack levels used:    1
  7823 ;; Hardware stack levels required when called:    7
  7824 ;; This function calls:
  7825 ;;		Nothing
  7826 ;; This function is called by:
  7827 ;;		_setMessage
  7828 ;; This function uses a non-reentrant model
  7829 ;;
  7830                           
  7831                           
  7832                           ;psect for function _memset
  7833  1298                     _memset:	
  7834                           
  7835                           ;incstack = 0
  7836                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7837  1298  0020               	movlb	0	; select bank0
  7838  1299  0821               	movf	memset@p1+1,w
  7839  129A  00A7               	movwf	memset@p+1
  7840  129B  0820               	movf	memset@p1,w
  7841  129C  00A6               	movwf	memset@p
  7842  129D                     l3704:	
  7843  129D  3001               	movlw	1
  7844  129E  02A4               	subwf	memset@n,f
  7845  129F  3000               	movlw	0
  7846  12A0  3BA5               	subwfb	memset@n+1,f
  7847  12A1  0A24               	incf	memset@n,w
  7848  12A2  1903               	btfsc	3,2
  7849  12A3  0A25               	incf	memset@n+1,w
  7850  12A4  1903               	btfsc	3,2
  7851  12A5  0008               	return
  7852  12A6  0826               	movf	memset@p,w
  7853  12A7  0086               	movwf	6
  7854  12A8  0827               	movf	memset@p+1,w
  7855  12A9  0087               	movwf	7
  7856  12AA  0822               	movf	memset@c,w
  7857  12AB  0081               	movwf	1
  7858  12AC  3001               	movlw	1
  7859  12AD  07A6               	addwf	memset@p,f
  7860  12AE  3000               	movlw	0
  7861  12AF  3DA7               	addwfc	memset@p+1,f
  7862  12B0  2A9D               	goto	l3704
  7863  12B1                     __end_of_memset:	
  7864                           ;	Return value of _memset is never used
  7865                           
  7866                           
  7867                           	psect	text30
  7868  0E18                     __ptext30:	
  7869 ;; *************** function _ftoa *****************
  7870 ;; Defined at:
  7871 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  f               3    6[BANK1 ] float 
  7874 ;;  status          1    9[BANK1 ] PTR int 
  7875 ;;		 -> setMessage@status(2), 
  7876 ;; Auto vars:     Size  Location     Type
  7877 ;;  l               4   14[BANK1 ] unsigned long 
  7878 ;;  rem             4   10[BANK1 ] unsigned long 
  7879 ;;  cp              1   18[BANK1 ] PTR unsigned char 
  7880 ;;		 -> ftoa@buf(17), 
  7881 ;; Return value:  Size  Location     Type
  7882 ;;                  1    wreg      PTR unsigned char 
  7883 ;; Registers used:
  7884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7885 ;; Tracked objects:
  7886 ;;		On entry : 0/0
  7887 ;;		On exit  : 0/0
  7888 ;;		Unchanged: 0/0
  7889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7890 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;Total ram usage:       14 bytes
  7895 ;; Hardware stack levels used:    1
  7896 ;; Hardware stack levels required when called:   10
  7897 ;; This function calls:
  7898 ;;		___ftge
  7899 ;;		___ftmul
  7900 ;;		___ftneg
  7901 ;;		___ftsub
  7902 ;;		___fttol
  7903 ;;		___lltoft
  7904 ;;		_sprintf
  7905 ;; This function is called by:
  7906 ;;		_setMessage
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910                           
  7911                           ;psect for function _ftoa
  7912  0E18                     _ftoa:	
  7913                           
  7914                           ;incstack = 0
  7915                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7916  0E18  3053               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  7917  0E19  0020               	movlb	0	; select bank0
  7918  0E1A  00EF               	movwf	??_ftoa
  7919  0E1B  086F               	movf	??_ftoa,w
  7920  0E1C  0021               	movlb	1	; select bank1
  7921  0E1D  00B2               	movwf	ftoa@cp^(0+128)
  7922  0E1E  0826               	movf	ftoa@f^(0+128),w
  7923  0E1F  0020               	movlb	0	; select bank0
  7924  0E20  00A0               	movwf	___ftge@ff1
  7925  0E21  0021               	movlb	1	; select bank1
  7926  0E22  0827               	movf	(ftoa@f+1)^(0+128),w
  7927  0E23  0020               	movlb	0	; select bank0
  7928  0E24  00A1               	movwf	___ftge@ff1+1
  7929  0E25  0021               	movlb	1	; select bank1
  7930  0E26  0828               	movf	(ftoa@f+2)^(0+128),w
  7931  0E27  0020               	movlb	0	; select bank0
  7932  0E28  00A2               	movwf	___ftge@ff1+2
  7933  0E29  3000               	movlw	0
  7934  0E2A  00A3               	movwf	___ftge@ff2
  7935  0E2B  3000               	movlw	0
  7936  0E2C  00A4               	movwf	___ftge@ff2+1
  7937  0E2D  3000               	movlw	0
  7938  0E2E  00A5               	movwf	___ftge@ff2+2
  7939  0E2F  3195  25E6  318E   	fcall	___ftge
  7940  0E32  1803               	btfsc	3,0
  7941  0E33  2E5E               	goto	l3726
  7942  0E34  302D               	movlw	45
  7943  0E35  0020               	movlb	0	; select bank0
  7944  0E36  00EF               	movwf	??_ftoa
  7945  0E37  0021               	movlb	1	; select bank1
  7946  0E38  0832               	movf	ftoa@cp^(0+128),w
  7947  0E39  0086               	movwf	6
  7948  0E3A  3001               	movlw	1	; select bank2/3
  7949  0E3B  0087               	movwf	7
  7950  0E3C  0020               	movlb	0	; select bank0
  7951  0E3D  086F               	movf	??_ftoa,w
  7952  0E3E  0081               	movwf	1
  7953  0E3F  3001               	movlw	1
  7954  0E40  00EF               	movwf	??_ftoa
  7955  0E41  086F               	movf	??_ftoa,w
  7956  0E42  0021               	movlb	1	; select bank1
  7957  0E43  07B2               	addwf	ftoa@cp^(0+128),f
  7958  0E44  0826               	movf	ftoa@f^(0+128),w
  7959  0E45  0020               	movlb	0	; select bank0
  7960  0E46  00D7               	movwf	___ftneg@f1
  7961  0E47  0021               	movlb	1	; select bank1
  7962  0E48  0827               	movf	(ftoa@f+1)^(0+128),w
  7963  0E49  0020               	movlb	0	; select bank0
  7964  0E4A  00D8               	movwf	___ftneg@f1+1
  7965  0E4B  0021               	movlb	1	; select bank1
  7966  0E4C  0828               	movf	(ftoa@f+2)^(0+128),w
  7967  0E4D  0020               	movlb	0	; select bank0
  7968  0E4E  00D9               	movwf	___ftneg@f1+2
  7969  0E4F  3191  21F8  318E   	fcall	___ftneg
  7970  0E52  0020               	movlb	0	; select bank0
  7971  0E53  0857               	movf	?___ftneg,w
  7972  0E54  0021               	movlb	1	; select bank1
  7973  0E55  00A6               	movwf	ftoa@f^(0+128)
  7974  0E56  0020               	movlb	0	; select bank0
  7975  0E57  0858               	movf	?___ftneg+1,w
  7976  0E58  0021               	movlb	1	; select bank1
  7977  0E59  00A7               	movwf	(ftoa@f+1)^(0+128)
  7978  0E5A  0020               	movlb	0	; select bank0
  7979  0E5B  0859               	movf	?___ftneg+2,w
  7980  0E5C  0021               	movlb	1	; select bank1
  7981  0E5D  00A8               	movwf	(ftoa@f+2)^(0+128)
  7982  0E5E                     l3726:	
  7983  0E5E  0021               	movlb	1	; select bank1
  7984  0E5F  0826               	movf	ftoa@f^(0+128),w
  7985  0E60  0020               	movlb	0	; select bank0
  7986  0E61  00E7               	movwf	___fttol@f1
  7987  0E62  0021               	movlb	1	; select bank1
  7988  0E63  0827               	movf	(ftoa@f+1)^(0+128),w
  7989  0E64  0020               	movlb	0	; select bank0
  7990  0E65  00E8               	movwf	___fttol@f1+1
  7991  0E66  0021               	movlb	1	; select bank1
  7992  0E67  0828               	movf	(ftoa@f+2)^(0+128),w
  7993  0E68  0020               	movlb	0	; select bank0
  7994  0E69  00E9               	movwf	___fttol@f1+2
  7995  0E6A  318A  22AA  318E   	fcall	___fttol
  7996  0E6D  0020               	movlb	0	; select bank0
  7997  0E6E  086A               	movf	?___fttol+3,w
  7998  0E6F  0021               	movlb	1	; select bank1
  7999  0E70  00B1               	movwf	(ftoa@l+3)^(0+128)
  8000  0E71  0020               	movlb	0	; select bank0
  8001  0E72  0869               	movf	?___fttol+2,w
  8002  0E73  0021               	movlb	1	; select bank1
  8003  0E74  00B0               	movwf	(ftoa@l+2)^(0+128)
  8004  0E75  0020               	movlb	0	; select bank0
  8005  0E76  0868               	movf	?___fttol+1,w
  8006  0E77  0021               	movlb	1	; select bank1
  8007  0E78  00AF               	movwf	(ftoa@l+1)^(0+128)
  8008  0E79  0020               	movlb	0	; select bank0
  8009  0E7A  0867               	movf	?___fttol,w
  8010  0E7B  0021               	movlb	1	; select bank1
  8011  0E7C  00AE               	movwf	ftoa@l^(0+128)
  8012  0E7D  0831               	movf	(ftoa@l+3)^(0+128),w
  8013  0E7E  0020               	movlb	0	; select bank0
  8014  0E7F  00AB               	movwf	___lltoft@c+3
  8015  0E80  0021               	movlb	1	; select bank1
  8016  0E81  0830               	movf	(ftoa@l+2)^(0+128),w
  8017  0E82  0020               	movlb	0	; select bank0
  8018  0E83  00AA               	movwf	___lltoft@c+2
  8019  0E84  0021               	movlb	1	; select bank1
  8020  0E85  082F               	movf	(ftoa@l+1)^(0+128),w
  8021  0E86  0020               	movlb	0	; select bank0
  8022  0E87  00A9               	movwf	___lltoft@c+1
  8023  0E88  0021               	movlb	1	; select bank1
  8024  0E89  082E               	movf	ftoa@l^(0+128),w
  8025  0E8A  0020               	movlb	0	; select bank0
  8026  0E8B  00A8               	movwf	___lltoft@c
  8027  0E8C  3194  2499  318E   	fcall	___lltoft
  8028  0E8F  0020               	movlb	0	; select bank0
  8029  0E90  0828               	movf	?___lltoft,w
  8030  0E91  00BB               	movwf	___ftsub@f2
  8031  0E92  0829               	movf	?___lltoft+1,w
  8032  0E93  00BC               	movwf	___ftsub@f2+1
  8033  0E94  082A               	movf	?___lltoft+2,w
  8034  0E95  00BD               	movwf	___ftsub@f2+2
  8035  0E96  0021               	movlb	1	; select bank1
  8036  0E97  0826               	movf	ftoa@f^(0+128),w
  8037  0E98  0020               	movlb	0	; select bank0
  8038  0E99  00BE               	movwf	___ftsub@f1
  8039  0E9A  0021               	movlb	1	; select bank1
  8040  0E9B  0827               	movf	(ftoa@f+1)^(0+128),w
  8041  0E9C  0020               	movlb	0	; select bank0
  8042  0E9D  00BF               	movwf	___ftsub@f1+1
  8043  0E9E  0021               	movlb	1	; select bank1
  8044  0E9F  0828               	movf	(ftoa@f+2)^(0+128),w
  8045  0EA0  0020               	movlb	0	; select bank0
  8046  0EA1  00C0               	movwf	___ftsub@f1+2
  8047  0EA2  3193  2354  318E   	fcall	___ftsub
  8048  0EA5  0020               	movlb	0	; select bank0
  8049  0EA6  083B               	movf	?___ftsub,w
  8050  0EA7  0021               	movlb	1	; select bank1
  8051  0EA8  00A6               	movwf	ftoa@f^(0+128)
  8052  0EA9  0020               	movlb	0	; select bank0
  8053  0EAA  083C               	movf	?___ftsub+1,w
  8054  0EAB  0021               	movlb	1	; select bank1
  8055  0EAC  00A7               	movwf	(ftoa@f+1)^(0+128)
  8056  0EAD  0020               	movlb	0	; select bank0
  8057  0EAE  083D               	movf	?___ftsub+2,w
  8058  0EAF  0021               	movlb	1	; select bank1
  8059  0EB0  00A8               	movwf	(ftoa@f+2)^(0+128)
  8060  0EB1  0826               	movf	ftoa@f^(0+128),w
  8061  0EB2  0020               	movlb	0	; select bank0
  8062  0EB3  00DA               	movwf	___ftmul@f2
  8063  0EB4  0021               	movlb	1	; select bank1
  8064  0EB5  0827               	movf	(ftoa@f+1)^(0+128),w
  8065  0EB6  0020               	movlb	0	; select bank0
  8066  0EB7  00DB               	movwf	___ftmul@f2+1
  8067  0EB8  0021               	movlb	1	; select bank1
  8068  0EB9  0828               	movf	(ftoa@f+2)^(0+128),w
  8069  0EBA  0020               	movlb	0	; select bank0
  8070  0EBB  00DC               	movwf	___ftmul@f2+2
  8071  0EBC  3024               	movlw	36
  8072  0EBD  00D7               	movwf	___ftmul@f1
  8073  0EBE  3074               	movlw	116
  8074  0EBF  00D8               	movwf	___ftmul@f1+1
  8075  0EC0  3049               	movlw	73
  8076  0EC1  00D9               	movwf	___ftmul@f1+2
  8077  0EC2  318C  249A  318E   	fcall	___ftmul
  8078  0EC5  0020               	movlb	0	; select bank0
  8079  0EC6  0857               	movf	?___ftmul,w
  8080  0EC7  00E7               	movwf	___fttol@f1
  8081  0EC8  0858               	movf	?___ftmul+1,w
  8082  0EC9  00E8               	movwf	___fttol@f1+1
  8083  0ECA  0859               	movf	?___ftmul+2,w
  8084  0ECB  00E9               	movwf	___fttol@f1+2
  8085  0ECC  318A  22AA  318E   	fcall	___fttol
  8086  0ECF  0020               	movlb	0	; select bank0
  8087  0ED0  086A               	movf	?___fttol+3,w
  8088  0ED1  0021               	movlb	1	; select bank1
  8089  0ED2  00AD               	movwf	(ftoa@rem+3)^(0+128)
  8090  0ED3  0020               	movlb	0	; select bank0
  8091  0ED4  0869               	movf	?___fttol+2,w
  8092  0ED5  0021               	movlb	1	; select bank1
  8093  0ED6  00AC               	movwf	(ftoa@rem+2)^(0+128)
  8094  0ED7  0020               	movlb	0	; select bank0
  8095  0ED8  0868               	movf	?___fttol+1,w
  8096  0ED9  0021               	movlb	1	; select bank1
  8097  0EDA  00AB               	movwf	(ftoa@rem+1)^(0+128)
  8098  0EDB  0020               	movlb	0	; select bank0
  8099  0EDC  0867               	movf	?___fttol,w
  8100  0EDD  0021               	movlb	1	; select bank1
  8101  0EDE  00AA               	movwf	ftoa@rem^(0+128)
  8102  0EDF  3029               	movlw	low (STR_13| (0+32768))
  8103  0EE0  0020               	movlb	0	; select bank0
  8104  0EE1  00B8               	movwf	sprintf@f
  8105  0EE2  3098               	movlw	high (STR_13| (0+32768))
  8106  0EE3  00B9               	movwf	sprintf@f+1
  8107  0EE4  0021               	movlb	1	; select bank1
  8108  0EE5  0831               	movf	(ftoa@l+3)^(0+128),w
  8109  0EE6  0020               	movlb	0	; select bank0
  8110  0EE7  00BD               	movwf	?_sprintf+5
  8111  0EE8  0021               	movlb	1	; select bank1
  8112  0EE9  0830               	movf	(ftoa@l+2)^(0+128),w
  8113  0EEA  0020               	movlb	0	; select bank0
  8114  0EEB  00BC               	movwf	?_sprintf+4
  8115  0EEC  0021               	movlb	1	; select bank1
  8116  0EED  082F               	movf	(ftoa@l+1)^(0+128),w
  8117  0EEE  0020               	movlb	0	; select bank0
  8118  0EEF  00BB               	movwf	?_sprintf+3
  8119  0EF0  0021               	movlb	1	; select bank1
  8120  0EF1  082E               	movf	ftoa@l^(0+128),w
  8121  0EF2  0020               	movlb	0	; select bank0
  8122  0EF3  00BA               	movwf	?_sprintf+2
  8123  0EF4  0021               	movlb	1	; select bank1
  8124  0EF5  082D               	movf	(ftoa@rem+3)^(0+128),w
  8125  0EF6  0020               	movlb	0	; select bank0
  8126  0EF7  00C1               	movwf	?_sprintf+9
  8127  0EF8  0021               	movlb	1	; select bank1
  8128  0EF9  082C               	movf	(ftoa@rem+2)^(0+128),w
  8129  0EFA  0020               	movlb	0	; select bank0
  8130  0EFB  00C0               	movwf	?_sprintf+8
  8131  0EFC  0021               	movlb	1	; select bank1
  8132  0EFD  082B               	movf	(ftoa@rem+1)^(0+128),w
  8133  0EFE  0020               	movlb	0	; select bank0
  8134  0EFF  00BF               	movwf	?_sprintf+7
  8135  0F00  0021               	movlb	1	; select bank1
  8136  0F01  082A               	movf	ftoa@rem^(0+128),w
  8137  0F02  0020               	movlb	0	; select bank0
  8138  0F03  00BE               	movwf	?_sprintf+6
  8139  0F04  0021               	movlb	1	; select bank1
  8140  0F05  0832               	movf	ftoa@cp^(0+128),w
  8141  0F06  3182  22F6         	fcall	_sprintf
  8142  0F08  3053               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  8143  0F09  0008               	return
  8144  0F0A                     __end_of_ftoa:	
  8145                           
  8146                           	psect	text31
  8147  02F6                     __ptext31:	
  8148 ;; *************** function _sprintf *****************
  8149 ;; Defined at:
  8150 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  8151 ;; Parameters:    Size  Location     Type
  8152 ;;  sp              1    wreg     PTR unsigned char 
  8153 ;;		 -> ftoa@buf(17), 
  8154 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  8155 ;;		 -> STR_13(11), 
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  8158 ;;		 -> ftoa@buf(17), 
  8159 ;;  val             4   42[BANK0 ] unsigned long 
  8160 ;;  tmpval          4    0        struct .
  8161 ;;  prec            2   49[BANK0 ] int 
  8162 ;;  width           2   47[BANK0 ] int 
  8163 ;;  cp              2    0        PTR const unsigned char 
  8164 ;;  len             2    0        unsigned int 
  8165 ;;  c               1   51[BANK0 ] unsigned char 
  8166 ;;  ap              1   41[BANK0 ] PTR void [1]
  8167 ;;		 -> ?_sprintf(2), 
  8168 ;;  flag            1   40[BANK0 ] unsigned char 
  8169 ;; Return value:  Size  Location     Type
  8170 ;;                  2   24[BANK0 ] int 
  8171 ;; Registers used:
  8172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8173 ;; Tracked objects:
  8174 ;;		On entry : 0/0
  8175 ;;		On exit  : 0/0
  8176 ;;		Unchanged: 0/0
  8177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8178 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8182 ;;Total ram usage:       28 bytes
  8183 ;; Hardware stack levels used:    1
  8184 ;; Hardware stack levels required when called:    8
  8185 ;; This function calls:
  8186 ;;		___lldiv
  8187 ;;		___llmod
  8188 ;;		___wmul
  8189 ;;		_isdigit
  8190 ;; This function is called by:
  8191 ;;		_ftoa
  8192 ;; This function uses a non-reentrant model
  8193 ;;
  8194                           
  8195                           
  8196                           ;psect for function _sprintf
  8197  02F6                     _sprintf:	
  8198                           
  8199                           ;incstack = 0
  8200                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8201                           ;sprintf@sp stored from wreg
  8202  02F6  0020               	movlb	0	; select bank0
  8203  02F7  00CE               	movwf	sprintf@sp
  8204                           
  8205                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  8206  02F8  303A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  8207  02F9  00C2               	movwf	??_sprintf
  8208  02FA  0842               	movf	??_sprintf,w
  8209  02FB  00C9               	movwf	sprintf@ap
  8210  02FC                     l3598:	
  8211                           ;doprnt.c: 548: while((c = *f++)) {
  8212                           
  8213  02FC  0839               	movf	sprintf@f+1,w
  8214  02FD  00C3               	movwf	??_sprintf+1
  8215  02FE  0838               	movf	sprintf@f,w
  8216  02FF  00C2               	movwf	??_sprintf
  8217  0300  0AB8               	incf	sprintf@f,f
  8218  0301  1903               	skipnz
  8219  0302  0AB9               	incf	sprintf@f+1,f
  8220  0303  0842               	movf	??_sprintf,w
  8221  0304  0084               	movwf	4
  8222  0305  0843               	movf	??_sprintf+1,w
  8223  0306  0085               	movwf	5
  8224  0307  0800               	movf	0,w	;code access
  8225  0308  00C4               	movwf	??_sprintf+2
  8226  0309  0844               	movf	??_sprintf+2,w
  8227  030A  00D3               	movwf	sprintf@c
  8228  030B  0853               	movf	sprintf@c,w
  8229  030C  1903               	btfsc	3,2
  8230  030D  2CBD               	goto	l3600
  8231                           
  8232                           ;doprnt.c: 550: if(c != '%')
  8233  030E  3025               	movlw	37
  8234  030F  0653               	xorwf	sprintf@c,w
  8235  0310  1903               	btfsc	3,2
  8236  0311  2B1F               	goto	l3510
  8237                           
  8238                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  8239  0312  0853               	movf	sprintf@c,w
  8240  0313  00C2               	movwf	??_sprintf
  8241  0314  084E               	movf	sprintf@sp,w
  8242  0315  0086               	movwf	6
  8243  0316  3001               	movlw	1	; select bank2/3
  8244  0317  0087               	movwf	7
  8245  0318  0842               	movf	??_sprintf,w
  8246  0319  0081               	movwf	1
  8247  031A  3001               	movlw	1
  8248  031B  00C2               	movwf	??_sprintf
  8249  031C  0842               	movf	??_sprintf,w
  8250  031D  07CE               	addwf	sprintf@sp,f
  8251                           
  8252                           ;doprnt.c: 554: continue;
  8253  031E  2AFC               	goto	l3598
  8254  031F                     l3510:	
  8255                           
  8256                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  8257  031F  01CF               	clrf	sprintf@width
  8258  0320  01D0               	clrf	sprintf@width+1
  8259                           
  8260                           ;doprnt.c: 560: flag = 0;
  8261  0321  01C8               	clrf	sprintf@flag
  8262                           
  8263                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  8264  0322  0838               	movf	sprintf@f,w
  8265  0323  0084               	movwf	4
  8266  0324  0839               	movf	sprintf@f+1,w
  8267  0325  0085               	movwf	5
  8268  0326  0800               	movf	0,w	;code access
  8269  0327  3192  220E  3182   	fcall	_isdigit
  8270  032A  1C03               	btfss	3,0
  8271  032B  2B5D               	goto	l3524
  8272                           
  8273                           ;doprnt.c: 610: width = 0;
  8274  032C  0020               	movlb	0	; select bank0
  8275  032D  01CF               	clrf	sprintf@width
  8276  032E  01D0               	clrf	sprintf@width+1
  8277  032F                     l3516:	
  8278                           ;doprnt.c: 611: do {
  8279                           
  8280                           
  8281                           ;doprnt.c: 612: width *= 10;
  8282  032F  300A               	movlw	10
  8283  0330  0020               	movlb	0	; select bank0
  8284  0331  00A0               	movwf	___wmul@multiplier
  8285  0332  3000               	movlw	0
  8286  0333  00A1               	movwf	___wmul@multiplier+1
  8287  0334  0850               	movf	sprintf@width+1,w
  8288  0335  00A3               	movwf	___wmul@multiplicand+1
  8289  0336  084F               	movf	sprintf@width,w
  8290  0337  00A2               	movwf	___wmul@multiplicand
  8291  0338  3193  231C  3182   	fcall	___wmul
  8292  033B  0020               	movlb	0	; select bank0
  8293  033C  0821               	movf	?___wmul+1,w
  8294  033D  00D0               	movwf	sprintf@width+1
  8295  033E  0820               	movf	?___wmul,w
  8296  033F  00CF               	movwf	sprintf@width
  8297                           
  8298                           ;doprnt.c: 613: width += *f++ - '0';
  8299  0340  0838               	movf	sprintf@f,w
  8300  0341  0084               	movwf	4
  8301  0342  0839               	movf	sprintf@f+1,w
  8302  0343  0085               	movwf	5
  8303  0344  0800               	movf	0,w	;code access
  8304  0345  3ED0               	addlw	208
  8305  0346  00C2               	movwf	??_sprintf
  8306  0347  30FF               	movlw	255
  8307  0348  1803               	skipnc
  8308  0349  3000               	movlw	0
  8309  034A  00C3               	movwf	??_sprintf+1
  8310  034B  0842               	movf	??_sprintf,w
  8311  034C  07CF               	addwf	sprintf@width,f
  8312  034D  0843               	movf	??_sprintf+1,w
  8313  034E  3DD0               	addwfc	sprintf@width+1,f
  8314  034F  3001               	movlw	1
  8315  0350  07B8               	addwf	sprintf@f,f
  8316  0351  3000               	movlw	0
  8317  0352  3DB9               	addwfc	sprintf@f+1,f
  8318                           
  8319                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  8320  0353  0838               	movf	sprintf@f,w
  8321  0354  0084               	movwf	4
  8322  0355  0839               	movf	sprintf@f+1,w
  8323  0356  0085               	movwf	5
  8324  0357  0800               	movf	0,w	;code access
  8325  0358  3192  220E  3182   	fcall	_isdigit
  8326  035B  1803               	btfsc	3,0
  8327  035C  2B2F               	goto	l3516
  8328  035D                     l3524:	
  8329                           
  8330                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  8331  035D  0020               	movlb	0	; select bank0
  8332  035E  0838               	movf	sprintf@f,w
  8333  035F  0084               	movwf	4
  8334  0360  0839               	movf	sprintf@f+1,w
  8335  0361  0085               	movwf	5
  8336  0362  0012               	moviw fsr0++
  8337  0363  3A2E               	xorlw	46
  8338  0364  1D03               	btfss	3,2
  8339  0365  2B9B               	goto	l3536
  8340                           
  8341                           ;doprnt.c: 625: f++;
  8342  0366  3001               	movlw	1
  8343  0367  07B8               	addwf	sprintf@f,f
  8344  0368  3000               	movlw	0
  8345  0369  3DB9               	addwfc	sprintf@f+1,f
  8346                           
  8347                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  8348  036A  01D1               	clrf	sprintf@prec
  8349  036B  01D2               	clrf	sprintf@prec+1
  8350  036C                     l3534:	
  8351                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  8352                           
  8353  036C  0838               	movf	sprintf@f,w
  8354  036D  0084               	movwf	4
  8355  036E  0839               	movf	sprintf@f+1,w
  8356  036F  0085               	movwf	5
  8357  0370  0800               	movf	0,w	;code access
  8358  0371  3192  220E  3182   	fcall	_isdigit
  8359  0374  1C03               	btfss	3,0
  8360  0375  2BA6               	goto	l3542
  8361                           
  8362                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  8363  0376  0020               	movlb	0	; select bank0
  8364  0377  0838               	movf	sprintf@f,w
  8365  0378  0084               	movwf	4
  8366  0379  0839               	movf	sprintf@f+1,w
  8367  037A  0085               	movwf	5
  8368  037B  0800               	movf	0,w	;code access
  8369  037C  00C2               	movwf	??_sprintf
  8370  037D  01C3               	clrf	??_sprintf+1
  8371  037E  0852               	movf	sprintf@prec+1,w
  8372  037F  00A1               	movwf	___wmul@multiplier+1
  8373  0380  0851               	movf	sprintf@prec,w
  8374  0381  00A0               	movwf	___wmul@multiplier
  8375  0382  300A               	movlw	10
  8376  0383  00A2               	movwf	___wmul@multiplicand
  8377  0384  3000               	movlw	0
  8378  0385  00A3               	movwf	___wmul@multiplicand+1
  8379  0386  3193  231C  3182   	fcall	___wmul
  8380  0389  0020               	movlb	0	; select bank0
  8381  038A  0842               	movf	??_sprintf,w
  8382  038B  0720               	addwf	?___wmul,w
  8383  038C  00C4               	movwf	??_sprintf+2
  8384  038D  0843               	movf	??_sprintf+1,w
  8385  038E  3D21               	addwfc	?___wmul+1,w
  8386  038F  00C5               	movwf	??_sprintf+3
  8387  0390  0844               	movf	??_sprintf+2,w
  8388  0391  3ED0               	addlw	208
  8389  0392  00D1               	movwf	sprintf@prec
  8390  0393  30FF               	movlw	255
  8391  0394  3D45               	addwfc	??_sprintf+3,w
  8392  0395  00D2               	movwf	sprintf@prec+1
  8393  0396  3001               	movlw	1
  8394  0397  07B8               	addwf	sprintf@f,f
  8395  0398  3000               	movlw	0
  8396  0399  3DB9               	addwfc	sprintf@f+1,f
  8397  039A  2B6C               	goto	l3534
  8398  039B                     l3536:	
  8399                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  8400                           
  8401                           
  8402                           ;doprnt.c: 645: prec = 0;
  8403  039B  0020               	movlb	0	; select bank0
  8404  039C  01D1               	clrf	sprintf@prec
  8405  039D  01D2               	clrf	sprintf@prec+1
  8406                           
  8407                           ;doprnt.c: 654: switch(c = *f++) {
  8408                           
  8409                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  8410  039E  2BA6               	goto	l3542
  8411  039F                     l464:	
  8412                           ;doprnt.c: 660: case 'l':
  8413                           
  8414                           ;doprnt.c: 657: goto alldone;
  8415                           
  8416                           ;doprnt.c: 656: case 0:
  8417                           
  8418                           
  8419                           ;doprnt.c: 662: flag |= 0x10;
  8420  039F  1648               	bsf	sprintf@flag,4
  8421                           
  8422                           ;doprnt.c: 663: goto loop;
  8423  03A0  2BA6               	goto	l3542
  8424  03A1                     l3538:	
  8425                           ;doprnt.c: 836: case 'u':
  8426                           
  8427                           ;doprnt.c: 832: continue;
  8428                           
  8429                           ;doprnt.c: 821: default:
  8430                           
  8431                           
  8432                           ;doprnt.c: 837: flag |= 0xC0;
  8433  03A1  30C0               	movlw	192
  8434  03A2  00C2               	movwf	??_sprintf
  8435  03A3  0842               	movf	??_sprintf,w
  8436  03A4  04C8               	iorwf	sprintf@flag,f
  8437                           
  8438                           ;doprnt.c: 841: }
  8439                           
  8440                           ;doprnt.c: 838: break;
  8441  03A5  2BBE               	goto	l467
  8442  03A6                     l3542:	
  8443  03A6  0020               	movlb	0	; select bank0
  8444  03A7  0839               	movf	sprintf@f+1,w
  8445  03A8  00C3               	movwf	??_sprintf+1
  8446  03A9  0838               	movf	sprintf@f,w
  8447  03AA  00C2               	movwf	??_sprintf
  8448  03AB  0AB8               	incf	sprintf@f,f
  8449  03AC  1903               	skipnz
  8450  03AD  0AB9               	incf	sprintf@f+1,f
  8451  03AE  0842               	movf	??_sprintf,w
  8452  03AF  0084               	movwf	4
  8453  03B0  0843               	movf	??_sprintf+1,w
  8454  03B1  0085               	movwf	5
  8455  03B2  0800               	movf	0,w	;code access
  8456  03B3  00D3               	movwf	sprintf@c
  8457                           
  8458                           ; Switch size 1, requested type "space"
  8459                           ; Number of cases is 3, Range of values is 0 to 117
  8460                           ; switch strategies available:
  8461                           ; Name         Instructions Cycles
  8462                           ; simple_byte           10     6 (average)
  8463                           ; direct_byte          242     6 (fixed)
  8464                           ; jumptable            260     6 (fixed)
  8465                           ;	Chosen strategy is simple_byte
  8466  03B4  3A00               	xorlw	0	; case 0
  8467  03B5  1903               	skipnz
  8468  03B6  2CBD               	goto	l3600
  8469  03B7  3A6C               	xorlw	108	; case 108
  8470  03B8  1903               	skipnz
  8471  03B9  2B9F               	goto	l464
  8472  03BA  3A19               	xorlw	25	; case 117
  8473  03BB  1903               	skipnz
  8474  03BC  2BA1               	goto	l3538
  8475  03BD  2AFC               	goto	l3598
  8476  03BE                     l467:	
  8477                           
  8478                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  8479  03BE  1E48               	btfss	sprintf@flag,4
  8480  03BF  2BCD               	goto	l3548
  8481                           
  8482                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  8483  03C0  0849               	movf	sprintf@ap,w
  8484  03C1  0086               	movwf	6
  8485  03C2  0187               	clrf	7
  8486  03C3  3F40               	moviw [0]fsr1
  8487  03C4  00CA               	movwf	sprintf@val
  8488  03C5  3F41               	moviw [1]fsr1
  8489  03C6  00CB               	movwf	sprintf@val+1
  8490  03C7  3F42               	moviw [2]fsr1
  8491  03C8  00CC               	movwf	sprintf@val+2
  8492  03C9  3F43               	moviw [3]fsr1
  8493  03CA  00CD               	movwf	sprintf@val+3
  8494  03CB  3004               	movlw	4
  8495  03CC  2BDB               	goto	L3
  8496  03CD                     l3548:	
  8497                           
  8498                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  8499  03CD  0849               	movf	sprintf@ap,w
  8500  03CE  0086               	movwf	6
  8501  03CF  0187               	clrf	7
  8502  03D0  3F40               	moviw [0]fsr1
  8503  03D1  00C2               	movwf	??_sprintf
  8504  03D2  3F41               	moviw [1]fsr1
  8505  03D3  00C3               	movwf	??_sprintf+1
  8506  03D4  0842               	movf	??_sprintf,w
  8507  03D5  00CA               	movwf	sprintf@val
  8508  03D6  0843               	movf	??_sprintf+1,w
  8509  03D7  00CB               	movwf	sprintf@val+1
  8510  03D8  01CC               	clrf	sprintf@val+2
  8511  03D9  01CD               	clrf	sprintf@val+3
  8512  03DA  3002               	movlw	2
  8513  03DB                     L3:	
  8514  03DB  00C2               	movwf	??_sprintf
  8515  03DC  0842               	movf	??_sprintf,w
  8516  03DD  07C9               	addwf	sprintf@ap,f
  8517                           
  8518                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  8519  03DE  0851               	movf	sprintf@prec,w
  8520  03DF  0452               	iorwf	sprintf@prec+1,w
  8521  03E0  1D03               	btfss	3,2
  8522  03E1  2BEC               	goto	l3558
  8523  03E2  084D               	movf	sprintf@val+3,w
  8524  03E3  044C               	iorwf	sprintf@val+2,w
  8525  03E4  044B               	iorwf	sprintf@val+1,w
  8526  03E5  044A               	iorwf	sprintf@val,w
  8527  03E6  1D03               	skipz
  8528  03E7  2BEC               	goto	l3558
  8529                           
  8530                           ;doprnt.c: 1310: prec++;
  8531  03E8  3001               	movlw	1
  8532  03E9  07D1               	addwf	sprintf@prec,f
  8533  03EA  3000               	movlw	0
  8534  03EB  3DD2               	addwfc	sprintf@prec+1,f
  8535  03EC                     l3558:	
  8536                           
  8537                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8538  03EC  01D3               	clrf	sprintf@c
  8539  03ED  0AD3               	incf	sprintf@c,f
  8540  03EE  300A               	movlw	10
  8541  03EF  0653               	xorwf	sprintf@c,w
  8542  03F0  1903               	btfsc	3,2
  8543  03F1  2C1F               	goto	l3570
  8544  03F2                     l3564:	
  8545                           
  8546                           ;doprnt.c: 1325: if(val < dpowers[c])
  8547  03F2  0853               	movf	sprintf@c,w
  8548  03F3  00C2               	movwf	??_sprintf
  8549  03F4  01C3               	clrf	??_sprintf+1
  8550  03F5  35C2               	lslf	??_sprintf,f
  8551  03F6  0DC3               	rlf	??_sprintf+1,f
  8552  03F7  35C2               	lslf	??_sprintf,f
  8553  03F8  0DC3               	rlf	??_sprintf+1,f
  8554  03F9  3000               	movlw	low (_dpowers| (0+32768))
  8555  03FA  0742               	addwf	??_sprintf,w
  8556  03FB  0084               	movwf	4
  8557  03FC  3098               	movlw	high (_dpowers| (0+32768))
  8558  03FD  3D43               	addwfc	??_sprintf+1,w
  8559  03FE  0085               	movwf	5
  8560  03FF  3F00               	moviw [0]fsr0
  8561  0400  00C4               	movwf	??_sprintf+2
  8562  0401  3F01               	moviw [1]fsr0
  8563  0402  00C5               	movwf	??_sprintf+3
  8564  0403  3F02               	moviw [2]fsr0
  8565  0404  00C6               	movwf	??_sprintf+4
  8566  0405  3F03               	moviw [3]fsr0
  8567  0406  00C7               	movwf	??_sprintf+5
  8568  0407  0847               	movf	??_sprintf+5,w
  8569  0408  024D               	subwf	sprintf@val+3,w
  8570  0409  1D03               	skipz
  8571  040A  2C15               	goto	u3935
  8572  040B  0846               	movf	??_sprintf+4,w
  8573  040C  024C               	subwf	sprintf@val+2,w
  8574  040D  1D03               	skipz
  8575  040E  2C15               	goto	u3935
  8576  040F  0845               	movf	??_sprintf+3,w
  8577  0410  024B               	subwf	sprintf@val+1,w
  8578  0411  1D03               	skipz
  8579  0412  2C15               	goto	u3935
  8580  0413  0844               	movf	??_sprintf+2,w
  8581  0414  024A               	subwf	sprintf@val,w
  8582  0415                     u3935:	
  8583  0415  1C03               	btfss	3,0
  8584  0416  2C1F               	goto	l3570
  8585                           
  8586                           ;doprnt.c: 1326: break;
  8587  0417  3001               	movlw	1
  8588  0418  00C2               	movwf	??_sprintf
  8589  0419  0842               	movf	??_sprintf,w
  8590  041A  07D3               	addwf	sprintf@c,f
  8591  041B  300A               	movlw	10
  8592  041C  0653               	xorwf	sprintf@c,w
  8593  041D  1D03               	btfss	3,2
  8594  041E  2BF2               	goto	l3564
  8595  041F                     l3570:	
  8596                           
  8597                           ;doprnt.c: 1358: if(c < prec)
  8598  041F  0852               	movf	sprintf@prec+1,w
  8599  0420  3A80               	xorlw	128
  8600  0421  3C80               	sublw	128
  8601  0422  1D03               	skipz
  8602  0423  2C26               	goto	u3955
  8603  0424  0851               	movf	sprintf@prec,w
  8604  0425  0253               	subwf	sprintf@c,w
  8605  0426                     u3955:	
  8606  0426  1803               	skipnc
  8607  0427  2C2E               	goto	l3574
  8608                           
  8609                           ;doprnt.c: 1359: c = prec;
  8610  0428  0020               	movlb	0	; select bank0
  8611  0429  0851               	movf	sprintf@prec,w
  8612  042A  00C2               	movwf	??_sprintf
  8613  042B  0842               	movf	??_sprintf,w
  8614  042C  00D3               	movwf	sprintf@c
  8615  042D  2C42               	goto	l475
  8616  042E                     l3574:	
  8617                           
  8618                           ;doprnt.c: 1360: else if(prec < c)
  8619  042E  0020               	movlb	0	; select bank0
  8620  042F  0852               	movf	sprintf@prec+1,w
  8621  0430  3A80               	xorlw	128
  8622  0431  00C2               	movwf	??_sprintf
  8623  0432  3080               	movlw	128
  8624  0433  0242               	subwf	??_sprintf,w
  8625  0434  1D03               	skipz
  8626  0435  2C38               	goto	u3965
  8627  0436  0853               	movf	sprintf@c,w
  8628  0437  0251               	subwf	sprintf@prec,w
  8629  0438                     u3965:	
  8630  0438  1803               	skipnc
  8631  0439  2C42               	goto	l475
  8632                           
  8633                           ;doprnt.c: 1361: prec = c;
  8634  043A  0020               	movlb	0	; select bank0
  8635  043B  0853               	movf	sprintf@c,w
  8636  043C  00C2               	movwf	??_sprintf
  8637  043D  01C3               	clrf	??_sprintf+1
  8638  043E  0842               	movf	??_sprintf,w
  8639  043F  00D1               	movwf	sprintf@prec
  8640  0440  0843               	movf	??_sprintf+1,w
  8641  0441  00D2               	movwf	sprintf@prec+1
  8642  0442                     l475:	
  8643                           
  8644                           ;doprnt.c: 1400: if(width > c)
  8645  0442  0020               	movlb	0	; select bank0
  8646  0443  0850               	movf	sprintf@width+1,w
  8647  0444  3A80               	xorlw	128
  8648  0445  3C80               	sublw	128
  8649  0446  1D03               	skipz
  8650  0447  2C4A               	goto	u3975
  8651  0448  084F               	movf	sprintf@width,w
  8652  0449  0253               	subwf	sprintf@c,w
  8653  044A                     u3975:	
  8654  044A  1803               	skipnc
  8655  044B  2C55               	goto	l3580
  8656                           
  8657                           ;doprnt.c: 1401: width -= c;
  8658  044C  0020               	movlb	0	; select bank0
  8659  044D  0853               	movf	sprintf@c,w
  8660  044E  00C2               	movwf	??_sprintf
  8661  044F  01C3               	clrf	??_sprintf+1
  8662  0450  0842               	movf	??_sprintf,w
  8663  0451  02CF               	subwf	sprintf@width,f
  8664  0452  0843               	movf	??_sprintf+1,w
  8665  0453  3BD0               	subwfb	sprintf@width+1,f
  8666  0454  2C58               	goto	l3582
  8667  0455                     l3580:	
  8668                           
  8669                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  8670  0455  0020               	movlb	0	; select bank0
  8671  0456  01CF               	clrf	sprintf@width
  8672  0457  01D0               	clrf	sprintf@width+1
  8673  0458                     l3582:	
  8674                           
  8675                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  8676  0458  084F               	movf	sprintf@width,w
  8677  0459  0450               	iorwf	sprintf@width+1,w
  8678  045A  1903               	btfsc	3,2
  8679  045B  2CB2               	goto	l3596
  8680                           
  8681                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  8682                           
  8683                           ;doprnt.c: 1448: do
  8684  045C  3020               	movlw	32
  8685  045D  00C2               	movwf	??_sprintf
  8686  045E  084E               	movf	sprintf@sp,w
  8687  045F  0086               	movwf	6
  8688  0460  3001               	movlw	1	; select bank2/3
  8689  0461  0087               	movwf	7
  8690  0462  0842               	movf	??_sprintf,w
  8691  0463  0081               	movwf	1
  8692  0464  3001               	movlw	1
  8693  0465  00C2               	movwf	??_sprintf
  8694  0466  0842               	movf	??_sprintf,w
  8695  0467  07CE               	addwf	sprintf@sp,f
  8696                           
  8697                           ;doprnt.c: 1450: while(--width);
  8698  0468  30FF               	movlw	255
  8699  0469  07CF               	addwf	sprintf@width,f
  8700  046A  30FF               	movlw	255
  8701  046B  3DD0               	addwfc	sprintf@width+1,f
  8702  046C  2C58               	goto	l3582
  8703  046D                     l3590:	
  8704                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  8705                           
  8706                           
  8707                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  8708  046D  3000               	movlw	0
  8709  046E  00B1               	movwf	___llmod@divisor+3
  8710  046F  3000               	movlw	0
  8711  0470  00B0               	movwf	___llmod@divisor+2
  8712  0471  3000               	movlw	0
  8713  0472  00AF               	movwf	___llmod@divisor+1
  8714  0473  300A               	movlw	10
  8715  0474  00AE               	movwf	___llmod@divisor
  8716  0475  0852               	movf	sprintf@prec+1,w
  8717  0476  0085               	movwf	5
  8718  0477  0851               	movf	sprintf@prec,w
  8719  0478  0084               	movwf	4
  8720  0479  3584               	lslf	4,f
  8721  047A  0D85               	rlf	5,f
  8722  047B  3584               	lslf	4,f
  8723  047C  0D85               	rlf	5,f
  8724  047D  3000               	movlw	low (_dpowers| (0+32768))
  8725  047E  0784               	addwf	4,f
  8726  047F  3098               	movlw	high (_dpowers| (0+32768))
  8727  0480  3D85               	addwfc	5,f
  8728  0481  3F00               	moviw [0]fsr0
  8729  0482  00A0               	movwf	___lldiv@divisor
  8730  0483  3F01               	moviw [1]fsr0
  8731  0484  00A1               	movwf	___lldiv@divisor+1
  8732  0485  3F02               	moviw [2]fsr0
  8733  0486  00A2               	movwf	___lldiv@divisor+2
  8734  0487  3F03               	moviw [3]fsr0
  8735  0488  00A3               	movwf	___lldiv@divisor+3
  8736  0489  084D               	movf	sprintf@val+3,w
  8737  048A  00A7               	movwf	___lldiv@dividend+3
  8738  048B  084C               	movf	sprintf@val+2,w
  8739  048C  00A6               	movwf	___lldiv@dividend+2
  8740  048D  084B               	movf	sprintf@val+1,w
  8741  048E  00A5               	movwf	___lldiv@dividend+1
  8742  048F  084A               	movf	sprintf@val,w
  8743  0490  00A4               	movwf	___lldiv@dividend
  8744  0491  3188  20CE  3182   	fcall	___lldiv
  8745  0494  0020               	movlb	0	; select bank0
  8746  0495  0823               	movf	?___lldiv+3,w
  8747  0496  00B5               	movwf	___llmod@dividend+3
  8748  0497  0822               	movf	?___lldiv+2,w
  8749  0498  00B4               	movwf	___llmod@dividend+2
  8750  0499  0821               	movf	?___lldiv+1,w
  8751  049A  00B3               	movwf	___llmod@dividend+1
  8752  049B  0820               	movf	?___lldiv,w
  8753  049C  00B2               	movwf	___llmod@dividend
  8754  049D  3196  269E  3182   	fcall	___llmod
  8755  04A0  0020               	movlb	0	; select bank0
  8756  04A1  082E               	movf	?___llmod,w
  8757  04A2  3E30               	addlw	48
  8758  04A3  00C2               	movwf	??_sprintf
  8759  04A4  0842               	movf	??_sprintf,w
  8760  04A5  00D3               	movwf	sprintf@c
  8761                           
  8762                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  8763  04A6  0853               	movf	sprintf@c,w
  8764  04A7  00C2               	movwf	??_sprintf
  8765  04A8  084E               	movf	sprintf@sp,w
  8766  04A9  0086               	movwf	6
  8767  04AA  3001               	movlw	1	; select bank2/3
  8768  04AB  0087               	movwf	7
  8769  04AC  0842               	movf	??_sprintf,w
  8770  04AD  0081               	movwf	1
  8771  04AE  3001               	movlw	1
  8772  04AF  00C2               	movwf	??_sprintf
  8773  04B0  0842               	movf	??_sprintf,w
  8774  04B1  07CE               	addwf	sprintf@sp,f
  8775  04B2                     l3596:	
  8776  04B2  30FF               	movlw	255
  8777  04B3  07D1               	addwf	sprintf@prec,f
  8778  04B4  30FF               	movlw	255
  8779  04B5  3DD2               	addwfc	sprintf@prec+1,f
  8780  04B6  0A51               	incf	sprintf@prec,w
  8781  04B7  1D03               	skipz
  8782  04B8  2C6D               	goto	l3590
  8783  04B9  0A52               	incf	sprintf@prec+1,w
  8784  04BA  1903               	btfsc	3,2
  8785  04BB  2AFC               	goto	l3598
  8786  04BC  2C6D               	goto	l3590
  8787  04BD                     l3600:	
  8788                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  8789                           
  8790                           
  8791                           ;doprnt.c: 1557: *sp = 0;
  8792  04BD  084E               	movf	sprintf@sp,w
  8793  04BE  0086               	movwf	6
  8794  04BF  3001               	movlw	1	; select bank2/3
  8795  04C0  0087               	movwf	7
  8796  04C1  0181               	clrf	1
  8797  04C2  0008               	return
  8798  04C3                     __end_of_sprintf:	
  8799                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  8800                           
  8801                           
  8802                           	psect	text32
  8803  120E                     __ptext32:	
  8804 ;; *************** function _isdigit *****************
  8805 ;; Defined at:
  8806 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;  c               1    wreg     unsigned char 
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;  c               1    1[BANK0 ] unsigned char 
  8811 ;; Return value:  Size  Location     Type
  8812 ;;		None               void
  8813 ;; Registers used:
  8814 ;;		wreg, status,2, status,0
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/0
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;Total ram usage:        2 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; Hardware stack levels required when called:    7
  8827 ;; This function calls:
  8828 ;;		Nothing
  8829 ;; This function is called by:
  8830 ;;		_sprintf
  8831 ;;		_strtod
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           
  8836                           ;psect for function _isdigit
  8837  120E                     _isdigit:	
  8838                           
  8839                           ;incstack = 0
  8840                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8841                           ;isdigit@c stored from wreg
  8842  120E  0020               	movlb	0	; select bank0
  8843  120F  00A1               	movwf	isdigit@c
  8844  1210  01A0               	clrf	_isdigit$1851
  8845  1211  303A               	movlw	58
  8846  1212  0221               	subwf	isdigit@c,w
  8847  1213  1803               	skipnc
  8848  1214  2A1B               	goto	l2834
  8849  1215  3030               	movlw	48
  8850  1216  0221               	subwf	isdigit@c,w
  8851  1217  1C03               	skipc
  8852  1218  2A1B               	goto	l2834
  8853  1219  01A0               	clrf	_isdigit$1851
  8854  121A  0AA0               	incf	_isdigit$1851,f
  8855  121B                     l2834:	
  8856  121B  0C20               	rrf	_isdigit$1851,w
  8857  121C  0008               	return
  8858  121D                     __end_of_isdigit:	
  8859                           
  8860                           	psect	text33
  8861  131C                     __ptext33:	
  8862 ;; *************** function ___wmul *****************
  8863 ;; Defined at:
  8864 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  8865 ;; Parameters:    Size  Location     Type
  8866 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8867 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8868 ;; Auto vars:     Size  Location     Type
  8869 ;;  product         2    4[BANK0 ] unsigned int 
  8870 ;; Return value:  Size  Location     Type
  8871 ;;                  2    0[BANK0 ] unsigned int 
  8872 ;; Registers used:
  8873 ;;		wreg, status,2, status,0
  8874 ;; Tracked objects:
  8875 ;;		On entry : 0/0
  8876 ;;		On exit  : 0/0
  8877 ;;		Unchanged: 0/0
  8878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8879 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8880 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8883 ;;Total ram usage:        6 bytes
  8884 ;; Hardware stack levels used:    1
  8885 ;; Hardware stack levels required when called:    7
  8886 ;; This function calls:
  8887 ;;		Nothing
  8888 ;; This function is called by:
  8889 ;;		_sprintf
  8890 ;; This function uses a non-reentrant model
  8891 ;;
  8892                           
  8893                           
  8894                           ;psect for function ___wmul
  8895  131C                     ___wmul:	
  8896                           
  8897                           ;incstack = 0
  8898                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8899  131C  0020               	movlb	0	; select bank0
  8900  131D  01A4               	clrf	___wmul@product
  8901  131E  01A5               	clrf	___wmul@product+1
  8902  131F                     l3112:	
  8903  131F  1C20               	btfss	___wmul@multiplier,0
  8904  1320  2B25               	goto	l490
  8905  1321  0822               	movf	___wmul@multiplicand,w
  8906  1322  07A4               	addwf	___wmul@product,f
  8907  1323  0823               	movf	___wmul@multiplicand+1,w
  8908  1324  3DA5               	addwfc	___wmul@product+1,f
  8909  1325                     l490:	
  8910  1325  3001               	movlw	1
  8911  1326                     u3015:	
  8912  1326  35A2               	lslf	___wmul@multiplicand,f
  8913  1327  0DA3               	rlf	___wmul@multiplicand+1,f
  8914  1328  0B89               	decfsz	9,f
  8915  1329  2B26               	goto	u3015
  8916  132A  3001               	movlw	1
  8917  132B                     u3025:	
  8918  132B  36A1               	lsrf	___wmul@multiplier+1,f
  8919  132C  0CA0               	rrf	___wmul@multiplier,f
  8920  132D  0B89               	decfsz	9,f
  8921  132E  2B2B               	goto	u3025
  8922  132F  0820               	movf	___wmul@multiplier,w
  8923  1330  0421               	iorwf	___wmul@multiplier+1,w
  8924  1331  1D03               	btfss	3,2
  8925  1332  2B1F               	goto	l3112
  8926  1333  0825               	movf	___wmul@product+1,w
  8927  1334  00A1               	movwf	?___wmul+1
  8928  1335  0824               	movf	___wmul@product,w
  8929  1336  00A0               	movwf	?___wmul
  8930  1337  0008               	return
  8931  1338                     __end_of___wmul:	
  8932                           
  8933                           	psect	text34
  8934  169E                     __ptext34:	
  8935 ;; *************** function ___llmod *****************
  8936 ;; Defined at:
  8937 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  8938 ;; Parameters:    Size  Location     Type
  8939 ;;  divisor         4   14[BANK0 ] unsigned long 
  8940 ;;  dividend        4   18[BANK0 ] unsigned long 
  8941 ;; Auto vars:     Size  Location     Type
  8942 ;;  counter         1   23[BANK0 ] unsigned char 
  8943 ;; Return value:  Size  Location     Type
  8944 ;;                  4   14[BANK0 ] unsigned long 
  8945 ;; Registers used:
  8946 ;;		wreg, status,2, status,0
  8947 ;; Tracked objects:
  8948 ;;		On entry : 0/0
  8949 ;;		On exit  : 0/0
  8950 ;;		Unchanged: 0/0
  8951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8952 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;Total ram usage:       10 bytes
  8957 ;; Hardware stack levels used:    1
  8958 ;; Hardware stack levels required when called:    7
  8959 ;; This function calls:
  8960 ;;		Nothing
  8961 ;; This function is called by:
  8962 ;;		_sprintf
  8963 ;; This function uses a non-reentrant model
  8964 ;;
  8965                           
  8966                           
  8967                           ;psect for function ___llmod
  8968  169E                     ___llmod:	
  8969                           
  8970                           ;incstack = 0
  8971                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  8972  169E  0020               	movlb	0	; select bank0
  8973  169F  0831               	movf	___llmod@divisor+3,w
  8974  16A0  0430               	iorwf	___llmod@divisor+2,w
  8975  16A1  042F               	iorwf	___llmod@divisor+1,w
  8976  16A2  042E               	iorwf	___llmod@divisor,w
  8977  16A3  1903               	skipnz
  8978  16A4  2ED8               	goto	l3234
  8979  16A5  01B7               	clrf	___llmod@counter
  8980  16A6  0AB7               	incf	___llmod@counter,f
  8981  16A7                     l3224:	
  8982  16A7  1BB1               	btfsc	___llmod@divisor+3,7
  8983  16A8  2EB5               	goto	l3226
  8984  16A9  3001               	movlw	1
  8985  16AA                     u3355:	
  8986  16AA  35AE               	lslf	___llmod@divisor,f
  8987  16AB  0DAF               	rlf	___llmod@divisor+1,f
  8988  16AC  0DB0               	rlf	___llmod@divisor+2,f
  8989  16AD  0DB1               	rlf	___llmod@divisor+3,f
  8990  16AE  0B89               	decfsz	9,f
  8991  16AF  2EAA               	goto	u3355
  8992  16B0  3001               	movlw	1
  8993  16B1  00B6               	movwf	??___llmod
  8994  16B2  0836               	movf	??___llmod,w
  8995  16B3  07B7               	addwf	___llmod@counter,f
  8996  16B4  2EA7               	goto	l3224
  8997  16B5                     l3226:	
  8998  16B5  0831               	movf	___llmod@divisor+3,w
  8999  16B6  0235               	subwf	___llmod@dividend+3,w
  9000  16B7  1D03               	skipz
  9001  16B8  2EC3               	goto	u3375
  9002  16B9  0830               	movf	___llmod@divisor+2,w
  9003  16BA  0234               	subwf	___llmod@dividend+2,w
  9004  16BB  1D03               	skipz
  9005  16BC  2EC3               	goto	u3375
  9006  16BD  082F               	movf	___llmod@divisor+1,w
  9007  16BE  0233               	subwf	___llmod@dividend+1,w
  9008  16BF  1D03               	skipz
  9009  16C0  2EC3               	goto	u3375
  9010  16C1  082E               	movf	___llmod@divisor,w
  9011  16C2  0232               	subwf	___llmod@dividend,w
  9012  16C3                     u3375:	
  9013  16C3  1C03               	skipc
  9014  16C4  2ECD               	goto	l3230
  9015  16C5  082E               	movf	___llmod@divisor,w
  9016  16C6  02B2               	subwf	___llmod@dividend,f
  9017  16C7  082F               	movf	___llmod@divisor+1,w
  9018  16C8  3BB3               	subwfb	___llmod@dividend+1,f
  9019  16C9  0830               	movf	___llmod@divisor+2,w
  9020  16CA  3BB4               	subwfb	___llmod@dividend+2,f
  9021  16CB  0831               	movf	___llmod@divisor+3,w
  9022  16CC  3BB5               	subwfb	___llmod@dividend+3,f
  9023  16CD                     l3230:	
  9024  16CD  3001               	movlw	1
  9025  16CE                     u3385:	
  9026  16CE  36B1               	lsrf	___llmod@divisor+3,f
  9027  16CF  0CB0               	rrf	___llmod@divisor+2,f
  9028  16D0  0CAF               	rrf	___llmod@divisor+1,f
  9029  16D1  0CAE               	rrf	___llmod@divisor,f
  9030  16D2  0B89               	decfsz	9,f
  9031  16D3  2ECE               	goto	u3385
  9032  16D4  3001               	movlw	1
  9033  16D5  02B7               	subwf	___llmod@counter,f
  9034  16D6  1D03               	btfss	3,2
  9035  16D7  2EB5               	goto	l3226
  9036  16D8                     l3234:	
  9037  16D8  0835               	movf	___llmod@dividend+3,w
  9038  16D9  00B1               	movwf	?___llmod+3
  9039  16DA  0834               	movf	___llmod@dividend+2,w
  9040  16DB  00B0               	movwf	?___llmod+2
  9041  16DC  0833               	movf	___llmod@dividend+1,w
  9042  16DD  00AF               	movwf	?___llmod+1
  9043  16DE  0832               	movf	___llmod@dividend,w
  9044  16DF  00AE               	movwf	?___llmod
  9045  16E0  0008               	return
  9046  16E1                     __end_of___llmod:	
  9047                           
  9048                           	psect	text35
  9049  08CE                     __ptext35:	
  9050 ;; *************** function ___lldiv *****************
  9051 ;; Defined at:
  9052 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  9053 ;; Parameters:    Size  Location     Type
  9054 ;;  divisor         4    0[BANK0 ] unsigned long 
  9055 ;;  dividend        4    4[BANK0 ] unsigned long 
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;  quotient        4    9[BANK0 ] unsigned long 
  9058 ;;  counter         1   13[BANK0 ] unsigned char 
  9059 ;; Return value:  Size  Location     Type
  9060 ;;                  4    0[BANK0 ] unsigned long 
  9061 ;; Registers used:
  9062 ;;		wreg, status,2, status,0
  9063 ;; Tracked objects:
  9064 ;;		On entry : 0/0
  9065 ;;		On exit  : 0/0
  9066 ;;		Unchanged: 0/0
  9067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9068 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;Total ram usage:       14 bytes
  9073 ;; Hardware stack levels used:    1
  9074 ;; Hardware stack levels required when called:    7
  9075 ;; This function calls:
  9076 ;;		Nothing
  9077 ;; This function is called by:
  9078 ;;		_sprintf
  9079 ;; This function uses a non-reentrant model
  9080 ;;
  9081                           
  9082                           
  9083                           ;psect for function ___lldiv
  9084  08CE                     ___lldiv:	
  9085                           
  9086                           ;incstack = 0
  9087                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9088  08CE  3000               	movlw	0
  9089  08CF  0020               	movlb	0	; select bank0
  9090  08D0  00AC               	movwf	___lldiv@quotient+3
  9091  08D1  3000               	movlw	0
  9092  08D2  00AB               	movwf	___lldiv@quotient+2
  9093  08D3  3000               	movlw	0
  9094  08D4  00AA               	movwf	___lldiv@quotient+1
  9095  08D5  3000               	movlw	0
  9096  08D6  00A9               	movwf	___lldiv@quotient
  9097  08D7  0823               	movf	___lldiv@divisor+3,w
  9098  08D8  0422               	iorwf	___lldiv@divisor+2,w
  9099  08D9  0421               	iorwf	___lldiv@divisor+1,w
  9100  08DA  0420               	iorwf	___lldiv@divisor,w
  9101  08DB  1903               	skipnz
  9102  08DC  2918               	goto	l3144
  9103  08DD  01AD               	clrf	___lldiv@counter
  9104  08DE  0AAD               	incf	___lldiv@counter,f
  9105  08DF                     l3130:	
  9106  08DF  1BA3               	btfsc	___lldiv@divisor+3,7
  9107  08E0  28ED               	goto	l3132
  9108  08E1  3001               	movlw	1
  9109  08E2                     u3055:	
  9110  08E2  35A0               	lslf	___lldiv@divisor,f
  9111  08E3  0DA1               	rlf	___lldiv@divisor+1,f
  9112  08E4  0DA2               	rlf	___lldiv@divisor+2,f
  9113  08E5  0DA3               	rlf	___lldiv@divisor+3,f
  9114  08E6  0B89               	decfsz	9,f
  9115  08E7  28E2               	goto	u3055
  9116  08E8  3001               	movlw	1
  9117  08E9  00A8               	movwf	??___lldiv
  9118  08EA  0828               	movf	??___lldiv,w
  9119  08EB  07AD               	addwf	___lldiv@counter,f
  9120  08EC  28DF               	goto	l3130
  9121  08ED                     l3132:	
  9122  08ED  3001               	movlw	1
  9123  08EE                     u3075:	
  9124  08EE  35A9               	lslf	___lldiv@quotient,f
  9125  08EF  0DAA               	rlf	___lldiv@quotient+1,f
  9126  08F0  0DAB               	rlf	___lldiv@quotient+2,f
  9127  08F1  0DAC               	rlf	___lldiv@quotient+3,f
  9128  08F2  0B89               	decfsz	9,f
  9129  08F3  28EE               	goto	u3075
  9130  08F4  0823               	movf	___lldiv@divisor+3,w
  9131  08F5  0227               	subwf	___lldiv@dividend+3,w
  9132  08F6  1D03               	skipz
  9133  08F7  2902               	goto	u3085
  9134  08F8  0822               	movf	___lldiv@divisor+2,w
  9135  08F9  0226               	subwf	___lldiv@dividend+2,w
  9136  08FA  1D03               	skipz
  9137  08FB  2902               	goto	u3085
  9138  08FC  0821               	movf	___lldiv@divisor+1,w
  9139  08FD  0225               	subwf	___lldiv@dividend+1,w
  9140  08FE  1D03               	skipz
  9141  08FF  2902               	goto	u3085
  9142  0900  0820               	movf	___lldiv@divisor,w
  9143  0901  0224               	subwf	___lldiv@dividend,w
  9144  0902                     u3085:	
  9145  0902  1C03               	skipc
  9146  0903  290D               	goto	l3140
  9147  0904  0820               	movf	___lldiv@divisor,w
  9148  0905  02A4               	subwf	___lldiv@dividend,f
  9149  0906  0821               	movf	___lldiv@divisor+1,w
  9150  0907  3BA5               	subwfb	___lldiv@dividend+1,f
  9151  0908  0822               	movf	___lldiv@divisor+2,w
  9152  0909  3BA6               	subwfb	___lldiv@dividend+2,f
  9153  090A  0823               	movf	___lldiv@divisor+3,w
  9154  090B  3BA7               	subwfb	___lldiv@dividend+3,f
  9155  090C  1429               	bsf	___lldiv@quotient,0
  9156  090D                     l3140:	
  9157  090D  3001               	movlw	1
  9158  090E                     u3095:	
  9159  090E  36A3               	lsrf	___lldiv@divisor+3,f
  9160  090F  0CA2               	rrf	___lldiv@divisor+2,f
  9161  0910  0CA1               	rrf	___lldiv@divisor+1,f
  9162  0911  0CA0               	rrf	___lldiv@divisor,f
  9163  0912  0B89               	decfsz	9,f
  9164  0913  290E               	goto	u3095
  9165  0914  3001               	movlw	1
  9166  0915  02AD               	subwf	___lldiv@counter,f
  9167  0916  1D03               	btfss	3,2
  9168  0917  28ED               	goto	l3132
  9169  0918                     l3144:	
  9170  0918  082C               	movf	___lldiv@quotient+3,w
  9171  0919  00A3               	movwf	?___lldiv+3
  9172  091A  082B               	movf	___lldiv@quotient+2,w
  9173  091B  00A2               	movwf	?___lldiv+2
  9174  091C  082A               	movf	___lldiv@quotient+1,w
  9175  091D  00A1               	movwf	?___lldiv+1
  9176  091E  0829               	movf	___lldiv@quotient,w
  9177  091F  00A0               	movwf	?___lldiv
  9178  0920  0008               	return
  9179  0921                     __end_of___lldiv:	
  9180                           
  9181                           	psect	text36
  9182  1499                     __ptext36:	
  9183 ;; *************** function ___lltoft *****************
  9184 ;; Defined at:
  9185 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;  c               4    8[BANK0 ] unsigned long 
  9188 ;; Auto vars:     Size  Location     Type
  9189 ;;  exp             1   13[BANK0 ] unsigned char 
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  3    8[BANK0 ] float 
  9192 ;; Registers used:
  9193 ;;		wreg, status,2, status,0, pclath, cstack
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9199 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;Total ram usage:        6 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    8
  9206 ;; This function calls:
  9207 ;;		___ftpack
  9208 ;; This function is called by:
  9209 ;;		_ftoa
  9210 ;; This function uses a non-reentrant model
  9211 ;;
  9212                           
  9213                           
  9214                           ;psect for function ___lltoft
  9215  1499                     ___lltoft:	
  9216                           
  9217                           ;incstack = 0
  9218                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9219  1499  308E               	movlw	142
  9220  149A  0020               	movlb	0	; select bank0
  9221  149B  00AC               	movwf	??___lltoft
  9222  149C  082C               	movf	??___lltoft,w
  9223  149D  00AD               	movwf	___lltoft@exp
  9224  149E                     l3658:	
  9225  149E  30FF               	movlw	255
  9226  149F  052B               	andwf	___lltoft@c+3,w
  9227  14A0  1903               	btfsc	3,2
  9228  14A1  2CAE               	goto	l3660
  9229  14A2  3001               	movlw	1
  9230  14A3                     u4135:	
  9231  14A3  36AB               	lsrf	___lltoft@c+3,f
  9232  14A4  0CAA               	rrf	___lltoft@c+2,f
  9233  14A5  0CA9               	rrf	___lltoft@c+1,f
  9234  14A6  0CA8               	rrf	___lltoft@c,f
  9235  14A7  0B89               	decfsz	9,f
  9236  14A8  2CA3               	goto	u4135
  9237  14A9  3001               	movlw	1
  9238  14AA  00AC               	movwf	??___lltoft
  9239  14AB  082C               	movf	??___lltoft,w
  9240  14AC  07AD               	addwf	___lltoft@exp,f
  9241  14AD  2C9E               	goto	l3658
  9242  14AE                     l3660:	
  9243  14AE  0828               	movf	___lltoft@c,w
  9244  14AF  00A0               	movwf	___ftpack@arg
  9245  14B0  0829               	movf	___lltoft@c+1,w
  9246  14B1  00A1               	movwf	___ftpack@arg+1
  9247  14B2  082A               	movf	___lltoft@c+2,w
  9248  14B3  00A2               	movwf	___ftpack@arg+2
  9249  14B4  082D               	movf	___lltoft@exp,w
  9250  14B5  00AC               	movwf	??___lltoft
  9251  14B6  082C               	movf	??___lltoft,w
  9252  14B7  00A3               	movwf	___ftpack@exp
  9253  14B8  01A4               	clrf	___ftpack@sign
  9254  14B9  3189  2121         	fcall	___ftpack
  9255  14BB  0020               	movlb	0	; select bank0
  9256  14BC  0820               	movf	?___ftpack,w
  9257  14BD  00A8               	movwf	?___lltoft
  9258  14BE  0821               	movf	?___ftpack+1,w
  9259  14BF  00A9               	movwf	?___lltoft+1
  9260  14C0  0822               	movf	?___ftpack+2,w
  9261  14C1  00AA               	movwf	?___lltoft+2
  9262  14C2  0008               	return
  9263  14C3                     __end_of___lltoft:	
  9264                           
  9265                           	psect	text37
  9266  0AAA                     __ptext37:	
  9267 ;; *************** function ___fttol *****************
  9268 ;; Defined at:
  9269 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  9270 ;; Parameters:    Size  Location     Type
  9271 ;;  f1              3   71[BANK0 ] float 
  9272 ;; Auto vars:     Size  Location     Type
  9273 ;;  lval            4    1[BANK1 ] unsigned long 
  9274 ;;  exp1            1    5[BANK1 ] unsigned char 
  9275 ;;  sign1           1    0[BANK1 ] unsigned char 
  9276 ;; Return value:  Size  Location     Type
  9277 ;;                  4   71[BANK0 ] long 
  9278 ;; Registers used:
  9279 ;;		wreg, status,2, status,0
  9280 ;; Tracked objects:
  9281 ;;		On entry : 0/0
  9282 ;;		On exit  : 0/0
  9283 ;;		Unchanged: 0/0
  9284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9285 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9289 ;;Total ram usage:       14 bytes
  9290 ;; Hardware stack levels used:    1
  9291 ;; Hardware stack levels required when called:    7
  9292 ;; This function calls:
  9293 ;;		Nothing
  9294 ;; This function is called by:
  9295 ;;		_ftoa
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           
  9300                           ;psect for function ___fttol
  9301  0AAA                     ___fttol:	
  9302                           
  9303                           ;incstack = 0
  9304                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9305  0AAA  0020               	movlb	0	; select bank0
  9306  0AAB  0867               	movf	___fttol@f1,w
  9307  0AAC  00EB               	movwf	??___fttol
  9308  0AAD  0868               	movf	___fttol@f1+1,w
  9309  0AAE  00EC               	movwf	??___fttol+1
  9310  0AAF  0869               	movf	___fttol@f1+2,w
  9311  0AB0  00ED               	movwf	??___fttol+2
  9312  0AB1  1003               	clrc
  9313  0AB2  0D6C               	rlf	??___fttol+1,w
  9314  0AB3  0D6D               	rlf	??___fttol+2,w
  9315  0AB4  00EE               	movwf	??___fttol+3
  9316  0AB5  086E               	movf	??___fttol+3,w
  9317  0AB6  0021               	movlb	1	; select bank1
  9318  0AB7  00A5               	movwf	___fttol@exp1^(0+128)
  9319  0AB8  0825               	movf	___fttol@exp1^(0+128),w
  9320  0AB9  1D03               	btfss	3,2
  9321  0ABA  2AC5               	goto	l3618
  9322  0ABB  3000               	movlw	0
  9323  0ABC  0020               	movlb	0	; select bank0
  9324  0ABD  00EA               	movwf	?___fttol+3
  9325  0ABE  3000               	movlw	0
  9326  0ABF  00E9               	movwf	?___fttol+2
  9327  0AC0  3000               	movlw	0
  9328  0AC1  00E8               	movwf	?___fttol+1
  9329  0AC2  3000               	movlw	0
  9330  0AC3  00E7               	movwf	?___fttol
  9331  0AC4  0008               	return
  9332  0AC5                     l3618:	
  9333  0AC5  0020               	movlb	0	; select bank0
  9334  0AC6  0867               	movf	___fttol@f1,w
  9335  0AC7  00EB               	movwf	??___fttol
  9336  0AC8  0868               	movf	___fttol@f1+1,w
  9337  0AC9  00EC               	movwf	??___fttol+1
  9338  0ACA  0869               	movf	___fttol@f1+2,w
  9339  0ACB  00ED               	movwf	??___fttol+2
  9340  0ACC  3017               	movlw	23
  9341  0ACD                     u4045:	
  9342  0ACD  36ED               	lsrf	??___fttol+2,f
  9343  0ACE  0CEC               	rrf	??___fttol+1,f
  9344  0ACF  0CEB               	rrf	??___fttol,f
  9345  0AD0  0B89               	decfsz	9,f
  9346  0AD1  2ACD               	goto	u4045
  9347  0AD2  086B               	movf	??___fttol,w
  9348  0AD3  00EE               	movwf	??___fttol+3
  9349  0AD4  086E               	movf	??___fttol+3,w
  9350  0AD5  0021               	movlb	1	; select bank1
  9351  0AD6  00A0               	movwf	___fttol@sign1^(0+128)
  9352  0AD7  0020               	movlb	0	; select bank0
  9353  0AD8  17E8               	bsf	___fttol@f1+1,7
  9354  0AD9  30FF               	movlw	255
  9355  0ADA  05E7               	andwf	___fttol@f1,f
  9356  0ADB  30FF               	movlw	255
  9357  0ADC  05E8               	andwf	___fttol@f1+1,f
  9358  0ADD  3000               	movlw	0
  9359  0ADE  05E9               	andwf	___fttol@f1+2,f
  9360  0ADF  0867               	movf	___fttol@f1,w
  9361  0AE0  0021               	movlb	1	; select bank1
  9362  0AE1  00A1               	movwf	___fttol@lval^(0+128)
  9363  0AE2  0020               	movlb	0	; select bank0
  9364  0AE3  0868               	movf	___fttol@f1+1,w
  9365  0AE4  0021               	movlb	1	; select bank1
  9366  0AE5  00A2               	movwf	(___fttol@lval^(0+128)+1)
  9367  0AE6  0020               	movlb	0	; select bank0
  9368  0AE7  0869               	movf	___fttol@f1+2,w
  9369  0AE8  0021               	movlb	1	; select bank1
  9370  0AE9  00A3               	movwf	(___fttol@lval^(0+128)+2)
  9371  0AEA  01A4               	clrf	(___fttol@lval^(0+128)+3)
  9372  0AEB  308E               	movlw	142
  9373  0AEC  02A5               	subwf	___fttol@exp1^(0+128),f
  9374  0AED  1FA5               	btfss	___fttol@exp1^(0+128),7
  9375  0AEE  2B0F               	goto	l3638
  9376  0AEF  0825               	movf	___fttol@exp1^(0+128),w
  9377  0AF0  3A80               	xorlw	128
  9378  0AF1  3E8F               	addlw	143
  9379  0AF2  1803               	skipnc
  9380  0AF3  2AFE               	goto	l3636
  9381  0AF4  3000               	movlw	0
  9382  0AF5  0020               	movlb	0	; select bank0
  9383  0AF6  00EA               	movwf	?___fttol+3
  9384  0AF7  3000               	movlw	0
  9385  0AF8  00E9               	movwf	?___fttol+2
  9386  0AF9  3000               	movlw	0
  9387  0AFA  00E8               	movwf	?___fttol+1
  9388  0AFB  3000               	movlw	0
  9389  0AFC  00E7               	movwf	?___fttol
  9390  0AFD  0008               	return
  9391  0AFE                     l3636:	
  9392  0AFE  3001               	movlw	1
  9393  0AFF                     u4075:	
  9394  0AFF  0021               	movlb	1	; select bank1
  9395  0B00  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  9396  0B01  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  9397  0B02  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  9398  0B03  0CA1               	rrf	___fttol@lval^(0+128),f
  9399  0B04  0B89               	decfsz	9,f
  9400  0B05  2AFF               	goto	u4075
  9401  0B06  3001               	movlw	1
  9402  0B07  0020               	movlb	0	; select bank0
  9403  0B08  00EB               	movwf	??___fttol
  9404  0B09  086B               	movf	??___fttol,w
  9405  0B0A  0021               	movlb	1	; select bank1
  9406  0B0B  07A5               	addwf	___fttol@exp1^(0+128),f
  9407  0B0C  1903               	btfsc	3,2
  9408  0B0D  2B2B               	goto	l3646
  9409  0B0E  2AFE               	goto	l3636
  9410  0B0F                     l3638:	
  9411  0B0F  3018               	movlw	24
  9412  0B10  0225               	subwf	___fttol@exp1^(0+128),w
  9413  0B11  1C03               	skipc
  9414  0B12  2B27               	goto	l784
  9415  0B13  3000               	movlw	0
  9416  0B14  0020               	movlb	0	; select bank0
  9417  0B15  00EA               	movwf	?___fttol+3
  9418  0B16  3000               	movlw	0
  9419  0B17  00E9               	movwf	?___fttol+2
  9420  0B18  3000               	movlw	0
  9421  0B19  00E8               	movwf	?___fttol+1
  9422  0B1A  3000               	movlw	0
  9423  0B1B  00E7               	movwf	?___fttol
  9424  0B1C  0008               	return
  9425  0B1D                     l3644:	
  9426  0B1D  3001               	movlw	1
  9427  0B1E                     u4105:	
  9428  0B1E  0021               	movlb	1	; select bank1
  9429  0B1F  35A1               	lslf	___fttol@lval^(0+128),f
  9430  0B20  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  9431  0B21  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  9432  0B22  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  9433  0B23  0B89               	decfsz	9,f
  9434  0B24  2B1E               	goto	u4105
  9435  0B25  3001               	movlw	1
  9436  0B26  02A5               	subwf	___fttol@exp1^(0+128),f
  9437  0B27                     l784:	
  9438  0B27  0021               	movlb	1	; select bank1
  9439  0B28  0825               	movf	___fttol@exp1^(0+128),w
  9440  0B29  1D03               	btfss	3,2
  9441  0B2A  2B1D               	goto	l3644
  9442  0B2B                     l3646:	
  9443  0B2B  0820               	movf	___fttol@sign1^(0+128),w
  9444  0B2C  1903               	btfsc	3,2
  9445  0B2D  2B39               	goto	l3650
  9446  0B2E  09A1               	comf	___fttol@lval^(0+128),f
  9447  0B2F  09A2               	comf	(___fttol@lval+1)^(0+128),f
  9448  0B30  09A3               	comf	(___fttol@lval+2)^(0+128),f
  9449  0B31  09A4               	comf	(___fttol@lval+3)^(0+128),f
  9450  0B32  0AA1               	incf	___fttol@lval^(0+128),f
  9451  0B33  1903               	skipnz
  9452  0B34  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  9453  0B35  1903               	skipnz
  9454  0B36  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  9455  0B37  1903               	skipnz
  9456  0B38  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  9457  0B39                     l3650:	
  9458  0B39  0824               	movf	(___fttol@lval+3)^(0+128),w
  9459  0B3A  0020               	movlb	0	; select bank0
  9460  0B3B  00EA               	movwf	?___fttol+3
  9461  0B3C  0021               	movlb	1	; select bank1
  9462  0B3D  0823               	movf	(___fttol@lval+2)^(0+128),w
  9463  0B3E  0020               	movlb	0	; select bank0
  9464  0B3F  00E9               	movwf	?___fttol+2
  9465  0B40  0021               	movlb	1	; select bank1
  9466  0B41  0822               	movf	(___fttol@lval+1)^(0+128),w
  9467  0B42  0020               	movlb	0	; select bank0
  9468  0B43  00E8               	movwf	?___fttol+1
  9469  0B44  0021               	movlb	1	; select bank1
  9470  0B45  0821               	movf	___fttol@lval^(0+128),w
  9471  0B46  0020               	movlb	0	; select bank0
  9472  0B47  00E7               	movwf	?___fttol
  9473  0B48  0008               	return
  9474  0B49                     __end_of___fttol:	
  9475                           
  9476                           	psect	text38
  9477  1354                     __ptext38:	
  9478 ;; *************** function ___ftsub *****************
  9479 ;; Defined at:
  9480 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;  f2              3   27[BANK0 ] float 
  9483 ;;  f1              3   30[BANK0 ] float 
  9484 ;; Auto vars:     Size  Location     Type
  9485 ;;		None
  9486 ;; Return value:  Size  Location     Type
  9487 ;;                  3   27[BANK0 ] float 
  9488 ;; Registers used:
  9489 ;;		wreg, status,2, status,0, pclath, cstack
  9490 ;; Tracked objects:
  9491 ;;		On entry : 0/0
  9492 ;;		On exit  : 0/0
  9493 ;;		Unchanged: 0/0
  9494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9495 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;Total ram usage:        6 bytes
  9500 ;; Hardware stack levels used:    1
  9501 ;; Hardware stack levels required when called:    9
  9502 ;; This function calls:
  9503 ;;		___ftadd
  9504 ;; This function is called by:
  9505 ;;		_ftoa
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           
  9510                           ;psect for function ___ftsub
  9511  1354                     ___ftsub:	
  9512                           
  9513                           ;incstack = 0
  9514                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9515  1354  0020               	movlb	0	; select bank0
  9516  1355  083D               	movf	___ftsub@f2+2,w
  9517  1356  043C               	iorwf	___ftsub@f2+1,w
  9518  1357  043B               	iorwf	___ftsub@f2,w
  9519  1358  1903               	skipnz
  9520  1359  2B5C               	goto	l3608
  9521  135A  3080               	movlw	128
  9522  135B  06BD               	xorwf	___ftsub@f2+2,f
  9523  135C                     l3608:	
  9524  135C  083E               	movf	___ftsub@f1,w
  9525  135D  00AE               	movwf	___ftadd@f1
  9526  135E  083F               	movf	___ftsub@f1+1,w
  9527  135F  00AF               	movwf	___ftadd@f1+1
  9528  1360  0840               	movf	___ftsub@f1+2,w
  9529  1361  00B0               	movwf	___ftadd@f1+2
  9530  1362  083B               	movf	___ftsub@f2,w
  9531  1363  00B1               	movwf	___ftadd@f2
  9532  1364  083C               	movf	___ftsub@f2+1,w
  9533  1365  00B2               	movwf	___ftadd@f2+1
  9534  1366  083D               	movf	___ftsub@f2+2,w
  9535  1367  00B3               	movwf	___ftadd@f2+2
  9536  1368  318F  270A         	fcall	___ftadd
  9537  136A  0020               	movlb	0	; select bank0
  9538  136B  082E               	movf	?___ftadd,w
  9539  136C  00BB               	movwf	?___ftsub
  9540  136D  082F               	movf	?___ftadd+1,w
  9541  136E  00BC               	movwf	?___ftsub+1
  9542  136F  0830               	movf	?___ftadd+2,w
  9543  1370  00BD               	movwf	?___ftsub+2
  9544  1371  0008               	return
  9545  1372                     __end_of___ftsub:	
  9546                           
  9547                           	psect	text39
  9548  11F8                     __ptext39:	
  9549 ;; *************** function ___ftneg *****************
  9550 ;; Defined at:
  9551 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  9552 ;; Parameters:    Size  Location     Type
  9553 ;;  f1              3   55[BANK0 ] float 
  9554 ;; Auto vars:     Size  Location     Type
  9555 ;;		None
  9556 ;; Return value:  Size  Location     Type
  9557 ;;                  3   55[BANK0 ] float 
  9558 ;; Registers used:
  9559 ;;		wreg
  9560 ;; Tracked objects:
  9561 ;;		On entry : 0/0
  9562 ;;		On exit  : 0/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9565 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9569 ;;Total ram usage:        3 bytes
  9570 ;; Hardware stack levels used:    1
  9571 ;; Hardware stack levels required when called:    7
  9572 ;; This function calls:
  9573 ;;		Nothing
  9574 ;; This function is called by:
  9575 ;;		_loop
  9576 ;;		_strtod
  9577 ;;		_ftoa
  9578 ;; This function uses a non-reentrant model
  9579 ;;
  9580                           
  9581                           
  9582                           ;psect for function ___ftneg
  9583  11F8                     ___ftneg:	
  9584                           
  9585                           ;incstack = 0
  9586                           ; Regs used in ___ftneg: [wreg]
  9587  11F8  0020               	movlb	0	; select bank0
  9588  11F9  0859               	movf	___ftneg@f1+2,w
  9589  11FA  0458               	iorwf	___ftneg@f1+1,w
  9590  11FB  0457               	iorwf	___ftneg@f1,w
  9591  11FC  1903               	skipnz
  9592  11FD  0008               	return
  9593  11FE  3080               	movlw	128
  9594  11FF  06D9               	xorwf	___ftneg@f1+2,f
  9595  1200  0008               	return
  9596  1201                     __end_of___ftneg:	
  9597                           
  9598                           	psect	text40
  9599  0C9A                     __ptext40:	
  9600 ;; *************** function ___ftmul *****************
  9601 ;; Defined at:
  9602 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  9603 ;; Parameters:    Size  Location     Type
  9604 ;;  f1              3   55[BANK0 ] float 
  9605 ;;  f2              3   58[BANK0 ] float 
  9606 ;; Auto vars:     Size  Location     Type
  9607 ;;  f3_as_produc    3   66[BANK0 ] unsigned um
  9608 ;;  sign            1   70[BANK0 ] unsigned char 
  9609 ;;  cntr            1   69[BANK0 ] unsigned char 
  9610 ;;  exp             1   65[BANK0 ] unsigned char 
  9611 ;; Return value:  Size  Location     Type
  9612 ;;                  3   55[BANK0 ] float 
  9613 ;; Registers used:
  9614 ;;		wreg, status,2, status,0, pclath, cstack
  9615 ;; Tracked objects:
  9616 ;;		On entry : 0/0
  9617 ;;		On exit  : 0/0
  9618 ;;		Unchanged: 0/0
  9619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9620 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9623 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;Total ram usage:       16 bytes
  9625 ;; Hardware stack levels used:    1
  9626 ;; Hardware stack levels required when called:    8
  9627 ;; This function calls:
  9628 ;;		___ftpack
  9629 ;; This function is called by:
  9630 ;;		_loop
  9631 ;;		_strtod
  9632 ;;		_ftoa
  9633 ;; This function uses a non-reentrant model
  9634 ;;
  9635                           
  9636                           
  9637                           ;psect for function ___ftmul
  9638  0C9A                     ___ftmul:	
  9639                           
  9640                           ;incstack = 0
  9641                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9642  0C9A  0020               	movlb	0	; select bank0
  9643  0C9B  0857               	movf	___ftmul@f1,w
  9644  0C9C  00DD               	movwf	??___ftmul
  9645  0C9D  0858               	movf	___ftmul@f1+1,w
  9646  0C9E  00DE               	movwf	??___ftmul+1
  9647  0C9F  0859               	movf	___ftmul@f1+2,w
  9648  0CA0  00DF               	movwf	??___ftmul+2
  9649  0CA1  1003               	clrc
  9650  0CA2  0D5E               	rlf	??___ftmul+1,w
  9651  0CA3  0D5F               	rlf	??___ftmul+2,w
  9652  0CA4  00E0               	movwf	??___ftmul+3
  9653  0CA5  0860               	movf	??___ftmul+3,w
  9654  0CA6  00E1               	movwf	___ftmul@exp
  9655  0CA7  0861               	movf	___ftmul@exp,w
  9656  0CA8  1D03               	btfss	3,2
  9657  0CA9  2CB1               	goto	l2950
  9658  0CAA  3000               	movlw	0
  9659  0CAB  00D7               	movwf	?___ftmul
  9660  0CAC  3000               	movlw	0
  9661  0CAD  00D8               	movwf	?___ftmul+1
  9662  0CAE  3000               	movlw	0
  9663  0CAF  00D9               	movwf	?___ftmul+2
  9664  0CB0  0008               	return
  9665  0CB1                     l2950:	
  9666  0CB1  085A               	movf	___ftmul@f2,w
  9667  0CB2  00DD               	movwf	??___ftmul
  9668  0CB3  085B               	movf	___ftmul@f2+1,w
  9669  0CB4  00DE               	movwf	??___ftmul+1
  9670  0CB5  085C               	movf	___ftmul@f2+2,w
  9671  0CB6  00DF               	movwf	??___ftmul+2
  9672  0CB7  1003               	clrc
  9673  0CB8  0D5E               	rlf	??___ftmul+1,w
  9674  0CB9  0D5F               	rlf	??___ftmul+2,w
  9675  0CBA  00E0               	movwf	??___ftmul+3
  9676  0CBB  0860               	movf	??___ftmul+3,w
  9677  0CBC  00E6               	movwf	___ftmul@sign
  9678  0CBD  0866               	movf	___ftmul@sign,w
  9679  0CBE  1D03               	btfss	3,2
  9680  0CBF  2CC7               	goto	l2956
  9681  0CC0  3000               	movlw	0
  9682  0CC1  00D7               	movwf	?___ftmul
  9683  0CC2  3000               	movlw	0
  9684  0CC3  00D8               	movwf	?___ftmul+1
  9685  0CC4  3000               	movlw	0
  9686  0CC5  00D9               	movwf	?___ftmul+2
  9687  0CC6  0008               	return
  9688  0CC7                     l2956:	
  9689  0CC7  0866               	movf	___ftmul@sign,w
  9690  0CC8  3E7B               	addlw	123
  9691  0CC9  00DD               	movwf	??___ftmul
  9692  0CCA  085D               	movf	??___ftmul,w
  9693  0CCB  07E1               	addwf	___ftmul@exp,f
  9694  0CCC  0857               	movf	___ftmul@f1,w
  9695  0CCD  00DD               	movwf	??___ftmul
  9696  0CCE  0858               	movf	___ftmul@f1+1,w
  9697  0CCF  00DE               	movwf	??___ftmul+1
  9698  0CD0  0859               	movf	___ftmul@f1+2,w
  9699  0CD1  00DF               	movwf	??___ftmul+2
  9700  0CD2  3010               	movlw	16
  9701  0CD3                     u2755:	
  9702  0CD3  36DF               	lsrf	??___ftmul+2,f
  9703  0CD4  0CDE               	rrf	??___ftmul+1,f
  9704  0CD5  0CDD               	rrf	??___ftmul,f
  9705  0CD6  0B89               	decfsz	9,f
  9706  0CD7  2CD3               	goto	u2755
  9707  0CD8  085D               	movf	??___ftmul,w
  9708  0CD9  00E0               	movwf	??___ftmul+3
  9709  0CDA  0860               	movf	??___ftmul+3,w
  9710  0CDB  00E6               	movwf	___ftmul@sign
  9711  0CDC  085A               	movf	___ftmul@f2,w
  9712  0CDD  00DD               	movwf	??___ftmul
  9713  0CDE  085B               	movf	___ftmul@f2+1,w
  9714  0CDF  00DE               	movwf	??___ftmul+1
  9715  0CE0  085C               	movf	___ftmul@f2+2,w
  9716  0CE1  00DF               	movwf	??___ftmul+2
  9717  0CE2  3010               	movlw	16
  9718  0CE3                     u2765:	
  9719  0CE3  36DF               	lsrf	??___ftmul+2,f
  9720  0CE4  0CDE               	rrf	??___ftmul+1,f
  9721  0CE5  0CDD               	rrf	??___ftmul,f
  9722  0CE6  0B89               	decfsz	9,f
  9723  0CE7  2CE3               	goto	u2765
  9724  0CE8  085D               	movf	??___ftmul,w
  9725  0CE9  00E0               	movwf	??___ftmul+3
  9726  0CEA  0860               	movf	??___ftmul+3,w
  9727  0CEB  06E6               	xorwf	___ftmul@sign,f
  9728  0CEC  3080               	movlw	128
  9729  0CED  00DD               	movwf	??___ftmul
  9730  0CEE  085D               	movf	??___ftmul,w
  9731  0CEF  05E6               	andwf	___ftmul@sign,f
  9732  0CF0  17D8               	bsf	___ftmul@f1+1,7
  9733  0CF1  17DB               	bsf	___ftmul@f2+1,7
  9734  0CF2  30FF               	movlw	255
  9735  0CF3  05DA               	andwf	___ftmul@f2,f
  9736  0CF4  30FF               	movlw	255
  9737  0CF5  05DB               	andwf	___ftmul@f2+1,f
  9738  0CF6  3000               	movlw	0
  9739  0CF7  05DC               	andwf	___ftmul@f2+2,f
  9740  0CF8  3000               	movlw	0
  9741  0CF9  00E2               	movwf	___ftmul@f3_as_product
  9742  0CFA  3000               	movlw	0
  9743  0CFB  00E3               	movwf	___ftmul@f3_as_product+1
  9744  0CFC  3000               	movlw	0
  9745  0CFD  00E4               	movwf	___ftmul@f3_as_product+2
  9746  0CFE  3007               	movlw	7
  9747  0CFF  00DD               	movwf	??___ftmul
  9748  0D00  085D               	movf	??___ftmul,w
  9749  0D01  00E5               	movwf	___ftmul@cntr
  9750  0D02                     l2968:	
  9751  0D02  1C57               	btfss	___ftmul@f1,0
  9752  0D03  2D0A               	goto	l2972
  9753  0D04  085A               	movf	___ftmul@f2,w
  9754  0D05  07E2               	addwf	___ftmul@f3_as_product,f
  9755  0D06  085B               	movf	___ftmul@f2+1,w
  9756  0D07  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  9757  0D08  085C               	movf	___ftmul@f2+2,w
  9758  0D09  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  9759  0D0A                     l2972:	
  9760  0D0A  3001               	movlw	1
  9761  0D0B                     u2785:	
  9762  0D0B  36D9               	lsrf	___ftmul@f1+2,f
  9763  0D0C  0CD8               	rrf	___ftmul@f1+1,f
  9764  0D0D  0CD7               	rrf	___ftmul@f1,f
  9765  0D0E  0B89               	decfsz	9,f
  9766  0D0F  2D0B               	goto	u2785
  9767  0D10  3001               	movlw	1
  9768  0D11                     u2795:	
  9769  0D11  35DA               	lslf	___ftmul@f2,f
  9770  0D12  0DDB               	rlf	___ftmul@f2+1,f
  9771  0D13  0DDC               	rlf	___ftmul@f2+2,f
  9772  0D14  0B89               	decfsz	9,f
  9773  0D15  2D11               	goto	u2795
  9774  0D16  3001               	movlw	1
  9775  0D17  02E5               	subwf	___ftmul@cntr,f
  9776  0D18  1D03               	btfss	3,2
  9777  0D19  2D02               	goto	l2968
  9778  0D1A  3009               	movlw	9
  9779  0D1B  00DD               	movwf	??___ftmul
  9780  0D1C  085D               	movf	??___ftmul,w
  9781  0D1D  00E5               	movwf	___ftmul@cntr
  9782  0D1E                     l2980:	
  9783  0D1E  1C57               	btfss	___ftmul@f1,0
  9784  0D1F  2D26               	goto	l2984
  9785  0D20  085A               	movf	___ftmul@f2,w
  9786  0D21  07E2               	addwf	___ftmul@f3_as_product,f
  9787  0D22  085B               	movf	___ftmul@f2+1,w
  9788  0D23  3DE3               	addwfc	___ftmul@f3_as_product+1,f
  9789  0D24  085C               	movf	___ftmul@f2+2,w
  9790  0D25  3DE4               	addwfc	___ftmul@f3_as_product+2,f
  9791  0D26                     l2984:	
  9792  0D26  3001               	movlw	1
  9793  0D27                     u2825:	
  9794  0D27  36D9               	lsrf	___ftmul@f1+2,f
  9795  0D28  0CD8               	rrf	___ftmul@f1+1,f
  9796  0D29  0CD7               	rrf	___ftmul@f1,f
  9797  0D2A  0B89               	decfsz	9,f
  9798  0D2B  2D27               	goto	u2825
  9799  0D2C  3001               	movlw	1
  9800  0D2D                     u2835:	
  9801  0D2D  36E4               	lsrf	___ftmul@f3_as_product+2,f
  9802  0D2E  0CE3               	rrf	___ftmul@f3_as_product+1,f
  9803  0D2F  0CE2               	rrf	___ftmul@f3_as_product,f
  9804  0D30  0B89               	decfsz	9,f
  9805  0D31  2D2D               	goto	u2835
  9806  0D32  3001               	movlw	1
  9807  0D33  02E5               	subwf	___ftmul@cntr,f
  9808  0D34  1D03               	btfss	3,2
  9809  0D35  2D1E               	goto	l2980
  9810  0D36  0862               	movf	___ftmul@f3_as_product,w
  9811  0D37  00A0               	movwf	___ftpack@arg
  9812  0D38  0863               	movf	___ftmul@f3_as_product+1,w
  9813  0D39  00A1               	movwf	___ftpack@arg+1
  9814  0D3A  0864               	movf	___ftmul@f3_as_product+2,w
  9815  0D3B  00A2               	movwf	___ftpack@arg+2
  9816  0D3C  0861               	movf	___ftmul@exp,w
  9817  0D3D  00DD               	movwf	??___ftmul
  9818  0D3E  085D               	movf	??___ftmul,w
  9819  0D3F  00A3               	movwf	___ftpack@exp
  9820  0D40  0866               	movf	___ftmul@sign,w
  9821  0D41  00DE               	movwf	??___ftmul+1
  9822  0D42  085E               	movf	??___ftmul+1,w
  9823  0D43  00A4               	movwf	___ftpack@sign
  9824  0D44  3189  2121         	fcall	___ftpack
  9825  0D46  0020               	movlb	0	; select bank0
  9826  0D47  0820               	movf	?___ftpack,w
  9827  0D48  00D7               	movwf	?___ftmul
  9828  0D49  0821               	movf	?___ftpack+1,w
  9829  0D4A  00D8               	movwf	?___ftmul+1
  9830  0D4B  0822               	movf	?___ftpack+2,w
  9831  0D4C  00D9               	movwf	?___ftmul+2
  9832  0D4D  0008               	return
  9833  0D4E                     __end_of___ftmul:	
  9834                           
  9835                           	psect	text41
  9836  15E6                     __ptext41:	
  9837 ;; *************** function ___ftge *****************
  9838 ;; Defined at:
  9839 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  9840 ;; Parameters:    Size  Location     Type
  9841 ;;  ff1             3    0[BANK0 ] float 
  9842 ;;  ff2             3    3[BANK0 ] float 
  9843 ;; Auto vars:     Size  Location     Type
  9844 ;;		None
  9845 ;; Return value:  Size  Location     Type
  9846 ;;		None               void
  9847 ;; Registers used:
  9848 ;;		wreg, status,2, status,0
  9849 ;; Tracked objects:
  9850 ;;		On entry : 0/0
  9851 ;;		On exit  : 0/0
  9852 ;;		Unchanged: 0/0
  9853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9854 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9856 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9857 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9858 ;;Total ram usage:        9 bytes
  9859 ;; Hardware stack levels used:    1
  9860 ;; Hardware stack levels required when called:    7
  9861 ;; This function calls:
  9862 ;;		Nothing
  9863 ;; This function is called by:
  9864 ;;		_strtod
  9865 ;;		_ftoa
  9866 ;; This function uses a non-reentrant model
  9867 ;;
  9868                           
  9869                           
  9870                           ;psect for function ___ftge
  9871  15E6                     ___ftge:	
  9872                           
  9873                           ;incstack = 0
  9874                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9875  15E6  0020               	movlb	0	; select bank0
  9876  15E7  1FA2               	btfss	___ftge@ff1+2,7
  9877  15E8  2DFD               	goto	l2928
  9878  15E9  0920               	comf	___ftge@ff1,w
  9879  15EA  00A6               	movwf	??___ftge
  9880  15EB  0921               	comf	___ftge@ff1+1,w
  9881  15EC  00A7               	movwf	??___ftge+1
  9882  15ED  0922               	comf	___ftge@ff1+2,w
  9883  15EE  00A8               	movwf	??___ftge+2
  9884  15EF  0AA6               	incf	??___ftge,f
  9885  15F0  1903               	skipnz
  9886  15F1  0AA7               	incf	??___ftge+1,f
  9887  15F2  1903               	skipnz
  9888  15F3  0AA8               	incf	??___ftge+2,f
  9889  15F4  3000               	movlw	0
  9890  15F5  0726               	addwf	??___ftge,w
  9891  15F6  00A0               	movwf	___ftge@ff1
  9892  15F7  3000               	movlw	0
  9893  15F8  3D27               	addwfc	??___ftge+1,w
  9894  15F9  00A1               	movwf	___ftge@ff1+1
  9895  15FA  3080               	movlw	128
  9896  15FB  3D28               	addwfc	??___ftge+2,w
  9897  15FC  00A2               	movwf	___ftge@ff1+2
  9898  15FD                     l2928:	
  9899  15FD  1FA5               	btfss	___ftge@ff2+2,7
  9900  15FE  2E13               	goto	l2932
  9901  15FF  0923               	comf	___ftge@ff2,w
  9902  1600  00A6               	movwf	??___ftge
  9903  1601  0924               	comf	___ftge@ff2+1,w
  9904  1602  00A7               	movwf	??___ftge+1
  9905  1603  0925               	comf	___ftge@ff2+2,w
  9906  1604  00A8               	movwf	??___ftge+2
  9907  1605  0AA6               	incf	??___ftge,f
  9908  1606  1903               	skipnz
  9909  1607  0AA7               	incf	??___ftge+1,f
  9910  1608  1903               	skipnz
  9911  1609  0AA8               	incf	??___ftge+2,f
  9912  160A  3000               	movlw	0
  9913  160B  0726               	addwf	??___ftge,w
  9914  160C  00A3               	movwf	___ftge@ff2
  9915  160D  3000               	movlw	0
  9916  160E  3D27               	addwfc	??___ftge+1,w
  9917  160F  00A4               	movwf	___ftge@ff2+1
  9918  1610  3080               	movlw	128
  9919  1611  3D28               	addwfc	??___ftge+2,w
  9920  1612  00A5               	movwf	___ftge@ff2+2
  9921  1613                     l2932:	
  9922  1613  3080               	movlw	128
  9923  1614  06A2               	xorwf	___ftge@ff1+2,f
  9924  1615  3080               	movlw	128
  9925  1616  06A5               	xorwf	___ftge@ff2+2,f
  9926  1617  0825               	movf	___ftge@ff2+2,w
  9927  1618  0222               	subwf	___ftge@ff1+2,w
  9928  1619  1D03               	skipz
  9929  161A  0008               	return
  9930  161B  0824               	movf	___ftge@ff2+1,w
  9931  161C  0221               	subwf	___ftge@ff1+1,w
  9932  161D  1D03               	skipz
  9933  161E  0008               	return
  9934  161F  0823               	movf	___ftge@ff2,w
  9935  1620  0220               	subwf	___ftge@ff1,w
  9936  1621  0008               	return
  9937  1622                     __end_of___ftge:	
  9938                           
  9939                           	psect	text42
  9940  0A16                     __ptext42:	
  9941 ;; *************** function _getADCValue *****************
  9942 ;; Defined at:
  9943 ;;		line 110 in file "main.c"
  9944 ;; Parameters:    Size  Location     Type
  9945 ;;  channel         1    wreg     unsigned char 
  9946 ;; Auto vars:     Size  Location     Type
  9947 ;;  channel         1   51[BANK0 ] unsigned char 
  9948 ;;  adcSum          3   52[BANK0 ] float 
  9949 ;;  adcLoop         2   49[BANK0 ] unsigned int 
  9950 ;; Return value:  Size  Location     Type
  9951 ;;                  3   43[BANK0 ] float 
  9952 ;; Registers used:
  9953 ;;		wreg, status,2, status,0, pclath, cstack
  9954 ;; Tracked objects:
  9955 ;;		On entry : 0/0
  9956 ;;		On exit  : 0/0
  9957 ;;		Unchanged: 0/0
  9958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9959 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9960 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9961 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9962 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;Total ram usage:       12 bytes
  9964 ;; Hardware stack levels used:    1
  9965 ;; Hardware stack levels required when called:    9
  9966 ;; This function calls:
  9967 ;;		___awtoft
  9968 ;;		___ftadd
  9969 ;;		___ftdiv
  9970 ;;		_doWDTSleep
  9971 ;; This function is called by:
  9972 ;;		_loop
  9973 ;; This function uses a non-reentrant model
  9974 ;;
  9975                           
  9976                           
  9977                           ;psect for function _getADCValue
  9978  0A16                     _getADCValue:	
  9979                           
  9980                           ;incstack = 0
  9981                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  9982                           ;getADCValue@channel stored from wreg
  9983  0A16  0020               	movlb	0	; select bank0
  9984  0A17  00D3               	movwf	getADCValue@channel
  9985                           
  9986                           ;main.c: 113: float adcSum = 0;
  9987  0A18  3000               	movlw	0
  9988  0A19  00D4               	movwf	getADCValue@adcSum
  9989  0A1A  3000               	movlw	0
  9990  0A1B  00D5               	movwf	getADCValue@adcSum+1
  9991  0A1C  3000               	movlw	0
  9992  0A1D  00D6               	movwf	getADCValue@adcSum+2
  9993                           
  9994                           ;main.c: 114: unsigned int adcLoop = 1000;
  9995  0A1E  30E8               	movlw	232
  9996  0A1F  00D1               	movwf	getADCValue@adcLoop
  9997  0A20  3003               	movlw	3
  9998  0A21  00D2               	movwf	getADCValue@adcLoop+1
  9999                           
 10000                           ;main.c: 116: ADCON0bits.CHS = channel;
 10001  0A22  0853               	movf	getADCValue@channel,w
 10002  0A23  00CE               	movwf	??_getADCValue
 10003  0A24  0DCE               	rlf	??_getADCValue,f
 10004  0A25  0DCE               	rlf	??_getADCValue,f
 10005  0A26  0021               	movlb	1	; select bank1
 10006  0A27  081D               	movf	29,w	;volatile
 10007  0A28  0020               	movlb	0	; select bank0
 10008  0A29  064E               	xorwf	??_getADCValue,w
 10009  0A2A  3903               	andlw	-253
 10010  0A2B  064E               	xorwf	??_getADCValue,w
 10011  0A2C  0021               	movlb	1	; select bank1
 10012  0A2D  009D               	movwf	29	;volatile
 10013                           
 10014                           ;main.c: 117: FVRCONbits.FVREN = 1;
 10015  0A2E  0022               	movlb	2	; select bank2
 10016  0A2F  1797               	bsf	23,7	;volatile
 10017                           
 10018                           ;main.c: 118: ADCON0bits.ADON = 1;
 10019  0A30  0021               	movlb	1	; select bank1
 10020  0A31  141D               	bsf	29,0	;volatile
 10021                           
 10022                           ;main.c: 120: doWDTSleep(0b00000);
 10023  0A32  3000               	movlw	0
 10024  0A33  3192  2269  318A   	fcall	_doWDTSleep
 10025  0A36                     l3854:	
 10026                           ;main.c: 122: while (adcLoop--){
 10027                           
 10028  0A36  3001               	movlw	1
 10029  0A37  0020               	movlb	0	; select bank0
 10030  0A38  02D1               	subwf	getADCValue@adcLoop,f
 10031  0A39  3000               	movlw	0
 10032  0A3A  3BD2               	subwfb	getADCValue@adcLoop+1,f
 10033  0A3B  0A51               	incf	getADCValue@adcLoop,w
 10034  0A3C  1903               	btfsc	3,2
 10035  0A3D  0A52               	incf	getADCValue@adcLoop+1,w
 10036  0A3E  1903               	btfsc	3,2
 10037  0A3F  2A73               	goto	l197
 10038                           
 10039                           ;main.c: 124: ADCON0bits.ADGO = 1;
 10040  0A40  0021               	movlb	1	; select bank1
 10041  0A41  149D               	bsf	29,1	;volatile
 10042  0A42                     l3850:	
 10043                           ;main.c: 126: while (ADCON0bits.ADGO){
 10044                           
 10045  0A42  0021               	movlb	1	; select bank1
 10046  0A43  1C9D               	btfss	29,1	;volatile
 10047  0A44  2A4A               	goto	l3852
 10048                           
 10049                           ;main.c: 127: doWDTSleep(0b00000);
 10050  0A45  3000               	movlw	0
 10051  0A46  3192  2269  318A   	fcall	_doWDTSleep
 10052  0A49  2A42               	goto	l3850
 10053  0A4A                     l3852:	
 10054                           
 10055                           ;main.c: 128: };main.c: 130: adcSum+= (ADRESL | (ADRESH << 8));
 10056  0A4A  081C               	movf	28,w	;volatile
 10057  0A4B  0020               	movlb	0	; select bank0
 10058  0A4C  00CE               	movwf	??_getADCValue
 10059  0A4D  01CF               	clrf	??_getADCValue+1
 10060  0A4E  084E               	movf	??_getADCValue,w
 10061  0A4F  00CF               	movwf	??_getADCValue+1
 10062  0A50  01CE               	clrf	??_getADCValue
 10063  0A51  084E               	movf	??_getADCValue,w
 10064  0A52  0021               	movlb	1	; select bank1
 10065  0A53  041B               	iorwf	27,w	;volatile
 10066  0A54  0020               	movlb	0	; select bank0
 10067  0A55  00A8               	movwf	___awtoft@c
 10068  0A56  084F               	movf	??_getADCValue+1,w
 10069  0A57  00A9               	movwf	___awtoft@c+1
 10070  0A58  3193  23B2  318A   	fcall	___awtoft
 10071  0A5B  0020               	movlb	0	; select bank0
 10072  0A5C  0828               	movf	?___awtoft,w
 10073  0A5D  00AE               	movwf	___ftadd@f1
 10074  0A5E  0829               	movf	?___awtoft+1,w
 10075  0A5F  00AF               	movwf	___ftadd@f1+1
 10076  0A60  082A               	movf	?___awtoft+2,w
 10077  0A61  00B0               	movwf	___ftadd@f1+2
 10078  0A62  0854               	movf	getADCValue@adcSum,w
 10079  0A63  00B1               	movwf	___ftadd@f2
 10080  0A64  0855               	movf	getADCValue@adcSum+1,w
 10081  0A65  00B2               	movwf	___ftadd@f2+1
 10082  0A66  0856               	movf	getADCValue@adcSum+2,w
 10083  0A67  00B3               	movwf	___ftadd@f2+2
 10084  0A68  318F  270A  318A   	fcall	___ftadd
 10085  0A6B  0020               	movlb	0	; select bank0
 10086  0A6C  082E               	movf	?___ftadd,w
 10087  0A6D  00D4               	movwf	getADCValue@adcSum
 10088  0A6E  082F               	movf	?___ftadd+1,w
 10089  0A6F  00D5               	movwf	getADCValue@adcSum+1
 10090  0A70  0830               	movf	?___ftadd+2,w
 10091  0A71  00D6               	movwf	getADCValue@adcSum+2
 10092  0A72  2A36               	goto	l3854
 10093  0A73                     l197:	
 10094                           
 10095                           ;main.c: 132: };main.c: 134: FVRCONbits.FVREN = 0;
 10096  0A73  0022               	movlb	2	; select bank2
 10097  0A74  1397               	bcf	23,7	;volatile
 10098                           
 10099                           ;main.c: 135: ADCON0bits.ADON = 0;
 10100  0A75  0021               	movlb	1	; select bank1
 10101  0A76  101D               	bcf	29,0	;volatile
 10102                           
 10103                           ;main.c: 138: adcSum/= 1000;
 10104  0A77  3000               	movlw	0
 10105  0A78  0020               	movlb	0	; select bank0
 10106  0A79  00BB               	movwf	___ftdiv@f2
 10107  0A7A  307A               	movlw	122
 10108  0A7B  00BC               	movwf	___ftdiv@f2+1
 10109  0A7C  3044               	movlw	68
 10110  0A7D  00BD               	movwf	___ftdiv@f2+2
 10111  0A7E  0854               	movf	getADCValue@adcSum,w
 10112  0A7F  00BE               	movwf	___ftdiv@f1
 10113  0A80  0855               	movf	getADCValue@adcSum+1,w
 10114  0A81  00BF               	movwf	___ftdiv@f1+1
 10115  0A82  0856               	movf	getADCValue@adcSum+2,w
 10116  0A83  00C0               	movwf	___ftdiv@f1+2
 10117  0A84  318B  23F1  318A   	fcall	___ftdiv
 10118  0A87  0020               	movlb	0	; select bank0
 10119  0A88  083B               	movf	?___ftdiv,w
 10120  0A89  00D4               	movwf	getADCValue@adcSum
 10121  0A8A  083C               	movf	?___ftdiv+1,w
 10122  0A8B  00D5               	movwf	getADCValue@adcSum+1
 10123  0A8C  083D               	movf	?___ftdiv+2,w
 10124  0A8D  00D6               	movwf	getADCValue@adcSum+2
 10125                           
 10126                           ;main.c: 139: adcSum/= 500;
 10127  0A8E  3000               	movlw	0
 10128  0A8F  00BB               	movwf	___ftdiv@f2
 10129  0A90  30FA               	movlw	250
 10130  0A91  00BC               	movwf	___ftdiv@f2+1
 10131  0A92  3043               	movlw	67
 10132  0A93  00BD               	movwf	___ftdiv@f2+2
 10133  0A94  0854               	movf	getADCValue@adcSum,w
 10134  0A95  00BE               	movwf	___ftdiv@f1
 10135  0A96  0855               	movf	getADCValue@adcSum+1,w
 10136  0A97  00BF               	movwf	___ftdiv@f1+1
 10137  0A98  0856               	movf	getADCValue@adcSum+2,w
 10138  0A99  00C0               	movwf	___ftdiv@f1+2
 10139  0A9A  318B  23F1         	fcall	___ftdiv
 10140  0A9C  0020               	movlb	0	; select bank0
 10141  0A9D  083B               	movf	?___ftdiv,w
 10142  0A9E  00D4               	movwf	getADCValue@adcSum
 10143  0A9F  083C               	movf	?___ftdiv+1,w
 10144  0AA0  00D5               	movwf	getADCValue@adcSum+1
 10145  0AA1  083D               	movf	?___ftdiv+2,w
 10146  0AA2  00D6               	movwf	getADCValue@adcSum+2
 10147                           
 10148                           ;main.c: 141: return adcSum;
 10149  0AA3  0854               	movf	getADCValue@adcSum,w
 10150  0AA4  00CB               	movwf	?_getADCValue
 10151  0AA5  0855               	movf	getADCValue@adcSum+1,w
 10152  0AA6  00CC               	movwf	?_getADCValue+1
 10153  0AA7  0856               	movf	getADCValue@adcSum+2,w
 10154  0AA8  00CD               	movwf	?_getADCValue+2
 10155  0AA9  0008               	return
 10156  0AAA                     __end_of_getADCValue:	
 10157                           
 10158                           	psect	text43
 10159  1269                     __ptext43:	
 10160 ;; *************** function _doWDTSleep *****************
 10161 ;; Defined at:
 10162 ;;		line 22 in file "main.c"
 10163 ;; Parameters:    Size  Location     Type
 10164 ;;  wdtps           1    wreg     unsigned char 
 10165 ;; Auto vars:     Size  Location     Type
 10166 ;;  wdtps           1    1[BANK0 ] unsigned char 
 10167 ;; Return value:  Size  Location     Type
 10168 ;;                  1    wreg      void 
 10169 ;; Registers used:
 10170 ;;		wreg, status,2, status,0
 10171 ;; Tracked objects:
 10172 ;;		On entry : 0/0
 10173 ;;		On exit  : 0/0
 10174 ;;		Unchanged: 0/0
 10175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10178 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10179 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10180 ;;Total ram usage:        2 bytes
 10181 ;; Hardware stack levels used:    1
 10182 ;; Hardware stack levels required when called:    7
 10183 ;; This function calls:
 10184 ;;		Nothing
 10185 ;; This function is called by:
 10186 ;;		_sleep
 10187 ;;		_getADCValue
 10188 ;; This function uses a non-reentrant model
 10189 ;;
 10190                           
 10191                           
 10192                           ;psect for function _doWDTSleep
 10193  1269                     _doWDTSleep:	
 10194                           
 10195                           ;incstack = 0
 10196                           ; Regs used in _doWDTSleep: [wreg+status,2+status,0]
 10197                           ;doWDTSleep@wdtps stored from wreg
 10198  1269  0020               	movlb	0	; select bank0
 10199  126A  00A1               	movwf	doWDTSleep@wdtps
 10200                           
 10201                           ;main.c: 25: WDTCONbits.WDTPS = wdtps;
 10202  126B  0821               	movf	doWDTSleep@wdtps,w
 10203  126C  00A0               	movwf	??_doWDTSleep
 10204  126D  0DA0               	rlf	??_doWDTSleep,f
 10205  126E  0021               	movlb	1	; select bank1
 10206  126F  0817               	movf	23,w	;volatile
 10207  1270  0020               	movlb	0	; select bank0
 10208  1271  0620               	xorwf	??_doWDTSleep,w
 10209  1272  39C1               	andlw	-63
 10210  1273  0620               	xorwf	??_doWDTSleep,w
 10211  1274  0021               	movlb	1	; select bank1
 10212  1275  0097               	movwf	23	;volatile
 10213  1276  0063               	sleep	;# 
 10214                           
 10215                           ;main.c: 29: __nop();
 10216  1277  0000               	nop
 10217                           
 10218                           ;main.c: 30: __nop();
 10219  1278  0000               	nop
 10220                           
 10221                           ;main.c: 32: WDTCONbits.WDTPS = 0b01101;
 10222  1279  0021               	movlb	1	; select bank1
 10223  127A  0817               	movf	23,w	;volatile
 10224  127B  39C1               	andlw	-63
 10225  127C  381A               	iorlw	26
 10226  127D  0097               	movwf	23	;volatile
 10227  127E  0064               	clrwdt	;# 
 10228  127F  0008               	return
 10229  1280                     __end_of_doWDTSleep:	
 10230                           
 10231                           	psect	text44
 10232  0BF1                     __ptext44:	
 10233 ;; *************** function ___ftdiv *****************
 10234 ;; Defined at:
 10235 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
 10236 ;; Parameters:    Size  Location     Type
 10237 ;;  f2              3   27[BANK0 ] float 
 10238 ;;  f1              3   30[BANK0 ] float 
 10239 ;; Auto vars:     Size  Location     Type
 10240 ;;  f3              3   38[BANK0 ] float 
 10241 ;;  sign            1   42[BANK0 ] unsigned char 
 10242 ;;  exp             1   41[BANK0 ] unsigned char 
 10243 ;;  cntr            1   37[BANK0 ] unsigned char 
 10244 ;; Return value:  Size  Location     Type
 10245 ;;                  3   27[BANK0 ] float 
 10246 ;; Registers used:
 10247 ;;		wreg, status,2, status,0, pclath, cstack
 10248 ;; Tracked objects:
 10249 ;;		On entry : 0/0
 10250 ;;		On exit  : 0/0
 10251 ;;		Unchanged: 0/0
 10252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10253 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;Total ram usage:       16 bytes
 10258 ;; Hardware stack levels used:    1
 10259 ;; Hardware stack levels required when called:    8
 10260 ;; This function calls:
 10261 ;;		___ftpack
 10262 ;; This function is called by:
 10263 ;;		_getADCValue
 10264 ;;		_loop
 10265 ;;		_strtod
 10266 ;; This function uses a non-reentrant model
 10267 ;;
 10268                           
 10269                           
 10270                           ;psect for function ___ftdiv
 10271  0BF1                     ___ftdiv:	
 10272                           
 10273                           ;incstack = 0
 10274                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10275  0BF1  0020               	movlb	0	; select bank0
 10276  0BF2  083E               	movf	___ftdiv@f1,w
 10277  0BF3  00C1               	movwf	??___ftdiv
 10278  0BF4  083F               	movf	___ftdiv@f1+1,w
 10279  0BF5  00C2               	movwf	??___ftdiv+1
 10280  0BF6  0840               	movf	___ftdiv@f1+2,w
 10281  0BF7  00C3               	movwf	??___ftdiv+2
 10282  0BF8  1003               	clrc
 10283  0BF9  0D42               	rlf	??___ftdiv+1,w
 10284  0BFA  0D43               	rlf	??___ftdiv+2,w
 10285  0BFB  00C4               	movwf	??___ftdiv+3
 10286  0BFC  0844               	movf	??___ftdiv+3,w
 10287  0BFD  00C9               	movwf	___ftdiv@exp
 10288  0BFE  0849               	movf	___ftdiv@exp,w
 10289  0BFF  1D03               	btfss	3,2
 10290  0C00  2C08               	goto	l2888
 10291  0C01  3000               	movlw	0
 10292  0C02  00BB               	movwf	?___ftdiv
 10293  0C03  3000               	movlw	0
 10294  0C04  00BC               	movwf	?___ftdiv+1
 10295  0C05  3000               	movlw	0
 10296  0C06  00BD               	movwf	?___ftdiv+2
 10297  0C07  0008               	return
 10298  0C08                     l2888:	
 10299  0C08  083B               	movf	___ftdiv@f2,w
 10300  0C09  00C1               	movwf	??___ftdiv
 10301  0C0A  083C               	movf	___ftdiv@f2+1,w
 10302  0C0B  00C2               	movwf	??___ftdiv+1
 10303  0C0C  083D               	movf	___ftdiv@f2+2,w
 10304  0C0D  00C3               	movwf	??___ftdiv+2
 10305  0C0E  1003               	clrc
 10306  0C0F  0D42               	rlf	??___ftdiv+1,w
 10307  0C10  0D43               	rlf	??___ftdiv+2,w
 10308  0C11  00C4               	movwf	??___ftdiv+3
 10309  0C12  0844               	movf	??___ftdiv+3,w
 10310  0C13  00CA               	movwf	___ftdiv@sign
 10311  0C14  084A               	movf	___ftdiv@sign,w
 10312  0C15  1D03               	btfss	3,2
 10313  0C16  2C1E               	goto	l2894
 10314  0C17  3000               	movlw	0
 10315  0C18  00BB               	movwf	?___ftdiv
 10316  0C19  3000               	movlw	0
 10317  0C1A  00BC               	movwf	?___ftdiv+1
 10318  0C1B  3000               	movlw	0
 10319  0C1C  00BD               	movwf	?___ftdiv+2
 10320  0C1D  0008               	return
 10321  0C1E                     l2894:	
 10322  0C1E  3000               	movlw	0
 10323  0C1F  00C6               	movwf	___ftdiv@f3
 10324  0C20  3000               	movlw	0
 10325  0C21  00C7               	movwf	___ftdiv@f3+1
 10326  0C22  3000               	movlw	0
 10327  0C23  00C8               	movwf	___ftdiv@f3+2
 10328  0C24  3089               	movlw	137
 10329  0C25  074A               	addwf	___ftdiv@sign,w
 10330  0C26  00C1               	movwf	??___ftdiv
 10331  0C27  0841               	movf	??___ftdiv,w
 10332  0C28  02C9               	subwf	___ftdiv@exp,f
 10333  0C29  083E               	movf	___ftdiv@f1,w
 10334  0C2A  00C1               	movwf	??___ftdiv
 10335  0C2B  083F               	movf	___ftdiv@f1+1,w
 10336  0C2C  00C2               	movwf	??___ftdiv+1
 10337  0C2D  0840               	movf	___ftdiv@f1+2,w
 10338  0C2E  00C3               	movwf	??___ftdiv+2
 10339  0C2F  3010               	movlw	16
 10340  0C30                     u2645:	
 10341  0C30  36C3               	lsrf	??___ftdiv+2,f
 10342  0C31  0CC2               	rrf	??___ftdiv+1,f
 10343  0C32  0CC1               	rrf	??___ftdiv,f
 10344  0C33  0B89               	decfsz	9,f
 10345  0C34  2C30               	goto	u2645
 10346  0C35  0841               	movf	??___ftdiv,w
 10347  0C36  00C4               	movwf	??___ftdiv+3
 10348  0C37  0844               	movf	??___ftdiv+3,w
 10349  0C38  00CA               	movwf	___ftdiv@sign
 10350  0C39  083B               	movf	___ftdiv@f2,w
 10351  0C3A  00C1               	movwf	??___ftdiv
 10352  0C3B  083C               	movf	___ftdiv@f2+1,w
 10353  0C3C  00C2               	movwf	??___ftdiv+1
 10354  0C3D  083D               	movf	___ftdiv@f2+2,w
 10355  0C3E  00C3               	movwf	??___ftdiv+2
 10356  0C3F  3010               	movlw	16
 10357  0C40                     u2655:	
 10358  0C40  36C3               	lsrf	??___ftdiv+2,f
 10359  0C41  0CC2               	rrf	??___ftdiv+1,f
 10360  0C42  0CC1               	rrf	??___ftdiv,f
 10361  0C43  0B89               	decfsz	9,f
 10362  0C44  2C40               	goto	u2655
 10363  0C45  0841               	movf	??___ftdiv,w
 10364  0C46  00C4               	movwf	??___ftdiv+3
 10365  0C47  0844               	movf	??___ftdiv+3,w
 10366  0C48  06CA               	xorwf	___ftdiv@sign,f
 10367  0C49  3080               	movlw	128
 10368  0C4A  00C1               	movwf	??___ftdiv
 10369  0C4B  0841               	movf	??___ftdiv,w
 10370  0C4C  05CA               	andwf	___ftdiv@sign,f
 10371  0C4D  17BF               	bsf	___ftdiv@f1+1,7
 10372  0C4E  30FF               	movlw	255
 10373  0C4F  05BE               	andwf	___ftdiv@f1,f
 10374  0C50  30FF               	movlw	255
 10375  0C51  05BF               	andwf	___ftdiv@f1+1,f
 10376  0C52  3000               	movlw	0
 10377  0C53  05C0               	andwf	___ftdiv@f1+2,f
 10378  0C54  17BC               	bsf	___ftdiv@f2+1,7
 10379  0C55  30FF               	movlw	255
 10380  0C56  05BB               	andwf	___ftdiv@f2,f
 10381  0C57  30FF               	movlw	255
 10382  0C58  05BC               	andwf	___ftdiv@f2+1,f
 10383  0C59  3000               	movlw	0
 10384  0C5A  05BD               	andwf	___ftdiv@f2+2,f
 10385  0C5B  3018               	movlw	24
 10386  0C5C  00C1               	movwf	??___ftdiv
 10387  0C5D  0841               	movf	??___ftdiv,w
 10388  0C5E  00C5               	movwf	___ftdiv@cntr
 10389  0C5F                     l2908:	
 10390  0C5F  3001               	movlw	1
 10391  0C60                     u2665:	
 10392  0C60  35C6               	lslf	___ftdiv@f3,f
 10393  0C61  0DC7               	rlf	___ftdiv@f3+1,f
 10394  0C62  0DC8               	rlf	___ftdiv@f3+2,f
 10395  0C63  0B89               	decfsz	9,f
 10396  0C64  2C60               	goto	u2665
 10397  0C65  083D               	movf	___ftdiv@f2+2,w
 10398  0C66  0240               	subwf	___ftdiv@f1+2,w
 10399  0C67  1D03               	skipz
 10400  0C68  2C6F               	goto	u2675
 10401  0C69  083C               	movf	___ftdiv@f2+1,w
 10402  0C6A  023F               	subwf	___ftdiv@f1+1,w
 10403  0C6B  1D03               	skipz
 10404  0C6C  2C6F               	goto	u2675
 10405  0C6D  083B               	movf	___ftdiv@f2,w
 10406  0C6E  023E               	subwf	___ftdiv@f1,w
 10407  0C6F                     u2675:	
 10408  0C6F  1C03               	skipc
 10409  0C70  2C78               	goto	l2916
 10410  0C71  083B               	movf	___ftdiv@f2,w
 10411  0C72  02BE               	subwf	___ftdiv@f1,f
 10412  0C73  083C               	movf	___ftdiv@f2+1,w
 10413  0C74  3BBF               	subwfb	___ftdiv@f1+1,f
 10414  0C75  083D               	movf	___ftdiv@f2+2,w
 10415  0C76  3BC0               	subwfb	___ftdiv@f1+2,f
 10416  0C77  1446               	bsf	___ftdiv@f3,0
 10417  0C78                     l2916:	
 10418  0C78  3001               	movlw	1
 10419  0C79                     u2685:	
 10420  0C79  35BE               	lslf	___ftdiv@f1,f
 10421  0C7A  0DBF               	rlf	___ftdiv@f1+1,f
 10422  0C7B  0DC0               	rlf	___ftdiv@f1+2,f
 10423  0C7C  0B89               	decfsz	9,f
 10424  0C7D  2C79               	goto	u2685
 10425  0C7E  3001               	movlw	1
 10426  0C7F  02C5               	subwf	___ftdiv@cntr,f
 10427  0C80  1D03               	btfss	3,2
 10428  0C81  2C5F               	goto	l2908
 10429  0C82  0846               	movf	___ftdiv@f3,w
 10430  0C83  00A0               	movwf	___ftpack@arg
 10431  0C84  0847               	movf	___ftdiv@f3+1,w
 10432  0C85  00A1               	movwf	___ftpack@arg+1
 10433  0C86  0848               	movf	___ftdiv@f3+2,w
 10434  0C87  00A2               	movwf	___ftpack@arg+2
 10435  0C88  0849               	movf	___ftdiv@exp,w
 10436  0C89  00C1               	movwf	??___ftdiv
 10437  0C8A  0841               	movf	??___ftdiv,w
 10438  0C8B  00A3               	movwf	___ftpack@exp
 10439  0C8C  084A               	movf	___ftdiv@sign,w
 10440  0C8D  00C2               	movwf	??___ftdiv+1
 10441  0C8E  0842               	movf	??___ftdiv+1,w
 10442  0C8F  00A4               	movwf	___ftpack@sign
 10443  0C90  3189  2121         	fcall	___ftpack
 10444  0C92  0020               	movlb	0	; select bank0
 10445  0C93  0820               	movf	?___ftpack,w
 10446  0C94  00BB               	movwf	?___ftdiv
 10447  0C95  0821               	movf	?___ftpack+1,w
 10448  0C96  00BC               	movwf	?___ftdiv+1
 10449  0C97  0822               	movf	?___ftpack+2,w
 10450  0C98  00BD               	movwf	?___ftdiv+2
 10451  0C99  0008               	return
 10452  0C9A                     __end_of___ftdiv:	
 10453                           
 10454                           	psect	text45
 10455  0F0A                     __ptext45:	
 10456 ;; *************** function ___ftadd *****************
 10457 ;; Defined at:
 10458 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
 10459 ;; Parameters:    Size  Location     Type
 10460 ;;  f1              3   14[BANK0 ] float 
 10461 ;;  f2              3   17[BANK0 ] float 
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;  exp1            1   26[BANK0 ] unsigned char 
 10464 ;;  exp2            1   25[BANK0 ] unsigned char 
 10465 ;;  sign            1   24[BANK0 ] unsigned char 
 10466 ;; Return value:  Size  Location     Type
 10467 ;;                  3   14[BANK0 ] float 
 10468 ;; Registers used:
 10469 ;;		wreg, status,2, status,0, pclath, cstack
 10470 ;; Tracked objects:
 10471 ;;		On entry : 0/0
 10472 ;;		On exit  : 0/0
 10473 ;;		Unchanged: 0/0
 10474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10475 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10476 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10477 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10478 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10479 ;;Total ram usage:       13 bytes
 10480 ;; Hardware stack levels used:    1
 10481 ;; Hardware stack levels required when called:    8
 10482 ;; This function calls:
 10483 ;;		___ftpack
 10484 ;; This function is called by:
 10485 ;;		_getADCValue
 10486 ;;		_loop
 10487 ;;		___ftsub
 10488 ;; This function uses a non-reentrant model
 10489 ;;
 10490                           
 10491                           
 10492                           ;psect for function ___ftadd
 10493  0F0A                     ___ftadd:	
 10494                           
 10495                           ;incstack = 0
 10496                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10497  0F0A  0020               	movlb	0	; select bank0
 10498  0F0B  082E               	movf	___ftadd@f1,w
 10499  0F0C  00B4               	movwf	??___ftadd
 10500  0F0D  082F               	movf	___ftadd@f1+1,w
 10501  0F0E  00B5               	movwf	??___ftadd+1
 10502  0F0F  0830               	movf	___ftadd@f1+2,w
 10503  0F10  00B6               	movwf	??___ftadd+2
 10504  0F11  1003               	clrc
 10505  0F12  0D35               	rlf	??___ftadd+1,w
 10506  0F13  0D36               	rlf	??___ftadd+2,w
 10507  0F14  00B7               	movwf	??___ftadd+3
 10508  0F15  0837               	movf	??___ftadd+3,w
 10509  0F16  00BA               	movwf	___ftadd@exp1
 10510  0F17  0831               	movf	___ftadd@f2,w
 10511  0F18  00B4               	movwf	??___ftadd
 10512  0F19  0832               	movf	___ftadd@f2+1,w
 10513  0F1A  00B5               	movwf	??___ftadd+1
 10514  0F1B  0833               	movf	___ftadd@f2+2,w
 10515  0F1C  00B6               	movwf	??___ftadd+2
 10516  0F1D  1003               	clrc
 10517  0F1E  0D35               	rlf	??___ftadd+1,w
 10518  0F1F  0D36               	rlf	??___ftadd+2,w
 10519  0F20  00B7               	movwf	??___ftadd+3
 10520  0F21  0837               	movf	??___ftadd+3,w
 10521  0F22  00B9               	movwf	___ftadd@exp2
 10522  0F23  083A               	movf	___ftadd@exp1,w
 10523  0F24  1903               	btfsc	3,2
 10524  0F25  2F32               	goto	l3154
 10525  0F26  0839               	movf	___ftadd@exp2,w
 10526  0F27  023A               	subwf	___ftadd@exp1,w
 10527  0F28  1803               	skipnc
 10528  0F29  2F39               	goto	l3158
 10529  0F2A  033A               	decf	___ftadd@exp1,w
 10530  0F2B  3AFF               	xorlw	255
 10531  0F2C  0739               	addwf	___ftadd@exp2,w
 10532  0F2D  00B4               	movwf	??___ftadd
 10533  0F2E  3019               	movlw	25
 10534  0F2F  0234               	subwf	??___ftadd,w
 10535  0F30  1C03               	skipc
 10536  0F31  2F39               	goto	l3158
 10537  0F32                     l3154:	
 10538  0F32  0831               	movf	___ftadd@f2,w
 10539  0F33  00AE               	movwf	?___ftadd
 10540  0F34  0832               	movf	___ftadd@f2+1,w
 10541  0F35  00AF               	movwf	?___ftadd+1
 10542  0F36  0833               	movf	___ftadd@f2+2,w
 10543  0F37  00B0               	movwf	?___ftadd+2
 10544  0F38  0008               	return
 10545  0F39                     l3158:	
 10546  0F39  0839               	movf	___ftadd@exp2,w
 10547  0F3A  1903               	btfsc	3,2
 10548  0F3B  0008               	return
 10549  0F3C  083A               	movf	___ftadd@exp1,w
 10550  0F3D  0239               	subwf	___ftadd@exp2,w
 10551  0F3E  1803               	skipnc
 10552  0F3F  2F48               	goto	l3164
 10553  0F40  0339               	decf	___ftadd@exp2,w
 10554  0F41  3AFF               	xorlw	255
 10555  0F42  073A               	addwf	___ftadd@exp1,w
 10556  0F43  00B4               	movwf	??___ftadd
 10557  0F44  3019               	movlw	25
 10558  0F45  0234               	subwf	??___ftadd,w
 10559  0F46  1803               	btfsc	3,0
 10560  0F47  0008               	return
 10561  0F48                     l3164:	
 10562  0F48  3006               	movlw	6
 10563  0F49  00B4               	movwf	??___ftadd
 10564  0F4A  0834               	movf	??___ftadd,w
 10565  0F4B  00B8               	movwf	___ftadd@sign
 10566  0F4C  1BB0               	btfsc	___ftadd@f1+2,7
 10567  0F4D  17B8               	bsf	___ftadd@sign,7
 10568  0F4E  1BB3               	btfsc	___ftadd@f2+2,7
 10569  0F4F  1738               	bsf	___ftadd@sign,6
 10570  0F50  17AF               	bsf	___ftadd@f1+1,7
 10571  0F51  30FF               	movlw	255
 10572  0F52  05AE               	andwf	___ftadd@f1,f
 10573  0F53  30FF               	movlw	255
 10574  0F54  05AF               	andwf	___ftadd@f1+1,f
 10575  0F55  3000               	movlw	0
 10576  0F56  05B0               	andwf	___ftadd@f1+2,f
 10577  0F57  17B2               	bsf	___ftadd@f2+1,7
 10578  0F58  30FF               	movlw	255
 10579  0F59  05B1               	andwf	___ftadd@f2,f
 10580  0F5A  30FF               	movlw	255
 10581  0F5B  05B2               	andwf	___ftadd@f2+1,f
 10582  0F5C  3000               	movlw	0
 10583  0F5D  05B3               	andwf	___ftadd@f2+2,f
 10584  0F5E  0839               	movf	___ftadd@exp2,w
 10585  0F5F  023A               	subwf	___ftadd@exp1,w
 10586  0F60  1803               	skipnc
 10587  0F61  2F84               	goto	l3186
 10588  0F62                     l3176:	
 10589  0F62  3001               	movlw	1
 10590  0F63                     u3205:	
 10591  0F63  35B1               	lslf	___ftadd@f2,f
 10592  0F64  0DB2               	rlf	___ftadd@f2+1,f
 10593  0F65  0DB3               	rlf	___ftadd@f2+2,f
 10594  0F66  0B89               	decfsz	9,f
 10595  0F67  2F63               	goto	u3205
 10596  0F68  3001               	movlw	1
 10597  0F69  02B9               	subwf	___ftadd@exp2,f
 10598  0F6A  0839               	movf	___ftadd@exp2,w
 10599  0F6B  063A               	xorwf	___ftadd@exp1,w
 10600  0F6C  1903               	skipnz
 10601  0F6D  2F7F               	goto	l3184
 10602  0F6E  3001               	movlw	1
 10603  0F6F  02B8               	subwf	___ftadd@sign,f
 10604  0F70  0838               	movf	___ftadd@sign,w
 10605  0F71  3907               	andlw	7
 10606  0F72  1903               	btfsc	3,2
 10607  0F73  2F7F               	goto	l3184
 10608  0F74  2F62               	goto	l3176
 10609  0F75                     l3182:	
 10610  0F75  3001               	movlw	1
 10611  0F76                     u3235:	
 10612  0F76  36B0               	lsrf	___ftadd@f1+2,f
 10613  0F77  0CAF               	rrf	___ftadd@f1+1,f
 10614  0F78  0CAE               	rrf	___ftadd@f1,f
 10615  0F79  0B89               	decfsz	9,f
 10616  0F7A  2F76               	goto	u3235
 10617  0F7B  3001               	movlw	1
 10618  0F7C  00B4               	movwf	??___ftadd
 10619  0F7D  0834               	movf	??___ftadd,w
 10620  0F7E  07BA               	addwf	___ftadd@exp1,f
 10621  0F7F                     l3184:	
 10622  0F7F  083A               	movf	___ftadd@exp1,w
 10623  0F80  0639               	xorwf	___ftadd@exp2,w
 10624  0F81  1903               	btfsc	3,2
 10625  0F82  2FA9               	goto	l724
 10626  0F83  2F75               	goto	l3182
 10627  0F84                     l3186:	
 10628  0F84  083A               	movf	___ftadd@exp1,w
 10629  0F85  0239               	subwf	___ftadd@exp2,w
 10630  0F86  1803               	skipnc
 10631  0F87  2FA9               	goto	l724
 10632  0F88                     l3188:	
 10633  0F88  3001               	movlw	1
 10634  0F89                     u3265:	
 10635  0F89  35AE               	lslf	___ftadd@f1,f
 10636  0F8A  0DAF               	rlf	___ftadd@f1+1,f
 10637  0F8B  0DB0               	rlf	___ftadd@f1+2,f
 10638  0F8C  0B89               	decfsz	9,f
 10639  0F8D  2F89               	goto	u3265
 10640  0F8E  3001               	movlw	1
 10641  0F8F  02BA               	subwf	___ftadd@exp1,f
 10642  0F90  0839               	movf	___ftadd@exp2,w
 10643  0F91  063A               	xorwf	___ftadd@exp1,w
 10644  0F92  1903               	skipnz
 10645  0F93  2FA5               	goto	l3196
 10646  0F94  3001               	movlw	1
 10647  0F95  02B8               	subwf	___ftadd@sign,f
 10648  0F96  0838               	movf	___ftadd@sign,w
 10649  0F97  3907               	andlw	7
 10650  0F98  1903               	btfsc	3,2
 10651  0F99  2FA5               	goto	l3196
 10652  0F9A  2F88               	goto	l3188
 10653  0F9B                     l3194:	
 10654  0F9B  3001               	movlw	1
 10655  0F9C                     u3295:	
 10656  0F9C  36B3               	lsrf	___ftadd@f2+2,f
 10657  0F9D  0CB2               	rrf	___ftadd@f2+1,f
 10658  0F9E  0CB1               	rrf	___ftadd@f2,f
 10659  0F9F  0B89               	decfsz	9,f
 10660  0FA0  2F9C               	goto	u3295
 10661  0FA1  3001               	movlw	1
 10662  0FA2  00B4               	movwf	??___ftadd
 10663  0FA3  0834               	movf	??___ftadd,w
 10664  0FA4  07B9               	addwf	___ftadd@exp2,f
 10665  0FA5                     l3196:	
 10666  0FA5  083A               	movf	___ftadd@exp1,w
 10667  0FA6  0639               	xorwf	___ftadd@exp2,w
 10668  0FA7  1D03               	skipz
 10669  0FA8  2F9B               	goto	l3194
 10670  0FA9                     l724:	
 10671  0FA9  1FB8               	btfss	___ftadd@sign,7
 10672  0FAA  2FBB               	goto	l3200
 10673  0FAB  30FF               	movlw	255
 10674  0FAC  06AE               	xorwf	___ftadd@f1,f
 10675  0FAD  30FF               	movlw	255
 10676  0FAE  06AF               	xorwf	___ftadd@f1+1,f
 10677  0FAF  30FF               	movlw	255
 10678  0FB0  06B0               	xorwf	___ftadd@f1+2,f
 10679  0FB1  3001               	movlw	1
 10680  0FB2  07AE               	addwf	___ftadd@f1,f
 10681  0FB3  3000               	movlw	0
 10682  0FB4  1803               	skipnc
 10683  0FB5  3001               	movlw	1
 10684  0FB6  07AF               	addwf	___ftadd@f1+1,f
 10685  0FB7  3000               	movlw	0
 10686  0FB8  1803               	skipnc
 10687  0FB9  3001               	movlw	1
 10688  0FBA  07B0               	addwf	___ftadd@f1+2,f
 10689  0FBB                     l3200:	
 10690  0FBB  1F38               	btfss	___ftadd@sign,6
 10691  0FBC  2FCD               	goto	l3204
 10692  0FBD  30FF               	movlw	255
 10693  0FBE  06B1               	xorwf	___ftadd@f2,f
 10694  0FBF  30FF               	movlw	255
 10695  0FC0  06B2               	xorwf	___ftadd@f2+1,f
 10696  0FC1  30FF               	movlw	255
 10697  0FC2  06B3               	xorwf	___ftadd@f2+2,f
 10698  0FC3  3001               	movlw	1
 10699  0FC4  07B1               	addwf	___ftadd@f2,f
 10700  0FC5  3000               	movlw	0
 10701  0FC6  1803               	skipnc
 10702  0FC7  3001               	movlw	1
 10703  0FC8  07B2               	addwf	___ftadd@f2+1,f
 10704  0FC9  3000               	movlw	0
 10705  0FCA  1803               	skipnc
 10706  0FCB  3001               	movlw	1
 10707  0FCC  07B3               	addwf	___ftadd@f2+2,f
 10708  0FCD                     l3204:	
 10709  0FCD  01B8               	clrf	___ftadd@sign
 10710  0FCE  082E               	movf	___ftadd@f1,w
 10711  0FCF  07B1               	addwf	___ftadd@f2,f
 10712  0FD0  082F               	movf	___ftadd@f1+1,w
 10713  0FD1  3DB2               	addwfc	___ftadd@f2+1,f
 10714  0FD2  0830               	movf	___ftadd@f1+2,w
 10715  0FD3  3DB3               	addwfc	___ftadd@f2+2,f
 10716  0FD4  1FB3               	btfss	___ftadd@f2+2,7
 10717  0FD5  2FE8               	goto	l3214
 10718  0FD6  30FF               	movlw	255
 10719  0FD7  06B1               	xorwf	___ftadd@f2,f
 10720  0FD8  30FF               	movlw	255
 10721  0FD9  06B2               	xorwf	___ftadd@f2+1,f
 10722  0FDA  30FF               	movlw	255
 10723  0FDB  06B3               	xorwf	___ftadd@f2+2,f
 10724  0FDC  3001               	movlw	1
 10725  0FDD  07B1               	addwf	___ftadd@f2,f
 10726  0FDE  3000               	movlw	0
 10727  0FDF  1803               	skipnc
 10728  0FE0  3001               	movlw	1
 10729  0FE1  07B2               	addwf	___ftadd@f2+1,f
 10730  0FE2  3000               	movlw	0
 10731  0FE3  1803               	skipnc
 10732  0FE4  3001               	movlw	1
 10733  0FE5  07B3               	addwf	___ftadd@f2+2,f
 10734  0FE6  01B8               	clrf	___ftadd@sign
 10735  0FE7  0AB8               	incf	___ftadd@sign,f
 10736  0FE8                     l3214:	
 10737  0FE8  0831               	movf	___ftadd@f2,w
 10738  0FE9  00A0               	movwf	___ftpack@arg
 10739  0FEA  0832               	movf	___ftadd@f2+1,w
 10740  0FEB  00A1               	movwf	___ftpack@arg+1
 10741  0FEC  0833               	movf	___ftadd@f2+2,w
 10742  0FED  00A2               	movwf	___ftpack@arg+2
 10743  0FEE  083A               	movf	___ftadd@exp1,w
 10744  0FEF  00B4               	movwf	??___ftadd
 10745  0FF0  0834               	movf	??___ftadd,w
 10746  0FF1  00A3               	movwf	___ftpack@exp
 10747  0FF2  0838               	movf	___ftadd@sign,w
 10748  0FF3  00B5               	movwf	??___ftadd+1
 10749  0FF4  0835               	movf	??___ftadd+1,w
 10750  0FF5  00A4               	movwf	___ftpack@sign
 10751  0FF6  3189  2121         	fcall	___ftpack
 10752  0FF8  0020               	movlb	0	; select bank0
 10753  0FF9  0820               	movf	?___ftpack,w
 10754  0FFA  00AE               	movwf	?___ftadd
 10755  0FFB  0821               	movf	?___ftpack+1,w
 10756  0FFC  00AF               	movwf	?___ftadd+1
 10757  0FFD  0822               	movf	?___ftpack+2,w
 10758  0FFE  00B0               	movwf	?___ftadd+2
 10759  0FFF  0008               	return
 10760  1000                     __end_of___ftadd:	
 10761                           
 10762                           	psect	text46
 10763  13B2                     __ptext46:	
 10764 ;; *************** function ___awtoft *****************
 10765 ;; Defined at:
 10766 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;  c               2    8[BANK0 ] int 
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;  sign            1   13[BANK0 ] unsigned char 
 10771 ;; Return value:  Size  Location     Type
 10772 ;;                  3    8[BANK0 ] float 
 10773 ;; Registers used:
 10774 ;;		wreg, status,2, status,0, pclath, cstack
 10775 ;; Tracked objects:
 10776 ;;		On entry : 0/0
 10777 ;;		On exit  : 0/0
 10778 ;;		Unchanged: 0/0
 10779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10780 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10783 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10784 ;;Total ram usage:        6 bytes
 10785 ;; Hardware stack levels used:    1
 10786 ;; Hardware stack levels required when called:    8
 10787 ;; This function calls:
 10788 ;;		___ftpack
 10789 ;; This function is called by:
 10790 ;;		_getADCValue
 10791 ;;		_loop
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795                           
 10796                           ;psect for function ___awtoft
 10797  13B2                     ___awtoft:	
 10798                           
 10799                           ;incstack = 0
 10800                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 10801  13B2  0020               	movlb	0	; select bank0
 10802  13B3  01AD               	clrf	___awtoft@sign
 10803  13B4  1FA9               	btfss	___awtoft@c+1,7
 10804  13B5  2BBD               	goto	l3754
 10805  13B6  09A8               	comf	___awtoft@c,f
 10806  13B7  09A9               	comf	___awtoft@c+1,f
 10807  13B8  0AA8               	incf	___awtoft@c,f
 10808  13B9  1903               	skipnz
 10809  13BA  0AA9               	incf	___awtoft@c+1,f
 10810  13BB  01AD               	clrf	___awtoft@sign
 10811  13BC  0AAD               	incf	___awtoft@sign,f
 10812  13BD                     l3754:	
 10813  13BD  0828               	movf	___awtoft@c,w
 10814  13BE  00A0               	movwf	___ftpack@arg
 10815  13BF  0829               	movf	___awtoft@c+1,w
 10816  13C0  00A1               	movwf	___ftpack@arg+1
 10817  13C1  01A2               	clrf	___ftpack@arg+2
 10818  13C2  308E               	movlw	142
 10819  13C3  00AB               	movwf	??___awtoft
 10820  13C4  082B               	movf	??___awtoft,w
 10821  13C5  00A3               	movwf	___ftpack@exp
 10822  13C6  082D               	movf	___awtoft@sign,w
 10823  13C7  00AC               	movwf	??___awtoft+1
 10824  13C8  082C               	movf	??___awtoft+1,w
 10825  13C9  00A4               	movwf	___ftpack@sign
 10826  13CA  3189  2121         	fcall	___ftpack
 10827  13CC  0020               	movlb	0	; select bank0
 10828  13CD  0820               	movf	?___ftpack,w
 10829  13CE  00A8               	movwf	?___awtoft
 10830  13CF  0821               	movf	?___ftpack+1,w
 10831  13D0  00A9               	movwf	?___awtoft+1
 10832  13D1  0822               	movf	?___ftpack+2,w
 10833  13D2  00AA               	movwf	?___awtoft+2
 10834  13D3  0008               	return
 10835  13D4                     __end_of___awtoft:	
 10836                           
 10837                           	psect	text47
 10838  1255                     __ptext47:	
 10839 ;; *************** function _checkTXPower *****************
 10840 ;; Defined at:
 10841 ;;		line 157 in file "main.c"
 10842 ;; Parameters:    Size  Location     Type
 10843 ;;		None
 10844 ;; Auto vars:     Size  Location     Type
 10845 ;;  rxPacket        1    8[BANK0 ] PTR struct .
 10846 ;;		 -> RXPacket(33), 
 10847 ;; Return value:  Size  Location     Type
 10848 ;;                  1    wreg      void 
 10849 ;; Registers used:
 10850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10851 ;; Tracked objects:
 10852 ;;		On entry : 0/0
 10853 ;;		On exit  : 0/0
 10854 ;;		Unchanged: 0/0
 10855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10857 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10859 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10860 ;;Total ram usage:        2 bytes
 10861 ;; Hardware stack levels used:    1
 10862 ;; Hardware stack levels required when called:   11
 10863 ;; This function calls:
 10864 ;;		_nrf24l01ChangeTXPower
 10865 ;;		_nrf24l01GetRXPacket
 10866 ;; This function is called by:
 10867 ;;		_loop
 10868 ;; This function uses a non-reentrant model
 10869 ;;
 10870                           
 10871                           
 10872                           ;psect for function _checkTXPower
 10873  1255                     _checkTXPower:	
 10874                           
 10875                           ;main.c: 158: nrf24l01Packet_t * rxPacket = nrf24l01GetRXPacket();
 10876                           
 10877                           ;incstack = 0
 10878                           ; Regs used in _checkTXPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10879  1255  3180  2002  3192   	fcall	_nrf24l01GetRXPacket
 10880  1258  0020               	movlb	0	; select bank0
 10881  1259  00A7               	movwf	??_checkTXPower
 10882  125A  0827               	movf	??_checkTXPower,w
 10883  125B  00A8               	movwf	checkTXPower@rxPacket
 10884                           
 10885                           ;main.c: 160: if (rxPacket->packetData.ACKRPD){
 10886  125C  0828               	movf	checkTXPower@rxPacket,w
 10887  125D  0086               	movwf	6
 10888  125E  3001               	movlw	1	; select bank2/3
 10889  125F  0087               	movwf	7
 10890  1260  1C81               	btfss	1,1
 10891  1261  0008               	return
 10892                           
 10893                           ;main.c: 161: nrf24l01ChangeTXPower(-1);
 10894  1262  30FF               	movlw	255
 10895  1263  00A3               	movwf	nrf24l01ChangeTXPower@addPower
 10896  1264  30FF               	movlw	255
 10897  1265  00A4               	movwf	nrf24l01ChangeTXPower@addPower+1
 10898  1266  3196  265F         	fcall	_nrf24l01ChangeTXPower
 10899  1268  0008               	return
 10900  1269                     __end_of_checkTXPower:	
 10901                           
 10902                           	psect	text48
 10903  0002                     __ptext48:	
 10904 ;; *************** function _nrf24l01GetRXPacket *****************
 10905 ;; Defined at:
 10906 ;;		line 137 in file "nrf24l01.c"
 10907 ;; Parameters:    Size  Location     Type
 10908 ;;		None
 10909 ;; Auto vars:     Size  Location     Type
 10910 ;;		None
 10911 ;; Return value:  Size  Location     Type
 10912 ;;                  1    wreg      PTR struct .
 10913 ;; Registers used:
 10914 ;;		wreg
 10915 ;; Tracked objects:
 10916 ;;		On entry : 0/0
 10917 ;;		On exit  : 0/0
 10918 ;;		Unchanged: 0/0
 10919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10924 ;;Total ram usage:        0 bytes
 10925 ;; Hardware stack levels used:    1
 10926 ;; Hardware stack levels required when called:    7
 10927 ;; This function calls:
 10928 ;;		Nothing
 10929 ;; This function is called by:
 10930 ;;		_handleRXData
 10931 ;;		_checkTXPower
 10932 ;; This function uses a non-reentrant model
 10933 ;;
 10934                           
 10935                           
 10936                           ;psect for function _nrf24l01GetRXPacket
 10937  0002                     _nrf24l01GetRXPacket:	
 10938                           
 10939                           ;nrf24l01.c: 138: return &RXPacket;
 10940                           
 10941                           ;incstack = 0
 10942                           ; Regs used in _nrf24l01GetRXPacket: [wreg]
 10943  0002  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
 10944  0003  0008               	return
 10945  0004                     __end_of_nrf24l01GetRXPacket:	
 10946                           
 10947                           	psect	text49
 10948  165F                     __ptext49:	
 10949 ;; *************** function _nrf24l01ChangeTXPower *****************
 10950 ;; Defined at:
 10951 ;;		line 33 in file "nrf24l01.c"
 10952 ;; Parameters:    Size  Location     Type
 10953 ;;  addPower        2    3[BANK0 ] int 
 10954 ;; Auto vars:     Size  Location     Type
 10955 ;;  rfSetup         1    6[BANK0 ] struct .
 10956 ;; Return value:  Size  Location     Type
 10957 ;;                  1    wreg      void 
 10958 ;; Registers used:
 10959 ;;		wreg, status,2, status,0, pclath, cstack
 10960 ;; Tracked objects:
 10961 ;;		On entry : 0/0
 10962 ;;		On exit  : 0/0
 10963 ;;		Unchanged: 0/0
 10964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10965 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10968 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;Total ram usage:        4 bytes
 10970 ;; Hardware stack levels used:    1
 10971 ;; Hardware stack levels required when called:   10
 10972 ;; This function calls:
 10973 ;;		_nrf24l01Send
 10974 ;; This function is called by:
 10975 ;;		_checkTXPower
 10976 ;;		_nrf24l01SendPacket
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980                           
 10981                           ;psect for function _nrf24l01ChangeTXPower
 10982  165F                     _nrf24l01ChangeTXPower:	
 10983                           
 10984                           ;nrf24l01.c: 35: n_RF_SETUP_t rfSetup;;nrf24l01.c: 36: rfSetup.byte = nrf24l01Send((unsi
      +                          gned) 0b00000000 | (unsigned) 0x06, 0);
 10985                           
 10986                           ;incstack = 0
 10987                           ; Regs used in _nrf24l01ChangeTXPower: [wreg+status,2+status,0+pclath+cstack]
 10988  165F  0020               	movlb	0	; select bank0
 10989  1660  01A0               	clrf	nrf24l01Send@data
 10990  1661  3006               	movlw	6
 10991  1662  3187  27E0  3196   	fcall	_nrf24l01Send
 10992  1665  0020               	movlb	0	; select bank0
 10993  1666  00A5               	movwf	??_nrf24l01ChangeTXPower
 10994  1667  0825               	movf	??_nrf24l01ChangeTXPower,w
 10995  1668  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
 10996                           
 10997                           ;nrf24l01.c: 38: if (addPower > 0){
 10998  1669  0824               	movf	nrf24l01ChangeTXPower@addPower+1,w
 10999  166A  3A80               	xorlw	128
 11000  166B  00A5               	movwf	??_nrf24l01ChangeTXPower
 11001  166C  3080               	movlw	128
 11002  166D  0225               	subwf	??_nrf24l01ChangeTXPower,w
 11003  166E  1D03               	skipz
 11004  166F  2E72               	goto	u2465
 11005  1670  3001               	movlw	1
 11006  1671  0223               	subwf	nrf24l01ChangeTXPower@addPower,w
 11007  1672                     u2465:	
 11008  1672  1C03               	skipc
 11009  1673  2E84               	goto	l2808
 11010                           
 11011                           ;nrf24l01.c: 39: if (rfSetup.RF_PWR < 3){
 11012  1674  0020               	movlb	0	; select bank0
 11013  1675  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
 11014  1676  3903               	andlw	3
 11015  1677  3A03               	xorlw	3
 11016  1678  1903               	skipnz
 11017  1679  2E84               	goto	l2808
 11018                           
 11019                           ;nrf24l01.c: 40: rfSetup.RF_PWR++;
 11020  167A  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
 11021  167B  3903               	andlw	3
 11022  167C  00A5               	movwf	??_nrf24l01ChangeTXPower
 11023  167D  0AA5               	incf	??_nrf24l01ChangeTXPower,f
 11024  167E  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
 11025  167F  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
 11026  1680  0625               	xorwf	??_nrf24l01ChangeTXPower,w
 11027  1681  39F9               	andlw	-7
 11028  1682  0625               	xorwf	??_nrf24l01ChangeTXPower,w
 11029  1683  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
 11030  1684                     l2808:	
 11031                           
 11032                           ;nrf24l01.c: 41: };nrf24l01.c: 42: };nrf24l01.c: 44: if (addPower < 0){
 11033  1684  0020               	movlb	0	; select bank0
 11034  1685  1FA4               	btfss	nrf24l01ChangeTXPower@addPower+1,7
 11035  1686  2E96               	goto	l2814
 11036                           
 11037                           ;nrf24l01.c: 45: if (rfSetup.RF_PWR > 0){
 11038  1687  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
 11039  1688  3903               	andlw	3
 11040  1689  3A00               	xorlw	0
 11041  168A  1903               	skipnz
 11042  168B  2E96               	goto	l2814
 11043                           
 11044                           ;nrf24l01.c: 46: rfSetup.RF_PWR--;
 11045  168C  0C26               	rrf	nrf24l01ChangeTXPower@rfSetup,w
 11046  168D  3903               	andlw	3
 11047  168E  00A5               	movwf	??_nrf24l01ChangeTXPower
 11048  168F  03A5               	decf	??_nrf24l01ChangeTXPower,f
 11049  1690  0DA5               	rlf	??_nrf24l01ChangeTXPower,f
 11050  1691  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
 11051  1692  0625               	xorwf	??_nrf24l01ChangeTXPower,w
 11052  1693  39F9               	andlw	-7
 11053  1694  0625               	xorwf	??_nrf24l01ChangeTXPower,w
 11054  1695  00A6               	movwf	nrf24l01ChangeTXPower@rfSetup
 11055  1696                     l2814:	
 11056                           
 11057                           ;nrf24l01.c: 47: };nrf24l01.c: 48: };nrf24l01.c: 50: nrf24l01Send((unsigned) 0b00100000 
      +                          | (unsigned) 0x06, rfSetup.byte);
 11058  1696  0826               	movf	nrf24l01ChangeTXPower@rfSetup,w
 11059  1697  00A5               	movwf	??_nrf24l01ChangeTXPower
 11060  1698  0825               	movf	??_nrf24l01ChangeTXPower,w
 11061  1699  00A0               	movwf	nrf24l01Send@data
 11062  169A  3026               	movlw	38
 11063  169B  3187  27E0         	fcall	_nrf24l01Send
 11064  169D  0008               	return
 11065  169E                     __end_of_nrf24l01ChangeTXPower:	
 11066                           
 11067                           	psect	text50
 11068  07E0                     __ptext50:	
 11069 ;; *************** function _nrf24l01Send *****************
 11070 ;; Defined at:
 11071 ;;		line 9 in file "nrf24l01.c"
 11072 ;; Parameters:    Size  Location     Type
 11073 ;;  command         1    wreg     unsigned char 
 11074 ;;  data            1    0[BANK0 ] unsigned char 
 11075 ;; Auto vars:     Size  Location     Type
 11076 ;;  command         1    2[BANK0 ] unsigned char 
 11077 ;; Return value:  Size  Location     Type
 11078 ;;                  1    wreg      unsigned char 
 11079 ;; Registers used:
 11080 ;;		wreg, status,2, status,0, pclath, cstack
 11081 ;; Tracked objects:
 11082 ;;		On entry : 0/0
 11083 ;;		On exit  : 0/0
 11084 ;;		Unchanged: 0/0
 11085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11086 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11087 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11088 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;Total ram usage:        3 bytes
 11091 ;; Hardware stack levels used:    1
 11092 ;; Hardware stack levels required when called:    9
 11093 ;; This function calls:
 11094 ;;		_enableInterrupts
 11095 ;;		_nrf24l01SPIEnd
 11096 ;;		_nrf24l01SPISend
 11097 ;;		_nrf24l01SPIStart
 11098 ;; This function is called by:
 11099 ;;		_loop
 11100 ;;		_nrf24l01ChangeTXPower
 11101 ;;		_nrf24l01SetRXMode
 11102 ;;		_nrf24l01SetRXPipe
 11103 ;;		_nrf24l01InitRegisters
 11104 ;; This function uses a non-reentrant model
 11105 ;;
 11106                           
 11107                           
 11108                           ;psect for function _nrf24l01Send
 11109  07E0                     _nrf24l01Send:	
 11110                           
 11111                           ;incstack = 0
 11112                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 11113                           ;nrf24l01Send@command stored from wreg
 11114  07E0  0020               	movlb	0	; select bank0
 11115  07E1  00A2               	movwf	nrf24l01Send@command
 11116                           
 11117                           ;nrf24l01.c: 12: enableInterrupts(0);
 11118  07E2  3000               	movlw	0
 11119  07E3  3191  21E8  3187   	fcall	_enableInterrupts
 11120                           
 11121                           ;nrf24l01.c: 15: nrf24l01SPIStart();
 11122  07E6  3191  21F0  3187   	fcall	_nrf24l01SPIStart
 11123                           
 11124                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
 11125  07E9  0020               	movlb	0	; select bank0
 11126  07EA  0822               	movf	nrf24l01Send@command,w
 11127  07EB  3192  2201  3187   	fcall	_nrf24l01SPISend
 11128                           
 11129                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
 11130  07EE  0020               	movlb	0	; select bank0
 11131  07EF  0820               	movf	nrf24l01Send@data,w
 11132  07F0  3192  2201  3187   	fcall	_nrf24l01SPISend
 11133  07F3  0020               	movlb	0	; select bank0
 11134  07F4  00A1               	movwf	??_nrf24l01Send
 11135  07F5  0821               	movf	??_nrf24l01Send,w
 11136  07F6  00A0               	movwf	nrf24l01Send@data
 11137                           
 11138                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
 11139  07F7  3191  21E1  3187   	fcall	_nrf24l01SPIEnd
 11140                           
 11141                           ;nrf24l01.c: 27: enableInterrupts(1);
 11142  07FA  3001               	movlw	1
 11143  07FB  3191  21E8         	fcall	_enableInterrupts
 11144                           
 11145                           ;nrf24l01.c: 29: return data;
 11146  07FD  0020               	movlb	0	; select bank0
 11147  07FE  0820               	movf	nrf24l01Send@data,w
 11148  07FF  0008               	return
 11149  0800                     __end_of_nrf24l01Send:	
 11150                           
 11151                           	psect	text51
 11152  12E6                     __ptext51:	
 11153 ;; *************** function ___lbtoft *****************
 11154 ;; Defined at:
 11155 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
 11156 ;; Parameters:    Size  Location     Type
 11157 ;;  c               1    wreg     unsigned char 
 11158 ;; Auto vars:     Size  Location     Type
 11159 ;;  c               1   15[BANK0 ] unsigned char 
 11160 ;; Return value:  Size  Location     Type
 11161 ;;                  3    8[BANK0 ] float 
 11162 ;; Registers used:
 11163 ;;		wreg, status,2, status,0, pclath, cstack
 11164 ;; Tracked objects:
 11165 ;;		On entry : 0/0
 11166 ;;		On exit  : 0/0
 11167 ;;		Unchanged: 0/0
 11168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11169 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11170 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11171 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11172 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;Total ram usage:        8 bytes
 11174 ;; Hardware stack levels used:    1
 11175 ;; Hardware stack levels required when called:    8
 11176 ;; This function calls:
 11177 ;;		___ftpack
 11178 ;; This function is called by:
 11179 ;;		_loop
 11180 ;;		_main
 11181 ;; This function uses a non-reentrant model
 11182 ;;
 11183                           
 11184                           
 11185                           ;psect for function ___lbtoft
 11186  12E6                     ___lbtoft:	
 11187                           
 11188                           ;incstack = 0
 11189                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
 11190                           ;___lbtoft@c stored from wreg
 11191  12E6  0020               	movlb	0	; select bank0
 11192  12E7  00AF               	movwf	___lbtoft@c
 11193  12E8  082F               	movf	___lbtoft@c,w
 11194  12E9  00AB               	movwf	??___lbtoft
 11195  12EA  01AC               	clrf	??___lbtoft+1
 11196  12EB  01AD               	clrf	??___lbtoft+2
 11197  12EC  082B               	movf	??___lbtoft,w
 11198  12ED  00A0               	movwf	___ftpack@arg
 11199  12EE  082C               	movf	??___lbtoft+1,w
 11200  12EF  00A1               	movwf	___ftpack@arg+1
 11201  12F0  082D               	movf	??___lbtoft+2,w
 11202  12F1  00A2               	movwf	___ftpack@arg+2
 11203  12F2  308E               	movlw	142
 11204  12F3  00AE               	movwf	??___lbtoft+3
 11205  12F4  082E               	movf	??___lbtoft+3,w
 11206  12F5  00A3               	movwf	___ftpack@exp
 11207  12F6  01A4               	clrf	___ftpack@sign
 11208  12F7  3189  2121         	fcall	___ftpack
 11209  12F9  0020               	movlb	0	; select bank0
 11210  12FA  0820               	movf	?___ftpack,w
 11211  12FB  00A8               	movwf	?___lbtoft
 11212  12FC  0821               	movf	?___ftpack+1,w
 11213  12FD  00A9               	movwf	?___lbtoft+1
 11214  12FE  0822               	movf	?___ftpack+2,w
 11215  12FF  00AA               	movwf	?___lbtoft+2
 11216  1300  0008               	return
 11217  1301                     __end_of___lbtoft:	
 11218                           
 11219                           	psect	text52
 11220  0921                     __ptext52:	
 11221 ;; *************** function ___ftpack *****************
 11222 ;; Defined at:
 11223 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;  arg             3    0[BANK0 ] unsigned um
 11226 ;;  exp             1    3[BANK0 ] unsigned char 
 11227 ;;  sign            1    4[BANK0 ] unsigned char 
 11228 ;; Auto vars:     Size  Location     Type
 11229 ;;		None
 11230 ;; Return value:  Size  Location     Type
 11231 ;;                  3    0[BANK0 ] float 
 11232 ;; Registers used:
 11233 ;;		wreg, status,2, status,0
 11234 ;; Tracked objects:
 11235 ;;		On entry : 0/0
 11236 ;;		On exit  : 0/0
 11237 ;;		Unchanged: 0/0
 11238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11239 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;Total ram usage:        8 bytes
 11244 ;; Hardware stack levels used:    1
 11245 ;; Hardware stack levels required when called:    7
 11246 ;; This function calls:
 11247 ;;		Nothing
 11248 ;; This function is called by:
 11249 ;;		___altoft
 11250 ;;		___awtoft
 11251 ;;		___ftadd
 11252 ;;		___ftdiv
 11253 ;;		___ftmul
 11254 ;;		___lbtoft
 11255 ;;		___lltoft
 11256 ;; This function uses a non-reentrant model
 11257 ;;
 11258                           
 11259                           
 11260                           ;psect for function ___ftpack
 11261  0921                     ___ftpack:	
 11262                           
 11263                           ;incstack = 0
 11264                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11265  0921  0020               	movlb	0	; select bank0
 11266  0922  0823               	movf	___ftpack@exp,w
 11267  0923  1903               	btfsc	3,2
 11268  0924  292A               	goto	l2740
 11269  0925  0822               	movf	___ftpack@arg+2,w
 11270  0926  0421               	iorwf	___ftpack@arg+1,w
 11271  0927  0420               	iorwf	___ftpack@arg,w
 11272  0928  1D03               	skipz
 11273  0929  293B               	goto	l2746
 11274  092A                     l2740:	
 11275  092A  3000               	movlw	0
 11276  092B  00A0               	movwf	?___ftpack
 11277  092C  3000               	movlw	0
 11278  092D  00A1               	movwf	?___ftpack+1
 11279  092E  3000               	movlw	0
 11280  092F  00A2               	movwf	?___ftpack+2
 11281  0930  0008               	return
 11282  0931                     l2744:	
 11283  0931  3001               	movlw	1
 11284  0932  00A5               	movwf	??___ftpack
 11285  0933  0825               	movf	??___ftpack,w
 11286  0934  07A3               	addwf	___ftpack@exp,f
 11287  0935  3001               	movlw	1
 11288  0936                     u2325:	
 11289  0936  36A2               	lsrf	___ftpack@arg+2,f
 11290  0937  0CA1               	rrf	___ftpack@arg+1,f
 11291  0938  0CA0               	rrf	___ftpack@arg,f
 11292  0939  0B89               	decfsz	9,f
 11293  093A  2936               	goto	u2325
 11294  093B                     l2746:	
 11295  093B  30FE               	movlw	254
 11296  093C  0522               	andwf	___ftpack@arg+2,w
 11297  093D  1903               	btfsc	3,2
 11298  093E  2954               	goto	l693
 11299  093F  2931               	goto	l2744
 11300  0940                     l2748:	
 11301  0940  3001               	movlw	1
 11302  0941  00A5               	movwf	??___ftpack
 11303  0942  0825               	movf	??___ftpack,w
 11304  0943  07A3               	addwf	___ftpack@exp,f
 11305  0944  3001               	movlw	1
 11306  0945  07A0               	addwf	___ftpack@arg,f
 11307  0946  3000               	movlw	0
 11308  0947  1803               	skipnc
 11309  0948  3001               	movlw	1
 11310  0949  07A1               	addwf	___ftpack@arg+1,f
 11311  094A  3000               	movlw	0
 11312  094B  1803               	skipnc
 11313  094C  3001               	movlw	1
 11314  094D  07A2               	addwf	___ftpack@arg+2,f
 11315  094E  3001               	movlw	1
 11316  094F                     u2345:	
 11317  094F  36A2               	lsrf	___ftpack@arg+2,f
 11318  0950  0CA1               	rrf	___ftpack@arg+1,f
 11319  0951  0CA0               	rrf	___ftpack@arg,f
 11320  0952  0B89               	decfsz	9,f
 11321  0953  294F               	goto	u2345
 11322  0954                     l693:	
 11323  0954  30FF               	movlw	255
 11324  0955  0522               	andwf	___ftpack@arg+2,w
 11325  0956  1903               	btfsc	3,2
 11326  0957  2961               	goto	l2756
 11327  0958  2940               	goto	l2748
 11328  0959                     l2754:	
 11329  0959  3001               	movlw	1
 11330  095A  02A3               	subwf	___ftpack@exp,f
 11331  095B  3001               	movlw	1
 11332  095C                     u2365:	
 11333  095C  35A0               	lslf	___ftpack@arg,f
 11334  095D  0DA1               	rlf	___ftpack@arg+1,f
 11335  095E  0DA2               	rlf	___ftpack@arg+2,f
 11336  095F  0B89               	decfsz	9,f
 11337  0960  295C               	goto	u2365
 11338  0961                     l2756:	
 11339  0961  1BA1               	btfsc	___ftpack@arg+1,7
 11340  0962  2967               	goto	l700
 11341  0963  3002               	movlw	2
 11342  0964  0223               	subwf	___ftpack@exp,w
 11343  0965  1803               	skipnc
 11344  0966  2959               	goto	l2754
 11345  0967                     l700:	
 11346  0967  1823               	btfsc	___ftpack@exp,0
 11347  0968  296F               	goto	l701
 11348  0969  30FF               	movlw	255
 11349  096A  05A0               	andwf	___ftpack@arg,f
 11350  096B  307F               	movlw	127
 11351  096C  05A1               	andwf	___ftpack@arg+1,f
 11352  096D  30FF               	movlw	255
 11353  096E  05A2               	andwf	___ftpack@arg+2,f
 11354  096F                     l701:	
 11355  096F  1003               	clrc
 11356  0970  0CA3               	rrf	___ftpack@exp,f
 11357  0971  0823               	movf	___ftpack@exp,w
 11358  0972  00A5               	movwf	??___ftpack
 11359  0973  01A6               	clrf	??___ftpack+1
 11360  0974  01A7               	clrf	??___ftpack+2
 11361  0975  3010               	movlw	16
 11362  0976                     u2405:	
 11363  0976  35A5               	lslf	??___ftpack,f
 11364  0977  0DA6               	rlf	??___ftpack+1,f
 11365  0978  0DA7               	rlf	??___ftpack+2,f
 11366  0979  0B89               	decfsz	9,f
 11367  097A  2976               	goto	u2405
 11368  097B  0825               	movf	??___ftpack,w
 11369  097C  04A0               	iorwf	___ftpack@arg,f
 11370  097D  0826               	movf	??___ftpack+1,w
 11371  097E  04A1               	iorwf	___ftpack@arg+1,f
 11372  097F  0827               	movf	??___ftpack+2,w
 11373  0980  04A2               	iorwf	___ftpack@arg+2,f
 11374  0981  0824               	movf	___ftpack@sign,w
 11375  0982  1903               	btfsc	3,2
 11376  0983  0008               	return
 11377  0984  17A2               	bsf	___ftpack@arg+2,7
 11378  0985  0008               	return
 11379  0986                     __end_of___ftpack:	
 11380                           
 11381                           	psect	intentry
 11382  0004                     __pintentry:	
 11383 ;; *************** function _ISR *****************
 11384 ;; Defined at:
 11385 ;;		line 14 in file "main.c"
 11386 ;; Parameters:    Size  Location     Type
 11387 ;;		None
 11388 ;; Auto vars:     Size  Location     Type
 11389 ;;		None
 11390 ;; Return value:  Size  Location     Type
 11391 ;;                  1    wreg      void 
 11392 ;; Registers used:
 11393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11394 ;; Tracked objects:
 11395 ;;		On entry : 0/0
 11396 ;;		On exit  : 0/0
 11397 ;;		Unchanged: 0/0
 11398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11403 ;;Total ram usage:        0 bytes
 11404 ;; Hardware stack levels used:    1
 11405 ;; Hardware stack levels required when called:    6
 11406 ;; This function calls:
 11407 ;;		_nrf24l01ISR
 11408 ;; This function is called by:
 11409 ;;		Interrupt level 1
 11410 ;; This function uses a non-reentrant model
 11411 ;;
 11412                           
 11413  0004                     _ISR:	
 11414                           
 11415                           ;incstack = 0
 11416  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11417                           
 11418                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11419  0005  3180               	pagesel	$
 11420                           
 11421                           ;main.c: 16: if (PIR0bits.INTF){
 11422  0006  0020               	movlb	0	; select bank0
 11423  0007  1C10               	btfss	16,0	;volatile
 11424  0008  280D               	goto	i1l173
 11425                           
 11426                           ;main.c: 17: nrf24l01ISR();
 11427  0009  3197  276B         	fcall	_nrf24l01ISR
 11428                           
 11429                           ;main.c: 18: PIR0bits.INTF = 0;
 11430  000B  0020               	movlb	0	; select bank0
 11431  000C  1010               	bcf	16,0	;volatile
 11432  000D                     i1l173:	
 11433  000D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11434  000E  0009               	retfie
 11435  000F                     __end_of_ISR:	
 11436                           
 11437                           	psect	text54
 11438  176B                     __ptext54:	
 11439 ;; *************** function _nrf24l01ISR *****************
 11440 ;; Defined at:
 11441 ;;		line 252 in file "nrf24l01.c"
 11442 ;; Parameters:    Size  Location     Type
 11443 ;;		None
 11444 ;; Auto vars:     Size  Location     Type
 11445 ;;  status          1   12[COMMON] struct .
 11446 ;; Return value:  Size  Location     Type
 11447 ;;                  1    wreg      void 
 11448 ;; Registers used:
 11449 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11450 ;; Tracked objects:
 11451 ;;		On entry : 0/0
 11452 ;;		On exit  : 0/0
 11453 ;;		Unchanged: 0/0
 11454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;Total ram usage:        2 bytes
 11460 ;; Hardware stack levels used:    1
 11461 ;; Hardware stack levels required when called:    5
 11462 ;; This function calls:
 11463 ;;		_exception
 11464 ;;		_nrf24l01CheckACK
 11465 ;;		_nrf24l01ReceivePacket
 11466 ;;		i1_nrf24l01Send
 11467 ;;		i1_nrf24l01SetRXMode
 11468 ;; This function is called by:
 11469 ;;		_ISR
 11470 ;; This function uses a non-reentrant model
 11471 ;;
 11472                           
 11473                           
 11474                           ;psect for function _nrf24l01ISR
 11475  176B                     _nrf24l01ISR:	
 11476                           
 11477                           ;nrf24l01.c: 254: n_STATUS_t status;;nrf24l01.c: 255: status.byte = nrf24l01Send((unsign
      +                          ed) 0b00000000 | (unsigned) 0x07, 0);
 11478                           
 11479                           ;incstack = 0
 11480                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11481  176B  01F1               	clrf	i1nrf24l01Send@data
 11482  176C  3007               	movlw	7
 11483  176D  3192  22CB  3197   	fcall	i1_nrf24l01Send
 11484  1770  00FB               	movwf	??_nrf24l01ISR
 11485  1771  087B               	movf	??_nrf24l01ISR,w
 11486  1772  00FC               	movwf	nrf24l01ISR@status
 11487                           
 11488                           ;nrf24l01.c: 260: };nrf24l01.c: 263: if (status.byte == 0xFF){
 11489  1773  0A7C               	incf	nrf24l01ISR@status,w
 11490  1774  1D03               	btfss	3,2
 11491  1775  2F7A               	goto	i1l4074
 11492                           
 11493                           ;nrf24l01.c: 264: exception(2);
 11494  1776  3002               	movlw	2
 11495  1777  3191  21CD  3197   	fcall	_exception
 11496  177A                     i1l4074:	
 11497                           
 11498                           ;nrf24l01.c: 265: };nrf24l01.c: 267: if (status.TX_DS){
 11499  177A  1EFC               	btfss	nrf24l01ISR@status,5
 11500  177B  2F8A               	goto	i1l4082
 11501                           
 11502                           ;nrf24l01.c: 270: nrf24l01.TXBusy = 0;
 11503  177C  0021               	movlb	1	; select bank1
 11504  177D  106B               	bcf	_nrf24l01^(0+128),0	;volatile
 11505                           
 11506                           ;nrf24l01.c: 273: if (!nrf24l01.RXMode){
 11507  177E  196B               	btfsc	_nrf24l01^(0+128),2	;volatile
 11508  177F  2F8A               	goto	i1l4082
 11509                           
 11510                           ;nrf24l01.c: 274: if (TXPacket->packetData.ACKRequest){
 11511  1780  0868               	movf	_TXPacket^(0+128),w
 11512  1781  0086               	movwf	6
 11513  1782  0869               	movf	(_TXPacket+1)^(0+128),w
 11514  1783  0087               	movwf	7
 11515  1784  1D01               	btfss	1,2
 11516  1785  2F8A               	goto	i1l4082
 11517                           
 11518                           ;nrf24l01.c: 277: nrf24l01SetRXMode(1);
 11519  1786  3001               	movlw	1
 11520  1787  3197  2725  3197   	fcall	i1_nrf24l01SetRXMode
 11521  178A                     i1l4082:	
 11522                           
 11523                           ;nrf24l01.c: 278: };nrf24l01.c: 279: };nrf24l01.c: 280: };nrf24l01.c: 283: if (status.RX
      +                          _DR){
 11524  178A  1F7C               	btfss	nrf24l01ISR@status,6
 11525  178B  2FAD               	goto	i1l4096
 11526                           
 11527                           ;nrf24l01.c: 286: if (!nrf24l01.RXPending){
 11528  178C  0021               	movlb	1	; select bank1
 11529  178D  18EB               	btfsc	_nrf24l01^(0+128),1	;volatile
 11530  178E  2FAC               	goto	i1l335
 11531                           
 11532                           ;nrf24l01.c: 289: nrf24l01.RXPending = 1;
 11533  178F  14EB               	bsf	_nrf24l01^(0+128),1	;volatile
 11534                           
 11535                           ;nrf24l01.c: 291: nrf24l01ReceivePacket();
 11536  1790  3188  2081  3197   	fcall	_nrf24l01ReceivePacket
 11537                           
 11538                           ;nrf24l01.c: 294: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
 11539  1793  01F1               	clrf	i1nrf24l01Send@data
 11540  1794  3009               	movlw	9
 11541  1795  3192  22CB  3197   	fcall	i1_nrf24l01Send
 11542  1798  00FB               	movwf	??_nrf24l01ISR
 11543  1799  0023               	movlb	3	; select bank3
 11544  179A  0820               	movf	_RXPacket^(0+384),w
 11545  179B  067B               	xorwf	??_nrf24l01ISR,w
 11546  179C  39FE               	andlw	-2
 11547  179D  067B               	xorwf	??_nrf24l01ISR,w
 11548  179E  00A0               	movwf	_RXPacket^(0+384)
 11549                           
 11550                           ;nrf24l01.c: 297: RXPacket.packetData.Pipe = status.RX_P_NO;
 11551  179F  0C7C               	rrf	nrf24l01ISR@status,w
 11552  17A0  3907               	andlw	7
 11553  17A1  00FB               	movwf	??_nrf24l01ISR
 11554  17A2  0EFB               	swapf	??_nrf24l01ISR,f
 11555  17A3  0820               	movf	_RXPacket^(0+384),w
 11556  17A4  067B               	xorwf	??_nrf24l01ISR,w
 11557  17A5  398F               	andlw	-113
 11558  17A6  067B               	xorwf	??_nrf24l01ISR,w
 11559  17A7  00A0               	movwf	_RXPacket^(0+384)
 11560                           
 11561                           ;nrf24l01.c: 299: nrf24l01CheckACK();
 11562  17A8  3194  246F  3197   	fcall	_nrf24l01CheckACK
 11563                           
 11564                           ;nrf24l01.c: 300: }
 11565  17AB  2FAD               	goto	i1l4096
 11566  17AC                     i1l335:	
 11567                           
 11568                           ;nrf24l01.c: 303: else{;nrf24l01.c: 306: status.RX_DR = 0;
 11569  17AC  137C               	bcf	nrf24l01ISR@status,6
 11570  17AD                     i1l4096:	
 11571                           
 11572                           ;nrf24l01.c: 307: };nrf24l01.c: 309: };nrf24l01.c: 312: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.byte);
 11573  17AD  087C               	movf	nrf24l01ISR@status,w
 11574  17AE  00FB               	movwf	??_nrf24l01ISR
 11575  17AF  087B               	movf	??_nrf24l01ISR,w
 11576  17B0  00F1               	movwf	i1nrf24l01Send@data
 11577  17B1  3027               	movlw	39
 11578  17B2  3192  22CB         	fcall	i1_nrf24l01Send
 11579  17B4  0008               	return
 11580  17B5                     __end_of_nrf24l01ISR:	
 11581                           
 11582                           	psect	text55
 11583  0881                     __ptext55:	
 11584 ;; *************** function _nrf24l01ReceivePacket *****************
 11585 ;; Defined at:
 11586 ;;		line 141 in file "nrf24l01.c"
 11587 ;; Parameters:    Size  Location     Type
 11588 ;;		None
 11589 ;; Auto vars:     Size  Location     Type
 11590 ;;  i               1   10[COMMON] unsigned char 
 11591 ;;  width           1    9[COMMON] unsigned char 
 11592 ;; Return value:  Size  Location     Type
 11593 ;;                  1    wreg      void 
 11594 ;; Registers used:
 11595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11596 ;; Tracked objects:
 11597 ;;		On entry : 0/0
 11598 ;;		On exit  : 0/0
 11599 ;;		Unchanged: 0/0
 11600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11602 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11603 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11604 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11605 ;;Total ram usage:        3 bytes
 11606 ;; Hardware stack levels used:    1
 11607 ;; Hardware stack levels required when called:    3
 11608 ;; This function calls:
 11609 ;;		_nrf24l01CEHigh
 11610 ;;		_nrf24l01CELow
 11611 ;;		_nrf24l01SPIEnd
 11612 ;;		_nrf24l01SPISend
 11613 ;;		_nrf24l01SPIStart
 11614 ;;		i1_memset
 11615 ;;		i1_nrf24l01Send
 11616 ;; This function is called by:
 11617 ;;		_nrf24l01ISR
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621                           
 11622                           ;psect for function _nrf24l01ReceivePacket
 11623  0881                     _nrf24l01ReceivePacket:	
 11624                           
 11625                           ;nrf24l01.c: 144: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
 11626                           
 11627                           ;incstack = 0
 11628                           ; Regs used in _nrf24l01ReceivePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11629  0881  30A1               	movlw	low (_RXPacket+1)
 11630  0882  00F0               	movwf	i1memset@p1
 11631  0883  3001               	movlw	high (_RXPacket+1)
 11632  0884  00F1               	movwf	i1memset@p1+1
 11633  0885  3000               	movlw	0
 11634  0886  00F2               	movwf	i1memset@c
 11635  0887  00F3               	movwf	i1memset@c+1
 11636  0888  3020               	movlw	32
 11637  0889  00F4               	movwf	i1memset@n
 11638  088A  3000               	movlw	0
 11639  088B  00F5               	movwf	i1memset@n+1
 11640  088C  3192  2280  3188   	fcall	i1_memset
 11641                           
 11642                           ;nrf24l01.c: 145: RXPacket.packetData.byte = 0x00;
 11643  088F  0023               	movlb	3	; select bank3
 11644  0890  01A0               	clrf	_RXPacket^(0+384)
 11645                           
 11646                           ;nrf24l01.c: 148: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
 11647  0891  01F1               	clrf	i1nrf24l01Send@data
 11648  0892  3060               	movlw	96
 11649  0893  3192  22CB  3188   	fcall	i1_nrf24l01Send
 11650  0896  00F8               	movwf	??_nrf24l01ReceivePacket
 11651  0897  0878               	movf	??_nrf24l01ReceivePacket,w
 11652  0898  00F9               	movwf	nrf24l01ReceivePacket@width
 11653                           
 11654                           ;nrf24l01.c: 149: unsigned char i = 0;
 11655  0899  01FA               	clrf	nrf24l01ReceivePacket@i
 11656                           
 11657                           ;nrf24l01.c: 152: nrf24l01CELow();
 11658  089A  3191  21D2  3188   	fcall	_nrf24l01CELow
 11659                           
 11660                           ;nrf24l01.c: 155: nrf24l01SPIStart();
 11661  089D  3191  21F0  3188   	fcall	_nrf24l01SPIStart
 11662                           
 11663                           ;nrf24l01.c: 158: nrf24l01SPISend((unsigned) 0b01100001);
 11664  08A0  3061               	movlw	97
 11665  08A1  3192  2201  3188   	fcall	_nrf24l01SPISend
 11666                           
 11667                           ;nrf24l01.c: 161: RXPacket.packetData.byte = nrf24l01SPISend(0);
 11668  08A4  3000               	movlw	0
 11669  08A5  3192  2201  3188   	fcall	_nrf24l01SPISend
 11670  08A8  00F8               	movwf	??_nrf24l01ReceivePacket
 11671  08A9  0878               	movf	??_nrf24l01ReceivePacket,w
 11672  08AA  0023               	movlb	3	; select bank3
 11673  08AB  00A0               	movwf	_RXPacket^(0+384)
 11674                           
 11675                           ;nrf24l01.c: 162: width--;
 11676  08AC  3001               	movlw	1
 11677  08AD  02F9               	subwf	nrf24l01ReceivePacket@width,f
 11678                           
 11679                           ;nrf24l01.c: 164: for (i = 0; (i < width) && (i < sizeof(RXPacket.Message)); i++){
 11680  08AE  01FA               	clrf	nrf24l01ReceivePacket@i
 11681  08AF  28C0               	goto	i1l3920
 11682  08B0                     i1l3916:	
 11683                           
 11684                           ;nrf24l01.c: 166: RXPacket.Message[i] = nrf24l01SPISend(0);
 11685  08B0  3000               	movlw	0
 11686  08B1  3192  2201  3188   	fcall	_nrf24l01SPISend
 11687  08B4  00F8               	movwf	??_nrf24l01ReceivePacket
 11688  08B5  087A               	movf	nrf24l01ReceivePacket@i,w
 11689  08B6  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 11690  08B7  0086               	movwf	6
 11691  08B8  3001               	movlw	1	; select bank3/4
 11692  08B9  0087               	movwf	7
 11693  08BA  0878               	movf	??_nrf24l01ReceivePacket,w
 11694  08BB  0081               	movwf	1
 11695  08BC  3001               	movlw	1
 11696  08BD  00F8               	movwf	??_nrf24l01ReceivePacket
 11697  08BE  0878               	movf	??_nrf24l01ReceivePacket,w
 11698  08BF  07FA               	addwf	nrf24l01ReceivePacket@i,f
 11699  08C0                     i1l3920:	
 11700  08C0  0879               	movf	nrf24l01ReceivePacket@width,w
 11701  08C1  027A               	subwf	nrf24l01ReceivePacket@i,w
 11702  08C2  1803               	skipnc
 11703  08C3  28C8               	goto	i1l3924
 11704  08C4  3020               	movlw	32
 11705  08C5  027A               	subwf	nrf24l01ReceivePacket@i,w
 11706  08C6  1C03               	skipc
 11707  08C7  28B0               	goto	i1l3916
 11708  08C8                     i1l3924:	
 11709                           
 11710                           ;nrf24l01.c: 167: };nrf24l01.c: 170: nrf24l01SPIEnd();
 11711  08C8  3191  21E1  3188   	fcall	_nrf24l01SPIEnd
 11712                           
 11713                           ;nrf24l01.c: 173: nrf24l01CEHigh();
 11714  08CB  3191  21CF         	fcall	_nrf24l01CEHigh
 11715  08CD  0008               	return
 11716  08CE                     __end_of_nrf24l01ReceivePacket:	
 11717                           
 11718                           	psect	text56
 11719  1280                     __ptext56:	
 11720 ;; *************** function i1_memset *****************
 11721 ;; Defined at:
 11722 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 11723 ;; Parameters:    Size  Location     Type
 11724 ;;  p1              2    0[COMMON] PTR void 
 11725 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 11726 ;;  c               2    2[COMMON] int 
 11727 ;;  n               2    4[COMMON] unsigned int 
 11728 ;; Auto vars:     Size  Location     Type
 11729 ;;  memset          2    6[COMMON] PTR unsigned char 
 11730 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
 11731 ;; Return value:  Size  Location     Type
 11732 ;;                  1    wreg      PTR void 
 11733 ;; Registers used:
 11734 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11735 ;; Tracked objects:
 11736 ;;		On entry : 0/0
 11737 ;;		On exit  : 0/0
 11738 ;;		Unchanged: 0/0
 11739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11740 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11743 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;Total ram usage:        8 bytes
 11745 ;; Hardware stack levels used:    1
 11746 ;; This function calls:
 11747 ;;		Nothing
 11748 ;; This function is called by:
 11749 ;;		_nrf24l01ReceivePacket
 11750 ;; This function uses a non-reentrant model
 11751 ;;
 11752                           
 11753                           
 11754                           ;psect for function i1_memset
 11755  1280                     i1_memset:	
 11756                           
 11757                           ;incstack = 0
 11758                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11759  1280  0871               	movf	i1memset@p1+1,w
 11760  1281  00F7               	movwf	i1memset@p+1
 11761  1282  0870               	movf	i1memset@p1,w
 11762  1283  00F6               	movwf	i1memset@p
 11763  1284                     i1l3792:	
 11764  1284  3001               	movlw	1
 11765  1285  02F4               	subwf	i1memset@n,f
 11766  1286  3000               	movlw	0
 11767  1287  3BF5               	subwfb	i1memset@n+1,f
 11768  1288  0A74               	incf	i1memset@n,w
 11769  1289  1903               	btfsc	3,2
 11770  128A  0A75               	incf	i1memset@n+1,w
 11771  128B  1903               	btfsc	3,2
 11772  128C  0008               	return
 11773  128D  0876               	movf	i1memset@p,w
 11774  128E  0086               	movwf	6
 11775  128F  0877               	movf	i1memset@p+1,w
 11776  1290  0087               	movwf	7
 11777  1291  0872               	movf	i1memset@c,w
 11778  1292  0081               	movwf	1
 11779  1293  3001               	movlw	1
 11780  1294  07F6               	addwf	i1memset@p,f
 11781  1295  3000               	movlw	0
 11782  1296  3DF7               	addwfc	i1memset@p+1,f
 11783  1297  2A84               	goto	i1l3792
 11784  1298                     __end_ofi1_memset:	
 11785                           ;	Return value of i1_memset is never used
 11786                           
 11787                           
 11788                           	psect	text57
 11789  146F                     __ptext57:	
 11790 ;; *************** function _nrf24l01CheckACK *****************
 11791 ;; Defined at:
 11792 ;;		line 104 in file "nrf24l01.c"
 11793 ;; Parameters:    Size  Location     Type
 11794 ;;		None
 11795 ;; Auto vars:     Size  Location     Type
 11796 ;;		None
 11797 ;; Return value:  Size  Location     Type
 11798 ;;                  1    wreg      void 
 11799 ;; Registers used:
 11800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11801 ;; Tracked objects:
 11802 ;;		On entry : 0/0
 11803 ;;		On exit  : 0/0
 11804 ;;		Unchanged: 0/0
 11805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11809 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11810 ;;Total ram usage:        3 bytes
 11811 ;; Hardware stack levels used:    1
 11812 ;; Hardware stack levels required when called:    4
 11813 ;; This function calls:
 11814 ;;		i1_nrf24l01SetRXMode
 11815 ;;		i1_strcmp
 11816 ;; This function is called by:
 11817 ;;		_nrf24l01ISR
 11818 ;; This function uses a non-reentrant model
 11819 ;;
 11820                           
 11821                           
 11822                           ;psect for function _nrf24l01CheckACK
 11823  146F                     _nrf24l01CheckACK:	
 11824                           
 11825                           ;nrf24l01.c: 108: if (!RXPacket.packetData.IsACK){
 11826                           
 11827                           ;incstack = 0
 11828                           ; Regs used in _nrf24l01CheckACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11829  146F  0023               	movlb	3	; select bank3
 11830  1470  1DA0               	btfss	_RXPacket^(0+384),3
 11831  1471  0008               	return
 11832                           
 11833                           ;nrf24l01.c: 110: };nrf24l01.c: 113: nrf24l01.RXPending = 0;
 11834                           
 11835                           ;nrf24l01.c: 109: return;
 11836  1472  0021               	movlb	1	; select bank1
 11837  1473  10EB               	bcf	_nrf24l01^(0+128),1	;volatile
 11838                           
 11839                           ;nrf24l01.c: 116: if (!TXPacket->packetData.ACKRequest){
 11840  1474  0868               	movf	_TXPacket^(0+128),w
 11841  1475  0086               	movwf	6
 11842  1476  0869               	movf	(_TXPacket+1)^(0+128),w
 11843  1477  0087               	movwf	7
 11844  1478  1D01               	btfss	1,2
 11845  1479  0008               	return
 11846                           
 11847                           ;nrf24l01.c: 118: };nrf24l01.c: 121: if (strcmp(TXPacket->Message, RXPacket.Message) != 
      +                          0){
 11848                           
 11849                           ;nrf24l01.c: 117: return;
 11850  147A  0868               	movf	_TXPacket^(0+128),w
 11851  147B  3E01               	addlw	1
 11852  147C  00F7               	movwf	??_nrf24l01CheckACK
 11853  147D  3000               	movlw	0
 11854  147E  3D69               	addwfc	(_TXPacket+1)^(0+128),w
 11855  147F  00F8               	movwf	??_nrf24l01CheckACK+1
 11856  1480  0877               	movf	??_nrf24l01CheckACK,w
 11857  1481  00F0               	movwf	i1strcmp@s1
 11858  1482  0878               	movf	??_nrf24l01CheckACK+1,w
 11859  1483  00F1               	movwf	i1strcmp@s1+1
 11860  1484  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
 11861  1485  00F9               	movwf	??_nrf24l01CheckACK+2
 11862  1486  0879               	movf	??_nrf24l01CheckACK+2,w
 11863  1487  00F2               	movwf	i1strcmp@s2
 11864  1488  3193  23F8  3194   	fcall	i1_strcmp
 11865  148B  0870               	movf	?i1_strcmp,w
 11866  148C  0471               	iorwf	?i1_strcmp+1,w
 11867  148D  1D03               	btfss	3,2
 11868  148E  0008               	return
 11869                           
 11870                           ;nrf24l01.c: 123: };nrf24l01.c: 130: TXPacket->packetData.ACKRequest = 0;
 11871                           
 11872                           ;nrf24l01.c: 122: return;
 11873  148F  0021               	movlb	1	; select bank1
 11874  1490  0868               	movf	_TXPacket^(0+128),w
 11875  1491  0086               	movwf	6
 11876  1492  0869               	movf	(_TXPacket+1)^(0+128),w
 11877  1493  0087               	movwf	7
 11878  1494  1101               	bcf	1,2
 11879                           
 11880                           ;nrf24l01.c: 133: nrf24l01SetRXMode(0);
 11881  1495  3000               	movlw	0
 11882  1496  3197  2725         	fcall	i1_nrf24l01SetRXMode
 11883  1498  0008               	return
 11884  1499                     __end_of_nrf24l01CheckACK:	
 11885                           
 11886                           	psect	text58
 11887  13F8                     __ptext58:	
 11888 ;; *************** function i1_strcmp *****************
 11889 ;; Defined at:
 11890 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
 11891 ;; Parameters:    Size  Location     Type
 11892 ;;  s1              2    0[COMMON] PTR const unsigned char 
 11893 ;;		 -> packet.Message(32), packet.Message(32), RXPacket.Message(32), RXPacket(33), 
 11894 ;;		 -> main@packet(33), loop@packet(33), NULL(0), handleRXData@string(16), 
 11895 ;;  s2              1    2[COMMON] PTR const unsigned char 
 11896 ;;		 -> RXPacket.Message(32), RXPacket(33), romDataMap(28), 
 11897 ;; Auto vars:     Size  Location     Type
 11898 ;;  strcmp          1    4[COMMON] char 
 11899 ;; Return value:  Size  Location     Type
 11900 ;;                  2    0[COMMON] int 
 11901 ;; Registers used:
 11902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11903 ;; Tracked objects:
 11904 ;;		On entry : 0/0
 11905 ;;		On exit  : 0/0
 11906 ;;		Unchanged: 0/0
 11907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11908 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11910 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11911 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11912 ;;Total ram usage:        5 bytes
 11913 ;; Hardware stack levels used:    1
 11914 ;; This function calls:
 11915 ;;		Nothing
 11916 ;; This function is called by:
 11917 ;;		_nrf24l01CheckACK
 11918 ;; This function uses a non-reentrant model
 11919 ;;
 11920                           
 11921                           
 11922                           ;psect for function i1_strcmp
 11923  13F8                     i1_strcmp:	
 11924                           
 11925                           ;incstack = 0
 11926                           ; Regs used in i1_strcmp: [wreg-fsr1h+status,2+status,0]
 11927  13F8  2C01               	goto	i1l3800
 11928  13F9                     i1l3796:	
 11929  13F9  3001               	movlw	1
 11930  13FA  07F0               	addwf	i1strcmp@s1,f
 11931  13FB  3000               	movlw	0
 11932  13FC  3DF1               	addwfc	i1strcmp@s1+1,f
 11933  13FD  3001               	movlw	1
 11934  13FE  00F3               	movwf	??i1_strcmp
 11935  13FF  0873               	movf	??i1_strcmp,w
 11936  1400  07F2               	addwf	i1strcmp@s2,f
 11937  1401                     i1l3800:	
 11938  1401  0870               	movf	i1strcmp@s1,w
 11939  1402  0086               	movwf	6
 11940  1403  0871               	movf	i1strcmp@s1+1,w
 11941  1404  0087               	movwf	7
 11942  1405  0872               	movf	i1strcmp@s2,w
 11943  1406  0084               	movwf	4
 11944  1407  3001               	movlw	1	; select bank2/3
 11945  1408  0085               	movwf	5
 11946  1409  0300               	decf	0,w
 11947  140A  3AFF               	xorlw	255
 11948  140B  0701               	addwf	1,w
 11949  140C  00F3               	movwf	??i1_strcmp
 11950  140D  0873               	movf	??i1_strcmp,w
 11951  140E  00F4               	movwf	i1strcmp@r
 11952  140F  0874               	movf	i1strcmp@r,w
 11953  1410  1D03               	btfss	3,2
 11954  1411  2C19               	goto	i1l3804
 11955  1412  0870               	movf	i1strcmp@s1,w
 11956  1413  0086               	movwf	6
 11957  1414  0871               	movf	i1strcmp@s1+1,w
 11958  1415  0087               	movwf	7
 11959  1416  0801               	movf	1,w
 11960  1417  1D03               	btfss	3,2
 11961  1418  2BF9               	goto	i1l3796
 11962  1419                     i1l3804:	
 11963  1419  0874               	movf	i1strcmp@r,w
 11964  141A  00F0               	movwf	?i1_strcmp
 11965  141B  01F1               	clrf	?i1_strcmp+1
 11966  141C  1BF0               	btfsc	?i1_strcmp,7
 11967  141D  03F1               	decf	?i1_strcmp+1,f
 11968  141E  0008               	return
 11969  141F                     __end_ofi1_strcmp:	
 11970                           
 11971                           	psect	text59
 11972  1725                     __ptext59:	
 11973 ;; *************** function i1_nrf24l01SetRXMode *****************
 11974 ;; Defined at:
 11975 ;;		line 54 in file "nrf24l01.c"
 11976 ;; Parameters:    Size  Location     Type
 11977 ;;  rxMode          1    wreg     unsigned char 
 11978 ;; Auto vars:     Size  Location     Type
 11979 ;;  rxMode          1    6[COMMON] unsigned char 
 11980 ;;  nrf24l01SetR    1    5[COMMON] struct .
 11981 ;; Return value:  Size  Location     Type
 11982 ;;                  1    wreg      void 
 11983 ;; Registers used:
 11984 ;;		wreg, status,2, status,0, pclath, cstack
 11985 ;; Tracked objects:
 11986 ;;		On entry : 0/0
 11987 ;;		On exit  : 0/0
 11988 ;;		Unchanged: 0/0
 11989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11992 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11993 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11994 ;;Total ram usage:        3 bytes
 11995 ;; Hardware stack levels used:    1
 11996 ;; Hardware stack levels required when called:    3
 11997 ;; This function calls:
 11998 ;;		_nrf24l01CEHigh
 11999 ;;		_nrf24l01CELow
 12000 ;;		i1_nrf24l01Send
 12001 ;; This function is called by:
 12002 ;;		_nrf24l01CheckACK
 12003 ;;		_nrf24l01ISR
 12004 ;; This function uses a non-reentrant model
 12005 ;;
 12006                           
 12007                           
 12008                           ;psect for function i1_nrf24l01SetRXMode
 12009  1725                     i1_nrf24l01SetRXMode:	
 12010                           
 12011                           ;incstack = 0
 12012                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
 12013                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
 12014  1725  00F6               	movwf	i1nrf24l01SetRXMode@rxMode
 12015                           
 12016                           ;nrf24l01.c: 56: if (rxMode){
 12017  1726  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 12018  1727  1903               	btfsc	3,2
 12019  1728  2F2C               	goto	i1l3764
 12020                           
 12021                           ;nrf24l01.c: 57: if (nrf24l01.TXBusy){
 12022  1729  0021               	movlb	1	; select bank1
 12023  172A  186B               	btfsc	_nrf24l01^(0+128),0	;volatile
 12024  172B  0008               	return
 12025  172C                     i1l3764:	
 12026                           ;nrf24l01.c: 58: return;
 12027                           
 12028                           
 12029                           ;nrf24l01.c: 59: };nrf24l01.c: 60: };nrf24l01.c: 62: n_CONFIG_t config;;nrf24l01.c: 65: 
      +                          config.byte = nrf24l01Send((unsigned) 0b00000000 | (unsigned) 0x00, 0);
 12030  172C  01F1               	clrf	i1nrf24l01Send@data
 12031  172D  3000               	movlw	0
 12032  172E  3192  22CB  3197   	fcall	i1_nrf24l01Send
 12033  1731  00F4               	movwf	??i1_nrf24l01SetRXMode
 12034  1732  0874               	movf	??i1_nrf24l01SetRXMode,w
 12035  1733  00F5               	movwf	i1nrf24l01SetRXMode@config
 12036                           
 12037                           ;nrf24l01.c: 68: if (config.PRIM_RX != rxMode){
 12038  1734  0875               	movf	i1nrf24l01SetRXMode@config,w
 12039  1735  3901               	andlw	1
 12040  1736  0676               	xorwf	i1nrf24l01SetRXMode@rxMode,w
 12041  1737  1903               	skipnz
 12042  1738  2F64               	goto	i1l3784
 12043                           
 12044                           ;nrf24l01.c: 71: nrf24l01CELow();
 12045  1739  3191  21D2  3197   	fcall	_nrf24l01CELow
 12046                           
 12047                           ;nrf24l01.c: 72: _delay((unsigned long)((200)*(32000000/4000000.0)));
 12048  173C  30E4               	movlw	228
 12049  173D                     u477_27:	
 12050  173D  3200               	nop2
 12051  173E  3200               	nop2
 12052  173F  0B89               	decfsz	9,f
 12053  1740  2F3D               	goto	u477_27
 12054  1741  3200               	nop2
 12055  1742  3200               	nop2
 12056                           
 12057                           ;nrf24l01.c: 75: config.PRIM_RX = rxMode;
 12058  1743  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 12059  1744  3901               	andlw	1
 12060  1745  1075               	bcf	i1nrf24l01SetRXMode@config,0
 12061  1746  1D03               	skipz
 12062  1747  1475               	bsf	i1nrf24l01SetRXMode@config,0
 12063                           
 12064                           ;nrf24l01.c: 76: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, config.byte);
 12065  1748  0875               	movf	i1nrf24l01SetRXMode@config,w
 12066  1749  00F4               	movwf	??i1_nrf24l01SetRXMode
 12067  174A  0874               	movf	??i1_nrf24l01SetRXMode,w
 12068  174B  00F1               	movwf	i1nrf24l01Send@data
 12069  174C  3020               	movlw	32
 12070  174D  3192  22CB  3197   	fcall	i1_nrf24l01Send
 12071                           
 12072                           ;nrf24l01.c: 79: _delay((unsigned long)((200)*(32000000/4000000.0)));
 12073  1750  30E4               	movlw	228
 12074  1751                     u478_27:	
 12075  1751  3200               	nop2
 12076  1752  3200               	nop2
 12077  1753  0B89               	decfsz	9,f
 12078  1754  2F51               	goto	u478_27
 12079  1755  3200               	nop2
 12080  1756  3200               	nop2
 12081                           
 12082                           ;nrf24l01.c: 82: if (rxMode){
 12083  1757  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 12084  1758  1903               	btfsc	3,2
 12085  1759  2F64               	goto	i1l3784
 12086                           
 12087                           ;nrf24l01.c: 83: nrf24l01CEHigh();
 12088  175A  3191  21CF  3197   	fcall	_nrf24l01CEHigh
 12089                           
 12090                           ;nrf24l01.c: 84: _delay((unsigned long)((200)*(32000000/4000000.0)));
 12091  175D  30E4               	movlw	228
 12092  175E                     u479_27:	
 12093  175E  3200               	nop2
 12094  175F  3200               	nop2
 12095  1760  0B89               	decfsz	9,f
 12096  1761  2F5E               	goto	u479_27
 12097  1762  3200               	nop2
 12098  1763  3200               	nop2
 12099  1764                     i1l3784:	
 12100                           
 12101                           ;nrf24l01.c: 85: };nrf24l01.c: 86: };nrf24l01.c: 89: nrf24l01.RXMode = rxMode;
 12102  1764  0876               	movf	i1nrf24l01SetRXMode@rxMode,w
 12103  1765  3901               	andlw	1
 12104  1766  0021               	movlb	1	; select bank1
 12105  1767  116B               	bcf	_nrf24l01^(0+128),2	;volatile
 12106  1768  1D03               	skipz
 12107  1769  156B               	bsf	_nrf24l01^(0+128),2	;volatile
 12108  176A  0008               	return
 12109  176B                     __end_ofi1_nrf24l01SetRXMode:	
 12110                           
 12111                           	psect	text60
 12112  12CB                     __ptext60:	
 12113 ;; *************** function i1_nrf24l01Send *****************
 12114 ;; Defined at:
 12115 ;;		line 9 in file "nrf24l01.c"
 12116 ;; Parameters:    Size  Location     Type
 12117 ;;  command         1    wreg     unsigned char 
 12118 ;;  data            1    1[COMMON] unsigned char 
 12119 ;; Auto vars:     Size  Location     Type
 12120 ;;  command         1    3[COMMON] unsigned char 
 12121 ;; Return value:  Size  Location     Type
 12122 ;;                  1    wreg      unsigned char 
 12123 ;; Registers used:
 12124 ;;		wreg, status,2, status,0, pclath, cstack
 12125 ;; Tracked objects:
 12126 ;;		On entry : 0/0
 12127 ;;		On exit  : 0/0
 12128 ;;		Unchanged: 0/0
 12129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12130 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12133 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12134 ;;Total ram usage:        3 bytes
 12135 ;; Hardware stack levels used:    1
 12136 ;; Hardware stack levels required when called:    2
 12137 ;; This function calls:
 12138 ;;		_enableInterrupts
 12139 ;;		_nrf24l01SPIEnd
 12140 ;;		_nrf24l01SPISend
 12141 ;;		_nrf24l01SPIStart
 12142 ;; This function is called by:
 12143 ;;		_nrf24l01ReceivePacket
 12144 ;;		_nrf24l01ISR
 12145 ;;		i1_nrf24l01SetRXMode
 12146 ;; This function uses a non-reentrant model
 12147 ;;
 12148                           
 12149                           
 12150                           ;psect for function i1_nrf24l01Send
 12151  12CB                     i1_nrf24l01Send:	
 12152                           
 12153                           ;incstack = 0
 12154                           ; Regs used in i1_nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
 12155                           ;i1nrf24l01Send@command stored from wreg
 12156  12CB  00F3               	movwf	i1nrf24l01Send@command
 12157                           
 12158                           ;nrf24l01.c: 12: enableInterrupts(0);
 12159  12CC  3000               	movlw	0
 12160  12CD  3191  21E8  3192   	fcall	_enableInterrupts
 12161                           
 12162                           ;nrf24l01.c: 15: nrf24l01SPIStart();
 12163  12D0  3191  21F0  3192   	fcall	_nrf24l01SPIStart
 12164                           
 12165                           ;nrf24l01.c: 18: nrf24l01SPISend(command);
 12166  12D3  0873               	movf	i1nrf24l01Send@command,w
 12167  12D4  3192  2201  3192   	fcall	_nrf24l01SPISend
 12168                           
 12169                           ;nrf24l01.c: 21: data = nrf24l01SPISend(data);
 12170  12D7  0871               	movf	i1nrf24l01Send@data,w
 12171  12D8  3192  2201  3192   	fcall	_nrf24l01SPISend
 12172  12DB  00F2               	movwf	??i1_nrf24l01Send
 12173  12DC  0872               	movf	??i1_nrf24l01Send,w
 12174  12DD  00F1               	movwf	i1nrf24l01Send@data
 12175                           
 12176                           ;nrf24l01.c: 24: nrf24l01SPIEnd();
 12177  12DE  3191  21E1  3192   	fcall	_nrf24l01SPIEnd
 12178                           
 12179                           ;nrf24l01.c: 27: enableInterrupts(1);
 12180  12E1  3001               	movlw	1
 12181  12E2  3191  21E8         	fcall	_enableInterrupts
 12182                           
 12183                           ;nrf24l01.c: 29: return data;
 12184  12E4  0871               	movf	i1nrf24l01Send@data,w
 12185  12E5  0008               	return
 12186  12E6                     __end_ofi1_nrf24l01Send:	
 12187                           
 12188                           	psect	text61
 12189  11F0                     __ptext61:	
 12190 ;; *************** function _nrf24l01SPIStart *****************
 12191 ;; Defined at:
 12192 ;;		line 64 in file "interface.c"
 12193 ;; Parameters:    Size  Location     Type
 12194 ;;		None
 12195 ;; Auto vars:     Size  Location     Type
 12196 ;;		None
 12197 ;; Return value:  Size  Location     Type
 12198 ;;                  1    wreg      void 
 12199 ;; Registers used:
 12200 ;;		wreg, status,2, status,0, pclath, cstack
 12201 ;; Tracked objects:
 12202 ;;		On entry : 0/0
 12203 ;;		On exit  : 0/0
 12204 ;;		Unchanged: 0/0
 12205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12210 ;;Total ram usage:        0 bytes
 12211 ;; Hardware stack levels used:    1
 12212 ;; Hardware stack levels required when called:    8
 12213 ;; This function calls:
 12214 ;;		_nrf24l01CSLow
 12215 ;; This function is called by:
 12216 ;;		_nrf24l01Send
 12217 ;;		_nrf24l01ReceivePacket
 12218 ;;		_nrf24l01SendPacket
 12219 ;;		_nrf24l01SetTXPipe
 12220 ;;		_nrf24l01InitRegisters
 12221 ;;		i1_nrf24l01Send
 12222 ;; This function uses a non-reentrant model
 12223 ;;
 12224                           
 12225                           
 12226                           ;psect for function _nrf24l01SPIStart
 12227  11F0                     _nrf24l01SPIStart:	
 12228                           
 12229                           ;interface.c: 65: nrf24l01CSLow();
 12230                           
 12231                           ;incstack = 0
 12232 ;; hardware stack exceeded
 12233                           ; Regs used in _nrf24l01SPIStart: [wreg+status,2+status,0+pclath+cstack]
 12234  11F0  3191  21D8  3191   	fcall	_nrf24l01CSLow
 12235                           
 12236                           ;interface.c: 66: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12237  11F3  301A               	movlw	26
 12238  11F4                     u480_27:	
 12239  11F4  0B89               	decfsz	9,f
 12240  11F5  29F4               	goto	u480_27
 12241  11F6  3200               	nop2
 12242  11F7  0008               	return
 12243  11F8                     __end_of_nrf24l01SPIStart:	
 12244                           
 12245                           	psect	text62
 12246  11D8                     __ptext62:	
 12247 ;; *************** function _nrf24l01CSLow *****************
 12248 ;; Defined at:
 12249 ;;		line 17 in file "interface.c"
 12250 ;; Parameters:    Size  Location     Type
 12251 ;;		None
 12252 ;; Auto vars:     Size  Location     Type
 12253 ;;		None
 12254 ;; Return value:  Size  Location     Type
 12255 ;;                  1    wreg      void 
 12256 ;; Registers used:
 12257 ;;		None
 12258 ;; Tracked objects:
 12259 ;;		On entry : 0/0
 12260 ;;		On exit  : 0/0
 12261 ;;		Unchanged: 0/0
 12262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12267 ;;Total ram usage:        0 bytes
 12268 ;; Hardware stack levels used:    1
 12269 ;; Hardware stack levels required when called:    7
 12270 ;; This function calls:
 12271 ;;		Nothing
 12272 ;; This function is called by:
 12273 ;;		_nrf24l01SPIStart
 12274 ;; This function uses a non-reentrant model
 12275 ;;
 12276                           
 12277                           
 12278                           ;psect for function _nrf24l01CSLow
 12279  11D8                     _nrf24l01CSLow:	
 12280                           
 12281                           ;interface.c: 18: PORTAbits.RA1 = 0;
 12282                           
 12283                           ;incstack = 0
 12284 ;; hardware stack exceeded
 12285                           ; Regs used in _nrf24l01CSLow: []
 12286  11D8  0020               	movlb	0	; select bank0
 12287  11D9  108C               	bcf	12,1	;volatile
 12288  11DA  0008               	return
 12289  11DB                     __end_of_nrf24l01CSLow:	
 12290                           
 12291                           	psect	text63
 12292  1201                     __ptext63:	
 12293 ;; *************** function _nrf24l01SPISend *****************
 12294 ;; Defined at:
 12295 ;;		line 51 in file "interface.c"
 12296 ;; Parameters:    Size  Location     Type
 12297 ;;  data            1    wreg     unsigned char 
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;  data            1    0[COMMON] unsigned char 
 12300 ;; Return value:  Size  Location     Type
 12301 ;;                  1    wreg      unsigned char 
 12302 ;; Registers used:
 12303 ;;		wreg
 12304 ;; Tracked objects:
 12305 ;;		On entry : 0/0
 12306 ;;		On exit  : 0/0
 12307 ;;		Unchanged: 0/0
 12308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;Total ram usage:        0 bytes
 12314 ;; Hardware stack levels used:    1
 12315 ;; Hardware stack levels required when called:    7
 12316 ;; This function calls:
 12317 ;;		Nothing
 12318 ;; This function is called by:
 12319 ;;		_nrf24l01Send
 12320 ;;		_nrf24l01ReceivePacket
 12321 ;;		_nrf24l01SendPacket
 12322 ;;		_nrf24l01SetTXPipe
 12323 ;;		_nrf24l01InitRegisters
 12324 ;;		i1_nrf24l01Send
 12325 ;; This function uses a non-reentrant model
 12326 ;;
 12327                           
 12328                           
 12329                           ;psect for function _nrf24l01SPISend
 12330  1201                     _nrf24l01SPISend:	
 12331                           
 12332                           ;incstack = 0
 12333 ;; hardware stack exceeded
 12334                           ; Regs used in _nrf24l01SPISend: [wreg]
 12335                           ;nrf24l01SPISend@data stored from wreg
 12336  1201  00F0               	movwf	nrf24l01SPISend@data
 12337                           
 12338                           ;interface.c: 52: SSP1BUF = data;
 12339  1202  0870               	movf	nrf24l01SPISend@data,w
 12340  1203  0024               	movlb	4	; select bank4
 12341  1204  0091               	movwf	17	;volatile
 12342                           
 12343                           ;interface.c: 54: PORTCbits.RC4 = 1;
 12344  1205  0020               	movlb	0	; select bank0
 12345  1206  160E               	bsf	14,4	;volatile
 12346  1207                     i1l48:	
 12347                           ;interface.c: 56: while (!SSP1STATbits.BF){
 12348                           
 12349  1207  0024               	movlb	4	; select bank4
 12350  1208  1814               	btfsc	20,0	;volatile
 12351  1209  2A0C               	goto	i1l3030
 12352                           
 12353                           ;interface.c: 57: __nop();
 12354  120A  0000               	nop
 12355  120B  2A07               	goto	i1l48
 12356  120C                     i1l3030:	
 12357                           
 12358                           ;interface.c: 58: };interface.c: 60: return SSP1BUF;
 12359  120C  0811               	movf	17,w	;volatile
 12360  120D  0008               	return
 12361  120E                     __end_of_nrf24l01SPISend:	
 12362                           
 12363                           	psect	text64
 12364  11E1                     __ptext64:	
 12365 ;; *************** function _nrf24l01SPIEnd *****************
 12366 ;; Defined at:
 12367 ;;		line 70 in file "interface.c"
 12368 ;; Parameters:    Size  Location     Type
 12369 ;;		None
 12370 ;; Auto vars:     Size  Location     Type
 12371 ;;		None
 12372 ;; Return value:  Size  Location     Type
 12373 ;;                  1    wreg      void 
 12374 ;; Registers used:
 12375 ;;		wreg, status,2, status,0, pclath, cstack
 12376 ;; Tracked objects:
 12377 ;;		On entry : 0/0
 12378 ;;		On exit  : 0/0
 12379 ;;		Unchanged: 0/0
 12380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12385 ;;Total ram usage:        0 bytes
 12386 ;; Hardware stack levels used:    1
 12387 ;; Hardware stack levels required when called:    8
 12388 ;; This function calls:
 12389 ;;		_nrf24l01CSHigh
 12390 ;; This function is called by:
 12391 ;;		_nrf24l01Send
 12392 ;;		_nrf24l01ReceivePacket
 12393 ;;		_nrf24l01SendPacket
 12394 ;;		_nrf24l01SetTXPipe
 12395 ;;		_nrf24l01InitRegisters
 12396 ;;		i1_nrf24l01Send
 12397 ;; This function uses a non-reentrant model
 12398 ;;
 12399                           
 12400                           
 12401                           ;psect for function _nrf24l01SPIEnd
 12402  11E1                     _nrf24l01SPIEnd:	
 12403                           
 12404                           ;interface.c: 71: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12405                           
 12406                           ;incstack = 0
 12407 ;; hardware stack exceeded
 12408                           ; Regs used in _nrf24l01SPIEnd: [wreg+status,2+status,0+pclath+cstack]
 12409  11E1  301A               	movlw	26
 12410  11E2                     u481_27:	
 12411  11E2  0B89               	decfsz	9,f
 12412  11E3  29E2               	goto	u481_27
 12413  11E4  3200               	nop2
 12414                           
 12415                           ;interface.c: 72: nrf24l01CSHigh();
 12416  11E5  3191  21D5         	fcall	_nrf24l01CSHigh
 12417  11E7  0008               	return
 12418  11E8                     __end_of_nrf24l01SPIEnd:	
 12419                           
 12420                           	psect	text65
 12421  11D5                     __ptext65:	
 12422 ;; *************** function _nrf24l01CSHigh *****************
 12423 ;; Defined at:
 12424 ;;		line 22 in file "interface.c"
 12425 ;; Parameters:    Size  Location     Type
 12426 ;;		None
 12427 ;; Auto vars:     Size  Location     Type
 12428 ;;		None
 12429 ;; Return value:  Size  Location     Type
 12430 ;;                  1    wreg      void 
 12431 ;; Registers used:
 12432 ;;		None
 12433 ;; Tracked objects:
 12434 ;;		On entry : 0/0
 12435 ;;		On exit  : 0/0
 12436 ;;		Unchanged: 0/0
 12437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;Total ram usage:        0 bytes
 12443 ;; Hardware stack levels used:    1
 12444 ;; Hardware stack levels required when called:    7
 12445 ;; This function calls:
 12446 ;;		Nothing
 12447 ;; This function is called by:
 12448 ;;		_nrf24l01SPIEnd
 12449 ;; This function uses a non-reentrant model
 12450 ;;
 12451                           
 12452                           
 12453                           ;psect for function _nrf24l01CSHigh
 12454  11D5                     _nrf24l01CSHigh:	
 12455                           
 12456                           ;interface.c: 23: PORTAbits.RA1 = 1;
 12457                           
 12458                           ;incstack = 0
 12459 ;; hardware stack exceeded
 12460                           ; Regs used in _nrf24l01CSHigh: []
 12461  11D5  0020               	movlb	0	; select bank0
 12462  11D6  148C               	bsf	12,1	;volatile
 12463  11D7  0008               	return
 12464  11D8                     __end_of_nrf24l01CSHigh:	
 12465                           
 12466                           	psect	text66
 12467  11E8                     __ptext66:	
 12468 ;; *************** function _enableInterrupts *****************
 12469 ;; Defined at:
 12470 ;;		line 76 in file "interface.c"
 12471 ;; Parameters:    Size  Location     Type
 12472 ;;  enable          1    wreg     unsigned char 
 12473 ;; Auto vars:     Size  Location     Type
 12474 ;;  enable          1    0[COMMON] unsigned char 
 12475 ;; Return value:  Size  Location     Type
 12476 ;;                  1    wreg      void 
 12477 ;; Registers used:
 12478 ;;		wreg, status,0
 12479 ;; Tracked objects:
 12480 ;;		On entry : 0/0
 12481 ;;		On exit  : 0/0
 12482 ;;		Unchanged: 0/0
 12483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12488 ;;Total ram usage:        0 bytes
 12489 ;; Hardware stack levels used:    1
 12490 ;; Hardware stack levels required when called:    7
 12491 ;; This function calls:
 12492 ;;		Nothing
 12493 ;; This function is called by:
 12494 ;;		_nrf24l01Send
 12495 ;;		_nrf24l01SendPacket
 12496 ;;		i1_nrf24l01Send
 12497 ;; This function uses a non-reentrant model
 12498 ;;
 12499                           
 12500                           
 12501                           ;psect for function _enableInterrupts
 12502  11E8                     _enableInterrupts:	
 12503                           
 12504                           ;incstack = 0
 12505 ;; hardware stack exceeded
 12506                           ; Regs used in _enableInterrupts: [wreg+status,0]
 12507                           ;enableInterrupts@enable stored from wreg
 12508  11E8  00F0               	movwf	enableInterrupts@enable
 12509                           
 12510                           ;interface.c: 77: PIE0bits.INTE = enable;
 12511  11E9  0C70               	rrf	enableInterrupts@enable,w
 12512  11EA  0021               	movlb	1	; select bank1
 12513  11EB  1C03               	skipc
 12514  11EC  1010               	bcf	16,0	;volatile
 12515  11ED  1803               	skipnc
 12516  11EE  1410               	bsf	16,0	;volatile
 12517  11EF  0008               	return
 12518  11F0                     __end_of_enableInterrupts:	
 12519                           
 12520                           	psect	text67
 12521  11D2                     __ptext67:	
 12522 ;; *************** function _nrf24l01CELow *****************
 12523 ;; Defined at:
 12524 ;;		line 7 in file "interface.c"
 12525 ;; Parameters:    Size  Location     Type
 12526 ;;		None
 12527 ;; Auto vars:     Size  Location     Type
 12528 ;;		None
 12529 ;; Return value:  Size  Location     Type
 12530 ;;                  1    wreg      void 
 12531 ;; Registers used:
 12532 ;;		None
 12533 ;; Tracked objects:
 12534 ;;		On entry : 0/0
 12535 ;;		On exit  : 0/0
 12536 ;;		Unchanged: 0/0
 12537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12542 ;;Total ram usage:        0 bytes
 12543 ;; Hardware stack levels used:    1
 12544 ;; Hardware stack levels required when called:    7
 12545 ;; This function calls:
 12546 ;;		Nothing
 12547 ;; This function is called by:
 12548 ;;		_nrf24l01SetRXMode
 12549 ;;		_nrf24l01ReceivePacket
 12550 ;;		_nrf24l01SendPacket
 12551 ;;		_nrf24l01Init
 12552 ;;		i1_nrf24l01SetRXMode
 12553 ;; This function uses a non-reentrant model
 12554 ;;
 12555                           
 12556                           
 12557                           ;psect for function _nrf24l01CELow
 12558  11D2                     _nrf24l01CELow:	
 12559                           
 12560                           ;interface.c: 8: PORTAbits.RA0 = 0;
 12561                           
 12562                           ;incstack = 0
 12563 ;; hardware stack exceeded
 12564                           ; Regs used in _nrf24l01CELow: []
 12565  11D2  0020               	movlb	0	; select bank0
 12566  11D3  100C               	bcf	12,0	;volatile
 12567  11D4  0008               	return
 12568  11D5                     __end_of_nrf24l01CELow:	
 12569                           
 12570                           	psect	text68
 12571  11CF                     __ptext68:	
 12572 ;; *************** function _nrf24l01CEHigh *****************
 12573 ;; Defined at:
 12574 ;;		line 12 in file "interface.c"
 12575 ;; Parameters:    Size  Location     Type
 12576 ;;		None
 12577 ;; Auto vars:     Size  Location     Type
 12578 ;;		None
 12579 ;; Return value:  Size  Location     Type
 12580 ;;                  1    wreg      void 
 12581 ;; Registers used:
 12582 ;;		None
 12583 ;; Tracked objects:
 12584 ;;		On entry : 0/0
 12585 ;;		On exit  : 0/0
 12586 ;;		Unchanged: 0/0
 12587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;Total ram usage:        0 bytes
 12593 ;; Hardware stack levels used:    1
 12594 ;; Hardware stack levels required when called:    7
 12595 ;; This function calls:
 12596 ;;		Nothing
 12597 ;; This function is called by:
 12598 ;;		_nrf24l01SetRXMode
 12599 ;;		_nrf24l01ReceivePacket
 12600 ;;		_nrf24l01SendPacket
 12601 ;;		_nrf24l01Init
 12602 ;;		i1_nrf24l01SetRXMode
 12603 ;; This function uses a non-reentrant model
 12604 ;;
 12605                           
 12606                           
 12607                           ;psect for function _nrf24l01CEHigh
 12608  11CF                     _nrf24l01CEHigh:	
 12609                           
 12610                           ;interface.c: 13: PORTAbits.RA0 = 1;
 12611                           
 12612                           ;incstack = 0
 12613 ;; hardware stack exceeded
 12614                           ; Regs used in _nrf24l01CEHigh: []
 12615  11CF  0020               	movlb	0	; select bank0
 12616  11D0  140C               	bsf	12,0	;volatile
 12617  11D1  0008               	return
 12618  11D2                     __end_of_nrf24l01CEHigh:	
 12619                           
 12620                           	psect	text69
 12621  11CD                     __ptext69:	
 12622 ;; *************** function _exception *****************
 12623 ;; Defined at:
 12624 ;;		line 80 in file "interface.c"
 12625 ;; Parameters:    Size  Location     Type
 12626 ;;  exception       1    wreg     unsigned char 
 12627 ;; Auto vars:     Size  Location     Type
 12628 ;;  exception       1    0[COMMON] unsigned char 
 12629 ;; Return value:  Size  Location     Type
 12630 ;;                  1    wreg      void 
 12631 ;; Registers used:
 12632 ;;		wreg
 12633 ;; Tracked objects:
 12634 ;;		On entry : 0/0
 12635 ;;		On exit  : 0/0
 12636 ;;		Unchanged: 0/0
 12637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12642 ;;Total ram usage:        0 bytes
 12643 ;; Hardware stack levels used:    1
 12644 ;; This function calls:
 12645 ;;		Nothing
 12646 ;; This function is called by:
 12647 ;;		_nrf24l01ISR
 12648 ;; This function uses a non-reentrant model
 12649 ;;
 12650                           
 12651                           
 12652                           ;psect for function _exception
 12653  11CD                     _exception:	
 12654                           
 12655                           ;incstack = 0
 12656                           ; Regs used in _exception: [wreg]
 12657  11CD  0001               	reset	;# 
 12658  11CE  0008               	return
 12659  11CF                     __end_of_exception:	
 12660  007E                     btemp	set	126	;btemp
 12661  007E                     int$flags	set	126
 12662  007E                     wtemp0	set	126


Data Sizes:
    Strings     49
    Constant    46
    Data        1
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80     72      77
    BANK2            80     48      68
    BANK3            80      0      61
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> setMessage@status(BANK1[2]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), NULL(NULL[0]), STR_1(CODE[2]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), NULL(NULL[0]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strtok@sp	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), NULL(NULL[0]), romDataMap(BANK3[28]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> packet.Message(BANK0[32]), packet.Message(BANK0[32]), RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), NULL(NULL[0]), romDataMap(BANK3[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), STR_11(CODE[4]), NULL(NULL[0]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 28
		 -> handleRXData@string(BANK1[16]), romDataMap(BANK3[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 28
		 -> handleRXData@string(BANK1[16]), romDataMap(BANK3[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> romDataMap.name(BANK3[16]), RXPacket(BANK3[33]), romDataMap(BANK3[28]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), NULL(NULL[0]), 
		 -> handleRXData@string(BANK1[16]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 28
		 -> romDataMap.name(BANK3[16]), ftoa@buf(BANK2[17]), STR_12(CODE[5]), STR_10(CODE[6]), 
		 -> STR_9(CODE[7]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), romDataMap(BANK3[28]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    atof@s	PTR const unsigned char  size(1) Largest target is 16
		 -> handleRXData@string(BANK1[16]), 

    strtod@s	PTR const unsigned char  size(1) Largest target is 16
		 -> handleRXData@string(BANK1[16]), 

    strtod@res	PTR PTR const unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_13(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendPacket@Packet	PTR struct . size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    TXPacket	PTR struct . size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), NULL(NULL[0]), 

    nrf24l01SendACK@packet	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    checkTXPower@rxPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    setMessage@topic	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[5]), STR_10(CODE[6]), STR_9(CODE[7]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[4]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    setMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 28
		 -> handleRXData@string(BANK1[16]), romDataMap(BANK3[28]), 

    sp__strtok	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), NULL(NULL[0]), 

    handleRXData@strings	PTR unsigned char  size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), NULL(NULL[0]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    handleRXData@RXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01ReceivePacket
    _nrf24l01ReceivePacket->i1_memset
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode
    i1_nrf24l01SetRXMode->i1_nrf24l01Send

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetRXPipe->_nrf24l01Send
    _nrf24l01GetPipe->___lwmod
    _nrf24l01GetPipe->_strlen
    _sleep->_handleRXData
    _handleRXData->_atof
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _nrf24l01SendACK->_nrf24l01SendPacket
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01SendPacket->_nrf24l01ChangeTXPower
    _nrf24l01SetRXMode->_nrf24l01Send
    _atof->_strtod
    _strtod->___ftmul
    ___altoft->___ftpack
    _setMessage->_ftoa
    _strcat->_ftoa
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _checkTXPower->_nrf24l01ChangeTXPower
    _nrf24l01ChangeTXPower->_nrf24l01Send
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_setMessage
    _sleep->_handleRXData
    _handleRXData->_atof
    _atof->_strtod
    _setMessage->_strcat
    _strcat->_ftoa
    _ftoa->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0  153236
                                             36 BANK1     36    36      0
                           ___lbtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                 _nrf24l01SendPacket
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                         _setMessage
                              _sleep
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    5687
                                             19 BANK0      2     2      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               12    12      0    5687
                                              7 BANK0     12    12      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    4     4      0    2239
                                              3 BANK0      4     4      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      5     5      0     658
                                              6 BANK0      5     5      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                49    49      0   88687
                                             35 BANK1      1     1      0
                                              0 BANK2     48    48      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
                       _checkTXPower
                        _getADCValue
                       _nrf24l01Send
                 _nrf24l01SendPacket
                         _setMessage
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                4     2      2   27336
                                             30 BANK1      4     2      2
                         _doWDTSleep
                       _handleRXData
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _handleRXData                                        19    19      0   24292
                                             79 BANK0      1     1      0
                                             12 BANK1     18    18      0
                               _atof
                _nrf24l01GetRXPacket
                    _nrf24l01SendACK
                             _strcmp
                             _strcpy
                             _strtok
 ---------------------------------------------------------------------------------
 (3) _strtok                                               6     4      2    1895
                                             14 BANK0      6     4      2
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (4) _strspn                                               7     5      2     660
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strcspn                                              7     5      2     660
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (5) _strchr                                               7     3      4     444
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     697
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               5     2      3     319
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SendACK                                      2     2      0    6046
                                             14 BANK0      2     2      0
                 _nrf24l01SendPacket
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SetTXPipe                                    3     3      0     492
                                              4 BANK0      3     3      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SendPacket                                   7     5      2    5386
                                              7 BANK0      7     5      2
                   _enableInterrupts
                     _nrf24l01CEHigh
                      _nrf24l01CELow
              _nrf24l01ChangeTXPower
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     170
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRXMode                                    3     3      0    2299
                                              3 BANK0      3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _atof                                                 5     1      4   14919
                                             78 BANK0      1     1      0
                                              8 BANK1      4     0      4
                             _strtod
 ---------------------------------------------------------------------------------
 (4) _strtod                                              15    12      3   14861
                                             71 BANK0      7     4      3
                                              0 BANK1      8     8      0
                           ___altoft
                             ___bmul
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     270
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     448
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    3239
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _setMessage                                          10     3      7   18799
                                             25 BANK1     10     3      7
                           ___lbtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     743
                                             19 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     476
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4   16074
                                             79 BANK0      1     1      0
                                              6 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             36    26     10    2229
                                             24 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     337
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     340
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    3170
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     430
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4809
                                             27 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     312
                                             55 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             16    10      6    4050
                                             55 BANK0     16    10      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6     670
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         12     9      3   12364
                                             43 BANK0     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                         _doWDTSleep
 ---------------------------------------------------------------------------------
 (2) _doWDTSleep                                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             16    10      6    4360
                                             27 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    4564
                                             14 BANK0     13     7      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3281
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _checkTXPower                                         2     2      0    2457
                                              7 BANK0      2     2      0
              _nrf24l01ChangeTXPower
                _nrf24l01GetRXPacket
 ---------------------------------------------------------------------------------
 (3) _nrf24l01GetRXPacket                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _nrf24l01ChangeTXPower                                4     2      2    2434
                                              3 BANK0      4     2      2
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    2143
                                              0 BANK0      3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    3034
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    3012
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                 0     0      0    1902
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (11) _nrf24l01ISR                                         2     2      0    1902
                                             11 COMMON     2     2      0
                          _exception
                   _nrf24l01CheckACK
              _nrf24l01ReceivePacket
                     i1_nrf24l01Send
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (12) _nrf24l01ReceivePacket                               3     3      0     534
                                              8 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                           i1_memset
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) i1_memset                                            8     2      6     152
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (12) _nrf24l01CheckACK                                    3     3      0     544
                                              7 COMMON     3     3      0
                i1_nrf24l01SetRXMode
                           i1_strcmp
 ---------------------------------------------------------------------------------
 (13) i1_strcmp                                            5     2      3     121
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (12) i1_nrf24l01SetRXMode                                 3     3      0     423
                                              4 COMMON     3     3      0
                     _nrf24l01CEHigh
                      _nrf24l01CELow
                     i1_nrf24l01Send
 ---------------------------------------------------------------------------------
 (13) i1_nrf24l01Send                                      3     2      1     267
                                              1 COMMON     3     2      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIStart                                    0     0      0       0
                      _nrf24l01CSLow
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSLow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (14) _nrf24l01SPIEnd                                      0     0      0       0
                     _nrf24l01CSHigh
 ---------------------------------------------------------------------------------
 (15) _nrf24l01CSHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CELow                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01CEHigh                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _exception                                           1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lbtoft
     ___ftpack
   _loop
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
     ___lbtoft
       ___ftpack
     _checkTXPower
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01GetRXPacket
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     _nrf24l01SendPacket
       _enableInterrupts
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01ChangeTXPower
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strlen
     _setMessage
       ___lbtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _doWDTSleep
       _memset (ARG)
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
     _sleep
       _doWDTSleep
       _handleRXData
         _atof
           _strtod
             ___altoft
               ___ftpack
             ___bmul
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftge
             ___ftmul
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
             ___ftneg
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _doWDTSleep
             ___lmul
             _isdigit
             _isspace
         _nrf24l01GetRXPacket
         _nrf24l01SendACK
           _nrf24l01SendPacket
             _enableInterrupts
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01ChangeTXPower
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
             _nrf24l01SetRXMode
               _nrf24l01CEHigh
               _nrf24l01CELow
               _nrf24l01Send
                 _enableInterrupts
                 _nrf24l01SPIEnd
                   _nrf24l01CSHigh
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
                   _nrf24l01CSLow
             _strlen
           _nrf24l01SetTXPipe
             ___bmul
             _nrf24l01SPIEnd
               _nrf24l01CSHigh
             _nrf24l01SPISend
             _nrf24l01SPIStart
               _nrf24l01CSLow
         _strcmp
         _strcpy
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
       _nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01InterfaceInit
   _nrf24l01SendPacket
     _enableInterrupts
     _nrf24l01CEHigh
     _nrf24l01CELow
     _nrf24l01ChangeTXPower
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     _strlen
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
       _nrf24l01CSHigh
     _nrf24l01SPISend
     _nrf24l01SPIStart
       _nrf24l01CSLow
   _setMessage
     ___lbtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _doWDTSleep
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _doWDTSleep
     _memset (ARG)
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _doWDTSleep
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
   _sleep
     _doWDTSleep
     _handleRXData
       _atof
         _strtod
           ___altoft
             ___ftpack
           ___bmul
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _doWDTSleep
           ___lmul
           _isdigit
           _isspace
       _nrf24l01GetRXPacket
       _nrf24l01SendACK
         _nrf24l01SendPacket
           _enableInterrupts
           _nrf24l01CEHigh
           _nrf24l01CELow
           _nrf24l01ChangeTXPower
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
           _nrf24l01SetRXMode
             _nrf24l01CEHigh
             _nrf24l01CELow
             _nrf24l01Send
               _enableInterrupts
               _nrf24l01SPIEnd
                 _nrf24l01CSHigh
               _nrf24l01SPISend
               _nrf24l01SPIStart
                 _nrf24l01CSLow
           _strlen
         _nrf24l01SetTXPipe
           ___bmul
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       _strcmp
       _strcpy
       _strtok
         _strcspn
           _strchr
         _strspn
           _strchr
     _nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _exception
     _nrf24l01CheckACK
       i1_nrf24l01SetRXMode
         _nrf24l01CEHigh
         _nrf24l01CELow
         i1_nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
             _nrf24l01CSHigh
           _nrf24l01SPISend
           _nrf24l01SPIStart
             _nrf24l01CSLow
       i1_strcmp
     _nrf24l01ReceivePacket
       _nrf24l01CEHigh
       _nrf24l01CELow
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
       i1_memset
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow
     i1_nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
         _nrf24l01CSHigh
       _nrf24l01SPISend
       _nrf24l01SPIStart
         _nrf24l01CSLow
     i1_nrf24l01SetRXMode
       _nrf24l01CEHigh
       _nrf24l01CELow
       i1_nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
           _nrf24l01CSHigh
         _nrf24l01SPISend
         _nrf24l01SPIStart
           _nrf24l01CSLow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     30      44       9       85.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Jul 27 14:01:06 2018

                  ___altoft@exp 002E                  ___bmul@product 0022                     __CFG_CP$OFF 0000  
                 ___altoft@sign 002F             ___wmul@multiplicand 0022             handleRXData@strings 00BD  
           nrf24l01Send@command 0022                    ___ftadd@exp1 003A                    ___ftadd@exp2 0039  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0038                             l312 0D68  
                           l308 0D56                             l180 09C8                             l343 139E  
                           l700 0967                             l701 096F                             l197 0A73  
                           l464 039F                             l490 1325                             l475 0442  
                           l467 03BE                             l724 0FA9                             l915 00E0  
                           l916 0094                             l693 0954                             l933 01BE  
                           l784 0B27                             l944 02CE                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             wreg 0009               sleep@milliseconds 00BE  
           nrf24l01SendPacket@i 002D                            ?_ISR 0070                    ___ftdiv@cntr 0045  
                  ___ftdiv@sign 004A                  ??_nrf24l01Init 0033                            l1047 12B1  
                          l3010 123F                            l3012 1240                            l3200 0FBB  
                          l3112 131F                            l4000 06F5                            l3130 08DF  
                          l3204 0FCD                            l3140 090D                            l3132 08ED  
                          l3300 0108                            l3060 0D84                            l3052 0D5B  
                          l3214 0FE8                            l3230 16CD                            l4014 074E  
                          l3144 0918                            l3224 16A7                            l3400 02EA  
                          l3304 010F                            l3064 0D9D                            l4008 073F  
                          l3154 0F32                            l3226 16B5                            l3234 16D8  
                          l3306 0115                            l3082 0DD4                            l3164 0F48  
                          l3324 0178                            l3244 003D                            l3092 0E13  
                          l3084 0DE1                            l3068 0DBE                            l3420 155B  
                          l3412 15A9                            l4052 14CA                            l3182 0F75  
                          l3158 0F39                            l3510 031F                            l3350 01C2  
                          l3254 0058                            l3246 004F                            l3094 0DE6  
                          l3406 1583                            l4054 14D6                            l4062 14EB  
                          l3184 0F7F                            l3176 0F62                            l3600 04BD  
                          l3352 01F0                            l3336 0192                            l3328 017D  
                          l3272 007D                            l3264 007B                            l3256 005C  
                          l4312 1306                            l3424 1579                            l3408 158B  
                          l3440 17BE                  ??_nrf24l01Send 0021                            l3194 0F9B  
                          l3186 0F84                            l3370 0244                            l3266 006D  
                          l3258 0062                            l3418 1553                            l4058 14E2  
                          l2740 092A                            l3196 0FA5                            l3188 0F88  
                          l3516 032F                            l3524 035D                            l3380 0278  
                          l3356 0218                            l2820 1377                            l2814 1696  
                          l3542 03A6                            l3534 036C                            l3710 1424  
                          l3374 024B                            l3366 023C                            l3294 00F9  
                          l2822 1383                            l3462 17FD                            l3454 17DA  
                          l3446 17C3                            l2744 0931                            l2808 1684  
                          l3608 135C                            l3536 039B                            l3704 129D  
                          l3712 1430                            l2840 1527                            l3384 02A0  
                          l3288 00E9                            l3480 1450                            l3464 17FE  
                          l4336 0809                            l4184 15B3                            l2754 0959  
                          l2746 093B                            l3650 0B39                            l3618 0AC5  
                          l2834 121B                            l3570 041F                            l3538 03A1  
                          l3714 1438                            l3394 02C6                            l3378 0273  
                          l4346 0819                            l4186 15D6                            l2756 0961  
                          l2748 0940                            l2916 0C78                            l2908 0C5F  
                          l2932 1613                            l3644 0B1D                            l3636 0AFE  
                          l3660 14AE                            l3580 0455                            l3564 03F2  
                          l3548 03CD                            l2844 1531                            l3484 1469  
                          l3476 1447                            l2950 0CB1                            l3646 0B2B  
                          l3638 0B0F                            l3590 046D                            l3582 0458  
                          l3574 042E                            l3558 03EC                            l3726 0E5E  
                          l2854 1220                            l4366 04F7                            l2928 15FD  
                          l3744 13AA                            l4528 0BED                            l3754 13BD  
                          l3850 0A42                            l3658 149E                            l2858 1226  
                          l2778 083D                            l3852 0A4A                            l2980 0D1E  
                          l2972 0D0A                            l2956 0CC7                            l3596 04B2  
                          l2876 1637                            l2894 0C1E                            l3854 0A36  
                          l3598 02FC                            l2878 1647                            l2798 0879  
                          l2888 0C08                            l2984 0D26                            l2968 0D02  
                          STR_1 185D                    __CFG_WDTE$ON 0000                            STR_2 185D  
                          STR_3 185D                            STR_4 185D                            STR_5 185D  
                          STR_6 1855                            STR_7 1846                            STR_8 184B  
                          STR_9 1834                            u3015 1326                            u3025 132B  
                          u2405 0976                            u2325 0936                            u3205 0F63  
                          u3055 08E2                            u2345 094F                            u4105 0B1E  
                          u3235 0F76                            u3075 08EE                            u2365 095C  
                          u4045 0ACD                            u3085 0902                            u2605 163C  
                          u4214 13A4                            u4135 14A3                            u3095 090E  
                          u4215 13A3                            u2465 1672                            u3265 0F89  
                          u2545 1532                            u4075 0AFF                            u3355 16AA  
                          u2555 1539                            u2645 0C30                            u3295 0F9C  
                          u2655 0C40                            u3375 16C3                            u2665 0C60  
                          u2825 0D27                            u3385 16CE                            u2675 0C6F  
                          u2835 0D2D                            u2755 0CD3                            u2685 0C79  
                          u2765 0CE3                            u4455 14CD                            u2785 0D0B  
                          u2945 0DB8                            u2795 0D11                            u4707 0DDD  
                          u4475 14DC                            u4717 0DF8                            u4485 14E3  
                          u3935 0415                            u4727 0E04                            u4575 15C4  
                          i1l48 1207                            u4737 0E14                            u4657 0B6B  
                          u3955 0426                            u4747 0850                            u4667 13E0  
                          u3965 0438                            u4757 0865                            u4677 13EF  
                          u3975 044A                            u4767 0873                            u4687 0D64  
                          u4697 0DC5                            _WPUA 020C                            _WPUC 020E  
__size_of_nrf24l01InterfaceInit 001C                    __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000  
 __end_of_nrf24l01InterfaceInit 1354                            _atof 1242                            _main 0B49  
                          _ftoa 0E18                    ___ftpack@arg 0020                            _loop 04C3  
                  ___ftpack@exp 0023                            fsr0h 0005                            fsr1h 0007  
                          indf0 0000                            fsr0l 0004                            indf1 0001  
                          fsr1l 0006                            btemp 007E  __size_of_nrf24l01ReceivePacket 004D  
                 __CFG_BORV$LOW 0000   __end_of_nrf24l01ReceivePacket 08CE                            start 000F  
         nrf24l01SetRXPipe@pipe 0025                   __CFG_CSWEN$ON 0000               ___bmul@multiplier 0023  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0065                    ___ftmul@sign 0066  
   __size_of_nrf24l01SendPacket 00CA                           ??_ISR 007D                    ___fttol@exp1 00A5  
          __size_of_getADCValue 0094                 ??_nrf24l01CELow 0070                    ___fttol@lval 00A1  
               ??_nrf24l01CSLow 0070                           ?_atof 00A8                           ?_main 0070  
                         ?_ftoa 00A6                           ?_loop 0070                 __end_of___ftadd 1000  
                         STR_10 183B                           STR_11 1859                           STR_12 1850  
                         STR_13 1829                 __end_of___ftdiv 0C9A                 __end_of___ftneg 1201  
               __end_of___lldiv 0921                 __end_of___ftmul 0D4E                 __end_of___llmod 16E1  
               __end_of___ftsub 1372                 __end_of___fttol 0B49                  __CFG_DEBUG$OFF 0000  
                         i1l173 000D                           i1l335 17AC                 __end_of___lwmod 14F0  
        enableInterrupts@enable 0070                      i1memset@p1 0070             ___lmul@multiplicand 0024  
                 __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002D  
                 ___awtoft@sign 002D                 __end_of_dpowers 1828                 __end_of_isdigit 121D  
                         _sleep 0800                   ___ftpack@sign 0024                           atof@s 006E  
                         ftoa@f 00A6                           ftoa@l 00AE                 __end_of_isspace 1242  
                __CFG_BOREN$OFF 0000                _enableInterrupts 11E8                           status 0003  
                         wtemp0 007E                 __end_of_sprintf 04C3     __end_ofi1_nrf24l01SetRXMode 176B  
              __end_ofi1_memset 1298                 __end_of_strcspn 157E  __size_of_nrf24l01ChangeTXPower 003F  
             getADCValue@adcSum 0054   __end_of_nrf24l01ChangeTXPower 169E                __end_ofi1_strcmp 141F  
              _nrf24l01SPIStart 11F0                 __initialization 0011                _nrf24l01CheckACK 146F  
        nrf24l01InitRegisters@i 0031                    __end_of_atof 1255                    __end_of_main 0BF1  
                  __end_of_ftoa 0F0A            __end_of_handleRXData 0A16                    __end_of_loop 0672  
  nrf24l01ChangeTXPower@rfSetup 0026                ??_nrf24l01CEHigh 0070                      i1strcmp@s1 0070  
                    i1strcmp@s2 0072                          ??_atof 006E                          ??_main 00C4  
                        ??_ftoa 006F                   ___fttol@sign1 00A0                          ??_loop 00C3  
              ??_nrf24l01CSHigh 0070                ??_nrf24l01SPIEnd 0070             _nrf24l01GetRXPacket 0002  
      __size_of_nrf24l01SPISend 000D                __end_of___altoft 165F                ___llmod@dividend 0032  
                        _ADRESH 009C                          _ADRESL 009B                          ?_sleep 00BE  
              __end_of___awtoft 13D4                          _ANSELA 018C                          _ANSELC 018E  
              __end_of___ftpack 0986                __end_of___lbtoft 1301                __end_of___lltoft 14C3  
                        i1l3030 120C                          _ODCONA 028C        __size_of_nrf24l01GetPipe 0038  
                        _ODCONC 028E                          i1l4082 178A                          i1l4074 177A  
                        i1l3800 1401                          i1l4096 17AD                          i1l3804 1419  
                        i1l3920 08C0                          i1l3764 172C                          i1l3924 08C8  
                        i1l3916 08B0                          i1l3784 1764                          i1l3792 1284  
                        i1l3796 13F9                          _INLVLA 038C                          _INLVLC 038E  
         __size_of_checkTXPower 0014                          u480_27 11F4                          u481_27 11E2  
                        u477_27 173D                          u478_27 1751                          u479_27 175E  
                        _STATUS 0003        __size_of_nrf24l01SendACK 002E            ?_nrf24l01GetRXPacket 0070  
          __size_of_nrf24l01ISR 004A         nrf24l01SetRXMode@config 0024                          ___bmul 121D  
                        ___ftge 15E6                          ___lmul 151E         nrf24l01SetRXMode@rxMode 0025  
                        ___wmul 131C                       ??___ftadd 0034                  __CFG_STVREN$ON 0000  
                     ??___ftdiv 0041                       ??___ftneg 005A                       ??___lldiv 0028  
                     ??___ftmul 005D                       ??___llmod 0036                       ??___ftsub 0041  
                     ??___fttol 006B                       ??___lwmod 0024            __end_of_nrf24l01Init 13F8  
          __end_of_nrf24l01Send 0800                          _memset 1298           _nrf24l01InitRegisters 0672  
                        _strcat 141F                          _strchr 12B1                          _strcmp 1446  
                        _strcpy 1301                          _strlen 1372                          _strtod 002E  
                        _strtok 17B5                          _strspn 157E                          ftoa@cp 00B2  
         ___ftmul@f3_as_product 0062       i1nrf24l01SetRXMode@config 0075                       ??_isdigit 0020  
                        loop@ta 0123                          loop@vt 0120       i1nrf24l01SetRXMode@rxMode 0076  
                  _checkTXPower 1255                       ??_isspace 0020                       ??_sprintf 0042  
                     ??_strcspn 0029              getADCValue@adcLoop 0051         __end_of__initialization 002A  
                    ___altoft@c 0028                      ___ftadd@f1 002E                      ___ftadd@f2 0031  
                    ___ftge@ff1 0020                      ___ftge@ff2 0023           ??_nrf24l01GetRXPacket 0020  
      nrf24l01SendPacket@Packet 0027              getADCValue@channel 0053                      ___ftdiv@f1 003E  
                    ___ftdiv@f2 003B                      ___ftdiv@f3 0046                      ___ftneg@f1 0057  
                    ___awtoft@c 0028                      ___lbtoft@c 002F             ___bmul@multiplicand 0020  
                    ___ftmul@f1 0057                      ___ftmul@f2 005A                      ___ftsub@f1 003E  
                    ___ftsub@f2 003B                      ___fttol@f1 0067                  __pcstackCOMMON 0070  
                  __pidataBANK1 11CC                      ___lltoft@c 0028                      _doWDTSleep 1269  
                 __end_of_sleep 0835                       ?i1_memset 0070                       ?i1_strcmp 0070  
                       ??_sleep 00C0                    sprintf@width 004F                     loop@rfSetup 012C  
                    __pbssBANK1 00E8                      __pbssBANK2 0150                      __pbssBANK3 01A0  
             ??_nrf24l01SPISend 0070              __size_of_exception 0002           __size_of_handleRXData 0090  
       __size_ofi1_nrf24l01Send 001B               ??_nrf24l01GetPipe 0026                      __pmaintext 0B49  
                main@bootStatus 00C5                         ?___bmul 0020                         ?___ftge 0020  
                       ?___lmul 0020                         ?___wmul 0020               ??_nrf24l01SendACK 002E  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0835               _nrf24l01SetRXPipe 1391  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 16E1  
                     ?___altoft 0028             nrf24l01SPISend@data 0070                         ?_memset 0020  
                ___lmul@product 0028              ?_nrf24l01SetRXMode 0070                       ?___awtoft 0028  
                     ?___ftpack 0020                       ?___lbtoft 0028              ?_nrf24l01SetRXPipe 0070  
      __end_of_enableInterrupts 11F0              ?_nrf24l01SetTXPipe 0070                       ?___lltoft 0028  
           __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00B3                         ?_strchr 0020  
                       ?_strcmp 0020                         ?_strcpy 0020                         ?_strlen 0020  
                       ?_strtod 0067                         ?_strtok 002E                         ?_strspn 0027  
         __end_of_n_ADDRESS_MUL 1829                      ??i1_memset 0076             ??_nrf24l01SetRXMode 0023  
      __end_of_nrf24l01SPIStart 11F8             ??_nrf24l01SetRXPipe 0023             ??_nrf24l01SetTXPipe 0024  
                    ??i1_strcmp 0073                         _SSP1BUF 0211        __end_of_nrf24l01CheckACK 1499  
                  _handleRXData 0986           _nrf24l01InterfaceInit 1338      __end_of_nrf24l01SendPacket 0E18  
                 ??_getADCValue 004E           __size_of_nrf24l01Init 0024           __size_of_nrf24l01Send 0020  
     __end_of_nrf24l01SetRXMode 0881       __end_of_nrf24l01SetRXPipe 13B2       __end_of_nrf24l01SetTXPipe 1725  
         _nrf24l01ReceivePacket 0881                 __size_of___bmul 0012                 __size_of___ftge 003C  
               __size_of___lmul 0030                         ___ftadd 0F0A                     ?_doWDTSleep 0070  
                       ___ftdiv 0BF1                         ___ftneg 11F8                         ___lldiv 08CE  
               __size_of___wmul 001C                         ___ftmul 0C9A                         ___llmod 169E  
                       ___ftsub 1354                         ___fttol 0AAA                         ___lwmod 14C3  
                    ??___altoft 002C                      ??___awtoft 002B                      ??___ftpack 0025  
                    ??___lbtoft 002B           __end_of_nrf24l01CELow 11D5                 __size_of_memset 0019  
         __end_of_nrf24l01CSLow 11DB                      ??___lltoft 002C                         __ptext1 13D4  
                       __ptext2 1338                         __ptext3 0672                         __ptext4 1391  
                       __ptext5 15AE                         __ptext6 14C3                         __ptext7 04C3  
                       __ptext8 0800                         __ptext9 0986                 __size_of_strcat 0027  
               __size_of_strchr 001A                 __size_of_strcmp 0029               __end_of_exception 11CF  
               __size_of_strcpy 001B                 __size_of_strlen 001F                    __size_of_ISR 000B  
               __size_of_strtod 02C8                 __size_of_strtok 004B                 __size_of_strspn 0030  
                       _counter 0150                         _dpowers 1800                         _isdigit 120E  
                       _isspace 122F                         _romData 00EC                         _sprintf 02F6  
                       clrloop0 11DC                         _strcspn 154E            end_of_initialization 002A  
                       ftoa@buf 0153                         ftoa@rem 00AA                    _nrf24l01Init 13D4  
                    _setMessage 0778                    _nrf24l01Send 07E0                      _romDataMap 01C1  
                       memset@c 0022                         memset@n 0024                         memset@p 0026  
              nrf24l01GetPipe@i 002A                 ___lldiv@divisor 0020                 ___lldiv@counter 002D  
         _nrf24l01ChangeTXPower 165F                setMessage@packet 00B9    __size_ofi1_nrf24l01SetRXMode 0046  
              setMessage@status 00C1                         strcmp@r 0024           i1nrf24l01Send@command 0073  
                       strlen@s 0020             __end_of_getADCValue 0AAA                         strtod@s 00A7  
                       strspn@i 002B                       _PORTAbits 000C                       _PORTCbits 000E  
                     _TRISAbits 008C                       _TRISCbits 008E                nrf24l01Send@data 0020  
            handleRXData@string 00AC                __CFG_FEXTOSC$OFF 0000             __size_of_doWDTSleep 0017  
                 ??_nrf24l01ISR 007B          ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0049  
                i1_nrf24l01Send 12CB                      main@packet 00C7          ?_nrf24l01ReceivePacket 0070  
    __size_of_nrf24l01SetRXMode 004C      __size_of_nrf24l01SetRXPipe 0021                     ___ftmul@exp 0061  
    __size_of_nrf24l01SetTXPipe 0044                  __end_of___bmul 122F                  __end_of___ftge 1622  
                __end_of___lmul 154E                  __end_of___wmul 1338                       i1memset@c 0072  
                     i1memset@n 0074                       i1memset@p 0076                  __end_of_memset 12B1  
                __end_of_strcat 1446                  __end_of_strchr 12CB                  __end_of_strcmp 146F  
                __end_of_strcpy 131C                  __end_of_strlen 1391                  __end_of_strtod 02F6  
                __end_of_strtok 1800                  __end_of_strspn 15AE             start_initialization 0011  
               _nrf24l01SPISend 1201                     __end_of_ISR 000F                      ftoa@status 00A9  
             __size_ofi1_memset 0018       nrf24l01SetRXPipe@enRXAddr 0026                 _nrf24l01GetPipe 15AE  
   __end_of_nrf24l01GetRXPacket 0004         __size_of_nrf24l01CEHigh 0003                       i1strcmp@r 0074  
             __size_ofi1_strcmp 0027         __size_of_nrf24l01CSHigh 0003                     ?_setMessage 00B9  
        __end_ofi1_nrf24l01Send 12E6                 _nrf24l01SendACK 14F0         __size_of_nrf24l01SPIEnd 0007  
               ___llmod@divisor 002E                 ___llmod@counter 0037          ?_nrf24l01ChangeTXPower 0023  
       ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000                     _getADCValue 0A16  
                      ??___bmul 0021                        ??___ftge 0026                        ??___lmul 0028  
           __end_of_nrf24l01ISR 17B5                        ??___wmul 0024                     __pdataBANK1 00EC  
                      ??_memset 0026               ?_enableInterrupts 0070                        ??_strcat 0070  
                      ??_strchr 0024                        ??_strcmp 0023                        ??_strcpy 0024  
                      ??_strlen 0022                        ??_strtod 006A                        ??_strtok 0030  
                      ??_strspn 0029               __size_of___altoft 003D               __size_of___awtoft 0022  
             __size_of___ftpack 0065               __size_of___lbtoft 001B              ??_enableInterrupts 0070  
             __size_of___lltoft 002A                     __pbssCOMMON 007D                       ___latbits 0002  
                 __pcstackBANK0 0020                   __pcstackBANK1 00A0                   __pcstackBANK2 0120  
               doWDTSleep@wdtps 0021               ?_nrf24l01SPIStart 0070            checkTXPower@rxPacket 0028  
                  _isdigit$1851 0020               ?_nrf24l01CheckACK 0070              ??_nrf24l01SPIStart 0070  
            ??_nrf24l01CheckACK 0077                 ?i1_nrf24l01Send 0071                     sprintf@flag 0048  
                   sprintf@prec 0051                      loop@packet 012F             nrf24l01GetPipe@name 0029  
           nrf24l01GetPipe@pipe 0028                    ??_doWDTSleep 0020                        ?___ftadd 002E  
                      ?___ftdiv 003B                        ?___ftneg 0057                        ?___lldiv 0020  
                      ?___ftmul 0057                        ?___llmod 002E                        ?___ftsub 003B  
                      ?___fttol 0067                        ?___lwmod 0020            __end_of_n_ADDRESS_P0 1846  
       __end_of_nrf24l01SPISend 120E              i1nrf24l01Send@data 0071       nrf24l01InitRegisters@enAA 002E  
           __size_of_setMessage 0068              _nrf24l01SendPacket 0D4E         __end_of_nrf24l01GetPipe 15E6  
                      ?_isdigit 0070                       _loop$2140 0126                       _loop$2141 0129  
                      ?_isspace 0070         __end_of_nrf24l01SendACK 151E                       _exception 11CD  
           ?_nrf24l01SendPacket 0027                        ?_sprintf 0038             i1_nrf24l01SetRXMode 1725  
                      ?_strcspn 0027                  __size_of_sleep 0035              __end_of_doWDTSleep 1280  
                ___wmul@product 0024                     _nrf24l01ISR 176B                       clear_ram0 11DB  
                      _PIE0bits 0090                        _PIR0bits 0010                       _sleepLoop 00EA  
          ??_nrf24l01SendPacket 0029                 setMessage@value 00BD                 setMessage@topic 00BB  
          ?i1_nrf24l01SetRXMode 0070                     strtod@flags 00A1                     strtod@expon 00A2  
                    _ADCON0bits 009D                      _ADCON1bits 009E               ___wmul@multiplier 0020  
                      _WPUAbits 020C                        i1_memset 1280                   ?_checkTXPower 0070  
                      _RXPacket 01A0                        _TXPacket 00E8                    _isspace$1854 0020  
                      i1_strcmp 13F8                      ?_exception 0070                  _nrf24l01CEHigh 11CF  
             ___lmul@multiplier 0020         ??_nrf24l01InterfaceInit 0020                  _nrf24l01CSHigh 11D5  
             nrf24l01ISR@status 007C                  _nrf24l01SPIEnd 11E1         ??_nrf24l01ReceivePacket 0078  
        __size_of_nrf24l01CELow 0003          __size_of_nrf24l01CSLow 0003           ??i1_nrf24l01SetRXMode 0074  
              __size_of___ftadd 00F6                __size_of___ftdiv 00A9                __size_of___ftneg 0009  
              __size_of___lldiv 0053                        ___altoft 1622                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 009F  
         nrf24l01SendACK@packet 002F                __size_of___lwmod 002D                        ___awtoft 13B2  
                      ___ftpack 0921                        ___lbtoft 12E6                ?_nrf24l01SPISend 0070  
                      ___lltoft 1499                      _ANSELAbits 018C                      _ANSELCbits 018E  
                ??_checkTXPower 0027                ?_nrf24l01GetPipe 0070                      sprintf@val 004A  
                 _n_ADDRESS_MUL 1828                      strcat@from 00B5          __end_of_nrf24l01CEHigh 11D2  
              __size_of_isdigit 000F          __end_of_nrf24l01CSHigh 11D8                ?_nrf24l01SendACK 0070  
              __size_of_isspace 0013                        __ptext10 17B5                        __ptext11 157E  
                      __ptext20 0835                        __ptext12 154E                        __ptext21 1242  
                      __ptext13 12B1                        __ptext30 0E18                        __ptext22 002E  
                      __ptext14 1301                        __ptext31 02F6                        __ptext23 122F  
                      __ptext15 1446                        __ptext40 0C9A                        __ptext32 120E  
                      __ptext24 151E                        __ptext16 14F0                        __ptext41 15E6  
                      __ptext33 131C                        __ptext25 121D                        __ptext17 16E1  
                      __ptext50 07E0                        __ptext42 0A16                        __ptext34 169E  
                      __ptext26 1622                        __ptext18 0D4E                        __ptext51 12E6  
                      __ptext43 1269                        __ptext35 08CE                        __ptext27 0778  
                      __ptext19 1372                        __ptext60 12CB                        __ptext52 0921  
                      __ptext44 0BF1                        __ptext36 1499                        __ptext28 141F  
                      __ptext61 11F0                        __ptext45 0F0A                        __ptext37 0AAA  
                      __ptext29 1298                        __ptext62 11D8                        __ptext54 176B  
                      __ptext46 13B2                        __ptext38 1354                        __ptext63 1201  
                      __ptext55 0881                        __ptext47 1255                        __ptext39 11F8  
                      __ptext64 11E1                        __ptext56 1280                        __ptext48 0002  
                      __ptext65 11D5                        __ptext57 146F                        __ptext49 165F  
                      __ptext66 11E8                        __ptext58 13F8                        __ptext67 11D2  
                      __ptext59 1725                        __ptext68 11CF                        __ptext69 11CD  
                  _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 11E8                        _nrf24l01 00EB  
              __size_of_sprintf 01CD                     _OSCCON1bits 0919                    ??_setMessage 00C0  
              __size_of_strcspn 0030                      strcpy@from 0022   nrf24l01ChangeTXPower@addPower 0023  
                      _loop$900 012D         ??_nrf24l01ChangeTXPower 0025                   __size_of_atof 0013  
                 __size_of_main 00A8                   __size_of_ftoa 00F2                   __size_of_loop 01AF  
  nrf24l01InitRegisters@channel 0029    nrf24l01InitRegisters@feature 002B              exception@exception 0070  
                    _RC0PPSbits 0EA0    nrf24l01InitRegisters@rfSetup 002C                      _RC1PPSbits 0EA1  
                  ?_getADCValue 004B                      _RC2PPSbits 0EA2  __size_of_nrf24l01InitRegisters 0106  
                    strtod@eexp 00A0   __end_of_nrf24l01InitRegisters 0778                        int$flags 007E  
  nrf24l01InitRegisters@setupAW 002A                      _ODCONAbits 028C                    _SSP1STATbits 0214  
                      main@pipe 00C6          nrf24l01ReceivePacket@i 007A                   _nrf24l01CELow 11D2  
                 _nrf24l01CSLow 11D8              __end_of_setMessage 07E0                      _INTCONbits 000B  
               ?_nrf24l01CEHigh 0070                      _FVRCONbits 0117                ??i1_nrf24l01Send 0072  
                   ??_exception 0070                 ?_nrf24l01CSHigh 0070                  __pstringtext10 1859  
                __pstringtext11 185D                  __pstringtext12 0000                        isdigit@c 0021  
                      memset@p1 0020                   ?_handleRXData 0070                 ?_nrf24l01SPIEnd 0070  
          handleRXData@RXPacket 00BC                        intlevel1 0000                       sprintf@ap 0049  
                     sprintf@sp 004E                    _n_ADDRESS_P0 1841       __size_of_enableInterrupts 0008  
                     strchr@chr 0022                ___lwmod@dividend 0022                       strchr@ptr 0020  
                      isspace@c 0021                ___lldiv@dividend 0024               __CFG_CLKOUTEN$OFF 0000  
                     strcspn@s1 002D                       strcspn@s2 0027    __size_of_nrf24l01GetRXPacket 0002  
   nrf24l01InitRegisters@config 0030       __size_of_nrf24l01SPIStart 0008                       strtod@res 0067  
     __size_of_nrf24l01CheckACK 002A     nrf24l01InitRegisters@status 002D      nrf24l01ReceivePacket@width 0079  
                ?_nrf24l01CELow 0070                   __pstringtext1 1800                   __pstringtext2 1841  
                 __pstringtext3 1828                   __pstringtext4 1834                   __pstringtext5 183B  
                 __pstringtext6 1846                   __pstringtext7 184B                   __pstringtext8 1850  
                 __pstringtext9 1855                  ?_nrf24l01CSLow 0070                        sprintf@c 0053  
                      sprintf@f 0038      nrf24l01InitRegisters@DynPD 002F                        strcat@cp 00B7  
                      strcat@to 00B3                        strcmp@s1 0020                        strcmp@s2 0022  
              ___lldiv@quotient 0029                 ___lwmod@divisor 0020                        strcpy@cp 0024  
                      strlen@cp 0024                        strcpy@to 0020                 ___lwmod@counter 0025  
                      strcspn@i 002B                        strtod@_u 00A3                        strtok@s1 0033  
                      strtok@s2 002E                        strspn@s1 002D                        strspn@s2 0027  
                ??_handleRXData 006F                        strtok@sp 007D                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020                    ?_nrf24l01ISR 0070  
          __end_of_checkTXPower 1269  
