

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Aug 20 10:03:59 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text38,local,class=CODE,merge=1,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text48,local,class=CODE,merge=1,delta=2
    75                           	psect	intentry,global,class=CODE,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,delta=2
    77                           	psect	text51,local,class=CODE,merge=1,delta=2
    78                           	dabs	1,0x74,12
    79  0000                     
    80                           ; Version 2.00
    81                           ; Generated 27/05/2018 GMT
    82                           ; 
    83                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC16LF18325 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000E                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  008C                     	;# 
   148  008E                     	;# 
   149  0090                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0097                     	;# 
   155  009B                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  010C                     	;# 
   162  010E                     	;# 
   163  0111                     	;# 
   164  0112                     	;# 
   165  0113                     	;# 
   166  0114                     	;# 
   167  0115                     	;# 
   168  0116                     	;# 
   169  0117                     	;# 
   170  0118                     	;# 
   171  0119                     	;# 
   172  018C                     	;# 
   173  018E                     	;# 
   174  0199                     	;# 
   175  0199                     	;# 
   176  0199                     	;# 
   177  019A                     	;# 
   178  019A                     	;# 
   179  019A                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019C                     	;# 
   186  019C                     	;# 
   187  019C                     	;# 
   188  019D                     	;# 
   189  019D                     	;# 
   190  019D                     	;# 
   191  019E                     	;# 
   192  019E                     	;# 
   193  019E                     	;# 
   194  019F                     	;# 
   195  019F                     	;# 
   196  019F                     	;# 
   197  019F                     	;# 
   198  019F                     	;# 
   199  020C                     	;# 
   200  020E                     	;# 
   201  0211                     	;# 
   202  0211                     	;# 
   203  0212                     	;# 
   204  0212                     	;# 
   205  0213                     	;# 
   206  0213                     	;# 
   207  0214                     	;# 
   208  0214                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0215                     	;# 
   212  0215                     	;# 
   213  0216                     	;# 
   214  0216                     	;# 
   215  0217                     	;# 
   216  0217                     	;# 
   217  0219                     	;# 
   218  021A                     	;# 
   219  021B                     	;# 
   220  021C                     	;# 
   221  021D                     	;# 
   222  021D                     	;# 
   223  021E                     	;# 
   224  021F                     	;# 
   225  028C                     	;# 
   226  028E                     	;# 
   227  0291                     	;# 
   228  0291                     	;# 
   229  0292                     	;# 
   230  0293                     	;# 
   231  0294                     	;# 
   232  0295                     	;# 
   233  0295                     	;# 
   234  0296                     	;# 
   235  0297                     	;# 
   236  0298                     	;# 
   237  029F                     	;# 
   238  030C                     	;# 
   239  030E                     	;# 
   240  0311                     	;# 
   241  0311                     	;# 
   242  0312                     	;# 
   243  0313                     	;# 
   244  0314                     	;# 
   245  0315                     	;# 
   246  0315                     	;# 
   247  0316                     	;# 
   248  0317                     	;# 
   249  0318                     	;# 
   250  038C                     	;# 
   251  038E                     	;# 
   252  0391                     	;# 
   253  0392                     	;# 
   254  0393                     	;# 
   255  0397                     	;# 
   256  0398                     	;# 
   257  0399                     	;# 
   258  039A                     	;# 
   259  039C                     	;# 
   260  039D                     	;# 
   261  039E                     	;# 
   262  039F                     	;# 
   263  0411                     	;# 
   264  0411                     	;# 
   265  0412                     	;# 
   266  0413                     	;# 
   267  0414                     	;# 
   268  0415                     	;# 
   269  0416                     	;# 
   270  0417                     	;# 
   271  0418                     	;# 
   272  0418                     	;# 
   273  0419                     	;# 
   274  041A                     	;# 
   275  041B                     	;# 
   276  041C                     	;# 
   277  041D                     	;# 
   278  041E                     	;# 
   279  041F                     	;# 
   280  0498                     	;# 
   281  0498                     	;# 
   282  0499                     	;# 
   283  049A                     	;# 
   284  049B                     	;# 
   285  049B                     	;# 
   286  049C                     	;# 
   287  049D                     	;# 
   288  049E                     	;# 
   289  049F                     	;# 
   290  0617                     	;# 
   291  0618                     	;# 
   292  0619                     	;# 
   293  0619                     	;# 
   294  061A                     	;# 
   295  061B                     	;# 
   296  061C                     	;# 
   297  061C                     	;# 
   298  061F                     	;# 
   299  0691                     	;# 
   300  0692                     	;# 
   301  0693                     	;# 
   302  0694                     	;# 
   303  0695                     	;# 
   304  0696                     	;# 
   305  0697                     	;# 
   306  0698                     	;# 
   307  0699                     	;# 
   308  0711                     	;# 
   309  0712                     	;# 
   310  0713                     	;# 
   311  0714                     	;# 
   312  0715                     	;# 
   313  0716                     	;# 
   314  0717                     	;# 
   315  0718                     	;# 
   316  0719                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0891                     	;# 
   320  0891                     	;# 
   321  0891                     	;# 
   322  0891                     	;# 
   323  0892                     	;# 
   324  0892                     	;# 
   325  0892                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0893                     	;# 
   329  0893                     	;# 
   330  0893                     	;# 
   331  0893                     	;# 
   332  0894                     	;# 
   333  0894                     	;# 
   334  0894                     	;# 
   335  0895                     	;# 
   336  0895                     	;# 
   337  0895                     	;# 
   338  0896                     	;# 
   339  0896                     	;# 
   340  0896                     	;# 
   341  089B                     	;# 
   342  0911                     	;# 
   343  0912                     	;# 
   344  0913                     	;# 
   345  0914                     	;# 
   346  0915                     	;# 
   347  0916                     	;# 
   348  0918                     	;# 
   349  0919                     	;# 
   350  091A                     	;# 
   351  091B                     	;# 
   352  091C                     	;# 
   353  091D                     	;# 
   354  091E                     	;# 
   355  091F                     	;# 
   356  0E0F                     	;# 
   357  0E10                     	;# 
   358  0E11                     	;# 
   359  0E12                     	;# 
   360  0E13                     	;# 
   361  0E14                     	;# 
   362  0E15                     	;# 
   363  0E16                     	;# 
   364  0E17                     	;# 
   365  0E18                     	;# 
   366  0E19                     	;# 
   367  0E1A                     	;# 
   368  0E1B                     	;# 
   369  0E1C                     	;# 
   370  0E1D                     	;# 
   371  0E1E                     	;# 
   372  0E1F                     	;# 
   373  0E20                     	;# 
   374  0E21                     	;# 
   375  0E22                     	;# 
   376  0E24                     	;# 
   377  0E25                     	;# 
   378  0E28                     	;# 
   379  0E29                     	;# 
   380  0E2A                     	;# 
   381  0E2B                     	;# 
   382  0E2C                     	;# 
   383  0E2D                     	;# 
   384  0E2E                     	;# 
   385  0E2F                     	;# 
   386  0E90                     	;# 
   387  0E91                     	;# 
   388  0E92                     	;# 
   389  0E94                     	;# 
   390  0E95                     	;# 
   391  0EA0                     	;# 
   392  0EA1                     	;# 
   393  0EA2                     	;# 
   394  0EA3                     	;# 
   395  0EA4                     	;# 
   396  0EA5                     	;# 
   397  0F0F                     	;# 
   398  0F10                     	;# 
   399  0F11                     	;# 
   400  0F12                     	;# 
   401  0F13                     	;# 
   402  0F14                     	;# 
   403  0F15                     	;# 
   404  0F16                     	;# 
   405  0F17                     	;# 
   406  0F18                     	;# 
   407  0F19                     	;# 
   408  0F1A                     	;# 
   409  0F1B                     	;# 
   410  0F1C                     	;# 
   411  0F1D                     	;# 
   412  0F1E                     	;# 
   413  0F1F                     	;# 
   414  0F20                     	;# 
   415  0F21                     	;# 
   416  0F22                     	;# 
   417  0F23                     	;# 
   418  0F24                     	;# 
   419  0F25                     	;# 
   420  0F26                     	;# 
   421  0F27                     	;# 
   422  0F28                     	;# 
   423  0F29                     	;# 
   424  0F2A                     	;# 
   425  0F2B                     	;# 
   426  0F2C                     	;# 
   427  0F2D                     	;# 
   428  0F2E                     	;# 
   429  0F2F                     	;# 
   430  0F30                     	;# 
   431  0F31                     	;# 
   432  0F32                     	;# 
   433  0F33                     	;# 
   434  0F34                     	;# 
   435  0F35                     	;# 
   436  0F36                     	;# 
   437  0F37                     	;# 
   438  0FE4                     	;# 
   439  0FE5                     	;# 
   440  0FE6                     	;# 
   441  0FE7                     	;# 
   442  0FE8                     	;# 
   443  0FE9                     	;# 
   444  0FEA                     	;# 
   445  0FEB                     	;# 
   446  0FED                     	;# 
   447  0FEE                     	;# 
   448  0FEF                     	;# 
   449  0000                     	;# 
   450  0001                     	;# 
   451  0002                     	;# 
   452  0003                     	;# 
   453  0004                     	;# 
   454  0005                     	;# 
   455  0006                     	;# 
   456  0007                     	;# 
   457  0008                     	;# 
   458  0009                     	;# 
   459  000A                     	;# 
   460  000B                     	;# 
   461  000C                     	;# 
   462  000E                     	;# 
   463  0010                     	;# 
   464  0011                     	;# 
   465  0012                     	;# 
   466  0013                     	;# 
   467  0014                     	;# 
   468  0015                     	;# 
   469  0015                     	;# 
   470  0016                     	;# 
   471  0016                     	;# 
   472  0017                     	;# 
   473  0018                     	;# 
   474  0019                     	;# 
   475  0019                     	;# 
   476  001A                     	;# 
   477  001B                     	;# 
   478  001C                     	;# 
   479  001D                     	;# 
   480  001E                     	;# 
   481  001F                     	;# 
   482  008C                     	;# 
   483  008E                     	;# 
   484  0090                     	;# 
   485  0091                     	;# 
   486  0092                     	;# 
   487  0093                     	;# 
   488  0094                     	;# 
   489  0097                     	;# 
   490  009B                     	;# 
   491  009B                     	;# 
   492  009C                     	;# 
   493  009D                     	;# 
   494  009E                     	;# 
   495  009F                     	;# 
   496  010C                     	;# 
   497  010E                     	;# 
   498  0111                     	;# 
   499  0112                     	;# 
   500  0113                     	;# 
   501  0114                     	;# 
   502  0115                     	;# 
   503  0116                     	;# 
   504  0117                     	;# 
   505  0118                     	;# 
   506  0119                     	;# 
   507  018C                     	;# 
   508  018E                     	;# 
   509  0199                     	;# 
   510  0199                     	;# 
   511  0199                     	;# 
   512  019A                     	;# 
   513  019A                     	;# 
   514  019A                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019B                     	;# 
   520  019C                     	;# 
   521  019C                     	;# 
   522  019C                     	;# 
   523  019D                     	;# 
   524  019D                     	;# 
   525  019D                     	;# 
   526  019E                     	;# 
   527  019E                     	;# 
   528  019E                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  019F                     	;# 
   533  019F                     	;# 
   534  020C                     	;# 
   535  020E                     	;# 
   536  0211                     	;# 
   537  0211                     	;# 
   538  0212                     	;# 
   539  0212                     	;# 
   540  0213                     	;# 
   541  0213                     	;# 
   542  0214                     	;# 
   543  0214                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0215                     	;# 
   548  0216                     	;# 
   549  0216                     	;# 
   550  0217                     	;# 
   551  0217                     	;# 
   552  0219                     	;# 
   553  021A                     	;# 
   554  021B                     	;# 
   555  021C                     	;# 
   556  021D                     	;# 
   557  021D                     	;# 
   558  021E                     	;# 
   559  021F                     	;# 
   560  028C                     	;# 
   561  028E                     	;# 
   562  0291                     	;# 
   563  0291                     	;# 
   564  0292                     	;# 
   565  0293                     	;# 
   566  0294                     	;# 
   567  0295                     	;# 
   568  0295                     	;# 
   569  0296                     	;# 
   570  0297                     	;# 
   571  0298                     	;# 
   572  029F                     	;# 
   573  030C                     	;# 
   574  030E                     	;# 
   575  0311                     	;# 
   576  0311                     	;# 
   577  0312                     	;# 
   578  0313                     	;# 
   579  0314                     	;# 
   580  0315                     	;# 
   581  0315                     	;# 
   582  0316                     	;# 
   583  0317                     	;# 
   584  0318                     	;# 
   585  038C                     	;# 
   586  038E                     	;# 
   587  0391                     	;# 
   588  0392                     	;# 
   589  0393                     	;# 
   590  0397                     	;# 
   591  0398                     	;# 
   592  0399                     	;# 
   593  039A                     	;# 
   594  039C                     	;# 
   595  039D                     	;# 
   596  039E                     	;# 
   597  039F                     	;# 
   598  0411                     	;# 
   599  0411                     	;# 
   600  0412                     	;# 
   601  0413                     	;# 
   602  0414                     	;# 
   603  0415                     	;# 
   604  0416                     	;# 
   605  0417                     	;# 
   606  0418                     	;# 
   607  0418                     	;# 
   608  0419                     	;# 
   609  041A                     	;# 
   610  041B                     	;# 
   611  041C                     	;# 
   612  041D                     	;# 
   613  041E                     	;# 
   614  041F                     	;# 
   615  0498                     	;# 
   616  0498                     	;# 
   617  0499                     	;# 
   618  049A                     	;# 
   619  049B                     	;# 
   620  049B                     	;# 
   621  049C                     	;# 
   622  049D                     	;# 
   623  049E                     	;# 
   624  049F                     	;# 
   625  0617                     	;# 
   626  0618                     	;# 
   627  0619                     	;# 
   628  0619                     	;# 
   629  061A                     	;# 
   630  061B                     	;# 
   631  061C                     	;# 
   632  061C                     	;# 
   633  061F                     	;# 
   634  0691                     	;# 
   635  0692                     	;# 
   636  0693                     	;# 
   637  0694                     	;# 
   638  0695                     	;# 
   639  0696                     	;# 
   640  0697                     	;# 
   641  0698                     	;# 
   642  0699                     	;# 
   643  0711                     	;# 
   644  0712                     	;# 
   645  0713                     	;# 
   646  0714                     	;# 
   647  0715                     	;# 
   648  0716                     	;# 
   649  0717                     	;# 
   650  0718                     	;# 
   651  0719                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0891                     	;# 
   656  0891                     	;# 
   657  0891                     	;# 
   658  0892                     	;# 
   659  0892                     	;# 
   660  0892                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0893                     	;# 
   665  0893                     	;# 
   666  0893                     	;# 
   667  0894                     	;# 
   668  0894                     	;# 
   669  0894                     	;# 
   670  0895                     	;# 
   671  0895                     	;# 
   672  0895                     	;# 
   673  0896                     	;# 
   674  0896                     	;# 
   675  0896                     	;# 
   676  089B                     	;# 
   677  0911                     	;# 
   678  0912                     	;# 
   679  0913                     	;# 
   680  0914                     	;# 
   681  0915                     	;# 
   682  0916                     	;# 
   683  0918                     	;# 
   684  0919                     	;# 
   685  091A                     	;# 
   686  091B                     	;# 
   687  091C                     	;# 
   688  091D                     	;# 
   689  091E                     	;# 
   690  091F                     	;# 
   691  0E0F                     	;# 
   692  0E10                     	;# 
   693  0E11                     	;# 
   694  0E12                     	;# 
   695  0E13                     	;# 
   696  0E14                     	;# 
   697  0E15                     	;# 
   698  0E16                     	;# 
   699  0E17                     	;# 
   700  0E18                     	;# 
   701  0E19                     	;# 
   702  0E1A                     	;# 
   703  0E1B                     	;# 
   704  0E1C                     	;# 
   705  0E1D                     	;# 
   706  0E1E                     	;# 
   707  0E1F                     	;# 
   708  0E20                     	;# 
   709  0E21                     	;# 
   710  0E22                     	;# 
   711  0E24                     	;# 
   712  0E25                     	;# 
   713  0E28                     	;# 
   714  0E29                     	;# 
   715  0E2A                     	;# 
   716  0E2B                     	;# 
   717  0E2C                     	;# 
   718  0E2D                     	;# 
   719  0E2E                     	;# 
   720  0E2F                     	;# 
   721  0E90                     	;# 
   722  0E91                     	;# 
   723  0E92                     	;# 
   724  0E94                     	;# 
   725  0E95                     	;# 
   726  0EA0                     	;# 
   727  0EA1                     	;# 
   728  0EA2                     	;# 
   729  0EA3                     	;# 
   730  0EA4                     	;# 
   731  0EA5                     	;# 
   732  0F0F                     	;# 
   733  0F10                     	;# 
   734  0F11                     	;# 
   735  0F12                     	;# 
   736  0F13                     	;# 
   737  0F14                     	;# 
   738  0F15                     	;# 
   739  0F16                     	;# 
   740  0F17                     	;# 
   741  0F18                     	;# 
   742  0F19                     	;# 
   743  0F1A                     	;# 
   744  0F1B                     	;# 
   745  0F1C                     	;# 
   746  0F1D                     	;# 
   747  0F1E                     	;# 
   748  0F1F                     	;# 
   749  0F20                     	;# 
   750  0F21                     	;# 
   751  0F22                     	;# 
   752  0F23                     	;# 
   753  0F24                     	;# 
   754  0F25                     	;# 
   755  0F26                     	;# 
   756  0F27                     	;# 
   757  0F28                     	;# 
   758  0F29                     	;# 
   759  0F2A                     	;# 
   760  0F2B                     	;# 
   761  0F2C                     	;# 
   762  0F2D                     	;# 
   763  0F2E                     	;# 
   764  0F2F                     	;# 
   765  0F30                     	;# 
   766  0F31                     	;# 
   767  0F32                     	;# 
   768  0F33                     	;# 
   769  0F34                     	;# 
   770  0F35                     	;# 
   771  0F36                     	;# 
   772  0F37                     	;# 
   773  0FE4                     	;# 
   774  0FE5                     	;# 
   775  0FE6                     	;# 
   776  0FE7                     	;# 
   777  0FE8                     	;# 
   778  0FE9                     	;# 
   779  0FEA                     	;# 
   780  0FEB                     	;# 
   781  0FED                     	;# 
   782  0FEE                     	;# 
   783  0FEF                     	;# 
   784  0000                     	;# 
   785  0001                     	;# 
   786  0002                     	;# 
   787  0003                     	;# 
   788  0004                     	;# 
   789  0005                     	;# 
   790  0006                     	;# 
   791  0007                     	;# 
   792  0008                     	;# 
   793  0009                     	;# 
   794  000A                     	;# 
   795  000B                     	;# 
   796  000C                     	;# 
   797  000E                     	;# 
   798  0010                     	;# 
   799  0011                     	;# 
   800  0012                     	;# 
   801  0013                     	;# 
   802  0014                     	;# 
   803  0015                     	;# 
   804  0015                     	;# 
   805  0016                     	;# 
   806  0016                     	;# 
   807  0017                     	;# 
   808  0018                     	;# 
   809  0019                     	;# 
   810  0019                     	;# 
   811  001A                     	;# 
   812  001B                     	;# 
   813  001C                     	;# 
   814  001D                     	;# 
   815  001E                     	;# 
   816  001F                     	;# 
   817  008C                     	;# 
   818  008E                     	;# 
   819  0090                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0094                     	;# 
   824  0097                     	;# 
   825  009B                     	;# 
   826  009B                     	;# 
   827  009C                     	;# 
   828  009D                     	;# 
   829  009E                     	;# 
   830  009F                     	;# 
   831  010C                     	;# 
   832  010E                     	;# 
   833  0111                     	;# 
   834  0112                     	;# 
   835  0113                     	;# 
   836  0114                     	;# 
   837  0115                     	;# 
   838  0116                     	;# 
   839  0117                     	;# 
   840  0118                     	;# 
   841  0119                     	;# 
   842  018C                     	;# 
   843  018E                     	;# 
   844  0199                     	;# 
   845  0199                     	;# 
   846  0199                     	;# 
   847  019A                     	;# 
   848  019A                     	;# 
   849  019A                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019C                     	;# 
   856  019C                     	;# 
   857  019C                     	;# 
   858  019D                     	;# 
   859  019D                     	;# 
   860  019D                     	;# 
   861  019E                     	;# 
   862  019E                     	;# 
   863  019E                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  019F                     	;# 
   869  020C                     	;# 
   870  020E                     	;# 
   871  0211                     	;# 
   872  0211                     	;# 
   873  0212                     	;# 
   874  0212                     	;# 
   875  0213                     	;# 
   876  0213                     	;# 
   877  0214                     	;# 
   878  0214                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0215                     	;# 
   882  0215                     	;# 
   883  0216                     	;# 
   884  0216                     	;# 
   885  0217                     	;# 
   886  0217                     	;# 
   887  0219                     	;# 
   888  021A                     	;# 
   889  021B                     	;# 
   890  021C                     	;# 
   891  021D                     	;# 
   892  021D                     	;# 
   893  021E                     	;# 
   894  021F                     	;# 
   895  028C                     	;# 
   896  028E                     	;# 
   897  0291                     	;# 
   898  0291                     	;# 
   899  0292                     	;# 
   900  0293                     	;# 
   901  0294                     	;# 
   902  0295                     	;# 
   903  0295                     	;# 
   904  0296                     	;# 
   905  0297                     	;# 
   906  0298                     	;# 
   907  029F                     	;# 
   908  030C                     	;# 
   909  030E                     	;# 
   910  0311                     	;# 
   911  0311                     	;# 
   912  0312                     	;# 
   913  0313                     	;# 
   914  0314                     	;# 
   915  0315                     	;# 
   916  0315                     	;# 
   917  0316                     	;# 
   918  0317                     	;# 
   919  0318                     	;# 
   920  038C                     	;# 
   921  038E                     	;# 
   922  0391                     	;# 
   923  0392                     	;# 
   924  0393                     	;# 
   925  0397                     	;# 
   926  0398                     	;# 
   927  0399                     	;# 
   928  039A                     	;# 
   929  039C                     	;# 
   930  039D                     	;# 
   931  039E                     	;# 
   932  039F                     	;# 
   933  0411                     	;# 
   934  0411                     	;# 
   935  0412                     	;# 
   936  0413                     	;# 
   937  0414                     	;# 
   938  0415                     	;# 
   939  0416                     	;# 
   940  0417                     	;# 
   941  0418                     	;# 
   942  0418                     	;# 
   943  0419                     	;# 
   944  041A                     	;# 
   945  041B                     	;# 
   946  041C                     	;# 
   947  041D                     	;# 
   948  041E                     	;# 
   949  041F                     	;# 
   950  0498                     	;# 
   951  0498                     	;# 
   952  0499                     	;# 
   953  049A                     	;# 
   954  049B                     	;# 
   955  049B                     	;# 
   956  049C                     	;# 
   957  049D                     	;# 
   958  049E                     	;# 
   959  049F                     	;# 
   960  0617                     	;# 
   961  0618                     	;# 
   962  0619                     	;# 
   963  0619                     	;# 
   964  061A                     	;# 
   965  061B                     	;# 
   966  061C                     	;# 
   967  061C                     	;# 
   968  061F                     	;# 
   969  0691                     	;# 
   970  0692                     	;# 
   971  0693                     	;# 
   972  0694                     	;# 
   973  0695                     	;# 
   974  0696                     	;# 
   975  0697                     	;# 
   976  0698                     	;# 
   977  0699                     	;# 
   978  0711                     	;# 
   979  0712                     	;# 
   980  0713                     	;# 
   981  0714                     	;# 
   982  0715                     	;# 
   983  0716                     	;# 
   984  0717                     	;# 
   985  0718                     	;# 
   986  0719                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0891                     	;# 
   992  0891                     	;# 
   993  0892                     	;# 
   994  0892                     	;# 
   995  0892                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0893                     	;# 
  1001  0893                     	;# 
  1002  0894                     	;# 
  1003  0894                     	;# 
  1004  0894                     	;# 
  1005  0895                     	;# 
  1006  0895                     	;# 
  1007  0895                     	;# 
  1008  0896                     	;# 
  1009  0896                     	;# 
  1010  0896                     	;# 
  1011  089B                     	;# 
  1012  0911                     	;# 
  1013  0912                     	;# 
  1014  0913                     	;# 
  1015  0914                     	;# 
  1016  0915                     	;# 
  1017  0916                     	;# 
  1018  0918                     	;# 
  1019  0919                     	;# 
  1020  091A                     	;# 
  1021  091B                     	;# 
  1022  091C                     	;# 
  1023  091D                     	;# 
  1024  091E                     	;# 
  1025  091F                     	;# 
  1026  0E0F                     	;# 
  1027  0E10                     	;# 
  1028  0E11                     	;# 
  1029  0E12                     	;# 
  1030  0E13                     	;# 
  1031  0E14                     	;# 
  1032  0E15                     	;# 
  1033  0E16                     	;# 
  1034  0E17                     	;# 
  1035  0E18                     	;# 
  1036  0E19                     	;# 
  1037  0E1A                     	;# 
  1038  0E1B                     	;# 
  1039  0E1C                     	;# 
  1040  0E1D                     	;# 
  1041  0E1E                     	;# 
  1042  0E1F                     	;# 
  1043  0E20                     	;# 
  1044  0E21                     	;# 
  1045  0E22                     	;# 
  1046  0E24                     	;# 
  1047  0E25                     	;# 
  1048  0E28                     	;# 
  1049  0E29                     	;# 
  1050  0E2A                     	;# 
  1051  0E2B                     	;# 
  1052  0E2C                     	;# 
  1053  0E2D                     	;# 
  1054  0E2E                     	;# 
  1055  0E2F                     	;# 
  1056  0E90                     	;# 
  1057  0E91                     	;# 
  1058  0E92                     	;# 
  1059  0E94                     	;# 
  1060  0E95                     	;# 
  1061  0EA0                     	;# 
  1062  0EA1                     	;# 
  1063  0EA2                     	;# 
  1064  0EA3                     	;# 
  1065  0EA4                     	;# 
  1066  0EA5                     	;# 
  1067  0F0F                     	;# 
  1068  0F10                     	;# 
  1069  0F11                     	;# 
  1070  0F12                     	;# 
  1071  0F13                     	;# 
  1072  0F14                     	;# 
  1073  0F15                     	;# 
  1074  0F16                     	;# 
  1075  0F17                     	;# 
  1076  0F18                     	;# 
  1077  0F19                     	;# 
  1078  0F1A                     	;# 
  1079  0F1B                     	;# 
  1080  0F1C                     	;# 
  1081  0F1D                     	;# 
  1082  0F1E                     	;# 
  1083  0F1F                     	;# 
  1084  0F20                     	;# 
  1085  0F21                     	;# 
  1086  0F22                     	;# 
  1087  0F23                     	;# 
  1088  0F24                     	;# 
  1089  0F25                     	;# 
  1090  0F26                     	;# 
  1091  0F27                     	;# 
  1092  0F28                     	;# 
  1093  0F29                     	;# 
  1094  0F2A                     	;# 
  1095  0F2B                     	;# 
  1096  0F2C                     	;# 
  1097  0F2D                     	;# 
  1098  0F2E                     	;# 
  1099  0F2F                     	;# 
  1100  0F30                     	;# 
  1101  0F31                     	;# 
  1102  0F32                     	;# 
  1103  0F33                     	;# 
  1104  0F34                     	;# 
  1105  0F35                     	;# 
  1106  0F36                     	;# 
  1107  0F37                     	;# 
  1108  0FE4                     	;# 
  1109  0FE5                     	;# 
  1110  0FE6                     	;# 
  1111  0FE7                     	;# 
  1112  0FE8                     	;# 
  1113  0FE9                     	;# 
  1114  0FEA                     	;# 
  1115  0FEB                     	;# 
  1116  0FED                     	;# 
  1117  0FEE                     	;# 
  1118  0FEF                     	;# 
  1119  0000                     	;# 
  1120  0001                     	;# 
  1121  0002                     	;# 
  1122  0003                     	;# 
  1123  0004                     	;# 
  1124  0005                     	;# 
  1125  0006                     	;# 
  1126  0007                     	;# 
  1127  0008                     	;# 
  1128  0009                     	;# 
  1129  000A                     	;# 
  1130  000B                     	;# 
  1131  000C                     	;# 
  1132  000E                     	;# 
  1133  0010                     	;# 
  1134  0011                     	;# 
  1135  0012                     	;# 
  1136  0013                     	;# 
  1137  0014                     	;# 
  1138  0015                     	;# 
  1139  0015                     	;# 
  1140  0016                     	;# 
  1141  0016                     	;# 
  1142  0017                     	;# 
  1143  0018                     	;# 
  1144  0019                     	;# 
  1145  0019                     	;# 
  1146  001A                     	;# 
  1147  001B                     	;# 
  1148  001C                     	;# 
  1149  001D                     	;# 
  1150  001E                     	;# 
  1151  001F                     	;# 
  1152  008C                     	;# 
  1153  008E                     	;# 
  1154  0090                     	;# 
  1155  0091                     	;# 
  1156  0092                     	;# 
  1157  0093                     	;# 
  1158  0094                     	;# 
  1159  0097                     	;# 
  1160  009B                     	;# 
  1161  009B                     	;# 
  1162  009C                     	;# 
  1163  009D                     	;# 
  1164  009E                     	;# 
  1165  009F                     	;# 
  1166  010C                     	;# 
  1167  010E                     	;# 
  1168  0111                     	;# 
  1169  0112                     	;# 
  1170  0113                     	;# 
  1171  0114                     	;# 
  1172  0115                     	;# 
  1173  0116                     	;# 
  1174  0117                     	;# 
  1175  0118                     	;# 
  1176  0119                     	;# 
  1177  018C                     	;# 
  1178  018E                     	;# 
  1179  0199                     	;# 
  1180  0199                     	;# 
  1181  0199                     	;# 
  1182  019A                     	;# 
  1183  019A                     	;# 
  1184  019A                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019B                     	;# 
  1190  019C                     	;# 
  1191  019C                     	;# 
  1192  019C                     	;# 
  1193  019D                     	;# 
  1194  019D                     	;# 
  1195  019D                     	;# 
  1196  019E                     	;# 
  1197  019E                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  019F                     	;# 
  1204  020C                     	;# 
  1205  020E                     	;# 
  1206  0211                     	;# 
  1207  0211                     	;# 
  1208  0212                     	;# 
  1209  0212                     	;# 
  1210  0213                     	;# 
  1211  0213                     	;# 
  1212  0214                     	;# 
  1213  0214                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0215                     	;# 
  1218  0216                     	;# 
  1219  0216                     	;# 
  1220  0217                     	;# 
  1221  0217                     	;# 
  1222  0219                     	;# 
  1223  021A                     	;# 
  1224  021B                     	;# 
  1225  021C                     	;# 
  1226  021D                     	;# 
  1227  021D                     	;# 
  1228  021E                     	;# 
  1229  021F                     	;# 
  1230  028C                     	;# 
  1231  028E                     	;# 
  1232  0291                     	;# 
  1233  0291                     	;# 
  1234  0292                     	;# 
  1235  0293                     	;# 
  1236  0294                     	;# 
  1237  0295                     	;# 
  1238  0295                     	;# 
  1239  0296                     	;# 
  1240  0297                     	;# 
  1241  0298                     	;# 
  1242  029F                     	;# 
  1243  030C                     	;# 
  1244  030E                     	;# 
  1245  0311                     	;# 
  1246  0311                     	;# 
  1247  0312                     	;# 
  1248  0313                     	;# 
  1249  0314                     	;# 
  1250  0315                     	;# 
  1251  0315                     	;# 
  1252  0316                     	;# 
  1253  0317                     	;# 
  1254  0318                     	;# 
  1255  038C                     	;# 
  1256  038E                     	;# 
  1257  0391                     	;# 
  1258  0392                     	;# 
  1259  0393                     	;# 
  1260  0397                     	;# 
  1261  0398                     	;# 
  1262  0399                     	;# 
  1263  039A                     	;# 
  1264  039C                     	;# 
  1265  039D                     	;# 
  1266  039E                     	;# 
  1267  039F                     	;# 
  1268  0411                     	;# 
  1269  0411                     	;# 
  1270  0412                     	;# 
  1271  0413                     	;# 
  1272  0414                     	;# 
  1273  0415                     	;# 
  1274  0416                     	;# 
  1275  0417                     	;# 
  1276  0418                     	;# 
  1277  0418                     	;# 
  1278  0419                     	;# 
  1279  041A                     	;# 
  1280  041B                     	;# 
  1281  041C                     	;# 
  1282  041D                     	;# 
  1283  041E                     	;# 
  1284  041F                     	;# 
  1285  0498                     	;# 
  1286  0498                     	;# 
  1287  0499                     	;# 
  1288  049A                     	;# 
  1289  049B                     	;# 
  1290  049B                     	;# 
  1291  049C                     	;# 
  1292  049D                     	;# 
  1293  049E                     	;# 
  1294  049F                     	;# 
  1295  0617                     	;# 
  1296  0618                     	;# 
  1297  0619                     	;# 
  1298  0619                     	;# 
  1299  061A                     	;# 
  1300  061B                     	;# 
  1301  061C                     	;# 
  1302  061C                     	;# 
  1303  061F                     	;# 
  1304  0691                     	;# 
  1305  0692                     	;# 
  1306  0693                     	;# 
  1307  0694                     	;# 
  1308  0695                     	;# 
  1309  0696                     	;# 
  1310  0697                     	;# 
  1311  0698                     	;# 
  1312  0699                     	;# 
  1313  0711                     	;# 
  1314  0712                     	;# 
  1315  0713                     	;# 
  1316  0714                     	;# 
  1317  0715                     	;# 
  1318  0716                     	;# 
  1319  0717                     	;# 
  1320  0718                     	;# 
  1321  0719                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0891                     	;# 
  1327  0891                     	;# 
  1328  0892                     	;# 
  1329  0892                     	;# 
  1330  0892                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0893                     	;# 
  1336  0893                     	;# 
  1337  0894                     	;# 
  1338  0894                     	;# 
  1339  0894                     	;# 
  1340  0895                     	;# 
  1341  0895                     	;# 
  1342  0895                     	;# 
  1343  0896                     	;# 
  1344  0896                     	;# 
  1345  0896                     	;# 
  1346  089B                     	;# 
  1347  0911                     	;# 
  1348  0912                     	;# 
  1349  0913                     	;# 
  1350  0914                     	;# 
  1351  0915                     	;# 
  1352  0916                     	;# 
  1353  0918                     	;# 
  1354  0919                     	;# 
  1355  091A                     	;# 
  1356  091B                     	;# 
  1357  091C                     	;# 
  1358  091D                     	;# 
  1359  091E                     	;# 
  1360  091F                     	;# 
  1361  0E0F                     	;# 
  1362  0E10                     	;# 
  1363  0E11                     	;# 
  1364  0E12                     	;# 
  1365  0E13                     	;# 
  1366  0E14                     	;# 
  1367  0E15                     	;# 
  1368  0E16                     	;# 
  1369  0E17                     	;# 
  1370  0E18                     	;# 
  1371  0E19                     	;# 
  1372  0E1A                     	;# 
  1373  0E1B                     	;# 
  1374  0E1C                     	;# 
  1375  0E1D                     	;# 
  1376  0E1E                     	;# 
  1377  0E1F                     	;# 
  1378  0E20                     	;# 
  1379  0E21                     	;# 
  1380  0E22                     	;# 
  1381  0E24                     	;# 
  1382  0E25                     	;# 
  1383  0E28                     	;# 
  1384  0E29                     	;# 
  1385  0E2A                     	;# 
  1386  0E2B                     	;# 
  1387  0E2C                     	;# 
  1388  0E2D                     	;# 
  1389  0E2E                     	;# 
  1390  0E2F                     	;# 
  1391  0E90                     	;# 
  1392  0E91                     	;# 
  1393  0E92                     	;# 
  1394  0E94                     	;# 
  1395  0E95                     	;# 
  1396  0EA0                     	;# 
  1397  0EA1                     	;# 
  1398  0EA2                     	;# 
  1399  0EA3                     	;# 
  1400  0EA4                     	;# 
  1401  0EA5                     	;# 
  1402  0F0F                     	;# 
  1403  0F10                     	;# 
  1404  0F11                     	;# 
  1405  0F12                     	;# 
  1406  0F13                     	;# 
  1407  0F14                     	;# 
  1408  0F15                     	;# 
  1409  0F16                     	;# 
  1410  0F17                     	;# 
  1411  0F18                     	;# 
  1412  0F19                     	;# 
  1413  0F1A                     	;# 
  1414  0F1B                     	;# 
  1415  0F1C                     	;# 
  1416  0F1D                     	;# 
  1417  0F1E                     	;# 
  1418  0F1F                     	;# 
  1419  0F20                     	;# 
  1420  0F21                     	;# 
  1421  0F22                     	;# 
  1422  0F23                     	;# 
  1423  0F24                     	;# 
  1424  0F25                     	;# 
  1425  0F26                     	;# 
  1426  0F27                     	;# 
  1427  0F28                     	;# 
  1428  0F29                     	;# 
  1429  0F2A                     	;# 
  1430  0F2B                     	;# 
  1431  0F2C                     	;# 
  1432  0F2D                     	;# 
  1433  0F2E                     	;# 
  1434  0F2F                     	;# 
  1435  0F30                     	;# 
  1436  0F31                     	;# 
  1437  0F32                     	;# 
  1438  0F33                     	;# 
  1439  0F34                     	;# 
  1440  0F35                     	;# 
  1441  0F36                     	;# 
  1442  0F37                     	;# 
  1443  0FE4                     	;# 
  1444  0FE5                     	;# 
  1445  0FE6                     	;# 
  1446  0FE7                     	;# 
  1447  0FE8                     	;# 
  1448  0FE9                     	;# 
  1449  0FEA                     	;# 
  1450  0FEB                     	;# 
  1451  0FED                     	;# 
  1452  0FEE                     	;# 
  1453  0FEF                     	;# 
  1454  0000                     	;# 
  1455  0001                     	;# 
  1456  0002                     	;# 
  1457  0003                     	;# 
  1458  0004                     	;# 
  1459  0005                     	;# 
  1460  0006                     	;# 
  1461  0007                     	;# 
  1462  0008                     	;# 
  1463  0009                     	;# 
  1464  000A                     	;# 
  1465  000B                     	;# 
  1466  000C                     	;# 
  1467  000E                     	;# 
  1468  0010                     	;# 
  1469  0011                     	;# 
  1470  0012                     	;# 
  1471  0013                     	;# 
  1472  0014                     	;# 
  1473  0015                     	;# 
  1474  0015                     	;# 
  1475  0016                     	;# 
  1476  0016                     	;# 
  1477  0017                     	;# 
  1478  0018                     	;# 
  1479  0019                     	;# 
  1480  0019                     	;# 
  1481  001A                     	;# 
  1482  001B                     	;# 
  1483  001C                     	;# 
  1484  001D                     	;# 
  1485  001E                     	;# 
  1486  001F                     	;# 
  1487  008C                     	;# 
  1488  008E                     	;# 
  1489  0090                     	;# 
  1490  0091                     	;# 
  1491  0092                     	;# 
  1492  0093                     	;# 
  1493  0094                     	;# 
  1494  0097                     	;# 
  1495  009B                     	;# 
  1496  009B                     	;# 
  1497  009C                     	;# 
  1498  009D                     	;# 
  1499  009E                     	;# 
  1500  009F                     	;# 
  1501  010C                     	;# 
  1502  010E                     	;# 
  1503  0111                     	;# 
  1504  0112                     	;# 
  1505  0113                     	;# 
  1506  0114                     	;# 
  1507  0115                     	;# 
  1508  0116                     	;# 
  1509  0117                     	;# 
  1510  0118                     	;# 
  1511  0119                     	;# 
  1512  018C                     	;# 
  1513  018E                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  0199                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019A                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019B                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019C                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019D                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019E                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  019F                     	;# 
  1538  019F                     	;# 
  1539  020C                     	;# 
  1540  020E                     	;# 
  1541  0211                     	;# 
  1542  0211                     	;# 
  1543  0212                     	;# 
  1544  0212                     	;# 
  1545  0213                     	;# 
  1546  0213                     	;# 
  1547  0214                     	;# 
  1548  0214                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0216                     	;# 
  1554  0216                     	;# 
  1555  0217                     	;# 
  1556  0217                     	;# 
  1557  0219                     	;# 
  1558  021A                     	;# 
  1559  021B                     	;# 
  1560  021C                     	;# 
  1561  021D                     	;# 
  1562  021D                     	;# 
  1563  021E                     	;# 
  1564  021F                     	;# 
  1565  028C                     	;# 
  1566  028E                     	;# 
  1567  0291                     	;# 
  1568  0291                     	;# 
  1569  0292                     	;# 
  1570  0293                     	;# 
  1571  0294                     	;# 
  1572  0295                     	;# 
  1573  0295                     	;# 
  1574  0296                     	;# 
  1575  0297                     	;# 
  1576  0298                     	;# 
  1577  029F                     	;# 
  1578  030C                     	;# 
  1579  030E                     	;# 
  1580  0311                     	;# 
  1581  0311                     	;# 
  1582  0312                     	;# 
  1583  0313                     	;# 
  1584  0314                     	;# 
  1585  0315                     	;# 
  1586  0315                     	;# 
  1587  0316                     	;# 
  1588  0317                     	;# 
  1589  0318                     	;# 
  1590  038C                     	;# 
  1591  038E                     	;# 
  1592  0391                     	;# 
  1593  0392                     	;# 
  1594  0393                     	;# 
  1595  0397                     	;# 
  1596  0398                     	;# 
  1597  0399                     	;# 
  1598  039A                     	;# 
  1599  039C                     	;# 
  1600  039D                     	;# 
  1601  039E                     	;# 
  1602  039F                     	;# 
  1603  0411                     	;# 
  1604  0411                     	;# 
  1605  0412                     	;# 
  1606  0413                     	;# 
  1607  0414                     	;# 
  1608  0415                     	;# 
  1609  0416                     	;# 
  1610  0417                     	;# 
  1611  0418                     	;# 
  1612  0418                     	;# 
  1613  0419                     	;# 
  1614  041A                     	;# 
  1615  041B                     	;# 
  1616  041C                     	;# 
  1617  041D                     	;# 
  1618  041E                     	;# 
  1619  041F                     	;# 
  1620  0498                     	;# 
  1621  0498                     	;# 
  1622  0499                     	;# 
  1623  049A                     	;# 
  1624  049B                     	;# 
  1625  049B                     	;# 
  1626  049C                     	;# 
  1627  049D                     	;# 
  1628  049E                     	;# 
  1629  049F                     	;# 
  1630  0617                     	;# 
  1631  0618                     	;# 
  1632  0619                     	;# 
  1633  0619                     	;# 
  1634  061A                     	;# 
  1635  061B                     	;# 
  1636  061C                     	;# 
  1637  061C                     	;# 
  1638  061F                     	;# 
  1639  0691                     	;# 
  1640  0692                     	;# 
  1641  0693                     	;# 
  1642  0694                     	;# 
  1643  0695                     	;# 
  1644  0696                     	;# 
  1645  0697                     	;# 
  1646  0698                     	;# 
  1647  0699                     	;# 
  1648  0711                     	;# 
  1649  0712                     	;# 
  1650  0713                     	;# 
  1651  0714                     	;# 
  1652  0715                     	;# 
  1653  0716                     	;# 
  1654  0717                     	;# 
  1655  0718                     	;# 
  1656  0719                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0891                     	;# 
  1662  0891                     	;# 
  1663  0892                     	;# 
  1664  0892                     	;# 
  1665  0892                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0893                     	;# 
  1671  0893                     	;# 
  1672  0894                     	;# 
  1673  0894                     	;# 
  1674  0894                     	;# 
  1675  0895                     	;# 
  1676  0895                     	;# 
  1677  0895                     	;# 
  1678  0896                     	;# 
  1679  0896                     	;# 
  1680  0896                     	;# 
  1681  089B                     	;# 
  1682  0911                     	;# 
  1683  0912                     	;# 
  1684  0913                     	;# 
  1685  0914                     	;# 
  1686  0915                     	;# 
  1687  0916                     	;# 
  1688  0918                     	;# 
  1689  0919                     	;# 
  1690  091A                     	;# 
  1691  091B                     	;# 
  1692  091C                     	;# 
  1693  091D                     	;# 
  1694  091E                     	;# 
  1695  091F                     	;# 
  1696  0E0F                     	;# 
  1697  0E10                     	;# 
  1698  0E11                     	;# 
  1699  0E12                     	;# 
  1700  0E13                     	;# 
  1701  0E14                     	;# 
  1702  0E15                     	;# 
  1703  0E16                     	;# 
  1704  0E17                     	;# 
  1705  0E18                     	;# 
  1706  0E19                     	;# 
  1707  0E1A                     	;# 
  1708  0E1B                     	;# 
  1709  0E1C                     	;# 
  1710  0E1D                     	;# 
  1711  0E1E                     	;# 
  1712  0E1F                     	;# 
  1713  0E20                     	;# 
  1714  0E21                     	;# 
  1715  0E22                     	;# 
  1716  0E24                     	;# 
  1717  0E25                     	;# 
  1718  0E28                     	;# 
  1719  0E29                     	;# 
  1720  0E2A                     	;# 
  1721  0E2B                     	;# 
  1722  0E2C                     	;# 
  1723  0E2D                     	;# 
  1724  0E2E                     	;# 
  1725  0E2F                     	;# 
  1726  0E90                     	;# 
  1727  0E91                     	;# 
  1728  0E92                     	;# 
  1729  0E94                     	;# 
  1730  0E95                     	;# 
  1731  0EA0                     	;# 
  1732  0EA1                     	;# 
  1733  0EA2                     	;# 
  1734  0EA3                     	;# 
  1735  0EA4                     	;# 
  1736  0EA5                     	;# 
  1737  0F0F                     	;# 
  1738  0F10                     	;# 
  1739  0F11                     	;# 
  1740  0F12                     	;# 
  1741  0F13                     	;# 
  1742  0F14                     	;# 
  1743  0F15                     	;# 
  1744  0F16                     	;# 
  1745  0F17                     	;# 
  1746  0F18                     	;# 
  1747  0F19                     	;# 
  1748  0F1A                     	;# 
  1749  0F1B                     	;# 
  1750  0F1C                     	;# 
  1751  0F1D                     	;# 
  1752  0F1E                     	;# 
  1753  0F1F                     	;# 
  1754  0F20                     	;# 
  1755  0F21                     	;# 
  1756  0F22                     	;# 
  1757  0F23                     	;# 
  1758  0F24                     	;# 
  1759  0F25                     	;# 
  1760  0F26                     	;# 
  1761  0F27                     	;# 
  1762  0F28                     	;# 
  1763  0F29                     	;# 
  1764  0F2A                     	;# 
  1765  0F2B                     	;# 
  1766  0F2C                     	;# 
  1767  0F2D                     	;# 
  1768  0F2E                     	;# 
  1769  0F2F                     	;# 
  1770  0F30                     	;# 
  1771  0F31                     	;# 
  1772  0F32                     	;# 
  1773  0F33                     	;# 
  1774  0F34                     	;# 
  1775  0F35                     	;# 
  1776  0F36                     	;# 
  1777  0F37                     	;# 
  1778  0FE4                     	;# 
  1779  0FE5                     	;# 
  1780  0FE6                     	;# 
  1781  0FE7                     	;# 
  1782  0FE8                     	;# 
  1783  0FE9                     	;# 
  1784  0FEA                     	;# 
  1785  0FEB                     	;# 
  1786  0FED                     	;# 
  1787  0FEE                     	;# 
  1788  0FEF                     	;# 
  1789  0000                     	;# 
  1790  0001                     	;# 
  1791  0002                     	;# 
  1792  0003                     	;# 
  1793  0004                     	;# 
  1794  0005                     	;# 
  1795  0006                     	;# 
  1796  0007                     	;# 
  1797  0008                     	;# 
  1798  0009                     	;# 
  1799  000A                     	;# 
  1800  000B                     	;# 
  1801  000C                     	;# 
  1802  000E                     	;# 
  1803  0010                     	;# 
  1804  0011                     	;# 
  1805  0012                     	;# 
  1806  0013                     	;# 
  1807  0014                     	;# 
  1808  0015                     	;# 
  1809  0015                     	;# 
  1810  0016                     	;# 
  1811  0016                     	;# 
  1812  0017                     	;# 
  1813  0018                     	;# 
  1814  0019                     	;# 
  1815  0019                     	;# 
  1816  001A                     	;# 
  1817  001B                     	;# 
  1818  001C                     	;# 
  1819  001D                     	;# 
  1820  001E                     	;# 
  1821  001F                     	;# 
  1822  008C                     	;# 
  1823  008E                     	;# 
  1824  0090                     	;# 
  1825  0091                     	;# 
  1826  0092                     	;# 
  1827  0093                     	;# 
  1828  0094                     	;# 
  1829  0097                     	;# 
  1830  009B                     	;# 
  1831  009B                     	;# 
  1832  009C                     	;# 
  1833  009D                     	;# 
  1834  009E                     	;# 
  1835  009F                     	;# 
  1836  010C                     	;# 
  1837  010E                     	;# 
  1838  0111                     	;# 
  1839  0112                     	;# 
  1840  0113                     	;# 
  1841  0114                     	;# 
  1842  0115                     	;# 
  1843  0116                     	;# 
  1844  0117                     	;# 
  1845  0118                     	;# 
  1846  0119                     	;# 
  1847  018C                     	;# 
  1848  018E                     	;# 
  1849  0199                     	;# 
  1850  0199                     	;# 
  1851  0199                     	;# 
  1852  019A                     	;# 
  1853  019A                     	;# 
  1854  019A                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019B                     	;# 
  1860  019C                     	;# 
  1861  019C                     	;# 
  1862  019C                     	;# 
  1863  019D                     	;# 
  1864  019D                     	;# 
  1865  019D                     	;# 
  1866  019E                     	;# 
  1867  019E                     	;# 
  1868  019E                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  019F                     	;# 
  1874  020C                     	;# 
  1875  020E                     	;# 
  1876  0211                     	;# 
  1877  0211                     	;# 
  1878  0212                     	;# 
  1879  0212                     	;# 
  1880  0213                     	;# 
  1881  0213                     	;# 
  1882  0214                     	;# 
  1883  0214                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0216                     	;# 
  1889  0216                     	;# 
  1890  0217                     	;# 
  1891  0217                     	;# 
  1892  0219                     	;# 
  1893  021A                     	;# 
  1894  021B                     	;# 
  1895  021C                     	;# 
  1896  021D                     	;# 
  1897  021D                     	;# 
  1898  021E                     	;# 
  1899  021F                     	;# 
  1900  028C                     	;# 
  1901  028E                     	;# 
  1902  0291                     	;# 
  1903  0291                     	;# 
  1904  0292                     	;# 
  1905  0293                     	;# 
  1906  0294                     	;# 
  1907  0295                     	;# 
  1908  0295                     	;# 
  1909  0296                     	;# 
  1910  0297                     	;# 
  1911  0298                     	;# 
  1912  029F                     	;# 
  1913  030C                     	;# 
  1914  030E                     	;# 
  1915  0311                     	;# 
  1916  0311                     	;# 
  1917  0312                     	;# 
  1918  0313                     	;# 
  1919  0314                     	;# 
  1920  0315                     	;# 
  1921  0315                     	;# 
  1922  0316                     	;# 
  1923  0317                     	;# 
  1924  0318                     	;# 
  1925  038C                     	;# 
  1926  038E                     	;# 
  1927  0391                     	;# 
  1928  0392                     	;# 
  1929  0393                     	;# 
  1930  0397                     	;# 
  1931  0398                     	;# 
  1932  0399                     	;# 
  1933  039A                     	;# 
  1934  039C                     	;# 
  1935  039D                     	;# 
  1936  039E                     	;# 
  1937  039F                     	;# 
  1938  0411                     	;# 
  1939  0411                     	;# 
  1940  0412                     	;# 
  1941  0413                     	;# 
  1942  0414                     	;# 
  1943  0415                     	;# 
  1944  0416                     	;# 
  1945  0417                     	;# 
  1946  0418                     	;# 
  1947  0418                     	;# 
  1948  0419                     	;# 
  1949  041A                     	;# 
  1950  041B                     	;# 
  1951  041C                     	;# 
  1952  041D                     	;# 
  1953  041E                     	;# 
  1954  041F                     	;# 
  1955  0498                     	;# 
  1956  0498                     	;# 
  1957  0499                     	;# 
  1958  049A                     	;# 
  1959  049B                     	;# 
  1960  049B                     	;# 
  1961  049C                     	;# 
  1962  049D                     	;# 
  1963  049E                     	;# 
  1964  049F                     	;# 
  1965  0617                     	;# 
  1966  0618                     	;# 
  1967  0619                     	;# 
  1968  0619                     	;# 
  1969  061A                     	;# 
  1970  061B                     	;# 
  1971  061C                     	;# 
  1972  061C                     	;# 
  1973  061F                     	;# 
  1974  0691                     	;# 
  1975  0692                     	;# 
  1976  0693                     	;# 
  1977  0694                     	;# 
  1978  0695                     	;# 
  1979  0696                     	;# 
  1980  0697                     	;# 
  1981  0698                     	;# 
  1982  0699                     	;# 
  1983  0711                     	;# 
  1984  0712                     	;# 
  1985  0713                     	;# 
  1986  0714                     	;# 
  1987  0715                     	;# 
  1988  0716                     	;# 
  1989  0717                     	;# 
  1990  0718                     	;# 
  1991  0719                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0891                     	;# 
  1997  0891                     	;# 
  1998  0892                     	;# 
  1999  0892                     	;# 
  2000  0892                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0893                     	;# 
  2006  0893                     	;# 
  2007  0894                     	;# 
  2008  0894                     	;# 
  2009  0894                     	;# 
  2010  0895                     	;# 
  2011  0895                     	;# 
  2012  0895                     	;# 
  2013  0896                     	;# 
  2014  0896                     	;# 
  2015  0896                     	;# 
  2016  089B                     	;# 
  2017  0911                     	;# 
  2018  0912                     	;# 
  2019  0913                     	;# 
  2020  0914                     	;# 
  2021  0915                     	;# 
  2022  0916                     	;# 
  2023  0918                     	;# 
  2024  0919                     	;# 
  2025  091A                     	;# 
  2026  091B                     	;# 
  2027  091C                     	;# 
  2028  091D                     	;# 
  2029  091E                     	;# 
  2030  091F                     	;# 
  2031  0E0F                     	;# 
  2032  0E10                     	;# 
  2033  0E11                     	;# 
  2034  0E12                     	;# 
  2035  0E13                     	;# 
  2036  0E14                     	;# 
  2037  0E15                     	;# 
  2038  0E16                     	;# 
  2039  0E17                     	;# 
  2040  0E18                     	;# 
  2041  0E19                     	;# 
  2042  0E1A                     	;# 
  2043  0E1B                     	;# 
  2044  0E1C                     	;# 
  2045  0E1D                     	;# 
  2046  0E1E                     	;# 
  2047  0E1F                     	;# 
  2048  0E20                     	;# 
  2049  0E21                     	;# 
  2050  0E22                     	;# 
  2051  0E24                     	;# 
  2052  0E25                     	;# 
  2053  0E28                     	;# 
  2054  0E29                     	;# 
  2055  0E2A                     	;# 
  2056  0E2B                     	;# 
  2057  0E2C                     	;# 
  2058  0E2D                     	;# 
  2059  0E2E                     	;# 
  2060  0E2F                     	;# 
  2061  0E90                     	;# 
  2062  0E91                     	;# 
  2063  0E92                     	;# 
  2064  0E94                     	;# 
  2065  0E95                     	;# 
  2066  0EA0                     	;# 
  2067  0EA1                     	;# 
  2068  0EA2                     	;# 
  2069  0EA3                     	;# 
  2070  0EA4                     	;# 
  2071  0EA5                     	;# 
  2072  0F0F                     	;# 
  2073  0F10                     	;# 
  2074  0F11                     	;# 
  2075  0F12                     	;# 
  2076  0F13                     	;# 
  2077  0F14                     	;# 
  2078  0F15                     	;# 
  2079  0F16                     	;# 
  2080  0F17                     	;# 
  2081  0F18                     	;# 
  2082  0F19                     	;# 
  2083  0F1A                     	;# 
  2084  0F1B                     	;# 
  2085  0F1C                     	;# 
  2086  0F1D                     	;# 
  2087  0F1E                     	;# 
  2088  0F1F                     	;# 
  2089  0F20                     	;# 
  2090  0F21                     	;# 
  2091  0F22                     	;# 
  2092  0F23                     	;# 
  2093  0F24                     	;# 
  2094  0F25                     	;# 
  2095  0F26                     	;# 
  2096  0F27                     	;# 
  2097  0F28                     	;# 
  2098  0F29                     	;# 
  2099  0F2A                     	;# 
  2100  0F2B                     	;# 
  2101  0F2C                     	;# 
  2102  0F2D                     	;# 
  2103  0F2E                     	;# 
  2104  0F2F                     	;# 
  2105  0F30                     	;# 
  2106  0F31                     	;# 
  2107  0F32                     	;# 
  2108  0F33                     	;# 
  2109  0F34                     	;# 
  2110  0F35                     	;# 
  2111  0F36                     	;# 
  2112  0F37                     	;# 
  2113  0FE4                     	;# 
  2114  0FE5                     	;# 
  2115  0FE6                     	;# 
  2116  0FE7                     	;# 
  2117  0FE8                     	;# 
  2118  0FE9                     	;# 
  2119  0FEA                     	;# 
  2120  0FEB                     	;# 
  2121  0FED                     	;# 
  2122  0FEE                     	;# 
  2123  0FEF                     	;# 
  2124  0000                     	;# 
  2125  0001                     	;# 
  2126  0002                     	;# 
  2127  0003                     	;# 
  2128  0004                     	;# 
  2129  0005                     	;# 
  2130  0006                     	;# 
  2131  0007                     	;# 
  2132  0008                     	;# 
  2133  0009                     	;# 
  2134  000A                     	;# 
  2135  000B                     	;# 
  2136  000C                     	;# 
  2137  000E                     	;# 
  2138  0010                     	;# 
  2139  0011                     	;# 
  2140  0012                     	;# 
  2141  0013                     	;# 
  2142  0014                     	;# 
  2143  0015                     	;# 
  2144  0015                     	;# 
  2145  0016                     	;# 
  2146  0016                     	;# 
  2147  0017                     	;# 
  2148  0018                     	;# 
  2149  0019                     	;# 
  2150  0019                     	;# 
  2151  001A                     	;# 
  2152  001B                     	;# 
  2153  001C                     	;# 
  2154  001D                     	;# 
  2155  001E                     	;# 
  2156  001F                     	;# 
  2157  008C                     	;# 
  2158  008E                     	;# 
  2159  0090                     	;# 
  2160  0091                     	;# 
  2161  0092                     	;# 
  2162  0093                     	;# 
  2163  0094                     	;# 
  2164  0097                     	;# 
  2165  009B                     	;# 
  2166  009B                     	;# 
  2167  009C                     	;# 
  2168  009D                     	;# 
  2169  009E                     	;# 
  2170  009F                     	;# 
  2171  010C                     	;# 
  2172  010E                     	;# 
  2173  0111                     	;# 
  2174  0112                     	;# 
  2175  0113                     	;# 
  2176  0114                     	;# 
  2177  0115                     	;# 
  2178  0116                     	;# 
  2179  0117                     	;# 
  2180  0118                     	;# 
  2181  0119                     	;# 
  2182  018C                     	;# 
  2183  018E                     	;# 
  2184  0199                     	;# 
  2185  0199                     	;# 
  2186  0199                     	;# 
  2187  019A                     	;# 
  2188  019A                     	;# 
  2189  019A                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019B                     	;# 
  2194  019B                     	;# 
  2195  019C                     	;# 
  2196  019C                     	;# 
  2197  019C                     	;# 
  2198  019D                     	;# 
  2199  019D                     	;# 
  2200  019D                     	;# 
  2201  019E                     	;# 
  2202  019E                     	;# 
  2203  019E                     	;# 
  2204  019F                     	;# 
  2205  019F                     	;# 
  2206  019F                     	;# 
  2207  019F                     	;# 
  2208  019F                     	;# 
  2209  020C                     	;# 
  2210  020E                     	;# 
  2211  0211                     	;# 
  2212  0211                     	;# 
  2213  0212                     	;# 
  2214  0212                     	;# 
  2215  0213                     	;# 
  2216  0213                     	;# 
  2217  0214                     	;# 
  2218  0214                     	;# 
  2219  0215                     	;# 
  2220  0215                     	;# 
  2221  0215                     	;# 
  2222  0215                     	;# 
  2223  0216                     	;# 
  2224  0216                     	;# 
  2225  0217                     	;# 
  2226  0217                     	;# 
  2227  0219                     	;# 
  2228  021A                     	;# 
  2229  021B                     	;# 
  2230  021C                     	;# 
  2231  021D                     	;# 
  2232  021D                     	;# 
  2233  021E                     	;# 
  2234  021F                     	;# 
  2235  028C                     	;# 
  2236  028E                     	;# 
  2237  0291                     	;# 
  2238  0291                     	;# 
  2239  0292                     	;# 
  2240  0293                     	;# 
  2241  0294                     	;# 
  2242  0295                     	;# 
  2243  0295                     	;# 
  2244  0296                     	;# 
  2245  0297                     	;# 
  2246  0298                     	;# 
  2247  029F                     	;# 
  2248  030C                     	;# 
  2249  030E                     	;# 
  2250  0311                     	;# 
  2251  0311                     	;# 
  2252  0312                     	;# 
  2253  0313                     	;# 
  2254  0314                     	;# 
  2255  0315                     	;# 
  2256  0315                     	;# 
  2257  0316                     	;# 
  2258  0317                     	;# 
  2259  0318                     	;# 
  2260  038C                     	;# 
  2261  038E                     	;# 
  2262  0391                     	;# 
  2263  0392                     	;# 
  2264  0393                     	;# 
  2265  0397                     	;# 
  2266  0398                     	;# 
  2267  0399                     	;# 
  2268  039A                     	;# 
  2269  039C                     	;# 
  2270  039D                     	;# 
  2271  039E                     	;# 
  2272  039F                     	;# 
  2273  0411                     	;# 
  2274  0411                     	;# 
  2275  0412                     	;# 
  2276  0413                     	;# 
  2277  0414                     	;# 
  2278  0415                     	;# 
  2279  0416                     	;# 
  2280  0417                     	;# 
  2281  0418                     	;# 
  2282  0418                     	;# 
  2283  0419                     	;# 
  2284  041A                     	;# 
  2285  041B                     	;# 
  2286  041C                     	;# 
  2287  041D                     	;# 
  2288  041E                     	;# 
  2289  041F                     	;# 
  2290  0498                     	;# 
  2291  0498                     	;# 
  2292  0499                     	;# 
  2293  049A                     	;# 
  2294  049B                     	;# 
  2295  049B                     	;# 
  2296  049C                     	;# 
  2297  049D                     	;# 
  2298  049E                     	;# 
  2299  049F                     	;# 
  2300  0617                     	;# 
  2301  0618                     	;# 
  2302  0619                     	;# 
  2303  0619                     	;# 
  2304  061A                     	;# 
  2305  061B                     	;# 
  2306  061C                     	;# 
  2307  061C                     	;# 
  2308  061F                     	;# 
  2309  0691                     	;# 
  2310  0692                     	;# 
  2311  0693                     	;# 
  2312  0694                     	;# 
  2313  0695                     	;# 
  2314  0696                     	;# 
  2315  0697                     	;# 
  2316  0698                     	;# 
  2317  0699                     	;# 
  2318  0711                     	;# 
  2319  0712                     	;# 
  2320  0713                     	;# 
  2321  0714                     	;# 
  2322  0715                     	;# 
  2323  0716                     	;# 
  2324  0717                     	;# 
  2325  0718                     	;# 
  2326  0719                     	;# 
  2327  0891                     	;# 
  2328  0891                     	;# 
  2329  0891                     	;# 
  2330  0891                     	;# 
  2331  0891                     	;# 
  2332  0891                     	;# 
  2333  0892                     	;# 
  2334  0892                     	;# 
  2335  0892                     	;# 
  2336  0893                     	;# 
  2337  0893                     	;# 
  2338  0893                     	;# 
  2339  0893                     	;# 
  2340  0893                     	;# 
  2341  0893                     	;# 
  2342  0894                     	;# 
  2343  0894                     	;# 
  2344  0894                     	;# 
  2345  0895                     	;# 
  2346  0895                     	;# 
  2347  0895                     	;# 
  2348  0896                     	;# 
  2349  0896                     	;# 
  2350  0896                     	;# 
  2351  089B                     	;# 
  2352  0911                     	;# 
  2353  0912                     	;# 
  2354  0913                     	;# 
  2355  0914                     	;# 
  2356  0915                     	;# 
  2357  0916                     	;# 
  2358  0918                     	;# 
  2359  0919                     	;# 
  2360  091A                     	;# 
  2361  091B                     	;# 
  2362  091C                     	;# 
  2363  091D                     	;# 
  2364  091E                     	;# 
  2365  091F                     	;# 
  2366  0E0F                     	;# 
  2367  0E10                     	;# 
  2368  0E11                     	;# 
  2369  0E12                     	;# 
  2370  0E13                     	;# 
  2371  0E14                     	;# 
  2372  0E15                     	;# 
  2373  0E16                     	;# 
  2374  0E17                     	;# 
  2375  0E18                     	;# 
  2376  0E19                     	;# 
  2377  0E1A                     	;# 
  2378  0E1B                     	;# 
  2379  0E1C                     	;# 
  2380  0E1D                     	;# 
  2381  0E1E                     	;# 
  2382  0E1F                     	;# 
  2383  0E20                     	;# 
  2384  0E21                     	;# 
  2385  0E22                     	;# 
  2386  0E24                     	;# 
  2387  0E25                     	;# 
  2388  0E28                     	;# 
  2389  0E29                     	;# 
  2390  0E2A                     	;# 
  2391  0E2B                     	;# 
  2392  0E2C                     	;# 
  2393  0E2D                     	;# 
  2394  0E2E                     	;# 
  2395  0E2F                     	;# 
  2396  0E90                     	;# 
  2397  0E91                     	;# 
  2398  0E92                     	;# 
  2399  0E94                     	;# 
  2400  0E95                     	;# 
  2401  0EA0                     	;# 
  2402  0EA1                     	;# 
  2403  0EA2                     	;# 
  2404  0EA3                     	;# 
  2405  0EA4                     	;# 
  2406  0EA5                     	;# 
  2407  0F0F                     	;# 
  2408  0F10                     	;# 
  2409  0F11                     	;# 
  2410  0F12                     	;# 
  2411  0F13                     	;# 
  2412  0F14                     	;# 
  2413  0F15                     	;# 
  2414  0F16                     	;# 
  2415  0F17                     	;# 
  2416  0F18                     	;# 
  2417  0F19                     	;# 
  2418  0F1A                     	;# 
  2419  0F1B                     	;# 
  2420  0F1C                     	;# 
  2421  0F1D                     	;# 
  2422  0F1E                     	;# 
  2423  0F1F                     	;# 
  2424  0F20                     	;# 
  2425  0F21                     	;# 
  2426  0F22                     	;# 
  2427  0F23                     	;# 
  2428  0F24                     	;# 
  2429  0F25                     	;# 
  2430  0F26                     	;# 
  2431  0F27                     	;# 
  2432  0F28                     	;# 
  2433  0F29                     	;# 
  2434  0F2A                     	;# 
  2435  0F2B                     	;# 
  2436  0F2C                     	;# 
  2437  0F2D                     	;# 
  2438  0F2E                     	;# 
  2439  0F2F                     	;# 
  2440  0F30                     	;# 
  2441  0F31                     	;# 
  2442  0F32                     	;# 
  2443  0F33                     	;# 
  2444  0F34                     	;# 
  2445  0F35                     	;# 
  2446  0F36                     	;# 
  2447  0F37                     	;# 
  2448  0FE4                     	;# 
  2449  0FE5                     	;# 
  2450  0FE6                     	;# 
  2451  0FE7                     	;# 
  2452  0FE8                     	;# 
  2453  0FE9                     	;# 
  2454  0FEA                     	;# 
  2455  0FEB                     	;# 
  2456  0FED                     	;# 
  2457  0FEE                     	;# 
  2458  0FEF                     	;# 
  2459                           
  2460                           	psect	idataBANK1
  2461  07FE                     __pidataBANK1:	
  2462 ;;nrf24l01Service@width	offset	0
  2463 ;;nrf24l01Service@i	offset	1
  2464 ;;strcmp@s1	offset	0
  2465 ;;strcmp@r	offset	1
  2466 ;;strcmp@s2	offset=-1 (param)
  2467 ;;nrf24l01SendTXBuffer@packet	offset	0
  2468 ;;nrf24l01SendTXBuffer@i	offset	1
  2469 ;;nrf24l01SendTXBuffer@width	offset	2
  2470 ;;strlen@s	offset	0
  2471 ;;strlen@cp	offset	1
  2472 ;;nrf24l01SetRXMode@rxMode	offset	0
  2473 ;;nrf24l01Send@command	offset	0
  2474 ;;nrf24l01Send@data	offset=-1 (param)
  2475 ;;nrf24l01SPISend@data	offset	0
  2476 ;;memset@p	offset	0
  2477 ;;memset@p1	offset=-2 (param)
  2478 ;;memset@c	offset=-4 (param)
  2479 ;;memset@n	offset=-6 (param)
  2480 ;;nrf24l01Service@width	offset	0
  2481 ;;nrf24l01Service@i	offset	1
  2482 ;;strcmp@s1	offset	0
  2483 ;;strcmp@r	offset	1
  2484 ;;strcmp@s2	offset=-1 (param)
  2485 ;;nrf24l01SendTXBuffer@packet	offset	0
  2486 ;;nrf24l01SendTXBuffer@i	offset	1
  2487 ;;nrf24l01SendTXBuffer@width	offset	2
  2488 ;;strlen@s	offset	0
  2489 ;;strlen@cp	offset	1
  2490 ;;nrf24l01SetRXMode@rxMode	offset	0
  2491 ;;nrf24l01Send@command	offset	0
  2492 ;;nrf24l01Send@data	offset=-1 (param)
  2493 ;;nrf24l01SPISend@data	offset	0
  2494 ;;memset@p	offset	0
  2495 ;;memset@p1	offset=-2 (param)
  2496 ;;memset@c	offset=-4 (param)
  2497 ;;memset@n	offset=-6 (param)
  2498                           
  2499                           
  2500                           ;initializer for _romData
  2501  07FE  3420               	retlw	low (_romDataMap| (0+256))
  2502                           
  2503                           	psect	stringtext1
  2504  1000                     __pstringtext1:	
  2505  1000                     _dpowers:	
  2506  1000  3401               	retlw	1
  2507  1001  3400               	retlw	0
  2508  1002  3400               	retlw	0
  2509  1003  3400               	retlw	0
  2510  1004  340A               	retlw	10
  2511  1005  3400               	retlw	0
  2512  1006  3400               	retlw	0
  2513  1007  3400               	retlw	0
  2514  1008  3464               	retlw	100
  2515  1009  3400               	retlw	0
  2516  100A  3400               	retlw	0
  2517  100B  3400               	retlw	0
  2518  100C  34E8               	retlw	232
  2519  100D  3403               	retlw	3
  2520  100E  3400               	retlw	0
  2521  100F  3400               	retlw	0
  2522  1010  3410               	retlw	16
  2523  1011  3427               	retlw	39
  2524  1012  3400               	retlw	0
  2525  1013  3400               	retlw	0
  2526  1014  34A0               	retlw	160
  2527  1015  3486               	retlw	134
  2528  1016  3401               	retlw	1
  2529  1017  3400               	retlw	0
  2530  1018  3440               	retlw	64
  2531  1019  3442               	retlw	66
  2532  101A  340F               	retlw	15
  2533  101B  3400               	retlw	0
  2534  101C  3480               	retlw	128
  2535  101D  3496               	retlw	150
  2536  101E  3498               	retlw	152
  2537  101F  3400               	retlw	0
  2538  1020  3400               	retlw	0
  2539  1021  34E1               	retlw	225
  2540  1022  34F5               	retlw	245
  2541  1023  3405               	retlw	5
  2542  1024  3400               	retlw	0
  2543  1025  34CA               	retlw	202
  2544  1026  349A               	retlw	154
  2545  1027  343B               	retlw	59
  2546  1028                     __end_of_dpowers:	
  2547                           
  2548                           	psect	stringtext2
  2549  1040                     __pstringtext2:	
  2550  1040                     _n_ADDRESS_P0:	
  2551  1040  34AD               	retlw	173
  2552  1041  3487               	retlw	135
  2553  1042  3466               	retlw	102
  2554  1043  34BC               	retlw	188
  2555  1044  34BB               	retlw	187
  2556  1045                     __end_of_n_ADDRESS_P0:	
  2557                           
  2558                           	psect	stringtext3
  2559  1028                     __pstringtext3:	
  2560  1028                     _n_ADDRESS_MUL:	
  2561  1028  3421               	retlw	33
  2562  1029                     __end_of_n_ADDRESS_MUL:	
  2563  001A                     _TMR1H	set	26
  2564  0019                     _TMR1L	set	25
  2565  001C                     _T1GCONbits	set	28
  2566  001B                     _T1CONbits	set	27
  2567  000B                     _INTCONbits	set	11
  2568  0011                     _PIR1bits	set	17
  2569  0010                     _PIR0bits	set	16
  2570  000C                     _PORTAbits	set	12
  2571  000E                     _PORTCbits	set	14
  2572  0003                     _STATUSbits	set	3
  2573  0091                     _PIE1bits	set	145
  2574  009E                     _ADCON1bits	set	158
  2575  009C                     _ADRESH	set	156
  2576  009B                     _ADRESL	set	155
  2577  009D                     _ADCON0bits	set	157
  2578  0090                     _PIE0bits	set	144
  2579  0097                     _WDTCONbits	set	151
  2580  008E                     _TRISCbits	set	142
  2581  008C                     _TRISAbits	set	140
  2582  0117                     _FVRCONbits	set	279
  2583  018E                     _ANSELCbits	set	398
  2584  018C                     _ANSELAbits	set	396
  2585  018E                     _ANSELC	set	398
  2586  018C                     _ANSELA	set	396
  2587  020C                     _WPUAbits	set	524
  2588  020E                     _WPUC	set	526
  2589  020C                     _WPUA	set	524
  2590  0211                     _SSP1BUF	set	529
  2591  0214                     _SSP1STATbits	set	532
  2592  0215                     _SSP1CON1bits	set	533
  2593  028C                     _ODCONAbits	set	652
  2594  028E                     _ODCONC	set	654
  2595  028C                     _ODCONA	set	652
  2596  0391                     _IOCAPbits	set	913
  2597  038E                     _INLVLC	set	910
  2598  038C                     _INLVLA	set	908
  2599  0393                     _IOCAFbits	set	915
  2600  0896                     _NVMCON2	set	2198
  2601  0895                     _NVMCON1bits	set	2197
  2602  0893                     _NVMDATL	set	2195
  2603  0891                     _NVMADRL	set	2193
  2604  0892                     _NVMADRH	set	2194
  2605  0919                     _OSCCON1bits	set	2329
  2606  0EA0                     _RC0PPSbits	set	3744
  2607  0EA2                     _RC2PPSbits	set	3746
  2608  0EA1                     _RC1PPSbits	set	3745
  2609  1029                     STR_8:	
  2610  1029  3425               	retlw	37	;'%'
  2611  102A  346C               	retlw	108	;'l'
  2612  102B  3475               	retlw	117	;'u'
  2613  102C  342E               	retlw	46	;'.'
  2614  102D  3425               	retlw	37	;'%'
  2615  102E  3436               	retlw	54	;'6'
  2616  102F  342E               	retlw	46	;'.'
  2617  1030  3436               	retlw	54	;'6'
  2618  1031  346C               	retlw	108	;'l'
  2619  1032  3475               	retlw	117	;'u'
  2620  1033  3400               	retlw	0
  2621                           
  2622                           	psect	stringtext4
  2623  1034                     __pstringtext4:	
  2624  1034                     STR_7:	
  2625  1034  3442               	retlw	66	;'B'
  2626  1035  344F               	retlw	79	;'O'
  2627  1036  344F               	retlw	79	;'O'
  2628  1037  3454               	retlw	84	;'T'
  2629  1038  3433               	retlw	51	;'3'
  2630  1039  3400               	retlw	0
  2631                           
  2632                           	psect	stringtext5
  2633  103A                     __pstringtext5:	
  2634  103A                     STR_3:	
  2635  103A  3443               	retlw	67	;'C'
  2636  103B  344F               	retlw	79	;'O'
  2637  103C  3455               	retlw	85	;'U'
  2638  103D  344E               	retlw	78	;'N'
  2639  103E  3454               	retlw	84	;'T'
  2640  103F  3400               	retlw	0
  2641                           
  2642                           	psect	stringtext6
  2643  1045                     __pstringtext6:	
  2644  1045                     STR_5:	
  2645  1045  3454               	retlw	84	;'T'
  2646  1046  3445               	retlw	69	;'E'
  2647  1047  344D               	retlw	77	;'M'
  2648  1048  3450               	retlw	80	;'P'
  2649  1049  3400               	retlw	0
  2650                           
  2651                           	psect	stringtext7
  2652  104A                     __pstringtext7:	
  2653  104A                     STR_4:	
  2654  104A  3456               	retlw	86	;'V'
  2655  104B  3442               	retlw	66	;'B'
  2656  104C  3441               	retlw	65	;'A'
  2657  104D  3454               	retlw	84	;'T'
  2658  104E  3400               	retlw	0
  2659                           
  2660                           	psect	stringtext8
  2661  104F                     __pstringtext8:	
  2662  104F                     STR_6:	
  2663  104F  3455               	retlw	85	;'U'
  2664  1050  3457               	retlw	87	;'W'
  2665  1051  3454               	retlw	84	;'T'
  2666  1052  3400               	retlw	0
  2667                           
  2668                           	psect	stringtext9
  2669  1053                     __pstringtext9:	
  2670  1053                     STR_1:	
  2671  1053  342F               	retlw	47	;'/'
  2672  1054  3400               	retlw	0
  2673                           
  2674                           	psect	stringtext10
  2675  0000                     __pstringtext10:	
  2676  1053                     
  2677                           ; #config settings
  2678  0000                     
  2679                           	psect	cinit
  2680  0034                     start_initialization:	
  2681  0034                     __initialization:	
  2682                           
  2683                           ; Initialize objects allocated to BANK1
  2684  0034  0021               	movlb	1	; select bank1
  2685  0035  3187  27FE  3180   	fcall	__pidataBANK1	;fetch initializer
  2686  0038  00E9               	movwf	__pdataBANK1& (0+127)
  2687                           
  2688                           ; Clear objects allocated to BANK0
  2689  0039  0020               	movlb	0	; select bank0
  2690  003A  01E4               	clrf	__pbssBANK0& (0+127)
  2691  003B  01E5               	clrf	(__pbssBANK0+1)& (0+127)
  2692  003C  01E6               	clrf	(__pbssBANK0+2)& (0+127)
  2693  003D  01E7               	clrf	(__pbssBANK0+3)& (0+127)
  2694  003E  01E8               	clrf	(__pbssBANK0+4)& (0+127)
  2695  003F  01E9               	clrf	(__pbssBANK0+5)& (0+127)
  2696                           
  2697                           ; Clear objects allocated to BANK1
  2698  0040  30DC               	movlw	low __pbssBANK1
  2699  0041  0084               	movwf	4
  2700  0042  3000               	movlw	high __pbssBANK1
  2701  0043  0085               	movwf	5
  2702  0044  300D               	movlw	13
  2703  0045  3188  2017  3180   	fcall	clear_ram0
  2704                           
  2705                           ; Clear objects allocated to BANK2
  2706  0048  3020               	movlw	low __pbssBANK2
  2707  0049  0084               	movwf	4
  2708  004A  3001               	movlw	high __pbssBANK2
  2709  004B  0085               	movwf	5
  2710  004C  302D               	movlw	45
  2711  004D  3188  2017  3180   	fcall	clear_ram0
  2712                           
  2713                           ; Clear objects allocated to BANK3
  2714  0050  30A0               	movlw	low __pbssBANK3
  2715  0051  0084               	movwf	4
  2716  0052  3001               	movlw	high __pbssBANK3
  2717  0053  0085               	movwf	5
  2718  0054  3042               	movlw	66
  2719  0055  3188  2017         	fcall	clear_ram0
  2720  0057                     end_of_initialization:	
  2721                           ;End of C runtime variable initialization code
  2722                           
  2723  0057                     __end_of__initialization:	
  2724  0057  0020               	movlb	0
  2725                           
  2726                           ;Initialize the stack pointer (FSR1)
  2727  0058  306D               	movlw	low ___sp
  2728  0059  0086               	movwf	6
  2729  005A  3021               	movlw	high ___sp
  2730  005B  0087               	movwf	7
  2731  005C  318E  2EC2         	ljmp	_main	;jump to C main() function
  2732                           
  2733                           	psect	bssBANK0
  2734  0064                     __pbssBANK0:	
  2735  0064                     _status:	
  2736  0064                     	ds	5
  2737  0069                     _lastTXPacket:	
  2738  0069                     	ds	1
  2739                           
  2740                           	psect	bssBANK1
  2741  00DC                     __pbssBANK1:	
  2742  00DC                     _distance:	
  2743  00DC                     	ds	2
  2744  00DE                     _testCount:	
  2745  00DE                     	ds	2
  2746  00E0                     _rcount:	
  2747  00E0                     	ds	2
  2748  00E2                     _rlimit:	
  2749  00E2                     	ds	2
  2750  00E4                     _rloop:	
  2751  00E4                     	ds	2
  2752  00E6                     _counter:	
  2753  00E6                     	ds	2
  2754  00E8                     _waiting:	
  2755  00E8                     	ds	1
  2756                           
  2757                           	psect	dataBANK1
  2758  00E9                     __pdataBANK1:	
  2759  00E9                     _romData:	
  2760  00E9                     	ds	1
  2761                           
  2762                           	psect	bssBANK2
  2763  0120                     __pbssBANK2:	
  2764  0120                     _romDataMap:	
  2765  0120                     	ds	28
  2766  013C                     ftoa@buf:	
  2767  013C                     	ds	17
  2768                           
  2769                           	psect	bssBANK3
  2770  01A0                     __pbssBANK3:	
  2771  01A0                     _RXPacket:	
  2772  01A0                     	ds	33
  2773  01C1                     _TXPacket:	
  2774  01C1                     	ds	33
  2775                           
  2776                           	psect	clrtext
  2777  0817                     clear_ram0:	
  2778                           ;	Called with FSR0 containing the base address, and
  2779                           ;	WREG with the size to clear
  2780                           
  2781  0817  0064               	clrwdt	;clear the watchdog before getting into this loop
  2782  0818                     clrloop0:	
  2783  0818  0180               	clrf	0	;clear RAM location pointed to by FSR
  2784  0819  3101               	addfsr 0,1
  2785  081A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2786  081B  2818               	goto	clrloop0	;have we reached the end yet?
  2787  081C  3400               	retlw	0	;all done for this memory range, return
  2788                           
  2789                           	psect	cstackBANK4
  2790  0220                     __pcstackBANK4:	
  2791  0220                     loop@vt:	
  2792                           
  2793                           ; 3 bytes @ 0x0
  2794  0220                     	ds	3
  2795  0223                     loop@ta:	
  2796                           
  2797                           ; 3 bytes @ 0x3
  2798  0223                     	ds	3
  2799  0226                     _loop$2273:	
  2800                           
  2801                           ; 3 bytes @ 0x6
  2802  0226                     	ds	3
  2803  0229                     _loop$2274:	
  2804                           
  2805                           ; 3 bytes @ 0x9
  2806  0229                     	ds	3
  2807  022C                     loop@packet:	
  2808                           
  2809                           ; 33 bytes @ 0xC
  2810  022C                     	ds	33
  2811                           
  2812                           	psect	cstackBANK1
  2813  00A0                     __pcstackBANK1:	
  2814  00A0                     ?_ftoa:	
  2815  00A0                     ftoa@f:	
  2816                           ; 1 bytes @ 0x0
  2817                           
  2818                           
  2819                           ; 3 bytes @ 0x0
  2820  00A0                     	ds	3
  2821  00A3                     ftoa@status:	
  2822                           
  2823                           ; 1 bytes @ 0x3
  2824  00A3                     	ds	1
  2825  00A4                     ftoa@rem:	
  2826                           
  2827                           ; 4 bytes @ 0x4
  2828  00A4                     	ds	4
  2829  00A8                     ftoa@l:	
  2830                           
  2831                           ; 4 bytes @ 0x8
  2832  00A8                     	ds	4
  2833  00AC                     ftoa@cp:	
  2834                           
  2835                           ; 1 bytes @ 0xC
  2836  00AC                     	ds	1
  2837  00AD                     ?_strcat:	
  2838  00AD                     strcat@to:	
  2839                           ; 2 bytes @ 0xD
  2840                           
  2841                           
  2842                           ; 2 bytes @ 0xD
  2843  00AD                     	ds	2
  2844  00AF                     strcat@from:	
  2845                           
  2846                           ; 2 bytes @ 0xF
  2847  00AF                     	ds	2
  2848  00B1                     ?_sendMessage:	
  2849  00B1                     sendMessage@packet:	
  2850                           ; 1 bytes @ 0x11
  2851                           
  2852                           
  2853                           ; 2 bytes @ 0x11
  2854  00B1                     	ds	2
  2855  00B3                     sendMessage@topic:	
  2856                           
  2857                           ; 2 bytes @ 0x13
  2858  00B3                     	ds	2
  2859  00B5                     sendMessage@value:	
  2860                           
  2861                           ; 3 bytes @ 0x15
  2862  00B5                     	ds	3
  2863  00B8                     sendMessage@ftoaStatus:	
  2864                           
  2865                           ; 2 bytes @ 0x18
  2866  00B8                     	ds	2
  2867  00BA                     main@pipe:	
  2868                           
  2869                           ; 1 bytes @ 0x1A
  2870  00BA                     	ds	1
  2871  00BB                     main@packet:	
  2872                           
  2873                           ; 33 bytes @ 0x1B
  2874  00BB                     	ds	33
  2875                           
  2876                           	psect	cstackCOMMON
  2877  0070                     __pcstackCOMMON:	
  2878  0070                     ?_isdigit:	
  2879  0070                     ?_EEPROMWrite:	
  2880                           ; 1 bit 
  2881                           
  2882  0070                     ?_hcsr04ISR:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ??_hcsr04ISR:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_nrf24l01ISR:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ??_nrf24l01ISR:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_nrf24l01Init:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_nrf24l01SetTXPipe:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_nrf24l01SetRXPipe:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ??_nrf24l01SetRXPipe:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_hcsr04Init:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ??_hcsr04Init:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_EEPROMRead:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ??_isdigit:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ??___ftpack:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_nrf24l01InterfaceInit:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ??_nrf24l01InterfaceInit:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_resetWDT:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ??_resetWDT:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_sleepMs:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_exception:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_ISR:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_loop:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?_nrf24l01GetPipe:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_main:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ?_nrf24l01InitRegisters:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ?___bmul:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ??___lldiv:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     ??___ftge:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     ??___llmod:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0070                     ?_strcpy:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     ?___wmul:	
  2970                           ; 2 bytes @ 0x0
  2971                           
  2972  0070                     ?___lwmod:	
  2973                           ; 2 bytes @ 0x0
  2974                           
  2975  0070                     ?___awtoft:	
  2976                           ; 2 bytes @ 0x0
  2977                           
  2978  0070                     ?___lbtoft:	
  2979                           ; 3 bytes @ 0x0
  2980                           
  2981  0070                     ?___lltoft:	
  2982                           ; 3 bytes @ 0x0
  2983                           
  2984  0070                     ?___lwtoft:	
  2985                           ; 3 bytes @ 0x0
  2986                           
  2987  0070                     ___bmul@multiplicand:	
  2988                           ; 3 bytes @ 0x0
  2989                           
  2990  0070                     ___llmod@counter:	
  2991                           ; 1 bytes @ 0x0
  2992                           
  2993  0070                     _isdigit$2025:	
  2994                           ; 1 bytes @ 0x0
  2995                           
  2996  0070                     sleepMs@milliseconds:	
  2997                           ; 1 bytes @ 0x0
  2998                           
  2999  0070                     EEPROMWrite@address:	
  3000                           ; 2 bytes @ 0x0
  3001                           
  3002  0070                     EEPROMRead@address:	
  3003                           ; 2 bytes @ 0x0
  3004                           
  3005  0070                     ___wmul@multiplier:	
  3006                           ; 2 bytes @ 0x0
  3007                           
  3008  0070                     ___awtoft@c:	
  3009                           ; 2 bytes @ 0x0
  3010                           
  3011  0070                     ___lwmod@divisor:	
  3012                           ; 2 bytes @ 0x0
  3013                           
  3014  0070                     ___lwtoft@c:	
  3015                           ; 2 bytes @ 0x0
  3016                           
  3017  0070                     strcpy@to:	
  3018                           ; 2 bytes @ 0x0
  3019                           
  3020  0070                     ___lltoft@c:	
  3021                           ; 2 bytes @ 0x0
  3022                           
  3023                           
  3024                           ; 4 bytes @ 0x0
  3025  0070                     	ds	1
  3026  0071                     ??___bmul:	
  3027  0071                     nrf24l01SetRXPipe@pipe:	
  3028                           ; 1 bytes @ 0x1
  3029                           
  3030  0071                     ___bmul@product:	
  3031                           ; 1 bytes @ 0x1
  3032                           
  3033  0071                     isdigit@c:	
  3034                           ; 1 bytes @ 0x1
  3035                           
  3036                           
  3037                           ; 1 bytes @ 0x1
  3038  0071                     	ds	1
  3039  0072                     ??_EEPROMRead:	
  3040  0072                     ??_sleepMs:	
  3041                           ; 1 bytes @ 0x2
  3042                           
  3043  0072                     nrf24l01SetRXPipe@enRXAddr:	
  3044                           ; 1 bytes @ 0x2
  3045                           
  3046  0072                     EEPROMWrite@data:	
  3047                           ; 1 bytes @ 0x2
  3048                           
  3049  0072                     ___bmul@multiplier:	
  3050                           ; 1 bytes @ 0x2
  3051                           
  3052  0072                     ___wmul@multiplicand:	
  3053                           ; 1 bytes @ 0x2
  3054                           
  3055  0072                     ___lwmod@dividend:	
  3056                           ; 2 bytes @ 0x2
  3057                           
  3058  0072                     strcpy@from:	
  3059                           ; 2 bytes @ 0x2
  3060                           
  3061                           
  3062                           ; 2 bytes @ 0x2
  3063  0072                     	ds	1
  3064  0073                     ??_EEPROMWrite:	
  3065  0073                     ??_nrf24l01SetTXPipe:	
  3066                           ; 1 bytes @ 0x3
  3067                           
  3068  0073                     ??___awtoft:	
  3069                           ; 1 bytes @ 0x3
  3070                           
  3071  0073                     ??___lwtoft:	
  3072                           ; 1 bytes @ 0x3
  3073                           
  3074  0073                     sleepMs@wdtps:	
  3075                           ; 1 bytes @ 0x3
  3076                           
  3077  0073                     EEPROMWrite@GIEBitValue:	
  3078                           ; 1 bytes @ 0x3
  3079                           
  3080  0073                     ___awtoft@sign:	
  3081                           ; 1 bytes @ 0x3
  3082                           
  3083                           
  3084                           ; 1 bytes @ 0x3
  3085  0073                     	ds	1
  3086  0074                     ??_strcpy:	
  3087  0074                     ??_strcat:	
  3088                           ; 1 bytes @ 0x4
  3089                           
  3090  0074                     ??_ftoa:	
  3091                           ; 1 bytes @ 0x4
  3092                           
  3093  0074                     ??_nrf24l01SendPacket:	
  3094                           ; 1 bytes @ 0x4
  3095                           
  3096  0074                     ??_exception:	
  3097                           ; 1 bytes @ 0x4
  3098                           
  3099  0074                     ??_sendMessage:	
  3100                           ; 1 bytes @ 0x4
  3101                           
  3102  0074                     ??_loop:	
  3103                           ; 1 bytes @ 0x4
  3104                           
  3105  0074                     ??___wmul:	
  3106                           ; 1 bytes @ 0x4
  3107                           
  3108  0074                     ??___ftmul:	
  3109                           ; 1 bytes @ 0x4
  3110                           
  3111  0074                     ??___ftneg:	
  3112                           ; 1 bytes @ 0x4
  3113                           
  3114  0074                     ??___ftsub:	
  3115                           ; 1 bytes @ 0x4
  3116                           
  3117  0074                     ??___fttol:	
  3118                           ; 1 bytes @ 0x4
  3119                           
  3120  0074                     ??___lbtoft:	
  3121                           ; 1 bytes @ 0x4
  3122                           
  3123  0074                     ??___lltoft:	
  3124                           ; 1 bytes @ 0x4
  3125                           
  3126  0074                     ??___lwmod:	
  3127                           ; 1 bytes @ 0x4
  3128                           
  3129                           
  3130                           	psect	cstackBANK0
  3131  0020                     __pcstackBANK0:	
  3132                           ; 1 bytes @ 0x4
  3133                           
  3134  0020                     ??_ISR:	
  3135                           
  3136                           ; 1 bytes @ 0x0
  3137  0020                     	ds	6
  3138  0026                     ?___ftge:	
  3139  0026                     ?___ftpack:	
  3140                           ; 1 bit 
  3141                           
  3142  0026                     ?___lldiv:	
  3143                           ; 3 bytes @ 0x6
  3144                           
  3145  0026                     exception@exception:	
  3146                           ; 4 bytes @ 0x6
  3147                           
  3148  0026                     nrf24l01SetTXPipe@pipe:	
  3149                           ; 1 bytes @ 0x6
  3150                           
  3151  0026                     ___lwmod@counter:	
  3152                           ; 1 bytes @ 0x6
  3153                           
  3154  0026                     ___wmul@product:	
  3155                           ; 1 bytes @ 0x6
  3156                           
  3157  0026                     strcpy@cp:	
  3158                           ; 2 bytes @ 0x6
  3159                           
  3160  0026                     ___ftpack@arg:	
  3161                           ; 2 bytes @ 0x6
  3162                           
  3163  0026                     ___ftge@ff1:	
  3164                           ; 3 bytes @ 0x6
  3165                           
  3166  0026                     ___lldiv@divisor:	
  3167                           ; 3 bytes @ 0x6
  3168                           
  3169                           
  3170                           ; 4 bytes @ 0x6
  3171  0026                     	ds	1
  3172  0027                     ??_nrf24l01GetPipe:	
  3173  0027                     ??_nrf24l01InitRegisters:	
  3174                           ; 1 bytes @ 0x7
  3175                           
  3176                           
  3177                           ; 1 bytes @ 0x7
  3178  0027                     	ds	1
  3179  0028                     ?_nrf24l01SendPacket:	
  3180  0028                     nrf24l01GetPipe@pipe:	
  3181                           ; 1 bytes @ 0x8
  3182                           
  3183  0028                     nrf24l01InitRegisters@channel:	
  3184                           ; 1 bytes @ 0x8
  3185                           
  3186  0028                     nrf24l01SendPacket@txPacket:	
  3187                           ; 1 bytes @ 0x8
  3188                           
  3189                           
  3190                           ; 2 bytes @ 0x8
  3191  0028                     	ds	1
  3192  0029                     nrf24l01GetPipe@name:	
  3193  0029                     nrf24l01InitRegisters@setupAW:	
  3194                           ; 1 bytes @ 0x9
  3195                           
  3196  0029                     ___ftpack@exp:	
  3197                           ; 1 bytes @ 0x9
  3198                           
  3199  0029                     ___ftge@ff2:	
  3200                           ; 1 bytes @ 0x9
  3201                           
  3202                           
  3203                           ; 3 bytes @ 0x9
  3204  0029                     	ds	1
  3205  002A                     nrf24l01GetPipe@i:	
  3206  002A                     nrf24l01InitRegisters@feature:	
  3207                           ; 1 bytes @ 0xA
  3208                           
  3209  002A                     ___ftpack@sign:	
  3210                           ; 1 bytes @ 0xA
  3211                           
  3212  002A                     nrf24l01SendPacket@loopCount:	
  3213                           ; 1 bytes @ 0xA
  3214                           
  3215  002A                     ___lldiv@dividend:	
  3216                           ; 2 bytes @ 0xA
  3217                           
  3218                           
  3219                           ; 4 bytes @ 0xA
  3220  002A                     	ds	1
  3221  002B                     ?___ftadd:	
  3222  002B                     nrf24l01InitRegisters@rfSetup:	
  3223                           ; 3 bytes @ 0xB
  3224                           
  3225  002B                     ___lbtoft@c:	
  3226                           ; 1 bytes @ 0xB
  3227                           
  3228  002B                     ___lltoft@exp:	
  3229                           ; 1 bytes @ 0xB
  3230                           
  3231  002B                     ___ftadd@f1:	
  3232                           ; 1 bytes @ 0xB
  3233                           
  3234                           
  3235                           ; 3 bytes @ 0xB
  3236  002B                     	ds	1
  3237  002C                     nrf24l01InitRegisters@enAA:	
  3238                           
  3239                           ; 1 bytes @ 0xC
  3240  002C                     	ds	1
  3241  002D                     nrf24l01InitRegisters@DynPD:	
  3242                           
  3243                           ; 1 bytes @ 0xD
  3244  002D                     	ds	1
  3245  002E                     nrf24l01InitRegisters@i:	
  3246  002E                     ___ftadd@f2:	
  3247                           ; 2 bytes @ 0xE
  3248                           
  3249  002E                     ___lldiv@quotient:	
  3250                           ; 3 bytes @ 0xE
  3251                           
  3252                           
  3253                           ; 4 bytes @ 0xE
  3254  002E                     	ds	2
  3255  0030                     ??_nrf24l01Init:	
  3256                           
  3257                           ; 1 bytes @ 0x10
  3258  0030                     	ds	1
  3259  0031                     ??___ftadd:	
  3260                           
  3261                           ; 1 bytes @ 0x11
  3262  0031                     	ds	1
  3263  0032                     ___lldiv@counter:	
  3264  0032                     ___ftadd@sign:	
  3265                           ; 1 bytes @ 0x12
  3266                           
  3267                           
  3268                           ; 1 bytes @ 0x12
  3269  0032                     	ds	1
  3270  0033                     ?___llmod:	
  3271  0033                     ___ftadd@exp2:	
  3272                           ; 4 bytes @ 0x13
  3273                           
  3274  0033                     ___llmod@divisor:	
  3275                           ; 1 bytes @ 0x13
  3276                           
  3277                           
  3278                           ; 4 bytes @ 0x13
  3279  0033                     	ds	1
  3280  0034                     ___ftadd@exp1:	
  3281                           
  3282                           ; 1 bytes @ 0x14
  3283  0034                     	ds	1
  3284  0035                     ?___ftdiv:	
  3285  0035                     ?___ftsub:	
  3286                           ; 3 bytes @ 0x15
  3287                           
  3288  0035                     ___ftdiv@f2:	
  3289                           ; 3 bytes @ 0x15
  3290                           
  3291  0035                     ___ftsub@f2:	
  3292                           ; 3 bytes @ 0x15
  3293                           
  3294                           
  3295                           ; 3 bytes @ 0x15
  3296  0035                     	ds	2
  3297  0037                     ___llmod@dividend:	
  3298                           
  3299                           ; 4 bytes @ 0x17
  3300  0037                     	ds	1
  3301  0038                     ___ftdiv@f1:	
  3302  0038                     ___ftsub@f1:	
  3303                           ; 3 bytes @ 0x18
  3304                           
  3305                           
  3306                           ; 3 bytes @ 0x18
  3307  0038                     	ds	3
  3308  003B                     ??___ftdiv:	
  3309  003B                     ?_sprintf:	
  3310                           ; 1 bytes @ 0x1B
  3311                           
  3312  003B                     sprintf@f:	
  3313                           ; 2 bytes @ 0x1B
  3314                           
  3315                           
  3316                           ; 2 bytes @ 0x1B
  3317  003B                     	ds	1
  3318  003C                     ___ftdiv@cntr:	
  3319                           
  3320                           ; 1 bytes @ 0x1C
  3321  003C                     	ds	1
  3322  003D                     ___ftdiv@f3:	
  3323                           
  3324                           ; 3 bytes @ 0x1D
  3325  003D                     	ds	3
  3326  0040                     ___ftdiv@exp:	
  3327                           
  3328                           ; 1 bytes @ 0x20
  3329  0040                     	ds	1
  3330  0041                     ___ftdiv@sign:	
  3331                           
  3332                           ; 1 bytes @ 0x21
  3333  0041                     	ds	1
  3334  0042                     ?_getADCValue:	
  3335                           
  3336                           ; 3 bytes @ 0x22
  3337  0042                     	ds	3
  3338  0045                     ??_sprintf:	
  3339  0045                     ??_getADCValue:	
  3340                           ; 1 bytes @ 0x25
  3341                           
  3342                           
  3343                           ; 1 bytes @ 0x25
  3344  0045                     	ds	1
  3345  0046                     getADCValue@channel:	
  3346                           
  3347                           ; 1 bytes @ 0x26
  3348  0046                     	ds	1
  3349  0047                     getADCValue@adcLoop:	
  3350                           
  3351                           ; 1 bytes @ 0x27
  3352  0047                     	ds	1
  3353  0048                     getADCValue@adcSum:	
  3354                           
  3355                           ; 3 bytes @ 0x28
  3356  0048                     	ds	1
  3357  0049                     sprintf@flag:	
  3358                           
  3359                           ; 1 bytes @ 0x29
  3360  0049                     	ds	1
  3361  004A                     sprintf@ap:	
  3362                           
  3363                           ; 1 bytes @ 0x2A
  3364  004A                     	ds	1
  3365  004B                     ?___ftmul:	
  3366  004B                     ?___ftneg:	
  3367                           ; 3 bytes @ 0x2B
  3368                           
  3369  004B                     ___ftmul@f1:	
  3370                           ; 3 bytes @ 0x2B
  3371                           
  3372  004B                     ___ftneg@f1:	
  3373                           ; 3 bytes @ 0x2B
  3374                           
  3375  004B                     sprintf@val:	
  3376                           ; 3 bytes @ 0x2B
  3377                           
  3378                           
  3379                           ; 4 bytes @ 0x2B
  3380  004B                     	ds	3
  3381  004E                     ___ftmul@f2:	
  3382                           
  3383                           ; 3 bytes @ 0x2E
  3384  004E                     	ds	1
  3385  004F                     sprintf@sp:	
  3386                           
  3387                           ; 1 bytes @ 0x2F
  3388  004F                     	ds	1
  3389  0050                     sprintf@width:	
  3390                           
  3391                           ; 2 bytes @ 0x30
  3392  0050                     	ds	1
  3393  0051                     ___ftmul@exp:	
  3394                           
  3395                           ; 1 bytes @ 0x31
  3396  0051                     	ds	1
  3397  0052                     sprintf@prec:	
  3398  0052                     ___ftmul@f3_as_product:	
  3399                           ; 2 bytes @ 0x32
  3400                           
  3401                           
  3402                           ; 3 bytes @ 0x32
  3403  0052                     	ds	2
  3404  0054                     sprintf@c:	
  3405                           
  3406                           ; 1 bytes @ 0x34
  3407  0054                     	ds	1
  3408  0055                     ___ftmul@cntr:	
  3409                           
  3410                           ; 1 bytes @ 0x35
  3411  0055                     	ds	1
  3412  0056                     ___ftmul@sign:	
  3413                           
  3414                           ; 1 bytes @ 0x36
  3415  0056                     	ds	1
  3416  0057                     ?___fttol:	
  3417  0057                     ___fttol@f1:	
  3418                           ; 4 bytes @ 0x37
  3419                           
  3420                           
  3421                           ; 3 bytes @ 0x37
  3422  0057                     	ds	4
  3423  005B                     ___fttol@sign1:	
  3424                           
  3425                           ; 1 bytes @ 0x3B
  3426  005B                     	ds	1
  3427  005C                     ___fttol@lval:	
  3428                           
  3429                           ; 4 bytes @ 0x3C
  3430  005C                     	ds	4
  3431  0060                     ___fttol@exp1:	
  3432                           
  3433                           ; 1 bytes @ 0x40
  3434  0060                     	ds	1
  3435  0061                     strcat@cp:	
  3436                           
  3437                           ; 2 bytes @ 0x41
  3438  0061                     	ds	2
  3439  0063                     ??_main:	
  3440                           
  3441                           ; 1 bytes @ 0x43
  3442  0063                     	ds	1
  3443                           
  3444                           	psect	maintext
  3445  0EC2                     __pmaintext:	
  3446 ;;
  3447 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3448 ;;
  3449 ;; *************** function _main *****************
  3450 ;; Defined at:
  3451 ;;		line 173 in file "main.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;		None
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;  packet         33   27[BANK1 ] struct .
  3456 ;;  pipe            1   26[BANK1 ] unsigned char 
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  1    wreg      void 
  3459 ;; Registers used:
  3460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : B1F/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3467 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3468 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3469 ;;      Totals:         0       1      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3470 ;;Total ram usage:       35 bytes
  3471 ;; Hardware stack levels required when called:   15
  3472 ;; This function calls:
  3473 ;;		_EEPROMRead
  3474 ;;		_EEPROMWrite
  3475 ;;		___lbtoft
  3476 ;;		_hcsr04Init
  3477 ;;		_loop
  3478 ;;		_nrf24l01GetPipe
  3479 ;;		_nrf24l01Init
  3480 ;;		_nrf24l01SetRXPipe
  3481 ;;		_nrf24l01SetTXPipe
  3482 ;;		_sendMessage
  3483 ;;		_strcpy
  3484 ;; This function is called by:
  3485 ;;		Startup code after reset
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           
  3490                           ;psect for function _main
  3491  0EC2                     _main:	
  3492                           
  3493                           ;main.c: 177: ANSELA = 0x00;
  3494                           
  3495                           ;incstack = 0
  3496                           ; Regs used in _main: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  3497  0EC2  0023               	movlb	3	; select bank3
  3498  0EC3  018C               	clrf	12	;volatile
  3499                           
  3500                           ;main.c: 178: ANSELC = 0x00;
  3501  0EC4  018E               	clrf	14	;volatile
  3502                           
  3503                           ;main.c: 180: ODCONA = 0x00;
  3504  0EC5  0025               	movlb	5	; select bank5
  3505  0EC6  018C               	clrf	12	;volatile
  3506                           
  3507                           ;main.c: 181: ODCONC = 0x00;
  3508  0EC7  018E               	clrf	14	;volatile
  3509                           
  3510                           ;main.c: 186: INLVLA = 0x00;
  3511  0EC8  0027               	movlb	7	; select bank7
  3512  0EC9  018C               	clrf	12	;volatile
  3513                           
  3514                           ;main.c: 187: INLVLC = 0x00;
  3515  0ECA  018E               	clrf	14	;volatile
  3516                           
  3517                           ;main.c: 189: WPUA = 0x00;
  3518  0ECB  0024               	movlb	4	; select bank4
  3519  0ECC  018C               	clrf	12	;volatile
  3520                           
  3521                           ;main.c: 190: WPUC = 0x00;
  3522  0ECD  018E               	clrf	14	;volatile
  3523                           
  3524                           ;main.c: 192: TRISCbits.TRISC5 = 0;
  3525  0ECE  0021               	movlb	1	; select bank1
  3526  0ECF  128E               	bcf	14,5	;volatile
  3527                           
  3528                           ;main.c: 193: TRISCbits.TRISC4 = 0;
  3529  0ED0  120E               	bcf	14,4	;volatile
  3530                           
  3531                           ;main.c: 195: PORTCbits.RC4 = 0;
  3532  0ED1  0020               	movlb	0	; select bank0
  3533  0ED2  120E               	bcf	14,4	;volatile
  3534                           
  3535                           ;main.c: 202: INTCONbits.PEIE = 0;
  3536  0ED3  130B               	bcf	11,6	;volatile
  3537                           
  3538                           ;main.c: 203: INTCONbits.GIE = 0;
  3539  0ED4  138B               	bcf	11,7	;volatile
  3540                           
  3541                           ;main.c: 205: OSCCON1bits.NOSC = 0b000;
  3542  0ED5  308F               	movlw	-113
  3543  0ED6  0032               	movlb	18	; select bank18
  3544  0ED7  0599               	andwf	25,f	;volatile
  3545                           
  3546                           ;main.c: 206: OSCCON1bits.NDIV = 0b000;
  3547  0ED8  30F0               	movlw	-16
  3548  0ED9  0599               	andwf	25,f	;volatile
  3549                           
  3550                           ;main.c: 208: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3551  0EDA  300B               	movlw	11
  3552  0EDB  0020               	movlb	0	; select bank0
  3553  0EDC  00E3               	movwf	??_main
  3554  0EDD  3062               	movlw	98
  3555  0EDE                     u5417:	
  3556  0EDE  0B89               	decfsz	9,f
  3557  0EDF  2EDE               	goto	u5417
  3558  0EE0  0BE3               	decfsz	??_main,f
  3559  0EE1  2EDE               	goto	u5417
  3560  0EE2  0000               	nop
  3561                           
  3562                           ;main.c: 212: strcpy(romData->name, "UWT");
  3563  0EE3  0021               	movlb	1	; select bank1
  3564  0EE4  0869               	movf	_romData^(0+128),w
  3565  0EE5  3E01               	addlw	1
  3566  0EE6  00F0               	movwf	strcpy@to
  3567  0EE7  3001               	movlw	1
  3568  0EE8  00F1               	movwf	strcpy@to+1
  3569  0EE9  304F               	movlw	low (STR_6| (0+32768))
  3570  0EEA  00F2               	movwf	strcpy@from
  3571  0EEB  3090               	movlw	high (STR_6| (0+32768))
  3572  0EEC  00F3               	movwf	strcpy@from+1
  3573  0EED  3188  20DD  318E   	fcall	_strcpy
  3574                           
  3575                           ;main.c: 214: nrf24l01Init();
  3576  0EF0  3189  21AF  318E   	fcall	_nrf24l01Init
  3577                           
  3578                           ;main.c: 216: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3579  0EF3  0021               	movlb	1	; select bank1
  3580  0EF4  0869               	movf	_romData^(0+128),w
  3581  0EF5  3E01               	addlw	1
  3582  0EF6  318A  22FD  318E   	fcall	_nrf24l01GetPipe
  3583  0EF9  00FF               	movwf	127
  3584  0EFA  087F               	movf	127,w
  3585  0EFB  0021               	movlb	1	; select bank1
  3586  0EFC  00BA               	movwf	main@pipe^(0+128)
  3587                           
  3588                           ;main.c: 217: nrf24l01SetTXPipe(pipe);
  3589  0EFD  083A               	movf	main@pipe^(0+128),w
  3590  0EFE  318C  242E  318E   	fcall	_nrf24l01SetTXPipe
  3591                           
  3592                           ;main.c: 218: nrf24l01SetRXPipe(pipe);
  3593  0F01  0021               	movlb	1	; select bank1
  3594  0F02  083A               	movf	main@pipe^(0+128),w
  3595  0F03  3189  2154  318E   	fcall	_nrf24l01SetRXPipe
  3596                           
  3597                           ;main.c: 222: ADCON0bits.ADON = 0;
  3598  0F06  0021               	movlb	1	; select bank1
  3599  0F07  101D               	bcf	29,0	;volatile
  3600                           
  3601                           ;main.c: 225: PORTAbits.RA4 = 0;
  3602  0F08  0020               	movlb	0	; select bank0
  3603  0F09  120C               	bcf	12,4	;volatile
  3604                           
  3605                           ;main.c: 226: TRISAbits.TRISA4 = 1;
  3606  0F0A  0021               	movlb	1	; select bank1
  3607  0F0B  160C               	bsf	12,4	;volatile
  3608                           
  3609                           ;main.c: 227: WPUAbits.WPUA4 = 0;
  3610  0F0C  0024               	movlb	4	; select bank4
  3611  0F0D  120C               	bcf	12,4	;volatile
  3612                           
  3613                           ;main.c: 228: ODCONAbits.ODCA4 = 1;
  3614  0F0E  0025               	movlb	5	; select bank5
  3615  0F0F  160C               	bsf	12,4	;volatile
  3616                           
  3617                           ;main.c: 229: ANSELAbits.ANSA4 = 1;
  3618  0F10  0023               	movlb	3	; select bank3
  3619  0F11  160C               	bsf	12,4	;volatile
  3620                           
  3621                           ;main.c: 232: ANSELCbits.ANSC3 = 1;
  3622  0F12  158E               	bsf	14,3	;volatile
  3623                           
  3624                           ;main.c: 233: TRISCbits.TRISC3 = 1;
  3625  0F13  0021               	movlb	1	; select bank1
  3626  0F14  158E               	bsf	14,3	;volatile
  3627                           
  3628                           ;main.c: 236: FVRCONbits.TSEN = 1;
  3629  0F15  0022               	movlb	2	; select bank2
  3630  0F16  1697               	bsf	23,5	;volatile
  3631                           
  3632                           ;main.c: 237: FVRCONbits.TSRNG = 1;
  3633  0F17  1617               	bsf	23,4	;volatile
  3634                           
  3635                           ;main.c: 240: FVRCONbits.FVREN = 0;
  3636  0F18  1397               	bcf	23,7	;volatile
  3637                           
  3638                           ;main.c: 241: FVRCONbits.ADFVR = 0b10;
  3639  0F19  0817               	movf	23,w	;volatile
  3640  0F1A  39FC               	andlw	-4
  3641  0F1B  3802               	iorlw	2
  3642  0F1C  0097               	movwf	23	;volatile
  3643                           
  3644                           ;main.c: 243: ADCON1bits.ADCS = 0b111;
  3645  0F1D  3070               	movlw	112
  3646  0F1E  0021               	movlb	1	; select bank1
  3647  0F1F  049E               	iorwf	30,f	;volatile
  3648                           
  3649                           ;main.c: 244: ADCON1bits.ADFM = 1;
  3650  0F20  179E               	bsf	30,7	;volatile
  3651                           
  3652                           ;main.c: 245: ADCON1bits.ADPREF = 0b11;
  3653  0F21  3003               	movlw	3
  3654  0F22  049E               	iorwf	30,f	;volatile
  3655                           
  3656                           ;main.c: 246: ADCON1bits.ADNREF = 0b00;
  3657  0F23  111E               	bcf	30,2	;volatile
  3658                           
  3659                           ;main.c: 247: PIE1bits.ADIE = 1;
  3660  0F24  1711               	bsf	17,6	;volatile
  3661                           
  3662                           ;main.c: 250: ADCON0bits.CHS = 3;
  3663  0F25  081D               	movf	29,w	;volatile
  3664  0F26  3903               	andlw	-253
  3665  0F27  380C               	iorlw	12
  3666  0F28  009D               	movwf	29	;volatile
  3667                           
  3668                           ;main.c: 255: TRISAbits.TRISA2 = 1;
  3669  0F29  150C               	bsf	12,2	;volatile
  3670                           
  3671                           ;main.c: 256: PIE0bits.INTE = 1;
  3672  0F2A  1410               	bsf	16,0	;volatile
  3673                           
  3674                           ;main.c: 257: INTCONbits.INTEDG = 0;
  3675  0F2B  100B               	bcf	11,0	;volatile
  3676                           
  3677                           ;main.c: 260: TRISAbits.TRISA5 = 0;
  3678  0F2C  128C               	bcf	12,5	;volatile
  3679                           
  3680                           ;main.c: 261: PORTAbits.RA5 = 0;
  3681  0F2D  0020               	movlb	0	; select bank0
  3682  0F2E  128C               	bcf	12,5	;volatile
  3683                           
  3684                           ;main.c: 263: hcsr04Init();
  3685  0F2F  3188  2099  318E   	fcall	_hcsr04Init
  3686                           
  3687                           ;main.c: 266: INTCONbits.PEIE = 1;
  3688  0F32  170B               	bsf	11,6	;volatile
  3689                           
  3690                           ;main.c: 267: INTCONbits.GIE = 1;
  3691  0F33  178B               	bsf	11,7	;volatile
  3692                           
  3693                           ;main.c: 269: nrf24l01Packet_t packet;;main.c: 271: sendMessage(&packet, "BOOT3", EEPROM
      +                          Read(0));
  3694  0F34  30BB               	movlw	low main@packet
  3695  0F35  0021               	movlb	1	; select bank1
  3696  0F36  00B1               	movwf	sendMessage@packet^(0+128)
  3697  0F37  3000               	movlw	high main@packet
  3698  0F38  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  3699  0F39  3034               	movlw	low (STR_7| (0+32768))
  3700  0F3A  00B3               	movwf	sendMessage@topic^(0+128)
  3701  0F3B  3090               	movlw	high (STR_7| (0+32768))
  3702  0F3C  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  3703  0F3D  3000               	movlw	0
  3704  0F3E  00F0               	movwf	EEPROMRead@address
  3705  0F3F  00F1               	movwf	EEPROMRead@address+1
  3706  0F40  3188  203F  318E   	fcall	_EEPROMRead
  3707  0F43  3188  20C2  318E   	fcall	___lbtoft
  3708  0F46  0870               	movf	?___lbtoft,w
  3709  0F47  0021               	movlb	1	; select bank1
  3710  0F48  00B5               	movwf	sendMessage@value^(0+128)
  3711  0F49  0871               	movf	?___lbtoft+1,w
  3712  0F4A  00B6               	movwf	(sendMessage@value+1)^(0+128)
  3713  0F4B  0872               	movf	?___lbtoft+2,w
  3714  0F4C  00B7               	movwf	(sendMessage@value+2)^(0+128)
  3715  0F4D  318D  25B6  318E   	fcall	_sendMessage
  3716                           
  3717                           ;main.c: 272: EEPROMWrite(0, 0);
  3718  0F50  3000               	movlw	0
  3719  0F51  00F0               	movwf	EEPROMWrite@address
  3720  0F52  00F1               	movwf	EEPROMWrite@address+1
  3721  0F53  01F2               	clrf	EEPROMWrite@data
  3722  0F54  3189  2190  318E   	fcall	_EEPROMWrite
  3723  0F57                     l4908:	
  3724                           ;main.c: 275: while(1){
  3725                           
  3726                           
  3727                           ;main.c: 276: loop();
  3728  0F57  3184  2428  318E   	fcall	_loop
  3729  0F5A  2F57               	goto	l4908
  3730  0F5B                     __end_of_main:	
  3731                           ;main.c: 277: };main.c: 279: return;
  3732                           
  3733                           
  3734                           	psect	text1
  3735  09AF                     __ptext1:	
  3736 ;; *************** function _nrf24l01Init *****************
  3737 ;; Defined at:
  3738 ;;		line 428 in file "nrf24l01.c"
  3739 ;; Parameters:    Size  Location     Type
  3740 ;;		None
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;		None
  3743 ;; Return value:  Size  Location     Type
  3744 ;;                  1    wreg      void 
  3745 ;; Registers used:
  3746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3747 ;; Tracked objects:
  3748 ;;		On entry : 0/0
  3749 ;;		On exit  : 0/0
  3750 ;;		Unchanged: 0/0
  3751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3755 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3756 ;;Total ram usage:        1 bytes
  3757 ;; Hardware stack levels used:    1
  3758 ;; Hardware stack levels required when called:   11
  3759 ;; This function calls:
  3760 ;;		_nrf24l01InitRegisters
  3761 ;;		_nrf24l01InterfaceInit
  3762 ;; This function is called by:
  3763 ;;		_main
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           
  3768                           ;psect for function _nrf24l01Init
  3769  09AF                     _nrf24l01Init:	
  3770                           
  3771                           ;nrf24l01.c: 431: nrf24l01InterfaceInit();
  3772                           
  3773                           ;incstack = 0
  3774                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath+
      +                          cstack]
  3775  09AF  3189  2172  3189   	fcall	_nrf24l01InterfaceInit
  3776                           
  3777                           ;nrf24l01.c: 436: PORTAbits.RA0 = 0;
  3778  09B2  0020               	movlb	0	; select bank0
  3779  09B3  100C               	bcf	12,0	;volatile
  3780                           
  3781                           ;nrf24l01.c: 438: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3782  09B4  300B               	movlw	11
  3783  09B5  0020               	movlb	0	; select bank0
  3784  09B6  00B0               	movwf	??_nrf24l01Init
  3785  09B7  3062               	movlw	98
  3786  09B8                     u5427:	
  3787  09B8  0B89               	decfsz	9,f
  3788  09B9  29B8               	goto	u5427
  3789  09BA  0BB0               	decfsz	??_nrf24l01Init,f
  3790  09BB  29B8               	goto	u5427
  3791  09BC  0000               	nop
  3792                           
  3793                           ;nrf24l01.c: 440: nrf24l01InitRegisters();
  3794  09BD  3182  222B  3189   	fcall	_nrf24l01InitRegisters
  3795                           
  3796                           ;nrf24l01.c: 442: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3797  09C0  300B               	movlw	11
  3798  09C1  0020               	movlb	0	; select bank0
  3799  09C2  00B0               	movwf	??_nrf24l01Init
  3800  09C3  3062               	movlw	98
  3801  09C4                     u5437:	
  3802  09C4  0B89               	decfsz	9,f
  3803  09C5  29C4               	goto	u5437
  3804  09C6  0BB0               	decfsz	??_nrf24l01Init,f
  3805  09C7  29C4               	goto	u5437
  3806  09C8  0000               	nop
  3807                           
  3808                           ;nrf24l01.c: 444: PORTAbits.RA0 = 1;
  3809  09C9  0020               	movlb	0	; select bank0
  3810  09CA  140C               	bsf	12,0	;volatile
  3811                           
  3812                           ;nrf24l01.c: 446: status.TX = 0;
  3813  09CB  01E4               	clrf	_status	;volatile
  3814                           
  3815                           ;nrf24l01.c: 447: status.RX = 0;
  3816  09CC  01E5               	clrf	_status+1	;volatile
  3817  09CD  0008               	return
  3818  09CE                     __end_of_nrf24l01Init:	
  3819                           
  3820                           	psect	text2
  3821  0972                     __ptext2:	
  3822 ;; *************** function _nrf24l01InterfaceInit *****************
  3823 ;; Defined at:
  3824 ;;		line 9 in file "interface.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;		None
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;		None
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      void 
  3831 ;; Registers used:
  3832 ;;		wreg, status,2, status,0
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3842 ;;Total ram usage:        0 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    7
  3845 ;; This function calls:
  3846 ;;		Nothing
  3847 ;; This function is called by:
  3848 ;;		_nrf24l01Init
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852                           
  3853                           ;psect for function _nrf24l01InterfaceInit
  3854  0972                     _nrf24l01InterfaceInit:	
  3855                           
  3856                           ;interface.c: 11: TRISAbits.TRISA0 = 0;
  3857                           
  3858                           ;incstack = 0
  3859                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3860  0972  0021               	movlb	1	; select bank1
  3861  0973  100C               	bcf	12,0	;volatile
  3862                           
  3863                           ;interface.c: 12: TRISAbits.TRISA1 = 0;
  3864  0974  108C               	bcf	12,1	;volatile
  3865                           
  3866                           ;interface.c: 14: TRISCbits.TRISC1 = 1;
  3867  0975  148E               	bsf	14,1	;volatile
  3868                           
  3869                           ;interface.c: 15: TRISCbits.TRISC2 = 0;
  3870  0976  110E               	bcf	14,2	;volatile
  3871                           
  3872                           ;interface.c: 16: TRISCbits.TRISC0 = 0;
  3873  0977  100E               	bcf	14,0	;volatile
  3874                           
  3875                           ;interface.c: 18: SSP1CON1bits.SSPEN = 0;
  3876  0978  0024               	movlb	4	; select bank4
  3877  0979  1295               	bcf	21,5	;volatile
  3878                           
  3879                           ;interface.c: 20: RC1PPSbits.RC1PPS = 0b10001;
  3880  097A  003D               	movlb	29	; select bank29
  3881  097B  0821               	movf	33,w	;volatile
  3882  097C  39E0               	andlw	-32
  3883  097D  3811               	iorlw	17
  3884  097E  00A1               	movwf	33	;volatile
  3885                           
  3886                           ;interface.c: 21: RC2PPSbits.RC2PPS = 0b11001;
  3887  097F  0822               	movf	34,w	;volatile
  3888  0980  39E0               	andlw	-32
  3889  0981  3819               	iorlw	25
  3890  0982  00A2               	movwf	34	;volatile
  3891                           
  3892                           ;interface.c: 22: RC0PPSbits.RC0PPS = 0b11000;
  3893  0983  0820               	movf	32,w	;volatile
  3894  0984  39E0               	andlw	-32
  3895  0985  3818               	iorlw	24
  3896  0986  00A0               	movwf	32	;volatile
  3897                           
  3898                           ;interface.c: 24: SSP1CON1bits.CKP = 0;
  3899  0987  0024               	movlb	4	; select bank4
  3900  0988  1215               	bcf	21,4	;volatile
  3901                           
  3902                           ;interface.c: 25: SSP1STATbits.CKE = 1;
  3903  0989  1714               	bsf	20,6	;volatile
  3904                           
  3905                           ;interface.c: 26: SSP1CON1bits.SSPM = 0b0001;
  3906  098A  0815               	movf	21,w	;volatile
  3907  098B  39F0               	andlw	-16
  3908  098C  3801               	iorlw	1
  3909  098D  0095               	movwf	21	;volatile
  3910                           
  3911                           ;interface.c: 28: SSP1CON1bits.SSPEN = 1;
  3912  098E  1695               	bsf	21,5	;volatile
  3913  098F  0008               	return
  3914  0990                     __end_of_nrf24l01InterfaceInit:	
  3915                           
  3916                           	psect	text3
  3917  022B                     __ptext3:	
  3918 ;; *************** function _nrf24l01InitRegisters *****************
  3919 ;; Defined at:
  3920 ;;		line 327 in file "nrf24l01.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;		None
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;  i               2   14[BANK0 ] unsigned int 
  3925 ;;  DynPD           1   13[BANK0 ] struct .
  3926 ;;  enAA            1   12[BANK0 ] struct .
  3927 ;;  rfSetup         1   11[BANK0 ] struct .
  3928 ;;  feature         1   10[BANK0 ] struct .
  3929 ;;  setupAW         1    9[BANK0 ] struct .
  3930 ;;  channel         1    8[BANK0 ] struct .
  3931 ;; Return value:  Size  Location     Type
  3932 ;;                  1    wreg      void 
  3933 ;; Registers used:
  3934 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  3935 ;; Tracked objects:
  3936 ;;		On entry : 0/0
  3937 ;;		On exit  : 0/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3941 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3943 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3944 ;;Total ram usage:        9 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:   10
  3947 ;; This function calls:
  3948 ;;		___bmul
  3949 ;;		_nrf24l01SPIEnd
  3950 ;;		_nrf24l01SPISend
  3951 ;;		_nrf24l01SPIStart
  3952 ;;		_nrf24l01Send
  3953 ;;		_nrf24l01SetRXPipe
  3954 ;;		_nrf24l01SetTXPipe
  3955 ;; This function is called by:
  3956 ;;		_nrf24l01Init
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           
  3961                           ;psect for function _nrf24l01InitRegisters
  3962  022B                     _nrf24l01InitRegisters:	
  3963                           
  3964                           ;nrf24l01.c: 329: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3965                           
  3966                           ;incstack = 0
  3967                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+1
      +                          1+pclath+cstack]
  3968  022B  3000               	movlw	0
  3969  022C  001E               	movwi fsr1++
  3970  022D  3000               	movlw	0
  3971  022E  3188  2086  3182   	fcall	_nrf24l01Send
  3972  0231  00FF               	movwf	127
  3973  0232  087F               	movf	127,w
  3974  0233  0020               	movlb	0	; select bank0
  3975  0234  00E7               	movwf	_status+3	;volatile
  3976                           
  3977                           ;nrf24l01.c: 331: status.configRegister.PWR_UP = 0;
  3978  0235  10E7               	bcf	_status+3,1	;volatile
  3979                           
  3980                           ;nrf24l01.c: 332: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3981  0236  0867               	movf	_status+3,w	;volatile
  3982  0237  001E               	movwi fsr1++
  3983  0238  3020               	movlw	32
  3984  0239  3188  2086  3182   	fcall	_nrf24l01Send
  3985                           
  3986                           ;nrf24l01.c: 334: n_SETUP_AW_t setupAW;;nrf24l01.c: 335: setupAW.byte = 0x00;
  3987  023C  0020               	movlb	0	; select bank0
  3988  023D  01A9               	clrf	nrf24l01InitRegisters@setupAW
  3989                           
  3990                           ;nrf24l01.c: 336: setupAW.AW = 0b11;
  3991  023E  3003               	movlw	3
  3992  023F  04A9               	iorwf	nrf24l01InitRegisters@setupAW,f
  3993                           
  3994                           ;nrf24l01.c: 337: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3995  0240  0829               	movf	nrf24l01InitRegisters@setupAW,w
  3996  0241  001E               	movwi fsr1++
  3997  0242  3023               	movlw	35
  3998  0243  3188  2086  3182   	fcall	_nrf24l01Send
  3999                           
  4000                           ;nrf24l01.c: 340: n_RF_CH_t channel;;nrf24l01.c: 341: channel.RF_CH = 2;
  4001  0246  0020               	movlb	0	; select bank0
  4002  0247  0828               	movf	nrf24l01InitRegisters@channel,w
  4003  0248  3980               	andlw	-128
  4004  0249  3802               	iorlw	2
  4005  024A  00A8               	movwf	nrf24l01InitRegisters@channel
  4006                           
  4007                           ;nrf24l01.c: 342: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  4008  024B  0828               	movf	nrf24l01InitRegisters@channel,w
  4009  024C  001E               	movwi fsr1++
  4010  024D  3025               	movlw	37
  4011  024E  3188  2086  3182   	fcall	_nrf24l01Send
  4012                           
  4013                           ;nrf24l01.c: 345: n_RF_SETUP_t rfSetup;;nrf24l01.c: 346: rfSetup.byte = 0x00;
  4014  0251  0020               	movlb	0	; select bank0
  4015  0252  01AB               	clrf	nrf24l01InitRegisters@rfSetup
  4016                           
  4017                           ;nrf24l01.c: 347: rfSetup.RF_DR_LOW = 0;
  4018  0253  12AB               	bcf	nrf24l01InitRegisters@rfSetup,5
  4019                           
  4020                           ;nrf24l01.c: 348: rfSetup.RF_DR_HIGH = 1;
  4021  0254  15AB               	bsf	nrf24l01InitRegisters@rfSetup,3
  4022                           
  4023                           ;nrf24l01.c: 349: rfSetup.RF_PWR = 3;
  4024  0255  3006               	movlw	6
  4025  0256  04AB               	iorwf	nrf24l01InitRegisters@rfSetup,f
  4026                           
  4027                           ;nrf24l01.c: 350: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  4028  0257  082B               	movf	nrf24l01InitRegisters@rfSetup,w
  4029  0258  001E               	movwi fsr1++
  4030  0259  3026               	movlw	38
  4031  025A  3188  2086  3182   	fcall	_nrf24l01Send
  4032                           
  4033                           ;nrf24l01.c: 353: nrf24l01SetRXPipe(0xFF);
  4034  025D  30FF               	movlw	255
  4035  025E  3189  2154  3182   	fcall	_nrf24l01SetRXPipe
  4036                           
  4037                           ;nrf24l01.c: 356: n_EN_AA_t enAA;;nrf24l01.c: 357: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  4038  0261  3000               	movlw	0
  4039  0262  001E               	movwi fsr1++
  4040  0263  3001               	movlw	1
  4041  0264  3188  2086  3182   	fcall	_nrf24l01Send
  4042  0267  00FF               	movwf	127
  4043  0268  087F               	movf	127,w
  4044  0269  0020               	movlb	0	; select bank0
  4045  026A  00AC               	movwf	nrf24l01InitRegisters@enAA
  4046                           
  4047                           ;nrf24l01.c: 358: enAA.ENAA_P0 = 0;
  4048  026B  102C               	bcf	nrf24l01InitRegisters@enAA,0
  4049                           
  4050                           ;nrf24l01.c: 359: enAA.ENAA_P1 = 0;
  4051  026C  10AC               	bcf	nrf24l01InitRegisters@enAA,1
  4052                           
  4053                           ;nrf24l01.c: 360: enAA.ENAA_P2 = 0;
  4054  026D  112C               	bcf	nrf24l01InitRegisters@enAA,2
  4055                           
  4056                           ;nrf24l01.c: 361: enAA.ENAA_P3 = 0;
  4057  026E  11AC               	bcf	nrf24l01InitRegisters@enAA,3
  4058                           
  4059                           ;nrf24l01.c: 362: enAA.ENAA_P4 = 0;
  4060  026F  122C               	bcf	nrf24l01InitRegisters@enAA,4
  4061                           
  4062                           ;nrf24l01.c: 363: enAA.ENAA_P5 = 0;
  4063  0270  12AC               	bcf	nrf24l01InitRegisters@enAA,5
  4064                           
  4065                           ;nrf24l01.c: 364: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  4066  0271  082C               	movf	nrf24l01InitRegisters@enAA,w
  4067  0272  001E               	movwi fsr1++
  4068  0273  3021               	movlw	33
  4069  0274  3188  2086  3182   	fcall	_nrf24l01Send
  4070                           
  4071                           ;nrf24l01.c: 368: n_FEATURE_t feature;;nrf24l01.c: 369: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  4072  0277  3000               	movlw	0
  4073  0278  001E               	movwi fsr1++
  4074  0279  301D               	movlw	29
  4075  027A  3188  2086  3182   	fcall	_nrf24l01Send
  4076  027D  00FF               	movwf	127
  4077  027E  087F               	movf	127,w
  4078  027F  0020               	movlb	0	; select bank0
  4079  0280  00AA               	movwf	nrf24l01InitRegisters@feature
  4080                           
  4081                           ;nrf24l01.c: 370: feature.EN_DPL = 1;
  4082  0281  152A               	bsf	nrf24l01InitRegisters@feature,2
  4083                           
  4084                           ;nrf24l01.c: 371: feature.EN_DYN_ACK = 1;
  4085  0282  142A               	bsf	nrf24l01InitRegisters@feature,0
  4086                           
  4087                           ;nrf24l01.c: 372: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  4088  0283  082A               	movf	nrf24l01InitRegisters@feature,w
  4089  0284  001E               	movwi fsr1++
  4090  0285  303D               	movlw	61
  4091  0286  3188  2086  3182   	fcall	_nrf24l01Send
  4092                           
  4093                           ;nrf24l01.c: 374: n_DYNPD_t DynPD;;nrf24l01.c: 375: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  4094  0289  3000               	movlw	0
  4095  028A  001E               	movwi fsr1++
  4096  028B  301C               	movlw	28
  4097  028C  3188  2086  3182   	fcall	_nrf24l01Send
  4098  028F  00FF               	movwf	127
  4099  0290  087F               	movf	127,w
  4100  0291  0020               	movlb	0	; select bank0
  4101  0292  00AD               	movwf	nrf24l01InitRegisters@DynPD
  4102                           
  4103                           ;nrf24l01.c: 376: DynPD.DPL_P0 = 1;
  4104  0293  142D               	bsf	nrf24l01InitRegisters@DynPD,0
  4105                           
  4106                           ;nrf24l01.c: 377: DynPD.DPL_P1 = 1;
  4107  0294  14AD               	bsf	nrf24l01InitRegisters@DynPD,1
  4108                           
  4109                           ;nrf24l01.c: 378: DynPD.DPL_P2 = 1;
  4110  0295  152D               	bsf	nrf24l01InitRegisters@DynPD,2
  4111                           
  4112                           ;nrf24l01.c: 379: DynPD.DPL_P3 = 1;
  4113  0296  15AD               	bsf	nrf24l01InitRegisters@DynPD,3
  4114                           
  4115                           ;nrf24l01.c: 380: DynPD.DPL_P4 = 1;
  4116  0297  162D               	bsf	nrf24l01InitRegisters@DynPD,4
  4117                           
  4118                           ;nrf24l01.c: 381: DynPD.DPL_P5 = 1;
  4119  0298  16AD               	bsf	nrf24l01InitRegisters@DynPD,5
  4120                           
  4121                           ;nrf24l01.c: 382: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  4122  0299  082D               	movf	nrf24l01InitRegisters@DynPD,w
  4123  029A  001E               	movwi fsr1++
  4124  029B  303C               	movlw	60
  4125  029C  3188  2086  3182   	fcall	_nrf24l01Send
  4126                           
  4127                           ;nrf24l01.c: 385: unsigned int i;;nrf24l01.c: 386: for (i = 0; i < 6; i++){
  4128  029F  0020               	movlb	0	; select bank0
  4129  02A0  01AE               	clrf	nrf24l01InitRegisters@i
  4130  02A1  01AF               	clrf	nrf24l01InitRegisters@i+1
  4131  02A2  3000               	movlw	0
  4132  02A3  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4133  02A4  3006               	movlw	6
  4134  02A5  1903               	skipnz
  4135  02A6  022E               	subwf	nrf24l01InitRegisters@i,w
  4136  02A7  1803               	btfsc	3,0
  4137  02A8  2B02               	goto	l4648
  4138  02A9                     l4632:	
  4139                           
  4140                           ;nrf24l01.c: 388: nrf24l01SPIStart();
  4141  02A9  3188  2036  3182   	fcall	_nrf24l01SPIStart
  4142                           
  4143                           ;nrf24l01.c: 389: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  4144  02AC  0020               	movlb	0	; select bank0
  4145  02AD  082E               	movf	nrf24l01InitRegisters@i,w
  4146  02AE  3E0A               	addlw	10
  4147  02AF  3820               	iorlw	32
  4148  02B0  3188  2066  3182   	fcall	_nrf24l01SPISend
  4149                           
  4150                           ;nrf24l01.c: 391: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  4151  02B3  3044               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4152  02B4  0084               	movwf	4
  4153  02B5  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4154  02B6  0085               	movwf	5
  4155  02B7  0800               	movf	0,w	;code access
  4156  02B8  0020               	movlb	0	; select bank0
  4157  02B9  00A7               	movwf	??_nrf24l01InitRegisters
  4158  02BA  082E               	movf	nrf24l01InitRegisters@i,w
  4159  02BB  00FF               	movwf	127
  4160  02BC  087F               	movf	127,w
  4161  02BD  00F0               	movwf	___bmul@multiplicand
  4162  02BE  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4163  02BF  0084               	movwf	4
  4164  02C0  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4165  02C1  0085               	movwf	5
  4166  02C2  0800               	movf	0,w	;code access
  4167  02C3  3188  2075  3182   	fcall	___bmul
  4168  02C6  0020               	movlb	0	; select bank0
  4169  02C7  0727               	addwf	??_nrf24l01InitRegisters,w
  4170  02C8  3188  2066  3182   	fcall	_nrf24l01SPISend
  4171                           
  4172                           ;nrf24l01.c: 393: if (i < 2){
  4173  02CB  3000               	movlw	0
  4174  02CC  0020               	movlb	0	; select bank0
  4175  02CD  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4176  02CE  3002               	movlw	2
  4177  02CF  1903               	skipnz
  4178  02D0  022E               	subwf	nrf24l01InitRegisters@i,w
  4179  02D1  1803               	skipnc
  4180  02D2  2AF3               	goto	l4642
  4181                           
  4182                           ;nrf24l01.c: 394: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4183  02D3  3043               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4184  02D4  0084               	movwf	4
  4185  02D5  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4186  02D6  0085               	movwf	5
  4187  02D7  0800               	movf	0,w	;code access
  4188  02D8  3188  2066  3182   	fcall	_nrf24l01SPISend
  4189                           
  4190                           ;nrf24l01.c: 395: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4191  02DB  3042               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4192  02DC  0084               	movwf	4
  4193  02DD  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4194  02DE  0085               	movwf	5
  4195  02DF  0800               	movf	0,w	;code access
  4196  02E0  3188  2066  3182   	fcall	_nrf24l01SPISend
  4197                           
  4198                           ;nrf24l01.c: 396: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4199  02E3  3041               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4200  02E4  0084               	movwf	4
  4201  02E5  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4202  02E6  0085               	movwf	5
  4203  02E7  0800               	movf	0,w	;code access
  4204  02E8  3188  2066  3182   	fcall	_nrf24l01SPISend
  4205                           
  4206                           ;nrf24l01.c: 397: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4207  02EB  3040               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4208  02EC  0084               	movwf	4
  4209  02ED  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4210  02EE  0085               	movwf	5
  4211  02EF  0800               	movf	0,w	;code access
  4212  02F0  3188  2066  3182   	fcall	_nrf24l01SPISend
  4213  02F3                     l4642:	
  4214                           
  4215                           ;nrf24l01.c: 398: };nrf24l01.c: 400: nrf24l01SPIEnd();
  4216  02F3  3188  202D  3182   	fcall	_nrf24l01SPIEnd
  4217  02F6  3001               	movlw	1
  4218  02F7  0020               	movlb	0	; select bank0
  4219  02F8  07AE               	addwf	nrf24l01InitRegisters@i,f
  4220  02F9  3000               	movlw	0
  4221  02FA  3DAF               	addwfc	nrf24l01InitRegisters@i+1,f
  4222  02FB  3000               	movlw	0
  4223  02FC  022F               	subwf	nrf24l01InitRegisters@i+1,w
  4224  02FD  3006               	movlw	6
  4225  02FE  1903               	skipnz
  4226  02FF  022E               	subwf	nrf24l01InitRegisters@i,w
  4227  0300  1C03               	skipc
  4228  0301  2AA9               	goto	l4632
  4229  0302                     l4648:	
  4230                           
  4231                           ;nrf24l01.c: 401: };nrf24l01.c: 403: nrf24l01SetTXPipe(0);
  4232  0302  3000               	movlw	0
  4233  0303  318C  242E  3182   	fcall	_nrf24l01SetTXPipe
  4234                           
  4235                           ;nrf24l01.c: 407: status.statusRegister.byte = 0x00;
  4236  0306  0020               	movlb	0	; select bank0
  4237  0307  01E6               	clrf	_status+2	;volatile
  4238                           
  4239                           ;nrf24l01.c: 408: status.statusRegister.RX_DR = 1;
  4240  0308  1766               	bsf	_status+2,6	;volatile
  4241                           
  4242                           ;nrf24l01.c: 409: status.statusRegister.TX_DS = 1;
  4243  0309  16E6               	bsf	_status+2,5	;volatile
  4244                           
  4245                           ;nrf24l01.c: 410: status.statusRegister.MAX_RT = 1;
  4246  030A  1666               	bsf	_status+2,4	;volatile
  4247                           
  4248                           ;nrf24l01.c: 411: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  4249  030B  0866               	movf	_status+2,w	;volatile
  4250  030C  001E               	movwi fsr1++
  4251  030D  3027               	movlw	39
  4252  030E  3188  2086  3182   	fcall	_nrf24l01Send
  4253                           
  4254                           ;nrf24l01.c: 413: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  4255  0311  3000               	movlw	0
  4256  0312  001E               	movwi fsr1++
  4257  0313  3007               	movlw	7
  4258  0314  3188  2086  3182   	fcall	_nrf24l01Send
  4259  0317  00FF               	movwf	127
  4260  0318  087F               	movf	127,w
  4261  0319  0020               	movlb	0	; select bank0
  4262  031A  00E6               	movwf	_status+2	;volatile
  4263                           
  4264                           ;nrf24l01.c: 416: nrf24l01Send((unsigned) 0b11100001, 0);
  4265  031B  3000               	movlw	0
  4266  031C  001E               	movwi fsr1++
  4267  031D  30E1               	movlw	225
  4268  031E  3188  2086  3182   	fcall	_nrf24l01Send
  4269                           
  4270                           ;nrf24l01.c: 417: nrf24l01Send((unsigned) 0b11100010, 0);
  4271  0321  3000               	movlw	0
  4272  0322  001E               	movwi fsr1++
  4273  0323  30E2               	movlw	226
  4274  0324  3188  2086  3182   	fcall	_nrf24l01Send
  4275                           
  4276                           ;nrf24l01.c: 420: status.configRegister.PRIM_RX = 1;
  4277  0327  0020               	movlb	0	; select bank0
  4278  0328  1467               	bsf	_status+3,0	;volatile
  4279                           
  4280                           ;nrf24l01.c: 421: status.configRegister.EN_CRC = 1;
  4281  0329  15E7               	bsf	_status+3,3	;volatile
  4282                           
  4283                           ;nrf24l01.c: 422: status.configRegister.CRCO = 1;
  4284  032A  1567               	bsf	_status+3,2	;volatile
  4285                           
  4286                           ;nrf24l01.c: 423: status.configRegister.PWR_UP = 1;
  4287  032B  14E7               	bsf	_status+3,1	;volatile
  4288                           
  4289                           ;nrf24l01.c: 424: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  4290  032C  0867               	movf	_status+3,w	;volatile
  4291  032D  001E               	movwi fsr1++
  4292  032E  3020               	movlw	32
  4293  032F  3188  2086         	fcall	_nrf24l01Send
  4294  0331  0008               	return
  4295  0332                     __end_of_nrf24l01InitRegisters:	
  4296                           
  4297                           	psect	text4
  4298  0C2E                     __ptext4:	
  4299 ;; *************** function _nrf24l01SetTXPipe *****************
  4300 ;; Defined at:
  4301 ;;		line 96 in file "nrf24l01.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  pipe            1    wreg     unsigned char 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  pipe            1    6[BANK0 ] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath, cstack
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4317 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;Total ram usage:        2 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    8
  4322 ;; This function calls:
  4323 ;;		___bmul
  4324 ;;		_nrf24l01SPIEnd
  4325 ;;		_nrf24l01SPISend
  4326 ;;		_nrf24l01SPIStart
  4327 ;; This function is called by:
  4328 ;;		_main
  4329 ;;		_nrf24l01InitRegisters
  4330 ;; This function uses a non-reentrant model
  4331 ;;
  4332                           
  4333                           
  4334                           ;psect for function _nrf24l01SetTXPipe
  4335  0C2E                     _nrf24l01SetTXPipe:	
  4336                           
  4337                           ;incstack = 0
  4338                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2+status,0+btemp+11+pc
      +                          lath+cstack]
  4339                           ;nrf24l01SetTXPipe@pipe stored from wreg
  4340  0C2E  0020               	movlb	0	; select bank0
  4341  0C2F  00A6               	movwf	nrf24l01SetTXPipe@pipe
  4342                           
  4343                           ;nrf24l01.c: 99: nrf24l01SPIStart();
  4344  0C30  3188  2036  318C   	fcall	_nrf24l01SPIStart
  4345                           
  4346                           ;nrf24l01.c: 100: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  4347  0C33  3030               	movlw	48
  4348  0C34  3188  2066  318C   	fcall	_nrf24l01SPISend
  4349                           
  4350                           ;nrf24l01.c: 101: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  4351  0C37  3044               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4352  0C38  0084               	movwf	4
  4353  0C39  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4354  0C3A  0085               	movwf	5
  4355  0C3B  0800               	movf	0,w	;code access
  4356  0C3C  00F3               	movwf	??_nrf24l01SetTXPipe
  4357  0C3D  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4358  0C3E  0084               	movwf	4
  4359  0C3F  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4360  0C40  0085               	movwf	5
  4361  0C41  0800               	movf	0,w	;code access
  4362  0C42  00FF               	movwf	127
  4363  0C43  087F               	movf	127,w
  4364  0C44  00F0               	movwf	___bmul@multiplicand
  4365  0C45  0020               	movlb	0	; select bank0
  4366  0C46  0826               	movf	nrf24l01SetTXPipe@pipe,w
  4367  0C47  3188  2075  318C   	fcall	___bmul
  4368  0C4A  0773               	addwf	??_nrf24l01SetTXPipe,w
  4369  0C4B  3188  2066  318C   	fcall	_nrf24l01SPISend
  4370                           
  4371                           ;nrf24l01.c: 102: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4372  0C4E  3043               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4373  0C4F  0084               	movwf	4
  4374  0C50  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4375  0C51  0085               	movwf	5
  4376  0C52  0800               	movf	0,w	;code access
  4377  0C53  3188  2066  318C   	fcall	_nrf24l01SPISend
  4378                           
  4379                           ;nrf24l01.c: 103: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4380  0C56  3042               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4381  0C57  0084               	movwf	4
  4382  0C58  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4383  0C59  0085               	movwf	5
  4384  0C5A  0800               	movf	0,w	;code access
  4385  0C5B  3188  2066  318C   	fcall	_nrf24l01SPISend
  4386                           
  4387                           ;nrf24l01.c: 104: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4388  0C5E  3041               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4389  0C5F  0084               	movwf	4
  4390  0C60  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4391  0C61  0085               	movwf	5
  4392  0C62  0800               	movf	0,w	;code access
  4393  0C63  3188  2066  318C   	fcall	_nrf24l01SPISend
  4394                           
  4395                           ;nrf24l01.c: 105: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4396  0C66  3040               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4397  0C67  0084               	movwf	4
  4398  0C68  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4399  0C69  0085               	movwf	5
  4400  0C6A  0800               	movf	0,w	;code access
  4401  0C6B  3188  2066  318C   	fcall	_nrf24l01SPISend
  4402                           
  4403                           ;nrf24l01.c: 106: nrf24l01SPIEnd();
  4404  0C6E  3188  202D         	fcall	_nrf24l01SPIEnd
  4405  0C70  0008               	return
  4406  0C71                     __end_of_nrf24l01SetTXPipe:	
  4407                           
  4408                           	psect	text5
  4409  0875                     __ptext5:	
  4410 ;; *************** function ___bmul *****************
  4411 ;; Defined at:
  4412 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;  multiplier      1    wreg     unsigned char 
  4415 ;;  multiplicand    1    0[COMMON] unsigned char 
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;  multiplier      1    2[COMMON] unsigned char 
  4418 ;;  product         1    1[COMMON] unsigned char 
  4419 ;; Return value:  Size  Location     Type
  4420 ;;                  1    wreg      unsigned char 
  4421 ;; Registers used:
  4422 ;;		wreg, status,2, status,0, btemp+11
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4428 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4429 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4431 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;Total ram usage:        3 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    7
  4435 ;; This function calls:
  4436 ;;		Nothing
  4437 ;; This function is called by:
  4438 ;;		_nrf24l01SetTXPipe
  4439 ;;		_nrf24l01InitRegisters
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           
  4444                           ;psect for function ___bmul
  4445  0875                     ___bmul:	
  4446                           
  4447                           ;incstack = 0
  4448                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+11]
  4449                           ;___bmul@multiplier stored from wreg
  4450  0875  00F2               	movwf	___bmul@multiplier
  4451  0876  01F1               	clrf	___bmul@product
  4452  0877                     l4082:	
  4453  0877  1C72               	btfss	___bmul@multiplier,0
  4454  0878  287D               	goto	l4086
  4455  0879  0870               	movf	___bmul@multiplicand,w
  4456  087A  00FF               	movwf	127
  4457  087B  087F               	movf	127,w
  4458  087C  07F1               	addwf	___bmul@product,f
  4459  087D                     l4086:	
  4460  087D  1003               	clrc
  4461  087E  0DF0               	rlf	___bmul@multiplicand,f
  4462  087F  1003               	clrc
  4463  0880  0CF2               	rrf	___bmul@multiplier,f
  4464  0881  0872               	movf	___bmul@multiplier,w
  4465  0882  1D03               	btfss	3,2
  4466  0883  2877               	goto	l4082
  4467  0884  0871               	movf	___bmul@product,w
  4468  0885  0008               	return
  4469  0886                     __end_of___bmul:	
  4470                           
  4471                           	psect	text6
  4472  0954                     __ptext6:	
  4473 ;; *************** function _nrf24l01SetRXPipe *****************
  4474 ;; Defined at:
  4475 ;;		line 109 in file "nrf24l01.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;  pipe            1    wreg     unsigned char 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;  pipe            1    1[COMMON] unsigned char 
  4480 ;;  enRXAddr        1    2[COMMON] struct .
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      void 
  4483 ;; Registers used:
  4484 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4494 ;;Total ram usage:        3 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:    9
  4497 ;; This function calls:
  4498 ;;		_nrf24l01Send
  4499 ;; This function is called by:
  4500 ;;		_main
  4501 ;;		_nrf24l01InitRegisters
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           
  4506                           ;psect for function _nrf24l01SetRXPipe
  4507  0954                     _nrf24l01SetRXPipe:	
  4508                           
  4509                           ;incstack = 0
  4510                           ; Regs used in _nrf24l01SetRXPipe: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath]
  4511                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4512  0954  00F1               	movwf	nrf24l01SetRXPipe@pipe
  4513                           
  4514                           ;nrf24l01.c: 111: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 113: if (pipe > 5){
  4515  0955  3006               	movlw	6
  4516  0956  0271               	subwf	nrf24l01SetRXPipe@pipe,w
  4517  0957  1C03               	skipc
  4518  0958  2960               	goto	l288
  4519                           
  4520                           ;nrf24l01.c: 114: enRXAddr.ERX_P0 = 1;
  4521  0959  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4522                           
  4523                           ;nrf24l01.c: 115: enRXAddr.ERX_P1 = 1;
  4524  095A  14F2               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4525                           
  4526                           ;nrf24l01.c: 116: enRXAddr.ERX_P2 = 1;
  4527  095B  1572               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4528                           
  4529                           ;nrf24l01.c: 117: enRXAddr.ERX_P3 = 1;
  4530  095C  15F2               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4531                           
  4532                           ;nrf24l01.c: 118: enRXAddr.ERX_P4 = 1;
  4533  095D  1672               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4534                           
  4535                           ;nrf24l01.c: 119: enRXAddr.ERX_P5 = 1;
  4536  095E  16F2               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4537                           
  4538                           ;nrf24l01.c: 120: }
  4539  095F  296C               	goto	l4322
  4540  0960                     l288:	
  4541                           
  4542                           ;nrf24l01.c: 122: else{;nrf24l01.c: 123: enRXAddr.ERX_P0 = 1;
  4543  0960  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4544                           
  4545                           ;nrf24l01.c: 124: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4546  0961  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4547  0962  00F0               	movwf	??_nrf24l01SetRXPipe
  4548  0963  0A71               	incf	nrf24l01SetRXPipe@pipe,w
  4549  0964  2966               	goto	u4874
  4550  0965                     u4875:	
  4551  0965  35F0               	lslf	??_nrf24l01SetRXPipe,f
  4552  0966                     u4874:	
  4553  0966  0B89               	decfsz	9,f
  4554  0967  2965               	goto	u4875
  4555  0968  0870               	movf	??_nrf24l01SetRXPipe,w
  4556  0969  00FF               	movwf	127
  4557  096A  087F               	movf	127,w
  4558  096B  00F2               	movwf	nrf24l01SetRXPipe@enRXAddr
  4559  096C                     l4322:	
  4560                           
  4561                           ;nrf24l01.c: 125: };nrf24l01.c: 127: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4562  096C  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4563  096D  001E               	movwi fsr1++
  4564  096E  3022               	movlw	34
  4565  096F  3188  2086         	fcall	_nrf24l01Send
  4566  0971  0008               	return
  4567  0972                     __end_of_nrf24l01SetRXPipe:	
  4568                           
  4569                           	psect	text7
  4570  0AFD                     __ptext7:	
  4571 ;; *************** function _nrf24l01GetPipe *****************
  4572 ;; Defined at:
  4573 ;;		line 161 in file "main.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  name            1    wreg     PTR unsigned char 
  4576 ;;		 -> romDataMap(28), 
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;  name            1    9[BANK0 ] PTR unsigned char 
  4579 ;;		 -> romDataMap(28), 
  4580 ;;  i               1   10[BANK0 ] unsigned char 
  4581 ;;  pipe            1    8[BANK0 ] unsigned char 
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  1    wreg      unsigned char 
  4584 ;; Registers used:
  4585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11, pclath, cstack
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4592 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4593 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4594 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4595 ;;Total ram usage:        4 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    8
  4598 ;; This function calls:
  4599 ;;		___lwmod
  4600 ;;		_strlen
  4601 ;; This function is called by:
  4602 ;;		_main
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           
  4607                           ;psect for function _nrf24l01GetPipe
  4608  0AFD                     _nrf24l01GetPipe:	
  4609                           
  4610                           ;incstack = 0
  4611                           ; Regs used in _nrf24l01GetPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+btemp
      +                          +11+pclath+cstack]
  4612                           ;nrf24l01GetPipe@name stored from wreg
  4613  0AFD  0020               	movlb	0	; select bank0
  4614  0AFE  00A9               	movwf	nrf24l01GetPipe@name
  4615                           
  4616                           ;main.c: 162: unsigned char pipe = 0;
  4617  0AFF  01A8               	clrf	nrf24l01GetPipe@pipe
  4618                           
  4619                           ;main.c: 163: unsigned char i = 0;
  4620  0B00  01AA               	clrf	nrf24l01GetPipe@i
  4621                           
  4622                           ;main.c: 166: for (i = 0; i < strlen(name); i++){
  4623  0B01  01AA               	clrf	nrf24l01GetPipe@i
  4624  0B02                     l4752:	
  4625  0B02  0829               	movf	nrf24l01GetPipe@name,w
  4626  0B03  3189  2136  318A   	fcall	_strlen
  4627  0B06  0020               	movlb	0	; select bank0
  4628  0B07  082A               	movf	nrf24l01GetPipe@i,w
  4629  0B08  00FE               	movwf	126
  4630  0B09  01FF               	clrf	127
  4631  0B0A  0875               	movf	117,w
  4632  0B0B  027F               	subwf	127,w
  4633  0B0C  1D03               	skipz
  4634  0B0D  2B10               	goto	u5285
  4635  0B0E  0874               	movf	116,w
  4636  0B0F  027E               	subwf	126,w
  4637  0B10                     u5285:	
  4638  0B10  1803               	btfsc	3,0
  4639  0B11  2B22               	goto	l4754
  4640                           
  4641                           ;main.c: 167: pipe+= name[i];
  4642  0B12  082A               	movf	nrf24l01GetPipe@i,w
  4643  0B13  0729               	addwf	nrf24l01GetPipe@name,w
  4644  0B14  00A7               	movwf	??_nrf24l01GetPipe
  4645  0B15  0827               	movf	??_nrf24l01GetPipe,w
  4646  0B16  0084               	movwf	4
  4647  0B17  3001               	movlw	1	; select bank2/3
  4648  0B18  0085               	movwf	5
  4649  0B19  0800               	movf	0,w
  4650  0B1A  00FF               	movwf	127
  4651  0B1B  087F               	movf	127,w
  4652  0B1C  07A8               	addwf	nrf24l01GetPipe@pipe,f
  4653  0B1D  3001               	movlw	1
  4654  0B1E  00FF               	movwf	127
  4655  0B1F  087F               	movf	127,w
  4656  0B20  07AA               	addwf	nrf24l01GetPipe@i,f
  4657  0B21  2B02               	goto	l4752
  4658  0B22                     l4754:	
  4659                           
  4660                           ;main.c: 168: };main.c: 170: return (unsigned) pipe % 6;
  4661  0B22  3006               	movlw	6
  4662  0B23  00F0               	movwf	___lwmod@divisor
  4663  0B24  3000               	movlw	0
  4664  0B25  00F1               	movwf	___lwmod@divisor+1
  4665  0B26  0828               	movf	nrf24l01GetPipe@pipe,w
  4666  0B27  00FE               	movwf	126
  4667  0B28  01FF               	clrf	127
  4668  0B29  087E               	movf	126,w
  4669  0B2A  00F2               	movwf	___lwmod@dividend
  4670  0B2B  087F               	movf	127,w
  4671  0B2C  00F3               	movwf	___lwmod@dividend+1
  4672  0B2D  318A  226F         	fcall	___lwmod
  4673  0B2F  0870               	movf	?___lwmod,w
  4674  0B30  0008               	return
  4675  0B31                     __end_of_nrf24l01GetPipe:	
  4676                           
  4677                           	psect	text8
  4678  0A6F                     __ptext8:	
  4679 ;; *************** function ___lwmod *****************
  4680 ;; Defined at:
  4681 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;  divisor         2    0[COMMON] unsigned int 
  4684 ;;  dividend        2    2[COMMON] unsigned int 
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;  counter         1    6[BANK0 ] unsigned char 
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  2    0[COMMON] unsigned int 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, status,0, btemp+11
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4697 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4699 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4700 ;;Total ram usage:        5 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; Hardware stack levels required when called:    7
  4703 ;; This function calls:
  4704 ;;		Nothing
  4705 ;; This function is called by:
  4706 ;;		_nrf24l01GetPipe
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           
  4711                           ;psect for function ___lwmod
  4712  0A6F                     ___lwmod:	
  4713                           
  4714                           ;incstack = 0
  4715                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+11]
  4716  0A6F  0870               	movf	___lwmod@divisor,w
  4717  0A70  0471               	iorwf	___lwmod@divisor+1,w
  4718  0A71  1903               	btfsc	3,2
  4719  0A72  2A97               	goto	l4694
  4720  0A73  0020               	movlb	0	; select bank0
  4721  0A74  01A6               	clrf	___lwmod@counter
  4722  0A75  0AA6               	incf	___lwmod@counter,f
  4723  0A76                     l4684:	
  4724  0A76  1BF1               	btfsc	___lwmod@divisor+1,7
  4725  0A77  2A82               	goto	l4686
  4726  0A78  3001               	movlw	1
  4727  0A79                     u5185:	
  4728  0A79  35F0               	lslf	___lwmod@divisor,f
  4729  0A7A  0DF1               	rlf	___lwmod@divisor+1,f
  4730  0A7B  0B89               	decfsz	9,f
  4731  0A7C  2A79               	goto	u5185
  4732  0A7D  3001               	movlw	1
  4733  0A7E  00FF               	movwf	127
  4734  0A7F  087F               	movf	127,w
  4735  0A80  07A6               	addwf	___lwmod@counter,f
  4736  0A81  2A76               	goto	l4684
  4737  0A82                     l4686:	
  4738  0A82  0871               	movf	___lwmod@divisor+1,w
  4739  0A83  0273               	subwf	___lwmod@dividend+1,w
  4740  0A84  1D03               	skipz
  4741  0A85  2A88               	goto	u5205
  4742  0A86  0870               	movf	___lwmod@divisor,w
  4743  0A87  0272               	subwf	___lwmod@dividend,w
  4744  0A88                     u5205:	
  4745  0A88  1C03               	skipc
  4746  0A89  2A8E               	goto	l4690
  4747  0A8A  0870               	movf	___lwmod@divisor,w
  4748  0A8B  02F2               	subwf	___lwmod@dividend,f
  4749  0A8C  0871               	movf	___lwmod@divisor+1,w
  4750  0A8D  3BF3               	subwfb	___lwmod@dividend+1,f
  4751  0A8E                     l4690:	
  4752  0A8E  3001               	movlw	1
  4753  0A8F                     u5215:	
  4754  0A8F  36F1               	lsrf	___lwmod@divisor+1,f
  4755  0A90  0CF0               	rrf	___lwmod@divisor,f
  4756  0A91  0B89               	decfsz	9,f
  4757  0A92  2A8F               	goto	u5215
  4758  0A93  3001               	movlw	1
  4759  0A94  02A6               	subwf	___lwmod@counter,f
  4760  0A95  1D03               	btfss	3,2
  4761  0A96  2A82               	goto	l4686
  4762  0A97                     l4694:	
  4763  0A97  0873               	movf	___lwmod@dividend+1,w
  4764  0A98  00F1               	movwf	?___lwmod+1
  4765  0A99  0872               	movf	___lwmod@dividend,w
  4766  0A9A  00F0               	movwf	?___lwmod
  4767  0A9B  0008               	return
  4768  0A9C                     __end_of___lwmod:	
  4769                           
  4770                           	psect	text9
  4771  0428                     __ptext9:	
  4772 ;; *************** function _loop *****************
  4773 ;; Defined at:
  4774 ;;		line 107 in file "main.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;		None
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;  packet         33   12[BANK4 ] struct .
  4779 ;;  ta              3    3[BANK4 ] float 
  4780 ;;  vt              3    0[BANK4 ] float 
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  1    wreg      void 
  4783 ;; Registers used:
  4784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Locals:         0       0       0       0       0      45       0       0       0       0       0       0       
      +0       0
  4792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4793 ;;      Totals:         0       0       0       0       0      45       0       0       0       0       0       0       
      +0       0
  4794 ;;Total ram usage:       45 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; Hardware stack levels required when called:   14
  4797 ;; This function calls:
  4798 ;;		___ftadd
  4799 ;;		___ftdiv
  4800 ;;		___ftmul
  4801 ;;		___ftneg
  4802 ;;		___lwtoft
  4803 ;;		_getADCValue
  4804 ;;		_sendMessage
  4805 ;; This function is called by:
  4806 ;;		_main
  4807 ;; This function uses a non-reentrant model
  4808 ;;
  4809                           
  4810                           
  4811                           ;psect for function _loop
  4812  0428                     _loop:	
  4813                           
  4814                           ;main.c: 109: nrf24l01Packet_t packet;;main.c: 117: sendMessage(&packet, "COUNT", counte
      +                          r);
  4815                           
  4816                           ;incstack = 0
  4817                           ; Regs used in _loop: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  4818  0428  302C               	movlw	low loop@packet
  4819  0429  0021               	movlb	1	; select bank1
  4820  042A  00B1               	movwf	sendMessage@packet^(0+128)
  4821  042B  3002               	movlw	high loop@packet
  4822  042C  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4823  042D  303A               	movlw	low (STR_3| (0+32768))
  4824  042E  00B3               	movwf	sendMessage@topic^(0+128)
  4825  042F  3090               	movlw	high (STR_3| (0+32768))
  4826  0430  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4827  0431  0867               	movf	(_counter+1)^(0+128),w
  4828  0432  00F1               	movwf	___lwtoft@c+1
  4829  0433  0866               	movf	_counter^(0+128),w
  4830  0434  00F0               	movwf	___lwtoft@c
  4831  0435  3188  20AD  3184   	fcall	___lwtoft
  4832  0438  0870               	movf	?___lwtoft,w
  4833  0439  0021               	movlb	1	; select bank1
  4834  043A  00B5               	movwf	sendMessage@value^(0+128)
  4835  043B  0871               	movf	?___lwtoft+1,w
  4836  043C  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4837  043D  0872               	movf	?___lwtoft+2,w
  4838  043E  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4839  043F  318D  25B6  3184   	fcall	_sendMessage
  4840                           
  4841                           ;main.c: 124: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4842  0442  30CF               	movlw	207
  4843  0443  0020               	movlb	0	; select bank0
  4844  0444  00CB               	movwf	___ftmul@f1
  4845  0445  3046               	movlw	70
  4846  0446  00CC               	movwf	___ftmul@f1+1
  4847  0447  3040               	movlw	64
  4848  0448  00CD               	movwf	___ftmul@f1+2
  4849  0449  3004               	movlw	4
  4850  044A  318F  275B  3184   	fcall	_getADCValue
  4851  044D  0020               	movlb	0	; select bank0
  4852  044E  0842               	movf	?_getADCValue,w
  4853  044F  00CE               	movwf	___ftmul@f2
  4854  0450  0843               	movf	?_getADCValue+1,w
  4855  0451  00CF               	movwf	___ftmul@f2+1
  4856  0452  0844               	movf	?_getADCValue+2,w
  4857  0453  00D0               	movwf	___ftmul@f2+2
  4858  0454  3185  25FC  3184   	fcall	___ftmul
  4859  0457  0020               	movlb	0	; select bank0
  4860  0458  084B               	movf	?___ftmul,w
  4861  0459  0024               	movlb	4	; select bank4
  4862  045A  00A6               	movwf	_loop$2273^(0+512)
  4863  045B  0020               	movlb	0	; select bank0
  4864  045C  084C               	movf	?___ftmul+1,w
  4865  045D  0024               	movlb	4	; select bank4
  4866  045E  00A7               	movwf	(_loop$2273+1)^(0+512)
  4867  045F  0020               	movlb	0	; select bank0
  4868  0460  084D               	movf	?___ftmul+2,w
  4869  0461  0024               	movlb	4	; select bank4
  4870  0462  00A8               	movwf	(_loop$2273+2)^(0+512)
  4871                           
  4872                           ;main.c: 124: sendMessage(&packet, "VBAT", getADCValue(0b000100) * 3.106382978723404);
  4873  0463  302C               	movlw	low loop@packet
  4874  0464  0021               	movlb	1	; select bank1
  4875  0465  00B1               	movwf	sendMessage@packet^(0+128)
  4876  0466  3002               	movlw	high loop@packet
  4877  0467  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  4878  0468  304A               	movlw	low (STR_4| (0+32768))
  4879  0469  00B3               	movwf	sendMessage@topic^(0+128)
  4880  046A  3090               	movlw	high (STR_4| (0+32768))
  4881  046B  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  4882  046C  0024               	movlb	4	; select bank4
  4883  046D  0826               	movf	_loop$2273^(0+512),w
  4884  046E  0021               	movlb	1	; select bank1
  4885  046F  00B5               	movwf	sendMessage@value^(0+128)
  4886  0470  0024               	movlb	4	; select bank4
  4887  0471  0827               	movf	(_loop$2273+1)^(0+512),w
  4888  0472  0021               	movlb	1	; select bank1
  4889  0473  00B6               	movwf	(sendMessage@value+1)^(0+128)
  4890  0474  0024               	movlb	4	; select bank4
  4891  0475  0828               	movf	(_loop$2273+2)^(0+512),w
  4892  0476  0021               	movlb	1	; select bank1
  4893  0477  00B7               	movwf	(sendMessage@value+2)^(0+128)
  4894  0478  318D  25B6  3184   	fcall	_sendMessage
  4895                           
  4896                           ;main.c: 136: FVRCONbits.TSEN = 1;
  4897  047B  0022               	movlb	2	; select bank2
  4898  047C  1697               	bsf	23,5	;volatile
  4899                           
  4900                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4901  047D  303D               	movlw	61
  4902  047E  318F  275B  3184   	fcall	_getADCValue
  4903  0481  0020               	movlb	0	; select bank0
  4904  0482  0842               	movf	?_getADCValue,w
  4905  0483  00CB               	movwf	___ftneg@f1
  4906  0484  0843               	movf	?_getADCValue+1,w
  4907  0485  00CC               	movwf	___ftneg@f1+1
  4908  0486  0844               	movf	?_getADCValue+2,w
  4909  0487  00CD               	movwf	___ftneg@f1+2
  4910  0488  3188  2024  3184   	fcall	___ftneg
  4911  048B  0020               	movlb	0	; select bank0
  4912  048C  084B               	movf	?___ftneg,w
  4913  048D  0024               	movlb	4	; select bank4
  4914  048E  00A9               	movwf	_loop$2274^(0+512)
  4915  048F  0020               	movlb	0	; select bank0
  4916  0490  084C               	movf	?___ftneg+1,w
  4917  0491  0024               	movlb	4	; select bank4
  4918  0492  00AA               	movwf	(_loop$2274+1)^(0+512)
  4919  0493  0020               	movlb	0	; select bank0
  4920  0494  084D               	movf	?___ftneg+2,w
  4921  0495  0024               	movlb	4	; select bank4
  4922  0496  00AB               	movwf	(_loop$2274+2)^(0+512)
  4923                           
  4924                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4925  0497  3000               	movlw	0
  4926  0498  0020               	movlb	0	; select bank0
  4927  0499  00B5               	movwf	___ftdiv@f2
  4928  049A  3000               	movlw	0
  4929  049B  00B6               	movwf	___ftdiv@f2+1
  4930  049C  3040               	movlw	64
  4931  049D  00B7               	movwf	___ftdiv@f2+2
  4932  049E  3012               	movlw	18
  4933  049F  00AB               	movwf	___ftadd@f1
  4934  04A0  3003               	movlw	3
  4935  04A1  00AC               	movwf	___ftadd@f1+1
  4936  04A2  3040               	movlw	64
  4937  04A3  00AD               	movwf	___ftadd@f1+2
  4938  04A4  0024               	movlb	4	; select bank4
  4939  04A5  0829               	movf	_loop$2274^(0+512),w
  4940  04A6  0020               	movlb	0	; select bank0
  4941  04A7  00AE               	movwf	___ftadd@f2
  4942  04A8  0024               	movlb	4	; select bank4
  4943  04A9  082A               	movf	(_loop$2274+1)^(0+512),w
  4944  04AA  0020               	movlb	0	; select bank0
  4945  04AB  00AF               	movwf	___ftadd@f2+1
  4946  04AC  0024               	movlb	4	; select bank4
  4947  04AD  082B               	movf	(_loop$2274+2)^(0+512),w
  4948  04AE  0020               	movlb	0	; select bank0
  4949  04AF  00B0               	movwf	___ftadd@f2+2
  4950  04B0  3183  2332  3184   	fcall	___ftadd
  4951  04B3  0020               	movlb	0	; select bank0
  4952  04B4  082B               	movf	?___ftadd,w
  4953  04B5  00B8               	movwf	___ftdiv@f1
  4954  04B6  082C               	movf	?___ftadd+1,w
  4955  04B7  00B9               	movwf	___ftdiv@f1+1
  4956  04B8  082D               	movf	?___ftadd+2,w
  4957  04B9  00BA               	movwf	___ftdiv@f1+2
  4958  04BA  3186  26B0  3184   	fcall	___ftdiv
  4959  04BD  0020               	movlb	0	; select bank0
  4960  04BE  0835               	movf	?___ftdiv,w
  4961  04BF  0024               	movlb	4	; select bank4
  4962  04C0  00A0               	movwf	loop@vt^(0+512)
  4963  04C1  0020               	movlb	0	; select bank0
  4964  04C2  0836               	movf	?___ftdiv+1,w
  4965  04C3  0024               	movlb	4	; select bank4
  4966  04C4  00A1               	movwf	(loop@vt+1)^(0+512)
  4967  04C5  0020               	movlb	0	; select bank0
  4968  04C6  0837               	movf	?___ftdiv+2,w
  4969  04C7  0024               	movlb	4	; select bank4
  4970  04C8  00A2               	movwf	(loop@vt+2)^(0+512)
  4971                           
  4972                           ;main.c: 138: FVRCONbits.TSEN = 0;
  4973  04C9  0022               	movlb	2	; select bank2
  4974  04CA  1297               	bcf	23,5	;volatile
  4975                           
  4976                           ;main.c: 143: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4977  04CB  30A9               	movlw	169
  4978  04CC  0020               	movlb	0	; select bank0
  4979  04CD  00AB               	movwf	___ftadd@f1
  4980  04CE  30D1               	movlw	209
  4981  04CF  00AC               	movwf	___ftadd@f1+1
  4982  04D0  3043               	movlw	67
  4983  04D1  00AD               	movwf	___ftadd@f1+2
  4984  04D2  3004               	movlw	4
  4985  04D3  00B5               	movwf	___ftdiv@f2
  4986  04D4  30AD               	movlw	173
  4987  04D5  00B6               	movwf	___ftdiv@f2+1
  4988  04D6  30BA               	movlw	186
  4989  04D7  00B7               	movwf	___ftdiv@f2+2
  4990  04D8  0024               	movlb	4	; select bank4
  4991  04D9  0820               	movf	loop@vt^(0+512),w
  4992  04DA  0020               	movlb	0	; select bank0
  4993  04DB  00B8               	movwf	___ftdiv@f1
  4994  04DC  0024               	movlb	4	; select bank4
  4995  04DD  0821               	movf	(loop@vt+1)^(0+512),w
  4996  04DE  0020               	movlb	0	; select bank0
  4997  04DF  00B9               	movwf	___ftdiv@f1+1
  4998  04E0  0024               	movlb	4	; select bank4
  4999  04E1  0822               	movf	(loop@vt+2)^(0+512),w
  5000  04E2  0020               	movlb	0	; select bank0
  5001  04E3  00BA               	movwf	___ftdiv@f1+2
  5002  04E4  3186  26B0  3184   	fcall	___ftdiv
  5003  04E7  0020               	movlb	0	; select bank0
  5004  04E8  0835               	movf	?___ftdiv,w
  5005  04E9  00AE               	movwf	___ftadd@f2
  5006  04EA  0836               	movf	?___ftdiv+1,w
  5007  04EB  00AF               	movwf	___ftadd@f2+1
  5008  04EC  0837               	movf	?___ftdiv+2,w
  5009  04ED  00B0               	movwf	___ftadd@f2+2
  5010  04EE  3183  2332  3184   	fcall	___ftadd
  5011  04F1  0020               	movlb	0	; select bank0
  5012  04F2  082B               	movf	?___ftadd,w
  5013  04F3  0024               	movlb	4	; select bank4
  5014  04F4  00A3               	movwf	loop@ta^(0+512)
  5015  04F5  0020               	movlb	0	; select bank0
  5016  04F6  082C               	movf	?___ftadd+1,w
  5017  04F7  0024               	movlb	4	; select bank4
  5018  04F8  00A4               	movwf	(loop@ta+1)^(0+512)
  5019  04F9  0020               	movlb	0	; select bank0
  5020  04FA  082D               	movf	?___ftadd+2,w
  5021  04FB  0024               	movlb	4	; select bank4
  5022  04FC  00A5               	movwf	(loop@ta+2)^(0+512)
  5023                           
  5024                           ;main.c: 145: sendMessage(&packet, "TEMP", ta);
  5025  04FD  302C               	movlw	low loop@packet
  5026  04FE  0021               	movlb	1	; select bank1
  5027  04FF  00B1               	movwf	sendMessage@packet^(0+128)
  5028  0500  3002               	movlw	high loop@packet
  5029  0501  00B2               	movwf	(sendMessage@packet+1)^(0+128)
  5030  0502  3045               	movlw	low (STR_5| (0+32768))
  5031  0503  00B3               	movwf	sendMessage@topic^(0+128)
  5032  0504  3090               	movlw	high (STR_5| (0+32768))
  5033  0505  00B4               	movwf	(sendMessage@topic^(0+128)+1)
  5034  0506  0024               	movlb	4	; select bank4
  5035  0507  0823               	movf	loop@ta^(0+512),w
  5036  0508  0021               	movlb	1	; select bank1
  5037  0509  00B5               	movwf	sendMessage@value^(0+128)
  5038  050A  0024               	movlb	4	; select bank4
  5039  050B  0824               	movf	(loop@ta+1)^(0+512),w
  5040  050C  0021               	movlb	1	; select bank1
  5041  050D  00B6               	movwf	(sendMessage@value+1)^(0+128)
  5042  050E  0024               	movlb	4	; select bank4
  5043  050F  0825               	movf	(loop@ta+2)^(0+512),w
  5044  0510  0021               	movlb	1	; select bank1
  5045  0511  00B7               	movwf	(sendMessage@value+2)^(0+128)
  5046  0512  318D  25B6         	fcall	_sendMessage
  5047  0514  0008               	return
  5048  0515                     __end_of_loop:	
  5049                           
  5050                           	psect	text10
  5051  0DB6                     __ptext10:	
  5052 ;; *************** function _sendMessage *****************
  5053 ;; Defined at:
  5054 ;;		line 87 in file "main.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;  packet          2   17[BANK1 ] PTR struct .
  5057 ;;		 -> main@packet(33), loop@packet(33), 
  5058 ;;  topic           2   19[BANK1 ] PTR const unsigned char 
  5059 ;;		 -> STR_7(6), STR_5(5), STR_4(5), STR_3(6), 
  5060 ;;  value           3   21[BANK1 ] float 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  ftoaStatus      2   24[BANK1 ] int 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  1    wreg      void 
  5065 ;; Registers used:
  5066 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5072 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5075 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5076 ;;Total ram usage:        9 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:   13
  5079 ;; This function calls:
  5080 ;;		_ftoa
  5081 ;;		_memset
  5082 ;;		_nrf24l01SendPacket
  5083 ;;		_sleepMs
  5084 ;;		_strcat
  5085 ;;		_strcpy
  5086 ;; This function is called by:
  5087 ;;		_loop
  5088 ;;		_main
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           
  5093                           ;psect for function _sendMessage
  5094  0DB6                     _sendMessage:	
  5095                           
  5096                           ;main.c: 89: int ftoaStatus;;main.c: 91: memset(packet->Message, 0, sizeof(packet->Messa
      +                          ge));
  5097                           
  5098                           ;incstack = 0
  5099                           ; Regs used in _sendMessage: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath+cstack]
  5100  0DB6  3020               	movlw	32
  5101  0DB7  001E               	movwi fsr1++
  5102  0DB8  3000               	movlw	0
  5103  0DB9  001E               	movwi fsr1++
  5104  0DBA  3000               	movlw	0
  5105  0DBB  001E               	movwi fsr1++
  5106  0DBC  001E               	movwi fsr1++
  5107  0DBD  0021               	movlb	1	; select bank1
  5108  0DBE  0831               	movf	sendMessage@packet^(0+128),w
  5109  0DBF  3E01               	addlw	1
  5110  0DC0  00FE               	movwf	126
  5111  0DC1  3000               	movlw	0
  5112  0DC2  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5113  0DC3  00FF               	movwf	127
  5114  0DC4  087E               	movf	126,w
  5115  0DC5  001E               	movwi fsr1++
  5116  0DC6  087F               	movf	127,w
  5117  0DC7  001E               	movwi fsr1++
  5118  0DC8  318A  22CB  318D   	fcall	_memset
  5119                           
  5120                           ;main.c: 92: strcpy(packet->Message, romData->name);
  5121  0DCB  0021               	movlb	1	; select bank1
  5122  0DCC  0831               	movf	sendMessage@packet^(0+128),w
  5123  0DCD  3E01               	addlw	1
  5124  0DCE  00F0               	movwf	strcpy@to
  5125  0DCF  3000               	movlw	0
  5126  0DD0  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5127  0DD1  00F1               	movwf	strcpy@to+1
  5128  0DD2  0869               	movf	_romData^(0+128),w
  5129  0DD3  3E01               	addlw	1
  5130  0DD4  00F2               	movwf	strcpy@from
  5131  0DD5  3001               	movlw	1
  5132  0DD6  00F3               	movwf	strcpy@from+1
  5133  0DD7  3188  20DD  318D   	fcall	_strcpy
  5134                           
  5135                           ;main.c: 93: strcat(packet->Message, "/");
  5136  0DDA  0021               	movlb	1	; select bank1
  5137  0DDB  0831               	movf	sendMessage@packet^(0+128),w
  5138  0DDC  3E01               	addlw	1
  5139  0DDD  00AD               	movwf	strcat@to^(0+128)
  5140  0DDE  3000               	movlw	0
  5141  0DDF  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5142  0DE0  00AE               	movwf	(strcat@to+1)^(0+128)
  5143  0DE1  3053               	movlw	low (STR_1| (0+32768))
  5144  0DE2  00AF               	movwf	strcat@from^(0+128)
  5145  0DE3  3090               	movlw	high (STR_1| (0+32768))
  5146  0DE4  00B0               	movwf	(strcat@from^(0+128)+1)
  5147  0DE5  318A  229C  318D   	fcall	_strcat
  5148                           
  5149                           ;main.c: 94: strcat(packet->Message, topic);
  5150  0DE8  0021               	movlb	1	; select bank1
  5151  0DE9  0831               	movf	sendMessage@packet^(0+128),w
  5152  0DEA  3E01               	addlw	1
  5153  0DEB  00AD               	movwf	strcat@to^(0+128)
  5154  0DEC  3000               	movlw	0
  5155  0DED  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5156  0DEE  00AE               	movwf	(strcat@to+1)^(0+128)
  5157  0DEF  0834               	movf	(sendMessage@topic+1)^(0+128),w
  5158  0DF0  00B0               	movwf	(strcat@from+1)^(0+128)
  5159  0DF1  0833               	movf	sendMessage@topic^(0+128),w
  5160  0DF2  00AF               	movwf	strcat@from^(0+128)
  5161  0DF3  318A  229C  318D   	fcall	_strcat
  5162                           
  5163                           ;main.c: 95: strcat(packet->Message, "/");
  5164  0DF6  0021               	movlb	1	; select bank1
  5165  0DF7  0831               	movf	sendMessage@packet^(0+128),w
  5166  0DF8  3E01               	addlw	1
  5167  0DF9  00AD               	movwf	strcat@to^(0+128)
  5168  0DFA  3000               	movlw	0
  5169  0DFB  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5170  0DFC  00AE               	movwf	(strcat@to+1)^(0+128)
  5171  0DFD  3053               	movlw	low (STR_1| (0+32768))
  5172  0DFE  00AF               	movwf	strcat@from^(0+128)
  5173  0DFF  3090               	movlw	high (STR_1| (0+32768))
  5174  0E00  00B0               	movwf	(strcat@from^(0+128)+1)
  5175  0E01  318A  229C  318D   	fcall	_strcat
  5176                           
  5177                           ;main.c: 96: strcat(packet->Message, ftoa(value, &ftoaStatus));
  5178  0E04  0021               	movlb	1	; select bank1
  5179  0E05  0831               	movf	sendMessage@packet^(0+128),w
  5180  0E06  3E01               	addlw	1
  5181  0E07  00AD               	movwf	strcat@to^(0+128)
  5182  0E08  3000               	movlw	0
  5183  0E09  3D32               	addwfc	(sendMessage@packet+1)^(0+128),w
  5184  0E0A  00AE               	movwf	(strcat@to+1)^(0+128)
  5185  0E0B  0835               	movf	sendMessage@value^(0+128),w
  5186  0E0C  00A0               	movwf	ftoa@f^(0+128)
  5187  0E0D  0836               	movf	(sendMessage@value+1)^(0+128),w
  5188  0E0E  00A1               	movwf	(ftoa@f+1)^(0+128)
  5189  0E0F  0837               	movf	(sendMessage@value+2)^(0+128),w
  5190  0E10  00A2               	movwf	(ftoa@f+2)^(0+128)
  5191  0E11  30B8               	movlw	(low (sendMessage@ftoaStatus| 0))& (0+255)
  5192  0E12  00FF               	movwf	127
  5193  0E13  087F               	movf	127,w
  5194  0E14  00A3               	movwf	ftoa@status^(0+128)
  5195  0E15  3185  2515  318D   	fcall	_ftoa
  5196  0E18  0021               	movlb	1	; select bank1
  5197  0E19  00AF               	movwf	strcat@from^(0+128)
  5198  0E1A  3001               	movlw	1
  5199  0E1B  00B0               	movwf	(strcat@from+1)^(0+128)
  5200  0E1C  318A  229C  318D   	fcall	_strcat
  5201                           
  5202                           ;main.c: 98: packet->packetData.byte = 0;
  5203  0E1F  0021               	movlb	1	; select bank1
  5204  0E20  0831               	movf	sendMessage@packet^(0+128),w
  5205  0E21  0084               	movwf	4
  5206  0E22  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5207  0E23  0085               	movwf	5
  5208  0E24  0180               	clrf	0
  5209                           
  5210                           ;main.c: 99: packet->packetData.ACKRequest = 0;
  5211  0E25  0831               	movf	sendMessage@packet^(0+128),w
  5212  0E26  0084               	movwf	4
  5213  0E27  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5214  0E28  0085               	movwf	5
  5215  0E29  1100               	bcf	0,2
  5216                           
  5217                           ;main.c: 101: nrf24l01SendPacket(packet);
  5218  0E2A  0832               	movf	(sendMessage@packet+1)^(0+128),w
  5219  0E2B  0020               	movlb	0	; select bank0
  5220  0E2C  00A9               	movwf	nrf24l01SendPacket@txPacket+1
  5221  0E2D  0021               	movlb	1	; select bank1
  5222  0E2E  0831               	movf	sendMessage@packet^(0+128),w
  5223  0E2F  0020               	movlb	0	; select bank0
  5224  0E30  00A8               	movwf	nrf24l01SendPacket@txPacket
  5225  0E31  318B  23EB  318D   	fcall	_nrf24l01SendPacket
  5226                           
  5227                           ;main.c: 103: sleepMs(500);
  5228  0E34  30F4               	movlw	244
  5229  0E35  00F0               	movwf	sleepMs@milliseconds
  5230  0E36  3001               	movlw	1
  5231  0E37  00F1               	movwf	sleepMs@milliseconds+1
  5232  0E38  318A  2243         	fcall	_sleepMs
  5233  0E3A  0008               	return
  5234  0E3B                     __end_of_sendMessage:	
  5235                           
  5236                           	psect	text11
  5237  0A9C                     __ptext11:	
  5238 ;; *************** function _strcat *****************
  5239 ;; Defined at:
  5240 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;  to              2   13[BANK1 ] PTR unsigned char 
  5243 ;;		 -> main@packet(33), loop@packet(33), 
  5244 ;;  from            2   15[BANK1 ] PTR const unsigned char 
  5245 ;;		 -> ftoa@buf(17), STR_7(6), STR_5(5), STR_4(5), 
  5246 ;;		 -> STR_3(6), STR_2(2), STR_1(2), 
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;  cp              2   65[BANK0 ] PTR unsigned char 
  5249 ;;		 -> main@packet(33), loop@packet(33), 
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  2   13[BANK1 ] PTR unsigned char 
  5252 ;; Registers used:
  5253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5259 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5262 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5263 ;;Total ram usage:        6 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; Hardware stack levels required when called:    7
  5266 ;; This function calls:
  5267 ;;		Nothing
  5268 ;; This function is called by:
  5269 ;;		_sendMessage
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           
  5274                           ;psect for function _strcat
  5275  0A9C                     _strcat:	
  5276                           
  5277                           ;incstack = 0
  5278                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5279  0A9C  0021               	movlb	1	; select bank1
  5280  0A9D  082E               	movf	(strcat@to+1)^(0+128),w
  5281  0A9E  0020               	movlb	0	; select bank0
  5282  0A9F  00E2               	movwf	strcat@cp+1
  5283  0AA0  0021               	movlb	1	; select bank1
  5284  0AA1  082D               	movf	strcat@to^(0+128),w
  5285  0AA2  0020               	movlb	0	; select bank0
  5286  0AA3  00E1               	movwf	strcat@cp
  5287  0AA4                     l4254:	
  5288  0AA4  0861               	movf	strcat@cp,w
  5289  0AA5  0084               	movwf	4
  5290  0AA6  0862               	movf	strcat@cp+1,w
  5291  0AA7  0085               	movwf	5
  5292  0AA8  0800               	movf	0,w
  5293  0AA9  1903               	btfsc	3,2
  5294  0AAA  2AB9               	goto	l4258
  5295  0AAB  3001               	movlw	1
  5296  0AAC  07E1               	addwf	strcat@cp,f
  5297  0AAD  3000               	movlw	0
  5298  0AAE  3DE2               	addwfc	strcat@cp+1,f
  5299  0AAF  2AA4               	goto	l4254
  5300  0AB0                     l4256:	
  5301  0AB0  3001               	movlw	1
  5302  0AB1  07E1               	addwf	strcat@cp,f
  5303  0AB2  3000               	movlw	0
  5304  0AB3  3DE2               	addwfc	strcat@cp+1,f
  5305  0AB4  3001               	movlw	1
  5306  0AB5  0021               	movlb	1	; select bank1
  5307  0AB6  07AF               	addwf	strcat@from^(0+128),f
  5308  0AB7  3000               	movlw	0
  5309  0AB8  3DB0               	addwfc	(strcat@from+1)^(0+128),f
  5310  0AB9                     l4258:	
  5311  0AB9  0021               	movlb	1	; select bank1
  5312  0ABA  082F               	movf	strcat@from^(0+128),w
  5313  0ABB  0084               	movwf	4
  5314  0ABC  0830               	movf	(strcat@from+1)^(0+128),w
  5315  0ABD  0085               	movwf	5
  5316  0ABE  0800               	movf	0,w	;code access
  5317  0ABF  00FF               	movwf	127
  5318  0AC0  0020               	movlb	0	; select bank0
  5319  0AC1  0861               	movf	strcat@cp,w
  5320  0AC2  0084               	movwf	4
  5321  0AC3  0862               	movf	strcat@cp+1,w
  5322  0AC4  0085               	movwf	5
  5323  0AC5  087F               	movf	127,w
  5324  0AC6  0080               	movwf	0
  5325  0AC7  0800               	movf	0,w
  5326  0AC8  1903               	btfsc	3,2
  5327  0AC9  0008               	return
  5328  0ACA  2AB0               	goto	l4256
  5329  0ACB                     __end_of_strcat:	
  5330                           ;	Return value of _strcat is never used
  5331                           
  5332                           
  5333                           	psect	text12
  5334  0BEB                     __ptext12:	
  5335 ;; *************** function _nrf24l01SendPacket *****************
  5336 ;; Defined at:
  5337 ;;		line 132 in file "nrf24l01.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  txPacket        2    8[BANK0 ] PTR struct .
  5340 ;;		 -> main@packet(33), loop@packet(33), 
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;  loopCount       2   10[BANK0 ] unsigned int 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      void 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5352 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5355 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5356 ;;Total ram usage:        4 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:   12
  5359 ;; This function calls:
  5360 ;;		_exception
  5361 ;;		_nrf24l01Service
  5362 ;;		_sleepMs
  5363 ;;		_strcpy
  5364 ;; This function is called by:
  5365 ;;		_sendMessage
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           
  5370                           ;psect for function _nrf24l01SendPacket
  5371  0BEB                     _nrf24l01SendPacket:	
  5372                           
  5373                           ;nrf24l01.c: 134: unsigned int loopCount = 1000;
  5374                           
  5375                           ;incstack = 0
  5376                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-bte
      +                          mp+11+pclath+cstack]
  5377  0BEB  30E8               	movlw	232
  5378  0BEC  0020               	movlb	0	; select bank0
  5379  0BED  00AA               	movwf	nrf24l01SendPacket@loopCount
  5380  0BEE  3003               	movlw	3
  5381  0BEF  00AB               	movwf	nrf24l01SendPacket@loopCount+1
  5382  0BF0                     l4292:	
  5383                           ;nrf24l01.c: 135: while (status.TX != 0){
  5384                           
  5385  0BF0  0020               	movlb	0	; select bank0
  5386  0BF1  0864               	movf	_status,w	;volatile
  5387  0BF2  1903               	btfsc	3,2
  5388  0BF3  2C0E               	goto	l4294
  5389                           
  5390                           ;nrf24l01.c: 136: sleepMs(1);
  5391  0BF4  3001               	movlw	1
  5392  0BF5  00F0               	movwf	sleepMs@milliseconds
  5393  0BF6  3000               	movlw	0
  5394  0BF7  00F1               	movwf	sleepMs@milliseconds+1
  5395  0BF8  318A  2243  318B   	fcall	_sleepMs
  5396                           
  5397                           ;nrf24l01.c: 137: nrf24l01Service();
  5398  0BFB  3187  2759  318B   	fcall	_nrf24l01Service
  5399                           
  5400                           ;nrf24l01.c: 139: if (!loopCount--){
  5401  0BFE  3001               	movlw	1
  5402  0BFF  0020               	movlb	0	; select bank0
  5403  0C00  02AA               	subwf	nrf24l01SendPacket@loopCount,f
  5404  0C01  3000               	movlw	0
  5405  0C02  3BAB               	subwfb	nrf24l01SendPacket@loopCount+1,f
  5406  0C03  0A2A               	incf	nrf24l01SendPacket@loopCount,w
  5407  0C04  1D03               	skipz
  5408  0C05  2BF0               	goto	l4292
  5409  0C06  0A2B               	incf	nrf24l01SendPacket@loopCount+1,w
  5410  0C07  1D03               	btfss	3,2
  5411  0C08  2BF0               	goto	l4292
  5412                           
  5413                           ;nrf24l01.c: 140: exception(21);
  5414  0C09  3015               	movlw	21
  5415  0C0A  3188  204B  318B   	fcall	_exception
  5416  0C0D  2BF0               	goto	l4292
  5417  0C0E                     l4294:	
  5418                           
  5419                           ;nrf24l01.c: 141: };nrf24l01.c: 142: };nrf24l01.c: 144: strcpy(TXPacket.Message, txPacke
      +                          t->Message);
  5420  0C0E  30C2               	movlw	low (_TXPacket+1)
  5421  0C0F  00F0               	movwf	strcpy@to
  5422  0C10  3001               	movlw	high (_TXPacket+1)
  5423  0C11  00F1               	movwf	strcpy@to+1
  5424  0C12  0828               	movf	nrf24l01SendPacket@txPacket,w
  5425  0C13  3E01               	addlw	1
  5426  0C14  00FE               	movwf	126
  5427  0C15  3000               	movlw	0
  5428  0C16  3D29               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5429  0C17  00FF               	movwf	127
  5430  0C18  087E               	movf	126,w
  5431  0C19  00F2               	movwf	strcpy@from
  5432  0C1A  087F               	movf	127,w
  5433  0C1B  00F3               	movwf	strcpy@from+1
  5434  0C1C  3188  20DD         	fcall	_strcpy
  5435                           
  5436                           ;nrf24l01.c: 145: TXPacket.packetData = txPacket->packetData;
  5437  0C1E  0020               	movlb	0	; select bank0
  5438  0C1F  0828               	movf	nrf24l01SendPacket@txPacket,w
  5439  0C20  0084               	movwf	4
  5440  0C21  0829               	movf	nrf24l01SendPacket@txPacket+1,w
  5441  0C22  0085               	movwf	5
  5442  0C23  0800               	movf	0,w
  5443  0C24  00FF               	movwf	127
  5444  0C25  087F               	movf	127,w
  5445  0C26  0023               	movlb	3	; select bank3
  5446  0C27  00C1               	movwf	_TXPacket^(0+384)
  5447                           
  5448                           ;nrf24l01.c: 147: status.TX = 1;
  5449  0C28  3001               	movlw	1
  5450  0C29  00FF               	movwf	127
  5451  0C2A  087F               	movf	127,w
  5452  0C2B  0020               	movlb	0	; select bank0
  5453  0C2C  00E4               	movwf	_status	;volatile
  5454  0C2D  0008               	return
  5455  0C2E                     __end_of_nrf24l01SendPacket:	
  5456                           
  5457                           	psect	text13
  5458  08DD                     __ptext13:	
  5459 ;; *************** function _strcpy *****************
  5460 ;; Defined at:
  5461 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;  to              2    0[COMMON] PTR unsigned char 
  5464 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5465 ;;  from            2    2[COMMON] PTR const unsigned char 
  5466 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), main@packet(33), 
  5467 ;;		 -> STR_6(4), loop@packet(33), romDataMap(28), 
  5468 ;; Auto vars:     Size  Location     Type
  5469 ;;  cp              2    6[BANK0 ] PTR unsigned char 
  5470 ;;		 -> TXPacket(33), main@packet(33), loop@packet(33), romDataMap(28), 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  2    0[COMMON] PTR unsigned char 
  5473 ;; Registers used:
  5474 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5480 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;Total ram usage:        6 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    7
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_sendMessage
  5491 ;;		_main
  5492 ;;		_nrf24l01SendPacket
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           
  5497                           ;psect for function _strcpy
  5498  08DD                     _strcpy:	
  5499                           
  5500                           ;incstack = 0
  5501                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5502  08DD  0871               	movf	strcpy@to+1,w
  5503  08DE  0020               	movlb	0	; select bank0
  5504  08DF  00A7               	movwf	strcpy@cp+1
  5505  08E0  0870               	movf	strcpy@to,w
  5506  08E1  00A6               	movwf	strcpy@cp
  5507  08E2                     l3932:	
  5508  08E2  0872               	movf	strcpy@from,w
  5509  08E3  0084               	movwf	4
  5510  08E4  0873               	movf	strcpy@from+1,w
  5511  08E5  0085               	movwf	5
  5512  08E6  0800               	movf	0,w	;code access
  5513  08E7  00FF               	movwf	127
  5514  08E8  0826               	movf	strcpy@cp,w
  5515  08E9  0084               	movwf	4
  5516  08EA  0827               	movf	strcpy@cp+1,w
  5517  08EB  0085               	movwf	5
  5518  08EC  087F               	movf	127,w
  5519  08ED  0080               	movwf	0
  5520  08EE  0800               	movf	0,w
  5521  08EF  1903               	btfsc	3,2
  5522  08F0  0008               	return
  5523  08F1  3001               	movlw	1
  5524  08F2  07A6               	addwf	strcpy@cp,f
  5525  08F3  3000               	movlw	0
  5526  08F4  3DA7               	addwfc	strcpy@cp+1,f
  5527  08F5  3001               	movlw	1
  5528  08F6  07F2               	addwf	strcpy@from,f
  5529  08F7  3000               	movlw	0
  5530  08F8  3DF3               	addwfc	strcpy@from+1,f
  5531  08F9  28E2               	goto	l3932
  5532  08FA                     __end_of_strcpy:	
  5533                           ;	Return value of _strcpy is never used
  5534                           
  5535                           
  5536                           	psect	text14
  5537  0759                     __ptext14:	
  5538 ;; *************** function _nrf24l01Service *****************
  5539 ;; Defined at:
  5540 ;;		line 237 in file "nrf24l01.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;		None
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;  width           1  [STACK] unsigned char 
  5545 ;;  i               1  [STACK] unsigned char 
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  1    wreg      void 
  5548 ;; Registers used:
  5549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 1C/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5559 ;;Total ram usage:        0 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; Hardware stack levels required when called:   11
  5562 ;; This function calls:
  5563 ;;		_memset
  5564 ;;		_nrf24l01SPIEnd
  5565 ;;		_nrf24l01SPISend
  5566 ;;		_nrf24l01SPIStart
  5567 ;;		_nrf24l01Send
  5568 ;;		_nrf24l01SendTXBuffer
  5569 ;;		_nrf24l01SetRXMode
  5570 ;;		_strcmp
  5571 ;; This function is called by:
  5572 ;;		_nrf24l01SendPacket
  5573 ;;		_nrf24l01ISR
  5574 ;; This function uses a reentrant model
  5575 ;;
  5576                           
  5577                           
  5578                           ;psect for function _nrf24l01Service
  5579  0759                     _nrf24l01Service:	
  5580                           
  5581                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5582  0759  3142               	addfsr 1,2
  5583                           
  5584                           ;nrf24l01.c: 239: unsigned char i;;nrf24l01.c: 241: if (status.TX == 1){
  5585                           
  5586                           ;incstack = 0
  5587 ;; hardware stack exceeded
  5588                           ; Regs used in _nrf24l01Service: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+
      +                          9+btemp+11+pclath]
  5589  075A  0020               	movlb	0	; select bank0
  5590  075B  0364               	decf	_status,w	;volatile
  5591  075C  1D03               	btfss	3,2
  5592  075D  2F64               	goto	l4496
  5593                           
  5594                           ;nrf24l01.c: 244: status.TX = 2;
  5595  075E  3002               	movlw	2
  5596  075F  00E4               	movwf	_status	;volatile
  5597                           
  5598                           ;nrf24l01.c: 245: nrf24l01SendTXBuffer(&TXPacket);
  5599  0760  30C1               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  5600  0761  318C  24B7  3187   	fcall	_nrf24l01SendTXBuffer
  5601  0764                     l4496:	
  5602                           
  5603                           ;nrf24l01.c: 246: };nrf24l01.c: 248: if (status.TX == 3){
  5604  0764  3003               	movlw	3
  5605  0765  0664               	xorwf	_status,w	;volatile
  5606  0766  1D03               	btfss	3,2
  5607  0767  2F6E               	goto	l4502
  5608                           
  5609                           ;nrf24l01.c: 249: if (!status.retryCount--){
  5610  0768  03E8               	decf	_status+4,f	;volatile
  5611  0769  0A68               	incf	_status+4,w	;volatile
  5612  076A  1D03               	btfss	3,2
  5613  076B  2F6E               	goto	l4502
  5614                           
  5615                           ;nrf24l01.c: 250: status.TX = 1;
  5616  076C  3001               	movlw	1
  5617  076D  00E4               	movwf	_status	;volatile
  5618  076E                     l4502:	
  5619                           
  5620                           ;nrf24l01.c: 251: };nrf24l01.c: 252: };nrf24l01.c: 254: if (status.RX == 1){
  5621  076E  0365               	decf	_status+1,w	;volatile
  5622  076F  1D03               	btfss	3,2
  5623  0770  2FD2               	goto	l4538
  5624                           
  5625                           ;nrf24l01.c: 257: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5626  0771  3020               	movlw	32
  5627  0772  001E               	movwi fsr1++
  5628  0773  3000               	movlw	0
  5629  0774  001E               	movwi fsr1++
  5630  0775  3000               	movlw	0
  5631  0776  001E               	movwi fsr1++
  5632  0777  001E               	movwi fsr1++
  5633  0778  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5634  0779  001E               	movwi fsr1++
  5635  077A  3001               	movlw	1
  5636  077B  001E               	movwi fsr1++
  5637  077C  318A  22CB  3187   	fcall	_memset
  5638                           
  5639                           ;nrf24l01.c: 258: RXPacket.packetData.byte = 0x00;
  5640  077F  0023               	movlb	3	; select bank3
  5641  0780  01A0               	clrf	_RXPacket^(0+384)
  5642                           
  5643                           ;nrf24l01.c: 261: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5644  0781  3000               	movlw	0
  5645  0782  001E               	movwi fsr1++
  5646  0783  3060               	movlw	96
  5647  0784  3188  2086  3187   	fcall	_nrf24l01Send
  5648                           
  5649                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5650  0787  3FFE               	movwi [-2]fsr1
  5651                           
  5652                           ;nrf24l01.c: 264: PORTAbits.RA0 = 0;
  5653  0788  0020               	movlb	0	; select bank0
  5654  0789  100C               	bcf	12,0	;volatile
  5655                           
  5656                           ;nrf24l01.c: 267: nrf24l01SPIStart();
  5657  078A  3188  2036  3187   	fcall	_nrf24l01SPIStart
  5658                           
  5659                           ;nrf24l01.c: 270: nrf24l01SPISend((unsigned) 0b01100001);
  5660  078D  3061               	movlw	97
  5661  078E  3188  2066  3187   	fcall	_nrf24l01SPISend
  5662                           
  5663                           ;nrf24l01.c: 273: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5664  0791  3000               	movlw	0
  5665  0792  3188  2066  3187   	fcall	_nrf24l01SPISend
  5666  0795  0023               	movlb	3	; select bank3
  5667  0796  00A0               	movwf	_RXPacket^(0+384)
  5668                           
  5669                           ;nrf24l01.c: 274: width--;
  5670                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5671  0797  3F7E               	moviw [-2]fsr1
  5672  0798  00F4               	movwf	116
  5673  0799  3001               	movlw	1
  5674  079A  0274               	subwf	116,w
  5675  079B  3FFE               	movwi [-2]fsr1
  5676                           
  5677                           ;nrf24l01.c: 276: for (i = 0; i < width; i++) {
  5678                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5679  079C  3000               	movlw	0
  5680  079D  3FFF               	movwi [-1]fsr1
  5681  079E                     l4526:	
  5682                           
  5683                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5684  079E  3F7F               	moviw [-1]fsr1
  5685  079F  00FF               	movwf	127
  5686                           
  5687                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5688  07A0  3F7E               	moviw [-2]fsr1
  5689  07A1  027F               	subwf	127,w
  5690  07A2  1803               	btfsc	3,0
  5691  07A3  2FB3               	goto	l4528
  5692                           
  5693                           ;nrf24l01.c: 278: RXPacket.Message[i] = nrf24l01SPISend(0);
  5694                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5695  07A4  3F7F               	moviw [-1]fsr1
  5696  07A5  3EA1               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5697  07A6  0084               	movwf	4
  5698  07A7  3001               	movlw	1	; select bank3/4
  5699  07A8  3001               	movlw	1	; select bank3/4
  5700  07A9  0085               	movwf	5
  5701  07AA  3000               	movlw	0
  5702  07AB  3188  2066  3187   	fcall	_nrf24l01SPISend
  5703  07AE  0080               	movwf	0
  5704                           
  5705                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5706  07AF  3F7F               	moviw [-1]fsr1
  5707  07B0  3E01               	addlw	1
  5708  07B1  3FFF               	movwi [-1]fsr1
  5709  07B2  2F9E               	goto	l4526
  5710  07B3                     l4528:	
  5711                           
  5712                           ;nrf24l01.c: 279: };nrf24l01.c: 282: nrf24l01SPIEnd();
  5713  07B3  3188  202D  3187   	fcall	_nrf24l01SPIEnd
  5714                           
  5715                           ;nrf24l01.c: 285: PORTAbits.RA0 = 1;
  5716  07B6  0020               	movlb	0	; select bank0
  5717  07B7  140C               	bsf	12,0	;volatile
  5718                           
  5719                           ;nrf24l01.c: 288: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5720  07B8  0C66               	rrf	_status+2,w	;volatile
  5721  07B9  3907               	andlw	7
  5722  07BA  00FF               	movwf	127
  5723  07BB  0EFF               	swapf	127,f
  5724  07BC  0023               	movlb	3	; select bank3
  5725  07BD  0820               	movf	_RXPacket^(0+384),w
  5726  07BE  067F               	xorwf	127,w
  5727  07BF  398F               	andlw	-113
  5728  07C0  067F               	xorwf	127,w
  5729  07C1  00A0               	movwf	_RXPacket^(0+384)
  5730                           
  5731                           ;nrf24l01.c: 291: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5732  07C2  3000               	movlw	0
  5733  07C3  001E               	movwi fsr1++
  5734  07C4  3009               	movlw	9
  5735  07C5  3188  2086  3187   	fcall	_nrf24l01Send
  5736  07C8  00FF               	movwf	127
  5737  07C9  0023               	movlb	3	; select bank3
  5738  07CA  0820               	movf	_RXPacket^(0+384),w
  5739  07CB  067F               	xorwf	127,w
  5740  07CC  39FE               	andlw	-2
  5741  07CD  067F               	xorwf	127,w
  5742  07CE  00A0               	movwf	_RXPacket^(0+384)
  5743                           
  5744                           ;nrf24l01.c: 293: status.RX = 2;
  5745  07CF  3002               	movlw	2
  5746  07D0  0020               	movlb	0	; select bank0
  5747  07D1  00E5               	movwf	_status+1	;volatile
  5748  07D2                     l4538:	
  5749                           
  5750                           ;nrf24l01.c: 294: };nrf24l01.c: 296: if (status.RX == 2){
  5751  07D2  3002               	movlw	2
  5752  07D3  0665               	xorwf	_status+1,w	;volatile
  5753  07D4  1D03               	btfss	3,2
  5754  07D5  2FEF               	goto	l4550
  5755                           
  5756                           ;nrf24l01.c: 299: if (RXPacket.packetData.IsACK){
  5757  07D6  0023               	movlb	3	; select bank3
  5758  07D7  1DA0               	btfss	_RXPacket^(0+384),3
  5759  07D8  2FEF               	goto	l4550
  5760                           
  5761                           ;nrf24l01.c: 301: if (status.TX == 3){
  5762  07D9  3003               	movlw	3
  5763  07DA  0020               	movlb	0	; select bank0
  5764  07DB  0664               	xorwf	_status,w	;volatile
  5765  07DC  1D03               	btfss	3,2
  5766  07DD  2FEF               	goto	l4550
  5767                           
  5768                           ;nrf24l01.c: 303: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5769  07DE  30C2               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5770  07DF  001E               	movwi fsr1++
  5771  07E0  30A1               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5772  07E1  3189  21F0  3187   	fcall	_strcmp
  5773  07E4  0874               	movf	116,w
  5774  07E5  0475               	iorwf	117,w
  5775  07E6  1D03               	btfss	3,2
  5776  07E7  2FEF               	goto	l4550
  5777                           
  5778                           ;nrf24l01.c: 304: status.TX = 0;
  5779  07E8  0020               	movlb	0	; select bank0
  5780  07E9  01E4               	clrf	_status	;volatile
  5781                           
  5782                           ;nrf24l01.c: 305: status.RX = 0;
  5783  07EA  01E5               	clrf	_status+1	;volatile
  5784                           
  5785                           ;nrf24l01.c: 307: nrf24l01SetRXMode(0);
  5786  07EB  3000               	movlw	0
  5787  07EC  318B  2331  3187   	fcall	_nrf24l01SetRXMode
  5788  07EF                     l4550:	
  5789                           
  5790                           ;nrf24l01.c: 309: };nrf24l01.c: 310: };nrf24l01.c: 311: };nrf24l01.c: 312: };nrf24l01.c:
      +                           314: if (status.RX == 2){
  5791  07EF  3002               	movlw	2
  5792  07F0  0020               	movlb	0	; select bank0
  5793  07F1  0665               	xorwf	_status+1,w	;volatile
  5794  07F2  1D03               	btfss	3,2
  5795  07F3  2FFC               	goto	l332
  5796                           
  5797                           ;nrf24l01.c: 316: if (RXPacket.packetData.ACKRequest){
  5798  07F4  0023               	movlb	3	; select bank3
  5799  07F5  1D20               	btfss	_RXPacket^(0+384),2
  5800  07F6  2FFC               	goto	l332
  5801                           
  5802                           ;nrf24l01.c: 318: RXPacket.packetData.ACKRequest = 0;
  5803  07F7  1120               	bcf	_RXPacket^(0+384),2
  5804                           
  5805                           ;nrf24l01.c: 319: RXPacket.packetData.IsACK = 1;
  5806  07F8  15A0               	bsf	_RXPacket^(0+384),3
  5807                           
  5808                           ;nrf24l01.c: 321: nrf24l01SendTXBuffer(&RXPacket);
  5809  07F9  30A0               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5810  07FA  318C  24B7         	fcall	_nrf24l01SendTXBuffer
  5811  07FC                     l332:	
  5812                           
  5813                           ; _nrf24l01Service: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  5814  07FC  317E               	addfsr 1,-2
  5815  07FD  0008               	return
  5816  07FE                     __end_of_nrf24l01Service:	
  5817                           
  5818                           	psect	text15
  5819  09F0                     __ptext15:	
  5820 ;; *************** function _strcmp *****************
  5821 ;; Defined at:
  5822 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  s1              1    wreg     PTR const unsigned char 
  5825 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5826 ;;  s2              1  [STACK] PTR const unsigned char 
  5827 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  s1              1  [STACK] PTR const unsigned char 
  5830 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5831 ;;  r               1  [STACK] char 
  5832 ;; Return value:  Size  Location     Type
  5833 ;;                  2  [STACK] int 
  5834 ;; Registers used:
  5835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5836 ;; Tracked objects:
  5837 ;;		On entry : 1F/0
  5838 ;;		On exit  : 0/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5845 ;;Total ram usage:        0 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; Hardware stack levels required when called:    7
  5848 ;; This function calls:
  5849 ;;		Nothing
  5850 ;; This function is called by:
  5851 ;;		_nrf24l01Service
  5852 ;; This function uses a reentrant model
  5853 ;;
  5854                           
  5855                           
  5856                           ;psect for function _strcmp
  5857  09F0                     _strcmp:	
  5858                           
  5859                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5860  09F0  3142               	addfsr 1,2
  5861                           
  5862                           ;incstack = 0
  5863 ;; hardware stack exceeded
  5864                           ; Regs used in _strcmp: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5865                           ;strcmp@s1 stored from wreg
  5866                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5867  09F1  3FFE               	movwi [-2]fsr1
  5868  09F2  2A00               	goto	l4358
  5869  09F3                     l4360:	
  5870                           
  5871                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5872  09F3  3F7E               	moviw [-2]fsr1
  5873  09F4  0084               	movwf	4
  5874  09F5  3001               	movlw	1	; select bank2/3
  5875  09F6  0085               	movwf	5
  5876  09F7  0800               	movf	0,w
  5877  09F8  1903               	btfsc	3,2
  5878  09F9  2A12               	goto	l4362
  5879                           
  5880                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5881  09FA  3F7E               	moviw [-2]fsr1
  5882  09FB  3E01               	addlw	1
  5883  09FC  3FFE               	movwi [-2]fsr1
  5884                           
  5885                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5886  09FD  3F7D               	moviw [-3]fsr1
  5887  09FE  3E01               	addlw	1
  5888  09FF  3FFD               	movwi [-3]fsr1
  5889  0A00                     l4358:	
  5890                           
  5891                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5892  0A00  3F7D               	moviw [-3]fsr1
  5893  0A01  0084               	movwf	4
  5894  0A02  3001               	movlw	1	; select bank2/3
  5895  0A03  0085               	movwf	5
  5896  0A04  0800               	movf	0,w
  5897  0A05  00FF               	movwf	127
  5898                           
  5899                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5900  0A06  3F7E               	moviw [-2]fsr1
  5901  0A07  0084               	movwf	4
  5902  0A08  3001               	movlw	1	; select bank2/3
  5903  0A09  0085               	movwf	5
  5904  0A0A  0800               	movf	0,w
  5905  0A0B  00F4               	movwf	116
  5906  0A0C  087F               	movf	127,w
  5907  0A0D  0274               	subwf	116,w
  5908                           
  5909                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5910  0A0E  3FFF               	movwi [-1]fsr1
  5911  0A0F  0889               	movf	9,f
  5912  0A10  1903               	btfsc	3,2
  5913  0A11  29F3               	goto	l4360
  5914  0A12                     l4362:	
  5915                           
  5916                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5917  0A12  3F7F               	moviw [-1]fsr1
  5918  0A13  00F4               	movwf	116
  5919  0A14  01F5               	clrf	117
  5920  0A15  1BF4               	btfsc	116,7
  5921  0A16  03F5               	decf	117,f
  5922                           
  5923                           ; _strcmp: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  5924  0A17  317D               	addfsr 1,-3
  5925  0A18  0008               	return
  5926  0A19                     __end_of_strcmp:	
  5927                           
  5928                           	psect	text16
  5929  0CB7                     __ptext16:	
  5930 ;; *************** function _nrf24l01SendTXBuffer *****************
  5931 ;; Defined at:
  5932 ;;		line 201 in file "nrf24l01.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;  packet          1    wreg     PTR struct .
  5935 ;;		 -> TXPacket(33), RXPacket(33), 
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;  packet          1  [STACK] PTR struct .
  5938 ;;		 -> TXPacket(33), RXPacket(33), 
  5939 ;;  i               1  [STACK] unsigned char 
  5940 ;;  width           1  [STACK] unsigned char 
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  1    wreg      void 
  5943 ;; Registers used:
  5944 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11, pclath
  5945 ;; Tracked objects:
  5946 ;;		On entry : 1C/0
  5947 ;;		On exit  : 1F/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;Total ram usage:        0 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:   10
  5957 ;; This function calls:
  5958 ;;		_nrf24l01SPIEnd
  5959 ;;		_nrf24l01SPISend
  5960 ;;		_nrf24l01SPIStart
  5961 ;;		_nrf24l01SetRXMode
  5962 ;;		_strlen
  5963 ;; This function is called by:
  5964 ;;		_nrf24l01Service
  5965 ;; This function uses a reentrant model
  5966 ;;
  5967                           
  5968                           
  5969                           ;psect for function _nrf24l01SendTXBuffer
  5970  0CB7                     _nrf24l01SendTXBuffer:	
  5971                           
  5972                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5973  0CB7  3143               	addfsr 1,3
  5974                           
  5975                           ;incstack = 0
  5976 ;; hardware stack exceeded
  5977                           ; Regs used in _nrf24l01SendTXBuffer: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11+
      +                          pclath]
  5978                           ;nrf24l01SendTXBuffer@packet stored from wreg
  5979                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5980  0CB8  3FFD               	movwi [-3]fsr1
  5981                           
  5982                           ;nrf24l01.c: 203: lastTXPacket = packet;
  5983                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  5984  0CB9  3F7D               	moviw [-3]fsr1
  5985  0CBA  0020               	movlb	0	; select bank0
  5986  0CBB  00E9               	movwf	_lastTXPacket
  5987                           
  5988                           ;nrf24l01.c: 205: unsigned char i;;nrf24l01.c: 208: nrf24l01SetRXMode(0);
  5989  0CBC  3000               	movlw	0
  5990  0CBD  318B  2331  318C   	fcall	_nrf24l01SetRXMode
  5991                           
  5992                           ;nrf24l01.c: 211: nrf24l01SPIStart();
  5993  0CC0  3188  2036  318C   	fcall	_nrf24l01SPIStart
  5994                           
  5995                           ;nrf24l01.c: 214: nrf24l01SPISend((unsigned) 0b10110000);
  5996  0CC3  30B0               	movlw	176
  5997  0CC4  3188  2066  318C   	fcall	_nrf24l01SPISend
  5998                           
  5999                           ;nrf24l01.c: 216: nrf24l01SPISend(lastTXPacket->packetData.byte);
  6000  0CC7  0020               	movlb	0	; select bank0
  6001  0CC8  0869               	movf	_lastTXPacket,w
  6002  0CC9  0084               	movwf	4
  6003  0CCA  3001               	movlw	1	; select bank2/3
  6004  0CCB  3001               	movlw	1	; select bank2/3
  6005  0CCC  0085               	movwf	5
  6006  0CCD  0800               	movf	0,w
  6007  0CCE  3188  2066  318C   	fcall	_nrf24l01SPISend
  6008                           
  6009                           ;nrf24l01.c: 220: unsigned char width = strlen(lastTXPacket->Message);
  6010  0CD1  0020               	movlb	0	; select bank0
  6011  0CD2  0869               	movf	_lastTXPacket,w
  6012  0CD3  3E01               	addlw	1
  6013  0CD4  3189  2136  318C   	fcall	_strlen
  6014  0CD7  0874               	movf	116,w
  6015                           
  6016                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6017  0CD8  3FFF               	movwi [-1]fsr1
  6018                           
  6019                           ;nrf24l01.c: 222: for (i = 0; i < width; i++) {
  6020                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6021  0CD9  3000               	movlw	0
  6022  0CDA  3FFE               	movwi [-2]fsr1
  6023  0CDB                     l4342:	
  6024                           
  6025                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6026  0CDB  3F7E               	moviw [-2]fsr1
  6027  0CDC  00FF               	movwf	127
  6028                           
  6029                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6030  0CDD  3F7F               	moviw [-1]fsr1
  6031  0CDE  027F               	subwf	127,w
  6032  0CDF  1803               	btfsc	3,0
  6033  0CE0  2CF2               	goto	l4344
  6034                           
  6035                           ;nrf24l01.c: 223: nrf24l01SPISend(lastTXPacket->Message[i]);
  6036                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6037  0CE1  3F7E               	moviw [-2]fsr1
  6038  0CE2  0020               	movlb	0	; select bank0
  6039  0CE3  0769               	addwf	_lastTXPacket,w
  6040  0CE4  00FF               	movwf	127
  6041  0CE5  0A7F               	incf	127,w
  6042  0CE6  0084               	movwf	4
  6043  0CE7  3001               	movlw	1	; select bank2/3
  6044  0CE8  3001               	movlw	1	; select bank2/3
  6045  0CE9  0085               	movwf	5
  6046  0CEA  0800               	movf	0,w
  6047  0CEB  3188  2066  318C   	fcall	_nrf24l01SPISend
  6048                           
  6049                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6050  0CEE  3F7E               	moviw [-2]fsr1
  6051  0CEF  3E01               	addlw	1
  6052  0CF0  3FFE               	movwi [-2]fsr1
  6053  0CF1  2CDB               	goto	l4342
  6054  0CF2                     l4344:	
  6055                           
  6056                           ;nrf24l01.c: 224: };nrf24l01.c: 227: nrf24l01SPIEnd();
  6057  0CF2  3188  202D  318C   	fcall	_nrf24l01SPIEnd
  6058                           
  6059                           ;nrf24l01.c: 230: PORTAbits.RA0 = 1;
  6060  0CF5  0020               	movlb	0	; select bank0
  6061  0CF6  140C               	bsf	12,0	;volatile
  6062                           
  6063                           ;nrf24l01.c: 231: _delay((unsigned long)((12)*(32000000/4000000.0)));
  6064  0CF7  3020               	movlw	32
  6065  0CF8                     u5447:	
  6066  0CF8  0B89               	decfsz	9,f
  6067  0CF9  2CF8               	goto	u5447
  6068                           
  6069                           ;nrf24l01.c: 232: PORTAbits.RA0 = 0;
  6070  0CFA  0020               	movlb	0	; select bank0
  6071  0CFB  100C               	bcf	12,0	;volatile
  6072                           
  6073                           ; _nrf24l01SendTXBuffer: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
  6074  0CFC  317D               	addfsr 1,-3
  6075  0CFD  0008               	return
  6076  0CFE                     __end_of_nrf24l01SendTXBuffer:	
  6077                           
  6078                           	psect	text17
  6079  0936                     __ptext17:	
  6080 ;; *************** function _strlen *****************
  6081 ;; Defined at:
  6082 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;  s               1    wreg     PTR const unsigned char 
  6085 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6086 ;;		 -> RXPacket(33), romDataMap(28), 
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;  s               1  [STACK] PTR const unsigned char 
  6089 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6090 ;;		 -> RXPacket(33), romDataMap(28), 
  6091 ;;  cp              1  [STACK] PTR const unsigned char 
  6092 ;;		 -> NULL(0), RXPacket.Message(32), TXPacket.Message(32), TXPacket(33), 
  6093 ;;		 -> RXPacket(33), romDataMap(28), 
  6094 ;; Return value:  Size  Location     Type
  6095 ;;                  2  [STACK] unsigned int 
  6096 ;; Registers used:
  6097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  6098 ;; Tracked objects:
  6099 ;;		On entry : 1F/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6107 ;;Total ram usage:        0 bytes
  6108 ;; Hardware stack levels used:    1
  6109 ;; Hardware stack levels required when called:    7
  6110 ;; This function calls:
  6111 ;;		Nothing
  6112 ;; This function is called by:
  6113 ;;		_nrf24l01GetPipe
  6114 ;;		_nrf24l01SendTXBuffer
  6115 ;; This function uses a reentrant model
  6116 ;;
  6117                           
  6118                           
  6119                           ;psect for function _strlen
  6120  0936                     _strlen:	
  6121                           
  6122                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6123  0936  3142               	addfsr 1,2
  6124                           
  6125                           ;incstack = 0
  6126 ;; hardware stack exceeded
  6127                           ; Regs used in _strlen: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  6128                           ;strlen@s stored from wreg
  6129                           ;stkvar	strlen@s @ sp[(-2)+0]
  6130  0937  3FFE               	movwi [-2]fsr1
  6131                           
  6132                           ;stkvar	strlen@s @ sp[(-2)+0]
  6133  0938  0806               	movf	6,w
  6134  0939  0084               	movwf	4
  6135  093A  0807               	movf	7,w
  6136  093B  0085               	movwf	5
  6137  093C  313E               	addfsr 0,-2
  6138                           
  6139                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6140  093D  3F00               	moviw [0]fsr0
  6141  093E  3FFF               	movwi [-1]fsr1
  6142  093F                     l3938:	
  6143                           
  6144                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6145  093F  3F7F               	moviw [-1]fsr1
  6146  0940  0084               	movwf	4
  6147  0941  3001               	movlw	1	; select bank2/3
  6148  0942  0085               	movwf	5
  6149  0943  0800               	movf	0,w
  6150  0944  1903               	btfsc	3,2
  6151  0945  294A               	goto	l3940
  6152                           
  6153                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6154  0946  3F7F               	moviw [-1]fsr1
  6155  0947  3E01               	addlw	1
  6156  0948  3FFF               	movwi [-1]fsr1
  6157  0949  293F               	goto	l3938
  6158  094A                     l3940:	
  6159                           
  6160                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6161  094A  3F7F               	moviw [-1]fsr1
  6162  094B  00FF               	movwf	127
  6163                           
  6164                           ;stkvar	strlen@s @ sp[(-2)+0]
  6165  094C  3F7E               	moviw [-2]fsr1
  6166  094D  027F               	subwf	127,w
  6167  094E  00F4               	movwf	116
  6168  094F  01F5               	clrf	117
  6169  0950  1BF4               	btfsc	116,7
  6170  0951  03F5               	decf	117,f
  6171                           
  6172                           ; _strlen: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsiz
      +                          e = 0, vargsize = 0
  6173  0952  317E               	addfsr 1,-2
  6174  0953  0008               	return
  6175  0954                     __end_of_strlen:	
  6176                           
  6177                           	psect	text18
  6178  0B31                     __ptext18:	
  6179 ;; *************** function _nrf24l01SetRXMode *****************
  6180 ;; Defined at:
  6181 ;;		line 50 in file "nrf24l01.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;  rxMode          1    wreg     unsigned char 
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;  rxMode          1  [STACK] unsigned char 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  1    wreg      void 
  6188 ;; Registers used:
  6189 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  6190 ;; Tracked objects:
  6191 ;;		On entry : 1F/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;Total ram usage:        0 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    9
  6202 ;; This function calls:
  6203 ;;		_nrf24l01Send
  6204 ;; This function is called by:
  6205 ;;		_nrf24l01ISR
  6206 ;;		_nrf24l01SendTXBuffer
  6207 ;;		_nrf24l01Service
  6208 ;; This function uses a reentrant model
  6209 ;;
  6210                           
  6211                           
  6212                           ;psect for function _nrf24l01SetRXMode
  6213  0B31                     _nrf24l01SetRXMode:	
  6214                           
  6215                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6216  0B31  3141               	addfsr 1,1
  6217                           
  6218                           ;incstack = 0
  6219 ;; hardware stack exceeded
  6220                           ; Regs used in _nrf24l01SetRXMode: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  6221                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6222                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6223  0B32  3FFF               	movwi [-1]fsr1
  6224                           
  6225                           ;nrf24l01.c: 53: if (rxMode){
  6226                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6227  0B33  3F7F               	moviw [-1]fsr1
  6228  0B34  1903               	btfsc	3,2
  6229  0B35  2B3B               	goto	l3950
  6230                           
  6231                           ;nrf24l01.c: 54: if (status.TX == 2){
  6232  0B36  3002               	movlw	2
  6233  0B37  0020               	movlb	0	; select bank0
  6234  0B38  0664               	xorwf	_status,w	;volatile
  6235  0B39  1903               	btfsc	3,2
  6236  0B3A  2B6A               	goto	l275
  6237  0B3B                     l3950:	
  6238                           
  6239                           ;nrf24l01.c: 56: };nrf24l01.c: 57: };nrf24l01.c: 60: if (!rxMode){
  6240                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6241  0B3B  3F7F               	moviw [-1]fsr1
  6242  0B3C  1D03               	btfss	3,2
  6243  0B3D  2B43               	goto	l3956
  6244                           
  6245                           ;nrf24l01.c: 61: if (status.TX == 3){
  6246  0B3E  3003               	movlw	3
  6247  0B3F  0020               	movlb	0	; select bank0
  6248  0B40  0664               	xorwf	_status,w	;volatile
  6249  0B41  1903               	btfsc	3,2
  6250  0B42  2B6A               	goto	l275
  6251  0B43                     l3956:	
  6252                           
  6253                           ;nrf24l01.c: 63: };nrf24l01.c: 64: };nrf24l01.c: 70: if (status.configRegister.PRIM_RX !
      +                          = rxMode){
  6254                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6255  0B43  3F7F               	moviw [-1]fsr1
  6256  0B44  00FF               	movwf	127
  6257  0B45  0020               	movlb	0	; select bank0
  6258  0B46  0867               	movf	_status+3,w	;volatile
  6259  0B47  3901               	andlw	1
  6260  0B48  067F               	xorwf	127,w
  6261  0B49  1903               	skipnz
  6262  0B4A  2B6A               	goto	l275
  6263                           
  6264                           ;nrf24l01.c: 73: PORTAbits.RA0 = 0;
  6265  0B4B  100C               	bcf	12,0	;volatile
  6266                           
  6267                           ;nrf24l01.c: 74: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6268  0B4C  30C0               	movlw	192
  6269  0B4D                     u5457:	
  6270  0B4D  3200               	nop2
  6271  0B4E  0B89               	decfsz	9,f
  6272  0B4F  2B4D               	goto	u5457
  6273                           
  6274                           ;nrf24l01.c: 77: status.configRegister.PRIM_RX = rxMode;
  6275                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6276  0B50  3F7F               	moviw [-1]fsr1
  6277  0B51  3901               	andlw	1
  6278  0B52  0020               	movlb	0	; select bank0
  6279  0B53  1D03               	skipz
  6280  0B54  1467               	bsf	_status+3,0	;volatile
  6281  0B55  1903               	skipnz
  6282  0B56  1067               	bcf	_status+3,0	;volatile
  6283                           
  6284                           ;nrf24l01.c: 78: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configRegi
      +                          ster.byte);
  6285  0B57  0867               	movf	_status+3,w	;volatile
  6286  0B58  001E               	movwi fsr1++
  6287  0B59  3020               	movlw	32
  6288  0B5A  3188  2086  318B   	fcall	_nrf24l01Send
  6289                           
  6290                           ;nrf24l01.c: 81: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6291  0B5D  30C0               	movlw	192
  6292  0B5E                     u5467:	
  6293  0B5E  3200               	nop2
  6294  0B5F  0B89               	decfsz	9,f
  6295  0B60  2B5E               	goto	u5467
  6296                           
  6297                           ;nrf24l01.c: 84: if (rxMode){
  6298                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6299  0B61  3F7F               	moviw [-1]fsr1
  6300  0B62  1903               	btfsc	3,2
  6301  0B63  2B6A               	goto	l275
  6302                           
  6303                           ;nrf24l01.c: 85: PORTAbits.RA0 = 1;
  6304  0B64  0020               	movlb	0	; select bank0
  6305  0B65  140C               	bsf	12,0	;volatile
  6306                           
  6307                           ;nrf24l01.c: 86: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6308  0B66  30C0               	movlw	192
  6309  0B67                     u5477:	
  6310  0B67  3200               	nop2
  6311  0B68  0B89               	decfsz	9,f
  6312  0B69  2B67               	goto	u5477
  6313  0B6A                     l275:	
  6314                           
  6315                           ; _nrf24l01SetRXMode: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  6316  0B6A  317F               	addfsr 1,-1
  6317  0B6B  0008               	return
  6318  0B6C                     __end_of_nrf24l01SetRXMode:	
  6319                           
  6320                           	psect	text19
  6321  0886                     __ptext19:	
  6322 ;; *************** function _nrf24l01Send *****************
  6323 ;; Defined at:
  6324 ;;		line 11 in file "nrf24l01.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;  command         1    wreg     unsigned char 
  6327 ;;  data            1  [STACK] unsigned char 
  6328 ;; Auto vars:     Size  Location     Type
  6329 ;;  command         1  [STACK] unsigned char 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;                  1    wreg      unsigned char 
  6332 ;; Registers used:
  6333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 1F/1
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6343 ;;Total ram usage:        0 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:    8
  6346 ;; This function calls:
  6347 ;;		_nrf24l01SPIEnd
  6348 ;;		_nrf24l01SPISend
  6349 ;;		_nrf24l01SPIStart
  6350 ;; This function is called by:
  6351 ;;		_nrf24l01SetRXMode
  6352 ;;		_nrf24l01SetRXPipe
  6353 ;;		_nrf24l01ISR
  6354 ;;		_nrf24l01Service
  6355 ;;		_nrf24l01InitRegisters
  6356 ;;		_nrf24l01ChangeTXPower
  6357 ;; This function uses a reentrant model
  6358 ;;
  6359                           
  6360                           
  6361                           ;psect for function _nrf24l01Send
  6362  0886                     _nrf24l01Send:	
  6363                           
  6364                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6365  0886  3141               	addfsr 1,1
  6366                           
  6367                           ;incstack = 0
  6368 ;; hardware stack exceeded
  6369                           ; Regs used in _nrf24l01Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath]
  6370                           ;nrf24l01Send@command stored from wreg
  6371                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6372  0887  3FFF               	movwi [-1]fsr1
  6373                           
  6374                           ;nrf24l01.c: 14: nrf24l01SPIStart();
  6375  0888  3188  2036  3188   	fcall	_nrf24l01SPIStart
  6376                           
  6377                           ;nrf24l01.c: 17: nrf24l01SPISend(command);
  6378                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6379  088B  3F7F               	moviw [-1]fsr1
  6380  088C  3188  2066  3188   	fcall	_nrf24l01SPISend
  6381                           
  6382                           ;nrf24l01.c: 20: data = nrf24l01SPISend(data);
  6383                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6384  088F  3F7E               	moviw [-2]fsr1
  6385  0890  3188  2066  3188   	fcall	_nrf24l01SPISend
  6386                           
  6387                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6388  0893  3FFE               	movwi [-2]fsr1
  6389                           
  6390                           ;nrf24l01.c: 23: nrf24l01SPIEnd();
  6391  0894  3188  202D         	fcall	_nrf24l01SPIEnd
  6392                           
  6393                           ;nrf24l01.c: 25: return data;
  6394                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6395  0896  3F7E               	moviw [-2]fsr1
  6396                           
  6397                           ; _nrf24l01Send: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, 
      +                          argsize = 1, vargsize = 0
  6398  0897  317E               	addfsr 1,-2
  6399  0898  0008               	return
  6400  0899                     __end_of_nrf24l01Send:	
  6401                           
  6402                           	psect	text20
  6403  0836                     __ptext20:	
  6404 ;; *************** function _nrf24l01SPIStart *****************
  6405 ;; Defined at:
  6406 ;;		line 69 in file "interface.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;		None
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;		None
  6411 ;; Return value:  Size  Location     Type
  6412 ;;                  1    wreg      void 
  6413 ;; Registers used:
  6414 ;;		wreg
  6415 ;; Tracked objects:
  6416 ;;		On entry : 0/0
  6417 ;;		On exit  : 0/0
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;Total ram usage:        0 bytes
  6425 ;; Hardware stack levels used:    1
  6426 ;; Hardware stack levels required when called:    7
  6427 ;; This function calls:
  6428 ;;		Nothing
  6429 ;; This function is called by:
  6430 ;;		_nrf24l01Send
  6431 ;;		_nrf24l01SetTXPipe
  6432 ;;		_nrf24l01SendTXBuffer
  6433 ;;		_nrf24l01Service
  6434 ;;		_nrf24l01InitRegisters
  6435 ;; This function uses a reentrant model
  6436 ;;
  6437                           
  6438                           
  6439                           ;psect for function _nrf24l01SPIStart
  6440  0836                     _nrf24l01SPIStart:	
  6441                           
  6442                           ;interface.c: 70: PIE0bits.INTE = 0;
  6443                           
  6444                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6445                           ;incstack = 0
  6446 ;; hardware stack exceeded
  6447                           ; Regs used in _nrf24l01SPIStart: [wreg]
  6448  0836  0021               	movlb	1	; select bank1
  6449  0837  1010               	bcf	16,0	;volatile
  6450                           
  6451                           ;interface.c: 71: PORTAbits.RA1 = 0;
  6452  0838  0020               	movlb	0	; select bank0
  6453  0839  108C               	bcf	12,1	;volatile
  6454                           
  6455                           ;interface.c: 72: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6456  083A  301A               	movlw	26
  6457  083B                     u5487:	
  6458  083B  0B89               	decfsz	9,f
  6459  083C  283B               	goto	u5487
  6460  083D  3200               	nop2
  6461                           
  6462                           ; _nrf24l01SPIStart: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           0, argsize = 0, vargsize = 0
  6463  083E  0008               	return
  6464  083F                     __end_of_nrf24l01SPIStart:	
  6465                           
  6466                           	psect	text21
  6467  0866                     __ptext21:	
  6468 ;; *************** function _nrf24l01SPISend *****************
  6469 ;; Defined at:
  6470 ;;		line 57 in file "interface.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;  data            1    wreg     unsigned char 
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;  data            1  [STACK] unsigned char 
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  1    wreg      unsigned char 
  6477 ;; Registers used:
  6478 ;;		wreg, fsr1l, fsr1h
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 1F/4
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;Total ram usage:        0 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:    7
  6491 ;; This function calls:
  6492 ;;		Nothing
  6493 ;; This function is called by:
  6494 ;;		_nrf24l01Send
  6495 ;;		_nrf24l01SetTXPipe
  6496 ;;		_nrf24l01SendTXBuffer
  6497 ;;		_nrf24l01Service
  6498 ;;		_nrf24l01InitRegisters
  6499 ;; This function uses a reentrant model
  6500 ;;
  6501                           
  6502                           
  6503                           ;psect for function _nrf24l01SPISend
  6504  0866                     _nrf24l01SPISend:	
  6505                           
  6506                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6507  0866  3141               	addfsr 1,1
  6508                           
  6509                           ;incstack = 0
  6510 ;; hardware stack exceeded
  6511                           ; Regs used in _nrf24l01SPISend: [wreg+fsr1l+fsr1h]
  6512                           ;nrf24l01SPISend@data stored from wreg
  6513                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6514  0867  3FFF               	movwi [-1]fsr1
  6515                           
  6516                           ;interface.c: 58: SSP1BUF = data;
  6517                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6518  0868  3F7F               	moviw [-1]fsr1
  6519  0869  0024               	movlb	4	; select bank4
  6520  086A  0091               	movwf	17	;volatile
  6521                           
  6522                           ;interface.c: 60: PORTCbits.RC4 = 1;
  6523  086B  0020               	movlb	0	; select bank0
  6524  086C  160E               	bsf	14,4	;volatile
  6525  086D                     l55:	
  6526                           ;interface.c: 62: while (!SSP1STATbits.BF){
  6527                           
  6528  086D  0024               	movlb	4	; select bank4
  6529  086E  1814               	btfsc	20,0	;volatile
  6530  086F  2872               	goto	l3670
  6531                           
  6532                           ;interface.c: 63: __nop();
  6533  0870  0000               	nop
  6534  0871  286D               	goto	l55
  6535  0872                     l3670:	
  6536                           
  6537                           ;interface.c: 64: };interface.c: 66: return SSP1BUF;
  6538  0872  0811               	movf	17,w	;volatile
  6539                           
  6540                           ; _nrf24l01SPISend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  6541  0873  317F               	addfsr 1,-1
  6542  0874  0008               	return
  6543  0875                     __end_of_nrf24l01SPISend:	
  6544                           
  6545                           	psect	text22
  6546  082D                     __ptext22:	
  6547 ;; *************** function _nrf24l01SPIEnd *****************
  6548 ;; Defined at:
  6549 ;;		line 75 in file "interface.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;		None
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 1F/1
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;Total ram usage:        0 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    7
  6570 ;; This function calls:
  6571 ;;		Nothing
  6572 ;; This function is called by:
  6573 ;;		_nrf24l01Send
  6574 ;;		_nrf24l01SetTXPipe
  6575 ;;		_nrf24l01SendTXBuffer
  6576 ;;		_nrf24l01Service
  6577 ;;		_nrf24l01InitRegisters
  6578 ;; This function uses a reentrant model
  6579 ;;
  6580                           
  6581                           
  6582                           ;psect for function _nrf24l01SPIEnd
  6583  082D                     _nrf24l01SPIEnd:	
  6584                           
  6585                           ;interface.c: 76: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6586                           
  6587                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6588                           ;incstack = 0
  6589 ;; hardware stack exceeded
  6590                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  6591  082D  301A               	movlw	26
  6592  082E                     u5497:	
  6593  082E  0B89               	decfsz	9,f
  6594  082F  282E               	goto	u5497
  6595  0830  3200               	nop2
  6596                           
  6597                           ;interface.c: 77: PORTAbits.RA1 = 1;
  6598  0831  0020               	movlb	0	; select bank0
  6599  0832  148C               	bsf	12,1	;volatile
  6600                           
  6601                           ;interface.c: 78: PIE0bits.INTE = 1;
  6602  0833  0021               	movlb	1	; select bank1
  6603  0834  1410               	bsf	16,0	;volatile
  6604                           
  6605                           ; _nrf24l01SPIEnd: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  6606  0835  0008               	return
  6607  0836                     __end_of_nrf24l01SPIEnd:	
  6608                           
  6609                           	psect	text23
  6610  0ACB                     __ptext23:	
  6611 ;; *************** function _memset *****************
  6612 ;; Defined at:
  6613 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6614 ;; Parameters:    Size  Location     Type
  6615 ;;  p1              2  [STACK] PTR void 
  6616 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6617 ;;  c               2  [STACK] int 
  6618 ;;  n               2  [STACK] unsigned int 
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;  p               2  [STACK] PTR unsigned char 
  6621 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6622 ;; Return value:  Size  Location     Type
  6623 ;;                  2  [STACK] PTR void 
  6624 ;; Registers used:
  6625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+8, btemp+9, btemp+11
  6626 ;; Tracked objects:
  6627 ;;		On entry : 1E/1
  6628 ;;		On exit  : 0/0
  6629 ;;		Unchanged: 0/0
  6630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6635 ;;Total ram usage:        0 bytes
  6636 ;; Hardware stack levels used:    1
  6637 ;; Hardware stack levels required when called:    7
  6638 ;; This function calls:
  6639 ;;		Nothing
  6640 ;; This function is called by:
  6641 ;;		_sendMessage
  6642 ;;		_nrf24l01Service
  6643 ;; This function uses a reentrant model
  6644 ;;
  6645                           
  6646                           
  6647                           ;psect for function _memset
  6648  0ACB                     _memset:	
  6649                           
  6650                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6651  0ACB  3142               	addfsr 1,2
  6652                           
  6653                           ;stkvar	memset@p1 @ sp[(-2)+-2]
  6654                           
  6655                           ;incstack = 0
  6656 ;; hardware stack exceeded
  6657                           ; Regs used in _memset: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+8+btemp+9+btemp+1
      +                          1]
  6658  0ACC  0806               	movf	6,w
  6659  0ACD  0084               	movwf	4
  6660  0ACE  0807               	movf	7,w
  6661  0ACF  0085               	movwf	5
  6662  0AD0  313C               	addfsr 0,-4
  6663                           
  6664                           ;stkvar	memset@p @ sp[(-2)+0]
  6665  0AD1  3F00               	moviw [0]fsr0
  6666  0AD2  3FFE               	movwi [-2]fsr1
  6667  0AD3  3F01               	moviw [1]fsr0
  6668  0AD4  3FFF               	movwi [-1]fsr1
  6669  0AD5                     l4248:	
  6670                           
  6671                           ;stkvar	memset@n @ sp[(-2)+-6]
  6672  0AD5  3F78               	moviw [-8]fsr1
  6673  0AD6  00F4               	movwf	116
  6674  0AD7  3001               	movlw	1
  6675  0AD8  0274               	subwf	116,w
  6676  0AD9  3FF8               	movwi [-8]fsr1
  6677  0ADA  3F79               	moviw [-7]fsr1
  6678  0ADB  00F4               	movwf	116
  6679  0ADC  3000               	movlw	0
  6680  0ADD  3B74               	subwfb	116,w
  6681  0ADE  3FF9               	movwi [-7]fsr1
  6682  0ADF  3F78               	moviw [-8]fsr1
  6683  0AE0  3AFF               	xorlw	255
  6684  0AE1  00F4               	movwf	116
  6685  0AE2  3F79               	moviw [-7]fsr1
  6686  0AE3  3AFF               	xorlw	255
  6687  0AE4  04F4               	iorwf	116,f
  6688  0AE5  1903               	btfsc	3,2
  6689  0AE6  2AFB               	goto	l977
  6690                           
  6691                           ;stkvar	memset@c @ sp[(-2)+-4]
  6692  0AE7  3F7A               	moviw [-6]fsr1
  6693  0AE8  00FF               	movwf	127
  6694                           
  6695                           ;stkvar	memset@p @ sp[(-2)+0]
  6696  0AE9  3F7E               	moviw [-2]fsr1
  6697  0AEA  00FC               	movwf	124
  6698  0AEB  3F7F               	moviw [-1]fsr1
  6699  0AEC  00FD               	movwf	125
  6700  0AED  087C               	movf	124,w
  6701  0AEE  0084               	movwf	4
  6702  0AEF  087D               	movf	125,w
  6703  0AF0  0085               	movwf	5
  6704  0AF1  087F               	movf	127,w
  6705  0AF2  0080               	movwf	0
  6706                           
  6707                           ;stkvar	memset@p @ sp[(-2)+0]
  6708  0AF3  3F7E               	moviw [-2]fsr1
  6709  0AF4  3E01               	addlw	1
  6710  0AF5  3FFE               	movwi [-2]fsr1
  6711  0AF6  01F4               	clrf	116
  6712  0AF7  3F7F               	moviw [-1]fsr1
  6713  0AF8  3D74               	addwfc	116,w
  6714  0AF9  3FFF               	movwi [-1]fsr1
  6715  0AFA  2AD5               	goto	l4248
  6716  0AFB                     l977:	
  6717                           
  6718                           ; _memset: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsiz
      +                          e = 6, vargsize = 0
  6719  0AFB  3178               	addfsr 1,-8
  6720  0AFC  0008               	return
  6721  0AFD                     __end_of_memset:	
  6722                           
  6723                           	psect	text24
  6724  084B                     __ptext24:	
  6725 ;; *************** function _exception *****************
  6726 ;; Defined at:
  6727 ;;		line 81 in file "interface.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;  exception       1    wreg     unsigned char 
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;  exception       1    6[BANK0 ] unsigned char 
  6732 ;; Return value:  Size  Location     Type
  6733 ;;                  1    wreg      void 
  6734 ;; Registers used:
  6735 ;;		wreg, status,2, status,0, btemp+11, pclath, cstack
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;Total ram usage:        1 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:    8
  6748 ;; This function calls:
  6749 ;;		_EEPROMWrite
  6750 ;; This function is called by:
  6751 ;;		_nrf24l01SendPacket
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           
  6756                           ;psect for function _exception
  6757  084B                     _exception:	
  6758                           
  6759                           ;incstack = 0
  6760                           ; Regs used in _exception: [wreg+status,2+status,0+btemp+11+pclath+cstack]
  6761                           ;exception@exception stored from wreg
  6762  084B  0020               	movlb	0	; select bank0
  6763  084C  00A6               	movwf	exception@exception
  6764                           
  6765                           ;interface.c: 82: EEPROMWrite(0, exception);
  6766  084D  3000               	movlw	0
  6767  084E  00F0               	movwf	EEPROMWrite@address
  6768  084F  00F1               	movwf	EEPROMWrite@address+1
  6769  0850  0826               	movf	exception@exception,w
  6770  0851  00FF               	movwf	127
  6771  0852  087F               	movf	127,w
  6772  0853  00F2               	movwf	EEPROMWrite@data
  6773  0854  3189  2190         	fcall	_EEPROMWrite
  6774  0856  0001               	reset	;# 
  6775  0857  0008               	return
  6776  0858                     __end_of_exception:	
  6777                           
  6778                           	psect	text25
  6779  0990                     __ptext25:	
  6780 ;; *************** function _EEPROMWrite *****************
  6781 ;; Defined at:
  6782 ;;		line 7 in file "eeprom.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  address         2    0[COMMON] unsigned int 
  6785 ;;  data            1    2[COMMON] unsigned char 
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  1    wreg      void 
  6790 ;; Registers used:
  6791 ;;		wreg, status,2, status,0
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6797 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;Total ram usage:        4 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    7
  6804 ;; This function calls:
  6805 ;;		Nothing
  6806 ;; This function is called by:
  6807 ;;		_exception
  6808 ;;		_main
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           
  6813                           ;psect for function _EEPROMWrite
  6814  0990                     _EEPROMWrite:	
  6815                           
  6816                           ;eeprom.c: 9: unsigned char GIEBitValue = INTCONbits.GIE;
  6817                           
  6818                           ;incstack = 0
  6819                           ; Regs used in _EEPROMWrite: [wreg+status,2+status,0]
  6820  0990  3000               	movlw	0
  6821  0991  1B8B               	btfsc	11,7	;volatile
  6822  0992  3001               	movlw	1
  6823  0993  00F3               	movwf	EEPROMWrite@GIEBitValue
  6824                           
  6825                           ;eeprom.c: 11: NVMADRH = ((address >> 8) & 0xFF);
  6826  0994  0871               	movf	EEPROMWrite@address+1,w
  6827  0995  0031               	movlb	17	; select bank17
  6828  0996  0092               	movwf	18	;volatile
  6829                           
  6830                           ;eeprom.c: 12: NVMADRL = (address & 0xFF);
  6831  0997  0870               	movf	EEPROMWrite@address,w
  6832  0998  0091               	movwf	17	;volatile
  6833                           
  6834                           ;eeprom.c: 13: NVMDATL = data;
  6835  0999  0872               	movf	EEPROMWrite@data,w
  6836  099A  0093               	movwf	19	;volatile
  6837                           
  6838                           ;eeprom.c: 14: NVMCON1bits.NVMREGS = 1;
  6839  099B  1715               	bsf	21,6	;volsfr
  6840                           
  6841                           ;eeprom.c: 15: NVMCON1bits.WREN = 1;
  6842  099C  1515               	bsf	21,2	;volsfr
  6843                           
  6844                           ;eeprom.c: 16: INTCONbits.GIE = 0;
  6845  099D  138B               	bcf	11,7	;volatile
  6846                           
  6847                           ;eeprom.c: 17: NVMCON2 = 0x55;
  6848  099E  3055               	movlw	85
  6849  099F  0096               	movwf	22	;volsfr
  6850                           
  6851                           ;eeprom.c: 18: NVMCON2 = 0xAA;
  6852  09A0  30AA               	movlw	170
  6853  09A1  0096               	movwf	22	;volsfr
  6854                           
  6855                           ;eeprom.c: 19: NVMCON1bits.WR = 1;
  6856  09A2  1495               	bsf	21,1	;volsfr
  6857                           
  6858                           ;eeprom.c: 21: while (NVMCON1bits.WR){
  6859  09A3  29A5               	goto	l358
  6860  09A4                     l359:	
  6861                           
  6862                           ;eeprom.c: 22: __nop();
  6863  09A4  0000               	nop
  6864  09A5                     l358:	
  6865  09A5  0031               	movlb	17	; select bank17
  6866  09A6  1895               	btfsc	21,1	;volsfr
  6867  09A7  29A4               	goto	l359
  6868                           
  6869                           ;eeprom.c: 23: };eeprom.c: 25: NVMCON1bits.WREN = 0;
  6870  09A8  1115               	bcf	21,2	;volsfr
  6871                           
  6872                           ;eeprom.c: 26: INTCONbits.GIE = GIEBitValue;
  6873  09A9  0C73               	rrf	EEPROMWrite@GIEBitValue,w
  6874  09AA  1C03               	skipc
  6875  09AB  138B               	bcf	11,7	;volatile
  6876  09AC  1803               	skipnc
  6877  09AD  178B               	bsf	11,7	;volatile
  6878  09AE  0008               	return
  6879  09AF                     __end_of_EEPROMWrite:	
  6880                           
  6881                           	psect	text26
  6882  0515                     __ptext26:	
  6883 ;; *************** function _ftoa *****************
  6884 ;; Defined at:
  6885 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;  f               3    0[BANK1 ] float 
  6888 ;;  status          1    3[BANK1 ] PTR int 
  6889 ;;		 -> sendMessage@ftoaStatus(2), 
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;  l               4    8[BANK1 ] unsigned long 
  6892 ;;  rem             4    4[BANK1 ] unsigned long 
  6893 ;;  cp              1   12[BANK1 ] PTR unsigned char 
  6894 ;;		 -> ftoa@buf(17), 
  6895 ;; Return value:  Size  Location     Type
  6896 ;;                  1    wreg      PTR unsigned char 
  6897 ;; Registers used:
  6898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6899 ;; Tracked objects:
  6900 ;;		On entry : 0/0
  6901 ;;		On exit  : 0/0
  6902 ;;		Unchanged: 0/0
  6903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6904 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6905 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;Total ram usage:       13 bytes
  6909 ;; Hardware stack levels used:    1
  6910 ;; Hardware stack levels required when called:   10
  6911 ;; This function calls:
  6912 ;;		___ftge
  6913 ;;		___ftmul
  6914 ;;		___ftneg
  6915 ;;		___ftsub
  6916 ;;		___fttol
  6917 ;;		___lltoft
  6918 ;;		_sprintf
  6919 ;; This function is called by:
  6920 ;;		_sendMessage
  6921 ;; This function uses a non-reentrant model
  6922 ;;
  6923                           
  6924                           
  6925                           ;psect for function _ftoa
  6926  0515                     _ftoa:	
  6927                           
  6928                           ;incstack = 0
  6929                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  6930  0515  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  6931  0516  00FF               	movwf	127
  6932  0517  087F               	movf	127,w
  6933  0518  0021               	movlb	1	; select bank1
  6934  0519  00AC               	movwf	ftoa@cp^(0+128)
  6935  051A  0820               	movf	ftoa@f^(0+128),w
  6936  051B  0020               	movlb	0	; select bank0
  6937  051C  00A6               	movwf	___ftge@ff1
  6938  051D  0021               	movlb	1	; select bank1
  6939  051E  0821               	movf	(ftoa@f+1)^(0+128),w
  6940  051F  0020               	movlb	0	; select bank0
  6941  0520  00A7               	movwf	___ftge@ff1+1
  6942  0521  0021               	movlb	1	; select bank1
  6943  0522  0822               	movf	(ftoa@f+2)^(0+128),w
  6944  0523  0020               	movlb	0	; select bank0
  6945  0524  00A8               	movwf	___ftge@ff1+2
  6946  0525  3000               	movlw	0
  6947  0526  00A9               	movwf	___ftge@ff2
  6948  0527  3000               	movlw	0
  6949  0528  00AA               	movwf	___ftge@ff2+1
  6950  0529  3000               	movlw	0
  6951  052A  00AB               	movwf	___ftge@ff2+2
  6952  052B  318B  236C  3185   	fcall	___ftge
  6953  052E  1803               	btfsc	3,0
  6954  052F  2D57               	goto	l4270
  6955  0530  302D               	movlw	45
  6956  0531  00FF               	movwf	127
  6957  0532  0021               	movlb	1	; select bank1
  6958  0533  082C               	movf	ftoa@cp^(0+128),w
  6959  0534  0084               	movwf	4
  6960  0535  3001               	movlw	1	; select bank2/3
  6961  0536  0085               	movwf	5
  6962  0537  087F               	movf	127,w
  6963  0538  0080               	movwf	0
  6964  0539  3001               	movlw	1
  6965  053A  00FF               	movwf	127
  6966  053B  087F               	movf	127,w
  6967  053C  07AC               	addwf	ftoa@cp^(0+128),f
  6968  053D  0820               	movf	ftoa@f^(0+128),w
  6969  053E  0020               	movlb	0	; select bank0
  6970  053F  00CB               	movwf	___ftneg@f1
  6971  0540  0021               	movlb	1	; select bank1
  6972  0541  0821               	movf	(ftoa@f+1)^(0+128),w
  6973  0542  0020               	movlb	0	; select bank0
  6974  0543  00CC               	movwf	___ftneg@f1+1
  6975  0544  0021               	movlb	1	; select bank1
  6976  0545  0822               	movf	(ftoa@f+2)^(0+128),w
  6977  0546  0020               	movlb	0	; select bank0
  6978  0547  00CD               	movwf	___ftneg@f1+2
  6979  0548  3188  2024  3185   	fcall	___ftneg
  6980  054B  0020               	movlb	0	; select bank0
  6981  054C  084B               	movf	?___ftneg,w
  6982  054D  0021               	movlb	1	; select bank1
  6983  054E  00A0               	movwf	ftoa@f^(0+128)
  6984  054F  0020               	movlb	0	; select bank0
  6985  0550  084C               	movf	?___ftneg+1,w
  6986  0551  0021               	movlb	1	; select bank1
  6987  0552  00A1               	movwf	(ftoa@f+1)^(0+128)
  6988  0553  0020               	movlb	0	; select bank0
  6989  0554  084D               	movf	?___ftneg+2,w
  6990  0555  0021               	movlb	1	; select bank1
  6991  0556  00A2               	movwf	(ftoa@f+2)^(0+128)
  6992  0557                     l4270:	
  6993  0557  0021               	movlb	1	; select bank1
  6994  0558  0820               	movf	ftoa@f^(0+128),w
  6995  0559  0020               	movlb	0	; select bank0
  6996  055A  00D7               	movwf	___fttol@f1
  6997  055B  0021               	movlb	1	; select bank1
  6998  055C  0821               	movf	(ftoa@f+1)^(0+128),w
  6999  055D  0020               	movlb	0	; select bank0
  7000  055E  00D8               	movwf	___fttol@f1+1
  7001  055F  0021               	movlb	1	; select bank1
  7002  0560  0822               	movf	(ftoa@f+2)^(0+128),w
  7003  0561  0020               	movlb	0	; select bank0
  7004  0562  00D9               	movwf	___fttol@f1+2
  7005  0563  318E  263B  3185   	fcall	___fttol
  7006  0566  0020               	movlb	0	; select bank0
  7007  0567  085A               	movf	?___fttol+3,w
  7008  0568  0021               	movlb	1	; select bank1
  7009  0569  00AB               	movwf	(ftoa@l+3)^(0+128)
  7010  056A  0020               	movlb	0	; select bank0
  7011  056B  0859               	movf	?___fttol+2,w
  7012  056C  0021               	movlb	1	; select bank1
  7013  056D  00AA               	movwf	(ftoa@l+2)^(0+128)
  7014  056E  0020               	movlb	0	; select bank0
  7015  056F  0858               	movf	?___fttol+1,w
  7016  0570  0021               	movlb	1	; select bank1
  7017  0571  00A9               	movwf	(ftoa@l+1)^(0+128)
  7018  0572  0020               	movlb	0	; select bank0
  7019  0573  0857               	movf	?___fttol,w
  7020  0574  0021               	movlb	1	; select bank1
  7021  0575  00A8               	movwf	ftoa@l^(0+128)
  7022  0576  082B               	movf	(ftoa@l+3)^(0+128),w
  7023  0577  00F3               	movwf	___lltoft@c+3
  7024  0578  082A               	movf	(ftoa@l+2)^(0+128),w
  7025  0579  00F2               	movwf	___lltoft@c+2
  7026  057A  0829               	movf	(ftoa@l+1)^(0+128),w
  7027  057B  00F1               	movwf	___lltoft@c+1
  7028  057C  0828               	movf	ftoa@l^(0+128),w
  7029  057D  00F0               	movwf	___lltoft@c
  7030  057E  318A  2219  3185   	fcall	___lltoft
  7031  0581  0870               	movf	?___lltoft,w
  7032  0582  0020               	movlb	0	; select bank0
  7033  0583  00B5               	movwf	___ftsub@f2
  7034  0584  0871               	movf	?___lltoft+1,w
  7035  0585  00B6               	movwf	___ftsub@f2+1
  7036  0586  0872               	movf	?___lltoft+2,w
  7037  0587  00B7               	movwf	___ftsub@f2+2
  7038  0588  0021               	movlb	1	; select bank1
  7039  0589  0820               	movf	ftoa@f^(0+128),w
  7040  058A  0020               	movlb	0	; select bank0
  7041  058B  00B8               	movwf	___ftsub@f1
  7042  058C  0021               	movlb	1	; select bank1
  7043  058D  0821               	movf	(ftoa@f+1)^(0+128),w
  7044  058E  0020               	movlb	0	; select bank0
  7045  058F  00B9               	movwf	___ftsub@f1+1
  7046  0590  0021               	movlb	1	; select bank1
  7047  0591  0822               	movf	(ftoa@f+2)^(0+128),w
  7048  0592  0020               	movlb	0	; select bank0
  7049  0593  00BA               	movwf	___ftsub@f1+2
  7050  0594  3188  20FA  3185   	fcall	___ftsub
  7051  0597  0020               	movlb	0	; select bank0
  7052  0598  0835               	movf	?___ftsub,w
  7053  0599  0021               	movlb	1	; select bank1
  7054  059A  00A0               	movwf	ftoa@f^(0+128)
  7055  059B  0020               	movlb	0	; select bank0
  7056  059C  0836               	movf	?___ftsub+1,w
  7057  059D  0021               	movlb	1	; select bank1
  7058  059E  00A1               	movwf	(ftoa@f+1)^(0+128)
  7059  059F  0020               	movlb	0	; select bank0
  7060  05A0  0837               	movf	?___ftsub+2,w
  7061  05A1  0021               	movlb	1	; select bank1
  7062  05A2  00A2               	movwf	(ftoa@f+2)^(0+128)
  7063  05A3  0820               	movf	ftoa@f^(0+128),w
  7064  05A4  0020               	movlb	0	; select bank0
  7065  05A5  00CE               	movwf	___ftmul@f2
  7066  05A6  0021               	movlb	1	; select bank1
  7067  05A7  0821               	movf	(ftoa@f+1)^(0+128),w
  7068  05A8  0020               	movlb	0	; select bank0
  7069  05A9  00CF               	movwf	___ftmul@f2+1
  7070  05AA  0021               	movlb	1	; select bank1
  7071  05AB  0822               	movf	(ftoa@f+2)^(0+128),w
  7072  05AC  0020               	movlb	0	; select bank0
  7073  05AD  00D0               	movwf	___ftmul@f2+2
  7074  05AE  3024               	movlw	36
  7075  05AF  00CB               	movwf	___ftmul@f1
  7076  05B0  3074               	movlw	116
  7077  05B1  00CC               	movwf	___ftmul@f1+1
  7078  05B2  3049               	movlw	73
  7079  05B3  00CD               	movwf	___ftmul@f1+2
  7080  05B4  3185  25FC  3185   	fcall	___ftmul
  7081  05B7  0020               	movlb	0	; select bank0
  7082  05B8  084B               	movf	?___ftmul,w
  7083  05B9  00D7               	movwf	___fttol@f1
  7084  05BA  084C               	movf	?___ftmul+1,w
  7085  05BB  00D8               	movwf	___fttol@f1+1
  7086  05BC  084D               	movf	?___ftmul+2,w
  7087  05BD  00D9               	movwf	___fttol@f1+2
  7088  05BE  318E  263B  3185   	fcall	___fttol
  7089  05C1  0020               	movlb	0	; select bank0
  7090  05C2  085A               	movf	?___fttol+3,w
  7091  05C3  0021               	movlb	1	; select bank1
  7092  05C4  00A7               	movwf	(ftoa@rem+3)^(0+128)
  7093  05C5  0020               	movlb	0	; select bank0
  7094  05C6  0859               	movf	?___fttol+2,w
  7095  05C7  0021               	movlb	1	; select bank1
  7096  05C8  00A6               	movwf	(ftoa@rem+2)^(0+128)
  7097  05C9  0020               	movlb	0	; select bank0
  7098  05CA  0858               	movf	?___fttol+1,w
  7099  05CB  0021               	movlb	1	; select bank1
  7100  05CC  00A5               	movwf	(ftoa@rem+1)^(0+128)
  7101  05CD  0020               	movlb	0	; select bank0
  7102  05CE  0857               	movf	?___fttol,w
  7103  05CF  0021               	movlb	1	; select bank1
  7104  05D0  00A4               	movwf	ftoa@rem^(0+128)
  7105  05D1  3029               	movlw	low (STR_8| (0+32768))
  7106  05D2  0020               	movlb	0	; select bank0
  7107  05D3  00BB               	movwf	sprintf@f
  7108  05D4  3090               	movlw	high (STR_8| (0+32768))
  7109  05D5  00BC               	movwf	sprintf@f+1
  7110  05D6  0021               	movlb	1	; select bank1
  7111  05D7  082B               	movf	(ftoa@l+3)^(0+128),w
  7112  05D8  0020               	movlb	0	; select bank0
  7113  05D9  00C0               	movwf	?_sprintf+5
  7114  05DA  0021               	movlb	1	; select bank1
  7115  05DB  082A               	movf	(ftoa@l+2)^(0+128),w
  7116  05DC  0020               	movlb	0	; select bank0
  7117  05DD  00BF               	movwf	?_sprintf+4
  7118  05DE  0021               	movlb	1	; select bank1
  7119  05DF  0829               	movf	(ftoa@l+1)^(0+128),w
  7120  05E0  0020               	movlb	0	; select bank0
  7121  05E1  00BE               	movwf	?_sprintf+3
  7122  05E2  0021               	movlb	1	; select bank1
  7123  05E3  0828               	movf	ftoa@l^(0+128),w
  7124  05E4  0020               	movlb	0	; select bank0
  7125  05E5  00BD               	movwf	?_sprintf+2
  7126  05E6  0021               	movlb	1	; select bank1
  7127  05E7  0827               	movf	(ftoa@rem+3)^(0+128),w
  7128  05E8  0020               	movlb	0	; select bank0
  7129  05E9  00C4               	movwf	?_sprintf+9
  7130  05EA  0021               	movlb	1	; select bank1
  7131  05EB  0826               	movf	(ftoa@rem+2)^(0+128),w
  7132  05EC  0020               	movlb	0	; select bank0
  7133  05ED  00C3               	movwf	?_sprintf+8
  7134  05EE  0021               	movlb	1	; select bank1
  7135  05EF  0825               	movf	(ftoa@rem+1)^(0+128),w
  7136  05F0  0020               	movlb	0	; select bank0
  7137  05F1  00C2               	movwf	?_sprintf+7
  7138  05F2  0021               	movlb	1	; select bank1
  7139  05F3  0824               	movf	ftoa@rem^(0+128),w
  7140  05F4  0020               	movlb	0	; select bank0
  7141  05F5  00C1               	movwf	?_sprintf+6
  7142  05F6  0021               	movlb	1	; select bank1
  7143  05F7  082C               	movf	ftoa@cp^(0+128),w
  7144  05F8  3180  205E         	fcall	_sprintf
  7145  05FA  303C               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  7146  05FB  0008               	return
  7147  05FC                     __end_of_ftoa:	
  7148                           
  7149                           	psect	text27
  7150  005E                     __ptext27:	
  7151 ;; *************** function _sprintf *****************
  7152 ;; Defined at:
  7153 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;  sp              1    wreg     PTR unsigned char 
  7156 ;;		 -> ftoa@buf(17), 
  7157 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  7158 ;;		 -> STR_8(11), 
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;  sp              1   47[BANK0 ] PTR unsigned char 
  7161 ;;		 -> ftoa@buf(17), 
  7162 ;;  val             4   43[BANK0 ] unsigned long 
  7163 ;;  tmpval          4    0        struct .
  7164 ;;  prec            2   50[BANK0 ] int 
  7165 ;;  width           2   48[BANK0 ] int 
  7166 ;;  cp              2    0        PTR const unsigned char 
  7167 ;;  len             2    0        unsigned int 
  7168 ;;  c               1   52[BANK0 ] unsigned char 
  7169 ;;  ap              1   42[BANK0 ] PTR void [1]
  7170 ;;		 -> ?_sprintf(2), 
  7171 ;;  flag            1   41[BANK0 ] unsigned char 
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  2   27[BANK0 ] int 
  7174 ;; Registers used:
  7175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7181 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;Total ram usage:       26 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    8
  7188 ;; This function calls:
  7189 ;;		___lldiv
  7190 ;;		___llmod
  7191 ;;		___wmul
  7192 ;;		_isdigit
  7193 ;; This function is called by:
  7194 ;;		_ftoa
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           
  7199                           ;psect for function _sprintf
  7200  005E                     _sprintf:	
  7201                           
  7202                           ;incstack = 0
  7203                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  7204                           ;sprintf@sp stored from wreg
  7205  005E  0020               	movlb	0	; select bank0
  7206  005F  00CF               	movwf	sprintf@sp
  7207                           
  7208                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  7209  0060  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7210  0061  00FF               	movwf	127
  7211  0062  087F               	movf	127,w
  7212  0063  00CA               	movwf	sprintf@ap
  7213  0064                     l4074:	
  7214                           ;doprnt.c: 548: while((c = *f++)) {
  7215                           
  7216  0064  083C               	movf	sprintf@f+1,w
  7217  0065  00FF               	movwf	127
  7218  0066  083B               	movf	sprintf@f,w
  7219  0067  00FE               	movwf	126
  7220  0068  0ABB               	incf	sprintf@f,f
  7221  0069  1903               	skipnz
  7222  006A  0ABC               	incf	sprintf@f+1,f
  7223  006B  087E               	movf	126,w
  7224  006C  0084               	movwf	4
  7225  006D  087F               	movf	127,w
  7226  006E  0085               	movwf	5
  7227  006F  0800               	movf	0,w	;code access
  7228  0070  00FF               	movwf	127
  7229  0071  087F               	movf	127,w
  7230  0072  00D4               	movwf	sprintf@c
  7231  0073  0854               	movf	sprintf@c,w
  7232  0074  1903               	btfsc	3,2
  7233  0075  2A25               	goto	l4076
  7234                           
  7235                           ;doprnt.c: 550: if(c != '%')
  7236  0076  3025               	movlw	37
  7237  0077  0654               	xorwf	sprintf@c,w
  7238  0078  1903               	btfsc	3,2
  7239  0079  2887               	goto	l3982
  7240                           
  7241                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  7242  007A  0854               	movf	sprintf@c,w
  7243  007B  00FF               	movwf	127
  7244  007C  084F               	movf	sprintf@sp,w
  7245  007D  0084               	movwf	4
  7246  007E  3001               	movlw	1	; select bank2/3
  7247  007F  0085               	movwf	5
  7248  0080  087F               	movf	127,w
  7249  0081  0080               	movwf	0
  7250  0082  3001               	movlw	1
  7251  0083  00FF               	movwf	127
  7252  0084  087F               	movf	127,w
  7253  0085  07CF               	addwf	sprintf@sp,f
  7254                           
  7255                           ;doprnt.c: 554: continue;
  7256  0086  2864               	goto	l4074
  7257  0087                     l3982:	
  7258                           
  7259                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  7260  0087  01D0               	clrf	sprintf@width
  7261  0088  01D1               	clrf	sprintf@width+1
  7262                           
  7263                           ;doprnt.c: 560: flag = 0;
  7264  0089  01C9               	clrf	sprintf@flag
  7265                           
  7266                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  7267  008A  083B               	movf	sprintf@f,w
  7268  008B  0084               	movwf	4
  7269  008C  083C               	movf	sprintf@f+1,w
  7270  008D  0085               	movwf	5
  7271  008E  0800               	movf	0,w	;code access
  7272  008F  3188  2058  3180   	fcall	_isdigit
  7273  0092  1C03               	btfss	3,0
  7274  0093  28C5               	goto	l3996
  7275                           
  7276                           ;doprnt.c: 610: width = 0;
  7277  0094  0020               	movlb	0	; select bank0
  7278  0095  01D0               	clrf	sprintf@width
  7279  0096  01D1               	clrf	sprintf@width+1
  7280  0097                     l3988:	
  7281                           ;doprnt.c: 611: do {
  7282                           
  7283                           
  7284                           ;doprnt.c: 612: width *= 10;
  7285  0097  300A               	movlw	10
  7286  0098  00F0               	movwf	___wmul@multiplier
  7287  0099  3000               	movlw	0
  7288  009A  00F1               	movwf	___wmul@multiplier+1
  7289  009B  0020               	movlb	0	; select bank0
  7290  009C  0851               	movf	sprintf@width+1,w
  7291  009D  00F3               	movwf	___wmul@multiplicand+1
  7292  009E  0850               	movf	sprintf@width,w
  7293  009F  00F2               	movwf	___wmul@multiplicand
  7294  00A0  3189  2118  3180   	fcall	___wmul
  7295  00A3  0871               	movf	?___wmul+1,w
  7296  00A4  0020               	movlb	0	; select bank0
  7297  00A5  00D1               	movwf	sprintf@width+1
  7298  00A6  0870               	movf	?___wmul,w
  7299  00A7  00D0               	movwf	sprintf@width
  7300                           
  7301                           ;doprnt.c: 613: width += *f++ - '0';
  7302  00A8  083B               	movf	sprintf@f,w
  7303  00A9  0084               	movwf	4
  7304  00AA  083C               	movf	sprintf@f+1,w
  7305  00AB  0085               	movwf	5
  7306  00AC  0800               	movf	0,w	;code access
  7307  00AD  3ED0               	addlw	208
  7308  00AE  00FE               	movwf	126
  7309  00AF  30FF               	movlw	255
  7310  00B0  1803               	skipnc
  7311  00B1  3000               	movlw	0
  7312  00B2  00FF               	movwf	127
  7313  00B3  087E               	movf	126,w
  7314  00B4  07D0               	addwf	sprintf@width,f
  7315  00B5  087F               	movf	127,w
  7316  00B6  3DD1               	addwfc	sprintf@width+1,f
  7317  00B7  3001               	movlw	1
  7318  00B8  07BB               	addwf	sprintf@f,f
  7319  00B9  3000               	movlw	0
  7320  00BA  3DBC               	addwfc	sprintf@f+1,f
  7321                           
  7322                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  7323  00BB  083B               	movf	sprintf@f,w
  7324  00BC  0084               	movwf	4
  7325  00BD  083C               	movf	sprintf@f+1,w
  7326  00BE  0085               	movwf	5
  7327  00BF  0800               	movf	0,w	;code access
  7328  00C0  3188  2058  3180   	fcall	_isdigit
  7329  00C3  1803               	btfsc	3,0
  7330  00C4  2897               	goto	l3988
  7331  00C5                     l3996:	
  7332                           
  7333                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  7334  00C5  0020               	movlb	0	; select bank0
  7335  00C6  083B               	movf	sprintf@f,w
  7336  00C7  0084               	movwf	4
  7337  00C8  083C               	movf	sprintf@f+1,w
  7338  00C9  0085               	movwf	5
  7339  00CA  0012               	moviw fsr0++
  7340  00CB  3A2E               	xorlw	46
  7341  00CC  1D03               	btfss	3,2
  7342  00CD  2903               	goto	l4008
  7343                           
  7344                           ;doprnt.c: 625: f++;
  7345  00CE  3001               	movlw	1
  7346  00CF  07BB               	addwf	sprintf@f,f
  7347  00D0  3000               	movlw	0
  7348  00D1  3DBC               	addwfc	sprintf@f+1,f
  7349                           
  7350                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  7351  00D2  01D2               	clrf	sprintf@prec
  7352  00D3  01D3               	clrf	sprintf@prec+1
  7353  00D4                     l4006:	
  7354                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  7355                           
  7356  00D4  083B               	movf	sprintf@f,w
  7357  00D5  0084               	movwf	4
  7358  00D6  083C               	movf	sprintf@f+1,w
  7359  00D7  0085               	movwf	5
  7360  00D8  0800               	movf	0,w	;code access
  7361  00D9  3188  2058  3180   	fcall	_isdigit
  7362  00DC  1C03               	btfss	3,0
  7363  00DD  290E               	goto	l4014
  7364                           
  7365                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  7366  00DE  0020               	movlb	0	; select bank0
  7367  00DF  083B               	movf	sprintf@f,w
  7368  00E0  0084               	movwf	4
  7369  00E1  083C               	movf	sprintf@f+1,w
  7370  00E2  0085               	movwf	5
  7371  00E3  0800               	movf	0,w	;code access
  7372  00E4  00FE               	movwf	126
  7373  00E5  01FF               	clrf	127
  7374  00E6  0853               	movf	sprintf@prec+1,w
  7375  00E7  00F1               	movwf	___wmul@multiplier+1
  7376  00E8  0852               	movf	sprintf@prec,w
  7377  00E9  00F0               	movwf	___wmul@multiplier
  7378  00EA  300A               	movlw	10
  7379  00EB  00F2               	movwf	___wmul@multiplicand
  7380  00EC  3000               	movlw	0
  7381  00ED  00F3               	movwf	___wmul@multiplicand+1
  7382  00EE  3189  2118  3180   	fcall	___wmul
  7383  00F1  087E               	movf	126,w
  7384  00F2  0770               	addwf	?___wmul,w
  7385  00F3  00FC               	movwf	124
  7386  00F4  087F               	movf	127,w
  7387  00F5  3D71               	addwfc	?___wmul+1,w
  7388  00F6  00FD               	movwf	125
  7389  00F7  087C               	movf	124,w
  7390  00F8  3ED0               	addlw	208
  7391  00F9  0020               	movlb	0	; select bank0
  7392  00FA  00D2               	movwf	sprintf@prec
  7393  00FB  30FF               	movlw	255
  7394  00FC  3D7D               	addwfc	125,w
  7395  00FD  00D3               	movwf	sprintf@prec+1
  7396  00FE  3001               	movlw	1
  7397  00FF  07BB               	addwf	sprintf@f,f
  7398  0100  3000               	movlw	0
  7399  0101  3DBC               	addwfc	sprintf@f+1,f
  7400  0102  28D4               	goto	l4006
  7401  0103                     l4008:	
  7402                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  7403                           
  7404                           
  7405                           ;doprnt.c: 645: prec = 0;
  7406  0103  0020               	movlb	0	; select bank0
  7407  0104  01D2               	clrf	sprintf@prec
  7408  0105  01D3               	clrf	sprintf@prec+1
  7409                           
  7410                           ;doprnt.c: 654: switch(c = *f++) {
  7411                           
  7412                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  7413  0106  290E               	goto	l4014
  7414  0107                     l526:	
  7415                           ;doprnt.c: 660: case 'l':
  7416                           
  7417                           ;doprnt.c: 657: goto alldone;
  7418                           
  7419                           ;doprnt.c: 656: case 0:
  7420                           
  7421                           
  7422                           ;doprnt.c: 662: flag |= 0x10;
  7423  0107  1649               	bsf	sprintf@flag,4
  7424                           
  7425                           ;doprnt.c: 663: goto loop;
  7426  0108  290E               	goto	l4014
  7427  0109                     l4010:	
  7428                           ;doprnt.c: 836: case 'u':
  7429                           
  7430                           ;doprnt.c: 832: continue;
  7431                           
  7432                           ;doprnt.c: 821: default:
  7433                           
  7434                           
  7435                           ;doprnt.c: 837: flag |= 0xC0;
  7436  0109  30C0               	movlw	192
  7437  010A  00FF               	movwf	127
  7438  010B  087F               	movf	127,w
  7439  010C  04C9               	iorwf	sprintf@flag,f
  7440                           
  7441                           ;doprnt.c: 841: }
  7442                           
  7443                           ;doprnt.c: 838: break;
  7444  010D  2926               	goto	l529
  7445  010E                     l4014:	
  7446  010E  0020               	movlb	0	; select bank0
  7447  010F  083C               	movf	sprintf@f+1,w
  7448  0110  00FF               	movwf	127
  7449  0111  083B               	movf	sprintf@f,w
  7450  0112  00FE               	movwf	126
  7451  0113  0ABB               	incf	sprintf@f,f
  7452  0114  1903               	skipnz
  7453  0115  0ABC               	incf	sprintf@f+1,f
  7454  0116  087E               	movf	126,w
  7455  0117  0084               	movwf	4
  7456  0118  087F               	movf	127,w
  7457  0119  0085               	movwf	5
  7458  011A  0800               	movf	0,w	;code access
  7459  011B  00D4               	movwf	sprintf@c
  7460                           
  7461                           ; Switch size 1, requested type "space"
  7462                           ; Number of cases is 3, Range of values is 0 to 117
  7463                           ; switch strategies available:
  7464                           ; Name         Instructions Cycles
  7465                           ; simple_byte           10     6 (average)
  7466                           ; direct_byte          242     6 (fixed)
  7467                           ; jumptable            260     6 (fixed)
  7468                           ;	Chosen strategy is simple_byte
  7469  011C  3A00               	xorlw	0	; case 0
  7470  011D  1903               	skipnz
  7471  011E  2A25               	goto	l4076
  7472  011F  3A6C               	xorlw	108	; case 108
  7473  0120  1903               	skipnz
  7474  0121  2907               	goto	l526
  7475  0122  3A19               	xorlw	25	; case 117
  7476  0123  1903               	skipnz
  7477  0124  2909               	goto	l4010
  7478  0125  2864               	goto	l4074
  7479  0126                     l529:	
  7480                           
  7481                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7482  0126  1E49               	btfss	sprintf@flag,4
  7483  0127  2935               	goto	l4020
  7484                           
  7485                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7486  0128  084A               	movf	sprintf@ap,w
  7487  0129  0084               	movwf	4
  7488  012A  0185               	clrf	5
  7489  012B  3F00               	moviw [0]fsr0
  7490  012C  00CB               	movwf	sprintf@val
  7491  012D  3F01               	moviw [1]fsr0
  7492  012E  00CC               	movwf	sprintf@val+1
  7493  012F  3F02               	moviw [2]fsr0
  7494  0130  00CD               	movwf	sprintf@val+2
  7495  0131  3F03               	moviw [3]fsr0
  7496  0132  00CE               	movwf	sprintf@val+3
  7497  0133  3004               	movlw	4
  7498  0134  2943               	goto	L1
  7499  0135                     l4020:	
  7500                           
  7501                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7502  0135  084A               	movf	sprintf@ap,w
  7503  0136  0084               	movwf	4
  7504  0137  0185               	clrf	5
  7505  0138  3F00               	moviw [0]fsr0
  7506  0139  00FE               	movwf	126
  7507  013A  3F01               	moviw [1]fsr0
  7508  013B  00FF               	movwf	127
  7509  013C  087E               	movf	126,w
  7510  013D  00CB               	movwf	sprintf@val
  7511  013E  087F               	movf	127,w
  7512  013F  00CC               	movwf	sprintf@val+1
  7513  0140  01CD               	clrf	sprintf@val+2
  7514  0141  01CE               	clrf	sprintf@val+3
  7515  0142  3002               	movlw	2
  7516  0143                     L1:	
  7517  0143  00FF               	movwf	127
  7518  0144  087F               	movf	127,w
  7519  0145  07CA               	addwf	sprintf@ap,f
  7520                           
  7521                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7522  0146  0852               	movf	sprintf@prec,w
  7523  0147  0453               	iorwf	sprintf@prec+1,w
  7524  0148  1D03               	btfss	3,2
  7525  0149  2954               	goto	l4030
  7526  014A  084E               	movf	sprintf@val+3,w
  7527  014B  044D               	iorwf	sprintf@val+2,w
  7528  014C  044C               	iorwf	sprintf@val+1,w
  7529  014D  044B               	iorwf	sprintf@val,w
  7530  014E  1D03               	skipz
  7531  014F  2954               	goto	l4030
  7532                           
  7533                           ;doprnt.c: 1310: prec++;
  7534  0150  3001               	movlw	1
  7535  0151  07D2               	addwf	sprintf@prec,f
  7536  0152  3000               	movlw	0
  7537  0153  3DD3               	addwfc	sprintf@prec+1,f
  7538  0154                     l4030:	
  7539                           
  7540                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7541  0154  01D4               	clrf	sprintf@c
  7542  0155  0AD4               	incf	sprintf@c,f
  7543  0156  300A               	movlw	10
  7544  0157  0654               	xorwf	sprintf@c,w
  7545  0158  1903               	btfsc	3,2
  7546  0159  2987               	goto	l4044
  7547  015A                     l4036:	
  7548                           
  7549                           ;doprnt.c: 1325: if(val < dpowers[c])
  7550  015A  0854               	movf	sprintf@c,w
  7551  015B  00FE               	movwf	126
  7552  015C  01FF               	clrf	127
  7553  015D  35FE               	lslf	126,f
  7554  015E  0DFF               	rlf	127,f
  7555  015F  35FE               	lslf	126,f
  7556  0160  0DFF               	rlf	127,f
  7557  0161  3000               	movlw	low (_dpowers| (0+32768))
  7558  0162  077E               	addwf	126,w
  7559  0163  0084               	movwf	4
  7560  0164  3090               	movlw	high (_dpowers| (0+32768))
  7561  0165  3D7F               	addwfc	127,w
  7562  0166  0085               	movwf	5
  7563  0167  3F00               	moviw [0]fsr0
  7564  0168  00C5               	movwf	??_sprintf
  7565  0169  3F01               	moviw [1]fsr0
  7566  016A  00C6               	movwf	??_sprintf+1
  7567  016B  3F02               	moviw [2]fsr0
  7568  016C  00C7               	movwf	??_sprintf+2
  7569  016D  3F03               	moviw [3]fsr0
  7570  016E  00C8               	movwf	??_sprintf+3
  7571  016F  0848               	movf	??_sprintf+3,w
  7572  0170  024E               	subwf	sprintf@val+3,w
  7573  0171  1D03               	skipz
  7574  0172  297D               	goto	u4405
  7575  0173  0847               	movf	??_sprintf+2,w
  7576  0174  024D               	subwf	sprintf@val+2,w
  7577  0175  1D03               	skipz
  7578  0176  297D               	goto	u4405
  7579  0177  0846               	movf	??_sprintf+1,w
  7580  0178  024C               	subwf	sprintf@val+1,w
  7581  0179  1D03               	skipz
  7582  017A  297D               	goto	u4405
  7583  017B  0845               	movf	??_sprintf,w
  7584  017C  024B               	subwf	sprintf@val,w
  7585  017D                     u4405:	
  7586  017D  1C03               	btfss	3,0
  7587  017E  2987               	goto	l4044
  7588                           
  7589                           ;doprnt.c: 1326: break;
  7590  017F  3001               	movlw	1
  7591  0180  00FF               	movwf	127
  7592  0181  087F               	movf	127,w
  7593  0182  07D4               	addwf	sprintf@c,f
  7594  0183  300A               	movlw	10
  7595  0184  0654               	xorwf	sprintf@c,w
  7596  0185  1D03               	btfss	3,2
  7597  0186  295A               	goto	l4036
  7598  0187                     l4044:	
  7599                           
  7600                           ;doprnt.c: 1358: if(c < prec)
  7601  0187  0853               	movf	sprintf@prec+1,w
  7602  0188  3A80               	xorlw	128
  7603  0189  3C80               	sublw	128
  7604  018A  1D03               	skipz
  7605  018B  298E               	goto	u4425
  7606  018C  0852               	movf	sprintf@prec,w
  7607  018D  0254               	subwf	sprintf@c,w
  7608  018E                     u4425:	
  7609  018E  1803               	skipnc
  7610  018F  2996               	goto	l4048
  7611                           
  7612                           ;doprnt.c: 1359: c = prec;
  7613  0190  0020               	movlb	0	; select bank0
  7614  0191  0852               	movf	sprintf@prec,w
  7615  0192  00FF               	movwf	127
  7616  0193  087F               	movf	127,w
  7617  0194  00D4               	movwf	sprintf@c
  7618  0195  29AA               	goto	l4052
  7619  0196                     l4048:	
  7620                           
  7621                           ;doprnt.c: 1360: else if(prec < c)
  7622  0196  0020               	movlb	0	; select bank0
  7623  0197  0853               	movf	sprintf@prec+1,w
  7624  0198  3A80               	xorlw	128
  7625  0199  00C5               	movwf	??_sprintf
  7626  019A  3080               	movlw	128
  7627  019B  0245               	subwf	??_sprintf,w
  7628  019C  1D03               	skipz
  7629  019D  29A0               	goto	u4435
  7630  019E  0854               	movf	sprintf@c,w
  7631  019F  0252               	subwf	sprintf@prec,w
  7632  01A0                     u4435:	
  7633  01A0  1803               	skipnc
  7634  01A1  29AA               	goto	l4052
  7635                           
  7636                           ;doprnt.c: 1361: prec = c;
  7637  01A2  0020               	movlb	0	; select bank0
  7638  01A3  0854               	movf	sprintf@c,w
  7639  01A4  00FE               	movwf	126
  7640  01A5  01FF               	clrf	127
  7641  01A6  087E               	movf	126,w
  7642  01A7  00D2               	movwf	sprintf@prec
  7643  01A8  087F               	movf	127,w
  7644  01A9  00D3               	movwf	sprintf@prec+1
  7645  01AA                     l4052:	
  7646                           
  7647                           ;doprnt.c: 1400: if(width > c)
  7648  01AA  0020               	movlb	0	; select bank0
  7649  01AB  0851               	movf	sprintf@width+1,w
  7650  01AC  3A80               	xorlw	128
  7651  01AD  3C80               	sublw	128
  7652  01AE  1D03               	skipz
  7653  01AF  29B2               	goto	u4445
  7654  01B0  0850               	movf	sprintf@width,w
  7655  01B1  0254               	subwf	sprintf@c,w
  7656  01B2                     u4445:	
  7657  01B2  1803               	skipnc
  7658  01B3  29BD               	goto	l4056
  7659                           
  7660                           ;doprnt.c: 1401: width -= c;
  7661  01B4  0020               	movlb	0	; select bank0
  7662  01B5  0854               	movf	sprintf@c,w
  7663  01B6  00FE               	movwf	126
  7664  01B7  01FF               	clrf	127
  7665  01B8  087E               	movf	126,w
  7666  01B9  02D0               	subwf	sprintf@width,f
  7667  01BA  087F               	movf	127,w
  7668  01BB  3BD1               	subwfb	sprintf@width+1,f
  7669  01BC  29C0               	goto	l4058
  7670  01BD                     l4056:	
  7671                           
  7672                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7673  01BD  0020               	movlb	0	; select bank0
  7674  01BE  01D0               	clrf	sprintf@width
  7675  01BF  01D1               	clrf	sprintf@width+1
  7676  01C0                     l4058:	
  7677                           
  7678                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7679  01C0  0850               	movf	sprintf@width,w
  7680  01C1  0451               	iorwf	sprintf@width+1,w
  7681  01C2  1903               	btfsc	3,2
  7682  01C3  2A1A               	goto	l4072
  7683                           
  7684                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7685                           
  7686                           ;doprnt.c: 1448: do
  7687  01C4  3020               	movlw	32
  7688  01C5  00FF               	movwf	127
  7689  01C6  084F               	movf	sprintf@sp,w
  7690  01C7  0084               	movwf	4
  7691  01C8  3001               	movlw	1	; select bank2/3
  7692  01C9  0085               	movwf	5
  7693  01CA  087F               	movf	127,w
  7694  01CB  0080               	movwf	0
  7695  01CC  3001               	movlw	1
  7696  01CD  00FF               	movwf	127
  7697  01CE  087F               	movf	127,w
  7698  01CF  07CF               	addwf	sprintf@sp,f
  7699                           
  7700                           ;doprnt.c: 1450: while(--width);
  7701  01D0  30FF               	movlw	255
  7702  01D1  07D0               	addwf	sprintf@width,f
  7703  01D2  30FF               	movlw	255
  7704  01D3  3DD1               	addwfc	sprintf@width+1,f
  7705  01D4  29C0               	goto	l4058
  7706  01D5                     l4066:	
  7707                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7708                           
  7709                           
  7710                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7711  01D5  3000               	movlw	0
  7712  01D6  00B6               	movwf	___llmod@divisor+3
  7713  01D7  3000               	movlw	0
  7714  01D8  00B5               	movwf	___llmod@divisor+2
  7715  01D9  3000               	movlw	0
  7716  01DA  00B4               	movwf	___llmod@divisor+1
  7717  01DB  300A               	movlw	10
  7718  01DC  00B3               	movwf	___llmod@divisor
  7719  01DD  0853               	movf	sprintf@prec+1,w
  7720  01DE  0085               	movwf	5
  7721  01DF  0852               	movf	sprintf@prec,w
  7722  01E0  0084               	movwf	4
  7723  01E1  3584               	lslf	4,f
  7724  01E2  0D85               	rlf	5,f
  7725  01E3  3584               	lslf	4,f
  7726  01E4  0D85               	rlf	5,f
  7727  01E5  3000               	movlw	low (_dpowers| (0+32768))
  7728  01E6  0784               	addwf	4,f
  7729  01E7  3090               	movlw	high (_dpowers| (0+32768))
  7730  01E8  3D85               	addwfc	5,f
  7731  01E9  3F00               	moviw [0]fsr0
  7732  01EA  00A6               	movwf	___lldiv@divisor
  7733  01EB  3F01               	moviw [1]fsr0
  7734  01EC  00A7               	movwf	___lldiv@divisor+1
  7735  01ED  3F02               	moviw [2]fsr0
  7736  01EE  00A8               	movwf	___lldiv@divisor+2
  7737  01EF  3F03               	moviw [3]fsr0
  7738  01F0  00A9               	movwf	___lldiv@divisor+3
  7739  01F1  084E               	movf	sprintf@val+3,w
  7740  01F2  00AD               	movwf	___lldiv@dividend+3
  7741  01F3  084D               	movf	sprintf@val+2,w
  7742  01F4  00AC               	movwf	___lldiv@dividend+2
  7743  01F5  084C               	movf	sprintf@val+1,w
  7744  01F6  00AB               	movwf	___lldiv@dividend+1
  7745  01F7  084B               	movf	sprintf@val,w
  7746  01F8  00AA               	movwf	___lldiv@dividend
  7747  01F9  318C  24FE  3180   	fcall	___lldiv
  7748  01FC  0020               	movlb	0	; select bank0
  7749  01FD  0829               	movf	?___lldiv+3,w
  7750  01FE  00BA               	movwf	___llmod@dividend+3
  7751  01FF  0828               	movf	?___lldiv+2,w
  7752  0200  00B9               	movwf	___llmod@dividend+2
  7753  0201  0827               	movf	?___lldiv+1,w
  7754  0202  00B8               	movwf	___llmod@dividend+1
  7755  0203  0826               	movf	?___lldiv,w
  7756  0204  00B7               	movwf	___llmod@dividend
  7757  0205  318B  23A8  3180   	fcall	___llmod
  7758  0208  0020               	movlb	0	; select bank0
  7759  0209  0833               	movf	?___llmod,w
  7760  020A  3E30               	addlw	48
  7761  020B  00FF               	movwf	127
  7762  020C  087F               	movf	127,w
  7763  020D  00D4               	movwf	sprintf@c
  7764                           
  7765                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7766  020E  0854               	movf	sprintf@c,w
  7767  020F  00FF               	movwf	127
  7768  0210  084F               	movf	sprintf@sp,w
  7769  0211  0084               	movwf	4
  7770  0212  3001               	movlw	1	; select bank2/3
  7771  0213  0085               	movwf	5
  7772  0214  087F               	movf	127,w
  7773  0215  0080               	movwf	0
  7774  0216  3001               	movlw	1
  7775  0217  00FF               	movwf	127
  7776  0218  087F               	movf	127,w
  7777  0219  07CF               	addwf	sprintf@sp,f
  7778  021A                     l4072:	
  7779  021A  30FF               	movlw	255
  7780  021B  07D2               	addwf	sprintf@prec,f
  7781  021C  30FF               	movlw	255
  7782  021D  3DD3               	addwfc	sprintf@prec+1,f
  7783  021E  0A52               	incf	sprintf@prec,w
  7784  021F  1D03               	skipz
  7785  0220  29D5               	goto	l4066
  7786  0221  0A53               	incf	sprintf@prec+1,w
  7787  0222  1903               	btfsc	3,2
  7788  0223  2864               	goto	l4074
  7789  0224  29D5               	goto	l4066
  7790  0225                     l4076:	
  7791                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7792                           
  7793                           
  7794                           ;doprnt.c: 1557: *sp = 0;
  7795  0225  084F               	movf	sprintf@sp,w
  7796  0226  0084               	movwf	4
  7797  0227  3001               	movlw	1	; select bank2/3
  7798  0228  0085               	movwf	5
  7799  0229  0180               	clrf	0
  7800  022A  0008               	return
  7801  022B                     __end_of_sprintf:	
  7802                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7803                           
  7804                           
  7805                           	psect	text28
  7806  0858                     __ptext28:	
  7807 ;; *************** function _isdigit *****************
  7808 ;; Defined at:
  7809 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7810 ;; Parameters:    Size  Location     Type
  7811 ;;  c               1    wreg     unsigned char 
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;  c               1    1[COMMON] unsigned char 
  7814 ;; Return value:  Size  Location     Type
  7815 ;;		None               void
  7816 ;; Registers used:
  7817 ;;		wreg, status,2, status,0
  7818 ;; Tracked objects:
  7819 ;;		On entry : 0/0
  7820 ;;		On exit  : 0/0
  7821 ;;		Unchanged: 0/0
  7822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7824 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7826 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7827 ;;Total ram usage:        2 bytes
  7828 ;; Hardware stack levels used:    1
  7829 ;; Hardware stack levels required when called:    7
  7830 ;; This function calls:
  7831 ;;		Nothing
  7832 ;; This function is called by:
  7833 ;;		_sprintf
  7834 ;; This function uses a non-reentrant model
  7835 ;;
  7836                           
  7837                           
  7838                           ;psect for function _isdigit
  7839  0858                     _isdigit:	
  7840                           
  7841                           ;incstack = 0
  7842                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7843                           ;isdigit@c stored from wreg
  7844  0858  00F1               	movwf	isdigit@c
  7845  0859  01F0               	clrf	_isdigit$2025
  7846  085A  303A               	movlw	58
  7847  085B  0271               	subwf	isdigit@c,w
  7848  085C  1803               	skipnc
  7849  085D  2864               	goto	l3760
  7850  085E  3030               	movlw	48
  7851  085F  0271               	subwf	isdigit@c,w
  7852  0860  1C03               	skipc
  7853  0861  2864               	goto	l3760
  7854  0862  01F0               	clrf	_isdigit$2025
  7855  0863  0AF0               	incf	_isdigit$2025,f
  7856  0864                     l3760:	
  7857  0864  0C70               	rrf	_isdigit$2025,w
  7858  0865  0008               	return
  7859  0866                     __end_of_isdigit:	
  7860                           
  7861                           	psect	text29
  7862  0918                     __ptext29:	
  7863 ;; *************** function ___wmul *****************
  7864 ;; Defined at:
  7865 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7866 ;; Parameters:    Size  Location     Type
  7867 ;;  multiplier      2    0[COMMON] unsigned int 
  7868 ;;  multiplicand    2    2[COMMON] unsigned int 
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;  product         2    6[BANK0 ] unsigned int 
  7871 ;; Return value:  Size  Location     Type
  7872 ;;                  2    0[COMMON] unsigned int 
  7873 ;; Registers used:
  7874 ;;		wreg, status,2, status,0
  7875 ;; Tracked objects:
  7876 ;;		On entry : 0/0
  7877 ;;		On exit  : 0/0
  7878 ;;		Unchanged: 0/0
  7879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7880 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7881 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7883 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7884 ;;Total ram usage:        6 bytes
  7885 ;; Hardware stack levels used:    1
  7886 ;; Hardware stack levels required when called:    7
  7887 ;; This function calls:
  7888 ;;		Nothing
  7889 ;; This function is called by:
  7890 ;;		_sprintf
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           
  7895                           ;psect for function ___wmul
  7896  0918                     ___wmul:	
  7897                           
  7898                           ;incstack = 0
  7899                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7900  0918  0020               	movlb	0	; select bank0
  7901  0919  01A6               	clrf	___wmul@product
  7902  091A  01A7               	clrf	___wmul@product+1
  7903  091B                     l3766:	
  7904  091B  1C70               	btfss	___wmul@multiplier,0
  7905  091C  2922               	goto	l552
  7906  091D  0872               	movf	___wmul@multiplicand,w
  7907  091E  0020               	movlb	0	; select bank0
  7908  091F  07A6               	addwf	___wmul@product,f
  7909  0920  0873               	movf	___wmul@multiplicand+1,w
  7910  0921  3DA7               	addwfc	___wmul@product+1,f
  7911  0922                     l552:	
  7912  0922  3001               	movlw	1
  7913  0923                     u3785:	
  7914  0923  35F2               	lslf	___wmul@multiplicand,f
  7915  0924  0DF3               	rlf	___wmul@multiplicand+1,f
  7916  0925  0B89               	decfsz	9,f
  7917  0926  2923               	goto	u3785
  7918  0927  3001               	movlw	1
  7919  0928                     u3795:	
  7920  0928  36F1               	lsrf	___wmul@multiplier+1,f
  7921  0929  0CF0               	rrf	___wmul@multiplier,f
  7922  092A  0B89               	decfsz	9,f
  7923  092B  2928               	goto	u3795
  7924  092C  0870               	movf	___wmul@multiplier,w
  7925  092D  0471               	iorwf	___wmul@multiplier+1,w
  7926  092E  1D03               	btfss	3,2
  7927  092F  291B               	goto	l3766
  7928  0930  0020               	movlb	0	; select bank0
  7929  0931  0827               	movf	___wmul@product+1,w
  7930  0932  00F1               	movwf	?___wmul+1
  7931  0933  0826               	movf	___wmul@product,w
  7932  0934  00F0               	movwf	?___wmul
  7933  0935  0008               	return
  7934  0936                     __end_of___wmul:	
  7935                           
  7936                           	psect	text30
  7937  0BA8                     __ptext30:	
  7938 ;; *************** function ___llmod *****************
  7939 ;; Defined at:
  7940 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  7941 ;; Parameters:    Size  Location     Type
  7942 ;;  divisor         4   19[BANK0 ] unsigned long 
  7943 ;;  dividend        4   23[BANK0 ] unsigned long 
  7944 ;; Auto vars:     Size  Location     Type
  7945 ;;  counter         1    0[COMMON] unsigned char 
  7946 ;; Return value:  Size  Location     Type
  7947 ;;                  4   19[BANK0 ] unsigned long 
  7948 ;; Registers used:
  7949 ;;		wreg, status,2, status,0, btemp+11
  7950 ;; Tracked objects:
  7951 ;;		On entry : 0/0
  7952 ;;		On exit  : 0/0
  7953 ;;		Unchanged: 0/0
  7954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7955 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7958 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7959 ;;Total ram usage:        9 bytes
  7960 ;; Hardware stack levels used:    1
  7961 ;; Hardware stack levels required when called:    7
  7962 ;; This function calls:
  7963 ;;		Nothing
  7964 ;; This function is called by:
  7965 ;;		_sprintf
  7966 ;; This function uses a non-reentrant model
  7967 ;;
  7968                           
  7969                           
  7970                           ;psect for function ___llmod
  7971  0BA8                     ___llmod:	
  7972                           
  7973                           ;incstack = 0
  7974                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+11]
  7975  0BA8  0020               	movlb	0	; select bank0
  7976  0BA9  0836               	movf	___llmod@divisor+3,w
  7977  0BAA  0435               	iorwf	___llmod@divisor+2,w
  7978  0BAB  0434               	iorwf	___llmod@divisor+1,w
  7979  0BAC  0433               	iorwf	___llmod@divisor,w
  7980  0BAD  1903               	skipnz
  7981  0BAE  2BE2               	goto	l3898
  7982  0BAF  01F0               	clrf	___llmod@counter
  7983  0BB0  0AF0               	incf	___llmod@counter,f
  7984  0BB1                     l3888:	
  7985  0BB1  1BB6               	btfsc	___llmod@divisor+3,7
  7986  0BB2  2BBF               	goto	l3890
  7987  0BB3  3001               	movlw	1
  7988  0BB4                     u4125:	
  7989  0BB4  35B3               	lslf	___llmod@divisor,f
  7990  0BB5  0DB4               	rlf	___llmod@divisor+1,f
  7991  0BB6  0DB5               	rlf	___llmod@divisor+2,f
  7992  0BB7  0DB6               	rlf	___llmod@divisor+3,f
  7993  0BB8  0B89               	decfsz	9,f
  7994  0BB9  2BB4               	goto	u4125
  7995  0BBA  3001               	movlw	1
  7996  0BBB  00FF               	movwf	127
  7997  0BBC  087F               	movf	127,w
  7998  0BBD  07F0               	addwf	___llmod@counter,f
  7999  0BBE  2BB1               	goto	l3888
  8000  0BBF                     l3890:	
  8001  0BBF  0836               	movf	___llmod@divisor+3,w
  8002  0BC0  023A               	subwf	___llmod@dividend+3,w
  8003  0BC1  1D03               	skipz
  8004  0BC2  2BCD               	goto	u4145
  8005  0BC3  0835               	movf	___llmod@divisor+2,w
  8006  0BC4  0239               	subwf	___llmod@dividend+2,w
  8007  0BC5  1D03               	skipz
  8008  0BC6  2BCD               	goto	u4145
  8009  0BC7  0834               	movf	___llmod@divisor+1,w
  8010  0BC8  0238               	subwf	___llmod@dividend+1,w
  8011  0BC9  1D03               	skipz
  8012  0BCA  2BCD               	goto	u4145
  8013  0BCB  0833               	movf	___llmod@divisor,w
  8014  0BCC  0237               	subwf	___llmod@dividend,w
  8015  0BCD                     u4145:	
  8016  0BCD  1C03               	skipc
  8017  0BCE  2BD7               	goto	l3894
  8018  0BCF  0833               	movf	___llmod@divisor,w
  8019  0BD0  02B7               	subwf	___llmod@dividend,f
  8020  0BD1  0834               	movf	___llmod@divisor+1,w
  8021  0BD2  3BB8               	subwfb	___llmod@dividend+1,f
  8022  0BD3  0835               	movf	___llmod@divisor+2,w
  8023  0BD4  3BB9               	subwfb	___llmod@dividend+2,f
  8024  0BD5  0836               	movf	___llmod@divisor+3,w
  8025  0BD6  3BBA               	subwfb	___llmod@dividend+3,f
  8026  0BD7                     l3894:	
  8027  0BD7  3001               	movlw	1
  8028  0BD8                     u4155:	
  8029  0BD8  36B6               	lsrf	___llmod@divisor+3,f
  8030  0BD9  0CB5               	rrf	___llmod@divisor+2,f
  8031  0BDA  0CB4               	rrf	___llmod@divisor+1,f
  8032  0BDB  0CB3               	rrf	___llmod@divisor,f
  8033  0BDC  0B89               	decfsz	9,f
  8034  0BDD  2BD8               	goto	u4155
  8035  0BDE  3001               	movlw	1
  8036  0BDF  02F0               	subwf	___llmod@counter,f
  8037  0BE0  1D03               	btfss	3,2
  8038  0BE1  2BBF               	goto	l3890
  8039  0BE2                     l3898:	
  8040  0BE2  083A               	movf	___llmod@dividend+3,w
  8041  0BE3  00B6               	movwf	?___llmod+3
  8042  0BE4  0839               	movf	___llmod@dividend+2,w
  8043  0BE5  00B5               	movwf	?___llmod+2
  8044  0BE6  0838               	movf	___llmod@dividend+1,w
  8045  0BE7  00B4               	movwf	?___llmod+1
  8046  0BE8  0837               	movf	___llmod@dividend,w
  8047  0BE9  00B3               	movwf	?___llmod
  8048  0BEA  0008               	return
  8049  0BEB                     __end_of___llmod:	
  8050                           
  8051                           	psect	text31
  8052  0CFE                     __ptext31:	
  8053 ;; *************** function ___lldiv *****************
  8054 ;; Defined at:
  8055 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  8056 ;; Parameters:    Size  Location     Type
  8057 ;;  divisor         4    6[BANK0 ] unsigned long 
  8058 ;;  dividend        4   10[BANK0 ] unsigned long 
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;  quotient        4   14[BANK0 ] unsigned long 
  8061 ;;  counter         1   18[BANK0 ] unsigned char 
  8062 ;; Return value:  Size  Location     Type
  8063 ;;                  4    6[BANK0 ] unsigned long 
  8064 ;; Registers used:
  8065 ;;		wreg, status,2, status,0, btemp+11
  8066 ;; Tracked objects:
  8067 ;;		On entry : 0/0
  8068 ;;		On exit  : 0/0
  8069 ;;		Unchanged: 0/0
  8070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8071 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8074 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8075 ;;Total ram usage:       13 bytes
  8076 ;; Hardware stack levels used:    1
  8077 ;; Hardware stack levels required when called:    7
  8078 ;; This function calls:
  8079 ;;		Nothing
  8080 ;; This function is called by:
  8081 ;;		_sprintf
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           
  8086                           ;psect for function ___lldiv
  8087  0CFE                     ___lldiv:	
  8088                           
  8089                           ;incstack = 0
  8090                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+11]
  8091  0CFE  3000               	movlw	0
  8092  0CFF  0020               	movlb	0	; select bank0
  8093  0D00  00B1               	movwf	___lldiv@quotient+3
  8094  0D01  3000               	movlw	0
  8095  0D02  00B0               	movwf	___lldiv@quotient+2
  8096  0D03  3000               	movlw	0
  8097  0D04  00AF               	movwf	___lldiv@quotient+1
  8098  0D05  3000               	movlw	0
  8099  0D06  00AE               	movwf	___lldiv@quotient
  8100  0D07  0829               	movf	___lldiv@divisor+3,w
  8101  0D08  0428               	iorwf	___lldiv@divisor+2,w
  8102  0D09  0427               	iorwf	___lldiv@divisor+1,w
  8103  0D0A  0426               	iorwf	___lldiv@divisor,w
  8104  0D0B  1903               	skipnz
  8105  0D0C  2D48               	goto	l3800
  8106  0D0D  01B2               	clrf	___lldiv@counter
  8107  0D0E  0AB2               	incf	___lldiv@counter,f
  8108  0D0F                     l3786:	
  8109  0D0F  1BA9               	btfsc	___lldiv@divisor+3,7
  8110  0D10  2D1D               	goto	l3788
  8111  0D11  3001               	movlw	1
  8112  0D12                     u3825:	
  8113  0D12  35A6               	lslf	___lldiv@divisor,f
  8114  0D13  0DA7               	rlf	___lldiv@divisor+1,f
  8115  0D14  0DA8               	rlf	___lldiv@divisor+2,f
  8116  0D15  0DA9               	rlf	___lldiv@divisor+3,f
  8117  0D16  0B89               	decfsz	9,f
  8118  0D17  2D12               	goto	u3825
  8119  0D18  3001               	movlw	1
  8120  0D19  00FF               	movwf	127
  8121  0D1A  087F               	movf	127,w
  8122  0D1B  07B2               	addwf	___lldiv@counter,f
  8123  0D1C  2D0F               	goto	l3786
  8124  0D1D                     l3788:	
  8125  0D1D  3001               	movlw	1
  8126  0D1E                     u3845:	
  8127  0D1E  35AE               	lslf	___lldiv@quotient,f
  8128  0D1F  0DAF               	rlf	___lldiv@quotient+1,f
  8129  0D20  0DB0               	rlf	___lldiv@quotient+2,f
  8130  0D21  0DB1               	rlf	___lldiv@quotient+3,f
  8131  0D22  0B89               	decfsz	9,f
  8132  0D23  2D1E               	goto	u3845
  8133  0D24  0829               	movf	___lldiv@divisor+3,w
  8134  0D25  022D               	subwf	___lldiv@dividend+3,w
  8135  0D26  1D03               	skipz
  8136  0D27  2D32               	goto	u3855
  8137  0D28  0828               	movf	___lldiv@divisor+2,w
  8138  0D29  022C               	subwf	___lldiv@dividend+2,w
  8139  0D2A  1D03               	skipz
  8140  0D2B  2D32               	goto	u3855
  8141  0D2C  0827               	movf	___lldiv@divisor+1,w
  8142  0D2D  022B               	subwf	___lldiv@dividend+1,w
  8143  0D2E  1D03               	skipz
  8144  0D2F  2D32               	goto	u3855
  8145  0D30  0826               	movf	___lldiv@divisor,w
  8146  0D31  022A               	subwf	___lldiv@dividend,w
  8147  0D32                     u3855:	
  8148  0D32  1C03               	skipc
  8149  0D33  2D3D               	goto	l3796
  8150  0D34  0826               	movf	___lldiv@divisor,w
  8151  0D35  02AA               	subwf	___lldiv@dividend,f
  8152  0D36  0827               	movf	___lldiv@divisor+1,w
  8153  0D37  3BAB               	subwfb	___lldiv@dividend+1,f
  8154  0D38  0828               	movf	___lldiv@divisor+2,w
  8155  0D39  3BAC               	subwfb	___lldiv@dividend+2,f
  8156  0D3A  0829               	movf	___lldiv@divisor+3,w
  8157  0D3B  3BAD               	subwfb	___lldiv@dividend+3,f
  8158  0D3C  142E               	bsf	___lldiv@quotient,0
  8159  0D3D                     l3796:	
  8160  0D3D  3001               	movlw	1
  8161  0D3E                     u3865:	
  8162  0D3E  36A9               	lsrf	___lldiv@divisor+3,f
  8163  0D3F  0CA8               	rrf	___lldiv@divisor+2,f
  8164  0D40  0CA7               	rrf	___lldiv@divisor+1,f
  8165  0D41  0CA6               	rrf	___lldiv@divisor,f
  8166  0D42  0B89               	decfsz	9,f
  8167  0D43  2D3E               	goto	u3865
  8168  0D44  3001               	movlw	1
  8169  0D45  02B2               	subwf	___lldiv@counter,f
  8170  0D46  1D03               	btfss	3,2
  8171  0D47  2D1D               	goto	l3788
  8172  0D48                     l3800:	
  8173  0D48  0831               	movf	___lldiv@quotient+3,w
  8174  0D49  00A9               	movwf	?___lldiv+3
  8175  0D4A  0830               	movf	___lldiv@quotient+2,w
  8176  0D4B  00A8               	movwf	?___lldiv+2
  8177  0D4C  082F               	movf	___lldiv@quotient+1,w
  8178  0D4D  00A7               	movwf	?___lldiv+1
  8179  0D4E  082E               	movf	___lldiv@quotient,w
  8180  0D4F  00A6               	movwf	?___lldiv
  8181  0D50  0008               	return
  8182  0D51                     __end_of___lldiv:	
  8183                           
  8184                           	psect	text32
  8185  0A19                     __ptext32:	
  8186 ;; *************** function ___lltoft *****************
  8187 ;; Defined at:
  8188 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;  c               4    0[COMMON] unsigned long 
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;  exp             1   11[BANK0 ] unsigned char 
  8193 ;; Return value:  Size  Location     Type
  8194 ;;                  3    0[COMMON] float 
  8195 ;; Registers used:
  8196 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8202 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;Total ram usage:        5 bytes
  8207 ;; Hardware stack levels used:    1
  8208 ;; Hardware stack levels required when called:    8
  8209 ;; This function calls:
  8210 ;;		___ftpack
  8211 ;; This function is called by:
  8212 ;;		_ftoa
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           
  8217                           ;psect for function ___lltoft
  8218  0A19                     ___lltoft:	
  8219                           
  8220                           ;incstack = 0
  8221                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8222  0A19  308E               	movlw	142
  8223  0A1A  00FF               	movwf	127
  8224  0A1B  087F               	movf	127,w
  8225  0A1C  0020               	movlb	0	; select bank0
  8226  0A1D  00AB               	movwf	___lltoft@exp
  8227  0A1E                     l4236:	
  8228  0A1E  30FF               	movlw	255
  8229  0A1F  0573               	andwf	___lltoft@c+3,w
  8230  0A20  1903               	btfsc	3,2
  8231  0A21  2A2E               	goto	l4238
  8232  0A22  3001               	movlw	1
  8233  0A23                     u4785:	
  8234  0A23  36F3               	lsrf	___lltoft@c+3,f
  8235  0A24  0CF2               	rrf	___lltoft@c+2,f
  8236  0A25  0CF1               	rrf	___lltoft@c+1,f
  8237  0A26  0CF0               	rrf	___lltoft@c,f
  8238  0A27  0B89               	decfsz	9,f
  8239  0A28  2A23               	goto	u4785
  8240  0A29  3001               	movlw	1
  8241  0A2A  00FF               	movwf	127
  8242  0A2B  087F               	movf	127,w
  8243  0A2C  07AB               	addwf	___lltoft@exp,f
  8244  0A2D  2A1E               	goto	l4236
  8245  0A2E                     l4238:	
  8246  0A2E  0870               	movf	___lltoft@c,w
  8247  0A2F  00A6               	movwf	___ftpack@arg
  8248  0A30  0871               	movf	___lltoft@c+1,w
  8249  0A31  00A7               	movwf	___ftpack@arg+1
  8250  0A32  0872               	movf	___lltoft@c+2,w
  8251  0A33  00A8               	movwf	___ftpack@arg+2
  8252  0A34  082B               	movf	___lltoft@exp,w
  8253  0A35  00FF               	movwf	127
  8254  0A36  087F               	movf	127,w
  8255  0A37  00A9               	movwf	___ftpack@exp
  8256  0A38  01AA               	clrf	___ftpack@sign
  8257  0A39  318D  2551         	fcall	___ftpack
  8258  0A3B  0020               	movlb	0	; select bank0
  8259  0A3C  0826               	movf	?___ftpack,w
  8260  0A3D  00F0               	movwf	?___lltoft
  8261  0A3E  0827               	movf	?___ftpack+1,w
  8262  0A3F  00F1               	movwf	?___lltoft+1
  8263  0A40  0828               	movf	?___ftpack+2,w
  8264  0A41  00F2               	movwf	?___lltoft+2
  8265  0A42  0008               	return
  8266  0A43                     __end_of___lltoft:	
  8267                           
  8268                           	psect	text33
  8269  0E3B                     __ptext33:	
  8270 ;; *************** function ___fttol *****************
  8271 ;; Defined at:
  8272 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  8273 ;; Parameters:    Size  Location     Type
  8274 ;;  f1              3   55[BANK0 ] float 
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;  lval            4   60[BANK0 ] unsigned long 
  8277 ;;  exp1            1   64[BANK0 ] unsigned char 
  8278 ;;  sign1           1   59[BANK0 ] unsigned char 
  8279 ;; Return value:  Size  Location     Type
  8280 ;;                  4   55[BANK0 ] long 
  8281 ;; Registers used:
  8282 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8283 ;; Tracked objects:
  8284 ;;		On entry : 0/0
  8285 ;;		On exit  : 0/0
  8286 ;;		Unchanged: 0/0
  8287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8288 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8291 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;Total ram usage:       10 bytes
  8293 ;; Hardware stack levels used:    1
  8294 ;; Hardware stack levels required when called:    7
  8295 ;; This function calls:
  8296 ;;		Nothing
  8297 ;; This function is called by:
  8298 ;;		_ftoa
  8299 ;; This function uses a non-reentrant model
  8300 ;;
  8301                           
  8302                           
  8303                           ;psect for function ___fttol
  8304  0E3B                     ___fttol:	
  8305                           
  8306                           ;incstack = 0
  8307                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+9-btemp+11]
  8308  0E3B  0020               	movlb	0	; select bank0
  8309  0E3C  0857               	movf	___fttol@f1,w
  8310  0E3D  00FD               	movwf	125
  8311  0E3E  0858               	movf	___fttol@f1+1,w
  8312  0E3F  00FE               	movwf	126
  8313  0E40  0859               	movf	___fttol@f1+2,w
  8314  0E41  00FF               	movwf	127
  8315  0E42  1003               	clrc
  8316  0E43  0D7E               	rlf	126,w
  8317  0E44  0D7F               	rlf	127,w
  8318  0E45  00FF               	movwf	127
  8319  0E46  087F               	movf	127,w
  8320  0E47  00E0               	movwf	___fttol@exp1
  8321  0E48  0860               	movf	___fttol@exp1,w
  8322  0E49  1D03               	btfss	3,2
  8323  0E4A  2E54               	goto	l4192
  8324  0E4B  3000               	movlw	0
  8325  0E4C  00DA               	movwf	?___fttol+3
  8326  0E4D  3000               	movlw	0
  8327  0E4E  00D9               	movwf	?___fttol+2
  8328  0E4F  3000               	movlw	0
  8329  0E50  00D8               	movwf	?___fttol+1
  8330  0E51  3000               	movlw	0
  8331  0E52  00D7               	movwf	?___fttol
  8332  0E53  0008               	return
  8333  0E54                     l4192:	
  8334  0E54  0857               	movf	___fttol@f1,w
  8335  0E55  00FD               	movwf	125
  8336  0E56  0858               	movf	___fttol@f1+1,w
  8337  0E57  00FE               	movwf	126
  8338  0E58  0859               	movf	___fttol@f1+2,w
  8339  0E59  00FF               	movwf	127
  8340  0E5A  3017               	movlw	23
  8341  0E5B                     u4695:	
  8342  0E5B  36FF               	lsrf	127,f
  8343  0E5C  0CFE               	rrf	126,f
  8344  0E5D  0CFD               	rrf	125,f
  8345  0E5E  0B89               	decfsz	9,f
  8346  0E5F  2E5B               	goto	u4695
  8347  0E60  087D               	movf	125,w
  8348  0E61  00FF               	movwf	127
  8349  0E62  087F               	movf	127,w
  8350  0E63  00DB               	movwf	___fttol@sign1
  8351  0E64  17D8               	bsf	___fttol@f1+1,7
  8352  0E65  30FF               	movlw	255
  8353  0E66  05D7               	andwf	___fttol@f1,f
  8354  0E67  30FF               	movlw	255
  8355  0E68  05D8               	andwf	___fttol@f1+1,f
  8356  0E69  3000               	movlw	0
  8357  0E6A  05D9               	andwf	___fttol@f1+2,f
  8358  0E6B  0857               	movf	___fttol@f1,w
  8359  0E6C  00DC               	movwf	___fttol@lval
  8360  0E6D  0858               	movf	___fttol@f1+1,w
  8361  0E6E  00DD               	movwf	___fttol@lval+1
  8362  0E6F  0859               	movf	___fttol@f1+2,w
  8363  0E70  00DE               	movwf	___fttol@lval+2
  8364  0E71  01DF               	clrf	___fttol@lval+3
  8365  0E72  308E               	movlw	142
  8366  0E73  02E0               	subwf	___fttol@exp1,f
  8367  0E74  1FE0               	btfss	___fttol@exp1,7
  8368  0E75  2E92               	goto	l4214
  8369  0E76  0860               	movf	___fttol@exp1,w
  8370  0E77  3A80               	xorlw	128
  8371  0E78  3E8F               	addlw	143
  8372  0E79  1803               	skipnc
  8373  0E7A  2E84               	goto	l4210
  8374  0E7B  3000               	movlw	0
  8375  0E7C  00DA               	movwf	?___fttol+3
  8376  0E7D  3000               	movlw	0
  8377  0E7E  00D9               	movwf	?___fttol+2
  8378  0E7F  3000               	movlw	0
  8379  0E80  00D8               	movwf	?___fttol+1
  8380  0E81  3000               	movlw	0
  8381  0E82  00D7               	movwf	?___fttol
  8382  0E83  0008               	return
  8383  0E84                     l4210:	
  8384  0E84  3001               	movlw	1
  8385  0E85                     u4725:	
  8386  0E85  36DF               	lsrf	___fttol@lval+3,f
  8387  0E86  0CDE               	rrf	___fttol@lval+2,f
  8388  0E87  0CDD               	rrf	___fttol@lval+1,f
  8389  0E88  0CDC               	rrf	___fttol@lval,f
  8390  0E89  0B89               	decfsz	9,f
  8391  0E8A  2E85               	goto	u4725
  8392  0E8B  3001               	movlw	1
  8393  0E8C  00FF               	movwf	127
  8394  0E8D  087F               	movf	127,w
  8395  0E8E  07E0               	addwf	___fttol@exp1,f
  8396  0E8F  1903               	btfsc	3,2
  8397  0E90  2EAB               	goto	l4222
  8398  0E91  2E84               	goto	l4210
  8399  0E92                     l4214:	
  8400  0E92  3018               	movlw	24
  8401  0E93  0260               	subwf	___fttol@exp1,w
  8402  0E94  1C03               	skipc
  8403  0E95  2EA8               	goto	l846
  8404  0E96  3000               	movlw	0
  8405  0E97  00DA               	movwf	?___fttol+3
  8406  0E98  3000               	movlw	0
  8407  0E99  00D9               	movwf	?___fttol+2
  8408  0E9A  3000               	movlw	0
  8409  0E9B  00D8               	movwf	?___fttol+1
  8410  0E9C  3000               	movlw	0
  8411  0E9D  00D7               	movwf	?___fttol
  8412  0E9E  0008               	return
  8413  0E9F                     l4220:	
  8414  0E9F  3001               	movlw	1
  8415  0EA0                     u4755:	
  8416  0EA0  35DC               	lslf	___fttol@lval,f
  8417  0EA1  0DDD               	rlf	___fttol@lval+1,f
  8418  0EA2  0DDE               	rlf	___fttol@lval+2,f
  8419  0EA3  0DDF               	rlf	___fttol@lval+3,f
  8420  0EA4  0B89               	decfsz	9,f
  8421  0EA5  2EA0               	goto	u4755
  8422  0EA6  3001               	movlw	1
  8423  0EA7  02E0               	subwf	___fttol@exp1,f
  8424  0EA8                     l846:	
  8425  0EA8  0860               	movf	___fttol@exp1,w
  8426  0EA9  1D03               	btfss	3,2
  8427  0EAA  2E9F               	goto	l4220
  8428  0EAB                     l4222:	
  8429  0EAB  085B               	movf	___fttol@sign1,w
  8430  0EAC  1903               	btfsc	3,2
  8431  0EAD  2EB9               	goto	l4226
  8432  0EAE  09DC               	comf	___fttol@lval,f
  8433  0EAF  09DD               	comf	___fttol@lval+1,f
  8434  0EB0  09DE               	comf	___fttol@lval+2,f
  8435  0EB1  09DF               	comf	___fttol@lval+3,f
  8436  0EB2  0ADC               	incf	___fttol@lval,f
  8437  0EB3  1903               	skipnz
  8438  0EB4  0ADD               	incf	___fttol@lval+1,f
  8439  0EB5  1903               	skipnz
  8440  0EB6  0ADE               	incf	___fttol@lval+2,f
  8441  0EB7  1903               	skipnz
  8442  0EB8  0ADF               	incf	___fttol@lval+3,f
  8443  0EB9                     l4226:	
  8444  0EB9  085F               	movf	___fttol@lval+3,w
  8445  0EBA  00DA               	movwf	?___fttol+3
  8446  0EBB  085E               	movf	___fttol@lval+2,w
  8447  0EBC  00D9               	movwf	?___fttol+2
  8448  0EBD  085D               	movf	___fttol@lval+1,w
  8449  0EBE  00D8               	movwf	?___fttol+1
  8450  0EBF  085C               	movf	___fttol@lval,w
  8451  0EC0  00D7               	movwf	?___fttol
  8452  0EC1  0008               	return
  8453  0EC2                     __end_of___fttol:	
  8454                           
  8455                           	psect	text34
  8456  08FA                     __ptext34:	
  8457 ;; *************** function ___ftsub *****************
  8458 ;; Defined at:
  8459 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;  f2              3   21[BANK0 ] float 
  8462 ;;  f1              3   24[BANK0 ] float 
  8463 ;; Auto vars:     Size  Location     Type
  8464 ;;		None
  8465 ;; Return value:  Size  Location     Type
  8466 ;;                  3   21[BANK0 ] float 
  8467 ;; Registers used:
  8468 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8469 ;; Tracked objects:
  8470 ;;		On entry : 0/0
  8471 ;;		On exit  : 0/0
  8472 ;;		Unchanged: 0/0
  8473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8474 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8477 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8478 ;;Total ram usage:        6 bytes
  8479 ;; Hardware stack levels used:    1
  8480 ;; Hardware stack levels required when called:    9
  8481 ;; This function calls:
  8482 ;;		___ftadd
  8483 ;; This function is called by:
  8484 ;;		_ftoa
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           
  8489                           ;psect for function ___ftsub
  8490  08FA                     ___ftsub:	
  8491                           
  8492                           ;incstack = 0
  8493                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8494  08FA  0020               	movlb	0	; select bank0
  8495  08FB  0837               	movf	___ftsub@f2+2,w
  8496  08FC  0436               	iorwf	___ftsub@f2+1,w
  8497  08FD  0435               	iorwf	___ftsub@f2,w
  8498  08FE  1903               	skipnz
  8499  08FF  2902               	goto	l4182
  8500  0900  3080               	movlw	128
  8501  0901  06B7               	xorwf	___ftsub@f2+2,f
  8502  0902                     l4182:	
  8503  0902  0838               	movf	___ftsub@f1,w
  8504  0903  00AB               	movwf	___ftadd@f1
  8505  0904  0839               	movf	___ftsub@f1+1,w
  8506  0905  00AC               	movwf	___ftadd@f1+1
  8507  0906  083A               	movf	___ftsub@f1+2,w
  8508  0907  00AD               	movwf	___ftadd@f1+2
  8509  0908  0835               	movf	___ftsub@f2,w
  8510  0909  00AE               	movwf	___ftadd@f2
  8511  090A  0836               	movf	___ftsub@f2+1,w
  8512  090B  00AF               	movwf	___ftadd@f2+1
  8513  090C  0837               	movf	___ftsub@f2+2,w
  8514  090D  00B0               	movwf	___ftadd@f2+2
  8515  090E  3183  2332         	fcall	___ftadd
  8516  0910  0020               	movlb	0	; select bank0
  8517  0911  082B               	movf	?___ftadd,w
  8518  0912  00B5               	movwf	?___ftsub
  8519  0913  082C               	movf	?___ftadd+1,w
  8520  0914  00B6               	movwf	?___ftsub+1
  8521  0915  082D               	movf	?___ftadd+2,w
  8522  0916  00B7               	movwf	?___ftsub+2
  8523  0917  0008               	return
  8524  0918                     __end_of___ftsub:	
  8525                           
  8526                           	psect	text35
  8527  0824                     __ptext35:	
  8528 ;; *************** function ___ftneg *****************
  8529 ;; Defined at:
  8530 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8531 ;; Parameters:    Size  Location     Type
  8532 ;;  f1              3   43[BANK0 ] float 
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;		None
  8535 ;; Return value:  Size  Location     Type
  8536 ;;                  3   43[BANK0 ] float 
  8537 ;; Registers used:
  8538 ;;		wreg
  8539 ;; Tracked objects:
  8540 ;;		On entry : 0/0
  8541 ;;		On exit  : 0/0
  8542 ;;		Unchanged: 0/0
  8543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8544 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;Total ram usage:        3 bytes
  8549 ;; Hardware stack levels used:    1
  8550 ;; Hardware stack levels required when called:    7
  8551 ;; This function calls:
  8552 ;;		Nothing
  8553 ;; This function is called by:
  8554 ;;		_loop
  8555 ;;		_ftoa
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559                           
  8560                           ;psect for function ___ftneg
  8561  0824                     ___ftneg:	
  8562                           
  8563                           ;incstack = 0
  8564                           ; Regs used in ___ftneg: [wreg]
  8565  0824  0020               	movlb	0	; select bank0
  8566  0825  084D               	movf	___ftneg@f1+2,w
  8567  0826  044C               	iorwf	___ftneg@f1+1,w
  8568  0827  044B               	iorwf	___ftneg@f1,w
  8569  0828  1903               	skipnz
  8570  0829  0008               	return
  8571  082A  3080               	movlw	128
  8572  082B  06CD               	xorwf	___ftneg@f1+2,f
  8573  082C  0008               	return
  8574  082D                     __end_of___ftneg:	
  8575                           
  8576                           	psect	text36
  8577  05FC                     __ptext36:	
  8578 ;; *************** function ___ftmul *****************
  8579 ;; Defined at:
  8580 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8581 ;; Parameters:    Size  Location     Type
  8582 ;;  f1              3   43[BANK0 ] float 
  8583 ;;  f2              3   46[BANK0 ] float 
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;  f3_as_produc    3   50[BANK0 ] unsigned um
  8586 ;;  sign            1   54[BANK0 ] unsigned char 
  8587 ;;  cntr            1   53[BANK0 ] unsigned char 
  8588 ;;  exp             1   49[BANK0 ] unsigned char 
  8589 ;; Return value:  Size  Location     Type
  8590 ;;                  3   43[BANK0 ] float 
  8591 ;; Registers used:
  8592 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8593 ;; Tracked objects:
  8594 ;;		On entry : 0/0
  8595 ;;		On exit  : 0/0
  8596 ;;		Unchanged: 0/0
  8597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8598 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;Total ram usage:       12 bytes
  8603 ;; Hardware stack levels used:    1
  8604 ;; Hardware stack levels required when called:    8
  8605 ;; This function calls:
  8606 ;;		___ftpack
  8607 ;; This function is called by:
  8608 ;;		_loop
  8609 ;;		_ftoa
  8610 ;; This function uses a non-reentrant model
  8611 ;;
  8612                           
  8613                           
  8614                           ;psect for function ___ftmul
  8615  05FC                     ___ftmul:	
  8616                           
  8617                           ;incstack = 0
  8618                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8619  05FC  0020               	movlb	0	; select bank0
  8620  05FD  084B               	movf	___ftmul@f1,w
  8621  05FE  00FD               	movwf	125
  8622  05FF  084C               	movf	___ftmul@f1+1,w
  8623  0600  00FE               	movwf	126
  8624  0601  084D               	movf	___ftmul@f1+2,w
  8625  0602  00FF               	movwf	127
  8626  0603  1003               	clrc
  8627  0604  0D7E               	rlf	126,w
  8628  0605  0D7F               	rlf	127,w
  8629  0606  00FF               	movwf	127
  8630  0607  087F               	movf	127,w
  8631  0608  00D1               	movwf	___ftmul@exp
  8632  0609  0851               	movf	___ftmul@exp,w
  8633  060A  1D03               	btfss	3,2
  8634  060B  2E13               	goto	l4122
  8635  060C  3000               	movlw	0
  8636  060D  00CB               	movwf	?___ftmul
  8637  060E  3000               	movlw	0
  8638  060F  00CC               	movwf	?___ftmul+1
  8639  0610  3000               	movlw	0
  8640  0611  00CD               	movwf	?___ftmul+2
  8641  0612  0008               	return
  8642  0613                     l4122:	
  8643  0613  084E               	movf	___ftmul@f2,w
  8644  0614  00FD               	movwf	125
  8645  0615  084F               	movf	___ftmul@f2+1,w
  8646  0616  00FE               	movwf	126
  8647  0617  0850               	movf	___ftmul@f2+2,w
  8648  0618  00FF               	movwf	127
  8649  0619  1003               	clrc
  8650  061A  0D7E               	rlf	126,w
  8651  061B  0D7F               	rlf	127,w
  8652  061C  00FF               	movwf	127
  8653  061D  087F               	movf	127,w
  8654  061E  00D6               	movwf	___ftmul@sign
  8655  061F  0856               	movf	___ftmul@sign,w
  8656  0620  1D03               	btfss	3,2
  8657  0621  2E29               	goto	l4128
  8658  0622  3000               	movlw	0
  8659  0623  00CB               	movwf	?___ftmul
  8660  0624  3000               	movlw	0
  8661  0625  00CC               	movwf	?___ftmul+1
  8662  0626  3000               	movlw	0
  8663  0627  00CD               	movwf	?___ftmul+2
  8664  0628  0008               	return
  8665  0629                     l4128:	
  8666  0629  0856               	movf	___ftmul@sign,w
  8667  062A  3E7B               	addlw	123
  8668  062B  00FF               	movwf	127
  8669  062C  087F               	movf	127,w
  8670  062D  07D1               	addwf	___ftmul@exp,f
  8671  062E  084B               	movf	___ftmul@f1,w
  8672  062F  00FD               	movwf	125
  8673  0630  084C               	movf	___ftmul@f1+1,w
  8674  0631  00FE               	movwf	126
  8675  0632  084D               	movf	___ftmul@f1+2,w
  8676  0633  00FF               	movwf	127
  8677  0634  3010               	movlw	16
  8678  0635                     u4565:	
  8679  0635  36FF               	lsrf	127,f
  8680  0636  0CFE               	rrf	126,f
  8681  0637  0CFD               	rrf	125,f
  8682  0638  0B89               	decfsz	9,f
  8683  0639  2E35               	goto	u4565
  8684  063A  087D               	movf	125,w
  8685  063B  00FF               	movwf	127
  8686  063C  087F               	movf	127,w
  8687  063D  00D6               	movwf	___ftmul@sign
  8688  063E  084E               	movf	___ftmul@f2,w
  8689  063F  00FD               	movwf	125
  8690  0640  084F               	movf	___ftmul@f2+1,w
  8691  0641  00FE               	movwf	126
  8692  0642  0850               	movf	___ftmul@f2+2,w
  8693  0643  00FF               	movwf	127
  8694  0644  3010               	movlw	16
  8695  0645                     u4575:	
  8696  0645  36FF               	lsrf	127,f
  8697  0646  0CFE               	rrf	126,f
  8698  0647  0CFD               	rrf	125,f
  8699  0648  0B89               	decfsz	9,f
  8700  0649  2E45               	goto	u4575
  8701  064A  087D               	movf	125,w
  8702  064B  00FF               	movwf	127
  8703  064C  087F               	movf	127,w
  8704  064D  06D6               	xorwf	___ftmul@sign,f
  8705  064E  3080               	movlw	128
  8706  064F  00FF               	movwf	127
  8707  0650  087F               	movf	127,w
  8708  0651  05D6               	andwf	___ftmul@sign,f
  8709  0652  17CC               	bsf	___ftmul@f1+1,7
  8710  0653  17CF               	bsf	___ftmul@f2+1,7
  8711  0654  30FF               	movlw	255
  8712  0655  05CE               	andwf	___ftmul@f2,f
  8713  0656  30FF               	movlw	255
  8714  0657  05CF               	andwf	___ftmul@f2+1,f
  8715  0658  3000               	movlw	0
  8716  0659  05D0               	andwf	___ftmul@f2+2,f
  8717  065A  3000               	movlw	0
  8718  065B  00D2               	movwf	___ftmul@f3_as_product
  8719  065C  3000               	movlw	0
  8720  065D  00D3               	movwf	___ftmul@f3_as_product+1
  8721  065E  3000               	movlw	0
  8722  065F  00D4               	movwf	___ftmul@f3_as_product+2
  8723  0660  3007               	movlw	7
  8724  0661  00FF               	movwf	127
  8725  0662  087F               	movf	127,w
  8726  0663  00D5               	movwf	___ftmul@cntr
  8727  0664                     l4144:	
  8728  0664  1C4B               	btfss	___ftmul@f1,0
  8729  0665  2E6C               	goto	l4148
  8730  0666  084E               	movf	___ftmul@f2,w
  8731  0667  07D2               	addwf	___ftmul@f3_as_product,f
  8732  0668  084F               	movf	___ftmul@f2+1,w
  8733  0669  3DD3               	addwfc	___ftmul@f3_as_product+1,f
  8734  066A  0850               	movf	___ftmul@f2+2,w
  8735  066B  3DD4               	addwfc	___ftmul@f3_as_product+2,f
  8736  066C                     l4148:	
  8737  066C  3001               	movlw	1
  8738  066D                     u4595:	
  8739  066D  36CD               	lsrf	___ftmul@f1+2,f
  8740  066E  0CCC               	rrf	___ftmul@f1+1,f
  8741  066F  0CCB               	rrf	___ftmul@f1,f
  8742  0670  0B89               	decfsz	9,f
  8743  0671  2E6D               	goto	u4595
  8744  0672  3001               	movlw	1
  8745  0673                     u4605:	
  8746  0673  35CE               	lslf	___ftmul@f2,f
  8747  0674  0DCF               	rlf	___ftmul@f2+1,f
  8748  0675  0DD0               	rlf	___ftmul@f2+2,f
  8749  0676  0B89               	decfsz	9,f
  8750  0677  2E73               	goto	u4605
  8751  0678  3001               	movlw	1
  8752  0679  02D5               	subwf	___ftmul@cntr,f
  8753  067A  1D03               	btfss	3,2
  8754  067B  2E64               	goto	l4144
  8755  067C  3009               	movlw	9
  8756  067D  00FF               	movwf	127
  8757  067E  087F               	movf	127,w
  8758  067F  00D5               	movwf	___ftmul@cntr
  8759  0680                     l4156:	
  8760  0680  1C4B               	btfss	___ftmul@f1,0
  8761  0681  2E88               	goto	l4160
  8762  0682  084E               	movf	___ftmul@f2,w
  8763  0683  07D2               	addwf	___ftmul@f3_as_product,f
  8764  0684  084F               	movf	___ftmul@f2+1,w
  8765  0685  3DD3               	addwfc	___ftmul@f3_as_product+1,f
  8766  0686  0850               	movf	___ftmul@f2+2,w
  8767  0687  3DD4               	addwfc	___ftmul@f3_as_product+2,f
  8768  0688                     l4160:	
  8769  0688  3001               	movlw	1
  8770  0689                     u4635:	
  8771  0689  36CD               	lsrf	___ftmul@f1+2,f
  8772  068A  0CCC               	rrf	___ftmul@f1+1,f
  8773  068B  0CCB               	rrf	___ftmul@f1,f
  8774  068C  0B89               	decfsz	9,f
  8775  068D  2E89               	goto	u4635
  8776  068E  3001               	movlw	1
  8777  068F                     u4645:	
  8778  068F  36D4               	lsrf	___ftmul@f3_as_product+2,f
  8779  0690  0CD3               	rrf	___ftmul@f3_as_product+1,f
  8780  0691  0CD2               	rrf	___ftmul@f3_as_product,f
  8781  0692  0B89               	decfsz	9,f
  8782  0693  2E8F               	goto	u4645
  8783  0694  3001               	movlw	1
  8784  0695  02D5               	subwf	___ftmul@cntr,f
  8785  0696  1D03               	btfss	3,2
  8786  0697  2E80               	goto	l4156
  8787  0698  0852               	movf	___ftmul@f3_as_product,w
  8788  0699  00A6               	movwf	___ftpack@arg
  8789  069A  0853               	movf	___ftmul@f3_as_product+1,w
  8790  069B  00A7               	movwf	___ftpack@arg+1
  8791  069C  0854               	movf	___ftmul@f3_as_product+2,w
  8792  069D  00A8               	movwf	___ftpack@arg+2
  8793  069E  0851               	movf	___ftmul@exp,w
  8794  069F  00FF               	movwf	127
  8795  06A0  087F               	movf	127,w
  8796  06A1  00A9               	movwf	___ftpack@exp
  8797  06A2  0856               	movf	___ftmul@sign,w
  8798  06A3  00FF               	movwf	127
  8799  06A4  087F               	movf	127,w
  8800  06A5  00AA               	movwf	___ftpack@sign
  8801  06A6  318D  2551         	fcall	___ftpack
  8802  06A8  0020               	movlb	0	; select bank0
  8803  06A9  0826               	movf	?___ftpack,w
  8804  06AA  00CB               	movwf	?___ftmul
  8805  06AB  0827               	movf	?___ftpack+1,w
  8806  06AC  00CC               	movwf	?___ftmul+1
  8807  06AD  0828               	movf	?___ftpack+2,w
  8808  06AE  00CD               	movwf	?___ftmul+2
  8809  06AF  0008               	return
  8810  06B0                     __end_of___ftmul:	
  8811                           
  8812                           	psect	text37
  8813  0B6C                     __ptext37:	
  8814 ;; *************** function ___ftge *****************
  8815 ;; Defined at:
  8816 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8817 ;; Parameters:    Size  Location     Type
  8818 ;;  ff1             3    6[BANK0 ] float 
  8819 ;;  ff2             3    9[BANK0 ] float 
  8820 ;; Auto vars:     Size  Location     Type
  8821 ;;		None
  8822 ;; Return value:  Size  Location     Type
  8823 ;;		None               void
  8824 ;; Registers used:
  8825 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8826 ;; Tracked objects:
  8827 ;;		On entry : 0/0
  8828 ;;		On exit  : 0/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8831 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8834 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8835 ;;Total ram usage:        6 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    7
  8838 ;; This function calls:
  8839 ;;		Nothing
  8840 ;; This function is called by:
  8841 ;;		_ftoa
  8842 ;; This function uses a non-reentrant model
  8843 ;;
  8844                           
  8845                           
  8846                           ;psect for function ___ftge
  8847  0B6C                     ___ftge:	
  8848                           
  8849                           ;incstack = 0
  8850                           ; Regs used in ___ftge: [wreg+status,2+status,0+btemp+9-btemp+11]
  8851  0B6C  0020               	movlb	0	; select bank0
  8852  0B6D  1FA8               	btfss	___ftge@ff1+2,7
  8853  0B6E  2B83               	goto	l4100
  8854  0B6F  0926               	comf	___ftge@ff1,w
  8855  0B70  00FD               	movwf	125
  8856  0B71  0927               	comf	___ftge@ff1+1,w
  8857  0B72  00FE               	movwf	126
  8858  0B73  0928               	comf	___ftge@ff1+2,w
  8859  0B74  00FF               	movwf	127
  8860  0B75  0AFD               	incf	125,f
  8861  0B76  1903               	skipnz
  8862  0B77  0AFE               	incf	126,f
  8863  0B78  1903               	skipnz
  8864  0B79  0AFF               	incf	127,f
  8865  0B7A  3000               	movlw	0
  8866  0B7B  077D               	addwf	125,w
  8867  0B7C  00A6               	movwf	___ftge@ff1
  8868  0B7D  3000               	movlw	0
  8869  0B7E  3D7E               	addwfc	126,w
  8870  0B7F  00A7               	movwf	___ftge@ff1+1
  8871  0B80  3080               	movlw	128
  8872  0B81  3D7F               	addwfc	127,w
  8873  0B82  00A8               	movwf	___ftge@ff1+2
  8874  0B83                     l4100:	
  8875  0B83  1FAB               	btfss	___ftge@ff2+2,7
  8876  0B84  2B99               	goto	l4104
  8877  0B85  0929               	comf	___ftge@ff2,w
  8878  0B86  00FD               	movwf	125
  8879  0B87  092A               	comf	___ftge@ff2+1,w
  8880  0B88  00FE               	movwf	126
  8881  0B89  092B               	comf	___ftge@ff2+2,w
  8882  0B8A  00FF               	movwf	127
  8883  0B8B  0AFD               	incf	125,f
  8884  0B8C  1903               	skipnz
  8885  0B8D  0AFE               	incf	126,f
  8886  0B8E  1903               	skipnz
  8887  0B8F  0AFF               	incf	127,f
  8888  0B90  3000               	movlw	0
  8889  0B91  077D               	addwf	125,w
  8890  0B92  00A9               	movwf	___ftge@ff2
  8891  0B93  3000               	movlw	0
  8892  0B94  3D7E               	addwfc	126,w
  8893  0B95  00AA               	movwf	___ftge@ff2+1
  8894  0B96  3080               	movlw	128
  8895  0B97  3D7F               	addwfc	127,w
  8896  0B98  00AB               	movwf	___ftge@ff2+2
  8897  0B99                     l4104:	
  8898  0B99  3080               	movlw	128
  8899  0B9A  06A8               	xorwf	___ftge@ff1+2,f
  8900  0B9B  3080               	movlw	128
  8901  0B9C  06AB               	xorwf	___ftge@ff2+2,f
  8902  0B9D  082B               	movf	___ftge@ff2+2,w
  8903  0B9E  0228               	subwf	___ftge@ff1+2,w
  8904  0B9F  1D03               	skipz
  8905  0BA0  0008               	return
  8906  0BA1  082A               	movf	___ftge@ff2+1,w
  8907  0BA2  0227               	subwf	___ftge@ff1+1,w
  8908  0BA3  1D03               	skipz
  8909  0BA4  0008               	return
  8910  0BA5  0829               	movf	___ftge@ff2,w
  8911  0BA6  0226               	subwf	___ftge@ff1,w
  8912  0BA7  0008               	return
  8913  0BA8                     __end_of___ftge:	
  8914                           
  8915                           	psect	text38
  8916  0F5B                     __ptext38:	
  8917 ;; *************** function _getADCValue *****************
  8918 ;; Defined at:
  8919 ;;		line 31 in file "main.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;  channel         1    wreg     unsigned char 
  8922 ;; Auto vars:     Size  Location     Type
  8923 ;;  channel         1   38[BANK0 ] unsigned char 
  8924 ;;  adcSum          3   40[BANK0 ] float 
  8925 ;;  adcLoop         1   39[BANK0 ] unsigned char 
  8926 ;; Return value:  Size  Location     Type
  8927 ;;                  3   34[BANK0 ] float 
  8928 ;; Registers used:
  8929 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8930 ;; Tracked objects:
  8931 ;;		On entry : 0/0
  8932 ;;		On exit  : 0/0
  8933 ;;		Unchanged: 0/0
  8934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8935 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8936 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8937 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8938 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8939 ;;Total ram usage:        9 bytes
  8940 ;; Hardware stack levels used:    1
  8941 ;; Hardware stack levels required when called:    9
  8942 ;; This function calls:
  8943 ;;		___awtoft
  8944 ;;		___ftadd
  8945 ;;		___ftdiv
  8946 ;;		_sleepMs
  8947 ;; This function is called by:
  8948 ;;		_loop
  8949 ;; This function uses a non-reentrant model
  8950 ;;
  8951                           
  8952                           
  8953                           ;psect for function _getADCValue
  8954  0F5B                     _getADCValue:	
  8955                           
  8956                           ;incstack = 0
  8957                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack
      +                          ]
  8958                           ;getADCValue@channel stored from wreg
  8959  0F5B  0020               	movlb	0	; select bank0
  8960  0F5C  00C6               	movwf	getADCValue@channel
  8961                           
  8962                           ;main.c: 34: float adcSum = 0;
  8963  0F5D  3000               	movlw	0
  8964  0F5E  00C8               	movwf	getADCValue@adcSum
  8965  0F5F  3000               	movlw	0
  8966  0F60  00C9               	movwf	getADCValue@adcSum+1
  8967  0F61  3000               	movlw	0
  8968  0F62  00CA               	movwf	getADCValue@adcSum+2
  8969                           
  8970                           ;main.c: 35: unsigned char adcLoop = 111;
  8971  0F63  306F               	movlw	111
  8972  0F64  00FF               	movwf	127
  8973  0F65  087F               	movf	127,w
  8974  0F66  00C7               	movwf	getADCValue@adcLoop
  8975                           
  8976                           ;main.c: 37: ADCON0bits.CHS = channel;
  8977  0F67  0846               	movf	getADCValue@channel,w
  8978  0F68  00C5               	movwf	??_getADCValue
  8979  0F69  0DC5               	rlf	??_getADCValue,f
  8980  0F6A  0DC5               	rlf	??_getADCValue,f
  8981  0F6B  0021               	movlb	1	; select bank1
  8982  0F6C  081D               	movf	29,w	;volatile
  8983  0F6D  0020               	movlb	0	; select bank0
  8984  0F6E  0645               	xorwf	??_getADCValue,w
  8985  0F6F  3903               	andlw	-253
  8986  0F70  0645               	xorwf	??_getADCValue,w
  8987  0F71  0021               	movlb	1	; select bank1
  8988  0F72  009D               	movwf	29	;volatile
  8989                           
  8990                           ;main.c: 38: FVRCONbits.FVREN = 1;
  8991  0F73  0022               	movlb	2	; select bank2
  8992  0F74  1797               	bsf	23,7	;volatile
  8993                           
  8994                           ;main.c: 39: ADCON0bits.ADON = 1;
  8995  0F75  0021               	movlb	1	; select bank1
  8996  0F76  141D               	bsf	29,0	;volatile
  8997                           
  8998                           ;main.c: 41: sleepMs(1);
  8999  0F77  3001               	movlw	1
  9000  0F78  00F0               	movwf	sleepMs@milliseconds
  9001  0F79  3000               	movlw	0
  9002  0F7A  00F1               	movwf	sleepMs@milliseconds+1
  9003  0F7B  318A  2243  318F   	fcall	_sleepMs
  9004  0F7E                     l4452:	
  9005                           ;main.c: 43: while (adcLoop--){
  9006                           
  9007  0F7E  3001               	movlw	1
  9008  0F7F  0020               	movlb	0	; select bank0
  9009  0F80  02C7               	subwf	getADCValue@adcLoop,f
  9010  0F81  0A47               	incf	getADCValue@adcLoop,w
  9011  0F82  1903               	btfsc	3,2
  9012  0F83  2FB7               	goto	l185
  9013                           
  9014                           ;main.c: 45: ADCON0bits.ADGO = 1;
  9015  0F84  0021               	movlb	1	; select bank1
  9016  0F85  149D               	bsf	29,1	;volatile
  9017  0F86                     l4448:	
  9018                           ;main.c: 47: while (ADCON0bits.ADGO){
  9019                           
  9020  0F86  0021               	movlb	1	; select bank1
  9021  0F87  1C9D               	btfss	29,1	;volatile
  9022  0F88  2F91               	goto	l4450
  9023                           
  9024                           ;main.c: 48: sleepMs(1);
  9025  0F89  3001               	movlw	1
  9026  0F8A  00F0               	movwf	sleepMs@milliseconds
  9027  0F8B  3000               	movlw	0
  9028  0F8C  00F1               	movwf	sleepMs@milliseconds+1
  9029  0F8D  318A  2243  318F   	fcall	_sleepMs
  9030  0F90  2F86               	goto	l4448
  9031  0F91                     l4450:	
  9032                           
  9033                           ;main.c: 49: };main.c: 51: adcSum+= (ADRESL | (ADRESH << 8));
  9034  0F91  081C               	movf	28,w	;volatile
  9035  0F92  00FE               	movwf	126
  9036  0F93  01FF               	clrf	127
  9037  0F94  087E               	movf	126,w
  9038  0F95  00FF               	movwf	127
  9039  0F96  01FE               	clrf	126
  9040  0F97  087E               	movf	126,w
  9041  0F98  041B               	iorwf	27,w	;volatile
  9042  0F99  00F0               	movwf	___awtoft@c
  9043  0F9A  087F               	movf	127,w
  9044  0F9B  00F1               	movwf	___awtoft@c+1
  9045  0F9C  3189  21CE  318F   	fcall	___awtoft
  9046  0F9F  0870               	movf	?___awtoft,w
  9047  0FA0  0020               	movlb	0	; select bank0
  9048  0FA1  00AB               	movwf	___ftadd@f1
  9049  0FA2  0871               	movf	?___awtoft+1,w
  9050  0FA3  00AC               	movwf	___ftadd@f1+1
  9051  0FA4  0872               	movf	?___awtoft+2,w
  9052  0FA5  00AD               	movwf	___ftadd@f1+2
  9053  0FA6  0848               	movf	getADCValue@adcSum,w
  9054  0FA7  00AE               	movwf	___ftadd@f2
  9055  0FA8  0849               	movf	getADCValue@adcSum+1,w
  9056  0FA9  00AF               	movwf	___ftadd@f2+1
  9057  0FAA  084A               	movf	getADCValue@adcSum+2,w
  9058  0FAB  00B0               	movwf	___ftadd@f2+2
  9059  0FAC  3183  2332  318F   	fcall	___ftadd
  9060  0FAF  0020               	movlb	0	; select bank0
  9061  0FB0  082B               	movf	?___ftadd,w
  9062  0FB1  00C8               	movwf	getADCValue@adcSum
  9063  0FB2  082C               	movf	?___ftadd+1,w
  9064  0FB3  00C9               	movwf	getADCValue@adcSum+1
  9065  0FB4  082D               	movf	?___ftadd+2,w
  9066  0FB5  00CA               	movwf	getADCValue@adcSum+2
  9067  0FB6  2F7E               	goto	l4452
  9068  0FB7                     l185:	
  9069                           
  9070                           ;main.c: 53: };main.c: 55: FVRCONbits.FVREN = 0;
  9071  0FB7  0022               	movlb	2	; select bank2
  9072  0FB8  1397               	bcf	23,7	;volatile
  9073                           
  9074                           ;main.c: 56: ADCON0bits.ADON = 0;
  9075  0FB9  0021               	movlb	1	; select bank1
  9076  0FBA  101D               	bcf	29,0	;volatile
  9077                           
  9078                           ;main.c: 59: adcSum/= 111;
  9079  0FBB  3000               	movlw	0
  9080  0FBC  0020               	movlb	0	; select bank0
  9081  0FBD  00B5               	movwf	___ftdiv@f2
  9082  0FBE  30DE               	movlw	222
  9083  0FBF  00B6               	movwf	___ftdiv@f2+1
  9084  0FC0  3042               	movlw	66
  9085  0FC1  00B7               	movwf	___ftdiv@f2+2
  9086  0FC2  0848               	movf	getADCValue@adcSum,w
  9087  0FC3  00B8               	movwf	___ftdiv@f1
  9088  0FC4  0849               	movf	getADCValue@adcSum+1,w
  9089  0FC5  00B9               	movwf	___ftdiv@f1+1
  9090  0FC6  084A               	movf	getADCValue@adcSum+2,w
  9091  0FC7  00BA               	movwf	___ftdiv@f1+2
  9092  0FC8  3186  26B0  318F   	fcall	___ftdiv
  9093  0FCB  0020               	movlb	0	; select bank0
  9094  0FCC  0835               	movf	?___ftdiv,w
  9095  0FCD  00C8               	movwf	getADCValue@adcSum
  9096  0FCE  0836               	movf	?___ftdiv+1,w
  9097  0FCF  00C9               	movwf	getADCValue@adcSum+1
  9098  0FD0  0837               	movf	?___ftdiv+2,w
  9099  0FD1  00CA               	movwf	getADCValue@adcSum+2
  9100                           
  9101                           ;main.c: 62: if (ADCON1bits.ADPREF == 0b11){
  9102  0FD2  0021               	movlb	1	; select bank1
  9103  0FD3  081E               	movf	30,w	;volatile
  9104  0FD4  3903               	andlw	3
  9105  0FD5  3A03               	xorlw	3
  9106  0FD6  1903               	btfsc	3,2
  9107  0FD7  2FF1               	goto	l4464
  9108  0FD8  2FF8               	goto	l4466
  9109  0FD9                     l4460:	
  9110                           ;main.c: 64: case 0b10:
  9111                           
  9112                           ;main.c: 63: switch (FVRCONbits.ADFVR){
  9113                           
  9114                           
  9115                           ;main.c: 65: adcSum/= 500;
  9116  0FD9  3000               	movlw	0
  9117  0FDA  0020               	movlb	0	; select bank0
  9118  0FDB  00B5               	movwf	___ftdiv@f2
  9119  0FDC  30FA               	movlw	250
  9120  0FDD  00B6               	movwf	___ftdiv@f2+1
  9121  0FDE  3043               	movlw	67
  9122  0FDF  00B7               	movwf	___ftdiv@f2+2
  9123  0FE0  0848               	movf	getADCValue@adcSum,w
  9124  0FE1  00B8               	movwf	___ftdiv@f1
  9125  0FE2  0849               	movf	getADCValue@adcSum+1,w
  9126  0FE3  00B9               	movwf	___ftdiv@f1+1
  9127  0FE4  084A               	movf	getADCValue@adcSum+2,w
  9128  0FE5  00BA               	movwf	___ftdiv@f1+2
  9129  0FE6  3186  26B0  318F   	fcall	___ftdiv
  9130  0FE9  0020               	movlb	0	; select bank0
  9131  0FEA  0835               	movf	?___ftdiv,w
  9132  0FEB  00C8               	movwf	getADCValue@adcSum
  9133  0FEC  0836               	movf	?___ftdiv+1,w
  9134  0FED  00C9               	movwf	getADCValue@adcSum+1
  9135  0FEE  0837               	movf	?___ftdiv+2,w
  9136  0FEF  00CA               	movwf	getADCValue@adcSum+2
  9137                           
  9138                           ;main.c: 67: }
  9139                           
  9140                           ;main.c: 66: break;
  9141  0FF0  2FF8               	goto	l4466
  9142  0FF1                     l4464:	
  9143  0FF1  0022               	movlb	2	; select bank2
  9144  0FF2  0817               	movf	23,w	;volatile
  9145  0FF3  3903               	andlw	3
  9146                           
  9147                           ; Switch size 1, requested type "space"
  9148                           ; Number of cases is 1, Range of values is 2 to 2
  9149                           ; switch strategies available:
  9150                           ; Name         Instructions Cycles
  9151                           ; simple_byte            4     3 (average)
  9152                           ; direct_byte           11     9 (fixed)
  9153                           ; jumptable            263     9 (fixed)
  9154                           ;	Chosen strategy is simple_byte
  9155  0FF4  3A02               	xorlw	2	; case 2
  9156  0FF5  1903               	skipnz
  9157  0FF6  2FD9               	goto	l4460
  9158  0FF7  2FF8               	goto	l4466
  9159  0FF8                     l4466:	
  9160                           
  9161                           ;main.c: 68: };main.c: 71: return adcSum;
  9162  0FF8  0020               	movlb	0	; select bank0
  9163  0FF9  0848               	movf	getADCValue@adcSum,w
  9164  0FFA  00C2               	movwf	?_getADCValue
  9165  0FFB  0849               	movf	getADCValue@adcSum+1,w
  9166  0FFC  00C3               	movwf	?_getADCValue+1
  9167  0FFD  084A               	movf	getADCValue@adcSum+2,w
  9168  0FFE  00C4               	movwf	?_getADCValue+2
  9169  0FFF  0008               	return
  9170  1000                     __end_of_getADCValue:	
  9171                           
  9172                           	psect	text39
  9173  0A43                     __ptext39:	
  9174 ;; *************** function _sleepMs *****************
  9175 ;; Defined at:
  9176 ;;		line 37 in file "interface.c"
  9177 ;; Parameters:    Size  Location     Type
  9178 ;;  milliseconds    2    0[COMMON] unsigned int 
  9179 ;; Auto vars:     Size  Location     Type
  9180 ;;  wdtps           1    3[COMMON] unsigned char 
  9181 ;; Return value:  Size  Location     Type
  9182 ;;                  1    wreg      void 
  9183 ;; Registers used:
  9184 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  9185 ;; Tracked objects:
  9186 ;;		On entry : 0/0
  9187 ;;		On exit  : 0/0
  9188 ;;		Unchanged: 0/0
  9189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9190 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9192 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;Total ram usage:        4 bytes
  9195 ;; Hardware stack levels used:    1
  9196 ;; Hardware stack levels required when called:    8
  9197 ;; This function calls:
  9198 ;;		_resetWDT
  9199 ;; This function is called by:
  9200 ;;		_getADCValue
  9201 ;;		_sendMessage
  9202 ;;		_nrf24l01SendPacket
  9203 ;;		_sleepListren
  9204 ;;		_hcsr04GetAerage
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           
  9209                           ;psect for function _sleepMs
  9210  0A43                     _sleepMs:	
  9211                           
  9212                           ;interface.c: 39: unsigned char wdtps;;interface.c: 40: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  9213                           
  9214                           ;incstack = 0
  9215                           ; Regs used in _sleepMs: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  9216  0A43  01F3               	clrf	sleepMs@wdtps
  9217  0A44  3013               	movlw	19
  9218  0A45  0273               	subwf	sleepMs@wdtps,w
  9219  0A46  1803               	btfsc	3,0
  9220  0A47  2A6C               	goto	l3924
  9221  0A48                     l3908:	
  9222                           
  9223                           ;interface.c: 41: if ((milliseconds >> wdtps) & 0b1){
  9224  0A48  0871               	movf	sleepMs@milliseconds+1,w
  9225  0A49  00FF               	movwf	127
  9226  0A4A  0870               	movf	sleepMs@milliseconds,w
  9227  0A4B  00FE               	movwf	126
  9228  0A4C  0A73               	incf	sleepMs@wdtps,w
  9229  0A4D  2A50               	goto	u4184
  9230  0A4E                     u4185:	
  9231  0A4E  36FF               	lsrf	127,f
  9232  0A4F  0CFE               	rrf	126,f
  9233  0A50                     u4184:	
  9234  0A50  0B89               	decfsz	9,f
  9235  0A51  2A4E               	goto	u4185
  9236  0A52  1C7E               	btfss	126,0
  9237  0A53  2A64               	goto	l3920
  9238  0A54                     l3910:	
  9239                           ;interface.c: 42: START_SLEEP:
  9240                           
  9241                           
  9242                           ;interface.c: 43: WDTCONbits.WDTPS = wdtps;
  9243  0A54  0873               	movf	sleepMs@wdtps,w
  9244  0A55  00F2               	movwf	??_sleepMs
  9245  0A56  0DF2               	rlf	??_sleepMs,f
  9246  0A57  0021               	movlb	1	; select bank1
  9247  0A58  0817               	movf	23,w	;volatile
  9248  0A59  0672               	xorwf	??_sleepMs,w
  9249  0A5A  39C1               	andlw	-63
  9250  0A5B  0672               	xorwf	??_sleepMs,w
  9251  0A5C  0097               	movwf	23	;volatile
  9252  0A5D  0063               	sleep	;# 
  9253                           
  9254                           ;interface.c: 45: __nop();
  9255  0A5E  0000               	nop
  9256                           
  9257                           ;interface.c: 46: __nop();
  9258  0A5F  0000               	nop
  9259                           
  9260                           ;interface.c: 48: if( STATUSbits.nTO || STATUSbits.nPD){
  9261  0A60  0020               	movlb	0	; select bank0
  9262  0A61  1E03               	btfss	3,4	;volatile
  9263  0A62  1983               	btfsc	3,3	;volatile
  9264                           
  9265                           ;interface.c: 49: goto START_SLEEP;
  9266  0A63  2A54               	goto	l3910
  9267  0A64                     l3920:	
  9268  0A64  3001               	movlw	1
  9269  0A65  00FF               	movwf	127
  9270  0A66  087F               	movf	127,w
  9271  0A67  07F3               	addwf	sleepMs@wdtps,f
  9272  0A68  3013               	movlw	19
  9273  0A69  0273               	subwf	sleepMs@wdtps,w
  9274  0A6A  1C03               	skipc
  9275  0A6B  2A48               	goto	l3908
  9276  0A6C                     l3924:	
  9277                           
  9278                           ;interface.c: 50: };interface.c: 51: };interface.c: 52: };interface.c: 54: resetWDT();
  9279  0A6C  3188  201D         	fcall	_resetWDT
  9280  0A6E  0008               	return
  9281  0A6F                     __end_of_sleepMs:	
  9282                           
  9283                           	psect	text40
  9284  081D                     __ptext40:	
  9285 ;; *************** function _resetWDT *****************
  9286 ;; Defined at:
  9287 ;;		line 32 in file "interface.c"
  9288 ;; Parameters:    Size  Location     Type
  9289 ;;		None
  9290 ;; Auto vars:     Size  Location     Type
  9291 ;;		None
  9292 ;; Return value:  Size  Location     Type
  9293 ;;                  1    wreg      void 
  9294 ;; Registers used:
  9295 ;;		wreg, status,2, status,0
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;Total ram usage:        0 bytes
  9306 ;; Hardware stack levels used:    1
  9307 ;; Hardware stack levels required when called:    7
  9308 ;; This function calls:
  9309 ;;		Nothing
  9310 ;; This function is called by:
  9311 ;;		_sleepMs
  9312 ;; This function uses a non-reentrant model
  9313 ;;
  9314                           
  9315                           
  9316                           ;psect for function _resetWDT
  9317  081D                     _resetWDT:	
  9318                           
  9319                           ;interface.c: 33: WDTCONbits.WDTPS = 0b01100;
  9320                           
  9321                           ;incstack = 0
  9322                           ; Regs used in _resetWDT: [wreg+status,2+status,0]
  9323  081D  0021               	movlb	1	; select bank1
  9324  081E  0817               	movf	23,w	;volatile
  9325  081F  39C1               	andlw	-63
  9326  0820  3818               	iorlw	24
  9327  0821  0097               	movwf	23	;volatile
  9328  0822  0064               	clrwdt	;# 
  9329  0823  0008               	return
  9330  0824                     __end_of_resetWDT:	
  9331                           
  9332                           	psect	text41
  9333  06B0                     __ptext41:	
  9334 ;; *************** function ___ftdiv *****************
  9335 ;; Defined at:
  9336 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;  f2              3   21[BANK0 ] float 
  9339 ;;  f1              3   24[BANK0 ] float 
  9340 ;; Auto vars:     Size  Location     Type
  9341 ;;  f3              3   29[BANK0 ] float 
  9342 ;;  sign            1   33[BANK0 ] unsigned char 
  9343 ;;  exp             1   32[BANK0 ] unsigned char 
  9344 ;;  cntr            1   28[BANK0 ] unsigned char 
  9345 ;; Return value:  Size  Location     Type
  9346 ;;                  3   21[BANK0 ] float 
  9347 ;; Registers used:
  9348 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9354 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;Total ram usage:       13 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    8
  9361 ;; This function calls:
  9362 ;;		___ftpack
  9363 ;; This function is called by:
  9364 ;;		_getADCValue
  9365 ;;		_loop
  9366 ;;		_hcsr04GetAerage
  9367 ;; This function uses a non-reentrant model
  9368 ;;
  9369                           
  9370                           
  9371                           ;psect for function ___ftdiv
  9372  06B0                     ___ftdiv:	
  9373                           
  9374                           ;incstack = 0
  9375                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9376  06B0  0020               	movlb	0	; select bank0
  9377  06B1  0838               	movf	___ftdiv@f1,w
  9378  06B2  00FD               	movwf	125
  9379  06B3  0839               	movf	___ftdiv@f1+1,w
  9380  06B4  00FE               	movwf	126
  9381  06B5  083A               	movf	___ftdiv@f1+2,w
  9382  06B6  00FF               	movwf	127
  9383  06B7  1003               	clrc
  9384  06B8  0D7E               	rlf	126,w
  9385  06B9  0D7F               	rlf	127,w
  9386  06BA  00FF               	movwf	127
  9387  06BB  087F               	movf	127,w
  9388  06BC  00C0               	movwf	___ftdiv@exp
  9389  06BD  0840               	movf	___ftdiv@exp,w
  9390  06BE  1D03               	btfss	3,2
  9391  06BF  2EC7               	goto	l4384
  9392  06C0  3000               	movlw	0
  9393  06C1  00B5               	movwf	?___ftdiv
  9394  06C2  3000               	movlw	0
  9395  06C3  00B6               	movwf	?___ftdiv+1
  9396  06C4  3000               	movlw	0
  9397  06C5  00B7               	movwf	?___ftdiv+2
  9398  06C6  0008               	return
  9399  06C7                     l4384:	
  9400  06C7  0835               	movf	___ftdiv@f2,w
  9401  06C8  00FD               	movwf	125
  9402  06C9  0836               	movf	___ftdiv@f2+1,w
  9403  06CA  00FE               	movwf	126
  9404  06CB  0837               	movf	___ftdiv@f2+2,w
  9405  06CC  00FF               	movwf	127
  9406  06CD  1003               	clrc
  9407  06CE  0D7E               	rlf	126,w
  9408  06CF  0D7F               	rlf	127,w
  9409  06D0  00FF               	movwf	127
  9410  06D1  087F               	movf	127,w
  9411  06D2  00C1               	movwf	___ftdiv@sign
  9412  06D3  0841               	movf	___ftdiv@sign,w
  9413  06D4  1D03               	btfss	3,2
  9414  06D5  2EDD               	goto	l4390
  9415  06D6  3000               	movlw	0
  9416  06D7  00B5               	movwf	?___ftdiv
  9417  06D8  3000               	movlw	0
  9418  06D9  00B6               	movwf	?___ftdiv+1
  9419  06DA  3000               	movlw	0
  9420  06DB  00B7               	movwf	?___ftdiv+2
  9421  06DC  0008               	return
  9422  06DD                     l4390:	
  9423  06DD  3000               	movlw	0
  9424  06DE  00BD               	movwf	___ftdiv@f3
  9425  06DF  3000               	movlw	0
  9426  06E0  00BE               	movwf	___ftdiv@f3+1
  9427  06E1  3000               	movlw	0
  9428  06E2  00BF               	movwf	___ftdiv@f3+2
  9429  06E3  3089               	movlw	137
  9430  06E4  0741               	addwf	___ftdiv@sign,w
  9431  06E5  00BB               	movwf	??___ftdiv
  9432  06E6  083B               	movf	??___ftdiv,w
  9433  06E7  02C0               	subwf	___ftdiv@exp,f
  9434  06E8  0838               	movf	___ftdiv@f1,w
  9435  06E9  00FD               	movwf	125
  9436  06EA  0839               	movf	___ftdiv@f1+1,w
  9437  06EB  00FE               	movwf	126
  9438  06EC  083A               	movf	___ftdiv@f1+2,w
  9439  06ED  00FF               	movwf	127
  9440  06EE  3010               	movlw	16
  9441  06EF                     u4945:	
  9442  06EF  36FF               	lsrf	127,f
  9443  06F0  0CFE               	rrf	126,f
  9444  06F1  0CFD               	rrf	125,f
  9445  06F2  0B89               	decfsz	9,f
  9446  06F3  2EEF               	goto	u4945
  9447  06F4  087D               	movf	125,w
  9448  06F5  00FF               	movwf	127
  9449  06F6  087F               	movf	127,w
  9450  06F7  00C1               	movwf	___ftdiv@sign
  9451  06F8  0835               	movf	___ftdiv@f2,w
  9452  06F9  00FD               	movwf	125
  9453  06FA  0836               	movf	___ftdiv@f2+1,w
  9454  06FB  00FE               	movwf	126
  9455  06FC  0837               	movf	___ftdiv@f2+2,w
  9456  06FD  00FF               	movwf	127
  9457  06FE  3010               	movlw	16
  9458  06FF                     u4955:	
  9459  06FF  36FF               	lsrf	127,f
  9460  0700  0CFE               	rrf	126,f
  9461  0701  0CFD               	rrf	125,f
  9462  0702  0B89               	decfsz	9,f
  9463  0703  2EFF               	goto	u4955
  9464  0704  087D               	movf	125,w
  9465  0705  00FF               	movwf	127
  9466  0706  087F               	movf	127,w
  9467  0707  06C1               	xorwf	___ftdiv@sign,f
  9468  0708  3080               	movlw	128
  9469  0709  00FF               	movwf	127
  9470  070A  087F               	movf	127,w
  9471  070B  05C1               	andwf	___ftdiv@sign,f
  9472  070C  17B9               	bsf	___ftdiv@f1+1,7
  9473  070D  30FF               	movlw	255
  9474  070E  05B8               	andwf	___ftdiv@f1,f
  9475  070F  30FF               	movlw	255
  9476  0710  05B9               	andwf	___ftdiv@f1+1,f
  9477  0711  3000               	movlw	0
  9478  0712  05BA               	andwf	___ftdiv@f1+2,f
  9479  0713  17B6               	bsf	___ftdiv@f2+1,7
  9480  0714  30FF               	movlw	255
  9481  0715  05B5               	andwf	___ftdiv@f2,f
  9482  0716  30FF               	movlw	255
  9483  0717  05B6               	andwf	___ftdiv@f2+1,f
  9484  0718  3000               	movlw	0
  9485  0719  05B7               	andwf	___ftdiv@f2+2,f
  9486  071A  3018               	movlw	24
  9487  071B  00FF               	movwf	127
  9488  071C  087F               	movf	127,w
  9489  071D  00BC               	movwf	___ftdiv@cntr
  9490  071E                     l4408:	
  9491  071E  3001               	movlw	1
  9492  071F                     u4965:	
  9493  071F  35BD               	lslf	___ftdiv@f3,f
  9494  0720  0DBE               	rlf	___ftdiv@f3+1,f
  9495  0721  0DBF               	rlf	___ftdiv@f3+2,f
  9496  0722  0B89               	decfsz	9,f
  9497  0723  2F1F               	goto	u4965
  9498  0724  0837               	movf	___ftdiv@f2+2,w
  9499  0725  023A               	subwf	___ftdiv@f1+2,w
  9500  0726  1D03               	skipz
  9501  0727  2F2E               	goto	u4975
  9502  0728  0836               	movf	___ftdiv@f2+1,w
  9503  0729  0239               	subwf	___ftdiv@f1+1,w
  9504  072A  1D03               	skipz
  9505  072B  2F2E               	goto	u4975
  9506  072C  0835               	movf	___ftdiv@f2,w
  9507  072D  0238               	subwf	___ftdiv@f1,w
  9508  072E                     u4975:	
  9509  072E  1C03               	skipc
  9510  072F  2F37               	goto	l4416
  9511  0730  0835               	movf	___ftdiv@f2,w
  9512  0731  02B8               	subwf	___ftdiv@f1,f
  9513  0732  0836               	movf	___ftdiv@f2+1,w
  9514  0733  3BB9               	subwfb	___ftdiv@f1+1,f
  9515  0734  0837               	movf	___ftdiv@f2+2,w
  9516  0735  3BBA               	subwfb	___ftdiv@f1+2,f
  9517  0736  143D               	bsf	___ftdiv@f3,0
  9518  0737                     l4416:	
  9519  0737  3001               	movlw	1
  9520  0738                     u4985:	
  9521  0738  35B8               	lslf	___ftdiv@f1,f
  9522  0739  0DB9               	rlf	___ftdiv@f1+1,f
  9523  073A  0DBA               	rlf	___ftdiv@f1+2,f
  9524  073B  0B89               	decfsz	9,f
  9525  073C  2F38               	goto	u4985
  9526  073D  3001               	movlw	1
  9527  073E  02BC               	subwf	___ftdiv@cntr,f
  9528  073F  1D03               	btfss	3,2
  9529  0740  2F1E               	goto	l4408
  9530  0741  083D               	movf	___ftdiv@f3,w
  9531  0742  00A6               	movwf	___ftpack@arg
  9532  0743  083E               	movf	___ftdiv@f3+1,w
  9533  0744  00A7               	movwf	___ftpack@arg+1
  9534  0745  083F               	movf	___ftdiv@f3+2,w
  9535  0746  00A8               	movwf	___ftpack@arg+2
  9536  0747  0840               	movf	___ftdiv@exp,w
  9537  0748  00FF               	movwf	127
  9538  0749  087F               	movf	127,w
  9539  074A  00A9               	movwf	___ftpack@exp
  9540  074B  0841               	movf	___ftdiv@sign,w
  9541  074C  00FF               	movwf	127
  9542  074D  087F               	movf	127,w
  9543  074E  00AA               	movwf	___ftpack@sign
  9544  074F  318D  2551         	fcall	___ftpack
  9545  0751  0020               	movlb	0	; select bank0
  9546  0752  0826               	movf	?___ftpack,w
  9547  0753  00B5               	movwf	?___ftdiv
  9548  0754  0827               	movf	?___ftpack+1,w
  9549  0755  00B6               	movwf	?___ftdiv+1
  9550  0756  0828               	movf	?___ftpack+2,w
  9551  0757  00B7               	movwf	?___ftdiv+2
  9552  0758  0008               	return
  9553  0759                     __end_of___ftdiv:	
  9554                           
  9555                           	psect	text42
  9556  0332                     __ptext42:	
  9557 ;; *************** function ___ftadd *****************
  9558 ;; Defined at:
  9559 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9560 ;; Parameters:    Size  Location     Type
  9561 ;;  f1              3   11[BANK0 ] float 
  9562 ;;  f2              3   14[BANK0 ] float 
  9563 ;; Auto vars:     Size  Location     Type
  9564 ;;  exp1            1   20[BANK0 ] unsigned char 
  9565 ;;  exp2            1   19[BANK0 ] unsigned char 
  9566 ;;  sign            1   18[BANK0 ] unsigned char 
  9567 ;; Return value:  Size  Location     Type
  9568 ;;                  3   11[BANK0 ] float 
  9569 ;; Registers used:
  9570 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9571 ;; Tracked objects:
  9572 ;;		On entry : 0/0
  9573 ;;		On exit  : 0/0
  9574 ;;		Unchanged: 0/0
  9575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9576 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9577 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9579 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;Total ram usage:       10 bytes
  9581 ;; Hardware stack levels used:    1
  9582 ;; Hardware stack levels required when called:    8
  9583 ;; This function calls:
  9584 ;;		___ftpack
  9585 ;; This function is called by:
  9586 ;;		_getADCValue
  9587 ;;		_loop
  9588 ;;		___ftsub
  9589 ;;		_hcsr04GetAerage
  9590 ;; This function uses a non-reentrant model
  9591 ;;
  9592                           
  9593                           
  9594                           ;psect for function ___ftadd
  9595  0332                     ___ftadd:	
  9596                           
  9597                           ;incstack = 0
  9598                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9599  0332  0020               	movlb	0	; select bank0
  9600  0333  082B               	movf	___ftadd@f1,w
  9601  0334  00FD               	movwf	125
  9602  0335  082C               	movf	___ftadd@f1+1,w
  9603  0336  00FE               	movwf	126
  9604  0337  082D               	movf	___ftadd@f1+2,w
  9605  0338  00FF               	movwf	127
  9606  0339  1003               	clrc
  9607  033A  0D7E               	rlf	126,w
  9608  033B  0D7F               	rlf	127,w
  9609  033C  00FF               	movwf	127
  9610  033D  087F               	movf	127,w
  9611  033E  00B4               	movwf	___ftadd@exp1
  9612  033F  082E               	movf	___ftadd@f2,w
  9613  0340  00FD               	movwf	125
  9614  0341  082F               	movf	___ftadd@f2+1,w
  9615  0342  00FE               	movwf	126
  9616  0343  0830               	movf	___ftadd@f2+2,w
  9617  0344  00FF               	movwf	127
  9618  0345  1003               	clrc
  9619  0346  0D7E               	rlf	126,w
  9620  0347  0D7F               	rlf	127,w
  9621  0348  00FF               	movwf	127
  9622  0349  087F               	movf	127,w
  9623  034A  00B3               	movwf	___ftadd@exp2
  9624  034B  0834               	movf	___ftadd@exp1,w
  9625  034C  1903               	btfsc	3,2
  9626  034D  2B5A               	goto	l3812
  9627  034E  0833               	movf	___ftadd@exp2,w
  9628  034F  0234               	subwf	___ftadd@exp1,w
  9629  0350  1803               	skipnc
  9630  0351  2B61               	goto	l3816
  9631  0352  0334               	decf	___ftadd@exp1,w
  9632  0353  3AFF               	xorlw	255
  9633  0354  0733               	addwf	___ftadd@exp2,w
  9634  0355  00B1               	movwf	??___ftadd
  9635  0356  3019               	movlw	25
  9636  0357  0231               	subwf	??___ftadd,w
  9637  0358  1C03               	skipc
  9638  0359  2B61               	goto	l3816
  9639  035A                     l3812:	
  9640  035A  082E               	movf	___ftadd@f2,w
  9641  035B  00AB               	movwf	?___ftadd
  9642  035C  082F               	movf	___ftadd@f2+1,w
  9643  035D  00AC               	movwf	?___ftadd+1
  9644  035E  0830               	movf	___ftadd@f2+2,w
  9645  035F  00AD               	movwf	?___ftadd+2
  9646  0360  0008               	return
  9647  0361                     l3816:	
  9648  0361  0833               	movf	___ftadd@exp2,w
  9649  0362  1903               	btfsc	3,2
  9650  0363  0008               	return
  9651  0364  0834               	movf	___ftadd@exp1,w
  9652  0365  0233               	subwf	___ftadd@exp2,w
  9653  0366  1803               	skipnc
  9654  0367  2B70               	goto	l3822
  9655  0368  0333               	decf	___ftadd@exp2,w
  9656  0369  3AFF               	xorlw	255
  9657  036A  0734               	addwf	___ftadd@exp1,w
  9658  036B  00B1               	movwf	??___ftadd
  9659  036C  3019               	movlw	25
  9660  036D  0231               	subwf	??___ftadd,w
  9661  036E  1803               	btfsc	3,0
  9662  036F  0008               	return
  9663  0370                     l3822:	
  9664  0370  3006               	movlw	6
  9665  0371  00FF               	movwf	127
  9666  0372  087F               	movf	127,w
  9667  0373  00B2               	movwf	___ftadd@sign
  9668  0374  1BAD               	btfsc	___ftadd@f1+2,7
  9669  0375  17B2               	bsf	___ftadd@sign,7
  9670  0376  1BB0               	btfsc	___ftadd@f2+2,7
  9671  0377  1732               	bsf	___ftadd@sign,6
  9672  0378  17AC               	bsf	___ftadd@f1+1,7
  9673  0379  30FF               	movlw	255
  9674  037A  05AB               	andwf	___ftadd@f1,f
  9675  037B  30FF               	movlw	255
  9676  037C  05AC               	andwf	___ftadd@f1+1,f
  9677  037D  3000               	movlw	0
  9678  037E  05AD               	andwf	___ftadd@f1+2,f
  9679  037F  17AF               	bsf	___ftadd@f2+1,7
  9680  0380  30FF               	movlw	255
  9681  0381  05AE               	andwf	___ftadd@f2,f
  9682  0382  30FF               	movlw	255
  9683  0383  05AF               	andwf	___ftadd@f2+1,f
  9684  0384  3000               	movlw	0
  9685  0385  05B0               	andwf	___ftadd@f2+2,f
  9686  0386  0833               	movf	___ftadd@exp2,w
  9687  0387  0234               	subwf	___ftadd@exp1,w
  9688  0388  1803               	skipnc
  9689  0389  2BAC               	goto	l3846
  9690  038A                     l3834:	
  9691  038A  3001               	movlw	1
  9692  038B                     u3975:	
  9693  038B  35AE               	lslf	___ftadd@f2,f
  9694  038C  0DAF               	rlf	___ftadd@f2+1,f
  9695  038D  0DB0               	rlf	___ftadd@f2+2,f
  9696  038E  0B89               	decfsz	9,f
  9697  038F  2B8B               	goto	u3975
  9698  0390  3001               	movlw	1
  9699  0391  02B3               	subwf	___ftadd@exp2,f
  9700  0392  0833               	movf	___ftadd@exp2,w
  9701  0393  0634               	xorwf	___ftadd@exp1,w
  9702  0394  1903               	skipnz
  9703  0395  2BA7               	goto	l3844
  9704  0396  3001               	movlw	1
  9705  0397  02B2               	subwf	___ftadd@sign,f
  9706  0398  0832               	movf	___ftadd@sign,w
  9707  0399  3907               	andlw	7
  9708  039A  1903               	btfsc	3,2
  9709  039B  2BA7               	goto	l3844
  9710  039C  2B8A               	goto	l3834
  9711  039D                     l3840:	
  9712  039D  3001               	movlw	1
  9713  039E                     u4005:	
  9714  039E  36AD               	lsrf	___ftadd@f1+2,f
  9715  039F  0CAC               	rrf	___ftadd@f1+1,f
  9716  03A0  0CAB               	rrf	___ftadd@f1,f
  9717  03A1  0B89               	decfsz	9,f
  9718  03A2  2B9E               	goto	u4005
  9719  03A3  3001               	movlw	1
  9720  03A4  00FF               	movwf	127
  9721  03A5  087F               	movf	127,w
  9722  03A6  07B4               	addwf	___ftadd@exp1,f
  9723  03A7                     l3844:	
  9724  03A7  0834               	movf	___ftadd@exp1,w
  9725  03A8  0633               	xorwf	___ftadd@exp2,w
  9726  03A9  1903               	btfsc	3,2
  9727  03AA  2BD1               	goto	l786
  9728  03AB  2B9D               	goto	l3840
  9729  03AC                     l3846:	
  9730  03AC  0834               	movf	___ftadd@exp1,w
  9731  03AD  0233               	subwf	___ftadd@exp2,w
  9732  03AE  1803               	skipnc
  9733  03AF  2BD1               	goto	l786
  9734  03B0                     l3848:	
  9735  03B0  3001               	movlw	1
  9736  03B1                     u4035:	
  9737  03B1  35AB               	lslf	___ftadd@f1,f
  9738  03B2  0DAC               	rlf	___ftadd@f1+1,f
  9739  03B3  0DAD               	rlf	___ftadd@f1+2,f
  9740  03B4  0B89               	decfsz	9,f
  9741  03B5  2BB1               	goto	u4035
  9742  03B6  3001               	movlw	1
  9743  03B7  02B4               	subwf	___ftadd@exp1,f
  9744  03B8  0833               	movf	___ftadd@exp2,w
  9745  03B9  0634               	xorwf	___ftadd@exp1,w
  9746  03BA  1903               	skipnz
  9747  03BB  2BCD               	goto	l3858
  9748  03BC  3001               	movlw	1
  9749  03BD  02B2               	subwf	___ftadd@sign,f
  9750  03BE  0832               	movf	___ftadd@sign,w
  9751  03BF  3907               	andlw	7
  9752  03C0  1903               	btfsc	3,2
  9753  03C1  2BCD               	goto	l3858
  9754  03C2  2BB0               	goto	l3848
  9755  03C3                     l3854:	
  9756  03C3  3001               	movlw	1
  9757  03C4                     u4065:	
  9758  03C4  36B0               	lsrf	___ftadd@f2+2,f
  9759  03C5  0CAF               	rrf	___ftadd@f2+1,f
  9760  03C6  0CAE               	rrf	___ftadd@f2,f
  9761  03C7  0B89               	decfsz	9,f
  9762  03C8  2BC4               	goto	u4065
  9763  03C9  3001               	movlw	1
  9764  03CA  00FF               	movwf	127
  9765  03CB  087F               	movf	127,w
  9766  03CC  07B3               	addwf	___ftadd@exp2,f
  9767  03CD                     l3858:	
  9768  03CD  0834               	movf	___ftadd@exp1,w
  9769  03CE  0633               	xorwf	___ftadd@exp2,w
  9770  03CF  1D03               	skipz
  9771  03D0  2BC3               	goto	l3854
  9772  03D1                     l786:	
  9773  03D1  1FB2               	btfss	___ftadd@sign,7
  9774  03D2  2BE3               	goto	l3862
  9775  03D3  30FF               	movlw	255
  9776  03D4  06AB               	xorwf	___ftadd@f1,f
  9777  03D5  30FF               	movlw	255
  9778  03D6  06AC               	xorwf	___ftadd@f1+1,f
  9779  03D7  30FF               	movlw	255
  9780  03D8  06AD               	xorwf	___ftadd@f1+2,f
  9781  03D9  3001               	movlw	1
  9782  03DA  07AB               	addwf	___ftadd@f1,f
  9783  03DB  3000               	movlw	0
  9784  03DC  1803               	skipnc
  9785  03DD  3001               	movlw	1
  9786  03DE  07AC               	addwf	___ftadd@f1+1,f
  9787  03DF  3000               	movlw	0
  9788  03E0  1803               	skipnc
  9789  03E1  3001               	movlw	1
  9790  03E2  07AD               	addwf	___ftadd@f1+2,f
  9791  03E3                     l3862:	
  9792  03E3  1F32               	btfss	___ftadd@sign,6
  9793  03E4  2BF5               	goto	l3866
  9794  03E5  30FF               	movlw	255
  9795  03E6  06AE               	xorwf	___ftadd@f2,f
  9796  03E7  30FF               	movlw	255
  9797  03E8  06AF               	xorwf	___ftadd@f2+1,f
  9798  03E9  30FF               	movlw	255
  9799  03EA  06B0               	xorwf	___ftadd@f2+2,f
  9800  03EB  3001               	movlw	1
  9801  03EC  07AE               	addwf	___ftadd@f2,f
  9802  03ED  3000               	movlw	0
  9803  03EE  1803               	skipnc
  9804  03EF  3001               	movlw	1
  9805  03F0  07AF               	addwf	___ftadd@f2+1,f
  9806  03F1  3000               	movlw	0
  9807  03F2  1803               	skipnc
  9808  03F3  3001               	movlw	1
  9809  03F4  07B0               	addwf	___ftadd@f2+2,f
  9810  03F5                     l3866:	
  9811  03F5  01B2               	clrf	___ftadd@sign
  9812  03F6  082B               	movf	___ftadd@f1,w
  9813  03F7  07AE               	addwf	___ftadd@f2,f
  9814  03F8  082C               	movf	___ftadd@f1+1,w
  9815  03F9  3DAF               	addwfc	___ftadd@f2+1,f
  9816  03FA  082D               	movf	___ftadd@f1+2,w
  9817  03FB  3DB0               	addwfc	___ftadd@f2+2,f
  9818  03FC  1FB0               	btfss	___ftadd@f2+2,7
  9819  03FD  2C10               	goto	l3876
  9820  03FE  30FF               	movlw	255
  9821  03FF  06AE               	xorwf	___ftadd@f2,f
  9822  0400  30FF               	movlw	255
  9823  0401  06AF               	xorwf	___ftadd@f2+1,f
  9824  0402  30FF               	movlw	255
  9825  0403  06B0               	xorwf	___ftadd@f2+2,f
  9826  0404  3001               	movlw	1
  9827  0405  07AE               	addwf	___ftadd@f2,f
  9828  0406  3000               	movlw	0
  9829  0407  1803               	skipnc
  9830  0408  3001               	movlw	1
  9831  0409  07AF               	addwf	___ftadd@f2+1,f
  9832  040A  3000               	movlw	0
  9833  040B  1803               	skipnc
  9834  040C  3001               	movlw	1
  9835  040D  07B0               	addwf	___ftadd@f2+2,f
  9836  040E  01B2               	clrf	___ftadd@sign
  9837  040F  0AB2               	incf	___ftadd@sign,f
  9838  0410                     l3876:	
  9839  0410  082E               	movf	___ftadd@f2,w
  9840  0411  00A6               	movwf	___ftpack@arg
  9841  0412  082F               	movf	___ftadd@f2+1,w
  9842  0413  00A7               	movwf	___ftpack@arg+1
  9843  0414  0830               	movf	___ftadd@f2+2,w
  9844  0415  00A8               	movwf	___ftpack@arg+2
  9845  0416  0834               	movf	___ftadd@exp1,w
  9846  0417  00FF               	movwf	127
  9847  0418  087F               	movf	127,w
  9848  0419  00A9               	movwf	___ftpack@exp
  9849  041A  0832               	movf	___ftadd@sign,w
  9850  041B  00FF               	movwf	127
  9851  041C  087F               	movf	127,w
  9852  041D  00AA               	movwf	___ftpack@sign
  9853  041E  318D  2551         	fcall	___ftpack
  9854  0420  0020               	movlb	0	; select bank0
  9855  0421  0826               	movf	?___ftpack,w
  9856  0422  00AB               	movwf	?___ftadd
  9857  0423  0827               	movf	?___ftpack+1,w
  9858  0424  00AC               	movwf	?___ftadd+1
  9859  0425  0828               	movf	?___ftpack+2,w
  9860  0426  00AD               	movwf	?___ftadd+2
  9861  0427  0008               	return
  9862  0428                     __end_of___ftadd:	
  9863                           
  9864                           	psect	text43
  9865  09CE                     __ptext43:	
  9866 ;; *************** function ___awtoft *****************
  9867 ;; Defined at:
  9868 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9869 ;; Parameters:    Size  Location     Type
  9870 ;;  c               2    0[COMMON] int 
  9871 ;; Auto vars:     Size  Location     Type
  9872 ;;  sign            1    3[COMMON] unsigned char 
  9873 ;; Return value:  Size  Location     Type
  9874 ;;                  3    0[COMMON] float 
  9875 ;; Registers used:
  9876 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9882 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;Total ram usage:        4 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; Hardware stack levels required when called:    8
  9889 ;; This function calls:
  9890 ;;		___ftpack
  9891 ;; This function is called by:
  9892 ;;		_getADCValue
  9893 ;; This function uses a non-reentrant model
  9894 ;;
  9895                           
  9896                           
  9897                           ;psect for function ___awtoft
  9898  09CE                     ___awtoft:	
  9899                           
  9900                           ;incstack = 0
  9901                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9902  09CE  01F3               	clrf	___awtoft@sign
  9903  09CF  1FF1               	btfss	___awtoft@c+1,7
  9904  09D0  29D8               	goto	l4374
  9905  09D1  09F0               	comf	___awtoft@c,f
  9906  09D2  09F1               	comf	___awtoft@c+1,f
  9907  09D3  0AF0               	incf	___awtoft@c,f
  9908  09D4  1903               	skipnz
  9909  09D5  0AF1               	incf	___awtoft@c+1,f
  9910  09D6  01F3               	clrf	___awtoft@sign
  9911  09D7  0AF3               	incf	___awtoft@sign,f
  9912  09D8                     l4374:	
  9913  09D8  0870               	movf	___awtoft@c,w
  9914  09D9  0020               	movlb	0	; select bank0
  9915  09DA  00A6               	movwf	___ftpack@arg
  9916  09DB  0871               	movf	___awtoft@c+1,w
  9917  09DC  00A7               	movwf	___ftpack@arg+1
  9918  09DD  01A8               	clrf	___ftpack@arg+2
  9919  09DE  308E               	movlw	142
  9920  09DF  00FF               	movwf	127
  9921  09E0  087F               	movf	127,w
  9922  09E1  00A9               	movwf	___ftpack@exp
  9923  09E2  0873               	movf	___awtoft@sign,w
  9924  09E3  00FF               	movwf	127
  9925  09E4  087F               	movf	127,w
  9926  09E5  00AA               	movwf	___ftpack@sign
  9927  09E6  318D  2551         	fcall	___ftpack
  9928  09E8  0020               	movlb	0	; select bank0
  9929  09E9  0826               	movf	?___ftpack,w
  9930  09EA  00F0               	movwf	?___awtoft
  9931  09EB  0827               	movf	?___ftpack+1,w
  9932  09EC  00F1               	movwf	?___awtoft+1
  9933  09ED  0828               	movf	?___ftpack+2,w
  9934  09EE  00F2               	movwf	?___awtoft+2
  9935  09EF  0008               	return
  9936  09F0                     __end_of___awtoft:	
  9937                           
  9938                           	psect	text44
  9939  08AD                     __ptext44:	
  9940 ;; *************** function ___lwtoft *****************
  9941 ;; Defined at:
  9942 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwtoft.c"
  9943 ;; Parameters:    Size  Location     Type
  9944 ;;  c               2    0[COMMON] unsigned int 
  9945 ;; Auto vars:     Size  Location     Type
  9946 ;;		None
  9947 ;; Return value:  Size  Location     Type
  9948 ;;                  3    0[COMMON] float 
  9949 ;; Registers used:
  9950 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9951 ;; Tracked objects:
  9952 ;;		On entry : 0/0
  9953 ;;		On exit  : 0/0
  9954 ;;		Unchanged: 0/0
  9955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9956 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9959 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9960 ;;Total ram usage:        3 bytes
  9961 ;; Hardware stack levels used:    1
  9962 ;; Hardware stack levels required when called:    8
  9963 ;; This function calls:
  9964 ;;		___ftpack
  9965 ;; This function is called by:
  9966 ;;		_loop
  9967 ;;		_hcsr04GetAerage
  9968 ;; This function uses a non-reentrant model
  9969 ;;
  9970                           
  9971                           
  9972                           ;psect for function ___lwtoft
  9973  08AD                     ___lwtoft:	
  9974                           
  9975                           ;incstack = 0
  9976                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9977  08AD  0870               	movf	___lwtoft@c,w
  9978  08AE  0020               	movlb	0	; select bank0
  9979  08AF  00A6               	movwf	___ftpack@arg
  9980  08B0  0871               	movf	___lwtoft@c+1,w
  9981  08B1  00A7               	movwf	___ftpack@arg+1
  9982  08B2  01A8               	clrf	___ftpack@arg+2
  9983  08B3  308E               	movlw	142
  9984  08B4  00FF               	movwf	127
  9985  08B5  087F               	movf	127,w
  9986  08B6  00A9               	movwf	___ftpack@exp
  9987  08B7  01AA               	clrf	___ftpack@sign
  9988  08B8  318D  2551         	fcall	___ftpack
  9989  08BA  0020               	movlb	0	; select bank0
  9990  08BB  0826               	movf	?___ftpack,w
  9991  08BC  00F0               	movwf	?___lwtoft
  9992  08BD  0827               	movf	?___ftpack+1,w
  9993  08BE  00F1               	movwf	?___lwtoft+1
  9994  08BF  0828               	movf	?___ftpack+2,w
  9995  08C0  00F2               	movwf	?___lwtoft+2
  9996  08C1  0008               	return
  9997  08C2                     __end_of___lwtoft:	
  9998                           
  9999                           	psect	text45
 10000  0899                     __ptext45:	
 10001 ;; *************** function _hcsr04Init *****************
 10002 ;; Defined at:
 10003 ;;		line 8 in file "HC-SR04.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;		None
 10006 ;; Auto vars:     Size  Location     Type
 10007 ;;		None
 10008 ;; Return value:  Size  Location     Type
 10009 ;;                  1    wreg      void 
 10010 ;; Registers used:
 10011 ;;		wreg, status,2, status,0
 10012 ;; Tracked objects:
 10013 ;;		On entry : 0/0
 10014 ;;		On exit  : 0/0
 10015 ;;		Unchanged: 0/0
 10016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;Total ram usage:        0 bytes
 10022 ;; Hardware stack levels used:    1
 10023 ;; Hardware stack levels required when called:    7
 10024 ;; This function calls:
 10025 ;;		Nothing
 10026 ;; This function is called by:
 10027 ;;		_main
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           
 10032                           ;psect for function _hcsr04Init
 10033  0899                     _hcsr04Init:	
 10034                           
 10035                           ;HC-SR04.c: 11: IOCAPbits.IOCAP3 = 1;
 10036                           
 10037                           ;incstack = 0
 10038                           ; Regs used in _hcsr04Init: [wreg+status,2+status,0]
 10039  0899  0027               	movlb	7	; select bank7
 10040  089A  1591               	bsf	17,3	;volatile
 10041                           
 10042                           ;HC-SR04.c: 12: PIE0bits.IOCIE = 1;
 10043  089B  0021               	movlb	1	; select bank1
 10044  089C  1610               	bsf	16,4	;volatile
 10045                           
 10046                           ;HC-SR04.c: 15: TRISCbits.TRISC4 = 0;
 10047  089D  120E               	bcf	14,4	;volatile
 10048                           
 10049                           ;HC-SR04.c: 16: PORTCbits.RC4 = 0;
 10050  089E  0020               	movlb	0	; select bank0
 10051  089F  120E               	bcf	14,4	;volatile
 10052                           
 10053                           ;HC-SR04.c: 17: WPUAbits.WPUA3 = 0;
 10054  08A0  0024               	movlb	4	; select bank4
 10055  08A1  118C               	bcf	12,3	;volatile
 10056                           
 10057                           ;HC-SR04.c: 20: T1CONbits.TMR1ON = 0;
 10058  08A2  0020               	movlb	0	; select bank0
 10059  08A3  101B               	bcf	27,0	;volatile
 10060                           
 10061                           ;HC-SR04.c: 21: T1CONbits.TMR1CS = 0b01;
 10062  08A4  081B               	movf	27,w	;volatile
 10063  08A5  393F               	andlw	-193
 10064  08A6  3840               	iorlw	64
 10065  08A7  009B               	movwf	27	;volatile
 10066                           
 10067                           ;HC-SR04.c: 22: T1CONbits.T1CKPS = 0b00;
 10068  08A8  30CF               	movlw	-49
 10069  08A9  059B               	andwf	27,f	;volatile
 10070                           
 10071                           ;HC-SR04.c: 23: T1CONbits.T1SYNC = 1;
 10072  08AA  151B               	bsf	27,2	;volatile
 10073                           
 10074                           ;HC-SR04.c: 24: T1GCONbits.TMR1GE = 0;
 10075  08AB  139C               	bcf	28,7	;volatile
 10076  08AC  0008               	return
 10077  08AD                     __end_of_hcsr04Init:	
 10078                           
 10079                           	psect	text46
 10080  08C2                     __ptext46:	
 10081 ;; *************** function ___lbtoft *****************
 10082 ;; Defined at:
 10083 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
 10084 ;; Parameters:    Size  Location     Type
 10085 ;;  c               1    wreg     unsigned char 
 10086 ;; Auto vars:     Size  Location     Type
 10087 ;;  c               1   11[BANK0 ] unsigned char 
 10088 ;; Return value:  Size  Location     Type
 10089 ;;                  3    0[COMMON] float 
 10090 ;; Registers used:
 10091 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
 10092 ;; Tracked objects:
 10093 ;;		On entry : 0/0
 10094 ;;		On exit  : 0/0
 10095 ;;		Unchanged: 0/0
 10096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10097 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;Total ram usage:        5 bytes
 10102 ;; Hardware stack levels used:    1
 10103 ;; Hardware stack levels required when called:    8
 10104 ;; This function calls:
 10105 ;;		___ftpack
 10106 ;; This function is called by:
 10107 ;;		_main
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111                           
 10112                           ;psect for function ___lbtoft
 10113  08C2                     ___lbtoft:	
 10114                           
 10115                           ;incstack = 0
 10116                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
 10117                           ;___lbtoft@c stored from wreg
 10118  08C2  0020               	movlb	0	; select bank0
 10119  08C3  00AB               	movwf	___lbtoft@c
 10120  08C4  082B               	movf	___lbtoft@c,w
 10121  08C5  00FD               	movwf	125
 10122  08C6  01FE               	clrf	126
 10123  08C7  01FF               	clrf	127
 10124  08C8  087D               	movf	125,w
 10125  08C9  00A6               	movwf	___ftpack@arg
 10126  08CA  087E               	movf	126,w
 10127  08CB  00A7               	movwf	___ftpack@arg+1
 10128  08CC  087F               	movf	127,w
 10129  08CD  00A8               	movwf	___ftpack@arg+2
 10130  08CE  308E               	movlw	142
 10131  08CF  00FF               	movwf	127
 10132  08D0  087F               	movf	127,w
 10133  08D1  00A9               	movwf	___ftpack@exp
 10134  08D2  01AA               	clrf	___ftpack@sign
 10135  08D3  318D  2551         	fcall	___ftpack
 10136  08D5  0020               	movlb	0	; select bank0
 10137  08D6  0826               	movf	?___ftpack,w
 10138  08D7  00F0               	movwf	?___lbtoft
 10139  08D8  0827               	movf	?___ftpack+1,w
 10140  08D9  00F1               	movwf	?___lbtoft+1
 10141  08DA  0828               	movf	?___ftpack+2,w
 10142  08DB  00F2               	movwf	?___lbtoft+2
 10143  08DC  0008               	return
 10144  08DD                     __end_of___lbtoft:	
 10145                           
 10146                           	psect	text47
 10147  0D51                     __ptext47:	
 10148 ;; *************** function ___ftpack *****************
 10149 ;; Defined at:
 10150 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;  arg             3    6[BANK0 ] unsigned um
 10153 ;;  exp             1    9[BANK0 ] unsigned char 
 10154 ;;  sign            1   10[BANK0 ] unsigned char 
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;		None
 10157 ;; Return value:  Size  Location     Type
 10158 ;;                  3    6[BANK0 ] float 
 10159 ;; Registers used:
 10160 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
 10161 ;; Tracked objects:
 10162 ;;		On entry : 0/0
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10166 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;Total ram usage:        5 bytes
 10171 ;; Hardware stack levels used:    1
 10172 ;; Hardware stack levels required when called:    7
 10173 ;; This function calls:
 10174 ;;		Nothing
 10175 ;; This function is called by:
 10176 ;;		___awtoft
 10177 ;;		___ftadd
 10178 ;;		___ftdiv
 10179 ;;		___ftmul
 10180 ;;		___lbtoft
 10181 ;;		___lltoft
 10182 ;;		___lwtoft
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185                           
 10186                           
 10187                           ;psect for function ___ftpack
 10188  0D51                     ___ftpack:	
 10189                           
 10190                           ;incstack = 0
 10191                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+9-btemp+11]
 10192  0D51  0020               	movlb	0	; select bank0
 10193  0D52  0829               	movf	___ftpack@exp,w
 10194  0D53  1903               	btfsc	3,2
 10195  0D54  2D5A               	goto	l3688
 10196  0D55  0828               	movf	___ftpack@arg+2,w
 10197  0D56  0427               	iorwf	___ftpack@arg+1,w
 10198  0D57  0426               	iorwf	___ftpack@arg,w
 10199  0D58  1D03               	skipz
 10200  0D59  2D6B               	goto	l3696
 10201  0D5A                     l3688:	
 10202  0D5A  3000               	movlw	0
 10203  0D5B  00A6               	movwf	?___ftpack
 10204  0D5C  3000               	movlw	0
 10205  0D5D  00A7               	movwf	?___ftpack+1
 10206  0D5E  3000               	movlw	0
 10207  0D5F  00A8               	movwf	?___ftpack+2
 10208  0D60  0008               	return
 10209  0D61                     l3692:	
 10210  0D61  3001               	movlw	1
 10211  0D62  00FF               	movwf	127
 10212  0D63  087F               	movf	127,w
 10213  0D64  07A9               	addwf	___ftpack@exp,f
 10214  0D65  3001               	movlw	1
 10215  0D66                     u3645:	
 10216  0D66  36A8               	lsrf	___ftpack@arg+2,f
 10217  0D67  0CA7               	rrf	___ftpack@arg+1,f
 10218  0D68  0CA6               	rrf	___ftpack@arg,f
 10219  0D69  0B89               	decfsz	9,f
 10220  0D6A  2D66               	goto	u3645
 10221  0D6B                     l3696:	
 10222  0D6B  30FE               	movlw	254
 10223  0D6C  0528               	andwf	___ftpack@arg+2,w
 10224  0D6D  1903               	btfsc	3,2
 10225  0D6E  2D84               	goto	l3704
 10226  0D6F  2D61               	goto	l3692
 10227  0D70                     l3698:	
 10228  0D70  3001               	movlw	1
 10229  0D71  00FF               	movwf	127
 10230  0D72  087F               	movf	127,w
 10231  0D73  07A9               	addwf	___ftpack@exp,f
 10232  0D74  3001               	movlw	1
 10233  0D75  07A6               	addwf	___ftpack@arg,f
 10234  0D76  3000               	movlw	0
 10235  0D77  1803               	skipnc
 10236  0D78  3001               	movlw	1
 10237  0D79  07A7               	addwf	___ftpack@arg+1,f
 10238  0D7A  3000               	movlw	0
 10239  0D7B  1803               	skipnc
 10240  0D7C  3001               	movlw	1
 10241  0D7D  07A8               	addwf	___ftpack@arg+2,f
 10242  0D7E  3001               	movlw	1
 10243  0D7F                     u3665:	
 10244  0D7F  36A8               	lsrf	___ftpack@arg+2,f
 10245  0D80  0CA7               	rrf	___ftpack@arg+1,f
 10246  0D81  0CA6               	rrf	___ftpack@arg,f
 10247  0D82  0B89               	decfsz	9,f
 10248  0D83  2D7F               	goto	u3665
 10249  0D84                     l3704:	
 10250  0D84  30FF               	movlw	255
 10251  0D85  0528               	andwf	___ftpack@arg+2,w
 10252  0D86  1903               	btfsc	3,2
 10253  0D87  2D91               	goto	l3708
 10254  0D88  2D70               	goto	l3698
 10255  0D89                     l3706:	
 10256  0D89  3001               	movlw	1
 10257  0D8A  02A9               	subwf	___ftpack@exp,f
 10258  0D8B  3001               	movlw	1
 10259  0D8C                     u3685:	
 10260  0D8C  35A6               	lslf	___ftpack@arg,f
 10261  0D8D  0DA7               	rlf	___ftpack@arg+1,f
 10262  0D8E  0DA8               	rlf	___ftpack@arg+2,f
 10263  0D8F  0B89               	decfsz	9,f
 10264  0D90  2D8C               	goto	u3685
 10265  0D91                     l3708:	
 10266  0D91  1BA7               	btfsc	___ftpack@arg+1,7
 10267  0D92  2D97               	goto	l762
 10268  0D93  3002               	movlw	2
 10269  0D94  0229               	subwf	___ftpack@exp,w
 10270  0D95  1803               	skipnc
 10271  0D96  2D89               	goto	l3706
 10272  0D97                     l762:	
 10273  0D97  1829               	btfsc	___ftpack@exp,0
 10274  0D98  2D9F               	goto	l763
 10275  0D99  30FF               	movlw	255
 10276  0D9A  05A6               	andwf	___ftpack@arg,f
 10277  0D9B  307F               	movlw	127
 10278  0D9C  05A7               	andwf	___ftpack@arg+1,f
 10279  0D9D  30FF               	movlw	255
 10280  0D9E  05A8               	andwf	___ftpack@arg+2,f
 10281  0D9F                     l763:	
 10282  0D9F  1003               	clrc
 10283  0DA0  0CA9               	rrf	___ftpack@exp,f
 10284  0DA1  0829               	movf	___ftpack@exp,w
 10285  0DA2  00FD               	movwf	125
 10286  0DA3  01FE               	clrf	126
 10287  0DA4  01FF               	clrf	127
 10288  0DA5  3010               	movlw	16
 10289  0DA6                     u3725:	
 10290  0DA6  35FD               	lslf	125,f
 10291  0DA7  0DFE               	rlf	126,f
 10292  0DA8  0DFF               	rlf	127,f
 10293  0DA9  0B89               	decfsz	9,f
 10294  0DAA  2DA6               	goto	u3725
 10295  0DAB  087D               	movf	125,w
 10296  0DAC  04A6               	iorwf	___ftpack@arg,f
 10297  0DAD  087E               	movf	126,w
 10298  0DAE  04A7               	iorwf	___ftpack@arg+1,f
 10299  0DAF  087F               	movf	127,w
 10300  0DB0  04A8               	iorwf	___ftpack@arg+2,f
 10301  0DB1  082A               	movf	___ftpack@sign,w
 10302  0DB2  1903               	btfsc	3,2
 10303  0DB3  0008               	return
 10304  0DB4  17A8               	bsf	___ftpack@arg+2,7
 10305  0DB5  0008               	return
 10306  0DB6                     __end_of___ftpack:	
 10307                           
 10308                           	psect	text48
 10309  083F                     __ptext48:	
 10310 ;; *************** function _EEPROMRead *****************
 10311 ;; Defined at:
 10312 ;;		line 29 in file "eeprom.c"
 10313 ;; Parameters:    Size  Location     Type
 10314 ;;  address         2    0[COMMON] unsigned int 
 10315 ;; Auto vars:     Size  Location     Type
 10316 ;;		None
 10317 ;; Return value:  Size  Location     Type
 10318 ;;                  1    wreg      unsigned char 
 10319 ;; Registers used:
 10320 ;;		wreg, status,2
 10321 ;; Tracked objects:
 10322 ;;		On entry : 0/0
 10323 ;;		On exit  : 0/0
 10324 ;;		Unchanged: 0/0
 10325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;Total ram usage:        2 bytes
 10331 ;; Hardware stack levels used:    1
 10332 ;; Hardware stack levels required when called:    7
 10333 ;; This function calls:
 10334 ;;		Nothing
 10335 ;; This function is called by:
 10336 ;;		_main
 10337 ;; This function uses a non-reentrant model
 10338 ;;
 10339                           
 10340                           
 10341                           ;psect for function _EEPROMRead
 10342  083F                     _EEPROMRead:	
 10343                           
 10344                           ;eeprom.c: 30: NVMADRH = ((address >> 8) & 0xFF);
 10345                           
 10346                           ;incstack = 0
 10347                           ; Regs used in _EEPROMRead: [wreg+status,2]
 10348  083F  0871               	movf	EEPROMRead@address+1,w
 10349  0840  0031               	movlb	17	; select bank17
 10350  0841  0092               	movwf	18	;volatile
 10351                           
 10352                           ;eeprom.c: 31: NVMADRL = (address & 0xFF);
 10353  0842  0870               	movf	EEPROMRead@address,w
 10354  0843  0091               	movwf	17	;volatile
 10355                           
 10356                           ;eeprom.c: 32: NVMCON1bits.NVMREGS = 1;
 10357  0844  1715               	bsf	21,6	;volsfr
 10358                           
 10359                           ;eeprom.c: 33: NVMCON1bits.RD = 1;
 10360  0845  1415               	bsf	21,0	;volsfr
 10361                           
 10362                           ;eeprom.c: 34: __nop();
 10363  0846  0000               	nop
 10364                           
 10365                           ;eeprom.c: 35: __nop();
 10366  0847  0000               	nop
 10367                           
 10368                           ;eeprom.c: 37: return (NVMDATL);
 10369  0848  0031               	movlb	17	; select bank17
 10370  0849  0813               	movf	19,w	;volatile
 10371  084A  0008               	return
 10372  084B                     __end_of_EEPROMRead:	
 10373                           
 10374                           	psect	intentry
 10375  0004                     __pintentry:	
 10376 ;; *************** function _ISR *****************
 10377 ;; Defined at:
 10378 ;;		line 13 in file "main.c"
 10379 ;; Parameters:    Size  Location     Type
 10380 ;;		None
 10381 ;; Auto vars:     Size  Location     Type
 10382 ;;		None
 10383 ;; Return value:  Size  Location     Type
 10384 ;;                  1    wreg      void 
 10385 ;; Registers used:
 10386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath, cstack
 10387 ;; Tracked objects:
 10388 ;;		On entry : 0/0
 10389 ;;		On exit  : 0/0
 10390 ;;		Unchanged: 0/0
 10391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;Total ram usage:        6 bytes
 10397 ;; Hardware stack levels used:    1
 10398 ;; Hardware stack levels required when called:    6
 10399 ;; This function calls:
 10400 ;;		_hcsr04ISR
 10401 ;;		_nrf24l01ISR
 10402 ;; This function is called by:
 10403 ;;		Interrupt level 1
 10404 ;; This function uses a non-reentrant model
 10405 ;;
 10406                           
 10407  0004                     _ISR:	
 10408                           
 10409                           ;incstack = 0
 10410                           ; Regs used in _ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+btemp+11+p
      +                          clath+cstack]
 10411  0004  3180               	pagesel	$
 10412  0005  0874               	movf	116,w
 10413  0006  0020               	movlb	0	; select bank0
 10414  0007  00A0               	movwf	??_ISR
 10415  0008  0875               	movf	117,w
 10416  0009  00A1               	movwf	??_ISR+1
 10417  000A  087C               	movf	124,w
 10418  000B  00A2               	movwf	??_ISR+2
 10419  000C  087D               	movf	125,w
 10420  000D  00A3               	movwf	??_ISR+3
 10421  000E  087F               	movf	127,w
 10422  000F  00A4               	movwf	??_ISR+4
 10423  0010  30AF               	movlw	low ___int_sp
 10424  0011  0086               	movwf	6
 10425  0012  3022               	movlw	high ___int_sp
 10426  0013  0087               	movwf	7
 10427  0014  0875               	movf	117,w
 10428  0015  00A5               	movwf	??_ISR+5
 10429                           
 10430                           ;main.c: 15: if (IOCAFbits.IOCAF3){
 10431  0016  0027               	movlb	7	; select bank7
 10432  0017  1D93               	btfss	19,3	;volatile
 10433  0018  281E               	goto	i1l4808
 10434                           
 10435                           ;main.c: 16: hcsr04ISR();
 10436  0019  3188  2012  3180   	fcall	_hcsr04ISR
 10437                           
 10438                           ;main.c: 17: IOCAFbits.IOCAF3 = 0;
 10439  001C  0027               	movlb	7	; select bank7
 10440  001D  1193               	bcf	19,3	;volatile
 10441  001E                     i1l4808:	
 10442                           
 10443                           ;main.c: 18: };main.c: 20: if (PIR0bits.INTF){
 10444  001E  0020               	movlb	0	; select bank0
 10445  001F  1C10               	btfss	16,0	;volatile
 10446  0020  2825               	goto	i1l4814
 10447                           
 10448                           ;main.c: 21: nrf24l01ISR();
 10449  0021  318C  2471         	fcall	_nrf24l01ISR
 10450                           
 10451                           ;main.c: 22: PIR0bits.INTF = 0;
 10452  0023  0020               	movlb	0	; select bank0
 10453  0024  1010               	bcf	16,0	;volatile
 10454  0025                     i1l4814:	
 10455                           
 10456                           ;main.c: 23: };main.c: 25: if (PIR1bits.ADIF){
 10457  0025  1B11               	btfsc	17,6	;volatile
 10458                           
 10459                           ;main.c: 26: PIR1bits.ADIF = 0;
 10460  0026  1311               	bcf	17,6	;volatile
 10461  0027  0825               	movf	??_ISR+5,w
 10462  0028  00FF               	movwf	127
 10463  0029  0824               	movf	??_ISR+4,w
 10464  002A  00FD               	movwf	125
 10465  002B  0823               	movf	??_ISR+3,w
 10466  002C  00FC               	movwf	124
 10467  002D  0822               	movf	??_ISR+2,w
 10468  002E  00F5               	movwf	117
 10469  002F  0821               	movf	??_ISR+1,w
 10470  0030  00F4               	movwf	116
 10471  0031  0009               	retfie
 10472  0032                     __end_of_ISR:	
 10473                           
 10474                           	psect	text50
 10475  0C71                     __ptext50:	
 10476 ;; *************** function _nrf24l01ISR *****************
 10477 ;; Defined at:
 10478 ;;		line 151 in file "nrf24l01.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;		None
 10481 ;; Auto vars:     Size  Location     Type
 10482 ;;		None
 10483 ;; Return value:  Size  Location     Type
 10484 ;;                  1    wreg      void 
 10485 ;; Registers used:
 10486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+11, pclath
 10487 ;; Tracked objects:
 10488 ;;		On entry : 0/0
 10489 ;;		On exit  : 0/0
 10490 ;;		Unchanged: 0/0
 10491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;Total ram usage:        0 bytes
 10497 ;; Hardware stack levels used:    1
 10498 ;; Hardware stack levels required when called:    5
 10499 ;; This function calls:
 10500 ;;		_nrf24l01Send
 10501 ;;		_nrf24l01Service
 10502 ;;		_nrf24l01SetRXMode
 10503 ;; This function is called by:
 10504 ;;		_ISR
 10505 ;; This function uses a non-reentrant model
 10506 ;;
 10507                           
 10508                           
 10509                           ;psect for function _nrf24l01ISR
 10510  0C71                     _nrf24l01ISR:	
 10511                           
 10512                           ;nrf24l01.c: 153: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
 10513                           
 10514                           ;incstack = 0
 10515                           ; Regs used in _nrf24l01ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8+btemp+9+bt
      +                          emp+11+pclath]
 10516  0C71  3000               	movlw	0
 10517  0C72  001E               	movwi fsr1++
 10518  0C73  3007               	movlw	7
 10519  0C74  3188  2086  318C   	fcall	_nrf24l01Send
 10520  0C77  00FF               	movwf	127
 10521  0C78  087F               	movf	127,w
 10522  0C79  0020               	movlb	0	; select bank0
 10523  0C7A  00E6               	movwf	_status+2	;volatile
 10524                           
 10525                           ;nrf24l01.c: 156: if (status.statusRegister.RX_DR){
 10526  0C7B  1F66               	btfss	_status+2,6	;volatile
 10527  0C7C  2C89               	goto	i1l4712
 10528                           
 10529                           ;nrf24l01.c: 159: if (status.RX == 0){
 10530  0C7D  0865               	movf	_status+1,w	;volatile
 10531  0C7E  1D03               	btfss	3,2
 10532  0C7F  2C85               	goto	i1l303
 10533                           
 10534                           ;nrf24l01.c: 160: status.RX = 1;
 10535  0C80  3001               	movlw	1
 10536  0C81  00FF               	movwf	127
 10537  0C82  087F               	movf	127,w
 10538  0C83  00E5               	movwf	_status+1	;volatile
 10539                           
 10540                           ;nrf24l01.c: 161: }
 10541  0C84  2C86               	goto	i1l4710
 10542  0C85                     i1l303:	
 10543                           
 10544                           ;nrf24l01.c: 163: else{;nrf24l01.c: 164: status.statusRegister.RX_DR = 0;
 10545  0C85  1366               	bcf	_status+2,6	;volatile
 10546  0C86                     i1l4710:	
 10547                           
 10548                           ;nrf24l01.c: 165: };nrf24l01.c: 167: nrf24l01Service();
 10549  0C86  3187  2759  318C   	fcall	_nrf24l01Service
 10550  0C89                     i1l4712:	
 10551                           
 10552                           ;nrf24l01.c: 168: };nrf24l01.c: 170: if (status.statusRegister.TX_DS){
 10553  0C89  0020               	movlb	0	; select bank0
 10554  0C8A  1EE6               	btfss	_status+2,5	;volatile
 10555  0C8B  2CB0               	goto	i1l4728
 10556                           
 10557                           ;nrf24l01.c: 175: if (lastTXPacket->packetData.ACKRequest){
 10558  0C8C  0869               	movf	_lastTXPacket,w
 10559  0C8D  0084               	movwf	4
 10560  0C8E  3001               	movlw	1	; select bank2/3
 10561  0C8F  0085               	movwf	5
 10562  0C90  1D00               	btfss	0,2
 10563  0C91  2C9F               	goto	i1l4720
 10564                           
 10565                           ;nrf24l01.c: 176: status.TX = 3;
 10566  0C92  3003               	movlw	3
 10567  0C93  00FF               	movwf	127
 10568  0C94  087F               	movf	127,w
 10569  0C95  00E4               	movwf	_status	;volatile
 10570                           
 10571                           ;nrf24l01.c: 177: status.retryCount = 0xFF;
 10572  0C96  30FF               	movlw	255
 10573  0C97  00FF               	movwf	127
 10574  0C98  087F               	movf	127,w
 10575  0C99  00E8               	movwf	_status+4	;volatile
 10576                           
 10577                           ;nrf24l01.c: 178: nrf24l01SetRXMode(1);
 10578  0C9A  3001               	movlw	1
 10579  0C9B  318B  2331  318C   	fcall	_nrf24l01SetRXMode
 10580                           
 10581                           ;nrf24l01.c: 179: }
 10582  0C9E  2CAD               	goto	i1l4726
 10583  0C9F                     i1l4720:	
 10584                           
 10585                           ;nrf24l01.c: 183: else if(lastTXPacket->packetData.IsACK){
 10586  0C9F  0020               	movlb	0	; select bank0
 10587  0CA0  0869               	movf	_lastTXPacket,w
 10588  0CA1  0084               	movwf	4
 10589  0CA2  3001               	movlw	1	; select bank2/3
 10590  0CA3  0085               	movwf	5
 10591  0CA4  1D80               	btfss	0,3
 10592  0CA5  2CAB               	goto	i1l4724
 10593                           
 10594                           ;nrf24l01.c: 184: nrf24l01SetRXMode(1);
 10595  0CA6  3001               	movlw	1
 10596  0CA7  318B  2331  318C   	fcall	_nrf24l01SetRXMode
 10597                           
 10598                           ;nrf24l01.c: 185: }
 10599  0CAA  2CAD               	goto	i1l4726
 10600  0CAB                     i1l4724:	
 10601                           
 10602                           ;nrf24l01.c: 188: else{;nrf24l01.c: 189: status.TX = 0;
 10603  0CAB  0020               	movlb	0	; select bank0
 10604  0CAC  01E4               	clrf	_status	;volatile
 10605  0CAD                     i1l4726:	
 10606                           
 10607                           ;nrf24l01.c: 190: };nrf24l01.c: 192: nrf24l01Service();
 10608  0CAD  3187  2759  318C   	fcall	_nrf24l01Service
 10609  0CB0                     i1l4728:	
 10610                           
 10611                           ;nrf24l01.c: 193: };nrf24l01.c: 198: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          7, status.statusRegister.byte);
 10612  0CB0  0020               	movlb	0	; select bank0
 10613  0CB1  0866               	movf	_status+2,w	;volatile
 10614  0CB2  001E               	movwi fsr1++
 10615  0CB3  3027               	movlw	39
 10616  0CB4  3188  2086         	fcall	_nrf24l01Send
 10617  0CB6  0008               	return
 10618  0CB7                     __end_of_nrf24l01ISR:	
 10619                           
 10620                           	psect	text51
 10621  0812                     __ptext51:	
 10622 ;; *************** function _hcsr04ISR *****************
 10623 ;; Defined at:
 10624 ;;		line 86 in file "HC-SR04.c"
 10625 ;; Parameters:    Size  Location     Type
 10626 ;;		None
 10627 ;; Auto vars:     Size  Location     Type
 10628 ;;		None
 10629 ;; Return value:  Size  Location     Type
 10630 ;;                  1    wreg      void 
 10631 ;; Registers used:
 10632 ;;		status,2
 10633 ;; Tracked objects:
 10634 ;;		On entry : 0/0
 10635 ;;		On exit  : 0/0
 10636 ;;		Unchanged: 0/0
 10637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10642 ;;Total ram usage:        0 bytes
 10643 ;; Hardware stack levels used:    1
 10644 ;; This function calls:
 10645 ;;		Nothing
 10646 ;; This function is called by:
 10647 ;;		_ISR
 10648 ;; This function uses a non-reentrant model
 10649 ;;
 10650                           
 10651                           
 10652                           ;psect for function _hcsr04ISR
 10653  0812                     _hcsr04ISR:	
 10654                           
 10655                           ;HC-SR04.c: 87: waiting = 0;
 10656                           
 10657                           ;incstack = 0
 10658                           ; Regs used in _hcsr04ISR: [status,2]
 10659  0812  0021               	movlb	1	; select bank1
 10660  0813  01E8               	clrf	_waiting^(0+128)	;volatile
 10661                           
 10662                           ;HC-SR04.c: 88: T1CONbits.TMR1ON = 0;
 10663  0814  0020               	movlb	0	; select bank0
 10664  0815  101B               	bcf	27,0	;volatile
 10665  0816  0008               	return
 10666  0817                     __end_of_hcsr04ISR:	
 10667  0074                     btemp	set	116	;btemp
 10668  0074                     wtemp0	set	116
 10669  0076                     wtemp1	set	118
 10670  0078                     wtemp2	set	120
 10671  007A                     wtemp3	set	122
 10672  007C                     wtemp4	set	124
 10673  007E                     wtemp5	set	126
 10674  0074                     ttemp0	set	116
 10675  0077                     ttemp1	set	119
 10676  007A                     ttemp2	set	122
 10677  007D                     ttemp3	set	125
 10678  0074                     ltemp0	set	116
 10679  0078                     ltemp1	set	120
 10680  007C                     ltemp2	set	124
 10681  0076                     ltemp3	set	118


Data Sizes:
    Strings     39
    Constant    46
    Data        1
    BSS         130
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            4      4       4
    BANK0            80     68      74
    BANK1            80     60      74
    BANK2            80      0      45
    BANK3            80      0      66
    BANK4            80     45      45
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@ftoaStatus(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK3[32]), TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 
		 -> RXPacket(BANK3[33]), romDataMap(BANK2[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK2[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), main@packet(BANK1[33]), 
		 -> STR_6(CODE[4]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK3[32]), RXPacket(BANK3[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK2[17]), STR_7(CODE[6]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[6]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendTXBuffer@packet	PTR struct . size(1) Largest target is 33
		 -> TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    lastTXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), TXPacket(BANK3[33]), RXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK3[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_7(CODE[6]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[6]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), romDataMap(BANK2[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK3[33]), main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK4[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK2[28]), 


Critical Paths under _main in COMMON

    _main->_EEPROMWrite
    _main->___lbtoft
    _main->_nrf24l01SetTXPipe
    _main->_strcpy
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01SetTXPipe->___bmul
    _nrf24l01GetPipe->___lwmod
    _sendMessage->___lbtoft
    _sendMessage->_sleepMs
    _sendMessage->_strcpy
    _nrf24l01SendPacket->_sleepMs
    _nrf24l01SendPacket->_strcpy
    _exception->_EEPROMWrite
    _ftoa->___lltoft
    _sprintf->___wmul
    ___ftsub->___lltoft
    _getADCValue->___awtoft
    _getADCValue->_sleepMs
    ___ftadd->___awtoft

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetTXPipe
    _nrf24l01GetPipe->___lwmod
    _sendMessage->_strcat
    _nrf24l01SendPacket->_strcpy
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    ___lwtoft->___ftpack
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sendMessage
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_loop

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   99687
                                             67 BANK0      1     1      0
                                             26 BANK1     34    34      0
                         _EEPROMRead
                        _EEPROMWrite
                           ___lbtoft
                         _hcsr04Init
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    2274
                                             16 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    2274
                                              7 BANK0      9     9      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetTXPipe                                    2     2      0     406
                                              3 COMMON     1     1      0
                                              6 BANK0      1     1      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     344
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    3     3      0     611
                                              0 COMMON     3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      4     4      0     807
                                              7 BANK0      4     4      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     440
                                              0 COMMON     4     0      4
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _loop                                                45    45      0   62962
                                              0 BANK4     45    45      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft
                        _getADCValue
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                          9     2      7   27655
                                             17 BANK1      9     2      7
                         _EEPROMRead (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                 _nrf24l01SendPacket
                            _sleepMs
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     751
                                             65 BANK0      2     2      0
                                             13 BANK1      4     0      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   4     2      2    4739
                                              8 BANK0      4     2      2
                          _exception
                    _nrf24l01Service
                            _sleepMs
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     565
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2567
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (3) _exception                                            1     1      0     574
                                              6 BANK0      1     1      0
                        _EEPROMWrite
 ---------------------------------------------------------------------------------
 (4) _EEPROMWrite                                          4     1      3     543
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                13     9      4   19094
                                              0 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    24     10    3016
                                             27 BANK0     26    16     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     552
                                              0 COMMON     4     0      4
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     440
                                              0 COMMON     1     1      0
                                             19 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     449
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    3741
                                              0 COMMON     4     0      4
                                             11 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             10     6      4     579
                                             55 BANK0     10     6      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6104
                                             21 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                             43 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             12     6      6    4439
                                             43 BANK0     12     6      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     406
                                              6 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                          9     6      3   15657
                                             34 BANK0      9     6      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _sleepMs                                              4     2      2     889
                                              0 COMMON     4     2      2
                           _resetWDT
 ---------------------------------------------------------------------------------
 (3) _resetWDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             13     7      6    4995
                                             21 BANK0     13     7      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             10     4      6    5800
                                             11 BANK0     10     4      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3772
                                              0 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3878
                                              0 COMMON     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _hcsr04Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lbtoft                                             5     1      4    3566
                                              0 COMMON     4     0      4
                                             11 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             5     0      5    3535
                                              6 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (1) _EEPROMRead                                           2     0      2     166
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  6     6      0    3648
                                              0 BANK0      6     6      0
                          _hcsr04ISR
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         0     0      0    3648
                       _nrf24l01Send
                    _nrf24l01Service
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    2567
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (10) _hcsr04ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMRead
   _EEPROMWrite
   ___lbtoft
     ___ftpack
   _hcsr04Init
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___lwtoft
       ___ftpack
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _sendMessage
       _EEPROMRead (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _exception
           _EEPROMWrite
         _nrf24l01Service
           _memset
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _nrf24l01SendTXBuffer
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
             _nrf24l01SetRXMode
               _nrf24l01Send
                 _nrf24l01SPIEnd
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
             _strlen
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strcmp
         _sleepMs
           _resetWDT
         _strcpy
       _sleepMs (ARG)
         _resetWDT
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _sleepMs
                   _resetWDT
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
   _sendMessage
     _EEPROMRead (ARG)
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _exception
         _EEPROMWrite
       _nrf24l01Service
         _memset
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _nrf24l01SendTXBuffer
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strlen
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strcmp
       _sleepMs
         _resetWDT
       _strcpy
     _sleepMs (ARG)
       _resetWDT
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _hcsr04ISR
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01Service
       _memset
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SendTXBuffer
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strlen
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _strcmp
     _nrf24l01SetRXMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            4      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               4      4       4       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3C      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2D       9       56.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     2D      2D      13       56.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     134      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Aug 20 10:03:59 2018

                ___bmul@product 0071                     __CFG_CP$OFF 0000                              l55 086D  
              sendMessage@value 00B5                sendMessage@topic 00B3             ___wmul@multiplicand 0072  
                  ___ftadd@exp1 0034                    ___ftadd@exp2 0033               sendMessage@packet 00B1  
                   __CFG_LVP$ON 0000                    ___ftadd@sign 0032                             l332 07FC  
                           l185 0FB7                             l275 0B6A                             l526 0107  
                           l358 09A5                             l359 09A4                             l552 0922  
                           l288 0960                             l529 0126                             l762 0D97  
                           l763 0D9F                             l846 0EA8                             l786 03D1  
                           l977 0AFB                    __CFG_CPD$OFF 0000                             _ISR 0004  
                           wreg 0009                            ?_ISR 0070                    ___ftdiv@cntr 003C  
                  ___ftdiv@sign 0041                  ??_nrf24l01Init 0030                            l4010 0109  
                          l4100 0B83                            l4020 0135                            l4030 0154  
                          l4014 010E                            l4006 00D4                            l4104 0B99  
                          l4008 0103                            l4122 0613                            l4210 0E84  
                          l4220 0E9F                            l4052 01AA                            l4044 0187  
                          l4036 015A                            l4222 0EAB                            l4214 0E92  
                          l4160 0688                            l4144 0664                            l4128 0629  
                          l4072 021A                            l4056 01BD                            l4048 0196  
                          l4226 0EB9                            l4066 01D5                            l4058 01C0  
                          l4074 0064                            l4322 096C                            l4082 0877  
                          l4156 0680                            l4148 066C                            l4236 0A1E  
                          l4076 0225                            l4182 0902                            l4238 0A2E  
                          l4270 0557                            l4342 0CDB                            l4502 076E  
                          l4254 0AA4                            l4086 087D                            l3704 0D84  
                          l4416 0737                            l4408 071E                            l4192 0E54  
                          l3800 0D48                            l4248 0AD5                            l4344 0CF2  
                          l4360 09F3                            l4256 0AB0                            l3706 0D89  
                          l4450 0F91                            l4362 0A12                            l4258 0AB9  
                          l3708 0D91                            l3812 035A                            l4460 0FD9  
                          l4452 0F7E                            l4292 0BF0                            l4374 09D8  
                          l3822 0370                            l4390 06DD                            l3910 0A54  
                          l3670 0872                            l4358 0A00                            l4550 07EF  
                          l4526 079E                            l4294 0C0E                            l3840 039D  
                          l3816 0361                            l4384 06C7                            l3920 0A64  
                          l4464 0FF1                            l4448 0F86                            l3760 0864  
                          l4528 07B3                            l4632 02A9                            l3834 038A  
                          l4466 0FF8                            l4538 07D2                            l4642 02F3  
                          l3692 0D61                            l3844 03A7                            l3924 0A6C  
                          l3908 0A48                            l3940 094A                            l3932 08E2  
                          l3862 03E3                            l3854 03C3                            l3846 03AC  
                          l3766 091B                            l3950 0B3B                            l3696 0D6B  
                          l3688 0D5A                            l3848 03B0                            l4496 0764  
                          l4752 0B02                            l4648 0302                            l3698 0D70  
                          l3866 03F5                            l3858 03CD                            l3786 0D0F  
                          l3890 0BBF                            l3938 093F                            l4690 0A8E  
                          l4754 0B22                            l3876 0410                            l3796 0D3D  
                          l3788 0D1D                            l3956 0B43                            l4684 0A76  
                          l4908 0F57                            l3894 0BD7                            l3982 0087  
                          l4686 0A82                            l4694 0A97                            l3888 0BB1  
                          l3898 0BE2                            l3988 0097                            l3996 00C5  
                          STR_1 1053                    __CFG_WDTE$ON 0000                            STR_2 1053  
                          STR_3 103A                            STR_4 104A                            STR_5 1045  
                          STR_6 104F                            STR_7 1034                            STR_8 1029  
                          u4005 039E                            u4035 03B1                            u4125 0BB4  
                          u4065 03C4                            u4145 0BCD                            u4155 0BD8  
                          u4405 017D                            u5205 0A88                            u5215 0A8F  
                          u4184 0A50                            u4185 0A4E                            u4425 018E  
                          u4435 01A0                            u3725 0DA6                            u3645 0D66  
                          u4605 0673                            u4445 01B2                            u3665 0D7F  
                          u3825 0D12                            u5185 0A79                            u5417 0EDE  
                          u4635 0689                            u5427 09B8                            u3685 0D8C  
                          u4645 068F                            u4565 0635                            u4725 0E85  
                          u3845 0D1E                            u5285 0B10                            u5437 09C4  
                          u4575 0645                            u3855 0D32                            u5447 0CF8  
                          u3865 0D3E                            u3785 0923                            u5457 0B4D  
                          u4595 066D                            u4755 0EA0                            u3795 0928  
                          u5467 0B5E                            u5477 0B67                            u3975 038B  
                          u4695 0E5B                            u5487 083B                            u4945 06EF  
                          u4785 0A23                            u5497 082E                            u4874 0966  
                          u4955 06FF                            u4875 0965                            u4965 071F  
                          u4975 072E                            u4985 0738                            _WPUA 020C  
                          _WPUC 020E  __size_of_nrf24l01InterfaceInit 001E                    __CFG_WRT$OFF 0000  
                 __CFG_FCMEN$ON 0000   __end_of_nrf24l01InterfaceInit 0990                            ___sp 216D  
                          _main 0EC2                            _ftoa 0515                    ___ftpack@arg 0026  
                          _loop 0428                    ___ftpack@exp 0029                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          fsr1l 0006                            btemp 0074                   __CFG_BORV$LOW 0000  
                          start 0032           nrf24l01SetRXPipe@pipe 0071             __size_of_EEPROMRead 000C  
                 __CFG_CSWEN$ON 0000               ___bmul@multiplier 0072                   __CFG_MCLRE$ON 0000  
                  ___ftmul@cntr 0055                    ___ftmul@sign 0056     __size_of_nrf24l01SendPacket 0043  
                         ??_ISR 0020                    ___fttol@exp1 0060            __size_of_getADCValue 00A5  
                  ___fttol@lval 005C                           ?_main 0070                           ?_ftoa 00A0  
                         ?_loop 0070                 __end_of___ftadd 0428                 __end_of___ftdiv 0759  
               __end_of___ftneg 082D                 __end_of___lldiv 0D51                 __end_of___ftmul 06B0  
               EEPROMWrite@data 0072                 __end_of___llmod 0BEB                 __end_of___ftsub 0918  
               __end_of___fttol 0EC2                  __CFG_DEBUG$OFF 0000                           i1l303 0C85  
               __end_of___lwmod 0A9C                           _TMR1H 001A                           _TMR1L 0019  
                 __CFG_PWRTE$ON 0000           nrf24l01SetTXPipe@pipe 0026                    ___lltoft@exp 002B  
                 ___awtoft@sign 0073                 __end_of_dpowers 1028                 __end_of_isdigit 0866  
                 ___ftpack@sign 002A                           _rloop 00E4                           ftoa@f 00A0  
                         ftoa@l 00A8                  __CFG_BOREN$OFF 0000                 __end_of_sleepMs 0A6F  
                         ltemp0 0074                           ltemp1 0078                           ltemp2 007C  
                         ltemp3 0076                           ttemp0 0074                           ttemp1 0077  
                         ttemp2 007A                           ttemp3 007D                           status 0003  
                         wtemp0 0074                           wtemp1 0076                           wtemp2 0078  
                         wtemp3 007A                           wtemp4 007C                           wtemp5 007E  
               __end_of_sprintf 022B               getADCValue@adcSum 0048                _nrf24l01SPIStart 0836  
          __size_of_EEPROMWrite 001F                 __initialization 0034          nrf24l01InitRegisters@i 002E  
                  __end_of_main 0F5B                    __end_of_ftoa 05FC                    __end_of_loop 0515  
                        ??_main 0063                   ___fttol@sign1 005B                          ??_ftoa 0074  
                        ??_loop 0074                    ?_sendMessage 00B1        __size_of_nrf24l01SPISend 000F  
              ___llmod@dividend 0037                          _ADRESH 009C                          _ADRESL 009B  
              __end_of___awtoft 09F0                          _ANSELA 018C                          _ANSELC 018E  
              __end_of___ftpack 0DB6                __end_of___lbtoft 08DD                __end_of___lltoft 0A43  
                        _ODCONA 028C        __size_of_nrf24l01GetPipe 0034                          _ODCONC 028E  
                        i1l4710 0C86                          i1l4720 0C9F                          i1l4712 0C89  
                        i1l4724 0CAB                          i1l4726 0CAD                          i1l4814 0025  
                        i1l4728 0CB0                          i1l4808 001E                          _INLVLA 038C  
                        _INLVLC 038E                __end_of___lwtoft 08C2        __size_of_nrf24l01Service 00A5  
          __size_of_nrf24l01ISR 0046                          ___bmul 0875                          ___ftge 0B6C  
                        ___wmul 0918                       ??___ftadd 0031                  __CFG_STVREN$ON 0000  
                     ??___ftdiv 003B                       ??___ftneg 0074                       ??___lldiv 0070  
                     ??___ftmul 0074                       ??___llmod 0070                       ??___ftsub 0074  
                     ??___fttol 0074                       ??___lwmod 0074            __end_of_nrf24l01Init 09CE  
          __end_of_nrf24l01Send 0899                          _memset 0ACB           _nrf24l01InitRegisters 022B  
                        _rcount 00E0                          _rlimit 00E2                          _status 0064  
                        _strcat 0A9C                          _strcmp 09F0                          _strcpy 08DD  
                        _strlen 0936                          ftoa@cp 00AC           ___ftmul@f3_as_product 0052  
              __end_of_resetWDT 0824                    ??_EEPROMRead 0072                       ??_isdigit 0070  
                        loop@ta 0223                          loop@vt 0220                       ??_sleepMs 0072  
                     ??_sprintf 0045              getADCValue@adcLoop 0047         __end_of__initialization 0057  
                    ___ftadd@f1 002B                      ___ftadd@f2 002E                      ___ftge@ff1 0026  
                    ___ftge@ff2 0029              getADCValue@channel 0046                      ___ftdiv@f1 0038  
                    ___ftdiv@f2 0035                      ___ftdiv@f3 003D                      ___ftneg@f1 004B  
                    ___awtoft@c 0070                      ___lbtoft@c 002B             ___bmul@multiplicand 0070  
                    ___ftmul@f1 004B                      ___ftmul@f2 004E              __end_of_EEPROMRead 084B  
                    ___ftsub@f1 0038                      ___ftsub@f2 0035                      ___fttol@f1 0057  
                __pcstackCOMMON 0070                    __pidataBANK1 07FE   __size_of_nrf24l01SendTXBuffer 0047  
                    ___lltoft@c 0070              __size_of_hcsr04ISR 0005                      ___lwtoft@c 0070  
                  sprintf@width 0050                      __pbssBANK0 0064                      __pbssBANK1 00DC  
                    __pbssBANK2 0120                      __pbssBANK3 01A0           sendMessage@ftoaStatus 00B8  
            __size_of_exception 000D               ??_nrf24l01GetPipe 0027                      __pmaintext 0EC2  
                    _hcsr04Init 0899                         ?___bmul 0070                         ?___ftge 0026  
                       ?___wmul 0070                 __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0B31  
             _nrf24l01SetRXPipe 0954          ?_nrf24l01InitRegisters 0070                      __pintentry 0004  
             _nrf24l01SetTXPipe 0C2E                       ?___awtoft 0070                       ?___ftpack 0026  
                     ?___lbtoft 0070              ?_nrf24l01SetRXPipe 0070              ?_nrf24l01SetTXPipe 0070  
                     ?___lltoft 0070             __CFG_RSTOSC$HFINT32 0000                         ?_strcat 00AD  
                       ?_strcpy 0070                       ?___lwtoft 0070           __end_of_n_ADDRESS_MUL 1029  
          __size_of_sendMessage 0085        __end_of_nrf24l01SPIStart 083F             ??_nrf24l01SetRXPipe 0070  
           ??_nrf24l01SetTXPipe 0073                         _NVMADRH 0892                         _NVMADRL 0891  
                       _NVMDATL 0893                         _NVMCON2 0896                         _SSP1BUF 0211  
             __end_of_hcsr04ISR 0817           _nrf24l01InterfaceInit 0972      __end_of_nrf24l01SendPacket 0C2E  
                     ?_resetWDT 0070                   ??_getADCValue 0045           __size_of_nrf24l01Init 001F  
         __size_of_nrf24l01Send 0013       __end_of_nrf24l01SetRXMode 0B6C       __end_of_nrf24l01SetRXPipe 0972  
     __end_of_nrf24l01SetTXPipe 0C71                 __size_of___bmul 0011                 __size_of___ftge 003C  
                       ___ftadd 0332                         ___ftdiv 06B0                         ___ftneg 0824  
                       ___lldiv 0CFE                 __size_of___wmul 001E                         ___ftmul 05FC  
                       ___llmod 0BA8                         ___ftsub 08FA                         ___fttol 0E3B  
                       ___lwmod 0A6F                      ??___awtoft 0073                      ??___ftpack 0070  
                    ??___lbtoft 0074                 __size_of_memset 0032          EEPROMWrite@GIEBitValue 0073  
                    ??___lltoft 0074                         __ptext1 09AF                         __ptext2 0972  
                       __ptext3 022B                         __ptext4 0C2E                         __ptext5 0875  
                       __ptext6 0954                         __ptext7 0AFD                         __ptext8 0A6F  
                       __ptext9 0428                      ??___lwtoft 0073                 __size_of_strcat 002F  
               __size_of_strcmp 0029               __end_of_exception 0858                 __size_of_strcpy 001D  
               __size_of_strlen 001E                    __size_of_ISR 002E                       _T1CONbits 001B  
                       _counter 00E6                         _dpowers 1000                         _isdigit 0858  
                     _IOCAFbits 0393                         _romData 00E9                         _sleepMs 0A43  
                     _IOCAPbits 0391                         _waiting 00E8                         _sprintf 005E  
                       clrloop0 0818            end_of_initialization 0057                         ftoa@buf 013C  
                       ftoa@rem 00A4                    _nrf24l01Init 09AF                    _nrf24l01Send 0886  
                    _romDataMap 0120                   ??_EEPROMWrite 0073                nrf24l01GetPipe@i 002A  
               ___lldiv@divisor 0026                 ___lldiv@counter 0032                      ??_resetWDT 0070  
                   ?_hcsr04Init 0070             __end_of_getADCValue 1000                       _PORTAbits 000C  
                     _PORTCbits 000E                       _TRISAbits 008C                       _TRISCbits 008E  
              __CFG_FEXTOSC$OFF 0000                   ??_nrf24l01ISR 0070          ?_nrf24l01InterfaceInit 0070  
                   ___ftdiv@exp 0040                      main@packet 00BB      __size_of_nrf24l01SetRXMode 003B  
    __size_of_nrf24l01SetRXPipe 001E                     ___ftmul@exp 0051      __size_of_nrf24l01SetTXPipe 0043  
           __end_of_EEPROMWrite 09AF                  __end_of___bmul 0886                  __end_of___ftge 0BA8  
                __end_of___wmul 0936                  __end_of_memset 0AFD                  __end_of_strcat 0ACB  
                __end_of_strcmp 0A19                    _lastTXPacket 0069                  __end_of_strcpy 08FA  
                __end_of_strlen 0954             start_initialization 0034                 _nrf24l01SPISend 0866  
                   __end_of_ISR 0032    __end_of_nrf24l01SendTXBuffer 0CFE                      ftoa@status 00A3  
     nrf24l01SetRXPipe@enRXAddr 0072             __size_of_hcsr04Init 0014                 _nrf24l01GetPipe 0AFD  
       __size_of_nrf24l01SPIEnd 0009                 ___llmod@divisor 0033                 ___llmod@counter 0070  
               _nrf24l01Service 0759         ??_nrf24l01InitRegisters 0027                __CFG_LPBOREN$OFF 0000  
                   _getADCValue 0F5B                        ??___bmul 0071                        ??___ftge 0070  
           __end_of_nrf24l01ISR 0CB7                        ??___wmul 0074                     __pdataBANK1 00E9  
                      ??_strcat 0074                        ??_strcpy 0074               __size_of___awtoft 0022  
             __size_of___ftpack 0065               __size_of___lbtoft 001B               __size_of___lltoft 002A  
                     ___latbits 0002               __size_of___lwtoft 0015                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK4 0220                    _isdigit$2025 0070  
                   sprintf@flag 0049                     sprintf@prec 0052                      loop@packet 022C  
                   _EEPROMWrite 0990             nrf24l01GetPipe@name 0029             nrf24l01GetPipe@pipe 0028  
                     _hcsr04ISR 0812               __size_of_resetWDT 0007                        ?___ftadd 002B  
                      ?___ftdiv 0035                        ?___ftneg 004B                        ?___lldiv 0026  
                      ?___ftmul 004B                        ?___llmod 0033                        ?___ftsub 0035  
                      ?___fttol 0057                        ?___lwmod 0070            __end_of_n_ADDRESS_P0 1045  
       __end_of_nrf24l01SPISend 0875       nrf24l01InitRegisters@enAA 002C                   ??_sendMessage 0074  
            _nrf24l01SendPacket 0BEB             sleepMs@milliseconds 0070         __end_of_nrf24l01GetPipe 0B31  
                      ?_isdigit 0070                       _loop$2273 0226                       _loop$2274 0229  
                      ?_sleepMs 0070                       _exception 084B             ?_nrf24l01SendPacket 0028  
                      ?_sprintf 003B              EEPROMWrite@address 0070         __end_of_nrf24l01Service 07FE  
                ___wmul@product 0026                     _nrf24l01ISR 0C71                       clear_ram0 0817  
                      _PIE0bits 0090                        _PIE1bits 0091                        _PIR0bits 0010  
                      _PIR1bits 0011                      ?_hcsr04ISR 0070                    ??_hcsr04Init 0070  
          ??_nrf24l01SendPacket 0074                       _testCount 00DE            _nrf24l01SendTXBuffer 0CB7  
   nrf24l01SendPacket@loopCount 002A                      _ADCON0bits 009D                      _ADCON1bits 009E  
             ___wmul@multiplier 0070                        _WPUAbits 020C                        _RXPacket 01A0  
                      _TXPacket 01C1                      ?_exception 0070             __end_of_sendMessage 0E3B  
            __end_of_hcsr04Init 08AD         ??_nrf24l01InterfaceInit 0070                  _nrf24l01SPIEnd 082D  
             EEPROMRead@address 0070                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
              __size_of___ftneg 0009                __size_of___lldiv 0053                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 0087  
              __size_of___lwmod 002D                        ___awtoft 09CE                        ___ftpack 0D51  
                      ___lbtoft 08C2                        ___int_sp 22AF                        ___lltoft 0A19  
                    _ANSELAbits 018C                        ___lwtoft 08AD                      _ANSELCbits 018E  
                    _EEPROMRead 083F                ?_nrf24l01GetPipe 0070                      sprintf@val 004B  
                 _n_ADDRESS_MUL 1028                      strcat@from 00AF                __size_of_isdigit 000E  
                      __ptext10 0DB6                        __ptext11 0A9C                        __ptext20 0836  
                      __ptext12 0BEB                        __ptext21 0866                        __ptext13 08DD  
                    _T1GCONbits 001C                        __ptext30 0BA8                        __ptext22 082D  
                      __ptext14 0759                        __ptext31 0CFE                        __ptext23 0ACB  
                      __ptext15 09F0                        __ptext40 081D                        __ptext32 0A19  
                      __ptext24 084B                        __ptext16 0CB7                        __ptext41 06B0  
                      __ptext33 0E3B                        __ptext25 0990                        __ptext17 0936  
                      __ptext50 0C71                        __ptext42 0332                        __ptext34 08FA  
                      __ptext26 0515                        __ptext18 0B31                        __ptext51 0812  
                      __ptext43 09CE                        __ptext35 0824                        __ptext27 005E  
                      __ptext19 0886                        __ptext44 08AD                        __ptext36 05FC  
                      __ptext28 0858                        __ptext45 0899                        __ptext37 0B6C  
                      __ptext29 0918                        __ptext46 08C2                        __ptext38 0F5B  
                      __ptext47 0D51                        __ptext39 0A43                        __ptext48 083F  
              __size_of_sleepMs 002C                    _SSP1CON1bits 0215          __end_of_nrf24l01SPIEnd 0836  
                      _distance 00DC                __size_of_sprintf 01CD                     _OSCCON1bits 0919  
                    strcpy@from 0072                   __size_of_main 0099                   __size_of_ftoa 00E7  
                 __size_of_loop 00ED    nrf24l01InitRegisters@channel 0028    nrf24l01InitRegisters@feature 002A  
                  sleepMs@wdtps 0073              exception@exception 0026                      _RC0PPSbits 0EA0  
                      _resetWDT 081D                     ??_hcsr04ISR 0070    nrf24l01InitRegisters@rfSetup 002B  
                    _RC1PPSbits 0EA1                    ?_getADCValue 0042                      _RC2PPSbits 0EA2  
__size_of_nrf24l01InitRegisters 0107   __end_of_nrf24l01InitRegisters 0332    nrf24l01InitRegisters@setupAW 0029  
                    _ODCONAbits 028C                    _SSP1STATbits 0214                        main@pipe 00BA  
    nrf24l01SendPacket@txPacket 0028                     _sendMessage 0DB6                      _INTCONbits 000B  
                   _NVMCON1bits 0895                      _FVRCONbits 0117                     ??_exception 0074  
                __pstringtext10 0000                        isdigit@c 0071                        intlevel1 0000  
                     sprintf@ap 004A                       sprintf@sp 004F                    _n_ADDRESS_P0 1040  
              ___lwmod@dividend 0072                ___lldiv@dividend 002A                    ?_EEPROMWrite 0070  
             __CFG_CLKOUTEN$OFF 0000       __size_of_nrf24l01SPIStart 0009                   __pstringtext1 1000  
                 __pstringtext2 1040                   __pstringtext3 1028                   __pstringtext4 1034  
                 __pstringtext5 103A                   __pstringtext6 1045                   __pstringtext7 104A  
                 __pstringtext8 104F                   __pstringtext9 1053                        sprintf@c 0054  
                      sprintf@f 003B      nrf24l01InitRegisters@DynPD 002D                        strcat@cp 0061  
                      strcat@to 00AD                     ?_EEPROMRead 0070                ___lldiv@quotient 002E  
               ___lwmod@divisor 0070                        strcpy@cp 0026                        strcpy@to 0070  
               ___lwmod@counter 0026                      _WDTCONbits 0097                   ?_nrf24l01Init 0070  
                    _STATUSbits 0003                    ?_nrf24l01ISR 0070  
