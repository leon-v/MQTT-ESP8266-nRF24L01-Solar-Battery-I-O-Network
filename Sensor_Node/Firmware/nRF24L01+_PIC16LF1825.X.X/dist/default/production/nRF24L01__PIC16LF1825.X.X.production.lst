

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Tue Sep 04 16:23:44 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF18325
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text17,local,class=CODE,merge=1,delta=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text47,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text49,local,class=CODE,merge=1,delta=2
    76                           	dabs	1,0x74,12
    77  0000                     
    78                           ; Version 2.00
    79                           ; Generated 27/05/2018 GMT
    80                           ; 
    81                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC16LF18325 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000E                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0014                     	;# 
   131  0015                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  008C                     	;# 
   146  008E                     	;# 
   147  0090                     	;# 
   148  0091                     	;# 
   149  0092                     	;# 
   150  0093                     	;# 
   151  0094                     	;# 
   152  0097                     	;# 
   153  009B                     	;# 
   154  009B                     	;# 
   155  009C                     	;# 
   156  009D                     	;# 
   157  009E                     	;# 
   158  009F                     	;# 
   159  010C                     	;# 
   160  010E                     	;# 
   161  0111                     	;# 
   162  0112                     	;# 
   163  0113                     	;# 
   164  0114                     	;# 
   165  0115                     	;# 
   166  0116                     	;# 
   167  0117                     	;# 
   168  0118                     	;# 
   169  0119                     	;# 
   170  018C                     	;# 
   171  018E                     	;# 
   172  0199                     	;# 
   173  0199                     	;# 
   174  0199                     	;# 
   175  019A                     	;# 
   176  019A                     	;# 
   177  019A                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019C                     	;# 
   184  019C                     	;# 
   185  019C                     	;# 
   186  019D                     	;# 
   187  019D                     	;# 
   188  019D                     	;# 
   189  019E                     	;# 
   190  019E                     	;# 
   191  019E                     	;# 
   192  019F                     	;# 
   193  019F                     	;# 
   194  019F                     	;# 
   195  019F                     	;# 
   196  019F                     	;# 
   197  020C                     	;# 
   198  020E                     	;# 
   199  0211                     	;# 
   200  0211                     	;# 
   201  0212                     	;# 
   202  0212                     	;# 
   203  0213                     	;# 
   204  0213                     	;# 
   205  0214                     	;# 
   206  0214                     	;# 
   207  0215                     	;# 
   208  0215                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0216                     	;# 
   212  0216                     	;# 
   213  0217                     	;# 
   214  0217                     	;# 
   215  0219                     	;# 
   216  021A                     	;# 
   217  021B                     	;# 
   218  021C                     	;# 
   219  021D                     	;# 
   220  021D                     	;# 
   221  021E                     	;# 
   222  021F                     	;# 
   223  028C                     	;# 
   224  028E                     	;# 
   225  0291                     	;# 
   226  0291                     	;# 
   227  0292                     	;# 
   228  0293                     	;# 
   229  0294                     	;# 
   230  0295                     	;# 
   231  0295                     	;# 
   232  0296                     	;# 
   233  0297                     	;# 
   234  0298                     	;# 
   235  029F                     	;# 
   236  030C                     	;# 
   237  030E                     	;# 
   238  0311                     	;# 
   239  0311                     	;# 
   240  0312                     	;# 
   241  0313                     	;# 
   242  0314                     	;# 
   243  0315                     	;# 
   244  0315                     	;# 
   245  0316                     	;# 
   246  0317                     	;# 
   247  0318                     	;# 
   248  038C                     	;# 
   249  038E                     	;# 
   250  0391                     	;# 
   251  0392                     	;# 
   252  0393                     	;# 
   253  0397                     	;# 
   254  0398                     	;# 
   255  0399                     	;# 
   256  039A                     	;# 
   257  039C                     	;# 
   258  039D                     	;# 
   259  039E                     	;# 
   260  039F                     	;# 
   261  0411                     	;# 
   262  0411                     	;# 
   263  0412                     	;# 
   264  0413                     	;# 
   265  0414                     	;# 
   266  0415                     	;# 
   267  0416                     	;# 
   268  0417                     	;# 
   269  0418                     	;# 
   270  0418                     	;# 
   271  0419                     	;# 
   272  041A                     	;# 
   273  041B                     	;# 
   274  041C                     	;# 
   275  041D                     	;# 
   276  041E                     	;# 
   277  041F                     	;# 
   278  0498                     	;# 
   279  0498                     	;# 
   280  0499                     	;# 
   281  049A                     	;# 
   282  049B                     	;# 
   283  049B                     	;# 
   284  049C                     	;# 
   285  049D                     	;# 
   286  049E                     	;# 
   287  049F                     	;# 
   288  0617                     	;# 
   289  0618                     	;# 
   290  0619                     	;# 
   291  0619                     	;# 
   292  061A                     	;# 
   293  061B                     	;# 
   294  061C                     	;# 
   295  061C                     	;# 
   296  061F                     	;# 
   297  0691                     	;# 
   298  0692                     	;# 
   299  0693                     	;# 
   300  0694                     	;# 
   301  0695                     	;# 
   302  0696                     	;# 
   303  0697                     	;# 
   304  0698                     	;# 
   305  0699                     	;# 
   306  0711                     	;# 
   307  0712                     	;# 
   308  0713                     	;# 
   309  0714                     	;# 
   310  0715                     	;# 
   311  0716                     	;# 
   312  0717                     	;# 
   313  0718                     	;# 
   314  0719                     	;# 
   315  0891                     	;# 
   316  0891                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0891                     	;# 
   320  0891                     	;# 
   321  0892                     	;# 
   322  0892                     	;# 
   323  0892                     	;# 
   324  0893                     	;# 
   325  0893                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0893                     	;# 
   329  0893                     	;# 
   330  0894                     	;# 
   331  0894                     	;# 
   332  0894                     	;# 
   333  0895                     	;# 
   334  0895                     	;# 
   335  0895                     	;# 
   336  0896                     	;# 
   337  0896                     	;# 
   338  0896                     	;# 
   339  089B                     	;# 
   340  0911                     	;# 
   341  0912                     	;# 
   342  0913                     	;# 
   343  0914                     	;# 
   344  0915                     	;# 
   345  0916                     	;# 
   346  0918                     	;# 
   347  0919                     	;# 
   348  091A                     	;# 
   349  091B                     	;# 
   350  091C                     	;# 
   351  091D                     	;# 
   352  091E                     	;# 
   353  091F                     	;# 
   354  0E0F                     	;# 
   355  0E10                     	;# 
   356  0E11                     	;# 
   357  0E12                     	;# 
   358  0E13                     	;# 
   359  0E14                     	;# 
   360  0E15                     	;# 
   361  0E16                     	;# 
   362  0E17                     	;# 
   363  0E18                     	;# 
   364  0E19                     	;# 
   365  0E1A                     	;# 
   366  0E1B                     	;# 
   367  0E1C                     	;# 
   368  0E1D                     	;# 
   369  0E1E                     	;# 
   370  0E1F                     	;# 
   371  0E20                     	;# 
   372  0E21                     	;# 
   373  0E22                     	;# 
   374  0E24                     	;# 
   375  0E25                     	;# 
   376  0E28                     	;# 
   377  0E29                     	;# 
   378  0E2A                     	;# 
   379  0E2B                     	;# 
   380  0E2C                     	;# 
   381  0E2D                     	;# 
   382  0E2E                     	;# 
   383  0E2F                     	;# 
   384  0E90                     	;# 
   385  0E91                     	;# 
   386  0E92                     	;# 
   387  0E94                     	;# 
   388  0E95                     	;# 
   389  0EA0                     	;# 
   390  0EA1                     	;# 
   391  0EA2                     	;# 
   392  0EA3                     	;# 
   393  0EA4                     	;# 
   394  0EA5                     	;# 
   395  0F0F                     	;# 
   396  0F10                     	;# 
   397  0F11                     	;# 
   398  0F12                     	;# 
   399  0F13                     	;# 
   400  0F14                     	;# 
   401  0F15                     	;# 
   402  0F16                     	;# 
   403  0F17                     	;# 
   404  0F18                     	;# 
   405  0F19                     	;# 
   406  0F1A                     	;# 
   407  0F1B                     	;# 
   408  0F1C                     	;# 
   409  0F1D                     	;# 
   410  0F1E                     	;# 
   411  0F1F                     	;# 
   412  0F20                     	;# 
   413  0F21                     	;# 
   414  0F22                     	;# 
   415  0F23                     	;# 
   416  0F24                     	;# 
   417  0F25                     	;# 
   418  0F26                     	;# 
   419  0F27                     	;# 
   420  0F28                     	;# 
   421  0F29                     	;# 
   422  0F2A                     	;# 
   423  0F2B                     	;# 
   424  0F2C                     	;# 
   425  0F2D                     	;# 
   426  0F2E                     	;# 
   427  0F2F                     	;# 
   428  0F30                     	;# 
   429  0F31                     	;# 
   430  0F32                     	;# 
   431  0F33                     	;# 
   432  0F34                     	;# 
   433  0F35                     	;# 
   434  0F36                     	;# 
   435  0F37                     	;# 
   436  0FE4                     	;# 
   437  0FE5                     	;# 
   438  0FE6                     	;# 
   439  0FE7                     	;# 
   440  0FE8                     	;# 
   441  0FE9                     	;# 
   442  0FEA                     	;# 
   443  0FEB                     	;# 
   444  0FED                     	;# 
   445  0FEE                     	;# 
   446  0FEF                     	;# 
   447  0000                     	;# 
   448  0001                     	;# 
   449  0002                     	;# 
   450  0003                     	;# 
   451  0004                     	;# 
   452  0005                     	;# 
   453  0006                     	;# 
   454  0007                     	;# 
   455  0008                     	;# 
   456  0009                     	;# 
   457  000A                     	;# 
   458  000B                     	;# 
   459  000C                     	;# 
   460  000E                     	;# 
   461  0010                     	;# 
   462  0011                     	;# 
   463  0012                     	;# 
   464  0013                     	;# 
   465  0014                     	;# 
   466  0015                     	;# 
   467  0015                     	;# 
   468  0016                     	;# 
   469  0016                     	;# 
   470  0017                     	;# 
   471  0018                     	;# 
   472  0019                     	;# 
   473  0019                     	;# 
   474  001A                     	;# 
   475  001B                     	;# 
   476  001C                     	;# 
   477  001D                     	;# 
   478  001E                     	;# 
   479  001F                     	;# 
   480  008C                     	;# 
   481  008E                     	;# 
   482  0090                     	;# 
   483  0091                     	;# 
   484  0092                     	;# 
   485  0093                     	;# 
   486  0094                     	;# 
   487  0097                     	;# 
   488  009B                     	;# 
   489  009B                     	;# 
   490  009C                     	;# 
   491  009D                     	;# 
   492  009E                     	;# 
   493  009F                     	;# 
   494  010C                     	;# 
   495  010E                     	;# 
   496  0111                     	;# 
   497  0112                     	;# 
   498  0113                     	;# 
   499  0114                     	;# 
   500  0115                     	;# 
   501  0116                     	;# 
   502  0117                     	;# 
   503  0118                     	;# 
   504  0119                     	;# 
   505  018C                     	;# 
   506  018E                     	;# 
   507  0199                     	;# 
   508  0199                     	;# 
   509  0199                     	;# 
   510  019A                     	;# 
   511  019A                     	;# 
   512  019A                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019C                     	;# 
   519  019C                     	;# 
   520  019C                     	;# 
   521  019D                     	;# 
   522  019D                     	;# 
   523  019D                     	;# 
   524  019E                     	;# 
   525  019E                     	;# 
   526  019E                     	;# 
   527  019F                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  020C                     	;# 
   533  020E                     	;# 
   534  0211                     	;# 
   535  0211                     	;# 
   536  0212                     	;# 
   537  0212                     	;# 
   538  0213                     	;# 
   539  0213                     	;# 
   540  0214                     	;# 
   541  0214                     	;# 
   542  0215                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0216                     	;# 
   547  0216                     	;# 
   548  0217                     	;# 
   549  0217                     	;# 
   550  0219                     	;# 
   551  021A                     	;# 
   552  021B                     	;# 
   553  021C                     	;# 
   554  021D                     	;# 
   555  021D                     	;# 
   556  021E                     	;# 
   557  021F                     	;# 
   558  028C                     	;# 
   559  028E                     	;# 
   560  0291                     	;# 
   561  0291                     	;# 
   562  0292                     	;# 
   563  0293                     	;# 
   564  0294                     	;# 
   565  0295                     	;# 
   566  0295                     	;# 
   567  0296                     	;# 
   568  0297                     	;# 
   569  0298                     	;# 
   570  029F                     	;# 
   571  030C                     	;# 
   572  030E                     	;# 
   573  0311                     	;# 
   574  0311                     	;# 
   575  0312                     	;# 
   576  0313                     	;# 
   577  0314                     	;# 
   578  0315                     	;# 
   579  0315                     	;# 
   580  0316                     	;# 
   581  0317                     	;# 
   582  0318                     	;# 
   583  038C                     	;# 
   584  038E                     	;# 
   585  0391                     	;# 
   586  0392                     	;# 
   587  0393                     	;# 
   588  0397                     	;# 
   589  0398                     	;# 
   590  0399                     	;# 
   591  039A                     	;# 
   592  039C                     	;# 
   593  039D                     	;# 
   594  039E                     	;# 
   595  039F                     	;# 
   596  0411                     	;# 
   597  0411                     	;# 
   598  0412                     	;# 
   599  0413                     	;# 
   600  0414                     	;# 
   601  0415                     	;# 
   602  0416                     	;# 
   603  0417                     	;# 
   604  0418                     	;# 
   605  0418                     	;# 
   606  0419                     	;# 
   607  041A                     	;# 
   608  041B                     	;# 
   609  041C                     	;# 
   610  041D                     	;# 
   611  041E                     	;# 
   612  041F                     	;# 
   613  0498                     	;# 
   614  0498                     	;# 
   615  0499                     	;# 
   616  049A                     	;# 
   617  049B                     	;# 
   618  049B                     	;# 
   619  049C                     	;# 
   620  049D                     	;# 
   621  049E                     	;# 
   622  049F                     	;# 
   623  0617                     	;# 
   624  0618                     	;# 
   625  0619                     	;# 
   626  0619                     	;# 
   627  061A                     	;# 
   628  061B                     	;# 
   629  061C                     	;# 
   630  061C                     	;# 
   631  061F                     	;# 
   632  0691                     	;# 
   633  0692                     	;# 
   634  0693                     	;# 
   635  0694                     	;# 
   636  0695                     	;# 
   637  0696                     	;# 
   638  0697                     	;# 
   639  0698                     	;# 
   640  0699                     	;# 
   641  0711                     	;# 
   642  0712                     	;# 
   643  0713                     	;# 
   644  0714                     	;# 
   645  0715                     	;# 
   646  0716                     	;# 
   647  0717                     	;# 
   648  0718                     	;# 
   649  0719                     	;# 
   650  0891                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0891                     	;# 
   656  0892                     	;# 
   657  0892                     	;# 
   658  0892                     	;# 
   659  0893                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0893                     	;# 
   665  0894                     	;# 
   666  0894                     	;# 
   667  0894                     	;# 
   668  0895                     	;# 
   669  0895                     	;# 
   670  0895                     	;# 
   671  0896                     	;# 
   672  0896                     	;# 
   673  0896                     	;# 
   674  089B                     	;# 
   675  0911                     	;# 
   676  0912                     	;# 
   677  0913                     	;# 
   678  0914                     	;# 
   679  0915                     	;# 
   680  0916                     	;# 
   681  0918                     	;# 
   682  0919                     	;# 
   683  091A                     	;# 
   684  091B                     	;# 
   685  091C                     	;# 
   686  091D                     	;# 
   687  091E                     	;# 
   688  091F                     	;# 
   689  0E0F                     	;# 
   690  0E10                     	;# 
   691  0E11                     	;# 
   692  0E12                     	;# 
   693  0E13                     	;# 
   694  0E14                     	;# 
   695  0E15                     	;# 
   696  0E16                     	;# 
   697  0E17                     	;# 
   698  0E18                     	;# 
   699  0E19                     	;# 
   700  0E1A                     	;# 
   701  0E1B                     	;# 
   702  0E1C                     	;# 
   703  0E1D                     	;# 
   704  0E1E                     	;# 
   705  0E1F                     	;# 
   706  0E20                     	;# 
   707  0E21                     	;# 
   708  0E22                     	;# 
   709  0E24                     	;# 
   710  0E25                     	;# 
   711  0E28                     	;# 
   712  0E29                     	;# 
   713  0E2A                     	;# 
   714  0E2B                     	;# 
   715  0E2C                     	;# 
   716  0E2D                     	;# 
   717  0E2E                     	;# 
   718  0E2F                     	;# 
   719  0E90                     	;# 
   720  0E91                     	;# 
   721  0E92                     	;# 
   722  0E94                     	;# 
   723  0E95                     	;# 
   724  0EA0                     	;# 
   725  0EA1                     	;# 
   726  0EA2                     	;# 
   727  0EA3                     	;# 
   728  0EA4                     	;# 
   729  0EA5                     	;# 
   730  0F0F                     	;# 
   731  0F10                     	;# 
   732  0F11                     	;# 
   733  0F12                     	;# 
   734  0F13                     	;# 
   735  0F14                     	;# 
   736  0F15                     	;# 
   737  0F16                     	;# 
   738  0F17                     	;# 
   739  0F18                     	;# 
   740  0F19                     	;# 
   741  0F1A                     	;# 
   742  0F1B                     	;# 
   743  0F1C                     	;# 
   744  0F1D                     	;# 
   745  0F1E                     	;# 
   746  0F1F                     	;# 
   747  0F20                     	;# 
   748  0F21                     	;# 
   749  0F22                     	;# 
   750  0F23                     	;# 
   751  0F24                     	;# 
   752  0F25                     	;# 
   753  0F26                     	;# 
   754  0F27                     	;# 
   755  0F28                     	;# 
   756  0F29                     	;# 
   757  0F2A                     	;# 
   758  0F2B                     	;# 
   759  0F2C                     	;# 
   760  0F2D                     	;# 
   761  0F2E                     	;# 
   762  0F2F                     	;# 
   763  0F30                     	;# 
   764  0F31                     	;# 
   765  0F32                     	;# 
   766  0F33                     	;# 
   767  0F34                     	;# 
   768  0F35                     	;# 
   769  0F36                     	;# 
   770  0F37                     	;# 
   771  0FE4                     	;# 
   772  0FE5                     	;# 
   773  0FE6                     	;# 
   774  0FE7                     	;# 
   775  0FE8                     	;# 
   776  0FE9                     	;# 
   777  0FEA                     	;# 
   778  0FEB                     	;# 
   779  0FED                     	;# 
   780  0FEE                     	;# 
   781  0FEF                     	;# 
   782  0000                     	;# 
   783  0001                     	;# 
   784  0002                     	;# 
   785  0003                     	;# 
   786  0004                     	;# 
   787  0005                     	;# 
   788  0006                     	;# 
   789  0007                     	;# 
   790  0008                     	;# 
   791  0009                     	;# 
   792  000A                     	;# 
   793  000B                     	;# 
   794  000C                     	;# 
   795  000E                     	;# 
   796  0010                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0013                     	;# 
   800  0014                     	;# 
   801  0015                     	;# 
   802  0015                     	;# 
   803  0016                     	;# 
   804  0016                     	;# 
   805  0017                     	;# 
   806  0018                     	;# 
   807  0019                     	;# 
   808  0019                     	;# 
   809  001A                     	;# 
   810  001B                     	;# 
   811  001C                     	;# 
   812  001D                     	;# 
   813  001E                     	;# 
   814  001F                     	;# 
   815  008C                     	;# 
   816  008E                     	;# 
   817  0090                     	;# 
   818  0091                     	;# 
   819  0092                     	;# 
   820  0093                     	;# 
   821  0094                     	;# 
   822  0097                     	;# 
   823  009B                     	;# 
   824  009B                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009E                     	;# 
   828  009F                     	;# 
   829  010C                     	;# 
   830  010E                     	;# 
   831  0111                     	;# 
   832  0112                     	;# 
   833  0113                     	;# 
   834  0114                     	;# 
   835  0115                     	;# 
   836  0116                     	;# 
   837  0117                     	;# 
   838  0118                     	;# 
   839  0119                     	;# 
   840  018C                     	;# 
   841  018E                     	;# 
   842  0199                     	;# 
   843  0199                     	;# 
   844  0199                     	;# 
   845  019A                     	;# 
   846  019A                     	;# 
   847  019A                     	;# 
   848  019B                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019C                     	;# 
   854  019C                     	;# 
   855  019C                     	;# 
   856  019D                     	;# 
   857  019D                     	;# 
   858  019D                     	;# 
   859  019E                     	;# 
   860  019E                     	;# 
   861  019E                     	;# 
   862  019F                     	;# 
   863  019F                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  020C                     	;# 
   868  020E                     	;# 
   869  0211                     	;# 
   870  0211                     	;# 
   871  0212                     	;# 
   872  0212                     	;# 
   873  0213                     	;# 
   874  0213                     	;# 
   875  0214                     	;# 
   876  0214                     	;# 
   877  0215                     	;# 
   878  0215                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0216                     	;# 
   882  0216                     	;# 
   883  0217                     	;# 
   884  0217                     	;# 
   885  0219                     	;# 
   886  021A                     	;# 
   887  021B                     	;# 
   888  021C                     	;# 
   889  021D                     	;# 
   890  021D                     	;# 
   891  021E                     	;# 
   892  021F                     	;# 
   893  028C                     	;# 
   894  028E                     	;# 
   895  0291                     	;# 
   896  0291                     	;# 
   897  0292                     	;# 
   898  0293                     	;# 
   899  0294                     	;# 
   900  0295                     	;# 
   901  0295                     	;# 
   902  0296                     	;# 
   903  0297                     	;# 
   904  0298                     	;# 
   905  029F                     	;# 
   906  030C                     	;# 
   907  030E                     	;# 
   908  0311                     	;# 
   909  0311                     	;# 
   910  0312                     	;# 
   911  0313                     	;# 
   912  0314                     	;# 
   913  0315                     	;# 
   914  0315                     	;# 
   915  0316                     	;# 
   916  0317                     	;# 
   917  0318                     	;# 
   918  038C                     	;# 
   919  038E                     	;# 
   920  0391                     	;# 
   921  0392                     	;# 
   922  0393                     	;# 
   923  0397                     	;# 
   924  0398                     	;# 
   925  0399                     	;# 
   926  039A                     	;# 
   927  039C                     	;# 
   928  039D                     	;# 
   929  039E                     	;# 
   930  039F                     	;# 
   931  0411                     	;# 
   932  0411                     	;# 
   933  0412                     	;# 
   934  0413                     	;# 
   935  0414                     	;# 
   936  0415                     	;# 
   937  0416                     	;# 
   938  0417                     	;# 
   939  0418                     	;# 
   940  0418                     	;# 
   941  0419                     	;# 
   942  041A                     	;# 
   943  041B                     	;# 
   944  041C                     	;# 
   945  041D                     	;# 
   946  041E                     	;# 
   947  041F                     	;# 
   948  0498                     	;# 
   949  0498                     	;# 
   950  0499                     	;# 
   951  049A                     	;# 
   952  049B                     	;# 
   953  049B                     	;# 
   954  049C                     	;# 
   955  049D                     	;# 
   956  049E                     	;# 
   957  049F                     	;# 
   958  0617                     	;# 
   959  0618                     	;# 
   960  0619                     	;# 
   961  0619                     	;# 
   962  061A                     	;# 
   963  061B                     	;# 
   964  061C                     	;# 
   965  061C                     	;# 
   966  061F                     	;# 
   967  0691                     	;# 
   968  0692                     	;# 
   969  0693                     	;# 
   970  0694                     	;# 
   971  0695                     	;# 
   972  0696                     	;# 
   973  0697                     	;# 
   974  0698                     	;# 
   975  0699                     	;# 
   976  0711                     	;# 
   977  0712                     	;# 
   978  0713                     	;# 
   979  0714                     	;# 
   980  0715                     	;# 
   981  0716                     	;# 
   982  0717                     	;# 
   983  0718                     	;# 
   984  0719                     	;# 
   985  0891                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0892                     	;# 
   992  0892                     	;# 
   993  0892                     	;# 
   994  0893                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0894                     	;# 
  1001  0894                     	;# 
  1002  0894                     	;# 
  1003  0895                     	;# 
  1004  0895                     	;# 
  1005  0895                     	;# 
  1006  0896                     	;# 
  1007  0896                     	;# 
  1008  0896                     	;# 
  1009  089B                     	;# 
  1010  0911                     	;# 
  1011  0912                     	;# 
  1012  0913                     	;# 
  1013  0914                     	;# 
  1014  0915                     	;# 
  1015  0916                     	;# 
  1016  0918                     	;# 
  1017  0919                     	;# 
  1018  091A                     	;# 
  1019  091B                     	;# 
  1020  091C                     	;# 
  1021  091D                     	;# 
  1022  091E                     	;# 
  1023  091F                     	;# 
  1024  0E0F                     	;# 
  1025  0E10                     	;# 
  1026  0E11                     	;# 
  1027  0E12                     	;# 
  1028  0E13                     	;# 
  1029  0E14                     	;# 
  1030  0E15                     	;# 
  1031  0E16                     	;# 
  1032  0E17                     	;# 
  1033  0E18                     	;# 
  1034  0E19                     	;# 
  1035  0E1A                     	;# 
  1036  0E1B                     	;# 
  1037  0E1C                     	;# 
  1038  0E1D                     	;# 
  1039  0E1E                     	;# 
  1040  0E1F                     	;# 
  1041  0E20                     	;# 
  1042  0E21                     	;# 
  1043  0E22                     	;# 
  1044  0E24                     	;# 
  1045  0E25                     	;# 
  1046  0E28                     	;# 
  1047  0E29                     	;# 
  1048  0E2A                     	;# 
  1049  0E2B                     	;# 
  1050  0E2C                     	;# 
  1051  0E2D                     	;# 
  1052  0E2E                     	;# 
  1053  0E2F                     	;# 
  1054  0E90                     	;# 
  1055  0E91                     	;# 
  1056  0E92                     	;# 
  1057  0E94                     	;# 
  1058  0E95                     	;# 
  1059  0EA0                     	;# 
  1060  0EA1                     	;# 
  1061  0EA2                     	;# 
  1062  0EA3                     	;# 
  1063  0EA4                     	;# 
  1064  0EA5                     	;# 
  1065  0F0F                     	;# 
  1066  0F10                     	;# 
  1067  0F11                     	;# 
  1068  0F12                     	;# 
  1069  0F13                     	;# 
  1070  0F14                     	;# 
  1071  0F15                     	;# 
  1072  0F16                     	;# 
  1073  0F17                     	;# 
  1074  0F18                     	;# 
  1075  0F19                     	;# 
  1076  0F1A                     	;# 
  1077  0F1B                     	;# 
  1078  0F1C                     	;# 
  1079  0F1D                     	;# 
  1080  0F1E                     	;# 
  1081  0F1F                     	;# 
  1082  0F20                     	;# 
  1083  0F21                     	;# 
  1084  0F22                     	;# 
  1085  0F23                     	;# 
  1086  0F24                     	;# 
  1087  0F25                     	;# 
  1088  0F26                     	;# 
  1089  0F27                     	;# 
  1090  0F28                     	;# 
  1091  0F29                     	;# 
  1092  0F2A                     	;# 
  1093  0F2B                     	;# 
  1094  0F2C                     	;# 
  1095  0F2D                     	;# 
  1096  0F2E                     	;# 
  1097  0F2F                     	;# 
  1098  0F30                     	;# 
  1099  0F31                     	;# 
  1100  0F32                     	;# 
  1101  0F33                     	;# 
  1102  0F34                     	;# 
  1103  0F35                     	;# 
  1104  0F36                     	;# 
  1105  0F37                     	;# 
  1106  0FE4                     	;# 
  1107  0FE5                     	;# 
  1108  0FE6                     	;# 
  1109  0FE7                     	;# 
  1110  0FE8                     	;# 
  1111  0FE9                     	;# 
  1112  0FEA                     	;# 
  1113  0FEB                     	;# 
  1114  0FED                     	;# 
  1115  0FEE                     	;# 
  1116  0FEF                     	;# 
  1117  0000                     	;# 
  1118  0001                     	;# 
  1119  0002                     	;# 
  1120  0003                     	;# 
  1121  0004                     	;# 
  1122  0005                     	;# 
  1123  0006                     	;# 
  1124  0007                     	;# 
  1125  0008                     	;# 
  1126  0009                     	;# 
  1127  000A                     	;# 
  1128  000B                     	;# 
  1129  000C                     	;# 
  1130  000E                     	;# 
  1131  0010                     	;# 
  1132  0011                     	;# 
  1133  0012                     	;# 
  1134  0013                     	;# 
  1135  0014                     	;# 
  1136  0015                     	;# 
  1137  0015                     	;# 
  1138  0016                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  0019                     	;# 
  1144  001A                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  001D                     	;# 
  1148  001E                     	;# 
  1149  001F                     	;# 
  1150  008C                     	;# 
  1151  008E                     	;# 
  1152  0090                     	;# 
  1153  0091                     	;# 
  1154  0092                     	;# 
  1155  0093                     	;# 
  1156  0094                     	;# 
  1157  0097                     	;# 
  1158  009B                     	;# 
  1159  009B                     	;# 
  1160  009C                     	;# 
  1161  009D                     	;# 
  1162  009E                     	;# 
  1163  009F                     	;# 
  1164  010C                     	;# 
  1165  010E                     	;# 
  1166  0111                     	;# 
  1167  0112                     	;# 
  1168  0113                     	;# 
  1169  0114                     	;# 
  1170  0115                     	;# 
  1171  0116                     	;# 
  1172  0117                     	;# 
  1173  0118                     	;# 
  1174  0119                     	;# 
  1175  018C                     	;# 
  1176  018E                     	;# 
  1177  0199                     	;# 
  1178  0199                     	;# 
  1179  0199                     	;# 
  1180  019A                     	;# 
  1181  019A                     	;# 
  1182  019A                     	;# 
  1183  019B                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019C                     	;# 
  1189  019C                     	;# 
  1190  019C                     	;# 
  1191  019D                     	;# 
  1192  019D                     	;# 
  1193  019D                     	;# 
  1194  019E                     	;# 
  1195  019E                     	;# 
  1196  019E                     	;# 
  1197  019F                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  020C                     	;# 
  1203  020E                     	;# 
  1204  0211                     	;# 
  1205  0211                     	;# 
  1206  0212                     	;# 
  1207  0212                     	;# 
  1208  0213                     	;# 
  1209  0213                     	;# 
  1210  0214                     	;# 
  1211  0214                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0216                     	;# 
  1217  0216                     	;# 
  1218  0217                     	;# 
  1219  0217                     	;# 
  1220  0219                     	;# 
  1221  021A                     	;# 
  1222  021B                     	;# 
  1223  021C                     	;# 
  1224  021D                     	;# 
  1225  021D                     	;# 
  1226  021E                     	;# 
  1227  021F                     	;# 
  1228  028C                     	;# 
  1229  028E                     	;# 
  1230  0291                     	;# 
  1231  0291                     	;# 
  1232  0292                     	;# 
  1233  0293                     	;# 
  1234  0294                     	;# 
  1235  0295                     	;# 
  1236  0295                     	;# 
  1237  0296                     	;# 
  1238  0297                     	;# 
  1239  0298                     	;# 
  1240  029F                     	;# 
  1241  030C                     	;# 
  1242  030E                     	;# 
  1243  0311                     	;# 
  1244  0311                     	;# 
  1245  0312                     	;# 
  1246  0313                     	;# 
  1247  0314                     	;# 
  1248  0315                     	;# 
  1249  0315                     	;# 
  1250  0316                     	;# 
  1251  0317                     	;# 
  1252  0318                     	;# 
  1253  038C                     	;# 
  1254  038E                     	;# 
  1255  0391                     	;# 
  1256  0392                     	;# 
  1257  0393                     	;# 
  1258  0397                     	;# 
  1259  0398                     	;# 
  1260  0399                     	;# 
  1261  039A                     	;# 
  1262  039C                     	;# 
  1263  039D                     	;# 
  1264  039E                     	;# 
  1265  039F                     	;# 
  1266  0411                     	;# 
  1267  0411                     	;# 
  1268  0412                     	;# 
  1269  0413                     	;# 
  1270  0414                     	;# 
  1271  0415                     	;# 
  1272  0416                     	;# 
  1273  0417                     	;# 
  1274  0418                     	;# 
  1275  0418                     	;# 
  1276  0419                     	;# 
  1277  041A                     	;# 
  1278  041B                     	;# 
  1279  041C                     	;# 
  1280  041D                     	;# 
  1281  041E                     	;# 
  1282  041F                     	;# 
  1283  0498                     	;# 
  1284  0498                     	;# 
  1285  0499                     	;# 
  1286  049A                     	;# 
  1287  049B                     	;# 
  1288  049B                     	;# 
  1289  049C                     	;# 
  1290  049D                     	;# 
  1291  049E                     	;# 
  1292  049F                     	;# 
  1293  0617                     	;# 
  1294  0618                     	;# 
  1295  0619                     	;# 
  1296  0619                     	;# 
  1297  061A                     	;# 
  1298  061B                     	;# 
  1299  061C                     	;# 
  1300  061C                     	;# 
  1301  061F                     	;# 
  1302  0691                     	;# 
  1303  0692                     	;# 
  1304  0693                     	;# 
  1305  0694                     	;# 
  1306  0695                     	;# 
  1307  0696                     	;# 
  1308  0697                     	;# 
  1309  0698                     	;# 
  1310  0699                     	;# 
  1311  0711                     	;# 
  1312  0712                     	;# 
  1313  0713                     	;# 
  1314  0714                     	;# 
  1315  0715                     	;# 
  1316  0716                     	;# 
  1317  0717                     	;# 
  1318  0718                     	;# 
  1319  0719                     	;# 
  1320  0891                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0892                     	;# 
  1327  0892                     	;# 
  1328  0892                     	;# 
  1329  0893                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0894                     	;# 
  1336  0894                     	;# 
  1337  0894                     	;# 
  1338  0895                     	;# 
  1339  0895                     	;# 
  1340  0895                     	;# 
  1341  0896                     	;# 
  1342  0896                     	;# 
  1343  0896                     	;# 
  1344  089B                     	;# 
  1345  0911                     	;# 
  1346  0912                     	;# 
  1347  0913                     	;# 
  1348  0914                     	;# 
  1349  0915                     	;# 
  1350  0916                     	;# 
  1351  0918                     	;# 
  1352  0919                     	;# 
  1353  091A                     	;# 
  1354  091B                     	;# 
  1355  091C                     	;# 
  1356  091D                     	;# 
  1357  091E                     	;# 
  1358  091F                     	;# 
  1359  0E0F                     	;# 
  1360  0E10                     	;# 
  1361  0E11                     	;# 
  1362  0E12                     	;# 
  1363  0E13                     	;# 
  1364  0E14                     	;# 
  1365  0E15                     	;# 
  1366  0E16                     	;# 
  1367  0E17                     	;# 
  1368  0E18                     	;# 
  1369  0E19                     	;# 
  1370  0E1A                     	;# 
  1371  0E1B                     	;# 
  1372  0E1C                     	;# 
  1373  0E1D                     	;# 
  1374  0E1E                     	;# 
  1375  0E1F                     	;# 
  1376  0E20                     	;# 
  1377  0E21                     	;# 
  1378  0E22                     	;# 
  1379  0E24                     	;# 
  1380  0E25                     	;# 
  1381  0E28                     	;# 
  1382  0E29                     	;# 
  1383  0E2A                     	;# 
  1384  0E2B                     	;# 
  1385  0E2C                     	;# 
  1386  0E2D                     	;# 
  1387  0E2E                     	;# 
  1388  0E2F                     	;# 
  1389  0E90                     	;# 
  1390  0E91                     	;# 
  1391  0E92                     	;# 
  1392  0E94                     	;# 
  1393  0E95                     	;# 
  1394  0EA0                     	;# 
  1395  0EA1                     	;# 
  1396  0EA2                     	;# 
  1397  0EA3                     	;# 
  1398  0EA4                     	;# 
  1399  0EA5                     	;# 
  1400  0F0F                     	;# 
  1401  0F10                     	;# 
  1402  0F11                     	;# 
  1403  0F12                     	;# 
  1404  0F13                     	;# 
  1405  0F14                     	;# 
  1406  0F15                     	;# 
  1407  0F16                     	;# 
  1408  0F17                     	;# 
  1409  0F18                     	;# 
  1410  0F19                     	;# 
  1411  0F1A                     	;# 
  1412  0F1B                     	;# 
  1413  0F1C                     	;# 
  1414  0F1D                     	;# 
  1415  0F1E                     	;# 
  1416  0F1F                     	;# 
  1417  0F20                     	;# 
  1418  0F21                     	;# 
  1419  0F22                     	;# 
  1420  0F23                     	;# 
  1421  0F24                     	;# 
  1422  0F25                     	;# 
  1423  0F26                     	;# 
  1424  0F27                     	;# 
  1425  0F28                     	;# 
  1426  0F29                     	;# 
  1427  0F2A                     	;# 
  1428  0F2B                     	;# 
  1429  0F2C                     	;# 
  1430  0F2D                     	;# 
  1431  0F2E                     	;# 
  1432  0F2F                     	;# 
  1433  0F30                     	;# 
  1434  0F31                     	;# 
  1435  0F32                     	;# 
  1436  0F33                     	;# 
  1437  0F34                     	;# 
  1438  0F35                     	;# 
  1439  0F36                     	;# 
  1440  0F37                     	;# 
  1441  0FE4                     	;# 
  1442  0FE5                     	;# 
  1443  0FE6                     	;# 
  1444  0FE7                     	;# 
  1445  0FE8                     	;# 
  1446  0FE9                     	;# 
  1447  0FEA                     	;# 
  1448  0FEB                     	;# 
  1449  0FED                     	;# 
  1450  0FEE                     	;# 
  1451  0FEF                     	;# 
  1452  0000                     	;# 
  1453  0001                     	;# 
  1454  0002                     	;# 
  1455  0003                     	;# 
  1456  0004                     	;# 
  1457  0005                     	;# 
  1458  0006                     	;# 
  1459  0007                     	;# 
  1460  0008                     	;# 
  1461  0009                     	;# 
  1462  000A                     	;# 
  1463  000B                     	;# 
  1464  000C                     	;# 
  1465  000E                     	;# 
  1466  0010                     	;# 
  1467  0011                     	;# 
  1468  0012                     	;# 
  1469  0013                     	;# 
  1470  0014                     	;# 
  1471  0015                     	;# 
  1472  0015                     	;# 
  1473  0016                     	;# 
  1474  0016                     	;# 
  1475  0017                     	;# 
  1476  0018                     	;# 
  1477  0019                     	;# 
  1478  0019                     	;# 
  1479  001A                     	;# 
  1480  001B                     	;# 
  1481  001C                     	;# 
  1482  001D                     	;# 
  1483  001E                     	;# 
  1484  001F                     	;# 
  1485  008C                     	;# 
  1486  008E                     	;# 
  1487  0090                     	;# 
  1488  0091                     	;# 
  1489  0092                     	;# 
  1490  0093                     	;# 
  1491  0094                     	;# 
  1492  0097                     	;# 
  1493  009B                     	;# 
  1494  009B                     	;# 
  1495  009C                     	;# 
  1496  009D                     	;# 
  1497  009E                     	;# 
  1498  009F                     	;# 
  1499  010C                     	;# 
  1500  010E                     	;# 
  1501  0111                     	;# 
  1502  0112                     	;# 
  1503  0113                     	;# 
  1504  0114                     	;# 
  1505  0115                     	;# 
  1506  0116                     	;# 
  1507  0117                     	;# 
  1508  0118                     	;# 
  1509  0119                     	;# 
  1510  018C                     	;# 
  1511  018E                     	;# 
  1512  0199                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  019A                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019C                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019D                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019E                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  020C                     	;# 
  1538  020E                     	;# 
  1539  0211                     	;# 
  1540  0211                     	;# 
  1541  0212                     	;# 
  1542  0212                     	;# 
  1543  0213                     	;# 
  1544  0213                     	;# 
  1545  0214                     	;# 
  1546  0214                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0216                     	;# 
  1552  0216                     	;# 
  1553  0217                     	;# 
  1554  0217                     	;# 
  1555  0219                     	;# 
  1556  021A                     	;# 
  1557  021B                     	;# 
  1558  021C                     	;# 
  1559  021D                     	;# 
  1560  021D                     	;# 
  1561  021E                     	;# 
  1562  021F                     	;# 
  1563  028C                     	;# 
  1564  028E                     	;# 
  1565  0291                     	;# 
  1566  0291                     	;# 
  1567  0292                     	;# 
  1568  0293                     	;# 
  1569  0294                     	;# 
  1570  0295                     	;# 
  1571  0295                     	;# 
  1572  0296                     	;# 
  1573  0297                     	;# 
  1574  0298                     	;# 
  1575  029F                     	;# 
  1576  030C                     	;# 
  1577  030E                     	;# 
  1578  0311                     	;# 
  1579  0311                     	;# 
  1580  0312                     	;# 
  1581  0313                     	;# 
  1582  0314                     	;# 
  1583  0315                     	;# 
  1584  0315                     	;# 
  1585  0316                     	;# 
  1586  0317                     	;# 
  1587  0318                     	;# 
  1588  038C                     	;# 
  1589  038E                     	;# 
  1590  0391                     	;# 
  1591  0392                     	;# 
  1592  0393                     	;# 
  1593  0397                     	;# 
  1594  0398                     	;# 
  1595  0399                     	;# 
  1596  039A                     	;# 
  1597  039C                     	;# 
  1598  039D                     	;# 
  1599  039E                     	;# 
  1600  039F                     	;# 
  1601  0411                     	;# 
  1602  0411                     	;# 
  1603  0412                     	;# 
  1604  0413                     	;# 
  1605  0414                     	;# 
  1606  0415                     	;# 
  1607  0416                     	;# 
  1608  0417                     	;# 
  1609  0418                     	;# 
  1610  0418                     	;# 
  1611  0419                     	;# 
  1612  041A                     	;# 
  1613  041B                     	;# 
  1614  041C                     	;# 
  1615  041D                     	;# 
  1616  041E                     	;# 
  1617  041F                     	;# 
  1618  0498                     	;# 
  1619  0498                     	;# 
  1620  0499                     	;# 
  1621  049A                     	;# 
  1622  049B                     	;# 
  1623  049B                     	;# 
  1624  049C                     	;# 
  1625  049D                     	;# 
  1626  049E                     	;# 
  1627  049F                     	;# 
  1628  0617                     	;# 
  1629  0618                     	;# 
  1630  0619                     	;# 
  1631  0619                     	;# 
  1632  061A                     	;# 
  1633  061B                     	;# 
  1634  061C                     	;# 
  1635  061C                     	;# 
  1636  061F                     	;# 
  1637  0691                     	;# 
  1638  0692                     	;# 
  1639  0693                     	;# 
  1640  0694                     	;# 
  1641  0695                     	;# 
  1642  0696                     	;# 
  1643  0697                     	;# 
  1644  0698                     	;# 
  1645  0699                     	;# 
  1646  0711                     	;# 
  1647  0712                     	;# 
  1648  0713                     	;# 
  1649  0714                     	;# 
  1650  0715                     	;# 
  1651  0716                     	;# 
  1652  0717                     	;# 
  1653  0718                     	;# 
  1654  0719                     	;# 
  1655  0891                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0892                     	;# 
  1662  0892                     	;# 
  1663  0892                     	;# 
  1664  0893                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0894                     	;# 
  1671  0894                     	;# 
  1672  0894                     	;# 
  1673  0895                     	;# 
  1674  0895                     	;# 
  1675  0895                     	;# 
  1676  0896                     	;# 
  1677  0896                     	;# 
  1678  0896                     	;# 
  1679  089B                     	;# 
  1680  0911                     	;# 
  1681  0912                     	;# 
  1682  0913                     	;# 
  1683  0914                     	;# 
  1684  0915                     	;# 
  1685  0916                     	;# 
  1686  0918                     	;# 
  1687  0919                     	;# 
  1688  091A                     	;# 
  1689  091B                     	;# 
  1690  091C                     	;# 
  1691  091D                     	;# 
  1692  091E                     	;# 
  1693  091F                     	;# 
  1694  0E0F                     	;# 
  1695  0E10                     	;# 
  1696  0E11                     	;# 
  1697  0E12                     	;# 
  1698  0E13                     	;# 
  1699  0E14                     	;# 
  1700  0E15                     	;# 
  1701  0E16                     	;# 
  1702  0E17                     	;# 
  1703  0E18                     	;# 
  1704  0E19                     	;# 
  1705  0E1A                     	;# 
  1706  0E1B                     	;# 
  1707  0E1C                     	;# 
  1708  0E1D                     	;# 
  1709  0E1E                     	;# 
  1710  0E1F                     	;# 
  1711  0E20                     	;# 
  1712  0E21                     	;# 
  1713  0E22                     	;# 
  1714  0E24                     	;# 
  1715  0E25                     	;# 
  1716  0E28                     	;# 
  1717  0E29                     	;# 
  1718  0E2A                     	;# 
  1719  0E2B                     	;# 
  1720  0E2C                     	;# 
  1721  0E2D                     	;# 
  1722  0E2E                     	;# 
  1723  0E2F                     	;# 
  1724  0E90                     	;# 
  1725  0E91                     	;# 
  1726  0E92                     	;# 
  1727  0E94                     	;# 
  1728  0E95                     	;# 
  1729  0EA0                     	;# 
  1730  0EA1                     	;# 
  1731  0EA2                     	;# 
  1732  0EA3                     	;# 
  1733  0EA4                     	;# 
  1734  0EA5                     	;# 
  1735  0F0F                     	;# 
  1736  0F10                     	;# 
  1737  0F11                     	;# 
  1738  0F12                     	;# 
  1739  0F13                     	;# 
  1740  0F14                     	;# 
  1741  0F15                     	;# 
  1742  0F16                     	;# 
  1743  0F17                     	;# 
  1744  0F18                     	;# 
  1745  0F19                     	;# 
  1746  0F1A                     	;# 
  1747  0F1B                     	;# 
  1748  0F1C                     	;# 
  1749  0F1D                     	;# 
  1750  0F1E                     	;# 
  1751  0F1F                     	;# 
  1752  0F20                     	;# 
  1753  0F21                     	;# 
  1754  0F22                     	;# 
  1755  0F23                     	;# 
  1756  0F24                     	;# 
  1757  0F25                     	;# 
  1758  0F26                     	;# 
  1759  0F27                     	;# 
  1760  0F28                     	;# 
  1761  0F29                     	;# 
  1762  0F2A                     	;# 
  1763  0F2B                     	;# 
  1764  0F2C                     	;# 
  1765  0F2D                     	;# 
  1766  0F2E                     	;# 
  1767  0F2F                     	;# 
  1768  0F30                     	;# 
  1769  0F31                     	;# 
  1770  0F32                     	;# 
  1771  0F33                     	;# 
  1772  0F34                     	;# 
  1773  0F35                     	;# 
  1774  0F36                     	;# 
  1775  0F37                     	;# 
  1776  0FE4                     	;# 
  1777  0FE5                     	;# 
  1778  0FE6                     	;# 
  1779  0FE7                     	;# 
  1780  0FE8                     	;# 
  1781  0FE9                     	;# 
  1782  0FEA                     	;# 
  1783  0FEB                     	;# 
  1784  0FED                     	;# 
  1785  0FEE                     	;# 
  1786  0FEF                     	;# 
  1787  0000                     	;# 
  1788  0001                     	;# 
  1789  0002                     	;# 
  1790  0003                     	;# 
  1791  0004                     	;# 
  1792  0005                     	;# 
  1793  0006                     	;# 
  1794  0007                     	;# 
  1795  0008                     	;# 
  1796  0009                     	;# 
  1797  000A                     	;# 
  1798  000B                     	;# 
  1799  000C                     	;# 
  1800  000E                     	;# 
  1801  0010                     	;# 
  1802  0011                     	;# 
  1803  0012                     	;# 
  1804  0013                     	;# 
  1805  0014                     	;# 
  1806  0015                     	;# 
  1807  0015                     	;# 
  1808  0016                     	;# 
  1809  0016                     	;# 
  1810  0017                     	;# 
  1811  0018                     	;# 
  1812  0019                     	;# 
  1813  0019                     	;# 
  1814  001A                     	;# 
  1815  001B                     	;# 
  1816  001C                     	;# 
  1817  001D                     	;# 
  1818  001E                     	;# 
  1819  001F                     	;# 
  1820  008C                     	;# 
  1821  008E                     	;# 
  1822  0090                     	;# 
  1823  0091                     	;# 
  1824  0092                     	;# 
  1825  0093                     	;# 
  1826  0094                     	;# 
  1827  0097                     	;# 
  1828  009B                     	;# 
  1829  009B                     	;# 
  1830  009C                     	;# 
  1831  009D                     	;# 
  1832  009E                     	;# 
  1833  009F                     	;# 
  1834  010C                     	;# 
  1835  010E                     	;# 
  1836  0111                     	;# 
  1837  0112                     	;# 
  1838  0113                     	;# 
  1839  0114                     	;# 
  1840  0115                     	;# 
  1841  0116                     	;# 
  1842  0117                     	;# 
  1843  0118                     	;# 
  1844  0119                     	;# 
  1845  018C                     	;# 
  1846  018E                     	;# 
  1847  0199                     	;# 
  1848  0199                     	;# 
  1849  0199                     	;# 
  1850  019A                     	;# 
  1851  019A                     	;# 
  1852  019A                     	;# 
  1853  019B                     	;# 
  1854  019B                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019C                     	;# 
  1859  019C                     	;# 
  1860  019C                     	;# 
  1861  019D                     	;# 
  1862  019D                     	;# 
  1863  019D                     	;# 
  1864  019E                     	;# 
  1865  019E                     	;# 
  1866  019E                     	;# 
  1867  019F                     	;# 
  1868  019F                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  020C                     	;# 
  1873  020E                     	;# 
  1874  0211                     	;# 
  1875  0211                     	;# 
  1876  0212                     	;# 
  1877  0212                     	;# 
  1878  0213                     	;# 
  1879  0213                     	;# 
  1880  0214                     	;# 
  1881  0214                     	;# 
  1882  0215                     	;# 
  1883  0215                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0216                     	;# 
  1887  0216                     	;# 
  1888  0217                     	;# 
  1889  0217                     	;# 
  1890  0219                     	;# 
  1891  021A                     	;# 
  1892  021B                     	;# 
  1893  021C                     	;# 
  1894  021D                     	;# 
  1895  021D                     	;# 
  1896  021E                     	;# 
  1897  021F                     	;# 
  1898  028C                     	;# 
  1899  028E                     	;# 
  1900  0291                     	;# 
  1901  0291                     	;# 
  1902  0292                     	;# 
  1903  0293                     	;# 
  1904  0294                     	;# 
  1905  0295                     	;# 
  1906  0295                     	;# 
  1907  0296                     	;# 
  1908  0297                     	;# 
  1909  0298                     	;# 
  1910  029F                     	;# 
  1911  030C                     	;# 
  1912  030E                     	;# 
  1913  0311                     	;# 
  1914  0311                     	;# 
  1915  0312                     	;# 
  1916  0313                     	;# 
  1917  0314                     	;# 
  1918  0315                     	;# 
  1919  0315                     	;# 
  1920  0316                     	;# 
  1921  0317                     	;# 
  1922  0318                     	;# 
  1923  038C                     	;# 
  1924  038E                     	;# 
  1925  0391                     	;# 
  1926  0392                     	;# 
  1927  0393                     	;# 
  1928  0397                     	;# 
  1929  0398                     	;# 
  1930  0399                     	;# 
  1931  039A                     	;# 
  1932  039C                     	;# 
  1933  039D                     	;# 
  1934  039E                     	;# 
  1935  039F                     	;# 
  1936  0411                     	;# 
  1937  0411                     	;# 
  1938  0412                     	;# 
  1939  0413                     	;# 
  1940  0414                     	;# 
  1941  0415                     	;# 
  1942  0416                     	;# 
  1943  0417                     	;# 
  1944  0418                     	;# 
  1945  0418                     	;# 
  1946  0419                     	;# 
  1947  041A                     	;# 
  1948  041B                     	;# 
  1949  041C                     	;# 
  1950  041D                     	;# 
  1951  041E                     	;# 
  1952  041F                     	;# 
  1953  0498                     	;# 
  1954  0498                     	;# 
  1955  0499                     	;# 
  1956  049A                     	;# 
  1957  049B                     	;# 
  1958  049B                     	;# 
  1959  049C                     	;# 
  1960  049D                     	;# 
  1961  049E                     	;# 
  1962  049F                     	;# 
  1963  0617                     	;# 
  1964  0618                     	;# 
  1965  0619                     	;# 
  1966  0619                     	;# 
  1967  061A                     	;# 
  1968  061B                     	;# 
  1969  061C                     	;# 
  1970  061C                     	;# 
  1971  061F                     	;# 
  1972  0691                     	;# 
  1973  0692                     	;# 
  1974  0693                     	;# 
  1975  0694                     	;# 
  1976  0695                     	;# 
  1977  0696                     	;# 
  1978  0697                     	;# 
  1979  0698                     	;# 
  1980  0699                     	;# 
  1981  0711                     	;# 
  1982  0712                     	;# 
  1983  0713                     	;# 
  1984  0714                     	;# 
  1985  0715                     	;# 
  1986  0716                     	;# 
  1987  0717                     	;# 
  1988  0718                     	;# 
  1989  0719                     	;# 
  1990  0891                     	;# 
  1991  0891                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0892                     	;# 
  1997  0892                     	;# 
  1998  0892                     	;# 
  1999  0893                     	;# 
  2000  0893                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0894                     	;# 
  2006  0894                     	;# 
  2007  0894                     	;# 
  2008  0895                     	;# 
  2009  0895                     	;# 
  2010  0895                     	;# 
  2011  0896                     	;# 
  2012  0896                     	;# 
  2013  0896                     	;# 
  2014  089B                     	;# 
  2015  0911                     	;# 
  2016  0912                     	;# 
  2017  0913                     	;# 
  2018  0914                     	;# 
  2019  0915                     	;# 
  2020  0916                     	;# 
  2021  0918                     	;# 
  2022  0919                     	;# 
  2023  091A                     	;# 
  2024  091B                     	;# 
  2025  091C                     	;# 
  2026  091D                     	;# 
  2027  091E                     	;# 
  2028  091F                     	;# 
  2029  0E0F                     	;# 
  2030  0E10                     	;# 
  2031  0E11                     	;# 
  2032  0E12                     	;# 
  2033  0E13                     	;# 
  2034  0E14                     	;# 
  2035  0E15                     	;# 
  2036  0E16                     	;# 
  2037  0E17                     	;# 
  2038  0E18                     	;# 
  2039  0E19                     	;# 
  2040  0E1A                     	;# 
  2041  0E1B                     	;# 
  2042  0E1C                     	;# 
  2043  0E1D                     	;# 
  2044  0E1E                     	;# 
  2045  0E1F                     	;# 
  2046  0E20                     	;# 
  2047  0E21                     	;# 
  2048  0E22                     	;# 
  2049  0E24                     	;# 
  2050  0E25                     	;# 
  2051  0E28                     	;# 
  2052  0E29                     	;# 
  2053  0E2A                     	;# 
  2054  0E2B                     	;# 
  2055  0E2C                     	;# 
  2056  0E2D                     	;# 
  2057  0E2E                     	;# 
  2058  0E2F                     	;# 
  2059  0E90                     	;# 
  2060  0E91                     	;# 
  2061  0E92                     	;# 
  2062  0E94                     	;# 
  2063  0E95                     	;# 
  2064  0EA0                     	;# 
  2065  0EA1                     	;# 
  2066  0EA2                     	;# 
  2067  0EA3                     	;# 
  2068  0EA4                     	;# 
  2069  0EA5                     	;# 
  2070  0F0F                     	;# 
  2071  0F10                     	;# 
  2072  0F11                     	;# 
  2073  0F12                     	;# 
  2074  0F13                     	;# 
  2075  0F14                     	;# 
  2076  0F15                     	;# 
  2077  0F16                     	;# 
  2078  0F17                     	;# 
  2079  0F18                     	;# 
  2080  0F19                     	;# 
  2081  0F1A                     	;# 
  2082  0F1B                     	;# 
  2083  0F1C                     	;# 
  2084  0F1D                     	;# 
  2085  0F1E                     	;# 
  2086  0F1F                     	;# 
  2087  0F20                     	;# 
  2088  0F21                     	;# 
  2089  0F22                     	;# 
  2090  0F23                     	;# 
  2091  0F24                     	;# 
  2092  0F25                     	;# 
  2093  0F26                     	;# 
  2094  0F27                     	;# 
  2095  0F28                     	;# 
  2096  0F29                     	;# 
  2097  0F2A                     	;# 
  2098  0F2B                     	;# 
  2099  0F2C                     	;# 
  2100  0F2D                     	;# 
  2101  0F2E                     	;# 
  2102  0F2F                     	;# 
  2103  0F30                     	;# 
  2104  0F31                     	;# 
  2105  0F32                     	;# 
  2106  0F33                     	;# 
  2107  0F34                     	;# 
  2108  0F35                     	;# 
  2109  0F36                     	;# 
  2110  0F37                     	;# 
  2111  0FE4                     	;# 
  2112  0FE5                     	;# 
  2113  0FE6                     	;# 
  2114  0FE7                     	;# 
  2115  0FE8                     	;# 
  2116  0FE9                     	;# 
  2117  0FEA                     	;# 
  2118  0FEB                     	;# 
  2119  0FED                     	;# 
  2120  0FEE                     	;# 
  2121  0FEF                     	;# 
  2122  0000                     	;# 
  2123  0001                     	;# 
  2124  0002                     	;# 
  2125  0003                     	;# 
  2126  0004                     	;# 
  2127  0005                     	;# 
  2128  0006                     	;# 
  2129  0007                     	;# 
  2130  0008                     	;# 
  2131  0009                     	;# 
  2132  000A                     	;# 
  2133  000B                     	;# 
  2134  000C                     	;# 
  2135  000E                     	;# 
  2136  0010                     	;# 
  2137  0011                     	;# 
  2138  0012                     	;# 
  2139  0013                     	;# 
  2140  0014                     	;# 
  2141  0015                     	;# 
  2142  0015                     	;# 
  2143  0016                     	;# 
  2144  0016                     	;# 
  2145  0017                     	;# 
  2146  0018                     	;# 
  2147  0019                     	;# 
  2148  0019                     	;# 
  2149  001A                     	;# 
  2150  001B                     	;# 
  2151  001C                     	;# 
  2152  001D                     	;# 
  2153  001E                     	;# 
  2154  001F                     	;# 
  2155  008C                     	;# 
  2156  008E                     	;# 
  2157  0090                     	;# 
  2158  0091                     	;# 
  2159  0092                     	;# 
  2160  0093                     	;# 
  2161  0094                     	;# 
  2162  0097                     	;# 
  2163  009B                     	;# 
  2164  009B                     	;# 
  2165  009C                     	;# 
  2166  009D                     	;# 
  2167  009E                     	;# 
  2168  009F                     	;# 
  2169  010C                     	;# 
  2170  010E                     	;# 
  2171  0111                     	;# 
  2172  0112                     	;# 
  2173  0113                     	;# 
  2174  0114                     	;# 
  2175  0115                     	;# 
  2176  0116                     	;# 
  2177  0117                     	;# 
  2178  0118                     	;# 
  2179  0119                     	;# 
  2180  018C                     	;# 
  2181  018E                     	;# 
  2182  0199                     	;# 
  2183  0199                     	;# 
  2184  0199                     	;# 
  2185  019A                     	;# 
  2186  019A                     	;# 
  2187  019A                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019C                     	;# 
  2194  019C                     	;# 
  2195  019C                     	;# 
  2196  019D                     	;# 
  2197  019D                     	;# 
  2198  019D                     	;# 
  2199  019E                     	;# 
  2200  019E                     	;# 
  2201  019E                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  019F                     	;# 
  2206  019F                     	;# 
  2207  020C                     	;# 
  2208  020E                     	;# 
  2209  0211                     	;# 
  2210  0211                     	;# 
  2211  0212                     	;# 
  2212  0212                     	;# 
  2213  0213                     	;# 
  2214  0213                     	;# 
  2215  0214                     	;# 
  2216  0214                     	;# 
  2217  0215                     	;# 
  2218  0215                     	;# 
  2219  0215                     	;# 
  2220  0215                     	;# 
  2221  0216                     	;# 
  2222  0216                     	;# 
  2223  0217                     	;# 
  2224  0217                     	;# 
  2225  0219                     	;# 
  2226  021A                     	;# 
  2227  021B                     	;# 
  2228  021C                     	;# 
  2229  021D                     	;# 
  2230  021D                     	;# 
  2231  021E                     	;# 
  2232  021F                     	;# 
  2233  028C                     	;# 
  2234  028E                     	;# 
  2235  0291                     	;# 
  2236  0291                     	;# 
  2237  0292                     	;# 
  2238  0293                     	;# 
  2239  0294                     	;# 
  2240  0295                     	;# 
  2241  0295                     	;# 
  2242  0296                     	;# 
  2243  0297                     	;# 
  2244  0298                     	;# 
  2245  029F                     	;# 
  2246  030C                     	;# 
  2247  030E                     	;# 
  2248  0311                     	;# 
  2249  0311                     	;# 
  2250  0312                     	;# 
  2251  0313                     	;# 
  2252  0314                     	;# 
  2253  0315                     	;# 
  2254  0315                     	;# 
  2255  0316                     	;# 
  2256  0317                     	;# 
  2257  0318                     	;# 
  2258  038C                     	;# 
  2259  038E                     	;# 
  2260  0391                     	;# 
  2261  0392                     	;# 
  2262  0393                     	;# 
  2263  0397                     	;# 
  2264  0398                     	;# 
  2265  0399                     	;# 
  2266  039A                     	;# 
  2267  039C                     	;# 
  2268  039D                     	;# 
  2269  039E                     	;# 
  2270  039F                     	;# 
  2271  0411                     	;# 
  2272  0411                     	;# 
  2273  0412                     	;# 
  2274  0413                     	;# 
  2275  0414                     	;# 
  2276  0415                     	;# 
  2277  0416                     	;# 
  2278  0417                     	;# 
  2279  0418                     	;# 
  2280  0418                     	;# 
  2281  0419                     	;# 
  2282  041A                     	;# 
  2283  041B                     	;# 
  2284  041C                     	;# 
  2285  041D                     	;# 
  2286  041E                     	;# 
  2287  041F                     	;# 
  2288  0498                     	;# 
  2289  0498                     	;# 
  2290  0499                     	;# 
  2291  049A                     	;# 
  2292  049B                     	;# 
  2293  049B                     	;# 
  2294  049C                     	;# 
  2295  049D                     	;# 
  2296  049E                     	;# 
  2297  049F                     	;# 
  2298  0617                     	;# 
  2299  0618                     	;# 
  2300  0619                     	;# 
  2301  0619                     	;# 
  2302  061A                     	;# 
  2303  061B                     	;# 
  2304  061C                     	;# 
  2305  061C                     	;# 
  2306  061F                     	;# 
  2307  0691                     	;# 
  2308  0692                     	;# 
  2309  0693                     	;# 
  2310  0694                     	;# 
  2311  0695                     	;# 
  2312  0696                     	;# 
  2313  0697                     	;# 
  2314  0698                     	;# 
  2315  0699                     	;# 
  2316  0711                     	;# 
  2317  0712                     	;# 
  2318  0713                     	;# 
  2319  0714                     	;# 
  2320  0715                     	;# 
  2321  0716                     	;# 
  2322  0717                     	;# 
  2323  0718                     	;# 
  2324  0719                     	;# 
  2325  0891                     	;# 
  2326  0891                     	;# 
  2327  0891                     	;# 
  2328  0891                     	;# 
  2329  0891                     	;# 
  2330  0891                     	;# 
  2331  0892                     	;# 
  2332  0892                     	;# 
  2333  0892                     	;# 
  2334  0893                     	;# 
  2335  0893                     	;# 
  2336  0893                     	;# 
  2337  0893                     	;# 
  2338  0893                     	;# 
  2339  0893                     	;# 
  2340  0894                     	;# 
  2341  0894                     	;# 
  2342  0894                     	;# 
  2343  0895                     	;# 
  2344  0895                     	;# 
  2345  0895                     	;# 
  2346  0896                     	;# 
  2347  0896                     	;# 
  2348  0896                     	;# 
  2349  089B                     	;# 
  2350  0911                     	;# 
  2351  0912                     	;# 
  2352  0913                     	;# 
  2353  0914                     	;# 
  2354  0915                     	;# 
  2355  0916                     	;# 
  2356  0918                     	;# 
  2357  0919                     	;# 
  2358  091A                     	;# 
  2359  091B                     	;# 
  2360  091C                     	;# 
  2361  091D                     	;# 
  2362  091E                     	;# 
  2363  091F                     	;# 
  2364  0E0F                     	;# 
  2365  0E10                     	;# 
  2366  0E11                     	;# 
  2367  0E12                     	;# 
  2368  0E13                     	;# 
  2369  0E14                     	;# 
  2370  0E15                     	;# 
  2371  0E16                     	;# 
  2372  0E17                     	;# 
  2373  0E18                     	;# 
  2374  0E19                     	;# 
  2375  0E1A                     	;# 
  2376  0E1B                     	;# 
  2377  0E1C                     	;# 
  2378  0E1D                     	;# 
  2379  0E1E                     	;# 
  2380  0E1F                     	;# 
  2381  0E20                     	;# 
  2382  0E21                     	;# 
  2383  0E22                     	;# 
  2384  0E24                     	;# 
  2385  0E25                     	;# 
  2386  0E28                     	;# 
  2387  0E29                     	;# 
  2388  0E2A                     	;# 
  2389  0E2B                     	;# 
  2390  0E2C                     	;# 
  2391  0E2D                     	;# 
  2392  0E2E                     	;# 
  2393  0E2F                     	;# 
  2394  0E90                     	;# 
  2395  0E91                     	;# 
  2396  0E92                     	;# 
  2397  0E94                     	;# 
  2398  0E95                     	;# 
  2399  0EA0                     	;# 
  2400  0EA1                     	;# 
  2401  0EA2                     	;# 
  2402  0EA3                     	;# 
  2403  0EA4                     	;# 
  2404  0EA5                     	;# 
  2405  0F0F                     	;# 
  2406  0F10                     	;# 
  2407  0F11                     	;# 
  2408  0F12                     	;# 
  2409  0F13                     	;# 
  2410  0F14                     	;# 
  2411  0F15                     	;# 
  2412  0F16                     	;# 
  2413  0F17                     	;# 
  2414  0F18                     	;# 
  2415  0F19                     	;# 
  2416  0F1A                     	;# 
  2417  0F1B                     	;# 
  2418  0F1C                     	;# 
  2419  0F1D                     	;# 
  2420  0F1E                     	;# 
  2421  0F1F                     	;# 
  2422  0F20                     	;# 
  2423  0F21                     	;# 
  2424  0F22                     	;# 
  2425  0F23                     	;# 
  2426  0F24                     	;# 
  2427  0F25                     	;# 
  2428  0F26                     	;# 
  2429  0F27                     	;# 
  2430  0F28                     	;# 
  2431  0F29                     	;# 
  2432  0F2A                     	;# 
  2433  0F2B                     	;# 
  2434  0F2C                     	;# 
  2435  0F2D                     	;# 
  2436  0F2E                     	;# 
  2437  0F2F                     	;# 
  2438  0F30                     	;# 
  2439  0F31                     	;# 
  2440  0F32                     	;# 
  2441  0F33                     	;# 
  2442  0F34                     	;# 
  2443  0F35                     	;# 
  2444  0F36                     	;# 
  2445  0F37                     	;# 
  2446  0FE4                     	;# 
  2447  0FE5                     	;# 
  2448  0FE6                     	;# 
  2449  0FE7                     	;# 
  2450  0FE8                     	;# 
  2451  0FE9                     	;# 
  2452  0FEA                     	;# 
  2453  0FEB                     	;# 
  2454  0FED                     	;# 
  2455  0FEE                     	;# 
  2456  0FEF                     	;# 
  2457                           
  2458                           	psect	idataBANK1
  2459  07FF                     __pidataBANK1:	
  2460 ;;nrf24l01Service@width	offset	0
  2461 ;;nrf24l01Service@i	offset	1
  2462 ;;strcpy@cp	offset	0
  2463 ;;strcpy@to	offset=-2 (param)
  2464 ;;strcpy@from	offset=-4 (param)
  2465 ;;strcmp@s1	offset	0
  2466 ;;strcmp@r	offset	1
  2467 ;;strcmp@s2	offset=-1 (param)
  2468 ;;nrf24l01SetTXPipe@pipe	offset	0
  2469 ;;___bmul@multiplier	offset	0
  2470 ;;___bmul@product	offset	1
  2471 ;;___bmul@multiplicand	offset=-1 (param)
  2472 ;;nrf24l01SendTXBuffer@packet	offset	0
  2473 ;;nrf24l01SendTXBuffer@i	offset	1
  2474 ;;nrf24l01SendTXBuffer@width	offset	2
  2475 ;;strlen@s	offset	0
  2476 ;;strlen@cp	offset	1
  2477 ;;nrf24l01SetRXMode@rxMode	offset	0
  2478 ;;nrf24l01Send@command	offset	0
  2479 ;;nrf24l01Send@data	offset=-1 (param)
  2480 ;;nrf24l01SPISend@data	offset	0
  2481 ;;memset@p	offset	0
  2482 ;;memset@p1	offset=-2 (param)
  2483 ;;memset@c	offset=-4 (param)
  2484 ;;memset@n	offset=-6 (param)
  2485 ;;nrf24l01Service@width	offset	0
  2486 ;;nrf24l01Service@i	offset	1
  2487 ;;strcpy@cp	offset	0
  2488 ;;strcpy@to	offset=-2 (param)
  2489 ;;strcpy@from	offset=-4 (param)
  2490 ;;strcmp@s1	offset	0
  2491 ;;strcmp@r	offset	1
  2492 ;;strcmp@s2	offset=-1 (param)
  2493 ;;nrf24l01SetTXPipe@pipe	offset	0
  2494 ;;___bmul@multiplier	offset	0
  2495 ;;___bmul@product	offset	1
  2496 ;;___bmul@multiplicand	offset=-1 (param)
  2497 ;;nrf24l01SendTXBuffer@packet	offset	0
  2498 ;;nrf24l01SendTXBuffer@i	offset	1
  2499 ;;nrf24l01SendTXBuffer@width	offset	2
  2500 ;;strlen@s	offset	0
  2501 ;;strlen@cp	offset	1
  2502 ;;nrf24l01SetRXMode@rxMode	offset	0
  2503 ;;nrf24l01Send@command	offset	0
  2504 ;;nrf24l01Send@data	offset=-1 (param)
  2505 ;;nrf24l01SPISend@data	offset	0
  2506 ;;memset@p	offset	0
  2507 ;;memset@p1	offset=-2 (param)
  2508 ;;memset@c	offset=-4 (param)
  2509 ;;memset@n	offset=-6 (param)
  2510                           
  2511                           
  2512                           ;initializer for _romData
  2513  07FF  34C1               	retlw	low (_romDataMap| (0+256))
  2514                           
  2515                           	psect	stringtext1
  2516  1000                     __pstringtext1:	
  2517  1000                     _dpowers:	
  2518  1000  3401               	retlw	1
  2519  1001  3400               	retlw	0
  2520  1002  3400               	retlw	0
  2521  1003  3400               	retlw	0
  2522  1004  340A               	retlw	10
  2523  1005  3400               	retlw	0
  2524  1006  3400               	retlw	0
  2525  1007  3400               	retlw	0
  2526  1008  3464               	retlw	100
  2527  1009  3400               	retlw	0
  2528  100A  3400               	retlw	0
  2529  100B  3400               	retlw	0
  2530  100C  34E8               	retlw	232
  2531  100D  3403               	retlw	3
  2532  100E  3400               	retlw	0
  2533  100F  3400               	retlw	0
  2534  1010  3410               	retlw	16
  2535  1011  3427               	retlw	39
  2536  1012  3400               	retlw	0
  2537  1013  3400               	retlw	0
  2538  1014  34A0               	retlw	160
  2539  1015  3486               	retlw	134
  2540  1016  3401               	retlw	1
  2541  1017  3400               	retlw	0
  2542  1018  3440               	retlw	64
  2543  1019  3442               	retlw	66
  2544  101A  340F               	retlw	15
  2545  101B  3400               	retlw	0
  2546  101C  3480               	retlw	128
  2547  101D  3496               	retlw	150
  2548  101E  3498               	retlw	152
  2549  101F  3400               	retlw	0
  2550  1020  3400               	retlw	0
  2551  1021  34E1               	retlw	225
  2552  1022  34F5               	retlw	245
  2553  1023  3405               	retlw	5
  2554  1024  3400               	retlw	0
  2555  1025  34CA               	retlw	202
  2556  1026  349A               	retlw	154
  2557  1027  343B               	retlw	59
  2558  1028                     __end_of_dpowers:	
  2559                           
  2560                           	psect	stringtext2
  2561  1034                     __pstringtext2:	
  2562  1034                     _n_ADDRESS_P0:	
  2563  1034  34AD               	retlw	173
  2564  1035  3487               	retlw	135
  2565  1036  3466               	retlw	102
  2566  1037  34BC               	retlw	188
  2567  1038  34BB               	retlw	187
  2568  1039                     __end_of_n_ADDRESS_P0:	
  2569                           
  2570                           	psect	stringtext3
  2571  1028                     __pstringtext3:	
  2572  1028                     _n_ADDRESS_MUL:	
  2573  1028  3421               	retlw	33
  2574  1029                     __end_of_n_ADDRESS_MUL:	
  2575  001A                     _TMR1H	set	26
  2576  0019                     _TMR1L	set	25
  2577  001C                     _T1GCONbits	set	28
  2578  001B                     _T1CONbits	set	27
  2579  000B                     _INTCONbits	set	11
  2580  0011                     _PIR1bits	set	17
  2581  0010                     _PIR0bits	set	16
  2582  000C                     _PORTAbits	set	12
  2583  000E                     _PORTCbits	set	14
  2584  0003                     _STATUSbits	set	3
  2585  0091                     _PIE1bits	set	145
  2586  009E                     _ADCON1bits	set	158
  2587  009C                     _ADRESH	set	156
  2588  009B                     _ADRESL	set	155
  2589  009D                     _ADCON0bits	set	157
  2590  0090                     _PIE0bits	set	144
  2591  0097                     _WDTCONbits	set	151
  2592  008E                     _TRISCbits	set	142
  2593  008C                     _TRISAbits	set	140
  2594  0117                     _FVRCONbits	set	279
  2595  018E                     _ANSELCbits	set	398
  2596  018C                     _ANSELAbits	set	396
  2597  018E                     _ANSELC	set	398
  2598  018C                     _ANSELA	set	396
  2599  020C                     _WPUAbits	set	524
  2600  020E                     _WPUC	set	526
  2601  020C                     _WPUA	set	524
  2602  0211                     _SSP1BUF	set	529
  2603  0214                     _SSP1STATbits	set	532
  2604  0215                     _SSP1CON1bits	set	533
  2605  028C                     _ODCONAbits	set	652
  2606  028E                     _ODCONC	set	654
  2607  028C                     _ODCONA	set	652
  2608  0391                     _IOCAPbits	set	913
  2609  038E                     _INLVLC	set	910
  2610  038C                     _INLVLA	set	908
  2611  0896                     _NVMCON2	set	2198
  2612  0895                     _NVMCON1bits	set	2197
  2613  0893                     _NVMDATL	set	2195
  2614  0891                     _NVMADRL	set	2193
  2615  0892                     _NVMADRH	set	2194
  2616  0919                     _OSCCON1bits	set	2329
  2617  0EA0                     _RC0PPSbits	set	3744
  2618  0EA2                     _RC2PPSbits	set	3746
  2619  0EA1                     _RC1PPSbits	set	3745
  2620  1029                     STR_7:	
  2621  1029  3425               	retlw	37	;'%'
  2622  102A  346C               	retlw	108	;'l'
  2623  102B  3475               	retlw	117	;'u'
  2624  102C  342E               	retlw	46	;'.'
  2625  102D  3425               	retlw	37	;'%'
  2626  102E  3436               	retlw	54	;'6'
  2627  102F  342E               	retlw	46	;'.'
  2628  1030  3436               	retlw	54	;'6'
  2629  1031  346C               	retlw	108	;'l'
  2630  1032  3475               	retlw	117	;'u'
  2631  1033  3400               	retlw	0
  2632                           
  2633                           	psect	stringtext4
  2634  1039                     __pstringtext4:	
  2635  1039                     STR_4:	
  2636  1039  3454               	retlw	84	;'T'
  2637  103A  3445               	retlw	69	;'E'
  2638  103B  344D               	retlw	77	;'M'
  2639  103C  3450               	retlw	80	;'P'
  2640  103D  3400               	retlw	0
  2641                           
  2642                           	psect	stringtext5
  2643  103E                     __pstringtext5:	
  2644  103E                     STR_3:	
  2645  103E  3456               	retlw	86	;'V'
  2646  103F  3442               	retlw	66	;'B'
  2647  1040  3441               	retlw	65	;'A'
  2648  1041  3454               	retlw	84	;'T'
  2649  1042  3400               	retlw	0
  2650                           
  2651                           	psect	stringtext6
  2652  1043                     __pstringtext6:	
  2653  1043                     STR_6:	
  2654  1043  3442               	retlw	66	;'B'
  2655  1044  344F               	retlw	79	;'O'
  2656  1045  344F               	retlw	79	;'O'
  2657  1046  3454               	retlw	84	;'T'
  2658  1047  3400               	retlw	0
  2659                           
  2660                           	psect	stringtext7
  2661  1048                     __pstringtext7:	
  2662  1048                     STR_5:	
  2663  1048  3455               	retlw	85	;'U'
  2664  1049  3457               	retlw	87	;'W'
  2665  104A  3454               	retlw	84	;'T'
  2666  104B  3400               	retlw	0
  2667                           
  2668                           	psect	stringtext8
  2669  104C                     __pstringtext8:	
  2670  104C                     STR_1:	
  2671  104C  342F               	retlw	47	;'/'
  2672  104D  3400               	retlw	0
  2673                           
  2674                           	psect	stringtext9
  2675  0000                     __pstringtext9:	
  2676  104C                     
  2677                           ; #config settings
  2678  0000                     
  2679                           	psect	cinit
  2680  002F                     start_initialization:	
  2681  002F                     __initialization:	
  2682                           
  2683                           ; Initialize objects allocated to BANK1
  2684  002F  0021               	movlb	1	; select bank1
  2685  0030  3187  27FF  3180   	fcall	__pidataBANK1	;fetch initializer
  2686  0033  00E7               	movwf	__pdataBANK1& (0+127)
  2687                           
  2688                           ; Clear objects allocated to BANK0
  2689  0034  3062               	movlw	low __pbssBANK0
  2690  0035  0084               	movwf	4
  2691  0036  3000               	movlw	high __pbssBANK0
  2692  0037  0085               	movwf	5
  2693  0038  3007               	movlw	7
  2694  0039  3188  2023  3180   	fcall	clear_ram0
  2695                           
  2696                           ; Clear objects allocated to BANK1
  2697  003C  30DF               	movlw	low __pbssBANK1
  2698  003D  0084               	movwf	4
  2699  003E  3000               	movlw	high __pbssBANK1
  2700  003F  0085               	movwf	5
  2701  0040  3008               	movlw	8
  2702  0041  3188  2023  3180   	fcall	clear_ram0
  2703                           
  2704                           ; Clear objects allocated to BANK2
  2705  0044  304D               	movlw	low __pbssBANK2
  2706  0045  0084               	movwf	4
  2707  0046  3001               	movlw	high __pbssBANK2
  2708  0047  0085               	movwf	5
  2709  0048  3021               	movlw	33
  2710  0049  3188  2023  3180   	fcall	clear_ram0
  2711                           
  2712                           ; Clear objects allocated to BANK3
  2713  004C  30A0               	movlw	low __pbssBANK3
  2714  004D  0084               	movwf	4
  2715  004E  3001               	movlw	high __pbssBANK3
  2716  004F  0085               	movwf	5
  2717  0050  304E               	movlw	78
  2718  0051  3188  2023  3180   	fcall	clear_ram0
  2719                           
  2720                           ; Clear objects allocated to BANK4
  2721  0054  3020               	movlw	low __pbssBANK4
  2722  0055  0084               	movwf	4
  2723  0056  3002               	movlw	high __pbssBANK4
  2724  0057  0085               	movwf	5
  2725  0058  3021               	movlw	33
  2726  0059  3188  2023         	fcall	clear_ram0
  2727  005B                     end_of_initialization:	
  2728                           ;End of C runtime variable initialization code
  2729                           
  2730  005B                     __end_of__initialization:	
  2731  005B  0020               	movlb	0
  2732                           
  2733                           ;Initialize the stack pointer (FSR1)
  2734  005C  3061               	movlw	low ___sp
  2735  005D  0086               	movwf	6
  2736  005E  3021               	movlw	high ___sp
  2737  005F  0087               	movwf	7
  2738  0060  318E  2EC6         	ljmp	_main	;jump to C main() function
  2739                           
  2740                           	psect	bssBANK0
  2741  0062                     __pbssBANK0:	
  2742  0062                     _status:	
  2743  0062                     	ds	5
  2744  0067                     _waiting:	
  2745  0067                     	ds	1
  2746  0068                     _lastTXPacket:	
  2747  0068                     	ds	1
  2748                           
  2749                           	psect	bssBANK1
  2750  00DF                     __pbssBANK1:	
  2751  00DF                     _distance:	
  2752  00DF                     	ds	2
  2753  00E1                     _rcount:	
  2754  00E1                     	ds	2
  2755  00E3                     _rlimit:	
  2756  00E3                     	ds	2
  2757  00E5                     _rloop:	
  2758  00E5                     	ds	2
  2759                           
  2760                           	psect	dataBANK1
  2761  00E7                     __pdataBANK1:	
  2762  00E7                     _romData:	
  2763  00E7                     	ds	1
  2764                           
  2765                           	psect	bssBANK2
  2766  014D                     __pbssBANK2:	
  2767  014D                     _RXPacket:	
  2768  014D                     	ds	33
  2769                           
  2770                           	psect	bssBANK3
  2771  01A0                     __pbssBANK3:	
  2772  01A0                     _TXPacket:	
  2773  01A0                     	ds	33
  2774  01C1                     _romDataMap:	
  2775  01C1                     	ds	28
  2776  01DD                     ftoa@buf:	
  2777  01DD                     	ds	17
  2778                           
  2779                           	psect	bssBANK4
  2780  0220                     __pbssBANK4:	
  2781  0220                     _userRXPacket:	
  2782  0220                     	ds	33
  2783                           
  2784                           	psect	clrtext
  2785  0823                     clear_ram0:	
  2786                           ;	Called with FSR0 containing the base address, and
  2787                           ;	WREG with the size to clear
  2788                           
  2789  0823  0064               	clrwdt	;clear the watchdog before getting into this loop
  2790  0824                     clrloop0:	
  2791  0824  0180               	clrf	0	;clear RAM location pointed to by FSR
  2792  0825  3101               	addfsr 0,1
  2793  0826  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2794  0827  2824               	goto	clrloop0	;have we reached the end yet?
  2795  0828  3400               	retlw	0	;all done for this memory range, return
  2796                           
  2797                           	psect	cstackBANK2
  2798  0120                     __pcstackBANK2:	
  2799  0120                     loop@vt:	
  2800                           
  2801                           ; 3 bytes @ 0x0
  2802  0120                     	ds	3
  2803  0123                     loop@ta:	
  2804                           
  2805                           ; 3 bytes @ 0x3
  2806  0123                     	ds	3
  2807  0126                     _loop$2251:	
  2808                           
  2809                           ; 3 bytes @ 0x6
  2810  0126                     	ds	3
  2811  0129                     _loop$2252:	
  2812                           
  2813                           ; 3 bytes @ 0x9
  2814  0129                     	ds	3
  2815  012C                     loop@packet:	
  2816                           
  2817                           ; 33 bytes @ 0xC
  2818  012C                     	ds	33
  2819                           
  2820                           	psect	cstackBANK1
  2821  00A0                     __pcstackBANK1:	
  2822  00A0                     ?_ftoa:	
  2823  00A0                     ftoa@f:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826                           
  2827                           ; 3 bytes @ 0x0
  2828  00A0                     	ds	3
  2829  00A3                     ftoa@status:	
  2830                           
  2831                           ; 1 bytes @ 0x3
  2832  00A3                     	ds	1
  2833  00A4                     ftoa@rem:	
  2834                           
  2835                           ; 4 bytes @ 0x4
  2836  00A4                     	ds	4
  2837  00A8                     ftoa@l:	
  2838                           
  2839                           ; 4 bytes @ 0x8
  2840  00A8                     	ds	4
  2841  00AC                     ftoa@cp:	
  2842                           
  2843                           ; 1 bytes @ 0xC
  2844  00AC                     	ds	1
  2845  00AD                     ?_strcat:	
  2846  00AD                     strcat@to:	
  2847                           ; 2 bytes @ 0xD
  2848                           
  2849                           
  2850                           ; 2 bytes @ 0xD
  2851  00AD                     	ds	2
  2852  00AF                     strcat@from:	
  2853                           
  2854                           ; 2 bytes @ 0xF
  2855  00AF                     	ds	2
  2856  00B1                     strcat@cp:	
  2857                           
  2858                           ; 2 bytes @ 0x11
  2859  00B1                     	ds	2
  2860  00B3                     ?_sendMessage:	
  2861  00B3                     sendMessage@packet:	
  2862                           ; 1 bytes @ 0x13
  2863                           
  2864                           
  2865                           ; 2 bytes @ 0x13
  2866  00B3                     	ds	2
  2867  00B5                     sendMessage@topic:	
  2868                           
  2869                           ; 2 bytes @ 0x15
  2870  00B5                     	ds	2
  2871  00B7                     sendMessage@value:	
  2872                           
  2873                           ; 3 bytes @ 0x17
  2874  00B7                     	ds	3
  2875  00BA                     sendMessage@ftoaStatus:	
  2876                           
  2877                           ; 2 bytes @ 0x1A
  2878  00BA                     	ds	2
  2879  00BC                     ??_main:	
  2880                           
  2881                           ; 1 bytes @ 0x1C
  2882  00BC                     	ds	1
  2883  00BD                     main@pipe:	
  2884                           
  2885                           ; 1 bytes @ 0x1D
  2886  00BD                     	ds	1
  2887  00BE                     main@packet:	
  2888                           
  2889                           ; 33 bytes @ 0x1E
  2890  00BE                     	ds	33
  2891                           
  2892                           	psect	cstackCOMMON
  2893  0070                     __pcstackCOMMON:	
  2894  0070                     ?_isdigit:	
  2895  0070                     ?_EEPROMWrite:	
  2896                           ; 1 bit 
  2897                           
  2898  0070                     ?_nrf24l01ISR:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ??_nrf24l01ISR:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_nrf24l01Init:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_nrf24l01SetRXPipe:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ??_nrf24l01SetRXPipe:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_EEPROMRead:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ??_isdigit:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ??___ftpack:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_nrf24l01InterfaceInit:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ??_nrf24l01InterfaceInit:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_resetWDT:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ??_resetWDT:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_sleepMs:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_exception:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_ISR:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_loop:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_nrf24l01GetPipe:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_main:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_nrf24l01InitRegisters:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ??___lldiv:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ??___ftge:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ??___llmod:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?___wmul:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?___lwmod:	
  2968                           ; 2 bytes @ 0x0
  2969                           
  2970  0070                     ?___awtoft:	
  2971                           ; 2 bytes @ 0x0
  2972                           
  2973  0070                     ?___lbtoft:	
  2974                           ; 3 bytes @ 0x0
  2975                           
  2976  0070                     ?___lltoft:	
  2977                           ; 3 bytes @ 0x0
  2978                           
  2979  0070                     ___llmod@counter:	
  2980                           ; 3 bytes @ 0x0
  2981                           
  2982  0070                     _isdigit$1998:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985  0070                     sleepMs@milliseconds:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988  0070                     EEPROMWrite@address:	
  2989                           ; 2 bytes @ 0x0
  2990                           
  2991  0070                     EEPROMRead@address:	
  2992                           ; 2 bytes @ 0x0
  2993                           
  2994  0070                     ___wmul@multiplier:	
  2995                           ; 2 bytes @ 0x0
  2996                           
  2997  0070                     ___awtoft@c:	
  2998                           ; 2 bytes @ 0x0
  2999                           
  3000  0070                     ___lwmod@divisor:	
  3001                           ; 2 bytes @ 0x0
  3002                           
  3003  0070                     ___lltoft@c:	
  3004                           ; 2 bytes @ 0x0
  3005                           
  3006                           
  3007                           ; 4 bytes @ 0x0
  3008  0070                     	ds	1
  3009  0071                     nrf24l01SetRXPipe@pipe:	
  3010  0071                     isdigit@c:	
  3011                           ; 1 bytes @ 0x1
  3012                           
  3013                           
  3014                           ; 1 bytes @ 0x1
  3015  0071                     	ds	1
  3016  0072                     ??_EEPROMRead:	
  3017  0072                     ??_sleepMs:	
  3018                           ; 1 bytes @ 0x2
  3019                           
  3020  0072                     nrf24l01SetRXPipe@enRXAddr:	
  3021                           ; 1 bytes @ 0x2
  3022                           
  3023  0072                     EEPROMWrite@data:	
  3024                           ; 1 bytes @ 0x2
  3025                           
  3026  0072                     ___wmul@multiplicand:	
  3027                           ; 1 bytes @ 0x2
  3028                           
  3029  0072                     ___lwmod@dividend:	
  3030                           ; 2 bytes @ 0x2
  3031                           
  3032                           
  3033                           ; 2 bytes @ 0x2
  3034  0072                     	ds	1
  3035  0073                     ??_EEPROMWrite:	
  3036  0073                     ??_nrf24l01InitRegisters:	
  3037                           ; 1 bytes @ 0x3
  3038                           
  3039  0073                     ??___awtoft:	
  3040                           ; 1 bytes @ 0x3
  3041                           
  3042  0073                     sleepMs@wdtps:	
  3043                           ; 1 bytes @ 0x3
  3044                           
  3045  0073                     EEPROMWrite@GIEBitValue:	
  3046                           ; 1 bytes @ 0x3
  3047                           
  3048  0073                     ___awtoft@sign:	
  3049                           ; 1 bytes @ 0x3
  3050                           
  3051                           
  3052                           ; 1 bytes @ 0x3
  3053  0073                     	ds	1
  3054  0074                     ??_strcat:	
  3055  0074                     ??_ftoa:	
  3056                           ; 1 bytes @ 0x4
  3057                           
  3058  0074                     ??_exception:	
  3059                           ; 1 bytes @ 0x4
  3060                           
  3061  0074                     ??_sleepListren:	
  3062                           ; 1 bytes @ 0x4
  3063                           
  3064  0074                     ??_sendMessage:	
  3065                           ; 1 bytes @ 0x4
  3066                           
  3067  0074                     ??_loop:	
  3068                           ; 1 bytes @ 0x4
  3069                           
  3070  0074                     ??___wmul:	
  3071                           ; 1 bytes @ 0x4
  3072                           
  3073  0074                     ??___ftmul:	
  3074                           ; 1 bytes @ 0x4
  3075                           
  3076  0074                     ??___ftneg:	
  3077                           ; 1 bytes @ 0x4
  3078                           
  3079  0074                     ??___ftsub:	
  3080                           ; 1 bytes @ 0x4
  3081                           
  3082  0074                     ??___fttol:	
  3083                           ; 1 bytes @ 0x4
  3084                           
  3085  0074                     ??___lbtoft:	
  3086                           ; 1 bytes @ 0x4
  3087                           
  3088  0074                     ??___lltoft:	
  3089                           ; 1 bytes @ 0x4
  3090                           
  3091  0074                     ??___lwmod:	
  3092                           ; 1 bytes @ 0x4
  3093                           
  3094                           
  3095                           	psect	cstackBANK0
  3096  0020                     __pcstackBANK0:	
  3097                           ; 1 bytes @ 0x4
  3098                           
  3099  0020                     ??_ISR:	
  3100                           
  3101                           ; 1 bytes @ 0x0
  3102  0020                     	ds	7
  3103  0027                     ?___ftge:	
  3104  0027                     ?_sleepListren:	
  3105                           ; 1 bit 
  3106                           
  3107  0027                     ?___ftpack:	
  3108                           ; 1 bytes @ 0x7
  3109                           
  3110  0027                     ?___lldiv:	
  3111                           ; 3 bytes @ 0x7
  3112                           
  3113  0027                     exception@exception:	
  3114                           ; 4 bytes @ 0x7
  3115                           
  3116  0027                     nrf24l01InitRegisters@channel:	
  3117                           ; 1 bytes @ 0x7
  3118                           
  3119  0027                     ___lwmod@counter:	
  3120                           ; 1 bytes @ 0x7
  3121                           
  3122  0027                     sleepListren@seconds:	
  3123                           ; 1 bytes @ 0x7
  3124                           
  3125  0027                     ___wmul@product:	
  3126                           ; 2 bytes @ 0x7
  3127                           
  3128  0027                     ___ftpack@arg:	
  3129                           ; 2 bytes @ 0x7
  3130                           
  3131  0027                     ___ftge@ff1:	
  3132                           ; 3 bytes @ 0x7
  3133                           
  3134  0027                     ___lldiv@divisor:	
  3135                           ; 3 bytes @ 0x7
  3136                           
  3137                           
  3138                           ; 4 bytes @ 0x7
  3139  0027                     	ds	1
  3140  0028                     ?_nrf24l01SendPacket:	
  3141  0028                     ??_nrf24l01GetPipe:	
  3142                           ; 1 bytes @ 0x8
  3143                           
  3144  0028                     nrf24l01InitRegisters@setupAW:	
  3145                           ; 1 bytes @ 0x8
  3146                           
  3147  0028                     nrf24l01SendPacket@txPacket:	
  3148                           ; 1 bytes @ 0x8
  3149                           
  3150                           
  3151                           ; 2 bytes @ 0x8
  3152  0028                     	ds	1
  3153  0029                     nrf24l01GetPipe@pipe:	
  3154  0029                     nrf24l01InitRegisters@feature:	
  3155                           ; 1 bytes @ 0x9
  3156                           
  3157                           
  3158                           ; 1 bytes @ 0x9
  3159  0029                     	ds	1
  3160  002A                     ??_nrf24l01SendPacket:	
  3161  002A                     nrf24l01GetPipe@name:	
  3162                           ; 1 bytes @ 0xA
  3163                           
  3164  002A                     nrf24l01InitRegisters@rfSetup:	
  3165                           ; 1 bytes @ 0xA
  3166                           
  3167  002A                     ___ftpack@exp:	
  3168                           ; 1 bytes @ 0xA
  3169                           
  3170  002A                     ___ftge@ff2:	
  3171                           ; 1 bytes @ 0xA
  3172                           
  3173                           
  3174                           ; 3 bytes @ 0xA
  3175  002A                     	ds	1
  3176  002B                     nrf24l01GetPipe@i:	
  3177  002B                     nrf24l01InitRegisters@enAA:	
  3178                           ; 1 bytes @ 0xB
  3179                           
  3180  002B                     ___ftpack@sign:	
  3181                           ; 1 bytes @ 0xB
  3182                           
  3183  002B                     nrf24l01SendPacket@loopCount:	
  3184                           ; 1 bytes @ 0xB
  3185                           
  3186  002B                     ___lldiv@dividend:	
  3187                           ; 2 bytes @ 0xB
  3188                           
  3189                           
  3190                           ; 4 bytes @ 0xB
  3191  002B                     	ds	1
  3192  002C                     ?___ftadd:	
  3193  002C                     nrf24l01InitRegisters@DynPD:	
  3194                           ; 3 bytes @ 0xC
  3195                           
  3196  002C                     ___lbtoft@c:	
  3197                           ; 1 bytes @ 0xC
  3198                           
  3199  002C                     ___lltoft@exp:	
  3200                           ; 1 bytes @ 0xC
  3201                           
  3202  002C                     ___ftadd@f1:	
  3203                           ; 1 bytes @ 0xC
  3204                           
  3205                           
  3206                           ; 3 bytes @ 0xC
  3207  002C                     	ds	1
  3208  002D                     nrf24l01InitRegisters@i:	
  3209                           
  3210                           ; 2 bytes @ 0xD
  3211  002D                     	ds	2
  3212  002F                     ??_nrf24l01Init:	
  3213  002F                     ___ftadd@f2:	
  3214                           ; 1 bytes @ 0xF
  3215                           
  3216  002F                     ___lldiv@quotient:	
  3217                           ; 3 bytes @ 0xF
  3218                           
  3219                           
  3220                           ; 4 bytes @ 0xF
  3221  002F                     	ds	3
  3222  0032                     ??___ftadd:	
  3223                           
  3224                           ; 1 bytes @ 0x12
  3225  0032                     	ds	1
  3226  0033                     ___lldiv@counter:	
  3227  0033                     ___ftadd@sign:	
  3228                           ; 1 bytes @ 0x13
  3229                           
  3230                           
  3231                           ; 1 bytes @ 0x13
  3232  0033                     	ds	1
  3233  0034                     ?___llmod:	
  3234  0034                     ___ftadd@exp2:	
  3235                           ; 4 bytes @ 0x14
  3236                           
  3237  0034                     ___llmod@divisor:	
  3238                           ; 1 bytes @ 0x14
  3239                           
  3240                           
  3241                           ; 4 bytes @ 0x14
  3242  0034                     	ds	1
  3243  0035                     ___ftadd@exp1:	
  3244                           
  3245                           ; 1 bytes @ 0x15
  3246  0035                     	ds	1
  3247  0036                     ?___ftdiv:	
  3248  0036                     ?___ftsub:	
  3249                           ; 3 bytes @ 0x16
  3250                           
  3251  0036                     ___ftdiv@f2:	
  3252                           ; 3 bytes @ 0x16
  3253                           
  3254  0036                     ___ftsub@f2:	
  3255                           ; 3 bytes @ 0x16
  3256                           
  3257                           
  3258                           ; 3 bytes @ 0x16
  3259  0036                     	ds	2
  3260  0038                     ___llmod@dividend:	
  3261                           
  3262                           ; 4 bytes @ 0x18
  3263  0038                     	ds	1
  3264  0039                     ___ftdiv@f1:	
  3265  0039                     ___ftsub@f1:	
  3266                           ; 3 bytes @ 0x19
  3267                           
  3268                           
  3269                           ; 3 bytes @ 0x19
  3270  0039                     	ds	3
  3271  003C                     ??___ftdiv:	
  3272  003C                     ?_sprintf:	
  3273                           ; 1 bytes @ 0x1C
  3274                           
  3275  003C                     sprintf@f:	
  3276                           ; 2 bytes @ 0x1C
  3277                           
  3278                           
  3279                           ; 2 bytes @ 0x1C
  3280  003C                     	ds	1
  3281  003D                     ___ftdiv@cntr:	
  3282                           
  3283                           ; 1 bytes @ 0x1D
  3284  003D                     	ds	1
  3285  003E                     ___ftdiv@f3:	
  3286                           
  3287                           ; 3 bytes @ 0x1E
  3288  003E                     	ds	3
  3289  0041                     ___ftdiv@exp:	
  3290                           
  3291                           ; 1 bytes @ 0x21
  3292  0041                     	ds	1
  3293  0042                     ___ftdiv@sign:	
  3294                           
  3295                           ; 1 bytes @ 0x22
  3296  0042                     	ds	1
  3297  0043                     ?_getADCValue:	
  3298                           
  3299                           ; 3 bytes @ 0x23
  3300  0043                     	ds	3
  3301  0046                     ??_sprintf:	
  3302  0046                     ??_getADCValue:	
  3303                           ; 1 bytes @ 0x26
  3304                           
  3305                           
  3306                           ; 1 bytes @ 0x26
  3307  0046                     	ds	1
  3308  0047                     getADCValue@channel:	
  3309                           
  3310                           ; 1 bytes @ 0x27
  3311  0047                     	ds	1
  3312  0048                     getADCValue@adcLoop:	
  3313                           
  3314                           ; 1 bytes @ 0x28
  3315  0048                     	ds	1
  3316  0049                     getADCValue@adcSum:	
  3317                           
  3318                           ; 3 bytes @ 0x29
  3319  0049                     	ds	1
  3320  004A                     sprintf@flag:	
  3321                           
  3322                           ; 1 bytes @ 0x2A
  3323  004A                     	ds	1
  3324  004B                     sprintf@ap:	
  3325                           
  3326                           ; 1 bytes @ 0x2B
  3327  004B                     	ds	1
  3328  004C                     ?___ftmul:	
  3329  004C                     ?___ftneg:	
  3330                           ; 3 bytes @ 0x2C
  3331                           
  3332  004C                     ___ftmul@f1:	
  3333                           ; 3 bytes @ 0x2C
  3334                           
  3335  004C                     ___ftneg@f1:	
  3336                           ; 3 bytes @ 0x2C
  3337                           
  3338  004C                     sprintf@val:	
  3339                           ; 3 bytes @ 0x2C
  3340                           
  3341                           
  3342                           ; 4 bytes @ 0x2C
  3343  004C                     	ds	3
  3344  004F                     ___ftmul@f2:	
  3345                           
  3346                           ; 3 bytes @ 0x2F
  3347  004F                     	ds	1
  3348  0050                     sprintf@sp:	
  3349                           
  3350                           ; 1 bytes @ 0x30
  3351  0050                     	ds	1
  3352  0051                     sprintf@width:	
  3353                           
  3354                           ; 2 bytes @ 0x31
  3355  0051                     	ds	1
  3356  0052                     ___ftmul@exp:	
  3357                           
  3358                           ; 1 bytes @ 0x32
  3359  0052                     	ds	1
  3360  0053                     sprintf@prec:	
  3361  0053                     ___ftmul@f3_as_product:	
  3362                           ; 2 bytes @ 0x33
  3363                           
  3364                           
  3365                           ; 3 bytes @ 0x33
  3366  0053                     	ds	2
  3367  0055                     sprintf@c:	
  3368                           
  3369                           ; 1 bytes @ 0x35
  3370  0055                     	ds	1
  3371  0056                     ___ftmul@cntr:	
  3372                           
  3373                           ; 1 bytes @ 0x36
  3374  0056                     	ds	1
  3375  0057                     ___ftmul@sign:	
  3376                           
  3377                           ; 1 bytes @ 0x37
  3378  0057                     	ds	1
  3379  0058                     ?___fttol:	
  3380  0058                     ___fttol@f1:	
  3381                           ; 4 bytes @ 0x38
  3382                           
  3383                           
  3384                           ; 3 bytes @ 0x38
  3385  0058                     	ds	4
  3386  005C                     ___fttol@sign1:	
  3387                           
  3388                           ; 1 bytes @ 0x3C
  3389  005C                     	ds	1
  3390  005D                     ___fttol@lval:	
  3391                           
  3392                           ; 4 bytes @ 0x3D
  3393  005D                     	ds	4
  3394  0061                     ___fttol@exp1:	
  3395                           
  3396                           ; 1 bytes @ 0x41
  3397  0061                     	ds	1
  3398                           
  3399                           	psect	maintext
  3400  0EC6                     __pmaintext:	
  3401 ;;
  3402 ;;Main: autosize = 0, tempsize = 1, incstack = 4, save=0
  3403 ;;
  3404 ;; *************** function _main *****************
  3405 ;; Defined at:
  3406 ;;		line 173 in file "main.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;		None
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;  packet         33   30[BANK1 ] struct .
  3411 ;;  pipe            1   29[BANK1 ] unsigned char 
  3412 ;; Return value:  Size  Location     Type
  3413 ;;                  1    wreg      void 
  3414 ;; Registers used:
  3415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  3416 ;; Tracked objects:
  3417 ;;		On entry : B1F/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3422 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  3423 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3424 ;;      Totals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  3425 ;;Total ram usage:       35 bytes
  3426 ;; Hardware stack levels required when called:   15
  3427 ;; This function calls:
  3428 ;;		_EEPROMRead
  3429 ;;		_EEPROMWrite
  3430 ;;		___lbtoft
  3431 ;;		_loop
  3432 ;;		_nrf24l01GetPipe
  3433 ;;		_nrf24l01Init
  3434 ;;		_nrf24l01SetRXPipe
  3435 ;;		_nrf24l01SetTXPipe
  3436 ;;		_sendMessage
  3437 ;;		_strcpy
  3438 ;; This function is called by:
  3439 ;;		Startup code after reset
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           
  3444                           ;psect for function _main
  3445  0EC6                     _main:	
  3446                           
  3447                           ;main.c: 177: ANSELA = 0x00;
  3448                           
  3449                           ;incstack = 0
  3450                           ; Regs used in _main: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  3451  0EC6  0023               	movlb	3	; select bank3
  3452  0EC7  018C               	clrf	12	;volatile
  3453                           
  3454                           ;main.c: 178: ANSELC = 0x00;
  3455  0EC8  018E               	clrf	14	;volatile
  3456                           
  3457                           ;main.c: 180: ODCONA = 0x00;
  3458  0EC9  0025               	movlb	5	; select bank5
  3459  0ECA  018C               	clrf	12	;volatile
  3460                           
  3461                           ;main.c: 181: ODCONC = 0x00;
  3462  0ECB  018E               	clrf	14	;volatile
  3463                           
  3464                           ;main.c: 186: INLVLA = 0x00;
  3465  0ECC  0027               	movlb	7	; select bank7
  3466  0ECD  018C               	clrf	12	;volatile
  3467                           
  3468                           ;main.c: 187: INLVLC = 0x00;
  3469  0ECE  018E               	clrf	14	;volatile
  3470                           
  3471                           ;main.c: 189: WPUA = 0x00;
  3472  0ECF  0024               	movlb	4	; select bank4
  3473  0ED0  018C               	clrf	12	;volatile
  3474                           
  3475                           ;main.c: 190: WPUC = 0x00;
  3476  0ED1  018E               	clrf	14	;volatile
  3477                           
  3478                           ;main.c: 192: TRISCbits.TRISC5 = 0;
  3479  0ED2  0021               	movlb	1	; select bank1
  3480  0ED3  128E               	bcf	14,5	;volatile
  3481                           
  3482                           ;main.c: 193: TRISCbits.TRISC4 = 0;
  3483  0ED4  120E               	bcf	14,4	;volatile
  3484                           
  3485                           ;main.c: 195: PORTCbits.RC4 = 0;
  3486  0ED5  0020               	movlb	0	; select bank0
  3487  0ED6  120E               	bcf	14,4	;volatile
  3488                           
  3489                           ;main.c: 202: INTCONbits.PEIE = 0;
  3490  0ED7  130B               	bcf	11,6	;volatile
  3491                           
  3492                           ;main.c: 203: INTCONbits.GIE = 0;
  3493  0ED8  138B               	bcf	11,7	;volatile
  3494                           
  3495                           ;main.c: 205: OSCCON1bits.NOSC = 0b000;
  3496  0ED9  308F               	movlw	-113
  3497  0EDA  0032               	movlb	18	; select bank18
  3498  0EDB  0599               	andwf	25,f	;volatile
  3499                           
  3500                           ;main.c: 206: OSCCON1bits.NDIV = 0b000;
  3501  0EDC  30F0               	movlw	-16
  3502  0EDD  0599               	andwf	25,f	;volatile
  3503                           
  3504                           ;main.c: 208: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3505  0EDE  300B               	movlw	11
  3506  0EDF  0021               	movlb	1	; select bank1
  3507  0EE0  00BC               	movwf	??_main^(0+128)
  3508  0EE1  3062               	movlw	98
  3509  0EE2                     u5387:	
  3510  0EE2  0B89               	decfsz	9,f
  3511  0EE3  2EE2               	goto	u5387
  3512  0EE4  0BBC               	decfsz	??_main^(0+128),f
  3513  0EE5  2EE2               	goto	u5387
  3514  0EE6  0000               	nop
  3515                           
  3516                           ;main.c: 212: strcpy(romData->name, "UWT");
  3517  0EE7  3048               	movlw	low (STR_5| (0+32768))
  3518  0EE8  001E               	movwi fsr1++
  3519  0EE9  3090               	movlw	high (STR_5| (0+32768))
  3520  0EEA  001E               	movwi fsr1++
  3521  0EEB  0021               	movlb	1	; select bank1
  3522  0EEC  0867               	movf	_romData^(0+128),w
  3523  0EED  3E01               	addlw	1
  3524  0EEE  001E               	movwi fsr1++
  3525  0EEF  3001               	movlw	1
  3526  0EF0  001E               	movwi fsr1++
  3527  0EF1  318A  224B  318E   	fcall	_strcpy
  3528                           
  3529                           ;main.c: 214: nrf24l01Init();
  3530  0EF4  3189  218E  318E   	fcall	_nrf24l01Init
  3531                           
  3532                           ;main.c: 216: unsigned char pipe = nrf24l01GetPipe(romData->name);
  3533  0EF7  0021               	movlb	1	; select bank1
  3534  0EF8  0867               	movf	_romData^(0+128),w
  3535  0EF9  3E01               	addlw	1
  3536  0EFA  318B  2300  318E   	fcall	_nrf24l01GetPipe
  3537  0EFD  00FF               	movwf	127
  3538  0EFE  087F               	movf	127,w
  3539  0EFF  0021               	movlb	1	; select bank1
  3540  0F00  00BD               	movwf	main@pipe^(0+128)
  3541                           
  3542                           ;main.c: 217: nrf24l01SetTXPipe(pipe);
  3543  0F01  083D               	movf	main@pipe^(0+128),w
  3544  0F02  318B  23AB  318E   	fcall	_nrf24l01SetTXPipe
  3545                           
  3546                           ;main.c: 218: nrf24l01SetRXPipe(pipe);
  3547  0F05  083D               	movf	main@pipe^(0+128),w
  3548  0F06  3189  2133  318E   	fcall	_nrf24l01SetRXPipe
  3549                           
  3550                           ;main.c: 222: ADCON0bits.ADON = 0;
  3551  0F09  0021               	movlb	1	; select bank1
  3552  0F0A  101D               	bcf	29,0	;volatile
  3553                           
  3554                           ;main.c: 225: PORTAbits.RA4 = 0;
  3555  0F0B  0020               	movlb	0	; select bank0
  3556  0F0C  120C               	bcf	12,4	;volatile
  3557                           
  3558                           ;main.c: 226: TRISAbits.TRISA4 = 1;
  3559  0F0D  0021               	movlb	1	; select bank1
  3560  0F0E  160C               	bsf	12,4	;volatile
  3561                           
  3562                           ;main.c: 227: WPUAbits.WPUA4 = 0;
  3563  0F0F  0024               	movlb	4	; select bank4
  3564  0F10  120C               	bcf	12,4	;volatile
  3565                           
  3566                           ;main.c: 228: ODCONAbits.ODCA4 = 1;
  3567  0F11  0025               	movlb	5	; select bank5
  3568  0F12  160C               	bsf	12,4	;volatile
  3569                           
  3570                           ;main.c: 229: ANSELAbits.ANSA4 = 1;
  3571  0F13  0023               	movlb	3	; select bank3
  3572  0F14  160C               	bsf	12,4	;volatile
  3573                           
  3574                           ;main.c: 232: ANSELCbits.ANSC3 = 1;
  3575  0F15  158E               	bsf	14,3	;volatile
  3576                           
  3577                           ;main.c: 233: TRISCbits.TRISC3 = 1;
  3578  0F16  0021               	movlb	1	; select bank1
  3579  0F17  158E               	bsf	14,3	;volatile
  3580                           
  3581                           ;main.c: 236: FVRCONbits.TSEN = 1;
  3582  0F18  0022               	movlb	2	; select bank2
  3583  0F19  1697               	bsf	23,5	;volatile
  3584                           
  3585                           ;main.c: 237: FVRCONbits.TSRNG = 1;
  3586  0F1A  1617               	bsf	23,4	;volatile
  3587                           
  3588                           ;main.c: 240: FVRCONbits.FVREN = 0;
  3589  0F1B  1397               	bcf	23,7	;volatile
  3590                           
  3591                           ;main.c: 241: FVRCONbits.ADFVR = 0b10;
  3592  0F1C  0817               	movf	23,w	;volatile
  3593  0F1D  39FC               	andlw	-4
  3594  0F1E  3802               	iorlw	2
  3595  0F1F  0097               	movwf	23	;volatile
  3596                           
  3597                           ;main.c: 243: ADCON1bits.ADCS = 0b111;
  3598  0F20  3070               	movlw	112
  3599  0F21  0021               	movlb	1	; select bank1
  3600  0F22  049E               	iorwf	30,f	;volatile
  3601                           
  3602                           ;main.c: 244: ADCON1bits.ADFM = 1;
  3603  0F23  179E               	bsf	30,7	;volatile
  3604                           
  3605                           ;main.c: 245: ADCON1bits.ADPREF = 0b11;
  3606  0F24  3003               	movlw	3
  3607  0F25  049E               	iorwf	30,f	;volatile
  3608                           
  3609                           ;main.c: 246: ADCON1bits.ADNREF = 0b00;
  3610  0F26  111E               	bcf	30,2	;volatile
  3611                           
  3612                           ;main.c: 247: PIE1bits.ADIE = 1;
  3613  0F27  1711               	bsf	17,6	;volatile
  3614                           
  3615                           ;main.c: 250: ADCON0bits.CHS = 3;
  3616  0F28  081D               	movf	29,w	;volatile
  3617  0F29  3903               	andlw	-253
  3618  0F2A  380C               	iorlw	12
  3619  0F2B  009D               	movwf	29	;volatile
  3620                           
  3621                           ;main.c: 255: TRISAbits.TRISA2 = 1;
  3622  0F2C  150C               	bsf	12,2	;volatile
  3623                           
  3624                           ;main.c: 256: PIE0bits.INTE = 1;
  3625  0F2D  1410               	bsf	16,0	;volatile
  3626                           
  3627                           ;main.c: 257: INTCONbits.INTEDG = 0;
  3628  0F2E  100B               	bcf	11,0	;volatile
  3629                           
  3630                           ;main.c: 260: TRISAbits.TRISA5 = 0;
  3631  0F2F  128C               	bcf	12,5	;volatile
  3632                           
  3633                           ;main.c: 261: PORTAbits.RA5 = 0;
  3634  0F30  0020               	movlb	0	; select bank0
  3635  0F31  128C               	bcf	12,5	;volatile
  3636                           
  3637                           ;main.c: 266: INTCONbits.PEIE = 1;
  3638  0F32  170B               	bsf	11,6	;volatile
  3639                           
  3640                           ;main.c: 267: INTCONbits.GIE = 1;
  3641  0F33  178B               	bsf	11,7	;volatile
  3642                           
  3643                           ;main.c: 269: nrf24l01Packet_t packet;;main.c: 271: sendMessage(&packet, "BOOT", EEPROMR
      +                          ead(0));
  3644  0F34  30BE               	movlw	low main@packet
  3645  0F35  0021               	movlb	1	; select bank1
  3646  0F36  00B3               	movwf	sendMessage@packet^(0+128)
  3647  0F37  3000               	movlw	high main@packet
  3648  0F38  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  3649  0F39  3043               	movlw	low (STR_6| (0+32768))
  3650  0F3A  00B5               	movwf	sendMessage@topic^(0+128)
  3651  0F3B  3090               	movlw	high (STR_6| (0+32768))
  3652  0F3C  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  3653  0F3D  3000               	movlw	0
  3654  0F3E  00F0               	movwf	EEPROMRead@address
  3655  0F3F  00F1               	movwf	EEPROMRead@address+1
  3656  0F40  3188  2044  318E   	fcall	_EEPROMRead
  3657  0F43  3188  20BE  318E   	fcall	___lbtoft
  3658  0F46  0870               	movf	?___lbtoft,w
  3659  0F47  0021               	movlb	1	; select bank1
  3660  0F48  00B7               	movwf	sendMessage@value^(0+128)
  3661  0F49  0871               	movf	?___lbtoft+1,w
  3662  0F4A  00B8               	movwf	(sendMessage@value+1)^(0+128)
  3663  0F4B  0872               	movf	?___lbtoft+2,w
  3664  0F4C  00B9               	movwf	(sendMessage@value+2)^(0+128)
  3665  0F4D  318E  263C  318E   	fcall	_sendMessage
  3666                           
  3667                           ;main.c: 272: EEPROMWrite(0, 0);
  3668  0F50  3000               	movlw	0
  3669  0F51  00F0               	movwf	EEPROMWrite@address
  3670  0F52  00F1               	movwf	EEPROMWrite@address+1
  3671  0F53  01F2               	clrf	EEPROMWrite@data
  3672  0F54  3189  216F  318E   	fcall	_EEPROMWrite
  3673  0F57                     l4853:	
  3674                           ;main.c: 275: while(1){
  3675                           
  3676                           
  3677                           ;main.c: 276: loop();
  3678  0F57  3185  2510  318E   	fcall	_loop
  3679  0F5A  2F57               	goto	l4853
  3680  0F5B                     __end_of_main:	
  3681                           ;main.c: 277: };main.c: 279: return;
  3682                           
  3683                           
  3684                           	psect	text1
  3685  098E                     __ptext1:	
  3686 ;; *************** function _nrf24l01Init *****************
  3687 ;; Defined at:
  3688 ;;		line 452 in file "nrf24l01.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;		None
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;		None
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  1    wreg      void 
  3695 ;; Registers used:
  3696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+10, btemp+11, pclath, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3704 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3705 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3706 ;;Total ram usage:        1 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:   11
  3709 ;; This function calls:
  3710 ;;		_nrf24l01InitRegisters
  3711 ;;		_nrf24l01InterfaceInit
  3712 ;; This function is called by:
  3713 ;;		_main
  3714 ;; This function uses a non-reentrant model
  3715 ;;
  3716                           
  3717                           
  3718                           ;psect for function _nrf24l01Init
  3719  098E                     _nrf24l01Init:	
  3720                           
  3721                           ;nrf24l01.c: 455: nrf24l01InterfaceInit();
  3722                           
  3723                           ;incstack = 0
  3724                           ; Regs used in _nrf24l01Init: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+10+btemp+11
      +                          +pclath+cstack]
  3725  098E  3189  2151  3189   	fcall	_nrf24l01InterfaceInit
  3726                           
  3727                           ;nrf24l01.c: 460: PORTAbits.RA0 = 0;
  3728  0991  0020               	movlb	0	; select bank0
  3729  0992  100C               	bcf	12,0	;volatile
  3730                           
  3731                           ;nrf24l01.c: 462: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3732  0993  300B               	movlw	11
  3733  0994  0020               	movlb	0	; select bank0
  3734  0995  00AF               	movwf	??_nrf24l01Init
  3735  0996  3062               	movlw	98
  3736  0997                     u5397:	
  3737  0997  0B89               	decfsz	9,f
  3738  0998  2997               	goto	u5397
  3739  0999  0BAF               	decfsz	??_nrf24l01Init,f
  3740  099A  2997               	goto	u5397
  3741  099B  0000               	nop
  3742                           
  3743                           ;nrf24l01.c: 464: nrf24l01InitRegisters();
  3744  099C  3182  222F  3189   	fcall	_nrf24l01InitRegisters
  3745                           
  3746                           ;nrf24l01.c: 466: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  3747  099F  300B               	movlw	11
  3748  09A0  0020               	movlb	0	; select bank0
  3749  09A1  00AF               	movwf	??_nrf24l01Init
  3750  09A2  3062               	movlw	98
  3751  09A3                     u5407:	
  3752  09A3  0B89               	decfsz	9,f
  3753  09A4  29A3               	goto	u5407
  3754  09A5  0BAF               	decfsz	??_nrf24l01Init,f
  3755  09A6  29A3               	goto	u5407
  3756  09A7  0000               	nop
  3757                           
  3758                           ;nrf24l01.c: 468: PORTAbits.RA0 = 1;
  3759  09A8  0020               	movlb	0	; select bank0
  3760  09A9  140C               	bsf	12,0	;volatile
  3761                           
  3762                           ;nrf24l01.c: 470: status.TX = 0;
  3763  09AA  01E2               	clrf	_status	;volatile
  3764                           
  3765                           ;nrf24l01.c: 471: status.RX = 0;
  3766  09AB  01E3               	clrf	_status+1	;volatile
  3767  09AC  0008               	return
  3768  09AD                     __end_of_nrf24l01Init:	
  3769                           
  3770                           	psect	text2
  3771  0951                     __ptext2:	
  3772 ;; *************** function _nrf24l01InterfaceInit *****************
  3773 ;; Defined at:
  3774 ;;		line 9 in file "interface.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;		None
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;		None
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3792 ;;Total ram usage:        0 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    7
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_nrf24l01Init
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           
  3803                           ;psect for function _nrf24l01InterfaceInit
  3804  0951                     _nrf24l01InterfaceInit:	
  3805                           
  3806                           ;interface.c: 11: TRISAbits.TRISA0 = 0;
  3807                           
  3808                           ;incstack = 0
  3809                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  3810  0951  0021               	movlb	1	; select bank1
  3811  0952  100C               	bcf	12,0	;volatile
  3812                           
  3813                           ;interface.c: 12: TRISAbits.TRISA1 = 0;
  3814  0953  108C               	bcf	12,1	;volatile
  3815                           
  3816                           ;interface.c: 14: TRISCbits.TRISC1 = 1;
  3817  0954  148E               	bsf	14,1	;volatile
  3818                           
  3819                           ;interface.c: 15: TRISCbits.TRISC2 = 0;
  3820  0955  110E               	bcf	14,2	;volatile
  3821                           
  3822                           ;interface.c: 16: TRISCbits.TRISC0 = 0;
  3823  0956  100E               	bcf	14,0	;volatile
  3824                           
  3825                           ;interface.c: 18: SSP1CON1bits.SSPEN = 0;
  3826  0957  0024               	movlb	4	; select bank4
  3827  0958  1295               	bcf	21,5	;volatile
  3828                           
  3829                           ;interface.c: 20: RC1PPSbits.RC1PPS = 0b10001;
  3830  0959  003D               	movlb	29	; select bank29
  3831  095A  0821               	movf	33,w	;volatile
  3832  095B  39E0               	andlw	-32
  3833  095C  3811               	iorlw	17
  3834  095D  00A1               	movwf	33	;volatile
  3835                           
  3836                           ;interface.c: 21: RC2PPSbits.RC2PPS = 0b11001;
  3837  095E  0822               	movf	34,w	;volatile
  3838  095F  39E0               	andlw	-32
  3839  0960  3819               	iorlw	25
  3840  0961  00A2               	movwf	34	;volatile
  3841                           
  3842                           ;interface.c: 22: RC0PPSbits.RC0PPS = 0b11000;
  3843  0962  0820               	movf	32,w	;volatile
  3844  0963  39E0               	andlw	-32
  3845  0964  3818               	iorlw	24
  3846  0965  00A0               	movwf	32	;volatile
  3847                           
  3848                           ;interface.c: 24: SSP1CON1bits.CKP = 0;
  3849  0966  0024               	movlb	4	; select bank4
  3850  0967  1215               	bcf	21,4	;volatile
  3851                           
  3852                           ;interface.c: 25: SSP1STATbits.CKE = 1;
  3853  0968  1714               	bsf	20,6	;volatile
  3854                           
  3855                           ;interface.c: 26: SSP1CON1bits.SSPM = 0b0001;
  3856  0969  0815               	movf	21,w	;volatile
  3857  096A  39F0               	andlw	-16
  3858  096B  3801               	iorlw	1
  3859  096C  0095               	movwf	21	;volatile
  3860                           
  3861                           ;interface.c: 28: SSP1CON1bits.SSPEN = 1;
  3862  096D  1695               	bsf	21,5	;volatile
  3863  096E  0008               	return
  3864  096F                     __end_of_nrf24l01InterfaceInit:	
  3865                           
  3866                           	psect	text3
  3867  022F                     __ptext3:	
  3868 ;; *************** function _nrf24l01InitRegisters *****************
  3869 ;; Defined at:
  3870 ;;		line 350 in file "nrf24l01.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;		None
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;  i               2   13[BANK0 ] unsigned int 
  3875 ;;  DynPD           1   12[BANK0 ] struct .
  3876 ;;  enAA            1   11[BANK0 ] struct .
  3877 ;;  rfSetup         1   10[BANK0 ] struct .
  3878 ;;  feature         1    9[BANK0 ] struct .
  3879 ;;  setupAW         1    8[BANK0 ] struct .
  3880 ;;  channel         1    7[BANK0 ] struct .
  3881 ;; Return value:  Size  Location     Type
  3882 ;;                  1    wreg      void 
  3883 ;; Registers used:
  3884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+10, btemp+11, pclath, cstack
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3891 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3892 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3893 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3894 ;;Total ram usage:        9 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; Hardware stack levels required when called:   10
  3897 ;; This function calls:
  3898 ;;		___bmul
  3899 ;;		_nrf24l01SPIEnd
  3900 ;;		_nrf24l01SPISend
  3901 ;;		_nrf24l01SPIStart
  3902 ;;		_nrf24l01Send
  3903 ;;		_nrf24l01SetRXPipe
  3904 ;;		_nrf24l01SetTXPipe
  3905 ;; This function is called by:
  3906 ;;		_nrf24l01Init
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           
  3911                           ;psect for function _nrf24l01InitRegisters
  3912  022F                     _nrf24l01InitRegisters:	
  3913                           
  3914                           ;nrf24l01.c: 353: status.configRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x00, 0);
  3915                           
  3916                           ;incstack = 0
  3917                           ; Regs used in _nrf24l01InitRegisters: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+10
      +                          +btemp+11+pclath+cstack]
  3918  022F  3000               	movlw	0
  3919  0230  001E               	movwi fsr1++
  3920  0231  3000               	movlw	0
  3921  0232  3188  207A  3182   	fcall	_nrf24l01Send
  3922  0235  00FF               	movwf	127
  3923  0236  087F               	movf	127,w
  3924  0237  0020               	movlb	0	; select bank0
  3925  0238  00E5               	movwf	_status+3	;volatile
  3926                           
  3927                           ;nrf24l01.c: 355: status.configRegister.PWR_UP = 0;
  3928  0239  10E5               	bcf	_status+3,1	;volatile
  3929                           
  3930                           ;nrf24l01.c: 356: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  3931  023A  0865               	movf	_status+3,w	;volatile
  3932  023B  001E               	movwi fsr1++
  3933  023C  3020               	movlw	32
  3934  023D  3188  207A  3182   	fcall	_nrf24l01Send
  3935                           
  3936                           ;nrf24l01.c: 358: n_SETUP_AW_t setupAW;;nrf24l01.c: 359: setupAW.byte = 0x00;
  3937  0240  0020               	movlb	0	; select bank0
  3938  0241  01A8               	clrf	nrf24l01InitRegisters@setupAW
  3939                           
  3940                           ;nrf24l01.c: 360: setupAW.AW = 0b11;
  3941  0242  3003               	movlw	3
  3942  0243  04A8               	iorwf	nrf24l01InitRegisters@setupAW,f
  3943                           
  3944                           ;nrf24l01.c: 361: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x03, setupAW.byte);
  3945  0244  0828               	movf	nrf24l01InitRegisters@setupAW,w
  3946  0245  001E               	movwi fsr1++
  3947  0246  3023               	movlw	35
  3948  0247  3188  207A  3182   	fcall	_nrf24l01Send
  3949                           
  3950                           ;nrf24l01.c: 364: n_RF_CH_t channel;;nrf24l01.c: 365: channel.RF_CH = 2;
  3951  024A  0020               	movlb	0	; select bank0
  3952  024B  0827               	movf	nrf24l01InitRegisters@channel,w
  3953  024C  3980               	andlw	-128
  3954  024D  3802               	iorlw	2
  3955  024E  00A7               	movwf	nrf24l01InitRegisters@channel
  3956                           
  3957                           ;nrf24l01.c: 366: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x05, channel.byte);
  3958  024F  0827               	movf	nrf24l01InitRegisters@channel,w
  3959  0250  001E               	movwi fsr1++
  3960  0251  3025               	movlw	37
  3961  0252  3188  207A  3182   	fcall	_nrf24l01Send
  3962                           
  3963                           ;nrf24l01.c: 369: n_RF_SETUP_t rfSetup;;nrf24l01.c: 370: rfSetup.byte = 0x00;
  3964  0255  0020               	movlb	0	; select bank0
  3965  0256  01AA               	clrf	nrf24l01InitRegisters@rfSetup
  3966                           
  3967                           ;nrf24l01.c: 371: rfSetup.RF_DR_LOW = 0;
  3968  0257  12AA               	bcf	nrf24l01InitRegisters@rfSetup,5
  3969                           
  3970                           ;nrf24l01.c: 372: rfSetup.RF_DR_HIGH = 1;
  3971  0258  15AA               	bsf	nrf24l01InitRegisters@rfSetup,3
  3972                           
  3973                           ;nrf24l01.c: 373: rfSetup.RF_PWR = 3;
  3974  0259  3006               	movlw	6
  3975  025A  04AA               	iorwf	nrf24l01InitRegisters@rfSetup,f
  3976                           
  3977                           ;nrf24l01.c: 374: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x06, rfSetup.byte);
  3978  025B  082A               	movf	nrf24l01InitRegisters@rfSetup,w
  3979  025C  001E               	movwi fsr1++
  3980  025D  3026               	movlw	38
  3981  025E  3188  207A  3182   	fcall	_nrf24l01Send
  3982                           
  3983                           ;nrf24l01.c: 377: nrf24l01SetRXPipe(0xFF);
  3984  0261  30FF               	movlw	255
  3985  0262  3189  2133  3182   	fcall	_nrf24l01SetRXPipe
  3986                           
  3987                           ;nrf24l01.c: 380: n_EN_AA_t enAA;;nrf24l01.c: 381: enAA.byte = nrf24l01Send((unsigned) 0
      +                          b00000000 | (unsigned) 0x01, 0);
  3988  0265  3000               	movlw	0
  3989  0266  001E               	movwi fsr1++
  3990  0267  3001               	movlw	1
  3991  0268  3188  207A  3182   	fcall	_nrf24l01Send
  3992  026B  00FF               	movwf	127
  3993  026C  087F               	movf	127,w
  3994  026D  0020               	movlb	0	; select bank0
  3995  026E  00AB               	movwf	nrf24l01InitRegisters@enAA
  3996                           
  3997                           ;nrf24l01.c: 382: enAA.ENAA_P0 = 0;
  3998  026F  102B               	bcf	nrf24l01InitRegisters@enAA,0
  3999                           
  4000                           ;nrf24l01.c: 383: enAA.ENAA_P1 = 0;
  4001  0270  10AB               	bcf	nrf24l01InitRegisters@enAA,1
  4002                           
  4003                           ;nrf24l01.c: 384: enAA.ENAA_P2 = 0;
  4004  0271  112B               	bcf	nrf24l01InitRegisters@enAA,2
  4005                           
  4006                           ;nrf24l01.c: 385: enAA.ENAA_P3 = 0;
  4007  0272  11AB               	bcf	nrf24l01InitRegisters@enAA,3
  4008                           
  4009                           ;nrf24l01.c: 386: enAA.ENAA_P4 = 0;
  4010  0273  122B               	bcf	nrf24l01InitRegisters@enAA,4
  4011                           
  4012                           ;nrf24l01.c: 387: enAA.ENAA_P5 = 0;
  4013  0274  12AB               	bcf	nrf24l01InitRegisters@enAA,5
  4014                           
  4015                           ;nrf24l01.c: 388: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x01, enAA.byte);
  4016  0275  082B               	movf	nrf24l01InitRegisters@enAA,w
  4017  0276  001E               	movwi fsr1++
  4018  0277  3021               	movlw	33
  4019  0278  3188  207A  3182   	fcall	_nrf24l01Send
  4020                           
  4021                           ;nrf24l01.c: 392: n_FEATURE_t feature;;nrf24l01.c: 393: feature.byte = nrf24l01Send((uns
      +                          igned) 0b00000000 | (unsigned) 0x1D, 0);
  4022  027B  3000               	movlw	0
  4023  027C  001E               	movwi fsr1++
  4024  027D  301D               	movlw	29
  4025  027E  3188  207A  3182   	fcall	_nrf24l01Send
  4026  0281  00FF               	movwf	127
  4027  0282  087F               	movf	127,w
  4028  0283  0020               	movlb	0	; select bank0
  4029  0284  00A9               	movwf	nrf24l01InitRegisters@feature
  4030                           
  4031                           ;nrf24l01.c: 394: feature.EN_DPL = 1;
  4032  0285  1529               	bsf	nrf24l01InitRegisters@feature,2
  4033                           
  4034                           ;nrf24l01.c: 395: feature.EN_DYN_ACK = 1;
  4035  0286  1429               	bsf	nrf24l01InitRegisters@feature,0
  4036                           
  4037                           ;nrf24l01.c: 396: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1D, feature.byte);
  4038  0287  0829               	movf	nrf24l01InitRegisters@feature,w
  4039  0288  001E               	movwi fsr1++
  4040  0289  303D               	movlw	61
  4041  028A  3188  207A  3182   	fcall	_nrf24l01Send
  4042                           
  4043                           ;nrf24l01.c: 398: n_DYNPD_t DynPD;;nrf24l01.c: 399: DynPD.byte = nrf24l01Send((unsigned)
      +                           0b00000000 | (unsigned) 0x1C, 0);
  4044  028D  3000               	movlw	0
  4045  028E  001E               	movwi fsr1++
  4046  028F  301C               	movlw	28
  4047  0290  3188  207A  3182   	fcall	_nrf24l01Send
  4048  0293  00FF               	movwf	127
  4049  0294  087F               	movf	127,w
  4050  0295  0020               	movlb	0	; select bank0
  4051  0296  00AC               	movwf	nrf24l01InitRegisters@DynPD
  4052                           
  4053                           ;nrf24l01.c: 400: DynPD.DPL_P0 = 1;
  4054  0297  142C               	bsf	nrf24l01InitRegisters@DynPD,0
  4055                           
  4056                           ;nrf24l01.c: 401: DynPD.DPL_P1 = 1;
  4057  0298  14AC               	bsf	nrf24l01InitRegisters@DynPD,1
  4058                           
  4059                           ;nrf24l01.c: 402: DynPD.DPL_P2 = 1;
  4060  0299  152C               	bsf	nrf24l01InitRegisters@DynPD,2
  4061                           
  4062                           ;nrf24l01.c: 403: DynPD.DPL_P3 = 1;
  4063  029A  15AC               	bsf	nrf24l01InitRegisters@DynPD,3
  4064                           
  4065                           ;nrf24l01.c: 404: DynPD.DPL_P4 = 1;
  4066  029B  162C               	bsf	nrf24l01InitRegisters@DynPD,4
  4067                           
  4068                           ;nrf24l01.c: 405: DynPD.DPL_P5 = 1;
  4069  029C  16AC               	bsf	nrf24l01InitRegisters@DynPD,5
  4070                           
  4071                           ;nrf24l01.c: 406: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x1C, DynPD.byte);
  4072  029D  082C               	movf	nrf24l01InitRegisters@DynPD,w
  4073  029E  001E               	movwi fsr1++
  4074  029F  303C               	movlw	60
  4075  02A0  3188  207A  3182   	fcall	_nrf24l01Send
  4076                           
  4077                           ;nrf24l01.c: 409: unsigned int i;;nrf24l01.c: 410: for (i = 0; i < 6; i++){
  4078  02A3  0020               	movlb	0	; select bank0
  4079  02A4  01AD               	clrf	nrf24l01InitRegisters@i
  4080  02A5  01AE               	clrf	nrf24l01InitRegisters@i+1
  4081  02A6  3000               	movlw	0
  4082  02A7  022E               	subwf	nrf24l01InitRegisters@i+1,w
  4083  02A8  3006               	movlw	6
  4084  02A9  1903               	skipnz
  4085  02AA  022D               	subwf	nrf24l01InitRegisters@i,w
  4086  02AB  1803               	btfsc	3,0
  4087  02AC  2B03               	goto	l4623
  4088  02AD                     l4607:	
  4089                           
  4090                           ;nrf24l01.c: 412: nrf24l01SPIStart();
  4091  02AD  3188  203B  3182   	fcall	_nrf24l01SPIStart
  4092                           
  4093                           ;nrf24l01.c: 413: nrf24l01SPISend((unsigned) 0b00100000 | ((unsigned) 0x0A + i));
  4094  02B0  0020               	movlb	0	; select bank0
  4095  02B1  082D               	movf	nrf24l01InitRegisters@i,w
  4096  02B2  3E0A               	addlw	10
  4097  02B3  3820               	iorlw	32
  4098  02B4  3188  206B  3182   	fcall	_nrf24l01SPISend
  4099                           
  4100                           ;nrf24l01.c: 415: nrf24l01SPISend(n_ADDRESS_P0[4] + (n_ADDRESS_MUL * i));
  4101  02B7  3038               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  4102  02B8  0084               	movwf	4
  4103  02B9  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  4104  02BA  0085               	movwf	5
  4105  02BB  0800               	movf	0,w	;code access
  4106  02BC  00F3               	movwf	??_nrf24l01InitRegisters
  4107  02BD  0020               	movlb	0	; select bank0
  4108  02BE  082D               	movf	nrf24l01InitRegisters@i,w
  4109  02BF  001E               	movwi fsr1++
  4110  02C0  3028               	movlw	low (_n_ADDRESS_MUL| (0+32768))
  4111  02C1  0084               	movwf	4
  4112  02C2  3090               	movlw	high (_n_ADDRESS_MUL| (0+32768))
  4113  02C3  0085               	movwf	5
  4114  02C4  0800               	movf	0,w	;code access
  4115  02C5  3188  208D  3182   	fcall	___bmul
  4116  02C8  0773               	addwf	??_nrf24l01InitRegisters,w
  4117  02C9  3188  206B  3182   	fcall	_nrf24l01SPISend
  4118                           
  4119                           ;nrf24l01.c: 417: if (i < 2){
  4120  02CC  3000               	movlw	0
  4121  02CD  0020               	movlb	0	; select bank0
  4122  02CE  022E               	subwf	nrf24l01InitRegisters@i+1,w
  4123  02CF  3002               	movlw	2
  4124  02D0  1903               	skipnz
  4125  02D1  022D               	subwf	nrf24l01InitRegisters@i,w
  4126  02D2  1803               	skipnc
  4127  02D3  2AF4               	goto	l4617
  4128                           
  4129                           ;nrf24l01.c: 418: nrf24l01SPISend(n_ADDRESS_P0[3]);
  4130  02D4  3037               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  4131  02D5  0084               	movwf	4
  4132  02D6  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  4133  02D7  0085               	movwf	5
  4134  02D8  0800               	movf	0,w	;code access
  4135  02D9  3188  206B  3182   	fcall	_nrf24l01SPISend
  4136                           
  4137                           ;nrf24l01.c: 419: nrf24l01SPISend(n_ADDRESS_P0[2]);
  4138  02DC  3036               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  4139  02DD  0084               	movwf	4
  4140  02DE  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  4141  02DF  0085               	movwf	5
  4142  02E0  0800               	movf	0,w	;code access
  4143  02E1  3188  206B  3182   	fcall	_nrf24l01SPISend
  4144                           
  4145                           ;nrf24l01.c: 420: nrf24l01SPISend(n_ADDRESS_P0[1]);
  4146  02E4  3035               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  4147  02E5  0084               	movwf	4
  4148  02E6  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  4149  02E7  0085               	movwf	5
  4150  02E8  0800               	movf	0,w	;code access
  4151  02E9  3188  206B  3182   	fcall	_nrf24l01SPISend
  4152                           
  4153                           ;nrf24l01.c: 421: nrf24l01SPISend(n_ADDRESS_P0[0]);
  4154  02EC  3034               	movlw	low (_n_ADDRESS_P0| (0+32768))
  4155  02ED  0084               	movwf	4
  4156  02EE  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  4157  02EF  0085               	movwf	5
  4158  02F0  0800               	movf	0,w	;code access
  4159  02F1  3188  206B  3182   	fcall	_nrf24l01SPISend
  4160  02F4                     l4617:	
  4161                           
  4162                           ;nrf24l01.c: 422: };nrf24l01.c: 424: nrf24l01SPIEnd();
  4163  02F4  3188  2032  3182   	fcall	_nrf24l01SPIEnd
  4164  02F7  3001               	movlw	1
  4165  02F8  0020               	movlb	0	; select bank0
  4166  02F9  07AD               	addwf	nrf24l01InitRegisters@i,f
  4167  02FA  3000               	movlw	0
  4168  02FB  3DAE               	addwfc	nrf24l01InitRegisters@i+1,f
  4169  02FC  3000               	movlw	0
  4170  02FD  022E               	subwf	nrf24l01InitRegisters@i+1,w
  4171  02FE  3006               	movlw	6
  4172  02FF  1903               	skipnz
  4173  0300  022D               	subwf	nrf24l01InitRegisters@i,w
  4174  0301  1C03               	skipc
  4175  0302  2AAD               	goto	l4607
  4176  0303                     l4623:	
  4177                           
  4178                           ;nrf24l01.c: 425: };nrf24l01.c: 427: nrf24l01SetTXPipe(0);
  4179  0303  3000               	movlw	0
  4180  0304  318B  23AB  3182   	fcall	_nrf24l01SetTXPipe
  4181                           
  4182                           ;nrf24l01.c: 431: status.statusRegister.byte = 0x00;
  4183  0307  0020               	movlb	0	; select bank0
  4184  0308  01E4               	clrf	_status+2	;volatile
  4185                           
  4186                           ;nrf24l01.c: 432: status.statusRegister.RX_DR = 1;
  4187  0309  1764               	bsf	_status+2,6	;volatile
  4188                           
  4189                           ;nrf24l01.c: 433: status.statusRegister.TX_DS = 1;
  4190  030A  16E4               	bsf	_status+2,5	;volatile
  4191                           
  4192                           ;nrf24l01.c: 434: status.statusRegister.MAX_RT = 1;
  4193  030B  1664               	bsf	_status+2,4	;volatile
  4194                           
  4195                           ;nrf24l01.c: 435: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x07, status.statusReg
      +                          ister.byte);
  4196  030C  0864               	movf	_status+2,w	;volatile
  4197  030D  001E               	movwi fsr1++
  4198  030E  3027               	movlw	39
  4199  030F  3188  207A  3182   	fcall	_nrf24l01Send
  4200                           
  4201                           ;nrf24l01.c: 437: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
  4202  0312  3000               	movlw	0
  4203  0313  001E               	movwi fsr1++
  4204  0314  3007               	movlw	7
  4205  0315  3188  207A  3182   	fcall	_nrf24l01Send
  4206  0318  00FF               	movwf	127
  4207  0319  087F               	movf	127,w
  4208  031A  0020               	movlb	0	; select bank0
  4209  031B  00E4               	movwf	_status+2	;volatile
  4210                           
  4211                           ;nrf24l01.c: 440: nrf24l01Send((unsigned) 0b11100001, 0);
  4212  031C  3000               	movlw	0
  4213  031D  001E               	movwi fsr1++
  4214  031E  30E1               	movlw	225
  4215  031F  3188  207A  3182   	fcall	_nrf24l01Send
  4216                           
  4217                           ;nrf24l01.c: 441: nrf24l01Send((unsigned) 0b11100010, 0);
  4218  0322  3000               	movlw	0
  4219  0323  001E               	movwi fsr1++
  4220  0324  30E2               	movlw	226
  4221  0325  3188  207A  3182   	fcall	_nrf24l01Send
  4222                           
  4223                           ;nrf24l01.c: 444: status.configRegister.PRIM_RX = 1;
  4224  0328  0020               	movlb	0	; select bank0
  4225  0329  1465               	bsf	_status+3,0	;volatile
  4226                           
  4227                           ;nrf24l01.c: 445: status.configRegister.EN_CRC = 1;
  4228  032A  15E5               	bsf	_status+3,3	;volatile
  4229                           
  4230                           ;nrf24l01.c: 446: status.configRegister.CRCO = 1;
  4231  032B  1565               	bsf	_status+3,2	;volatile
  4232                           
  4233                           ;nrf24l01.c: 447: status.configRegister.PWR_UP = 1;
  4234  032C  14E5               	bsf	_status+3,1	;volatile
  4235                           
  4236                           ;nrf24l01.c: 448: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configReg
      +                          ister.byte);
  4237  032D  0865               	movf	_status+3,w	;volatile
  4238  032E  001E               	movwi fsr1++
  4239  032F  3020               	movlw	32
  4240  0330  3188  207A         	fcall	_nrf24l01Send
  4241  0332  0008               	return
  4242  0333                     __end_of_nrf24l01InitRegisters:	
  4243                           
  4244                           	psect	text4
  4245  0933                     __ptext4:	
  4246 ;; *************** function _nrf24l01SetRXPipe *****************
  4247 ;; Defined at:
  4248 ;;		line 109 in file "nrf24l01.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;  pipe            1    wreg     unsigned char 
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;  pipe            1    1[COMMON] unsigned char 
  4253 ;;  enRXAddr        1    2[COMMON] struct .
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  1    wreg      void 
  4256 ;; Registers used:
  4257 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, pclath
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4264 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4265 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4266 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4267 ;;Total ram usage:        3 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:    9
  4270 ;; This function calls:
  4271 ;;		_nrf24l01Send
  4272 ;; This function is called by:
  4273 ;;		_main
  4274 ;;		_nrf24l01InitRegisters
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           
  4279                           ;psect for function _nrf24l01SetRXPipe
  4280  0933                     _nrf24l01SetRXPipe:	
  4281                           
  4282                           ;incstack = 0
  4283                           ; Regs used in _nrf24l01SetRXPipe: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+11+pclath]
  4284                           ;nrf24l01SetRXPipe@pipe stored from wreg
  4285  0933  00F1               	movwf	nrf24l01SetRXPipe@pipe
  4286                           
  4287                           ;nrf24l01.c: 111: n_EN_RXADDR_t enRXAddr;;nrf24l01.c: 113: if (pipe > 5){
  4288  0934  3006               	movlw	6
  4289  0935  0271               	subwf	nrf24l01SetRXPipe@pipe,w
  4290  0936  1C03               	skipc
  4291  0937  293F               	goto	l277
  4292                           
  4293                           ;nrf24l01.c: 114: enRXAddr.ERX_P0 = 1;
  4294  0938  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4295                           
  4296                           ;nrf24l01.c: 115: enRXAddr.ERX_P1 = 1;
  4297  0939  14F2               	bsf	nrf24l01SetRXPipe@enRXAddr,1
  4298                           
  4299                           ;nrf24l01.c: 116: enRXAddr.ERX_P2 = 1;
  4300  093A  1572               	bsf	nrf24l01SetRXPipe@enRXAddr,2
  4301                           
  4302                           ;nrf24l01.c: 117: enRXAddr.ERX_P3 = 1;
  4303  093B  15F2               	bsf	nrf24l01SetRXPipe@enRXAddr,3
  4304                           
  4305                           ;nrf24l01.c: 118: enRXAddr.ERX_P4 = 1;
  4306  093C  1672               	bsf	nrf24l01SetRXPipe@enRXAddr,4
  4307                           
  4308                           ;nrf24l01.c: 119: enRXAddr.ERX_P5 = 1;
  4309  093D  16F2               	bsf	nrf24l01SetRXPipe@enRXAddr,5
  4310                           
  4311                           ;nrf24l01.c: 120: }
  4312  093E  294B               	goto	l4291
  4313  093F                     l277:	
  4314                           
  4315                           ;nrf24l01.c: 122: else{;nrf24l01.c: 123: enRXAddr.ERX_P0 = 1;
  4316  093F  1472               	bsf	nrf24l01SetRXPipe@enRXAddr,0
  4317                           
  4318                           ;nrf24l01.c: 124: enRXAddr.byte = (unsigned) enRXAddr.byte << pipe;
  4319  0940  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4320  0941  00F0               	movwf	??_nrf24l01SetRXPipe
  4321  0942  0A71               	incf	nrf24l01SetRXPipe@pipe,w
  4322  0943  2945               	goto	u4864
  4323  0944                     u4865:	
  4324  0944  35F0               	lslf	??_nrf24l01SetRXPipe,f
  4325  0945                     u4864:	
  4326  0945  0B89               	decfsz	9,f
  4327  0946  2944               	goto	u4865
  4328  0947  0870               	movf	??_nrf24l01SetRXPipe,w
  4329  0948  00FF               	movwf	127
  4330  0949  087F               	movf	127,w
  4331  094A  00F2               	movwf	nrf24l01SetRXPipe@enRXAddr
  4332  094B                     l4291:	
  4333                           
  4334                           ;nrf24l01.c: 125: };nrf24l01.c: 127: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x0
      +                          2, enRXAddr.byte);
  4335  094B  0872               	movf	nrf24l01SetRXPipe@enRXAddr,w
  4336  094C  001E               	movwi fsr1++
  4337  094D  3022               	movlw	34
  4338  094E  3188  207A         	fcall	_nrf24l01Send
  4339  0950  0008               	return
  4340  0951                     __end_of_nrf24l01SetRXPipe:	
  4341                           
  4342                           	psect	text5
  4343  0B00                     __ptext5:	
  4344 ;; *************** function _nrf24l01GetPipe *****************
  4345 ;; Defined at:
  4346 ;;		line 161 in file "main.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;  name            1    wreg     PTR unsigned char 
  4349 ;;		 -> romDataMap(28), 
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;  name            1   10[BANK0 ] PTR unsigned char 
  4352 ;;		 -> romDataMap(28), 
  4353 ;;  i               1   11[BANK0 ] unsigned char 
  4354 ;;  pipe            1    9[BANK0 ] unsigned char 
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  1    wreg      unsigned char 
  4357 ;; Registers used:
  4358 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+10, btemp+11, pclath, cstack
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4365 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4366 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4367 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;Total ram usage:        4 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    8
  4371 ;; This function calls:
  4372 ;;		___lwmod
  4373 ;;		_strlen
  4374 ;; This function is called by:
  4375 ;;		_main
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           
  4380                           ;psect for function _nrf24l01GetPipe
  4381  0B00                     _nrf24l01GetPipe:	
  4382                           
  4383                           ;incstack = 0
  4384                           ; Regs used in _nrf24l01GetPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+10+btemp
      +                          +11+pclath+cstack]
  4385                           ;nrf24l01GetPipe@name stored from wreg
  4386  0B00  0020               	movlb	0	; select bank0
  4387  0B01  00AA               	movwf	nrf24l01GetPipe@name
  4388                           
  4389                           ;main.c: 162: unsigned char pipe = 0;
  4390  0B02  01A9               	clrf	nrf24l01GetPipe@pipe
  4391                           
  4392                           ;main.c: 163: unsigned char i = 0;
  4393  0B03  01AB               	clrf	nrf24l01GetPipe@i
  4394                           
  4395                           ;main.c: 166: for (i = 0; i < strlen(name); i++){
  4396  0B04  01AB               	clrf	nrf24l01GetPipe@i
  4397  0B05                     l4719:	
  4398  0B05  082A               	movf	nrf24l01GetPipe@name,w
  4399  0B06  3189  2115  318B   	fcall	_strlen
  4400  0B09  0020               	movlb	0	; select bank0
  4401  0B0A  082B               	movf	nrf24l01GetPipe@i,w
  4402  0B0B  00FE               	movwf	126
  4403  0B0C  01FF               	clrf	127
  4404  0B0D  0875               	movf	117,w
  4405  0B0E  027F               	subwf	127,w
  4406  0B0F  1D03               	skipz
  4407  0B10  2B13               	goto	u5275
  4408  0B11  0874               	movf	116,w
  4409  0B12  027E               	subwf	126,w
  4410  0B13                     u5275:	
  4411  0B13  1803               	btfsc	3,0
  4412  0B14  2B25               	goto	l4721
  4413                           
  4414                           ;main.c: 167: pipe+= name[i];
  4415  0B15  082B               	movf	nrf24l01GetPipe@i,w
  4416  0B16  072A               	addwf	nrf24l01GetPipe@name,w
  4417  0B17  00A8               	movwf	??_nrf24l01GetPipe
  4418  0B18  0828               	movf	??_nrf24l01GetPipe,w
  4419  0B19  0084               	movwf	4
  4420  0B1A  3001               	movlw	1	; select bank2/3
  4421  0B1B  0085               	movwf	5
  4422  0B1C  0800               	movf	0,w
  4423  0B1D  00FF               	movwf	127
  4424  0B1E  087F               	movf	127,w
  4425  0B1F  07A9               	addwf	nrf24l01GetPipe@pipe,f
  4426  0B20  3001               	movlw	1
  4427  0B21  00FF               	movwf	127
  4428  0B22  087F               	movf	127,w
  4429  0B23  07AB               	addwf	nrf24l01GetPipe@i,f
  4430  0B24  2B05               	goto	l4719
  4431  0B25                     l4721:	
  4432                           
  4433                           ;main.c: 168: };main.c: 170: return (unsigned) pipe % 6;
  4434  0B25  3006               	movlw	6
  4435  0B26  00F0               	movwf	___lwmod@divisor
  4436  0B27  3000               	movlw	0
  4437  0B28  00F1               	movwf	___lwmod@divisor+1
  4438  0B29  0829               	movf	nrf24l01GetPipe@pipe,w
  4439  0B2A  00FE               	movwf	126
  4440  0B2B  01FF               	clrf	127
  4441  0B2C  087E               	movf	126,w
  4442  0B2D  00F2               	movwf	___lwmod@dividend
  4443  0B2E  087F               	movf	127,w
  4444  0B2F  00F3               	movwf	___lwmod@dividend+1
  4445  0B30  318A  22A1         	fcall	___lwmod
  4446  0B32  0870               	movf	?___lwmod,w
  4447  0B33  0008               	return
  4448  0B34                     __end_of_nrf24l01GetPipe:	
  4449                           
  4450                           	psect	text6
  4451  0AA1                     __ptext6:	
  4452 ;; *************** function ___lwmod *****************
  4453 ;; Defined at:
  4454 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;  divisor         2    0[COMMON] unsigned int 
  4457 ;;  dividend        2    2[COMMON] unsigned int 
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  counter         1    7[BANK0 ] unsigned char 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  2    0[COMMON] unsigned int 
  4462 ;; Registers used:
  4463 ;;		wreg, status,2, status,0, btemp+11
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4473 ;;Total ram usage:        5 bytes
  4474 ;; Hardware stack levels used:    1
  4475 ;; Hardware stack levels required when called:    7
  4476 ;; This function calls:
  4477 ;;		Nothing
  4478 ;; This function is called by:
  4479 ;;		_nrf24l01GetPipe
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           
  4484                           ;psect for function ___lwmod
  4485  0AA1                     ___lwmod:	
  4486                           
  4487                           ;incstack = 0
  4488                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+11]
  4489  0AA1  0870               	movf	___lwmod@divisor,w
  4490  0AA2  0471               	iorwf	___lwmod@divisor+1,w
  4491  0AA3  1903               	btfsc	3,2
  4492  0AA4  2AC9               	goto	l4669
  4493  0AA5  0020               	movlb	0	; select bank0
  4494  0AA6  01A7               	clrf	___lwmod@counter
  4495  0AA7  0AA7               	incf	___lwmod@counter,f
  4496  0AA8                     l4659:	
  4497  0AA8  1BF1               	btfsc	___lwmod@divisor+1,7
  4498  0AA9  2AB4               	goto	l4661
  4499  0AAA  3001               	movlw	1
  4500  0AAB                     u5175:	
  4501  0AAB  35F0               	lslf	___lwmod@divisor,f
  4502  0AAC  0DF1               	rlf	___lwmod@divisor+1,f
  4503  0AAD  0B89               	decfsz	9,f
  4504  0AAE  2AAB               	goto	u5175
  4505  0AAF  3001               	movlw	1
  4506  0AB0  00FF               	movwf	127
  4507  0AB1  087F               	movf	127,w
  4508  0AB2  07A7               	addwf	___lwmod@counter,f
  4509  0AB3  2AA8               	goto	l4659
  4510  0AB4                     l4661:	
  4511  0AB4  0871               	movf	___lwmod@divisor+1,w
  4512  0AB5  0273               	subwf	___lwmod@dividend+1,w
  4513  0AB6  1D03               	skipz
  4514  0AB7  2ABA               	goto	u5195
  4515  0AB8  0870               	movf	___lwmod@divisor,w
  4516  0AB9  0272               	subwf	___lwmod@dividend,w
  4517  0ABA                     u5195:	
  4518  0ABA  1C03               	skipc
  4519  0ABB  2AC0               	goto	l4665
  4520  0ABC  0870               	movf	___lwmod@divisor,w
  4521  0ABD  02F2               	subwf	___lwmod@dividend,f
  4522  0ABE  0871               	movf	___lwmod@divisor+1,w
  4523  0ABF  3BF3               	subwfb	___lwmod@dividend+1,f
  4524  0AC0                     l4665:	
  4525  0AC0  3001               	movlw	1
  4526  0AC1                     u5205:	
  4527  0AC1  36F1               	lsrf	___lwmod@divisor+1,f
  4528  0AC2  0CF0               	rrf	___lwmod@divisor,f
  4529  0AC3  0B89               	decfsz	9,f
  4530  0AC4  2AC1               	goto	u5205
  4531  0AC5  3001               	movlw	1
  4532  0AC6  02A7               	subwf	___lwmod@counter,f
  4533  0AC7  1D03               	btfss	3,2
  4534  0AC8  2AB4               	goto	l4661
  4535  0AC9                     l4669:	
  4536  0AC9  0873               	movf	___lwmod@dividend+1,w
  4537  0ACA  00F1               	movwf	?___lwmod+1
  4538  0ACB  0872               	movf	___lwmod@dividend,w
  4539  0ACC  00F0               	movwf	?___lwmod
  4540  0ACD  0008               	return
  4541  0ACE                     __end_of___lwmod:	
  4542                           
  4543                           	psect	text7
  4544  0510                     __ptext7:	
  4545 ;; *************** function _loop *****************
  4546 ;; Defined at:
  4547 ;;		line 107 in file "main.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;		None
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;  packet         33   12[BANK2 ] struct .
  4552 ;;  ta              3    3[BANK2 ] float 
  4553 ;;  vt              3    0[BANK2 ] float 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  1    wreg      void 
  4556 ;; Registers used:
  4557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4564 ;;      Locals:         0       0       0      45       0       0       0       0       0       0       0       0       
      +0       0
  4565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4566 ;;      Totals:         0       0       0      45       0       0       0       0       0       0       0       0       
      +0       0
  4567 ;;Total ram usage:       45 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:   14
  4570 ;; This function calls:
  4571 ;;		___ftadd
  4572 ;;		___ftdiv
  4573 ;;		___ftmul
  4574 ;;		___ftneg
  4575 ;;		_getADCValue
  4576 ;;		_sendMessage
  4577 ;; This function is called by:
  4578 ;;		_main
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           
  4583                           ;psect for function _loop
  4584  0510                     _loop:	
  4585                           
  4586                           ;main.c: 109: nrf24l01Packet_t packet;;main.c: 124: sendMessage(&packet, "VBAT", getADCV
      +                          alue(0b000100) * 3.106382978723404);
  4587                           
  4588                           ;incstack = 0
  4589                           ; Regs used in _loop: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+c
      +                          stack]
  4590  0510  30CF               	movlw	207
  4591  0511  0020               	movlb	0	; select bank0
  4592  0512  00CC               	movwf	___ftmul@f1
  4593  0513  3046               	movlw	70
  4594  0514  00CD               	movwf	___ftmul@f1+1
  4595  0515  3040               	movlw	64
  4596  0516  00CE               	movwf	___ftmul@f1+2
  4597  0517  3004               	movlw	4
  4598  0518  318F  275B  3185   	fcall	_getADCValue
  4599  051B  0020               	movlb	0	; select bank0
  4600  051C  0843               	movf	?_getADCValue,w
  4601  051D  00CF               	movwf	___ftmul@f2
  4602  051E  0844               	movf	?_getADCValue+1,w
  4603  051F  00D0               	movwf	___ftmul@f2+1
  4604  0520  0845               	movf	?_getADCValue+2,w
  4605  0521  00D1               	movwf	___ftmul@f2+2
  4606  0522  3186  269B  3185   	fcall	___ftmul
  4607  0525  0020               	movlb	0	; select bank0
  4608  0526  084C               	movf	?___ftmul,w
  4609  0527  0022               	movlb	2	; select bank2
  4610  0528  00A6               	movwf	_loop$2251^(0+256)
  4611  0529  0020               	movlb	0	; select bank0
  4612  052A  084D               	movf	?___ftmul+1,w
  4613  052B  0022               	movlb	2	; select bank2
  4614  052C  00A7               	movwf	(_loop$2251+1)^(0+256)
  4615  052D  0020               	movlb	0	; select bank0
  4616  052E  084E               	movf	?___ftmul+2,w
  4617  052F  0022               	movlb	2	; select bank2
  4618  0530  00A8               	movwf	(_loop$2251+2)^(0+256)
  4619                           
  4620                           ;main.c: 109: nrf24l01Packet_t packet;;main.c: 124: sendMessage(&packet, "VBAT", getADCV
      +                          alue(0b000100) * 3.106382978723404);
  4621  0531  302C               	movlw	low loop@packet
  4622  0532  0021               	movlb	1	; select bank1
  4623  0533  00B3               	movwf	sendMessage@packet^(0+128)
  4624  0534  3001               	movlw	high loop@packet
  4625  0535  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  4626  0536  303E               	movlw	low (STR_3| (0+32768))
  4627  0537  00B5               	movwf	sendMessage@topic^(0+128)
  4628  0538  3090               	movlw	high (STR_3| (0+32768))
  4629  0539  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  4630  053A  0022               	movlb	2	; select bank2
  4631  053B  0826               	movf	_loop$2251^(0+256),w
  4632  053C  0021               	movlb	1	; select bank1
  4633  053D  00B7               	movwf	sendMessage@value^(0+128)
  4634  053E  0022               	movlb	2	; select bank2
  4635  053F  0827               	movf	(_loop$2251+1)^(0+256),w
  4636  0540  0021               	movlb	1	; select bank1
  4637  0541  00B8               	movwf	(sendMessage@value+1)^(0+128)
  4638  0542  0022               	movlb	2	; select bank2
  4639  0543  0828               	movf	(_loop$2251+2)^(0+256),w
  4640  0544  0021               	movlb	1	; select bank1
  4641  0545  00B9               	movwf	(sendMessage@value+2)^(0+128)
  4642  0546  318E  263C  3185   	fcall	_sendMessage
  4643                           
  4644                           ;main.c: 136: FVRCONbits.TSEN = 1;
  4645  0549  0022               	movlb	2	; select bank2
  4646  054A  1697               	bsf	23,5	;volatile
  4647                           
  4648                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4649  054B  303D               	movlw	61
  4650  054C  318F  275B  3185   	fcall	_getADCValue
  4651  054F  0020               	movlb	0	; select bank0
  4652  0550  0843               	movf	?_getADCValue,w
  4653  0551  00CC               	movwf	___ftneg@f1
  4654  0552  0844               	movf	?_getADCValue+1,w
  4655  0553  00CD               	movwf	___ftneg@f1+1
  4656  0554  0845               	movf	?_getADCValue+2,w
  4657  0555  00CE               	movwf	___ftneg@f1+2
  4658  0556  3188  2029  3185   	fcall	___ftneg
  4659  0559  0020               	movlb	0	; select bank0
  4660  055A  084C               	movf	?___ftneg,w
  4661  055B  0022               	movlb	2	; select bank2
  4662  055C  00A9               	movwf	_loop$2252^(0+256)
  4663  055D  0020               	movlb	0	; select bank0
  4664  055E  084D               	movf	?___ftneg+1,w
  4665  055F  0022               	movlb	2	; select bank2
  4666  0560  00AA               	movwf	(_loop$2252+1)^(0+256)
  4667  0561  0020               	movlb	0	; select bank0
  4668  0562  084E               	movf	?___ftneg+2,w
  4669  0563  0022               	movlb	2	; select bank2
  4670  0564  00AB               	movwf	(_loop$2252+2)^(0+256)
  4671                           
  4672                           ;main.c: 137: float vt = (2.048 - getADCValue(0b111101)) / 2;
  4673  0565  3000               	movlw	0
  4674  0566  0020               	movlb	0	; select bank0
  4675  0567  00B6               	movwf	___ftdiv@f2
  4676  0568  3000               	movlw	0
  4677  0569  00B7               	movwf	___ftdiv@f2+1
  4678  056A  3040               	movlw	64
  4679  056B  00B8               	movwf	___ftdiv@f2+2
  4680  056C  3012               	movlw	18
  4681  056D  00AC               	movwf	___ftadd@f1
  4682  056E  3003               	movlw	3
  4683  056F  00AD               	movwf	___ftadd@f1+1
  4684  0570  3040               	movlw	64
  4685  0571  00AE               	movwf	___ftadd@f1+2
  4686  0572  0022               	movlb	2	; select bank2
  4687  0573  0829               	movf	_loop$2252^(0+256),w
  4688  0574  0020               	movlb	0	; select bank0
  4689  0575  00AF               	movwf	___ftadd@f2
  4690  0576  0022               	movlb	2	; select bank2
  4691  0577  082A               	movf	(_loop$2252+1)^(0+256),w
  4692  0578  0020               	movlb	0	; select bank0
  4693  0579  00B0               	movwf	___ftadd@f2+1
  4694  057A  0022               	movlb	2	; select bank2
  4695  057B  082B               	movf	(_loop$2252+2)^(0+256),w
  4696  057C  0020               	movlb	0	; select bank0
  4697  057D  00B1               	movwf	___ftadd@f2+2
  4698  057E  3183  2333  3185   	fcall	___ftadd
  4699  0581  0020               	movlb	0	; select bank0
  4700  0582  082C               	movf	?___ftadd,w
  4701  0583  00B9               	movwf	___ftdiv@f1
  4702  0584  082D               	movf	?___ftadd+1,w
  4703  0585  00BA               	movwf	___ftdiv@f1+1
  4704  0586  082E               	movf	?___ftadd+2,w
  4705  0587  00BB               	movwf	___ftdiv@f1+2
  4706  0588  3187  274F  3185   	fcall	___ftdiv
  4707  058B  0020               	movlb	0	; select bank0
  4708  058C  0836               	movf	?___ftdiv,w
  4709  058D  0022               	movlb	2	; select bank2
  4710  058E  00A0               	movwf	loop@vt^(0+256)
  4711  058F  0020               	movlb	0	; select bank0
  4712  0590  0837               	movf	?___ftdiv+1,w
  4713  0591  0022               	movlb	2	; select bank2
  4714  0592  00A1               	movwf	(loop@vt+1)^(0+256)
  4715  0593  0020               	movlb	0	; select bank0
  4716  0594  0838               	movf	?___ftdiv+2,w
  4717  0595  0022               	movlb	2	; select bank2
  4718  0596  00A2               	movwf	(loop@vt+2)^(0+256)
  4719                           
  4720                           ;main.c: 138: FVRCONbits.TSEN = 0;
  4721  0597  1297               	bcf	23,5	;volatile
  4722                           
  4723                           ;main.c: 143: float ta = (vt / -0.00132) - (0.6063 / -0.00132) - 40;
  4724  0598  30A9               	movlw	169
  4725  0599  0020               	movlb	0	; select bank0
  4726  059A  00AC               	movwf	___ftadd@f1
  4727  059B  30D1               	movlw	209
  4728  059C  00AD               	movwf	___ftadd@f1+1
  4729  059D  3043               	movlw	67
  4730  059E  00AE               	movwf	___ftadd@f1+2
  4731  059F  3004               	movlw	4
  4732  05A0  00B6               	movwf	___ftdiv@f2
  4733  05A1  30AD               	movlw	173
  4734  05A2  00B7               	movwf	___ftdiv@f2+1
  4735  05A3  30BA               	movlw	186
  4736  05A4  00B8               	movwf	___ftdiv@f2+2
  4737  05A5  0022               	movlb	2	; select bank2
  4738  05A6  0820               	movf	loop@vt^(0+256),w
  4739  05A7  0020               	movlb	0	; select bank0
  4740  05A8  00B9               	movwf	___ftdiv@f1
  4741  05A9  0022               	movlb	2	; select bank2
  4742  05AA  0821               	movf	(loop@vt+1)^(0+256),w
  4743  05AB  0020               	movlb	0	; select bank0
  4744  05AC  00BA               	movwf	___ftdiv@f1+1
  4745  05AD  0022               	movlb	2	; select bank2
  4746  05AE  0822               	movf	(loop@vt+2)^(0+256),w
  4747  05AF  0020               	movlb	0	; select bank0
  4748  05B0  00BB               	movwf	___ftdiv@f1+2
  4749  05B1  3187  274F  3185   	fcall	___ftdiv
  4750  05B4  0020               	movlb	0	; select bank0
  4751  05B5  0836               	movf	?___ftdiv,w
  4752  05B6  00AF               	movwf	___ftadd@f2
  4753  05B7  0837               	movf	?___ftdiv+1,w
  4754  05B8  00B0               	movwf	___ftadd@f2+1
  4755  05B9  0838               	movf	?___ftdiv+2,w
  4756  05BA  00B1               	movwf	___ftadd@f2+2
  4757  05BB  3183  2333  3185   	fcall	___ftadd
  4758  05BE  0020               	movlb	0	; select bank0
  4759  05BF  082C               	movf	?___ftadd,w
  4760  05C0  0022               	movlb	2	; select bank2
  4761  05C1  00A3               	movwf	loop@ta^(0+256)
  4762  05C2  0020               	movlb	0	; select bank0
  4763  05C3  082D               	movf	?___ftadd+1,w
  4764  05C4  0022               	movlb	2	; select bank2
  4765  05C5  00A4               	movwf	(loop@ta+1)^(0+256)
  4766  05C6  0020               	movlb	0	; select bank0
  4767  05C7  082E               	movf	?___ftadd+2,w
  4768  05C8  0022               	movlb	2	; select bank2
  4769  05C9  00A5               	movwf	(loop@ta+2)^(0+256)
  4770                           
  4771                           ;main.c: 145: sendMessage(&packet, "TEMP", ta);
  4772  05CA  302C               	movlw	low loop@packet
  4773  05CB  0021               	movlb	1	; select bank1
  4774  05CC  00B3               	movwf	sendMessage@packet^(0+128)
  4775  05CD  3001               	movlw	high loop@packet
  4776  05CE  00B4               	movwf	(sendMessage@packet+1)^(0+128)
  4777  05CF  3039               	movlw	low (STR_4| (0+32768))
  4778  05D0  00B5               	movwf	sendMessage@topic^(0+128)
  4779  05D1  3090               	movlw	high (STR_4| (0+32768))
  4780  05D2  00B6               	movwf	(sendMessage@topic^(0+128)+1)
  4781  05D3  0022               	movlb	2	; select bank2
  4782  05D4  0823               	movf	loop@ta^(0+256),w
  4783  05D5  0021               	movlb	1	; select bank1
  4784  05D6  00B7               	movwf	sendMessage@value^(0+128)
  4785  05D7  0022               	movlb	2	; select bank2
  4786  05D8  0824               	movf	(loop@ta+1)^(0+256),w
  4787  05D9  0021               	movlb	1	; select bank1
  4788  05DA  00B8               	movwf	(sendMessage@value+1)^(0+128)
  4789  05DB  0022               	movlb	2	; select bank2
  4790  05DC  0825               	movf	(loop@ta+2)^(0+256),w
  4791  05DD  0021               	movlb	1	; select bank1
  4792  05DE  00B9               	movwf	(sendMessage@value+2)^(0+128)
  4793  05DF  318E  263C         	fcall	_sendMessage
  4794  05E1  0008               	return
  4795  05E2                     __end_of_loop:	
  4796                           
  4797                           	psect	text8
  4798  0E3C                     __ptext8:	
  4799 ;; *************** function _sendMessage *****************
  4800 ;; Defined at:
  4801 ;;		line 87 in file "main.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  packet          2   19[BANK1 ] PTR struct .
  4804 ;;		 -> main@packet(33), loop@packet(33), 
  4805 ;;  topic           2   21[BANK1 ] PTR const unsigned char 
  4806 ;;		 -> STR_6(5), STR_4(5), STR_3(5), 
  4807 ;;  value           3   23[BANK1 ] float 
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;  ftoaStatus      2   26[BANK1 ] int 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  1    wreg      void 
  4812 ;; Registers used:
  4813 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4819 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4820 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4822 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;Total ram usage:        9 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:   13
  4826 ;; This function calls:
  4827 ;;		_ftoa
  4828 ;;		_memset
  4829 ;;		_nrf24l01SendPacket
  4830 ;;		_sleepListren
  4831 ;;		_strcat
  4832 ;;		_strcpy
  4833 ;; This function is called by:
  4834 ;;		_loop
  4835 ;;		_main
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           
  4840                           ;psect for function _sendMessage
  4841  0E3C                     _sendMessage:	
  4842                           
  4843                           ;main.c: 89: int ftoaStatus;;main.c: 91: memset(packet->Message, 0, sizeof(packet->Messa
      +                          ge));
  4844                           
  4845                           ;incstack = 0
  4846                           ; Regs used in _sendMessage: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath+cstack]
  4847  0E3C  3020               	movlw	32
  4848  0E3D  001E               	movwi fsr1++
  4849  0E3E  3000               	movlw	0
  4850  0E3F  001E               	movwi fsr1++
  4851  0E40  3000               	movlw	0
  4852  0E41  001E               	movwi fsr1++
  4853  0E42  001E               	movwi fsr1++
  4854  0E43  0021               	movlb	1	; select bank1
  4855  0E44  0833               	movf	sendMessage@packet^(0+128),w
  4856  0E45  3E01               	addlw	1
  4857  0E46  00FE               	movwf	126
  4858  0E47  3000               	movlw	0
  4859  0E48  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4860  0E49  00FF               	movwf	127
  4861  0E4A  087E               	movf	126,w
  4862  0E4B  001E               	movwi fsr1++
  4863  0E4C  087F               	movf	127,w
  4864  0E4D  001E               	movwi fsr1++
  4865  0E4E  318A  22CE  318E   	fcall	_memset
  4866                           
  4867                           ;main.c: 92: strcpy(packet->Message, romData->name);
  4868  0E51  0021               	movlb	1	; select bank1
  4869  0E52  0867               	movf	_romData^(0+128),w
  4870  0E53  3E01               	addlw	1
  4871  0E54  001E               	movwi fsr1++
  4872  0E55  3001               	movlw	1
  4873  0E56  001E               	movwi fsr1++
  4874  0E57  0833               	movf	sendMessage@packet^(0+128),w
  4875  0E58  3E01               	addlw	1
  4876  0E59  00FE               	movwf	126
  4877  0E5A  3000               	movlw	0
  4878  0E5B  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4879  0E5C  00FF               	movwf	127
  4880  0E5D  087E               	movf	126,w
  4881  0E5E  001E               	movwi fsr1++
  4882  0E5F  087F               	movf	127,w
  4883  0E60  001E               	movwi fsr1++
  4884  0E61  318A  224B  318E   	fcall	_strcpy
  4885                           
  4886                           ;main.c: 93: strcat(packet->Message, "/");
  4887  0E64  0021               	movlb	1	; select bank1
  4888  0E65  0833               	movf	sendMessage@packet^(0+128),w
  4889  0E66  3E01               	addlw	1
  4890  0E67  00AD               	movwf	strcat@to^(0+128)
  4891  0E68  3000               	movlw	0
  4892  0E69  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4893  0E6A  00AE               	movwf	(strcat@to+1)^(0+128)
  4894  0E6B  304C               	movlw	low (STR_1| (0+32768))
  4895  0E6C  00AF               	movwf	strcat@from^(0+128)
  4896  0E6D  3090               	movlw	high (STR_1| (0+32768))
  4897  0E6E  00B0               	movwf	(strcat@from^(0+128)+1)
  4898  0E6F  3189  21F8  318E   	fcall	_strcat
  4899                           
  4900                           ;main.c: 94: strcat(packet->Message, topic);
  4901  0E72  0021               	movlb	1	; select bank1
  4902  0E73  0833               	movf	sendMessage@packet^(0+128),w
  4903  0E74  3E01               	addlw	1
  4904  0E75  00AD               	movwf	strcat@to^(0+128)
  4905  0E76  3000               	movlw	0
  4906  0E77  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4907  0E78  00AE               	movwf	(strcat@to+1)^(0+128)
  4908  0E79  0836               	movf	(sendMessage@topic+1)^(0+128),w
  4909  0E7A  00B0               	movwf	(strcat@from+1)^(0+128)
  4910  0E7B  0835               	movf	sendMessage@topic^(0+128),w
  4911  0E7C  00AF               	movwf	strcat@from^(0+128)
  4912  0E7D  3189  21F8  318E   	fcall	_strcat
  4913                           
  4914                           ;main.c: 95: strcat(packet->Message, "/");
  4915  0E80  0021               	movlb	1	; select bank1
  4916  0E81  0833               	movf	sendMessage@packet^(0+128),w
  4917  0E82  3E01               	addlw	1
  4918  0E83  00AD               	movwf	strcat@to^(0+128)
  4919  0E84  3000               	movlw	0
  4920  0E85  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4921  0E86  00AE               	movwf	(strcat@to+1)^(0+128)
  4922  0E87  304C               	movlw	low (STR_1| (0+32768))
  4923  0E88  00AF               	movwf	strcat@from^(0+128)
  4924  0E89  3090               	movlw	high (STR_1| (0+32768))
  4925  0E8A  00B0               	movwf	(strcat@from^(0+128)+1)
  4926  0E8B  3189  21F8  318E   	fcall	_strcat
  4927                           
  4928                           ;main.c: 96: strcat(packet->Message, ftoa(value, &ftoaStatus));
  4929  0E8E  0021               	movlb	1	; select bank1
  4930  0E8F  0833               	movf	sendMessage@packet^(0+128),w
  4931  0E90  3E01               	addlw	1
  4932  0E91  00AD               	movwf	strcat@to^(0+128)
  4933  0E92  3000               	movlw	0
  4934  0E93  3D34               	addwfc	(sendMessage@packet+1)^(0+128),w
  4935  0E94  00AE               	movwf	(strcat@to+1)^(0+128)
  4936  0E95  0837               	movf	sendMessage@value^(0+128),w
  4937  0E96  00A0               	movwf	ftoa@f^(0+128)
  4938  0E97  0838               	movf	(sendMessage@value+1)^(0+128),w
  4939  0E98  00A1               	movwf	(ftoa@f+1)^(0+128)
  4940  0E99  0839               	movf	(sendMessage@value+2)^(0+128),w
  4941  0E9A  00A2               	movwf	(ftoa@f+2)^(0+128)
  4942  0E9B  30BA               	movlw	(low (sendMessage@ftoaStatus| 0))& (0+255)
  4943  0E9C  00FF               	movwf	127
  4944  0E9D  087F               	movf	127,w
  4945  0E9E  00A3               	movwf	ftoa@status^(0+128)
  4946  0E9F  3184  2429  318E   	fcall	_ftoa
  4947  0EA2  0021               	movlb	1	; select bank1
  4948  0EA3  00AF               	movwf	strcat@from^(0+128)
  4949  0EA4  3001               	movlw	1
  4950  0EA5  00B0               	movwf	(strcat@from+1)^(0+128)
  4951  0EA6  3189  21F8  318E   	fcall	_strcat
  4952                           
  4953                           ;main.c: 98: packet->packetData.byte = 0;
  4954  0EA9  0021               	movlb	1	; select bank1
  4955  0EAA  0833               	movf	sendMessage@packet^(0+128),w
  4956  0EAB  0084               	movwf	4
  4957  0EAC  0834               	movf	(sendMessage@packet+1)^(0+128),w
  4958  0EAD  0085               	movwf	5
  4959  0EAE  0180               	clrf	0
  4960                           
  4961                           ;main.c: 99: packet->packetData.ACKRequest = 1;
  4962  0EAF  0833               	movf	sendMessage@packet^(0+128),w
  4963  0EB0  0084               	movwf	4
  4964  0EB1  0834               	movf	(sendMessage@packet+1)^(0+128),w
  4965  0EB2  0085               	movwf	5
  4966  0EB3  1500               	bsf	0,2
  4967                           
  4968                           ;main.c: 101: nrf24l01SendPacket(packet);
  4969  0EB4  0834               	movf	(sendMessage@packet+1)^(0+128),w
  4970  0EB5  0020               	movlb	0	; select bank0
  4971  0EB6  00A9               	movwf	nrf24l01SendPacket@txPacket+1
  4972  0EB7  0021               	movlb	1	; select bank1
  4973  0EB8  0833               	movf	sendMessage@packet^(0+128),w
  4974  0EB9  0020               	movlb	0	; select bank0
  4975  0EBA  00A8               	movwf	nrf24l01SendPacket@txPacket
  4976  0EBB  318C  24B5  318E   	fcall	_nrf24l01SendPacket
  4977                           
  4978                           ;main.c: 103: sleepListren(3);
  4979  0EBE  3003               	movlw	3
  4980  0EBF  0020               	movlb	0	; select bank0
  4981  0EC0  00A7               	movwf	sleepListren@seconds
  4982  0EC1  3000               	movlw	0
  4983  0EC2  00A8               	movwf	sleepListren@seconds+1
  4984  0EC3  3188  20A5         	fcall	_sleepListren
  4985  0EC5  0008               	return
  4986  0EC6                     __end_of_sendMessage:	
  4987                           
  4988                           	psect	text9
  4989  09F8                     __ptext9:	
  4990 ;; *************** function _strcat *****************
  4991 ;; Defined at:
  4992 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcat.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;  to              2   13[BANK1 ] PTR unsigned char 
  4995 ;;		 -> main@packet(33), loop@packet(33), 
  4996 ;;  from            2   15[BANK1 ] PTR const unsigned char 
  4997 ;;		 -> ftoa@buf(17), STR_6(5), STR_4(5), STR_3(5), 
  4998 ;;		 -> STR_2(2), STR_1(2), 
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;  cp              2   17[BANK1 ] PTR unsigned char 
  5001 ;;		 -> main@packet(33), loop@packet(33), 
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  2   13[BANK1 ] PTR unsigned char 
  5004 ;; Registers used:
  5005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+11, pclath
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5011 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;Total ram usage:        6 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    7
  5018 ;; This function calls:
  5019 ;;		Nothing
  5020 ;; This function is called by:
  5021 ;;		_sendMessage
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025                           
  5026                           ;psect for function _strcat
  5027  09F8                     _strcat:	
  5028                           
  5029                           ;incstack = 0
  5030                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+11+pclath]
  5031  09F8  0021               	movlb	1	; select bank1
  5032  09F9  082E               	movf	(strcat@to+1)^(0+128),w
  5033  09FA  00B2               	movwf	(strcat@cp+1)^(0+128)
  5034  09FB  082D               	movf	strcat@to^(0+128),w
  5035  09FC  00B1               	movwf	strcat@cp^(0+128)
  5036  09FD                     l4221:	
  5037  09FD  0831               	movf	strcat@cp^(0+128),w
  5038  09FE  0084               	movwf	4
  5039  09FF  0832               	movf	(strcat@cp+1)^(0+128),w
  5040  0A00  0085               	movwf	5
  5041  0A01  0800               	movf	0,w
  5042  0A02  1903               	btfsc	3,2
  5043  0A03  2A11               	goto	l4225
  5044  0A04  3001               	movlw	1
  5045  0A05  07B1               	addwf	strcat@cp^(0+128),f
  5046  0A06  3000               	movlw	0
  5047  0A07  3DB2               	addwfc	(strcat@cp+1)^(0+128),f
  5048  0A08  29FD               	goto	l4221
  5049  0A09                     l4223:	
  5050  0A09  3001               	movlw	1
  5051  0A0A  07B1               	addwf	strcat@cp^(0+128),f
  5052  0A0B  3000               	movlw	0
  5053  0A0C  3DB2               	addwfc	(strcat@cp+1)^(0+128),f
  5054  0A0D  3001               	movlw	1
  5055  0A0E  07AF               	addwf	strcat@from^(0+128),f
  5056  0A0F  3000               	movlw	0
  5057  0A10  3DB0               	addwfc	(strcat@from+1)^(0+128),f
  5058  0A11                     l4225:	
  5059  0A11  082F               	movf	strcat@from^(0+128),w
  5060  0A12  0084               	movwf	4
  5061  0A13  0830               	movf	(strcat@from+1)^(0+128),w
  5062  0A14  0085               	movwf	5
  5063  0A15  0800               	movf	0,w	;code access
  5064  0A16  00FF               	movwf	127
  5065  0A17  0831               	movf	strcat@cp^(0+128),w
  5066  0A18  0084               	movwf	4
  5067  0A19  0832               	movf	(strcat@cp+1)^(0+128),w
  5068  0A1A  0085               	movwf	5
  5069  0A1B  087F               	movf	127,w
  5070  0A1C  0080               	movwf	0
  5071  0A1D  0800               	movf	0,w
  5072  0A1E  1903               	btfsc	3,2
  5073  0A1F  0008               	return
  5074  0A20  2A09               	goto	l4223
  5075  0A21                     __end_of_strcat:	
  5076                           ;	Return value of _strcat is never used
  5077                           
  5078                           
  5079                           	psect	text10
  5080  08A5                     __ptext10:	
  5081 ;; *************** function _sleepListren *****************
  5082 ;; Defined at:
  5083 ;;		line 74 in file "main.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  seconds         2    7[BANK0 ] unsigned int 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;		None
  5088 ;; Return value:  Size  Location     Type
  5089 ;;                  1    wreg      void 
  5090 ;; Registers used:
  5091 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  5092 ;; Tracked objects:
  5093 ;;		On entry : 0/0
  5094 ;;		On exit  : 0/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5097 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5101 ;;Total ram usage:        2 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; Hardware stack levels required when called:    9
  5104 ;; This function calls:
  5105 ;;		_sleepMs
  5106 ;; This function is called by:
  5107 ;;		_sendMessage
  5108 ;; This function uses a non-reentrant model
  5109 ;;
  5110                           
  5111                           
  5112                           ;psect for function _sleepListren
  5113  08A5                     _sleepListren:	
  5114  08A5                     l4201:	
  5115                           ;main.c: 77: while(seconds--){
  5116                           
  5117                           ;incstack = 0
  5118                           ; Regs used in _sleepListren: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  5119                           
  5120  08A5  3001               	movlw	1
  5121  08A6  0020               	movlb	0	; select bank0
  5122  08A7  02A7               	subwf	sleepListren@seconds,f
  5123  08A8  3000               	movlw	0
  5124  08A9  3BA8               	subwfb	sleepListren@seconds+1,f
  5125  08AA  0A27               	incf	sleepListren@seconds,w
  5126  08AB  1903               	btfsc	3,2
  5127  08AC  0A28               	incf	sleepListren@seconds+1,w
  5128  08AD  1903               	btfsc	3,2
  5129  08AE  0008               	return
  5130                           
  5131                           ;main.c: 80: sleepMs(100);
  5132  08AF  3064               	movlw	100
  5133  08B0  00F0               	movwf	sleepMs@milliseconds
  5134  08B1  3000               	movlw	0
  5135  08B2  00F1               	movwf	sleepMs@milliseconds+1
  5136  08B3  318A  2275  3188   	fcall	_sleepMs
  5137                           
  5138                           ;main.c: 83: sleepMs(900);
  5139  08B6  3084               	movlw	132
  5140  08B7  00F0               	movwf	sleepMs@milliseconds
  5141  08B8  3003               	movlw	3
  5142  08B9  00F1               	movwf	sleepMs@milliseconds+1
  5143  08BA  318A  2275  3188   	fcall	_sleepMs
  5144  08BD  28A5               	goto	l4201
  5145  08BE                     __end_of_sleepListren:	
  5146                           
  5147                           	psect	text11
  5148  0CB5                     __ptext11:	
  5149 ;; *************** function _nrf24l01SendPacket *****************
  5150 ;; Defined at:
  5151 ;;		line 131 in file "nrf24l01.c"
  5152 ;; Parameters:    Size  Location     Type
  5153 ;;  txPacket        2    8[BANK0 ] PTR struct .
  5154 ;;		 -> main@packet(33), loop@packet(33), 
  5155 ;; Auto vars:     Size  Location     Type
  5156 ;;  loopCount       2   11[BANK0 ] unsigned int 
  5157 ;; Return value:  Size  Location     Type
  5158 ;;                  1    wreg      void 
  5159 ;; Registers used:
  5160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
  5161 ;; Tracked objects:
  5162 ;;		On entry : 0/0
  5163 ;;		On exit  : 0/0
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5166 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5167 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5169 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5170 ;;Total ram usage:        5 bytes
  5171 ;; Hardware stack levels used:    1
  5172 ;; Hardware stack levels required when called:   12
  5173 ;; This function calls:
  5174 ;;		_exception
  5175 ;;		_nrf24l01Service
  5176 ;;		_strcpy
  5177 ;; This function is called by:
  5178 ;;		_sendMessage
  5179 ;; This function uses a non-reentrant model
  5180 ;;
  5181                           
  5182                           
  5183                           ;psect for function _nrf24l01SendPacket
  5184  0CB5                     _nrf24l01SendPacket:	
  5185                           
  5186                           ;nrf24l01.c: 134: unsigned int loopCount = 1000;
  5187                           
  5188                           ;incstack = 0
  5189                           ; Regs used in _nrf24l01SendPacket: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-bte
      +                          mp+11+pclath+cstack]
  5190  0CB5  30E8               	movlw	232
  5191  0CB6  0020               	movlb	0	; select bank0
  5192  0CB7  00AB               	movwf	nrf24l01SendPacket@loopCount
  5193  0CB8  3003               	movlw	3
  5194  0CB9  00AC               	movwf	nrf24l01SendPacket@loopCount+1
  5195  0CBA                     l4259:	
  5196                           ;nrf24l01.c: 135: while (status.TX != 0){
  5197                           
  5198  0CBA  0020               	movlb	0	; select bank0
  5199  0CBB  0862               	movf	_status,w	;volatile
  5200  0CBC  1903               	btfsc	3,2
  5201  0CBD  2CDA               	goto	l4261
  5202                           
  5203                           ;nrf24l01.c: 137: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  5204  0CBE  300B               	movlw	11
  5205  0CBF  0020               	movlb	0	; select bank0
  5206  0CC0  00AA               	movwf	??_nrf24l01SendPacket
  5207  0CC1  3062               	movlw	98
  5208  0CC2                     u5417:	
  5209  0CC2  0B89               	decfsz	9,f
  5210  0CC3  2CC2               	goto	u5417
  5211  0CC4  0BAA               	decfsz	??_nrf24l01SendPacket,f
  5212  0CC5  2CC2               	goto	u5417
  5213  0CC6  0000               	nop
  5214                           
  5215                           ;nrf24l01.c: 138: nrf24l01Service();
  5216  0CC7  3185  25E2  318C   	fcall	_nrf24l01Service
  5217                           
  5218                           ;nrf24l01.c: 140: if (!loopCount--){
  5219  0CCA  3001               	movlw	1
  5220  0CCB  0020               	movlb	0	; select bank0
  5221  0CCC  02AB               	subwf	nrf24l01SendPacket@loopCount,f
  5222  0CCD  3000               	movlw	0
  5223  0CCE  3BAC               	subwfb	nrf24l01SendPacket@loopCount+1,f
  5224  0CCF  0A2B               	incf	nrf24l01SendPacket@loopCount,w
  5225  0CD0  1D03               	skipz
  5226  0CD1  2CBA               	goto	l4259
  5227  0CD2  0A2C               	incf	nrf24l01SendPacket@loopCount+1,w
  5228  0CD3  1D03               	btfss	3,2
  5229  0CD4  2CBA               	goto	l4259
  5230                           
  5231                           ;nrf24l01.c: 141: exception(21);
  5232  0CD5  3015               	movlw	21
  5233  0CD6  3188  2050  318C   	fcall	_exception
  5234  0CD9  2CBA               	goto	l4259
  5235  0CDA                     l4261:	
  5236                           
  5237                           ;nrf24l01.c: 142: };nrf24l01.c: 143: };nrf24l01.c: 146: strcpy(TXPacket.Message, txPacke
      +                          t->Message);
  5238  0CDA  0828               	movf	nrf24l01SendPacket@txPacket,w
  5239  0CDB  3E01               	addlw	1
  5240  0CDC  00FE               	movwf	126
  5241  0CDD  3000               	movlw	0
  5242  0CDE  3D29               	addwfc	nrf24l01SendPacket@txPacket+1,w
  5243  0CDF  00FF               	movwf	127
  5244  0CE0  087E               	movf	126,w
  5245  0CE1  001E               	movwi fsr1++
  5246  0CE2  087F               	movf	127,w
  5247  0CE3  001E               	movwi fsr1++
  5248  0CE4  30A1               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5249  0CE5  001E               	movwi fsr1++
  5250  0CE6  3001               	movlw	1
  5251  0CE7  001E               	movwi fsr1++
  5252  0CE8  318A  224B  318C   	fcall	_strcpy
  5253                           
  5254                           ;nrf24l01.c: 147: TXPacket.packetData.byte = txPacket->packetData.byte;
  5255  0CEB  0020               	movlb	0	; select bank0
  5256  0CEC  0828               	movf	nrf24l01SendPacket@txPacket,w
  5257  0CED  0084               	movwf	4
  5258  0CEE  0829               	movf	nrf24l01SendPacket@txPacket+1,w
  5259  0CEF  0085               	movwf	5
  5260  0CF0  0800               	movf	0,w
  5261  0CF1  00FF               	movwf	127
  5262  0CF2  087F               	movf	127,w
  5263  0CF3  0023               	movlb	3	; select bank3
  5264  0CF4  00A0               	movwf	_TXPacket^(0+384)
  5265                           
  5266                           ;nrf24l01.c: 150: status.TX = 1;
  5267  0CF5  3001               	movlw	1
  5268  0CF6  00FF               	movwf	127
  5269  0CF7  087F               	movf	127,w
  5270  0CF8  0020               	movlb	0	; select bank0
  5271  0CF9  00E2               	movwf	_status	;volatile
  5272                           
  5273                           ;nrf24l01.c: 153: nrf24l01Service();
  5274  0CFA  3185  25E2         	fcall	_nrf24l01Service
  5275  0CFC  0008               	return
  5276  0CFD                     __end_of_nrf24l01SendPacket:	
  5277                           
  5278                           	psect	text12
  5279  05E2                     __ptext12:	
  5280 ;; *************** function _nrf24l01Service *****************
  5281 ;; Defined at:
  5282 ;;		line 245 in file "nrf24l01.c"
  5283 ;; Parameters:    Size  Location     Type
  5284 ;;		None
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;  width           1  [STACK] unsigned char 
  5287 ;;  i               1  [STACK] unsigned char 
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  1    wreg      void 
  5290 ;; Registers used:
  5291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 1D/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5301 ;;Total ram usage:        0 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:   11
  5304 ;; This function calls:
  5305 ;;		_memset
  5306 ;;		_nrf24l01SPIEnd
  5307 ;;		_nrf24l01SPISend
  5308 ;;		_nrf24l01SPIStart
  5309 ;;		_nrf24l01Send
  5310 ;;		_nrf24l01SendTXBuffer
  5311 ;;		_nrf24l01SetRXMode
  5312 ;;		_nrf24l01SetTXPipe
  5313 ;;		_strcmp
  5314 ;;		_strcpy
  5315 ;; This function is called by:
  5316 ;;		_nrf24l01SendPacket
  5317 ;;		_nrf24l01ISR
  5318 ;; This function uses a reentrant model
  5319 ;;
  5320                           
  5321                           
  5322                           ;psect for function _nrf24l01Service
  5323  05E2                     _nrf24l01Service:	
  5324                           
  5325                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5326  05E2  3142               	addfsr 1,2
  5327                           
  5328                           ;nrf24l01.c: 247: unsigned char i;;nrf24l01.c: 249: if (status.TX == 1){
  5329                           
  5330                           ;incstack = 0
  5331 ;; hardware stack exceeded
  5332                           ; Regs used in _nrf24l01Service: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+
      +                          11+pclath]
  5333  05E3  0020               	movlb	0	; select bank0
  5334  05E4  0362               	decf	_status,w	;volatile
  5335  05E5  1D03               	btfss	3,2
  5336  05E6  2DED               	goto	l4465
  5337                           
  5338                           ;nrf24l01.c: 252: status.TX = 2;
  5339  05E7  3002               	movlw	2
  5340  05E8  00E2               	movwf	_status	;volatile
  5341                           
  5342                           ;nrf24l01.c: 253: nrf24l01SendTXBuffer(&TXPacket);
  5343  05E9  30A0               	movlw	(low (_TXPacket| (0+256)))& (0+255)
  5344  05EA  318C  246E  3185   	fcall	_nrf24l01SendTXBuffer
  5345  05ED                     l4465:	
  5346                           
  5347                           ;nrf24l01.c: 254: };nrf24l01.c: 257: if (status.TX == 3){
  5348  05ED  3003               	movlw	3
  5349  05EE  0662               	xorwf	_status,w	;volatile
  5350  05EF  1D03               	btfss	3,2
  5351  05F0  2DF7               	goto	l4471
  5352                           
  5353                           ;nrf24l01.c: 260: if (!status.retryCount--){
  5354  05F1  03E6               	decf	_status+4,f	;volatile
  5355  05F2  0A66               	incf	_status+4,w	;volatile
  5356  05F3  1D03               	btfss	3,2
  5357  05F4  2DF7               	goto	l4471
  5358                           
  5359                           ;nrf24l01.c: 261: status.TX = 1;
  5360  05F5  3001               	movlw	1
  5361  05F6  00E2               	movwf	_status	;volatile
  5362  05F7                     l4471:	
  5363                           
  5364                           ;nrf24l01.c: 262: };nrf24l01.c: 263: };nrf24l01.c: 266: if (status.RX == 1){
  5365  05F7  0363               	decf	_status+1,w	;volatile
  5366  05F8  1D03               	btfss	3,2
  5367  05F9  2E6A               	goto	l4511
  5368                           
  5369                           ;nrf24l01.c: 269: memset(RXPacket.Message, 0 ,sizeof(RXPacket.Message));
  5370  05FA  3020               	movlw	32
  5371  05FB  001E               	movwi fsr1++
  5372  05FC  3000               	movlw	0
  5373  05FD  001E               	movwi fsr1++
  5374  05FE  3000               	movlw	0
  5375  05FF  001E               	movwi fsr1++
  5376  0600  001E               	movwi fsr1++
  5377  0601  304E               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5378  0602  001E               	movwi fsr1++
  5379  0603  3001               	movlw	1
  5380  0604  001E               	movwi fsr1++
  5381  0605  318A  22CE  3185   	fcall	_memset
  5382                           
  5383                           ;nrf24l01.c: 270: RXPacket.packetData.byte = 0x00;
  5384  0608  0022               	movlb	2	; select bank2
  5385  0609  01CD               	clrf	_RXPacket^(0+256)
  5386                           
  5387                           ;nrf24l01.c: 273: unsigned char width = nrf24l01Send((unsigned) 0b01100000, 0);
  5388  060A  3000               	movlw	0
  5389  060B  001E               	movwi fsr1++
  5390  060C  3060               	movlw	96
  5391  060D  3188  207A  3185   	fcall	_nrf24l01Send
  5392                           
  5393                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5394  0610  3FFE               	movwi [-2]fsr1
  5395                           
  5396                           ;nrf24l01.c: 276: PORTAbits.RA0 = 0;
  5397  0611  0020               	movlb	0	; select bank0
  5398  0612  100C               	bcf	12,0	;volatile
  5399                           
  5400                           ;nrf24l01.c: 279: nrf24l01SPIStart();
  5401  0613  3188  203B  3185   	fcall	_nrf24l01SPIStart
  5402                           
  5403                           ;nrf24l01.c: 282: nrf24l01SPISend((unsigned) 0b01100001);
  5404  0616  3061               	movlw	97
  5405  0617  3188  206B  3185   	fcall	_nrf24l01SPISend
  5406                           
  5407                           ;nrf24l01.c: 285: RXPacket.packetData.byte = nrf24l01SPISend(0);
  5408  061A  3000               	movlw	0
  5409  061B  3188  206B  3185   	fcall	_nrf24l01SPISend
  5410  061E  0022               	movlb	2	; select bank2
  5411  061F  00CD               	movwf	_RXPacket^(0+256)
  5412                           
  5413                           ;nrf24l01.c: 286: width--;
  5414                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5415  0620  3F7E               	moviw [-2]fsr1
  5416  0621  00F4               	movwf	116
  5417  0622  3001               	movlw	1
  5418  0623  0274               	subwf	116,w
  5419  0624  3FFE               	movwi [-2]fsr1
  5420                           
  5421                           ;nrf24l01.c: 288: for (i = 0; i < width; i++) {
  5422                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5423  0625  3000               	movlw	0
  5424  0626  3FFF               	movwi [-1]fsr1
  5425  0627                     l4495:	
  5426                           
  5427                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5428  0627  3F7F               	moviw [-1]fsr1
  5429  0628  00FF               	movwf	127
  5430                           
  5431                           ;stkvar	nrf24l01Service@width @ sp[(-2)+0]
  5432  0629  3F7E               	moviw [-2]fsr1
  5433  062A  027F               	subwf	127,w
  5434  062B  1803               	btfsc	3,0
  5435  062C  2E3C               	goto	l4497
  5436                           
  5437                           ;nrf24l01.c: 290: RXPacket.Message[i] = nrf24l01SPISend(0);
  5438                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5439  062D  3F7F               	moviw [-1]fsr1
  5440  062E  3E4E               	addlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5441  062F  0084               	movwf	4
  5442  0630  3001               	movlw	1	; select bank2/3
  5443  0631  3001               	movlw	1	; select bank2/3
  5444  0632  0085               	movwf	5
  5445  0633  3000               	movlw	0
  5446  0634  3188  206B  3185   	fcall	_nrf24l01SPISend
  5447  0637  0080               	movwf	0
  5448                           
  5449                           ;stkvar	nrf24l01Service@i @ sp[(-2)+1]
  5450  0638  3F7F               	moviw [-1]fsr1
  5451  0639  3E01               	addlw	1
  5452  063A  3FFF               	movwi [-1]fsr1
  5453  063B  2E27               	goto	l4495
  5454  063C                     l4497:	
  5455                           
  5456                           ;nrf24l01.c: 291: };nrf24l01.c: 294: nrf24l01SPIEnd();
  5457  063C  3188  2032  3185   	fcall	_nrf24l01SPIEnd
  5458                           
  5459                           ;nrf24l01.c: 297: PORTAbits.RA0 = 1;
  5460  063F  0020               	movlb	0	; select bank0
  5461  0640  140C               	bsf	12,0	;volatile
  5462                           
  5463                           ;nrf24l01.c: 300: RXPacket.packetData.Pipe = status.statusRegister.RX_P_NO;
  5464  0641  0C64               	rrf	_status+2,w	;volatile
  5465  0642  3907               	andlw	7
  5466  0643  00FF               	movwf	127
  5467  0644  0EFF               	swapf	127,f
  5468  0645  0022               	movlb	2	; select bank2
  5469  0646  084D               	movf	_RXPacket^(0+256),w
  5470  0647  067F               	xorwf	127,w
  5471  0648  398F               	andlw	-113
  5472  0649  067F               	xorwf	127,w
  5473  064A  00CD               	movwf	_RXPacket^(0+256)
  5474                           
  5475                           ;nrf24l01.c: 303: RXPacket.packetData.RPD = nrf24l01Send((unsigned) 0b00000000 | (unsign
      +                          ed) 0x09, 0);
  5476  064B  3000               	movlw	0
  5477  064C  001E               	movwi fsr1++
  5478  064D  3009               	movlw	9
  5479  064E  3188  207A  3185   	fcall	_nrf24l01Send
  5480  0651  00FF               	movwf	127
  5481  0652  0022               	movlb	2	; select bank2
  5482  0653  084D               	movf	_RXPacket^(0+256),w
  5483  0654  067F               	xorwf	127,w
  5484  0655  39FE               	andlw	-2
  5485  0656  067F               	xorwf	127,w
  5486  0657  00CD               	movwf	_RXPacket^(0+256)
  5487                           
  5488                           ;nrf24l01.c: 306: strcpy(userRXPacket.Message, RXPacket.Message);
  5489  0658  304E               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5490  0659  001E               	movwi fsr1++
  5491  065A  3001               	movlw	1
  5492  065B  001E               	movwi fsr1++
  5493  065C  3021               	movlw	(low ((_userRXPacket| (0+512)+1)))& (0+255)
  5494  065D  001E               	movwi fsr1++
  5495  065E  3002               	movlw	2
  5496  065F  001E               	movwi fsr1++
  5497  0660  318A  224B  3185   	fcall	_strcpy
  5498                           
  5499                           ;nrf24l01.c: 307: userRXPacket.packetData.byte = RXPacket.packetData.byte;
  5500  0663  0022               	movlb	2	; select bank2
  5501  0664  084D               	movf	_RXPacket^(0+256),w
  5502  0665  0024               	movlb	4	; select bank4
  5503  0666  00A0               	movwf	_userRXPacket^(0+512)
  5504                           
  5505                           ;nrf24l01.c: 309: status.RX = 2;
  5506  0667  3002               	movlw	2
  5507  0668  0020               	movlb	0	; select bank0
  5508  0669  00E3               	movwf	_status+1	;volatile
  5509  066A                     l4511:	
  5510                           
  5511                           ;nrf24l01.c: 310: };nrf24l01.c: 313: if (status.RX == 2){
  5512  066A  3002               	movlw	2
  5513  066B  0663               	xorwf	_status+1,w	;volatile
  5514  066C  1D03               	btfss	3,2
  5515  066D  2E87               	goto	l4523
  5516                           
  5517                           ;nrf24l01.c: 316: if (RXPacket.packetData.IsACK){
  5518  066E  0022               	movlb	2	; select bank2
  5519  066F  1DCD               	btfss	_RXPacket^(0+256),3
  5520  0670  2E87               	goto	l4523
  5521                           
  5522                           ;nrf24l01.c: 318: if (status.TX == 3){
  5523  0671  3003               	movlw	3
  5524  0672  0020               	movlb	0	; select bank0
  5525  0673  0662               	xorwf	_status,w	;volatile
  5526  0674  1D03               	btfss	3,2
  5527  0675  2E87               	goto	l4523
  5528                           
  5529                           ;nrf24l01.c: 320: if (strcmp(RXPacket.Message, TXPacket.Message) == 0){
  5530  0676  30A1               	movlw	(low ((_TXPacket| (0+256)+1)))& (0+255)
  5531  0677  001E               	movwi fsr1++
  5532  0678  304E               	movlw	(low ((_RXPacket| (0+256)+1)))& (0+255)
  5533  0679  3189  21CF  3185   	fcall	_strcmp
  5534  067C  0874               	movf	116,w
  5535  067D  0475               	iorwf	117,w
  5536  067E  1D03               	btfss	3,2
  5537  067F  2E87               	goto	l4523
  5538                           
  5539                           ;nrf24l01.c: 322: status.TX = 0;
  5540  0680  0020               	movlb	0	; select bank0
  5541  0681  01E2               	clrf	_status	;volatile
  5542                           
  5543                           ;nrf24l01.c: 323: status.RX = 0;
  5544  0682  01E3               	clrf	_status+1	;volatile
  5545                           
  5546                           ;nrf24l01.c: 325: nrf24l01SetRXMode(0);
  5547  0683  3000               	movlw	0
  5548  0684  318B  2334  3185   	fcall	_nrf24l01SetRXMode
  5549  0687                     l4523:	
  5550                           
  5551                           ;nrf24l01.c: 327: };nrf24l01.c: 328: };nrf24l01.c: 329: };nrf24l01.c: 330: };nrf24l01.c:
      +                           333: if (status.RX == 2){
  5552  0687  3002               	movlw	2
  5553  0688  0020               	movlb	0	; select bank0
  5554  0689  0663               	xorwf	_status+1,w	;volatile
  5555  068A  1D03               	btfss	3,2
  5556  068B  2E99               	goto	l319
  5557                           
  5558                           ;nrf24l01.c: 334: if (RXPacket.packetData.ACKRequest){
  5559  068C  0022               	movlb	2	; select bank2
  5560  068D  1D4D               	btfss	_RXPacket^(0+256),2
  5561  068E  2E99               	goto	l319
  5562                           
  5563                           ;nrf24l01.c: 337: RXPacket.packetData.ACKRequest = 0;
  5564  068F  114D               	bcf	_RXPacket^(0+256),2
  5565                           
  5566                           ;nrf24l01.c: 338: RXPacket.packetData.IsACK = 1;
  5567  0690  15CD               	bsf	_RXPacket^(0+256),3
  5568                           
  5569                           ;nrf24l01.c: 341: nrf24l01SetTXPipe(RXPacket.packetData.Pipe);
  5570  0691  0E4D               	swapf	_RXPacket^(0+256),w
  5571  0692  3907               	andlw	7
  5572  0693  318B  23AB  3185   	fcall	_nrf24l01SetTXPipe
  5573                           
  5574                           ;nrf24l01.c: 344: nrf24l01SendTXBuffer(&RXPacket);
  5575  0696  304D               	movlw	(low (_RXPacket| (0+256)))& (0+255)
  5576  0697  318C  246E         	fcall	_nrf24l01SendTXBuffer
  5577  0699                     l319:	
  5578                           
  5579                           ; _nrf24l01Service: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  5580  0699  317E               	addfsr 1,-2
  5581  069A  0008               	return
  5582  069B                     __end_of_nrf24l01Service:	
  5583                           
  5584                           	psect	text13
  5585  0A4B                     __ptext13:	
  5586 ;; *************** function _strcpy *****************
  5587 ;; Defined at:
  5588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcpy.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;  to              2  [STACK] PTR unsigned char 
  5591 ;;		 -> TXPacket(33), userRXPacket(33), main@packet(33), loop@packet(33), 
  5592 ;;		 -> romDataMap(28), 
  5593 ;;  from            2  [STACK] PTR const unsigned char 
  5594 ;;		 -> romDataMap.name(16), packet.Message(32), packet.Message(32), RXPacket.Message(32), 
  5595 ;;		 -> RXPacket(33), main@packet(33), STR_5(4), loop@packet(33), 
  5596 ;;		 -> romDataMap(28), 
  5597 ;; Auto vars:     Size  Location     Type
  5598 ;;  cp              2  [STACK] PTR unsigned char 
  5599 ;;		 -> TXPacket(33), userRXPacket(33), main@packet(33), loop@packet(33), 
  5600 ;;		 -> romDataMap(28), 
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  2  [STACK] PTR unsigned char 
  5603 ;; Registers used:
  5604 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  5605 ;; Tracked objects:
  5606 ;;		On entry : 1C/1
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5614 ;;Total ram usage:        0 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    7
  5617 ;; This function calls:
  5618 ;;		Nothing
  5619 ;; This function is called by:
  5620 ;;		_sendMessage
  5621 ;;		_main
  5622 ;;		_nrf24l01SendPacket
  5623 ;;		_nrf24l01Service
  5624 ;; This function uses a reentrant model
  5625 ;;
  5626                           
  5627                           
  5628                           ;psect for function _strcpy
  5629  0A4B                     _strcpy:	
  5630                           
  5631                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5632  0A4B  3142               	addfsr 1,2
  5633                           
  5634                           ;stkvar	strcpy@to @ sp[(-2)+-2]
  5635                           
  5636                           ;incstack = 0
  5637 ;; hardware stack exceeded
  5638                           ; Regs used in _strcpy: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  5639  0A4C  0806               	movf	6,w
  5640  0A4D  0084               	movwf	4
  5641  0A4E  0807               	movf	7,w
  5642  0A4F  0085               	movwf	5
  5643  0A50  313C               	addfsr 0,-4
  5644                           
  5645                           ;stkvar	strcpy@cp @ sp[(-2)+0]
  5646  0A51  3F00               	moviw [0]fsr0
  5647  0A52  3FFE               	movwi [-2]fsr1
  5648  0A53  3F01               	moviw [1]fsr0
  5649  0A54  3FFF               	movwi [-1]fsr1
  5650  0A55                     l4215:	
  5651                           
  5652                           ;stkvar	strcpy@from @ sp[(-2)+-4]
  5653  0A55  3F7A               	moviw [-6]fsr1
  5654  0A56  0084               	movwf	4
  5655  0A57  3F7B               	moviw [-5]fsr1
  5656  0A58  0085               	movwf	5
  5657  0A59  0800               	movf	0,w	;code access
  5658  0A5A  00FF               	movwf	127
  5659                           
  5660                           ;stkvar	strcpy@cp @ sp[(-2)+0]
  5661  0A5B  3F7E               	moviw [-2]fsr1
  5662  0A5C  0084               	movwf	4
  5663  0A5D  3F7F               	moviw [-1]fsr1
  5664  0A5E  0085               	movwf	5
  5665  0A5F  087F               	movf	127,w
  5666  0A60  0080               	movwf	0
  5667  0A61  0800               	movf	0,w
  5668  0A62  1903               	btfsc	3,2
  5669  0A63  2A73               	goto	l987
  5670                           
  5671                           ;stkvar	strcpy@cp @ sp[(-2)+0]
  5672  0A64  3F7E               	moviw [-2]fsr1
  5673  0A65  3E01               	addlw	1
  5674  0A66  3FFE               	movwi [-2]fsr1
  5675  0A67  01F4               	clrf	116
  5676  0A68  3F7F               	moviw [-1]fsr1
  5677  0A69  3D74               	addwfc	116,w
  5678  0A6A  3FFF               	movwi [-1]fsr1
  5679                           
  5680                           ;stkvar	strcpy@from @ sp[(-2)+-4]
  5681  0A6B  3F7A               	moviw [-6]fsr1
  5682  0A6C  3E01               	addlw	1
  5683  0A6D  3FFA               	movwi [-6]fsr1
  5684  0A6E  01F4               	clrf	116
  5685  0A6F  3F7B               	moviw [-5]fsr1
  5686  0A70  3D74               	addwfc	116,w
  5687  0A71  3FFB               	movwi [-5]fsr1
  5688  0A72  2A55               	goto	l4215
  5689  0A73                     l987:	
  5690                           
  5691                           ; _strcpy: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsiz
      +                          e = 4, vargsize = 0
  5692  0A73  317A               	addfsr 1,-6
  5693  0A74  0008               	return
  5694  0A75                     __end_of_strcpy:	
  5695                           
  5696                           	psect	text14
  5697  09CF                     __ptext14:	
  5698 ;; *************** function _strcmp *****************
  5699 ;; Defined at:
  5700 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strcmp.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;  s1              1    wreg     PTR const unsigned char 
  5703 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5704 ;;  s2              1  [STACK] PTR const unsigned char 
  5705 ;;		 -> TXPacket.Message(32), TXPacket(33), 
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;  s1              1  [STACK] PTR const unsigned char 
  5708 ;;		 -> RXPacket.Message(32), RXPacket(33), 
  5709 ;;  r               1  [STACK] char 
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  2  [STACK] int 
  5712 ;; Registers used:
  5713 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  5714 ;; Tracked objects:
  5715 ;;		On entry : 1F/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5723 ;;Total ram usage:        0 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; Hardware stack levels required when called:    7
  5726 ;; This function calls:
  5727 ;;		Nothing
  5728 ;; This function is called by:
  5729 ;;		_nrf24l01Service
  5730 ;; This function uses a reentrant model
  5731 ;;
  5732                           
  5733                           
  5734                           ;psect for function _strcmp
  5735  09CF                     _strcmp:	
  5736                           
  5737                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5738  09CF  3142               	addfsr 1,2
  5739                           
  5740                           ;incstack = 0
  5741 ;; hardware stack exceeded
  5742                           ; Regs used in _strcmp: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  5743                           ;strcmp@s1 stored from wreg
  5744                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5745  09D0  3FFE               	movwi [-2]fsr1
  5746  09D1  29DF               	goto	l4327
  5747  09D2                     l4329:	
  5748                           
  5749                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5750  09D2  3F7E               	moviw [-2]fsr1
  5751  09D3  0084               	movwf	4
  5752  09D4  3001               	movlw	1	; select bank2/3
  5753  09D5  0085               	movwf	5
  5754  09D6  0800               	movf	0,w
  5755  09D7  1903               	btfsc	3,2
  5756  09D8  29F1               	goto	l4331
  5757                           
  5758                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5759  09D9  3F7E               	moviw [-2]fsr1
  5760  09DA  3E01               	addlw	1
  5761  09DB  3FFE               	movwi [-2]fsr1
  5762                           
  5763                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5764  09DC  3F7D               	moviw [-3]fsr1
  5765  09DD  3E01               	addlw	1
  5766  09DE  3FFD               	movwi [-3]fsr1
  5767  09DF                     l4327:	
  5768                           
  5769                           ;stkvar	strcmp@s2 @ sp[(-2)+-1]
  5770  09DF  3F7D               	moviw [-3]fsr1
  5771  09E0  0084               	movwf	4
  5772  09E1  3001               	movlw	1	; select bank2/3
  5773  09E2  0085               	movwf	5
  5774  09E3  0800               	movf	0,w
  5775  09E4  00FF               	movwf	127
  5776                           
  5777                           ;stkvar	strcmp@s1 @ sp[(-2)+0]
  5778  09E5  3F7E               	moviw [-2]fsr1
  5779  09E6  0084               	movwf	4
  5780  09E7  3001               	movlw	1	; select bank2/3
  5781  09E8  0085               	movwf	5
  5782  09E9  0800               	movf	0,w
  5783  09EA  00F4               	movwf	116
  5784  09EB  087F               	movf	127,w
  5785  09EC  0274               	subwf	116,w
  5786                           
  5787                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5788  09ED  3FFF               	movwi [-1]fsr1
  5789  09EE  0889               	movf	9,f
  5790  09EF  1903               	btfsc	3,2
  5791  09F0  29D2               	goto	l4329
  5792  09F1                     l4331:	
  5793                           
  5794                           ;stkvar	strcmp@r @ sp[(-2)+1]
  5795  09F1  3F7F               	moviw [-1]fsr1
  5796  09F2  00F4               	movwf	116
  5797  09F3  01F5               	clrf	117
  5798  09F4  1BF4               	btfsc	116,7
  5799  09F5  03F5               	decf	117,f
  5800                           
  5801                           ; _strcmp: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  5802  09F6  317D               	addfsr 1,-3
  5803  09F7  0008               	return
  5804  09F8                     __end_of_strcmp:	
  5805                           
  5806                           	psect	text15
  5807  0BAB                     __ptext15:	
  5808 ;; *************** function _nrf24l01SetTXPipe *****************
  5809 ;; Defined at:
  5810 ;;		line 96 in file "nrf24l01.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;  pipe            1    wreg     unsigned char 
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;  pipe            1  [STACK] unsigned char 
  5815 ;; Return value:  Size  Location     Type
  5816 ;;                  1    wreg      void 
  5817 ;; Registers used:
  5818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+10, btemp+11, pclath
  5819 ;; Tracked objects:
  5820 ;;		On entry : 1C/1
  5821 ;;		On exit  : 1F/1
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5828 ;;Total ram usage:        0 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    8
  5831 ;; This function calls:
  5832 ;;		___bmul
  5833 ;;		_nrf24l01SPIEnd
  5834 ;;		_nrf24l01SPISend
  5835 ;;		_nrf24l01SPIStart
  5836 ;; This function is called by:
  5837 ;;		_main
  5838 ;;		_nrf24l01Service
  5839 ;;		_nrf24l01InitRegisters
  5840 ;; This function uses a reentrant model
  5841 ;;
  5842                           
  5843                           
  5844                           ;psect for function _nrf24l01SetTXPipe
  5845  0BAB                     _nrf24l01SetTXPipe:	
  5846                           
  5847                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5848  0BAB  3141               	addfsr 1,1
  5849                           
  5850                           ;incstack = 0
  5851 ;; hardware stack exceeded
  5852                           ; Regs used in _nrf24l01SetTXPipe: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+10+bte
      +                          mp+11+pclath]
  5853                           ;nrf24l01SetTXPipe@pipe stored from wreg
  5854                           ;stkvar	nrf24l01SetTXPipe@pipe @ sp[(-1)+0]
  5855  0BAC  3FFF               	movwi [-1]fsr1
  5856                           
  5857                           ;nrf24l01.c: 99: nrf24l01SPIStart();
  5858  0BAD  3188  203B  318B   	fcall	_nrf24l01SPIStart
  5859                           
  5860                           ;nrf24l01.c: 100: nrf24l01SPISend((unsigned) 0b00100000 | (unsigned) 0x10);
  5861  0BB0  3030               	movlw	48
  5862  0BB1  3188  206B  318B   	fcall	_nrf24l01SPISend
  5863                           
  5864                           ;nrf24l01.c: 101: nrf24l01SPISend(n_ADDRESS_P0[4] + (unsigned) (pipe * n_ADDRESS_MUL));
  5865  0BB4  3038               	movlw	low ((_n_ADDRESS_P0+4)| (0+32768))
  5866  0BB5  0084               	movwf	4
  5867  0BB6  3090               	movlw	high ((_n_ADDRESS_P0+4)| (0+32768))
  5868  0BB7  0085               	movwf	5
  5869  0BB8  0800               	movf	0,w	;code access
  5870  0BB9  00FE               	movwf	126
  5871  0BBA  3021               	movlw	33
  5872  0BBB  001E               	movwi fsr1++
  5873                           
  5874                           ;stkvar	nrf24l01SetTXPipe@pipe @ sp[(-2)+0]
  5875  0BBC  3F7E               	moviw [-2]fsr1
  5876  0BBD  3188  208D  318B   	fcall	___bmul
  5877  0BC0  077E               	addwf	126,w
  5878  0BC1  3188  206B  318B   	fcall	_nrf24l01SPISend
  5879                           
  5880                           ;nrf24l01.c: 102: nrf24l01SPISend(n_ADDRESS_P0[3]);
  5881  0BC4  3037               	movlw	low ((_n_ADDRESS_P0+3)| (0+32768))
  5882  0BC5  0084               	movwf	4
  5883  0BC6  3090               	movlw	high ((_n_ADDRESS_P0+3)| (0+32768))
  5884  0BC7  0085               	movwf	5
  5885  0BC8  0800               	movf	0,w	;code access
  5886  0BC9  3188  206B  318B   	fcall	_nrf24l01SPISend
  5887                           
  5888                           ;nrf24l01.c: 103: nrf24l01SPISend(n_ADDRESS_P0[2]);
  5889  0BCC  3036               	movlw	low ((_n_ADDRESS_P0+2)| (0+32768))
  5890  0BCD  0084               	movwf	4
  5891  0BCE  3090               	movlw	high ((_n_ADDRESS_P0+2)| (0+32768))
  5892  0BCF  0085               	movwf	5
  5893  0BD0  0800               	movf	0,w	;code access
  5894  0BD1  3188  206B  318B   	fcall	_nrf24l01SPISend
  5895                           
  5896                           ;nrf24l01.c: 104: nrf24l01SPISend(n_ADDRESS_P0[1]);
  5897  0BD4  3035               	movlw	low ((_n_ADDRESS_P0+1)| (0+32768))
  5898  0BD5  0084               	movwf	4
  5899  0BD6  3090               	movlw	high ((_n_ADDRESS_P0+1)| (0+32768))
  5900  0BD7  0085               	movwf	5
  5901  0BD8  0800               	movf	0,w	;code access
  5902  0BD9  3188  206B  318B   	fcall	_nrf24l01SPISend
  5903                           
  5904                           ;nrf24l01.c: 105: nrf24l01SPISend(n_ADDRESS_P0[0]);
  5905  0BDC  3034               	movlw	low (_n_ADDRESS_P0| (0+32768))
  5906  0BDD  0084               	movwf	4
  5907  0BDE  3090               	movlw	high (_n_ADDRESS_P0| (0+32768))
  5908  0BDF  0085               	movwf	5
  5909  0BE0  0800               	movf	0,w	;code access
  5910  0BE1  3188  206B  318B   	fcall	_nrf24l01SPISend
  5911                           
  5912                           ;nrf24l01.c: 106: nrf24l01SPIEnd();
  5913  0BE4  3188  2032         	fcall	_nrf24l01SPIEnd
  5914                           
  5915                           ; _nrf24l01SetTXPipe: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  5916  0BE6  317F               	addfsr 1,-1
  5917  0BE7  0008               	return
  5918  0BE8                     __end_of_nrf24l01SetTXPipe:	
  5919                           
  5920                           	psect	text16
  5921  088D                     __ptext16:	
  5922 ;; *************** function ___bmul *****************
  5923 ;; Defined at:
  5924 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;  multiplier      1    wreg     unsigned char 
  5927 ;;  multiplicand    1  [STACK] unsigned char 
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;  multiplier      1  [STACK] unsigned char 
  5930 ;;  product         1  [STACK] unsigned char 
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  1    wreg      unsigned char 
  5933 ;; Registers used:
  5934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11
  5935 ;; Tracked objects:
  5936 ;;		On entry : 1B/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5944 ;;Total ram usage:        0 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; Hardware stack levels required when called:    7
  5947 ;; This function calls:
  5948 ;;		Nothing
  5949 ;; This function is called by:
  5950 ;;		_nrf24l01SetTXPipe
  5951 ;;		_nrf24l01InitRegisters
  5952 ;; This function uses a reentrant model
  5953 ;;
  5954                           
  5955                           
  5956                           ;psect for function ___bmul
  5957  088D                     ___bmul:	
  5958                           
  5959                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5960  088D  3142               	addfsr 1,2
  5961                           
  5962                           ;incstack = 0
  5963 ;; hardware stack exceeded
  5964                           ; Regs used in ___bmul: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11]
  5965                           ;___bmul@multiplier stored from wreg
  5966                           ;stkvar	___bmul@multiplier @ sp[(-2)+0]
  5967  088E  3FFE               	movwi [-2]fsr1
  5968                           
  5969                           ;stkvar	___bmul@product @ sp[(-2)+1]
  5970  088F  3000               	movlw	0
  5971  0890  3FFF               	movwi [-1]fsr1
  5972  0891                     l562:	
  5973                           
  5974                           ;stkvar	___bmul@multiplier @ sp[(-2)+0]
  5975  0891  3F7E               	moviw [-2]fsr1
  5976  0892  1C09               	btfss	9,0
  5977  0893  2899               	goto	l4041
  5978                           
  5979                           ;stkvar	___bmul@multiplicand @ sp[(-2)+-1]
  5980  0894  3F7D               	moviw [-3]fsr1
  5981  0895  00FF               	movwf	127
  5982                           
  5983                           ;stkvar	___bmul@product @ sp[(-2)+1]
  5984  0896  3F7F               	moviw [-1]fsr1
  5985  0897  077F               	addwf	127,w
  5986  0898  3FFF               	movwi [-1]fsr1
  5987  0899                     l4041:	
  5988                           
  5989                           ;stkvar	___bmul@multiplicand @ sp[(-2)+-1]
  5990  0899  3F7D               	moviw [-3]fsr1
  5991  089A  3589               	lslf	9,f
  5992  089B  3FFD               	movwi [-3]fsr1
  5993                           
  5994                           ;stkvar	___bmul@multiplier @ sp[(-2)+0]
  5995  089C  3F7E               	moviw [-2]fsr1
  5996  089D  3689               	lsrf	9,f
  5997  089E  3FFE               	movwi [-2]fsr1
  5998                           
  5999                           ;stkvar	___bmul@multiplier @ sp[(-2)+0]
  6000  089F  3F7E               	moviw [-2]fsr1
  6001  08A0  1D03               	btfss	3,2
  6002  08A1  2891               	goto	l562
  6003                           
  6004                           ;stkvar	___bmul@product @ sp[(-2)+1]
  6005  08A2  3F7F               	moviw [-1]fsr1
  6006                           
  6007                           ; ___bmul: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsiz
      +                          e = 1, vargsize = 0
  6008  08A3  317D               	addfsr 1,-3
  6009  08A4  0008               	return
  6010  08A5                     __end_of___bmul:	
  6011                           
  6012                           	psect	text17
  6013  0C6E                     __ptext17:	
  6014 ;; *************** function _nrf24l01SendTXBuffer *****************
  6015 ;; Defined at:
  6016 ;;		line 208 in file "nrf24l01.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;  packet          1    wreg     PTR struct .
  6019 ;;		 -> RXPacket(33), TXPacket(33), 
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  packet          1  [STACK] PTR struct .
  6022 ;;		 -> RXPacket(33), TXPacket(33), 
  6023 ;;  i               1  [STACK] unsigned char 
  6024 ;;  width           1  [STACK] unsigned char 
  6025 ;; Return value:  Size  Location     Type
  6026 ;;                  1    wreg      void 
  6027 ;; Registers used:
  6028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11, pclath
  6029 ;; Tracked objects:
  6030 ;;		On entry : 1E/0
  6031 ;;		On exit  : 1F/0
  6032 ;;		Unchanged: 0/0
  6033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6038 ;;Total ram usage:        0 bytes
  6039 ;; Hardware stack levels used:    1
  6040 ;; Hardware stack levels required when called:   10
  6041 ;; This function calls:
  6042 ;;		_nrf24l01SPIEnd
  6043 ;;		_nrf24l01SPISend
  6044 ;;		_nrf24l01SPIStart
  6045 ;;		_nrf24l01SetRXMode
  6046 ;;		_strlen
  6047 ;; This function is called by:
  6048 ;;		_nrf24l01Service
  6049 ;; This function uses a reentrant model
  6050 ;;
  6051                           
  6052                           
  6053                           ;psect for function _nrf24l01SendTXBuffer
  6054  0C6E                     _nrf24l01SendTXBuffer:	
  6055                           
  6056                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6057  0C6E  3143               	addfsr 1,3
  6058                           
  6059                           ;incstack = 0
  6060 ;; hardware stack exceeded
  6061                           ; Regs used in _nrf24l01SendTXBuffer: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11+
      +                          pclath]
  6062                           ;nrf24l01SendTXBuffer@packet stored from wreg
  6063                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  6064  0C6F  3FFD               	movwi [-3]fsr1
  6065                           
  6066                           ;nrf24l01.c: 211: lastTXPacket = packet;
  6067                           ;stkvar	nrf24l01SendTXBuffer@packet @ sp[(-3)+0]
  6068  0C70  3F7D               	moviw [-3]fsr1
  6069  0C71  0020               	movlb	0	; select bank0
  6070  0C72  00E8               	movwf	_lastTXPacket
  6071                           
  6072                           ;nrf24l01.c: 213: unsigned char i;;nrf24l01.c: 216: nrf24l01SetRXMode(0);
  6073  0C73  3000               	movlw	0
  6074  0C74  318B  2334  318C   	fcall	_nrf24l01SetRXMode
  6075                           
  6076                           ;nrf24l01.c: 219: nrf24l01SPIStart();
  6077  0C77  3188  203B  318C   	fcall	_nrf24l01SPIStart
  6078                           
  6079                           ;nrf24l01.c: 222: nrf24l01SPISend((unsigned) 0b10110000);
  6080  0C7A  30B0               	movlw	176
  6081  0C7B  3188  206B  318C   	fcall	_nrf24l01SPISend
  6082                           
  6083                           ;nrf24l01.c: 225: nrf24l01SPISend(lastTXPacket->packetData.byte);
  6084  0C7E  0020               	movlb	0	; select bank0
  6085  0C7F  0868               	movf	_lastTXPacket,w
  6086  0C80  0084               	movwf	4
  6087  0C81  3001               	movlw	1	; select bank2/3
  6088  0C82  3001               	movlw	1	; select bank2/3
  6089  0C83  0085               	movwf	5
  6090  0C84  0800               	movf	0,w
  6091  0C85  3188  206B  318C   	fcall	_nrf24l01SPISend
  6092                           
  6093                           ;nrf24l01.c: 228: unsigned char width = strlen(lastTXPacket->Message);
  6094  0C88  0020               	movlb	0	; select bank0
  6095  0C89  0868               	movf	_lastTXPacket,w
  6096  0C8A  3E01               	addlw	1
  6097  0C8B  3189  2115  318C   	fcall	_strlen
  6098  0C8E  0874               	movf	116,w
  6099                           
  6100                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6101  0C8F  3FFF               	movwi [-1]fsr1
  6102                           
  6103                           ;nrf24l01.c: 230: for (i = 0; i < width; i++) {
  6104                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6105  0C90  3000               	movlw	0
  6106  0C91  3FFE               	movwi [-2]fsr1
  6107  0C92                     l4311:	
  6108                           
  6109                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6110  0C92  3F7E               	moviw [-2]fsr1
  6111  0C93  00FF               	movwf	127
  6112                           
  6113                           ;stkvar	nrf24l01SendTXBuffer@width @ sp[(-3)+2]
  6114  0C94  3F7F               	moviw [-1]fsr1
  6115  0C95  027F               	subwf	127,w
  6116  0C96  1803               	btfsc	3,0
  6117  0C97  2CA9               	goto	l4313
  6118                           
  6119                           ;nrf24l01.c: 231: nrf24l01SPISend(lastTXPacket->Message[i]);
  6120                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6121  0C98  3F7E               	moviw [-2]fsr1
  6122  0C99  0020               	movlb	0	; select bank0
  6123  0C9A  0768               	addwf	_lastTXPacket,w
  6124  0C9B  00FF               	movwf	127
  6125  0C9C  0A7F               	incf	127,w
  6126  0C9D  0084               	movwf	4
  6127  0C9E  3001               	movlw	1	; select bank2/3
  6128  0C9F  3001               	movlw	1	; select bank2/3
  6129  0CA0  0085               	movwf	5
  6130  0CA1  0800               	movf	0,w
  6131  0CA2  3188  206B  318C   	fcall	_nrf24l01SPISend
  6132                           
  6133                           ;stkvar	nrf24l01SendTXBuffer@i @ sp[(-3)+1]
  6134  0CA5  3F7E               	moviw [-2]fsr1
  6135  0CA6  3E01               	addlw	1
  6136  0CA7  3FFE               	movwi [-2]fsr1
  6137  0CA8  2C92               	goto	l4311
  6138  0CA9                     l4313:	
  6139                           
  6140                           ;nrf24l01.c: 232: };nrf24l01.c: 235: nrf24l01SPIEnd();
  6141  0CA9  3188  2032  318C   	fcall	_nrf24l01SPIEnd
  6142                           
  6143                           ;nrf24l01.c: 238: PORTAbits.RA0 = 1;
  6144  0CAC  0020               	movlb	0	; select bank0
  6145  0CAD  140C               	bsf	12,0	;volatile
  6146                           
  6147                           ;nrf24l01.c: 239: _delay((unsigned long)((12)*(32000000/4000000.0)));
  6148  0CAE  3020               	movlw	32
  6149  0CAF                     u5427:	
  6150  0CAF  0B89               	decfsz	9,f
  6151  0CB0  2CAF               	goto	u5427
  6152                           
  6153                           ;nrf24l01.c: 240: PORTAbits.RA0 = 0;
  6154  0CB1  0020               	movlb	0	; select bank0
  6155  0CB2  100C               	bcf	12,0	;volatile
  6156                           
  6157                           ; _nrf24l01SendTXBuffer: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
  6158  0CB3  317D               	addfsr 1,-3
  6159  0CB4  0008               	return
  6160  0CB5                     __end_of_nrf24l01SendTXBuffer:	
  6161                           
  6162                           	psect	text18
  6163  0915                     __ptext18:	
  6164 ;; *************** function _strlen *****************
  6165 ;; Defined at:
  6166 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;  s               1    wreg     PTR const unsigned char 
  6169 ;;		 -> NULL(0), RXPacket.Message(32), RXPacket(33), TXPacket.Message(32), 
  6170 ;;		 -> TXPacket(33), romDataMap(28), 
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;  s               1  [STACK] PTR const unsigned char 
  6173 ;;		 -> NULL(0), RXPacket.Message(32), RXPacket(33), TXPacket.Message(32), 
  6174 ;;		 -> TXPacket(33), romDataMap(28), 
  6175 ;;  cp              1  [STACK] PTR const unsigned char 
  6176 ;;		 -> NULL(0), RXPacket.Message(32), RXPacket(33), TXPacket.Message(32), 
  6177 ;;		 -> TXPacket(33), romDataMap(28), 
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  2  [STACK] unsigned int 
  6180 ;; Registers used:
  6181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+11
  6182 ;; Tracked objects:
  6183 ;;		On entry : 1F/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;Total ram usage:        0 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:    7
  6194 ;; This function calls:
  6195 ;;		Nothing
  6196 ;; This function is called by:
  6197 ;;		_nrf24l01GetPipe
  6198 ;;		_nrf24l01SendTXBuffer
  6199 ;; This function uses a reentrant model
  6200 ;;
  6201                           
  6202                           
  6203                           ;psect for function _strlen
  6204  0915                     _strlen:	
  6205                           
  6206                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6207  0915  3142               	addfsr 1,2
  6208                           
  6209                           ;incstack = 0
  6210 ;; hardware stack exceeded
  6211                           ; Regs used in _strlen: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+11]
  6212                           ;strlen@s stored from wreg
  6213                           ;stkvar	strlen@s @ sp[(-2)+0]
  6214  0916  3FFE               	movwi [-2]fsr1
  6215                           
  6216                           ;stkvar	strlen@s @ sp[(-2)+0]
  6217  0917  0806               	movf	6,w
  6218  0918  0084               	movwf	4
  6219  0919  0807               	movf	7,w
  6220  091A  0085               	movwf	5
  6221  091B  313E               	addfsr 0,-2
  6222                           
  6223                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6224  091C  3F00               	moviw [0]fsr0
  6225  091D  3FFF               	movwi [-1]fsr1
  6226  091E                     l3895:	
  6227                           
  6228                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6229  091E  3F7F               	moviw [-1]fsr1
  6230  091F  0084               	movwf	4
  6231  0920  3001               	movlw	1	; select bank2/3
  6232  0921  0085               	movwf	5
  6233  0922  0800               	movf	0,w
  6234  0923  1903               	btfsc	3,2
  6235  0924  2929               	goto	l3897
  6236                           
  6237                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6238  0925  3F7F               	moviw [-1]fsr1
  6239  0926  3E01               	addlw	1
  6240  0927  3FFF               	movwi [-1]fsr1
  6241  0928  291E               	goto	l3895
  6242  0929                     l3897:	
  6243                           
  6244                           ;stkvar	strlen@cp @ sp[(-2)+1]
  6245  0929  3F7F               	moviw [-1]fsr1
  6246  092A  00FF               	movwf	127
  6247                           
  6248                           ;stkvar	strlen@s @ sp[(-2)+0]
  6249  092B  3F7E               	moviw [-2]fsr1
  6250  092C  027F               	subwf	127,w
  6251  092D  00F4               	movwf	116
  6252  092E  01F5               	clrf	117
  6253  092F  1BF4               	btfsc	116,7
  6254  0930  03F5               	decf	117,f
  6255                           
  6256                           ; _strlen: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsiz
      +                          e = 0, vargsize = 0
  6257  0931  317E               	addfsr 1,-2
  6258  0932  0008               	return
  6259  0933                     __end_of_strlen:	
  6260                           
  6261                           	psect	text19
  6262  0B34                     __ptext19:	
  6263 ;; *************** function _nrf24l01SetRXMode *****************
  6264 ;; Defined at:
  6265 ;;		line 49 in file "nrf24l01.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  rxMode          1    wreg     unsigned char 
  6268 ;; Auto vars:     Size  Location     Type
  6269 ;;  rxMode          1  [STACK] unsigned char 
  6270 ;; Return value:  Size  Location     Type
  6271 ;;                  1    wreg      void 
  6272 ;; Registers used:
  6273 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+11, pclath
  6274 ;; Tracked objects:
  6275 ;;		On entry : 1F/0
  6276 ;;		On exit  : 0/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;Total ram usage:        0 bytes
  6284 ;; Hardware stack levels used:    1
  6285 ;; Hardware stack levels required when called:    9
  6286 ;; This function calls:
  6287 ;;		_nrf24l01Send
  6288 ;; This function is called by:
  6289 ;;		_nrf24l01ISR
  6290 ;;		_nrf24l01SendTXBuffer
  6291 ;;		_nrf24l01Service
  6292 ;; This function uses a reentrant model
  6293 ;;
  6294                           
  6295                           
  6296                           ;psect for function _nrf24l01SetRXMode
  6297  0B34                     _nrf24l01SetRXMode:	
  6298                           
  6299                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6300  0B34  3141               	addfsr 1,1
  6301                           
  6302                           ;incstack = 0
  6303 ;; hardware stack exceeded
  6304                           ; Regs used in _nrf24l01SetRXMode: [wreg+fsr1l+fsr1h+status,2-btemp+0+btemp+11+pclath]
  6305                           ;nrf24l01SetRXMode@rxMode stored from wreg
  6306                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6307  0B35  3FFF               	movwi [-1]fsr1
  6308                           
  6309                           ;nrf24l01.c: 52: if (rxMode){
  6310                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6311  0B36  3F7F               	moviw [-1]fsr1
  6312  0B37  1903               	btfsc	3,2
  6313  0B38  2B3E               	goto	l3907
  6314                           
  6315                           ;nrf24l01.c: 54: if (status.TX == 2){
  6316  0B39  3002               	movlw	2
  6317  0B3A  0020               	movlb	0	; select bank0
  6318  0B3B  0662               	xorwf	_status,w	;volatile
  6319  0B3C  1903               	btfsc	3,2
  6320  0B3D  2B6D               	goto	l264
  6321  0B3E                     l3907:	
  6322                           
  6323                           ;nrf24l01.c: 56: };nrf24l01.c: 57: };nrf24l01.c: 60: if (!rxMode){
  6324                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6325  0B3E  3F7F               	moviw [-1]fsr1
  6326  0B3F  1D03               	btfss	3,2
  6327  0B40  2B46               	goto	l3913
  6328                           
  6329                           ;nrf24l01.c: 61: if (status.TX == 3){
  6330  0B41  3003               	movlw	3
  6331  0B42  0020               	movlb	0	; select bank0
  6332  0B43  0662               	xorwf	_status,w	;volatile
  6333  0B44  1903               	btfsc	3,2
  6334  0B45  2B6D               	goto	l264
  6335  0B46                     l3913:	
  6336                           
  6337                           ;nrf24l01.c: 63: };nrf24l01.c: 64: };nrf24l01.c: 70: if (status.configRegister.PRIM_RX !
      +                          = rxMode){
  6338                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6339  0B46  3F7F               	moviw [-1]fsr1
  6340  0B47  00FF               	movwf	127
  6341  0B48  0020               	movlb	0	; select bank0
  6342  0B49  0865               	movf	_status+3,w	;volatile
  6343  0B4A  3901               	andlw	1
  6344  0B4B  067F               	xorwf	127,w
  6345  0B4C  1903               	skipnz
  6346  0B4D  2B6D               	goto	l264
  6347                           
  6348                           ;nrf24l01.c: 73: PORTAbits.RA0 = 0;
  6349  0B4E  100C               	bcf	12,0	;volatile
  6350                           
  6351                           ;nrf24l01.c: 74: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6352  0B4F  30C0               	movlw	192
  6353  0B50                     u5437:	
  6354  0B50  3200               	nop2
  6355  0B51  0B89               	decfsz	9,f
  6356  0B52  2B50               	goto	u5437
  6357                           
  6358                           ;nrf24l01.c: 77: status.configRegister.PRIM_RX = rxMode;
  6359                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6360  0B53  3F7F               	moviw [-1]fsr1
  6361  0B54  3901               	andlw	1
  6362  0B55  0020               	movlb	0	; select bank0
  6363  0B56  1D03               	skipz
  6364  0B57  1465               	bsf	_status+3,0	;volatile
  6365  0B58  1903               	skipnz
  6366  0B59  1065               	bcf	_status+3,0	;volatile
  6367                           
  6368                           ;nrf24l01.c: 78: nrf24l01Send((unsigned) 0b00100000 | (unsigned) 0x00, status.configRegi
      +                          ster.byte);
  6369  0B5A  0865               	movf	_status+3,w	;volatile
  6370  0B5B  001E               	movwi fsr1++
  6371  0B5C  3020               	movlw	32
  6372  0B5D  3188  207A  318B   	fcall	_nrf24l01Send
  6373                           
  6374                           ;nrf24l01.c: 81: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6375  0B60  30C0               	movlw	192
  6376  0B61                     u5447:	
  6377  0B61  3200               	nop2
  6378  0B62  0B89               	decfsz	9,f
  6379  0B63  2B61               	goto	u5447
  6380                           
  6381                           ;nrf24l01.c: 84: if (rxMode){
  6382                           ;stkvar	nrf24l01SetRXMode@rxMode @ sp[(-1)+0]
  6383  0B64  3F7F               	moviw [-1]fsr1
  6384  0B65  1903               	btfsc	3,2
  6385  0B66  2B6D               	goto	l264
  6386                           
  6387                           ;nrf24l01.c: 85: PORTAbits.RA0 = 1;
  6388  0B67  0020               	movlb	0	; select bank0
  6389  0B68  140C               	bsf	12,0	;volatile
  6390                           
  6391                           ;nrf24l01.c: 86: _delay((unsigned long)((120)*(32000000/4000000.0)));
  6392  0B69  30C0               	movlw	192
  6393  0B6A                     u5457:	
  6394  0B6A  3200               	nop2
  6395  0B6B  0B89               	decfsz	9,f
  6396  0B6C  2B6A               	goto	u5457
  6397  0B6D                     l264:	
  6398                           
  6399                           ; _nrf24l01SetRXMode: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
  6400  0B6D  317F               	addfsr 1,-1
  6401  0B6E  0008               	return
  6402  0B6F                     __end_of_nrf24l01SetRXMode:	
  6403                           
  6404                           	psect	text20
  6405  087A                     __ptext20:	
  6406 ;; *************** function _nrf24l01Send *****************
  6407 ;; Defined at:
  6408 ;;		line 10 in file "nrf24l01.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;  command         1    wreg     unsigned char 
  6411 ;;  data            1  [STACK] unsigned char 
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;  command         1  [STACK] unsigned char 
  6414 ;; Return value:  Size  Location     Type
  6415 ;;                  1    wreg      unsigned char 
  6416 ;; Registers used:
  6417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath
  6418 ;; Tracked objects:
  6419 ;;		On entry : 0/0
  6420 ;;		On exit  : 1F/1
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;Total ram usage:        0 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:    8
  6430 ;; This function calls:
  6431 ;;		_nrf24l01SPIEnd
  6432 ;;		_nrf24l01SPISend
  6433 ;;		_nrf24l01SPIStart
  6434 ;; This function is called by:
  6435 ;;		_nrf24l01SetRXMode
  6436 ;;		_nrf24l01SetRXPipe
  6437 ;;		_nrf24l01ISR
  6438 ;;		_nrf24l01Service
  6439 ;;		_nrf24l01InitRegisters
  6440 ;;		_nrf24l01ChangeTXPower
  6441 ;; This function uses a reentrant model
  6442 ;;
  6443                           
  6444                           
  6445                           ;psect for function _nrf24l01Send
  6446  087A                     _nrf24l01Send:	
  6447                           
  6448                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6449  087A  3141               	addfsr 1,1
  6450                           
  6451                           ;incstack = 0
  6452 ;; hardware stack exceeded
  6453                           ; Regs used in _nrf24l01Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath]
  6454                           ;nrf24l01Send@command stored from wreg
  6455                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6456  087B  3FFF               	movwi [-1]fsr1
  6457                           
  6458                           ;nrf24l01.c: 13: nrf24l01SPIStart();
  6459  087C  3188  203B  3188   	fcall	_nrf24l01SPIStart
  6460                           
  6461                           ;nrf24l01.c: 16: nrf24l01SPISend(command);
  6462                           ;stkvar	nrf24l01Send@command @ sp[(-1)+0]
  6463  087F  3F7F               	moviw [-1]fsr1
  6464  0880  3188  206B  3188   	fcall	_nrf24l01SPISend
  6465                           
  6466                           ;nrf24l01.c: 19: data = nrf24l01SPISend(data);
  6467                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6468  0883  3F7E               	moviw [-2]fsr1
  6469  0884  3188  206B  3188   	fcall	_nrf24l01SPISend
  6470                           
  6471                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6472  0887  3FFE               	movwi [-2]fsr1
  6473                           
  6474                           ;nrf24l01.c: 22: nrf24l01SPIEnd();
  6475  0888  3188  2032         	fcall	_nrf24l01SPIEnd
  6476                           
  6477                           ;nrf24l01.c: 24: return data;
  6478                           ;stkvar	nrf24l01Send@data @ sp[(-1)+-1]
  6479  088A  3F7E               	moviw [-2]fsr1
  6480                           
  6481                           ; _nrf24l01Send: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, 
      +                          argsize = 1, vargsize = 0
  6482  088B  317E               	addfsr 1,-2
  6483  088C  0008               	return
  6484  088D                     __end_of_nrf24l01Send:	
  6485                           
  6486                           	psect	text21
  6487  083B                     __ptext21:	
  6488 ;; *************** function _nrf24l01SPIStart *****************
  6489 ;; Defined at:
  6490 ;;		line 69 in file "interface.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;		None
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;		None
  6495 ;; Return value:  Size  Location     Type
  6496 ;;                  1    wreg      void 
  6497 ;; Registers used:
  6498 ;;		wreg
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;Total ram usage:        0 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:    7
  6511 ;; This function calls:
  6512 ;;		Nothing
  6513 ;; This function is called by:
  6514 ;;		_nrf24l01Send
  6515 ;;		_nrf24l01SetTXPipe
  6516 ;;		_nrf24l01SendTXBuffer
  6517 ;;		_nrf24l01Service
  6518 ;;		_nrf24l01InitRegisters
  6519 ;; This function uses a reentrant model
  6520 ;;
  6521                           
  6522                           
  6523                           ;psect for function _nrf24l01SPIStart
  6524  083B                     _nrf24l01SPIStart:	
  6525                           
  6526                           ;interface.c: 70: PIE0bits.INTE = 0;
  6527                           
  6528                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6529                           ;incstack = 0
  6530 ;; hardware stack exceeded
  6531                           ; Regs used in _nrf24l01SPIStart: [wreg]
  6532  083B  0021               	movlb	1	; select bank1
  6533  083C  1010               	bcf	16,0	;volatile
  6534                           
  6535                           ;interface.c: 71: PORTAbits.RA1 = 0;
  6536  083D  0020               	movlb	0	; select bank0
  6537  083E  108C               	bcf	12,1	;volatile
  6538                           
  6539                           ;interface.c: 72: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6540  083F  301A               	movlw	26
  6541  0840                     u5467:	
  6542  0840  0B89               	decfsz	9,f
  6543  0841  2840               	goto	u5467
  6544  0842  3200               	nop2
  6545                           
  6546                           ; _nrf24l01SPIStart: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           0, argsize = 0, vargsize = 0
  6547  0843  0008               	return
  6548  0844                     __end_of_nrf24l01SPIStart:	
  6549                           
  6550                           	psect	text22
  6551  086B                     __ptext22:	
  6552 ;; *************** function _nrf24l01SPISend *****************
  6553 ;; Defined at:
  6554 ;;		line 57 in file "interface.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;  data            1    wreg     unsigned char 
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;  data            1  [STACK] unsigned char 
  6559 ;; Return value:  Size  Location     Type
  6560 ;;                  1    wreg      unsigned char 
  6561 ;; Registers used:
  6562 ;;		wreg, fsr1l, fsr1h
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 1F/4
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;Total ram usage:        0 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    7
  6575 ;; This function calls:
  6576 ;;		Nothing
  6577 ;; This function is called by:
  6578 ;;		_nrf24l01Send
  6579 ;;		_nrf24l01SetTXPipe
  6580 ;;		_nrf24l01SendTXBuffer
  6581 ;;		_nrf24l01Service
  6582 ;;		_nrf24l01InitRegisters
  6583 ;; This function uses a reentrant model
  6584 ;;
  6585                           
  6586                           
  6587                           ;psect for function _nrf24l01SPISend
  6588  086B                     _nrf24l01SPISend:	
  6589                           
  6590                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6591  086B  3141               	addfsr 1,1
  6592                           
  6593                           ;incstack = 0
  6594 ;; hardware stack exceeded
  6595                           ; Regs used in _nrf24l01SPISend: [wreg+fsr1l+fsr1h]
  6596                           ;nrf24l01SPISend@data stored from wreg
  6597                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6598  086C  3FFF               	movwi [-1]fsr1
  6599                           
  6600                           ;interface.c: 58: SSP1BUF = data;
  6601                           ;stkvar	nrf24l01SPISend@data @ sp[(-1)+0]
  6602  086D  3F7F               	moviw [-1]fsr1
  6603  086E  0024               	movlb	4	; select bank4
  6604  086F  0091               	movwf	17	;volatile
  6605                           
  6606                           ;interface.c: 60: PORTCbits.RC4 = 1;
  6607  0870  0020               	movlb	0	; select bank0
  6608  0871  160E               	bsf	14,4	;volatile
  6609  0872                     l55:	
  6610                           ;interface.c: 62: while (!SSP1STATbits.BF){
  6611                           
  6612  0872  0024               	movlb	4	; select bank4
  6613  0873  1814               	btfsc	20,0	;volatile
  6614  0874  2877               	goto	l3633
  6615                           
  6616                           ;interface.c: 63: __nop();
  6617  0875  0000               	nop
  6618  0876  2872               	goto	l55
  6619  0877                     l3633:	
  6620                           
  6621                           ;interface.c: 64: };interface.c: 66: return SSP1BUF;
  6622  0877  0811               	movf	17,w	;volatile
  6623                           
  6624                           ; _nrf24l01SPISend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  6625  0878  317F               	addfsr 1,-1
  6626  0879  0008               	return
  6627  087A                     __end_of_nrf24l01SPISend:	
  6628                           
  6629                           	psect	text23
  6630  0832                     __ptext23:	
  6631 ;; *************** function _nrf24l01SPIEnd *****************
  6632 ;; Defined at:
  6633 ;;		line 75 in file "interface.c"
  6634 ;; Parameters:    Size  Location     Type
  6635 ;;		None
  6636 ;; Auto vars:     Size  Location     Type
  6637 ;;		None
  6638 ;; Return value:  Size  Location     Type
  6639 ;;                  1    wreg      void 
  6640 ;; Registers used:
  6641 ;;		wreg
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 1F/1
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6651 ;;Total ram usage:        0 bytes
  6652 ;; Hardware stack levels used:    1
  6653 ;; Hardware stack levels required when called:    7
  6654 ;; This function calls:
  6655 ;;		Nothing
  6656 ;; This function is called by:
  6657 ;;		_nrf24l01Send
  6658 ;;		_nrf24l01SetTXPipe
  6659 ;;		_nrf24l01SendTXBuffer
  6660 ;;		_nrf24l01Service
  6661 ;;		_nrf24l01InitRegisters
  6662 ;; This function uses a reentrant model
  6663 ;;
  6664                           
  6665                           
  6666                           ;psect for function _nrf24l01SPIEnd
  6667  0832                     _nrf24l01SPIEnd:	
  6668                           
  6669                           ;interface.c: 76: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6670                           
  6671                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6672                           ;incstack = 0
  6673 ;; hardware stack exceeded
  6674                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  6675  0832  301A               	movlw	26
  6676  0833                     u5477:	
  6677  0833  0B89               	decfsz	9,f
  6678  0834  2833               	goto	u5477
  6679  0835  3200               	nop2
  6680                           
  6681                           ;interface.c: 77: PORTAbits.RA1 = 1;
  6682  0836  0020               	movlb	0	; select bank0
  6683  0837  148C               	bsf	12,1	;volatile
  6684                           
  6685                           ;interface.c: 78: PIE0bits.INTE = 1;
  6686  0838  0021               	movlb	1	; select bank1
  6687  0839  1410               	bsf	16,0	;volatile
  6688                           
  6689                           ; _nrf24l01SPIEnd: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  6690  083A  0008               	return
  6691  083B                     __end_of_nrf24l01SPIEnd:	
  6692                           
  6693                           	psect	text24
  6694  0ACE                     __ptext24:	
  6695 ;; *************** function _memset *****************
  6696 ;; Defined at:
  6697 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;  p1              2  [STACK] PTR void 
  6700 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6701 ;;  c               2  [STACK] int 
  6702 ;;  n               2  [STACK] unsigned int 
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;  p               2  [STACK] PTR unsigned char 
  6705 ;;		 -> RXPacket(33), main@packet(33), loop@packet(33), 
  6706 ;; Return value:  Size  Location     Type
  6707 ;;                  2  [STACK] PTR void 
  6708 ;; Registers used:
  6709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+8, btemp+9, btemp+11
  6710 ;; Tracked objects:
  6711 ;;		On entry : 1E/1
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;Total ram usage:        0 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:    7
  6722 ;; This function calls:
  6723 ;;		Nothing
  6724 ;; This function is called by:
  6725 ;;		_sendMessage
  6726 ;;		_nrf24l01Service
  6727 ;; This function uses a reentrant model
  6728 ;;
  6729                           
  6730                           
  6731                           ;psect for function _memset
  6732  0ACE                     _memset:	
  6733                           
  6734                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6735  0ACE  3142               	addfsr 1,2
  6736                           
  6737                           ;stkvar	memset@p1 @ sp[(-2)+-2]
  6738                           
  6739                           ;incstack = 0
  6740 ;; hardware stack exceeded
  6741                           ; Regs used in _memset: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+0+btemp+8+btemp+9+btemp+1
      +                          1]
  6742  0ACF  0806               	movf	6,w
  6743  0AD0  0084               	movwf	4
  6744  0AD1  0807               	movf	7,w
  6745  0AD2  0085               	movwf	5
  6746  0AD3  313C               	addfsr 0,-4
  6747                           
  6748                           ;stkvar	memset@p @ sp[(-2)+0]
  6749  0AD4  3F00               	moviw [0]fsr0
  6750  0AD5  3FFE               	movwi [-2]fsr1
  6751  0AD6  3F01               	moviw [1]fsr0
  6752  0AD7  3FFF               	movwi [-1]fsr1
  6753  0AD8                     l4209:	
  6754                           
  6755                           ;stkvar	memset@n @ sp[(-2)+-6]
  6756  0AD8  3F78               	moviw [-8]fsr1
  6757  0AD9  00F4               	movwf	116
  6758  0ADA  3001               	movlw	1
  6759  0ADB  0274               	subwf	116,w
  6760  0ADC  3FF8               	movwi [-8]fsr1
  6761  0ADD  3F79               	moviw [-7]fsr1
  6762  0ADE  00F4               	movwf	116
  6763  0ADF  3000               	movlw	0
  6764  0AE0  3B74               	subwfb	116,w
  6765  0AE1  3FF9               	movwi [-7]fsr1
  6766  0AE2  3F78               	moviw [-8]fsr1
  6767  0AE3  3AFF               	xorlw	255
  6768  0AE4  00F4               	movwf	116
  6769  0AE5  3F79               	moviw [-7]fsr1
  6770  0AE6  3AFF               	xorlw	255
  6771  0AE7  04F4               	iorwf	116,f
  6772  0AE8  1903               	btfsc	3,2
  6773  0AE9  2AFE               	goto	l964
  6774                           
  6775                           ;stkvar	memset@c @ sp[(-2)+-4]
  6776  0AEA  3F7A               	moviw [-6]fsr1
  6777  0AEB  00FF               	movwf	127
  6778                           
  6779                           ;stkvar	memset@p @ sp[(-2)+0]
  6780  0AEC  3F7E               	moviw [-2]fsr1
  6781  0AED  00FC               	movwf	124
  6782  0AEE  3F7F               	moviw [-1]fsr1
  6783  0AEF  00FD               	movwf	125
  6784  0AF0  087C               	movf	124,w
  6785  0AF1  0084               	movwf	4
  6786  0AF2  087D               	movf	125,w
  6787  0AF3  0085               	movwf	5
  6788  0AF4  087F               	movf	127,w
  6789  0AF5  0080               	movwf	0
  6790                           
  6791                           ;stkvar	memset@p @ sp[(-2)+0]
  6792  0AF6  3F7E               	moviw [-2]fsr1
  6793  0AF7  3E01               	addlw	1
  6794  0AF8  3FFE               	movwi [-2]fsr1
  6795  0AF9  01F4               	clrf	116
  6796  0AFA  3F7F               	moviw [-1]fsr1
  6797  0AFB  3D74               	addwfc	116,w
  6798  0AFC  3FFF               	movwi [-1]fsr1
  6799  0AFD  2AD8               	goto	l4209
  6800  0AFE                     l964:	
  6801                           
  6802                           ; _memset: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsiz
      +                          e = 6, vargsize = 0
  6803  0AFE  3178               	addfsr 1,-8
  6804  0AFF  0008               	return
  6805  0B00                     __end_of_memset:	
  6806                           
  6807                           	psect	text25
  6808  0850                     __ptext25:	
  6809 ;; *************** function _exception *****************
  6810 ;; Defined at:
  6811 ;;		line 81 in file "interface.c"
  6812 ;; Parameters:    Size  Location     Type
  6813 ;;  exception       1    wreg     unsigned char 
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;  exception       1    7[BANK0 ] unsigned char 
  6816 ;; Return value:  Size  Location     Type
  6817 ;;                  1    wreg      void 
  6818 ;; Registers used:
  6819 ;;		wreg, status,2, status,0, btemp+11, pclath, cstack
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6828 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6829 ;;Total ram usage:        1 bytes
  6830 ;; Hardware stack levels used:    1
  6831 ;; Hardware stack levels required when called:    8
  6832 ;; This function calls:
  6833 ;;		_EEPROMWrite
  6834 ;; This function is called by:
  6835 ;;		_nrf24l01SendPacket
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           
  6840                           ;psect for function _exception
  6841  0850                     _exception:	
  6842                           
  6843                           ;incstack = 0
  6844                           ; Regs used in _exception: [wreg+status,2+status,0+btemp+11+pclath+cstack]
  6845                           ;exception@exception stored from wreg
  6846  0850  0020               	movlb	0	; select bank0
  6847  0851  00A7               	movwf	exception@exception
  6848                           
  6849                           ;interface.c: 82: EEPROMWrite(0, exception);
  6850  0852  3000               	movlw	0
  6851  0853  00F0               	movwf	EEPROMWrite@address
  6852  0854  00F1               	movwf	EEPROMWrite@address+1
  6853  0855  0827               	movf	exception@exception,w
  6854  0856  00FF               	movwf	127
  6855  0857  087F               	movf	127,w
  6856  0858  00F2               	movwf	EEPROMWrite@data
  6857  0859  3189  216F         	fcall	_EEPROMWrite
  6858  085B  0001               	reset	;# 
  6859  085C  0008               	return
  6860  085D                     __end_of_exception:	
  6861                           
  6862                           	psect	text26
  6863  096F                     __ptext26:	
  6864 ;; *************** function _EEPROMWrite *****************
  6865 ;; Defined at:
  6866 ;;		line 7 in file "eeprom.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;  address         2    0[COMMON] unsigned int 
  6869 ;;  data            1    2[COMMON] unsigned char 
  6870 ;; Auto vars:     Size  Location     Type
  6871 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  1    wreg      void 
  6874 ;; Registers used:
  6875 ;;		wreg, status,2, status,0
  6876 ;; Tracked objects:
  6877 ;;		On entry : 0/0
  6878 ;;		On exit  : 0/0
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6881 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6882 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6884 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6885 ;;Total ram usage:        4 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; Hardware stack levels required when called:    7
  6888 ;; This function calls:
  6889 ;;		Nothing
  6890 ;; This function is called by:
  6891 ;;		_exception
  6892 ;;		_main
  6893 ;; This function uses a non-reentrant model
  6894 ;;
  6895                           
  6896                           
  6897                           ;psect for function _EEPROMWrite
  6898  096F                     _EEPROMWrite:	
  6899                           
  6900                           ;eeprom.c: 9: unsigned char GIEBitValue = INTCONbits.GIE;
  6901                           
  6902                           ;incstack = 0
  6903                           ; Regs used in _EEPROMWrite: [wreg+status,2+status,0]
  6904  096F  3000               	movlw	0
  6905  0970  1B8B               	btfsc	11,7	;volatile
  6906  0971  3001               	movlw	1
  6907  0972  00F3               	movwf	EEPROMWrite@GIEBitValue
  6908                           
  6909                           ;eeprom.c: 11: NVMADRH = ((address >> 8) & 0xFF);
  6910  0973  0871               	movf	EEPROMWrite@address+1,w
  6911  0974  0031               	movlb	17	; select bank17
  6912  0975  0092               	movwf	18	;volatile
  6913                           
  6914                           ;eeprom.c: 12: NVMADRL = (address & 0xFF);
  6915  0976  0870               	movf	EEPROMWrite@address,w
  6916  0977  0091               	movwf	17	;volatile
  6917                           
  6918                           ;eeprom.c: 13: NVMDATL = data;
  6919  0978  0872               	movf	EEPROMWrite@data,w
  6920  0979  0093               	movwf	19	;volatile
  6921                           
  6922                           ;eeprom.c: 14: NVMCON1bits.NVMREGS = 1;
  6923  097A  1715               	bsf	21,6	;volsfr
  6924                           
  6925                           ;eeprom.c: 15: NVMCON1bits.WREN = 1;
  6926  097B  1515               	bsf	21,2	;volsfr
  6927                           
  6928                           ;eeprom.c: 16: INTCONbits.GIE = 0;
  6929  097C  138B               	bcf	11,7	;volatile
  6930                           
  6931                           ;eeprom.c: 17: NVMCON2 = 0x55;
  6932  097D  3055               	movlw	85
  6933  097E  0096               	movwf	22	;volsfr
  6934                           
  6935                           ;eeprom.c: 18: NVMCON2 = 0xAA;
  6936  097F  30AA               	movlw	170
  6937  0980  0096               	movwf	22	;volsfr
  6938                           
  6939                           ;eeprom.c: 19: NVMCON1bits.WR = 1;
  6940  0981  1495               	bsf	21,1	;volsfr
  6941                           
  6942                           ;eeprom.c: 21: while (NVMCON1bits.WR){
  6943  0982  2984               	goto	l345
  6944  0983                     l346:	
  6945                           
  6946                           ;eeprom.c: 22: __nop();
  6947  0983  0000               	nop
  6948  0984                     l345:	
  6949  0984  0031               	movlb	17	; select bank17
  6950  0985  1895               	btfsc	21,1	;volsfr
  6951  0986  2983               	goto	l346
  6952                           
  6953                           ;eeprom.c: 23: };eeprom.c: 25: NVMCON1bits.WREN = 0;
  6954  0987  1115               	bcf	21,2	;volsfr
  6955                           
  6956                           ;eeprom.c: 26: INTCONbits.GIE = GIEBitValue;
  6957  0988  0C73               	rrf	EEPROMWrite@GIEBitValue,w
  6958  0989  1C03               	skipc
  6959  098A  138B               	bcf	11,7	;volatile
  6960  098B  1803               	skipnc
  6961  098C  178B               	bsf	11,7	;volatile
  6962  098D  0008               	return
  6963  098E                     __end_of_EEPROMWrite:	
  6964                           
  6965                           	psect	text27
  6966  0429                     __ptext27:	
  6967 ;; *************** function _ftoa *****************
  6968 ;; Defined at:
  6969 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftoa.c"
  6970 ;; Parameters:    Size  Location     Type
  6971 ;;  f               3    0[BANK1 ] float 
  6972 ;;  status          1    3[BANK1 ] PTR int 
  6973 ;;		 -> sendMessage@ftoaStatus(2), 
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;  l               4    8[BANK1 ] unsigned long 
  6976 ;;  rem             4    4[BANK1 ] unsigned long 
  6977 ;;  cp              1   12[BANK1 ] PTR unsigned char 
  6978 ;;		 -> ftoa@buf(17), 
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  1    wreg      PTR unsigned char 
  6981 ;; Registers used:
  6982 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  6983 ;; Tracked objects:
  6984 ;;		On entry : 0/0
  6985 ;;		On exit  : 0/0
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6988 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6991 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;Total ram usage:       13 bytes
  6993 ;; Hardware stack levels used:    1
  6994 ;; Hardware stack levels required when called:   10
  6995 ;; This function calls:
  6996 ;;		___ftge
  6997 ;;		___ftmul
  6998 ;;		___ftneg
  6999 ;;		___ftsub
  7000 ;;		___fttol
  7001 ;;		___lltoft
  7002 ;;		_sprintf
  7003 ;; This function is called by:
  7004 ;;		_sendMessage
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           
  7009                           ;psect for function _ftoa
  7010  0429                     _ftoa:	
  7011                           
  7012                           ;incstack = 0
  7013                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  7014  0429  30DD               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  7015  042A  00FF               	movwf	127
  7016  042B  087F               	movf	127,w
  7017  042C  0021               	movlb	1	; select bank1
  7018  042D  00AC               	movwf	ftoa@cp^(0+128)
  7019  042E  0820               	movf	ftoa@f^(0+128),w
  7020  042F  0020               	movlb	0	; select bank0
  7021  0430  00A7               	movwf	___ftge@ff1
  7022  0431  0021               	movlb	1	; select bank1
  7023  0432  0821               	movf	(ftoa@f+1)^(0+128),w
  7024  0433  0020               	movlb	0	; select bank0
  7025  0434  00A8               	movwf	___ftge@ff1+1
  7026  0435  0021               	movlb	1	; select bank1
  7027  0436  0822               	movf	(ftoa@f+2)^(0+128),w
  7028  0437  0020               	movlb	0	; select bank0
  7029  0438  00A9               	movwf	___ftge@ff1+2
  7030  0439  3000               	movlw	0
  7031  043A  00AA               	movwf	___ftge@ff2
  7032  043B  3000               	movlw	0
  7033  043C  00AB               	movwf	___ftge@ff2+1
  7034  043D  3000               	movlw	0
  7035  043E  00AC               	movwf	___ftge@ff2+2
  7036  043F  318B  236F  3184   	fcall	___ftge
  7037  0442  1803               	btfsc	3,0
  7038  0443  2C6B               	goto	l4237
  7039  0444  302D               	movlw	45
  7040  0445  00FF               	movwf	127
  7041  0446  0021               	movlb	1	; select bank1
  7042  0447  082C               	movf	ftoa@cp^(0+128),w
  7043  0448  0084               	movwf	4
  7044  0449  3001               	movlw	1	; select bank2/3
  7045  044A  0085               	movwf	5
  7046  044B  087F               	movf	127,w
  7047  044C  0080               	movwf	0
  7048  044D  3001               	movlw	1
  7049  044E  00FF               	movwf	127
  7050  044F  087F               	movf	127,w
  7051  0450  07AC               	addwf	ftoa@cp^(0+128),f
  7052  0451  0820               	movf	ftoa@f^(0+128),w
  7053  0452  0020               	movlb	0	; select bank0
  7054  0453  00CC               	movwf	___ftneg@f1
  7055  0454  0021               	movlb	1	; select bank1
  7056  0455  0821               	movf	(ftoa@f+1)^(0+128),w
  7057  0456  0020               	movlb	0	; select bank0
  7058  0457  00CD               	movwf	___ftneg@f1+1
  7059  0458  0021               	movlb	1	; select bank1
  7060  0459  0822               	movf	(ftoa@f+2)^(0+128),w
  7061  045A  0020               	movlb	0	; select bank0
  7062  045B  00CE               	movwf	___ftneg@f1+2
  7063  045C  3188  2029  3184   	fcall	___ftneg
  7064  045F  0020               	movlb	0	; select bank0
  7065  0460  084C               	movf	?___ftneg,w
  7066  0461  0021               	movlb	1	; select bank1
  7067  0462  00A0               	movwf	ftoa@f^(0+128)
  7068  0463  0020               	movlb	0	; select bank0
  7069  0464  084D               	movf	?___ftneg+1,w
  7070  0465  0021               	movlb	1	; select bank1
  7071  0466  00A1               	movwf	(ftoa@f+1)^(0+128)
  7072  0467  0020               	movlb	0	; select bank0
  7073  0468  084E               	movf	?___ftneg+2,w
  7074  0469  0021               	movlb	1	; select bank1
  7075  046A  00A2               	movwf	(ftoa@f+2)^(0+128)
  7076  046B                     l4237:	
  7077  046B  0021               	movlb	1	; select bank1
  7078  046C  0820               	movf	ftoa@f^(0+128),w
  7079  046D  0020               	movlb	0	; select bank0
  7080  046E  00D8               	movwf	___fttol@f1
  7081  046F  0021               	movlb	1	; select bank1
  7082  0470  0821               	movf	(ftoa@f+1)^(0+128),w
  7083  0471  0020               	movlb	0	; select bank0
  7084  0472  00D9               	movwf	___fttol@f1+1
  7085  0473  0021               	movlb	1	; select bank1
  7086  0474  0822               	movf	(ftoa@f+2)^(0+128),w
  7087  0475  0020               	movlb	0	; select bank0
  7088  0476  00DA               	movwf	___fttol@f1+2
  7089  0477  318D  25B5  3184   	fcall	___fttol
  7090  047A  0020               	movlb	0	; select bank0
  7091  047B  085B               	movf	?___fttol+3,w
  7092  047C  0021               	movlb	1	; select bank1
  7093  047D  00AB               	movwf	(ftoa@l+3)^(0+128)
  7094  047E  0020               	movlb	0	; select bank0
  7095  047F  085A               	movf	?___fttol+2,w
  7096  0480  0021               	movlb	1	; select bank1
  7097  0481  00AA               	movwf	(ftoa@l+2)^(0+128)
  7098  0482  0020               	movlb	0	; select bank0
  7099  0483  0859               	movf	?___fttol+1,w
  7100  0484  0021               	movlb	1	; select bank1
  7101  0485  00A9               	movwf	(ftoa@l+1)^(0+128)
  7102  0486  0020               	movlb	0	; select bank0
  7103  0487  0858               	movf	?___fttol,w
  7104  0488  0021               	movlb	1	; select bank1
  7105  0489  00A8               	movwf	ftoa@l^(0+128)
  7106  048A  082B               	movf	(ftoa@l+3)^(0+128),w
  7107  048B  00F3               	movwf	___lltoft@c+3
  7108  048C  082A               	movf	(ftoa@l+2)^(0+128),w
  7109  048D  00F2               	movwf	___lltoft@c+2
  7110  048E  0829               	movf	(ftoa@l+1)^(0+128),w
  7111  048F  00F1               	movwf	___lltoft@c+1
  7112  0490  0828               	movf	ftoa@l^(0+128),w
  7113  0491  00F0               	movwf	___lltoft@c
  7114  0492  318A  2221  3184   	fcall	___lltoft
  7115  0495  0870               	movf	?___lltoft,w
  7116  0496  0020               	movlb	0	; select bank0
  7117  0497  00B6               	movwf	___ftsub@f2
  7118  0498  0871               	movf	?___lltoft+1,w
  7119  0499  00B7               	movwf	___ftsub@f2+1
  7120  049A  0872               	movf	?___lltoft+2,w
  7121  049B  00B8               	movwf	___ftsub@f2+2
  7122  049C  0021               	movlb	1	; select bank1
  7123  049D  0820               	movf	ftoa@f^(0+128),w
  7124  049E  0020               	movlb	0	; select bank0
  7125  049F  00B9               	movwf	___ftsub@f1
  7126  04A0  0021               	movlb	1	; select bank1
  7127  04A1  0821               	movf	(ftoa@f+1)^(0+128),w
  7128  04A2  0020               	movlb	0	; select bank0
  7129  04A3  00BA               	movwf	___ftsub@f1+1
  7130  04A4  0021               	movlb	1	; select bank1
  7131  04A5  0822               	movf	(ftoa@f+2)^(0+128),w
  7132  04A6  0020               	movlb	0	; select bank0
  7133  04A7  00BB               	movwf	___ftsub@f1+2
  7134  04A8  3188  20D9  3184   	fcall	___ftsub
  7135  04AB  0020               	movlb	0	; select bank0
  7136  04AC  0836               	movf	?___ftsub,w
  7137  04AD  0021               	movlb	1	; select bank1
  7138  04AE  00A0               	movwf	ftoa@f^(0+128)
  7139  04AF  0020               	movlb	0	; select bank0
  7140  04B0  0837               	movf	?___ftsub+1,w
  7141  04B1  0021               	movlb	1	; select bank1
  7142  04B2  00A1               	movwf	(ftoa@f+1)^(0+128)
  7143  04B3  0020               	movlb	0	; select bank0
  7144  04B4  0838               	movf	?___ftsub+2,w
  7145  04B5  0021               	movlb	1	; select bank1
  7146  04B6  00A2               	movwf	(ftoa@f+2)^(0+128)
  7147  04B7  0820               	movf	ftoa@f^(0+128),w
  7148  04B8  0020               	movlb	0	; select bank0
  7149  04B9  00CF               	movwf	___ftmul@f2
  7150  04BA  0021               	movlb	1	; select bank1
  7151  04BB  0821               	movf	(ftoa@f+1)^(0+128),w
  7152  04BC  0020               	movlb	0	; select bank0
  7153  04BD  00D0               	movwf	___ftmul@f2+1
  7154  04BE  0021               	movlb	1	; select bank1
  7155  04BF  0822               	movf	(ftoa@f+2)^(0+128),w
  7156  04C0  0020               	movlb	0	; select bank0
  7157  04C1  00D1               	movwf	___ftmul@f2+2
  7158  04C2  3024               	movlw	36
  7159  04C3  00CC               	movwf	___ftmul@f1
  7160  04C4  3074               	movlw	116
  7161  04C5  00CD               	movwf	___ftmul@f1+1
  7162  04C6  3049               	movlw	73
  7163  04C7  00CE               	movwf	___ftmul@f1+2
  7164  04C8  3186  269B  3184   	fcall	___ftmul
  7165  04CB  0020               	movlb	0	; select bank0
  7166  04CC  084C               	movf	?___ftmul,w
  7167  04CD  00D8               	movwf	___fttol@f1
  7168  04CE  084D               	movf	?___ftmul+1,w
  7169  04CF  00D9               	movwf	___fttol@f1+1
  7170  04D0  084E               	movf	?___ftmul+2,w
  7171  04D1  00DA               	movwf	___fttol@f1+2
  7172  04D2  318D  25B5  3184   	fcall	___fttol
  7173  04D5  0020               	movlb	0	; select bank0
  7174  04D6  085B               	movf	?___fttol+3,w
  7175  04D7  0021               	movlb	1	; select bank1
  7176  04D8  00A7               	movwf	(ftoa@rem+3)^(0+128)
  7177  04D9  0020               	movlb	0	; select bank0
  7178  04DA  085A               	movf	?___fttol+2,w
  7179  04DB  0021               	movlb	1	; select bank1
  7180  04DC  00A6               	movwf	(ftoa@rem+2)^(0+128)
  7181  04DD  0020               	movlb	0	; select bank0
  7182  04DE  0859               	movf	?___fttol+1,w
  7183  04DF  0021               	movlb	1	; select bank1
  7184  04E0  00A5               	movwf	(ftoa@rem+1)^(0+128)
  7185  04E1  0020               	movlb	0	; select bank0
  7186  04E2  0858               	movf	?___fttol,w
  7187  04E3  0021               	movlb	1	; select bank1
  7188  04E4  00A4               	movwf	ftoa@rem^(0+128)
  7189  04E5  3029               	movlw	low (STR_7| (0+32768))
  7190  04E6  0020               	movlb	0	; select bank0
  7191  04E7  00BC               	movwf	sprintf@f
  7192  04E8  3090               	movlw	high (STR_7| (0+32768))
  7193  04E9  00BD               	movwf	sprintf@f+1
  7194  04EA  0021               	movlb	1	; select bank1
  7195  04EB  082B               	movf	(ftoa@l+3)^(0+128),w
  7196  04EC  0020               	movlb	0	; select bank0
  7197  04ED  00C1               	movwf	?_sprintf+5
  7198  04EE  0021               	movlb	1	; select bank1
  7199  04EF  082A               	movf	(ftoa@l+2)^(0+128),w
  7200  04F0  0020               	movlb	0	; select bank0
  7201  04F1  00C0               	movwf	?_sprintf+4
  7202  04F2  0021               	movlb	1	; select bank1
  7203  04F3  0829               	movf	(ftoa@l+1)^(0+128),w
  7204  04F4  0020               	movlb	0	; select bank0
  7205  04F5  00BF               	movwf	?_sprintf+3
  7206  04F6  0021               	movlb	1	; select bank1
  7207  04F7  0828               	movf	ftoa@l^(0+128),w
  7208  04F8  0020               	movlb	0	; select bank0
  7209  04F9  00BE               	movwf	?_sprintf+2
  7210  04FA  0021               	movlb	1	; select bank1
  7211  04FB  0827               	movf	(ftoa@rem+3)^(0+128),w
  7212  04FC  0020               	movlb	0	; select bank0
  7213  04FD  00C5               	movwf	?_sprintf+9
  7214  04FE  0021               	movlb	1	; select bank1
  7215  04FF  0826               	movf	(ftoa@rem+2)^(0+128),w
  7216  0500  0020               	movlb	0	; select bank0
  7217  0501  00C4               	movwf	?_sprintf+8
  7218  0502  0021               	movlb	1	; select bank1
  7219  0503  0825               	movf	(ftoa@rem+1)^(0+128),w
  7220  0504  0020               	movlb	0	; select bank0
  7221  0505  00C3               	movwf	?_sprintf+7
  7222  0506  0021               	movlb	1	; select bank1
  7223  0507  0824               	movf	ftoa@rem^(0+128),w
  7224  0508  0020               	movlb	0	; select bank0
  7225  0509  00C2               	movwf	?_sprintf+6
  7226  050A  0021               	movlb	1	; select bank1
  7227  050B  082C               	movf	ftoa@cp^(0+128),w
  7228  050C  3180  2062         	fcall	_sprintf
  7229  050E  30DD               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  7230  050F  0008               	return
  7231  0510                     __end_of_ftoa:	
  7232                           
  7233                           	psect	text28
  7234  0062                     __ptext28:	
  7235 ;; *************** function _sprintf *****************
  7236 ;; Defined at:
  7237 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;  sp              1    wreg     PTR unsigned char 
  7240 ;;		 -> ftoa@buf(17), 
  7241 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  7242 ;;		 -> STR_7(11), 
  7243 ;; Auto vars:     Size  Location     Type
  7244 ;;  sp              1   48[BANK0 ] PTR unsigned char 
  7245 ;;		 -> ftoa@buf(17), 
  7246 ;;  val             4   44[BANK0 ] unsigned long 
  7247 ;;  tmpval          4    0        struct .
  7248 ;;  prec            2   51[BANK0 ] int 
  7249 ;;  width           2   49[BANK0 ] int 
  7250 ;;  cp              2    0        PTR const unsigned char 
  7251 ;;  len             2    0        unsigned int 
  7252 ;;  c               1   53[BANK0 ] unsigned char 
  7253 ;;  ap              1   43[BANK0 ] PTR void [1]
  7254 ;;		 -> ?_sprintf(2), 
  7255 ;;  flag            1   42[BANK0 ] unsigned char 
  7256 ;; Return value:  Size  Location     Type
  7257 ;;                  2   28[BANK0 ] int 
  7258 ;; Registers used:
  7259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, pclath, cstack
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 0/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7265 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7266 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7267 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7268 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7269 ;;Total ram usage:       26 bytes
  7270 ;; Hardware stack levels used:    1
  7271 ;; Hardware stack levels required when called:    8
  7272 ;; This function calls:
  7273 ;;		___lldiv
  7274 ;;		___llmod
  7275 ;;		___wmul
  7276 ;;		_isdigit
  7277 ;; This function is called by:
  7278 ;;		_ftoa
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           
  7283                           ;psect for function _sprintf
  7284  0062                     _sprintf:	
  7285                           
  7286                           ;incstack = 0
  7287                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+8-btemp+11+pclath+cstack]
  7288                           ;sprintf@sp stored from wreg
  7289  0062  0020               	movlb	0	; select bank0
  7290  0063  00D0               	movwf	sprintf@sp
  7291                           
  7292                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: u
      +                          nsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: un
      +                          signed long val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 
      +                          545: *ap = __va_start();
  7293  0064  303E               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7294  0065  00FF               	movwf	127
  7295  0066  087F               	movf	127,w
  7296  0067  00CB               	movwf	sprintf@ap
  7297  0068                     l4031:	
  7298                           ;doprnt.c: 548: while((c = *f++)) {
  7299                           
  7300  0068  083D               	movf	sprintf@f+1,w
  7301  0069  00FF               	movwf	127
  7302  006A  083C               	movf	sprintf@f,w
  7303  006B  00FE               	movwf	126
  7304  006C  0ABC               	incf	sprintf@f,f
  7305  006D  1903               	skipnz
  7306  006E  0ABD               	incf	sprintf@f+1,f
  7307  006F  087E               	movf	126,w
  7308  0070  0084               	movwf	4
  7309  0071  087F               	movf	127,w
  7310  0072  0085               	movwf	5
  7311  0073  0800               	movf	0,w	;code access
  7312  0074  00FF               	movwf	127
  7313  0075  087F               	movf	127,w
  7314  0076  00D5               	movwf	sprintf@c
  7315  0077  0855               	movf	sprintf@c,w
  7316  0078  1903               	btfsc	3,2
  7317  0079  2A29               	goto	l4033
  7318                           
  7319                           ;doprnt.c: 550: if(c != '%')
  7320  007A  3025               	movlw	37
  7321  007B  0655               	xorwf	sprintf@c,w
  7322  007C  1903               	btfsc	3,2
  7323  007D  288B               	goto	l3939
  7324                           
  7325                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  7326  007E  0855               	movf	sprintf@c,w
  7327  007F  00FF               	movwf	127
  7328  0080  0850               	movf	sprintf@sp,w
  7329  0081  0084               	movwf	4
  7330  0082  3001               	movlw	1	; select bank2/3
  7331  0083  0085               	movwf	5
  7332  0084  087F               	movf	127,w
  7333  0085  0080               	movwf	0
  7334  0086  3001               	movlw	1
  7335  0087  00FF               	movwf	127
  7336  0088  087F               	movf	127,w
  7337  0089  07D0               	addwf	sprintf@sp,f
  7338                           
  7339                           ;doprnt.c: 554: continue;
  7340  008A  2868               	goto	l4031
  7341  008B                     l3939:	
  7342                           
  7343                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  7344  008B  01D1               	clrf	sprintf@width
  7345  008C  01D2               	clrf	sprintf@width+1
  7346                           
  7347                           ;doprnt.c: 560: flag = 0;
  7348  008D  01CA               	clrf	sprintf@flag
  7349                           
  7350                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  7351  008E  083C               	movf	sprintf@f,w
  7352  008F  0084               	movwf	4
  7353  0090  083D               	movf	sprintf@f+1,w
  7354  0091  0085               	movwf	5
  7355  0092  0800               	movf	0,w	;code access
  7356  0093  3188  205D  3180   	fcall	_isdigit
  7357  0096  1C03               	btfss	3,0
  7358  0097  28C9               	goto	l3953
  7359                           
  7360                           ;doprnt.c: 610: width = 0;
  7361  0098  0020               	movlb	0	; select bank0
  7362  0099  01D1               	clrf	sprintf@width
  7363  009A  01D2               	clrf	sprintf@width+1
  7364  009B                     l3945:	
  7365                           ;doprnt.c: 611: do {
  7366                           
  7367                           
  7368                           ;doprnt.c: 612: width *= 10;
  7369  009B  300A               	movlw	10
  7370  009C  00F0               	movwf	___wmul@multiplier
  7371  009D  3000               	movlw	0
  7372  009E  00F1               	movwf	___wmul@multiplier+1
  7373  009F  0020               	movlb	0	; select bank0
  7374  00A0  0852               	movf	sprintf@width+1,w
  7375  00A1  00F3               	movwf	___wmul@multiplicand+1
  7376  00A2  0851               	movf	sprintf@width,w
  7377  00A3  00F2               	movwf	___wmul@multiplicand
  7378  00A4  3188  20F7  3180   	fcall	___wmul
  7379  00A7  0871               	movf	?___wmul+1,w
  7380  00A8  0020               	movlb	0	; select bank0
  7381  00A9  00D2               	movwf	sprintf@width+1
  7382  00AA  0870               	movf	?___wmul,w
  7383  00AB  00D1               	movwf	sprintf@width
  7384                           
  7385                           ;doprnt.c: 613: width += *f++ - '0';
  7386  00AC  083C               	movf	sprintf@f,w
  7387  00AD  0084               	movwf	4
  7388  00AE  083D               	movf	sprintf@f+1,w
  7389  00AF  0085               	movwf	5
  7390  00B0  0800               	movf	0,w	;code access
  7391  00B1  3ED0               	addlw	208
  7392  00B2  00FE               	movwf	126
  7393  00B3  30FF               	movlw	255
  7394  00B4  1803               	skipnc
  7395  00B5  3000               	movlw	0
  7396  00B6  00FF               	movwf	127
  7397  00B7  087E               	movf	126,w
  7398  00B8  07D1               	addwf	sprintf@width,f
  7399  00B9  087F               	movf	127,w
  7400  00BA  3DD2               	addwfc	sprintf@width+1,f
  7401  00BB  3001               	movlw	1
  7402  00BC  07BC               	addwf	sprintf@f,f
  7403  00BD  3000               	movlw	0
  7404  00BE  3DBD               	addwfc	sprintf@f+1,f
  7405                           
  7406                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  7407  00BF  083C               	movf	sprintf@f,w
  7408  00C0  0084               	movwf	4
  7409  00C1  083D               	movf	sprintf@f+1,w
  7410  00C2  0085               	movwf	5
  7411  00C3  0800               	movf	0,w	;code access
  7412  00C4  3188  205D  3180   	fcall	_isdigit
  7413  00C7  1803               	btfsc	3,0
  7414  00C8  289B               	goto	l3945
  7415  00C9                     l3953:	
  7416                           
  7417                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  7418  00C9  0020               	movlb	0	; select bank0
  7419  00CA  083C               	movf	sprintf@f,w
  7420  00CB  0084               	movwf	4
  7421  00CC  083D               	movf	sprintf@f+1,w
  7422  00CD  0085               	movwf	5
  7423  00CE  0012               	moviw fsr0++
  7424  00CF  3A2E               	xorlw	46
  7425  00D0  1D03               	btfss	3,2
  7426  00D1  2907               	goto	l3965
  7427                           
  7428                           ;doprnt.c: 625: f++;
  7429  00D2  3001               	movlw	1
  7430  00D3  07BC               	addwf	sprintf@f,f
  7431  00D4  3000               	movlw	0
  7432  00D5  3DBD               	addwfc	sprintf@f+1,f
  7433                           
  7434                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  7435  00D6  01D3               	clrf	sprintf@prec
  7436  00D7  01D4               	clrf	sprintf@prec+1
  7437  00D8                     l3963:	
  7438                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  7439                           
  7440  00D8  083C               	movf	sprintf@f,w
  7441  00D9  0084               	movwf	4
  7442  00DA  083D               	movf	sprintf@f+1,w
  7443  00DB  0085               	movwf	5
  7444  00DC  0800               	movf	0,w	;code access
  7445  00DD  3188  205D  3180   	fcall	_isdigit
  7446  00E0  1C03               	btfss	3,0
  7447  00E1  2912               	goto	l3971
  7448                           
  7449                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  7450  00E2  0020               	movlb	0	; select bank0
  7451  00E3  083C               	movf	sprintf@f,w
  7452  00E4  0084               	movwf	4
  7453  00E5  083D               	movf	sprintf@f+1,w
  7454  00E6  0085               	movwf	5
  7455  00E7  0800               	movf	0,w	;code access
  7456  00E8  00FE               	movwf	126
  7457  00E9  01FF               	clrf	127
  7458  00EA  0854               	movf	sprintf@prec+1,w
  7459  00EB  00F1               	movwf	___wmul@multiplier+1
  7460  00EC  0853               	movf	sprintf@prec,w
  7461  00ED  00F0               	movwf	___wmul@multiplier
  7462  00EE  300A               	movlw	10
  7463  00EF  00F2               	movwf	___wmul@multiplicand
  7464  00F0  3000               	movlw	0
  7465  00F1  00F3               	movwf	___wmul@multiplicand+1
  7466  00F2  3188  20F7  3180   	fcall	___wmul
  7467  00F5  087E               	movf	126,w
  7468  00F6  0770               	addwf	?___wmul,w
  7469  00F7  00FC               	movwf	124
  7470  00F8  087F               	movf	127,w
  7471  00F9  3D71               	addwfc	?___wmul+1,w
  7472  00FA  00FD               	movwf	125
  7473  00FB  087C               	movf	124,w
  7474  00FC  3ED0               	addlw	208
  7475  00FD  0020               	movlb	0	; select bank0
  7476  00FE  00D3               	movwf	sprintf@prec
  7477  00FF  30FF               	movlw	255
  7478  0100  3D7D               	addwfc	125,w
  7479  0101  00D4               	movwf	sprintf@prec+1
  7480  0102  3001               	movlw	1
  7481  0103  07BC               	addwf	sprintf@f,f
  7482  0104  3000               	movlw	0
  7483  0105  3DBD               	addwfc	sprintf@f+1,f
  7484  0106  28D8               	goto	l3963
  7485  0107                     l3965:	
  7486                           ;doprnt.c: 643: };doprnt.c: 644: } else {
  7487                           
  7488                           
  7489                           ;doprnt.c: 645: prec = 0;
  7490  0107  0020               	movlb	0	; select bank0
  7491  0108  01D3               	clrf	sprintf@prec
  7492  0109  01D4               	clrf	sprintf@prec+1
  7493                           
  7494                           ;doprnt.c: 654: switch(c = *f++) {
  7495                           
  7496                           ;doprnt.c: 649: };doprnt.c: 652: loop:
  7497  010A  2912               	goto	l3971
  7498  010B                     l513:	
  7499                           ;doprnt.c: 660: case 'l':
  7500                           
  7501                           ;doprnt.c: 657: goto alldone;
  7502                           
  7503                           ;doprnt.c: 656: case 0:
  7504                           
  7505                           
  7506                           ;doprnt.c: 662: flag |= 0x10;
  7507  010B  164A               	bsf	sprintf@flag,4
  7508                           
  7509                           ;doprnt.c: 663: goto loop;
  7510  010C  2912               	goto	l3971
  7511  010D                     l3967:	
  7512                           ;doprnt.c: 836: case 'u':
  7513                           
  7514                           ;doprnt.c: 832: continue;
  7515                           
  7516                           ;doprnt.c: 821: default:
  7517                           
  7518                           
  7519                           ;doprnt.c: 837: flag |= 0xC0;
  7520  010D  30C0               	movlw	192
  7521  010E  00FF               	movwf	127
  7522  010F  087F               	movf	127,w
  7523  0110  04CA               	iorwf	sprintf@flag,f
  7524                           
  7525                           ;doprnt.c: 841: }
  7526                           
  7527                           ;doprnt.c: 838: break;
  7528  0111  292A               	goto	l516
  7529  0112                     l3971:	
  7530  0112  0020               	movlb	0	; select bank0
  7531  0113  083D               	movf	sprintf@f+1,w
  7532  0114  00FF               	movwf	127
  7533  0115  083C               	movf	sprintf@f,w
  7534  0116  00FE               	movwf	126
  7535  0117  0ABC               	incf	sprintf@f,f
  7536  0118  1903               	skipnz
  7537  0119  0ABD               	incf	sprintf@f+1,f
  7538  011A  087E               	movf	126,w
  7539  011B  0084               	movwf	4
  7540  011C  087F               	movf	127,w
  7541  011D  0085               	movwf	5
  7542  011E  0800               	movf	0,w	;code access
  7543  011F  00D5               	movwf	sprintf@c
  7544                           
  7545                           ; Switch size 1, requested type "space"
  7546                           ; Number of cases is 3, Range of values is 0 to 117
  7547                           ; switch strategies available:
  7548                           ; Name         Instructions Cycles
  7549                           ; simple_byte           10     6 (average)
  7550                           ; direct_byte          242     6 (fixed)
  7551                           ; jumptable            260     6 (fixed)
  7552                           ;	Chosen strategy is simple_byte
  7553  0120  3A00               	xorlw	0	; case 0
  7554  0121  1903               	skipnz
  7555  0122  2A29               	goto	l4033
  7556  0123  3A6C               	xorlw	108	; case 108
  7557  0124  1903               	skipnz
  7558  0125  290B               	goto	l513
  7559  0126  3A19               	xorlw	25	; case 117
  7560  0127  1903               	skipnz
  7561  0128  290D               	goto	l3967
  7562  0129  2868               	goto	l4031
  7563  012A                     l516:	
  7564                           
  7565                           ;doprnt.c: 1292: {;doprnt.c: 1300: if(flag & 0x10)
  7566  012A  1E4A               	btfss	sprintf@flag,4
  7567  012B  2939               	goto	l3977
  7568                           
  7569                           ;doprnt.c: 1301: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7570  012C  084B               	movf	sprintf@ap,w
  7571  012D  0084               	movwf	4
  7572  012E  0185               	clrf	5
  7573  012F  3F00               	moviw [0]fsr0
  7574  0130  00CC               	movwf	sprintf@val
  7575  0131  3F01               	moviw [1]fsr0
  7576  0132  00CD               	movwf	sprintf@val+1
  7577  0133  3F02               	moviw [2]fsr0
  7578  0134  00CE               	movwf	sprintf@val+2
  7579  0135  3F03               	moviw [3]fsr0
  7580  0136  00CF               	movwf	sprintf@val+3
  7581  0137  3004               	movlw	4
  7582  0138  2947               	goto	L1
  7583  0139                     l3977:	
  7584                           
  7585                           ;doprnt.c: 1302: else;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  7586  0139  084B               	movf	sprintf@ap,w
  7587  013A  0084               	movwf	4
  7588  013B  0185               	clrf	5
  7589  013C  3F00               	moviw [0]fsr0
  7590  013D  00FE               	movwf	126
  7591  013E  3F01               	moviw [1]fsr0
  7592  013F  00FF               	movwf	127
  7593  0140  087E               	movf	126,w
  7594  0141  00CC               	movwf	sprintf@val
  7595  0142  087F               	movf	127,w
  7596  0143  00CD               	movwf	sprintf@val+1
  7597  0144  01CE               	clrf	sprintf@val+2
  7598  0145  01CF               	clrf	sprintf@val+3
  7599  0146  3002               	movlw	2
  7600  0147                     L1:	
  7601  0147  00FF               	movwf	127
  7602  0148  087F               	movf	127,w
  7603  0149  07CB               	addwf	sprintf@ap,f
  7604                           
  7605                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  7606  014A  0853               	movf	sprintf@prec,w
  7607  014B  0454               	iorwf	sprintf@prec+1,w
  7608  014C  1D03               	btfss	3,2
  7609  014D  2958               	goto	l3987
  7610  014E  084F               	movf	sprintf@val+3,w
  7611  014F  044E               	iorwf	sprintf@val+2,w
  7612  0150  044D               	iorwf	sprintf@val+1,w
  7613  0151  044C               	iorwf	sprintf@val,w
  7614  0152  1D03               	skipz
  7615  0153  2958               	goto	l3987
  7616                           
  7617                           ;doprnt.c: 1310: prec++;
  7618  0154  3001               	movlw	1
  7619  0155  07D3               	addwf	sprintf@prec,f
  7620  0156  3000               	movlw	0
  7621  0157  3DD4               	addwfc	sprintf@prec+1,f
  7622  0158                     l3987:	
  7623                           
  7624                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7625  0158  01D5               	clrf	sprintf@c
  7626  0159  0AD5               	incf	sprintf@c,f
  7627  015A  300A               	movlw	10
  7628  015B  0655               	xorwf	sprintf@c,w
  7629  015C  1903               	btfsc	3,2
  7630  015D  298B               	goto	l4001
  7631  015E                     l3993:	
  7632                           
  7633                           ;doprnt.c: 1325: if(val < dpowers[c])
  7634  015E  0855               	movf	sprintf@c,w
  7635  015F  00FE               	movwf	126
  7636  0160  01FF               	clrf	127
  7637  0161  35FE               	lslf	126,f
  7638  0162  0DFF               	rlf	127,f
  7639  0163  35FE               	lslf	126,f
  7640  0164  0DFF               	rlf	127,f
  7641  0165  3000               	movlw	low (_dpowers| (0+32768))
  7642  0166  077E               	addwf	126,w
  7643  0167  0084               	movwf	4
  7644  0168  3090               	movlw	high (_dpowers| (0+32768))
  7645  0169  3D7F               	addwfc	127,w
  7646  016A  0085               	movwf	5
  7647  016B  3F00               	moviw [0]fsr0
  7648  016C  00C6               	movwf	??_sprintf
  7649  016D  3F01               	moviw [1]fsr0
  7650  016E  00C7               	movwf	??_sprintf+1
  7651  016F  3F02               	moviw [2]fsr0
  7652  0170  00C8               	movwf	??_sprintf+2
  7653  0171  3F03               	moviw [3]fsr0
  7654  0172  00C9               	movwf	??_sprintf+3
  7655  0173  0849               	movf	??_sprintf+3,w
  7656  0174  024F               	subwf	sprintf@val+3,w
  7657  0175  1D03               	skipz
  7658  0176  2981               	goto	u4375
  7659  0177  0848               	movf	??_sprintf+2,w
  7660  0178  024E               	subwf	sprintf@val+2,w
  7661  0179  1D03               	skipz
  7662  017A  2981               	goto	u4375
  7663  017B  0847               	movf	??_sprintf+1,w
  7664  017C  024D               	subwf	sprintf@val+1,w
  7665  017D  1D03               	skipz
  7666  017E  2981               	goto	u4375
  7667  017F  0846               	movf	??_sprintf,w
  7668  0180  024C               	subwf	sprintf@val,w
  7669  0181                     u4375:	
  7670  0181  1C03               	btfss	3,0
  7671  0182  298B               	goto	l4001
  7672                           
  7673                           ;doprnt.c: 1326: break;
  7674  0183  3001               	movlw	1
  7675  0184  00FF               	movwf	127
  7676  0185  087F               	movf	127,w
  7677  0186  07D5               	addwf	sprintf@c,f
  7678  0187  300A               	movlw	10
  7679  0188  0655               	xorwf	sprintf@c,w
  7680  0189  1D03               	btfss	3,2
  7681  018A  295E               	goto	l3993
  7682  018B                     l4001:	
  7683                           
  7684                           ;doprnt.c: 1358: if(c < prec)
  7685  018B  0854               	movf	sprintf@prec+1,w
  7686  018C  3A80               	xorlw	128
  7687  018D  3C80               	sublw	128
  7688  018E  1D03               	skipz
  7689  018F  2992               	goto	u4395
  7690  0190  0853               	movf	sprintf@prec,w
  7691  0191  0255               	subwf	sprintf@c,w
  7692  0192                     u4395:	
  7693  0192  1803               	skipnc
  7694  0193  299A               	goto	l4005
  7695                           
  7696                           ;doprnt.c: 1359: c = prec;
  7697  0194  0020               	movlb	0	; select bank0
  7698  0195  0853               	movf	sprintf@prec,w
  7699  0196  00FF               	movwf	127
  7700  0197  087F               	movf	127,w
  7701  0198  00D5               	movwf	sprintf@c
  7702  0199  29AE               	goto	l4009
  7703  019A                     l4005:	
  7704                           
  7705                           ;doprnt.c: 1360: else if(prec < c)
  7706  019A  0020               	movlb	0	; select bank0
  7707  019B  0854               	movf	sprintf@prec+1,w
  7708  019C  3A80               	xorlw	128
  7709  019D  00C6               	movwf	??_sprintf
  7710  019E  3080               	movlw	128
  7711  019F  0246               	subwf	??_sprintf,w
  7712  01A0  1D03               	skipz
  7713  01A1  29A4               	goto	u4405
  7714  01A2  0855               	movf	sprintf@c,w
  7715  01A3  0253               	subwf	sprintf@prec,w
  7716  01A4                     u4405:	
  7717  01A4  1803               	skipnc
  7718  01A5  29AE               	goto	l4009
  7719                           
  7720                           ;doprnt.c: 1361: prec = c;
  7721  01A6  0020               	movlb	0	; select bank0
  7722  01A7  0855               	movf	sprintf@c,w
  7723  01A8  00FE               	movwf	126
  7724  01A9  01FF               	clrf	127
  7725  01AA  087E               	movf	126,w
  7726  01AB  00D3               	movwf	sprintf@prec
  7727  01AC  087F               	movf	127,w
  7728  01AD  00D4               	movwf	sprintf@prec+1
  7729  01AE                     l4009:	
  7730                           
  7731                           ;doprnt.c: 1400: if(width > c)
  7732  01AE  0020               	movlb	0	; select bank0
  7733  01AF  0852               	movf	sprintf@width+1,w
  7734  01B0  3A80               	xorlw	128
  7735  01B1  3C80               	sublw	128
  7736  01B2  1D03               	skipz
  7737  01B3  29B6               	goto	u4415
  7738  01B4  0851               	movf	sprintf@width,w
  7739  01B5  0255               	subwf	sprintf@c,w
  7740  01B6                     u4415:	
  7741  01B6  1803               	skipnc
  7742  01B7  29C1               	goto	l4013
  7743                           
  7744                           ;doprnt.c: 1401: width -= c;
  7745  01B8  0020               	movlb	0	; select bank0
  7746  01B9  0855               	movf	sprintf@c,w
  7747  01BA  00FE               	movwf	126
  7748  01BB  01FF               	clrf	127
  7749  01BC  087E               	movf	126,w
  7750  01BD  02D1               	subwf	sprintf@width,f
  7751  01BE  087F               	movf	127,w
  7752  01BF  3BD2               	subwfb	sprintf@width+1,f
  7753  01C0  29C4               	goto	l4015
  7754  01C1                     l4013:	
  7755                           
  7756                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  7757  01C1  0020               	movlb	0	; select bank0
  7758  01C2  01D1               	clrf	sprintf@width
  7759  01C3  01D2               	clrf	sprintf@width+1
  7760  01C4                     l4015:	
  7761                           
  7762                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  7763  01C4  0851               	movf	sprintf@width,w
  7764  01C5  0452               	iorwf	sprintf@width+1,w
  7765  01C6  1903               	btfsc	3,2
  7766  01C7  2A1E               	goto	l4029
  7767                           
  7768                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  7769                           
  7770                           ;doprnt.c: 1448: do
  7771  01C8  3020               	movlw	32
  7772  01C9  00FF               	movwf	127
  7773  01CA  0850               	movf	sprintf@sp,w
  7774  01CB  0084               	movwf	4
  7775  01CC  3001               	movlw	1	; select bank2/3
  7776  01CD  0085               	movwf	5
  7777  01CE  087F               	movf	127,w
  7778  01CF  0080               	movwf	0
  7779  01D0  3001               	movlw	1
  7780  01D1  00FF               	movwf	127
  7781  01D2  087F               	movf	127,w
  7782  01D3  07D0               	addwf	sprintf@sp,f
  7783                           
  7784                           ;doprnt.c: 1450: while(--width);
  7785  01D4  30FF               	movlw	255
  7786  01D5  07D1               	addwf	sprintf@width,f
  7787  01D6  30FF               	movlw	255
  7788  01D7  3DD2               	addwfc	sprintf@width+1,f
  7789  01D8  29C4               	goto	l4015
  7790  01D9                     l4023:	
  7791                           ;doprnt.c: 1488: };doprnt.c: 1493: while(prec--) {
  7792                           
  7793                           
  7794                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  7795  01D9  3000               	movlw	0
  7796  01DA  00B7               	movwf	___llmod@divisor+3
  7797  01DB  3000               	movlw	0
  7798  01DC  00B6               	movwf	___llmod@divisor+2
  7799  01DD  3000               	movlw	0
  7800  01DE  00B5               	movwf	___llmod@divisor+1
  7801  01DF  300A               	movlw	10
  7802  01E0  00B4               	movwf	___llmod@divisor
  7803  01E1  0854               	movf	sprintf@prec+1,w
  7804  01E2  0085               	movwf	5
  7805  01E3  0853               	movf	sprintf@prec,w
  7806  01E4  0084               	movwf	4
  7807  01E5  3584               	lslf	4,f
  7808  01E6  0D85               	rlf	5,f
  7809  01E7  3584               	lslf	4,f
  7810  01E8  0D85               	rlf	5,f
  7811  01E9  3000               	movlw	low (_dpowers| (0+32768))
  7812  01EA  0784               	addwf	4,f
  7813  01EB  3090               	movlw	high (_dpowers| (0+32768))
  7814  01EC  3D85               	addwfc	5,f
  7815  01ED  3F00               	moviw [0]fsr0
  7816  01EE  00A7               	movwf	___lldiv@divisor
  7817  01EF  3F01               	moviw [1]fsr0
  7818  01F0  00A8               	movwf	___lldiv@divisor+1
  7819  01F1  3F02               	moviw [2]fsr0
  7820  01F2  00A9               	movwf	___lldiv@divisor+2
  7821  01F3  3F03               	moviw [3]fsr0
  7822  01F4  00AA               	movwf	___lldiv@divisor+3
  7823  01F5  084F               	movf	sprintf@val+3,w
  7824  01F6  00AE               	movwf	___lldiv@dividend+3
  7825  01F7  084E               	movf	sprintf@val+2,w
  7826  01F8  00AD               	movwf	___lldiv@dividend+2
  7827  01F9  084D               	movf	sprintf@val+1,w
  7828  01FA  00AC               	movwf	___lldiv@dividend+1
  7829  01FB  084C               	movf	sprintf@val,w
  7830  01FC  00AB               	movwf	___lldiv@dividend
  7831  01FD  318C  24FD  3180   	fcall	___lldiv
  7832  0200  0020               	movlb	0	; select bank0
  7833  0201  082A               	movf	?___lldiv+3,w
  7834  0202  00BB               	movwf	___llmod@dividend+3
  7835  0203  0829               	movf	?___lldiv+2,w
  7836  0204  00BA               	movwf	___llmod@dividend+2
  7837  0205  0828               	movf	?___lldiv+1,w
  7838  0206  00B9               	movwf	___llmod@dividend+1
  7839  0207  0827               	movf	?___lldiv,w
  7840  0208  00B8               	movwf	___llmod@dividend
  7841  0209  318C  242B  3180   	fcall	___llmod
  7842  020C  0020               	movlb	0	; select bank0
  7843  020D  0834               	movf	?___llmod,w
  7844  020E  3E30               	addlw	48
  7845  020F  00FF               	movwf	127
  7846  0210  087F               	movf	127,w
  7847  0211  00D5               	movwf	sprintf@c
  7848                           
  7849                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  7850  0212  0855               	movf	sprintf@c,w
  7851  0213  00FF               	movwf	127
  7852  0214  0850               	movf	sprintf@sp,w
  7853  0215  0084               	movwf	4
  7854  0216  3001               	movlw	1	; select bank2/3
  7855  0217  0085               	movwf	5
  7856  0218  087F               	movf	127,w
  7857  0219  0080               	movwf	0
  7858  021A  3001               	movlw	1
  7859  021B  00FF               	movwf	127
  7860  021C  087F               	movf	127,w
  7861  021D  07D0               	addwf	sprintf@sp,f
  7862  021E                     l4029:	
  7863  021E  30FF               	movlw	255
  7864  021F  07D3               	addwf	sprintf@prec,f
  7865  0220  30FF               	movlw	255
  7866  0221  3DD4               	addwfc	sprintf@prec+1,f
  7867  0222  0A53               	incf	sprintf@prec,w
  7868  0223  1D03               	skipz
  7869  0224  29D9               	goto	l4023
  7870  0225  0A54               	incf	sprintf@prec+1,w
  7871  0226  1903               	btfsc	3,2
  7872  0227  2868               	goto	l4031
  7873  0228  29D9               	goto	l4023
  7874  0229                     l4033:	
  7875                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  7876                           
  7877                           
  7878                           ;doprnt.c: 1557: *sp = 0;
  7879  0229  0850               	movf	sprintf@sp,w
  7880  022A  0084               	movwf	4
  7881  022B  3001               	movlw	1	; select bank2/3
  7882  022C  0085               	movwf	5
  7883  022D  0180               	clrf	0
  7884  022E  0008               	return
  7885  022F                     __end_of_sprintf:	
  7886                           ;doprnt.c: 1559: return 0;;	Return value of _sprintf is never used
  7887                           
  7888                           
  7889                           	psect	text29
  7890  085D                     __ptext29:	
  7891 ;; *************** function _isdigit *****************
  7892 ;; Defined at:
  7893 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;  c               1    wreg     unsigned char 
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;  c               1    1[COMMON] unsigned char 
  7898 ;; Return value:  Size  Location     Type
  7899 ;;		None               void
  7900 ;; Registers used:
  7901 ;;		wreg, status,2, status,0
  7902 ;; Tracked objects:
  7903 ;;		On entry : 0/0
  7904 ;;		On exit  : 0/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7908 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7910 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7911 ;;Total ram usage:        2 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:    7
  7914 ;; This function calls:
  7915 ;;		Nothing
  7916 ;; This function is called by:
  7917 ;;		_sprintf
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           
  7922                           ;psect for function _isdigit
  7923  085D                     _isdigit:	
  7924                           
  7925                           ;incstack = 0
  7926                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7927                           ;isdigit@c stored from wreg
  7928  085D  00F1               	movwf	isdigit@c
  7929  085E  01F0               	clrf	_isdigit$1998
  7930  085F  303A               	movlw	58
  7931  0860  0271               	subwf	isdigit@c,w
  7932  0861  1803               	skipnc
  7933  0862  2869               	goto	l3723
  7934  0863  3030               	movlw	48
  7935  0864  0271               	subwf	isdigit@c,w
  7936  0865  1C03               	skipc
  7937  0866  2869               	goto	l3723
  7938  0867  01F0               	clrf	_isdigit$1998
  7939  0868  0AF0               	incf	_isdigit$1998,f
  7940  0869                     l3723:	
  7941  0869  0C70               	rrf	_isdigit$1998,w
  7942  086A  0008               	return
  7943  086B                     __end_of_isdigit:	
  7944                           
  7945                           	psect	text30
  7946  08F7                     __ptext30:	
  7947 ;; *************** function ___wmul *****************
  7948 ;; Defined at:
  7949 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  7950 ;; Parameters:    Size  Location     Type
  7951 ;;  multiplier      2    0[COMMON] unsigned int 
  7952 ;;  multiplicand    2    2[COMMON] unsigned int 
  7953 ;; Auto vars:     Size  Location     Type
  7954 ;;  product         2    7[BANK0 ] unsigned int 
  7955 ;; Return value:  Size  Location     Type
  7956 ;;                  2    0[COMMON] unsigned int 
  7957 ;; Registers used:
  7958 ;;		wreg, status,2, status,0
  7959 ;; Tracked objects:
  7960 ;;		On entry : 0/0
  7961 ;;		On exit  : 0/0
  7962 ;;		Unchanged: 0/0
  7963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7964 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7965 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;Total ram usage:        6 bytes
  7969 ;; Hardware stack levels used:    1
  7970 ;; Hardware stack levels required when called:    7
  7971 ;; This function calls:
  7972 ;;		Nothing
  7973 ;; This function is called by:
  7974 ;;		_sprintf
  7975 ;; This function uses a non-reentrant model
  7976 ;;
  7977                           
  7978                           
  7979                           ;psect for function ___wmul
  7980  08F7                     ___wmul:	
  7981                           
  7982                           ;incstack = 0
  7983                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7984  08F7  0020               	movlb	0	; select bank0
  7985  08F8  01A7               	clrf	___wmul@product
  7986  08F9  01A8               	clrf	___wmul@product+1
  7987  08FA                     l3729:	
  7988  08FA  1C70               	btfss	___wmul@multiplier,0
  7989  08FB  2901               	goto	l539
  7990  08FC  0872               	movf	___wmul@multiplicand,w
  7991  08FD  0020               	movlb	0	; select bank0
  7992  08FE  07A7               	addwf	___wmul@product,f
  7993  08FF  0873               	movf	___wmul@multiplicand+1,w
  7994  0900  3DA8               	addwfc	___wmul@product+1,f
  7995  0901                     l539:	
  7996  0901  3001               	movlw	1
  7997  0902                     u3765:	
  7998  0902  35F2               	lslf	___wmul@multiplicand,f
  7999  0903  0DF3               	rlf	___wmul@multiplicand+1,f
  8000  0904  0B89               	decfsz	9,f
  8001  0905  2902               	goto	u3765
  8002  0906  3001               	movlw	1
  8003  0907                     u3775:	
  8004  0907  36F1               	lsrf	___wmul@multiplier+1,f
  8005  0908  0CF0               	rrf	___wmul@multiplier,f
  8006  0909  0B89               	decfsz	9,f
  8007  090A  2907               	goto	u3775
  8008  090B  0870               	movf	___wmul@multiplier,w
  8009  090C  0471               	iorwf	___wmul@multiplier+1,w
  8010  090D  1D03               	btfss	3,2
  8011  090E  28FA               	goto	l3729
  8012  090F  0020               	movlb	0	; select bank0
  8013  0910  0828               	movf	___wmul@product+1,w
  8014  0911  00F1               	movwf	?___wmul+1
  8015  0912  0827               	movf	___wmul@product,w
  8016  0913  00F0               	movwf	?___wmul
  8017  0914  0008               	return
  8018  0915                     __end_of___wmul:	
  8019                           
  8020                           	psect	text31
  8021  0C2B                     __ptext31:	
  8022 ;; *************** function ___llmod *****************
  8023 ;; Defined at:
  8024 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
  8025 ;; Parameters:    Size  Location     Type
  8026 ;;  divisor         4   20[BANK0 ] unsigned long 
  8027 ;;  dividend        4   24[BANK0 ] unsigned long 
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;  counter         1    0[COMMON] unsigned char 
  8030 ;; Return value:  Size  Location     Type
  8031 ;;                  4   20[BANK0 ] unsigned long 
  8032 ;; Registers used:
  8033 ;;		wreg, status,2, status,0, btemp+11
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : 0/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8039 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;Total ram usage:        9 bytes
  8044 ;; Hardware stack levels used:    1
  8045 ;; Hardware stack levels required when called:    7
  8046 ;; This function calls:
  8047 ;;		Nothing
  8048 ;; This function is called by:
  8049 ;;		_sprintf
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           
  8054                           ;psect for function ___llmod
  8055  0C2B                     ___llmod:	
  8056                           
  8057                           ;incstack = 0
  8058                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+11]
  8059  0C2B  0020               	movlb	0	; select bank0
  8060  0C2C  0837               	movf	___llmod@divisor+3,w
  8061  0C2D  0436               	iorwf	___llmod@divisor+2,w
  8062  0C2E  0435               	iorwf	___llmod@divisor+1,w
  8063  0C2F  0434               	iorwf	___llmod@divisor,w
  8064  0C30  1903               	skipnz
  8065  0C31  2C65               	goto	l3861
  8066  0C32  01F0               	clrf	___llmod@counter
  8067  0C33  0AF0               	incf	___llmod@counter,f
  8068  0C34                     l3851:	
  8069  0C34  1BB7               	btfsc	___llmod@divisor+3,7
  8070  0C35  2C42               	goto	l3853
  8071  0C36  3001               	movlw	1
  8072  0C37                     u4105:	
  8073  0C37  35B4               	lslf	___llmod@divisor,f
  8074  0C38  0DB5               	rlf	___llmod@divisor+1,f
  8075  0C39  0DB6               	rlf	___llmod@divisor+2,f
  8076  0C3A  0DB7               	rlf	___llmod@divisor+3,f
  8077  0C3B  0B89               	decfsz	9,f
  8078  0C3C  2C37               	goto	u4105
  8079  0C3D  3001               	movlw	1
  8080  0C3E  00FF               	movwf	127
  8081  0C3F  087F               	movf	127,w
  8082  0C40  07F0               	addwf	___llmod@counter,f
  8083  0C41  2C34               	goto	l3851
  8084  0C42                     l3853:	
  8085  0C42  0837               	movf	___llmod@divisor+3,w
  8086  0C43  023B               	subwf	___llmod@dividend+3,w
  8087  0C44  1D03               	skipz
  8088  0C45  2C50               	goto	u4125
  8089  0C46  0836               	movf	___llmod@divisor+2,w
  8090  0C47  023A               	subwf	___llmod@dividend+2,w
  8091  0C48  1D03               	skipz
  8092  0C49  2C50               	goto	u4125
  8093  0C4A  0835               	movf	___llmod@divisor+1,w
  8094  0C4B  0239               	subwf	___llmod@dividend+1,w
  8095  0C4C  1D03               	skipz
  8096  0C4D  2C50               	goto	u4125
  8097  0C4E  0834               	movf	___llmod@divisor,w
  8098  0C4F  0238               	subwf	___llmod@dividend,w
  8099  0C50                     u4125:	
  8100  0C50  1C03               	skipc
  8101  0C51  2C5A               	goto	l3857
  8102  0C52  0834               	movf	___llmod@divisor,w
  8103  0C53  02B8               	subwf	___llmod@dividend,f
  8104  0C54  0835               	movf	___llmod@divisor+1,w
  8105  0C55  3BB9               	subwfb	___llmod@dividend+1,f
  8106  0C56  0836               	movf	___llmod@divisor+2,w
  8107  0C57  3BBA               	subwfb	___llmod@dividend+2,f
  8108  0C58  0837               	movf	___llmod@divisor+3,w
  8109  0C59  3BBB               	subwfb	___llmod@dividend+3,f
  8110  0C5A                     l3857:	
  8111  0C5A  3001               	movlw	1
  8112  0C5B                     u4135:	
  8113  0C5B  36B7               	lsrf	___llmod@divisor+3,f
  8114  0C5C  0CB6               	rrf	___llmod@divisor+2,f
  8115  0C5D  0CB5               	rrf	___llmod@divisor+1,f
  8116  0C5E  0CB4               	rrf	___llmod@divisor,f
  8117  0C5F  0B89               	decfsz	9,f
  8118  0C60  2C5B               	goto	u4135
  8119  0C61  3001               	movlw	1
  8120  0C62  02F0               	subwf	___llmod@counter,f
  8121  0C63  1D03               	btfss	3,2
  8122  0C64  2C42               	goto	l3853
  8123  0C65                     l3861:	
  8124  0C65  083B               	movf	___llmod@dividend+3,w
  8125  0C66  00B7               	movwf	?___llmod+3
  8126  0C67  083A               	movf	___llmod@dividend+2,w
  8127  0C68  00B6               	movwf	?___llmod+2
  8128  0C69  0839               	movf	___llmod@dividend+1,w
  8129  0C6A  00B5               	movwf	?___llmod+1
  8130  0C6B  0838               	movf	___llmod@dividend,w
  8131  0C6C  00B4               	movwf	?___llmod
  8132  0C6D  0008               	return
  8133  0C6E                     __end_of___llmod:	
  8134                           
  8135                           	psect	text32
  8136  0CFD                     __ptext32:	
  8137 ;; *************** function ___lldiv *****************
  8138 ;; Defined at:
  8139 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;  divisor         4    7[BANK0 ] unsigned long 
  8142 ;;  dividend        4   11[BANK0 ] unsigned long 
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;  quotient        4   15[BANK0 ] unsigned long 
  8145 ;;  counter         1   19[BANK0 ] unsigned char 
  8146 ;; Return value:  Size  Location     Type
  8147 ;;                  4    7[BANK0 ] unsigned long 
  8148 ;; Registers used:
  8149 ;;		wreg, status,2, status,0, btemp+11
  8150 ;; Tracked objects:
  8151 ;;		On entry : 0/0
  8152 ;;		On exit  : 0/0
  8153 ;;		Unchanged: 0/0
  8154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8155 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8159 ;;Total ram usage:       13 bytes
  8160 ;; Hardware stack levels used:    1
  8161 ;; Hardware stack levels required when called:    7
  8162 ;; This function calls:
  8163 ;;		Nothing
  8164 ;; This function is called by:
  8165 ;;		_sprintf
  8166 ;; This function uses a non-reentrant model
  8167 ;;
  8168                           
  8169                           
  8170                           ;psect for function ___lldiv
  8171  0CFD                     ___lldiv:	
  8172                           
  8173                           ;incstack = 0
  8174                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+11]
  8175  0CFD  3000               	movlw	0
  8176  0CFE  0020               	movlb	0	; select bank0
  8177  0CFF  00B2               	movwf	___lldiv@quotient+3
  8178  0D00  3000               	movlw	0
  8179  0D01  00B1               	movwf	___lldiv@quotient+2
  8180  0D02  3000               	movlw	0
  8181  0D03  00B0               	movwf	___lldiv@quotient+1
  8182  0D04  3000               	movlw	0
  8183  0D05  00AF               	movwf	___lldiv@quotient
  8184  0D06  082A               	movf	___lldiv@divisor+3,w
  8185  0D07  0429               	iorwf	___lldiv@divisor+2,w
  8186  0D08  0428               	iorwf	___lldiv@divisor+1,w
  8187  0D09  0427               	iorwf	___lldiv@divisor,w
  8188  0D0A  1903               	skipnz
  8189  0D0B  2D47               	goto	l3763
  8190  0D0C  01B3               	clrf	___lldiv@counter
  8191  0D0D  0AB3               	incf	___lldiv@counter,f
  8192  0D0E                     l3749:	
  8193  0D0E  1BAA               	btfsc	___lldiv@divisor+3,7
  8194  0D0F  2D1C               	goto	l3751
  8195  0D10  3001               	movlw	1
  8196  0D11                     u3805:	
  8197  0D11  35A7               	lslf	___lldiv@divisor,f
  8198  0D12  0DA8               	rlf	___lldiv@divisor+1,f
  8199  0D13  0DA9               	rlf	___lldiv@divisor+2,f
  8200  0D14  0DAA               	rlf	___lldiv@divisor+3,f
  8201  0D15  0B89               	decfsz	9,f
  8202  0D16  2D11               	goto	u3805
  8203  0D17  3001               	movlw	1
  8204  0D18  00FF               	movwf	127
  8205  0D19  087F               	movf	127,w
  8206  0D1A  07B3               	addwf	___lldiv@counter,f
  8207  0D1B  2D0E               	goto	l3749
  8208  0D1C                     l3751:	
  8209  0D1C  3001               	movlw	1
  8210  0D1D                     u3825:	
  8211  0D1D  35AF               	lslf	___lldiv@quotient,f
  8212  0D1E  0DB0               	rlf	___lldiv@quotient+1,f
  8213  0D1F  0DB1               	rlf	___lldiv@quotient+2,f
  8214  0D20  0DB2               	rlf	___lldiv@quotient+3,f
  8215  0D21  0B89               	decfsz	9,f
  8216  0D22  2D1D               	goto	u3825
  8217  0D23  082A               	movf	___lldiv@divisor+3,w
  8218  0D24  022E               	subwf	___lldiv@dividend+3,w
  8219  0D25  1D03               	skipz
  8220  0D26  2D31               	goto	u3835
  8221  0D27  0829               	movf	___lldiv@divisor+2,w
  8222  0D28  022D               	subwf	___lldiv@dividend+2,w
  8223  0D29  1D03               	skipz
  8224  0D2A  2D31               	goto	u3835
  8225  0D2B  0828               	movf	___lldiv@divisor+1,w
  8226  0D2C  022C               	subwf	___lldiv@dividend+1,w
  8227  0D2D  1D03               	skipz
  8228  0D2E  2D31               	goto	u3835
  8229  0D2F  0827               	movf	___lldiv@divisor,w
  8230  0D30  022B               	subwf	___lldiv@dividend,w
  8231  0D31                     u3835:	
  8232  0D31  1C03               	skipc
  8233  0D32  2D3C               	goto	l3759
  8234  0D33  0827               	movf	___lldiv@divisor,w
  8235  0D34  02AB               	subwf	___lldiv@dividend,f
  8236  0D35  0828               	movf	___lldiv@divisor+1,w
  8237  0D36  3BAC               	subwfb	___lldiv@dividend+1,f
  8238  0D37  0829               	movf	___lldiv@divisor+2,w
  8239  0D38  3BAD               	subwfb	___lldiv@dividend+2,f
  8240  0D39  082A               	movf	___lldiv@divisor+3,w
  8241  0D3A  3BAE               	subwfb	___lldiv@dividend+3,f
  8242  0D3B  142F               	bsf	___lldiv@quotient,0
  8243  0D3C                     l3759:	
  8244  0D3C  3001               	movlw	1
  8245  0D3D                     u3845:	
  8246  0D3D  36AA               	lsrf	___lldiv@divisor+3,f
  8247  0D3E  0CA9               	rrf	___lldiv@divisor+2,f
  8248  0D3F  0CA8               	rrf	___lldiv@divisor+1,f
  8249  0D40  0CA7               	rrf	___lldiv@divisor,f
  8250  0D41  0B89               	decfsz	9,f
  8251  0D42  2D3D               	goto	u3845
  8252  0D43  3001               	movlw	1
  8253  0D44  02B3               	subwf	___lldiv@counter,f
  8254  0D45  1D03               	btfss	3,2
  8255  0D46  2D1C               	goto	l3751
  8256  0D47                     l3763:	
  8257  0D47  0832               	movf	___lldiv@quotient+3,w
  8258  0D48  00AA               	movwf	?___lldiv+3
  8259  0D49  0831               	movf	___lldiv@quotient+2,w
  8260  0D4A  00A9               	movwf	?___lldiv+2
  8261  0D4B  0830               	movf	___lldiv@quotient+1,w
  8262  0D4C  00A8               	movwf	?___lldiv+1
  8263  0D4D  082F               	movf	___lldiv@quotient,w
  8264  0D4E  00A7               	movwf	?___lldiv
  8265  0D4F  0008               	return
  8266  0D50                     __end_of___lldiv:	
  8267                           
  8268                           	psect	text33
  8269  0A21                     __ptext33:	
  8270 ;; *************** function ___lltoft *****************
  8271 ;; Defined at:
  8272 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lltoft.c"
  8273 ;; Parameters:    Size  Location     Type
  8274 ;;  c               4    0[COMMON] unsigned long 
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;  exp             1   12[BANK0 ] unsigned char 
  8277 ;; Return value:  Size  Location     Type
  8278 ;;                  3    0[COMMON] float 
  8279 ;; Registers used:
  8280 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8286 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;Total ram usage:        5 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:    8
  8293 ;; This function calls:
  8294 ;;		___ftpack
  8295 ;; This function is called by:
  8296 ;;		_ftoa
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           
  8301                           ;psect for function ___lltoft
  8302  0A21                     ___lltoft:	
  8303                           
  8304                           ;incstack = 0
  8305                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8306  0A21  308E               	movlw	142
  8307  0A22  00FF               	movwf	127
  8308  0A23  087F               	movf	127,w
  8309  0A24  0020               	movlb	0	; select bank0
  8310  0A25  00AC               	movwf	___lltoft@exp
  8311  0A26                     l4191:	
  8312  0A26  30FF               	movlw	255
  8313  0A27  0573               	andwf	___lltoft@c+3,w
  8314  0A28  1903               	btfsc	3,2
  8315  0A29  2A36               	goto	l4193
  8316  0A2A  3001               	movlw	1
  8317  0A2B                     u4755:	
  8318  0A2B  36F3               	lsrf	___lltoft@c+3,f
  8319  0A2C  0CF2               	rrf	___lltoft@c+2,f
  8320  0A2D  0CF1               	rrf	___lltoft@c+1,f
  8321  0A2E  0CF0               	rrf	___lltoft@c,f
  8322  0A2F  0B89               	decfsz	9,f
  8323  0A30  2A2B               	goto	u4755
  8324  0A31  3001               	movlw	1
  8325  0A32  00FF               	movwf	127
  8326  0A33  087F               	movf	127,w
  8327  0A34  07AC               	addwf	___lltoft@exp,f
  8328  0A35  2A26               	goto	l4191
  8329  0A36                     l4193:	
  8330  0A36  0870               	movf	___lltoft@c,w
  8331  0A37  00A7               	movwf	___ftpack@arg
  8332  0A38  0871               	movf	___lltoft@c+1,w
  8333  0A39  00A8               	movwf	___ftpack@arg+1
  8334  0A3A  0872               	movf	___lltoft@c+2,w
  8335  0A3B  00A9               	movwf	___ftpack@arg+2
  8336  0A3C  082C               	movf	___lltoft@exp,w
  8337  0A3D  00FF               	movwf	127
  8338  0A3E  087F               	movf	127,w
  8339  0A3F  00AA               	movwf	___ftpack@exp
  8340  0A40  01AB               	clrf	___ftpack@sign
  8341  0A41  318D  2550         	fcall	___ftpack
  8342  0A43  0020               	movlb	0	; select bank0
  8343  0A44  0827               	movf	?___ftpack,w
  8344  0A45  00F0               	movwf	?___lltoft
  8345  0A46  0828               	movf	?___ftpack+1,w
  8346  0A47  00F1               	movwf	?___lltoft+1
  8347  0A48  0829               	movf	?___ftpack+2,w
  8348  0A49  00F2               	movwf	?___lltoft+2
  8349  0A4A  0008               	return
  8350  0A4B                     __end_of___lltoft:	
  8351                           
  8352                           	psect	text34
  8353  0DB5                     __ptext34:	
  8354 ;; *************** function ___fttol *****************
  8355 ;; Defined at:
  8356 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  8357 ;; Parameters:    Size  Location     Type
  8358 ;;  f1              3   56[BANK0 ] float 
  8359 ;; Auto vars:     Size  Location     Type
  8360 ;;  lval            4   61[BANK0 ] unsigned long 
  8361 ;;  exp1            1   65[BANK0 ] unsigned char 
  8362 ;;  sign1           1   60[BANK0 ] unsigned char 
  8363 ;; Return value:  Size  Location     Type
  8364 ;;                  4   56[BANK0 ] long 
  8365 ;; Registers used:
  8366 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8367 ;; Tracked objects:
  8368 ;;		On entry : 0/0
  8369 ;;		On exit  : 0/0
  8370 ;;		Unchanged: 0/0
  8371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8372 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8373 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8375 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8376 ;;Total ram usage:       10 bytes
  8377 ;; Hardware stack levels used:    1
  8378 ;; Hardware stack levels required when called:    7
  8379 ;; This function calls:
  8380 ;;		Nothing
  8381 ;; This function is called by:
  8382 ;;		_ftoa
  8383 ;; This function uses a non-reentrant model
  8384 ;;
  8385                           
  8386                           
  8387                           ;psect for function ___fttol
  8388  0DB5                     ___fttol:	
  8389                           
  8390                           ;incstack = 0
  8391                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+9-btemp+11]
  8392  0DB5  0020               	movlb	0	; select bank0
  8393  0DB6  0858               	movf	___fttol@f1,w
  8394  0DB7  00FD               	movwf	125
  8395  0DB8  0859               	movf	___fttol@f1+1,w
  8396  0DB9  00FE               	movwf	126
  8397  0DBA  085A               	movf	___fttol@f1+2,w
  8398  0DBB  00FF               	movwf	127
  8399  0DBC  1003               	clrc
  8400  0DBD  0D7E               	rlf	126,w
  8401  0DBE  0D7F               	rlf	127,w
  8402  0DBF  00FF               	movwf	127
  8403  0DC0  087F               	movf	127,w
  8404  0DC1  00E1               	movwf	___fttol@exp1
  8405  0DC2  0861               	movf	___fttol@exp1,w
  8406  0DC3  1D03               	btfss	3,2
  8407  0DC4  2DCE               	goto	l4147
  8408  0DC5  3000               	movlw	0
  8409  0DC6  00DB               	movwf	?___fttol+3
  8410  0DC7  3000               	movlw	0
  8411  0DC8  00DA               	movwf	?___fttol+2
  8412  0DC9  3000               	movlw	0
  8413  0DCA  00D9               	movwf	?___fttol+1
  8414  0DCB  3000               	movlw	0
  8415  0DCC  00D8               	movwf	?___fttol
  8416  0DCD  0008               	return
  8417  0DCE                     l4147:	
  8418  0DCE  0858               	movf	___fttol@f1,w
  8419  0DCF  00FD               	movwf	125
  8420  0DD0  0859               	movf	___fttol@f1+1,w
  8421  0DD1  00FE               	movwf	126
  8422  0DD2  085A               	movf	___fttol@f1+2,w
  8423  0DD3  00FF               	movwf	127
  8424  0DD4  3017               	movlw	23
  8425  0DD5                     u4665:	
  8426  0DD5  36FF               	lsrf	127,f
  8427  0DD6  0CFE               	rrf	126,f
  8428  0DD7  0CFD               	rrf	125,f
  8429  0DD8  0B89               	decfsz	9,f
  8430  0DD9  2DD5               	goto	u4665
  8431  0DDA  087D               	movf	125,w
  8432  0DDB  00FF               	movwf	127
  8433  0DDC  087F               	movf	127,w
  8434  0DDD  00DC               	movwf	___fttol@sign1
  8435  0DDE  17D9               	bsf	___fttol@f1+1,7
  8436  0DDF  30FF               	movlw	255
  8437  0DE0  05D8               	andwf	___fttol@f1,f
  8438  0DE1  30FF               	movlw	255
  8439  0DE2  05D9               	andwf	___fttol@f1+1,f
  8440  0DE3  3000               	movlw	0
  8441  0DE4  05DA               	andwf	___fttol@f1+2,f
  8442  0DE5  0858               	movf	___fttol@f1,w
  8443  0DE6  00DD               	movwf	___fttol@lval
  8444  0DE7  0859               	movf	___fttol@f1+1,w
  8445  0DE8  00DE               	movwf	___fttol@lval+1
  8446  0DE9  085A               	movf	___fttol@f1+2,w
  8447  0DEA  00DF               	movwf	___fttol@lval+2
  8448  0DEB  01E0               	clrf	___fttol@lval+3
  8449  0DEC  308E               	movlw	142
  8450  0DED  02E1               	subwf	___fttol@exp1,f
  8451  0DEE  1FE1               	btfss	___fttol@exp1,7
  8452  0DEF  2E0C               	goto	l4169
  8453  0DF0  0861               	movf	___fttol@exp1,w
  8454  0DF1  3A80               	xorlw	128
  8455  0DF2  3E8F               	addlw	143
  8456  0DF3  1803               	skipnc
  8457  0DF4  2DFE               	goto	l4165
  8458  0DF5  3000               	movlw	0
  8459  0DF6  00DB               	movwf	?___fttol+3
  8460  0DF7  3000               	movlw	0
  8461  0DF8  00DA               	movwf	?___fttol+2
  8462  0DF9  3000               	movlw	0
  8463  0DFA  00D9               	movwf	?___fttol+1
  8464  0DFB  3000               	movlw	0
  8465  0DFC  00D8               	movwf	?___fttol
  8466  0DFD  0008               	return
  8467  0DFE                     l4165:	
  8468  0DFE  3001               	movlw	1
  8469  0DFF                     u4695:	
  8470  0DFF  36E0               	lsrf	___fttol@lval+3,f
  8471  0E00  0CDF               	rrf	___fttol@lval+2,f
  8472  0E01  0CDE               	rrf	___fttol@lval+1,f
  8473  0E02  0CDD               	rrf	___fttol@lval,f
  8474  0E03  0B89               	decfsz	9,f
  8475  0E04  2DFF               	goto	u4695
  8476  0E05  3001               	movlw	1
  8477  0E06  00FF               	movwf	127
  8478  0E07  087F               	movf	127,w
  8479  0E08  07E1               	addwf	___fttol@exp1,f
  8480  0E09  1903               	btfsc	3,2
  8481  0E0A  2E25               	goto	l4177
  8482  0E0B  2DFE               	goto	l4165
  8483  0E0C                     l4169:	
  8484  0E0C  3018               	movlw	24
  8485  0E0D  0261               	subwf	___fttol@exp1,w
  8486  0E0E  1C03               	skipc
  8487  0E0F  2E22               	goto	l833
  8488  0E10  3000               	movlw	0
  8489  0E11  00DB               	movwf	?___fttol+3
  8490  0E12  3000               	movlw	0
  8491  0E13  00DA               	movwf	?___fttol+2
  8492  0E14  3000               	movlw	0
  8493  0E15  00D9               	movwf	?___fttol+1
  8494  0E16  3000               	movlw	0
  8495  0E17  00D8               	movwf	?___fttol
  8496  0E18  0008               	return
  8497  0E19                     l4175:	
  8498  0E19  3001               	movlw	1
  8499  0E1A                     u4725:	
  8500  0E1A  35DD               	lslf	___fttol@lval,f
  8501  0E1B  0DDE               	rlf	___fttol@lval+1,f
  8502  0E1C  0DDF               	rlf	___fttol@lval+2,f
  8503  0E1D  0DE0               	rlf	___fttol@lval+3,f
  8504  0E1E  0B89               	decfsz	9,f
  8505  0E1F  2E1A               	goto	u4725
  8506  0E20  3001               	movlw	1
  8507  0E21  02E1               	subwf	___fttol@exp1,f
  8508  0E22                     l833:	
  8509  0E22  0861               	movf	___fttol@exp1,w
  8510  0E23  1D03               	btfss	3,2
  8511  0E24  2E19               	goto	l4175
  8512  0E25                     l4177:	
  8513  0E25  085C               	movf	___fttol@sign1,w
  8514  0E26  1903               	btfsc	3,2
  8515  0E27  2E33               	goto	l4181
  8516  0E28  09DD               	comf	___fttol@lval,f
  8517  0E29  09DE               	comf	___fttol@lval+1,f
  8518  0E2A  09DF               	comf	___fttol@lval+2,f
  8519  0E2B  09E0               	comf	___fttol@lval+3,f
  8520  0E2C  0ADD               	incf	___fttol@lval,f
  8521  0E2D  1903               	skipnz
  8522  0E2E  0ADE               	incf	___fttol@lval+1,f
  8523  0E2F  1903               	skipnz
  8524  0E30  0ADF               	incf	___fttol@lval+2,f
  8525  0E31  1903               	skipnz
  8526  0E32  0AE0               	incf	___fttol@lval+3,f
  8527  0E33                     l4181:	
  8528  0E33  0860               	movf	___fttol@lval+3,w
  8529  0E34  00DB               	movwf	?___fttol+3
  8530  0E35  085F               	movf	___fttol@lval+2,w
  8531  0E36  00DA               	movwf	?___fttol+2
  8532  0E37  085E               	movf	___fttol@lval+1,w
  8533  0E38  00D9               	movwf	?___fttol+1
  8534  0E39  085D               	movf	___fttol@lval,w
  8535  0E3A  00D8               	movwf	?___fttol
  8536  0E3B  0008               	return
  8537  0E3C                     __end_of___fttol:	
  8538                           
  8539                           	psect	text35
  8540  08D9                     __ptext35:	
  8541 ;; *************** function ___ftsub *****************
  8542 ;; Defined at:
  8543 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftsub.c"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;  f2              3   22[BANK0 ] float 
  8546 ;;  f1              3   25[BANK0 ] float 
  8547 ;; Auto vars:     Size  Location     Type
  8548 ;;		None
  8549 ;; Return value:  Size  Location     Type
  8550 ;;                  3   22[BANK0 ] float 
  8551 ;; Registers used:
  8552 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8553 ;; Tracked objects:
  8554 ;;		On entry : 0/0
  8555 ;;		On exit  : 0/0
  8556 ;;		Unchanged: 0/0
  8557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8558 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8561 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8562 ;;Total ram usage:        6 bytes
  8563 ;; Hardware stack levels used:    1
  8564 ;; Hardware stack levels required when called:    9
  8565 ;; This function calls:
  8566 ;;		___ftadd
  8567 ;; This function is called by:
  8568 ;;		_ftoa
  8569 ;; This function uses a non-reentrant model
  8570 ;;
  8571                           
  8572                           
  8573                           ;psect for function ___ftsub
  8574  08D9                     ___ftsub:	
  8575                           
  8576                           ;incstack = 0
  8577                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8578  08D9  0020               	movlb	0	; select bank0
  8579  08DA  0838               	movf	___ftsub@f2+2,w
  8580  08DB  0437               	iorwf	___ftsub@f2+1,w
  8581  08DC  0436               	iorwf	___ftsub@f2,w
  8582  08DD  1903               	skipnz
  8583  08DE  28E1               	goto	l4137
  8584  08DF  3080               	movlw	128
  8585  08E0  06B8               	xorwf	___ftsub@f2+2,f
  8586  08E1                     l4137:	
  8587  08E1  0839               	movf	___ftsub@f1,w
  8588  08E2  00AC               	movwf	___ftadd@f1
  8589  08E3  083A               	movf	___ftsub@f1+1,w
  8590  08E4  00AD               	movwf	___ftadd@f1+1
  8591  08E5  083B               	movf	___ftsub@f1+2,w
  8592  08E6  00AE               	movwf	___ftadd@f1+2
  8593  08E7  0836               	movf	___ftsub@f2,w
  8594  08E8  00AF               	movwf	___ftadd@f2
  8595  08E9  0837               	movf	___ftsub@f2+1,w
  8596  08EA  00B0               	movwf	___ftadd@f2+1
  8597  08EB  0838               	movf	___ftsub@f2+2,w
  8598  08EC  00B1               	movwf	___ftadd@f2+2
  8599  08ED  3183  2333         	fcall	___ftadd
  8600  08EF  0020               	movlb	0	; select bank0
  8601  08F0  082C               	movf	?___ftadd,w
  8602  08F1  00B6               	movwf	?___ftsub
  8603  08F2  082D               	movf	?___ftadd+1,w
  8604  08F3  00B7               	movwf	?___ftsub+1
  8605  08F4  082E               	movf	?___ftadd+2,w
  8606  08F5  00B8               	movwf	?___ftsub+2
  8607  08F6  0008               	return
  8608  08F7                     __end_of___ftsub:	
  8609                           
  8610                           	psect	text36
  8611  0829                     __ptext36:	
  8612 ;; *************** function ___ftneg *****************
  8613 ;; Defined at:
  8614 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftneg.c"
  8615 ;; Parameters:    Size  Location     Type
  8616 ;;  f1              3   44[BANK0 ] float 
  8617 ;; Auto vars:     Size  Location     Type
  8618 ;;		None
  8619 ;; Return value:  Size  Location     Type
  8620 ;;                  3   44[BANK0 ] float 
  8621 ;; Registers used:
  8622 ;;		wreg
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8628 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;Total ram usage:        3 bytes
  8633 ;; Hardware stack levels used:    1
  8634 ;; Hardware stack levels required when called:    7
  8635 ;; This function calls:
  8636 ;;		Nothing
  8637 ;; This function is called by:
  8638 ;;		_loop
  8639 ;;		_ftoa
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           
  8644                           ;psect for function ___ftneg
  8645  0829                     ___ftneg:	
  8646                           
  8647                           ;incstack = 0
  8648                           ; Regs used in ___ftneg: [wreg]
  8649  0829  0020               	movlb	0	; select bank0
  8650  082A  084E               	movf	___ftneg@f1+2,w
  8651  082B  044D               	iorwf	___ftneg@f1+1,w
  8652  082C  044C               	iorwf	___ftneg@f1,w
  8653  082D  1903               	skipnz
  8654  082E  0008               	return
  8655  082F  3080               	movlw	128
  8656  0830  06CE               	xorwf	___ftneg@f1+2,f
  8657  0831  0008               	return
  8658  0832                     __end_of___ftneg:	
  8659                           
  8660                           	psect	text37
  8661  069B                     __ptext37:	
  8662 ;; *************** function ___ftmul *****************
  8663 ;; Defined at:
  8664 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;  f1              3   44[BANK0 ] float 
  8667 ;;  f2              3   47[BANK0 ] float 
  8668 ;; Auto vars:     Size  Location     Type
  8669 ;;  f3_as_produc    3   51[BANK0 ] unsigned um
  8670 ;;  sign            1   55[BANK0 ] unsigned char 
  8671 ;;  cntr            1   54[BANK0 ] unsigned char 
  8672 ;;  exp             1   50[BANK0 ] unsigned char 
  8673 ;; Return value:  Size  Location     Type
  8674 ;;                  3   44[BANK0 ] float 
  8675 ;; Registers used:
  8676 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  8677 ;; Tracked objects:
  8678 ;;		On entry : 0/0
  8679 ;;		On exit  : 0/0
  8680 ;;		Unchanged: 0/0
  8681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8682 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;Total ram usage:       12 bytes
  8687 ;; Hardware stack levels used:    1
  8688 ;; Hardware stack levels required when called:    8
  8689 ;; This function calls:
  8690 ;;		___ftpack
  8691 ;; This function is called by:
  8692 ;;		_loop
  8693 ;;		_ftoa
  8694 ;; This function uses a non-reentrant model
  8695 ;;
  8696                           
  8697                           
  8698                           ;psect for function ___ftmul
  8699  069B                     ___ftmul:	
  8700                           
  8701                           ;incstack = 0
  8702                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  8703  069B  0020               	movlb	0	; select bank0
  8704  069C  084C               	movf	___ftmul@f1,w
  8705  069D  00FD               	movwf	125
  8706  069E  084D               	movf	___ftmul@f1+1,w
  8707  069F  00FE               	movwf	126
  8708  06A0  084E               	movf	___ftmul@f1+2,w
  8709  06A1  00FF               	movwf	127
  8710  06A2  1003               	clrc
  8711  06A3  0D7E               	rlf	126,w
  8712  06A4  0D7F               	rlf	127,w
  8713  06A5  00FF               	movwf	127
  8714  06A6  087F               	movf	127,w
  8715  06A7  00D2               	movwf	___ftmul@exp
  8716  06A8  0852               	movf	___ftmul@exp,w
  8717  06A9  1D03               	btfss	3,2
  8718  06AA  2EB2               	goto	l4077
  8719  06AB  3000               	movlw	0
  8720  06AC  00CC               	movwf	?___ftmul
  8721  06AD  3000               	movlw	0
  8722  06AE  00CD               	movwf	?___ftmul+1
  8723  06AF  3000               	movlw	0
  8724  06B0  00CE               	movwf	?___ftmul+2
  8725  06B1  0008               	return
  8726  06B2                     l4077:	
  8727  06B2  084F               	movf	___ftmul@f2,w
  8728  06B3  00FD               	movwf	125
  8729  06B4  0850               	movf	___ftmul@f2+1,w
  8730  06B5  00FE               	movwf	126
  8731  06B6  0851               	movf	___ftmul@f2+2,w
  8732  06B7  00FF               	movwf	127
  8733  06B8  1003               	clrc
  8734  06B9  0D7E               	rlf	126,w
  8735  06BA  0D7F               	rlf	127,w
  8736  06BB  00FF               	movwf	127
  8737  06BC  087F               	movf	127,w
  8738  06BD  00D7               	movwf	___ftmul@sign
  8739  06BE  0857               	movf	___ftmul@sign,w
  8740  06BF  1D03               	btfss	3,2
  8741  06C0  2EC8               	goto	l4083
  8742  06C1  3000               	movlw	0
  8743  06C2  00CC               	movwf	?___ftmul
  8744  06C3  3000               	movlw	0
  8745  06C4  00CD               	movwf	?___ftmul+1
  8746  06C5  3000               	movlw	0
  8747  06C6  00CE               	movwf	?___ftmul+2
  8748  06C7  0008               	return
  8749  06C8                     l4083:	
  8750  06C8  0857               	movf	___ftmul@sign,w
  8751  06C9  3E7B               	addlw	123
  8752  06CA  00FF               	movwf	127
  8753  06CB  087F               	movf	127,w
  8754  06CC  07D2               	addwf	___ftmul@exp,f
  8755  06CD  084C               	movf	___ftmul@f1,w
  8756  06CE  00FD               	movwf	125
  8757  06CF  084D               	movf	___ftmul@f1+1,w
  8758  06D0  00FE               	movwf	126
  8759  06D1  084E               	movf	___ftmul@f1+2,w
  8760  06D2  00FF               	movwf	127
  8761  06D3  3010               	movlw	16
  8762  06D4                     u4535:	
  8763  06D4  36FF               	lsrf	127,f
  8764  06D5  0CFE               	rrf	126,f
  8765  06D6  0CFD               	rrf	125,f
  8766  06D7  0B89               	decfsz	9,f
  8767  06D8  2ED4               	goto	u4535
  8768  06D9  087D               	movf	125,w
  8769  06DA  00FF               	movwf	127
  8770  06DB  087F               	movf	127,w
  8771  06DC  00D7               	movwf	___ftmul@sign
  8772  06DD  084F               	movf	___ftmul@f2,w
  8773  06DE  00FD               	movwf	125
  8774  06DF  0850               	movf	___ftmul@f2+1,w
  8775  06E0  00FE               	movwf	126
  8776  06E1  0851               	movf	___ftmul@f2+2,w
  8777  06E2  00FF               	movwf	127
  8778  06E3  3010               	movlw	16
  8779  06E4                     u4545:	
  8780  06E4  36FF               	lsrf	127,f
  8781  06E5  0CFE               	rrf	126,f
  8782  06E6  0CFD               	rrf	125,f
  8783  06E7  0B89               	decfsz	9,f
  8784  06E8  2EE4               	goto	u4545
  8785  06E9  087D               	movf	125,w
  8786  06EA  00FF               	movwf	127
  8787  06EB  087F               	movf	127,w
  8788  06EC  06D7               	xorwf	___ftmul@sign,f
  8789  06ED  3080               	movlw	128
  8790  06EE  00FF               	movwf	127
  8791  06EF  087F               	movf	127,w
  8792  06F0  05D7               	andwf	___ftmul@sign,f
  8793  06F1  17CD               	bsf	___ftmul@f1+1,7
  8794  06F2  17D0               	bsf	___ftmul@f2+1,7
  8795  06F3  30FF               	movlw	255
  8796  06F4  05CF               	andwf	___ftmul@f2,f
  8797  06F5  30FF               	movlw	255
  8798  06F6  05D0               	andwf	___ftmul@f2+1,f
  8799  06F7  3000               	movlw	0
  8800  06F8  05D1               	andwf	___ftmul@f2+2,f
  8801  06F9  3000               	movlw	0
  8802  06FA  00D3               	movwf	___ftmul@f3_as_product
  8803  06FB  3000               	movlw	0
  8804  06FC  00D4               	movwf	___ftmul@f3_as_product+1
  8805  06FD  3000               	movlw	0
  8806  06FE  00D5               	movwf	___ftmul@f3_as_product+2
  8807  06FF  3007               	movlw	7
  8808  0700  00FF               	movwf	127
  8809  0701  087F               	movf	127,w
  8810  0702  00D6               	movwf	___ftmul@cntr
  8811  0703                     l4099:	
  8812  0703  1C4C               	btfss	___ftmul@f1,0
  8813  0704  2F0B               	goto	l4103
  8814  0705  084F               	movf	___ftmul@f2,w
  8815  0706  07D3               	addwf	___ftmul@f3_as_product,f
  8816  0707  0850               	movf	___ftmul@f2+1,w
  8817  0708  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8818  0709  0851               	movf	___ftmul@f2+2,w
  8819  070A  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8820  070B                     l4103:	
  8821  070B  3001               	movlw	1
  8822  070C                     u4565:	
  8823  070C  36CE               	lsrf	___ftmul@f1+2,f
  8824  070D  0CCD               	rrf	___ftmul@f1+1,f
  8825  070E  0CCC               	rrf	___ftmul@f1,f
  8826  070F  0B89               	decfsz	9,f
  8827  0710  2F0C               	goto	u4565
  8828  0711  3001               	movlw	1
  8829  0712                     u4575:	
  8830  0712  35CF               	lslf	___ftmul@f2,f
  8831  0713  0DD0               	rlf	___ftmul@f2+1,f
  8832  0714  0DD1               	rlf	___ftmul@f2+2,f
  8833  0715  0B89               	decfsz	9,f
  8834  0716  2F12               	goto	u4575
  8835  0717  3001               	movlw	1
  8836  0718  02D6               	subwf	___ftmul@cntr,f
  8837  0719  1D03               	btfss	3,2
  8838  071A  2F03               	goto	l4099
  8839  071B  3009               	movlw	9
  8840  071C  00FF               	movwf	127
  8841  071D  087F               	movf	127,w
  8842  071E  00D6               	movwf	___ftmul@cntr
  8843  071F                     l4111:	
  8844  071F  1C4C               	btfss	___ftmul@f1,0
  8845  0720  2F27               	goto	l4115
  8846  0721  084F               	movf	___ftmul@f2,w
  8847  0722  07D3               	addwf	___ftmul@f3_as_product,f
  8848  0723  0850               	movf	___ftmul@f2+1,w
  8849  0724  3DD4               	addwfc	___ftmul@f3_as_product+1,f
  8850  0725  0851               	movf	___ftmul@f2+2,w
  8851  0726  3DD5               	addwfc	___ftmul@f3_as_product+2,f
  8852  0727                     l4115:	
  8853  0727  3001               	movlw	1
  8854  0728                     u4605:	
  8855  0728  36CE               	lsrf	___ftmul@f1+2,f
  8856  0729  0CCD               	rrf	___ftmul@f1+1,f
  8857  072A  0CCC               	rrf	___ftmul@f1,f
  8858  072B  0B89               	decfsz	9,f
  8859  072C  2F28               	goto	u4605
  8860  072D  3001               	movlw	1
  8861  072E                     u4615:	
  8862  072E  36D5               	lsrf	___ftmul@f3_as_product+2,f
  8863  072F  0CD4               	rrf	___ftmul@f3_as_product+1,f
  8864  0730  0CD3               	rrf	___ftmul@f3_as_product,f
  8865  0731  0B89               	decfsz	9,f
  8866  0732  2F2E               	goto	u4615
  8867  0733  3001               	movlw	1
  8868  0734  02D6               	subwf	___ftmul@cntr,f
  8869  0735  1D03               	btfss	3,2
  8870  0736  2F1F               	goto	l4111
  8871  0737  0853               	movf	___ftmul@f3_as_product,w
  8872  0738  00A7               	movwf	___ftpack@arg
  8873  0739  0854               	movf	___ftmul@f3_as_product+1,w
  8874  073A  00A8               	movwf	___ftpack@arg+1
  8875  073B  0855               	movf	___ftmul@f3_as_product+2,w
  8876  073C  00A9               	movwf	___ftpack@arg+2
  8877  073D  0852               	movf	___ftmul@exp,w
  8878  073E  00FF               	movwf	127
  8879  073F  087F               	movf	127,w
  8880  0740  00AA               	movwf	___ftpack@exp
  8881  0741  0857               	movf	___ftmul@sign,w
  8882  0742  00FF               	movwf	127
  8883  0743  087F               	movf	127,w
  8884  0744  00AB               	movwf	___ftpack@sign
  8885  0745  318D  2550         	fcall	___ftpack
  8886  0747  0020               	movlb	0	; select bank0
  8887  0748  0827               	movf	?___ftpack,w
  8888  0749  00CC               	movwf	?___ftmul
  8889  074A  0828               	movf	?___ftpack+1,w
  8890  074B  00CD               	movwf	?___ftmul+1
  8891  074C  0829               	movf	?___ftpack+2,w
  8892  074D  00CE               	movwf	?___ftmul+2
  8893  074E  0008               	return
  8894  074F                     __end_of___ftmul:	
  8895                           
  8896                           	psect	text38
  8897  0B6F                     __ptext38:	
  8898 ;; *************** function ___ftge *****************
  8899 ;; Defined at:
  8900 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftge.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;  ff1             3    7[BANK0 ] float 
  8903 ;;  ff2             3   10[BANK0 ] float 
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;		None
  8906 ;; Return value:  Size  Location     Type
  8907 ;;		None               void
  8908 ;; Registers used:
  8909 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
  8910 ;; Tracked objects:
  8911 ;;		On entry : 0/0
  8912 ;;		On exit  : 0/0
  8913 ;;		Unchanged: 0/0
  8914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8915 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8919 ;;Total ram usage:        6 bytes
  8920 ;; Hardware stack levels used:    1
  8921 ;; Hardware stack levels required when called:    7
  8922 ;; This function calls:
  8923 ;;		Nothing
  8924 ;; This function is called by:
  8925 ;;		_ftoa
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           
  8930                           ;psect for function ___ftge
  8931  0B6F                     ___ftge:	
  8932                           
  8933                           ;incstack = 0
  8934                           ; Regs used in ___ftge: [wreg+status,2+status,0+btemp+9-btemp+11]
  8935  0B6F  0020               	movlb	0	; select bank0
  8936  0B70  1FA9               	btfss	___ftge@ff1+2,7
  8937  0B71  2B86               	goto	l4055
  8938  0B72  0927               	comf	___ftge@ff1,w
  8939  0B73  00FD               	movwf	125
  8940  0B74  0928               	comf	___ftge@ff1+1,w
  8941  0B75  00FE               	movwf	126
  8942  0B76  0929               	comf	___ftge@ff1+2,w
  8943  0B77  00FF               	movwf	127
  8944  0B78  0AFD               	incf	125,f
  8945  0B79  1903               	skipnz
  8946  0B7A  0AFE               	incf	126,f
  8947  0B7B  1903               	skipnz
  8948  0B7C  0AFF               	incf	127,f
  8949  0B7D  3000               	movlw	0
  8950  0B7E  077D               	addwf	125,w
  8951  0B7F  00A7               	movwf	___ftge@ff1
  8952  0B80  3000               	movlw	0
  8953  0B81  3D7E               	addwfc	126,w
  8954  0B82  00A8               	movwf	___ftge@ff1+1
  8955  0B83  3080               	movlw	128
  8956  0B84  3D7F               	addwfc	127,w
  8957  0B85  00A9               	movwf	___ftge@ff1+2
  8958  0B86                     l4055:	
  8959  0B86  1FAC               	btfss	___ftge@ff2+2,7
  8960  0B87  2B9C               	goto	l4059
  8961  0B88  092A               	comf	___ftge@ff2,w
  8962  0B89  00FD               	movwf	125
  8963  0B8A  092B               	comf	___ftge@ff2+1,w
  8964  0B8B  00FE               	movwf	126
  8965  0B8C  092C               	comf	___ftge@ff2+2,w
  8966  0B8D  00FF               	movwf	127
  8967  0B8E  0AFD               	incf	125,f
  8968  0B8F  1903               	skipnz
  8969  0B90  0AFE               	incf	126,f
  8970  0B91  1903               	skipnz
  8971  0B92  0AFF               	incf	127,f
  8972  0B93  3000               	movlw	0
  8973  0B94  077D               	addwf	125,w
  8974  0B95  00AA               	movwf	___ftge@ff2
  8975  0B96  3000               	movlw	0
  8976  0B97  3D7E               	addwfc	126,w
  8977  0B98  00AB               	movwf	___ftge@ff2+1
  8978  0B99  3080               	movlw	128
  8979  0B9A  3D7F               	addwfc	127,w
  8980  0B9B  00AC               	movwf	___ftge@ff2+2
  8981  0B9C                     l4059:	
  8982  0B9C  3080               	movlw	128
  8983  0B9D  06A9               	xorwf	___ftge@ff1+2,f
  8984  0B9E  3080               	movlw	128
  8985  0B9F  06AC               	xorwf	___ftge@ff2+2,f
  8986  0BA0  082C               	movf	___ftge@ff2+2,w
  8987  0BA1  0229               	subwf	___ftge@ff1+2,w
  8988  0BA2  1D03               	skipz
  8989  0BA3  0008               	return
  8990  0BA4  082B               	movf	___ftge@ff2+1,w
  8991  0BA5  0228               	subwf	___ftge@ff1+1,w
  8992  0BA6  1D03               	skipz
  8993  0BA7  0008               	return
  8994  0BA8  082A               	movf	___ftge@ff2,w
  8995  0BA9  0227               	subwf	___ftge@ff1,w
  8996  0BAA  0008               	return
  8997  0BAB                     __end_of___ftge:	
  8998                           
  8999                           	psect	text39
  9000  0F5B                     __ptext39:	
  9001 ;; *************** function _getADCValue *****************
  9002 ;; Defined at:
  9003 ;;		line 31 in file "main.c"
  9004 ;; Parameters:    Size  Location     Type
  9005 ;;  channel         1    wreg     unsigned char 
  9006 ;; Auto vars:     Size  Location     Type
  9007 ;;  channel         1   39[BANK0 ] unsigned char 
  9008 ;;  adcSum          3   41[BANK0 ] float 
  9009 ;;  adcLoop         1   40[BANK0 ] unsigned char 
  9010 ;; Return value:  Size  Location     Type
  9011 ;;                  3   35[BANK0 ] float 
  9012 ;; Registers used:
  9013 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9014 ;; Tracked objects:
  9015 ;;		On entry : 0/0
  9016 ;;		On exit  : 0/0
  9017 ;;		Unchanged: 0/0
  9018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9019 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9020 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9023 ;;Total ram usage:        9 bytes
  9024 ;; Hardware stack levels used:    1
  9025 ;; Hardware stack levels required when called:    9
  9026 ;; This function calls:
  9027 ;;		___awtoft
  9028 ;;		___ftadd
  9029 ;;		___ftdiv
  9030 ;;		_sleepMs
  9031 ;; This function is called by:
  9032 ;;		_loop
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           
  9037                           ;psect for function _getADCValue
  9038  0F5B                     _getADCValue:	
  9039                           
  9040                           ;incstack = 0
  9041                           ; Regs used in _getADCValue: [wreg-fsr0h+status,2-btemp+0+btemp+9-btemp+11+pclath+cstack
      +                          ]
  9042                           ;getADCValue@channel stored from wreg
  9043  0F5B  0020               	movlb	0	; select bank0
  9044  0F5C  00C7               	movwf	getADCValue@channel
  9045                           
  9046                           ;main.c: 34: float adcSum = 0;
  9047  0F5D  3000               	movlw	0
  9048  0F5E  00C9               	movwf	getADCValue@adcSum
  9049  0F5F  3000               	movlw	0
  9050  0F60  00CA               	movwf	getADCValue@adcSum+1
  9051  0F61  3000               	movlw	0
  9052  0F62  00CB               	movwf	getADCValue@adcSum+2
  9053                           
  9054                           ;main.c: 35: unsigned char adcLoop = 111;
  9055  0F63  306F               	movlw	111
  9056  0F64  00FF               	movwf	127
  9057  0F65  087F               	movf	127,w
  9058  0F66  00C8               	movwf	getADCValue@adcLoop
  9059                           
  9060                           ;main.c: 37: ADCON0bits.CHS = channel;
  9061  0F67  0847               	movf	getADCValue@channel,w
  9062  0F68  00C6               	movwf	??_getADCValue
  9063  0F69  0DC6               	rlf	??_getADCValue,f
  9064  0F6A  0DC6               	rlf	??_getADCValue,f
  9065  0F6B  0021               	movlb	1	; select bank1
  9066  0F6C  081D               	movf	29,w	;volatile
  9067  0F6D  0020               	movlb	0	; select bank0
  9068  0F6E  0646               	xorwf	??_getADCValue,w
  9069  0F6F  3903               	andlw	-253
  9070  0F70  0646               	xorwf	??_getADCValue,w
  9071  0F71  0021               	movlb	1	; select bank1
  9072  0F72  009D               	movwf	29	;volatile
  9073                           
  9074                           ;main.c: 38: FVRCONbits.FVREN = 1;
  9075  0F73  0022               	movlb	2	; select bank2
  9076  0F74  1797               	bsf	23,7	;volatile
  9077                           
  9078                           ;main.c: 39: ADCON0bits.ADON = 1;
  9079  0F75  0021               	movlb	1	; select bank1
  9080  0F76  141D               	bsf	29,0	;volatile
  9081                           
  9082                           ;main.c: 41: sleepMs(1);
  9083  0F77  3001               	movlw	1
  9084  0F78  00F0               	movwf	sleepMs@milliseconds
  9085  0F79  3000               	movlw	0
  9086  0F7A  00F1               	movwf	sleepMs@milliseconds+1
  9087  0F7B  318A  2275  318F   	fcall	_sleepMs
  9088  0F7E                     l4421:	
  9089                           ;main.c: 43: while (adcLoop--){
  9090                           
  9091  0F7E  3001               	movlw	1
  9092  0F7F  0020               	movlb	0	; select bank0
  9093  0F80  02C8               	subwf	getADCValue@adcLoop,f
  9094  0F81  0A48               	incf	getADCValue@adcLoop,w
  9095  0F82  1903               	btfsc	3,2
  9096  0F83  2FB7               	goto	l176
  9097                           
  9098                           ;main.c: 45: ADCON0bits.ADGO = 1;
  9099  0F84  0021               	movlb	1	; select bank1
  9100  0F85  149D               	bsf	29,1	;volatile
  9101  0F86                     l4417:	
  9102                           ;main.c: 47: while (ADCON0bits.ADGO){
  9103                           
  9104  0F86  0021               	movlb	1	; select bank1
  9105  0F87  1C9D               	btfss	29,1	;volatile
  9106  0F88  2F91               	goto	l4419
  9107                           
  9108                           ;main.c: 48: sleepMs(1);
  9109  0F89  3001               	movlw	1
  9110  0F8A  00F0               	movwf	sleepMs@milliseconds
  9111  0F8B  3000               	movlw	0
  9112  0F8C  00F1               	movwf	sleepMs@milliseconds+1
  9113  0F8D  318A  2275  318F   	fcall	_sleepMs
  9114  0F90  2F86               	goto	l4417
  9115  0F91                     l4419:	
  9116                           
  9117                           ;main.c: 49: };main.c: 51: adcSum+= (ADRESL | (ADRESH << 8));
  9118  0F91  081C               	movf	28,w	;volatile
  9119  0F92  00FE               	movwf	126
  9120  0F93  01FF               	clrf	127
  9121  0F94  087E               	movf	126,w
  9122  0F95  00FF               	movwf	127
  9123  0F96  01FE               	clrf	126
  9124  0F97  087E               	movf	126,w
  9125  0F98  041B               	iorwf	27,w	;volatile
  9126  0F99  00F0               	movwf	___awtoft@c
  9127  0F9A  087F               	movf	127,w
  9128  0F9B  00F1               	movwf	___awtoft@c+1
  9129  0F9C  3189  21AD  318F   	fcall	___awtoft
  9130  0F9F  0870               	movf	?___awtoft,w
  9131  0FA0  0020               	movlb	0	; select bank0
  9132  0FA1  00AC               	movwf	___ftadd@f1
  9133  0FA2  0871               	movf	?___awtoft+1,w
  9134  0FA3  00AD               	movwf	___ftadd@f1+1
  9135  0FA4  0872               	movf	?___awtoft+2,w
  9136  0FA5  00AE               	movwf	___ftadd@f1+2
  9137  0FA6  0849               	movf	getADCValue@adcSum,w
  9138  0FA7  00AF               	movwf	___ftadd@f2
  9139  0FA8  084A               	movf	getADCValue@adcSum+1,w
  9140  0FA9  00B0               	movwf	___ftadd@f2+1
  9141  0FAA  084B               	movf	getADCValue@adcSum+2,w
  9142  0FAB  00B1               	movwf	___ftadd@f2+2
  9143  0FAC  3183  2333  318F   	fcall	___ftadd
  9144  0FAF  0020               	movlb	0	; select bank0
  9145  0FB0  082C               	movf	?___ftadd,w
  9146  0FB1  00C9               	movwf	getADCValue@adcSum
  9147  0FB2  082D               	movf	?___ftadd+1,w
  9148  0FB3  00CA               	movwf	getADCValue@adcSum+1
  9149  0FB4  082E               	movf	?___ftadd+2,w
  9150  0FB5  00CB               	movwf	getADCValue@adcSum+2
  9151  0FB6  2F7E               	goto	l4421
  9152  0FB7                     l176:	
  9153                           
  9154                           ;main.c: 53: };main.c: 55: FVRCONbits.FVREN = 0;
  9155  0FB7  0022               	movlb	2	; select bank2
  9156  0FB8  1397               	bcf	23,7	;volatile
  9157                           
  9158                           ;main.c: 56: ADCON0bits.ADON = 0;
  9159  0FB9  0021               	movlb	1	; select bank1
  9160  0FBA  101D               	bcf	29,0	;volatile
  9161                           
  9162                           ;main.c: 59: adcSum/= 111;
  9163  0FBB  3000               	movlw	0
  9164  0FBC  0020               	movlb	0	; select bank0
  9165  0FBD  00B6               	movwf	___ftdiv@f2
  9166  0FBE  30DE               	movlw	222
  9167  0FBF  00B7               	movwf	___ftdiv@f2+1
  9168  0FC0  3042               	movlw	66
  9169  0FC1  00B8               	movwf	___ftdiv@f2+2
  9170  0FC2  0849               	movf	getADCValue@adcSum,w
  9171  0FC3  00B9               	movwf	___ftdiv@f1
  9172  0FC4  084A               	movf	getADCValue@adcSum+1,w
  9173  0FC5  00BA               	movwf	___ftdiv@f1+1
  9174  0FC6  084B               	movf	getADCValue@adcSum+2,w
  9175  0FC7  00BB               	movwf	___ftdiv@f1+2
  9176  0FC8  3187  274F  318F   	fcall	___ftdiv
  9177  0FCB  0020               	movlb	0	; select bank0
  9178  0FCC  0836               	movf	?___ftdiv,w
  9179  0FCD  00C9               	movwf	getADCValue@adcSum
  9180  0FCE  0837               	movf	?___ftdiv+1,w
  9181  0FCF  00CA               	movwf	getADCValue@adcSum+1
  9182  0FD0  0838               	movf	?___ftdiv+2,w
  9183  0FD1  00CB               	movwf	getADCValue@adcSum+2
  9184                           
  9185                           ;main.c: 62: if (ADCON1bits.ADPREF == 0b11){
  9186  0FD2  0021               	movlb	1	; select bank1
  9187  0FD3  081E               	movf	30,w	;volatile
  9188  0FD4  3903               	andlw	3
  9189  0FD5  3A03               	xorlw	3
  9190  0FD6  1903               	btfsc	3,2
  9191  0FD7  2FF1               	goto	l4433
  9192  0FD8  2FF8               	goto	l4435
  9193  0FD9                     l4429:	
  9194                           ;main.c: 64: case 0b10:
  9195                           
  9196                           ;main.c: 63: switch (FVRCONbits.ADFVR){
  9197                           
  9198                           
  9199                           ;main.c: 65: adcSum/= 500;
  9200  0FD9  3000               	movlw	0
  9201  0FDA  0020               	movlb	0	; select bank0
  9202  0FDB  00B6               	movwf	___ftdiv@f2
  9203  0FDC  30FA               	movlw	250
  9204  0FDD  00B7               	movwf	___ftdiv@f2+1
  9205  0FDE  3043               	movlw	67
  9206  0FDF  00B8               	movwf	___ftdiv@f2+2
  9207  0FE0  0849               	movf	getADCValue@adcSum,w
  9208  0FE1  00B9               	movwf	___ftdiv@f1
  9209  0FE2  084A               	movf	getADCValue@adcSum+1,w
  9210  0FE3  00BA               	movwf	___ftdiv@f1+1
  9211  0FE4  084B               	movf	getADCValue@adcSum+2,w
  9212  0FE5  00BB               	movwf	___ftdiv@f1+2
  9213  0FE6  3187  274F  318F   	fcall	___ftdiv
  9214  0FE9  0020               	movlb	0	; select bank0
  9215  0FEA  0836               	movf	?___ftdiv,w
  9216  0FEB  00C9               	movwf	getADCValue@adcSum
  9217  0FEC  0837               	movf	?___ftdiv+1,w
  9218  0FED  00CA               	movwf	getADCValue@adcSum+1
  9219  0FEE  0838               	movf	?___ftdiv+2,w
  9220  0FEF  00CB               	movwf	getADCValue@adcSum+2
  9221                           
  9222                           ;main.c: 67: }
  9223                           
  9224                           ;main.c: 66: break;
  9225  0FF0  2FF8               	goto	l4435
  9226  0FF1                     l4433:	
  9227  0FF1  0022               	movlb	2	; select bank2
  9228  0FF2  0817               	movf	23,w	;volatile
  9229  0FF3  3903               	andlw	3
  9230                           
  9231                           ; Switch size 1, requested type "space"
  9232                           ; Number of cases is 1, Range of values is 2 to 2
  9233                           ; switch strategies available:
  9234                           ; Name         Instructions Cycles
  9235                           ; simple_byte            4     3 (average)
  9236                           ; direct_byte           11     9 (fixed)
  9237                           ; jumptable            263     9 (fixed)
  9238                           ;	Chosen strategy is simple_byte
  9239  0FF4  3A02               	xorlw	2	; case 2
  9240  0FF5  1903               	skipnz
  9241  0FF6  2FD9               	goto	l4429
  9242  0FF7  2FF8               	goto	l4435
  9243  0FF8                     l4435:	
  9244                           
  9245                           ;main.c: 68: };main.c: 71: return adcSum;
  9246  0FF8  0020               	movlb	0	; select bank0
  9247  0FF9  0849               	movf	getADCValue@adcSum,w
  9248  0FFA  00C3               	movwf	?_getADCValue
  9249  0FFB  084A               	movf	getADCValue@adcSum+1,w
  9250  0FFC  00C4               	movwf	?_getADCValue+1
  9251  0FFD  084B               	movf	getADCValue@adcSum+2,w
  9252  0FFE  00C5               	movwf	?_getADCValue+2
  9253  0FFF  0008               	return
  9254  1000                     __end_of_getADCValue:	
  9255                           
  9256                           	psect	text40
  9257  0A75                     __ptext40:	
  9258 ;; *************** function _sleepMs *****************
  9259 ;; Defined at:
  9260 ;;		line 37 in file "interface.c"
  9261 ;; Parameters:    Size  Location     Type
  9262 ;;  milliseconds    2    0[COMMON] unsigned int 
  9263 ;; Auto vars:     Size  Location     Type
  9264 ;;  wdtps           1    3[COMMON] unsigned char 
  9265 ;; Return value:  Size  Location     Type
  9266 ;;                  1    wreg      void 
  9267 ;; Registers used:
  9268 ;;		wreg, status,2, status,0, btemp+10, btemp+11, pclath, cstack
  9269 ;; Tracked objects:
  9270 ;;		On entry : 0/0
  9271 ;;		On exit  : 0/0
  9272 ;;		Unchanged: 0/0
  9273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9274 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;Total ram usage:        4 bytes
  9279 ;; Hardware stack levels used:    1
  9280 ;; Hardware stack levels required when called:    8
  9281 ;; This function calls:
  9282 ;;		_resetWDT
  9283 ;; This function is called by:
  9284 ;;		_getADCValue
  9285 ;;		_sleepListren
  9286 ;;		_hcsr04GetAerage
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           
  9291                           ;psect for function _sleepMs
  9292  0A75                     _sleepMs:	
  9293                           
  9294                           ;interface.c: 39: unsigned char wdtps;;interface.c: 40: for (wdtps = 0; wdtps <= 0b10010
      +                          ; wdtps++){
  9295                           
  9296                           ;incstack = 0
  9297                           ; Regs used in _sleepMs: [wreg+status,2+status,0+btemp+10+btemp+11+pclath+cstack]
  9298  0A75  01F3               	clrf	sleepMs@wdtps
  9299  0A76  3013               	movlw	19
  9300  0A77  0273               	subwf	sleepMs@wdtps,w
  9301  0A78  1803               	btfsc	3,0
  9302  0A79  2A9E               	goto	l3887
  9303  0A7A                     l3871:	
  9304                           
  9305                           ;interface.c: 41: if ((milliseconds >> wdtps) & 0b1){
  9306  0A7A  0871               	movf	sleepMs@milliseconds+1,w
  9307  0A7B  00FF               	movwf	127
  9308  0A7C  0870               	movf	sleepMs@milliseconds,w
  9309  0A7D  00FE               	movwf	126
  9310  0A7E  0A73               	incf	sleepMs@wdtps,w
  9311  0A7F  2A82               	goto	u4164
  9312  0A80                     u4165:	
  9313  0A80  36FF               	lsrf	127,f
  9314  0A81  0CFE               	rrf	126,f
  9315  0A82                     u4164:	
  9316  0A82  0B89               	decfsz	9,f
  9317  0A83  2A80               	goto	u4165
  9318  0A84  1C7E               	btfss	126,0
  9319  0A85  2A96               	goto	l3883
  9320  0A86                     l3873:	
  9321                           ;interface.c: 42: START_SLEEP:
  9322                           
  9323                           
  9324                           ;interface.c: 43: WDTCONbits.WDTPS = wdtps;
  9325  0A86  0873               	movf	sleepMs@wdtps,w
  9326  0A87  00F2               	movwf	??_sleepMs
  9327  0A88  0DF2               	rlf	??_sleepMs,f
  9328  0A89  0021               	movlb	1	; select bank1
  9329  0A8A  0817               	movf	23,w	;volatile
  9330  0A8B  0672               	xorwf	??_sleepMs,w
  9331  0A8C  39C1               	andlw	-63
  9332  0A8D  0672               	xorwf	??_sleepMs,w
  9333  0A8E  0097               	movwf	23	;volatile
  9334  0A8F  0063               	sleep	;# 
  9335                           
  9336                           ;interface.c: 45: __nop();
  9337  0A90  0000               	nop
  9338                           
  9339                           ;interface.c: 46: __nop();
  9340  0A91  0000               	nop
  9341                           
  9342                           ;interface.c: 48: if( STATUSbits.nTO || STATUSbits.nPD){
  9343  0A92  0020               	movlb	0	; select bank0
  9344  0A93  1E03               	btfss	3,4	;volatile
  9345  0A94  1983               	btfsc	3,3	;volatile
  9346                           
  9347                           ;interface.c: 49: goto START_SLEEP;
  9348  0A95  2A86               	goto	l3873
  9349  0A96                     l3883:	
  9350  0A96  3001               	movlw	1
  9351  0A97  00FF               	movwf	127
  9352  0A98  087F               	movf	127,w
  9353  0A99  07F3               	addwf	sleepMs@wdtps,f
  9354  0A9A  3013               	movlw	19
  9355  0A9B  0273               	subwf	sleepMs@wdtps,w
  9356  0A9C  1C03               	skipc
  9357  0A9D  2A7A               	goto	l3871
  9358  0A9E                     l3887:	
  9359                           
  9360                           ;interface.c: 50: };interface.c: 51: };interface.c: 52: };interface.c: 54: resetWDT();
  9361  0A9E  3187  27F8         	fcall	_resetWDT
  9362  0AA0  0008               	return
  9363  0AA1                     __end_of_sleepMs:	
  9364                           
  9365                           	psect	text41
  9366  07F8                     __ptext41:	
  9367 ;; *************** function _resetWDT *****************
  9368 ;; Defined at:
  9369 ;;		line 32 in file "interface.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;		None
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;		None
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  1    wreg      void 
  9376 ;; Registers used:
  9377 ;;		wreg, status,2, status,0
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;Total ram usage:        0 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    7
  9390 ;; This function calls:
  9391 ;;		Nothing
  9392 ;; This function is called by:
  9393 ;;		_sleepMs
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           
  9398                           ;psect for function _resetWDT
  9399  07F8                     _resetWDT:	
  9400                           
  9401                           ;interface.c: 33: WDTCONbits.WDTPS = 0b01100;
  9402                           
  9403                           ;incstack = 0
  9404                           ; Regs used in _resetWDT: [wreg+status,2+status,0]
  9405  07F8  0021               	movlb	1	; select bank1
  9406  07F9  0817               	movf	23,w	;volatile
  9407  07FA  39C1               	andlw	-63
  9408  07FB  3818               	iorlw	24
  9409  07FC  0097               	movwf	23	;volatile
  9410  07FD  0064               	clrwdt	;# 
  9411  07FE  0008               	return
  9412  07FF                     __end_of_resetWDT:	
  9413                           
  9414                           	psect	text42
  9415  074F                     __ptext42:	
  9416 ;; *************** function ___ftdiv *****************
  9417 ;; Defined at:
  9418 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftdiv.c"
  9419 ;; Parameters:    Size  Location     Type
  9420 ;;  f2              3   22[BANK0 ] float 
  9421 ;;  f1              3   25[BANK0 ] float 
  9422 ;; Auto vars:     Size  Location     Type
  9423 ;;  f3              3   30[BANK0 ] float 
  9424 ;;  sign            1   34[BANK0 ] unsigned char 
  9425 ;;  exp             1   33[BANK0 ] unsigned char 
  9426 ;;  cntr            1   29[BANK0 ] unsigned char 
  9427 ;; Return value:  Size  Location     Type
  9428 ;;                  3   22[BANK0 ] float 
  9429 ;; Registers used:
  9430 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9431 ;; Tracked objects:
  9432 ;;		On entry : 0/0
  9433 ;;		On exit  : 0/0
  9434 ;;		Unchanged: 0/0
  9435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9436 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;Total ram usage:       13 bytes
  9441 ;; Hardware stack levels used:    1
  9442 ;; Hardware stack levels required when called:    8
  9443 ;; This function calls:
  9444 ;;		___ftpack
  9445 ;; This function is called by:
  9446 ;;		_getADCValue
  9447 ;;		_loop
  9448 ;;		_hcsr04GetAerage
  9449 ;; This function uses a non-reentrant model
  9450 ;;
  9451                           
  9452                           
  9453                           ;psect for function ___ftdiv
  9454  074F                     ___ftdiv:	
  9455                           
  9456                           ;incstack = 0
  9457                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9458  074F  0020               	movlb	0	; select bank0
  9459  0750  0839               	movf	___ftdiv@f1,w
  9460  0751  00FD               	movwf	125
  9461  0752  083A               	movf	___ftdiv@f1+1,w
  9462  0753  00FE               	movwf	126
  9463  0754  083B               	movf	___ftdiv@f1+2,w
  9464  0755  00FF               	movwf	127
  9465  0756  1003               	clrc
  9466  0757  0D7E               	rlf	126,w
  9467  0758  0D7F               	rlf	127,w
  9468  0759  00FF               	movwf	127
  9469  075A  087F               	movf	127,w
  9470  075B  00C1               	movwf	___ftdiv@exp
  9471  075C  0841               	movf	___ftdiv@exp,w
  9472  075D  1D03               	btfss	3,2
  9473  075E  2F66               	goto	l4353
  9474  075F  3000               	movlw	0
  9475  0760  00B6               	movwf	?___ftdiv
  9476  0761  3000               	movlw	0
  9477  0762  00B7               	movwf	?___ftdiv+1
  9478  0763  3000               	movlw	0
  9479  0764  00B8               	movwf	?___ftdiv+2
  9480  0765  0008               	return
  9481  0766                     l4353:	
  9482  0766  0836               	movf	___ftdiv@f2,w
  9483  0767  00FD               	movwf	125
  9484  0768  0837               	movf	___ftdiv@f2+1,w
  9485  0769  00FE               	movwf	126
  9486  076A  0838               	movf	___ftdiv@f2+2,w
  9487  076B  00FF               	movwf	127
  9488  076C  1003               	clrc
  9489  076D  0D7E               	rlf	126,w
  9490  076E  0D7F               	rlf	127,w
  9491  076F  00FF               	movwf	127
  9492  0770  087F               	movf	127,w
  9493  0771  00C2               	movwf	___ftdiv@sign
  9494  0772  0842               	movf	___ftdiv@sign,w
  9495  0773  1D03               	btfss	3,2
  9496  0774  2F7C               	goto	l4359
  9497  0775  3000               	movlw	0
  9498  0776  00B6               	movwf	?___ftdiv
  9499  0777  3000               	movlw	0
  9500  0778  00B7               	movwf	?___ftdiv+1
  9501  0779  3000               	movlw	0
  9502  077A  00B8               	movwf	?___ftdiv+2
  9503  077B  0008               	return
  9504  077C                     l4359:	
  9505  077C  3000               	movlw	0
  9506  077D  00BE               	movwf	___ftdiv@f3
  9507  077E  3000               	movlw	0
  9508  077F  00BF               	movwf	___ftdiv@f3+1
  9509  0780  3000               	movlw	0
  9510  0781  00C0               	movwf	___ftdiv@f3+2
  9511  0782  3089               	movlw	137
  9512  0783  0742               	addwf	___ftdiv@sign,w
  9513  0784  00BC               	movwf	??___ftdiv
  9514  0785  083C               	movf	??___ftdiv,w
  9515  0786  02C1               	subwf	___ftdiv@exp,f
  9516  0787  0839               	movf	___ftdiv@f1,w
  9517  0788  00FD               	movwf	125
  9518  0789  083A               	movf	___ftdiv@f1+1,w
  9519  078A  00FE               	movwf	126
  9520  078B  083B               	movf	___ftdiv@f1+2,w
  9521  078C  00FF               	movwf	127
  9522  078D  3010               	movlw	16
  9523  078E                     u4935:	
  9524  078E  36FF               	lsrf	127,f
  9525  078F  0CFE               	rrf	126,f
  9526  0790  0CFD               	rrf	125,f
  9527  0791  0B89               	decfsz	9,f
  9528  0792  2F8E               	goto	u4935
  9529  0793  087D               	movf	125,w
  9530  0794  00FF               	movwf	127
  9531  0795  087F               	movf	127,w
  9532  0796  00C2               	movwf	___ftdiv@sign
  9533  0797  0836               	movf	___ftdiv@f2,w
  9534  0798  00FD               	movwf	125
  9535  0799  0837               	movf	___ftdiv@f2+1,w
  9536  079A  00FE               	movwf	126
  9537  079B  0838               	movf	___ftdiv@f2+2,w
  9538  079C  00FF               	movwf	127
  9539  079D  3010               	movlw	16
  9540  079E                     u4945:	
  9541  079E  36FF               	lsrf	127,f
  9542  079F  0CFE               	rrf	126,f
  9543  07A0  0CFD               	rrf	125,f
  9544  07A1  0B89               	decfsz	9,f
  9545  07A2  2F9E               	goto	u4945
  9546  07A3  087D               	movf	125,w
  9547  07A4  00FF               	movwf	127
  9548  07A5  087F               	movf	127,w
  9549  07A6  06C2               	xorwf	___ftdiv@sign,f
  9550  07A7  3080               	movlw	128
  9551  07A8  00FF               	movwf	127
  9552  07A9  087F               	movf	127,w
  9553  07AA  05C2               	andwf	___ftdiv@sign,f
  9554  07AB  17BA               	bsf	___ftdiv@f1+1,7
  9555  07AC  30FF               	movlw	255
  9556  07AD  05B9               	andwf	___ftdiv@f1,f
  9557  07AE  30FF               	movlw	255
  9558  07AF  05BA               	andwf	___ftdiv@f1+1,f
  9559  07B0  3000               	movlw	0
  9560  07B1  05BB               	andwf	___ftdiv@f1+2,f
  9561  07B2  17B7               	bsf	___ftdiv@f2+1,7
  9562  07B3  30FF               	movlw	255
  9563  07B4  05B6               	andwf	___ftdiv@f2,f
  9564  07B5  30FF               	movlw	255
  9565  07B6  05B7               	andwf	___ftdiv@f2+1,f
  9566  07B7  3000               	movlw	0
  9567  07B8  05B8               	andwf	___ftdiv@f2+2,f
  9568  07B9  3018               	movlw	24
  9569  07BA  00FF               	movwf	127
  9570  07BB  087F               	movf	127,w
  9571  07BC  00BD               	movwf	___ftdiv@cntr
  9572  07BD                     l4377:	
  9573  07BD  3001               	movlw	1
  9574  07BE                     u4955:	
  9575  07BE  35BE               	lslf	___ftdiv@f3,f
  9576  07BF  0DBF               	rlf	___ftdiv@f3+1,f
  9577  07C0  0DC0               	rlf	___ftdiv@f3+2,f
  9578  07C1  0B89               	decfsz	9,f
  9579  07C2  2FBE               	goto	u4955
  9580  07C3  0838               	movf	___ftdiv@f2+2,w
  9581  07C4  023B               	subwf	___ftdiv@f1+2,w
  9582  07C5  1D03               	skipz
  9583  07C6  2FCD               	goto	u4965
  9584  07C7  0837               	movf	___ftdiv@f2+1,w
  9585  07C8  023A               	subwf	___ftdiv@f1+1,w
  9586  07C9  1D03               	skipz
  9587  07CA  2FCD               	goto	u4965
  9588  07CB  0836               	movf	___ftdiv@f2,w
  9589  07CC  0239               	subwf	___ftdiv@f1,w
  9590  07CD                     u4965:	
  9591  07CD  1C03               	skipc
  9592  07CE  2FD6               	goto	l4385
  9593  07CF  0836               	movf	___ftdiv@f2,w
  9594  07D0  02B9               	subwf	___ftdiv@f1,f
  9595  07D1  0837               	movf	___ftdiv@f2+1,w
  9596  07D2  3BBA               	subwfb	___ftdiv@f1+1,f
  9597  07D3  0838               	movf	___ftdiv@f2+2,w
  9598  07D4  3BBB               	subwfb	___ftdiv@f1+2,f
  9599  07D5  143E               	bsf	___ftdiv@f3,0
  9600  07D6                     l4385:	
  9601  07D6  3001               	movlw	1
  9602  07D7                     u4975:	
  9603  07D7  35B9               	lslf	___ftdiv@f1,f
  9604  07D8  0DBA               	rlf	___ftdiv@f1+1,f
  9605  07D9  0DBB               	rlf	___ftdiv@f1+2,f
  9606  07DA  0B89               	decfsz	9,f
  9607  07DB  2FD7               	goto	u4975
  9608  07DC  3001               	movlw	1
  9609  07DD  02BD               	subwf	___ftdiv@cntr,f
  9610  07DE  1D03               	btfss	3,2
  9611  07DF  2FBD               	goto	l4377
  9612  07E0  083E               	movf	___ftdiv@f3,w
  9613  07E1  00A7               	movwf	___ftpack@arg
  9614  07E2  083F               	movf	___ftdiv@f3+1,w
  9615  07E3  00A8               	movwf	___ftpack@arg+1
  9616  07E4  0840               	movf	___ftdiv@f3+2,w
  9617  07E5  00A9               	movwf	___ftpack@arg+2
  9618  07E6  0841               	movf	___ftdiv@exp,w
  9619  07E7  00FF               	movwf	127
  9620  07E8  087F               	movf	127,w
  9621  07E9  00AA               	movwf	___ftpack@exp
  9622  07EA  0842               	movf	___ftdiv@sign,w
  9623  07EB  00FF               	movwf	127
  9624  07EC  087F               	movf	127,w
  9625  07ED  00AB               	movwf	___ftpack@sign
  9626  07EE  318D  2550         	fcall	___ftpack
  9627  07F0  0020               	movlb	0	; select bank0
  9628  07F1  0827               	movf	?___ftpack,w
  9629  07F2  00B6               	movwf	?___ftdiv
  9630  07F3  0828               	movf	?___ftpack+1,w
  9631  07F4  00B7               	movwf	?___ftdiv+1
  9632  07F5  0829               	movf	?___ftpack+2,w
  9633  07F6  00B8               	movwf	?___ftdiv+2
  9634  07F7  0008               	return
  9635  07F8                     __end_of___ftdiv:	
  9636                           
  9637                           	psect	text43
  9638  0333                     __ptext43:	
  9639 ;; *************** function ___ftadd *****************
  9640 ;; Defined at:
  9641 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftadd.c"
  9642 ;; Parameters:    Size  Location     Type
  9643 ;;  f1              3   12[BANK0 ] float 
  9644 ;;  f2              3   15[BANK0 ] float 
  9645 ;; Auto vars:     Size  Location     Type
  9646 ;;  exp1            1   21[BANK0 ] unsigned char 
  9647 ;;  exp2            1   20[BANK0 ] unsigned char 
  9648 ;;  sign            1   19[BANK0 ] unsigned char 
  9649 ;; Return value:  Size  Location     Type
  9650 ;;                  3   12[BANK0 ] float 
  9651 ;; Registers used:
  9652 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9653 ;; Tracked objects:
  9654 ;;		On entry : 0/0
  9655 ;;		On exit  : 0/0
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9658 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;Total ram usage:       10 bytes
  9663 ;; Hardware stack levels used:    1
  9664 ;; Hardware stack levels required when called:    8
  9665 ;; This function calls:
  9666 ;;		___ftpack
  9667 ;; This function is called by:
  9668 ;;		_getADCValue
  9669 ;;		_loop
  9670 ;;		___ftsub
  9671 ;;		_hcsr04GetAerage
  9672 ;; This function uses a non-reentrant model
  9673 ;;
  9674                           
  9675                           
  9676                           ;psect for function ___ftadd
  9677  0333                     ___ftadd:	
  9678                           
  9679                           ;incstack = 0
  9680                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9681  0333  0020               	movlb	0	; select bank0
  9682  0334  082C               	movf	___ftadd@f1,w
  9683  0335  00FD               	movwf	125
  9684  0336  082D               	movf	___ftadd@f1+1,w
  9685  0337  00FE               	movwf	126
  9686  0338  082E               	movf	___ftadd@f1+2,w
  9687  0339  00FF               	movwf	127
  9688  033A  1003               	clrc
  9689  033B  0D7E               	rlf	126,w
  9690  033C  0D7F               	rlf	127,w
  9691  033D  00FF               	movwf	127
  9692  033E  087F               	movf	127,w
  9693  033F  00B5               	movwf	___ftadd@exp1
  9694  0340  082F               	movf	___ftadd@f2,w
  9695  0341  00FD               	movwf	125
  9696  0342  0830               	movf	___ftadd@f2+1,w
  9697  0343  00FE               	movwf	126
  9698  0344  0831               	movf	___ftadd@f2+2,w
  9699  0345  00FF               	movwf	127
  9700  0346  1003               	clrc
  9701  0347  0D7E               	rlf	126,w
  9702  0348  0D7F               	rlf	127,w
  9703  0349  00FF               	movwf	127
  9704  034A  087F               	movf	127,w
  9705  034B  00B4               	movwf	___ftadd@exp2
  9706  034C  0835               	movf	___ftadd@exp1,w
  9707  034D  1903               	btfsc	3,2
  9708  034E  2B5B               	goto	l3775
  9709  034F  0834               	movf	___ftadd@exp2,w
  9710  0350  0235               	subwf	___ftadd@exp1,w
  9711  0351  1803               	skipnc
  9712  0352  2B62               	goto	l3779
  9713  0353  0335               	decf	___ftadd@exp1,w
  9714  0354  3AFF               	xorlw	255
  9715  0355  0734               	addwf	___ftadd@exp2,w
  9716  0356  00B2               	movwf	??___ftadd
  9717  0357  3019               	movlw	25
  9718  0358  0232               	subwf	??___ftadd,w
  9719  0359  1C03               	skipc
  9720  035A  2B62               	goto	l3779
  9721  035B                     l3775:	
  9722  035B  082F               	movf	___ftadd@f2,w
  9723  035C  00AC               	movwf	?___ftadd
  9724  035D  0830               	movf	___ftadd@f2+1,w
  9725  035E  00AD               	movwf	?___ftadd+1
  9726  035F  0831               	movf	___ftadd@f2+2,w
  9727  0360  00AE               	movwf	?___ftadd+2
  9728  0361  0008               	return
  9729  0362                     l3779:	
  9730  0362  0834               	movf	___ftadd@exp2,w
  9731  0363  1903               	btfsc	3,2
  9732  0364  0008               	return
  9733  0365  0835               	movf	___ftadd@exp1,w
  9734  0366  0234               	subwf	___ftadd@exp2,w
  9735  0367  1803               	skipnc
  9736  0368  2B71               	goto	l3785
  9737  0369  0334               	decf	___ftadd@exp2,w
  9738  036A  3AFF               	xorlw	255
  9739  036B  0735               	addwf	___ftadd@exp1,w
  9740  036C  00B2               	movwf	??___ftadd
  9741  036D  3019               	movlw	25
  9742  036E  0232               	subwf	??___ftadd,w
  9743  036F  1803               	btfsc	3,0
  9744  0370  0008               	return
  9745  0371                     l3785:	
  9746  0371  3006               	movlw	6
  9747  0372  00FF               	movwf	127
  9748  0373  087F               	movf	127,w
  9749  0374  00B3               	movwf	___ftadd@sign
  9750  0375  1BAE               	btfsc	___ftadd@f1+2,7
  9751  0376  17B3               	bsf	___ftadd@sign,7
  9752  0377  1BB1               	btfsc	___ftadd@f2+2,7
  9753  0378  1733               	bsf	___ftadd@sign,6
  9754  0379  17AD               	bsf	___ftadd@f1+1,7
  9755  037A  30FF               	movlw	255
  9756  037B  05AC               	andwf	___ftadd@f1,f
  9757  037C  30FF               	movlw	255
  9758  037D  05AD               	andwf	___ftadd@f1+1,f
  9759  037E  3000               	movlw	0
  9760  037F  05AE               	andwf	___ftadd@f1+2,f
  9761  0380  17B0               	bsf	___ftadd@f2+1,7
  9762  0381  30FF               	movlw	255
  9763  0382  05AF               	andwf	___ftadd@f2,f
  9764  0383  30FF               	movlw	255
  9765  0384  05B0               	andwf	___ftadd@f2+1,f
  9766  0385  3000               	movlw	0
  9767  0386  05B1               	andwf	___ftadd@f2+2,f
  9768  0387  0834               	movf	___ftadd@exp2,w
  9769  0388  0235               	subwf	___ftadd@exp1,w
  9770  0389  1803               	skipnc
  9771  038A  2BAD               	goto	l3809
  9772  038B                     l3797:	
  9773  038B  3001               	movlw	1
  9774  038C                     u3955:	
  9775  038C  35AF               	lslf	___ftadd@f2,f
  9776  038D  0DB0               	rlf	___ftadd@f2+1,f
  9777  038E  0DB1               	rlf	___ftadd@f2+2,f
  9778  038F  0B89               	decfsz	9,f
  9779  0390  2B8C               	goto	u3955
  9780  0391  3001               	movlw	1
  9781  0392  02B4               	subwf	___ftadd@exp2,f
  9782  0393  0834               	movf	___ftadd@exp2,w
  9783  0394  0635               	xorwf	___ftadd@exp1,w
  9784  0395  1903               	skipnz
  9785  0396  2BA8               	goto	l3807
  9786  0397  3001               	movlw	1
  9787  0398  02B3               	subwf	___ftadd@sign,f
  9788  0399  0833               	movf	___ftadd@sign,w
  9789  039A  3907               	andlw	7
  9790  039B  1903               	btfsc	3,2
  9791  039C  2BA8               	goto	l3807
  9792  039D  2B8B               	goto	l3797
  9793  039E                     l3803:	
  9794  039E  3001               	movlw	1
  9795  039F                     u3985:	
  9796  039F  36AE               	lsrf	___ftadd@f1+2,f
  9797  03A0  0CAD               	rrf	___ftadd@f1+1,f
  9798  03A1  0CAC               	rrf	___ftadd@f1,f
  9799  03A2  0B89               	decfsz	9,f
  9800  03A3  2B9F               	goto	u3985
  9801  03A4  3001               	movlw	1
  9802  03A5  00FF               	movwf	127
  9803  03A6  087F               	movf	127,w
  9804  03A7  07B5               	addwf	___ftadd@exp1,f
  9805  03A8                     l3807:	
  9806  03A8  0835               	movf	___ftadd@exp1,w
  9807  03A9  0634               	xorwf	___ftadd@exp2,w
  9808  03AA  1903               	btfsc	3,2
  9809  03AB  2BD2               	goto	l773
  9810  03AC  2B9E               	goto	l3803
  9811  03AD                     l3809:	
  9812  03AD  0835               	movf	___ftadd@exp1,w
  9813  03AE  0234               	subwf	___ftadd@exp2,w
  9814  03AF  1803               	skipnc
  9815  03B0  2BD2               	goto	l773
  9816  03B1                     l3811:	
  9817  03B1  3001               	movlw	1
  9818  03B2                     u4015:	
  9819  03B2  35AC               	lslf	___ftadd@f1,f
  9820  03B3  0DAD               	rlf	___ftadd@f1+1,f
  9821  03B4  0DAE               	rlf	___ftadd@f1+2,f
  9822  03B5  0B89               	decfsz	9,f
  9823  03B6  2BB2               	goto	u4015
  9824  03B7  3001               	movlw	1
  9825  03B8  02B5               	subwf	___ftadd@exp1,f
  9826  03B9  0834               	movf	___ftadd@exp2,w
  9827  03BA  0635               	xorwf	___ftadd@exp1,w
  9828  03BB  1903               	skipnz
  9829  03BC  2BCE               	goto	l3821
  9830  03BD  3001               	movlw	1
  9831  03BE  02B3               	subwf	___ftadd@sign,f
  9832  03BF  0833               	movf	___ftadd@sign,w
  9833  03C0  3907               	andlw	7
  9834  03C1  1903               	btfsc	3,2
  9835  03C2  2BCE               	goto	l3821
  9836  03C3  2BB1               	goto	l3811
  9837  03C4                     l3817:	
  9838  03C4  3001               	movlw	1
  9839  03C5                     u4045:	
  9840  03C5  36B1               	lsrf	___ftadd@f2+2,f
  9841  03C6  0CB0               	rrf	___ftadd@f2+1,f
  9842  03C7  0CAF               	rrf	___ftadd@f2,f
  9843  03C8  0B89               	decfsz	9,f
  9844  03C9  2BC5               	goto	u4045
  9845  03CA  3001               	movlw	1
  9846  03CB  00FF               	movwf	127
  9847  03CC  087F               	movf	127,w
  9848  03CD  07B4               	addwf	___ftadd@exp2,f
  9849  03CE                     l3821:	
  9850  03CE  0835               	movf	___ftadd@exp1,w
  9851  03CF  0634               	xorwf	___ftadd@exp2,w
  9852  03D0  1D03               	skipz
  9853  03D1  2BC4               	goto	l3817
  9854  03D2                     l773:	
  9855  03D2  1FB3               	btfss	___ftadd@sign,7
  9856  03D3  2BE4               	goto	l3825
  9857  03D4  30FF               	movlw	255
  9858  03D5  06AC               	xorwf	___ftadd@f1,f
  9859  03D6  30FF               	movlw	255
  9860  03D7  06AD               	xorwf	___ftadd@f1+1,f
  9861  03D8  30FF               	movlw	255
  9862  03D9  06AE               	xorwf	___ftadd@f1+2,f
  9863  03DA  3001               	movlw	1
  9864  03DB  07AC               	addwf	___ftadd@f1,f
  9865  03DC  3000               	movlw	0
  9866  03DD  1803               	skipnc
  9867  03DE  3001               	movlw	1
  9868  03DF  07AD               	addwf	___ftadd@f1+1,f
  9869  03E0  3000               	movlw	0
  9870  03E1  1803               	skipnc
  9871  03E2  3001               	movlw	1
  9872  03E3  07AE               	addwf	___ftadd@f1+2,f
  9873  03E4                     l3825:	
  9874  03E4  1F33               	btfss	___ftadd@sign,6
  9875  03E5  2BF6               	goto	l3829
  9876  03E6  30FF               	movlw	255
  9877  03E7  06AF               	xorwf	___ftadd@f2,f
  9878  03E8  30FF               	movlw	255
  9879  03E9  06B0               	xorwf	___ftadd@f2+1,f
  9880  03EA  30FF               	movlw	255
  9881  03EB  06B1               	xorwf	___ftadd@f2+2,f
  9882  03EC  3001               	movlw	1
  9883  03ED  07AF               	addwf	___ftadd@f2,f
  9884  03EE  3000               	movlw	0
  9885  03EF  1803               	skipnc
  9886  03F0  3001               	movlw	1
  9887  03F1  07B0               	addwf	___ftadd@f2+1,f
  9888  03F2  3000               	movlw	0
  9889  03F3  1803               	skipnc
  9890  03F4  3001               	movlw	1
  9891  03F5  07B1               	addwf	___ftadd@f2+2,f
  9892  03F6                     l3829:	
  9893  03F6  01B3               	clrf	___ftadd@sign
  9894  03F7  082C               	movf	___ftadd@f1,w
  9895  03F8  07AF               	addwf	___ftadd@f2,f
  9896  03F9  082D               	movf	___ftadd@f1+1,w
  9897  03FA  3DB0               	addwfc	___ftadd@f2+1,f
  9898  03FB  082E               	movf	___ftadd@f1+2,w
  9899  03FC  3DB1               	addwfc	___ftadd@f2+2,f
  9900  03FD  1FB1               	btfss	___ftadd@f2+2,7
  9901  03FE  2C11               	goto	l3839
  9902  03FF  30FF               	movlw	255
  9903  0400  06AF               	xorwf	___ftadd@f2,f
  9904  0401  30FF               	movlw	255
  9905  0402  06B0               	xorwf	___ftadd@f2+1,f
  9906  0403  30FF               	movlw	255
  9907  0404  06B1               	xorwf	___ftadd@f2+2,f
  9908  0405  3001               	movlw	1
  9909  0406  07AF               	addwf	___ftadd@f2,f
  9910  0407  3000               	movlw	0
  9911  0408  1803               	skipnc
  9912  0409  3001               	movlw	1
  9913  040A  07B0               	addwf	___ftadd@f2+1,f
  9914  040B  3000               	movlw	0
  9915  040C  1803               	skipnc
  9916  040D  3001               	movlw	1
  9917  040E  07B1               	addwf	___ftadd@f2+2,f
  9918  040F  01B3               	clrf	___ftadd@sign
  9919  0410  0AB3               	incf	___ftadd@sign,f
  9920  0411                     l3839:	
  9921  0411  082F               	movf	___ftadd@f2,w
  9922  0412  00A7               	movwf	___ftpack@arg
  9923  0413  0830               	movf	___ftadd@f2+1,w
  9924  0414  00A8               	movwf	___ftpack@arg+1
  9925  0415  0831               	movf	___ftadd@f2+2,w
  9926  0416  00A9               	movwf	___ftpack@arg+2
  9927  0417  0835               	movf	___ftadd@exp1,w
  9928  0418  00FF               	movwf	127
  9929  0419  087F               	movf	127,w
  9930  041A  00AA               	movwf	___ftpack@exp
  9931  041B  0833               	movf	___ftadd@sign,w
  9932  041C  00FF               	movwf	127
  9933  041D  087F               	movf	127,w
  9934  041E  00AB               	movwf	___ftpack@sign
  9935  041F  318D  2550         	fcall	___ftpack
  9936  0421  0020               	movlb	0	; select bank0
  9937  0422  0827               	movf	?___ftpack,w
  9938  0423  00AC               	movwf	?___ftadd
  9939  0424  0828               	movf	?___ftpack+1,w
  9940  0425  00AD               	movwf	?___ftadd+1
  9941  0426  0829               	movf	?___ftpack+2,w
  9942  0427  00AE               	movwf	?___ftadd+2
  9943  0428  0008               	return
  9944  0429                     __end_of___ftadd:	
  9945                           
  9946                           	psect	text44
  9947  09AD                     __ptext44:	
  9948 ;; *************** function ___awtoft *****************
  9949 ;; Defined at:
  9950 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awtoft.c"
  9951 ;; Parameters:    Size  Location     Type
  9952 ;;  c               2    0[COMMON] int 
  9953 ;; Auto vars:     Size  Location     Type
  9954 ;;  sign            1    3[COMMON] unsigned char 
  9955 ;; Return value:  Size  Location     Type
  9956 ;;                  3    0[COMMON] float 
  9957 ;; Registers used:
  9958 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
  9959 ;; Tracked objects:
  9960 ;;		On entry : 0/0
  9961 ;;		On exit  : 0/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9964 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;Total ram usage:        4 bytes
  9969 ;; Hardware stack levels used:    1
  9970 ;; Hardware stack levels required when called:    8
  9971 ;; This function calls:
  9972 ;;		___ftpack
  9973 ;; This function is called by:
  9974 ;;		_getADCValue
  9975 ;; This function uses a non-reentrant model
  9976 ;;
  9977                           
  9978                           
  9979                           ;psect for function ___awtoft
  9980  09AD                     ___awtoft:	
  9981                           
  9982                           ;incstack = 0
  9983                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
  9984  09AD  01F3               	clrf	___awtoft@sign
  9985  09AE  1FF1               	btfss	___awtoft@c+1,7
  9986  09AF  29B7               	goto	l4343
  9987  09B0  09F0               	comf	___awtoft@c,f
  9988  09B1  09F1               	comf	___awtoft@c+1,f
  9989  09B2  0AF0               	incf	___awtoft@c,f
  9990  09B3  1903               	skipnz
  9991  09B4  0AF1               	incf	___awtoft@c+1,f
  9992  09B5  01F3               	clrf	___awtoft@sign
  9993  09B6  0AF3               	incf	___awtoft@sign,f
  9994  09B7                     l4343:	
  9995  09B7  0870               	movf	___awtoft@c,w
  9996  09B8  0020               	movlb	0	; select bank0
  9997  09B9  00A7               	movwf	___ftpack@arg
  9998  09BA  0871               	movf	___awtoft@c+1,w
  9999  09BB  00A8               	movwf	___ftpack@arg+1
 10000  09BC  01A9               	clrf	___ftpack@arg+2
 10001  09BD  308E               	movlw	142
 10002  09BE  00FF               	movwf	127
 10003  09BF  087F               	movf	127,w
 10004  09C0  00AA               	movwf	___ftpack@exp
 10005  09C1  0873               	movf	___awtoft@sign,w
 10006  09C2  00FF               	movwf	127
 10007  09C3  087F               	movf	127,w
 10008  09C4  00AB               	movwf	___ftpack@sign
 10009  09C5  318D  2550         	fcall	___ftpack
 10010  09C7  0020               	movlb	0	; select bank0
 10011  09C8  0827               	movf	?___ftpack,w
 10012  09C9  00F0               	movwf	?___awtoft
 10013  09CA  0828               	movf	?___ftpack+1,w
 10014  09CB  00F1               	movwf	?___awtoft+1
 10015  09CC  0829               	movf	?___ftpack+2,w
 10016  09CD  00F2               	movwf	?___awtoft+2
 10017  09CE  0008               	return
 10018  09CF                     __end_of___awtoft:	
 10019                           
 10020                           	psect	text45
 10021  08BE                     __ptext45:	
 10022 ;; *************** function ___lbtoft *****************
 10023 ;; Defined at:
 10024 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
 10025 ;; Parameters:    Size  Location     Type
 10026 ;;  c               1    wreg     unsigned char 
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;  c               1   12[BANK0 ] unsigned char 
 10029 ;; Return value:  Size  Location     Type
 10030 ;;                  3    0[COMMON] float 
 10031 ;; Registers used:
 10032 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11, pclath, cstack
 10033 ;; Tracked objects:
 10034 ;;		On entry : 0/0
 10035 ;;		On exit  : 0/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10038 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;Total ram usage:        5 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; Hardware stack levels required when called:    8
 10045 ;; This function calls:
 10046 ;;		___ftpack
 10047 ;; This function is called by:
 10048 ;;		_main
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052                           
 10053                           ;psect for function ___lbtoft
 10054  08BE                     ___lbtoft:	
 10055                           
 10056                           ;incstack = 0
 10057                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+btemp+9-btemp+11+pclath+cstack]
 10058                           ;___lbtoft@c stored from wreg
 10059  08BE  0020               	movlb	0	; select bank0
 10060  08BF  00AC               	movwf	___lbtoft@c
 10061  08C0  082C               	movf	___lbtoft@c,w
 10062  08C1  00FD               	movwf	125
 10063  08C2  01FE               	clrf	126
 10064  08C3  01FF               	clrf	127
 10065  08C4  087D               	movf	125,w
 10066  08C5  00A7               	movwf	___ftpack@arg
 10067  08C6  087E               	movf	126,w
 10068  08C7  00A8               	movwf	___ftpack@arg+1
 10069  08C8  087F               	movf	127,w
 10070  08C9  00A9               	movwf	___ftpack@arg+2
 10071  08CA  308E               	movlw	142
 10072  08CB  00FF               	movwf	127
 10073  08CC  087F               	movf	127,w
 10074  08CD  00AA               	movwf	___ftpack@exp
 10075  08CE  01AB               	clrf	___ftpack@sign
 10076  08CF  318D  2550         	fcall	___ftpack
 10077  08D1  0020               	movlb	0	; select bank0
 10078  08D2  0827               	movf	?___ftpack,w
 10079  08D3  00F0               	movwf	?___lbtoft
 10080  08D4  0828               	movf	?___ftpack+1,w
 10081  08D5  00F1               	movwf	?___lbtoft+1
 10082  08D6  0829               	movf	?___ftpack+2,w
 10083  08D7  00F2               	movwf	?___lbtoft+2
 10084  08D8  0008               	return
 10085  08D9                     __end_of___lbtoft:	
 10086                           
 10087                           	psect	text46
 10088  0D50                     __ptext46:	
 10089 ;; *************** function ___ftpack *****************
 10090 ;; Defined at:
 10091 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
 10092 ;; Parameters:    Size  Location     Type
 10093 ;;  arg             3    7[BANK0 ] unsigned um
 10094 ;;  exp             1   10[BANK0 ] unsigned char 
 10095 ;;  sign            1   11[BANK0 ] unsigned char 
 10096 ;; Auto vars:     Size  Location     Type
 10097 ;;		None
 10098 ;; Return value:  Size  Location     Type
 10099 ;;                  3    7[BANK0 ] float 
 10100 ;; Registers used:
 10101 ;;		wreg, status,2, status,0, btemp+9, btemp+10, btemp+11
 10102 ;; Tracked objects:
 10103 ;;		On entry : 0/0
 10104 ;;		On exit  : 0/0
 10105 ;;		Unchanged: 0/0
 10106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10107 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;Total ram usage:        5 bytes
 10112 ;; Hardware stack levels used:    1
 10113 ;; Hardware stack levels required when called:    7
 10114 ;; This function calls:
 10115 ;;		Nothing
 10116 ;; This function is called by:
 10117 ;;		___awtoft
 10118 ;;		___ftadd
 10119 ;;		___ftdiv
 10120 ;;		___ftmul
 10121 ;;		___lbtoft
 10122 ;;		___lltoft
 10123 ;;		___lwtoft
 10124 ;; This function uses a non-reentrant model
 10125 ;;
 10126                           
 10127                           
 10128                           ;psect for function ___ftpack
 10129  0D50                     ___ftpack:	
 10130                           
 10131                           ;incstack = 0
 10132                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+9-btemp+11]
 10133  0D50  0020               	movlb	0	; select bank0
 10134  0D51  082A               	movf	___ftpack@exp,w
 10135  0D52  1903               	btfsc	3,2
 10136  0D53  2D59               	goto	l3651
 10137  0D54  0829               	movf	___ftpack@arg+2,w
 10138  0D55  0428               	iorwf	___ftpack@arg+1,w
 10139  0D56  0427               	iorwf	___ftpack@arg,w
 10140  0D57  1D03               	skipz
 10141  0D58  2D6A               	goto	l3659
 10142  0D59                     l3651:	
 10143  0D59  3000               	movlw	0
 10144  0D5A  00A7               	movwf	?___ftpack
 10145  0D5B  3000               	movlw	0
 10146  0D5C  00A8               	movwf	?___ftpack+1
 10147  0D5D  3000               	movlw	0
 10148  0D5E  00A9               	movwf	?___ftpack+2
 10149  0D5F  0008               	return
 10150  0D60                     l3655:	
 10151  0D60  3001               	movlw	1
 10152  0D61  00FF               	movwf	127
 10153  0D62  087F               	movf	127,w
 10154  0D63  07AA               	addwf	___ftpack@exp,f
 10155  0D64  3001               	movlw	1
 10156  0D65                     u3625:	
 10157  0D65  36A9               	lsrf	___ftpack@arg+2,f
 10158  0D66  0CA8               	rrf	___ftpack@arg+1,f
 10159  0D67  0CA7               	rrf	___ftpack@arg,f
 10160  0D68  0B89               	decfsz	9,f
 10161  0D69  2D65               	goto	u3625
 10162  0D6A                     l3659:	
 10163  0D6A  30FE               	movlw	254
 10164  0D6B  0529               	andwf	___ftpack@arg+2,w
 10165  0D6C  1903               	btfsc	3,2
 10166  0D6D  2D83               	goto	l3667
 10167  0D6E  2D60               	goto	l3655
 10168  0D6F                     l3661:	
 10169  0D6F  3001               	movlw	1
 10170  0D70  00FF               	movwf	127
 10171  0D71  087F               	movf	127,w
 10172  0D72  07AA               	addwf	___ftpack@exp,f
 10173  0D73  3001               	movlw	1
 10174  0D74  07A7               	addwf	___ftpack@arg,f
 10175  0D75  3000               	movlw	0
 10176  0D76  1803               	skipnc
 10177  0D77  3001               	movlw	1
 10178  0D78  07A8               	addwf	___ftpack@arg+1,f
 10179  0D79  3000               	movlw	0
 10180  0D7A  1803               	skipnc
 10181  0D7B  3001               	movlw	1
 10182  0D7C  07A9               	addwf	___ftpack@arg+2,f
 10183  0D7D  3001               	movlw	1
 10184  0D7E                     u3645:	
 10185  0D7E  36A9               	lsrf	___ftpack@arg+2,f
 10186  0D7F  0CA8               	rrf	___ftpack@arg+1,f
 10187  0D80  0CA7               	rrf	___ftpack@arg,f
 10188  0D81  0B89               	decfsz	9,f
 10189  0D82  2D7E               	goto	u3645
 10190  0D83                     l3667:	
 10191  0D83  30FF               	movlw	255
 10192  0D84  0529               	andwf	___ftpack@arg+2,w
 10193  0D85  1903               	btfsc	3,2
 10194  0D86  2D90               	goto	l3671
 10195  0D87  2D6F               	goto	l3661
 10196  0D88                     l3669:	
 10197  0D88  3001               	movlw	1
 10198  0D89  02AA               	subwf	___ftpack@exp,f
 10199  0D8A  3001               	movlw	1
 10200  0D8B                     u3665:	
 10201  0D8B  35A7               	lslf	___ftpack@arg,f
 10202  0D8C  0DA8               	rlf	___ftpack@arg+1,f
 10203  0D8D  0DA9               	rlf	___ftpack@arg+2,f
 10204  0D8E  0B89               	decfsz	9,f
 10205  0D8F  2D8B               	goto	u3665
 10206  0D90                     l3671:	
 10207  0D90  1BA8               	btfsc	___ftpack@arg+1,7
 10208  0D91  2D96               	goto	l749
 10209  0D92  3002               	movlw	2
 10210  0D93  022A               	subwf	___ftpack@exp,w
 10211  0D94  1803               	skipnc
 10212  0D95  2D88               	goto	l3669
 10213  0D96                     l749:	
 10214  0D96  182A               	btfsc	___ftpack@exp,0
 10215  0D97  2D9E               	goto	l750
 10216  0D98  30FF               	movlw	255
 10217  0D99  05A7               	andwf	___ftpack@arg,f
 10218  0D9A  307F               	movlw	127
 10219  0D9B  05A8               	andwf	___ftpack@arg+1,f
 10220  0D9C  30FF               	movlw	255
 10221  0D9D  05A9               	andwf	___ftpack@arg+2,f
 10222  0D9E                     l750:	
 10223  0D9E  1003               	clrc
 10224  0D9F  0CAA               	rrf	___ftpack@exp,f
 10225  0DA0  082A               	movf	___ftpack@exp,w
 10226  0DA1  00FD               	movwf	125
 10227  0DA2  01FE               	clrf	126
 10228  0DA3  01FF               	clrf	127
 10229  0DA4  3010               	movlw	16
 10230  0DA5                     u3705:	
 10231  0DA5  35FD               	lslf	125,f
 10232  0DA6  0DFE               	rlf	126,f
 10233  0DA7  0DFF               	rlf	127,f
 10234  0DA8  0B89               	decfsz	9,f
 10235  0DA9  2DA5               	goto	u3705
 10236  0DAA  087D               	movf	125,w
 10237  0DAB  04A7               	iorwf	___ftpack@arg,f
 10238  0DAC  087E               	movf	126,w
 10239  0DAD  04A8               	iorwf	___ftpack@arg+1,f
 10240  0DAE  087F               	movf	127,w
 10241  0DAF  04A9               	iorwf	___ftpack@arg+2,f
 10242  0DB0  082B               	movf	___ftpack@sign,w
 10243  0DB1  1903               	btfsc	3,2
 10244  0DB2  0008               	return
 10245  0DB3  17A9               	bsf	___ftpack@arg+2,7
 10246  0DB4  0008               	return
 10247  0DB5                     __end_of___ftpack:	
 10248                           
 10249                           	psect	text47
 10250  0844                     __ptext47:	
 10251 ;; *************** function _EEPROMRead *****************
 10252 ;; Defined at:
 10253 ;;		line 29 in file "eeprom.c"
 10254 ;; Parameters:    Size  Location     Type
 10255 ;;  address         2    0[COMMON] unsigned int 
 10256 ;; Auto vars:     Size  Location     Type
 10257 ;;		None
 10258 ;; Return value:  Size  Location     Type
 10259 ;;                  1    wreg      unsigned char 
 10260 ;; Registers used:
 10261 ;;		wreg, status,2
 10262 ;; Tracked objects:
 10263 ;;		On entry : 0/0
 10264 ;;		On exit  : 0/0
 10265 ;;		Unchanged: 0/0
 10266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10267 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;Total ram usage:        2 bytes
 10272 ;; Hardware stack levels used:    1
 10273 ;; Hardware stack levels required when called:    7
 10274 ;; This function calls:
 10275 ;;		Nothing
 10276 ;; This function is called by:
 10277 ;;		_main
 10278 ;; This function uses a non-reentrant model
 10279 ;;
 10280                           
 10281                           
 10282                           ;psect for function _EEPROMRead
 10283  0844                     _EEPROMRead:	
 10284                           
 10285                           ;eeprom.c: 30: NVMADRH = ((address >> 8) & 0xFF);
 10286                           
 10287                           ;incstack = 0
 10288                           ; Regs used in _EEPROMRead: [wreg+status,2]
 10289  0844  0871               	movf	EEPROMRead@address+1,w
 10290  0845  0031               	movlb	17	; select bank17
 10291  0846  0092               	movwf	18	;volatile
 10292                           
 10293                           ;eeprom.c: 31: NVMADRL = (address & 0xFF);
 10294  0847  0870               	movf	EEPROMRead@address,w
 10295  0848  0091               	movwf	17	;volatile
 10296                           
 10297                           ;eeprom.c: 32: NVMCON1bits.NVMREGS = 1;
 10298  0849  1715               	bsf	21,6	;volsfr
 10299                           
 10300                           ;eeprom.c: 33: NVMCON1bits.RD = 1;
 10301  084A  1415               	bsf	21,0	;volsfr
 10302                           
 10303                           ;eeprom.c: 34: __nop();
 10304  084B  0000               	nop
 10305                           
 10306                           ;eeprom.c: 35: __nop();
 10307  084C  0000               	nop
 10308                           
 10309                           ;eeprom.c: 37: return (NVMDATL);
 10310  084D  0031               	movlb	17	; select bank17
 10311  084E  0813               	movf	19,w	;volatile
 10312  084F  0008               	return
 10313  0850                     __end_of_EEPROMRead:	
 10314                           
 10315                           	psect	intentry
 10316  0004                     __pintentry:	
 10317 ;; *************** function _ISR *****************
 10318 ;; Defined at:
 10319 ;;		line 13 in file "main.c"
 10320 ;; Parameters:    Size  Location     Type
 10321 ;;		None
 10322 ;; Auto vars:     Size  Location     Type
 10323 ;;		None
 10324 ;; Return value:  Size  Location     Type
 10325 ;;                  1    wreg      void 
 10326 ;; Registers used:
 10327 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
      +, cstack
 10328 ;; Tracked objects:
 10329 ;;		On entry : 0/0
 10330 ;;		On exit  : 0/0
 10331 ;;		Unchanged: 0/0
 10332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10335 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;Total ram usage:        7 bytes
 10338 ;; Hardware stack levels used:    1
 10339 ;; Hardware stack levels required when called:    6
 10340 ;; This function calls:
 10341 ;;		_nrf24l01ISR
 10342 ;; This function is called by:
 10343 ;;		Interrupt level 1
 10344 ;; This function uses a non-reentrant model
 10345 ;;
 10346                           
 10347  0004                     _ISR:	
 10348                           
 10349                           ;incstack = 0
 10350                           ; Regs used in _ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+pclath+cs
      +                          tack]
 10351  0004  3180               	pagesel	$
 10352  0005  0874               	movf	116,w
 10353  0006  0020               	movlb	0	; select bank0
 10354  0007  00A0               	movwf	??_ISR
 10355  0008  0875               	movf	117,w
 10356  0009  00A1               	movwf	??_ISR+1
 10357  000A  087C               	movf	124,w
 10358  000B  00A2               	movwf	??_ISR+2
 10359  000C  087D               	movf	125,w
 10360  000D  00A3               	movwf	??_ISR+3
 10361  000E  087E               	movf	126,w
 10362  000F  00A4               	movwf	??_ISR+4
 10363  0010  087F               	movf	127,w
 10364  0011  00A5               	movwf	??_ISR+5
 10365  0012  30A9               	movlw	low ___int_sp
 10366  0013  0086               	movwf	6
 10367  0014  3022               	movlw	high ___int_sp
 10368  0015  0087               	movwf	7
 10369  0016  0875               	movf	117,w
 10370  0017  00A6               	movwf	??_ISR+6
 10371                           
 10372                           ;main.c: 20: if (PIR0bits.INTF){
 10373  0018  1C10               	btfss	16,0	;volatile
 10374  0019  281E               	goto	i1l4767
 10375                           
 10376                           ;main.c: 21: nrf24l01ISR();
 10377  001A  318B  23E8         	fcall	_nrf24l01ISR
 10378                           
 10379                           ;main.c: 22: PIR0bits.INTF = 0;
 10380  001C  0020               	movlb	0	; select bank0
 10381  001D  1010               	bcf	16,0	;volatile
 10382  001E                     i1l4767:	
 10383                           
 10384                           ;main.c: 23: };main.c: 25: if (PIR1bits.ADIF){
 10385  001E  1B11               	btfsc	17,6	;volatile
 10386                           
 10387                           ;main.c: 26: PIR1bits.ADIF = 0;
 10388  001F  1311               	bcf	17,6	;volatile
 10389  0020  0826               	movf	??_ISR+6,w
 10390  0021  00FF               	movwf	127
 10391  0022  0825               	movf	??_ISR+5,w
 10392  0023  00FE               	movwf	126
 10393  0024  0824               	movf	??_ISR+4,w
 10394  0025  00FD               	movwf	125
 10395  0026  0823               	movf	??_ISR+3,w
 10396  0027  00FC               	movwf	124
 10397  0028  0822               	movf	??_ISR+2,w
 10398  0029  00F5               	movwf	117
 10399  002A  0821               	movf	??_ISR+1,w
 10400  002B  00F4               	movwf	116
 10401  002C  0009               	retfie
 10402  002D                     __end_of_ISR:	
 10403                           
 10404                           	psect	text49
 10405  0BE8                     __ptext49:	
 10406 ;; *************** function _nrf24l01ISR *****************
 10407 ;; Defined at:
 10408 ;;		line 156 in file "nrf24l01.c"
 10409 ;; Parameters:    Size  Location     Type
 10410 ;;		None
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;		None
 10413 ;; Return value:  Size  Location     Type
 10414 ;;                  1    wreg      void 
 10415 ;; Registers used:
 10416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, pclath
 10417 ;; Tracked objects:
 10418 ;;		On entry : 0/0
 10419 ;;		On exit  : 0/0
 10420 ;;		Unchanged: 0/0
 10421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;Total ram usage:        0 bytes
 10427 ;; Hardware stack levels used:    1
 10428 ;; Hardware stack levels required when called:    5
 10429 ;; This function calls:
 10430 ;;		_nrf24l01Send
 10431 ;;		_nrf24l01Service
 10432 ;;		_nrf24l01SetRXMode
 10433 ;; This function is called by:
 10434 ;;		_ISR
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           
 10439                           ;psect for function _nrf24l01ISR
 10440  0BE8                     _nrf24l01ISR:	
 10441                           
 10442                           ;nrf24l01.c: 159: status.statusRegister.byte = nrf24l01Send((unsigned) 0b00000000 | (uns
      +                          igned) 0x07, 0);
 10443                           
 10444                           ;incstack = 0
 10445                           ; Regs used in _nrf24l01ISR: [wreg-fsr0h+fsr1l+fsr1h+status,2-btemp+1+btemp+8-btemp+11+p
      +                          clath]
 10446  0BE8  3000               	movlw	0
 10447  0BE9  001E               	movwi fsr1++
 10448  0BEA  3007               	movlw	7
 10449  0BEB  3188  207A  318B   	fcall	_nrf24l01Send
 10450  0BEE  00FF               	movwf	127
 10451  0BEF  087F               	movf	127,w
 10452  0BF0  0020               	movlb	0	; select bank0
 10453  0BF1  00E4               	movwf	_status+2	;volatile
 10454                           
 10455                           ;nrf24l01.c: 162: if (status.statusRegister.RX_DR){
 10456  0BF2  1F64               	btfss	_status+2,6	;volatile
 10457  0BF3  2C00               	goto	i1l4683
 10458                           
 10459                           ;nrf24l01.c: 165: if (status.RX == 0){
 10460  0BF4  0863               	movf	_status+1,w	;volatile
 10461  0BF5  1D03               	btfss	3,2
 10462  0BF6  2BFC               	goto	i1l290
 10463                           
 10464                           ;nrf24l01.c: 166: status.RX = 1;
 10465  0BF7  3001               	movlw	1
 10466  0BF8  00FF               	movwf	127
 10467  0BF9  087F               	movf	127,w
 10468  0BFA  00E3               	movwf	_status+1	;volatile
 10469                           
 10470                           ;nrf24l01.c: 167: }
 10471  0BFB  2BFD               	goto	i1l4681
 10472  0BFC                     i1l290:	
 10473                           
 10474                           ;nrf24l01.c: 170: else{;nrf24l01.c: 171: status.statusRegister.RX_DR = 0;
 10475  0BFC  1364               	bcf	_status+2,6	;volatile
 10476  0BFD                     i1l4681:	
 10477                           
 10478                           ;nrf24l01.c: 172: };nrf24l01.c: 175: nrf24l01Service();
 10479  0BFD  3185  25E2  318B   	fcall	_nrf24l01Service
 10480  0C00                     i1l4683:	
 10481                           
 10482                           ;nrf24l01.c: 176: };nrf24l01.c: 180: if (status.statusRegister.TX_DS){
 10483  0C00  0020               	movlb	0	; select bank0
 10484  0C01  1EE4               	btfss	_status+2,5	;volatile
 10485  0C02  2C24               	goto	i1l4697
 10486                           
 10487                           ;nrf24l01.c: 184: if (lastTXPacket->packetData.ACKRequest){
 10488  0C03  0868               	movf	_lastTXPacket,w
 10489  0C04  0084               	movwf	4
 10490  0C05  3001               	movlw	1	; select bank2/3
 10491  0C06  0085               	movwf	5
 10492  0C07  1D00               	btfss	0,2
 10493  0C08  2C16               	goto	i1l4691
 10494                           
 10495                           ;nrf24l01.c: 185: status.TX = 3;
 10496  0C09  3003               	movlw	3
 10497  0C0A  00FF               	movwf	127
 10498  0C0B  087F               	movf	127,w
 10499  0C0C  00E2               	movwf	_status	;volatile
 10500                           
 10501                           ;nrf24l01.c: 186: status.retryCount = 0xFF;
 10502  0C0D  30FF               	movlw	255
 10503  0C0E  00FF               	movwf	127
 10504  0C0F  087F               	movf	127,w
 10505  0C10  00E6               	movwf	_status+4	;volatile
 10506                           
 10507                           ;nrf24l01.c: 187: nrf24l01SetRXMode(1);
 10508  0C11  3001               	movlw	1
 10509  0C12  318B  2334  318B   	fcall	_nrf24l01SetRXMode
 10510                           
 10511                           ;nrf24l01.c: 188: }
 10512  0C15  2C24               	goto	i1l4697
 10513  0C16                     i1l4691:	
 10514                           
 10515                           ;nrf24l01.c: 192: else if(lastTXPacket->packetData.IsACK){
 10516  0C16  0020               	movlb	0	; select bank0
 10517  0C17  0868               	movf	_lastTXPacket,w
 10518  0C18  0084               	movwf	4
 10519  0C19  3001               	movlw	1	; select bank2/3
 10520  0C1A  0085               	movwf	5
 10521  0C1B  1D80               	btfss	0,3
 10522  0C1C  2C22               	goto	i1l4695
 10523                           
 10524                           ;nrf24l01.c: 193: nrf24l01SetRXMode(1);
 10525  0C1D  3001               	movlw	1
 10526  0C1E  318B  2334  318B   	fcall	_nrf24l01SetRXMode
 10527                           
 10528                           ;nrf24l01.c: 194: }
 10529  0C21  2C24               	goto	i1l4697
 10530  0C22                     i1l4695:	
 10531                           
 10532                           ;nrf24l01.c: 197: else{;nrf24l01.c: 198: status.TX = 0;
 10533  0C22  0020               	movlb	0	; select bank0
 10534  0C23  01E2               	clrf	_status	;volatile
 10535  0C24                     i1l4697:	
 10536                           
 10537                           ;nrf24l01.c: 199: };nrf24l01.c: 200: };nrf24l01.c: 205: nrf24l01Send((unsigned) 0b001000
      +                          00 | (unsigned) 0x07, status.statusRegister.byte);
 10538  0C24  0020               	movlb	0	; select bank0
 10539  0C25  0864               	movf	_status+2,w	;volatile
 10540  0C26  001E               	movwi fsr1++
 10541  0C27  3027               	movlw	39
 10542  0C28  3188  207A         	fcall	_nrf24l01Send
 10543  0C2A  0008               	return
 10544  0C2B                     __end_of_nrf24l01ISR:	
 10545  0074                     btemp	set	116	;btemp
 10546  0074                     wtemp0	set	116
 10547  0076                     wtemp1	set	118
 10548  0078                     wtemp2	set	120
 10549  007A                     wtemp3	set	122
 10550  007C                     wtemp4	set	124
 10551  007E                     wtemp5	set	126
 10552  0074                     ttemp0	set	116
 10553  0077                     ttemp1	set	119
 10554  007A                     ttemp2	set	122
 10555  007D                     ttemp3	set	125
 10556  0074                     ltemp0	set	116
 10557  0078                     ltemp1	set	120
 10558  007C                     ltemp2	set	124
 10559  0076                     ltemp3	set	118


Data Sizes:
    Strings     32
    Constant    46
    Data        1
    BSS         159
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            4      4       4
    BANK0            80     66      73
    BANK1            80     63      72
    BANK2            80     45      78
    BANK3            80      0      78
    BANK4            80      0      33
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> sendMessage@ftoaStatus(BANK1[2]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), TXPacket.Message(BANK3[32]), 
		 -> TXPacket(BANK3[33]), romDataMap(BANK3[28]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), TXPacket.Message(BANK3[32]), 
		 -> TXPacket(BANK3[33]), romDataMap(BANK3[28]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 33
		 -> romDataMap.name(BANK3[16]), packet.Message(BANK0[32]), packet.Message(BANK0[32]), RXPacket.Message(BANK2[32]), 
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), STR_5(CODE[4]), loop@packet(BANK2[33]), 
		 -> romDataMap(BANK3[28]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), userRXPacket(BANK4[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 
		 -> romDataMap(BANK3[28]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), userRXPacket(BANK4[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 
		 -> romDataMap(BANK3[28]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 33
		 -> TXPacket.Message(BANK3[32]), TXPacket(BANK3[33]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 33
		 -> RXPacket.Message(BANK2[32]), RXPacket(BANK2[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK3[17]), STR_6(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p1	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    memset@p	PTR unsigned char  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_7(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    nrf24l01SendTXBuffer@packet	PTR struct . size(1) Largest target is 33
		 -> RXPacket(BANK2[33]), TXPacket(BANK3[33]), 

    lastTXPacket	PTR struct . size(1) Largest target is 33
		 -> NULL(NULL[0]), RXPacket(BANK2[33]), TXPacket(BANK3[33]), 

    nrf24l01SendPacket@txPacket	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__nrf24l01GetRXPacket	PTR struct . size(1) Largest target is 33
		 -> userRXPacket(BANK4[33]), 

    nrf24l01GetPipe@name	PTR unsigned char  size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sendMessage@topic	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_6(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> TXPacket(BANK3[33]), userRXPacket(BANK4[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 
		 -> romDataMap(BANK3[28]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> RXPacket(BANK2[33]), main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    sendMessage@packet	PTR struct . size(2) Largest target is 33
		 -> main@packet(BANK1[33]), loop@packet(BANK2[33]), 

    romData	PTR struct . size(1) Largest target is 28
		 -> romDataMap(BANK3[28]), 


Critical Paths under _main in COMMON

    _main->_EEPROMWrite
    _main->___lbtoft
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01SetRXPipe
    _nrf24l01GetPipe->___lwmod
    _sendMessage->___lbtoft
    _sleepListren->_sleepMs
    _exception->_EEPROMWrite
    _ftoa->___lltoft
    _sprintf->___wmul
    ___ftsub->___lltoft
    _getADCValue->___awtoft
    _getADCValue->_sleepMs
    ___ftadd->___awtoft

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01GetPipe->___lwmod
    _nrf24l01SendPacket->_exception
    _ftoa->___fttol
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftneg->_getADCValue
    ___ftmul->_getADCValue
    _getADCValue->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    ___lbtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sendMessage
    _loop->_sendMessage
    _sendMessage->_strcat
    _strcat->_ftoa

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_loop

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   91144
                                             28 BANK1     35    35      0
                         _EEPROMRead
                        _EEPROMWrite
                           ___lbtoft
                               _loop
                    _nrf24l01GetPipe
                       _nrf24l01Init
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
                        _sendMessage
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1914
                                             15 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    1914
                                              3 COMMON     1     1      0
                                              7 BANK0      8     8      0
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXPipe
                  _nrf24l01SetTXPipe
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SetRXPipe                                    3     3      0     611
                                              0 COMMON     3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _nrf24l01GetPipe                                      4     4      0     807
                                              8 BANK0      4     4      0
                            ___lwmod
                             _strlen
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     440
                                              0 COMMON     4     0      4
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _loop                                                45    45      0   56954
                                              0 BANK2     45    45      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                        _getADCValue
                        _sendMessage
 ---------------------------------------------------------------------------------
 (1) _sendMessage                                          9     2      7   26052
                                             19 BANK1      9     2      7
                         _EEPROMRead (ARG)
                           ___lbtoft (ARG)
                               _ftoa
                        _getADCValue (ARG)
                             _memset
                 _nrf24l01SendPacket
                       _sleepListren
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4     751
                                             13 BANK1      6     2      4
                               _ftoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _sleepListren                                         2     0      2     816
                                              7 BANK0      2     0      2
                            _sleepMs
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendPacket                                   5     3      2    3953
                                              8 BANK0      5     3      2
                          _exception
                    _nrf24l01Service
                             _strcpy
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    3014
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                  _nrf24l01SetTXPipe
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (12) _strcpy                                              6     2      4     221
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SetTXPipe                                   1     1      0     226
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) ___bmul                                              3     2      1     164
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 (3) _exception                                            1     1      0     574
                                              7 BANK0      1     1      0
                        _EEPROMWrite
 ---------------------------------------------------------------------------------
 (4) _EEPROMWrite                                          4     1      3     543
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                13     9      4   18950
                                              0 BANK1     13     9      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    24     10    3016
                                             28 BANK0     26    16     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     552
                                              0 COMMON     4     0      4
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     440
                                              0 COMMON     1     1      0
                                             20 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     449
                                              7 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    3693
                                              0 COMMON     4     0      4
                                             12 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             10     6      4     579
                                             56 BANK0     10     6      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6056
                                             22 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                             44 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             12     6      6    4391
                                             44 BANK0     12     6      6
                           ___ftpack
                        _getADCValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     406
                                              7 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                          9     6      3   15305
                                             35 BANK0      9     6      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            _sleepMs
 ---------------------------------------------------------------------------------
 (3) _sleepMs                                              4     2      2     681
                                              0 COMMON     4     2      2
                           _resetWDT
 ---------------------------------------------------------------------------------
 (4) _resetWDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             13     7      6    4947
                                             22 BANK0     13     7      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             10     4      6    5752
                                             12 BANK0     10     4      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3724
                                              0 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lbtoft                                             5     1      4    3518
                                              0 COMMON     4     0      4
                                             12 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             5     0      5    3487
                                              7 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (1) _EEPROMRead                                           2     0      2     166
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  7     7      0    4095
                                              0 BANK0      7     7      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (10) _nrf24l01ISR                                         0     0      0    4095
                       _nrf24l01Send
                    _nrf24l01Service
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (11) _nrf24l01Service                                     2     2      0    3014
                             _memset
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
               _nrf24l01SendTXBuffer
                  _nrf24l01SetRXMode
                  _nrf24l01SetTXPipe
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (12) _strcpy                                              6     2      4     221
 ---------------------------------------------------------------------------------
 (12) _strcmp                                              3     2      1     161
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SetTXPipe                                   1     1      0     226
                             ___bmul
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) ___bmul                                              3     2      1     164
 ---------------------------------------------------------------------------------
 (12) _nrf24l01SendTXBuffer                                3     3      0     968
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                             _strlen
 ---------------------------------------------------------------------------------
 (13) _strlen                                              2     2      0     158
 ---------------------------------------------------------------------------------
 (11) _nrf24l01SetRXMode                                   1     1      0     618
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (12) _nrf24l01Send                                        2     1      1     463
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPISend                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (13) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _memset                                              8     2      6     221
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMRead
   _EEPROMWrite
   ___lbtoft
     ___ftpack
   _loop
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     ___ftneg
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
     _getADCValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _sendMessage
       _EEPROMRead (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
       _getADCValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _sleepMs
           _resetWDT
       _memset (ARG)
       _nrf24l01SendPacket (ARG)
         _exception
           _EEPROMWrite
         _nrf24l01Service
           _memset
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _nrf24l01SendTXBuffer
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
             _nrf24l01SetRXMode
               _nrf24l01Send
                 _nrf24l01SPIEnd
                 _nrf24l01SPISend
                 _nrf24l01SPIStart
             _strlen
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _nrf24l01SetTXPipe
             ___bmul
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
           _strcmp
           _strcpy
         _strcpy
       _sleepListren (ARG)
         _sleepMs
           _resetWDT
       _strcat (ARG)
         _ftoa (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               _getADCValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 _sleepMs
                   _resetWDT
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       _strcpy (ARG)
   _nrf24l01GetPipe
     ___lwmod
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       ___bmul
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXPipe
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SetRXPipe
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _nrf24l01SetTXPipe
     ___bmul
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
   _sendMessage
     _EEPROMRead (ARG)
     ___lbtoft (ARG)
       ___ftpack
     _ftoa (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         _getADCValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _sleepMs
             _resetWDT
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _getADCValue (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       _sleepMs
         _resetWDT
     _memset (ARG)
     _nrf24l01SendPacket (ARG)
       _exception
         _EEPROMWrite
       _nrf24l01Service
         _memset
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _nrf24l01SendTXBuffer
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
           _nrf24l01SetRXMode
             _nrf24l01Send
               _nrf24l01SPIEnd
               _nrf24l01SPISend
               _nrf24l01SPIStart
           _strlen
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _nrf24l01SetTXPipe
           ___bmul
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _strcmp
         _strcpy
       _strcpy
     _sleepListren (ARG)
       _sleepMs
         _resetWDT
     _strcat (ARG)
       _ftoa (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftneg
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _getADCValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _sleepMs
               _resetWDT
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             _getADCValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               _sleepMs
                 _resetWDT
         ___lltoft
           ___ftpack
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
           _isdigit
     _strcpy (ARG)
   _strcpy

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01Service
       _memset
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SendTXBuffer
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
         _nrf24l01SetRXMode
           _nrf24l01Send
             _nrf24l01SPIEnd
             _nrf24l01SPISend
             _nrf24l01SPIStart
         _strlen
       _nrf24l01SetRXMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _nrf24l01SetTXPipe
         ___bmul
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _strcmp
       _strcpy
     _nrf24l01SetRXMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            4      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               4      4       4       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0      10       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     42      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3F      48       7       90.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     2D      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      21      13       41.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     152      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     162      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Tue Sep 04 16:23:44 2018

                   __CFG_CP$OFF 0000                              l55 0872                sendMessage@value 00B7  
              sendMessage@topic 00B5             ___wmul@multiplicand 0072                    ___ftadd@exp1 0035  
                  ___ftadd@exp2 0034               sendMessage@packet 00B3                     __CFG_LVP$ON 0000  
                  ___ftadd@sign 0033                             l319 0699                             l176 0FB7  
                           l264 0B6D                             l513 010B                             l345 0984  
                           l346 0983                             l516 012A                             l277 093F  
                           l562 0891                             l539 0901                             l750 0D9E  
                           l833 0E22                             l749 0D96                             l773 03D2  
                           l964 0AFE                             l987 0A73                    __CFG_CPD$OFF 0000  
                           _ISR 0004                             wreg 0009                    _userRXPacket 0220  
                          ?_ISR 0070                    ___ftdiv@cntr 003D                    ___ftdiv@sign 0042  
                ??_nrf24l01Init 002F                            l4001 018B                            l4013 01C1  
                          l4005 019A                            l4111 071F                            l4103 070B  
                          l4023 01D9                            l4015 01C4                            l4031 0068  
                          l4009 01AE                            l4033 0229                            l4041 0899  
                          l4201 08A5                            l4115 0727                            l4029 021E  
                          l4221 09FD                            l4055 0B86                            l4311 0C92  
                          l4215 0A55                            l4223 0A09                            l4137 08E1  
                          l4209 0AD8                            l4313 0CA9                            l4225 0A11  
                          l4059 0B9C                            l4083 06C8                            l4147 0DCE  
                          l4331 09F1                            l4421 0F7E                            l4077 06B2  
                          l4181 0E33                            l4165 0DFE                            l4237 046B  
                          l4261 0CDA                            l4343 09B7                            l4175 0E19  
                          l4191 0A26                            l4327 09DF                            l4511 066A  
                          l4353 0766                            l4433 0FF1                            l4417 0F86  
                          l4177 0E25                            l4169 0E0C                            l4193 0A36  
                          l3633 0877                            l4329 09D2                            l3651 0D59  
                          l3811 03B1                            l3803 039E                            l4435 0FF8  
                          l4419 0F91                            l4099 0703                            l3723 0869  
                          l4523 0687                            l4259 0CBA                            l4291 094B  
                          l3661 0D6F                            l3821 03CE                            l4429 0FD9  
                          l3671 0D90                            l3655 0D60                            l3807 03A8  
                          l4359 077C                            l3751 0D1C                            l4471 05F7  
                          l4623 0303                            l4607 02AD                            l3825 03E4  
                          l3817 03C4                            l3809 03AD                            l4385 07D6  
                          l4377 07BD                            l3729 08FA                            l3913 0B46  
                          l4465 05ED                            l4721 0B25                            l4617 02F4  
                          l3667 0D83                            l3659 0D6A                            l3763 0D47  
                          l3851 0C34                            l3907 0B3E                            l3669 0D88  
                          l3829 03F6                            l3749 0D0E                            l3853 0C42  
                          l3861 0C65                            l4661 0AB4                            l3839 0411  
                          l3775 035B                            l3871 0A7A                            l3759 0D3C  
                          l4495 0627                            l4719 0B05                            l3785 0371  
                          l3873 0A86                            l3857 0C5A                            l3945 009B  
                          l3953 00C9                            l4497 063C                            l4665 0AC0  
                          l3779 0362                            l3883 0A96                            l3971 0112  
                          l3963 00D8                            l3939 008B                            l4659 0AA8  
                          l3797 038B                            l3965 0107                            l4669 0AC9  
                          l4853 0F57                            l3887 0A9E                            l3967 010D  
                          l3895 091E                            l3993 015E                            l3977 0139  
                          l3897 0929                            l3987 0158                            STR_1 104C  
                  __CFG_WDTE$ON 0000                            STR_2 104C                            STR_3 103E  
                          STR_4 1039                            STR_5 1048                            STR_6 1043  
                          STR_7 1029                            u4015 03B2                            u4105 0C37  
                          u4045 03C5                            u4125 0C50                            u4135 0C5B  
                          u4164 0A82                            u4165 0A80                            u4405 01A4  
                          u5205 0AC1                            u4415 01B6                            u3705 0DA5  
                          u3625 0D65                            u3645 0D7E                            u4605 0728  
                          u3805 0D11                            u4615 072E                            u4535 06D4  
                          u4375 0181                            u5175 0AAB                            u5407 09A3  
                          u3665 0D8B                            u4545 06E4                            u3825 0D1D  
                          u5417 0CC2                            u3835 0D31                            u4395 0192  
                          u5427 0CAF                            u5195 0ABA                            u5275 0B13  
                          u4565 070C                            u4725 0E1A                            u3845 0D3D  
                          u3765 0902                            u5437 0B50                            u4575 0712  
                          u3775 0907                            u5447 0B61                            u4665 0DD5  
                          u5457 0B6A                            u3955 038C                            u4755 0A2B  
                          u5467 0840                            u5387 0EE2                            u5477 0833  
                          u5397 0997                            u4935 078E                            u4695 0DFF  
                          u4864 0945                            u3985 039F                            u4945 079E  
                          u4865 0944                            u4955 07BE                            u4965 07CD  
                          u4975 07D7                            _WPUA 020C                            _WPUC 020E  
__size_of_nrf24l01InterfaceInit 001E                    __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000  
 __end_of_nrf24l01InterfaceInit 096F                            ___sp 2161                            _main 0EC6  
                          _ftoa 0429                    ___ftpack@arg 0027                            _loop 0510  
                  ___ftpack@exp 002A                            fsr0h 0005                            fsr1h 0007  
                          indf0 0000                            fsr0l 0004                            fsr1l 0006  
                          btemp 0074                   __CFG_BORV$LOW 0000                            start 002D  
         nrf24l01SetRXPipe@pipe 0071             __size_of_EEPROMRead 000C                   __CFG_CSWEN$ON 0000  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0056                    ___ftmul@sign 0057  
   __size_of_nrf24l01SendPacket 0048                           ??_ISR 0020                    ___fttol@exp1 0061  
          __size_of_getADCValue 00A5                    ___fttol@lval 005D                           ?_main 0070  
                         ?_ftoa 00A0                           ?_loop 0070                 __end_of___ftadd 0429  
               __end_of___ftdiv 07F8                 __end_of___ftneg 0832                 __end_of___lldiv 0D50  
               __end_of___ftmul 074F                 EEPROMWrite@data 0072                 __end_of___llmod 0C6E  
               __end_of___ftsub 08F7                 __end_of___fttol 0E3C                  __CFG_DEBUG$OFF 0000  
               __end_of___lwmod 0ACE                           i1l290 0BFC                           _TMR1H 001A  
                         _TMR1L 0019                   __CFG_PWRTE$ON 0000                    ___lltoft@exp 002C  
                 ___awtoft@sign 0073                 __end_of_dpowers 1028                 __end_of_isdigit 086B  
                 ___ftpack@sign 002B                           _rloop 00E5                           ftoa@f 00A0  
                         ftoa@l 00A8                  __CFG_BOREN$OFF 0000                 __end_of_sleepMs 0AA1  
                         ltemp0 0074                           ltemp1 0078                           ltemp2 007C  
                         ltemp3 0076                           ttemp0 0074                           ttemp1 0077  
                         ttemp2 007A                           ttemp3 007D                           status 0003  
                         wtemp0 0074                           wtemp1 0076                           wtemp2 0078  
                         wtemp3 007A                           wtemp4 007C                           wtemp5 007E  
               __end_of_sprintf 022F               getADCValue@adcSum 0049                _nrf24l01SPIStart 083B  
          __size_of_EEPROMWrite 001F                 __initialization 002F          nrf24l01InitRegisters@i 002D  
                  __end_of_main 0F5B                    __end_of_ftoa 0510                    __end_of_loop 05E2  
                        ??_main 00BC                   ___fttol@sign1 005C                          ??_ftoa 0074  
                        ??_loop 0074                    ?_sendMessage 00B3        __size_of_nrf24l01SPISend 000F  
              ___llmod@dividend 0038                          _ADRESH 009C                          _ADRESL 009B  
              __end_of___awtoft 09CF                          _ANSELA 018C                          _ANSELC 018E  
              __end_of___ftpack 0DB5                __end_of___lbtoft 08D9                __end_of___lltoft 0A4B  
                        _ODCONA 028C        __size_of_nrf24l01GetPipe 0034                          _ODCONC 028E  
                        i1l4681 0BFD                          i1l4691 0C16                          i1l4683 0C00  
                        i1l4695 0C22                          i1l4767 001E                          i1l4697 0C24  
                        _INLVLA 038C                          _INLVLC 038E        __size_of_nrf24l01Service 00B9  
          __size_of_nrf24l01ISR 0043                          ___bmul 088D                          ___ftge 0B6F  
                        ___wmul 08F7                       ??___ftadd 0032                  __CFG_STVREN$ON 0000  
                     ??___ftdiv 003C                       ??___ftneg 0074                       ??___lldiv 0070  
                     ??___ftmul 0074                       ??___llmod 0070                       ??___ftsub 0074  
                     ??___fttol 0074                       ??___lwmod 0074            __end_of_nrf24l01Init 09AD  
          __end_of_nrf24l01Send 088D                          _memset 0ACE           _nrf24l01InitRegisters 022F  
                        _rcount 00E1                          _rlimit 00E3                          _status 0062  
                        _strcat 09F8                          _strcmp 09CF                          _strcpy 0A4B  
                        _strlen 0915                          ftoa@cp 00AC           ___ftmul@f3_as_product 0053  
              __end_of_resetWDT 07FF                    ??_EEPROMRead 0072                       ??_isdigit 0070  
                        loop@ta 0123                          loop@vt 0120                       ??_sleepMs 0072  
                     ??_sprintf 0046              getADCValue@adcLoop 0048         __end_of__initialization 005B  
                    ___ftadd@f1 002C                      ___ftadd@f2 002F                      ___ftge@ff1 0027  
                    ___ftge@ff2 002A              getADCValue@channel 0047                      ___ftdiv@f1 0039  
                    ___ftdiv@f2 0036                      ___ftdiv@f3 003E                      ___ftneg@f1 004C  
                    ___awtoft@c 0070                      ___lbtoft@c 002C                      ___ftmul@f1 004C  
                    ___ftmul@f2 004F              __end_of_EEPROMRead 0850                      ___ftsub@f1 0039  
                    ___ftsub@f2 0036                      ___fttol@f1 0058                  __pcstackCOMMON 0070  
                  __pidataBANK1 07FF   __size_of_nrf24l01SendTXBuffer 0047                      ___lltoft@c 0070  
                  sprintf@width 0051                      __pbssBANK0 0062                      __pbssBANK1 00DF  
                    __pbssBANK2 014D                      __pbssBANK3 01A0                      __pbssBANK4 0220  
         sendMessage@ftoaStatus 00BA              __size_of_exception 000D               ??_nrf24l01GetPipe 0028  
                    __pmaintext 0EC6                         ?___ftge 0027                         ?___wmul 0070  
               __CFG_PPS1WAY$ON 0000               _nrf24l01SetRXMode 0B34               _nrf24l01SetRXPipe 0933  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               _nrf24l01SetTXPipe 0BAB  
                     ?___awtoft 0070                       ?___ftpack 0027                       ?___lbtoft 0070  
            ?_nrf24l01SetRXPipe 0070                       ?___lltoft 0070             __CFG_RSTOSC$HFINT32 0000  
                       ?_strcat 00AD           __end_of_n_ADDRESS_MUL 1029            __size_of_sendMessage 008A  
      __end_of_nrf24l01SPIStart 0844             ??_nrf24l01SetRXPipe 0070                         _NVMADRH 0892  
                       _NVMADRL 0891                         _NVMDATL 0893                         _NVMCON2 0896  
                       _SSP1BUF 0211           _nrf24l01InterfaceInit 0951      __end_of_nrf24l01SendPacket 0CFD  
                     ?_resetWDT 0070                   ??_getADCValue 0046           __size_of_nrf24l01Init 001F  
         __size_of_nrf24l01Send 0013       __end_of_nrf24l01SetRXMode 0B6F       __end_of_nrf24l01SetRXPipe 0951  
                 ?_sleepListren 0027       __end_of_nrf24l01SetTXPipe 0BE8                 __size_of___bmul 0018  
               __size_of___ftge 003C                         ___ftadd 0333                         ___ftdiv 074F  
                       ___ftneg 0829                         ___lldiv 0CFD                 __size_of___wmul 001E  
                       ___ftmul 069B                         ___llmod 0C2B                         ___ftsub 08D9  
                       ___fttol 0DB5                         ___lwmod 0AA1                      ??___awtoft 0073  
                    ??___ftpack 0070                      ??___lbtoft 0074                 __size_of_memset 0032  
        EEPROMWrite@GIEBitValue 0073                      ??___lltoft 0074                         __ptext1 098E  
                       __ptext2 0951                         __ptext3 022F                         __ptext4 0933  
                       __ptext5 0B00                         __ptext6 0AA1                         __ptext7 0510  
                       __ptext8 0E3C                         __ptext9 09F8                 __size_of_strcat 0029  
               __size_of_strcmp 0029               __end_of_exception 085D                 __size_of_strcpy 002A  
               __size_of_strlen 001E                    __size_of_ISR 0029                       _T1CONbits 001B  
                       _dpowers 1000                         _isdigit 085D                         _romData 00E7  
                       _sleepMs 0A75                       _IOCAPbits 0391                         _waiting 0067  
                       _sprintf 0062                         clrloop0 0824            end_of_initialization 005B  
                       ftoa@buf 01DD                         ftoa@rem 00A4                    _nrf24l01Init 098E  
                  _nrf24l01Send 087A                      _romDataMap 01C1                   ??_EEPROMWrite 0073  
              nrf24l01GetPipe@i 002B                 ___lldiv@divisor 0027                 ___lldiv@counter 0033  
                    ??_resetWDT 0070                  ??_sleepListren 0074             __end_of_getADCValue 1000  
                     _PORTAbits 000C                       _PORTCbits 000E                       _TRISAbits 008C  
                     _TRISCbits 008E                __CFG_FEXTOSC$OFF 0000                   ??_nrf24l01ISR 0070  
        ?_nrf24l01InterfaceInit 0070                     ___ftdiv@exp 0041                      main@packet 00BE  
    __size_of_nrf24l01SetRXMode 003B      __size_of_nrf24l01SetRXPipe 001E                     ___ftmul@exp 0052  
    __size_of_nrf24l01SetTXPipe 003D             __end_of_EEPROMWrite 098E                  __end_of___bmul 08A5  
                __end_of___ftge 0BAB                  __end_of___wmul 0915                  __end_of_memset 0B00  
                __end_of_strcat 0A21                  __end_of_strcmp 09F8                    _lastTXPacket 0068  
                __end_of_strcpy 0A75                  __end_of_strlen 0933             start_initialization 002F  
               _nrf24l01SPISend 086B                     __end_of_ISR 002D    __end_of_nrf24l01SendTXBuffer 0CB5  
                    ftoa@status 00A3       nrf24l01SetRXPipe@enRXAddr 0072                 _nrf24l01GetPipe 0B00  
       __size_of_nrf24l01SPIEnd 0009                 ___llmod@divisor 0034                 ___llmod@counter 0070  
               _nrf24l01Service 05E2         ??_nrf24l01InitRegisters 0073                __CFG_LPBOREN$OFF 0000  
                   _getADCValue 0F5B                        ??___ftge 0070             __end_of_nrf24l01ISR 0C2B  
                      ??___wmul 0074                     __pdataBANK1 00E7                        ??_strcat 0074  
             __size_of___awtoft 0022               __size_of___ftpack 0065               __size_of___lbtoft 001B  
             __size_of___lltoft 002A                       ___latbits 0002                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK2 0120            __end_of_sleepListren 08BE  
                  _isdigit$1998 0070                     sprintf@flag 004A                     sprintf@prec 0053  
                    loop@packet 012C                     _EEPROMWrite 096F             nrf24l01GetPipe@name 002A  
           nrf24l01GetPipe@pipe 0029               __size_of_resetWDT 0007                        ?___ftadd 002C  
                      ?___ftdiv 0036                        ?___ftneg 004C                        ?___lldiv 0027  
                      ?___ftmul 004C                        ?___llmod 0034                        ?___ftsub 0036  
                      ?___fttol 0058                        ?___lwmod 0070            __end_of_n_ADDRESS_P0 1039  
       __end_of_nrf24l01SPISend 087A       nrf24l01InitRegisters@enAA 002B                   ??_sendMessage 0074  
            _nrf24l01SendPacket 0CB5             sleepMs@milliseconds 0070         __end_of_nrf24l01GetPipe 0B34  
                      ?_isdigit 0070                       _loop$2251 0126                       _loop$2252 0129  
                      ?_sleepMs 0070                       _exception 0850             ?_nrf24l01SendPacket 0028  
                      ?_sprintf 003C              EEPROMWrite@address 0070         __end_of_nrf24l01Service 069B  
                ___wmul@product 0027                     _nrf24l01ISR 0BE8                       clear_ram0 0823  
                      _PIE0bits 0090                        _PIE1bits 0091                        _PIR0bits 0010  
                      _PIR1bits 0011            ??_nrf24l01SendPacket 002A            _nrf24l01SendTXBuffer 0C6E  
   nrf24l01SendPacket@loopCount 002B                      _ADCON0bits 009D                      _ADCON1bits 009E  
             ___wmul@multiplier 0070                        _WPUAbits 020C                        _RXPacket 014D  
                      _TXPacket 01A0                      ?_exception 0070             sleepListren@seconds 0027  
           __end_of_sendMessage 0EC6         ??_nrf24l01InterfaceInit 0070                  _nrf24l01SPIEnd 0832  
             EEPROMRead@address 0070                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
              __size_of___ftneg 0009                __size_of___lldiv 0053                __size_of___ftmul 00B4  
              __size_of___llmod 0043                __size_of___ftsub 001E                __size_of___fttol 0087  
              __size_of___lwmod 002D                        ___awtoft 09AD                        ___ftpack 0D50  
                      ___lbtoft 08BE                        ___int_sp 22A9                        ___lltoft 0A21  
         __size_of_sleepListren 0019                      _ANSELAbits 018C                      _ANSELCbits 018E  
                    _EEPROMRead 0844                ?_nrf24l01GetPipe 0070                      sprintf@val 004C  
                 _n_ADDRESS_MUL 1028                      strcat@from 00AF                __size_of_isdigit 000E  
                      __ptext10 08A5                        __ptext11 0CB5                        __ptext20 087A  
                      __ptext12 05E2                        __ptext21 083B                        __ptext13 0A4B  
                    _T1GCONbits 001C                        __ptext30 08F7                        __ptext22 086B  
                      __ptext14 09CF                        __ptext31 0C2B                        __ptext23 0832  
                      __ptext15 0BAB                        __ptext40 0A75                        __ptext32 0CFD  
                      __ptext24 0ACE                        __ptext16 088D                        __ptext41 07F8  
                      __ptext33 0A21                        __ptext25 0850                        __ptext17 0C6E  
                      __ptext42 074F                        __ptext34 0DB5                        __ptext26 096F  
                      __ptext18 0915                        __ptext43 0333                        __ptext35 08D9  
                      __ptext27 0429                        __ptext19 0B34                        __ptext44 09AD  
                      __ptext36 0829                        __ptext28 0062                        __ptext45 08BE  
                      __ptext37 069B                        __ptext29 085D                        __ptext46 0D50  
                      __ptext38 0B6F                        __ptext47 0844                        __ptext39 0F5B  
                      __ptext49 0BE8                __size_of_sleepMs 002C                    _SSP1CON1bits 0215  
        __end_of_nrf24l01SPIEnd 083B                        _distance 00DF                __size_of_sprintf 01CD  
                   _OSCCON1bits 0919                   __size_of_main 0095                   __size_of_ftoa 00E7  
                 __size_of_loop 00D2    nrf24l01InitRegisters@channel 0027    nrf24l01InitRegisters@feature 0029  
                  sleepMs@wdtps 0073              exception@exception 0027                      _RC0PPSbits 0EA0  
                      _resetWDT 07F8    nrf24l01InitRegisters@rfSetup 002A                      _RC1PPSbits 0EA1  
                  ?_getADCValue 0043                      _RC2PPSbits 0EA2                    _sleepListren 08A5  
__size_of_nrf24l01InitRegisters 0104   __end_of_nrf24l01InitRegisters 0333    nrf24l01InitRegisters@setupAW 0028  
                    _ODCONAbits 028C                    _SSP1STATbits 0214                        main@pipe 00BD  
    nrf24l01SendPacket@txPacket 0028                     _sendMessage 0E3C                      _INTCONbits 000B  
                   _NVMCON1bits 0895                      _FVRCONbits 0117                     ??_exception 0074  
                      isdigit@c 0071                        intlevel1 0000                       sprintf@ap 004B  
                     sprintf@sp 0050                    _n_ADDRESS_P0 1034                ___lwmod@dividend 0072  
              ___lldiv@dividend 002B                    ?_EEPROMWrite 0070               __CFG_CLKOUTEN$OFF 0000  
     __size_of_nrf24l01SPIStart 0009                   __pstringtext1 1000                   __pstringtext2 1034  
                 __pstringtext3 1028                   __pstringtext4 1039                   __pstringtext5 103E  
                 __pstringtext6 1043                   __pstringtext7 1048                   __pstringtext8 104C  
                 __pstringtext9 0000                        sprintf@c 0055                        sprintf@f 003C  
    nrf24l01InitRegisters@DynPD 002C                        strcat@cp 00B1                        strcat@to 00AD  
                   ?_EEPROMRead 0070                ___lldiv@quotient 002F                 ___lwmod@divisor 0070  
               ___lwmod@counter 0027                      _WDTCONbits 0097                   ?_nrf24l01Init 0070  
                    _STATUSbits 0003                    ?_nrf24l01ISR 0070  
