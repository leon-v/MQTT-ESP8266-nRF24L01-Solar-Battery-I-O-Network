

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed May 23 17:16:42 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	_NVMEM_text,global,class=CODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 1.45
    41                           ; Generated 16/11/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16LF1503 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000E                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  008C                     	;# 
   101  008E                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010E                     	;# 
   118  0111                     	;# 
   119  0112                     	;# 
   120  0113                     	;# 
   121  0114                     	;# 
   122  0115                     	;# 
   123  0116                     	;# 
   124  0117                     	;# 
   125  0118                     	;# 
   126  0119                     	;# 
   127  011D                     	;# 
   128  018C                     	;# 
   129  018E                     	;# 
   130  0191                     	;# 
   131  0191                     	;# 
   132  0192                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0194                     	;# 
   136  0195                     	;# 
   137  0196                     	;# 
   138  020C                     	;# 
   139  0211                     	;# 
   140  0211                     	;# 
   141  0212                     	;# 
   142  0212                     	;# 
   143  0213                     	;# 
   144  0213                     	;# 
   145  0214                     	;# 
   146  0214                     	;# 
   147  0215                     	;# 
   148  0215                     	;# 
   149  0215                     	;# 
   150  0216                     	;# 
   151  0216                     	;# 
   152  0217                     	;# 
   153  0217                     	;# 
   154  0391                     	;# 
   155  0392                     	;# 
   156  0393                     	;# 
   157  0498                     	;# 
   158  0498                     	;# 
   159  0499                     	;# 
   160  049A                     	;# 
   161  049B                     	;# 
   162  049B                     	;# 
   163  049C                     	;# 
   164  049D                     	;# 
   165  049E                     	;# 
   166  049F                     	;# 
   167  0611                     	;# 
   168  0612                     	;# 
   169  0613                     	;# 
   170  0613                     	;# 
   171  0614                     	;# 
   172  0615                     	;# 
   173  0616                     	;# 
   174  0616                     	;# 
   175  0617                     	;# 
   176  0618                     	;# 
   177  0619                     	;# 
   178  0619                     	;# 
   179  061A                     	;# 
   180  061B                     	;# 
   181  061C                     	;# 
   182  061C                     	;# 
   183  0691                     	;# 
   184  0692                     	;# 
   185  0693                     	;# 
   186  0694                     	;# 
   187  0695                     	;# 
   188  0F0F                     	;# 
   189  0F10                     	;# 
   190  0F11                     	;# 
   191  0F12                     	;# 
   192  0F13                     	;# 
   193  0F14                     	;# 
   194  0F15                     	;# 
   195  0F16                     	;# 
   196  0F17                     	;# 
   197  0F18                     	;# 
   198  0F19                     	;# 
   199  0F1A                     	;# 
   200  0F1B                     	;# 
   201  0F1C                     	;# 
   202  0F1D                     	;# 
   203  0F1E                     	;# 
   204  0F1F                     	;# 
   205  0FE3                     	;# 
   206  0FE4                     	;# 
   207  0FE5                     	;# 
   208  0FE6                     	;# 
   209  0FE7                     	;# 
   210  0FE8                     	;# 
   211  0FE9                     	;# 
   212  0FEA                     	;# 
   213  0FEB                     	;# 
   214  0FED                     	;# 
   215  0FEE                     	;# 
   216  0FEF                     	;# 
   217  0000                     	;# 
   218  0001                     	;# 
   219  0002                     	;# 
   220  0003                     	;# 
   221  0004                     	;# 
   222  0005                     	;# 
   223  0006                     	;# 
   224  0007                     	;# 
   225  0008                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000E                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0015                     	;# 
   235  0016                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001B                     	;# 
   242  001C                     	;# 
   243  008C                     	;# 
   244  008E                     	;# 
   245  0091                     	;# 
   246  0092                     	;# 
   247  0093                     	;# 
   248  0095                     	;# 
   249  0096                     	;# 
   250  0097                     	;# 
   251  0099                     	;# 
   252  009A                     	;# 
   253  009B                     	;# 
   254  009B                     	;# 
   255  009C                     	;# 
   256  009D                     	;# 
   257  009E                     	;# 
   258  009F                     	;# 
   259  010C                     	;# 
   260  010E                     	;# 
   261  0111                     	;# 
   262  0112                     	;# 
   263  0113                     	;# 
   264  0114                     	;# 
   265  0115                     	;# 
   266  0116                     	;# 
   267  0117                     	;# 
   268  0118                     	;# 
   269  0119                     	;# 
   270  011D                     	;# 
   271  018C                     	;# 
   272  018E                     	;# 
   273  0191                     	;# 
   274  0191                     	;# 
   275  0192                     	;# 
   276  0193                     	;# 
   277  0193                     	;# 
   278  0194                     	;# 
   279  0195                     	;# 
   280  0196                     	;# 
   281  020C                     	;# 
   282  0211                     	;# 
   283  0211                     	;# 
   284  0212                     	;# 
   285  0212                     	;# 
   286  0213                     	;# 
   287  0213                     	;# 
   288  0214                     	;# 
   289  0214                     	;# 
   290  0215                     	;# 
   291  0215                     	;# 
   292  0215                     	;# 
   293  0216                     	;# 
   294  0216                     	;# 
   295  0217                     	;# 
   296  0217                     	;# 
   297  0391                     	;# 
   298  0392                     	;# 
   299  0393                     	;# 
   300  0498                     	;# 
   301  0498                     	;# 
   302  0499                     	;# 
   303  049A                     	;# 
   304  049B                     	;# 
   305  049B                     	;# 
   306  049C                     	;# 
   307  049D                     	;# 
   308  049E                     	;# 
   309  049F                     	;# 
   310  0611                     	;# 
   311  0612                     	;# 
   312  0613                     	;# 
   313  0613                     	;# 
   314  0614                     	;# 
   315  0615                     	;# 
   316  0616                     	;# 
   317  0616                     	;# 
   318  0617                     	;# 
   319  0618                     	;# 
   320  0619                     	;# 
   321  0619                     	;# 
   322  061A                     	;# 
   323  061B                     	;# 
   324  061C                     	;# 
   325  061C                     	;# 
   326  0691                     	;# 
   327  0692                     	;# 
   328  0693                     	;# 
   329  0694                     	;# 
   330  0695                     	;# 
   331  0F0F                     	;# 
   332  0F10                     	;# 
   333  0F11                     	;# 
   334  0F12                     	;# 
   335  0F13                     	;# 
   336  0F14                     	;# 
   337  0F15                     	;# 
   338  0F16                     	;# 
   339  0F17                     	;# 
   340  0F18                     	;# 
   341  0F19                     	;# 
   342  0F1A                     	;# 
   343  0F1B                     	;# 
   344  0F1C                     	;# 
   345  0F1D                     	;# 
   346  0F1E                     	;# 
   347  0F1F                     	;# 
   348  0FE3                     	;# 
   349  0FE4                     	;# 
   350  0FE5                     	;# 
   351  0FE6                     	;# 
   352  0FE7                     	;# 
   353  0FE8                     	;# 
   354  0FE9                     	;# 
   355  0FEA                     	;# 
   356  0FEB                     	;# 
   357  0FED                     	;# 
   358  0FEE                     	;# 
   359  0FEF                     	;# 
   360  0000                     	;# 
   361  0001                     	;# 
   362  0002                     	;# 
   363  0003                     	;# 
   364  0004                     	;# 
   365  0005                     	;# 
   366  0006                     	;# 
   367  0007                     	;# 
   368  0008                     	;# 
   369  0009                     	;# 
   370  000A                     	;# 
   371  000B                     	;# 
   372  000C                     	;# 
   373  000E                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0013                     	;# 
   377  0015                     	;# 
   378  0016                     	;# 
   379  0016                     	;# 
   380  0017                     	;# 
   381  0018                     	;# 
   382  0019                     	;# 
   383  001A                     	;# 
   384  001B                     	;# 
   385  001C                     	;# 
   386  008C                     	;# 
   387  008E                     	;# 
   388  0091                     	;# 
   389  0092                     	;# 
   390  0093                     	;# 
   391  0095                     	;# 
   392  0096                     	;# 
   393  0097                     	;# 
   394  0099                     	;# 
   395  009A                     	;# 
   396  009B                     	;# 
   397  009B                     	;# 
   398  009C                     	;# 
   399  009D                     	;# 
   400  009E                     	;# 
   401  009F                     	;# 
   402  010C                     	;# 
   403  010E                     	;# 
   404  0111                     	;# 
   405  0112                     	;# 
   406  0113                     	;# 
   407  0114                     	;# 
   408  0115                     	;# 
   409  0116                     	;# 
   410  0117                     	;# 
   411  0118                     	;# 
   412  0119                     	;# 
   413  011D                     	;# 
   414  018C                     	;# 
   415  018E                     	;# 
   416  0191                     	;# 
   417  0191                     	;# 
   418  0192                     	;# 
   419  0193                     	;# 
   420  0193                     	;# 
   421  0194                     	;# 
   422  0195                     	;# 
   423  0196                     	;# 
   424  020C                     	;# 
   425  0211                     	;# 
   426  0211                     	;# 
   427  0212                     	;# 
   428  0212                     	;# 
   429  0213                     	;# 
   430  0213                     	;# 
   431  0214                     	;# 
   432  0214                     	;# 
   433  0215                     	;# 
   434  0215                     	;# 
   435  0215                     	;# 
   436  0216                     	;# 
   437  0216                     	;# 
   438  0217                     	;# 
   439  0217                     	;# 
   440  0391                     	;# 
   441  0392                     	;# 
   442  0393                     	;# 
   443  0498                     	;# 
   444  0498                     	;# 
   445  0499                     	;# 
   446  049A                     	;# 
   447  049B                     	;# 
   448  049B                     	;# 
   449  049C                     	;# 
   450  049D                     	;# 
   451  049E                     	;# 
   452  049F                     	;# 
   453  0611                     	;# 
   454  0612                     	;# 
   455  0613                     	;# 
   456  0613                     	;# 
   457  0614                     	;# 
   458  0615                     	;# 
   459  0616                     	;# 
   460  0616                     	;# 
   461  0617                     	;# 
   462  0618                     	;# 
   463  0619                     	;# 
   464  0619                     	;# 
   465  061A                     	;# 
   466  061B                     	;# 
   467  061C                     	;# 
   468  061C                     	;# 
   469  0691                     	;# 
   470  0692                     	;# 
   471  0693                     	;# 
   472  0694                     	;# 
   473  0695                     	;# 
   474  0F0F                     	;# 
   475  0F10                     	;# 
   476  0F11                     	;# 
   477  0F12                     	;# 
   478  0F13                     	;# 
   479  0F14                     	;# 
   480  0F15                     	;# 
   481  0F16                     	;# 
   482  0F17                     	;# 
   483  0F18                     	;# 
   484  0F19                     	;# 
   485  0F1A                     	;# 
   486  0F1B                     	;# 
   487  0F1C                     	;# 
   488  0F1D                     	;# 
   489  0F1E                     	;# 
   490  0F1F                     	;# 
   491  0FE3                     	;# 
   492  0FE4                     	;# 
   493  0FE5                     	;# 
   494  0FE6                     	;# 
   495  0FE7                     	;# 
   496  0FE8                     	;# 
   497  0FE9                     	;# 
   498  0FEA                     	;# 
   499  0FEB                     	;# 
   500  0FED                     	;# 
   501  0FEE                     	;# 
   502  0FEF                     	;# 
   503  0000                     	;# 
   504  0001                     	;# 
   505  0002                     	;# 
   506  0003                     	;# 
   507  0004                     	;# 
   508  0005                     	;# 
   509  0006                     	;# 
   510  0007                     	;# 
   511  0008                     	;# 
   512  0009                     	;# 
   513  000A                     	;# 
   514  000B                     	;# 
   515  000C                     	;# 
   516  000E                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0013                     	;# 
   520  0015                     	;# 
   521  0016                     	;# 
   522  0016                     	;# 
   523  0017                     	;# 
   524  0018                     	;# 
   525  0019                     	;# 
   526  001A                     	;# 
   527  001B                     	;# 
   528  001C                     	;# 
   529  008C                     	;# 
   530  008E                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0093                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  009F                     	;# 
   545  010C                     	;# 
   546  010E                     	;# 
   547  0111                     	;# 
   548  0112                     	;# 
   549  0113                     	;# 
   550  0114                     	;# 
   551  0115                     	;# 
   552  0116                     	;# 
   553  0117                     	;# 
   554  0118                     	;# 
   555  0119                     	;# 
   556  011D                     	;# 
   557  018C                     	;# 
   558  018E                     	;# 
   559  0191                     	;# 
   560  0191                     	;# 
   561  0192                     	;# 
   562  0193                     	;# 
   563  0193                     	;# 
   564  0194                     	;# 
   565  0195                     	;# 
   566  0196                     	;# 
   567  020C                     	;# 
   568  0211                     	;# 
   569  0211                     	;# 
   570  0212                     	;# 
   571  0212                     	;# 
   572  0213                     	;# 
   573  0213                     	;# 
   574  0214                     	;# 
   575  0214                     	;# 
   576  0215                     	;# 
   577  0215                     	;# 
   578  0215                     	;# 
   579  0216                     	;# 
   580  0216                     	;# 
   581  0217                     	;# 
   582  0217                     	;# 
   583  0391                     	;# 
   584  0392                     	;# 
   585  0393                     	;# 
   586  0498                     	;# 
   587  0498                     	;# 
   588  0499                     	;# 
   589  049A                     	;# 
   590  049B                     	;# 
   591  049B                     	;# 
   592  049C                     	;# 
   593  049D                     	;# 
   594  049E                     	;# 
   595  049F                     	;# 
   596  0611                     	;# 
   597  0612                     	;# 
   598  0613                     	;# 
   599  0613                     	;# 
   600  0614                     	;# 
   601  0615                     	;# 
   602  0616                     	;# 
   603  0616                     	;# 
   604  0617                     	;# 
   605  0618                     	;# 
   606  0619                     	;# 
   607  0619                     	;# 
   608  061A                     	;# 
   609  061B                     	;# 
   610  061C                     	;# 
   611  061C                     	;# 
   612  0691                     	;# 
   613  0692                     	;# 
   614  0693                     	;# 
   615  0694                     	;# 
   616  0695                     	;# 
   617  0F0F                     	;# 
   618  0F10                     	;# 
   619  0F11                     	;# 
   620  0F12                     	;# 
   621  0F13                     	;# 
   622  0F14                     	;# 
   623  0F15                     	;# 
   624  0F16                     	;# 
   625  0F17                     	;# 
   626  0F18                     	;# 
   627  0F19                     	;# 
   628  0F1A                     	;# 
   629  0F1B                     	;# 
   630  0F1C                     	;# 
   631  0F1D                     	;# 
   632  0F1E                     	;# 
   633  0F1F                     	;# 
   634  0FE3                     	;# 
   635  0FE4                     	;# 
   636  0FE5                     	;# 
   637  0FE6                     	;# 
   638  0FE7                     	;# 
   639  0FE8                     	;# 
   640  0FE9                     	;# 
   641  0FEA                     	;# 
   642  0FEB                     	;# 
   643  0FED                     	;# 
   644  0FEE                     	;# 
   645  0FEF                     	;# 
   646                           
   647                           	psect	idataCOMMON
   648  045B                     __pidataCOMMON:	
   649                           
   650                           ;initializer for _mode
   651  045B  3401               	retlw	1
   652                           
   653                           	psect	idataBANK0
   654  045C                     __pidataBANK0:	
   655                           
   656                           ;initializer for _nextMode
   657  045C  3401               	retlw	1
   658  07E0                     _NVMEM_absaddr	set	2016
   659                           
   660                           	psect	stringtext1
   661  0451                     __pstringtext1:	
   662  0451                     _n_ADDRESS_P0:	
   663  0451  34AD               	retlw	173
   664  0452  3487               	retlw	135
   665  0453  3466               	retlw	102
   666  0454  34BC               	retlw	188
   667  0455  34BB               	retlw	187
   668  0456                     __end_of_n_ADDRESS_P0:	
   669                           
   670                           	psect	stringtext2
   671  045D                     __pstringtext2:	
   672  045D                     _n_ADDRESS_MUL:	
   673  045D  3421               	retlw	33
   674  045E                     __end_of_n_ADDRESS_MUL:	
   675  07E0                     _NVMEM_absaddr	set	2016
   676                           
   677                           	psect	_NVMEM_text
   678  07E0                     __p_NVMEM_text:	
   679  07E0                     _NVMEM:	
   680  07E0  3455               	retlw	85
   681  07E1  346E               	retlw	110
   682  07E2  3463               	retlw	99
   683  07E3  346F               	retlw	111
   684  07E4  346E               	retlw	110
   685  07E5  3466               	retlw	102
   686  07E6  3469               	retlw	105
   687  07E7  3467               	retlw	103
   688  07E8  3475               	retlw	117
   689  07E9  3472               	retlw	114
   690  07EA  3465               	retlw	101
   691  07EB  3464               	retlw	100
   692  07EC  3400               	retlw	0
   693  07ED  3400               	retlw	0
   694  07EE  3400               	retlw	0
   695  07EF  3400               	retlw	0
   696  07F0  3400               	retlw	0
   697  07F1  3400               	retlw	0
   698  07F2  3400               	retlw	0
   699  07F3  3400               	retlw	0
   700  07F4  3400               	retlw	0
   701  07F5  3400               	retlw	0
   702  07F6  3400               	retlw	0
   703  07F7  3400               	retlw	0
   704  07F8  3400               	retlw	0
   705  07F9  3400               	retlw	0
   706  07FA  3400               	retlw	0
   707  07FB  3400               	retlw	0
   708  07FC  3400               	retlw	0
   709  07FD  3400               	retlw	0
   710  07FE  3400               	retlw	0
   711  07FF  3400               	retlw	0
   712  0800                     __end_of_NVMEM:	
   713  000C                     _PORTAbits	set	12
   714  000B                     _INTCONbits	set	11
   715  0003                     _STATUSbits	set	3
   716  0011                     _PIR1bits	set	17
   717  0097                     _WDTCONbits	set	151
   718  0091                     _PIE1bits	set	145
   719  009E                     _ADCON1bits	set	158
   720  008E                     _TRISCbits	set	142
   721  008C                     _TRISAbits	set	140
   722  0095                     _OPTION_REGbits	set	149
   723  0099                     _OSCCONbits	set	153
   724  009D                     _ADCON0bits	set	157
   725  009C                     _ADRESH	set	156
   726  009B                     _ADRESL	set	155
   727  0194                     _PMDATH	set	404
   728  0193                     _PMDATL	set	403
   729  0196                     _PMCON2	set	406
   730  0195                     _PMCON1bits	set	405
   731  0192                     _PMADRH	set	402
   732  0191                     _PMADRL	set	401
   733  0195                     _PMCON1	set	405
   734  018E                     _ANSELC	set	398
   735  018C                     _ANSELA	set	396
   736  018E                     _ANSELCbits	set	398
   737  018C                     _ANSELAbits	set	396
   738  0215                     _SSPCON1bits	set	533
   739  0214                     _SSP1STATbits	set	532
   740  0211                     _SSP1BUF	set	529
   741  020C                     _WPUAbits	set	524
   742                           
   743                           ; #config settings
   744  0000                     
   745                           	psect	cinit
   746  004A                     start_initialization:	
   747  004A                     __initialization:	
   748                           
   749                           ; Initialize objects allocated to COMMON
   750  004A  245B               	fcall	__pidataCOMMON	;fetch initializer
   751  004B  00F8               	movwf	__pdataCOMMON& (0+127)
   752                           
   753                           ; Initialize objects allocated to BANK0
   754  004C  245C               	fcall	__pidataBANK0	;fetch initializer
   755  004D  00C9               	movwf	__pdataBANK0& (0+127)
   756                           
   757                           ; Clear objects allocated to COMMON
   758  004E  01F7               	clrf	__pbssCOMMON& (0+127)
   759                           
   760                           ; Clear objects allocated to BANK0
   761  004F  303C               	movlw	low __pbssBANK0
   762  0050  0084               	movwf	4
   763  0051  3000               	movlw	high __pbssBANK0
   764  0052  0085               	movwf	5
   765  0053  300D               	movlw	13
   766  0054  244B               	fcall	clear_ram0
   767  0055                     end_of_initialization:	
   768                           ;End of C runtime variable initialization code
   769                           
   770  0055                     __end_of__initialization:	
   771  0055  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   772  0056  0020               	movlb	0
   773  0057  2B0B               	ljmp	_main	;jump to C main() function
   774                           
   775                           	psect	bssCOMMON
   776  0077                     __pbssCOMMON:	
   777  0077                     _adcLoop:	
   778  0077                     	ds	1
   779                           
   780                           	psect	dataCOMMON
   781  0078                     __pdataCOMMON:	
   782  0078                     _mode:	
   783  0078                     	ds	1
   784                           
   785                           	psect	bssBANK0
   786  003C                     __pbssBANK0:	
   787  003C                     _adcSum:	
   788  003C                     	ds	4
   789  0040                     _status:	
   790  0040                     	ds	1
   791  0041                     _buffer:	
   792  0041                     	ds	6
   793  0047                     _byte:	
   794  0047                     	ds	2
   795                           
   796                           	psect	dataBANK0
   797  0049                     __pdataBANK0:	
   798  0049                     _nextMode:	
   799  0049                     	ds	1
   800                           
   801                           	psect	clrtext
   802  044B                     clear_ram0:	
   803                           ;	Called with FSR0 containing the base address, and
   804                           ;	WREG with the size to clear
   805                           
   806  044B  0064               	clrwdt	;clear the watchdog before getting into this loop
   807  044C                     clrloop0:	
   808  044C  0180               	clrf	0	;clear RAM location pointed to by FSR
   809  044D  3101               	addfsr 0,1
   810  044E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   811  044F  2C4C               	goto	clrloop0	;have we reached the end yet?
   812  0450  3400               	retlw	0	;all done for this memory range, return
   813                           
   814                           	psect	cstackCOMMON
   815  0070                     __pcstackCOMMON:	
   816  0070                     ?_nrf24l01ISR:	
   817  0070                     ??_nrf24l01ISR:	
   818                           ; 1 bytes @ 0x0
   819                           
   820  0070                     ?_nrf24l01SendByte:	
   821                           ; 1 bytes @ 0x0
   822                           
   823  0070                     ?_nrf24l01SendStart:	
   824                           ; 1 bytes @ 0x0
   825                           
   826  0070                     ?_nrf24l01SendEnd:	
   827                           ; 1 bytes @ 0x0
   828                           
   829  0070                     ?_nrf24l01Init:	
   830                           ; 1 bytes @ 0x0
   831                           
   832  0070                     ?_ISR:	
   833                           ; 1 bytes @ 0x0
   834                           
   835  0070                     ??_ISR:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0070                     ?_sendName:	
   839                           ; 1 bytes @ 0x0
   840                           
   841  0070                     ?_loop:	
   842                           ; 1 bytes @ 0x0
   843                           
   844  0070                     ?_main:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0070                     ?_nrf24l01SPIStart:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0070                     ?_nrf24l01SPISend:	
   851                           ; 1 bytes @ 0x0
   852                           
   853  0070                     ?_nrf24l01SPIEnd:	
   854                           ; 1 bytes @ 0x0
   855                           
   856  0070                     ?_nrf24l01SetTransmitMode:	
   857                           ; 1 bytes @ 0x0
   858                           
   859  0070                     ?_nrf24l01InitRegisters:	
   860                           ; 1 bytes @ 0x0
   861                           
   862                           
   863                           ; 1 bytes @ 0x0
   864  0070                     	ds	5
   865  0075                     ISR@result:	
   866                           
   867                           ; 2 bytes @ 0x5
   868  0075                     	ds	2
   869                           
   870                           	psect	cstackBANK0
   871  0020                     __pcstackBANK0:	
   872  0020                     ??_nrf24l01SendEnd:	
   873  0020                     ??_nrf24l01SPIStart:	
   874                           ; 1 bytes @ 0x0
   875                           
   876  0020                     ??_nrf24l01SPISend:	
   877                           ; 1 bytes @ 0x0
   878                           
   879  0020                     ??_nrf24l01SPIEnd:	
   880                           ; 1 bytes @ 0x0
   881                           
   882  0020                     ?_read_flashmem:	
   883                           ; 1 bytes @ 0x0
   884                           
   885  0020                     ?___lwdiv:	
   886                           ; 2 bytes @ 0x0
   887                           
   888  0020                     ?___lwmod:	
   889                           ; 2 bytes @ 0x0
   890                           
   891  0020                     ?___aldiv:	
   892                           ; 2 bytes @ 0x0
   893                           
   894  0020                     nrf24l01SPISend@data:	
   895                           ; 4 bytes @ 0x0
   896                           
   897  0020                     read_flashmem@offset:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0020                     ___lwdiv@divisor:	
   901                           ; 2 bytes @ 0x0
   902                           
   903  0020                     ___lwmod@divisor:	
   904                           ; 2 bytes @ 0x0
   905                           
   906  0020                     ___aldiv@divisor:	
   907                           ; 2 bytes @ 0x0
   908                           
   909                           
   910                           ; 4 bytes @ 0x0
   911  0020                     	ds	1
   912  0021                     ??_nrf24l01SendByte:	
   913  0021                     ?_nrf24l01Send:	
   914                           ; 1 bytes @ 0x1
   915                           
   916  0021                     nrf24l01Send@data:	
   917                           ; 1 bytes @ 0x1
   918                           
   919  0021                     nrf24l01SendByte@payloadByte:	
   920                           ; 1 bytes @ 0x1
   921                           
   922                           
   923                           ; 1 bytes @ 0x1
   924  0021                     	ds	1
   925  0022                     ??_read_flashmem:	
   926  0022                     ??_nrf24l01Send:	
   927                           ; 1 bytes @ 0x2
   928                           
   929  0022                     ___lwdiv@dividend:	
   930                           ; 1 bytes @ 0x2
   931                           
   932  0022                     ___lwmod@dividend:	
   933                           ; 2 bytes @ 0x2
   934                           
   935                           
   936                           ; 2 bytes @ 0x2
   937  0022                     	ds	1
   938  0023                     nrf24l01Send@command:	
   939                           
   940                           ; 1 bytes @ 0x3
   941  0023                     	ds	1
   942  0024                     ??_nrf24l01SetTransmitMode:	
   943  0024                     ??_nrf24l01InitRegisters:	
   944                           ; 1 bytes @ 0x4
   945                           
   946  0024                     ??___lwdiv:	
   947                           ; 1 bytes @ 0x4
   948                           
   949  0024                     ??___lwmod:	
   950                           ; 1 bytes @ 0x4
   951                           
   952  0024                     read_flashmem@result:	
   953                           ; 1 bytes @ 0x4
   954                           
   955  0024                     ___aldiv@dividend:	
   956                           ; 2 bytes @ 0x4
   957                           
   958                           
   959                           ; 4 bytes @ 0x4
   960  0024                     	ds	1
   961  0025                     nrf24l01SetTransmitMode@config:	
   962  0025                     nrf24l01InitRegisters@setupAW:	
   963                           ; 1 bytes @ 0x5
   964                           
   965  0025                     ___lwmod@counter:	
   966                           ; 1 bytes @ 0x5
   967                           
   968  0025                     ___lwdiv@quotient:	
   969                           ; 1 bytes @ 0x5
   970                           
   971                           
   972                           ; 2 bytes @ 0x5
   973  0025                     	ds	1
   974  0026                     ??_nrf24l01SendStart:	
   975  0026                     ??_sendName:	
   976                           ; 1 bytes @ 0x6
   977                           
   978  0026                     nrf24l01InitRegisters@setupRetries:	
   979                           ; 1 bytes @ 0x6
   980                           
   981                           
   982                           ; 1 bytes @ 0x6
   983  0026                     	ds	1
   984  0027                     sendName@btye:	
   985  0027                     nrf24l01InitRegisters@feature:	
   986                           ; 1 bytes @ 0x7
   987                           
   988  0027                     ___lwdiv@counter:	
   989                           ; 1 bytes @ 0x7
   990                           
   991                           
   992                           ; 1 bytes @ 0x7
   993  0027                     	ds	1
   994  0028                     ?_utoa:	
   995  0028                     ??___aldiv:	
   996                           ; 1 bytes @ 0x8
   997                           
   998  0028                     nrf24l01InitRegisters@rfSetup:	
   999                           ; 1 bytes @ 0x8
  1000                           
  1001  0028                     sendName@offset:	
  1002                           ; 1 bytes @ 0x8
  1003                           
  1004  0028                     utoa@val:	
  1005                           ; 2 bytes @ 0x8
  1006                           
  1007                           
  1008                           ; 2 bytes @ 0x8
  1009  0028                     	ds	1
  1010  0029                     nrf24l01InitRegisters@config:	
  1011  0029                     ___aldiv@counter:	
  1012                           ; 1 bytes @ 0x9
  1013                           
  1014                           
  1015                           ; 1 bytes @ 0x9
  1016  0029                     	ds	1
  1017  002A                     nrf24l01InitRegisters@enRXAddr:	
  1018  002A                     ___aldiv@sign:	
  1019                           ; 1 bytes @ 0xA
  1020                           
  1021  002A                     utoa@base:	
  1022                           ; 1 bytes @ 0xA
  1023                           
  1024                           
  1025                           ; 2 bytes @ 0xA
  1026  002A                     	ds	1
  1027  002B                     nrf24l01InitRegisters@enAA:	
  1028  002B                     ___aldiv@quotient:	
  1029                           ; 1 bytes @ 0xB
  1030                           
  1031                           
  1032                           ; 4 bytes @ 0xB
  1033  002B                     	ds	1
  1034  002C                     ??_utoa:	
  1035  002C                     nrf24l01InitRegisters@DynPD:	
  1036                           ; 1 bytes @ 0xC
  1037                           
  1038                           
  1039                           ; 1 bytes @ 0xC
  1040  002C                     	ds	1
  1041  002D                     ??_nrf24l01Init:	
  1042  002D                     utoa@v:	
  1043                           ; 1 bytes @ 0xD
  1044                           
  1045                           
  1046                           ; 2 bytes @ 0xD
  1047  002D                     	ds	2
  1048  002F                     utoa@c:	
  1049                           
  1050                           ; 1 bytes @ 0xF
  1051  002F                     	ds	1
  1052  0030                     utoa@buf:	
  1053                           
  1054                           ; 1 bytes @ 0x10
  1055  0030                     	ds	1
  1056  0031                     ?_itoa:	
  1057  0031                     itoa@val:	
  1058                           ; 1 bytes @ 0x11
  1059                           
  1060                           
  1061                           ; 2 bytes @ 0x11
  1062  0031                     	ds	2
  1063  0033                     itoa@base:	
  1064                           
  1065                           ; 2 bytes @ 0x13
  1066  0033                     	ds	2
  1067  0035                     ??_itoa:	
  1068                           
  1069                           ; 1 bytes @ 0x15
  1070  0035                     	ds	1
  1071  0036                     itoa@cp:	
  1072                           
  1073                           ; 1 bytes @ 0x16
  1074  0036                     	ds	1
  1075  0037                     itoa@buf:	
  1076                           
  1077                           ; 1 bytes @ 0x17
  1078  0037                     	ds	1
  1079  0038                     ??_loop:	
  1080                           
  1081                           ; 1 bytes @ 0x18
  1082  0038                     	ds	2
  1083  003A                     loop@i:	
  1084                           
  1085                           ; 1 bytes @ 0x1A
  1086  003A                     	ds	1
  1087  003B                     ??_main:	
  1088                           
  1089                           ; 1 bytes @ 0x1B
  1090  003B                     	ds	1
  1091                           
  1092                           	psect	maintext
  1093  030B                     __pmaintext:	
  1094 ;;
  1095 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1096 ;;
  1097 ;; *************** function _main *****************
  1098 ;; Defined at:
  1099 ;;		line 191 in file "main.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;		None
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;		None
  1104 ;; Return value:  Size  Location     Type
  1105 ;;                  1    wreg      void 
  1106 ;; Registers used:
  1107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1108 ;; Tracked objects:
  1109 ;;		On entry : B1F/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMMON   BANK0   BANK1
  1113 ;;      Params:         0       0       0
  1114 ;;      Locals:         0       0       0
  1115 ;;      Temps:          0       1       0
  1116 ;;      Totals:         0       1       0
  1117 ;;Total ram usage:        1 bytes
  1118 ;; Hardware stack levels required when called:    7
  1119 ;; This function calls:
  1120 ;;		_loop
  1121 ;;		_nrf24l01Init
  1122 ;; This function is called by:
  1123 ;;		Startup code after reset
  1124 ;; This function uses a non-reentrant model
  1125 ;;
  1126                           
  1127                           
  1128                           ;psect for function _main
  1129  030B                     _main:	
  1130                           
  1131                           ;main.c: 193: INTCONbits.PEIE = 0;
  1132                           
  1133                           ;incstack = 0
  1134                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1135  030B  130B               	bcf	11,6	;volatile
  1136                           
  1137                           ;main.c: 194: INTCONbits.GIE = 0;
  1138  030C  138B               	bcf	11,7	;volatile
  1139                           
  1140                           ;main.c: 196: OSCCONbits.IRCF = 0b1111;
  1141  030D  3078               	movlw	120
  1142  030E  0021               	movlb	1	; select bank1
  1143  030F  0499               	iorwf	25,f	;volatile
  1144                           
  1145                           ;main.c: 197: OSCCONbits.SCS = 0b10;
  1146  0310  0819               	movf	25,w	;volatile
  1147  0311  39FC               	andlw	-4
  1148  0312  3802               	iorlw	2
  1149  0313  0099               	movwf	25	;volatile
  1150                           
  1151                           ;main.c: 199: _delay((unsigned long)((10)*(16000000/4000.0)));
  1152  0314  3034               	movlw	52
  1153  0315  0020               	movlb	0	; select bank0
  1154  0316  00BB               	movwf	??_main
  1155  0317  30F1               	movlw	241
  1156  0318                     u977:	
  1157  0318  0B89               	decfsz	9,f
  1158  0319  2B18               	goto	u977
  1159  031A  0BBB               	decfsz	??_main,f
  1160  031B  2B18               	goto	u977
  1161  031C  3200               	nop2
  1162                           
  1163                           ;main.c: 201: nrf24l01Init();
  1164  031D  236B               	fcall	_nrf24l01Init
  1165                           
  1166                           ;main.c: 203: OPTION_REGbits.nWPUEN = 0;
  1167  031E  0021               	movlb	1	; select bank1
  1168  031F  1395               	bcf	21,7	;volatile
  1169                           
  1170                           ;main.c: 207: ADCON0bits.ADON = 0;
  1171  0320  101D               	bcf	29,0	;volatile
  1172                           
  1173                           ;main.c: 209: ANSELAbits.ANSA4 = 1;
  1174  0321  0023               	movlb	3	; select bank3
  1175  0322  160C               	bsf	12,4	;volatile
  1176                           
  1177                           ;main.c: 210: TRISAbits.TRISA4 = 1;
  1178  0323  0021               	movlb	1	; select bank1
  1179  0324  160C               	bsf	12,4	;volatile
  1180                           
  1181                           ;main.c: 211: WPUAbits.WPUA4 = 0;
  1182  0325  0024               	movlb	4	; select bank4
  1183  0326  120C               	bcf	12,4	;volatile
  1184                           
  1185                           ;main.c: 213: ANSELCbits.ANSC3 = 1;
  1186  0327  0023               	movlb	3	; select bank3
  1187  0328  158E               	bsf	14,3	;volatile
  1188                           
  1189                           ;main.c: 214: TRISCbits.TRISC3 = 1;
  1190  0329  0021               	movlb	1	; select bank1
  1191  032A  158E               	bsf	14,3	;volatile
  1192                           
  1193                           ;main.c: 216: ADCON1bits.ADCS = 0b111;
  1194  032B  3070               	movlw	112
  1195  032C  049E               	iorwf	30,f	;volatile
  1196                           
  1197                           ;main.c: 217: ADCON1bits.ADFM = 1;
  1198  032D  179E               	bsf	30,7	;volatile
  1199                           
  1200                           ;main.c: 218: ADCON1bits.ADPREF = 0b00;
  1201  032E  30FC               	movlw	-4
  1202  032F  059E               	andwf	30,f	;volatile
  1203                           
  1204                           ;main.c: 220: PIE1bits.ADIE = 1;
  1205  0330  1711               	bsf	17,6	;volatile
  1206                           
  1207                           ;main.c: 222: ADCON0bits.CHS = 3;
  1208  0331  081D               	movf	29,w	;volatile
  1209  0332  3983               	andlw	-125
  1210  0333  380C               	iorlw	12
  1211  0334  009D               	movwf	29	;volatile
  1212                           
  1213                           ;main.c: 223: ADCON0bits.ADON = 1;
  1214  0335  141D               	bsf	29,0	;volatile
  1215                           
  1216                           ;main.c: 234: WDTCONbits.WDTPS = 11;
  1217  0336  0817               	movf	23,w	;volatile
  1218  0337  39C1               	andlw	-63
  1219  0338  3816               	iorlw	22
  1220  0339  0097               	movwf	23	;volatile
  1221                           
  1222                           ;main.c: 235: INTCONbits.PEIE = 1;
  1223  033A  170B               	bsf	11,6	;volatile
  1224                           
  1225                           ;main.c: 236: INTCONbits.GIE = 1;
  1226  033B  178B               	bsf	11,7	;volatile
  1227  033C                     l2013:	
  1228                           ;main.c: 239: while(1){
  1229                           
  1230                           
  1231                           ;main.c: 240: loop();
  1232  033C  2058               	fcall	_loop
  1233  033D  2B3C               	goto	l2013
  1234  033E                     __end_of_main:	
  1235                           ;main.c: 241: }
  1236                           ;main.c: 243: return;
  1237                           
  1238                           
  1239                           	psect	text1
  1240  036B                     __ptext1:	
  1241 ;; *************** function _nrf24l01Init *****************
  1242 ;; Defined at:
  1243 ;;		line 188 in file "nrf24l01.c"
  1244 ;; Parameters:    Size  Location     Type
  1245 ;;		None
  1246 ;; Auto vars:     Size  Location     Type
  1247 ;;		None
  1248 ;; Return value:  Size  Location     Type
  1249 ;;                  1    wreg      void 
  1250 ;; Registers used:
  1251 ;;		wreg, status,2, status,0, pclath, cstack
  1252 ;; Tracked objects:
  1253 ;;		On entry : 0/0
  1254 ;;		On exit  : 0/0
  1255 ;;		Unchanged: 0/0
  1256 ;; Data sizes:     COMMON   BANK0   BANK1
  1257 ;;      Params:         0       0       0
  1258 ;;      Locals:         0       0       0
  1259 ;;      Temps:          0       1       0
  1260 ;;      Totals:         0       1       0
  1261 ;;Total ram usage:        1 bytes
  1262 ;; Hardware stack levels used:    1
  1263 ;; Hardware stack levels required when called:    5
  1264 ;; This function calls:
  1265 ;;		_nrf24l01InitRegisters
  1266 ;; This function is called by:
  1267 ;;		_main
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           
  1272                           ;psect for function _nrf24l01Init
  1273  036B                     _nrf24l01Init:	
  1274                           
  1275                           ;nrf24l01.c: 190: TRISAbits.TRISA0 = 0;
  1276                           
  1277                           ;incstack = 0
  1278                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1279  036B  0021               	movlb	1	; select bank1
  1280  036C  100C               	bcf	12,0	;volatile
  1281                           
  1282                           ;nrf24l01.c: 194: ANSELA = 0x00;
  1283  036D  0023               	movlb	3	; select bank3
  1284  036E  018C               	clrf	12	;volatile
  1285                           
  1286                           ;nrf24l01.c: 195: ANSELC = 0x00;
  1287  036F  018E               	clrf	14	;volatile
  1288                           
  1289                           ;nrf24l01.c: 197: TRISAbits.TRISA1 = 0;
  1290  0370  0021               	movlb	1	; select bank1
  1291  0371  108C               	bcf	12,1	;volatile
  1292                           
  1293                           ;nrf24l01.c: 199: TRISCbits.TRISC1 = 1;
  1294  0372  148E               	bsf	14,1	;volatile
  1295                           
  1296                           ;nrf24l01.c: 200: TRISCbits.TRISC2 = 0;
  1297  0373  110E               	bcf	14,2	;volatile
  1298                           
  1299                           ;nrf24l01.c: 201: TRISCbits.TRISC0 = 0;
  1300  0374  100E               	bcf	14,0	;volatile
  1301                           
  1302                           ;nrf24l01.c: 203: SSPCON1bits.SSPEN = 0;
  1303  0375  0024               	movlb	4	; select bank4
  1304  0376  1295               	bcf	21,5	;volatile
  1305                           
  1306                           ;nrf24l01.c: 204: SSPCON1bits.CKP = 0;
  1307  0377  1215               	bcf	21,4	;volatile
  1308                           
  1309                           ;nrf24l01.c: 205: SSP1STATbits.CKE = 1;
  1310  0378  1714               	bsf	20,6	;volatile
  1311                           
  1312                           ;nrf24l01.c: 206: SSPCON1bits.SSPM = 0b0000;
  1313  0379  30F0               	movlw	-16
  1314  037A  0595               	andwf	21,f	;volatile
  1315                           
  1316                           ;nrf24l01.c: 208: SSPCON1bits.SSPEN = 1;
  1317  037B  1695               	bsf	21,5	;volatile
  1318                           
  1319                           ;nrf24l01.c: 210: PORTAbits.RA0 = 0;
  1320  037C  0020               	movlb	0	; select bank0
  1321  037D  100C               	bcf	12,0	;volatile
  1322                           
  1323                           ;nrf24l01.c: 212: _delay((unsigned long)((11)*(16000000/4000.0)));
  1324  037E  303A               	movlw	58
  1325  037F  0020               	movlb	0	; select bank0
  1326  0380  00AD               	movwf	??_nrf24l01Init
  1327  0381  3023               	movlw	35
  1328  0382                     u987:	
  1329  0382  0B89               	decfsz	9,f
  1330  0383  2B82               	goto	u987
  1331  0384  0BAD               	decfsz	??_nrf24l01Init,f
  1332  0385  2B82               	goto	u987
  1333                           
  1334                           ;nrf24l01.c: 214: nrf24l01InitRegisters();
  1335  0386  2168               	fcall	_nrf24l01InitRegisters
  1336                           
  1337                           ;nrf24l01.c: 216: _delay((unsigned long)((2)*(16000000/4000.0)));
  1338  0387  300B               	movlw	11
  1339  0388  0020               	movlb	0	; select bank0
  1340  0389  00AD               	movwf	??_nrf24l01Init
  1341  038A  3062               	movlw	98
  1342  038B                     u997:	
  1343  038B  0B89               	decfsz	9,f
  1344  038C  2B8B               	goto	u997
  1345  038D  0BAD               	decfsz	??_nrf24l01Init,f
  1346  038E  2B8B               	goto	u997
  1347  038F  0000               	nop
  1348  0390  0008               	return
  1349  0391                     __end_of_nrf24l01Init:	
  1350                           
  1351                           	psect	text2
  1352  0168                     __ptext2:	
  1353 ;; *************** function _nrf24l01InitRegisters *****************
  1354 ;; Defined at:
  1355 ;;		line 101 in file "nrf24l01.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;		None
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;  DynPD           1   12[BANK0 ] struct .
  1360 ;;  enAA            1   11[BANK0 ] struct .
  1361 ;;  enRXAddr        1   10[BANK0 ] struct .
  1362 ;;  config          1    9[BANK0 ] struct .
  1363 ;;  rfSetup         1    8[BANK0 ] struct .
  1364 ;;  feature         1    7[BANK0 ] struct .
  1365 ;;  setupRetries    1    6[BANK0 ] struct .
  1366 ;;  setupAW         1    5[BANK0 ] struct .
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  1    wreg      void 
  1369 ;; Registers used:
  1370 ;;		wreg, status,2, status,0, pclath, cstack
  1371 ;; Tracked objects:
  1372 ;;		On entry : 0/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMMON   BANK0   BANK1
  1376 ;;      Params:         0       0       0
  1377 ;;      Locals:         0       8       0
  1378 ;;      Temps:          0       1       0
  1379 ;;      Totals:         0       9       0
  1380 ;;Total ram usage:        9 bytes
  1381 ;; Hardware stack levels used:    1
  1382 ;; Hardware stack levels required when called:    4
  1383 ;; This function calls:
  1384 ;;		_nrf24l01Send
  1385 ;; This function is called by:
  1386 ;;		_nrf24l01Init
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389                           
  1390                           
  1391                           ;psect for function _nrf24l01InitRegisters
  1392  0168                     _nrf24l01InitRegisters:	
  1393                           
  1394                           ;nrf24l01.c: 103: nrf24l01Send(0b00100000 | 0x00, 0x00);
  1395                           
  1396                           ;incstack = 0
  1397                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  1398  0168  0020               	movlb	0	; select bank0
  1399  0169  01A1               	clrf	nrf24l01Send@data
  1400  016A  3020               	movlw	32
  1401  016B  240C               	fcall	_nrf24l01Send
  1402                           
  1403                           ;nrf24l01.c: 105: _delay((unsigned long)((10)*(16000000/4000.0)));
  1404  016C  3034               	movlw	52
  1405  016D  0020               	movlb	0	; select bank0
  1406  016E  00A4               	movwf	??_nrf24l01InitRegisters
  1407  016F  30F1               	movlw	241
  1408  0170                     u1007:	
  1409  0170  0B89               	decfsz	9,f
  1410  0171  2970               	goto	u1007
  1411  0172  0BA4               	decfsz	??_nrf24l01InitRegisters,f
  1412  0173  2970               	goto	u1007
  1413  0174  3200               	nop2
  1414                           
  1415                           ;nrf24l01.c: 107: n_SETUP_AW_t setupAW;
  1416                           ;nrf24l01.c: 108: setupAW.byte = 0x00;
  1417  0175  0020               	movlb	0	; select bank0
  1418  0176  01A5               	clrf	nrf24l01InitRegisters@setupAW
  1419                           
  1420                           ;nrf24l01.c: 109: setupAW.AW = 3;
  1421  0177  3003               	movlw	3
  1422  0178  04A5               	iorwf	nrf24l01InitRegisters@setupAW,f
  1423                           
  1424                           ;nrf24l01.c: 110: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  1425  0179  0825               	movf	nrf24l01InitRegisters@setupAW,w
  1426  017A  00A4               	movwf	??_nrf24l01InitRegisters
  1427  017B  0824               	movf	??_nrf24l01InitRegisters,w
  1428  017C  00A1               	movwf	nrf24l01Send@data
  1429  017D  3022               	movlw	34
  1430  017E  240C               	fcall	_nrf24l01Send
  1431                           
  1432                           ;nrf24l01.c: 113: n_SETUP_RETR_t setupRetries;
  1433                           ;nrf24l01.c: 114: setupRetries.ARD = 15;
  1434  017F  30F0               	movlw	240
  1435  0180  0020               	movlb	0	; select bank0
  1436  0181  04A6               	iorwf	nrf24l01InitRegisters@setupRetries,f
  1437                           
  1438                           ;nrf24l01.c: 115: setupRetries.ARC = 15;
  1439  0182  300F               	movlw	15
  1440  0183  04A6               	iorwf	nrf24l01InitRegisters@setupRetries,f
  1441                           
  1442                           ;nrf24l01.c: 116: nrf24l01Send(0b00100000 | 0x04, setupRetries.byte);
  1443  0184  0826               	movf	nrf24l01InitRegisters@setupRetries,w
  1444  0185  00A4               	movwf	??_nrf24l01InitRegisters
  1445  0186  0824               	movf	??_nrf24l01InitRegisters,w
  1446  0187  00A1               	movwf	nrf24l01Send@data
  1447  0188  3024               	movlw	36
  1448  0189  240C               	fcall	_nrf24l01Send
  1449                           
  1450                           ;nrf24l01.c: 124: n_RF_SETUP_t rfSetup;
  1451                           ;nrf24l01.c: 125: rfSetup.RF_DR_LOW = 0;
  1452  018A  0020               	movlb	0	; select bank0
  1453  018B  12A8               	bcf	nrf24l01InitRegisters@rfSetup,5
  1454                           
  1455                           ;nrf24l01.c: 126: rfSetup.RF_DR_HIGH = 1;
  1456  018C  15A8               	bsf	nrf24l01InitRegisters@rfSetup,3
  1457                           
  1458                           ;nrf24l01.c: 127: rfSetup.RF_PWR = 3;
  1459  018D  3006               	movlw	6
  1460  018E  04A8               	iorwf	nrf24l01InitRegisters@rfSetup,f
  1461                           
  1462                           ;nrf24l01.c: 128: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  1463  018F  0828               	movf	nrf24l01InitRegisters@rfSetup,w
  1464  0190  00A4               	movwf	??_nrf24l01InitRegisters
  1465  0191  0824               	movf	??_nrf24l01InitRegisters,w
  1466  0192  00A1               	movwf	nrf24l01Send@data
  1467  0193  3026               	movlw	38
  1468  0194  240C               	fcall	_nrf24l01Send
  1469                           
  1470                           ;nrf24l01.c: 131: n_CONFIG_t config;
  1471                           ;nrf24l01.c: 132: config.PRIM_RX = 1;
  1472  0195  0020               	movlb	0	; select bank0
  1473  0196  1429               	bsf	nrf24l01InitRegisters@config,0
  1474                           
  1475                           ;nrf24l01.c: 133: config.EN_CRC = 1;
  1476  0197  15A9               	bsf	nrf24l01InitRegisters@config,3
  1477                           
  1478                           ;nrf24l01.c: 134: config.CRCO = 1;
  1479  0198  1529               	bsf	nrf24l01InitRegisters@config,2
  1480                           
  1481                           ;nrf24l01.c: 135: config.PWR_UP = 1;
  1482  0199  14A9               	bsf	nrf24l01InitRegisters@config,1
  1483                           
  1484                           ;nrf24l01.c: 136: nrf24l01Send(0b00100000 | 0x00, config.byte);
  1485  019A  0829               	movf	nrf24l01InitRegisters@config,w
  1486  019B  00A4               	movwf	??_nrf24l01InitRegisters
  1487  019C  0824               	movf	??_nrf24l01InitRegisters,w
  1488  019D  00A1               	movwf	nrf24l01Send@data
  1489  019E  3020               	movlw	32
  1490  019F  240C               	fcall	_nrf24l01Send
  1491                           
  1492                           ;nrf24l01.c: 139: n_EN_RXADDR_t enRXAddr;
  1493                           ;nrf24l01.c: 140: enRXAddr.ERX_P0 = 1;
  1494  01A0  0020               	movlb	0	; select bank0
  1495  01A1  142A               	bsf	nrf24l01InitRegisters@enRXAddr,0
  1496                           
  1497                           ;nrf24l01.c: 141: enRXAddr.ERX_P1 = 1;
  1498  01A2  14AA               	bsf	nrf24l01InitRegisters@enRXAddr,1
  1499                           
  1500                           ;nrf24l01.c: 142: enRXAddr.ERX_P2 = 1;
  1501  01A3  152A               	bsf	nrf24l01InitRegisters@enRXAddr,2
  1502                           
  1503                           ;nrf24l01.c: 143: enRXAddr.ERX_P3 = 1;
  1504  01A4  15AA               	bsf	nrf24l01InitRegisters@enRXAddr,3
  1505                           
  1506                           ;nrf24l01.c: 144: enRXAddr.ERX_P4 = 1;
  1507  01A5  162A               	bsf	nrf24l01InitRegisters@enRXAddr,4
  1508                           
  1509                           ;nrf24l01.c: 145: enRXAddr.ERX_P5 = 1;
  1510  01A6  16AA               	bsf	nrf24l01InitRegisters@enRXAddr,5
  1511                           
  1512                           ;nrf24l01.c: 146: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  1513  01A7  082A               	movf	nrf24l01InitRegisters@enRXAddr,w
  1514  01A8  00A4               	movwf	??_nrf24l01InitRegisters
  1515  01A9  0824               	movf	??_nrf24l01InitRegisters,w
  1516  01AA  00A1               	movwf	nrf24l01Send@data
  1517  01AB  3022               	movlw	34
  1518  01AC  240C               	fcall	_nrf24l01Send
  1519                           
  1520                           ;nrf24l01.c: 149: n_EN_AA_t enAA;
  1521                           ;nrf24l01.c: 150: enAA.byte = nrf24l01Send(0b00000000 | 0x01, 0);
  1522  01AD  0020               	movlb	0	; select bank0
  1523  01AE  01A1               	clrf	nrf24l01Send@data
  1524  01AF  3001               	movlw	1
  1525  01B0  240C               	fcall	_nrf24l01Send
  1526  01B1  0020               	movlb	0	; select bank0
  1527  01B2  00A4               	movwf	??_nrf24l01InitRegisters
  1528  01B3  0824               	movf	??_nrf24l01InitRegisters,w
  1529  01B4  00AB               	movwf	nrf24l01InitRegisters@enAA
  1530                           
  1531                           ;nrf24l01.c: 151: enAA.ENAA_P0 = 0;
  1532  01B5  102B               	bcf	nrf24l01InitRegisters@enAA,0
  1533                           
  1534                           ;nrf24l01.c: 152: enAA.ENAA_P1 = 0;
  1535  01B6  10AB               	bcf	nrf24l01InitRegisters@enAA,1
  1536                           
  1537                           ;nrf24l01.c: 153: enAA.ENAA_P2 = 0;
  1538  01B7  112B               	bcf	nrf24l01InitRegisters@enAA,2
  1539                           
  1540                           ;nrf24l01.c: 154: enAA.ENAA_P3 = 0;
  1541  01B8  11AB               	bcf	nrf24l01InitRegisters@enAA,3
  1542                           
  1543                           ;nrf24l01.c: 155: enAA.ENAA_P4 = 0;
  1544  01B9  122B               	bcf	nrf24l01InitRegisters@enAA,4
  1545                           
  1546                           ;nrf24l01.c: 156: enAA.ENAA_P5 = 0;
  1547  01BA  12AB               	bcf	nrf24l01InitRegisters@enAA,5
  1548                           
  1549                           ;nrf24l01.c: 157: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  1550  01BB  082B               	movf	nrf24l01InitRegisters@enAA,w
  1551  01BC  00A4               	movwf	??_nrf24l01InitRegisters
  1552  01BD  0824               	movf	??_nrf24l01InitRegisters,w
  1553  01BE  00A1               	movwf	nrf24l01Send@data
  1554  01BF  3021               	movlw	33
  1555  01C0  240C               	fcall	_nrf24l01Send
  1556                           
  1557                           ;nrf24l01.c: 161: n_FEATURE_t feature;
  1558                           ;nrf24l01.c: 162: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  1559  01C1  0020               	movlb	0	; select bank0
  1560  01C2  01A1               	clrf	nrf24l01Send@data
  1561  01C3  301D               	movlw	29
  1562  01C4  240C               	fcall	_nrf24l01Send
  1563  01C5  0020               	movlb	0	; select bank0
  1564  01C6  00A4               	movwf	??_nrf24l01InitRegisters
  1565  01C7  0824               	movf	??_nrf24l01InitRegisters,w
  1566  01C8  00A7               	movwf	nrf24l01InitRegisters@feature
  1567                           
  1568                           ;nrf24l01.c: 163: feature.EN_DPL = 1;
  1569  01C9  1527               	bsf	nrf24l01InitRegisters@feature,2
  1570                           
  1571                           ;nrf24l01.c: 164: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  1572  01CA  0827               	movf	nrf24l01InitRegisters@feature,w
  1573  01CB  00A4               	movwf	??_nrf24l01InitRegisters
  1574  01CC  0824               	movf	??_nrf24l01InitRegisters,w
  1575  01CD  00A1               	movwf	nrf24l01Send@data
  1576  01CE  303D               	movlw	61
  1577  01CF  240C               	fcall	_nrf24l01Send
  1578                           
  1579                           ;nrf24l01.c: 166: n_DYNPD_t DynPD;
  1580                           ;nrf24l01.c: 167: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  1581  01D0  0020               	movlb	0	; select bank0
  1582  01D1  01A1               	clrf	nrf24l01Send@data
  1583  01D2  301C               	movlw	28
  1584  01D3  240C               	fcall	_nrf24l01Send
  1585  01D4  0020               	movlb	0	; select bank0
  1586  01D5  00A4               	movwf	??_nrf24l01InitRegisters
  1587  01D6  0824               	movf	??_nrf24l01InitRegisters,w
  1588  01D7  00AC               	movwf	nrf24l01InitRegisters@DynPD
  1589                           
  1590                           ;nrf24l01.c: 168: DynPD.DPL_P0 = 1;
  1591  01D8  142C               	bsf	nrf24l01InitRegisters@DynPD,0
  1592                           
  1593                           ;nrf24l01.c: 169: DynPD.DPL_P1 = 1;
  1594  01D9  14AC               	bsf	nrf24l01InitRegisters@DynPD,1
  1595                           
  1596                           ;nrf24l01.c: 170: DynPD.DPL_P2 = 1;
  1597  01DA  152C               	bsf	nrf24l01InitRegisters@DynPD,2
  1598                           
  1599                           ;nrf24l01.c: 171: DynPD.DPL_P3 = 1;
  1600  01DB  15AC               	bsf	nrf24l01InitRegisters@DynPD,3
  1601                           
  1602                           ;nrf24l01.c: 172: DynPD.DPL_P4 = 1;
  1603  01DC  162C               	bsf	nrf24l01InitRegisters@DynPD,4
  1604                           
  1605                           ;nrf24l01.c: 173: DynPD.DPL_P5 = 1;
  1606  01DD  16AC               	bsf	nrf24l01InitRegisters@DynPD,5
  1607                           
  1608                           ;nrf24l01.c: 174: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  1609  01DE  082C               	movf	nrf24l01InitRegisters@DynPD,w
  1610  01DF  00A4               	movwf	??_nrf24l01InitRegisters
  1611  01E0  0824               	movf	??_nrf24l01InitRegisters,w
  1612  01E1  00A1               	movwf	nrf24l01Send@data
  1613  01E2  303C               	movlw	60
  1614  01E3  240C               	fcall	_nrf24l01Send
  1615                           
  1616                           ;nrf24l01.c: 177: status.byte = 0x00;
  1617  01E4  0020               	movlb	0	; select bank0
  1618  01E5  01C0               	clrf	_status
  1619                           
  1620                           ;nrf24l01.c: 178: status.RX_DR = 1;
  1621  01E6  1740               	bsf	_status,6
  1622                           
  1623                           ;nrf24l01.c: 179: status.TX_DS = 1;
  1624  01E7  16C0               	bsf	_status,5
  1625                           
  1626                           ;nrf24l01.c: 180: status.MAX_RT = 1;
  1627  01E8  1640               	bsf	_status,4
  1628                           
  1629                           ;nrf24l01.c: 181: nrf24l01Send(0b00100000 | 0x07, status.byte);
  1630  01E9  0840               	movf	_status,w
  1631  01EA  00A4               	movwf	??_nrf24l01InitRegisters
  1632  01EB  0824               	movf	??_nrf24l01InitRegisters,w
  1633  01EC  00A1               	movwf	nrf24l01Send@data
  1634  01ED  3027               	movlw	39
  1635  01EE  240C               	fcall	_nrf24l01Send
  1636                           
  1637                           ;nrf24l01.c: 184: nrf24l01Send(0b11100001, 0);
  1638  01EF  0020               	movlb	0	; select bank0
  1639  01F0  01A1               	clrf	nrf24l01Send@data
  1640  01F1  30E1               	movlw	225
  1641  01F2  240C               	fcall	_nrf24l01Send
  1642                           
  1643                           ;nrf24l01.c: 185: nrf24l01Send(0b11100010, 0);
  1644  01F3  0020               	movlb	0	; select bank0
  1645  01F4  01A1               	clrf	nrf24l01Send@data
  1646  01F5  30E2               	movlw	226
  1647  01F6  240C               	fcall	_nrf24l01Send
  1648  01F7  0008               	return
  1649  01F8                     __end_of_nrf24l01InitRegisters:	
  1650                           
  1651                           	psect	text3
  1652  0058                     __ptext3:	
  1653 ;; *************** function _loop *****************
  1654 ;; Defined at:
  1655 ;;		line 83 in file "main.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;		None
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  i               1   26[BANK0 ] unsigned char 
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMMON   BANK0   BANK1
  1669 ;;      Params:         0       0       0
  1670 ;;      Locals:         0       1       0
  1671 ;;      Temps:          0       2       0
  1672 ;;      Totals:         0       3       0
  1673 ;;Total ram usage:        3 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    6
  1676 ;; This function calls:
  1677 ;;		___aldiv
  1678 ;;		_itoa
  1679 ;;		_nrf24l01SendByte
  1680 ;;		_nrf24l01SendEnd
  1681 ;;		_nrf24l01SendStart
  1682 ;;		_sendName
  1683 ;; This function is called by:
  1684 ;;		_main
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           
  1689                           ;psect for function _loop
  1690  0058                     _loop:	
  1691                           
  1692                           ;main.c: 85: if (mode != 6) {
  1693                           
  1694                           ;incstack = 0
  1695                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1696  0058  3006               	movlw	6
  1697  0059  0678               	xorwf	_mode,w
  1698  005A  1903               	btfsc	3,2
  1699  005B  2953               	goto	l1933
  1700  005C  0064               	clrwdt	;# 
  1701                           
  1702                           ;main.c: 87: }
  1703                           ;main.c: 89: switch (mode){
  1704  005D  2953               	goto	l1933
  1705  005E                     l95:	
  1706                           ;main.c: 91: case 6:
  1707                           
  1708  005E  0063               	sleep	;# 
  1709                           
  1710                           ;main.c: 93: __nop();
  1711  005F  0000               	nop
  1712                           
  1713                           ;main.c: 94: __nop();
  1714  0060  0000               	nop
  1715                           
  1716                           ;main.c: 95: if (!STATUSbits.nTO && !STATUSbits.nPD){
  1717  0061  0020               	movlb	0	; select bank0
  1718  0062  1A03               	btfsc	3,4	;volatile
  1719  0063  0008               	return
  1720  0064  1983               	btfsc	3,3	;volatile
  1721  0065  0008               	return
  1722                           
  1723                           ;main.c: 96: mode = nextMode;
  1724  0066  0849               	movf	_nextMode,w
  1725  0067  00B8               	movwf	??_loop
  1726  0068  0838               	movf	??_loop,w
  1727  0069  00F8               	movwf	_mode
  1728                           
  1729                           ;main.c: 97: }
  1730                           ;main.c: 98: break;
  1731  006A  0008               	return
  1732  006B                     l1859:	
  1733                           ;main.c: 100: case 1:
  1734                           
  1735                           
  1736                           ;main.c: 103: nrf24l01SendStart();
  1737  006B  2436               	fcall	_nrf24l01SendStart
  1738                           
  1739                           ;main.c: 104: sendName();
  1740  006C  23D7               	fcall	_sendName
  1741                           
  1742                           ;main.c: 105: nrf24l01SendByte('/');
  1743  006D  302F               	movlw	47
  1744  006E  2456               	fcall	_nrf24l01SendByte
  1745                           
  1746                           ;main.c: 106: nrf24l01SendByte('B');
  1747  006F  3042               	movlw	66
  1748  0070  2456               	fcall	_nrf24l01SendByte
  1749                           
  1750                           ;main.c: 107: nrf24l01SendByte('O');
  1751  0071  304F               	movlw	79
  1752  0072  2456               	fcall	_nrf24l01SendByte
  1753                           
  1754                           ;main.c: 108: nrf24l01SendByte('O');
  1755  0073  304F               	movlw	79
  1756  0074  2456               	fcall	_nrf24l01SendByte
  1757                           
  1758                           ;main.c: 109: nrf24l01SendByte('T');
  1759  0075  3054               	movlw	84
  1760  0076  2456               	fcall	_nrf24l01SendByte
  1761                           
  1762                           ;main.c: 110: nrf24l01SendByte('/');
  1763  0077  302F               	movlw	47
  1764  0078  2456               	fcall	_nrf24l01SendByte
  1765                           
  1766                           ;main.c: 111: nrf24l01SendByte('1');
  1767  0079  3031               	movlw	49
  1768  007A  2456               	fcall	_nrf24l01SendByte
  1769                           
  1770                           ;main.c: 112: nrf24l01SendEnd();
  1771  007B  242C               	fcall	_nrf24l01SendEnd
  1772                           
  1773                           ;main.c: 114: mode = 2;
  1774  007C  3002               	movlw	2
  1775  007D  0020               	movlb	0	; select bank0
  1776  007E  00B8               	movwf	??_loop
  1777  007F  0838               	movf	??_loop,w
  1778  0080  00F8               	movwf	_mode
  1779                           
  1780                           ;main.c: 115: break;
  1781  0081  0008               	return
  1782  0082                     l1863:	
  1783                           ;main.c: 118: case 2:
  1784                           
  1785                           
  1786                           ;main.c: 119: mode = 6;
  1787  0082  3006               	movlw	6
  1788  0083  0020               	movlb	0	; select bank0
  1789  0084  00B8               	movwf	??_loop
  1790  0085  0838               	movf	??_loop,w
  1791  0086  00F8               	movwf	_mode
  1792                           
  1793                           ;main.c: 120: nextMode = 3;
  1794  0087  3003               	movlw	3
  1795  0088  00B8               	movwf	??_loop
  1796  0089  0838               	movf	??_loop,w
  1797  008A  00C9               	movwf	_nextMode
  1798                           
  1799                           ;main.c: 121: break;
  1800  008B  0008               	return
  1801  008C                     l1865:	
  1802                           ;main.c: 122: case 3:
  1803                           
  1804                           
  1805                           ;main.c: 124: adcSum = 0;
  1806  008C  3000               	movlw	0
  1807  008D  0020               	movlb	0	; select bank0
  1808  008E  00BF               	movwf	_adcSum+3
  1809  008F  3000               	movlw	0
  1810  0090  00BE               	movwf	_adcSum+2
  1811  0091  3000               	movlw	0
  1812  0092  00BD               	movwf	_adcSum+1
  1813  0093  3000               	movlw	0
  1814  0094  00BC               	movwf	_adcSum
  1815                           
  1816                           ;main.c: 125: adcLoop = 255;
  1817  0095  30FF               	movlw	255
  1818  0096  00B8               	movwf	??_loop
  1819  0097  0838               	movf	??_loop,w
  1820  0098  00F7               	movwf	_adcLoop
  1821                           
  1822                           ;main.c: 127: if (ADCON0bits.CHS != 3) {
  1823  0099  0021               	movlb	1	; select bank1
  1824  009A  0C1D               	rrf	29,w	;volatile
  1825  009B  0C89               	rrf	9,f
  1826  009C  391F               	andlw	31
  1827  009D  3A03               	xorlw	3
  1828  009E  1903               	skipnz
  1829  009F  28A8               	goto	l1873
  1830                           
  1831                           ;main.c: 128: ADCON0bits.CHS = 3;
  1832  00A0  081D               	movf	29,w	;volatile
  1833  00A1  3983               	andlw	-125
  1834  00A2  380C               	iorlw	12
  1835  00A3  009D               	movwf	29	;volatile
  1836                           
  1837                           ;main.c: 129: _delay((unsigned long)((50)*(16000000/4000000.0)));
  1838  00A4  3042               	movlw	66
  1839  00A5                     u1017:	
  1840  00A5  0B89               	decfsz	9,f
  1841  00A6  28A5               	goto	u1017
  1842  00A7  3200               	nop2
  1843  00A8                     l1873:	
  1844                           
  1845                           ;main.c: 130: }
  1846                           ;main.c: 132: ADCON0bits.ADGO = 1;
  1847  00A8  0021               	movlb	1	; select bank1
  1848  00A9  149D               	bsf	29,1	;volatile
  1849                           
  1850                           ;main.c: 133: mode = 100;
  1851  00AA  3064               	movlw	100
  1852  00AB  0020               	movlb	0	; select bank0
  1853  00AC  00B8               	movwf	??_loop
  1854  00AD  0838               	movf	??_loop,w
  1855  00AE  00F8               	movwf	_mode
  1856                           
  1857                           ;main.c: 134: nextMode = 4;
  1858  00AF  3004               	movlw	4
  1859  00B0  00B8               	movwf	??_loop
  1860  00B1  0838               	movf	??_loop,w
  1861  00B2  00C9               	movwf	_nextMode
  1862                           
  1863                           ;main.c: 135: break;
  1864  00B3  0008               	return
  1865  00B4                     l1879:	
  1866                           ;main.c: 137: case 4:
  1867                           
  1868                           
  1869                           ;main.c: 139: adcSum = 0;
  1870  00B4  3000               	movlw	0
  1871  00B5  0020               	movlb	0	; select bank0
  1872  00B6  00BF               	movwf	_adcSum+3
  1873  00B7  3000               	movlw	0
  1874  00B8  00BE               	movwf	_adcSum+2
  1875  00B9  3000               	movlw	0
  1876  00BA  00BD               	movwf	_adcSum+1
  1877  00BB  3000               	movlw	0
  1878  00BC  00BC               	movwf	_adcSum
  1879                           
  1880                           ;main.c: 140: adcLoop = 255;
  1881  00BD  30FF               	movlw	255
  1882  00BE  00B8               	movwf	??_loop
  1883  00BF  0838               	movf	??_loop,w
  1884  00C0  00F7               	movwf	_adcLoop
  1885                           
  1886                           ;main.c: 142: if (ADCON0bits.CHS != 7) {
  1887  00C1  0021               	movlb	1	; select bank1
  1888  00C2  0C1D               	rrf	29,w	;volatile
  1889  00C3  0C89               	rrf	9,f
  1890  00C4  391F               	andlw	31
  1891  00C5  3A07               	xorlw	7
  1892  00C6  1903               	skipnz
  1893  00C7  28D0               	goto	l1887
  1894                           
  1895                           ;main.c: 143: ADCON0bits.CHS = 7;
  1896  00C8  081D               	movf	29,w	;volatile
  1897  00C9  3983               	andlw	-125
  1898  00CA  381C               	iorlw	28
  1899  00CB  009D               	movwf	29	;volatile
  1900                           
  1901                           ;main.c: 144: _delay((unsigned long)((50)*(16000000/4000000.0)));
  1902  00CC  3042               	movlw	66
  1903  00CD                     u1027:	
  1904  00CD  0B89               	decfsz	9,f
  1905  00CE  28CD               	goto	u1027
  1906  00CF  3200               	nop2
  1907  00D0                     l1887:	
  1908                           
  1909                           ;main.c: 145: }
  1910                           ;main.c: 147: ADCON0bits.ADGO = 1;
  1911  00D0  0021               	movlb	1	; select bank1
  1912  00D1  149D               	bsf	29,1	;volatile
  1913                           
  1914                           ;main.c: 148: mode = 100;
  1915  00D2  3064               	movlw	100
  1916  00D3  0020               	movlb	0	; select bank0
  1917  00D4  00B8               	movwf	??_loop
  1918  00D5  0838               	movf	??_loop,w
  1919  00D6  00F8               	movwf	_mode
  1920                           
  1921                           ;main.c: 149: nextMode = 2;
  1922  00D7  3002               	movlw	2
  1923  00D8  00B8               	movwf	??_loop
  1924  00D9  0838               	movf	??_loop,w
  1925  00DA  00C9               	movwf	_nextMode
  1926                           
  1927                           ;main.c: 150: break;
  1928  00DB  0008               	return
  1929  00DC                     l1893:	
  1930                           ;main.c: 155: case 3:
  1931                           
  1932                           ;main.c: 154: switch (ADCON0bits.CHS){
  1933                           
  1934                           ;main.c: 152: case 101:
  1935                           
  1936                           
  1937                           ;main.c: 156: adcSum/= 21;
  1938  00DC  3000               	movlw	0
  1939  00DD  0020               	movlb	0	; select bank0
  1940  00DE  00A3               	movwf	___aldiv@divisor+3
  1941  00DF  3000               	movlw	0
  1942  00E0  00A2               	movwf	___aldiv@divisor+2
  1943  00E1  3000               	movlw	0
  1944  00E2  00A1               	movwf	___aldiv@divisor+1
  1945  00E3  3015               	movlw	21
  1946  00E4  28ED               	goto	L2
  1947  00E5                     l1895:	
  1948                           ;main.c: 158: case 7:
  1949                           
  1950                           ;main.c: 157: break;
  1951                           
  1952                           
  1953                           ;main.c: 159: adcSum/= 25;
  1954  00E5  3000               	movlw	0
  1955  00E6  0020               	movlb	0	; select bank0
  1956  00E7  00A3               	movwf	___aldiv@divisor+3
  1957  00E8  3000               	movlw	0
  1958  00E9  00A2               	movwf	___aldiv@divisor+2
  1959  00EA  3000               	movlw	0
  1960  00EB  00A1               	movwf	___aldiv@divisor+1
  1961  00EC  3019               	movlw	25
  1962  00ED                     L2:	
  1963  00ED  00A0               	movwf	___aldiv@divisor
  1964  00EE  083F               	movf	_adcSum+3,w
  1965  00EF  00A7               	movwf	___aldiv@dividend+3
  1966  00F0  083E               	movf	_adcSum+2,w
  1967  00F1  00A6               	movwf	___aldiv@dividend+2
  1968  00F2  083D               	movf	_adcSum+1,w
  1969  00F3  00A5               	movwf	___aldiv@dividend+1
  1970  00F4  083C               	movf	_adcSum,w
  1971  00F5  00A4               	movwf	___aldiv@dividend
  1972  00F6  21F8               	fcall	___aldiv
  1973  00F7  0020               	movlb	0	; select bank0
  1974  00F8  0823               	movf	?___aldiv+3,w
  1975  00F9  00BF               	movwf	_adcSum+3
  1976  00FA  0822               	movf	?___aldiv+2,w
  1977  00FB  00BE               	movwf	_adcSum+2
  1978  00FC  0821               	movf	?___aldiv+1,w
  1979  00FD  00BD               	movwf	_adcSum+1
  1980  00FE  0820               	movf	?___aldiv,w
  1981  00FF  00BC               	movwf	_adcSum
  1982                           
  1983                           ;main.c: 161: }
  1984                           
  1985                           ;main.c: 160: break;
  1986  0100  290C               	goto	l1901
  1987  0101                     l1899:	
  1988  0101  0021               	movlb	1	; select bank1
  1989  0102  0C1D               	rrf	29,w	;volatile
  1990  0103  0C89               	rrf	9,f
  1991  0104  391F               	andlw	31
  1992                           
  1993                           ; Switch size 1, requested type "space"
  1994                           ; Number of cases is 2, Range of values is 3 to 7
  1995                           ; switch strategies available:
  1996                           ; Name         Instructions Cycles
  1997                           ; simple_byte            7     4 (average)
  1998                           ; direct_byte           19     9 (fixed)
  1999                           ; jumptable            263     9 (fixed)
  2000                           ;	Chosen strategy is simple_byte
  2001  0105  3A03               	xorlw	3	; case 3
  2002  0106  1903               	skipnz
  2003  0107  28DC               	goto	l1893
  2004  0108  3A04               	xorlw	4	; case 7
  2005  0109  1903               	skipnz
  2006  010A  28E5               	goto	l1895
  2007  010B  290C               	goto	l1901
  2008  010C                     l1901:	
  2009                           
  2010                           ;main.c: 163: itoa(buffer, adcSum, 10);
  2011  010C  0020               	movlb	0	; select bank0
  2012  010D  083D               	movf	_adcSum+1,w
  2013  010E  00B2               	movwf	itoa@val+1
  2014  010F  083C               	movf	_adcSum,w
  2015  0110  00B1               	movwf	itoa@val
  2016  0111  300A               	movlw	10
  2017  0112  00B3               	movwf	itoa@base
  2018  0113  3000               	movlw	0
  2019  0114  00B4               	movwf	itoa@base+1
  2020  0115  3041               	movlw	(low (_buffer| 0))& (0+255)
  2021  0116  23B4               	fcall	_itoa
  2022                           
  2023                           ;main.c: 164: itoa(byte, ADCON0bits.CHS, 10);
  2024  0117  0021               	movlb	1	; select bank1
  2025  0118  0C1D               	rrf	29,w	;volatile
  2026  0119  0C89               	rrf	9,f
  2027  011A  391F               	andlw	31
  2028  011B  0020               	movlb	0	; select bank0
  2029  011C  00B8               	movwf	??_loop
  2030  011D  01B9               	clrf	??_loop+1
  2031  011E  0838               	movf	??_loop,w
  2032  011F  00B1               	movwf	itoa@val
  2033  0120  0839               	movf	??_loop+1,w
  2034  0121  00B2               	movwf	itoa@val+1
  2035  0122  300A               	movlw	10
  2036  0123  00B3               	movwf	itoa@base
  2037  0124  3000               	movlw	0
  2038  0125  00B4               	movwf	itoa@base+1
  2039  0126  3047               	movlw	(low (_byte| 0))& (0+255)
  2040  0127  23B4               	fcall	_itoa
  2041                           
  2042                           ;main.c: 166: nrf24l01SendStart();
  2043  0128  2436               	fcall	_nrf24l01SendStart
  2044                           
  2045                           ;main.c: 167: sendName();
  2046  0129  23D7               	fcall	_sendName
  2047                           
  2048                           ;main.c: 168: nrf24l01SendByte('/');
  2049  012A  302F               	movlw	47
  2050  012B  2456               	fcall	_nrf24l01SendByte
  2051                           
  2052                           ;main.c: 169: nrf24l01SendByte('A');
  2053  012C  3041               	movlw	65
  2054  012D  2456               	fcall	_nrf24l01SendByte
  2055                           
  2056                           ;main.c: 170: nrf24l01SendByte('D');
  2057  012E  3044               	movlw	68
  2058  012F  2456               	fcall	_nrf24l01SendByte
  2059                           
  2060                           ;main.c: 171: nrf24l01SendByte('C');
  2061  0130  3043               	movlw	67
  2062  0131  2456               	fcall	_nrf24l01SendByte
  2063                           
  2064                           ;main.c: 172: nrf24l01SendByte(byte[0]);
  2065  0132  0020               	movlb	0	; select bank0
  2066  0133  0847               	movf	_byte,w
  2067  0134  2456               	fcall	_nrf24l01SendByte
  2068                           
  2069                           ;main.c: 173: nrf24l01SendByte('/');
  2070  0135  302F               	movlw	47
  2071  0136  2456               	fcall	_nrf24l01SendByte
  2072                           
  2073                           ;main.c: 175: unsigned char i;
  2074                           ;main.c: 176: for (i = 0; buffer[i] != '\0'; i++){
  2075  0137  0020               	movlb	0	; select bank0
  2076  0138  01BA               	clrf	loop@i
  2077  0139                     l1925:	
  2078  0139  083A               	movf	loop@i,w
  2079  013A  3E41               	addlw	(low (_buffer| 0))& (0+255)
  2080  013B  0086               	movwf	6
  2081  013C  0187               	clrf	7
  2082  013D  0801               	movf	1,w
  2083  013E  1903               	btfsc	3,2
  2084  013F  294C               	goto	l1927
  2085                           
  2086                           ;main.c: 177: nrf24l01SendByte(buffer[i]);
  2087  0140  083A               	movf	loop@i,w
  2088  0141  3E41               	addlw	(low (_buffer| 0))& (0+255)
  2089  0142  0086               	movwf	6
  2090  0143  0187               	clrf	7
  2091  0144  0801               	movf	1,w
  2092  0145  2456               	fcall	_nrf24l01SendByte
  2093  0146  3001               	movlw	1
  2094  0147  0020               	movlb	0	; select bank0
  2095  0148  00B8               	movwf	??_loop
  2096  0149  0838               	movf	??_loop,w
  2097  014A  07BA               	addwf	loop@i,f
  2098  014B  2939               	goto	l1925
  2099  014C                     l1927:	
  2100                           
  2101                           ;main.c: 178: }
  2102                           ;main.c: 180: nrf24l01SendEnd();
  2103  014C  242C               	fcall	_nrf24l01SendEnd
  2104                           
  2105                           ;main.c: 182: mode = nextMode;
  2106  014D  0020               	movlb	0	; select bank0
  2107  014E  0849               	movf	_nextMode,w
  2108  014F  00B8               	movwf	??_loop
  2109  0150  0838               	movf	??_loop,w
  2110  0151  00F8               	movwf	_mode
  2111                           
  2112                           ;main.c: 185: }
  2113                           
  2114                           ;main.c: 183: break;
  2115  0152  0008               	return
  2116  0153                     l1933:	
  2117  0153  0878               	movf	_mode,w
  2118                           
  2119                           ; Switch size 1, requested type "space"
  2120                           ; Number of cases is 6, Range of values is 1 to 101
  2121                           ; switch strategies available:
  2122                           ; Name         Instructions Cycles
  2123                           ; simple_byte           19    10 (average)
  2124                           ; direct_byte          211     9 (fixed)
  2125                           ; jumptable            263     9 (fixed)
  2126                           ;	Chosen strategy is simple_byte
  2127  0154  3A01               	xorlw	1	; case 1
  2128  0155  1903               	skipnz
  2129  0156  286B               	goto	l1859
  2130  0157  3A03               	xorlw	3	; case 2
  2131  0158  1903               	skipnz
  2132  0159  2882               	goto	l1863
  2133  015A  3A01               	xorlw	1	; case 3
  2134  015B  1903               	skipnz
  2135  015C  288C               	goto	l1865
  2136  015D  3A07               	xorlw	7	; case 4
  2137  015E  1903               	skipnz
  2138  015F  28B4               	goto	l1879
  2139  0160  3A02               	xorlw	2	; case 6
  2140  0161  1903               	skipnz
  2141  0162  285E               	goto	l95
  2142  0163  3A63               	xorlw	99	; case 101
  2143  0164  1903               	skipnz
  2144  0165  2901               	goto	l1899
  2145  0166  2967               	goto	l112
  2146  0167                     l112:	
  2147  0167  0008               	return
  2148  0168                     __end_of_loop:	
  2149                           
  2150                           	psect	text4
  2151  03D7                     __ptext4:	
  2152 ;; *************** function _sendName *****************
  2153 ;; Defined at:
  2154 ;;		line 60 in file "main.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;		None
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;  offset          2    8[BANK0 ] unsigned int 
  2159 ;;  btye            1    7[BANK0 ] unsigned char 
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  1    wreg      void 
  2162 ;; Registers used:
  2163 ;;		wreg, status,2, status,0, pclath, cstack
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMMON   BANK0   BANK1
  2169 ;;      Params:         0       0       0
  2170 ;;      Locals:         0       3       0
  2171 ;;      Temps:          0       1       0
  2172 ;;      Totals:         0       4       0
  2173 ;;Total ram usage:        4 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; Hardware stack levels required when called:    4
  2176 ;; This function calls:
  2177 ;;		_nrf24l01SendByte
  2178 ;;		_read_flashmem
  2179 ;; This function is called by:
  2180 ;;		_loop
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           
  2185                           ;psect for function _sendName
  2186  03D7                     _sendName:	
  2187                           
  2188                           ;main.c: 62: unsigned int offset = 0;
  2189                           
  2190                           ;incstack = 0
  2191                           ; Regs used in _sendName: [wreg+status,2+status,0+pclath+cstack]
  2192  03D7  0020               	movlb	0	; select bank0
  2193  03D8  01A8               	clrf	sendName@offset
  2194  03D9  01A9               	clrf	sendName@offset+1
  2195  03DA                     l1737:	
  2196                           ;main.c: 63: unsigned char btye;
  2197                           ;main.c: 64: while (offset < 16){
  2198                           
  2199  03DA  3000               	movlw	0
  2200  03DB  0229               	subwf	sendName@offset+1,w
  2201  03DC  3010               	movlw	16
  2202  03DD  1903               	skipnz
  2203  03DE  0228               	subwf	sendName@offset,w
  2204  03DF  1803               	btfsc	3,0
  2205  03E0  0008               	return
  2206                           
  2207                           ;main.c: 65: btye = read_flashmem(offset);
  2208  03E1  0829               	movf	sendName@offset+1,w
  2209  03E2  00A1               	movwf	read_flashmem@offset+1
  2210  03E3  0828               	movf	sendName@offset,w
  2211  03E4  00A0               	movwf	read_flashmem@offset
  2212  03E5  2391               	fcall	_read_flashmem
  2213  03E6  0020               	movlb	0	; select bank0
  2214  03E7  0820               	movf	?_read_flashmem,w
  2215  03E8  00A6               	movwf	??_sendName
  2216  03E9  0826               	movf	??_sendName,w
  2217  03EA  00A7               	movwf	sendName@btye
  2218                           
  2219                           ;main.c: 67: if (btye == 0x00){
  2220  03EB  0827               	movf	sendName@btye,w
  2221  03EC  1903               	btfsc	3,2
  2222  03ED  0008               	return
  2223                           
  2224                           ;main.c: 69: }
  2225                           ;main.c: 71: nrf24l01SendByte(btye);
  2226                           
  2227                           ;main.c: 68: return;
  2228  03EE  0827               	movf	sendName@btye,w
  2229  03EF  2456               	fcall	_nrf24l01SendByte
  2230                           
  2231                           ;main.c: 72: offset++;
  2232  03F0  3001               	movlw	1
  2233  03F1  0020               	movlb	0	; select bank0
  2234  03F2  07A8               	addwf	sendName@offset,f
  2235  03F3  3000               	movlw	0
  2236  03F4  3DA9               	addwfc	sendName@offset+1,f
  2237  03F5  2BDA               	goto	l1737
  2238  03F6                     __end_of_sendName:	
  2239                           
  2240                           	psect	text5
  2241  0391                     __ptext5:	
  2242 ;; *************** function _read_flashmem *****************
  2243 ;; Defined at:
  2244 ;;		line 58 in file "flash.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;  offset          2    0[BANK0 ] unsigned int 
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;  result          2    4[BANK0 ] unsigned int 
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  2    0[BANK0 ] unsigned int 
  2251 ;; Registers used:
  2252 ;;		wreg, status,2, status,0
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMMON   BANK0   BANK1
  2258 ;;      Params:         0       2       0
  2259 ;;      Locals:         0       2       0
  2260 ;;      Temps:          0       2       0
  2261 ;;      Totals:         0       6       0
  2262 ;;Total ram usage:        6 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    2
  2265 ;; This function calls:
  2266 ;;		Nothing
  2267 ;; This function is called by:
  2268 ;;		_sendName
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           
  2273                           ;psect for function _read_flashmem
  2274  0391                     _read_flashmem:	
  2275                           
  2276                           ;flash.c: 60: INTCONbits.GIE = 0;
  2277                           
  2278                           ;incstack = 0
  2279                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  2280  0391  138B               	bcf	11,7	;volatile
  2281                           
  2282                           ;flash.c: 62: PMCON1 = 0x00;
  2283  0392  0023               	movlb	3	; select bank3
  2284  0393  0195               	clrf	21	;volatile
  2285                           
  2286                           ;flash.c: 64: PMADRL = (char) (((0x800U-32) + offset) >> 0);
  2287  0394  0020               	movlb	0	; select bank0
  2288  0395  0820               	movf	read_flashmem@offset,w
  2289  0396  3EE0               	addlw	224
  2290  0397  0023               	movlb	3	; select bank3
  2291  0398  0091               	movwf	17	;volatile
  2292                           
  2293                           ;flash.c: 65: PMADRH = (char) (((0x800U-32) + offset) >> 8);
  2294  0399  0020               	movlb	0	; select bank0
  2295  039A  0820               	movf	read_flashmem@offset,w
  2296  039B  3EE0               	addlw	224
  2297  039C  00A2               	movwf	??_read_flashmem
  2298  039D  3007               	movlw	7
  2299  039E  3D21               	addwfc	read_flashmem@offset+1,w
  2300  039F  00A3               	movwf	??_read_flashmem+1
  2301  03A0  0823               	movf	??_read_flashmem+1,w
  2302  03A1  0023               	movlb	3	; select bank3
  2303  03A2  0092               	movwf	18	;volatile
  2304                           
  2305                           ;flash.c: 67: PMCON1bits.RD = 1;
  2306  03A3  1415               	bsf	21,0	;volatile
  2307                           
  2308                           ;flash.c: 69: __nop();
  2309  03A4  0000               	nop
  2310                           
  2311                           ;flash.c: 70: __nop();
  2312  03A5  0000               	nop
  2313                           
  2314                           ;flash.c: 72: unsigned int result = (unsigned) ((PMDATH) << 8) | (PMDATL);
  2315  03A6  0023               	movlb	3	; select bank3
  2316  03A7  0814               	movf	20,w	;volatile
  2317  03A8  0020               	movlb	0	; select bank0
  2318  03A9  00A5               	movwf	read_flashmem@result+1
  2319  03AA  0023               	movlb	3	; select bank3
  2320  03AB  0813               	movf	19,w	;volatile
  2321  03AC  0020               	movlb	0	; select bank0
  2322  03AD  00A4               	movwf	read_flashmem@result
  2323                           
  2324                           ;flash.c: 74: INTCONbits.GIE = 1;
  2325  03AE  178B               	bsf	11,7	;volatile
  2326                           
  2327                           ;flash.c: 76: return result;
  2328  03AF  0825               	movf	read_flashmem@result+1,w
  2329  03B0  00A1               	movwf	?_read_flashmem+1
  2330  03B1  0824               	movf	read_flashmem@result,w
  2331  03B2  00A0               	movwf	?_read_flashmem
  2332  03B3  0008               	return
  2333  03B4                     __end_of_read_flashmem:	
  2334                           
  2335                           	psect	text6
  2336  0456                     __ptext6:	
  2337 ;; *************** function _nrf24l01SendByte *****************
  2338 ;; Defined at:
  2339 ;;		line 85 in file "nrf24l01.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;  payloadByte     1    wreg     unsigned char 
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;  payloadByte     1    1[BANK0 ] unsigned char 
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      void 
  2346 ;; Registers used:
  2347 ;;		wreg, status,2, status,0, pclath, cstack
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMMON   BANK0   BANK1
  2353 ;;      Params:         0       0       0
  2354 ;;      Locals:         0       1       0
  2355 ;;      Temps:          0       0       0
  2356 ;;      Totals:         0       1       0
  2357 ;;Total ram usage:        1 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:    3
  2360 ;; This function calls:
  2361 ;;		_nrf24l01SPISend
  2362 ;; This function is called by:
  2363 ;;		_sendName
  2364 ;;		_loop
  2365 ;;		_sendString
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           
  2370                           ;psect for function _nrf24l01SendByte
  2371  0456                     _nrf24l01SendByte:	
  2372                           
  2373                           ;incstack = 0
  2374                           ; Regs used in _nrf24l01SendByte: [wreg+status,2+status,0+pclath+cstack]
  2375                           ;nrf24l01SendByte@payloadByte stored from wreg
  2376  0456  0020               	movlb	0	; select bank0
  2377  0457  00A1               	movwf	nrf24l01SendByte@payloadByte
  2378                           
  2379                           ;nrf24l01.c: 86: nrf24l01SPISend(payloadByte);
  2380  0458  0821               	movf	nrf24l01SendByte@payloadByte,w
  2381  0459  2420               	fcall	_nrf24l01SPISend
  2382  045A  0008               	return
  2383  045B                     __end_of_nrf24l01SendByte:	
  2384                           
  2385                           	psect	text7
  2386  0436                     __ptext7:	
  2387 ;; *************** function _nrf24l01SendStart *****************
  2388 ;; Defined at:
  2389 ;;		line 74 in file "nrf24l01.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg, status,2, status,0, pclath, cstack
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMMON   BANK0   BANK1
  2403 ;;      Params:         0       0       0
  2404 ;;      Locals:         0       0       0
  2405 ;;      Temps:          0       0       0
  2406 ;;      Totals:         0       0       0
  2407 ;;Total ram usage:        0 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    5
  2410 ;; This function calls:
  2411 ;;		_nrf24l01SPISend
  2412 ;;		_nrf24l01SPIStart
  2413 ;;		_nrf24l01SetTransmitMode
  2414 ;; This function is called by:
  2415 ;;		_loop
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           
  2420                           ;psect for function _nrf24l01SendStart
  2421  0436                     _nrf24l01SendStart:	
  2422                           
  2423                           ;nrf24l01.c: 76: PORTAbits.RA0 = 0;
  2424                           
  2425                           ;incstack = 0
  2426                           ; Regs used in _nrf24l01SendStart: [wreg+status,2+status,0+pclath+cstack]
  2427  0436  0020               	movlb	0	; select bank0
  2428  0437  100C               	bcf	12,0	;volatile
  2429                           
  2430                           ;nrf24l01.c: 78: nrf24l01SetTransmitMode();
  2431  0438  23F6               	fcall	_nrf24l01SetTransmitMode
  2432                           
  2433                           ;nrf24l01.c: 80: nrf24l01SPIStart();
  2434  0439  243D               	fcall	_nrf24l01SPIStart
  2435                           
  2436                           ;nrf24l01.c: 82: nrf24l01SPISend(0b10100000);
  2437  043A  30A0               	movlw	160
  2438  043B  2420               	fcall	_nrf24l01SPISend
  2439  043C  0008               	return
  2440  043D                     __end_of_nrf24l01SendStart:	
  2441                           
  2442                           	psect	text8
  2443  03F6                     __ptext8:	
  2444 ;; *************** function _nrf24l01SetTransmitMode *****************
  2445 ;; Defined at:
  2446 ;;		line 52 in file "nrf24l01.c"
  2447 ;; Parameters:    Size  Location     Type
  2448 ;;		None
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  config          1    5[BANK0 ] struct .
  2451 ;; Return value:  Size  Location     Type
  2452 ;;                  1    wreg      void 
  2453 ;; Registers used:
  2454 ;;		wreg, status,2, status,0, pclath, cstack
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMMON   BANK0   BANK1
  2460 ;;      Params:         0       0       0
  2461 ;;      Locals:         0       1       0
  2462 ;;      Temps:          0       1       0
  2463 ;;      Totals:         0       2       0
  2464 ;;Total ram usage:        2 bytes
  2465 ;; Hardware stack levels used:    1
  2466 ;; Hardware stack levels required when called:    4
  2467 ;; This function calls:
  2468 ;;		_nrf24l01Send
  2469 ;; This function is called by:
  2470 ;;		_nrf24l01SendStart
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           
  2475                           ;psect for function _nrf24l01SetTransmitMode
  2476  03F6                     _nrf24l01SetTransmitMode:	
  2477                           
  2478                           ;nrf24l01.c: 53: n_CONFIG_t config;
  2479                           ;nrf24l01.c: 54: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  2480                           
  2481                           ;incstack = 0
  2482                           ; Regs used in _nrf24l01SetTransmitMode: [wreg+status,2+status,0+pclath+cstack]
  2483  03F6  0020               	movlb	0	; select bank0
  2484  03F7  01A1               	clrf	nrf24l01Send@data
  2485  03F8  3000               	movlw	0
  2486  03F9  240C               	fcall	_nrf24l01Send
  2487  03FA  0020               	movlb	0	; select bank0
  2488  03FB  00A4               	movwf	??_nrf24l01SetTransmitMode
  2489  03FC  0824               	movf	??_nrf24l01SetTransmitMode,w
  2490  03FD  00A5               	movwf	nrf24l01SetTransmitMode@config
  2491                           
  2492                           ;nrf24l01.c: 55: if (config.PRIM_RX == 1){
  2493  03FE  1C25               	btfss	nrf24l01SetTransmitMode@config,0
  2494  03FF  0008               	return
  2495                           
  2496                           ;nrf24l01.c: 56: config.PRIM_RX = 0;
  2497  0400  1025               	bcf	nrf24l01SetTransmitMode@config,0
  2498                           
  2499                           ;nrf24l01.c: 57: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2500  0401  0825               	movf	nrf24l01SetTransmitMode@config,w
  2501  0402  00A4               	movwf	??_nrf24l01SetTransmitMode
  2502  0403  0824               	movf	??_nrf24l01SetTransmitMode,w
  2503  0404  00A1               	movwf	nrf24l01Send@data
  2504  0405  3020               	movlw	32
  2505  0406  240C               	fcall	_nrf24l01Send
  2506                           
  2507                           ;nrf24l01.c: 58: _delay((unsigned long)((130)*(16000000/4000000.0)));
  2508  0407  30AD               	movlw	173
  2509  0408                     u1037:	
  2510  0408  0B89               	decfsz	9,f
  2511  0409  2C08               	goto	u1037
  2512  040A  0000               	nop
  2513  040B  0008               	return
  2514  040C                     __end_of_nrf24l01SetTransmitMode:	
  2515                           
  2516                           	psect	text9
  2517  040C                     __ptext9:	
  2518 ;; *************** function _nrf24l01Send *****************
  2519 ;; Defined at:
  2520 ;;		line 39 in file "nrf24l01.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;  command         1    wreg     unsigned char 
  2523 ;;  data            1    1[BANK0 ] unsigned char 
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;  command         1    3[BANK0 ] unsigned char 
  2526 ;; Return value:  Size  Location     Type
  2527 ;;                  1    wreg      unsigned char 
  2528 ;; Registers used:
  2529 ;;		wreg, status,2, status,0, pclath, cstack
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMMON   BANK0   BANK1
  2535 ;;      Params:         0       1       0
  2536 ;;      Locals:         0       1       0
  2537 ;;      Temps:          0       1       0
  2538 ;;      Totals:         0       3       0
  2539 ;;Total ram usage:        3 bytes
  2540 ;; Hardware stack levels used:    1
  2541 ;; Hardware stack levels required when called:    3
  2542 ;; This function calls:
  2543 ;;		_nrf24l01SPIEnd
  2544 ;;		_nrf24l01SPISend
  2545 ;;		_nrf24l01SPIStart
  2546 ;; This function is called by:
  2547 ;;		_nrf24l01SetTransmitMode
  2548 ;;		_nrf24l01InitRegisters
  2549 ;;		_nrf24l01SetRecieveMode
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           
  2554                           ;psect for function _nrf24l01Send
  2555  040C                     _nrf24l01Send:	
  2556                           
  2557                           ;incstack = 0
  2558                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  2559                           ;nrf24l01Send@command stored from wreg
  2560  040C  0020               	movlb	0	; select bank0
  2561  040D  00A3               	movwf	nrf24l01Send@command
  2562                           
  2563                           ;nrf24l01.c: 41: nrf24l01SPIStart();
  2564  040E  243D               	fcall	_nrf24l01SPIStart
  2565                           
  2566                           ;nrf24l01.c: 43: status.byte = nrf24l01SPISend(command);
  2567  040F  0020               	movlb	0	; select bank0
  2568  0410  0823               	movf	nrf24l01Send@command,w
  2569  0411  2420               	fcall	_nrf24l01SPISend
  2570  0412  0020               	movlb	0	; select bank0
  2571  0413  00A2               	movwf	??_nrf24l01Send
  2572  0414  0822               	movf	??_nrf24l01Send,w
  2573  0415  00C0               	movwf	_status
  2574                           
  2575                           ;nrf24l01.c: 44: data = nrf24l01SPISend(data);
  2576  0416  0821               	movf	nrf24l01Send@data,w
  2577  0417  2420               	fcall	_nrf24l01SPISend
  2578  0418  0020               	movlb	0	; select bank0
  2579  0419  00A2               	movwf	??_nrf24l01Send
  2580  041A  0822               	movf	??_nrf24l01Send,w
  2581  041B  00A1               	movwf	nrf24l01Send@data
  2582                           
  2583                           ;nrf24l01.c: 46: nrf24l01SPIEnd();
  2584  041C  2444               	fcall	_nrf24l01SPIEnd
  2585                           
  2586                           ;nrf24l01.c: 48: return data;
  2587  041D  0020               	movlb	0	; select bank0
  2588  041E  0821               	movf	nrf24l01Send@data,w
  2589  041F  0008               	return
  2590  0420                     __end_of_nrf24l01Send:	
  2591                           
  2592                           	psect	text10
  2593  043D                     __ptext10:	
  2594 ;; *************** function _nrf24l01SPIStart *****************
  2595 ;; Defined at:
  2596 ;;		line 23 in file "nrf24l01.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;		None
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;		None
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  1    wreg      void 
  2603 ;; Registers used:
  2604 ;;		wreg
  2605 ;; Tracked objects:
  2606 ;;		On entry : 0/0
  2607 ;;		On exit  : 0/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMMON   BANK0   BANK1
  2610 ;;      Params:         0       0       0
  2611 ;;      Locals:         0       0       0
  2612 ;;      Temps:          0       0       0
  2613 ;;      Totals:         0       0       0
  2614 ;;Total ram usage:        0 bytes
  2615 ;; Hardware stack levels used:    1
  2616 ;; Hardware stack levels required when called:    2
  2617 ;; This function calls:
  2618 ;;		Nothing
  2619 ;; This function is called by:
  2620 ;;		_nrf24l01Send
  2621 ;;		_nrf24l01SendStart
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           
  2626                           ;psect for function _nrf24l01SPIStart
  2627  043D                     _nrf24l01SPIStart:	
  2628                           
  2629                           ;nrf24l01.c: 24: PORTAbits.RA1 = 0;
  2630                           
  2631                           ;incstack = 0
  2632                           ; Regs used in _nrf24l01SPIStart: [wreg]
  2633  043D  0020               	movlb	0	; select bank0
  2634  043E  108C               	bcf	12,1	;volatile
  2635                           
  2636                           ;nrf24l01.c: 25: _delay((unsigned long)((10)*(16000000/4000000.0)));
  2637  043F  300D               	movlw	13
  2638  0440                     u1047:	
  2639  0440  0B89               	decfsz	9,f
  2640  0441  2C40               	goto	u1047
  2641  0442  0000               	nop
  2642  0443  0008               	return
  2643  0444                     __end_of_nrf24l01SPIStart:	
  2644                           
  2645                           	psect	text11
  2646  0420                     __ptext11:	
  2647 ;; *************** function _nrf24l01SPISend *****************
  2648 ;; Defined at:
  2649 ;;		line 28 in file "nrf24l01.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;  data            1    wreg     unsigned char 
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;  data            1    0[BANK0 ] unsigned char 
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  1    wreg      unsigned char 
  2656 ;; Registers used:
  2657 ;;		wreg
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMMON   BANK0   BANK1
  2663 ;;      Params:         0       0       0
  2664 ;;      Locals:         0       1       0
  2665 ;;      Temps:          0       0       0
  2666 ;;      Totals:         0       1       0
  2667 ;;Total ram usage:        1 bytes
  2668 ;; Hardware stack levels used:    1
  2669 ;; Hardware stack levels required when called:    2
  2670 ;; This function calls:
  2671 ;;		Nothing
  2672 ;; This function is called by:
  2673 ;;		_nrf24l01Send
  2674 ;;		_nrf24l01SendStart
  2675 ;;		_nrf24l01SendByte
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           
  2680                           ;psect for function _nrf24l01SPISend
  2681  0420                     _nrf24l01SPISend:	
  2682                           
  2683                           ;incstack = 0
  2684                           ; Regs used in _nrf24l01SPISend: [wreg]
  2685                           ;nrf24l01SPISend@data stored from wreg
  2686  0420  0020               	movlb	0	; select bank0
  2687  0421  00A0               	movwf	nrf24l01SPISend@data
  2688                           
  2689                           ;nrf24l01.c: 29: SSP1BUF = data;
  2690  0422  0820               	movf	nrf24l01SPISend@data,w
  2691  0423  0024               	movlb	4	; select bank4
  2692  0424  0091               	movwf	17	;volatile
  2693  0425                     l157:	
  2694                           ;nrf24l01.c: 30: while (!SSP1STATbits.BF){ __nop(); }
  2695                           
  2696  0425  0024               	movlb	4	; select bank4
  2697  0426  1814               	btfsc	20,0	;volatile
  2698  0427  2C2A               	goto	l1695
  2699  0428  0000               	nop
  2700  0429  2C25               	goto	l157
  2701  042A                     l1695:	
  2702                           
  2703                           ;nrf24l01.c: 31: return SSP1BUF;
  2704  042A  0811               	movf	17,w	;volatile
  2705  042B  0008               	return
  2706  042C                     __end_of_nrf24l01SPISend:	
  2707                           
  2708                           	psect	text12
  2709  042C                     __ptext12:	
  2710 ;; *************** function _nrf24l01SendEnd *****************
  2711 ;; Defined at:
  2712 ;;		line 89 in file "nrf24l01.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		wreg, status,2, status,0, pclath, cstack
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMMON   BANK0   BANK1
  2726 ;;      Params:         0       0       0
  2727 ;;      Locals:         0       0       0
  2728 ;;      Temps:          0       0       0
  2729 ;;      Totals:         0       0       0
  2730 ;;Total ram usage:        0 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    3
  2733 ;; This function calls:
  2734 ;;		_nrf24l01SPIEnd
  2735 ;; This function is called by:
  2736 ;;		_loop
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           
  2741                           ;psect for function _nrf24l01SendEnd
  2742  042C                     _nrf24l01SendEnd:	
  2743                           
  2744                           ;nrf24l01.c: 91: nrf24l01SPIEnd();
  2745                           
  2746                           ;incstack = 0
  2747                           ; Regs used in _nrf24l01SendEnd: [wreg+status,2+status,0+pclath+cstack]
  2748  042C  2444               	fcall	_nrf24l01SPIEnd
  2749                           
  2750                           ;nrf24l01.c: 93: PORTAbits.RA0 = 1;
  2751  042D  0020               	movlb	0	; select bank0
  2752  042E  140C               	bsf	12,0	;volatile
  2753                           
  2754                           ;nrf24l01.c: 94: _delay((unsigned long)((50)*(16000000/4000000.0)));
  2755  042F  3042               	movlw	66
  2756  0430                     u1057:	
  2757  0430  0B89               	decfsz	9,f
  2758  0431  2C30               	goto	u1057
  2759  0432  3200               	nop2
  2760                           
  2761                           ;nrf24l01.c: 95: PORTAbits.RA0 = 0;
  2762  0433  0020               	movlb	0	; select bank0
  2763  0434  100C               	bcf	12,0	;volatile
  2764  0435  0008               	return
  2765  0436                     __end_of_nrf24l01SendEnd:	
  2766                           
  2767                           	psect	text13
  2768  0444                     __ptext13:	
  2769 ;; *************** function _nrf24l01SPIEnd *****************
  2770 ;; Defined at:
  2771 ;;		line 34 in file "nrf24l01.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		wreg
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMMON   BANK0   BANK1
  2785 ;;      Params:         0       0       0
  2786 ;;      Locals:         0       0       0
  2787 ;;      Temps:          0       0       0
  2788 ;;      Totals:         0       0       0
  2789 ;;Total ram usage:        0 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    2
  2792 ;; This function calls:
  2793 ;;		Nothing
  2794 ;; This function is called by:
  2795 ;;		_nrf24l01Send
  2796 ;;		_nrf24l01SendEnd
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           
  2801                           ;psect for function _nrf24l01SPIEnd
  2802  0444                     _nrf24l01SPIEnd:	
  2803                           
  2804                           ;nrf24l01.c: 35: _delay((unsigned long)((10)*(16000000/4000000.0)));
  2805                           
  2806                           ;incstack = 0
  2807                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  2808  0444  300D               	movlw	13
  2809  0445                     u1067:	
  2810  0445  0B89               	decfsz	9,f
  2811  0446  2C45               	goto	u1067
  2812  0447  0000               	nop
  2813                           
  2814                           ;nrf24l01.c: 36: PORTAbits.RA1 = 1;
  2815  0448  0020               	movlb	0	; select bank0
  2816  0449  148C               	bsf	12,1	;volatile
  2817  044A  0008               	return
  2818  044B                     __end_of_nrf24l01SPIEnd:	
  2819                           
  2820                           	psect	text14
  2821  03B4                     __ptext14:	
  2822 ;; *************** function _itoa *****************
  2823 ;; Defined at:
  2824 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  buf             1    wreg     PTR unsigned char 
  2827 ;;		 -> byte(2), buffer(6), 
  2828 ;;  val             2   17[BANK0 ] int 
  2829 ;;  base            2   19[BANK0 ] int 
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;  buf             1   23[BANK0 ] PTR unsigned char 
  2832 ;;		 -> byte(2), buffer(6), 
  2833 ;;  cp              1   22[BANK0 ] PTR unsigned char 
  2834 ;;		 -> byte(2), buffer(6), 
  2835 ;; Return value:  Size  Location     Type
  2836 ;;                  1    wreg      PTR unsigned char 
  2837 ;; Registers used:
  2838 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2839 ;; Tracked objects:
  2840 ;;		On entry : 0/0
  2841 ;;		On exit  : 0/0
  2842 ;;		Unchanged: 0/0
  2843 ;; Data sizes:     COMMON   BANK0   BANK1
  2844 ;;      Params:         0       4       0
  2845 ;;      Locals:         0       2       0
  2846 ;;      Temps:          0       1       0
  2847 ;;      Totals:         0       7       0
  2848 ;;Total ram usage:        7 bytes
  2849 ;; Hardware stack levels used:    1
  2850 ;; Hardware stack levels required when called:    4
  2851 ;; This function calls:
  2852 ;;		_utoa
  2853 ;; This function is called by:
  2854 ;;		_loop
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           
  2859                           ;psect for function _itoa
  2860  03B4                     _itoa:	
  2861                           
  2862                           ;incstack = 0
  2863                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2864                           ;itoa@buf stored from wreg
  2865  03B4  0020               	movlb	0	; select bank0
  2866  03B5  00B7               	movwf	itoa@buf
  2867  03B6  0837               	movf	itoa@buf,w
  2868  03B7  00B5               	movwf	??_itoa
  2869  03B8  0835               	movf	??_itoa,w
  2870  03B9  00B6               	movwf	itoa@cp
  2871  03BA  1FB2               	btfss	itoa@val+1,7
  2872  03BB  2BCC               	goto	l1349
  2873  03BC  302D               	movlw	45
  2874  03BD  00B5               	movwf	??_itoa
  2875  03BE  0837               	movf	itoa@buf,w
  2876  03BF  0086               	movwf	6
  2877  03C0  0187               	clrf	7
  2878  03C1  0835               	movf	??_itoa,w
  2879  03C2  0081               	movwf	1
  2880  03C3  3001               	movlw	1
  2881  03C4  00B5               	movwf	??_itoa
  2882  03C5  0835               	movf	??_itoa,w
  2883  03C6  07B7               	addwf	itoa@buf,f
  2884  03C7  09B1               	comf	itoa@val,f
  2885  03C8  09B2               	comf	itoa@val+1,f
  2886  03C9  0AB1               	incf	itoa@val,f
  2887  03CA  1903               	skipnz
  2888  03CB  0AB2               	incf	itoa@val+1,f
  2889  03CC                     l1349:	
  2890  03CC  0832               	movf	itoa@val+1,w
  2891  03CD  00A9               	movwf	utoa@val+1
  2892  03CE  0831               	movf	itoa@val,w
  2893  03CF  00A8               	movwf	utoa@val
  2894  03D0  0834               	movf	itoa@base+1,w
  2895  03D1  00AB               	movwf	utoa@base+1
  2896  03D2  0833               	movf	itoa@base,w
  2897  03D3  00AA               	movwf	utoa@base
  2898  03D4  0837               	movf	itoa@buf,w
  2899  03D5  227A               	fcall	_utoa
  2900  03D6  0008               	return
  2901  03D7                     __end_of_itoa:	
  2902                           ;	Return value of _itoa is never used
  2903                           
  2904                           
  2905                           	psect	text15
  2906  027A                     __ptext15:	
  2907 ;; *************** function _utoa *****************
  2908 ;; Defined at:
  2909 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;  buf             1    wreg     PTR unsigned char 
  2912 ;;		 -> byte(2), buffer(6), 
  2913 ;;  val             2    8[BANK0 ] unsigned int 
  2914 ;;  base            2   10[BANK0 ] int 
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  2917 ;;		 -> byte(2), buffer(6), 
  2918 ;;  v               2   13[BANK0 ] unsigned int 
  2919 ;;  c               1   15[BANK0 ] unsigned char 
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  1    wreg      PTR unsigned char 
  2922 ;; Registers used:
  2923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMMON   BANK0   BANK1
  2929 ;;      Params:         0       4       0
  2930 ;;      Locals:         0       4       0
  2931 ;;      Temps:          0       1       0
  2932 ;;      Totals:         0       9       0
  2933 ;;Total ram usage:        9 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; Hardware stack levels required when called:    3
  2936 ;; This function calls:
  2937 ;;		___lwdiv
  2938 ;;		___lwmod
  2939 ;; This function is called by:
  2940 ;;		_itoa
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           
  2945                           ;psect for function _utoa
  2946  027A                     _utoa:	
  2947                           
  2948                           ;incstack = 0
  2949                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2950                           ;utoa@buf stored from wreg
  2951  027A  0020               	movlb	0	; select bank0
  2952  027B  00B0               	movwf	utoa@buf
  2953  027C  0829               	movf	utoa@val+1,w
  2954  027D  00AE               	movwf	utoa@v+1
  2955  027E  0828               	movf	utoa@val,w
  2956  027F  00AD               	movwf	utoa@v
  2957  0280                     l1285:	
  2958  0280  082B               	movf	utoa@base+1,w
  2959  0281  00A1               	movwf	___lwdiv@divisor+1
  2960  0282  082A               	movf	utoa@base,w
  2961  0283  00A0               	movwf	___lwdiv@divisor
  2962  0284  082E               	movf	utoa@v+1,w
  2963  0285  00A3               	movwf	___lwdiv@dividend+1
  2964  0286  082D               	movf	utoa@v,w
  2965  0287  00A2               	movwf	___lwdiv@dividend
  2966  0288  22D6               	fcall	___lwdiv
  2967  0289  0020               	movlb	0	; select bank0
  2968  028A  0821               	movf	?___lwdiv+1,w
  2969  028B  00AE               	movwf	utoa@v+1
  2970  028C  0820               	movf	?___lwdiv,w
  2971  028D  00AD               	movwf	utoa@v
  2972  028E  3001               	movlw	1
  2973  028F  00AC               	movwf	??_utoa
  2974  0290  082C               	movf	??_utoa,w
  2975  0291  07B0               	addwf	utoa@buf,f
  2976  0292  082D               	movf	utoa@v,w
  2977  0293  042E               	iorwf	utoa@v+1,w
  2978  0294  1D03               	btfss	3,2
  2979  0295  2A80               	goto	l1285
  2980  0296  0830               	movf	utoa@buf,w
  2981  0297  0086               	movwf	6
  2982  0298  0187               	clrf	7
  2983  0299  0181               	clrf	1
  2984  029A  3001               	movlw	1
  2985  029B  02B0               	subwf	utoa@buf,f
  2986  029C                     l1295:	
  2987  029C  082B               	movf	utoa@base+1,w
  2988  029D  00A1               	movwf	___lwmod@divisor+1
  2989  029E  082A               	movf	utoa@base,w
  2990  029F  00A0               	movwf	___lwmod@divisor
  2991  02A0  0829               	movf	utoa@val+1,w
  2992  02A1  00A3               	movwf	___lwmod@dividend+1
  2993  02A2  0828               	movf	utoa@val,w
  2994  02A3  00A2               	movwf	___lwmod@dividend
  2995  02A4  233E               	fcall	___lwmod
  2996  02A5  0020               	movlb	0	; select bank0
  2997  02A6  0820               	movf	?___lwmod,w
  2998  02A7  00AC               	movwf	??_utoa
  2999  02A8  082C               	movf	??_utoa,w
  3000  02A9  00AF               	movwf	utoa@c
  3001  02AA  082B               	movf	utoa@base+1,w
  3002  02AB  00A1               	movwf	___lwdiv@divisor+1
  3003  02AC  082A               	movf	utoa@base,w
  3004  02AD  00A0               	movwf	___lwdiv@divisor
  3005  02AE  0829               	movf	utoa@val+1,w
  3006  02AF  00A3               	movwf	___lwdiv@dividend+1
  3007  02B0  0828               	movf	utoa@val,w
  3008  02B1  00A2               	movwf	___lwdiv@dividend
  3009  02B2  22D6               	fcall	___lwdiv
  3010  02B3  0020               	movlb	0	; select bank0
  3011  02B4  0821               	movf	?___lwdiv+1,w
  3012  02B5  00A9               	movwf	utoa@val+1
  3013  02B6  0820               	movf	?___lwdiv,w
  3014  02B7  00A8               	movwf	utoa@val
  3015  02B8  300A               	movlw	10
  3016  02B9  022F               	subwf	utoa@c,w
  3017  02BA  1C03               	skipc
  3018  02BB  2AC0               	goto	l486
  3019  02BC  3007               	movlw	7
  3020  02BD  00AC               	movwf	??_utoa
  3021  02BE  082C               	movf	??_utoa,w
  3022  02BF  07AF               	addwf	utoa@c,f
  3023  02C0                     l486:	
  3024  02C0  3030               	movlw	48
  3025  02C1  00AC               	movwf	??_utoa
  3026  02C2  082C               	movf	??_utoa,w
  3027  02C3  07AF               	addwf	utoa@c,f
  3028  02C4  082F               	movf	utoa@c,w
  3029  02C5  00AC               	movwf	??_utoa
  3030  02C6  0830               	movf	utoa@buf,w
  3031  02C7  0086               	movwf	6
  3032  02C8  0187               	clrf	7
  3033  02C9  082C               	movf	??_utoa,w
  3034  02CA  0081               	movwf	1
  3035  02CB  3001               	movlw	1
  3036  02CC  02B0               	subwf	utoa@buf,f
  3037  02CD  0828               	movf	utoa@val,w
  3038  02CE  0429               	iorwf	utoa@val+1,w
  3039  02CF  1D03               	btfss	3,2
  3040  02D0  2A9C               	goto	l1295
  3041                           
  3042                           ;	Return value of _utoa is never used
  3043  02D1  3001               	movlw	1
  3044  02D2  00AC               	movwf	??_utoa
  3045  02D3  082C               	movf	??_utoa,w
  3046  02D4  07B0               	addwf	utoa@buf,f
  3047  02D5  0008               	return
  3048  02D6                     __end_of_utoa:	
  3049                           
  3050                           	psect	text16
  3051  033E                     __ptext16:	
  3052 ;; *************** function ___lwmod *****************
  3053 ;; Defined at:
  3054 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;  divisor         2    0[BANK0 ] unsigned int 
  3057 ;;  dividend        2    2[BANK0 ] unsigned int 
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  counter         1    5[BANK0 ] unsigned char 
  3060 ;; Return value:  Size  Location     Type
  3061 ;;                  2    0[BANK0 ] unsigned int 
  3062 ;; Registers used:
  3063 ;;		wreg, status,2, status,0
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMMON   BANK0   BANK1
  3069 ;;      Params:         0       4       0
  3070 ;;      Locals:         0       1       0
  3071 ;;      Temps:          0       1       0
  3072 ;;      Totals:         0       6       0
  3073 ;;Total ram usage:        6 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; Hardware stack levels required when called:    2
  3076 ;; This function calls:
  3077 ;;		Nothing
  3078 ;; This function is called by:
  3079 ;;		_utoa
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           
  3084                           ;psect for function ___lwmod
  3085  033E                     ___lwmod:	
  3086                           
  3087                           ;incstack = 0
  3088                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3089  033E  0020               	movlb	0	; select bank0
  3090  033F  0820               	movf	___lwmod@divisor,w
  3091  0340  0421               	iorwf	___lwmod@divisor+1,w
  3092  0341  1903               	btfsc	3,2
  3093  0342  2B66               	goto	l1245
  3094  0343  01A5               	clrf	___lwmod@counter
  3095  0344  0AA5               	incf	___lwmod@counter,f
  3096  0345                     l1235:	
  3097  0345  1BA1               	btfsc	___lwmod@divisor+1,7
  3098  0346  2B51               	goto	l1237
  3099  0347  3001               	movlw	1
  3100  0348                     u525:	
  3101  0348  35A0               	lslf	___lwmod@divisor,f
  3102  0349  0DA1               	rlf	___lwmod@divisor+1,f
  3103  034A  0B89               	decfsz	9,f
  3104  034B  2B48               	goto	u525
  3105  034C  3001               	movlw	1
  3106  034D  00A4               	movwf	??___lwmod
  3107  034E  0824               	movf	??___lwmod,w
  3108  034F  07A5               	addwf	___lwmod@counter,f
  3109  0350  2B45               	goto	l1235
  3110  0351                     l1237:	
  3111  0351  0821               	movf	___lwmod@divisor+1,w
  3112  0352  0223               	subwf	___lwmod@dividend+1,w
  3113  0353  1D03               	skipz
  3114  0354  2B57               	goto	u545
  3115  0355  0820               	movf	___lwmod@divisor,w
  3116  0356  0222               	subwf	___lwmod@dividend,w
  3117  0357                     u545:	
  3118  0357  1C03               	skipc
  3119  0358  2B5D               	goto	l1241
  3120  0359  0820               	movf	___lwmod@divisor,w
  3121  035A  02A2               	subwf	___lwmod@dividend,f
  3122  035B  0821               	movf	___lwmod@divisor+1,w
  3123  035C  3BA3               	subwfb	___lwmod@dividend+1,f
  3124  035D                     l1241:	
  3125  035D  3001               	movlw	1
  3126  035E                     u555:	
  3127  035E  36A1               	lsrf	___lwmod@divisor+1,f
  3128  035F  0CA0               	rrf	___lwmod@divisor,f
  3129  0360  0B89               	decfsz	9,f
  3130  0361  2B5E               	goto	u555
  3131  0362  3001               	movlw	1
  3132  0363  02A5               	subwf	___lwmod@counter,f
  3133  0364  1D03               	btfss	3,2
  3134  0365  2B51               	goto	l1237
  3135  0366                     l1245:	
  3136  0366  0823               	movf	___lwmod@dividend+1,w
  3137  0367  00A1               	movwf	?___lwmod+1
  3138  0368  0822               	movf	___lwmod@dividend,w
  3139  0369  00A0               	movwf	?___lwmod
  3140  036A  0008               	return
  3141  036B                     __end_of___lwmod:	
  3142                           
  3143                           	psect	text17
  3144  02D6                     __ptext17:	
  3145 ;; *************** function ___lwdiv *****************
  3146 ;; Defined at:
  3147 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;  divisor         2    0[BANK0 ] unsigned int 
  3150 ;;  dividend        2    2[BANK0 ] unsigned int 
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;  quotient        2    5[BANK0 ] unsigned int 
  3153 ;;  counter         1    7[BANK0 ] unsigned char 
  3154 ;; Return value:  Size  Location     Type
  3155 ;;                  2    0[BANK0 ] unsigned int 
  3156 ;; Registers used:
  3157 ;;		wreg, status,2, status,0
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 0/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMMON   BANK0   BANK1
  3163 ;;      Params:         0       4       0
  3164 ;;      Locals:         0       3       0
  3165 ;;      Temps:          0       1       0
  3166 ;;      Totals:         0       8       0
  3167 ;;Total ram usage:        8 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    2
  3170 ;; This function calls:
  3171 ;;		Nothing
  3172 ;; This function is called by:
  3173 ;;		_utoa
  3174 ;; This function uses a non-reentrant model
  3175 ;;
  3176                           
  3177                           
  3178                           ;psect for function ___lwdiv
  3179  02D6                     ___lwdiv:	
  3180                           
  3181                           ;incstack = 0
  3182                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3183  02D6  0020               	movlb	0	; select bank0
  3184  02D7  01A5               	clrf	___lwdiv@quotient
  3185  02D8  01A6               	clrf	___lwdiv@quotient+1
  3186  02D9  0820               	movf	___lwdiv@divisor,w
  3187  02DA  0421               	iorwf	___lwdiv@divisor+1,w
  3188  02DB  1903               	btfsc	3,2
  3189  02DC  2B06               	goto	l1223
  3190  02DD  01A7               	clrf	___lwdiv@counter
  3191  02DE  0AA7               	incf	___lwdiv@counter,f
  3192  02DF                     l1211:	
  3193  02DF  1BA1               	btfsc	___lwdiv@divisor+1,7
  3194  02E0  2AEB               	goto	l1213
  3195  02E1  3001               	movlw	1
  3196  02E2                     u455:	
  3197  02E2  35A0               	lslf	___lwdiv@divisor,f
  3198  02E3  0DA1               	rlf	___lwdiv@divisor+1,f
  3199  02E4  0B89               	decfsz	9,f
  3200  02E5  2AE2               	goto	u455
  3201  02E6  3001               	movlw	1
  3202  02E7  00A4               	movwf	??___lwdiv
  3203  02E8  0824               	movf	??___lwdiv,w
  3204  02E9  07A7               	addwf	___lwdiv@counter,f
  3205  02EA  2ADF               	goto	l1211
  3206  02EB                     l1213:	
  3207  02EB  3001               	movlw	1
  3208  02EC                     u475:	
  3209  02EC  35A5               	lslf	___lwdiv@quotient,f
  3210  02ED  0DA6               	rlf	___lwdiv@quotient+1,f
  3211  02EE  0B89               	decfsz	9,f
  3212  02EF  2AEC               	goto	u475
  3213  02F0  0821               	movf	___lwdiv@divisor+1,w
  3214  02F1  0223               	subwf	___lwdiv@dividend+1,w
  3215  02F2  1D03               	skipz
  3216  02F3  2AF6               	goto	u485
  3217  02F4  0820               	movf	___lwdiv@divisor,w
  3218  02F5  0222               	subwf	___lwdiv@dividend,w
  3219  02F6                     u485:	
  3220  02F6  1C03               	skipc
  3221  02F7  2AFD               	goto	l1219
  3222  02F8  0820               	movf	___lwdiv@divisor,w
  3223  02F9  02A2               	subwf	___lwdiv@dividend,f
  3224  02FA  0821               	movf	___lwdiv@divisor+1,w
  3225  02FB  3BA3               	subwfb	___lwdiv@dividend+1,f
  3226  02FC  1425               	bsf	___lwdiv@quotient,0
  3227  02FD                     l1219:	
  3228  02FD  3001               	movlw	1
  3229  02FE                     u495:	
  3230  02FE  36A1               	lsrf	___lwdiv@divisor+1,f
  3231  02FF  0CA0               	rrf	___lwdiv@divisor,f
  3232  0300  0B89               	decfsz	9,f
  3233  0301  2AFE               	goto	u495
  3234  0302  3001               	movlw	1
  3235  0303  02A7               	subwf	___lwdiv@counter,f
  3236  0304  1D03               	btfss	3,2
  3237  0305  2AEB               	goto	l1213
  3238  0306                     l1223:	
  3239  0306  0826               	movf	___lwdiv@quotient+1,w
  3240  0307  00A1               	movwf	?___lwdiv+1
  3241  0308  0825               	movf	___lwdiv@quotient,w
  3242  0309  00A0               	movwf	?___lwdiv
  3243  030A  0008               	return
  3244  030B                     __end_of___lwdiv:	
  3245                           
  3246                           	psect	text18
  3247  01F8                     __ptext18:	
  3248 ;; *************** function ___aldiv *****************
  3249 ;; Defined at:
  3250 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;  divisor         4    0[BANK0 ] long 
  3253 ;;  dividend        4    4[BANK0 ] long 
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;  quotient        4   11[BANK0 ] long 
  3256 ;;  sign            1   10[BANK0 ] unsigned char 
  3257 ;;  counter         1    9[BANK0 ] unsigned char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  4    0[BANK0 ] long 
  3260 ;; Registers used:
  3261 ;;		wreg, status,2, status,0
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMMON   BANK0   BANK1
  3267 ;;      Params:         0       8       0
  3268 ;;      Locals:         0       6       0
  3269 ;;      Temps:          0       1       0
  3270 ;;      Totals:         0      15       0
  3271 ;;Total ram usage:       15 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    2
  3274 ;; This function calls:
  3275 ;;		Nothing
  3276 ;; This function is called by:
  3277 ;;		_loop
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           
  3282                           ;psect for function ___aldiv
  3283  01F8                     ___aldiv:	
  3284                           
  3285                           ;incstack = 0
  3286                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3287  01F8  0020               	movlb	0	; select bank0
  3288  01F9  01AA               	clrf	___aldiv@sign
  3289  01FA  1FA3               	btfss	___aldiv@divisor+3,7
  3290  01FB  2A09               	goto	l274
  3291  01FC  09A0               	comf	___aldiv@divisor,f
  3292  01FD  09A1               	comf	___aldiv@divisor+1,f
  3293  01FE  09A2               	comf	___aldiv@divisor+2,f
  3294  01FF  09A3               	comf	___aldiv@divisor+3,f
  3295  0200  0AA0               	incf	___aldiv@divisor,f
  3296  0201  1903               	skipnz
  3297  0202  0AA1               	incf	___aldiv@divisor+1,f
  3298  0203  1903               	skipnz
  3299  0204  0AA2               	incf	___aldiv@divisor+2,f
  3300  0205  1903               	skipnz
  3301  0206  0AA3               	incf	___aldiv@divisor+3,f
  3302  0207  01AA               	clrf	___aldiv@sign
  3303  0208  0AAA               	incf	___aldiv@sign,f
  3304  0209                     l274:	
  3305  0209  1FA7               	btfss	___aldiv@dividend+3,7
  3306  020A  2A1A               	goto	l1463
  3307  020B  09A4               	comf	___aldiv@dividend,f
  3308  020C  09A5               	comf	___aldiv@dividend+1,f
  3309  020D  09A6               	comf	___aldiv@dividend+2,f
  3310  020E  09A7               	comf	___aldiv@dividend+3,f
  3311  020F  0AA4               	incf	___aldiv@dividend,f
  3312  0210  1903               	skipnz
  3313  0211  0AA5               	incf	___aldiv@dividend+1,f
  3314  0212  1903               	skipnz
  3315  0213  0AA6               	incf	___aldiv@dividend+2,f
  3316  0214  1903               	skipnz
  3317  0215  0AA7               	incf	___aldiv@dividend+3,f
  3318  0216  3001               	movlw	1
  3319  0217  00A8               	movwf	??___aldiv
  3320  0218  0828               	movf	??___aldiv,w
  3321  0219  06AA               	xorwf	___aldiv@sign,f
  3322  021A                     l1463:	
  3323  021A  3000               	movlw	0
  3324  021B  00AE               	movwf	___aldiv@quotient+3
  3325  021C  3000               	movlw	0
  3326  021D  00AD               	movwf	___aldiv@quotient+2
  3327  021E  3000               	movlw	0
  3328  021F  00AC               	movwf	___aldiv@quotient+1
  3329  0220  3000               	movlw	0
  3330  0221  00AB               	movwf	___aldiv@quotient
  3331  0222  0823               	movf	___aldiv@divisor+3,w
  3332  0223  0422               	iorwf	___aldiv@divisor+2,w
  3333  0224  0421               	iorwf	___aldiv@divisor+1,w
  3334  0225  0420               	iorwf	___aldiv@divisor,w
  3335  0226  1903               	skipnz
  3336  0227  2A63               	goto	l1485
  3337  0228  01A9               	clrf	___aldiv@counter
  3338  0229  0AA9               	incf	___aldiv@counter,f
  3339  022A                     l1471:	
  3340  022A  1BA3               	btfsc	___aldiv@divisor+3,7
  3341  022B  2A38               	goto	l1473
  3342  022C  3001               	movlw	1
  3343  022D                     u675:	
  3344  022D  35A0               	lslf	___aldiv@divisor,f
  3345  022E  0DA1               	rlf	___aldiv@divisor+1,f
  3346  022F  0DA2               	rlf	___aldiv@divisor+2,f
  3347  0230  0DA3               	rlf	___aldiv@divisor+3,f
  3348  0231  0B89               	decfsz	9,f
  3349  0232  2A2D               	goto	u675
  3350  0233  3001               	movlw	1
  3351  0234  00A8               	movwf	??___aldiv
  3352  0235  0828               	movf	??___aldiv,w
  3353  0236  07A9               	addwf	___aldiv@counter,f
  3354  0237  2A2A               	goto	l1471
  3355  0238                     l1473:	
  3356  0238  3001               	movlw	1
  3357  0239                     u695:	
  3358  0239  35AB               	lslf	___aldiv@quotient,f
  3359  023A  0DAC               	rlf	___aldiv@quotient+1,f
  3360  023B  0DAD               	rlf	___aldiv@quotient+2,f
  3361  023C  0DAE               	rlf	___aldiv@quotient+3,f
  3362  023D  0B89               	decfsz	9,f
  3363  023E  2A39               	goto	u695
  3364  023F  0823               	movf	___aldiv@divisor+3,w
  3365  0240  0227               	subwf	___aldiv@dividend+3,w
  3366  0241  1D03               	skipz
  3367  0242  2A4D               	goto	u705
  3368  0243  0822               	movf	___aldiv@divisor+2,w
  3369  0244  0226               	subwf	___aldiv@dividend+2,w
  3370  0245  1D03               	skipz
  3371  0246  2A4D               	goto	u705
  3372  0247  0821               	movf	___aldiv@divisor+1,w
  3373  0248  0225               	subwf	___aldiv@dividend+1,w
  3374  0249  1D03               	skipz
  3375  024A  2A4D               	goto	u705
  3376  024B  0820               	movf	___aldiv@divisor,w
  3377  024C  0224               	subwf	___aldiv@dividend,w
  3378  024D                     u705:	
  3379  024D  1C03               	skipc
  3380  024E  2A58               	goto	l1481
  3381  024F  0820               	movf	___aldiv@divisor,w
  3382  0250  02A4               	subwf	___aldiv@dividend,f
  3383  0251  0821               	movf	___aldiv@divisor+1,w
  3384  0252  3BA5               	subwfb	___aldiv@dividend+1,f
  3385  0253  0822               	movf	___aldiv@divisor+2,w
  3386  0254  3BA6               	subwfb	___aldiv@dividend+2,f
  3387  0255  0823               	movf	___aldiv@divisor+3,w
  3388  0256  3BA7               	subwfb	___aldiv@dividend+3,f
  3389  0257  142B               	bsf	___aldiv@quotient,0
  3390  0258                     l1481:	
  3391  0258  3001               	movlw	1
  3392  0259                     u715:	
  3393  0259  36A3               	lsrf	___aldiv@divisor+3,f
  3394  025A  0CA2               	rrf	___aldiv@divisor+2,f
  3395  025B  0CA1               	rrf	___aldiv@divisor+1,f
  3396  025C  0CA0               	rrf	___aldiv@divisor,f
  3397  025D  0B89               	decfsz	9,f
  3398  025E  2A59               	goto	u715
  3399  025F  3001               	movlw	1
  3400  0260  02A9               	subwf	___aldiv@counter,f
  3401  0261  1D03               	btfss	3,2
  3402  0262  2A38               	goto	l1473
  3403  0263                     l1485:	
  3404  0263  082A               	movf	___aldiv@sign,w
  3405  0264  1903               	btfsc	3,2
  3406  0265  2A71               	goto	l1489
  3407  0266  09AB               	comf	___aldiv@quotient,f
  3408  0267  09AC               	comf	___aldiv@quotient+1,f
  3409  0268  09AD               	comf	___aldiv@quotient+2,f
  3410  0269  09AE               	comf	___aldiv@quotient+3,f
  3411  026A  0AAB               	incf	___aldiv@quotient,f
  3412  026B  1903               	skipnz
  3413  026C  0AAC               	incf	___aldiv@quotient+1,f
  3414  026D  1903               	skipnz
  3415  026E  0AAD               	incf	___aldiv@quotient+2,f
  3416  026F  1903               	skipnz
  3417  0270  0AAE               	incf	___aldiv@quotient+3,f
  3418  0271                     l1489:	
  3419  0271  082E               	movf	___aldiv@quotient+3,w
  3420  0272  00A3               	movwf	?___aldiv+3
  3421  0273  082D               	movf	___aldiv@quotient+2,w
  3422  0274  00A2               	movwf	?___aldiv+2
  3423  0275  082C               	movf	___aldiv@quotient+1,w
  3424  0276  00A1               	movwf	?___aldiv+1
  3425  0277  082B               	movf	___aldiv@quotient,w
  3426  0278  00A0               	movwf	?___aldiv
  3427  0279  0008               	return
  3428  027A                     __end_of___aldiv:	
  3429                           
  3430                           	psect	intentry
  3431  0004                     __pintentry:	
  3432 ;; *************** function _ISR *****************
  3433 ;; Defined at:
  3434 ;;		line 30 in file "main.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  result          2    5[COMMON] int 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2, status,0, pclath, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMMON   BANK0   BANK1
  3448 ;;      Params:         0       0       0
  3449 ;;      Locals:         2       0       0
  3450 ;;      Temps:          5       0       0
  3451 ;;      Totals:         7       0       0
  3452 ;;Total ram usage:        7 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    1
  3455 ;; This function calls:
  3456 ;;		_nrf24l01ISR
  3457 ;; This function is called by:
  3458 ;;		Interrupt level 1
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462  0004                     _ISR:	
  3463                           
  3464                           ;incstack = 0
  3465  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3466                           
  3467                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  3468  0005  3180               	pagesel	$
  3469  0006  0020               	movlb	0	; select bank0
  3470  0007  087F               	movf	127,w
  3471  0008  00F4               	movwf	??_ISR+4
  3472                           
  3473                           ;main.c: 32: if (PIR1bits.ADIF){
  3474  0009  1F11               	btfss	17,6	;volatile
  3475  000A  2843               	goto	i1l1627
  3476                           
  3477                           ;main.c: 34: if (mode == 100) {
  3478  000B  3064               	movlw	100
  3479  000C  0678               	xorwf	_mode,w
  3480  000D  1D03               	btfss	3,2
  3481  000E  2841               	goto	i1l1625
  3482                           
  3483                           ;main.c: 36: int result = 0x00;
  3484  000F  01F5               	clrf	ISR@result
  3485  0010  01F6               	clrf	ISR@result+1
  3486                           
  3487                           ;main.c: 37: result = ADRESL;
  3488  0011  0021               	movlb	1	; select bank1
  3489  0012  081B               	movf	27,w	;volatile
  3490  0013  00F0               	movwf	??_ISR
  3491  0014  01F1               	clrf	??_ISR+1
  3492  0015  0870               	movf	??_ISR,w
  3493  0016  00F5               	movwf	ISR@result
  3494  0017  0871               	movf	??_ISR+1,w
  3495  0018  00F6               	movwf	ISR@result+1
  3496                           
  3497                           ;main.c: 38: result|= (ADRESH << 8);
  3498  0019  081C               	movf	28,w	;volatile
  3499  001A  00F0               	movwf	??_ISR
  3500  001B  01F1               	clrf	??_ISR+1
  3501  001C  0870               	movf	??_ISR,w
  3502  001D  00F1               	movwf	??_ISR+1
  3503  001E  01F0               	clrf	??_ISR
  3504  001F  0870               	movf	??_ISR,w
  3505  0020  04F5               	iorwf	ISR@result,f
  3506  0021  0871               	movf	??_ISR+1,w
  3507  0022  04F6               	iorwf	ISR@result+1,f
  3508                           
  3509                           ;main.c: 40: adcSum+= result;
  3510  0023  0875               	movf	ISR@result,w
  3511  0024  00F0               	movwf	??_ISR
  3512  0025  0876               	movf	ISR@result+1,w
  3513  0026  00F1               	movwf	??_ISR+1
  3514  0027  3000               	movlw	0
  3515  0028  1BF1               	btfsc	??_ISR+1,7
  3516  0029  30FF               	movlw	255
  3517  002A  00F2               	movwf	??_ISR+2
  3518  002B  00F3               	movwf	??_ISR+3
  3519  002C  0870               	movf	??_ISR,w
  3520  002D  0020               	movlb	0	; select bank0
  3521  002E  07BC               	addwf	_adcSum,f
  3522  002F  0871               	movf	??_ISR+1,w
  3523  0030  3DBD               	addwfc	_adcSum+1,f
  3524  0031  0872               	movf	??_ISR+2,w
  3525  0032  3DBE               	addwfc	_adcSum+2,f
  3526  0033  0873               	movf	??_ISR+3,w
  3527  0034  3DBF               	addwfc	_adcSum+3,f
  3528                           
  3529                           ;main.c: 42: if (!adcLoop){
  3530  0035  0877               	movf	_adcLoop,w
  3531  0036  1D03               	btfss	3,2
  3532  0037  283D               	goto	i1l75
  3533                           
  3534                           ;main.c: 43: mode = 101;
  3535  0038  3065               	movlw	101
  3536  0039  00F0               	movwf	??_ISR
  3537  003A  0870               	movf	??_ISR,w
  3538  003B  00F8               	movwf	_mode
  3539                           
  3540                           ;main.c: 44: }else{
  3541  003C  283F               	goto	i1l1623
  3542  003D                     i1l75:	
  3543                           
  3544                           ;main.c: 46: ADCON0bits.ADGO = 1;
  3545  003D  0021               	movlb	1	; select bank1
  3546  003E  149D               	bsf	29,1	;volatile
  3547  003F                     i1l1623:	
  3548                           
  3549                           ;main.c: 47: }
  3550                           ;main.c: 49: adcLoop--;
  3551  003F  3001               	movlw	1
  3552  0040  02F7               	subwf	_adcLoop,f
  3553  0041                     i1l1625:	
  3554                           
  3555                           ;main.c: 50: }
  3556                           ;main.c: 53: PIR1bits.ADIF = 0;
  3557  0041  0020               	movlb	0	; select bank0
  3558  0042  1311               	bcf	17,6	;volatile
  3559  0043                     i1l1627:	
  3560                           
  3561                           ;main.c: 54: }
  3562                           ;main.c: 56: nrf24l01ISR();
  3563  0043  245E               	fcall	_nrf24l01ISR
  3564  0044  0874               	movf	??_ISR+4,w
  3565  0045  0020               	movlb	0	; select bank0
  3566  0046  00FF               	movwf	127
  3567  0047  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3568  0048  0009               	retfie
  3569  0049                     __end_of_ISR:	
  3570                           
  3571                           	psect	text20
  3572  045E                     __ptext20:	
  3573 ;; *************** function _nrf24l01ISR *****************
  3574 ;; Defined at:
  3575 ;;		line 17 in file "nrf24l01.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;		None
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;		None
  3580 ;; Return value:  Size  Location     Type
  3581 ;;                  1    wreg      void 
  3582 ;; Registers used:
  3583 ;;		None
  3584 ;; Tracked objects:
  3585 ;;		On entry : 0/0
  3586 ;;		On exit  : 0/0
  3587 ;;		Unchanged: 0/0
  3588 ;; Data sizes:     COMMON   BANK0   BANK1
  3589 ;;      Params:         0       0       0
  3590 ;;      Locals:         0       0       0
  3591 ;;      Temps:          0       0       0
  3592 ;;      Totals:         0       0       0
  3593 ;;Total ram usage:        0 bytes
  3594 ;; Hardware stack levels used:    1
  3595 ;; This function calls:
  3596 ;;		Nothing
  3597 ;; This function is called by:
  3598 ;;		_ISR
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           
  3603                           ;psect for function _nrf24l01ISR
  3604  045E                     _nrf24l01ISR:	
  3605                           
  3606                           ;incstack = 0
  3607                           ; Regs used in _nrf24l01ISR: []
  3608  045E  0008               	return
  3609  045F                     __end_of_nrf24l01ISR:	
  3610  007E                     btemp	set	126	;btemp
  3611  007E                     int$flags	set	126
  3612  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    6
    Data        2
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80     28      42
    BANK1            32      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[2]), buffer(BANK0[6]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[2]), buffer(BANK0[6]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[2]), buffer(BANK0[6]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[2]), buffer(BANK0[6]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[2]), buffer(BANK0[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01Send
    _loop->_itoa
    _sendName->_read_flashmem
    _nrf24l01SendByte->_nrf24l01SPISend
    _nrf24l01SendStart->_nrf24l01SetTransmitMode
    _nrf24l01SetTransmitMode->_nrf24l01Send
    _nrf24l01Send->_nrf24l01SPISend
    _itoa->_utoa
    _utoa->___lwdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    6282
                                             27 BANK0      1     1      0
                               _loop
                       _nrf24l01Init
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1937
                                             13 BANK0      1     1      0
              _nrf24l01InitRegisters
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    1937
                                              4 BANK0      9     9      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 3     3      0    4345
                                             24 BANK0      3     3      0
                            ___aldiv
                               _itoa
                   _nrf24l01SendByte
                    _nrf24l01SendEnd
                  _nrf24l01SendStart
                           _sendName
 ---------------------------------------------------------------------------------
 (2) _sendName                                             4     4      0     326
                                              6 BANK0      4     4      0
                   _nrf24l01SendByte
                      _read_flashmem
 ---------------------------------------------------------------------------------
 (3) _read_flashmem                                        6     4      2     131
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SendByte                                     1     1      0      62
                                              1 BANK0      1     1      0
                    _nrf24l01SPISend
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendStart                                    0     0      0    1689
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
            _nrf24l01SetTransmitMode
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetTransmitMode                              2     2      0    1658
                                              4 BANK0      2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    1590
                                              1 BANK0      3     2      1
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SPISend                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendEnd                                      0     0      0       0
                     _nrf24l01SPIEnd
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _itoa                                                 7     3      4    1644
                                             17 BANK0      7     3      4
                               _utoa
 ---------------------------------------------------------------------------------
 (3) _utoa                                                 9     5      4    1165
                                              8 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     287
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     556
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  7     7      0      25
                                              0 COMMON     7     7      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___aldiv
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
     _nrf24l01SendByte
       _nrf24l01SPISend
     _nrf24l01SendEnd
       _nrf24l01SPIEnd
     _nrf24l01SendStart
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetTransmitMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
     _sendName
       _nrf24l01SendByte
         _nrf24l01SPISend
       _read_flashmem
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 _ISR (ROOT)
   _nrf24l01ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      33       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1C      2A       6       52.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      33       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed May 23 17:16:42 2018

                      __CFG_CP$OFF 0000                                 l95 005E  
              nrf24l01Send@command 0023                        __CFG_LVP$ON 0000  
                              l112 0167                                l157 0425  
                              l274 0209                                l486 02C0  
                              _ISR 0004                                u525 0348  
                              u455 02E2                                u705 024D  
                              u545 0357                                u715 0259  
                              u475 02EC                                u555 035E  
                              u485 02F6                                u495 02FE  
                              u675 022D                                u695 0239  
                              u977 0318                                u987 0382  
                              u997 038B                       __CFG_BORV$LO 0000  
                              wreg 0009                               ?_ISR 0070  
                   ??_nrf24l01Init 002D                               l1211 02DF  
                             l1213 02EB                               l2013 033C  
                             l1223 0306                               l1241 035D  
                             l1219 02FD                               l1235 0345  
                             l1237 0351                               l1245 0366  
                             l1285 0280                               l1349 03CC  
                             l1471 022A                               l1463 021A  
                             l1295 029C                               l1481 0258  
                             l1473 0238                               l1485 0263  
                             l1901 010C                               l1489 0271  
                             l1737 03DA                     ??_nrf24l01Send 0022  
                             l1925 0139                               l1933 0153  
                             l1695 042A                               l1927 014C  
                             l1863 0082                               l1873 00A8  
                             l1865 008C                               l1859 006B  
                             l1893 00DC                               l1895 00E5  
                             l1887 00D0                               l1879 00B4  
                             l1899 0101                       __CFG_WDTE$ON 0000  
                             u1007 0170                               u1017 00A5  
                             u1027 00CD                               u1037 0408  
                             u1047 0440                               u1057 0430  
                             u1067 0445                               i1l75 003D  
                     __CFG_WRT$OFF 0000                      __p_NVMEM_text 07E0  
                             _main 030B                               _byte 0047  
                             _mode 0078                               _itoa 03B4  
                             _loop 0058                               fsr0h 0005  
                             fsr1h 0007                               indf0 0000  
                             fsr0l 0004                               indf1 0001  
                             fsr1l 0006                               btemp 007E  
                             _utoa 027A                      __CFG_BOREN$ON 0000  
                             start 0049           ?_nrf24l01SetTransmitMode 0070  
                            ??_ISR 0070                    __end_of___aldiv 027A  
                            ?_main 0070                              ?_itoa 0031  
                            ?_loop 0070                              ?_utoa 0028  
                  __end_of___lwdiv 030B                    __end_of___lwmod 036B  
                            _NVMEM 07E0                      __CFG_PWRTE$ON 0000  
                            loop@i 003A                              utoa@c 002F  
                            utoa@v 002D                              status 0003  
                            wtemp0 007E                   _nrf24l01SPIStart 043D  
                   __CFG_MCLRE$OFF 0000                    __initialization 004A  
                     __end_of_main 033E                       __end_of_itoa 03D7  
                     __end_of_loop 0168                       __end_of_utoa 02D6  
                   __CFG_LPBOR$OFF 0000                             ??_main 003B  
                           ??_itoa 0035                             ??_loop 0038  
                           ??_utoa 002C                   ??_nrf24l01SPIEnd 0020  
         __size_of_nrf24l01SPISend 000C                   _nrf24l01SendByte 0456  
                           _ADRESH 009C                             _ADRESL 009B  
                           _ANSELA 018C                             _ANSELC 018E  
                           i1l1623 003F                             i1l1625 0041  
                           i1l1627 0043                             _PMADRH 0192  
                           _PMADRL 0191                             _PMDATH 0194  
                           _PMDATL 0193                             _PMCON1 0195  
                           _PMCON2 0196           __size_of_nrf24l01SendEnd 000A  
             __size_of_nrf24l01ISR 0001                             _adcSum 003C  
                        ??___aldiv 0028                     __CFG_STVREN$ON 0000  
                        ??___lwdiv 0024                          ??___lwmod 0024  
                           _buffer 0041               __end_of_nrf24l01Init 0391  
             __end_of_nrf24l01Send 0420              _nrf24l01InitRegisters 0168  
                           _status 0040                   __end_of_sendName 03F6  
                           itoa@cp 0036                       __pdataCOMMON 0078  
           __size_of_read_flashmem 0023            __end_of__initialization 0055  
                    __end_of_NVMEM 0800                     __pcstackCOMMON 0070  
                     __pidataBANK0 045C      nrf24l01InitRegisters@enRXAddr 002A  
                   _OPTION_REGbits 0095                         __pbssBANK0 003C  
                ??_nrf24l01SPISend 0020                          ISR@result 0075  
                    _read_flashmem 0391                         __pmaintext 030B  
                ??_nrf24l01SendEnd 0020             ?_nrf24l01InitRegisters 0070  
                       __pintentry 0004                nrf24l01SPISend@data 0020  
                _nrf24l01SendStart 0436                 ?_nrf24l01SendStart 0070  
            __end_of_n_ADDRESS_MUL 045E   __size_of_nrf24l01SetTransmitMode 0016  
         __end_of_nrf24l01SPIStart 0444                            _SSP1BUF 0211  
              ??_nrf24l01SendStart 0026                          ?_sendName 0070  
                   ?_read_flashmem 0020              __size_of_nrf24l01Init 0026  
            __size_of_nrf24l01Send 0014                            ___aldiv 01F8  
        __end_of_nrf24l01SendStart 043D           __end_of_nrf24l01SendByte 045B  
                          _adcLoop 0077                            ___lwdiv 02D6  
                          ___lwmod 033E                            __ptext1 036B  
                          __ptext2 0168                            __ptext3 0058  
                          __ptext4 03D7                            __ptext5 0391  
                          __ptext6 0456                            __ptext7 0436  
                          __ptext8 03F6                            __ptext9 040C  
                     __size_of_ISR 0045                   ___aldiv@dividend 0024  
                          clrloop0 044C               end_of_initialization 0055  
                     _nrf24l01Init 036B                       _nrf24l01Send 040C  
                          itoa@buf 0037                            itoa@val 0031  
                       ??_sendName 0026                   ___aldiv@quotient 002B  
                          utoa@buf 0030                            utoa@val 0028  
                        _PORTAbits 000C                   __CFG_FOSC$INTOSC 0000  
                        _TRISAbits 008C                          _TRISCbits 008E  
                 nrf24l01Send@data 0021                      ??_nrf24l01ISR 0070  
                  ??_read_flashmem 0022         __size_of_nrf24l01SendStart 0007  
    nrf24l01SetTransmitMode@config 0025                      __pidataCOMMON 045B  
          _nrf24l01SetTransmitMode 03F6                start_initialization 004A  
                  _nrf24l01SPISend 0420                        __end_of_ISR 0049  
      nrf24l01SendByte@payloadByte 0021            __size_of_nrf24l01SPIEnd 0007  
                  _nrf24l01SendEnd 042C            ??_nrf24l01InitRegisters 0024  
              __end_of_nrf24l01ISR 045F                        __pdataBANK0 0049  
                      __pbssCOMMON 0077                          ___latbits 0000  
                    __pcstackBANK0 0020                  ?_nrf24l01SPIStart 0070  
               ??_nrf24l01SPIStart 0020                     sendName@offset 0028  
                     sendName@btye 0027                   ___lwdiv@dividend 0022  
                __size_of_sendName 001F                           ?___aldiv 0020  
                ?_nrf24l01SendByte 0070                           ?___lwdiv 0020  
        ??_nrf24l01SetTransmitMode 0024                           ?___lwmod 0020  
             __end_of_n_ADDRESS_P0 0456            __end_of_nrf24l01SPISend 042C  
                    _NVMEM_absaddr 07E0                 ??_nrf24l01SendByte 0021  
        nrf24l01InitRegisters@enAA 002B            __end_of_nrf24l01SendEnd 0436  
                 ___lwdiv@quotient 0025                    ___aldiv@divisor 0020  
                  ___aldiv@counter 0029  nrf24l01InitRegisters@setupRetries 0026  
                      _nrf24l01ISR 045E                          clear_ram0 044B  
                         _PIE1bits 0091                           _PIR1bits 0011  
                       _ADCON0bits 009D                         _ADCON1bits 009E  
                         _WPUAbits 020C    __end_of_nrf24l01SetTransmitMode 040C  
                   _nrf24l01SPIEnd 0444                   __size_of___aldiv 0082  
                 __size_of___lwdiv 0035                   __size_of___lwmod 002D  
                 ?_nrf24l01SPISend 0070                         _ANSELAbits 018C  
                       _ANSELCbits 018E                      _n_ADDRESS_MUL 045D  
                  ___lwdiv@divisor 0020                    ___lwdiv@counter 0027  
                         __ptext10 043D                           __ptext11 0420  
                         __ptext20 045E                           __ptext12 042C  
                         __ptext13 0444                           __ptext14 03B4  
                         __ptext15 027A                           __ptext16 033E  
                         __ptext17 02D6                           __ptext18 01F8  
                 ?_nrf24l01SendEnd 0070             __end_of_nrf24l01SPIEnd 044B  
                    __size_of_main 0033                      __size_of_itoa 0023  
                    __size_of_loop 0110                      __size_of_utoa 005C  
     nrf24l01InitRegisters@feature 0027                           _nextMode 0049  
                         _sendName 03D7              __end_of_read_flashmem 03B4  
     nrf24l01InitRegisters@rfSetup 0028     __size_of_nrf24l01InitRegisters 0090  
    __end_of_nrf24l01InitRegisters 01F8                           int$flags 007E  
     nrf24l01InitRegisters@setupAW 0025                       _SSP1STATbits 0214  
                       _INTCONbits 000B                           itoa@base 0033  
                  ?_nrf24l01SPIEnd 0070                           intlevel1 0000  
              read_flashmem@offset 0020                       _n_ADDRESS_P0 0451  
              read_flashmem@result 0024                         _PMCON1bits 0195  
                 ___lwmod@dividend 0022                  __CFG_CLKOUTEN$OFF 0000  
      nrf24l01InitRegisters@config 0029                         _OSCCONbits 0099  
        __size_of_nrf24l01SPIStart 0007                      __pstringtext1 0451  
                    __pstringtext2 045D                           utoa@base 002A  
       nrf24l01InitRegisters@DynPD 002C                    ___lwmod@divisor 0020  
                  ___lwmod@counter 0025                       ___aldiv@sign 002A  
                      _SSPCON1bits 0215                         _WDTCONbits 0097  
        __size_of_nrf24l01SendByte 0005                      ?_nrf24l01Init 0070  
                    ?_nrf24l01Send 0021                         _STATUSbits 0003  
                     ?_nrf24l01ISR 0070  
