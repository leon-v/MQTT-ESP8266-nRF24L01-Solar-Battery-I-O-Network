

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu May 31 17:36:19 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	_NVMEM_text,global,class=CODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     
    49                           ; Version 1.45
    50                           ; Generated 16/11/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC16LF1503 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0008                     	;# 
    92  0009                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  000E                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  008C                     	;# 
   110  008E                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  010C                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011D                     	;# 
   137  018C                     	;# 
   138  018E                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  020C                     	;# 
   148  0211                     	;# 
   149  0211                     	;# 
   150  0212                     	;# 
   151  0212                     	;# 
   152  0213                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0214                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0216                     	;# 
   160  0216                     	;# 
   161  0217                     	;# 
   162  0217                     	;# 
   163  0391                     	;# 
   164  0392                     	;# 
   165  0393                     	;# 
   166  0498                     	;# 
   167  0498                     	;# 
   168  0499                     	;# 
   169  049A                     	;# 
   170  049B                     	;# 
   171  049B                     	;# 
   172  049C                     	;# 
   173  049D                     	;# 
   174  049E                     	;# 
   175  049F                     	;# 
   176  0611                     	;# 
   177  0612                     	;# 
   178  0613                     	;# 
   179  0613                     	;# 
   180  0614                     	;# 
   181  0615                     	;# 
   182  0616                     	;# 
   183  0616                     	;# 
   184  0617                     	;# 
   185  0618                     	;# 
   186  0619                     	;# 
   187  0619                     	;# 
   188  061A                     	;# 
   189  061B                     	;# 
   190  061C                     	;# 
   191  061C                     	;# 
   192  0691                     	;# 
   193  0692                     	;# 
   194  0693                     	;# 
   195  0694                     	;# 
   196  0695                     	;# 
   197  0F0F                     	;# 
   198  0F10                     	;# 
   199  0F11                     	;# 
   200  0F12                     	;# 
   201  0F13                     	;# 
   202  0F14                     	;# 
   203  0F15                     	;# 
   204  0F16                     	;# 
   205  0F17                     	;# 
   206  0F18                     	;# 
   207  0F19                     	;# 
   208  0F1A                     	;# 
   209  0F1B                     	;# 
   210  0F1C                     	;# 
   211  0F1D                     	;# 
   212  0F1E                     	;# 
   213  0F1F                     	;# 
   214  0FE3                     	;# 
   215  0FE4                     	;# 
   216  0FE5                     	;# 
   217  0FE6                     	;# 
   218  0FE7                     	;# 
   219  0FE8                     	;# 
   220  0FE9                     	;# 
   221  0FEA                     	;# 
   222  0FEB                     	;# 
   223  0FED                     	;# 
   224  0FEE                     	;# 
   225  0FEF                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000E                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  008C                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0095                     	;# 
   258  0096                     	;# 
   259  0097                     	;# 
   260  0099                     	;# 
   261  009A                     	;# 
   262  009B                     	;# 
   263  009B                     	;# 
   264  009C                     	;# 
   265  009D                     	;# 
   266  009E                     	;# 
   267  009F                     	;# 
   268  010C                     	;# 
   269  010E                     	;# 
   270  0111                     	;# 
   271  0112                     	;# 
   272  0113                     	;# 
   273  0114                     	;# 
   274  0115                     	;# 
   275  0116                     	;# 
   276  0117                     	;# 
   277  0118                     	;# 
   278  0119                     	;# 
   279  011D                     	;# 
   280  018C                     	;# 
   281  018E                     	;# 
   282  0191                     	;# 
   283  0191                     	;# 
   284  0192                     	;# 
   285  0193                     	;# 
   286  0193                     	;# 
   287  0194                     	;# 
   288  0195                     	;# 
   289  0196                     	;# 
   290  020C                     	;# 
   291  0211                     	;# 
   292  0211                     	;# 
   293  0212                     	;# 
   294  0212                     	;# 
   295  0213                     	;# 
   296  0213                     	;# 
   297  0214                     	;# 
   298  0214                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0216                     	;# 
   303  0216                     	;# 
   304  0217                     	;# 
   305  0217                     	;# 
   306  0391                     	;# 
   307  0392                     	;# 
   308  0393                     	;# 
   309  0498                     	;# 
   310  0498                     	;# 
   311  0499                     	;# 
   312  049A                     	;# 
   313  049B                     	;# 
   314  049B                     	;# 
   315  049C                     	;# 
   316  049D                     	;# 
   317  049E                     	;# 
   318  049F                     	;# 
   319  0611                     	;# 
   320  0612                     	;# 
   321  0613                     	;# 
   322  0613                     	;# 
   323  0614                     	;# 
   324  0615                     	;# 
   325  0616                     	;# 
   326  0616                     	;# 
   327  0617                     	;# 
   328  0618                     	;# 
   329  0619                     	;# 
   330  0619                     	;# 
   331  061A                     	;# 
   332  061B                     	;# 
   333  061C                     	;# 
   334  061C                     	;# 
   335  0691                     	;# 
   336  0692                     	;# 
   337  0693                     	;# 
   338  0694                     	;# 
   339  0695                     	;# 
   340  0F0F                     	;# 
   341  0F10                     	;# 
   342  0F11                     	;# 
   343  0F12                     	;# 
   344  0F13                     	;# 
   345  0F14                     	;# 
   346  0F15                     	;# 
   347  0F16                     	;# 
   348  0F17                     	;# 
   349  0F18                     	;# 
   350  0F19                     	;# 
   351  0F1A                     	;# 
   352  0F1B                     	;# 
   353  0F1C                     	;# 
   354  0F1D                     	;# 
   355  0F1E                     	;# 
   356  0F1F                     	;# 
   357  0FE3                     	;# 
   358  0FE4                     	;# 
   359  0FE5                     	;# 
   360  0FE6                     	;# 
   361  0FE7                     	;# 
   362  0FE8                     	;# 
   363  0FE9                     	;# 
   364  0FEA                     	;# 
   365  0FEB                     	;# 
   366  0FED                     	;# 
   367  0FEE                     	;# 
   368  0FEF                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000E                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0015                     	;# 
   387  0016                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001C                     	;# 
   395  008C                     	;# 
   396  008E                     	;# 
   397  0091                     	;# 
   398  0092                     	;# 
   399  0093                     	;# 
   400  0095                     	;# 
   401  0096                     	;# 
   402  0097                     	;# 
   403  0099                     	;# 
   404  009A                     	;# 
   405  009B                     	;# 
   406  009B                     	;# 
   407  009C                     	;# 
   408  009D                     	;# 
   409  009E                     	;# 
   410  009F                     	;# 
   411  010C                     	;# 
   412  010E                     	;# 
   413  0111                     	;# 
   414  0112                     	;# 
   415  0113                     	;# 
   416  0114                     	;# 
   417  0115                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  0118                     	;# 
   421  0119                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018E                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  020C                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0391                     	;# 
   450  0392                     	;# 
   451  0393                     	;# 
   452  0498                     	;# 
   453  0498                     	;# 
   454  0499                     	;# 
   455  049A                     	;# 
   456  049B                     	;# 
   457  049B                     	;# 
   458  049C                     	;# 
   459  049D                     	;# 
   460  049E                     	;# 
   461  049F                     	;# 
   462  0611                     	;# 
   463  0612                     	;# 
   464  0613                     	;# 
   465  0613                     	;# 
   466  0614                     	;# 
   467  0615                     	;# 
   468  0616                     	;# 
   469  0616                     	;# 
   470  0617                     	;# 
   471  0618                     	;# 
   472  0619                     	;# 
   473  0619                     	;# 
   474  061A                     	;# 
   475  061B                     	;# 
   476  061C                     	;# 
   477  061C                     	;# 
   478  0691                     	;# 
   479  0692                     	;# 
   480  0693                     	;# 
   481  0694                     	;# 
   482  0695                     	;# 
   483  0F0F                     	;# 
   484  0F10                     	;# 
   485  0F11                     	;# 
   486  0F12                     	;# 
   487  0F13                     	;# 
   488  0F14                     	;# 
   489  0F15                     	;# 
   490  0F16                     	;# 
   491  0F17                     	;# 
   492  0F18                     	;# 
   493  0F19                     	;# 
   494  0F1A                     	;# 
   495  0F1B                     	;# 
   496  0F1C                     	;# 
   497  0F1D                     	;# 
   498  0F1E                     	;# 
   499  0F1F                     	;# 
   500  0FE3                     	;# 
   501  0FE4                     	;# 
   502  0FE5                     	;# 
   503  0FE6                     	;# 
   504  0FE7                     	;# 
   505  0FE8                     	;# 
   506  0FE9                     	;# 
   507  0FEA                     	;# 
   508  0FEB                     	;# 
   509  0FED                     	;# 
   510  0FEE                     	;# 
   511  0FEF                     	;# 
   512  0000                     	;# 
   513  0001                     	;# 
   514  0002                     	;# 
   515  0003                     	;# 
   516  0004                     	;# 
   517  0005                     	;# 
   518  0006                     	;# 
   519  0007                     	;# 
   520  0008                     	;# 
   521  0009                     	;# 
   522  000A                     	;# 
   523  000B                     	;# 
   524  000C                     	;# 
   525  000E                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0013                     	;# 
   529  0015                     	;# 
   530  0016                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001C                     	;# 
   538  008C                     	;# 
   539  008E                     	;# 
   540  0091                     	;# 
   541  0092                     	;# 
   542  0093                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  009F                     	;# 
   554  010C                     	;# 
   555  010E                     	;# 
   556  0111                     	;# 
   557  0112                     	;# 
   558  0113                     	;# 
   559  0114                     	;# 
   560  0115                     	;# 
   561  0116                     	;# 
   562  0117                     	;# 
   563  0118                     	;# 
   564  0119                     	;# 
   565  011D                     	;# 
   566  018C                     	;# 
   567  018E                     	;# 
   568  0191                     	;# 
   569  0191                     	;# 
   570  0192                     	;# 
   571  0193                     	;# 
   572  0193                     	;# 
   573  0194                     	;# 
   574  0195                     	;# 
   575  0196                     	;# 
   576  020C                     	;# 
   577  0211                     	;# 
   578  0211                     	;# 
   579  0212                     	;# 
   580  0212                     	;# 
   581  0213                     	;# 
   582  0213                     	;# 
   583  0214                     	;# 
   584  0214                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0216                     	;# 
   589  0216                     	;# 
   590  0217                     	;# 
   591  0217                     	;# 
   592  0391                     	;# 
   593  0392                     	;# 
   594  0393                     	;# 
   595  0498                     	;# 
   596  0498                     	;# 
   597  0499                     	;# 
   598  049A                     	;# 
   599  049B                     	;# 
   600  049B                     	;# 
   601  049C                     	;# 
   602  049D                     	;# 
   603  049E                     	;# 
   604  049F                     	;# 
   605  0611                     	;# 
   606  0612                     	;# 
   607  0613                     	;# 
   608  0613                     	;# 
   609  0614                     	;# 
   610  0615                     	;# 
   611  0616                     	;# 
   612  0616                     	;# 
   613  0617                     	;# 
   614  0618                     	;# 
   615  0619                     	;# 
   616  0619                     	;# 
   617  061A                     	;# 
   618  061B                     	;# 
   619  061C                     	;# 
   620  061C                     	;# 
   621  0691                     	;# 
   622  0692                     	;# 
   623  0693                     	;# 
   624  0694                     	;# 
   625  0695                     	;# 
   626  0F0F                     	;# 
   627  0F10                     	;# 
   628  0F11                     	;# 
   629  0F12                     	;# 
   630  0F13                     	;# 
   631  0F14                     	;# 
   632  0F15                     	;# 
   633  0F16                     	;# 
   634  0F17                     	;# 
   635  0F18                     	;# 
   636  0F19                     	;# 
   637  0F1A                     	;# 
   638  0F1B                     	;# 
   639  0F1C                     	;# 
   640  0F1D                     	;# 
   641  0F1E                     	;# 
   642  0F1F                     	;# 
   643  0FE3                     	;# 
   644  0FE4                     	;# 
   645  0FE5                     	;# 
   646  0FE6                     	;# 
   647  0FE7                     	;# 
   648  0FE8                     	;# 
   649  0FE9                     	;# 
   650  0FEA                     	;# 
   651  0FEB                     	;# 
   652  0FED                     	;# 
   653  0FEE                     	;# 
   654  0FEF                     	;# 
   655                           
   656                           	psect	idataCOMMON
   657  073B                     __pidataCOMMON:	
   658                           
   659                           ;initializer for _mode
   660  073B  340A               	retlw	10
   661                           
   662                           	psect	idataBANK0
   663  073C                     __pidataBANK0:	
   664                           
   665                           ;initializer for _nextMode
   666  073C  340A               	retlw	10
   667  07E0                     _NVMEM_absaddr	set	2016
   668                           
   669                           	psect	stringtext1
   670  072C                     __pstringtext1:	
   671  072C                     _n_ADDRESS_P0:	
   672  072C  34AD               	retlw	173
   673  072D  3487               	retlw	135
   674  072E  3466               	retlw	102
   675  072F  34BC               	retlw	188
   676  0730  34BB               	retlw	187
   677  0731                     __end_of_n_ADDRESS_P0:	
   678                           
   679                           	psect	stringtext2
   680  073D                     __pstringtext2:	
   681  073D                     _n_ADDRESS_MUL:	
   682  073D  3421               	retlw	33
   683  073E                     __end_of_n_ADDRESS_MUL:	
   684  07E0                     _NVMEM_absaddr	set	2016
   685                           
   686                           	psect	_NVMEM_text
   687  07E0                     __p_NVMEM_text:	
   688  07E0                     _NVMEM:	
   689  07E0  3455               	retlw	85
   690  07E1  346E               	retlw	110
   691  07E2  3463               	retlw	99
   692  07E3  346F               	retlw	111
   693  07E4  346E               	retlw	110
   694  07E5  3466               	retlw	102
   695  07E6  3469               	retlw	105
   696  07E7  3467               	retlw	103
   697  07E8  3475               	retlw	117
   698  07E9  3472               	retlw	114
   699  07EA  3465               	retlw	101
   700  07EB  3464               	retlw	100
   701  07EC  3431               	retlw	49
   702  07ED  3400               	retlw	0
   703  07EE  3400               	retlw	0
   704  07EF  3400               	retlw	0
   705  07F0  3400               	retlw	0
   706  07F1  3400               	retlw	0
   707  07F2  3400               	retlw	0
   708  07F3  3400               	retlw	0
   709  07F4  3400               	retlw	0
   710  07F5  3400               	retlw	0
   711  07F6  3400               	retlw	0
   712  07F7  3400               	retlw	0
   713  07F8  3400               	retlw	0
   714  07F9  3400               	retlw	0
   715  07FA  3400               	retlw	0
   716  07FB  3400               	retlw	0
   717  07FC  3400               	retlw	0
   718  07FD  3400               	retlw	0
   719  07FE  3400               	retlw	0
   720  07FF  3400               	retlw	0
   721  0800                     __end_of_NVMEM:	
   722  000C                     _PORTAbits	set	12
   723  0003                     _STATUSbits	set	3
   724  000B                     _INTCONbits	set	11
   725  0011                     _PIR1bits	set	17
   726  0097                     _WDTCONbits	set	151
   727  0091                     _PIE1bits	set	145
   728  009E                     _ADCON1bits	set	158
   729  008E                     _TRISCbits	set	142
   730  008C                     _TRISAbits	set	140
   731  0095                     _OPTION_REGbits	set	149
   732  0099                     _OSCCONbits	set	153
   733  009D                     _ADCON0bits	set	157
   734  009C                     _ADRESH	set	156
   735  009B                     _ADRESL	set	155
   736  0117                     _FVRCONbits	set	279
   737  0194                     _PMDATH	set	404
   738  0193                     _PMDATL	set	403
   739  0196                     _PMCON2	set	406
   740  0195                     _PMCON1bits	set	405
   741  0192                     _PMADRH	set	402
   742  0191                     _PMADRL	set	401
   743  0195                     _PMCON1	set	405
   744  018E                     _ANSELC	set	398
   745  018C                     _ANSELA	set	396
   746  018E                     _ANSELCbits	set	398
   747  018C                     _ANSELAbits	set	396
   748  0215                     _SSPCON1bits	set	533
   749  0214                     _SSP1STATbits	set	532
   750  0211                     _SSP1BUF	set	529
   751  020C                     _WPUAbits	set	524
   752                           
   753                           	psect	stringtext3
   754  0711                     __pstringtext3:	
   755  0711                     STR_1:	
   756  0711  342F               	retlw	47	;'/'
   757  0712  3442               	retlw	66	;'B'
   758  0713  344F               	retlw	79	;'O'
   759  0714  344F               	retlw	79	;'O'
   760  0715  3454               	retlw	84	;'T'
   761  0716  342F               	retlw	47	;'/'
   762  0717  3400               	retlw	0
   763                           
   764                           	psect	stringtext4
   765  0731                     __pstringtext4:	
   766  0731                     STR_2:	
   767  0731  342F               	retlw	47	;'/'
   768  0732  3441               	retlw	65	;'A'
   769  0733  3444               	retlw	68	;'D'
   770  0734  3443               	retlw	67	;'C'
   771  0735  3400               	retlw	0
   772                           
   773                           	psect	stringtext5
   774  0000                     __pstringtext5:	
   775  0716                     
   776                           ; #config settings
   777  0000                     
   778                           	psect	cinit
   779  004D                     start_initialization:	
   780  004D                     __initialization:	
   781                           
   782                           ; Initialize objects allocated to COMMON
   783  004D  273B               	fcall	__pidataCOMMON	;fetch initializer
   784  004E  00FD               	movwf	__pdataCOMMON& (0+127)
   785                           
   786                           ; Initialize objects allocated to BANK0
   787  004F  273C               	fcall	__pidataBANK0	;fetch initializer
   788  0050  00E2               	movwf	__pdataBANK0& (0+127)
   789                           
   790                           ; Clear objects allocated to COMMON
   791  0051  01FC               	clrf	__pbssCOMMON& (0+127)
   792                           
   793                           ; Clear objects allocated to BANK0
   794  0052  3053               	movlw	low __pbssBANK0
   795  0053  0084               	movwf	4
   796  0054  3000               	movlw	high __pbssBANK0
   797  0055  0085               	movwf	5
   798  0056  300F               	movlw	15
   799  0057  2726               	fcall	clear_ram0
   800  0058                     end_of_initialization:	
   801                           ;End of C runtime variable initialization code
   802                           
   803  0058                     __end_of__initialization:	
   804  0058  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   805  0059  0020               	movlb	0
   806  005A  2C42               	ljmp	_main	;jump to C main() function
   807                           
   808                           	psect	bssCOMMON
   809  007C                     __pbssCOMMON:	
   810  007C                     _status:	
   811  007C                     	ds	1
   812                           
   813                           	psect	dataCOMMON
   814  007D                     __pdataCOMMON:	
   815  007D                     _mode:	
   816  007D                     	ds	1
   817                           
   818                           	psect	bssBANK0
   819  0053                     __pbssBANK0:	
   820  0053                     _adcSum:	
   821  0053                     	ds	4
   822  0057                     _sleepLoop:	
   823  0057                     	ds	1
   824  0058                     _adcLoop:	
   825  0058                     	ds	1
   826  0059                     _buffer:	
   827  0059                     	ds	6
   828  005F                     _byte:	
   829  005F                     	ds	3
   830                           
   831                           	psect	dataBANK0
   832  0062                     __pdataBANK0:	
   833  0062                     _nextMode:	
   834  0062                     	ds	1
   835                           
   836                           	psect	clrtext
   837  0726                     clear_ram0:	
   838                           ;	Called with FSR0 containing the base address, and
   839                           ;	WREG with the size to clear
   840                           
   841  0726  0064               	clrwdt	;clear the watchdog before getting into this loop
   842  0727                     clrloop0:	
   843  0727  0180               	clrf	0	;clear RAM location pointed to by FSR
   844  0728  3101               	addfsr 0,1
   845  0729  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   846  072A  2F27               	goto	clrloop0	;have we reached the end yet?
   847  072B  3400               	retlw	0	;all done for this memory range, return
   848                           
   849                           	psect	cstackCOMMON
   850  0070                     __pcstackCOMMON:	
   851  0070                     ?_nrf24l01ISR:	
   852  0070                     ?_nrf24l01SendStart:	
   853                           ; 1 bytes @ 0x0
   854                           
   855  0070                     ?_nrf24l01SendFlash:	
   856                           ; 1 bytes @ 0x0
   857                           
   858  0070                     ?_nrf24l01SendEnd:	
   859                           ; 1 bytes @ 0x0
   860                           
   861  0070                     ?_nrf24l01Init:	
   862                           ; 1 bytes @ 0x0
   863                           
   864  0070                     ?_ISR:	
   865                           ; 1 bytes @ 0x0
   866                           
   867  0070                     ?_startADC:	
   868                           ; 1 bytes @ 0x0
   869                           
   870  0070                     ?_loop:	
   871                           ; 1 bytes @ 0x0
   872                           
   873  0070                     ?_main:	
   874                           ; 1 bytes @ 0x0
   875                           
   876  0070                     ?_nrf24l01SPIStart:	
   877                           ; 1 bytes @ 0x0
   878                           
   879  0070                     ??_nrf24l01SPIStart:	
   880                           ; 1 bytes @ 0x0
   881                           
   882  0070                     ?_nrf24l01SPISend:	
   883                           ; 1 bytes @ 0x0
   884                           
   885  0070                     ??_nrf24l01SPISend:	
   886                           ; 1 bytes @ 0x0
   887                           
   888  0070                     ?_nrf24l01SPIEnd:	
   889                           ; 1 bytes @ 0x0
   890                           
   891  0070                     ??_nrf24l01SPIEnd:	
   892                           ; 1 bytes @ 0x0
   893                           
   894  0070                     ?_nrf24l01SetTransmitMode:	
   895                           ; 1 bytes @ 0x0
   896                           
   897  0070                     ?_nrf24l01InitRegisters:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0070                     nrf24l01SPISend@data:	
   901                           ; 1 bytes @ 0x0
   902                           
   903                           
   904                           ; 1 bytes @ 0x0
   905  0070                     	ds	1
   906  0071                     ?_nrf24l01Send:	
   907  0071                     nrf24l01Send@data:	
   908                           ; 1 bytes @ 0x1
   909                           
   910                           
   911                           ; 1 bytes @ 0x1
   912  0071                     	ds	1
   913  0072                     ??_nrf24l01Send:	
   914                           
   915                           ; 1 bytes @ 0x2
   916  0072                     	ds	1
   917  0073                     nrf24l01Send@command:	
   918                           
   919                           ; 1 bytes @ 0x3
   920  0073                     	ds	1
   921  0074                     ??_nrf24l01ISR:	
   922                           
   923                           ; 1 bytes @ 0x4
   924  0074                     	ds	1
   925  0075                     ??_ISR:	
   926                           
   927                           ; 1 bytes @ 0x5
   928  0075                     	ds	5
   929  007A                     ISR@result:	
   930                           
   931                           ; 2 bytes @ 0xA
   932  007A                     	ds	2
   933                           
   934                           	psect	cstackBANK0
   935  0020                     __pcstackBANK0:	
   936  0020                     ?_nrf24l01SendString:	
   937  0020                     ??_nrf24l01SendEnd:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0020                     ?_write_flashmem:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0020                     ??_startADC:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0020                     ??_nrf24l01SetTransmitMode:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0020                     ??_nrf24l01InitRegisters:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0020                     ?_read_flashmem:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0020                     ?___lwdiv:	
   956                           ; 2 bytes @ 0x0
   957                           
   958  0020                     ?___lwmod:	
   959                           ; 2 bytes @ 0x0
   960                           
   961  0020                     ?___ftpack:	
   962                           ; 2 bytes @ 0x0
   963                           
   964  0020                     ?___aldiv:	
   965                           ; 3 bytes @ 0x0
   966                           
   967  0020                     nrf24l01SendString@string:	
   968                           ; 4 bytes @ 0x0
   969                           
   970  0020                     write_flashmem@offset:	
   971                           ; 2 bytes @ 0x0
   972                           
   973  0020                     read_flashmem@offset:	
   974                           ; 2 bytes @ 0x0
   975                           
   976  0020                     ___lwdiv@divisor:	
   977                           ; 2 bytes @ 0x0
   978                           
   979  0020                     ___lwmod@divisor:	
   980                           ; 2 bytes @ 0x0
   981                           
   982  0020                     ___ftpack@arg:	
   983                           ; 2 bytes @ 0x0
   984                           
   985  0020                     ___aldiv@divisor:	
   986                           ; 3 bytes @ 0x0
   987                           
   988                           
   989                           ; 4 bytes @ 0x0
   990  0020                     	ds	1
   991  0021                     startADC@channel:	
   992  0021                     nrf24l01SetTransmitMode@config:	
   993                           ; 1 bytes @ 0x1
   994                           
   995  0021                     nrf24l01InitRegisters@setupAW:	
   996                           ; 1 bytes @ 0x1
   997                           
   998                           
   999                           ; 1 bytes @ 0x1
  1000  0021                     	ds	1
  1001  0022                     ??_read_flashmem:	
  1002  0022                     ??_nrf24l01SendStart:	
  1003                           ; 1 bytes @ 0x2
  1004                           
  1005  0022                     ??_nrf24l01SendString:	
  1006                           ; 1 bytes @ 0x2
  1007                           
  1008  0022                     nrf24l01InitRegisters@setupRetries:	
  1009                           ; 1 bytes @ 0x2
  1010                           
  1011  0022                     write_flashmem@data:	
  1012                           ; 1 bytes @ 0x2
  1013                           
  1014  0022                     ___lwdiv@dividend:	
  1015                           ; 2 bytes @ 0x2
  1016                           
  1017  0022                     ___lwmod@dividend:	
  1018                           ; 2 bytes @ 0x2
  1019                           
  1020                           
  1021                           ; 2 bytes @ 0x2
  1022  0022                     	ds	1
  1023  0023                     nrf24l01InitRegisters@feature:	
  1024  0023                     ___ftpack@exp:	
  1025                           ; 1 bytes @ 0x3
  1026                           
  1027                           
  1028                           ; 1 bytes @ 0x3
  1029  0023                     	ds	1
  1030  0024                     ??_write_flashmem:	
  1031  0024                     ??___lwdiv:	
  1032                           ; 1 bytes @ 0x4
  1033                           
  1034  0024                     ??___lwmod:	
  1035                           ; 1 bytes @ 0x4
  1036                           
  1037  0024                     nrf24l01InitRegisters@rfSetup:	
  1038                           ; 1 bytes @ 0x4
  1039                           
  1040  0024                     ___ftpack@sign:	
  1041                           ; 1 bytes @ 0x4
  1042                           
  1043  0024                     write_flashmem@address:	
  1044                           ; 1 bytes @ 0x4
  1045                           
  1046  0024                     ___aldiv@dividend:	
  1047                           ; 2 bytes @ 0x4
  1048                           
  1049                           
  1050                           ; 4 bytes @ 0x4
  1051  0024                     	ds	1
  1052  0025                     ??___ftpack:	
  1053  0025                     nrf24l01SendString@i:	
  1054                           ; 1 bytes @ 0x5
  1055                           
  1056  0025                     nrf24l01InitRegisters@config:	
  1057                           ; 1 bytes @ 0x5
  1058                           
  1059  0025                     ___lwmod@counter:	
  1060                           ; 1 bytes @ 0x5
  1061                           
  1062  0025                     read_flashmem@result:	
  1063                           ; 1 bytes @ 0x5
  1064                           
  1065  0025                     ___lwdiv@quotient:	
  1066                           ; 2 bytes @ 0x5
  1067                           
  1068                           
  1069                           ; 2 bytes @ 0x5
  1070  0025                     	ds	1
  1071  0026                     nrf24l01InitRegisters@enRXAddr:	
  1072                           
  1073                           ; 1 bytes @ 0x6
  1074  0026                     	ds	1
  1075  0027                     nrf24l01InitRegisters@DynPD:	
  1076  0027                     ___lwdiv@counter:	
  1077                           ; 1 bytes @ 0x7
  1078                           
  1079  0027                     read_flashmem@address:	
  1080                           ; 1 bytes @ 0x7
  1081                           
  1082                           
  1083                           ; 2 bytes @ 0x7
  1084  0027                     	ds	1
  1085  0028                     ??_nrf24l01Init:	
  1086  0028                     ?_utoa:	
  1087                           ; 1 bytes @ 0x8
  1088                           
  1089  0028                     ??___aldiv:	
  1090                           ; 1 bytes @ 0x8
  1091                           
  1092  0028                     ?___altoft:	
  1093                           ; 1 bytes @ 0x8
  1094                           
  1095  0028                     utoa@val:	
  1096                           ; 3 bytes @ 0x8
  1097                           
  1098  0028                     ___altoft@c:	
  1099                           ; 2 bytes @ 0x8
  1100                           
  1101                           
  1102                           ; 4 bytes @ 0x8
  1103  0028                     	ds	1
  1104  0029                     ??_nrf24l01SendFlash:	
  1105  0029                     ___aldiv@counter:	
  1106                           ; 1 bytes @ 0x9
  1107                           
  1108                           
  1109                           ; 1 bytes @ 0x9
  1110  0029                     	ds	1
  1111  002A                     nrf24l01SendFlash@offset:	
  1112  002A                     ___aldiv@sign:	
  1113                           ; 1 bytes @ 0xA
  1114                           
  1115  002A                     utoa@base:	
  1116                           ; 1 bytes @ 0xA
  1117                           
  1118                           
  1119                           ; 2 bytes @ 0xA
  1120  002A                     	ds	1
  1121  002B                     nrf24l01SendFlash@i:	
  1122  002B                     ___aldiv@quotient:	
  1123                           ; 1 bytes @ 0xB
  1124                           
  1125                           
  1126                           ; 4 bytes @ 0xB
  1127  002B                     	ds	1
  1128  002C                     ??_utoa:	
  1129  002C                     ??___altoft:	
  1130                           ; 1 bytes @ 0xC
  1131                           
  1132  002C                     nrf24l01SendFlash@btye:	
  1133                           ; 1 bytes @ 0xC
  1134                           
  1135                           
  1136                           ; 1 bytes @ 0xC
  1137  002C                     	ds	1
  1138  002D                     utoa@v:	
  1139                           
  1140                           ; 2 bytes @ 0xD
  1141  002D                     	ds	1
  1142  002E                     ___altoft@exp:	
  1143                           
  1144                           ; 1 bytes @ 0xE
  1145  002E                     	ds	1
  1146  002F                     ___altoft@sign:	
  1147  002F                     utoa@c:	
  1148                           ; 1 bytes @ 0xF
  1149                           
  1150                           
  1151                           ; 1 bytes @ 0xF
  1152  002F                     	ds	1
  1153  0030                     ?___ftdiv:	
  1154  0030                     utoa@buf:	
  1155                           ; 3 bytes @ 0x10
  1156                           
  1157  0030                     ___ftdiv@f2:	
  1158                           ; 1 bytes @ 0x10
  1159                           
  1160                           
  1161                           ; 3 bytes @ 0x10
  1162  0030                     	ds	1
  1163  0031                     ?_itoa:	
  1164  0031                     itoa@val:	
  1165                           ; 1 bytes @ 0x11
  1166                           
  1167                           
  1168                           ; 2 bytes @ 0x11
  1169  0031                     	ds	2
  1170  0033                     itoa@base:	
  1171  0033                     ___ftdiv@f1:	
  1172                           ; 2 bytes @ 0x13
  1173                           
  1174                           
  1175                           ; 3 bytes @ 0x13
  1176  0033                     	ds	2
  1177  0035                     ??_itoa:	
  1178                           
  1179                           ; 1 bytes @ 0x15
  1180  0035                     	ds	1
  1181  0036                     ??___ftdiv:	
  1182  0036                     itoa@cp:	
  1183                           ; 1 bytes @ 0x16
  1184                           
  1185                           
  1186                           ; 1 bytes @ 0x16
  1187  0036                     	ds	1
  1188  0037                     itoa@buf:	
  1189                           
  1190                           ; 1 bytes @ 0x17
  1191  0037                     	ds	3
  1192  003A                     ___ftdiv@cntr:	
  1193                           
  1194                           ; 1 bytes @ 0x1A
  1195  003A                     	ds	1
  1196  003B                     ___ftdiv@f3:	
  1197                           
  1198                           ; 3 bytes @ 0x1B
  1199  003B                     	ds	3
  1200  003E                     ___ftdiv@exp:	
  1201                           
  1202                           ; 1 bytes @ 0x1E
  1203  003E                     	ds	1
  1204  003F                     ___ftdiv@sign:	
  1205                           
  1206                           ; 1 bytes @ 0x1F
  1207  003F                     	ds	1
  1208  0040                     ?___fttol:	
  1209  0040                     ___fttol@f1:	
  1210                           ; 4 bytes @ 0x20
  1211                           
  1212                           
  1213                           ; 3 bytes @ 0x20
  1214  0040                     	ds	4
  1215  0044                     ??___fttol:	
  1216                           
  1217                           ; 1 bytes @ 0x24
  1218  0044                     	ds	4
  1219  0048                     ___fttol@sign1:	
  1220                           
  1221                           ; 1 bytes @ 0x28
  1222  0048                     	ds	1
  1223  0049                     ___fttol@lval:	
  1224                           
  1225                           ; 4 bytes @ 0x29
  1226  0049                     	ds	4
  1227  004D                     ___fttol@exp1:	
  1228                           
  1229                           ; 1 bytes @ 0x2D
  1230  004D                     	ds	1
  1231  004E                     ??_loop:	
  1232                           
  1233                           ; 1 bytes @ 0x2E
  1234  004E                     	ds	2
  1235  0050                     ??_main:	
  1236                           
  1237                           ; 1 bytes @ 0x30
  1238  0050                     	ds	1
  1239  0051                     main@bootCount:	
  1240                           
  1241                           ; 2 bytes @ 0x31
  1242  0051                     	ds	2
  1243                           
  1244                           	psect	maintext
  1245  0442                     __pmaintext:	
  1246 ;;
  1247 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1248 ;;
  1249 ;; *************** function _main *****************
  1250 ;; Defined at:
  1251 ;;		line 190 in file "main.c"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;		None
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;  bootCount       2   49[BANK0 ] unsigned int 
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1260 ;; Tracked objects:
  1261 ;;		On entry : B1F/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMMON   BANK0   BANK1
  1265 ;;      Params:         0       0       0
  1266 ;;      Locals:         0       2       0
  1267 ;;      Temps:          0       1       0
  1268 ;;      Totals:         0       3       0
  1269 ;;Total ram usage:        3 bytes
  1270 ;; Hardware stack levels required when called:    9
  1271 ;; This function calls:
  1272 ;;		_loop
  1273 ;;		_nrf24l01Init
  1274 ;;		_read_flashmem
  1275 ;;		_write_flashmem
  1276 ;; This function is called by:
  1277 ;;		Startup code after reset
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281                           
  1282                           ;psect for function _main
  1283  0442                     _main:	
  1284                           
  1285                           ;main.c: 196: INTCONbits.PEIE = 0;
  1286                           
  1287                           ;incstack = 0
  1288                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1289  0442  130B               	bcf	11,6	;volatile
  1290                           
  1291                           ;main.c: 197: INTCONbits.GIE = 0;
  1292  0443  138B               	bcf	11,7	;volatile
  1293                           
  1294                           ;main.c: 199: OSCCONbits.IRCF = 0b1111;
  1295  0444  3078               	movlw	120
  1296  0445  0021               	movlb	1	; select bank1
  1297  0446  0499               	iorwf	25,f	;volatile
  1298                           
  1299                           ;main.c: 200: OSCCONbits.SCS = 0b10;
  1300  0447  0819               	movf	25,w	;volatile
  1301  0448  39FC               	andlw	-4
  1302  0449  3802               	iorlw	2
  1303  044A  0099               	movwf	25	;volatile
  1304                           
  1305                           ;main.c: 202: _delay((unsigned long)((10)*(16000000/4000.0)));
  1306  044B  3034               	movlw	52
  1307  044C  0020               	movlb	0	; select bank0
  1308  044D  00D0               	movwf	??_main
  1309  044E  30F1               	movlw	241
  1310  044F                     u1577:	
  1311  044F  0B89               	decfsz	9,f
  1312  0450  2C4F               	goto	u1577
  1313  0451  0BD0               	decfsz	??_main,f
  1314  0452  2C4F               	goto	u1577
  1315  0453  3200               	nop2
  1316                           
  1317                           ;main.c: 204: nrf24l01Init();
  1318  0454  263B               	fcall	_nrf24l01Init
  1319                           
  1320                           ;main.c: 206: OPTION_REGbits.nWPUEN = 0;
  1321  0455  0021               	movlb	1	; select bank1
  1322  0456  1395               	bcf	21,7	;volatile
  1323                           
  1324                           ;main.c: 209: FVRCONbits.FVREN = 0;
  1325  0457  0022               	movlb	2	; select bank2
  1326  0458  1397               	bcf	23,7	;volatile
  1327                           
  1328                           ;main.c: 210: FVRCONbits.ADFVR = 1;
  1329  0459  0817               	movf	23,w	;volatile
  1330  045A  39FC               	andlw	-4
  1331  045B  3801               	iorlw	1
  1332  045C  0097               	movwf	23	;volatile
  1333                           
  1334                           ;main.c: 211: FVRCONbits.FVREN = 1;
  1335  045D  1797               	bsf	23,7	;volatile
  1336                           
  1337                           ;main.c: 214: FVRCONbits.TSEN = 0;
  1338  045E  1297               	bcf	23,5	;volatile
  1339                           
  1340                           ;main.c: 215: FVRCONbits.TSRNG = 0;
  1341  045F  1217               	bcf	23,4	;volatile
  1342                           
  1343                           ;main.c: 216: FVRCONbits.TSEN = 1;
  1344  0460  1697               	bsf	23,5	;volatile
  1345                           
  1346                           ;main.c: 219: ADCON0bits.ADON = 0;
  1347  0461  0021               	movlb	1	; select bank1
  1348  0462  101D               	bcf	29,0	;volatile
  1349                           
  1350                           ;main.c: 221: ANSELAbits.ANSA4 = 1;
  1351  0463  0023               	movlb	3	; select bank3
  1352  0464  160C               	bsf	12,4	;volatile
  1353                           
  1354                           ;main.c: 222: TRISAbits.TRISA4 = 1;
  1355  0465  0021               	movlb	1	; select bank1
  1356  0466  160C               	bsf	12,4	;volatile
  1357                           
  1358                           ;main.c: 223: WPUAbits.WPUA4 = 0;
  1359  0467  0024               	movlb	4	; select bank4
  1360  0468  120C               	bcf	12,4	;volatile
  1361                           
  1362                           ;main.c: 225: ANSELCbits.ANSC3 = 1;
  1363  0469  0023               	movlb	3	; select bank3
  1364  046A  158E               	bsf	14,3	;volatile
  1365                           
  1366                           ;main.c: 226: TRISCbits.TRISC3 = 1;
  1367  046B  0021               	movlb	1	; select bank1
  1368  046C  158E               	bsf	14,3	;volatile
  1369                           
  1370                           ;main.c: 228: ADCON1bits.ADCS = 0b111;
  1371  046D  3070               	movlw	112
  1372  046E  049E               	iorwf	30,f	;volatile
  1373                           
  1374                           ;main.c: 229: ADCON1bits.ADFM = 1;
  1375  046F  179E               	bsf	30,7	;volatile
  1376                           
  1377                           ;main.c: 230: ADCON1bits.ADPREF = 0b00;
  1378  0470  30FC               	movlw	-4
  1379  0471  059E               	andwf	30,f	;volatile
  1380                           
  1381                           ;main.c: 232: PIE1bits.ADIE = 1;
  1382  0472  1711               	bsf	17,6	;volatile
  1383                           
  1384                           ;main.c: 234: ADCON0bits.CHS = 3;
  1385  0473  081D               	movf	29,w	;volatile
  1386  0474  3983               	andlw	-125
  1387  0475  380C               	iorlw	12
  1388  0476  009D               	movwf	29	;volatile
  1389                           
  1390                           ;main.c: 235: ADCON0bits.ADON = 1;
  1391  0477  141D               	bsf	29,0	;volatile
  1392                           
  1393                           ;main.c: 239: TRISAbits.TRISA2 = 1;
  1394  0478  150C               	bsf	12,2	;volatile
  1395                           
  1396                           ;main.c: 240: INTCONbits.INTE = 1;
  1397  0479  160B               	bsf	11,4	;volatile
  1398                           
  1399                           ;main.c: 241: OPTION_REGbits.INTEDG = 0;
  1400  047A  1315               	bcf	21,6	;volatile
  1401                           
  1402                           ;main.c: 245: WDTCONbits.WDTPS = 7;
  1403  047B  0817               	movf	23,w	;volatile
  1404  047C  39C1               	andlw	-63
  1405  047D  380E               	iorlw	14
  1406  047E  0097               	movwf	23	;volatile
  1407                           
  1408                           ;main.c: 249: INTCONbits.PEIE = 1;
  1409  047F  170B               	bsf	11,6	;volatile
  1410                           
  1411                           ;main.c: 250: INTCONbits.GIE = 1;
  1412  0480  178B               	bsf	11,7	;volatile
  1413                           
  1414                           ;main.c: 252: unsigned int bootCount = read_flashmem(16);
  1415  0481  3010               	movlw	16
  1416  0482  0020               	movlb	0	; select bank0
  1417  0483  00A0               	movwf	read_flashmem@offset
  1418  0484  3000               	movlw	0
  1419  0485  00A1               	movwf	read_flashmem@offset+1
  1420  0486  25AE               	fcall	_read_flashmem
  1421  0487  0020               	movlb	0	; select bank0
  1422  0488  0821               	movf	?_read_flashmem+1,w
  1423  0489  00D2               	movwf	main@bootCount+1
  1424  048A  0820               	movf	?_read_flashmem,w
  1425  048B  00D1               	movwf	main@bootCount
  1426                           
  1427                           ;main.c: 253: if (bootCount == 13313){
  1428  048C  0351               	decf	main@bootCount,w
  1429  048D  3034               	movlw	52
  1430  048E  1903               	skipnz
  1431  048F  0652               	xorwf	main@bootCount+1,w
  1432  0490  1D03               	btfss	3,2
  1433  0491  2C96               	goto	l118
  1434                           
  1435                           ;main.c: 254: bootCount = 1;
  1436  0492  3001               	movlw	1
  1437  0493  00D1               	movwf	main@bootCount
  1438  0494  3000               	movlw	0
  1439  0495  00D2               	movwf	main@bootCount+1
  1440  0496                     l118:	
  1441                           
  1442                           ;main.c: 255: }
  1443                           ;main.c: 256: bootCount++;
  1444  0496  3001               	movlw	1
  1445  0497  07D1               	addwf	main@bootCount,f
  1446  0498  3000               	movlw	0
  1447  0499  3DD2               	addwfc	main@bootCount+1,f
  1448                           
  1449                           ;main.c: 257: write_flashmem(16, bootCount);
  1450  049A  3010               	movlw	16
  1451  049B  00A0               	movwf	write_flashmem@offset
  1452  049C  3000               	movlw	0
  1453  049D  00A1               	movwf	write_flashmem@offset+1
  1454  049E  0852               	movf	main@bootCount+1,w
  1455  049F  00A3               	movwf	write_flashmem@data+1
  1456  04A0  0851               	movf	main@bootCount,w
  1457  04A1  00A2               	movwf	write_flashmem@data
  1458  04A2  2501               	fcall	_write_flashmem
  1459  04A3                     l2123:	
  1460                           ;main.c: 259: while(1){
  1461                           
  1462                           
  1463                           ;main.c: 260: loop();
  1464  04A3  205B               	fcall	_loop
  1465  04A4  2CA3               	goto	l2123
  1466  04A5                     __end_of_main:	
  1467                           ;main.c: 261: }
  1468                           ;main.c: 263: return;
  1469                           
  1470                           
  1471                           	psect	text1
  1472  0501                     __ptext1:	
  1473 ;; *************** function _write_flashmem *****************
  1474 ;; Defined at:
  1475 ;;		line 5 in file "flash.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;  offset          2    0[BANK0 ] unsigned int 
  1478 ;;  data            2    2[BANK0 ] unsigned int 
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;  address         2    4[BANK0 ] unsigned int 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      void 
  1483 ;; Registers used:
  1484 ;;		wreg, status,2, status,0
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMMON   BANK0   BANK1
  1490 ;;      Params:         0       4       0
  1491 ;;      Locals:         0       2       0
  1492 ;;      Temps:          0       0       0
  1493 ;;      Totals:         0       6       0
  1494 ;;Total ram usage:        6 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    4
  1497 ;; This function calls:
  1498 ;;		Nothing
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           
  1505                           ;psect for function _write_flashmem
  1506  0501                     _write_flashmem:	
  1507                           
  1508                           ;flash.c: 7: unsigned int address;
  1509                           ;flash.c: 9: INTCONbits.GIE = 0;
  1510                           
  1511                           ;incstack = 0
  1512                           ; Regs used in _write_flashmem: [wreg+status,2+status,0]
  1513  0501  138B               	bcf	11,7	;volatile
  1514                           
  1515                           ;flash.c: 12: PMCON1 = 0x00;
  1516  0502  0023               	movlb	3	; select bank3
  1517  0503  0195               	clrf	21	;volatile
  1518                           
  1519                           ;flash.c: 14: address = (0x800U-32) + offset;
  1520  0504  0020               	movlb	0	; select bank0
  1521  0505  0820               	movf	write_flashmem@offset,w
  1522  0506  3EE0               	addlw	224
  1523  0507  00A4               	movwf	write_flashmem@address
  1524  0508  3007               	movlw	7
  1525  0509  3D21               	addwfc	write_flashmem@offset+1,w
  1526  050A  00A5               	movwf	write_flashmem@address+1
  1527                           
  1528                           ;flash.c: 15: PMADRL = (char) (address >> 0);
  1529  050B  0824               	movf	write_flashmem@address,w
  1530  050C  0023               	movlb	3	; select bank3
  1531  050D  0091               	movwf	17	;volatile
  1532                           
  1533                           ;flash.c: 16: PMADRH = (char) (address >> 8);
  1534  050E  0020               	movlb	0	; select bank0
  1535  050F  0825               	movf	write_flashmem@address+1,w
  1536  0510  0023               	movlb	3	; select bank3
  1537  0511  0092               	movwf	18	;volatile
  1538                           
  1539                           ;flash.c: 18: PMCON1bits.FREE = 1;
  1540  0512  1615               	bsf	21,4	;volatile
  1541                           
  1542                           ;flash.c: 19: PMCON1bits.WREN = 1;
  1543  0513  1515               	bsf	21,2	;volatile
  1544                           
  1545                           ;flash.c: 21: PMCON2 = 0x55;
  1546  0514  3055               	movlw	85
  1547  0515  0096               	movwf	22	;volsfr
  1548                           
  1549                           ;flash.c: 22: PMCON2 = 0xAA;
  1550  0516  30AA               	movlw	170
  1551  0517  0096               	movwf	22	;volsfr
  1552                           
  1553                           ;flash.c: 24: PMCON1bits.WR = 1;
  1554  0518  1495               	bsf	21,1	;volatile
  1555                           
  1556                           ;flash.c: 26: __nop();
  1557  0519  0000               	nop
  1558                           
  1559                           ;flash.c: 27: __nop();
  1560  051A  0000               	nop
  1561                           
  1562                           ;flash.c: 29: PMCON1bits.WREN = 0;
  1563  051B  0023               	movlb	3	; select bank3
  1564  051C  1115               	bcf	21,2	;volatile
  1565                           
  1566                           ;flash.c: 33: PMCON1 = 0x00;
  1567  051D  0195               	clrf	21	;volatile
  1568                           
  1569                           ;flash.c: 35: PMADRL = (char) (address >> 0);
  1570  051E  0020               	movlb	0	; select bank0
  1571  051F  0824               	movf	write_flashmem@address,w
  1572  0520  0023               	movlb	3	; select bank3
  1573  0521  0091               	movwf	17	;volatile
  1574                           
  1575                           ;flash.c: 36: PMADRH = (char) (address >> 8);
  1576  0522  0020               	movlb	0	; select bank0
  1577  0523  0825               	movf	write_flashmem@address+1,w
  1578  0524  0023               	movlb	3	; select bank3
  1579  0525  0092               	movwf	18	;volatile
  1580                           
  1581                           ;flash.c: 38: PMCON1bits.FREE = 0;
  1582  0526  1215               	bcf	21,4	;volatile
  1583                           
  1584                           ;flash.c: 39: PMCON1bits.LWLO = 1;
  1585  0527  1695               	bsf	21,5	;volatile
  1586                           
  1587                           ;flash.c: 40: PMCON1bits.WREN = 1;
  1588  0528  1515               	bsf	21,2	;volatile
  1589                           
  1590                           ;flash.c: 42: PMDATL = (data >> 0);
  1591  0529  0020               	movlb	0	; select bank0
  1592  052A  0822               	movf	write_flashmem@data,w
  1593  052B  0023               	movlb	3	; select bank3
  1594  052C  0093               	movwf	19	;volatile
  1595                           
  1596                           ;flash.c: 43: PMDATH = (data >> 8);
  1597  052D  0020               	movlb	0	; select bank0
  1598  052E  0823               	movf	write_flashmem@data+1,w
  1599  052F  0023               	movlb	3	; select bank3
  1600  0530  0094               	movwf	20	;volatile
  1601                           
  1602                           ;flash.c: 45: PMCON1bits.LWLO = 0;
  1603  0531  1295               	bcf	21,5	;volatile
  1604                           
  1605                           ;flash.c: 47: PMCON2 = 0x55;
  1606  0532  3055               	movlw	85
  1607  0533  0096               	movwf	22	;volsfr
  1608                           
  1609                           ;flash.c: 48: PMCON2 = 0xAA;
  1610  0534  30AA               	movlw	170
  1611  0535  0096               	movwf	22	;volsfr
  1612                           
  1613                           ;flash.c: 50: PMCON1bits.WR = 1;
  1614  0536  1495               	bsf	21,1	;volatile
  1615                           
  1616                           ;flash.c: 52: __nop();
  1617  0537  0000               	nop
  1618                           
  1619                           ;flash.c: 53: __nop();
  1620  0538  0000               	nop
  1621                           
  1622                           ;flash.c: 55: PMCON1bits.WREN = 0;
  1623  0539  0023               	movlb	3	; select bank3
  1624  053A  1115               	bcf	21,2	;volatile
  1625                           
  1626                           ;flash.c: 58: INTCONbits.GIE = 1;
  1627  053B  178B               	bsf	11,7	;volatile
  1628  053C  0008               	return
  1629  053D                     __end_of_write_flashmem:	
  1630                           
  1631                           	psect	text2
  1632  063B                     __ptext2:	
  1633 ;; *************** function _nrf24l01Init *****************
  1634 ;; Defined at:
  1635 ;;		line 233 in file "nrf24l01.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;		None
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;		None
  1640 ;; Return value:  Size  Location     Type
  1641 ;;                  1    wreg      void 
  1642 ;; Registers used:
  1643 ;;		wreg, status,2, status,0, pclath, cstack
  1644 ;; Tracked objects:
  1645 ;;		On entry : 0/0
  1646 ;;		On exit  : 0/0
  1647 ;;		Unchanged: 0/0
  1648 ;; Data sizes:     COMMON   BANK0   BANK1
  1649 ;;      Params:         0       0       0
  1650 ;;      Locals:         0       0       0
  1651 ;;      Temps:          0       1       0
  1652 ;;      Totals:         0       1       0
  1653 ;;Total ram usage:        1 bytes
  1654 ;; Hardware stack levels used:    1
  1655 ;; Hardware stack levels required when called:    7
  1656 ;; This function calls:
  1657 ;;		_nrf24l01InitRegisters
  1658 ;; This function is called by:
  1659 ;;		_main
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           
  1664                           ;psect for function _nrf24l01Init
  1665  063B                     _nrf24l01Init:	
  1666                           
  1667                           ;nrf24l01.c: 235: TRISAbits.TRISA0 = 0;
  1668                           
  1669                           ;incstack = 0
  1670                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1671  063B  0021               	movlb	1	; select bank1
  1672  063C  100C               	bcf	12,0	;volatile
  1673                           
  1674                           ;nrf24l01.c: 239: ANSELA = 0x00;
  1675  063D  0023               	movlb	3	; select bank3
  1676  063E  018C               	clrf	12	;volatile
  1677                           
  1678                           ;nrf24l01.c: 240: ANSELC = 0x00;
  1679  063F  018E               	clrf	14	;volatile
  1680                           
  1681                           ;nrf24l01.c: 242: TRISAbits.TRISA1 = 0;
  1682  0640  0021               	movlb	1	; select bank1
  1683  0641  108C               	bcf	12,1	;volatile
  1684                           
  1685                           ;nrf24l01.c: 244: TRISCbits.TRISC1 = 1;
  1686  0642  148E               	bsf	14,1	;volatile
  1687                           
  1688                           ;nrf24l01.c: 245: TRISCbits.TRISC2 = 0;
  1689  0643  110E               	bcf	14,2	;volatile
  1690                           
  1691                           ;nrf24l01.c: 246: TRISCbits.TRISC0 = 0;
  1692  0644  100E               	bcf	14,0	;volatile
  1693                           
  1694                           ;nrf24l01.c: 248: SSPCON1bits.SSPEN = 0;
  1695  0645  0024               	movlb	4	; select bank4
  1696  0646  1295               	bcf	21,5	;volatile
  1697                           
  1698                           ;nrf24l01.c: 249: SSPCON1bits.CKP = 0;
  1699  0647  1215               	bcf	21,4	;volatile
  1700                           
  1701                           ;nrf24l01.c: 250: SSP1STATbits.CKE = 1;
  1702  0648  1714               	bsf	20,6	;volatile
  1703                           
  1704                           ;nrf24l01.c: 251: SSPCON1bits.SSPM = 0b0000;
  1705  0649  30F0               	movlw	-16
  1706  064A  0595               	andwf	21,f	;volatile
  1707                           
  1708                           ;nrf24l01.c: 253: SSPCON1bits.SSPEN = 1;
  1709  064B  1695               	bsf	21,5	;volatile
  1710                           
  1711                           ;nrf24l01.c: 255: PORTAbits.RA0 = 0;
  1712  064C  0020               	movlb	0	; select bank0
  1713  064D  100C               	bcf	12,0	;volatile
  1714                           
  1715                           ;nrf24l01.c: 257: _delay((unsigned long)((11)*(16000000/4000.0)));
  1716  064E  303A               	movlw	58
  1717  064F  0020               	movlb	0	; select bank0
  1718  0650  00A8               	movwf	??_nrf24l01Init
  1719  0651  3023               	movlw	35
  1720  0652                     u1587:	
  1721  0652  0B89               	decfsz	9,f
  1722  0653  2E52               	goto	u1587
  1723  0654  0BA8               	decfsz	??_nrf24l01Init,f
  1724  0655  2E52               	goto	u1587
  1725                           
  1726                           ;nrf24l01.c: 259: nrf24l01InitRegisters();
  1727  0656  2366               	fcall	_nrf24l01InitRegisters
  1728                           
  1729                           ;nrf24l01.c: 261: _delay((unsigned long)((2)*(16000000/4000.0)));
  1730  0657  300B               	movlw	11
  1731  0658  0020               	movlb	0	; select bank0
  1732  0659  00A8               	movwf	??_nrf24l01Init
  1733  065A  3062               	movlw	98
  1734  065B                     u1597:	
  1735  065B  0B89               	decfsz	9,f
  1736  065C  2E5B               	goto	u1597
  1737  065D  0BA8               	decfsz	??_nrf24l01Init,f
  1738  065E  2E5B               	goto	u1597
  1739  065F  0000               	nop
  1740  0660  0008               	return
  1741  0661                     __end_of_nrf24l01Init:	
  1742                           
  1743                           	psect	text3
  1744  0366                     __ptext3:	
  1745 ;; *************** function _nrf24l01InitRegisters *****************
  1746 ;; Defined at:
  1747 ;;		line 146 in file "nrf24l01.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;  DynPD           1    7[BANK0 ] struct .
  1752 ;;  enRXAddr        1    6[BANK0 ] struct .
  1753 ;;  config          1    5[BANK0 ] struct .
  1754 ;;  rfSetup         1    4[BANK0 ] struct .
  1755 ;;  feature         1    3[BANK0 ] struct .
  1756 ;;  setupRetries    1    2[BANK0 ] struct .
  1757 ;;  setupAW         1    1[BANK0 ] struct .
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  1    wreg      void 
  1760 ;; Registers used:
  1761 ;;		wreg, status,2, status,0, pclath, cstack
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMMON   BANK0   BANK1
  1767 ;;      Params:         0       0       0
  1768 ;;      Locals:         0       7       0
  1769 ;;      Temps:          0       1       0
  1770 ;;      Totals:         0       8       0
  1771 ;;Total ram usage:        8 bytes
  1772 ;; Hardware stack levels used:    1
  1773 ;; Hardware stack levels required when called:    6
  1774 ;; This function calls:
  1775 ;;		_nrf24l01Send
  1776 ;; This function is called by:
  1777 ;;		_nrf24l01Init
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           
  1782                           ;psect for function _nrf24l01InitRegisters
  1783  0366                     _nrf24l01InitRegisters:	
  1784                           
  1785                           ;nrf24l01.c: 148: nrf24l01Send(0b00100000 | 0x00, 0x00);
  1786                           
  1787                           ;incstack = 0
  1788                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  1789  0366  01F1               	clrf	nrf24l01Send@data
  1790  0367  3020               	movlw	32
  1791  0368  26E9               	fcall	_nrf24l01Send
  1792                           
  1793                           ;nrf24l01.c: 150: _delay((unsigned long)((10)*(16000000/4000.0)));
  1794  0369  3034               	movlw	52
  1795  036A  0020               	movlb	0	; select bank0
  1796  036B  00A0               	movwf	??_nrf24l01InitRegisters
  1797  036C  30F1               	movlw	241
  1798  036D                     u1607:	
  1799  036D  0B89               	decfsz	9,f
  1800  036E  2B6D               	goto	u1607
  1801  036F  0BA0               	decfsz	??_nrf24l01InitRegisters,f
  1802  0370  2B6D               	goto	u1607
  1803  0371  3200               	nop2
  1804                           
  1805                           ;nrf24l01.c: 152: n_SETUP_AW_t setupAW;
  1806                           ;nrf24l01.c: 153: setupAW.byte = 0x00;
  1807  0372  0020               	movlb	0	; select bank0
  1808  0373  01A1               	clrf	nrf24l01InitRegisters@setupAW
  1809                           
  1810                           ;nrf24l01.c: 154: setupAW.AW = 3;
  1811  0374  3003               	movlw	3
  1812  0375  04A1               	iorwf	nrf24l01InitRegisters@setupAW,f
  1813                           
  1814                           ;nrf24l01.c: 155: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  1815  0376  0821               	movf	nrf24l01InitRegisters@setupAW,w
  1816  0377  00A0               	movwf	??_nrf24l01InitRegisters
  1817  0378  0820               	movf	??_nrf24l01InitRegisters,w
  1818  0379  00F1               	movwf	nrf24l01Send@data
  1819  037A  3022               	movlw	34
  1820  037B  26E9               	fcall	_nrf24l01Send
  1821                           
  1822                           ;nrf24l01.c: 158: n_SETUP_RETR_t setupRetries;
  1823                           ;nrf24l01.c: 159: setupRetries.ARD = 15;
  1824  037C  30F0               	movlw	240
  1825  037D  0020               	movlb	0	; select bank0
  1826  037E  04A2               	iorwf	nrf24l01InitRegisters@setupRetries,f
  1827                           
  1828                           ;nrf24l01.c: 160: setupRetries.ARC = 15;
  1829  037F  300F               	movlw	15
  1830  0380  04A2               	iorwf	nrf24l01InitRegisters@setupRetries,f
  1831                           
  1832                           ;nrf24l01.c: 161: nrf24l01Send(0b00100000 | 0x04, setupRetries.byte);
  1833  0381  0822               	movf	nrf24l01InitRegisters@setupRetries,w
  1834  0382  00A0               	movwf	??_nrf24l01InitRegisters
  1835  0383  0820               	movf	??_nrf24l01InitRegisters,w
  1836  0384  00F1               	movwf	nrf24l01Send@data
  1837  0385  3024               	movlw	36
  1838  0386  26E9               	fcall	_nrf24l01Send
  1839                           
  1840                           ;nrf24l01.c: 169: n_RF_SETUP_t rfSetup;
  1841                           ;nrf24l01.c: 170: rfSetup.RF_DR_LOW = 0;
  1842  0387  0020               	movlb	0	; select bank0
  1843  0388  12A4               	bcf	nrf24l01InitRegisters@rfSetup,5
  1844                           
  1845                           ;nrf24l01.c: 171: rfSetup.RF_DR_HIGH = 1;
  1846  0389  15A4               	bsf	nrf24l01InitRegisters@rfSetup,3
  1847                           
  1848                           ;nrf24l01.c: 172: rfSetup.RF_PWR = 3;
  1849  038A  3006               	movlw	6
  1850  038B  04A4               	iorwf	nrf24l01InitRegisters@rfSetup,f
  1851                           
  1852                           ;nrf24l01.c: 173: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  1853  038C  0824               	movf	nrf24l01InitRegisters@rfSetup,w
  1854  038D  00A0               	movwf	??_nrf24l01InitRegisters
  1855  038E  0820               	movf	??_nrf24l01InitRegisters,w
  1856  038F  00F1               	movwf	nrf24l01Send@data
  1857  0390  3026               	movlw	38
  1858  0391  26E9               	fcall	_nrf24l01Send
  1859                           
  1860                           ;nrf24l01.c: 176: n_CONFIG_t config;
  1861                           ;nrf24l01.c: 177: config.PRIM_RX = 1;
  1862  0392  0020               	movlb	0	; select bank0
  1863  0393  1425               	bsf	nrf24l01InitRegisters@config,0
  1864                           
  1865                           ;nrf24l01.c: 178: config.EN_CRC = 1;
  1866  0394  15A5               	bsf	nrf24l01InitRegisters@config,3
  1867                           
  1868                           ;nrf24l01.c: 179: config.CRCO = 1;
  1869  0395  1525               	bsf	nrf24l01InitRegisters@config,2
  1870                           
  1871                           ;nrf24l01.c: 180: config.PWR_UP = 1;
  1872  0396  14A5               	bsf	nrf24l01InitRegisters@config,1
  1873                           
  1874                           ;nrf24l01.c: 181: nrf24l01Send(0b00100000 | 0x00, config.byte);
  1875  0397  0825               	movf	nrf24l01InitRegisters@config,w
  1876  0398  00A0               	movwf	??_nrf24l01InitRegisters
  1877  0399  0820               	movf	??_nrf24l01InitRegisters,w
  1878  039A  00F1               	movwf	nrf24l01Send@data
  1879  039B  3020               	movlw	32
  1880  039C  26E9               	fcall	_nrf24l01Send
  1881                           
  1882                           ;nrf24l01.c: 184: n_EN_RXADDR_t enRXAddr;
  1883                           ;nrf24l01.c: 185: enRXAddr.ERX_P0 = 1;
  1884  039D  0020               	movlb	0	; select bank0
  1885  039E  1426               	bsf	nrf24l01InitRegisters@enRXAddr,0
  1886                           
  1887                           ;nrf24l01.c: 186: enRXAddr.ERX_P1 = 1;
  1888  039F  14A6               	bsf	nrf24l01InitRegisters@enRXAddr,1
  1889                           
  1890                           ;nrf24l01.c: 187: enRXAddr.ERX_P2 = 1;
  1891  03A0  1526               	bsf	nrf24l01InitRegisters@enRXAddr,2
  1892                           
  1893                           ;nrf24l01.c: 188: enRXAddr.ERX_P3 = 1;
  1894  03A1  15A6               	bsf	nrf24l01InitRegisters@enRXAddr,3
  1895                           
  1896                           ;nrf24l01.c: 189: enRXAddr.ERX_P4 = 1;
  1897  03A2  1626               	bsf	nrf24l01InitRegisters@enRXAddr,4
  1898                           
  1899                           ;nrf24l01.c: 190: enRXAddr.ERX_P5 = 1;
  1900  03A3  16A6               	bsf	nrf24l01InitRegisters@enRXAddr,5
  1901                           
  1902                           ;nrf24l01.c: 191: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  1903  03A4  0826               	movf	nrf24l01InitRegisters@enRXAddr,w
  1904  03A5  00A0               	movwf	??_nrf24l01InitRegisters
  1905  03A6  0820               	movf	??_nrf24l01InitRegisters,w
  1906  03A7  00F1               	movwf	nrf24l01Send@data
  1907  03A8  3022               	movlw	34
  1908  03A9  26E9               	fcall	_nrf24l01Send
  1909                           
  1910                           ;nrf24l01.c: 206: n_FEATURE_t feature;
  1911                           ;nrf24l01.c: 207: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  1912  03AA  01F1               	clrf	nrf24l01Send@data
  1913  03AB  301D               	movlw	29
  1914  03AC  26E9               	fcall	_nrf24l01Send
  1915  03AD  0020               	movlb	0	; select bank0
  1916  03AE  00A0               	movwf	??_nrf24l01InitRegisters
  1917  03AF  0820               	movf	??_nrf24l01InitRegisters,w
  1918  03B0  00A3               	movwf	nrf24l01InitRegisters@feature
  1919                           
  1920                           ;nrf24l01.c: 208: feature.EN_DPL = 1;
  1921  03B1  1523               	bsf	nrf24l01InitRegisters@feature,2
  1922                           
  1923                           ;nrf24l01.c: 209: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  1924  03B2  0823               	movf	nrf24l01InitRegisters@feature,w
  1925  03B3  00A0               	movwf	??_nrf24l01InitRegisters
  1926  03B4  0820               	movf	??_nrf24l01InitRegisters,w
  1927  03B5  00F1               	movwf	nrf24l01Send@data
  1928  03B6  303D               	movlw	61
  1929  03B7  26E9               	fcall	_nrf24l01Send
  1930                           
  1931                           ;nrf24l01.c: 211: n_DYNPD_t DynPD;
  1932                           ;nrf24l01.c: 212: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  1933  03B8  01F1               	clrf	nrf24l01Send@data
  1934  03B9  301C               	movlw	28
  1935  03BA  26E9               	fcall	_nrf24l01Send
  1936  03BB  0020               	movlb	0	; select bank0
  1937  03BC  00A0               	movwf	??_nrf24l01InitRegisters
  1938  03BD  0820               	movf	??_nrf24l01InitRegisters,w
  1939  03BE  00A7               	movwf	nrf24l01InitRegisters@DynPD
  1940                           
  1941                           ;nrf24l01.c: 213: DynPD.DPL_P0 = 1;
  1942  03BF  1427               	bsf	nrf24l01InitRegisters@DynPD,0
  1943                           
  1944                           ;nrf24l01.c: 214: DynPD.DPL_P1 = 1;
  1945  03C0  14A7               	bsf	nrf24l01InitRegisters@DynPD,1
  1946                           
  1947                           ;nrf24l01.c: 215: DynPD.DPL_P2 = 1;
  1948  03C1  1527               	bsf	nrf24l01InitRegisters@DynPD,2
  1949                           
  1950                           ;nrf24l01.c: 216: DynPD.DPL_P3 = 1;
  1951  03C2  15A7               	bsf	nrf24l01InitRegisters@DynPD,3
  1952                           
  1953                           ;nrf24l01.c: 217: DynPD.DPL_P4 = 1;
  1954  03C3  1627               	bsf	nrf24l01InitRegisters@DynPD,4
  1955                           
  1956                           ;nrf24l01.c: 218: DynPD.DPL_P5 = 1;
  1957  03C4  16A7               	bsf	nrf24l01InitRegisters@DynPD,5
  1958                           
  1959                           ;nrf24l01.c: 219: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  1960  03C5  0827               	movf	nrf24l01InitRegisters@DynPD,w
  1961  03C6  00A0               	movwf	??_nrf24l01InitRegisters
  1962  03C7  0820               	movf	??_nrf24l01InitRegisters,w
  1963  03C8  00F1               	movwf	nrf24l01Send@data
  1964  03C9  303C               	movlw	60
  1965  03CA  26E9               	fcall	_nrf24l01Send
  1966                           
  1967                           ;nrf24l01.c: 222: status.byte = 0x00;
  1968  03CB  01FC               	clrf	_status
  1969                           
  1970                           ;nrf24l01.c: 223: status.RX_DR = 1;
  1971  03CC  177C               	bsf	_status,6
  1972                           
  1973                           ;nrf24l01.c: 224: status.TX_DS = 1;
  1974  03CD  16FC               	bsf	_status,5
  1975                           
  1976                           ;nrf24l01.c: 225: status.MAX_RT = 1;
  1977  03CE  167C               	bsf	_status,4
  1978                           
  1979                           ;nrf24l01.c: 226: nrf24l01Send(0b00100000 | 0x07, status.byte);
  1980  03CF  087C               	movf	_status,w
  1981  03D0  0020               	movlb	0	; select bank0
  1982  03D1  00A0               	movwf	??_nrf24l01InitRegisters
  1983  03D2  0820               	movf	??_nrf24l01InitRegisters,w
  1984  03D3  00F1               	movwf	nrf24l01Send@data
  1985  03D4  3027               	movlw	39
  1986  03D5  26E9               	fcall	_nrf24l01Send
  1987                           
  1988                           ;nrf24l01.c: 229: nrf24l01Send(0b11100001, 0);
  1989  03D6  01F1               	clrf	nrf24l01Send@data
  1990  03D7  30E1               	movlw	225
  1991  03D8  26E9               	fcall	_nrf24l01Send
  1992                           
  1993                           ;nrf24l01.c: 230: nrf24l01Send(0b11100010, 0);
  1994  03D9  01F1               	clrf	nrf24l01Send@data
  1995  03DA  30E2               	movlw	226
  1996  03DB  26E9               	fcall	_nrf24l01Send
  1997  03DC  0008               	return
  1998  03DD                     __end_of_nrf24l01InitRegisters:	
  1999                           
  2000                           	psect	text4
  2001  005B                     __ptext4:	
  2002 ;; *************** function _loop *****************
  2003 ;; Defined at:
  2004 ;;		line 79 in file "main.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;		None
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;		None
  2009 ;; Return value:  Size  Location     Type
  2010 ;;                  1    wreg      void 
  2011 ;; Registers used:
  2012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMMON   BANK0   BANK1
  2018 ;;      Params:         0       0       0
  2019 ;;      Locals:         0       0       0
  2020 ;;      Temps:          0       2       0
  2021 ;;      Totals:         0       2       0
  2022 ;;Total ram usage:        2 bytes
  2023 ;; Hardware stack levels used:    1
  2024 ;; Hardware stack levels required when called:    8
  2025 ;; This function calls:
  2026 ;;		___aldiv
  2027 ;;		___altoft
  2028 ;;		___ftdiv
  2029 ;;		___fttol
  2030 ;;		_itoa
  2031 ;;		_nrf24l01SendEnd
  2032 ;;		_nrf24l01SendFlash
  2033 ;;		_nrf24l01SendStart
  2034 ;;		_nrf24l01SendString
  2035 ;;		_read_flashmem
  2036 ;;		_startADC
  2037 ;; This function is called by:
  2038 ;;		_main
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           
  2043                           ;psect for function _loop
  2044  005B                     _loop:	
  2045                           
  2046                           ;main.c: 81: if (mode != 1) {
  2047                           
  2048                           ;incstack = 0
  2049                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2050  005B  037D               	decf	_mode,w
  2051  005C  1903               	btfsc	3,2
  2052  005D  299A               	goto	l1941
  2053  005E  0064               	clrwdt	;# 
  2054                           
  2055                           ;main.c: 83: }
  2056                           ;main.c: 85: switch (mode){
  2057  005F  299A               	goto	l1941
  2058  0060                     l95:	
  2059                           ;main.c: 87: case 1:
  2060                           
  2061  0060  0063               	sleep	;# 
  2062                           
  2063                           ;main.c: 90: __nop();
  2064  0061  0000               	nop
  2065                           
  2066                           ;main.c: 91: __nop();
  2067  0062  0000               	nop
  2068                           
  2069                           ;main.c: 92: if (!STATUSbits.nTO && !STATUSbits.nPD){
  2070  0063  0020               	movlb	0	; select bank0
  2071  0064  1E03               	btfss	3,4	;volatile
  2072  0065  1983               	btfsc	3,3	;volatile
  2073  0066  286C               	goto	l1869
  2074                           
  2075                           ;main.c: 93: mode = nextMode;
  2076  0067  0862               	movf	_nextMode,w
  2077  0068  00CE               	movwf	??_loop
  2078  0069  084E               	movf	??_loop,w
  2079  006A  00FD               	movwf	_mode
  2080                           
  2081                           ;main.c: 94: sleepLoop = 0;
  2082  006B  01D7               	clrf	_sleepLoop
  2083  006C                     l1869:	
  2084                           
  2085                           ;main.c: 95: }
  2086                           ;main.c: 97: if (sleepLoop++ > 200){
  2087  006C  0857               	movf	_sleepLoop,w
  2088  006D  0AD7               	incf	_sleepLoop,f
  2089  006E  00CE               	movwf	??_loop
  2090  006F  30C9               	movlw	201
  2091  0070  024E               	subwf	??_loop,w
  2092  0071  1C03               	skipc
  2093  0072  0008               	return
  2094  0073  0001               	reset	;# 
  2095                           
  2096                           ;main.c: 99: }
  2097                           ;main.c: 100: break;
  2098  0074  0008               	return
  2099  0075                     l1873:	
  2100                           ;main.c: 102: case 10:
  2101                           
  2102                           
  2103                           ;main.c: 105: itoa(buffer, read_flashmem(16), 10);
  2104  0075  3010               	movlw	16
  2105  0076  0020               	movlb	0	; select bank0
  2106  0077  00A0               	movwf	read_flashmem@offset
  2107  0078  3000               	movlw	0
  2108  0079  00A1               	movwf	read_flashmem@offset+1
  2109  007A  25AE               	fcall	_read_flashmem
  2110  007B  0020               	movlb	0	; select bank0
  2111  007C  0821               	movf	?_read_flashmem+1,w
  2112  007D  00B2               	movwf	itoa@val+1
  2113  007E  0820               	movf	?_read_flashmem,w
  2114  007F  00B1               	movwf	itoa@val
  2115  0080  300A               	movlw	10
  2116  0081  00B3               	movwf	itoa@base
  2117  0082  3000               	movlw	0
  2118  0083  00B4               	movwf	itoa@base+1
  2119  0084  3059               	movlw	(low (_buffer| 0))& (0+255)
  2120  0085  2684               	fcall	_itoa
  2121                           
  2122                           ;main.c: 107: nrf24l01SendStart();
  2123  0086  2736               	fcall	_nrf24l01SendStart
  2124                           
  2125                           ;main.c: 108: nrf24l01SendFlash(0);
  2126  0087  3000               	movlw	0
  2127  0088  26A7               	fcall	_nrf24l01SendFlash
  2128                           
  2129                           ;main.c: 109: nrf24l01SendString( (char *) "/BOOT/");
  2130  0089  3011               	movlw	low (STR_1| (0+32768))
  2131  008A  0020               	movlb	0	; select bank0
  2132  008B  00A0               	movwf	nrf24l01SendString@string
  2133  008C  3087               	movlw	high (STR_1| (0+32768))
  2134  008D  00A1               	movwf	nrf24l01SendString@string+1
  2135  008E  2661               	fcall	_nrf24l01SendString
  2136                           
  2137                           ;main.c: 110: nrf24l01SendString(buffer);
  2138  008F  3059               	movlw	low _buffer
  2139  0090  0020               	movlb	0	; select bank0
  2140  0091  00A0               	movwf	nrf24l01SendString@string
  2141  0092  3000               	movlw	high _buffer
  2142  0093  00A1               	movwf	nrf24l01SendString@string+1
  2143  0094  2661               	fcall	_nrf24l01SendString
  2144                           
  2145                           ;main.c: 111: nrf24l01SendEnd();
  2146  0095  26F8               	fcall	_nrf24l01SendEnd
  2147                           
  2148                           ;main.c: 113: mode = 11;
  2149  0096  300B               	movlw	11
  2150  0097  0020               	movlb	0	; select bank0
  2151  0098  00CE               	movwf	??_loop
  2152  0099  084E               	movf	??_loop,w
  2153  009A  00FD               	movwf	_mode
  2154                           
  2155                           ;main.c: 114: break;
  2156  009B  0008               	return
  2157  009C                     l100:	
  2158                           ;main.c: 117: case 11:
  2159                           
  2160                           
  2161                           ;main.c: 118: mode = 1;
  2162  009C  01FD               	clrf	_mode
  2163  009D  0AFD               	incf	_mode,f
  2164                           
  2165                           ;main.c: 119: nextMode = 12;
  2166  009E  300C               	movlw	12
  2167  009F  0020               	movlb	0	; select bank0
  2168  00A0  00CE               	movwf	??_loop
  2169  00A1  084E               	movf	??_loop,w
  2170  00A2  00E2               	movwf	_nextMode
  2171                           
  2172                           ;main.c: 121: break;
  2173  00A3  0008               	return
  2174  00A4                     l1889:	
  2175                           ;main.c: 123: case 12:
  2176                           
  2177                           
  2178                           ;main.c: 124: startADC(3);
  2179  00A4  3003               	movlw	3
  2180  00A5  25E0               	fcall	_startADC
  2181                           
  2182                           ;main.c: 125: nextMode = 13;
  2183  00A6  300D               	movlw	13
  2184  00A7  0020               	movlb	0	; select bank0
  2185  00A8  00CE               	movwf	??_loop
  2186  00A9  084E               	movf	??_loop,w
  2187  00AA  00E2               	movwf	_nextMode
  2188                           
  2189                           ;main.c: 126: break;
  2190  00AB  0008               	return
  2191  00AC                     l1893:	
  2192                           ;main.c: 128: case 13:
  2193                           
  2194                           
  2195                           ;main.c: 129: startADC(7);
  2196  00AC  3007               	movlw	7
  2197  00AD  25E0               	fcall	_startADC
  2198                           
  2199                           ;main.c: 130: nextMode = 15;
  2200  00AE  300F               	movlw	15
  2201  00AF  0020               	movlb	0	; select bank0
  2202  00B0  00CE               	movwf	??_loop
  2203  00B1  084E               	movf	??_loop,w
  2204  00B2  00E2               	movwf	_nextMode
  2205                           
  2206                           ;main.c: 131: break;
  2207  00B3  0008               	return
  2208  00B4                     l1897:	
  2209                           ;main.c: 133: case 15:
  2210                           
  2211                           
  2212                           ;main.c: 134: startADC(29);
  2213  00B4  301D               	movlw	29
  2214  00B5  25E0               	fcall	_startADC
  2215                           
  2216                           ;main.c: 135: nextMode = 14;
  2217  00B6  300E               	movlw	14
  2218  00B7  0020               	movlb	0	; select bank0
  2219  00B8  00CE               	movwf	??_loop
  2220  00B9  084E               	movf	??_loop,w
  2221  00BA  00E2               	movwf	_nextMode
  2222                           
  2223                           ;main.c: 136: break;
  2224  00BB  0008               	return
  2225  00BC                     l1901:	
  2226                           ;main.c: 138: case 14:
  2227                           
  2228                           
  2229                           ;main.c: 139: startADC(31);
  2230  00BC  301F               	movlw	31
  2231  00BD  25E0               	fcall	_startADC
  2232                           
  2233                           ;main.c: 140: nextMode = 11;
  2234  00BE  300B               	movlw	11
  2235  00BF  0020               	movlb	0	; select bank0
  2236  00C0  00CE               	movwf	??_loop
  2237  00C1  084E               	movf	??_loop,w
  2238  00C2  00E2               	movwf	_nextMode
  2239                           
  2240                           ;main.c: 141: break;
  2241  00C3  0008               	return
  2242  00C4                     l1905:	
  2243                           ;main.c: 146: case 3:
  2244                           
  2245                           ;main.c: 145: switch (ADCON0bits.CHS){
  2246                           
  2247                           ;main.c: 143: case 3:
  2248                           
  2249                           
  2250                           ;main.c: 147: adcSum= (long) (( (float) adcSum) / 25.05);
  2251  00C4  0020               	movlb	0	; select bank0
  2252  00C5  0856               	movf	_adcSum+3,w
  2253  00C6  00AB               	movwf	___altoft@c+3
  2254  00C7  0855               	movf	_adcSum+2,w
  2255  00C8  00AA               	movwf	___altoft@c+2
  2256  00C9  0854               	movf	_adcSum+1,w
  2257  00CA  00A9               	movwf	___altoft@c+1
  2258  00CB  0853               	movf	_adcSum,w
  2259  00CC  00A8               	movwf	___altoft@c
  2260  00CD  253D               	fcall	___altoft
  2261  00CE  0020               	movlb	0	; select bank0
  2262  00CF  0828               	movf	?___altoft,w
  2263  00D0  00B3               	movwf	___ftdiv@f1
  2264  00D1  0829               	movf	?___altoft+1,w
  2265  00D2  00B4               	movwf	___ftdiv@f1+1
  2266  00D3  082A               	movf	?___altoft+2,w
  2267  00D4  00B5               	movwf	___ftdiv@f1+2
  2268  00D5  3066               	movlw	102
  2269  00D6  00B0               	movwf	___ftdiv@f2
  2270  00D7  30C8               	movlw	200
  2271  00D8  28F6               	goto	L6
  2272  00D9                     l1907:	
  2273                           ;main.c: 150: case 7:
  2274                           
  2275                           ;main.c: 148: break;
  2276                           
  2277                           
  2278                           ;main.c: 151: adcSum/= 25;
  2279  00D9  3000               	movlw	0
  2280  00DA  0020               	movlb	0	; select bank0
  2281  00DB  00A3               	movwf	___aldiv@divisor+3
  2282  00DC  3000               	movlw	0
  2283  00DD  00A2               	movwf	___aldiv@divisor+2
  2284  00DE  3000               	movlw	0
  2285  00DF  00A1               	movwf	___aldiv@divisor+1
  2286  00E0  3019               	movlw	25
  2287  00E1  2937               	goto	L4
  2288  00E2                     l1909:	
  2289                           ;main.c: 154: case 31:
  2290                           
  2291                           ;main.c: 152: break;
  2292                           
  2293                           
  2294                           ;main.c: 155: adcSum= (long) (( (float) adcSum) / 24.8);
  2295  00E2  0020               	movlb	0	; select bank0
  2296  00E3  0856               	movf	_adcSum+3,w
  2297  00E4  00AB               	movwf	___altoft@c+3
  2298  00E5  0855               	movf	_adcSum+2,w
  2299  00E6  00AA               	movwf	___altoft@c+2
  2300  00E7  0854               	movf	_adcSum+1,w
  2301  00E8  00A9               	movwf	___altoft@c+1
  2302  00E9  0853               	movf	_adcSum,w
  2303  00EA  00A8               	movwf	___altoft@c
  2304  00EB  253D               	fcall	___altoft
  2305  00EC  0020               	movlb	0	; select bank0
  2306  00ED  0828               	movf	?___altoft,w
  2307  00EE  00B3               	movwf	___ftdiv@f1
  2308  00EF  0829               	movf	?___altoft+1,w
  2309  00F0  00B4               	movwf	___ftdiv@f1+1
  2310  00F1  082A               	movf	?___altoft+2,w
  2311  00F2  00B5               	movwf	___ftdiv@f1+2
  2312  00F3  3066               	movlw	102
  2313  00F4  00B0               	movwf	___ftdiv@f2
  2314  00F5  30C6               	movlw	198
  2315  00F6                     L6:	
  2316  00F6  00B1               	movwf	___ftdiv@f2+1
  2317  00F7  3041               	movlw	65
  2318  00F8  00B2               	movwf	___ftdiv@f2+2
  2319  00F9  21B5               	fcall	___ftdiv
  2320  00FA  0020               	movlb	0	; select bank0
  2321  00FB  0830               	movf	?___ftdiv,w
  2322  00FC  00C0               	movwf	___fttol@f1
  2323  00FD  0831               	movf	?___ftdiv+1,w
  2324  00FE  00C1               	movwf	___fttol@f1+1
  2325  00FF  0832               	movf	?___ftdiv+2,w
  2326  0100  00C2               	movwf	___fttol@f1+2
  2327  0101  225D               	fcall	___fttol
  2328  0102  0020               	movlb	0	; select bank0
  2329  0103  0843               	movf	?___fttol+3,w
  2330  0104  00D6               	movwf	_adcSum+3
  2331  0105  0842               	movf	?___fttol+2,w
  2332  0106  00D5               	movwf	_adcSum+2
  2333  0107  0841               	movf	?___fttol+1,w
  2334  0108  00D4               	movwf	_adcSum+1
  2335  0109  0840               	movf	?___fttol,w
  2336  010A  2949               	goto	L3
  2337  010B                     l1911:	
  2338                           ;main.c: 158: case 29:
  2339                           
  2340                           ;main.c: 156: break;
  2341                           
  2342                           
  2343                           ;main.c: 159: adcSum/= 2089;
  2344  010B  3000               	movlw	0
  2345  010C  0020               	movlb	0	; select bank0
  2346  010D  00A3               	movwf	___aldiv@divisor+3
  2347  010E  3000               	movlw	0
  2348  010F  00A2               	movwf	___aldiv@divisor+2
  2349  0110  3008               	movlw	8
  2350  0111  00A1               	movwf	___aldiv@divisor+1
  2351  0112  3029               	movlw	41
  2352  0113  00A0               	movwf	___aldiv@divisor
  2353  0114  0856               	movf	_adcSum+3,w
  2354  0115  00A7               	movwf	___aldiv@dividend+3
  2355  0116  0855               	movf	_adcSum+2,w
  2356  0117  00A6               	movwf	___aldiv@dividend+2
  2357  0118  0854               	movf	_adcSum+1,w
  2358  0119  00A5               	movwf	___aldiv@dividend+1
  2359  011A  0853               	movf	_adcSum,w
  2360  011B  00A4               	movwf	___aldiv@dividend
  2361  011C  22E4               	fcall	___aldiv
  2362  011D  0020               	movlb	0	; select bank0
  2363  011E  0823               	movf	?___aldiv+3,w
  2364  011F  00D6               	movwf	_adcSum+3
  2365  0120  0822               	movf	?___aldiv+2,w
  2366  0121  00D5               	movwf	_adcSum+2
  2367  0122  0821               	movf	?___aldiv+1,w
  2368  0123  00D4               	movwf	_adcSum+1
  2369  0124  0820               	movf	?___aldiv,w
  2370  0125  00D3               	movwf	_adcSum
  2371                           
  2372                           ;main.c: 160: adcSum-= 40;
  2373  0126  30D8               	movlw	216
  2374  0127  07D3               	addwf	_adcSum,f
  2375  0128  30FF               	movlw	255
  2376  0129  3DD4               	addwfc	_adcSum+1,f
  2377  012A  30FF               	movlw	255
  2378  012B  3DD5               	addwfc	_adcSum+2,f
  2379  012C  30FF               	movlw	255
  2380  012D  3DD6               	addwfc	_adcSum+3,f
  2381                           
  2382                           ;main.c: 161: break;
  2383  012E  295C               	goto	l1921
  2384  012F                     l1915:	
  2385                           ;main.c: 163: default:
  2386                           
  2387                           
  2388                           ;main.c: 164: adcSum/= 255;
  2389  012F  3000               	movlw	0
  2390  0130  0020               	movlb	0	; select bank0
  2391  0131  00A3               	movwf	___aldiv@divisor+3
  2392  0132  3000               	movlw	0
  2393  0133  00A2               	movwf	___aldiv@divisor+2
  2394  0134  3000               	movlw	0
  2395  0135  00A1               	movwf	___aldiv@divisor+1
  2396  0136  30FF               	movlw	255
  2397  0137                     L4:	
  2398  0137  00A0               	movwf	___aldiv@divisor
  2399  0138  0856               	movf	_adcSum+3,w
  2400  0139  00A7               	movwf	___aldiv@dividend+3
  2401  013A  0855               	movf	_adcSum+2,w
  2402  013B  00A6               	movwf	___aldiv@dividend+2
  2403  013C  0854               	movf	_adcSum+1,w
  2404  013D  00A5               	movwf	___aldiv@dividend+1
  2405  013E  0853               	movf	_adcSum,w
  2406  013F  00A4               	movwf	___aldiv@dividend
  2407  0140  22E4               	fcall	___aldiv
  2408  0141  0020               	movlb	0	; select bank0
  2409  0142  0823               	movf	?___aldiv+3,w
  2410  0143  00D6               	movwf	_adcSum+3
  2411  0144  0822               	movf	?___aldiv+2,w
  2412  0145  00D5               	movwf	_adcSum+2
  2413  0146  0821               	movf	?___aldiv+1,w
  2414  0147  00D4               	movwf	_adcSum+1
  2415  0148  0820               	movf	?___aldiv,w
  2416  0149                     L3:	
  2417  0149  00D3               	movwf	_adcSum
  2418                           
  2419                           ;main.c: 166: }
  2420                           
  2421                           ;main.c: 165: break;
  2422  014A  295C               	goto	l1921
  2423  014B                     l1919:	
  2424  014B  0021               	movlb	1	; select bank1
  2425  014C  0C1D               	rrf	29,w	;volatile
  2426  014D  0C89               	rrf	9,f
  2427  014E  391F               	andlw	31
  2428                           
  2429                           ; Switch size 1, requested type "space"
  2430                           ; Number of cases is 4, Range of values is 3 to 31
  2431                           ; switch strategies available:
  2432                           ; Name         Instructions Cycles
  2433                           ; simple_byte           13     7 (average)
  2434                           ; direct_byte           67     9 (fixed)
  2435                           ; jumptable            263     9 (fixed)
  2436                           ;	Chosen strategy is simple_byte
  2437  014F  3A03               	xorlw	3	; case 3
  2438  0150  1903               	skipnz
  2439  0151  28C4               	goto	l1905
  2440  0152  3A04               	xorlw	4	; case 7
  2441  0153  1903               	skipnz
  2442  0154  28D9               	goto	l1907
  2443  0155  3A1A               	xorlw	26	; case 29
  2444  0156  1903               	skipnz
  2445  0157  290B               	goto	l1911
  2446  0158  3A02               	xorlw	2	; case 31
  2447  0159  1903               	skipnz
  2448  015A  28E2               	goto	l1909
  2449  015B  292F               	goto	l1915
  2450  015C                     l1921:	
  2451                           
  2452                           ;main.c: 169: itoa(buffer, adcSum, 10);
  2453  015C  0020               	movlb	0	; select bank0
  2454  015D  0854               	movf	_adcSum+1,w
  2455  015E  00B2               	movwf	itoa@val+1
  2456  015F  0853               	movf	_adcSum,w
  2457  0160  00B1               	movwf	itoa@val
  2458  0161  300A               	movlw	10
  2459  0162  00B3               	movwf	itoa@base
  2460  0163  3000               	movlw	0
  2461  0164  00B4               	movwf	itoa@base+1
  2462  0165  3059               	movlw	(low (_buffer| 0))& (0+255)
  2463  0166  2684               	fcall	_itoa
  2464                           
  2465                           ;main.c: 170: itoa(byte, ADCON0bits.CHS, 10);
  2466  0167  0021               	movlb	1	; select bank1
  2467  0168  0C1D               	rrf	29,w	;volatile
  2468  0169  0C89               	rrf	9,f
  2469  016A  391F               	andlw	31
  2470  016B  0020               	movlb	0	; select bank0
  2471  016C  00CE               	movwf	??_loop
  2472  016D  01CF               	clrf	??_loop+1
  2473  016E  084E               	movf	??_loop,w
  2474  016F  00B1               	movwf	itoa@val
  2475  0170  084F               	movf	??_loop+1,w
  2476  0171  00B2               	movwf	itoa@val+1
  2477  0172  300A               	movlw	10
  2478  0173  00B3               	movwf	itoa@base
  2479  0174  3000               	movlw	0
  2480  0175  00B4               	movwf	itoa@base+1
  2481  0176  305F               	movlw	(low (_byte| 0))& (0+255)
  2482  0177  2684               	fcall	_itoa
  2483                           
  2484                           ;main.c: 172: nrf24l01SendStart();
  2485  0178  2736               	fcall	_nrf24l01SendStart
  2486                           
  2487                           ;main.c: 173: nrf24l01SendFlash(0);
  2488  0179  3000               	movlw	0
  2489  017A  26A7               	fcall	_nrf24l01SendFlash
  2490                           
  2491                           ;main.c: 174: nrf24l01SendString((char *) "/ADC");
  2492  017B  3031               	movlw	low (STR_2| (0+32768))
  2493  017C  0020               	movlb	0	; select bank0
  2494  017D  00A0               	movwf	nrf24l01SendString@string
  2495  017E  3087               	movlw	high (STR_2| (0+32768))
  2496  017F  00A1               	movwf	nrf24l01SendString@string+1
  2497  0180  2661               	fcall	_nrf24l01SendString
  2498                           
  2499                           ;main.c: 175: nrf24l01SendString(byte);
  2500  0181  305F               	movlw	low _byte
  2501  0182  0020               	movlb	0	; select bank0
  2502  0183  00A0               	movwf	nrf24l01SendString@string
  2503  0184  3000               	movlw	high _byte
  2504  0185  00A1               	movwf	nrf24l01SendString@string+1
  2505  0186  2661               	fcall	_nrf24l01SendString
  2506                           
  2507                           ;main.c: 176: nrf24l01SendString((char *) "/");
  2508  0187  3016               	movlw	low ((STR_1+5)| (0+32768))
  2509  0188  0020               	movlb	0	; select bank0
  2510  0189  00A0               	movwf	nrf24l01SendString@string
  2511  018A  3087               	movlw	high ((STR_1+5)| (0+32768))
  2512  018B  00A1               	movwf	nrf24l01SendString@string+1
  2513  018C  2661               	fcall	_nrf24l01SendString
  2514                           
  2515                           ;main.c: 177: nrf24l01SendString(buffer);
  2516  018D  3059               	movlw	low _buffer
  2517  018E  0020               	movlb	0	; select bank0
  2518  018F  00A0               	movwf	nrf24l01SendString@string
  2519  0190  3000               	movlw	high _buffer
  2520  0191  00A1               	movwf	nrf24l01SendString@string+1
  2521  0192  2661               	fcall	_nrf24l01SendString
  2522                           
  2523                           ;main.c: 179: nrf24l01SendEnd();
  2524  0193  26F8               	fcall	_nrf24l01SendEnd
  2525                           
  2526                           ;main.c: 181: mode = nextMode;
  2527  0194  0020               	movlb	0	; select bank0
  2528  0195  0862               	movf	_nextMode,w
  2529  0196  00CE               	movwf	??_loop
  2530  0197  084E               	movf	??_loop,w
  2531  0198  00FD               	movwf	_mode
  2532                           
  2533                           ;main.c: 184: }
  2534                           
  2535                           ;main.c: 182: break;
  2536  0199  0008               	return
  2537  019A                     l1941:	
  2538  019A  087D               	movf	_mode,w
  2539                           
  2540                           ; Switch size 1, requested type "space"
  2541                           ; Number of cases is 8, Range of values is 1 to 15
  2542                           ; switch strategies available:
  2543                           ; Name         Instructions Cycles
  2544                           ; simple_byte           25    13 (average)
  2545                           ; direct_byte           39     9 (fixed)
  2546                           ; jumptable            263     9 (fixed)
  2547                           ;	Chosen strategy is simple_byte
  2548  019B  3A01               	xorlw	1	; case 1
  2549  019C  1903               	skipnz
  2550  019D  2860               	goto	l95
  2551  019E  3A02               	xorlw	2	; case 3
  2552  019F  1903               	skipnz
  2553  01A0  294B               	goto	l1919
  2554  01A1  3A09               	xorlw	9	; case 10
  2555  01A2  1903               	skipnz
  2556  01A3  2875               	goto	l1873
  2557  01A4  3A01               	xorlw	1	; case 11
  2558  01A5  1903               	skipnz
  2559  01A6  289C               	goto	l100
  2560  01A7  3A07               	xorlw	7	; case 12
  2561  01A8  1903               	skipnz
  2562  01A9  28A4               	goto	l1889
  2563  01AA  3A01               	xorlw	1	; case 13
  2564  01AB  1903               	skipnz
  2565  01AC  28AC               	goto	l1893
  2566  01AD  3A03               	xorlw	3	; case 14
  2567  01AE  1903               	skipnz
  2568  01AF  28BC               	goto	l1901
  2569  01B0  3A01               	xorlw	1	; case 15
  2570  01B1  1903               	skipnz
  2571  01B2  28B4               	goto	l1897
  2572  01B3  29B4               	goto	l113
  2573  01B4                     l113:	
  2574  01B4  0008               	return
  2575  01B5                     __end_of_loop:	
  2576                           
  2577                           	psect	text5
  2578  05E0                     __ptext5:	
  2579 ;; *************** function _startADC *****************
  2580 ;; Defined at:
  2581 ;;		line 67 in file "main.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;  channel         1    wreg     unsigned char 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  channel         1    1[BANK0 ] unsigned char 
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      void 
  2588 ;; Registers used:
  2589 ;;		wreg, status,2, status,0
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMMON   BANK0   BANK1
  2595 ;;      Params:         0       0       0
  2596 ;;      Locals:         0       1       0
  2597 ;;      Temps:          0       1       0
  2598 ;;      Totals:         0       2       0
  2599 ;;Total ram usage:        2 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    4
  2602 ;; This function calls:
  2603 ;;		Nothing
  2604 ;; This function is called by:
  2605 ;;		_loop
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           
  2610                           ;psect for function _startADC
  2611  05E0                     _startADC:	
  2612                           
  2613                           ;incstack = 0
  2614                           ; Regs used in _startADC: [wreg+status,2+status,0]
  2615                           ;startADC@channel stored from wreg
  2616  05E0  0020               	movlb	0	; select bank0
  2617  05E1  00A1               	movwf	startADC@channel
  2618                           
  2619                           ;main.c: 68: adcSum = 0;
  2620  05E2  3000               	movlw	0
  2621  05E3  00D6               	movwf	_adcSum+3
  2622  05E4  3000               	movlw	0
  2623  05E5  00D5               	movwf	_adcSum+2
  2624  05E6  3000               	movlw	0
  2625  05E7  00D4               	movwf	_adcSum+1
  2626  05E8  3000               	movlw	0
  2627  05E9  00D3               	movwf	_adcSum
  2628                           
  2629                           ;main.c: 69: adcLoop = 255;
  2630  05EA  30FF               	movlw	255
  2631  05EB  00A0               	movwf	??_startADC
  2632  05EC  0820               	movf	??_startADC,w
  2633  05ED  00D8               	movwf	_adcLoop
  2634                           
  2635                           ;main.c: 71: if (ADCON0bits.CHS != channel) {
  2636  05EE  0021               	movlb	1	; select bank1
  2637  05EF  0C1D               	rrf	29,w	;volatile
  2638  05F0  0C89               	rrf	9,f
  2639  05F1  391F               	andlw	31
  2640  05F2  0020               	movlb	0	; select bank0
  2641  05F3  0621               	xorwf	startADC@channel,w
  2642  05F4  1903               	skipnz
  2643  05F5  2E06               	goto	l1559
  2644                           
  2645                           ;main.c: 72: ADCON0bits.CHS = channel;
  2646  05F6  0821               	movf	startADC@channel,w
  2647  05F7  00A0               	movwf	??_startADC
  2648  05F8  0DA0               	rlf	??_startADC,f
  2649  05F9  0DA0               	rlf	??_startADC,f
  2650  05FA  0021               	movlb	1	; select bank1
  2651  05FB  081D               	movf	29,w	;volatile
  2652  05FC  0020               	movlb	0	; select bank0
  2653  05FD  0620               	xorwf	??_startADC,w
  2654  05FE  3983               	andlw	-125
  2655  05FF  0620               	xorwf	??_startADC,w
  2656  0600  0021               	movlb	1	; select bank1
  2657  0601  009D               	movwf	29	;volatile
  2658                           
  2659                           ;main.c: 73: _delay((unsigned long)((200)*(16000000/4000000.0)));
  2660  0602  30A0               	movlw	160
  2661  0603                     u1617:	
  2662  0603  3200               	nop2
  2663  0604  0B89               	decfsz	9,f
  2664  0605  2E03               	goto	u1617
  2665  0606                     l1559:	
  2666                           
  2667                           ;main.c: 74: }
  2668                           ;main.c: 76: ADCON0bits.ADGO = 1;
  2669  0606  0021               	movlb	1	; select bank1
  2670  0607  149D               	bsf	29,1	;volatile
  2671                           
  2672                           ;main.c: 77: mode = 2;
  2673  0608  3002               	movlw	2
  2674  0609  0020               	movlb	0	; select bank0
  2675  060A  00A0               	movwf	??_startADC
  2676  060B  0820               	movf	??_startADC,w
  2677  060C  00FD               	movwf	_mode
  2678  060D  0008               	return
  2679  060E                     __end_of_startADC:	
  2680                           
  2681                           	psect	text6
  2682  0661                     __ptext6:	
  2683 ;; *************** function _nrf24l01SendString *****************
  2684 ;; Defined at:
  2685 ;;		line 101 in file "nrf24l01.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;  string          2    0[BANK0 ] PTR unsigned char 
  2688 ;;		 -> STR_3(2), STR_2(5), byte(3), STR_1(7), 
  2689 ;;		 -> buffer(6), 
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;  i               1    5[BANK0 ] unsigned char 
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  1    wreg      void 
  2694 ;; Registers used:
  2695 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMMON   BANK0   BANK1
  2701 ;;      Params:         0       2       0
  2702 ;;      Locals:         0       1       0
  2703 ;;      Temps:          0       3       0
  2704 ;;      Totals:         0       6       0
  2705 ;;Total ram usage:        6 bytes
  2706 ;; Hardware stack levels used:    1
  2707 ;; Hardware stack levels required when called:    5
  2708 ;; This function calls:
  2709 ;;		_nrf24l01SPISend
  2710 ;; This function is called by:
  2711 ;;		_loop
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           
  2716                           ;psect for function _nrf24l01SendString
  2717  0661                     _nrf24l01SendString:	
  2718                           
  2719                           ;nrf24l01.c: 102: unsigned char i;
  2720                           ;nrf24l01.c: 103: for (i = 0; string[i] != '\0'; i++){
  2721                           
  2722                           ;incstack = 0
  2723                           ; Regs used in _nrf24l01SendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2724  0661  0020               	movlb	0	; select bank0
  2725  0662  01A5               	clrf	nrf24l01SendString@i
  2726  0663                     l1599:	
  2727  0663  0821               	movf	nrf24l01SendString@string+1,w
  2728  0664  00A3               	movwf	??_nrf24l01SendString+1
  2729  0665  0820               	movf	nrf24l01SendString@string,w
  2730  0666  00A2               	movwf	??_nrf24l01SendString
  2731  0667  0825               	movf	nrf24l01SendString@i,w
  2732  0668  0722               	addwf	??_nrf24l01SendString,w
  2733  0669  0084               	movwf	4
  2734  066A  0823               	movf	??_nrf24l01SendString+1,w
  2735  066B  1803               	skipnc
  2736  066C  0A23               	incf	??_nrf24l01SendString+1,w
  2737  066D  0085               	movwf	5
  2738  066E  0012               	moviw fsr0++
  2739  066F  1903               	btfsc	3,2
  2740  0670  0008               	return
  2741                           
  2742                           ;nrf24l01.c: 104: nrf24l01SPISend(string[i]);
  2743  0671  0821               	movf	nrf24l01SendString@string+1,w
  2744  0672  00A3               	movwf	??_nrf24l01SendString+1
  2745  0673  0820               	movf	nrf24l01SendString@string,w
  2746  0674  00A2               	movwf	??_nrf24l01SendString
  2747  0675  0825               	movf	nrf24l01SendString@i,w
  2748  0676  0722               	addwf	??_nrf24l01SendString,w
  2749  0677  0084               	movwf	4
  2750  0678  0823               	movf	??_nrf24l01SendString+1,w
  2751  0679  1803               	skipnc
  2752  067A  0A23               	incf	??_nrf24l01SendString+1,w
  2753  067B  0085               	movwf	5
  2754  067C  0800               	movf	0,w	;code access
  2755  067D  2706               	fcall	_nrf24l01SPISend
  2756  067E  3001               	movlw	1
  2757  067F  0020               	movlb	0	; select bank0
  2758  0680  00A2               	movwf	??_nrf24l01SendString
  2759  0681  0822               	movf	??_nrf24l01SendString,w
  2760  0682  07A5               	addwf	nrf24l01SendString@i,f
  2761  0683  2E63               	goto	l1599
  2762  0684                     __end_of_nrf24l01SendString:	
  2763                           
  2764                           	psect	text7
  2765  0736                     __ptext7:	
  2766 ;; *************** function _nrf24l01SendStart *****************
  2767 ;; Defined at:
  2768 ;;		line 92 in file "nrf24l01.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;		None
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;		None
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  1    wreg      void 
  2775 ;; Registers used:
  2776 ;;		wreg, status,2, status,0, pclath, cstack
  2777 ;; Tracked objects:
  2778 ;;		On entry : 0/0
  2779 ;;		On exit  : 0/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:     COMMON   BANK0   BANK1
  2782 ;;      Params:         0       0       0
  2783 ;;      Locals:         0       0       0
  2784 ;;      Temps:          0       0       0
  2785 ;;      Totals:         0       0       0
  2786 ;;Total ram usage:        0 bytes
  2787 ;; Hardware stack levels used:    1
  2788 ;; Hardware stack levels required when called:    7
  2789 ;; This function calls:
  2790 ;;		_nrf24l01SPISend
  2791 ;;		_nrf24l01SPIStart
  2792 ;;		_nrf24l01SetTransmitMode
  2793 ;; This function is called by:
  2794 ;;		_loop
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           
  2799                           ;psect for function _nrf24l01SendStart
  2800  0736                     _nrf24l01SendStart:	
  2801                           
  2802                           ;nrf24l01.c: 94: nrf24l01SetTransmitMode();
  2803                           
  2804                           ;incstack = 0
  2805                           ; Regs used in _nrf24l01SendStart: [wreg+status,2+status,0+pclath+cstack]
  2806  0736  26C2               	fcall	_nrf24l01SetTransmitMode
  2807                           
  2808                           ;nrf24l01.c: 96: nrf24l01SPIStart();
  2809  0737  2718               	fcall	_nrf24l01SPIStart
  2810                           
  2811                           ;nrf24l01.c: 98: nrf24l01SPISend(0b10100000);
  2812  0738  30A0               	movlw	160
  2813  0739  2706               	fcall	_nrf24l01SPISend
  2814  073A  0008               	return
  2815  073B                     __end_of_nrf24l01SendStart:	
  2816                           
  2817                           	psect	text8
  2818  06C2                     __ptext8:	
  2819 ;; *************** function _nrf24l01SetTransmitMode *****************
  2820 ;; Defined at:
  2821 ;;		line 62 in file "nrf24l01.c"
  2822 ;; Parameters:    Size  Location     Type
  2823 ;;		None
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;  config          1    1[BANK0 ] struct .
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  1    wreg      void 
  2828 ;; Registers used:
  2829 ;;		wreg, status,2, status,0, pclath, cstack
  2830 ;; Tracked objects:
  2831 ;;		On entry : 0/0
  2832 ;;		On exit  : 0/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMMON   BANK0   BANK1
  2835 ;;      Params:         0       0       0
  2836 ;;      Locals:         0       1       0
  2837 ;;      Temps:          0       1       0
  2838 ;;      Totals:         0       2       0
  2839 ;;Total ram usage:        2 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:    6
  2842 ;; This function calls:
  2843 ;;		_nrf24l01Send
  2844 ;; This function is called by:
  2845 ;;		_nrf24l01SendStart
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           
  2850                           ;psect for function _nrf24l01SetTransmitMode
  2851  06C2                     _nrf24l01SetTransmitMode:	
  2852                           
  2853                           ;nrf24l01.c: 64: PORTAbits.RA0 = 0;
  2854                           
  2855                           ;incstack = 0
  2856                           ; Regs used in _nrf24l01SetTransmitMode: [wreg+status,2+status,0+pclath+cstack]
  2857  06C2  0020               	movlb	0	; select bank0
  2858  06C3  100C               	bcf	12,0	;volatile
  2859                           
  2860                           ;nrf24l01.c: 66: n_CONFIG_t config;
  2861                           ;nrf24l01.c: 67: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  2862  06C4  01F1               	clrf	nrf24l01Send@data
  2863  06C5  3000               	movlw	0
  2864  06C6  26E9               	fcall	_nrf24l01Send
  2865  06C7  0020               	movlb	0	; select bank0
  2866  06C8  00A0               	movwf	??_nrf24l01SetTransmitMode
  2867  06C9  0820               	movf	??_nrf24l01SetTransmitMode,w
  2868  06CA  00A1               	movwf	nrf24l01SetTransmitMode@config
  2869                           
  2870                           ;nrf24l01.c: 68: if (config.PRIM_RX == 1){
  2871  06CB  1C21               	btfss	nrf24l01SetTransmitMode@config,0
  2872  06CC  0008               	return
  2873                           
  2874                           ;nrf24l01.c: 69: config.PRIM_RX = 0;
  2875  06CD  1021               	bcf	nrf24l01SetTransmitMode@config,0
  2876                           
  2877                           ;nrf24l01.c: 70: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2878  06CE  0821               	movf	nrf24l01SetTransmitMode@config,w
  2879  06CF  00A0               	movwf	??_nrf24l01SetTransmitMode
  2880  06D0  0820               	movf	??_nrf24l01SetTransmitMode,w
  2881  06D1  00F1               	movwf	nrf24l01Send@data
  2882  06D2  3020               	movlw	32
  2883  06D3  26E9               	fcall	_nrf24l01Send
  2884                           
  2885                           ;nrf24l01.c: 71: _delay((unsigned long)((130)*(16000000/4000000.0)));
  2886  06D4  30AD               	movlw	173
  2887  06D5                     u1627:	
  2888  06D5  0B89               	decfsz	9,f
  2889  06D6  2ED5               	goto	u1627
  2890  06D7  0000               	nop
  2891  06D8  0008               	return
  2892  06D9                     __end_of_nrf24l01SetTransmitMode:	
  2893                           
  2894                           	psect	text9
  2895  06A7                     __ptext9:	
  2896 ;; *************** function _nrf24l01SendFlash *****************
  2897 ;; Defined at:
  2898 ;;		line 108 in file "nrf24l01.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;  offset          1    wreg     unsigned char 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  offset          1   10[BANK0 ] unsigned char 
  2903 ;;  btye            1   12[BANK0 ] unsigned char 
  2904 ;;  i               1   11[BANK0 ] unsigned char 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  1    wreg      void 
  2907 ;; Registers used:
  2908 ;;		wreg, status,2, status,0, pclath, cstack
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMMON   BANK0   BANK1
  2914 ;;      Params:         0       0       0
  2915 ;;      Locals:         0       3       0
  2916 ;;      Temps:          0       1       0
  2917 ;;      Totals:         0       4       0
  2918 ;;Total ram usage:        4 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; Hardware stack levels required when called:    5
  2921 ;; This function calls:
  2922 ;;		_nrf24l01SPISend
  2923 ;;		_read_flashmem
  2924 ;; This function is called by:
  2925 ;;		_loop
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           
  2930                           ;psect for function _nrf24l01SendFlash
  2931  06A7                     _nrf24l01SendFlash:	
  2932                           
  2933                           ;incstack = 0
  2934                           ; Regs used in _nrf24l01SendFlash: [wreg+status,2+status,0+pclath+cstack]
  2935                           ;nrf24l01SendFlash@offset stored from wreg
  2936  06A7  0020               	movlb	0	; select bank0
  2937  06A8  00AA               	movwf	nrf24l01SendFlash@offset
  2938                           
  2939                           ;nrf24l01.c: 110: unsigned char btye = 1;
  2940  06A9  01AC               	clrf	nrf24l01SendFlash@btye
  2941  06AA  0AAC               	incf	nrf24l01SendFlash@btye,f
  2942                           
  2943                           ;nrf24l01.c: 111: unsigned char i = 0;
  2944  06AB  01AB               	clrf	nrf24l01SendFlash@i
  2945  06AC                     l1583:	
  2946                           ;nrf24l01.c: 113: while (1){
  2947                           
  2948                           
  2949                           ;nrf24l01.c: 114: btye = read_flashmem((unsigned) (offset + i));
  2950  06AC  082A               	movf	nrf24l01SendFlash@offset,w
  2951  06AD  072B               	addwf	nrf24l01SendFlash@i,w
  2952  06AE  00A0               	movwf	read_flashmem@offset
  2953  06AF  01A1               	clrf	read_flashmem@offset+1
  2954  06B0  0DA1               	rlf	read_flashmem@offset+1,f
  2955  06B1  25AE               	fcall	_read_flashmem
  2956  06B2  0020               	movlb	0	; select bank0
  2957  06B3  0820               	movf	?_read_flashmem,w
  2958  06B4  00A9               	movwf	??_nrf24l01SendFlash
  2959  06B5  0829               	movf	??_nrf24l01SendFlash,w
  2960  06B6  00AC               	movwf	nrf24l01SendFlash@btye
  2961                           
  2962                           ;nrf24l01.c: 116: if (btye == '\0'){
  2963  06B7  082C               	movf	nrf24l01SendFlash@btye,w
  2964  06B8  1903               	btfsc	3,2
  2965  06B9  0008               	return
  2966                           
  2967                           ;nrf24l01.c: 118: }
  2968                           ;nrf24l01.c: 120: nrf24l01SPISend(btye);
  2969                           
  2970                           ;nrf24l01.c: 117: break;
  2971  06BA  082C               	movf	nrf24l01SendFlash@btye,w
  2972  06BB  2706               	fcall	_nrf24l01SPISend
  2973                           
  2974                           ;nrf24l01.c: 121: i++;
  2975  06BC  3001               	movlw	1
  2976  06BD  0020               	movlb	0	; select bank0
  2977  06BE  00A9               	movwf	??_nrf24l01SendFlash
  2978  06BF  0829               	movf	??_nrf24l01SendFlash,w
  2979  06C0  07AB               	addwf	nrf24l01SendFlash@i,f
  2980  06C1  2EAC               	goto	l1583
  2981  06C2                     __end_of_nrf24l01SendFlash:	
  2982                           
  2983                           	psect	text10
  2984  05AE                     __ptext10:	
  2985 ;; *************** function _read_flashmem *****************
  2986 ;; Defined at:
  2987 ;;		line 61 in file "flash.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  offset          2    0[BANK0 ] unsigned int 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  address         2    7[BANK0 ] unsigned int 
  2992 ;;  result          2    5[BANK0 ] unsigned int 
  2993 ;; Return value:  Size  Location     Type
  2994 ;;                  2    0[BANK0 ] unsigned int 
  2995 ;; Registers used:
  2996 ;;		wreg, status,2, status,0
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMMON   BANK0   BANK1
  3002 ;;      Params:         0       2       0
  3003 ;;      Locals:         0       4       0
  3004 ;;      Temps:          0       3       0
  3005 ;;      Totals:         0       9       0
  3006 ;;Total ram usage:        9 bytes
  3007 ;; Hardware stack levels used:    1
  3008 ;; Hardware stack levels required when called:    4
  3009 ;; This function calls:
  3010 ;;		Nothing
  3011 ;; This function is called by:
  3012 ;;		_loop
  3013 ;;		_main
  3014 ;;		_nrf24l01SendFlash
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           
  3019                           ;psect for function _read_flashmem
  3020  05AE                     _read_flashmem:	
  3021                           
  3022                           ;flash.c: 63: unsigned int address;
  3023                           ;flash.c: 65: INTCONbits.GIE = 0;
  3024                           
  3025                           ;incstack = 0
  3026                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  3027  05AE  138B               	bcf	11,7	;volatile
  3028                           
  3029                           ;flash.c: 67: PMCON1 = 0x00;
  3030  05AF  0023               	movlb	3	; select bank3
  3031  05B0  0195               	clrf	21	;volatile
  3032                           
  3033                           ;flash.c: 69: address = (0x800U-32) + offset;
  3034  05B1  0020               	movlb	0	; select bank0
  3035  05B2  0820               	movf	read_flashmem@offset,w
  3036  05B3  3EE0               	addlw	224
  3037  05B4  00A7               	movwf	read_flashmem@address
  3038  05B5  3007               	movlw	7
  3039  05B6  3D21               	addwfc	read_flashmem@offset+1,w
  3040  05B7  00A8               	movwf	read_flashmem@address+1
  3041                           
  3042                           ;flash.c: 70: PMADRL = (char) (address >> 0);
  3043  05B8  0827               	movf	read_flashmem@address,w
  3044  05B9  0023               	movlb	3	; select bank3
  3045  05BA  0091               	movwf	17	;volatile
  3046                           
  3047                           ;flash.c: 71: PMADRH = (char) (address >> 8);
  3048  05BB  0020               	movlb	0	; select bank0
  3049  05BC  0828               	movf	read_flashmem@address+1,w
  3050  05BD  0023               	movlb	3	; select bank3
  3051  05BE  0092               	movwf	18	;volatile
  3052                           
  3053                           ;flash.c: 73: PMCON1bits.RD = 1;
  3054  05BF  1415               	bsf	21,0	;volatile
  3055                           
  3056                           ;flash.c: 75: __nop();
  3057  05C0  0000               	nop
  3058                           
  3059                           ;flash.c: 76: __nop();
  3060  05C1  0000               	nop
  3061                           
  3062                           ;flash.c: 78: unsigned int result = 0;
  3063  05C2  0020               	movlb	0	; select bank0
  3064  05C3  01A5               	clrf	read_flashmem@result
  3065  05C4  01A6               	clrf	read_flashmem@result+1
  3066                           
  3067                           ;flash.c: 79: result = PMDATL;
  3068  05C5  0023               	movlb	3	; select bank3
  3069  05C6  0813               	movf	19,w	;volatile
  3070  05C7  0020               	movlb	0	; select bank0
  3071  05C8  00A2               	movwf	??_read_flashmem
  3072  05C9  01A3               	clrf	??_read_flashmem+1
  3073  05CA  0822               	movf	??_read_flashmem,w
  3074  05CB  00A5               	movwf	read_flashmem@result
  3075  05CC  0823               	movf	??_read_flashmem+1,w
  3076  05CD  00A6               	movwf	read_flashmem@result+1
  3077                           
  3078                           ;flash.c: 80: result|= ( (unsigned) (PMDATH) << 8);
  3079  05CE  0023               	movlb	3	; select bank3
  3080  05CF  0814               	movf	20,w	;volatile
  3081  05D0  0020               	movlb	0	; select bank0
  3082  05D1  00A2               	movwf	??_read_flashmem
  3083  05D2  01A3               	clrf	??_read_flashmem+1
  3084  05D3  0822               	movf	??_read_flashmem,w
  3085  05D4  00A3               	movwf	??_read_flashmem+1
  3086  05D5  01A2               	clrf	??_read_flashmem
  3087  05D6  0822               	movf	??_read_flashmem,w
  3088  05D7  04A5               	iorwf	read_flashmem@result,f
  3089  05D8  0823               	movf	??_read_flashmem+1,w
  3090  05D9  04A6               	iorwf	read_flashmem@result+1,f
  3091                           
  3092                           ;flash.c: 82: INTCONbits.GIE = 1;
  3093  05DA  178B               	bsf	11,7	;volatile
  3094                           
  3095                           ;flash.c: 84: return result;
  3096  05DB  0826               	movf	read_flashmem@result+1,w
  3097  05DC  00A1               	movwf	?_read_flashmem+1
  3098  05DD  0825               	movf	read_flashmem@result,w
  3099  05DE  00A0               	movwf	?_read_flashmem
  3100  05DF  0008               	return
  3101  05E0                     __end_of_read_flashmem:	
  3102                           
  3103                           	psect	text11
  3104  06F8                     __ptext11:	
  3105 ;; *************** function _nrf24l01SendEnd *****************
  3106 ;; Defined at:
  3107 ;;		line 125 in file "nrf24l01.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;		None
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;		None
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		wreg, status,2, status,0, pclath, cstack
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMMON   BANK0   BANK1
  3121 ;;      Params:         0       0       0
  3122 ;;      Locals:         0       0       0
  3123 ;;      Temps:          0       0       0
  3124 ;;      Totals:         0       0       0
  3125 ;;Total ram usage:        0 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; Hardware stack levels required when called:    5
  3128 ;; This function calls:
  3129 ;;		_nrf24l01SPIEnd
  3130 ;; This function is called by:
  3131 ;;		_loop
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           
  3136                           ;psect for function _nrf24l01SendEnd
  3137  06F8                     _nrf24l01SendEnd:	
  3138                           
  3139                           ;nrf24l01.c: 127: nrf24l01SPIEnd();
  3140                           
  3141                           ;incstack = 0
  3142                           ; Regs used in _nrf24l01SendEnd: [wreg+status,2+status,0+pclath+cstack]
  3143  06F8  271F               	fcall	_nrf24l01SPIEnd
  3144                           
  3145                           ;nrf24l01.c: 129: PORTAbits.RA0 = 1;
  3146  06F9  0020               	movlb	0	; select bank0
  3147  06FA  140C               	bsf	12,0	;volatile
  3148  06FB  0063               	sleep	;# 
  3149                           
  3150                           ;nrf24l01.c: 133: __nop();
  3151  06FC  0000               	nop
  3152                           
  3153                           ;nrf24l01.c: 134: __nop();
  3154  06FD  0000               	nop
  3155                           
  3156                           ;nrf24l01.c: 136: PORTAbits.RA0 = 0;
  3157  06FE  0020               	movlb	0	; select bank0
  3158  06FF  100C               	bcf	12,0	;volatile
  3159                           
  3160                           ;nrf24l01.c: 138: if (!STATUSbits.nTO && !STATUSbits.nPD){
  3161  0700  1A03               	btfsc	3,4	;volatile
  3162  0701  0008               	return
  3163  0702  1983               	btfsc	3,3	;volatile
  3164  0703  0008               	return
  3165  0704  0001               	reset	;# 
  3166  0705  0008               	return
  3167  0706                     __end_of_nrf24l01SendEnd:	
  3168                           
  3169                           	psect	text12
  3170  0684                     __ptext12:	
  3171 ;; *************** function _itoa *****************
  3172 ;; Defined at:
  3173 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;  buf             1    wreg     PTR unsigned char 
  3176 ;;		 -> byte(3), buffer(6), 
  3177 ;;  val             2   17[BANK0 ] int 
  3178 ;;  base            2   19[BANK0 ] int 
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;  buf             1   23[BANK0 ] PTR unsigned char 
  3181 ;;		 -> byte(3), buffer(6), 
  3182 ;;  cp              1   22[BANK0 ] PTR unsigned char 
  3183 ;;		 -> byte(3), buffer(6), 
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      PTR unsigned char 
  3186 ;; Registers used:
  3187 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMMON   BANK0   BANK1
  3193 ;;      Params:         0       4       0
  3194 ;;      Locals:         0       2       0
  3195 ;;      Temps:          0       1       0
  3196 ;;      Totals:         0       7       0
  3197 ;;Total ram usage:        7 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    6
  3200 ;; This function calls:
  3201 ;;		_utoa
  3202 ;; This function is called by:
  3203 ;;		_loop
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           
  3208                           ;psect for function _itoa
  3209  0684                     _itoa:	
  3210                           
  3211                           ;incstack = 0
  3212                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3213                           ;itoa@buf stored from wreg
  3214  0684  0020               	movlb	0	; select bank0
  3215  0685  00B7               	movwf	itoa@buf
  3216  0686  0837               	movf	itoa@buf,w
  3217  0687  00B5               	movwf	??_itoa
  3218  0688  0835               	movf	??_itoa,w
  3219  0689  00B6               	movwf	itoa@cp
  3220  068A  1FB2               	btfss	itoa@val+1,7
  3221  068B  2E9C               	goto	l1573
  3222  068C  302D               	movlw	45
  3223  068D  00B5               	movwf	??_itoa
  3224  068E  0837               	movf	itoa@buf,w
  3225  068F  0086               	movwf	6
  3226  0690  0187               	clrf	7
  3227  0691  0835               	movf	??_itoa,w
  3228  0692  0081               	movwf	1
  3229  0693  3001               	movlw	1
  3230  0694  00B5               	movwf	??_itoa
  3231  0695  0835               	movf	??_itoa,w
  3232  0696  07B7               	addwf	itoa@buf,f
  3233  0697  09B1               	comf	itoa@val,f
  3234  0698  09B2               	comf	itoa@val+1,f
  3235  0699  0AB1               	incf	itoa@val,f
  3236  069A  1903               	skipnz
  3237  069B  0AB2               	incf	itoa@val+1,f
  3238  069C                     l1573:	
  3239  069C  0832               	movf	itoa@val+1,w
  3240  069D  00A9               	movwf	utoa@val+1
  3241  069E  0831               	movf	itoa@val,w
  3242  069F  00A8               	movwf	utoa@val
  3243  06A0  0834               	movf	itoa@base+1,w
  3244  06A1  00AB               	movwf	utoa@base+1
  3245  06A2  0833               	movf	itoa@base,w
  3246  06A3  00AA               	movwf	utoa@base
  3247  06A4  0837               	movf	itoa@buf,w
  3248  06A5  24A5               	fcall	_utoa
  3249  06A6  0008               	return
  3250  06A7                     __end_of_itoa:	
  3251                           ;	Return value of _itoa is never used
  3252                           
  3253                           
  3254                           	psect	text13
  3255  04A5                     __ptext13:	
  3256 ;; *************** function _utoa *****************
  3257 ;; Defined at:
  3258 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  buf             1    wreg     PTR unsigned char 
  3261 ;;		 -> byte(3), buffer(6), 
  3262 ;;  val             2    8[BANK0 ] unsigned int 
  3263 ;;  base            2   10[BANK0 ] int 
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  3266 ;;		 -> byte(3), buffer(6), 
  3267 ;;  v               2   13[BANK0 ] unsigned int 
  3268 ;;  c               1   15[BANK0 ] unsigned char 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      PTR unsigned char 
  3271 ;; Registers used:
  3272 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMMON   BANK0   BANK1
  3278 ;;      Params:         0       4       0
  3279 ;;      Locals:         0       4       0
  3280 ;;      Temps:          0       1       0
  3281 ;;      Totals:         0       9       0
  3282 ;;Total ram usage:        9 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    5
  3285 ;; This function calls:
  3286 ;;		___lwdiv
  3287 ;;		___lwmod
  3288 ;; This function is called by:
  3289 ;;		_itoa
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           
  3294                           ;psect for function _utoa
  3295  04A5                     _utoa:	
  3296                           
  3297                           ;incstack = 0
  3298                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3299                           ;utoa@buf stored from wreg
  3300  04A5  0020               	movlb	0	; select bank0
  3301  04A6  00B0               	movwf	utoa@buf
  3302  04A7  0829               	movf	utoa@val+1,w
  3303  04A8  00AE               	movwf	utoa@v+1
  3304  04A9  0828               	movf	utoa@val,w
  3305  04AA  00AD               	movwf	utoa@v
  3306  04AB                     l1523:	
  3307  04AB  082B               	movf	utoa@base+1,w
  3308  04AC  00A1               	movwf	___lwdiv@divisor+1
  3309  04AD  082A               	movf	utoa@base,w
  3310  04AE  00A0               	movwf	___lwdiv@divisor
  3311  04AF  082E               	movf	utoa@v+1,w
  3312  04B0  00A3               	movwf	___lwdiv@dividend+1
  3313  04B1  082D               	movf	utoa@v,w
  3314  04B2  00A2               	movwf	___lwdiv@dividend
  3315  04B3  2579               	fcall	___lwdiv
  3316  04B4  0020               	movlb	0	; select bank0
  3317  04B5  0821               	movf	?___lwdiv+1,w
  3318  04B6  00AE               	movwf	utoa@v+1
  3319  04B7  0820               	movf	?___lwdiv,w
  3320  04B8  00AD               	movwf	utoa@v
  3321  04B9  3001               	movlw	1
  3322  04BA  00AC               	movwf	??_utoa
  3323  04BB  082C               	movf	??_utoa,w
  3324  04BC  07B0               	addwf	utoa@buf,f
  3325  04BD  082D               	movf	utoa@v,w
  3326  04BE  042E               	iorwf	utoa@v+1,w
  3327  04BF  1D03               	btfss	3,2
  3328  04C0  2CAB               	goto	l1523
  3329  04C1  0830               	movf	utoa@buf,w
  3330  04C2  0086               	movwf	6
  3331  04C3  0187               	clrf	7
  3332  04C4  0181               	clrf	1
  3333  04C5  3001               	movlw	1
  3334  04C6  02B0               	subwf	utoa@buf,f
  3335  04C7                     l1533:	
  3336  04C7  082B               	movf	utoa@base+1,w
  3337  04C8  00A1               	movwf	___lwmod@divisor+1
  3338  04C9  082A               	movf	utoa@base,w
  3339  04CA  00A0               	movwf	___lwmod@divisor
  3340  04CB  0829               	movf	utoa@val+1,w
  3341  04CC  00A3               	movwf	___lwmod@dividend+1
  3342  04CD  0828               	movf	utoa@val,w
  3343  04CE  00A2               	movwf	___lwmod@dividend
  3344  04CF  260E               	fcall	___lwmod
  3345  04D0  0020               	movlb	0	; select bank0
  3346  04D1  0820               	movf	?___lwmod,w
  3347  04D2  00AC               	movwf	??_utoa
  3348  04D3  082C               	movf	??_utoa,w
  3349  04D4  00AF               	movwf	utoa@c
  3350  04D5  082B               	movf	utoa@base+1,w
  3351  04D6  00A1               	movwf	___lwdiv@divisor+1
  3352  04D7  082A               	movf	utoa@base,w
  3353  04D8  00A0               	movwf	___lwdiv@divisor
  3354  04D9  0829               	movf	utoa@val+1,w
  3355  04DA  00A3               	movwf	___lwdiv@dividend+1
  3356  04DB  0828               	movf	utoa@val,w
  3357  04DC  00A2               	movwf	___lwdiv@dividend
  3358  04DD  2579               	fcall	___lwdiv
  3359  04DE  0020               	movlb	0	; select bank0
  3360  04DF  0821               	movf	?___lwdiv+1,w
  3361  04E0  00A9               	movwf	utoa@val+1
  3362  04E1  0820               	movf	?___lwdiv,w
  3363  04E2  00A8               	movwf	utoa@val
  3364  04E3  300A               	movlw	10
  3365  04E4  022F               	subwf	utoa@c,w
  3366  04E5  1C03               	skipc
  3367  04E6  2CEB               	goto	l504
  3368  04E7  3007               	movlw	7
  3369  04E8  00AC               	movwf	??_utoa
  3370  04E9  082C               	movf	??_utoa,w
  3371  04EA  07AF               	addwf	utoa@c,f
  3372  04EB                     l504:	
  3373  04EB  3030               	movlw	48
  3374  04EC  00AC               	movwf	??_utoa
  3375  04ED  082C               	movf	??_utoa,w
  3376  04EE  07AF               	addwf	utoa@c,f
  3377  04EF  082F               	movf	utoa@c,w
  3378  04F0  00AC               	movwf	??_utoa
  3379  04F1  0830               	movf	utoa@buf,w
  3380  04F2  0086               	movwf	6
  3381  04F3  0187               	clrf	7
  3382  04F4  082C               	movf	??_utoa,w
  3383  04F5  0081               	movwf	1
  3384  04F6  3001               	movlw	1
  3385  04F7  02B0               	subwf	utoa@buf,f
  3386  04F8  0828               	movf	utoa@val,w
  3387  04F9  0429               	iorwf	utoa@val+1,w
  3388  04FA  1D03               	btfss	3,2
  3389  04FB  2CC7               	goto	l1533
  3390                           
  3391                           ;	Return value of _utoa is never used
  3392  04FC  3001               	movlw	1
  3393  04FD  00AC               	movwf	??_utoa
  3394  04FE  082C               	movf	??_utoa,w
  3395  04FF  07B0               	addwf	utoa@buf,f
  3396  0500  0008               	return
  3397  0501                     __end_of_utoa:	
  3398                           
  3399                           	psect	text14
  3400  060E                     __ptext14:	
  3401 ;; *************** function ___lwmod *****************
  3402 ;; Defined at:
  3403 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;  divisor         2    0[BANK0 ] unsigned int 
  3406 ;;  dividend        2    2[BANK0 ] unsigned int 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  counter         1    5[BANK0 ] unsigned char 
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  2    0[BANK0 ] unsigned int 
  3411 ;; Registers used:
  3412 ;;		wreg, status,2, status,0
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMMON   BANK0   BANK1
  3418 ;;      Params:         0       4       0
  3419 ;;      Locals:         0       1       0
  3420 ;;      Temps:          0       1       0
  3421 ;;      Totals:         0       6       0
  3422 ;;Total ram usage:        6 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    4
  3425 ;; This function calls:
  3426 ;;		Nothing
  3427 ;; This function is called by:
  3428 ;;		_utoa
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           
  3433                           ;psect for function ___lwmod
  3434  060E                     ___lwmod:	
  3435                           
  3436                           ;incstack = 0
  3437                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3438  060E  0020               	movlb	0	; select bank0
  3439  060F  0820               	movf	___lwmod@divisor,w
  3440  0610  0421               	iorwf	___lwmod@divisor+1,w
  3441  0611  1903               	btfsc	3,2
  3442  0612  2E36               	goto	l1431
  3443  0613  01A5               	clrf	___lwmod@counter
  3444  0614  0AA5               	incf	___lwmod@counter,f
  3445  0615                     l1421:	
  3446  0615  1BA1               	btfsc	___lwmod@divisor+1,7
  3447  0616  2E21               	goto	l1423
  3448  0617  3001               	movlw	1
  3449  0618                     u875:	
  3450  0618  35A0               	lslf	___lwmod@divisor,f
  3451  0619  0DA1               	rlf	___lwmod@divisor+1,f
  3452  061A  0B89               	decfsz	9,f
  3453  061B  2E18               	goto	u875
  3454  061C  3001               	movlw	1
  3455  061D  00A4               	movwf	??___lwmod
  3456  061E  0824               	movf	??___lwmod,w
  3457  061F  07A5               	addwf	___lwmod@counter,f
  3458  0620  2E15               	goto	l1421
  3459  0621                     l1423:	
  3460  0621  0821               	movf	___lwmod@divisor+1,w
  3461  0622  0223               	subwf	___lwmod@dividend+1,w
  3462  0623  1D03               	skipz
  3463  0624  2E27               	goto	u895
  3464  0625  0820               	movf	___lwmod@divisor,w
  3465  0626  0222               	subwf	___lwmod@dividend,w
  3466  0627                     u895:	
  3467  0627  1C03               	skipc
  3468  0628  2E2D               	goto	l1427
  3469  0629  0820               	movf	___lwmod@divisor,w
  3470  062A  02A2               	subwf	___lwmod@dividend,f
  3471  062B  0821               	movf	___lwmod@divisor+1,w
  3472  062C  3BA3               	subwfb	___lwmod@dividend+1,f
  3473  062D                     l1427:	
  3474  062D  3001               	movlw	1
  3475  062E                     u905:	
  3476  062E  36A1               	lsrf	___lwmod@divisor+1,f
  3477  062F  0CA0               	rrf	___lwmod@divisor,f
  3478  0630  0B89               	decfsz	9,f
  3479  0631  2E2E               	goto	u905
  3480  0632  3001               	movlw	1
  3481  0633  02A5               	subwf	___lwmod@counter,f
  3482  0634  1D03               	btfss	3,2
  3483  0635  2E21               	goto	l1423
  3484  0636                     l1431:	
  3485  0636  0823               	movf	___lwmod@dividend+1,w
  3486  0637  00A1               	movwf	?___lwmod+1
  3487  0638  0822               	movf	___lwmod@dividend,w
  3488  0639  00A0               	movwf	?___lwmod
  3489  063A  0008               	return
  3490  063B                     __end_of___lwmod:	
  3491                           
  3492                           	psect	text15
  3493  0579                     __ptext15:	
  3494 ;; *************** function ___lwdiv *****************
  3495 ;; Defined at:
  3496 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;  divisor         2    0[BANK0 ] unsigned int 
  3499 ;;  dividend        2    2[BANK0 ] unsigned int 
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;  quotient        2    5[BANK0 ] unsigned int 
  3502 ;;  counter         1    7[BANK0 ] unsigned char 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  2    0[BANK0 ] unsigned int 
  3505 ;; Registers used:
  3506 ;;		wreg, status,2, status,0
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMMON   BANK0   BANK1
  3512 ;;      Params:         0       4       0
  3513 ;;      Locals:         0       3       0
  3514 ;;      Temps:          0       1       0
  3515 ;;      Totals:         0       8       0
  3516 ;;Total ram usage:        8 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    4
  3519 ;; This function calls:
  3520 ;;		Nothing
  3521 ;; This function is called by:
  3522 ;;		_utoa
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           
  3527                           ;psect for function ___lwdiv
  3528  0579                     ___lwdiv:	
  3529                           
  3530                           ;incstack = 0
  3531                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3532  0579  0020               	movlb	0	; select bank0
  3533  057A  01A5               	clrf	___lwdiv@quotient
  3534  057B  01A6               	clrf	___lwdiv@quotient+1
  3535  057C  0820               	movf	___lwdiv@divisor,w
  3536  057D  0421               	iorwf	___lwdiv@divisor+1,w
  3537  057E  1903               	btfsc	3,2
  3538  057F  2DA9               	goto	l1409
  3539  0580  01A7               	clrf	___lwdiv@counter
  3540  0581  0AA7               	incf	___lwdiv@counter,f
  3541  0582                     l1397:	
  3542  0582  1BA1               	btfsc	___lwdiv@divisor+1,7
  3543  0583  2D8E               	goto	l1399
  3544  0584  3001               	movlw	1
  3545  0585                     u805:	
  3546  0585  35A0               	lslf	___lwdiv@divisor,f
  3547  0586  0DA1               	rlf	___lwdiv@divisor+1,f
  3548  0587  0B89               	decfsz	9,f
  3549  0588  2D85               	goto	u805
  3550  0589  3001               	movlw	1
  3551  058A  00A4               	movwf	??___lwdiv
  3552  058B  0824               	movf	??___lwdiv,w
  3553  058C  07A7               	addwf	___lwdiv@counter,f
  3554  058D  2D82               	goto	l1397
  3555  058E                     l1399:	
  3556  058E  3001               	movlw	1
  3557  058F                     u825:	
  3558  058F  35A5               	lslf	___lwdiv@quotient,f
  3559  0590  0DA6               	rlf	___lwdiv@quotient+1,f
  3560  0591  0B89               	decfsz	9,f
  3561  0592  2D8F               	goto	u825
  3562  0593  0821               	movf	___lwdiv@divisor+1,w
  3563  0594  0223               	subwf	___lwdiv@dividend+1,w
  3564  0595  1D03               	skipz
  3565  0596  2D99               	goto	u835
  3566  0597  0820               	movf	___lwdiv@divisor,w
  3567  0598  0222               	subwf	___lwdiv@dividend,w
  3568  0599                     u835:	
  3569  0599  1C03               	skipc
  3570  059A  2DA0               	goto	l1405
  3571  059B  0820               	movf	___lwdiv@divisor,w
  3572  059C  02A2               	subwf	___lwdiv@dividend,f
  3573  059D  0821               	movf	___lwdiv@divisor+1,w
  3574  059E  3BA3               	subwfb	___lwdiv@dividend+1,f
  3575  059F  1425               	bsf	___lwdiv@quotient,0
  3576  05A0                     l1405:	
  3577  05A0  3001               	movlw	1
  3578  05A1                     u845:	
  3579  05A1  36A1               	lsrf	___lwdiv@divisor+1,f
  3580  05A2  0CA0               	rrf	___lwdiv@divisor,f
  3581  05A3  0B89               	decfsz	9,f
  3582  05A4  2DA1               	goto	u845
  3583  05A5  3001               	movlw	1
  3584  05A6  02A7               	subwf	___lwdiv@counter,f
  3585  05A7  1D03               	btfss	3,2
  3586  05A8  2D8E               	goto	l1399
  3587  05A9                     l1409:	
  3588  05A9  0826               	movf	___lwdiv@quotient+1,w
  3589  05AA  00A1               	movwf	?___lwdiv+1
  3590  05AB  0825               	movf	___lwdiv@quotient,w
  3591  05AC  00A0               	movwf	?___lwdiv
  3592  05AD  0008               	return
  3593  05AE                     __end_of___lwdiv:	
  3594                           
  3595                           	psect	text16
  3596  025D                     __ptext16:	
  3597 ;; *************** function ___fttol *****************
  3598 ;; Defined at:
  3599 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;  f1              3   32[BANK0 ] float 
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;  lval            4   41[BANK0 ] unsigned long 
  3604 ;;  exp1            1   45[BANK0 ] unsigned char 
  3605 ;;  sign1           1   40[BANK0 ] unsigned char 
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  4   32[BANK0 ] long 
  3608 ;; Registers used:
  3609 ;;		wreg, status,2, status,0
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMMON   BANK0   BANK1
  3615 ;;      Params:         0       4       0
  3616 ;;      Locals:         0       6       0
  3617 ;;      Temps:          0       4       0
  3618 ;;      Totals:         0      14       0
  3619 ;;Total ram usage:       14 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:    4
  3622 ;; This function calls:
  3623 ;;		Nothing
  3624 ;; This function is called by:
  3625 ;;		_loop
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           
  3630                           ;psect for function ___fttol
  3631  025D                     ___fttol:	
  3632                           
  3633                           ;incstack = 0
  3634                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3635  025D  0020               	movlb	0	; select bank0
  3636  025E  0840               	movf	___fttol@f1,w
  3637  025F  00C4               	movwf	??___fttol
  3638  0260  0841               	movf	___fttol@f1+1,w
  3639  0261  00C5               	movwf	??___fttol+1
  3640  0262  0842               	movf	___fttol@f1+2,w
  3641  0263  00C6               	movwf	??___fttol+2
  3642  0264  1003               	clrc
  3643  0265  0D45               	rlf	??___fttol+1,w
  3644  0266  0D46               	rlf	??___fttol+2,w
  3645  0267  00C7               	movwf	??___fttol+3
  3646  0268  0847               	movf	??___fttol+3,w
  3647  0269  00CD               	movwf	___fttol@exp1
  3648  026A  084D               	movf	___fttol@exp1,w
  3649  026B  1D03               	btfss	3,2
  3650  026C  2A76               	goto	l1815
  3651  026D  3000               	movlw	0
  3652  026E  00C3               	movwf	?___fttol+3
  3653  026F  3000               	movlw	0
  3654  0270  00C2               	movwf	?___fttol+2
  3655  0271  3000               	movlw	0
  3656  0272  00C1               	movwf	?___fttol+1
  3657  0273  3000               	movlw	0
  3658  0274  00C0               	movwf	?___fttol
  3659  0275  0008               	return
  3660  0276                     l1815:	
  3661  0276  0840               	movf	___fttol@f1,w
  3662  0277  00C4               	movwf	??___fttol
  3663  0278  0841               	movf	___fttol@f1+1,w
  3664  0279  00C5               	movwf	??___fttol+1
  3665  027A  0842               	movf	___fttol@f1+2,w
  3666  027B  00C6               	movwf	??___fttol+2
  3667  027C  3017               	movlw	23
  3668  027D                     u1375:	
  3669  027D  36C6               	lsrf	??___fttol+2,f
  3670  027E  0CC5               	rrf	??___fttol+1,f
  3671  027F  0CC4               	rrf	??___fttol,f
  3672  0280  0B89               	decfsz	9,f
  3673  0281  2A7D               	goto	u1375
  3674  0282  0844               	movf	??___fttol,w
  3675  0283  00C7               	movwf	??___fttol+3
  3676  0284  0847               	movf	??___fttol+3,w
  3677  0285  00C8               	movwf	___fttol@sign1
  3678  0286  17C1               	bsf	___fttol@f1+1,7
  3679  0287  30FF               	movlw	255
  3680  0288  05C0               	andwf	___fttol@f1,f
  3681  0289  30FF               	movlw	255
  3682  028A  05C1               	andwf	___fttol@f1+1,f
  3683  028B  3000               	movlw	0
  3684  028C  05C2               	andwf	___fttol@f1+2,f
  3685  028D  0840               	movf	___fttol@f1,w
  3686  028E  00C9               	movwf	___fttol@lval
  3687  028F  0841               	movf	___fttol@f1+1,w
  3688  0290  00CA               	movwf	___fttol@lval+1
  3689  0291  0842               	movf	___fttol@f1+2,w
  3690  0292  00CB               	movwf	___fttol@lval+2
  3691  0293  01CC               	clrf	___fttol@lval+3
  3692  0294  308E               	movlw	142
  3693  0295  02CD               	subwf	___fttol@exp1,f
  3694  0296  1FCD               	btfss	___fttol@exp1,7
  3695  0297  2AB4               	goto	l1835
  3696  0298  084D               	movf	___fttol@exp1,w
  3697  0299  3A80               	xorlw	128
  3698  029A  3E8F               	addlw	143
  3699  029B  1803               	skipnc
  3700  029C  2AA6               	goto	l1833
  3701  029D  3000               	movlw	0
  3702  029E  00C3               	movwf	?___fttol+3
  3703  029F  3000               	movlw	0
  3704  02A0  00C2               	movwf	?___fttol+2
  3705  02A1  3000               	movlw	0
  3706  02A2  00C1               	movwf	?___fttol+1
  3707  02A3  3000               	movlw	0
  3708  02A4  00C0               	movwf	?___fttol
  3709  02A5  0008               	return
  3710  02A6                     l1833:	
  3711  02A6  3001               	movlw	1
  3712  02A7                     u1405:	
  3713  02A7  36CC               	lsrf	___fttol@lval+3,f
  3714  02A8  0CCB               	rrf	___fttol@lval+2,f
  3715  02A9  0CCA               	rrf	___fttol@lval+1,f
  3716  02AA  0CC9               	rrf	___fttol@lval,f
  3717  02AB  0B89               	decfsz	9,f
  3718  02AC  2AA7               	goto	u1405
  3719  02AD  3001               	movlw	1
  3720  02AE  00C4               	movwf	??___fttol
  3721  02AF  0844               	movf	??___fttol,w
  3722  02B0  07CD               	addwf	___fttol@exp1,f
  3723  02B1  1903               	btfsc	3,2
  3724  02B2  2ACD               	goto	l1843
  3725  02B3  2AA6               	goto	l1833
  3726  02B4                     l1835:	
  3727  02B4  3018               	movlw	24
  3728  02B5  024D               	subwf	___fttol@exp1,w
  3729  02B6  1C03               	skipc
  3730  02B7  2ACA               	goto	l489
  3731  02B8  3000               	movlw	0
  3732  02B9  00C3               	movwf	?___fttol+3
  3733  02BA  3000               	movlw	0
  3734  02BB  00C2               	movwf	?___fttol+2
  3735  02BC  3000               	movlw	0
  3736  02BD  00C1               	movwf	?___fttol+1
  3737  02BE  3000               	movlw	0
  3738  02BF  00C0               	movwf	?___fttol
  3739  02C0  0008               	return
  3740  02C1                     l1841:	
  3741  02C1  3001               	movlw	1
  3742  02C2                     u1435:	
  3743  02C2  35C9               	lslf	___fttol@lval,f
  3744  02C3  0DCA               	rlf	___fttol@lval+1,f
  3745  02C4  0DCB               	rlf	___fttol@lval+2,f
  3746  02C5  0DCC               	rlf	___fttol@lval+3,f
  3747  02C6  0B89               	decfsz	9,f
  3748  02C7  2AC2               	goto	u1435
  3749  02C8  3001               	movlw	1
  3750  02C9  02CD               	subwf	___fttol@exp1,f
  3751  02CA                     l489:	
  3752  02CA  084D               	movf	___fttol@exp1,w
  3753  02CB  1D03               	btfss	3,2
  3754  02CC  2AC1               	goto	l1841
  3755  02CD                     l1843:	
  3756  02CD  0848               	movf	___fttol@sign1,w
  3757  02CE  1903               	btfsc	3,2
  3758  02CF  2ADB               	goto	l1847
  3759  02D0  09C9               	comf	___fttol@lval,f
  3760  02D1  09CA               	comf	___fttol@lval+1,f
  3761  02D2  09CB               	comf	___fttol@lval+2,f
  3762  02D3  09CC               	comf	___fttol@lval+3,f
  3763  02D4  0AC9               	incf	___fttol@lval,f
  3764  02D5  1903               	skipnz
  3765  02D6  0ACA               	incf	___fttol@lval+1,f
  3766  02D7  1903               	skipnz
  3767  02D8  0ACB               	incf	___fttol@lval+2,f
  3768  02D9  1903               	skipnz
  3769  02DA  0ACC               	incf	___fttol@lval+3,f
  3770  02DB                     l1847:	
  3771  02DB  084C               	movf	___fttol@lval+3,w
  3772  02DC  00C3               	movwf	?___fttol+3
  3773  02DD  084B               	movf	___fttol@lval+2,w
  3774  02DE  00C2               	movwf	?___fttol+2
  3775  02DF  084A               	movf	___fttol@lval+1,w
  3776  02E0  00C1               	movwf	?___fttol+1
  3777  02E1  0849               	movf	___fttol@lval,w
  3778  02E2  00C0               	movwf	?___fttol
  3779  02E3  0008               	return
  3780  02E4                     __end_of___fttol:	
  3781                           
  3782                           	psect	text17
  3783  01B5                     __ptext17:	
  3784 ;; *************** function ___ftdiv *****************
  3785 ;; Defined at:
  3786 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  f2              3   16[BANK0 ] float 
  3789 ;;  f1              3   19[BANK0 ] float 
  3790 ;; Auto vars:     Size  Location     Type
  3791 ;;  f3              3   27[BANK0 ] float 
  3792 ;;  sign            1   31[BANK0 ] unsigned char 
  3793 ;;  exp             1   30[BANK0 ] unsigned char 
  3794 ;;  cntr            1   26[BANK0 ] unsigned char 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  3   16[BANK0 ] float 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0, pclath, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMMON   BANK0   BANK1
  3804 ;;      Params:         0       6       0
  3805 ;;      Locals:         0       6       0
  3806 ;;      Temps:          0       4       0
  3807 ;;      Totals:         0      16       0
  3808 ;;Total ram usage:       16 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    5
  3811 ;; This function calls:
  3812 ;;		___ftpack
  3813 ;; This function is called by:
  3814 ;;		_loop
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           
  3819                           ;psect for function ___ftdiv
  3820  01B5                     ___ftdiv:	
  3821                           
  3822                           ;incstack = 0
  3823                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3824  01B5  0020               	movlb	0	; select bank0
  3825  01B6  0833               	movf	___ftdiv@f1,w
  3826  01B7  00B6               	movwf	??___ftdiv
  3827  01B8  0834               	movf	___ftdiv@f1+1,w
  3828  01B9  00B7               	movwf	??___ftdiv+1
  3829  01BA  0835               	movf	___ftdiv@f1+2,w
  3830  01BB  00B8               	movwf	??___ftdiv+2
  3831  01BC  1003               	clrc
  3832  01BD  0D37               	rlf	??___ftdiv+1,w
  3833  01BE  0D38               	rlf	??___ftdiv+2,w
  3834  01BF  00B9               	movwf	??___ftdiv+3
  3835  01C0  0839               	movf	??___ftdiv+3,w
  3836  01C1  00BE               	movwf	___ftdiv@exp
  3837  01C2  083E               	movf	___ftdiv@exp,w
  3838  01C3  1D03               	btfss	3,2
  3839  01C4  29CC               	goto	l1773
  3840  01C5  3000               	movlw	0
  3841  01C6  00B0               	movwf	?___ftdiv
  3842  01C7  3000               	movlw	0
  3843  01C8  00B1               	movwf	?___ftdiv+1
  3844  01C9  3000               	movlw	0
  3845  01CA  00B2               	movwf	?___ftdiv+2
  3846  01CB  0008               	return
  3847  01CC                     l1773:	
  3848  01CC  0830               	movf	___ftdiv@f2,w
  3849  01CD  00B6               	movwf	??___ftdiv
  3850  01CE  0831               	movf	___ftdiv@f2+1,w
  3851  01CF  00B7               	movwf	??___ftdiv+1
  3852  01D0  0832               	movf	___ftdiv@f2+2,w
  3853  01D1  00B8               	movwf	??___ftdiv+2
  3854  01D2  1003               	clrc
  3855  01D3  0D37               	rlf	??___ftdiv+1,w
  3856  01D4  0D38               	rlf	??___ftdiv+2,w
  3857  01D5  00B9               	movwf	??___ftdiv+3
  3858  01D6  0839               	movf	??___ftdiv+3,w
  3859  01D7  00BF               	movwf	___ftdiv@sign
  3860  01D8  083F               	movf	___ftdiv@sign,w
  3861  01D9  1D03               	btfss	3,2
  3862  01DA  29E2               	goto	l1779
  3863  01DB  3000               	movlw	0
  3864  01DC  00B0               	movwf	?___ftdiv
  3865  01DD  3000               	movlw	0
  3866  01DE  00B1               	movwf	?___ftdiv+1
  3867  01DF  3000               	movlw	0
  3868  01E0  00B2               	movwf	?___ftdiv+2
  3869  01E1  0008               	return
  3870  01E2                     l1779:	
  3871  01E2  3000               	movlw	0
  3872  01E3  00BB               	movwf	___ftdiv@f3
  3873  01E4  3000               	movlw	0
  3874  01E5  00BC               	movwf	___ftdiv@f3+1
  3875  01E6  3000               	movlw	0
  3876  01E7  00BD               	movwf	___ftdiv@f3+2
  3877  01E8  3089               	movlw	137
  3878  01E9  073F               	addwf	___ftdiv@sign,w
  3879  01EA  00B6               	movwf	??___ftdiv
  3880  01EB  0836               	movf	??___ftdiv,w
  3881  01EC  02BE               	subwf	___ftdiv@exp,f
  3882  01ED  0833               	movf	___ftdiv@f1,w
  3883  01EE  00B6               	movwf	??___ftdiv
  3884  01EF  0834               	movf	___ftdiv@f1+1,w
  3885  01F0  00B7               	movwf	??___ftdiv+1
  3886  01F1  0835               	movf	___ftdiv@f1+2,w
  3887  01F2  00B8               	movwf	??___ftdiv+2
  3888  01F3  3010               	movlw	16
  3889  01F4                     u1305:	
  3890  01F4  36B8               	lsrf	??___ftdiv+2,f
  3891  01F5  0CB7               	rrf	??___ftdiv+1,f
  3892  01F6  0CB6               	rrf	??___ftdiv,f
  3893  01F7  0B89               	decfsz	9,f
  3894  01F8  29F4               	goto	u1305
  3895  01F9  0836               	movf	??___ftdiv,w
  3896  01FA  00B9               	movwf	??___ftdiv+3
  3897  01FB  0839               	movf	??___ftdiv+3,w
  3898  01FC  00BF               	movwf	___ftdiv@sign
  3899  01FD  0830               	movf	___ftdiv@f2,w
  3900  01FE  00B6               	movwf	??___ftdiv
  3901  01FF  0831               	movf	___ftdiv@f2+1,w
  3902  0200  00B7               	movwf	??___ftdiv+1
  3903  0201  0832               	movf	___ftdiv@f2+2,w
  3904  0202  00B8               	movwf	??___ftdiv+2
  3905  0203  3010               	movlw	16
  3906  0204                     u1315:	
  3907  0204  36B8               	lsrf	??___ftdiv+2,f
  3908  0205  0CB7               	rrf	??___ftdiv+1,f
  3909  0206  0CB6               	rrf	??___ftdiv,f
  3910  0207  0B89               	decfsz	9,f
  3911  0208  2A04               	goto	u1315
  3912  0209  0836               	movf	??___ftdiv,w
  3913  020A  00B9               	movwf	??___ftdiv+3
  3914  020B  0839               	movf	??___ftdiv+3,w
  3915  020C  06BF               	xorwf	___ftdiv@sign,f
  3916  020D  3080               	movlw	128
  3917  020E  00B6               	movwf	??___ftdiv
  3918  020F  0836               	movf	??___ftdiv,w
  3919  0210  05BF               	andwf	___ftdiv@sign,f
  3920  0211  17B4               	bsf	___ftdiv@f1+1,7
  3921  0212  30FF               	movlw	255
  3922  0213  05B3               	andwf	___ftdiv@f1,f
  3923  0214  30FF               	movlw	255
  3924  0215  05B4               	andwf	___ftdiv@f1+1,f
  3925  0216  3000               	movlw	0
  3926  0217  05B5               	andwf	___ftdiv@f1+2,f
  3927  0218  17B1               	bsf	___ftdiv@f2+1,7
  3928  0219  30FF               	movlw	255
  3929  021A  05B0               	andwf	___ftdiv@f2,f
  3930  021B  30FF               	movlw	255
  3931  021C  05B1               	andwf	___ftdiv@f2+1,f
  3932  021D  3000               	movlw	0
  3933  021E  05B2               	andwf	___ftdiv@f2+2,f
  3934  021F  3018               	movlw	24
  3935  0220  00B6               	movwf	??___ftdiv
  3936  0221  0836               	movf	??___ftdiv,w
  3937  0222  00BA               	movwf	___ftdiv@cntr
  3938  0223                     l1793:	
  3939  0223  3001               	movlw	1
  3940  0224                     u1325:	
  3941  0224  35BB               	lslf	___ftdiv@f3,f
  3942  0225  0DBC               	rlf	___ftdiv@f3+1,f
  3943  0226  0DBD               	rlf	___ftdiv@f3+2,f
  3944  0227  0B89               	decfsz	9,f
  3945  0228  2A24               	goto	u1325
  3946  0229  0832               	movf	___ftdiv@f2+2,w
  3947  022A  0235               	subwf	___ftdiv@f1+2,w
  3948  022B  1D03               	skipz
  3949  022C  2A33               	goto	u1335
  3950  022D  0831               	movf	___ftdiv@f2+1,w
  3951  022E  0234               	subwf	___ftdiv@f1+1,w
  3952  022F  1D03               	skipz
  3953  0230  2A33               	goto	u1335
  3954  0231  0830               	movf	___ftdiv@f2,w
  3955  0232  0233               	subwf	___ftdiv@f1,w
  3956  0233                     u1335:	
  3957  0233  1C03               	skipc
  3958  0234  2A3C               	goto	l1801
  3959  0235  0830               	movf	___ftdiv@f2,w
  3960  0236  02B3               	subwf	___ftdiv@f1,f
  3961  0237  0831               	movf	___ftdiv@f2+1,w
  3962  0238  3BB4               	subwfb	___ftdiv@f1+1,f
  3963  0239  0832               	movf	___ftdiv@f2+2,w
  3964  023A  3BB5               	subwfb	___ftdiv@f1+2,f
  3965  023B  143B               	bsf	___ftdiv@f3,0
  3966  023C                     l1801:	
  3967  023C  3001               	movlw	1
  3968  023D                     u1345:	
  3969  023D  35B3               	lslf	___ftdiv@f1,f
  3970  023E  0DB4               	rlf	___ftdiv@f1+1,f
  3971  023F  0DB5               	rlf	___ftdiv@f1+2,f
  3972  0240  0B89               	decfsz	9,f
  3973  0241  2A3D               	goto	u1345
  3974  0242  3001               	movlw	1
  3975  0243  02BA               	subwf	___ftdiv@cntr,f
  3976  0244  1D03               	btfss	3,2
  3977  0245  2A23               	goto	l1793
  3978  0246  083B               	movf	___ftdiv@f3,w
  3979  0247  00A0               	movwf	___ftpack@arg
  3980  0248  083C               	movf	___ftdiv@f3+1,w
  3981  0249  00A1               	movwf	___ftpack@arg+1
  3982  024A  083D               	movf	___ftdiv@f3+2,w
  3983  024B  00A2               	movwf	___ftpack@arg+2
  3984  024C  083E               	movf	___ftdiv@exp,w
  3985  024D  00B6               	movwf	??___ftdiv
  3986  024E  0836               	movf	??___ftdiv,w
  3987  024F  00A3               	movwf	___ftpack@exp
  3988  0250  083F               	movf	___ftdiv@sign,w
  3989  0251  00B7               	movwf	??___ftdiv+1
  3990  0252  0837               	movf	??___ftdiv+1,w
  3991  0253  00A4               	movwf	___ftpack@sign
  3992  0254  23DD               	fcall	___ftpack
  3993  0255  0020               	movlb	0	; select bank0
  3994  0256  0820               	movf	?___ftpack,w
  3995  0257  00B0               	movwf	?___ftdiv
  3996  0258  0821               	movf	?___ftpack+1,w
  3997  0259  00B1               	movwf	?___ftdiv+1
  3998  025A  0822               	movf	?___ftpack+2,w
  3999  025B  00B2               	movwf	?___ftdiv+2
  4000  025C  0008               	return
  4001  025D                     __end_of___ftdiv:	
  4002                           
  4003                           	psect	text18
  4004  053D                     __ptext18:	
  4005 ;; *************** function ___altoft *****************
  4006 ;; Defined at:
  4007 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;  c               4    8[BANK0 ] long 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;  sign            1   15[BANK0 ] unsigned char 
  4012 ;;  exp             1   14[BANK0 ] unsigned char 
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  3    8[BANK0 ] float 
  4015 ;; Registers used:
  4016 ;;		wreg, status,2, status,0, pclath, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMMON   BANK0   BANK1
  4022 ;;      Params:         0       4       0
  4023 ;;      Locals:         0       2       0
  4024 ;;      Temps:          0       2       0
  4025 ;;      Totals:         0       8       0
  4026 ;;Total ram usage:        8 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:    5
  4029 ;; This function calls:
  4030 ;;		___ftpack
  4031 ;; This function is called by:
  4032 ;;		_loop
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           
  4037                           ;psect for function ___altoft
  4038  053D                     ___altoft:	
  4039                           
  4040                           ;incstack = 0
  4041                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  4042  053D  0020               	movlb	0	; select bank0
  4043  053E  01AF               	clrf	___altoft@sign
  4044  053F  308E               	movlw	142
  4045  0540  00AC               	movwf	??___altoft
  4046  0541  082C               	movf	??___altoft,w
  4047  0542  00AE               	movwf	___altoft@exp
  4048  0543  1FAB               	btfss	___altoft@c+3,7
  4049  0544  2D52               	goto	l1761
  4050  0545  09A8               	comf	___altoft@c,f
  4051  0546  09A9               	comf	___altoft@c+1,f
  4052  0547  09AA               	comf	___altoft@c+2,f
  4053  0548  09AB               	comf	___altoft@c+3,f
  4054  0549  0AA8               	incf	___altoft@c,f
  4055  054A  1903               	skipnz
  4056  054B  0AA9               	incf	___altoft@c+1,f
  4057  054C  1903               	skipnz
  4058  054D  0AAA               	incf	___altoft@c+2,f
  4059  054E  1903               	skipnz
  4060  054F  0AAB               	incf	___altoft@c+3,f
  4061  0550  01AF               	clrf	___altoft@sign
  4062  0551  0AAF               	incf	___altoft@sign,f
  4063  0552                     l1761:	
  4064  0552  30FF               	movlw	255
  4065  0553  052B               	andwf	___altoft@c+3,w
  4066  0554  1903               	btfsc	3,2
  4067  0555  2D62               	goto	l1763
  4068  0556  3001               	movlw	1
  4069  0557                     u1265:	
  4070  0557  36AB               	lsrf	___altoft@c+3,f
  4071  0558  0CAA               	rrf	___altoft@c+2,f
  4072  0559  0CA9               	rrf	___altoft@c+1,f
  4073  055A  0CA8               	rrf	___altoft@c,f
  4074  055B  0B89               	decfsz	9,f
  4075  055C  2D57               	goto	u1265
  4076  055D  3001               	movlw	1
  4077  055E  00AC               	movwf	??___altoft
  4078  055F  082C               	movf	??___altoft,w
  4079  0560  07AE               	addwf	___altoft@exp,f
  4080  0561  2D52               	goto	l1761
  4081  0562                     l1763:	
  4082  0562  0828               	movf	___altoft@c,w
  4083  0563  00A0               	movwf	___ftpack@arg
  4084  0564  0829               	movf	___altoft@c+1,w
  4085  0565  00A1               	movwf	___ftpack@arg+1
  4086  0566  082A               	movf	___altoft@c+2,w
  4087  0567  00A2               	movwf	___ftpack@arg+2
  4088  0568  082E               	movf	___altoft@exp,w
  4089  0569  00AC               	movwf	??___altoft
  4090  056A  082C               	movf	??___altoft,w
  4091  056B  00A3               	movwf	___ftpack@exp
  4092  056C  082F               	movf	___altoft@sign,w
  4093  056D  00AD               	movwf	??___altoft+1
  4094  056E  082D               	movf	??___altoft+1,w
  4095  056F  00A4               	movwf	___ftpack@sign
  4096  0570  23DD               	fcall	___ftpack
  4097  0571  0020               	movlb	0	; select bank0
  4098  0572  0820               	movf	?___ftpack,w
  4099  0573  00A8               	movwf	?___altoft
  4100  0574  0821               	movf	?___ftpack+1,w
  4101  0575  00A9               	movwf	?___altoft+1
  4102  0576  0822               	movf	?___ftpack+2,w
  4103  0577  00AA               	movwf	?___altoft+2
  4104  0578  0008               	return
  4105  0579                     __end_of___altoft:	
  4106                           
  4107                           	psect	text19
  4108  03DD                     __ptext19:	
  4109 ;; *************** function ___ftpack *****************
  4110 ;; Defined at:
  4111 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  4112 ;; Parameters:    Size  Location     Type
  4113 ;;  arg             3    0[BANK0 ] unsigned um
  4114 ;;  exp             1    3[BANK0 ] unsigned char 
  4115 ;;  sign            1    4[BANK0 ] unsigned char 
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;		None
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  3    0[BANK0 ] float 
  4120 ;; Registers used:
  4121 ;;		wreg, status,2, status,0
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMMON   BANK0   BANK1
  4127 ;;      Params:         0       5       0
  4128 ;;      Locals:         0       0       0
  4129 ;;      Temps:          0       3       0
  4130 ;;      Totals:         0       8       0
  4131 ;;Total ram usage:        8 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; Hardware stack levels required when called:    4
  4134 ;; This function calls:
  4135 ;;		Nothing
  4136 ;; This function is called by:
  4137 ;;		___altoft
  4138 ;;		___ftdiv
  4139 ;; This function uses a non-reentrant model
  4140 ;;
  4141                           
  4142                           
  4143                           ;psect for function ___ftpack
  4144  03DD                     ___ftpack:	
  4145                           
  4146                           ;incstack = 0
  4147                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4148  03DD  0020               	movlb	0	; select bank0
  4149  03DE  0823               	movf	___ftpack@exp,w
  4150  03DF  1903               	btfsc	3,2
  4151  03E0  2BE6               	goto	l1493
  4152  03E1  0822               	movf	___ftpack@arg+2,w
  4153  03E2  0421               	iorwf	___ftpack@arg+1,w
  4154  03E3  0420               	iorwf	___ftpack@arg,w
  4155  03E4  1D03               	skipz
  4156  03E5  2BF7               	goto	l1499
  4157  03E6                     l1493:	
  4158  03E6  3000               	movlw	0
  4159  03E7  00A0               	movwf	?___ftpack
  4160  03E8  3000               	movlw	0
  4161  03E9  00A1               	movwf	?___ftpack+1
  4162  03EA  3000               	movlw	0
  4163  03EB  00A2               	movwf	?___ftpack+2
  4164  03EC  0008               	return
  4165  03ED                     l1497:	
  4166  03ED  3001               	movlw	1
  4167  03EE  00A5               	movwf	??___ftpack
  4168  03EF  0825               	movf	??___ftpack,w
  4169  03F0  07A3               	addwf	___ftpack@exp,f
  4170  03F1  3001               	movlw	1
  4171  03F2                     u965:	
  4172  03F2  36A2               	lsrf	___ftpack@arg+2,f
  4173  03F3  0CA1               	rrf	___ftpack@arg+1,f
  4174  03F4  0CA0               	rrf	___ftpack@arg,f
  4175  03F5  0B89               	decfsz	9,f
  4176  03F6  2BF2               	goto	u965
  4177  03F7                     l1499:	
  4178  03F7  30FE               	movlw	254
  4179  03F8  0522               	andwf	___ftpack@arg+2,w
  4180  03F9  1903               	btfsc	3,2
  4181  03FA  2C10               	goto	l398
  4182  03FB  2BED               	goto	l1497
  4183  03FC                     l1501:	
  4184  03FC  3001               	movlw	1
  4185  03FD  00A5               	movwf	??___ftpack
  4186  03FE  0825               	movf	??___ftpack,w
  4187  03FF  07A3               	addwf	___ftpack@exp,f
  4188  0400  3001               	movlw	1
  4189  0401  07A0               	addwf	___ftpack@arg,f
  4190  0402  3000               	movlw	0
  4191  0403  1803               	skipnc
  4192  0404  3001               	movlw	1
  4193  0405  07A1               	addwf	___ftpack@arg+1,f
  4194  0406  3000               	movlw	0
  4195  0407  1803               	skipnc
  4196  0408  3001               	movlw	1
  4197  0409  07A2               	addwf	___ftpack@arg+2,f
  4198  040A  3001               	movlw	1
  4199  040B                     u985:	
  4200  040B  36A2               	lsrf	___ftpack@arg+2,f
  4201  040C  0CA1               	rrf	___ftpack@arg+1,f
  4202  040D  0CA0               	rrf	___ftpack@arg,f
  4203  040E  0B89               	decfsz	9,f
  4204  040F  2C0B               	goto	u985
  4205  0410                     l398:	
  4206  0410  30FF               	movlw	255
  4207  0411  0522               	andwf	___ftpack@arg+2,w
  4208  0412  1903               	btfsc	3,2
  4209  0413  2C1D               	goto	l1509
  4210  0414  2BFC               	goto	l1501
  4211  0415                     l1507:	
  4212  0415  3001               	movlw	1
  4213  0416  02A3               	subwf	___ftpack@exp,f
  4214  0417  3001               	movlw	1
  4215  0418                     u1005:	
  4216  0418  35A0               	lslf	___ftpack@arg,f
  4217  0419  0DA1               	rlf	___ftpack@arg+1,f
  4218  041A  0DA2               	rlf	___ftpack@arg+2,f
  4219  041B  0B89               	decfsz	9,f
  4220  041C  2C18               	goto	u1005
  4221  041D                     l1509:	
  4222  041D  1BA1               	btfsc	___ftpack@arg+1,7
  4223  041E  2C23               	goto	l405
  4224  041F  3002               	movlw	2
  4225  0420  0223               	subwf	___ftpack@exp,w
  4226  0421  1803               	skipnc
  4227  0422  2C15               	goto	l1507
  4228  0423                     l405:	
  4229  0423  1823               	btfsc	___ftpack@exp,0
  4230  0424  2C2B               	goto	l406
  4231  0425  30FF               	movlw	255
  4232  0426  05A0               	andwf	___ftpack@arg,f
  4233  0427  307F               	movlw	127
  4234  0428  05A1               	andwf	___ftpack@arg+1,f
  4235  0429  30FF               	movlw	255
  4236  042A  05A2               	andwf	___ftpack@arg+2,f
  4237  042B                     l406:	
  4238  042B  1003               	clrc
  4239  042C  0CA3               	rrf	___ftpack@exp,f
  4240  042D  0823               	movf	___ftpack@exp,w
  4241  042E  00A5               	movwf	??___ftpack
  4242  042F  01A6               	clrf	??___ftpack+1
  4243  0430  01A7               	clrf	??___ftpack+2
  4244  0431  3010               	movlw	16
  4245  0432                     u1045:	
  4246  0432  35A5               	lslf	??___ftpack,f
  4247  0433  0DA6               	rlf	??___ftpack+1,f
  4248  0434  0DA7               	rlf	??___ftpack+2,f
  4249  0435  0B89               	decfsz	9,f
  4250  0436  2C32               	goto	u1045
  4251  0437  0825               	movf	??___ftpack,w
  4252  0438  04A0               	iorwf	___ftpack@arg,f
  4253  0439  0826               	movf	??___ftpack+1,w
  4254  043A  04A1               	iorwf	___ftpack@arg+1,f
  4255  043B  0827               	movf	??___ftpack+2,w
  4256  043C  04A2               	iorwf	___ftpack@arg+2,f
  4257  043D  0824               	movf	___ftpack@sign,w
  4258  043E  1903               	btfsc	3,2
  4259  043F  0008               	return
  4260  0440  17A2               	bsf	___ftpack@arg+2,7
  4261  0441  0008               	return
  4262  0442                     __end_of___ftpack:	
  4263                           
  4264                           	psect	text20
  4265  02E4                     __ptext20:	
  4266 ;; *************** function ___aldiv *****************
  4267 ;; Defined at:
  4268 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;  divisor         4    0[BANK0 ] long 
  4271 ;;  dividend        4    4[BANK0 ] long 
  4272 ;; Auto vars:     Size  Location     Type
  4273 ;;  quotient        4   11[BANK0 ] long 
  4274 ;;  sign            1   10[BANK0 ] unsigned char 
  4275 ;;  counter         1    9[BANK0 ] unsigned char 
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  4    0[BANK0 ] long 
  4278 ;; Registers used:
  4279 ;;		wreg, status,2, status,0
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMMON   BANK0   BANK1
  4285 ;;      Params:         0       8       0
  4286 ;;      Locals:         0       6       0
  4287 ;;      Temps:          0       1       0
  4288 ;;      Totals:         0      15       0
  4289 ;;Total ram usage:       15 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    4
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_loop
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           
  4300                           ;psect for function ___aldiv
  4301  02E4                     ___aldiv:	
  4302                           
  4303                           ;incstack = 0
  4304                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4305  02E4  0020               	movlb	0	; select bank0
  4306  02E5  01AA               	clrf	___aldiv@sign
  4307  02E6  1FA3               	btfss	___aldiv@divisor+3,7
  4308  02E7  2AF5               	goto	l292
  4309  02E8  09A0               	comf	___aldiv@divisor,f
  4310  02E9  09A1               	comf	___aldiv@divisor+1,f
  4311  02EA  09A2               	comf	___aldiv@divisor+2,f
  4312  02EB  09A3               	comf	___aldiv@divisor+3,f
  4313  02EC  0AA0               	incf	___aldiv@divisor,f
  4314  02ED  1903               	skipnz
  4315  02EE  0AA1               	incf	___aldiv@divisor+1,f
  4316  02EF  1903               	skipnz
  4317  02F0  0AA2               	incf	___aldiv@divisor+2,f
  4318  02F1  1903               	skipnz
  4319  02F2  0AA3               	incf	___aldiv@divisor+3,f
  4320  02F3  01AA               	clrf	___aldiv@sign
  4321  02F4  0AAA               	incf	___aldiv@sign,f
  4322  02F5                     l292:	
  4323  02F5  1FA7               	btfss	___aldiv@dividend+3,7
  4324  02F6  2B06               	goto	l1721
  4325  02F7  09A4               	comf	___aldiv@dividend,f
  4326  02F8  09A5               	comf	___aldiv@dividend+1,f
  4327  02F9  09A6               	comf	___aldiv@dividend+2,f
  4328  02FA  09A7               	comf	___aldiv@dividend+3,f
  4329  02FB  0AA4               	incf	___aldiv@dividend,f
  4330  02FC  1903               	skipnz
  4331  02FD  0AA5               	incf	___aldiv@dividend+1,f
  4332  02FE  1903               	skipnz
  4333  02FF  0AA6               	incf	___aldiv@dividend+2,f
  4334  0300  1903               	skipnz
  4335  0301  0AA7               	incf	___aldiv@dividend+3,f
  4336  0302  3001               	movlw	1
  4337  0303  00A8               	movwf	??___aldiv
  4338  0304  0828               	movf	??___aldiv,w
  4339  0305  06AA               	xorwf	___aldiv@sign,f
  4340  0306                     l1721:	
  4341  0306  3000               	movlw	0
  4342  0307  00AE               	movwf	___aldiv@quotient+3
  4343  0308  3000               	movlw	0
  4344  0309  00AD               	movwf	___aldiv@quotient+2
  4345  030A  3000               	movlw	0
  4346  030B  00AC               	movwf	___aldiv@quotient+1
  4347  030C  3000               	movlw	0
  4348  030D  00AB               	movwf	___aldiv@quotient
  4349  030E  0823               	movf	___aldiv@divisor+3,w
  4350  030F  0422               	iorwf	___aldiv@divisor+2,w
  4351  0310  0421               	iorwf	___aldiv@divisor+1,w
  4352  0311  0420               	iorwf	___aldiv@divisor,w
  4353  0312  1903               	skipnz
  4354  0313  2B4F               	goto	l1743
  4355  0314  01A9               	clrf	___aldiv@counter
  4356  0315  0AA9               	incf	___aldiv@counter,f
  4357  0316                     l1729:	
  4358  0316  1BA3               	btfsc	___aldiv@divisor+3,7
  4359  0317  2B24               	goto	l1731
  4360  0318  3001               	movlw	1
  4361  0319                     u1185:	
  4362  0319  35A0               	lslf	___aldiv@divisor,f
  4363  031A  0DA1               	rlf	___aldiv@divisor+1,f
  4364  031B  0DA2               	rlf	___aldiv@divisor+2,f
  4365  031C  0DA3               	rlf	___aldiv@divisor+3,f
  4366  031D  0B89               	decfsz	9,f
  4367  031E  2B19               	goto	u1185
  4368  031F  3001               	movlw	1
  4369  0320  00A8               	movwf	??___aldiv
  4370  0321  0828               	movf	??___aldiv,w
  4371  0322  07A9               	addwf	___aldiv@counter,f
  4372  0323  2B16               	goto	l1729
  4373  0324                     l1731:	
  4374  0324  3001               	movlw	1
  4375  0325                     u1205:	
  4376  0325  35AB               	lslf	___aldiv@quotient,f
  4377  0326  0DAC               	rlf	___aldiv@quotient+1,f
  4378  0327  0DAD               	rlf	___aldiv@quotient+2,f
  4379  0328  0DAE               	rlf	___aldiv@quotient+3,f
  4380  0329  0B89               	decfsz	9,f
  4381  032A  2B25               	goto	u1205
  4382  032B  0823               	movf	___aldiv@divisor+3,w
  4383  032C  0227               	subwf	___aldiv@dividend+3,w
  4384  032D  1D03               	skipz
  4385  032E  2B39               	goto	u1215
  4386  032F  0822               	movf	___aldiv@divisor+2,w
  4387  0330  0226               	subwf	___aldiv@dividend+2,w
  4388  0331  1D03               	skipz
  4389  0332  2B39               	goto	u1215
  4390  0333  0821               	movf	___aldiv@divisor+1,w
  4391  0334  0225               	subwf	___aldiv@dividend+1,w
  4392  0335  1D03               	skipz
  4393  0336  2B39               	goto	u1215
  4394  0337  0820               	movf	___aldiv@divisor,w
  4395  0338  0224               	subwf	___aldiv@dividend,w
  4396  0339                     u1215:	
  4397  0339  1C03               	skipc
  4398  033A  2B44               	goto	l1739
  4399  033B  0820               	movf	___aldiv@divisor,w
  4400  033C  02A4               	subwf	___aldiv@dividend,f
  4401  033D  0821               	movf	___aldiv@divisor+1,w
  4402  033E  3BA5               	subwfb	___aldiv@dividend+1,f
  4403  033F  0822               	movf	___aldiv@divisor+2,w
  4404  0340  3BA6               	subwfb	___aldiv@dividend+2,f
  4405  0341  0823               	movf	___aldiv@divisor+3,w
  4406  0342  3BA7               	subwfb	___aldiv@dividend+3,f
  4407  0343  142B               	bsf	___aldiv@quotient,0
  4408  0344                     l1739:	
  4409  0344  3001               	movlw	1
  4410  0345                     u1225:	
  4411  0345  36A3               	lsrf	___aldiv@divisor+3,f
  4412  0346  0CA2               	rrf	___aldiv@divisor+2,f
  4413  0347  0CA1               	rrf	___aldiv@divisor+1,f
  4414  0348  0CA0               	rrf	___aldiv@divisor,f
  4415  0349  0B89               	decfsz	9,f
  4416  034A  2B45               	goto	u1225
  4417  034B  3001               	movlw	1
  4418  034C  02A9               	subwf	___aldiv@counter,f
  4419  034D  1D03               	btfss	3,2
  4420  034E  2B24               	goto	l1731
  4421  034F                     l1743:	
  4422  034F  082A               	movf	___aldiv@sign,w
  4423  0350  1903               	btfsc	3,2
  4424  0351  2B5D               	goto	l1747
  4425  0352  09AB               	comf	___aldiv@quotient,f
  4426  0353  09AC               	comf	___aldiv@quotient+1,f
  4427  0354  09AD               	comf	___aldiv@quotient+2,f
  4428  0355  09AE               	comf	___aldiv@quotient+3,f
  4429  0356  0AAB               	incf	___aldiv@quotient,f
  4430  0357  1903               	skipnz
  4431  0358  0AAC               	incf	___aldiv@quotient+1,f
  4432  0359  1903               	skipnz
  4433  035A  0AAD               	incf	___aldiv@quotient+2,f
  4434  035B  1903               	skipnz
  4435  035C  0AAE               	incf	___aldiv@quotient+3,f
  4436  035D                     l1747:	
  4437  035D  082E               	movf	___aldiv@quotient+3,w
  4438  035E  00A3               	movwf	?___aldiv+3
  4439  035F  082D               	movf	___aldiv@quotient+2,w
  4440  0360  00A2               	movwf	?___aldiv+2
  4441  0361  082C               	movf	___aldiv@quotient+1,w
  4442  0362  00A1               	movwf	?___aldiv+1
  4443  0363  082B               	movf	___aldiv@quotient,w
  4444  0364  00A0               	movwf	?___aldiv
  4445  0365  0008               	return
  4446  0366                     __end_of___aldiv:	
  4447                           
  4448                           	psect	intentry
  4449  0004                     __pintentry:	
  4450 ;; *************** function _ISR *****************
  4451 ;; Defined at:
  4452 ;;		line 36 in file "main.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;		None
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  result          2   10[COMMON] int 
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  1    wreg      void 
  4459 ;; Registers used:
  4460 ;;		wreg, status,2, status,0, pclath, cstack
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMMON   BANK0   BANK1
  4466 ;;      Params:         0       0       0
  4467 ;;      Locals:         2       0       0
  4468 ;;      Temps:          5       0       0
  4469 ;;      Totals:         7       0       0
  4470 ;;Total ram usage:        7 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; Hardware stack levels required when called:    3
  4473 ;; This function calls:
  4474 ;;		_nrf24l01ISR
  4475 ;; This function is called by:
  4476 ;;		Interrupt level 1
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480  0004                     _ISR:	
  4481                           
  4482                           ;incstack = 0
  4483  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4484                           
  4485                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  4486  0005  3180               	pagesel	$
  4487  0006  0020               	movlb	0	; select bank0
  4488  0007  087F               	movf	127,w
  4489  0008  00F9               	movwf	??_ISR+4
  4490                           
  4491                           ;main.c: 37: if (PIR1bits.ADIF){
  4492  0009  1F11               	btfss	17,6	;volatile
  4493  000A  2843               	goto	i1l2051
  4494                           
  4495                           ;main.c: 39: if (mode == 2) {
  4496  000B  3002               	movlw	2
  4497  000C  067D               	xorwf	_mode,w
  4498  000D  1D03               	btfss	3,2
  4499  000E  2842               	goto	i1l2049
  4500                           
  4501                           ;main.c: 41: int result = 0x00;
  4502  000F  01FA               	clrf	ISR@result
  4503  0010  01FB               	clrf	ISR@result+1
  4504                           
  4505                           ;main.c: 42: result = ADRESL;
  4506  0011  0021               	movlb	1	; select bank1
  4507  0012  081B               	movf	27,w	;volatile
  4508  0013  00F5               	movwf	??_ISR
  4509  0014  01F6               	clrf	??_ISR+1
  4510  0015  0875               	movf	??_ISR,w
  4511  0016  00FA               	movwf	ISR@result
  4512  0017  0876               	movf	??_ISR+1,w
  4513  0018  00FB               	movwf	ISR@result+1
  4514                           
  4515                           ;main.c: 43: result|= (ADRESH << 8);
  4516  0019  081C               	movf	28,w	;volatile
  4517  001A  00F5               	movwf	??_ISR
  4518  001B  01F6               	clrf	??_ISR+1
  4519  001C  0875               	movf	??_ISR,w
  4520  001D  00F6               	movwf	??_ISR+1
  4521  001E  01F5               	clrf	??_ISR
  4522  001F  0875               	movf	??_ISR,w
  4523  0020  04FA               	iorwf	ISR@result,f
  4524  0021  0876               	movf	??_ISR+1,w
  4525  0022  04FB               	iorwf	ISR@result+1,f
  4526                           
  4527                           ;main.c: 45: adcSum+= result;
  4528  0023  087A               	movf	ISR@result,w
  4529  0024  00F5               	movwf	??_ISR
  4530  0025  087B               	movf	ISR@result+1,w
  4531  0026  00F6               	movwf	??_ISR+1
  4532  0027  3000               	movlw	0
  4533  0028  1BF6               	btfsc	??_ISR+1,7
  4534  0029  30FF               	movlw	255
  4535  002A  00F7               	movwf	??_ISR+2
  4536  002B  00F8               	movwf	??_ISR+3
  4537  002C  0875               	movf	??_ISR,w
  4538  002D  0020               	movlb	0	; select bank0
  4539  002E  07D3               	addwf	_adcSum,f
  4540  002F  0876               	movf	??_ISR+1,w
  4541  0030  3DD4               	addwfc	_adcSum+1,f
  4542  0031  0877               	movf	??_ISR+2,w
  4543  0032  3DD5               	addwfc	_adcSum+2,f
  4544  0033  0878               	movf	??_ISR+3,w
  4545  0034  3DD6               	addwfc	_adcSum+3,f
  4546                           
  4547                           ;main.c: 47: if (!adcLoop){
  4548  0035  0858               	movf	_adcLoop,w
  4549  0036  1D03               	btfss	3,2
  4550  0037  283D               	goto	i1l83
  4551                           
  4552                           ;main.c: 48: mode = 3;
  4553  0038  3003               	movlw	3
  4554  0039  00F5               	movwf	??_ISR
  4555  003A  0875               	movf	??_ISR,w
  4556  003B  00FD               	movwf	_mode
  4557                           
  4558                           ;main.c: 49: }else{
  4559  003C  283F               	goto	i1l2047
  4560  003D                     i1l83:	
  4561                           
  4562                           ;main.c: 51: ADCON0bits.ADGO = 1;
  4563  003D  0021               	movlb	1	; select bank1
  4564  003E  149D               	bsf	29,1	;volatile
  4565  003F                     i1l2047:	
  4566                           
  4567                           ;main.c: 52: }
  4568                           ;main.c: 54: adcLoop--;
  4569  003F  3001               	movlw	1
  4570  0040  0020               	movlb	0	; select bank0
  4571  0041  02D8               	subwf	_adcLoop,f
  4572  0042                     i1l2049:	
  4573                           
  4574                           ;main.c: 55: }
  4575                           ;main.c: 58: PIR1bits.ADIF = 0;
  4576  0042  1311               	bcf	17,6	;volatile
  4577  0043                     i1l2051:	
  4578                           
  4579                           ;main.c: 59: }
  4580                           ;main.c: 61: if (INTCONbits.INTF){
  4581  0043  1C8B               	btfss	11,1	;volatile
  4582  0044  2847               	goto	i1l86
  4583                           
  4584                           ;main.c: 62: nrf24l01ISR();
  4585  0045  26D9               	fcall	_nrf24l01ISR
  4586                           
  4587                           ;main.c: 63: INTCONbits.INTF = 0;
  4588  0046  108B               	bcf	11,1	;volatile
  4589  0047                     i1l86:	
  4590  0047  0879               	movf	??_ISR+4,w
  4591  0048  0020               	movlb	0	; select bank0
  4592  0049  00FF               	movwf	127
  4593  004A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4594  004B  0009               	retfie
  4595  004C                     __end_of_ISR:	
  4596                           
  4597                           	psect	text22
  4598  06D9                     __ptext22:	
  4599 ;; *************** function _nrf24l01ISR *****************
  4600 ;; Defined at:
  4601 ;;		line 51 in file "nrf24l01.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;		None
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;		None
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  1    wreg      void 
  4608 ;; Registers used:
  4609 ;;		wreg, status,2, status,0, pclath, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMMON   BANK0   BANK1
  4615 ;;      Params:         0       0       0
  4616 ;;      Locals:         0       0       0
  4617 ;;      Temps:          1       0       0
  4618 ;;      Totals:         1       0       0
  4619 ;;Total ram usage:        1 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    2
  4622 ;; This function calls:
  4623 ;;		_nrf24l01Send
  4624 ;; This function is called by:
  4625 ;;		_ISR
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           
  4630                           ;psect for function _nrf24l01ISR
  4631  06D9                     _nrf24l01ISR:	
  4632                           
  4633                           ;nrf24l01.c: 53: status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  4634                           
  4635                           ;incstack = 0
  4636                           ; Regs used in _nrf24l01ISR: [wreg+status,2+status,0+pclath+cstack]
  4637  06D9  01F1               	clrf	nrf24l01Send@data
  4638  06DA  3007               	movlw	7
  4639  06DB  26E9               	fcall	_nrf24l01Send
  4640  06DC  00F4               	movwf	??_nrf24l01ISR
  4641  06DD  0874               	movf	??_nrf24l01ISR,w
  4642  06DE  00FC               	movwf	_status
  4643                           
  4644                           ;nrf24l01.c: 55: if (status.TX_DS){
  4645  06DF  1EFC               	btfss	_status,5
  4646  06E0  0008               	return
  4647                           
  4648                           ;nrf24l01.c: 56: status.TX_DS = 1;
  4649  06E1  16FC               	bsf	_status,5
  4650                           
  4651                           ;nrf24l01.c: 57: nrf24l01Send(0b00100000 | 0x07, status.byte);
  4652  06E2  087C               	movf	_status,w
  4653  06E3  00F4               	movwf	??_nrf24l01ISR
  4654  06E4  0874               	movf	??_nrf24l01ISR,w
  4655  06E5  00F1               	movwf	nrf24l01Send@data
  4656  06E6  3027               	movlw	39
  4657  06E7  26E9               	fcall	_nrf24l01Send
  4658  06E8  0008               	return
  4659  06E9                     __end_of_nrf24l01ISR:	
  4660                           
  4661                           	psect	text23
  4662  06E9                     __ptext23:	
  4663 ;; *************** function _nrf24l01Send *****************
  4664 ;; Defined at:
  4665 ;;		line 39 in file "nrf24l01.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;  command         1    wreg     unsigned char 
  4668 ;;  data            1    1[COMMON] unsigned char 
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;  command         1    3[COMMON] unsigned char 
  4671 ;; Return value:  Size  Location     Type
  4672 ;;                  1    wreg      unsigned char 
  4673 ;; Registers used:
  4674 ;;		wreg, status,2, status,0, pclath, cstack
  4675 ;; Tracked objects:
  4676 ;;		On entry : 0/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMMON   BANK0   BANK1
  4680 ;;      Params:         0       0       0
  4681 ;;      Locals:         0       0       0
  4682 ;;      Temps:          0       0       0
  4683 ;;      Totals:         0       0       0
  4684 ;;Total ram usage:        0 bytes
  4685 ;; Hardware stack levels used:    1
  4686 ;; Hardware stack levels required when called:    5
  4687 ;; This function calls:
  4688 ;;		_nrf24l01SPIEnd
  4689 ;;		_nrf24l01SPISend
  4690 ;;		_nrf24l01SPIStart
  4691 ;; This function is called by:
  4692 ;;		_nrf24l01ISR
  4693 ;;		_nrf24l01SetTransmitMode
  4694 ;;		_nrf24l01InitRegisters
  4695 ;;		_nrf24l01SetRecieveMode
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           
  4700                           ;psect for function _nrf24l01Send
  4701  06E9                     _nrf24l01Send:	
  4702                           
  4703                           ;incstack = 0
  4704                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  4705                           ;nrf24l01Send@command stored from wreg
  4706  06E9  00F3               	movwf	nrf24l01Send@command
  4707                           
  4708                           ;nrf24l01.c: 41: nrf24l01SPIStart();
  4709  06EA  2718               	fcall	_nrf24l01SPIStart
  4710                           
  4711                           ;nrf24l01.c: 43: status.byte = nrf24l01SPISend(command);
  4712  06EB  0873               	movf	nrf24l01Send@command,w
  4713  06EC  2706               	fcall	_nrf24l01SPISend
  4714  06ED  00F2               	movwf	??_nrf24l01Send
  4715  06EE  0872               	movf	??_nrf24l01Send,w
  4716  06EF  00FC               	movwf	_status
  4717                           
  4718                           ;nrf24l01.c: 44: data = nrf24l01SPISend(data);
  4719  06F0  0871               	movf	nrf24l01Send@data,w
  4720  06F1  2706               	fcall	_nrf24l01SPISend
  4721  06F2  00F2               	movwf	??_nrf24l01Send
  4722  06F3  0872               	movf	??_nrf24l01Send,w
  4723  06F4  00F1               	movwf	nrf24l01Send@data
  4724                           
  4725                           ;nrf24l01.c: 46: nrf24l01SPIEnd();
  4726  06F5  271F               	fcall	_nrf24l01SPIEnd
  4727                           
  4728                           ;nrf24l01.c: 48: return data;
  4729  06F6  0871               	movf	nrf24l01Send@data,w
  4730  06F7  0008               	return
  4731  06F8                     __end_of_nrf24l01Send:	
  4732                           
  4733                           	psect	text24
  4734  0718                     __ptext24:	
  4735 ;; *************** function _nrf24l01SPIStart *****************
  4736 ;; Defined at:
  4737 ;;		line 20 in file "nrf24l01.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;		None
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;		None
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  1    wreg      void 
  4744 ;; Registers used:
  4745 ;;		wreg
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMMON   BANK0   BANK1
  4751 ;;      Params:         0       0       0
  4752 ;;      Locals:         0       0       0
  4753 ;;      Temps:          0       0       0
  4754 ;;      Totals:         0       0       0
  4755 ;;Total ram usage:        0 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:    4
  4758 ;; This function calls:
  4759 ;;		Nothing
  4760 ;; This function is called by:
  4761 ;;		_nrf24l01Send
  4762 ;;		_nrf24l01SendStart
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           
  4767                           ;psect for function _nrf24l01SPIStart
  4768  0718                     _nrf24l01SPIStart:	
  4769                           
  4770                           ;nrf24l01.c: 21: PORTAbits.RA1 = 0;
  4771                           
  4772                           ;incstack = 0
  4773                           ; Regs used in _nrf24l01SPIStart: [wreg]
  4774  0718  0020               	movlb	0	; select bank0
  4775  0719  108C               	bcf	12,1	;volatile
  4776                           
  4777                           ;nrf24l01.c: 22: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4778  071A  300D               	movlw	13
  4779  071B                     u163_27:	
  4780  071B  0B89               	decfsz	9,f
  4781  071C  2F1B               	goto	u163_27
  4782  071D  0000               	nop
  4783  071E  0008               	return
  4784  071F                     __end_of_nrf24l01SPIStart:	
  4785                           
  4786                           	psect	text25
  4787  0706                     __ptext25:	
  4788 ;; *************** function _nrf24l01SPISend *****************
  4789 ;; Defined at:
  4790 ;;		line 26 in file "nrf24l01.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;  data            1    wreg     unsigned char 
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;  data            1    0[COMMON] unsigned char 
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      unsigned char 
  4797 ;; Registers used:
  4798 ;;		wreg
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMMON   BANK0   BANK1
  4804 ;;      Params:         0       0       0
  4805 ;;      Locals:         0       0       0
  4806 ;;      Temps:          0       0       0
  4807 ;;      Totals:         0       0       0
  4808 ;;Total ram usage:        0 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    4
  4811 ;; This function calls:
  4812 ;;		Nothing
  4813 ;; This function is called by:
  4814 ;;		_nrf24l01Send
  4815 ;;		_nrf24l01SendStart
  4816 ;;		_nrf24l01SendString
  4817 ;;		_nrf24l01SendFlash
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           
  4822                           ;psect for function _nrf24l01SPISend
  4823  0706                     _nrf24l01SPISend:	
  4824                           
  4825                           ;incstack = 0
  4826                           ; Regs used in _nrf24l01SPISend: [wreg]
  4827                           ;nrf24l01SPISend@data stored from wreg
  4828  0706  00F0               	movwf	nrf24l01SPISend@data
  4829                           
  4830                           ;nrf24l01.c: 27: SSP1BUF = data;
  4831  0707  0870               	movf	nrf24l01SPISend@data,w
  4832  0708  0024               	movlb	4	; select bank4
  4833  0709  0091               	movwf	17	;volatile
  4834  070A                     i1l160:	
  4835                           ;nrf24l01.c: 28: while (!SSP1STATbits.BF){ __nop(); }
  4836                           
  4837  070A  0024               	movlb	4	; select bank4
  4838  070B  1814               	btfsc	20,0	;volatile
  4839  070C  2F0F               	goto	i1l1469
  4840  070D  0000               	nop
  4841  070E  2F0A               	goto	i1l160
  4842  070F                     i1l1469:	
  4843                           
  4844                           ;nrf24l01.c: 29: return SSP1BUF;
  4845  070F  0811               	movf	17,w	;volatile
  4846  0710  0008               	return
  4847  0711                     __end_of_nrf24l01SPISend:	
  4848                           
  4849                           	psect	text26
  4850  071F                     __ptext26:	
  4851 ;; *************** function _nrf24l01SPIEnd *****************
  4852 ;; Defined at:
  4853 ;;		line 33 in file "nrf24l01.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;		None
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;		None
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      void 
  4860 ;; Registers used:
  4861 ;;		wreg
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMMON   BANK0   BANK1
  4867 ;;      Params:         0       0       0
  4868 ;;      Locals:         0       0       0
  4869 ;;      Temps:          0       0       0
  4870 ;;      Totals:         0       0       0
  4871 ;;Total ram usage:        0 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    4
  4874 ;; This function calls:
  4875 ;;		Nothing
  4876 ;; This function is called by:
  4877 ;;		_nrf24l01Send
  4878 ;;		_nrf24l01SendEnd
  4879 ;; This function uses a non-reentrant model
  4880 ;;
  4881                           
  4882                           
  4883                           ;psect for function _nrf24l01SPIEnd
  4884  071F                     _nrf24l01SPIEnd:	
  4885                           
  4886                           ;nrf24l01.c: 34: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4887                           
  4888                           ;incstack = 0
  4889                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  4890  071F  300D               	movlw	13
  4891  0720                     u164_27:	
  4892  0720  0B89               	decfsz	9,f
  4893  0721  2F20               	goto	u164_27
  4894  0722  0000               	nop
  4895                           
  4896                           ;nrf24l01.c: 35: PORTAbits.RA1 = 1;
  4897  0723  0020               	movlb	0	; select bank0
  4898  0724  148C               	bsf	12,1	;volatile
  4899  0725  0008               	return
  4900  0726                     __end_of_nrf24l01SPIEnd:	
  4901  007E                     btemp	set	126	;btemp
  4902  007E                     int$flags	set	126
  4903  007E                     wtemp0	set	126


Data Sizes:
    Strings     12
    Constant    6
    Data        2
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     51      67
    BANK1            32      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    nrf24l01SendString@string	PTR unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[2]), STR_2(CODE[5]), byte(BANK0[3]), STR_1(CODE[7]), 
		 -> buffer(BANK0[6]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _loop->___fttol
    _nrf24l01SendStart->_nrf24l01SetTransmitMode
    _nrf24l01SendFlash->_read_flashmem
    _itoa->_utoa
    _utoa->___lwdiv
    ___fttol->___ftdiv
    ___ftdiv->___altoft
    ___altoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   12346
                                             48 BANK0      3     3      0
                               _loop
                       _nrf24l01Init
                      _read_flashmem
                     _write_flashmem
 ---------------------------------------------------------------------------------
 (1) _write_flashmem                                       6     2      4     283
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1485
                                              8 BANK0      1     1      0
              _nrf24l01InitRegisters
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                8     8      0    1485
                                              0 BANK0      8     8      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 2     2      0   10247
                                             46 BANK0      2     2      0
                            ___aldiv
                           ___altoft
                            ___ftdiv
                            ___fttol
                               _itoa
                    _nrf24l01SendEnd
                  _nrf24l01SendFlash
                  _nrf24l01SendStart
                 _nrf24l01SendString
                      _read_flashmem
                           _startADC
 ---------------------------------------------------------------------------------
 (2) _startADC                                             2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendString                                   6     4      2     496
                                              0 BANK0      6     4      2
                    _nrf24l01SPISend
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendStart                                    0     0      0    1373
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
            _nrf24l01SetTransmitMode
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetTransmitMode                              2     2      0    1351
                                              0 BANK0      2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1305
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendFlash                                    4     4      0     398
                                              9 BANK0      4     4      0
                    _nrf24l01SPISend
                      _read_flashmem
 ---------------------------------------------------------------------------------
 (1) _read_flashmem                                        9     7      2     284
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      22
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendEnd                                      0     0      0       0
                     _nrf24l01SPIEnd
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _itoa                                                 7     3      4    1802
                                             17 BANK0      7     3      4
                      _read_flashmem (ARG)
                               _utoa
 ---------------------------------------------------------------------------------
 (3) _utoa                                                 9     5      4    1165
                                              8 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     287
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     380
                                             32 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2528
                                             16 BANK0     16    10      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    2258
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1992
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     684
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  7     7      0    1330
                                              5 COMMON     7     7      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          1     1      0    1305
                                              4 COMMON     1     1      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1305
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      22
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___aldiv
     ___altoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     _itoa
       _read_flashmem (ARG)
       _utoa (ARG)
         ___lwdiv
         ___lwmod
     _nrf24l01SendEnd
       _nrf24l01SPIEnd
     _nrf24l01SendFlash
       _nrf24l01SPISend
       _read_flashmem
     _nrf24l01SendStart
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetTransmitMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
     _nrf24l01SendString
       _nrf24l01SPISend
     _read_flashmem
     _startADC
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
   _read_flashmem
   _write_flashmem

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      51       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     33      43       6       83.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      51       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu May 31 17:36:19 2018

                     ___altoft@exp 002E                        __CFG_CP$OFF 0000  
                    ___altoft@sign 002F                                 l95 0060  
               nrf24l01SendFlash@i 002B                nrf24l01Send@command 0073  
                      __CFG_LVP$ON 0000                                l100 009C  
                              l113 01B4                                l118 0496  
                              l405 0423                                l406 042B  
                              l504 04EB                                l292 02F5  
                              l398 0410                                l489 02CA  
                              _ISR 0004                                u805 0585  
                              u825 058F                                u905 062E  
                              u835 0599                                u845 05A1  
                              u875 0618                                u965 03F2  
                              u895 0627                                u985 040B  
                     __CFG_BORV$LO 0000                                wreg 0009  
                             ?_ISR 0070                       ___ftdiv@cntr 003A  
                     ___ftdiv@sign 003F                     ??_nrf24l01Init 0028  
                             l2123 04A3                               l1501 03FC  
                             l1405 05A0                               l1421 0615  
                             l1423 0621                               l1431 0636  
                             l1409 05A9                               l1507 0415  
                             l1427 062D                               l1523 04AB  
                             l1509 041D                               l1533 04C7  
                             l1721 0306                               l1801 023C  
                             l1731 0324                               l1493 03E6  
                             l1397 0582                               l1573 069C  
                             l1901 00BC                               l1743 034F  
                             l1815 0276                               l1399 058E  
                             l1583 06AC                               l1559 0606  
                             l1911 010B                               l1729 0316  
                             l1497 03ED                               l1761 0552  
                             l1841 02C1                               l1833 02A6  
                             l1921 015C                               l1905 00C4  
                   ??_nrf24l01Send 0072                               l1747 035D  
                             l1739 0344                               l1499 03F7  
                             l1763 0562                               l1843 02CD  
                             l1835 02B4                               l1915 012F  
                             l1907 00D9                               l1773 01CC  
                             l1909 00E2                               l1941 019A  
                             l1847 02DB                               l1599 0663  
                             l1919 014B                               l1793 0223  
                             l1873 0075                               l1779 01E2  
                             l1893 00AC                               l1869 006C  
                             l1897 00B4                               l1889 00A4  
                             STR_1 0711                       __CFG_WDTE$ON 0000  
                             STR_2 0731                               STR_3 0716  
                             u1005 0418                               u1205 0325  
                             u1045 0432                               u1215 0339  
                             u1225 0345                               u1305 01F4  
                             u1315 0204                               u1325 0224  
                             u1405 02A7                               u1335 0233  
                             u1185 0319                               u1265 0557  
                             u1345 023D                               u1435 02C2  
                             u1375 027D                               u1607 036D  
                             u1617 0603                               u1627 06D5  
                             u1577 044F                               u1587 0652  
                             u1597 065B                               i1l83 003D  
                             i1l86 0047                       __CFG_WRT$OFF 0000  
                    __p_NVMEM_text 07E0                               _main 0442  
                             _byte 005F                       ___ftpack@arg 0020  
                             _mode 007D                               _itoa 0684  
                             _loop 005B                       ___ftpack@exp 0023  
                             fsr0h 0005                               fsr1h 0007  
                             indf0 0000                               fsr0l 0004  
                             indf1 0001                               fsr1l 0006  
                             btemp 007E                               _utoa 04A5  
                             start 004C           ?_nrf24l01SetTransmitMode 0070  
                    __CFG_MCLRE$ON 0000                              ??_ISR 0075  
              nrf24l01SendString@i 0025                       ___fttol@exp1 004D  
                     ___fttol@lval 0049        __size_of_nrf24l01SendString 0023  
                  __end_of___aldiv 0366                              ?_main 0070  
                            ?_itoa 0031                              ?_loop 0070  
                  __end_of___ftdiv 025D                              ?_utoa 0028  
                  __end_of___fttol 02E4                    __end_of___lwdiv 05AE  
                            i1l160 070A                    __end_of___lwmod 063B  
                            _NVMEM 07E0                      __CFG_PWRTE$ON 0000  
                    ___ftpack@sign 0024                     __CFG_BOREN$OFF 0000  
            nrf24l01SendFlash@btye 002C                              utoa@c 002F  
                            utoa@v 002D                              status 0003  
                            wtemp0 007E                   _nrf24l01SPIStart 0718  
                  __initialization 004D                       __end_of_main 04A5  
                     __end_of_itoa 06A7                       __end_of_loop 01B5  
                     __end_of_utoa 0501                     __CFG_LPBOR$OFF 0000  
                           ??_main 0050                      ___fttol@sign1 0048  
                           ??_itoa 0035                             ??_loop 004E  
                           ??_utoa 002C                   ??_write_flashmem 0024  
                 ??_nrf24l01SPIEnd 0070                      main@bootCount 0051  
         __size_of_nrf24l01SPISend 000B                   __end_of___altoft 0579  
                           _ADRESH 009C                             _ADRESL 009B  
                           _ANSELA 018C                             _ANSELC 018E  
                 __end_of___ftpack 0442                             i1l2051 0043  
                           i1l2047 003F                             i1l2049 0042  
                           i1l1469 070F                             u163_27 071B  
                           u164_27 0720                             _PMADRH 0192  
                           _PMADRL 0191                             _PMDATH 0194  
                           _PMDATL 0193                             _PMCON1 0195  
                           _PMCON2 0196           __size_of_nrf24l01SendEnd 000E  
             __size_of_nrf24l01ISR 0010                             _adcSum 0053  
                        ??___aldiv 0028                     __CFG_STVREN$ON 0000  
                        ??___ftdiv 0036                          ??___fttol 0044  
                        ??___lwdiv 0024                          ??___lwmod 0024  
                           _buffer 0059               __end_of_nrf24l01Init 0661  
             __end_of_nrf24l01Send 06F8              _nrf24l01InitRegisters 0366  
                           _status 007C               write_flashmem@offset 0020  
                           itoa@cp 0036                       __pdataCOMMON 007D  
                 __end_of_startADC 060E             __size_of_read_flashmem 0032  
          __end_of__initialization 0058                         ___altoft@c 0028  
                       ___ftdiv@f1 0033                         ___ftdiv@f2 0030  
                       ___ftdiv@f3 003B                      __end_of_NVMEM 0800  
                       ___fttol@f1 0040                     __pcstackCOMMON 0070  
                     __pidataBANK0 073C      nrf24l01InitRegisters@enRXAddr 0026  
                   _OPTION_REGbits 0095                         __pbssBANK0 0053  
                ??_nrf24l01SPISend 0070                          ISR@result 007A  
                    _read_flashmem 05AE                         __pmaintext 0442  
                ??_nrf24l01SendEnd 0020             ?_nrf24l01InitRegisters 0070  
                       __pintentry 0004                  _nrf24l01SendFlash 06A7  
                        ?___altoft 0028                nrf24l01SPISend@data 0070  
                _nrf24l01SendStart 0736                          ?___ftpack 0020  
               ?_nrf24l01SendFlash 0070                 ?_nrf24l01SendStart 0070  
            __end_of_n_ADDRESS_MUL 073E   __size_of_nrf24l01SetTransmitMode 0017  
         __end_of_nrf24l01SPIStart 071F                ??_nrf24l01SendFlash 0029  
                          _SSP1BUF 0211                ??_nrf24l01SendStart 0022  
         nrf24l01SendString@string 0020                     ?_read_flashmem 0020  
            __size_of_nrf24l01Init 0026              __size_of_nrf24l01Send 000F  
        __end_of_nrf24l01SendFlash 06C2         __end_of_nrf24l01SendString 0684  
                          ___aldiv 02E4          __end_of_nrf24l01SendStart 073B  
                          _adcLoop 0058                          ?_startADC 0070  
                          ___ftdiv 01B5                            ___fttol 025D  
                          ___lwdiv 0579                            ___lwmod 060E  
                       ??___altoft 002C                         ??___ftpack 0025  
                          __ptext1 0501                            __ptext2 063B  
                          __ptext3 0366                            __ptext4 005B  
                          __ptext5 05E0                            __ptext6 0661  
                          __ptext7 0736                            __ptext8 06C2  
                          __ptext9 06A7                       __size_of_ISR 0048  
                 ___aldiv@dividend 0024              write_flashmem@address 0024  
                          clrloop0 0727               end_of_initialization 0058  
                     _nrf24l01Init 063B                       _nrf24l01Send 06E9  
                          itoa@buf 0037                            itoa@val 0031  
                 ___aldiv@quotient 002B                         ??_startADC 0020  
          nrf24l01SendFlash@offset 002A                            utoa@buf 0030  
                          utoa@val 0028                          _PORTAbits 000C  
                 __CFG_FOSC$INTOSC 0000                          _TRISAbits 008C  
                        _TRISCbits 008E                   nrf24l01Send@data 0071  
                    ??_nrf24l01ISR 0074                        ___ftdiv@exp 003E  
                  ??_read_flashmem 0022         __size_of_nrf24l01SendFlash 001B  
       __size_of_nrf24l01SendStart 0005      nrf24l01SetTransmitMode@config 0021  
                    __pidataCOMMON 073B            _nrf24l01SetTransmitMode 06C2  
               write_flashmem@data 0022                start_initialization 004D  
                  _nrf24l01SPISend 0706                        __end_of_ISR 004C  
          __size_of_write_flashmem 003C            __size_of_nrf24l01SPIEnd 0007  
                  _nrf24l01SendEnd 06F8            ??_nrf24l01InitRegisters 0020  
              __end_of_nrf24l01ISR 06E9                        __pdataBANK0 0062  
                __size_of___altoft 003C                  __size_of___ftpack 0065  
                      __pbssCOMMON 007C                          ___latbits 0000  
                    __pcstackBANK0 0020                  ?_nrf24l01SPIStart 0070  
               ??_nrf24l01SPIStart 0070                   ___lwdiv@dividend 0022  
                         ?___aldiv 0020                           ?___ftdiv 0030  
                         ?___fttol 0040                           ?___lwdiv 0020  
        ??_nrf24l01SetTransmitMode 0020                           ?___lwmod 0020  
             __end_of_n_ADDRESS_P0 0731            __end_of_nrf24l01SPISend 0711  
                    _NVMEM_absaddr 07E0                  __size_of_startADC 002E  
               _nrf24l01SendString 0661            __end_of_nrf24l01SendEnd 0706  
                 ___lwdiv@quotient 0025                ?_nrf24l01SendString 0020  
                  ___aldiv@divisor 0020                    ___aldiv@counter 0029  
nrf24l01InitRegisters@setupRetries 0022                        _nrf24l01ISR 06D9  
                        clear_ram0 0726                           _PIE1bits 0091  
                         _PIR1bits 0011                          _sleepLoop 0057  
             ??_nrf24l01SendString 0022                         _ADCON0bits 009D  
                       _ADCON1bits 009E                           _WPUAbits 020C  
  __end_of_nrf24l01SetTransmitMode 06D9                     _write_flashmem 0501  
                   _nrf24l01SPIEnd 071F                    startADC@channel 0021  
             read_flashmem@address 0027                   __size_of___aldiv 0082  
                 __size_of___ftdiv 00A8                           ___altoft 053D  
                 __size_of___fttol 0087                   __size_of___lwdiv 0035  
                 __size_of___lwmod 002D                           ___ftpack 03DD  
                 ?_nrf24l01SPISend 0070                         _ANSELAbits 018C  
                       _ANSELCbits 018E                      _n_ADDRESS_MUL 073D  
                  ___lwdiv@divisor 0020                    ___lwdiv@counter 0027  
                         __ptext10 05AE                           __ptext11 06F8  
                         __ptext20 02E4                           __ptext12 0684  
                         __ptext13 04A5                           __ptext22 06D9  
                         __ptext14 060E                           __ptext23 06E9  
                         __ptext15 0579                           __ptext24 0718  
                         __ptext16 025D             __end_of_write_flashmem 053D  
                         __ptext25 0706                           __ptext17 01B5  
                         __ptext26 071F                           __ptext18 053D  
                         __ptext19 03DD                   ?_nrf24l01SendEnd 0070  
           __end_of_nrf24l01SPIEnd 0726                      __size_of_main 0063  
                    __size_of_itoa 0023                      __size_of_loop 015A  
                    __size_of_utoa 005C       nrf24l01InitRegisters@feature 0023  
                         _nextMode 0062              __end_of_read_flashmem 05E0  
     nrf24l01InitRegisters@rfSetup 0024     __size_of_nrf24l01InitRegisters 0077  
    __end_of_nrf24l01InitRegisters 03DD                           int$flags 007E  
                         _startADC 05E0       nrf24l01InitRegisters@setupAW 0021  
                     _SSP1STATbits 0214                         _INTCONbits 000B  
                       _FVRCONbits 0117                           itoa@base 0033  
                  ?_write_flashmem 0020                    ?_nrf24l01SPIEnd 0070  
                         intlevel1 0000                read_flashmem@offset 0020  
                     _n_ADDRESS_P0 072C                read_flashmem@result 0025  
                       _PMCON1bits 0195                   ___lwmod@dividend 0022  
                __CFG_CLKOUTEN$OFF 0000        nrf24l01InitRegisters@config 0025  
                       _OSCCONbits 0099          __size_of_nrf24l01SPIStart 0007  
                    __pstringtext1 072C                      __pstringtext2 073D  
                    __pstringtext3 0711                      __pstringtext4 0731  
                    __pstringtext5 0000                           utoa@base 002A  
       nrf24l01InitRegisters@DynPD 0027                    ___lwmod@divisor 0020  
                  ___lwmod@counter 0025                       ___aldiv@sign 002A  
                      _SSPCON1bits 0215                         _WDTCONbits 0097  
                    ?_nrf24l01Init 0070                      ?_nrf24l01Send 0071  
                       _STATUSbits 0003                       ?_nrf24l01ISR 0070  
