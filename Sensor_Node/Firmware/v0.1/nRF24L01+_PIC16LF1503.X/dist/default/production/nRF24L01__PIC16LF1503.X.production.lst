

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 25 14:10:08 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	_NVMEM_text,global,class=CODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 1.45
    47                           ; Generated 16/11/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16LF1503 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000E                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  008C                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009E                     	;# 
   121  009F                     	;# 
   122  010C                     	;# 
   123  010E                     	;# 
   124  0111                     	;# 
   125  0112                     	;# 
   126  0113                     	;# 
   127  0114                     	;# 
   128  0115                     	;# 
   129  0116                     	;# 
   130  0117                     	;# 
   131  0118                     	;# 
   132  0119                     	;# 
   133  011D                     	;# 
   134  018C                     	;# 
   135  018E                     	;# 
   136  0191                     	;# 
   137  0191                     	;# 
   138  0192                     	;# 
   139  0193                     	;# 
   140  0193                     	;# 
   141  0194                     	;# 
   142  0195                     	;# 
   143  0196                     	;# 
   144  020C                     	;# 
   145  0211                     	;# 
   146  0211                     	;# 
   147  0212                     	;# 
   148  0212                     	;# 
   149  0213                     	;# 
   150  0213                     	;# 
   151  0214                     	;# 
   152  0214                     	;# 
   153  0215                     	;# 
   154  0215                     	;# 
   155  0215                     	;# 
   156  0216                     	;# 
   157  0216                     	;# 
   158  0217                     	;# 
   159  0217                     	;# 
   160  0391                     	;# 
   161  0392                     	;# 
   162  0393                     	;# 
   163  0498                     	;# 
   164  0498                     	;# 
   165  0499                     	;# 
   166  049A                     	;# 
   167  049B                     	;# 
   168  049B                     	;# 
   169  049C                     	;# 
   170  049D                     	;# 
   171  049E                     	;# 
   172  049F                     	;# 
   173  0611                     	;# 
   174  0612                     	;# 
   175  0613                     	;# 
   176  0613                     	;# 
   177  0614                     	;# 
   178  0615                     	;# 
   179  0616                     	;# 
   180  0616                     	;# 
   181  0617                     	;# 
   182  0618                     	;# 
   183  0619                     	;# 
   184  0619                     	;# 
   185  061A                     	;# 
   186  061B                     	;# 
   187  061C                     	;# 
   188  061C                     	;# 
   189  0691                     	;# 
   190  0692                     	;# 
   191  0693                     	;# 
   192  0694                     	;# 
   193  0695                     	;# 
   194  0F0F                     	;# 
   195  0F10                     	;# 
   196  0F11                     	;# 
   197  0F12                     	;# 
   198  0F13                     	;# 
   199  0F14                     	;# 
   200  0F15                     	;# 
   201  0F16                     	;# 
   202  0F17                     	;# 
   203  0F18                     	;# 
   204  0F19                     	;# 
   205  0F1A                     	;# 
   206  0F1B                     	;# 
   207  0F1C                     	;# 
   208  0F1D                     	;# 
   209  0F1E                     	;# 
   210  0F1F                     	;# 
   211  0FE3                     	;# 
   212  0FE4                     	;# 
   213  0FE5                     	;# 
   214  0FE6                     	;# 
   215  0FE7                     	;# 
   216  0FE8                     	;# 
   217  0FE9                     	;# 
   218  0FEA                     	;# 
   219  0FEB                     	;# 
   220  0FED                     	;# 
   221  0FEE                     	;# 
   222  0FEF                     	;# 
   223  0000                     	;# 
   224  0001                     	;# 
   225  0002                     	;# 
   226  0003                     	;# 
   227  0004                     	;# 
   228  0005                     	;# 
   229  0006                     	;# 
   230  0007                     	;# 
   231  0008                     	;# 
   232  0009                     	;# 
   233  000A                     	;# 
   234  000B                     	;# 
   235  000C                     	;# 
   236  000E                     	;# 
   237  0011                     	;# 
   238  0012                     	;# 
   239  0013                     	;# 
   240  0015                     	;# 
   241  0016                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001C                     	;# 
   249  008C                     	;# 
   250  008E                     	;# 
   251  0091                     	;# 
   252  0092                     	;# 
   253  0093                     	;# 
   254  0095                     	;# 
   255  0096                     	;# 
   256  0097                     	;# 
   257  0099                     	;# 
   258  009A                     	;# 
   259  009B                     	;# 
   260  009B                     	;# 
   261  009C                     	;# 
   262  009D                     	;# 
   263  009E                     	;# 
   264  009F                     	;# 
   265  010C                     	;# 
   266  010E                     	;# 
   267  0111                     	;# 
   268  0112                     	;# 
   269  0113                     	;# 
   270  0114                     	;# 
   271  0115                     	;# 
   272  0116                     	;# 
   273  0117                     	;# 
   274  0118                     	;# 
   275  0119                     	;# 
   276  011D                     	;# 
   277  018C                     	;# 
   278  018E                     	;# 
   279  0191                     	;# 
   280  0191                     	;# 
   281  0192                     	;# 
   282  0193                     	;# 
   283  0193                     	;# 
   284  0194                     	;# 
   285  0195                     	;# 
   286  0196                     	;# 
   287  020C                     	;# 
   288  0211                     	;# 
   289  0211                     	;# 
   290  0212                     	;# 
   291  0212                     	;# 
   292  0213                     	;# 
   293  0213                     	;# 
   294  0214                     	;# 
   295  0214                     	;# 
   296  0215                     	;# 
   297  0215                     	;# 
   298  0215                     	;# 
   299  0216                     	;# 
   300  0216                     	;# 
   301  0217                     	;# 
   302  0217                     	;# 
   303  0391                     	;# 
   304  0392                     	;# 
   305  0393                     	;# 
   306  0498                     	;# 
   307  0498                     	;# 
   308  0499                     	;# 
   309  049A                     	;# 
   310  049B                     	;# 
   311  049B                     	;# 
   312  049C                     	;# 
   313  049D                     	;# 
   314  049E                     	;# 
   315  049F                     	;# 
   316  0611                     	;# 
   317  0612                     	;# 
   318  0613                     	;# 
   319  0613                     	;# 
   320  0614                     	;# 
   321  0615                     	;# 
   322  0616                     	;# 
   323  0616                     	;# 
   324  0617                     	;# 
   325  0618                     	;# 
   326  0619                     	;# 
   327  0619                     	;# 
   328  061A                     	;# 
   329  061B                     	;# 
   330  061C                     	;# 
   331  061C                     	;# 
   332  0691                     	;# 
   333  0692                     	;# 
   334  0693                     	;# 
   335  0694                     	;# 
   336  0695                     	;# 
   337  0F0F                     	;# 
   338  0F10                     	;# 
   339  0F11                     	;# 
   340  0F12                     	;# 
   341  0F13                     	;# 
   342  0F14                     	;# 
   343  0F15                     	;# 
   344  0F16                     	;# 
   345  0F17                     	;# 
   346  0F18                     	;# 
   347  0F19                     	;# 
   348  0F1A                     	;# 
   349  0F1B                     	;# 
   350  0F1C                     	;# 
   351  0F1D                     	;# 
   352  0F1E                     	;# 
   353  0F1F                     	;# 
   354  0FE3                     	;# 
   355  0FE4                     	;# 
   356  0FE5                     	;# 
   357  0FE6                     	;# 
   358  0FE7                     	;# 
   359  0FE8                     	;# 
   360  0FE9                     	;# 
   361  0FEA                     	;# 
   362  0FEB                     	;# 
   363  0FED                     	;# 
   364  0FEE                     	;# 
   365  0FEF                     	;# 
   366  0000                     	;# 
   367  0001                     	;# 
   368  0002                     	;# 
   369  0003                     	;# 
   370  0004                     	;# 
   371  0005                     	;# 
   372  0006                     	;# 
   373  0007                     	;# 
   374  0008                     	;# 
   375  0009                     	;# 
   376  000A                     	;# 
   377  000B                     	;# 
   378  000C                     	;# 
   379  000E                     	;# 
   380  0011                     	;# 
   381  0012                     	;# 
   382  0013                     	;# 
   383  0015                     	;# 
   384  0016                     	;# 
   385  0016                     	;# 
   386  0017                     	;# 
   387  0018                     	;# 
   388  0019                     	;# 
   389  001A                     	;# 
   390  001B                     	;# 
   391  001C                     	;# 
   392  008C                     	;# 
   393  008E                     	;# 
   394  0091                     	;# 
   395  0092                     	;# 
   396  0093                     	;# 
   397  0095                     	;# 
   398  0096                     	;# 
   399  0097                     	;# 
   400  0099                     	;# 
   401  009A                     	;# 
   402  009B                     	;# 
   403  009B                     	;# 
   404  009C                     	;# 
   405  009D                     	;# 
   406  009E                     	;# 
   407  009F                     	;# 
   408  010C                     	;# 
   409  010E                     	;# 
   410  0111                     	;# 
   411  0112                     	;# 
   412  0113                     	;# 
   413  0114                     	;# 
   414  0115                     	;# 
   415  0116                     	;# 
   416  0117                     	;# 
   417  0118                     	;# 
   418  0119                     	;# 
   419  011D                     	;# 
   420  018C                     	;# 
   421  018E                     	;# 
   422  0191                     	;# 
   423  0191                     	;# 
   424  0192                     	;# 
   425  0193                     	;# 
   426  0193                     	;# 
   427  0194                     	;# 
   428  0195                     	;# 
   429  0196                     	;# 
   430  020C                     	;# 
   431  0211                     	;# 
   432  0211                     	;# 
   433  0212                     	;# 
   434  0212                     	;# 
   435  0213                     	;# 
   436  0213                     	;# 
   437  0214                     	;# 
   438  0214                     	;# 
   439  0215                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0216                     	;# 
   443  0216                     	;# 
   444  0217                     	;# 
   445  0217                     	;# 
   446  0391                     	;# 
   447  0392                     	;# 
   448  0393                     	;# 
   449  0498                     	;# 
   450  0498                     	;# 
   451  0499                     	;# 
   452  049A                     	;# 
   453  049B                     	;# 
   454  049B                     	;# 
   455  049C                     	;# 
   456  049D                     	;# 
   457  049E                     	;# 
   458  049F                     	;# 
   459  0611                     	;# 
   460  0612                     	;# 
   461  0613                     	;# 
   462  0613                     	;# 
   463  0614                     	;# 
   464  0615                     	;# 
   465  0616                     	;# 
   466  0616                     	;# 
   467  0617                     	;# 
   468  0618                     	;# 
   469  0619                     	;# 
   470  0619                     	;# 
   471  061A                     	;# 
   472  061B                     	;# 
   473  061C                     	;# 
   474  061C                     	;# 
   475  0691                     	;# 
   476  0692                     	;# 
   477  0693                     	;# 
   478  0694                     	;# 
   479  0695                     	;# 
   480  0F0F                     	;# 
   481  0F10                     	;# 
   482  0F11                     	;# 
   483  0F12                     	;# 
   484  0F13                     	;# 
   485  0F14                     	;# 
   486  0F15                     	;# 
   487  0F16                     	;# 
   488  0F17                     	;# 
   489  0F18                     	;# 
   490  0F19                     	;# 
   491  0F1A                     	;# 
   492  0F1B                     	;# 
   493  0F1C                     	;# 
   494  0F1D                     	;# 
   495  0F1E                     	;# 
   496  0F1F                     	;# 
   497  0FE3                     	;# 
   498  0FE4                     	;# 
   499  0FE5                     	;# 
   500  0FE6                     	;# 
   501  0FE7                     	;# 
   502  0FE8                     	;# 
   503  0FE9                     	;# 
   504  0FEA                     	;# 
   505  0FEB                     	;# 
   506  0FED                     	;# 
   507  0FEE                     	;# 
   508  0FEF                     	;# 
   509  0000                     	;# 
   510  0001                     	;# 
   511  0002                     	;# 
   512  0003                     	;# 
   513  0004                     	;# 
   514  0005                     	;# 
   515  0006                     	;# 
   516  0007                     	;# 
   517  0008                     	;# 
   518  0009                     	;# 
   519  000A                     	;# 
   520  000B                     	;# 
   521  000C                     	;# 
   522  000E                     	;# 
   523  0011                     	;# 
   524  0012                     	;# 
   525  0013                     	;# 
   526  0015                     	;# 
   527  0016                     	;# 
   528  0016                     	;# 
   529  0017                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  001A                     	;# 
   533  001B                     	;# 
   534  001C                     	;# 
   535  008C                     	;# 
   536  008E                     	;# 
   537  0091                     	;# 
   538  0092                     	;# 
   539  0093                     	;# 
   540  0095                     	;# 
   541  0096                     	;# 
   542  0097                     	;# 
   543  0099                     	;# 
   544  009A                     	;# 
   545  009B                     	;# 
   546  009B                     	;# 
   547  009C                     	;# 
   548  009D                     	;# 
   549  009E                     	;# 
   550  009F                     	;# 
   551  010C                     	;# 
   552  010E                     	;# 
   553  0111                     	;# 
   554  0112                     	;# 
   555  0113                     	;# 
   556  0114                     	;# 
   557  0115                     	;# 
   558  0116                     	;# 
   559  0117                     	;# 
   560  0118                     	;# 
   561  0119                     	;# 
   562  011D                     	;# 
   563  018C                     	;# 
   564  018E                     	;# 
   565  0191                     	;# 
   566  0191                     	;# 
   567  0192                     	;# 
   568  0193                     	;# 
   569  0193                     	;# 
   570  0194                     	;# 
   571  0195                     	;# 
   572  0196                     	;# 
   573  020C                     	;# 
   574  0211                     	;# 
   575  0211                     	;# 
   576  0212                     	;# 
   577  0212                     	;# 
   578  0213                     	;# 
   579  0213                     	;# 
   580  0214                     	;# 
   581  0214                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  0391                     	;# 
   590  0392                     	;# 
   591  0393                     	;# 
   592  0498                     	;# 
   593  0498                     	;# 
   594  0499                     	;# 
   595  049A                     	;# 
   596  049B                     	;# 
   597  049B                     	;# 
   598  049C                     	;# 
   599  049D                     	;# 
   600  049E                     	;# 
   601  049F                     	;# 
   602  0611                     	;# 
   603  0612                     	;# 
   604  0613                     	;# 
   605  0613                     	;# 
   606  0614                     	;# 
   607  0615                     	;# 
   608  0616                     	;# 
   609  0616                     	;# 
   610  0617                     	;# 
   611  0618                     	;# 
   612  0619                     	;# 
   613  0619                     	;# 
   614  061A                     	;# 
   615  061B                     	;# 
   616  061C                     	;# 
   617  061C                     	;# 
   618  0691                     	;# 
   619  0692                     	;# 
   620  0693                     	;# 
   621  0694                     	;# 
   622  0695                     	;# 
   623  0F0F                     	;# 
   624  0F10                     	;# 
   625  0F11                     	;# 
   626  0F12                     	;# 
   627  0F13                     	;# 
   628  0F14                     	;# 
   629  0F15                     	;# 
   630  0F16                     	;# 
   631  0F17                     	;# 
   632  0F18                     	;# 
   633  0F19                     	;# 
   634  0F1A                     	;# 
   635  0F1B                     	;# 
   636  0F1C                     	;# 
   637  0F1D                     	;# 
   638  0F1E                     	;# 
   639  0F1F                     	;# 
   640  0FE3                     	;# 
   641  0FE4                     	;# 
   642  0FE5                     	;# 
   643  0FE6                     	;# 
   644  0FE7                     	;# 
   645  0FE8                     	;# 
   646  0FE9                     	;# 
   647  0FEA                     	;# 
   648  0FEB                     	;# 
   649  0FED                     	;# 
   650  0FEE                     	;# 
   651  0FEF                     	;# 
   652                           
   653                           	psect	idataCOMMON
   654  06B5                     __pidataCOMMON:	
   655                           
   656                           ;initializer for _mode
   657  06B5  3401               	retlw	1
   658                           
   659                           	psect	idataBANK0
   660  06B6                     __pidataBANK0:	
   661                           
   662                           ;initializer for _nextMode
   663  06B6  3401               	retlw	1
   664  07E0                     _NVMEM_absaddr	set	2016
   665                           
   666                           	psect	stringtext1
   667  06AB                     __pstringtext1:	
   668  06AB                     _n_ADDRESS_P0:	
   669  06AB  34AD               	retlw	173
   670  06AC  3487               	retlw	135
   671  06AD  3466               	retlw	102
   672  06AE  34BC               	retlw	188
   673  06AF  34BB               	retlw	187
   674  06B0                     __end_of_n_ADDRESS_P0:	
   675                           
   676                           	psect	stringtext2
   677  06B7                     __pstringtext2:	
   678  06B7                     _n_ADDRESS_MUL:	
   679  06B7  3421               	retlw	33
   680  06B8                     __end_of_n_ADDRESS_MUL:	
   681  07E0                     _NVMEM_absaddr	set	2016
   682                           
   683                           	psect	_NVMEM_text
   684  07E0                     __p_NVMEM_text:	
   685  07E0                     _NVMEM:	
   686  07E0  3455               	retlw	85
   687  07E1  346E               	retlw	110
   688  07E2  3463               	retlw	99
   689  07E3  346F               	retlw	111
   690  07E4  346E               	retlw	110
   691  07E5  3466               	retlw	102
   692  07E6  3469               	retlw	105
   693  07E7  3467               	retlw	103
   694  07E8  3475               	retlw	117
   695  07E9  3472               	retlw	114
   696  07EA  3465               	retlw	101
   697  07EB  3464               	retlw	100
   698  07EC  3400               	retlw	0
   699  07ED  3400               	retlw	0
   700  07EE  3400               	retlw	0
   701  07EF  3400               	retlw	0
   702  07F0  3400               	retlw	0
   703  07F1  3400               	retlw	0
   704  07F2  3400               	retlw	0
   705  07F3  3400               	retlw	0
   706  07F4  3400               	retlw	0
   707  07F5  3400               	retlw	0
   708  07F6  3400               	retlw	0
   709  07F7  3400               	retlw	0
   710  07F8  3400               	retlw	0
   711  07F9  3400               	retlw	0
   712  07FA  3400               	retlw	0
   713  07FB  3400               	retlw	0
   714  07FC  3400               	retlw	0
   715  07FD  3400               	retlw	0
   716  07FE  3400               	retlw	0
   717  07FF  3400               	retlw	0
   718  0800                     __end_of_NVMEM:	
   719  000C                     _PORTAbits	set	12
   720  0003                     _STATUSbits	set	3
   721  000B                     _INTCONbits	set	11
   722  0011                     _PIR1bits	set	17
   723  0097                     _WDTCONbits	set	151
   724  0091                     _PIE1bits	set	145
   725  009E                     _ADCON1bits	set	158
   726  008E                     _TRISCbits	set	142
   727  008C                     _TRISAbits	set	140
   728  0095                     _OPTION_REGbits	set	149
   729  0099                     _OSCCONbits	set	153
   730  009D                     _ADCON0bits	set	157
   731  009C                     _ADRESH	set	156
   732  009B                     _ADRESL	set	155
   733  0117                     _FVRCONbits	set	279
   734  0194                     _PMDATH	set	404
   735  0193                     _PMDATL	set	403
   736  0196                     _PMCON2	set	406
   737  0195                     _PMCON1bits	set	405
   738  0192                     _PMADRH	set	402
   739  0191                     _PMADRL	set	401
   740  0195                     _PMCON1	set	405
   741  018E                     _ANSELC	set	398
   742  018C                     _ANSELA	set	396
   743  018E                     _ANSELCbits	set	398
   744  018C                     _ANSELAbits	set	396
   745  0215                     _SSPCON1bits	set	533
   746  0214                     _SSP1STATbits	set	532
   747  0211                     _SSP1BUF	set	529
   748  020C                     _WPUAbits	set	524
   749                           
   750                           ; #config settings
   751  0000                     
   752                           	psect	cinit
   753  004D                     start_initialization:	
   754  004D                     __initialization:	
   755                           
   756                           ; Initialize objects allocated to COMMON
   757  004D  26B5               	fcall	__pidataCOMMON	;fetch initializer
   758  004E  00F8               	movwf	__pdataCOMMON& (0+127)
   759                           
   760                           ; Initialize objects allocated to BANK0
   761  004F  26B6               	fcall	__pidataBANK0	;fetch initializer
   762  0050  00E0               	movwf	__pdataBANK0& (0+127)
   763                           
   764                           ; Clear objects allocated to COMMON
   765  0051  01F7               	clrf	__pbssCOMMON& (0+127)
   766                           
   767                           ; Clear objects allocated to BANK0
   768  0052  3052               	movlw	low __pbssBANK0
   769  0053  0084               	movwf	4
   770  0054  3000               	movlw	high __pbssBANK0
   771  0055  0085               	movwf	5
   772  0056  300E               	movlw	14
   773  0057  26A5               	fcall	clear_ram0
   774  0058                     end_of_initialization:	
   775                           ;End of C runtime variable initialization code
   776                           
   777  0058                     __end_of__initialization:	
   778  0058  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   779  0059  0020               	movlb	0
   780  005A  2C9E               	ljmp	_main	;jump to C main() function
   781                           
   782                           	psect	bssCOMMON
   783  0077                     __pbssCOMMON:	
   784  0077                     _adcLoop:	
   785  0077                     	ds	1
   786                           
   787                           	psect	dataCOMMON
   788  0078                     __pdataCOMMON:	
   789  0078                     _mode:	
   790  0078                     	ds	1
   791                           
   792                           	psect	bssBANK0
   793  0052                     __pbssBANK0:	
   794  0052                     _adcSum:	
   795  0052                     	ds	4
   796  0056                     _status:	
   797  0056                     	ds	1
   798  0057                     _buffer:	
   799  0057                     	ds	6
   800  005D                     _byte:	
   801  005D                     	ds	3
   802                           
   803                           	psect	dataBANK0
   804  0060                     __pdataBANK0:	
   805  0060                     _nextMode:	
   806  0060                     	ds	1
   807                           
   808                           	psect	clrtext
   809  06A5                     clear_ram0:	
   810                           ;	Called with FSR0 containing the base address, and
   811                           ;	WREG with the size to clear
   812                           
   813  06A5  0064               	clrwdt	;clear the watchdog before getting into this loop
   814  06A6                     clrloop0:	
   815  06A6  0180               	clrf	0	;clear RAM location pointed to by FSR
   816  06A7  3101               	addfsr 0,1
   817  06A8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   818  06A9  2EA6               	goto	clrloop0	;have we reached the end yet?
   819  06AA  3400               	retlw	0	;all done for this memory range, return
   820                           
   821                           	psect	cstackCOMMON
   822  0070                     __pcstackCOMMON:	
   823  0070                     ?_nrf24l01ISR:	
   824  0070                     ??_nrf24l01ISR:	
   825                           ; 1 bytes @ 0x0
   826                           
   827  0070                     ?_nrf24l01SendByte:	
   828                           ; 1 bytes @ 0x0
   829                           
   830  0070                     ?_nrf24l01SendStart:	
   831                           ; 1 bytes @ 0x0
   832                           
   833  0070                     ?_nrf24l01SendEnd:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0070                     ?_nrf24l01Init:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0070                     ?_ISR:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0070                     ??_ISR:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0070                     ?_sendName:	
   846                           ; 1 bytes @ 0x0
   847                           
   848  0070                     ?_sendString:	
   849                           ; 1 bytes @ 0x0
   850                           
   851  0070                     ?_startADC:	
   852                           ; 1 bytes @ 0x0
   853                           
   854  0070                     ?_loop:	
   855                           ; 1 bytes @ 0x0
   856                           
   857  0070                     ?_main:	
   858                           ; 1 bytes @ 0x0
   859                           
   860  0070                     ?_nrf24l01SPIStart:	
   861                           ; 1 bytes @ 0x0
   862                           
   863  0070                     ?_nrf24l01SPISend:	
   864                           ; 1 bytes @ 0x0
   865                           
   866  0070                     ?_nrf24l01SPIEnd:	
   867                           ; 1 bytes @ 0x0
   868                           
   869  0070                     ?_nrf24l01SetTransmitMode:	
   870                           ; 1 bytes @ 0x0
   871                           
   872  0070                     ?_nrf24l01InitRegisters:	
   873                           ; 1 bytes @ 0x0
   874                           
   875                           
   876                           ; 1 bytes @ 0x0
   877  0070                     	ds	5
   878  0075                     ISR@result:	
   879                           
   880                           ; 2 bytes @ 0x5
   881  0075                     	ds	2
   882                           
   883                           	psect	cstackBANK0
   884  0020                     __pcstackBANK0:	
   885  0020                     ??_nrf24l01SendEnd:	
   886  0020                     ??_startADC:	
   887                           ; 1 bytes @ 0x0
   888                           
   889  0020                     ??_nrf24l01SPIStart:	
   890                           ; 1 bytes @ 0x0
   891                           
   892  0020                     ??_nrf24l01SPISend:	
   893                           ; 1 bytes @ 0x0
   894                           
   895  0020                     ??_nrf24l01SPIEnd:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  0020                     ?_read_flashmem:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  0020                     ?___lwdiv:	
   902                           ; 2 bytes @ 0x0
   903                           
   904  0020                     ?___lwmod:	
   905                           ; 2 bytes @ 0x0
   906                           
   907  0020                     ?___ftpack:	
   908                           ; 2 bytes @ 0x0
   909                           
   910  0020                     ?___aldiv:	
   911                           ; 3 bytes @ 0x0
   912                           
   913  0020                     nrf24l01SPISend@data:	
   914                           ; 4 bytes @ 0x0
   915                           
   916  0020                     read_flashmem@offset:	
   917                           ; 1 bytes @ 0x0
   918                           
   919  0020                     ___lwdiv@divisor:	
   920                           ; 2 bytes @ 0x0
   921                           
   922  0020                     ___lwmod@divisor:	
   923                           ; 2 bytes @ 0x0
   924                           
   925  0020                     ___ftpack@arg:	
   926                           ; 2 bytes @ 0x0
   927                           
   928  0020                     ___aldiv@divisor:	
   929                           ; 3 bytes @ 0x0
   930                           
   931                           
   932                           ; 4 bytes @ 0x0
   933  0020                     	ds	1
   934  0021                     ??_nrf24l01SendByte:	
   935  0021                     ?_nrf24l01Send:	
   936                           ; 1 bytes @ 0x1
   937                           
   938  0021                     startADC@channel:	
   939                           ; 1 bytes @ 0x1
   940                           
   941  0021                     nrf24l01Send@data:	
   942                           ; 1 bytes @ 0x1
   943                           
   944  0021                     nrf24l01SendByte@payloadByte:	
   945                           ; 1 bytes @ 0x1
   946                           
   947                           
   948                           ; 1 bytes @ 0x1
   949  0021                     	ds	1
   950  0022                     ??_read_flashmem:	
   951  0022                     ??_sendString:	
   952                           ; 1 bytes @ 0x2
   953                           
   954  0022                     ??_nrf24l01Send:	
   955                           ; 1 bytes @ 0x2
   956                           
   957  0022                     ___lwdiv@dividend:	
   958                           ; 1 bytes @ 0x2
   959                           
   960  0022                     ___lwmod@dividend:	
   961                           ; 2 bytes @ 0x2
   962                           
   963                           
   964                           ; 2 bytes @ 0x2
   965  0022                     	ds	1
   966  0023                     sendString@string:	
   967  0023                     nrf24l01Send@command:	
   968                           ; 1 bytes @ 0x3
   969                           
   970  0023                     ___ftpack@exp:	
   971                           ; 1 bytes @ 0x3
   972                           
   973                           
   974                           ; 1 bytes @ 0x3
   975  0023                     	ds	1
   976  0024                     ??_nrf24l01SetTransmitMode:	
   977  0024                     ??_nrf24l01InitRegisters:	
   978                           ; 1 bytes @ 0x4
   979                           
   980  0024                     ??___lwdiv:	
   981                           ; 1 bytes @ 0x4
   982                           
   983  0024                     ??___lwmod:	
   984                           ; 1 bytes @ 0x4
   985                           
   986  0024                     sendString@i:	
   987                           ; 1 bytes @ 0x4
   988                           
   989  0024                     ___ftpack@sign:	
   990                           ; 1 bytes @ 0x4
   991                           
   992  0024                     read_flashmem@result:	
   993                           ; 1 bytes @ 0x4
   994                           
   995  0024                     ___aldiv@dividend:	
   996                           ; 2 bytes @ 0x4
   997                           
   998                           
   999                           ; 4 bytes @ 0x4
  1000  0024                     	ds	1
  1001  0025                     ??___ftpack:	
  1002  0025                     nrf24l01SetTransmitMode@config:	
  1003                           ; 1 bytes @ 0x5
  1004                           
  1005  0025                     nrf24l01InitRegisters@setupAW:	
  1006                           ; 1 bytes @ 0x5
  1007                           
  1008  0025                     ___lwmod@counter:	
  1009                           ; 1 bytes @ 0x5
  1010                           
  1011  0025                     ___lwdiv@quotient:	
  1012                           ; 1 bytes @ 0x5
  1013                           
  1014                           
  1015                           ; 2 bytes @ 0x5
  1016  0025                     	ds	1
  1017  0026                     ??_nrf24l01SendStart:	
  1018  0026                     ??_sendName:	
  1019                           ; 1 bytes @ 0x6
  1020                           
  1021  0026                     nrf24l01InitRegisters@setupRetries:	
  1022                           ; 1 bytes @ 0x6
  1023                           
  1024                           
  1025                           ; 1 bytes @ 0x6
  1026  0026                     	ds	1
  1027  0027                     sendName@btye:	
  1028  0027                     nrf24l01InitRegisters@feature:	
  1029                           ; 1 bytes @ 0x7
  1030                           
  1031  0027                     ___lwdiv@counter:	
  1032                           ; 1 bytes @ 0x7
  1033                           
  1034                           
  1035                           ; 1 bytes @ 0x7
  1036  0027                     	ds	1
  1037  0028                     ?_utoa:	
  1038  0028                     ??___aldiv:	
  1039                           ; 1 bytes @ 0x8
  1040                           
  1041  0028                     ?___altoft:	
  1042                           ; 1 bytes @ 0x8
  1043                           
  1044  0028                     nrf24l01InitRegisters@rfSetup:	
  1045                           ; 3 bytes @ 0x8
  1046                           
  1047  0028                     sendName@offset:	
  1048                           ; 1 bytes @ 0x8
  1049                           
  1050  0028                     utoa@val:	
  1051                           ; 2 bytes @ 0x8
  1052                           
  1053  0028                     ___altoft@c:	
  1054                           ; 2 bytes @ 0x8
  1055                           
  1056                           
  1057                           ; 4 bytes @ 0x8
  1058  0028                     	ds	1
  1059  0029                     nrf24l01InitRegisters@config:	
  1060  0029                     ___aldiv@counter:	
  1061                           ; 1 bytes @ 0x9
  1062                           
  1063                           
  1064                           ; 1 bytes @ 0x9
  1065  0029                     	ds	1
  1066  002A                     nrf24l01InitRegisters@enRXAddr:	
  1067  002A                     ___aldiv@sign:	
  1068                           ; 1 bytes @ 0xA
  1069                           
  1070  002A                     utoa@base:	
  1071                           ; 1 bytes @ 0xA
  1072                           
  1073                           
  1074                           ; 2 bytes @ 0xA
  1075  002A                     	ds	1
  1076  002B                     nrf24l01InitRegisters@enAA:	
  1077  002B                     ___aldiv@quotient:	
  1078                           ; 1 bytes @ 0xB
  1079                           
  1080                           
  1081                           ; 4 bytes @ 0xB
  1082  002B                     	ds	1
  1083  002C                     ??_utoa:	
  1084  002C                     ??___altoft:	
  1085                           ; 1 bytes @ 0xC
  1086                           
  1087  002C                     nrf24l01InitRegisters@DynPD:	
  1088                           ; 1 bytes @ 0xC
  1089                           
  1090                           
  1091                           ; 1 bytes @ 0xC
  1092  002C                     	ds	1
  1093  002D                     ??_nrf24l01Init:	
  1094  002D                     utoa@v:	
  1095                           ; 1 bytes @ 0xD
  1096                           
  1097                           
  1098                           ; 2 bytes @ 0xD
  1099  002D                     	ds	1
  1100  002E                     ___altoft@exp:	
  1101                           
  1102                           ; 1 bytes @ 0xE
  1103  002E                     	ds	1
  1104  002F                     ___altoft@sign:	
  1105  002F                     utoa@c:	
  1106                           ; 1 bytes @ 0xF
  1107                           
  1108                           
  1109                           ; 1 bytes @ 0xF
  1110  002F                     	ds	1
  1111  0030                     ?___ftdiv:	
  1112  0030                     utoa@buf:	
  1113                           ; 3 bytes @ 0x10
  1114                           
  1115  0030                     ___ftdiv@f2:	
  1116                           ; 1 bytes @ 0x10
  1117                           
  1118                           
  1119                           ; 3 bytes @ 0x10
  1120  0030                     	ds	1
  1121  0031                     ?_itoa:	
  1122  0031                     itoa@val:	
  1123                           ; 1 bytes @ 0x11
  1124                           
  1125                           
  1126                           ; 2 bytes @ 0x11
  1127  0031                     	ds	2
  1128  0033                     itoa@base:	
  1129  0033                     ___ftdiv@f1:	
  1130                           ; 2 bytes @ 0x13
  1131                           
  1132                           
  1133                           ; 3 bytes @ 0x13
  1134  0033                     	ds	2
  1135  0035                     ??_itoa:	
  1136                           
  1137                           ; 1 bytes @ 0x15
  1138  0035                     	ds	1
  1139  0036                     ??___ftdiv:	
  1140  0036                     itoa@cp:	
  1141                           ; 1 bytes @ 0x16
  1142                           
  1143                           
  1144                           ; 1 bytes @ 0x16
  1145  0036                     	ds	1
  1146  0037                     itoa@buf:	
  1147                           
  1148                           ; 1 bytes @ 0x17
  1149  0037                     	ds	3
  1150  003A                     ___ftdiv@cntr:	
  1151                           
  1152                           ; 1 bytes @ 0x1A
  1153  003A                     	ds	1
  1154  003B                     ___ftdiv@f3:	
  1155                           
  1156                           ; 3 bytes @ 0x1B
  1157  003B                     	ds	3
  1158  003E                     ___ftdiv@exp:	
  1159                           
  1160                           ; 1 bytes @ 0x1E
  1161  003E                     	ds	1
  1162  003F                     ___ftdiv@sign:	
  1163                           
  1164                           ; 1 bytes @ 0x1F
  1165  003F                     	ds	1
  1166  0040                     ?___fttol:	
  1167  0040                     ___fttol@f1:	
  1168                           ; 4 bytes @ 0x20
  1169                           
  1170                           
  1171                           ; 3 bytes @ 0x20
  1172  0040                     	ds	4
  1173  0044                     ??___fttol:	
  1174                           
  1175                           ; 1 bytes @ 0x24
  1176  0044                     	ds	4
  1177  0048                     ___fttol@sign1:	
  1178                           
  1179                           ; 1 bytes @ 0x28
  1180  0048                     	ds	1
  1181  0049                     ___fttol@lval:	
  1182                           
  1183                           ; 4 bytes @ 0x29
  1184  0049                     	ds	4
  1185  004D                     ___fttol@exp1:	
  1186                           
  1187                           ; 1 bytes @ 0x2D
  1188  004D                     	ds	1
  1189  004E                     ??_loop:	
  1190                           
  1191                           ; 1 bytes @ 0x2E
  1192  004E                     	ds	2
  1193  0050                     loop@i:	
  1194                           
  1195                           ; 1 bytes @ 0x30
  1196  0050                     	ds	1
  1197  0051                     ??_main:	
  1198                           
  1199                           ; 1 bytes @ 0x31
  1200  0051                     	ds	1
  1201                           
  1202                           	psect	maintext
  1203  049E                     __pmaintext:	
  1204 ;;
  1205 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1206 ;;
  1207 ;; *************** function _main *****************
  1208 ;; Defined at:
  1209 ;;		line 216 in file "main.c"
  1210 ;; Parameters:    Size  Location     Type
  1211 ;;		None
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;		None
  1214 ;; Return value:  Size  Location     Type
  1215 ;;                  1    wreg      void 
  1216 ;; Registers used:
  1217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1218 ;; Tracked objects:
  1219 ;;		On entry : B1F/0
  1220 ;;		On exit  : 0/0
  1221 ;;		Unchanged: 0/0
  1222 ;; Data sizes:     COMMON   BANK0   BANK1
  1223 ;;      Params:         0       0       0
  1224 ;;      Locals:         0       0       0
  1225 ;;      Temps:          0       1       0
  1226 ;;      Totals:         0       1       0
  1227 ;;Total ram usage:        1 bytes
  1228 ;; Hardware stack levels required when called:    7
  1229 ;; This function calls:
  1230 ;;		_loop
  1231 ;;		_nrf24l01Init
  1232 ;; This function is called by:
  1233 ;;		Startup code after reset
  1234 ;; This function uses a non-reentrant model
  1235 ;;
  1236                           
  1237                           
  1238                           ;psect for function _main
  1239  049E                     _main:	
  1240                           
  1241                           ;main.c: 222: INTCONbits.PEIE = 0;
  1242                           
  1243                           ;incstack = 0
  1244                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1245  049E  130B               	bcf	11,6	;volatile
  1246                           
  1247                           ;main.c: 223: INTCONbits.GIE = 0;
  1248  049F  138B               	bcf	11,7	;volatile
  1249                           
  1250                           ;main.c: 225: OSCCONbits.IRCF = 0b1111;
  1251  04A0  3078               	movlw	120
  1252  04A1  0021               	movlb	1	; select bank1
  1253  04A2  0499               	iorwf	25,f	;volatile
  1254                           
  1255                           ;main.c: 226: OSCCONbits.SCS = 0b10;
  1256  04A3  0819               	movf	25,w	;volatile
  1257  04A4  39FC               	andlw	-4
  1258  04A5  3802               	iorlw	2
  1259  04A6  0099               	movwf	25	;volatile
  1260                           
  1261                           ;main.c: 228: _delay((unsigned long)((10)*(16000000/4000.0)));
  1262  04A7  3034               	movlw	52
  1263  04A8  0020               	movlb	0	; select bank0
  1264  04A9  00D1               	movwf	??_main
  1265  04AA  30F1               	movlw	241
  1266  04AB                     u1617:	
  1267  04AB  0B89               	decfsz	9,f
  1268  04AC  2CAB               	goto	u1617
  1269  04AD  0BD1               	decfsz	??_main,f
  1270  04AE  2CAB               	goto	u1617
  1271  04AF  3200               	nop2
  1272                           
  1273                           ;main.c: 230: nrf24l01Init();
  1274  04B0  25AB               	fcall	_nrf24l01Init
  1275                           
  1276                           ;main.c: 232: OPTION_REGbits.nWPUEN = 0;
  1277  04B1  0021               	movlb	1	; select bank1
  1278  04B2  1395               	bcf	21,7	;volatile
  1279                           
  1280                           ;main.c: 235: FVRCONbits.FVREN = 0;
  1281  04B3  0022               	movlb	2	; select bank2
  1282  04B4  1397               	bcf	23,7	;volatile
  1283                           
  1284                           ;main.c: 236: FVRCONbits.ADFVR = 1;
  1285  04B5  0817               	movf	23,w	;volatile
  1286  04B6  39FC               	andlw	-4
  1287  04B7  3801               	iorlw	1
  1288  04B8  0097               	movwf	23	;volatile
  1289                           
  1290                           ;main.c: 237: FVRCONbits.FVREN = 1;
  1291  04B9  1797               	bsf	23,7	;volatile
  1292                           
  1293                           ;main.c: 240: FVRCONbits.TSEN = 0;
  1294  04BA  1297               	bcf	23,5	;volatile
  1295                           
  1296                           ;main.c: 241: FVRCONbits.TSRNG = 0;
  1297  04BB  1217               	bcf	23,4	;volatile
  1298                           
  1299                           ;main.c: 242: FVRCONbits.TSEN = 1;
  1300  04BC  1697               	bsf	23,5	;volatile
  1301                           
  1302                           ;main.c: 245: ADCON0bits.ADON = 0;
  1303  04BD  0021               	movlb	1	; select bank1
  1304  04BE  101D               	bcf	29,0	;volatile
  1305                           
  1306                           ;main.c: 247: ANSELAbits.ANSA4 = 1;
  1307  04BF  0023               	movlb	3	; select bank3
  1308  04C0  160C               	bsf	12,4	;volatile
  1309                           
  1310                           ;main.c: 248: TRISAbits.TRISA4 = 1;
  1311  04C1  0021               	movlb	1	; select bank1
  1312  04C2  160C               	bsf	12,4	;volatile
  1313                           
  1314                           ;main.c: 249: WPUAbits.WPUA4 = 0;
  1315  04C3  0024               	movlb	4	; select bank4
  1316  04C4  120C               	bcf	12,4	;volatile
  1317                           
  1318                           ;main.c: 251: ANSELCbits.ANSC3 = 1;
  1319  04C5  0023               	movlb	3	; select bank3
  1320  04C6  158E               	bsf	14,3	;volatile
  1321                           
  1322                           ;main.c: 252: TRISCbits.TRISC3 = 1;
  1323  04C7  0021               	movlb	1	; select bank1
  1324  04C8  158E               	bsf	14,3	;volatile
  1325                           
  1326                           ;main.c: 254: ADCON1bits.ADCS = 0b111;
  1327  04C9  3070               	movlw	112
  1328  04CA  049E               	iorwf	30,f	;volatile
  1329                           
  1330                           ;main.c: 255: ADCON1bits.ADFM = 1;
  1331  04CB  179E               	bsf	30,7	;volatile
  1332                           
  1333                           ;main.c: 256: ADCON1bits.ADPREF = 0b00;
  1334  04CC  30FC               	movlw	-4
  1335  04CD  059E               	andwf	30,f	;volatile
  1336                           
  1337                           ;main.c: 258: PIE1bits.ADIE = 1;
  1338  04CE  1711               	bsf	17,6	;volatile
  1339                           
  1340                           ;main.c: 260: ADCON0bits.CHS = 3;
  1341  04CF  081D               	movf	29,w	;volatile
  1342  04D0  3983               	andlw	-125
  1343  04D1  380C               	iorlw	12
  1344  04D2  009D               	movwf	29	;volatile
  1345                           
  1346                           ;main.c: 261: ADCON0bits.ADON = 1;
  1347  04D3  141D               	bsf	29,0	;volatile
  1348                           
  1349                           ;main.c: 265: TRISAbits.TRISA2 = 1;
  1350  04D4  150C               	bsf	12,2	;volatile
  1351                           
  1352                           ;main.c: 266: INTCONbits.INTE = 1;
  1353  04D5  160B               	bsf	11,4	;volatile
  1354                           
  1355                           ;main.c: 267: OPTION_REGbits.INTEDG = 0;
  1356  04D6  1315               	bcf	21,6	;volatile
  1357                           
  1358                           ;main.c: 271: WDTCONbits.WDTPS = 12;
  1359  04D7  0817               	movf	23,w	;volatile
  1360  04D8  39C1               	andlw	-63
  1361  04D9  3818               	iorlw	24
  1362  04DA  0097               	movwf	23	;volatile
  1363                           
  1364                           ;main.c: 275: INTCONbits.PEIE = 1;
  1365  04DB  170B               	bsf	11,6	;volatile
  1366                           
  1367                           ;main.c: 276: INTCONbits.GIE = 1;
  1368  04DC  178B               	bsf	11,7	;volatile
  1369  04DD                     l2355:	
  1370                           ;main.c: 279: while(1){
  1371                           
  1372                           
  1373                           ;main.c: 280: loop();
  1374  04DD  205B               	fcall	_loop
  1375  04DE  2CDD               	goto	l2355
  1376  04DF                     __end_of_main:	
  1377                           ;main.c: 281: }
  1378                           ;main.c: 283: return;
  1379                           
  1380                           
  1381                           	psect	text1
  1382  05AB                     __ptext1:	
  1383 ;; *************** function _nrf24l01Init *****************
  1384 ;; Defined at:
  1385 ;;		line 188 in file "nrf24l01.c"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;		None
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;		None
  1390 ;; Return value:  Size  Location     Type
  1391 ;;                  1    wreg      void 
  1392 ;; Registers used:
  1393 ;;		wreg, status,2, status,0, pclath, cstack
  1394 ;; Tracked objects:
  1395 ;;		On entry : 0/0
  1396 ;;		On exit  : 0/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMMON   BANK0   BANK1
  1399 ;;      Params:         0       0       0
  1400 ;;      Locals:         0       0       0
  1401 ;;      Temps:          0       1       0
  1402 ;;      Totals:         0       1       0
  1403 ;;Total ram usage:        1 bytes
  1404 ;; Hardware stack levels used:    1
  1405 ;; Hardware stack levels required when called:    5
  1406 ;; This function calls:
  1407 ;;		_nrf24l01InitRegisters
  1408 ;; This function is called by:
  1409 ;;		_main
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           
  1414                           ;psect for function _nrf24l01Init
  1415  05AB                     _nrf24l01Init:	
  1416                           
  1417                           ;nrf24l01.c: 190: TRISAbits.TRISA0 = 0;
  1418                           
  1419                           ;incstack = 0
  1420                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1421  05AB  0021               	movlb	1	; select bank1
  1422  05AC  100C               	bcf	12,0	;volatile
  1423                           
  1424                           ;nrf24l01.c: 194: ANSELA = 0x00;
  1425  05AD  0023               	movlb	3	; select bank3
  1426  05AE  018C               	clrf	12	;volatile
  1427                           
  1428                           ;nrf24l01.c: 195: ANSELC = 0x00;
  1429  05AF  018E               	clrf	14	;volatile
  1430                           
  1431                           ;nrf24l01.c: 197: TRISAbits.TRISA1 = 0;
  1432  05B0  0021               	movlb	1	; select bank1
  1433  05B1  108C               	bcf	12,1	;volatile
  1434                           
  1435                           ;nrf24l01.c: 199: TRISCbits.TRISC1 = 1;
  1436  05B2  148E               	bsf	14,1	;volatile
  1437                           
  1438                           ;nrf24l01.c: 200: TRISCbits.TRISC2 = 0;
  1439  05B3  110E               	bcf	14,2	;volatile
  1440                           
  1441                           ;nrf24l01.c: 201: TRISCbits.TRISC0 = 0;
  1442  05B4  100E               	bcf	14,0	;volatile
  1443                           
  1444                           ;nrf24l01.c: 203: SSPCON1bits.SSPEN = 0;
  1445  05B5  0024               	movlb	4	; select bank4
  1446  05B6  1295               	bcf	21,5	;volatile
  1447                           
  1448                           ;nrf24l01.c: 204: SSPCON1bits.CKP = 0;
  1449  05B7  1215               	bcf	21,4	;volatile
  1450                           
  1451                           ;nrf24l01.c: 205: SSP1STATbits.CKE = 1;
  1452  05B8  1714               	bsf	20,6	;volatile
  1453                           
  1454                           ;nrf24l01.c: 206: SSPCON1bits.SSPM = 0b0000;
  1455  05B9  30F0               	movlw	-16
  1456  05BA  0595               	andwf	21,f	;volatile
  1457                           
  1458                           ;nrf24l01.c: 208: SSPCON1bits.SSPEN = 1;
  1459  05BB  1695               	bsf	21,5	;volatile
  1460                           
  1461                           ;nrf24l01.c: 210: PORTAbits.RA0 = 0;
  1462  05BC  0020               	movlb	0	; select bank0
  1463  05BD  100C               	bcf	12,0	;volatile
  1464                           
  1465                           ;nrf24l01.c: 212: _delay((unsigned long)((11)*(16000000/4000.0)));
  1466  05BE  303A               	movlw	58
  1467  05BF  0020               	movlb	0	; select bank0
  1468  05C0  00AD               	movwf	??_nrf24l01Init
  1469  05C1  3023               	movlw	35
  1470  05C2                     u1627:	
  1471  05C2  0B89               	decfsz	9,f
  1472  05C3  2DC2               	goto	u1627
  1473  05C4  0BAD               	decfsz	??_nrf24l01Init,f
  1474  05C5  2DC2               	goto	u1627
  1475                           
  1476                           ;nrf24l01.c: 214: nrf24l01InitRegisters();
  1477  05C6  2244               	fcall	_nrf24l01InitRegisters
  1478                           
  1479                           ;nrf24l01.c: 216: _delay((unsigned long)((2)*(16000000/4000.0)));
  1480  05C7  300B               	movlw	11
  1481  05C8  0020               	movlb	0	; select bank0
  1482  05C9  00AD               	movwf	??_nrf24l01Init
  1483  05CA  3062               	movlw	98
  1484  05CB                     u1637:	
  1485  05CB  0B89               	decfsz	9,f
  1486  05CC  2DCB               	goto	u1637
  1487  05CD  0BAD               	decfsz	??_nrf24l01Init,f
  1488  05CE  2DCB               	goto	u1637
  1489  05CF  0000               	nop
  1490  05D0  0008               	return
  1491  05D1                     __end_of_nrf24l01Init:	
  1492                           
  1493                           	psect	text2
  1494  0244                     __ptext2:	
  1495 ;; *************** function _nrf24l01InitRegisters *****************
  1496 ;; Defined at:
  1497 ;;		line 101 in file "nrf24l01.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;		None
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;  DynPD           1   12[BANK0 ] struct .
  1502 ;;  enAA            1   11[BANK0 ] struct .
  1503 ;;  enRXAddr        1   10[BANK0 ] struct .
  1504 ;;  config          1    9[BANK0 ] struct .
  1505 ;;  rfSetup         1    8[BANK0 ] struct .
  1506 ;;  feature         1    7[BANK0 ] struct .
  1507 ;;  setupRetries    1    6[BANK0 ] struct .
  1508 ;;  setupAW         1    5[BANK0 ] struct .
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      void 
  1511 ;; Registers used:
  1512 ;;		wreg, status,2, status,0, pclath, cstack
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMMON   BANK0   BANK1
  1518 ;;      Params:         0       0       0
  1519 ;;      Locals:         0       8       0
  1520 ;;      Temps:          0       1       0
  1521 ;;      Totals:         0       9       0
  1522 ;;Total ram usage:        9 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:    4
  1525 ;; This function calls:
  1526 ;;		_nrf24l01Send
  1527 ;; This function is called by:
  1528 ;;		_nrf24l01Init
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           
  1533                           ;psect for function _nrf24l01InitRegisters
  1534  0244                     _nrf24l01InitRegisters:	
  1535                           
  1536                           ;nrf24l01.c: 103: nrf24l01Send(0b00100000 | 0x00, 0x00);
  1537                           
  1538                           ;incstack = 0
  1539                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  1540  0244  0020               	movlb	0	; select bank0
  1541  0245  01A1               	clrf	nrf24l01Send@data
  1542  0246  3020               	movlw	32
  1543  0247  2666               	fcall	_nrf24l01Send
  1544                           
  1545                           ;nrf24l01.c: 105: _delay((unsigned long)((10)*(16000000/4000.0)));
  1546  0248  3034               	movlw	52
  1547  0249  0020               	movlb	0	; select bank0
  1548  024A  00A4               	movwf	??_nrf24l01InitRegisters
  1549  024B  30F1               	movlw	241
  1550  024C                     u1647:	
  1551  024C  0B89               	decfsz	9,f
  1552  024D  2A4C               	goto	u1647
  1553  024E  0BA4               	decfsz	??_nrf24l01InitRegisters,f
  1554  024F  2A4C               	goto	u1647
  1555  0250  3200               	nop2
  1556                           
  1557                           ;nrf24l01.c: 107: n_SETUP_AW_t setupAW;
  1558                           ;nrf24l01.c: 108: setupAW.byte = 0x00;
  1559  0251  0020               	movlb	0	; select bank0
  1560  0252  01A5               	clrf	nrf24l01InitRegisters@setupAW
  1561                           
  1562                           ;nrf24l01.c: 109: setupAW.AW = 3;
  1563  0253  3003               	movlw	3
  1564  0254  04A5               	iorwf	nrf24l01InitRegisters@setupAW,f
  1565                           
  1566                           ;nrf24l01.c: 110: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  1567  0255  0825               	movf	nrf24l01InitRegisters@setupAW,w
  1568  0256  00A4               	movwf	??_nrf24l01InitRegisters
  1569  0257  0824               	movf	??_nrf24l01InitRegisters,w
  1570  0258  00A1               	movwf	nrf24l01Send@data
  1571  0259  3022               	movlw	34
  1572  025A  2666               	fcall	_nrf24l01Send
  1573                           
  1574                           ;nrf24l01.c: 113: n_SETUP_RETR_t setupRetries;
  1575                           ;nrf24l01.c: 114: setupRetries.ARD = 15;
  1576  025B  30F0               	movlw	240
  1577  025C  0020               	movlb	0	; select bank0
  1578  025D  04A6               	iorwf	nrf24l01InitRegisters@setupRetries,f
  1579                           
  1580                           ;nrf24l01.c: 115: setupRetries.ARC = 15;
  1581  025E  300F               	movlw	15
  1582  025F  04A6               	iorwf	nrf24l01InitRegisters@setupRetries,f
  1583                           
  1584                           ;nrf24l01.c: 116: nrf24l01Send(0b00100000 | 0x04, setupRetries.byte);
  1585  0260  0826               	movf	nrf24l01InitRegisters@setupRetries,w
  1586  0261  00A4               	movwf	??_nrf24l01InitRegisters
  1587  0262  0824               	movf	??_nrf24l01InitRegisters,w
  1588  0263  00A1               	movwf	nrf24l01Send@data
  1589  0264  3024               	movlw	36
  1590  0265  2666               	fcall	_nrf24l01Send
  1591                           
  1592                           ;nrf24l01.c: 124: n_RF_SETUP_t rfSetup;
  1593                           ;nrf24l01.c: 125: rfSetup.RF_DR_LOW = 0;
  1594  0266  0020               	movlb	0	; select bank0
  1595  0267  12A8               	bcf	nrf24l01InitRegisters@rfSetup,5
  1596                           
  1597                           ;nrf24l01.c: 126: rfSetup.RF_DR_HIGH = 1;
  1598  0268  15A8               	bsf	nrf24l01InitRegisters@rfSetup,3
  1599                           
  1600                           ;nrf24l01.c: 127: rfSetup.RF_PWR = 3;
  1601  0269  3006               	movlw	6
  1602  026A  04A8               	iorwf	nrf24l01InitRegisters@rfSetup,f
  1603                           
  1604                           ;nrf24l01.c: 128: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  1605  026B  0828               	movf	nrf24l01InitRegisters@rfSetup,w
  1606  026C  00A4               	movwf	??_nrf24l01InitRegisters
  1607  026D  0824               	movf	??_nrf24l01InitRegisters,w
  1608  026E  00A1               	movwf	nrf24l01Send@data
  1609  026F  3026               	movlw	38
  1610  0270  2666               	fcall	_nrf24l01Send
  1611                           
  1612                           ;nrf24l01.c: 131: n_CONFIG_t config;
  1613                           ;nrf24l01.c: 132: config.PRIM_RX = 1;
  1614  0271  0020               	movlb	0	; select bank0
  1615  0272  1429               	bsf	nrf24l01InitRegisters@config,0
  1616                           
  1617                           ;nrf24l01.c: 133: config.EN_CRC = 1;
  1618  0273  15A9               	bsf	nrf24l01InitRegisters@config,3
  1619                           
  1620                           ;nrf24l01.c: 134: config.CRCO = 1;
  1621  0274  1529               	bsf	nrf24l01InitRegisters@config,2
  1622                           
  1623                           ;nrf24l01.c: 135: config.PWR_UP = 1;
  1624  0275  14A9               	bsf	nrf24l01InitRegisters@config,1
  1625                           
  1626                           ;nrf24l01.c: 136: nrf24l01Send(0b00100000 | 0x00, config.byte);
  1627  0276  0829               	movf	nrf24l01InitRegisters@config,w
  1628  0277  00A4               	movwf	??_nrf24l01InitRegisters
  1629  0278  0824               	movf	??_nrf24l01InitRegisters,w
  1630  0279  00A1               	movwf	nrf24l01Send@data
  1631  027A  3020               	movlw	32
  1632  027B  2666               	fcall	_nrf24l01Send
  1633                           
  1634                           ;nrf24l01.c: 139: n_EN_RXADDR_t enRXAddr;
  1635                           ;nrf24l01.c: 140: enRXAddr.ERX_P0 = 1;
  1636  027C  0020               	movlb	0	; select bank0
  1637  027D  142A               	bsf	nrf24l01InitRegisters@enRXAddr,0
  1638                           
  1639                           ;nrf24l01.c: 141: enRXAddr.ERX_P1 = 1;
  1640  027E  14AA               	bsf	nrf24l01InitRegisters@enRXAddr,1
  1641                           
  1642                           ;nrf24l01.c: 142: enRXAddr.ERX_P2 = 1;
  1643  027F  152A               	bsf	nrf24l01InitRegisters@enRXAddr,2
  1644                           
  1645                           ;nrf24l01.c: 143: enRXAddr.ERX_P3 = 1;
  1646  0280  15AA               	bsf	nrf24l01InitRegisters@enRXAddr,3
  1647                           
  1648                           ;nrf24l01.c: 144: enRXAddr.ERX_P4 = 1;
  1649  0281  162A               	bsf	nrf24l01InitRegisters@enRXAddr,4
  1650                           
  1651                           ;nrf24l01.c: 145: enRXAddr.ERX_P5 = 1;
  1652  0282  16AA               	bsf	nrf24l01InitRegisters@enRXAddr,5
  1653                           
  1654                           ;nrf24l01.c: 146: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  1655  0283  082A               	movf	nrf24l01InitRegisters@enRXAddr,w
  1656  0284  00A4               	movwf	??_nrf24l01InitRegisters
  1657  0285  0824               	movf	??_nrf24l01InitRegisters,w
  1658  0286  00A1               	movwf	nrf24l01Send@data
  1659  0287  3022               	movlw	34
  1660  0288  2666               	fcall	_nrf24l01Send
  1661                           
  1662                           ;nrf24l01.c: 149: n_EN_AA_t enAA;
  1663                           ;nrf24l01.c: 150: enAA.byte = nrf24l01Send(0b00000000 | 0x01, 0);
  1664  0289  0020               	movlb	0	; select bank0
  1665  028A  01A1               	clrf	nrf24l01Send@data
  1666  028B  3001               	movlw	1
  1667  028C  2666               	fcall	_nrf24l01Send
  1668  028D  0020               	movlb	0	; select bank0
  1669  028E  00A4               	movwf	??_nrf24l01InitRegisters
  1670  028F  0824               	movf	??_nrf24l01InitRegisters,w
  1671  0290  00AB               	movwf	nrf24l01InitRegisters@enAA
  1672                           
  1673                           ;nrf24l01.c: 151: enAA.ENAA_P0 = 0;
  1674  0291  102B               	bcf	nrf24l01InitRegisters@enAA,0
  1675                           
  1676                           ;nrf24l01.c: 152: enAA.ENAA_P1 = 0;
  1677  0292  10AB               	bcf	nrf24l01InitRegisters@enAA,1
  1678                           
  1679                           ;nrf24l01.c: 153: enAA.ENAA_P2 = 0;
  1680  0293  112B               	bcf	nrf24l01InitRegisters@enAA,2
  1681                           
  1682                           ;nrf24l01.c: 154: enAA.ENAA_P3 = 0;
  1683  0294  11AB               	bcf	nrf24l01InitRegisters@enAA,3
  1684                           
  1685                           ;nrf24l01.c: 155: enAA.ENAA_P4 = 0;
  1686  0295  122B               	bcf	nrf24l01InitRegisters@enAA,4
  1687                           
  1688                           ;nrf24l01.c: 156: enAA.ENAA_P5 = 0;
  1689  0296  12AB               	bcf	nrf24l01InitRegisters@enAA,5
  1690                           
  1691                           ;nrf24l01.c: 157: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  1692  0297  082B               	movf	nrf24l01InitRegisters@enAA,w
  1693  0298  00A4               	movwf	??_nrf24l01InitRegisters
  1694  0299  0824               	movf	??_nrf24l01InitRegisters,w
  1695  029A  00A1               	movwf	nrf24l01Send@data
  1696  029B  3021               	movlw	33
  1697  029C  2666               	fcall	_nrf24l01Send
  1698                           
  1699                           ;nrf24l01.c: 161: n_FEATURE_t feature;
  1700                           ;nrf24l01.c: 162: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  1701  029D  0020               	movlb	0	; select bank0
  1702  029E  01A1               	clrf	nrf24l01Send@data
  1703  029F  301D               	movlw	29
  1704  02A0  2666               	fcall	_nrf24l01Send
  1705  02A1  0020               	movlb	0	; select bank0
  1706  02A2  00A4               	movwf	??_nrf24l01InitRegisters
  1707  02A3  0824               	movf	??_nrf24l01InitRegisters,w
  1708  02A4  00A7               	movwf	nrf24l01InitRegisters@feature
  1709                           
  1710                           ;nrf24l01.c: 163: feature.EN_DPL = 1;
  1711  02A5  1527               	bsf	nrf24l01InitRegisters@feature,2
  1712                           
  1713                           ;nrf24l01.c: 164: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  1714  02A6  0827               	movf	nrf24l01InitRegisters@feature,w
  1715  02A7  00A4               	movwf	??_nrf24l01InitRegisters
  1716  02A8  0824               	movf	??_nrf24l01InitRegisters,w
  1717  02A9  00A1               	movwf	nrf24l01Send@data
  1718  02AA  303D               	movlw	61
  1719  02AB  2666               	fcall	_nrf24l01Send
  1720                           
  1721                           ;nrf24l01.c: 166: n_DYNPD_t DynPD;
  1722                           ;nrf24l01.c: 167: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  1723  02AC  0020               	movlb	0	; select bank0
  1724  02AD  01A1               	clrf	nrf24l01Send@data
  1725  02AE  301C               	movlw	28
  1726  02AF  2666               	fcall	_nrf24l01Send
  1727  02B0  0020               	movlb	0	; select bank0
  1728  02B1  00A4               	movwf	??_nrf24l01InitRegisters
  1729  02B2  0824               	movf	??_nrf24l01InitRegisters,w
  1730  02B3  00AC               	movwf	nrf24l01InitRegisters@DynPD
  1731                           
  1732                           ;nrf24l01.c: 168: DynPD.DPL_P0 = 1;
  1733  02B4  142C               	bsf	nrf24l01InitRegisters@DynPD,0
  1734                           
  1735                           ;nrf24l01.c: 169: DynPD.DPL_P1 = 1;
  1736  02B5  14AC               	bsf	nrf24l01InitRegisters@DynPD,1
  1737                           
  1738                           ;nrf24l01.c: 170: DynPD.DPL_P2 = 1;
  1739  02B6  152C               	bsf	nrf24l01InitRegisters@DynPD,2
  1740                           
  1741                           ;nrf24l01.c: 171: DynPD.DPL_P3 = 1;
  1742  02B7  15AC               	bsf	nrf24l01InitRegisters@DynPD,3
  1743                           
  1744                           ;nrf24l01.c: 172: DynPD.DPL_P4 = 1;
  1745  02B8  162C               	bsf	nrf24l01InitRegisters@DynPD,4
  1746                           
  1747                           ;nrf24l01.c: 173: DynPD.DPL_P5 = 1;
  1748  02B9  16AC               	bsf	nrf24l01InitRegisters@DynPD,5
  1749                           
  1750                           ;nrf24l01.c: 174: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  1751  02BA  082C               	movf	nrf24l01InitRegisters@DynPD,w
  1752  02BB  00A4               	movwf	??_nrf24l01InitRegisters
  1753  02BC  0824               	movf	??_nrf24l01InitRegisters,w
  1754  02BD  00A1               	movwf	nrf24l01Send@data
  1755  02BE  303C               	movlw	60
  1756  02BF  2666               	fcall	_nrf24l01Send
  1757                           
  1758                           ;nrf24l01.c: 177: status.byte = 0x00;
  1759  02C0  0020               	movlb	0	; select bank0
  1760  02C1  01D6               	clrf	_status
  1761                           
  1762                           ;nrf24l01.c: 178: status.RX_DR = 1;
  1763  02C2  1756               	bsf	_status,6
  1764                           
  1765                           ;nrf24l01.c: 179: status.TX_DS = 1;
  1766  02C3  16D6               	bsf	_status,5
  1767                           
  1768                           ;nrf24l01.c: 180: status.MAX_RT = 1;
  1769  02C4  1656               	bsf	_status,4
  1770                           
  1771                           ;nrf24l01.c: 181: nrf24l01Send(0b00100000 | 0x07, status.byte);
  1772  02C5  0856               	movf	_status,w
  1773  02C6  00A4               	movwf	??_nrf24l01InitRegisters
  1774  02C7  0824               	movf	??_nrf24l01InitRegisters,w
  1775  02C8  00A1               	movwf	nrf24l01Send@data
  1776  02C9  3027               	movlw	39
  1777  02CA  2666               	fcall	_nrf24l01Send
  1778                           
  1779                           ;nrf24l01.c: 184: nrf24l01Send(0b11100001, 0);
  1780  02CB  0020               	movlb	0	; select bank0
  1781  02CC  01A1               	clrf	nrf24l01Send@data
  1782  02CD  30E1               	movlw	225
  1783  02CE  2666               	fcall	_nrf24l01Send
  1784                           
  1785                           ;nrf24l01.c: 185: nrf24l01Send(0b11100010, 0);
  1786  02CF  0020               	movlb	0	; select bank0
  1787  02D0  01A1               	clrf	nrf24l01Send@data
  1788  02D1  30E2               	movlw	226
  1789  02D2  2666               	fcall	_nrf24l01Send
  1790  02D3  0008               	return
  1791  02D4                     __end_of_nrf24l01InitRegisters:	
  1792                           
  1793                           	psect	text3
  1794  005B                     __ptext3:	
  1795 ;; *************** function _loop *****************
  1796 ;; Defined at:
  1797 ;;		line 102 in file "main.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;		None
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;  i               1   48[BANK0 ] unsigned char 
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMMON   BANK0   BANK1
  1811 ;;      Params:         0       0       0
  1812 ;;      Locals:         0       1       0
  1813 ;;      Temps:          0       2       0
  1814 ;;      Totals:         0       3       0
  1815 ;;Total ram usage:        3 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; Hardware stack levels required when called:    6
  1818 ;; This function calls:
  1819 ;;		___aldiv
  1820 ;;		___altoft
  1821 ;;		___ftdiv
  1822 ;;		___fttol
  1823 ;;		_itoa
  1824 ;;		_nrf24l01SendByte
  1825 ;;		_nrf24l01SendEnd
  1826 ;;		_nrf24l01SendStart
  1827 ;;		_sendName
  1828 ;;		_sendString
  1829 ;;		_startADC
  1830 ;; This function is called by:
  1831 ;;		_main
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           
  1836                           ;psect for function _loop
  1837  005B                     _loop:	
  1838                           
  1839                           ;main.c: 104: if (mode != 7) {
  1840                           
  1841                           ;incstack = 0
  1842                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1843  005B  3007               	movlw	7
  1844  005C  0678               	xorwf	_mode,w
  1845  005D  1903               	btfsc	3,2
  1846  005E  2981               	goto	l2265
  1847  005F  0064               	clrwdt	;# 
  1848                           
  1849                           ;main.c: 106: }
  1850                           ;main.c: 108: switch (mode){
  1851  0060  2981               	goto	l2265
  1852  0061                     l102:	
  1853                           ;main.c: 110: case 7:
  1854                           
  1855  0061  0063               	sleep	;# 
  1856                           
  1857                           ;main.c: 113: __nop();
  1858  0062  0000               	nop
  1859                           
  1860                           ;main.c: 114: __nop();
  1861  0063  0000               	nop
  1862                           
  1863                           ;main.c: 115: if (!STATUSbits.nTO && !STATUSbits.nPD){
  1864  0064  0020               	movlb	0	; select bank0
  1865  0065  1A03               	btfsc	3,4	;volatile
  1866  0066  0008               	return
  1867  0067  1983               	btfsc	3,3	;volatile
  1868  0068  0008               	return
  1869                           
  1870                           ;main.c: 116: mode = nextMode;
  1871  0069  0860               	movf	_nextMode,w
  1872  006A  00CE               	movwf	??_loop
  1873  006B  084E               	movf	??_loop,w
  1874  006C  00F8               	movwf	_mode
  1875                           
  1876                           ;main.c: 117: }
  1877                           ;main.c: 118: break;
  1878  006D  0008               	return
  1879  006E                     l2197:	
  1880                           ;main.c: 120: case 1:
  1881                           
  1882                           
  1883                           ;main.c: 123: nrf24l01SendStart();
  1884  006E  2690               	fcall	_nrf24l01SendStart
  1885                           
  1886                           ;main.c: 124: sendName();
  1887  006F  2617               	fcall	_sendName
  1888                           
  1889                           ;main.c: 125: nrf24l01SendByte('/');
  1890  0070  302F               	movlw	47
  1891  0071  26B0               	fcall	_nrf24l01SendByte
  1892                           
  1893                           ;main.c: 126: nrf24l01SendByte('B');
  1894  0072  3042               	movlw	66
  1895  0073  26B0               	fcall	_nrf24l01SendByte
  1896                           
  1897                           ;main.c: 127: nrf24l01SendByte('O');
  1898  0074  304F               	movlw	79
  1899  0075  26B0               	fcall	_nrf24l01SendByte
  1900                           
  1901                           ;main.c: 128: nrf24l01SendByte('O');
  1902  0076  304F               	movlw	79
  1903  0077  26B0               	fcall	_nrf24l01SendByte
  1904                           
  1905                           ;main.c: 129: nrf24l01SendByte('T');
  1906  0078  3054               	movlw	84
  1907  0079  26B0               	fcall	_nrf24l01SendByte
  1908                           
  1909                           ;main.c: 130: nrf24l01SendByte('/');
  1910  007A  302F               	movlw	47
  1911  007B  26B0               	fcall	_nrf24l01SendByte
  1912                           
  1913                           ;main.c: 131: nrf24l01SendByte('1');
  1914  007C  3031               	movlw	49
  1915  007D  26B0               	fcall	_nrf24l01SendByte
  1916                           
  1917                           ;main.c: 132: nrf24l01SendEnd();
  1918  007E  2686               	fcall	_nrf24l01SendEnd
  1919                           
  1920                           ;main.c: 134: mode = 2;
  1921  007F  3002               	movlw	2
  1922  0080  0020               	movlb	0	; select bank0
  1923  0081  00CE               	movwf	??_loop
  1924  0082  084E               	movf	??_loop,w
  1925  0083  00F8               	movwf	_mode
  1926                           
  1927                           ;main.c: 135: break;
  1928  0084  0008               	return
  1929  0085                     l2201:	
  1930                           ;main.c: 138: case 2:
  1931                           
  1932                           
  1933                           ;main.c: 139: mode = 7;
  1934  0085  3007               	movlw	7
  1935  0086  0020               	movlb	0	; select bank0
  1936  0087  00CE               	movwf	??_loop
  1937  0088  084E               	movf	??_loop,w
  1938  0089  00F8               	movwf	_mode
  1939                           
  1940                           ;main.c: 140: nextMode = 3;
  1941  008A  3003               	movlw	3
  1942  008B  00CE               	movwf	??_loop
  1943  008C  084E               	movf	??_loop,w
  1944  008D  00E0               	movwf	_nextMode
  1945                           
  1946                           ;main.c: 141: break;
  1947  008E  0008               	return
  1948  008F                     l2203:	
  1949                           ;main.c: 143: case 3:
  1950                           
  1951                           
  1952                           ;main.c: 144: startADC(3);
  1953  008F  3003               	movlw	3
  1954  0090  2550               	fcall	_startADC
  1955                           
  1956                           ;main.c: 145: nextMode = 4;
  1957  0091  3004               	movlw	4
  1958  0092  0020               	movlb	0	; select bank0
  1959  0093  00CE               	movwf	??_loop
  1960  0094  084E               	movf	??_loop,w
  1961  0095  00E0               	movwf	_nextMode
  1962                           
  1963                           ;main.c: 146: break;
  1964  0096  0008               	return
  1965  0097                     l2207:	
  1966                           ;main.c: 148: case 4:
  1967                           
  1968                           
  1969                           ;main.c: 149: startADC(7);
  1970  0097  3007               	movlw	7
  1971  0098  2550               	fcall	_startADC
  1972                           
  1973                           ;main.c: 150: nextMode = 5;
  1974  0099  3005               	movlw	5
  1975  009A  0020               	movlb	0	; select bank0
  1976  009B  00CE               	movwf	??_loop
  1977  009C  084E               	movf	??_loop,w
  1978  009D  00E0               	movwf	_nextMode
  1979                           
  1980                           ;main.c: 151: break;
  1981  009E  0008               	return
  1982  009F                     l2211:	
  1983                           ;main.c: 153: case 5:
  1984                           
  1985                           
  1986                           ;main.c: 154: startADC(31);
  1987  009F  301F               	movlw	31
  1988  00A0  2550               	fcall	_startADC
  1989                           
  1990                           ;main.c: 155: nextMode = 6;
  1991  00A1  3006               	movlw	6
  1992  00A2  0020               	movlb	0	; select bank0
  1993  00A3  00CE               	movwf	??_loop
  1994  00A4  084E               	movf	??_loop,w
  1995  00A5  00E0               	movwf	_nextMode
  1996                           
  1997                           ;main.c: 156: break;
  1998  00A6  0008               	return
  1999  00A7                     l2215:	
  2000                           ;main.c: 158: case 6:
  2001                           
  2002                           
  2003                           ;main.c: 159: startADC(29);
  2004  00A7  301D               	movlw	29
  2005  00A8  2550               	fcall	_startADC
  2006                           
  2007                           ;main.c: 160: nextMode = 2;
  2008  00A9  3002               	movlw	2
  2009  00AA  0020               	movlb	0	; select bank0
  2010  00AB  00CE               	movwf	??_loop
  2011  00AC  084E               	movf	??_loop,w
  2012  00AD  00E0               	movwf	_nextMode
  2013                           
  2014                           ;main.c: 161: break;
  2015  00AE  0008               	return
  2016  00AF                     l2219:	
  2017                           ;main.c: 166: case 3:
  2018                           
  2019                           ;main.c: 165: switch (ADCON0bits.CHS){
  2020                           
  2021                           ;main.c: 163: case 101:
  2022                           
  2023                           
  2024                           ;main.c: 167: adcSum/= 22;
  2025  00AF  3000               	movlw	0
  2026  00B0  0020               	movlb	0	; select bank0
  2027  00B1  00A3               	movwf	___aldiv@divisor+3
  2028  00B2  3000               	movlw	0
  2029  00B3  00A2               	movwf	___aldiv@divisor+2
  2030  00B4  3000               	movlw	0
  2031  00B5  00A1               	movwf	___aldiv@divisor+1
  2032  00B6  3016               	movlw	22
  2033  00B7  2916               	goto	L5
  2034  00B8                     l2221:	
  2035                           ;main.c: 170: case 7:
  2036                           
  2037                           ;main.c: 168: break;
  2038                           
  2039                           
  2040                           ;main.c: 171: adcSum/= 25;
  2041  00B8  3000               	movlw	0
  2042  00B9  0020               	movlb	0	; select bank0
  2043  00BA  00A3               	movwf	___aldiv@divisor+3
  2044  00BB  3000               	movlw	0
  2045  00BC  00A2               	movwf	___aldiv@divisor+2
  2046  00BD  3000               	movlw	0
  2047  00BE  00A1               	movwf	___aldiv@divisor+1
  2048  00BF  3019               	movlw	25
  2049  00C0  2916               	goto	L5
  2050  00C1                     l2223:	
  2051                           ;main.c: 174: case 31:
  2052                           
  2053                           ;main.c: 172: break;
  2054                           
  2055                           
  2056                           ;main.c: 175: adcSum= (long) (( (float) adcSum) / 24.8);
  2057  00C1  0020               	movlb	0	; select bank0
  2058  00C2  0855               	movf	_adcSum+3,w
  2059  00C3  00AB               	movwf	___altoft@c+3
  2060  00C4  0854               	movf	_adcSum+2,w
  2061  00C5  00AA               	movwf	___altoft@c+2
  2062  00C6  0853               	movf	_adcSum+1,w
  2063  00C7  00A9               	movwf	___altoft@c+1
  2064  00C8  0852               	movf	_adcSum,w
  2065  00C9  00A8               	movwf	___altoft@c
  2066  00CA  24DF               	fcall	___altoft
  2067  00CB  0020               	movlb	0	; select bank0
  2068  00CC  0828               	movf	?___altoft,w
  2069  00CD  00B3               	movwf	___ftdiv@f1
  2070  00CE  0829               	movf	?___altoft+1,w
  2071  00CF  00B4               	movwf	___ftdiv@f1+1
  2072  00D0  082A               	movf	?___altoft+2,w
  2073  00D1  00B5               	movwf	___ftdiv@f1+2
  2074  00D2  3066               	movlw	102
  2075  00D3  00B0               	movwf	___ftdiv@f2
  2076  00D4  30C6               	movlw	198
  2077  00D5  00B1               	movwf	___ftdiv@f2+1
  2078  00D6  3041               	movlw	65
  2079  00D7  00B2               	movwf	___ftdiv@f2+2
  2080  00D8  219C               	fcall	___ftdiv
  2081  00D9  0020               	movlb	0	; select bank0
  2082  00DA  0830               	movf	?___ftdiv,w
  2083  00DB  00C0               	movwf	___fttol@f1
  2084  00DC  0831               	movf	?___ftdiv+1,w
  2085  00DD  00C1               	movwf	___fttol@f1+1
  2086  00DE  0832               	movf	?___ftdiv+2,w
  2087  00DF  00C2               	movwf	___fttol@f1+2
  2088  00E0  22D4               	fcall	___fttol
  2089  00E1  0020               	movlb	0	; select bank0
  2090  00E2  0843               	movf	?___fttol+3,w
  2091  00E3  00D5               	movwf	_adcSum+3
  2092  00E4  0842               	movf	?___fttol+2,w
  2093  00E5  00D4               	movwf	_adcSum+2
  2094  00E6  0841               	movf	?___fttol+1,w
  2095  00E7  00D3               	movwf	_adcSum+1
  2096  00E8  0840               	movf	?___fttol,w
  2097  00E9  2928               	goto	L3
  2098  00EA                     l2225:	
  2099                           ;main.c: 178: case 29:
  2100                           
  2101                           ;main.c: 176: break;
  2102                           
  2103                           
  2104                           ;main.c: 179: adcSum/= 2089;
  2105  00EA  3000               	movlw	0
  2106  00EB  0020               	movlb	0	; select bank0
  2107  00EC  00A3               	movwf	___aldiv@divisor+3
  2108  00ED  3000               	movlw	0
  2109  00EE  00A2               	movwf	___aldiv@divisor+2
  2110  00EF  3008               	movlw	8
  2111  00F0  00A1               	movwf	___aldiv@divisor+1
  2112  00F1  3029               	movlw	41
  2113  00F2  00A0               	movwf	___aldiv@divisor
  2114  00F3  0855               	movf	_adcSum+3,w
  2115  00F4  00A7               	movwf	___aldiv@dividend+3
  2116  00F5  0854               	movf	_adcSum+2,w
  2117  00F6  00A6               	movwf	___aldiv@dividend+2
  2118  00F7  0853               	movf	_adcSum+1,w
  2119  00F8  00A5               	movwf	___aldiv@dividend+1
  2120  00F9  0852               	movf	_adcSum,w
  2121  00FA  00A4               	movwf	___aldiv@dividend
  2122  00FB  235B               	fcall	___aldiv
  2123  00FC  0020               	movlb	0	; select bank0
  2124  00FD  0823               	movf	?___aldiv+3,w
  2125  00FE  00D5               	movwf	_adcSum+3
  2126  00FF  0822               	movf	?___aldiv+2,w
  2127  0100  00D4               	movwf	_adcSum+2
  2128  0101  0821               	movf	?___aldiv+1,w
  2129  0102  00D3               	movwf	_adcSum+1
  2130  0103  0820               	movf	?___aldiv,w
  2131  0104  00D2               	movwf	_adcSum
  2132                           
  2133                           ;main.c: 180: adcSum-= 40;
  2134  0105  30D8               	movlw	216
  2135  0106  07D2               	addwf	_adcSum,f
  2136  0107  30FF               	movlw	255
  2137  0108  3DD3               	addwfc	_adcSum+1,f
  2138  0109  30FF               	movlw	255
  2139  010A  3DD4               	addwfc	_adcSum+2,f
  2140  010B  30FF               	movlw	255
  2141  010C  3DD5               	addwfc	_adcSum+3,f
  2142                           
  2143                           ;main.c: 181: break;
  2144  010D  293B               	goto	l2235
  2145  010E                     l2229:	
  2146                           ;main.c: 183: default:
  2147                           
  2148                           
  2149                           ;main.c: 184: adcSum/= 255;
  2150  010E  3000               	movlw	0
  2151  010F  0020               	movlb	0	; select bank0
  2152  0110  00A3               	movwf	___aldiv@divisor+3
  2153  0111  3000               	movlw	0
  2154  0112  00A2               	movwf	___aldiv@divisor+2
  2155  0113  3000               	movlw	0
  2156  0114  00A1               	movwf	___aldiv@divisor+1
  2157  0115  30FF               	movlw	255
  2158  0116                     L5:	
  2159  0116  00A0               	movwf	___aldiv@divisor
  2160  0117  0855               	movf	_adcSum+3,w
  2161  0118  00A7               	movwf	___aldiv@dividend+3
  2162  0119  0854               	movf	_adcSum+2,w
  2163  011A  00A6               	movwf	___aldiv@dividend+2
  2164  011B  0853               	movf	_adcSum+1,w
  2165  011C  00A5               	movwf	___aldiv@dividend+1
  2166  011D  0852               	movf	_adcSum,w
  2167  011E  00A4               	movwf	___aldiv@dividend
  2168  011F  235B               	fcall	___aldiv
  2169  0120  0020               	movlb	0	; select bank0
  2170  0121  0823               	movf	?___aldiv+3,w
  2171  0122  00D5               	movwf	_adcSum+3
  2172  0123  0822               	movf	?___aldiv+2,w
  2173  0124  00D4               	movwf	_adcSum+2
  2174  0125  0821               	movf	?___aldiv+1,w
  2175  0126  00D3               	movwf	_adcSum+1
  2176  0127  0820               	movf	?___aldiv,w
  2177  0128                     L3:	
  2178  0128  00D2               	movwf	_adcSum
  2179                           
  2180                           ;main.c: 186: }
  2181                           
  2182                           ;main.c: 185: break;
  2183  0129  293B               	goto	l2235
  2184  012A                     l2233:	
  2185  012A  0021               	movlb	1	; select bank1
  2186  012B  0C1D               	rrf	29,w	;volatile
  2187  012C  0C89               	rrf	9,f
  2188  012D  391F               	andlw	31
  2189                           
  2190                           ; Switch size 1, requested type "space"
  2191                           ; Number of cases is 4, Range of values is 3 to 31
  2192                           ; switch strategies available:
  2193                           ; Name         Instructions Cycles
  2194                           ; simple_byte           13     7 (average)
  2195                           ; direct_byte           67     9 (fixed)
  2196                           ; jumptable            263     9 (fixed)
  2197                           ;	Chosen strategy is simple_byte
  2198  012E  3A03               	xorlw	3	; case 3
  2199  012F  1903               	skipnz
  2200  0130  28AF               	goto	l2219
  2201  0131  3A04               	xorlw	4	; case 7
  2202  0132  1903               	skipnz
  2203  0133  28B8               	goto	l2221
  2204  0134  3A1A               	xorlw	26	; case 29
  2205  0135  1903               	skipnz
  2206  0136  28EA               	goto	l2225
  2207  0137  3A02               	xorlw	2	; case 31
  2208  0138  1903               	skipnz
  2209  0139  28C1               	goto	l2223
  2210  013A  290E               	goto	l2229
  2211  013B                     l2235:	
  2212                           
  2213                           ;main.c: 188: itoa(buffer, adcSum, 10);
  2214  013B  0020               	movlb	0	; select bank0
  2215  013C  0853               	movf	_adcSum+1,w
  2216  013D  00B2               	movwf	itoa@val+1
  2217  013E  0852               	movf	_adcSum,w
  2218  013F  00B1               	movwf	itoa@val
  2219  0140  300A               	movlw	10
  2220  0141  00B3               	movwf	itoa@base
  2221  0142  3000               	movlw	0
  2222  0143  00B4               	movwf	itoa@base+1
  2223  0144  3057               	movlw	(low (_buffer| 0))& (0+255)
  2224  0145  25F4               	fcall	_itoa
  2225                           
  2226                           ;main.c: 189: itoa(byte, ADCON0bits.CHS, 10);
  2227  0146  0021               	movlb	1	; select bank1
  2228  0147  0C1D               	rrf	29,w	;volatile
  2229  0148  0C89               	rrf	9,f
  2230  0149  391F               	andlw	31
  2231  014A  0020               	movlb	0	; select bank0
  2232  014B  00CE               	movwf	??_loop
  2233  014C  01CF               	clrf	??_loop+1
  2234  014D  084E               	movf	??_loop,w
  2235  014E  00B1               	movwf	itoa@val
  2236  014F  084F               	movf	??_loop+1,w
  2237  0150  00B2               	movwf	itoa@val+1
  2238  0151  300A               	movlw	10
  2239  0152  00B3               	movwf	itoa@base
  2240  0153  3000               	movlw	0
  2241  0154  00B4               	movwf	itoa@base+1
  2242  0155  305D               	movlw	(low (_byte| 0))& (0+255)
  2243  0156  25F4               	fcall	_itoa
  2244                           
  2245                           ;main.c: 191: nrf24l01SendStart();
  2246  0157  2690               	fcall	_nrf24l01SendStart
  2247                           
  2248                           ;main.c: 192: sendName();
  2249  0158  2617               	fcall	_sendName
  2250                           
  2251                           ;main.c: 193: nrf24l01SendByte('/');
  2252  0159  302F               	movlw	47
  2253  015A  26B0               	fcall	_nrf24l01SendByte
  2254                           
  2255                           ;main.c: 194: nrf24l01SendByte('A');
  2256  015B  3041               	movlw	65
  2257  015C  26B0               	fcall	_nrf24l01SendByte
  2258                           
  2259                           ;main.c: 195: nrf24l01SendByte('D');
  2260  015D  3044               	movlw	68
  2261  015E  26B0               	fcall	_nrf24l01SendByte
  2262                           
  2263                           ;main.c: 196: nrf24l01SendByte('C');
  2264  015F  3043               	movlw	67
  2265  0160  26B0               	fcall	_nrf24l01SendByte
  2266                           
  2267                           ;main.c: 197: sendString(byte);
  2268  0161  305D               	movlw	(low (_byte| 0))& (0+255)
  2269  0162  2636               	fcall	_sendString
  2270                           
  2271                           ;main.c: 198: nrf24l01SendByte('/');
  2272  0163  302F               	movlw	47
  2273  0164  26B0               	fcall	_nrf24l01SendByte
  2274                           
  2275                           ;main.c: 200: unsigned char i;
  2276                           ;main.c: 201: for (i = 0; buffer[i] != '\0'; i++){
  2277  0165  0020               	movlb	0	; select bank0
  2278  0166  01D0               	clrf	loop@i
  2279  0167                     l2257:	
  2280  0167  0850               	movf	loop@i,w
  2281  0168  3E57               	addlw	(low (_buffer| 0))& (0+255)
  2282  0169  0086               	movwf	6
  2283  016A  0187               	clrf	7
  2284  016B  0801               	movf	1,w
  2285  016C  1903               	btfsc	3,2
  2286  016D  297A               	goto	l2259
  2287                           
  2288                           ;main.c: 202: nrf24l01SendByte(buffer[i]);
  2289  016E  0850               	movf	loop@i,w
  2290  016F  3E57               	addlw	(low (_buffer| 0))& (0+255)
  2291  0170  0086               	movwf	6
  2292  0171  0187               	clrf	7
  2293  0172  0801               	movf	1,w
  2294  0173  26B0               	fcall	_nrf24l01SendByte
  2295  0174  3001               	movlw	1
  2296  0175  0020               	movlb	0	; select bank0
  2297  0176  00CE               	movwf	??_loop
  2298  0177  084E               	movf	??_loop,w
  2299  0178  07D0               	addwf	loop@i,f
  2300  0179  2967               	goto	l2257
  2301  017A                     l2259:	
  2302                           
  2303                           ;main.c: 203: }
  2304                           ;main.c: 205: nrf24l01SendEnd();
  2305  017A  2686               	fcall	_nrf24l01SendEnd
  2306                           
  2307                           ;main.c: 207: mode = nextMode;
  2308  017B  0020               	movlb	0	; select bank0
  2309  017C  0860               	movf	_nextMode,w
  2310  017D  00CE               	movwf	??_loop
  2311  017E  084E               	movf	??_loop,w
  2312  017F  00F8               	movwf	_mode
  2313                           
  2314                           ;main.c: 210: }
  2315                           
  2316                           ;main.c: 208: break;
  2317  0180  0008               	return
  2318  0181                     l2265:	
  2319  0181  0878               	movf	_mode,w
  2320                           
  2321                           ; Switch size 1, requested type "space"
  2322                           ; Number of cases is 8, Range of values is 1 to 101
  2323                           ; switch strategies available:
  2324                           ; Name         Instructions Cycles
  2325                           ; simple_byte           25    13 (average)
  2326                           ; direct_byte          211     9 (fixed)
  2327                           ; jumptable            263     9 (fixed)
  2328                           ;	Chosen strategy is simple_byte
  2329  0182  3A01               	xorlw	1	; case 1
  2330  0183  1903               	skipnz
  2331  0184  286E               	goto	l2197
  2332  0185  3A03               	xorlw	3	; case 2
  2333  0186  1903               	skipnz
  2334  0187  2885               	goto	l2201
  2335  0188  3A01               	xorlw	1	; case 3
  2336  0189  1903               	skipnz
  2337  018A  288F               	goto	l2203
  2338  018B  3A07               	xorlw	7	; case 4
  2339  018C  1903               	skipnz
  2340  018D  2897               	goto	l2207
  2341  018E  3A01               	xorlw	1	; case 5
  2342  018F  1903               	skipnz
  2343  0190  289F               	goto	l2211
  2344  0191  3A03               	xorlw	3	; case 6
  2345  0192  1903               	skipnz
  2346  0193  28A7               	goto	l2215
  2347  0194  3A01               	xorlw	1	; case 7
  2348  0195  1903               	skipnz
  2349  0196  2861               	goto	l102
  2350  0197  3A62               	xorlw	98	; case 101
  2351  0198  1903               	skipnz
  2352  0199  292A               	goto	l2233
  2353  019A  299B               	goto	l122
  2354  019B                     l122:	
  2355  019B  0008               	return
  2356  019C                     __end_of_loop:	
  2357                           
  2358                           	psect	text4
  2359  0550                     __ptext4:	
  2360 ;; *************** function _startADC *****************
  2361 ;; Defined at:
  2362 ;;		line 90 in file "main.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;  channel         1    wreg     unsigned char 
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;  channel         1    1[BANK0 ] unsigned char 
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      void 
  2369 ;; Registers used:
  2370 ;;		wreg, status,2, status,0
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMMON   BANK0   BANK1
  2376 ;;      Params:         0       0       0
  2377 ;;      Locals:         0       1       0
  2378 ;;      Temps:          0       1       0
  2379 ;;      Totals:         0       2       0
  2380 ;;Total ram usage:        2 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    2
  2383 ;; This function calls:
  2384 ;;		Nothing
  2385 ;; This function is called by:
  2386 ;;		_loop
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           
  2391                           ;psect for function _startADC
  2392  0550                     _startADC:	
  2393                           
  2394                           ;incstack = 0
  2395                           ; Regs used in _startADC: [wreg+status,2+status,0]
  2396                           ;startADC@channel stored from wreg
  2397  0550  0020               	movlb	0	; select bank0
  2398  0551  00A1               	movwf	startADC@channel
  2399                           
  2400                           ;main.c: 91: adcSum = 0;
  2401  0552  3000               	movlw	0
  2402  0553  00D5               	movwf	_adcSum+3
  2403  0554  3000               	movlw	0
  2404  0555  00D4               	movwf	_adcSum+2
  2405  0556  3000               	movlw	0
  2406  0557  00D3               	movwf	_adcSum+1
  2407  0558  3000               	movlw	0
  2408  0559  00D2               	movwf	_adcSum
  2409                           
  2410                           ;main.c: 92: adcLoop = 255;
  2411  055A  30FF               	movlw	255
  2412  055B  00A0               	movwf	??_startADC
  2413  055C  0820               	movf	??_startADC,w
  2414  055D  00F7               	movwf	_adcLoop
  2415                           
  2416                           ;main.c: 94: if (ADCON0bits.CHS != channel) {
  2417  055E  0021               	movlb	1	; select bank1
  2418  055F  0C1D               	rrf	29,w	;volatile
  2419  0560  0C89               	rrf	9,f
  2420  0561  391F               	andlw	31
  2421  0562  0020               	movlb	0	; select bank0
  2422  0563  0621               	xorwf	startADC@channel,w
  2423  0564  1903               	skipnz
  2424  0565  2D76               	goto	l1545
  2425                           
  2426                           ;main.c: 95: ADCON0bits.CHS = channel;
  2427  0566  0821               	movf	startADC@channel,w
  2428  0567  00A0               	movwf	??_startADC
  2429  0568  0DA0               	rlf	??_startADC,f
  2430  0569  0DA0               	rlf	??_startADC,f
  2431  056A  0021               	movlb	1	; select bank1
  2432  056B  081D               	movf	29,w	;volatile
  2433  056C  0020               	movlb	0	; select bank0
  2434  056D  0620               	xorwf	??_startADC,w
  2435  056E  3983               	andlw	-125
  2436  056F  0620               	xorwf	??_startADC,w
  2437  0570  0021               	movlb	1	; select bank1
  2438  0571  009D               	movwf	29	;volatile
  2439                           
  2440                           ;main.c: 96: _delay((unsigned long)((200)*(16000000/4000000.0)));
  2441  0572  30A0               	movlw	160
  2442  0573                     u1657:	
  2443  0573  3200               	nop2
  2444  0574  0B89               	decfsz	9,f
  2445  0575  2D73               	goto	u1657
  2446  0576                     l1545:	
  2447                           
  2448                           ;main.c: 97: }
  2449                           ;main.c: 99: ADCON0bits.ADGO = 1;
  2450  0576  0021               	movlb	1	; select bank1
  2451  0577  149D               	bsf	29,1	;volatile
  2452                           
  2453                           ;main.c: 100: mode = 100;
  2454  0578  3064               	movlw	100
  2455  0579  0020               	movlb	0	; select bank0
  2456  057A  00A0               	movwf	??_startADC
  2457  057B  0820               	movf	??_startADC,w
  2458  057C  00F8               	movwf	_mode
  2459  057D  0008               	return
  2460  057E                     __end_of_startADC:	
  2461                           
  2462                           	psect	text5
  2463  0636                     __ptext5:	
  2464 ;; *************** function _sendString *****************
  2465 ;; Defined at:
  2466 ;;		line 82 in file "main.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;  string          1    wreg     PTR unsigned char 
  2469 ;;		 -> byte(3), 
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;  string          1    3[BANK0 ] PTR unsigned char 
  2472 ;;		 -> byte(3), 
  2473 ;;  i               1    4[BANK0 ] unsigned char 
  2474 ;; Return value:  Size  Location     Type
  2475 ;;                  1    wreg      void 
  2476 ;; Registers used:
  2477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2478 ;; Tracked objects:
  2479 ;;		On entry : 0/0
  2480 ;;		On exit  : 0/0
  2481 ;;		Unchanged: 0/0
  2482 ;; Data sizes:     COMMON   BANK0   BANK1
  2483 ;;      Params:         0       0       0
  2484 ;;      Locals:         0       2       0
  2485 ;;      Temps:          0       1       0
  2486 ;;      Totals:         0       3       0
  2487 ;;Total ram usage:        3 bytes
  2488 ;; Hardware stack levels used:    1
  2489 ;; Hardware stack levels required when called:    4
  2490 ;; This function calls:
  2491 ;;		_nrf24l01SendByte
  2492 ;; This function is called by:
  2493 ;;		_loop
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           
  2498                           ;psect for function _sendString
  2499  0636                     _sendString:	
  2500                           
  2501                           ;incstack = 0
  2502                           ; Regs used in _sendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2503                           ;sendString@string stored from wreg
  2504  0636  0020               	movlb	0	; select bank0
  2505  0637  00A3               	movwf	sendString@string
  2506                           
  2507                           ;main.c: 84: unsigned char i;
  2508                           ;main.c: 85: for (i = 0; string[i] != '\0'; i++){
  2509  0638  01A4               	clrf	sendString@i
  2510  0639                     l2075:	
  2511  0639  0824               	movf	sendString@i,w
  2512  063A  0723               	addwf	sendString@string,w
  2513  063B  00A2               	movwf	??_sendString
  2514  063C  0822               	movf	??_sendString,w
  2515  063D  0086               	movwf	6
  2516  063E  0187               	clrf	7
  2517  063F  0801               	movf	1,w
  2518  0640  1903               	btfsc	3,2
  2519  0641  0008               	return
  2520                           
  2521                           ;main.c: 86: nrf24l01SendByte(string[i]);
  2522  0642  0824               	movf	sendString@i,w
  2523  0643  0723               	addwf	sendString@string,w
  2524  0644  00A2               	movwf	??_sendString
  2525  0645  0822               	movf	??_sendString,w
  2526  0646  0086               	movwf	6
  2527  0647  0187               	clrf	7
  2528  0648  0801               	movf	1,w
  2529  0649  26B0               	fcall	_nrf24l01SendByte
  2530  064A  3001               	movlw	1
  2531  064B  0020               	movlb	0	; select bank0
  2532  064C  00A2               	movwf	??_sendString
  2533  064D  0822               	movf	??_sendString,w
  2534  064E  07A4               	addwf	sendString@i,f
  2535  064F  2E39               	goto	l2075
  2536  0650                     __end_of_sendString:	
  2537                           
  2538                           	psect	text6
  2539  0617                     __ptext6:	
  2540 ;; *************** function _sendName *****************
  2541 ;; Defined at:
  2542 ;;		line 66 in file "main.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;  offset          2    8[BANK0 ] unsigned int 
  2547 ;;  btye            1    7[BANK0 ] unsigned char 
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, status,2, status,0, pclath, cstack
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMMON   BANK0   BANK1
  2557 ;;      Params:         0       0       0
  2558 ;;      Locals:         0       3       0
  2559 ;;      Temps:          0       1       0
  2560 ;;      Totals:         0       4       0
  2561 ;;Total ram usage:        4 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; Hardware stack levels required when called:    4
  2564 ;; This function calls:
  2565 ;;		_nrf24l01SendByte
  2566 ;;		_read_flashmem
  2567 ;; This function is called by:
  2568 ;;		_loop
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           
  2573                           ;psect for function _sendName
  2574  0617                     _sendName:	
  2575                           
  2576                           ;main.c: 68: unsigned int offset = 0;
  2577                           
  2578                           ;incstack = 0
  2579                           ; Regs used in _sendName: [wreg+status,2+status,0+pclath+cstack]
  2580  0617  0020               	movlb	0	; select bank0
  2581  0618  01A8               	clrf	sendName@offset
  2582  0619  01A9               	clrf	sendName@offset+1
  2583  061A                     l2067:	
  2584                           ;main.c: 69: unsigned char btye;
  2585                           ;main.c: 70: while (offset < 16){
  2586                           
  2587  061A  3000               	movlw	0
  2588  061B  0229               	subwf	sendName@offset+1,w
  2589  061C  3010               	movlw	16
  2590  061D  1903               	skipnz
  2591  061E  0228               	subwf	sendName@offset,w
  2592  061F  1803               	btfsc	3,0
  2593  0620  0008               	return
  2594                           
  2595                           ;main.c: 71: btye = read_flashmem(offset);
  2596  0621  0829               	movf	sendName@offset+1,w
  2597  0622  00A1               	movwf	read_flashmem@offset+1
  2598  0623  0828               	movf	sendName@offset,w
  2599  0624  00A0               	movwf	read_flashmem@offset
  2600  0625  25D1               	fcall	_read_flashmem
  2601  0626  0020               	movlb	0	; select bank0
  2602  0627  0820               	movf	?_read_flashmem,w
  2603  0628  00A6               	movwf	??_sendName
  2604  0629  0826               	movf	??_sendName,w
  2605  062A  00A7               	movwf	sendName@btye
  2606                           
  2607                           ;main.c: 73: if (btye == 0x00){
  2608  062B  0827               	movf	sendName@btye,w
  2609  062C  1903               	btfsc	3,2
  2610  062D  0008               	return
  2611                           
  2612                           ;main.c: 75: }
  2613                           ;main.c: 77: nrf24l01SendByte(btye);
  2614                           
  2615                           ;main.c: 74: return;
  2616  062E  0827               	movf	sendName@btye,w
  2617  062F  26B0               	fcall	_nrf24l01SendByte
  2618                           
  2619                           ;main.c: 78: offset++;
  2620  0630  3001               	movlw	1
  2621  0631  0020               	movlb	0	; select bank0
  2622  0632  07A8               	addwf	sendName@offset,f
  2623  0633  3000               	movlw	0
  2624  0634  3DA9               	addwfc	sendName@offset+1,f
  2625  0635  2E1A               	goto	l2067
  2626  0636                     __end_of_sendName:	
  2627                           
  2628                           	psect	text7
  2629  05D1                     __ptext7:	
  2630 ;; *************** function _read_flashmem *****************
  2631 ;; Defined at:
  2632 ;;		line 58 in file "flash.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;  offset          2    0[BANK0 ] unsigned int 
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;  result          2    4[BANK0 ] unsigned int 
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  2    0[BANK0 ] unsigned int 
  2639 ;; Registers used:
  2640 ;;		wreg, status,2, status,0
  2641 ;; Tracked objects:
  2642 ;;		On entry : 0/0
  2643 ;;		On exit  : 0/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMMON   BANK0   BANK1
  2646 ;;      Params:         0       2       0
  2647 ;;      Locals:         0       2       0
  2648 ;;      Temps:          0       2       0
  2649 ;;      Totals:         0       6       0
  2650 ;;Total ram usage:        6 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:    2
  2653 ;; This function calls:
  2654 ;;		Nothing
  2655 ;; This function is called by:
  2656 ;;		_sendName
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           
  2661                           ;psect for function _read_flashmem
  2662  05D1                     _read_flashmem:	
  2663                           
  2664                           ;flash.c: 60: INTCONbits.GIE = 0;
  2665                           
  2666                           ;incstack = 0
  2667                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  2668  05D1  138B               	bcf	11,7	;volatile
  2669                           
  2670                           ;flash.c: 62: PMCON1 = 0x00;
  2671  05D2  0023               	movlb	3	; select bank3
  2672  05D3  0195               	clrf	21	;volatile
  2673                           
  2674                           ;flash.c: 64: PMADRL = (char) (((0x800U-32) + offset) >> 0);
  2675  05D4  0020               	movlb	0	; select bank0
  2676  05D5  0820               	movf	read_flashmem@offset,w
  2677  05D6  3EE0               	addlw	224
  2678  05D7  0023               	movlb	3	; select bank3
  2679  05D8  0091               	movwf	17	;volatile
  2680                           
  2681                           ;flash.c: 65: PMADRH = (char) (((0x800U-32) + offset) >> 8);
  2682  05D9  0020               	movlb	0	; select bank0
  2683  05DA  0820               	movf	read_flashmem@offset,w
  2684  05DB  3EE0               	addlw	224
  2685  05DC  00A2               	movwf	??_read_flashmem
  2686  05DD  3007               	movlw	7
  2687  05DE  3D21               	addwfc	read_flashmem@offset+1,w
  2688  05DF  00A3               	movwf	??_read_flashmem+1
  2689  05E0  0823               	movf	??_read_flashmem+1,w
  2690  05E1  0023               	movlb	3	; select bank3
  2691  05E2  0092               	movwf	18	;volatile
  2692                           
  2693                           ;flash.c: 67: PMCON1bits.RD = 1;
  2694  05E3  1415               	bsf	21,0	;volatile
  2695                           
  2696                           ;flash.c: 69: __nop();
  2697  05E4  0000               	nop
  2698                           
  2699                           ;flash.c: 70: __nop();
  2700  05E5  0000               	nop
  2701                           
  2702                           ;flash.c: 72: unsigned int result = (unsigned) ((PMDATH) << 8) | (PMDATL);
  2703  05E6  0023               	movlb	3	; select bank3
  2704  05E7  0814               	movf	20,w	;volatile
  2705  05E8  0020               	movlb	0	; select bank0
  2706  05E9  00A5               	movwf	read_flashmem@result+1
  2707  05EA  0023               	movlb	3	; select bank3
  2708  05EB  0813               	movf	19,w	;volatile
  2709  05EC  0020               	movlb	0	; select bank0
  2710  05ED  00A4               	movwf	read_flashmem@result
  2711                           
  2712                           ;flash.c: 74: INTCONbits.GIE = 1;
  2713  05EE  178B               	bsf	11,7	;volatile
  2714                           
  2715                           ;flash.c: 76: return result;
  2716  05EF  0825               	movf	read_flashmem@result+1,w
  2717  05F0  00A1               	movwf	?_read_flashmem+1
  2718  05F1  0824               	movf	read_flashmem@result,w
  2719  05F2  00A0               	movwf	?_read_flashmem
  2720  05F3  0008               	return
  2721  05F4                     __end_of_read_flashmem:	
  2722                           
  2723                           	psect	text8
  2724  06B0                     __ptext8:	
  2725 ;; *************** function _nrf24l01SendByte *****************
  2726 ;; Defined at:
  2727 ;;		line 85 in file "nrf24l01.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;  payloadByte     1    wreg     unsigned char 
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;  payloadByte     1    1[BANK0 ] unsigned char 
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2, status,0, pclath, cstack
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMMON   BANK0   BANK1
  2741 ;;      Params:         0       0       0
  2742 ;;      Locals:         0       1       0
  2743 ;;      Temps:          0       0       0
  2744 ;;      Totals:         0       1       0
  2745 ;;Total ram usage:        1 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    3
  2748 ;; This function calls:
  2749 ;;		_nrf24l01SPISend
  2750 ;; This function is called by:
  2751 ;;		_sendName
  2752 ;;		_sendString
  2753 ;;		_loop
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           
  2758                           ;psect for function _nrf24l01SendByte
  2759  06B0                     _nrf24l01SendByte:	
  2760                           
  2761                           ;incstack = 0
  2762                           ; Regs used in _nrf24l01SendByte: [wreg+status,2+status,0+pclath+cstack]
  2763                           ;nrf24l01SendByte@payloadByte stored from wreg
  2764  06B0  0020               	movlb	0	; select bank0
  2765  06B1  00A1               	movwf	nrf24l01SendByte@payloadByte
  2766                           
  2767                           ;nrf24l01.c: 86: nrf24l01SPISend(payloadByte);
  2768  06B2  0821               	movf	nrf24l01SendByte@payloadByte,w
  2769  06B3  267A               	fcall	_nrf24l01SPISend
  2770  06B4  0008               	return
  2771  06B5                     __end_of_nrf24l01SendByte:	
  2772                           
  2773                           	psect	text9
  2774  0690                     __ptext9:	
  2775 ;; *************** function _nrf24l01SendStart *****************
  2776 ;; Defined at:
  2777 ;;		line 74 in file "nrf24l01.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;		None
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;		None
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  1    wreg      void 
  2784 ;; Registers used:
  2785 ;;		wreg, status,2, status,0, pclath, cstack
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMMON   BANK0   BANK1
  2791 ;;      Params:         0       0       0
  2792 ;;      Locals:         0       0       0
  2793 ;;      Temps:          0       0       0
  2794 ;;      Totals:         0       0       0
  2795 ;;Total ram usage:        0 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; Hardware stack levels required when called:    5
  2798 ;; This function calls:
  2799 ;;		_nrf24l01SPISend
  2800 ;;		_nrf24l01SPIStart
  2801 ;;		_nrf24l01SetTransmitMode
  2802 ;; This function is called by:
  2803 ;;		_loop
  2804 ;; This function uses a non-reentrant model
  2805 ;;
  2806                           
  2807                           
  2808                           ;psect for function _nrf24l01SendStart
  2809  0690                     _nrf24l01SendStart:	
  2810                           
  2811                           ;nrf24l01.c: 76: PORTAbits.RA0 = 0;
  2812                           
  2813                           ;incstack = 0
  2814                           ; Regs used in _nrf24l01SendStart: [wreg+status,2+status,0+pclath+cstack]
  2815  0690  0020               	movlb	0	; select bank0
  2816  0691  100C               	bcf	12,0	;volatile
  2817                           
  2818                           ;nrf24l01.c: 78: nrf24l01SetTransmitMode();
  2819  0692  2650               	fcall	_nrf24l01SetTransmitMode
  2820                           
  2821                           ;nrf24l01.c: 80: nrf24l01SPIStart();
  2822  0693  2697               	fcall	_nrf24l01SPIStart
  2823                           
  2824                           ;nrf24l01.c: 82: nrf24l01SPISend(0b10100000);
  2825  0694  30A0               	movlw	160
  2826  0695  267A               	fcall	_nrf24l01SPISend
  2827  0696  0008               	return
  2828  0697                     __end_of_nrf24l01SendStart:	
  2829                           
  2830                           	psect	text10
  2831  0650                     __ptext10:	
  2832 ;; *************** function _nrf24l01SetTransmitMode *****************
  2833 ;; Defined at:
  2834 ;;		line 52 in file "nrf24l01.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;		None
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;  config          1    5[BANK0 ] struct .
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      void 
  2841 ;; Registers used:
  2842 ;;		wreg, status,2, status,0, pclath, cstack
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMMON   BANK0   BANK1
  2848 ;;      Params:         0       0       0
  2849 ;;      Locals:         0       1       0
  2850 ;;      Temps:          0       1       0
  2851 ;;      Totals:         0       2       0
  2852 ;;Total ram usage:        2 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:    4
  2855 ;; This function calls:
  2856 ;;		_nrf24l01Send
  2857 ;; This function is called by:
  2858 ;;		_nrf24l01SendStart
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           
  2863                           ;psect for function _nrf24l01SetTransmitMode
  2864  0650                     _nrf24l01SetTransmitMode:	
  2865                           
  2866                           ;nrf24l01.c: 53: n_CONFIG_t config;
  2867                           ;nrf24l01.c: 54: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  2868                           
  2869                           ;incstack = 0
  2870                           ; Regs used in _nrf24l01SetTransmitMode: [wreg+status,2+status,0+pclath+cstack]
  2871  0650  0020               	movlb	0	; select bank0
  2872  0651  01A1               	clrf	nrf24l01Send@data
  2873  0652  3000               	movlw	0
  2874  0653  2666               	fcall	_nrf24l01Send
  2875  0654  0020               	movlb	0	; select bank0
  2876  0655  00A4               	movwf	??_nrf24l01SetTransmitMode
  2877  0656  0824               	movf	??_nrf24l01SetTransmitMode,w
  2878  0657  00A5               	movwf	nrf24l01SetTransmitMode@config
  2879                           
  2880                           ;nrf24l01.c: 55: if (config.PRIM_RX == 1){
  2881  0658  1C25               	btfss	nrf24l01SetTransmitMode@config,0
  2882  0659  0008               	return
  2883                           
  2884                           ;nrf24l01.c: 56: config.PRIM_RX = 0;
  2885  065A  1025               	bcf	nrf24l01SetTransmitMode@config,0
  2886                           
  2887                           ;nrf24l01.c: 57: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2888  065B  0825               	movf	nrf24l01SetTransmitMode@config,w
  2889  065C  00A4               	movwf	??_nrf24l01SetTransmitMode
  2890  065D  0824               	movf	??_nrf24l01SetTransmitMode,w
  2891  065E  00A1               	movwf	nrf24l01Send@data
  2892  065F  3020               	movlw	32
  2893  0660  2666               	fcall	_nrf24l01Send
  2894                           
  2895                           ;nrf24l01.c: 58: _delay((unsigned long)((130)*(16000000/4000000.0)));
  2896  0661  30AD               	movlw	173
  2897  0662                     u1667:	
  2898  0662  0B89               	decfsz	9,f
  2899  0663  2E62               	goto	u1667
  2900  0664  0000               	nop
  2901  0665  0008               	return
  2902  0666                     __end_of_nrf24l01SetTransmitMode:	
  2903                           
  2904                           	psect	text11
  2905  0666                     __ptext11:	
  2906 ;; *************** function _nrf24l01Send *****************
  2907 ;; Defined at:
  2908 ;;		line 39 in file "nrf24l01.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;  command         1    wreg     unsigned char 
  2911 ;;  data            1    1[BANK0 ] unsigned char 
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;  command         1    3[BANK0 ] unsigned char 
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      unsigned char 
  2916 ;; Registers used:
  2917 ;;		wreg, status,2, status,0, pclath, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMMON   BANK0   BANK1
  2923 ;;      Params:         0       1       0
  2924 ;;      Locals:         0       1       0
  2925 ;;      Temps:          0       1       0
  2926 ;;      Totals:         0       3       0
  2927 ;;Total ram usage:        3 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    3
  2930 ;; This function calls:
  2931 ;;		_nrf24l01SPIEnd
  2932 ;;		_nrf24l01SPISend
  2933 ;;		_nrf24l01SPIStart
  2934 ;; This function is called by:
  2935 ;;		_nrf24l01SetTransmitMode
  2936 ;;		_nrf24l01InitRegisters
  2937 ;;		_nrf24l01SetRecieveMode
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           
  2942                           ;psect for function _nrf24l01Send
  2943  0666                     _nrf24l01Send:	
  2944                           
  2945                           ;incstack = 0
  2946                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  2947                           ;nrf24l01Send@command stored from wreg
  2948  0666  0020               	movlb	0	; select bank0
  2949  0667  00A3               	movwf	nrf24l01Send@command
  2950                           
  2951                           ;nrf24l01.c: 41: nrf24l01SPIStart();
  2952  0668  2697               	fcall	_nrf24l01SPIStart
  2953                           
  2954                           ;nrf24l01.c: 43: status.byte = nrf24l01SPISend(command);
  2955  0669  0020               	movlb	0	; select bank0
  2956  066A  0823               	movf	nrf24l01Send@command,w
  2957  066B  267A               	fcall	_nrf24l01SPISend
  2958  066C  0020               	movlb	0	; select bank0
  2959  066D  00A2               	movwf	??_nrf24l01Send
  2960  066E  0822               	movf	??_nrf24l01Send,w
  2961  066F  00D6               	movwf	_status
  2962                           
  2963                           ;nrf24l01.c: 44: data = nrf24l01SPISend(data);
  2964  0670  0821               	movf	nrf24l01Send@data,w
  2965  0671  267A               	fcall	_nrf24l01SPISend
  2966  0672  0020               	movlb	0	; select bank0
  2967  0673  00A2               	movwf	??_nrf24l01Send
  2968  0674  0822               	movf	??_nrf24l01Send,w
  2969  0675  00A1               	movwf	nrf24l01Send@data
  2970                           
  2971                           ;nrf24l01.c: 46: nrf24l01SPIEnd();
  2972  0676  269E               	fcall	_nrf24l01SPIEnd
  2973                           
  2974                           ;nrf24l01.c: 48: return data;
  2975  0677  0020               	movlb	0	; select bank0
  2976  0678  0821               	movf	nrf24l01Send@data,w
  2977  0679  0008               	return
  2978  067A                     __end_of_nrf24l01Send:	
  2979                           
  2980                           	psect	text12
  2981  0697                     __ptext12:	
  2982 ;; *************** function _nrf24l01SPIStart *****************
  2983 ;; Defined at:
  2984 ;;		line 23 in file "nrf24l01.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;		None
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;		None
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  1    wreg      void 
  2991 ;; Registers used:
  2992 ;;		wreg
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMMON   BANK0   BANK1
  2998 ;;      Params:         0       0       0
  2999 ;;      Locals:         0       0       0
  3000 ;;      Temps:          0       0       0
  3001 ;;      Totals:         0       0       0
  3002 ;;Total ram usage:        0 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    2
  3005 ;; This function calls:
  3006 ;;		Nothing
  3007 ;; This function is called by:
  3008 ;;		_nrf24l01Send
  3009 ;;		_nrf24l01SendStart
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           
  3014                           ;psect for function _nrf24l01SPIStart
  3015  0697                     _nrf24l01SPIStart:	
  3016                           
  3017                           ;nrf24l01.c: 24: PORTAbits.RA1 = 0;
  3018                           
  3019                           ;incstack = 0
  3020                           ; Regs used in _nrf24l01SPIStart: [wreg]
  3021  0697  0020               	movlb	0	; select bank0
  3022  0698  108C               	bcf	12,1	;volatile
  3023                           
  3024                           ;nrf24l01.c: 25: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3025  0699  300D               	movlw	13
  3026  069A                     u1677:	
  3027  069A  0B89               	decfsz	9,f
  3028  069B  2E9A               	goto	u1677
  3029  069C  0000               	nop
  3030  069D  0008               	return
  3031  069E                     __end_of_nrf24l01SPIStart:	
  3032                           
  3033                           	psect	text13
  3034  067A                     __ptext13:	
  3035 ;; *************** function _nrf24l01SPISend *****************
  3036 ;; Defined at:
  3037 ;;		line 28 in file "nrf24l01.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;  data            1    wreg     unsigned char 
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;  data            1    0[BANK0 ] unsigned char 
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      unsigned char 
  3044 ;; Registers used:
  3045 ;;		wreg
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMMON   BANK0   BANK1
  3051 ;;      Params:         0       0       0
  3052 ;;      Locals:         0       1       0
  3053 ;;      Temps:          0       0       0
  3054 ;;      Totals:         0       1       0
  3055 ;;Total ram usage:        1 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    2
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_nrf24l01Send
  3062 ;;		_nrf24l01SendStart
  3063 ;;		_nrf24l01SendByte
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           
  3068                           ;psect for function _nrf24l01SPISend
  3069  067A                     _nrf24l01SPISend:	
  3070                           
  3071                           ;incstack = 0
  3072                           ; Regs used in _nrf24l01SPISend: [wreg]
  3073                           ;nrf24l01SPISend@data stored from wreg
  3074  067A  0020               	movlb	0	; select bank0
  3075  067B  00A0               	movwf	nrf24l01SPISend@data
  3076                           
  3077                           ;nrf24l01.c: 29: SSP1BUF = data;
  3078  067C  0820               	movf	nrf24l01SPISend@data,w
  3079  067D  0024               	movlb	4	; select bank4
  3080  067E  0091               	movwf	17	;volatile
  3081  067F                     l167:	
  3082                           ;nrf24l01.c: 30: while (!SSP1STATbits.BF){ __nop(); }
  3083                           
  3084  067F  0024               	movlb	4	; select bank4
  3085  0680  1814               	btfsc	20,0	;volatile
  3086  0681  2E84               	goto	l2025
  3087  0682  0000               	nop
  3088  0683  2E7F               	goto	l167
  3089  0684                     l2025:	
  3090                           
  3091                           ;nrf24l01.c: 31: return SSP1BUF;
  3092  0684  0811               	movf	17,w	;volatile
  3093  0685  0008               	return
  3094  0686                     __end_of_nrf24l01SPISend:	
  3095                           
  3096                           	psect	text14
  3097  0686                     __ptext14:	
  3098 ;; *************** function _nrf24l01SendEnd *****************
  3099 ;; Defined at:
  3100 ;;		line 89 in file "nrf24l01.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;		None
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;		None
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      void 
  3107 ;; Registers used:
  3108 ;;		wreg, status,2, status,0, pclath, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMMON   BANK0   BANK1
  3114 ;;      Params:         0       0       0
  3115 ;;      Locals:         0       0       0
  3116 ;;      Temps:          0       0       0
  3117 ;;      Totals:         0       0       0
  3118 ;;Total ram usage:        0 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    3
  3121 ;; This function calls:
  3122 ;;		_nrf24l01SPIEnd
  3123 ;; This function is called by:
  3124 ;;		_loop
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           
  3129                           ;psect for function _nrf24l01SendEnd
  3130  0686                     _nrf24l01SendEnd:	
  3131                           
  3132                           ;nrf24l01.c: 91: nrf24l01SPIEnd();
  3133                           
  3134                           ;incstack = 0
  3135                           ; Regs used in _nrf24l01SendEnd: [wreg+status,2+status,0+pclath+cstack]
  3136  0686  269E               	fcall	_nrf24l01SPIEnd
  3137                           
  3138                           ;nrf24l01.c: 93: PORTAbits.RA0 = 1;
  3139  0687  0020               	movlb	0	; select bank0
  3140  0688  140C               	bsf	12,0	;volatile
  3141                           
  3142                           ;nrf24l01.c: 94: _delay((unsigned long)((50)*(16000000/4000000.0)));
  3143  0689  3042               	movlw	66
  3144  068A                     u1687:	
  3145  068A  0B89               	decfsz	9,f
  3146  068B  2E8A               	goto	u1687
  3147  068C  3200               	nop2
  3148                           
  3149                           ;nrf24l01.c: 95: PORTAbits.RA0 = 0;
  3150  068D  0020               	movlb	0	; select bank0
  3151  068E  100C               	bcf	12,0	;volatile
  3152  068F  0008               	return
  3153  0690                     __end_of_nrf24l01SendEnd:	
  3154                           
  3155                           	psect	text15
  3156  069E                     __ptext15:	
  3157 ;; *************** function _nrf24l01SPIEnd *****************
  3158 ;; Defined at:
  3159 ;;		line 34 in file "nrf24l01.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;		None
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;		None
  3164 ;; Return value:  Size  Location     Type
  3165 ;;                  1    wreg      void 
  3166 ;; Registers used:
  3167 ;;		wreg
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMMON   BANK0   BANK1
  3173 ;;      Params:         0       0       0
  3174 ;;      Locals:         0       0       0
  3175 ;;      Temps:          0       0       0
  3176 ;;      Totals:         0       0       0
  3177 ;;Total ram usage:        0 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    2
  3180 ;; This function calls:
  3181 ;;		Nothing
  3182 ;; This function is called by:
  3183 ;;		_nrf24l01Send
  3184 ;;		_nrf24l01SendEnd
  3185 ;; This function uses a non-reentrant model
  3186 ;;
  3187                           
  3188                           
  3189                           ;psect for function _nrf24l01SPIEnd
  3190  069E                     _nrf24l01SPIEnd:	
  3191                           
  3192                           ;nrf24l01.c: 35: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3193                           
  3194                           ;incstack = 0
  3195                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  3196  069E  300D               	movlw	13
  3197  069F                     u1697:	
  3198  069F  0B89               	decfsz	9,f
  3199  06A0  2E9F               	goto	u1697
  3200  06A1  0000               	nop
  3201                           
  3202                           ;nrf24l01.c: 36: PORTAbits.RA1 = 1;
  3203  06A2  0020               	movlb	0	; select bank0
  3204  06A3  148C               	bsf	12,1	;volatile
  3205  06A4  0008               	return
  3206  06A5                     __end_of_nrf24l01SPIEnd:	
  3207                           
  3208                           	psect	text16
  3209  05F4                     __ptext16:	
  3210 ;; *************** function _itoa *****************
  3211 ;; Defined at:
  3212 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3213 ;; Parameters:    Size  Location     Type
  3214 ;;  buf             1    wreg     PTR unsigned char 
  3215 ;;		 -> byte(3), buffer(6), 
  3216 ;;  val             2   17[BANK0 ] int 
  3217 ;;  base            2   19[BANK0 ] int 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  buf             1   23[BANK0 ] PTR unsigned char 
  3220 ;;		 -> byte(3), buffer(6), 
  3221 ;;  cp              1   22[BANK0 ] PTR unsigned char 
  3222 ;;		 -> byte(3), buffer(6), 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      PTR unsigned char 
  3225 ;; Registers used:
  3226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMMON   BANK0   BANK1
  3232 ;;      Params:         0       4       0
  3233 ;;      Locals:         0       2       0
  3234 ;;      Temps:          0       1       0
  3235 ;;      Totals:         0       7       0
  3236 ;;Total ram usage:        7 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    4
  3239 ;; This function calls:
  3240 ;;		_utoa
  3241 ;; This function is called by:
  3242 ;;		_loop
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           
  3247                           ;psect for function _itoa
  3248  05F4                     _itoa:	
  3249                           
  3250                           ;incstack = 0
  3251                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3252                           ;itoa@buf stored from wreg
  3253  05F4  0020               	movlb	0	; select bank0
  3254  05F5  00B7               	movwf	itoa@buf
  3255  05F6  0837               	movf	itoa@buf,w
  3256  05F7  00B5               	movwf	??_itoa
  3257  05F8  0835               	movf	??_itoa,w
  3258  05F9  00B6               	movwf	itoa@cp
  3259  05FA  1FB2               	btfss	itoa@val+1,7
  3260  05FB  2E0C               	goto	l1571
  3261  05FC  302D               	movlw	45
  3262  05FD  00B5               	movwf	??_itoa
  3263  05FE  0837               	movf	itoa@buf,w
  3264  05FF  0086               	movwf	6
  3265  0600  0187               	clrf	7
  3266  0601  0835               	movf	??_itoa,w
  3267  0602  0081               	movwf	1
  3268  0603  3001               	movlw	1
  3269  0604  00B5               	movwf	??_itoa
  3270  0605  0835               	movf	??_itoa,w
  3271  0606  07B7               	addwf	itoa@buf,f
  3272  0607  09B1               	comf	itoa@val,f
  3273  0608  09B2               	comf	itoa@val+1,f
  3274  0609  0AB1               	incf	itoa@val,f
  3275  060A  1903               	skipnz
  3276  060B  0AB2               	incf	itoa@val+1,f
  3277  060C                     l1571:	
  3278  060C  0832               	movf	itoa@val+1,w
  3279  060D  00A9               	movwf	utoa@val+1
  3280  060E  0831               	movf	itoa@val,w
  3281  060F  00A8               	movwf	utoa@val
  3282  0610  0834               	movf	itoa@base+1,w
  3283  0611  00AB               	movwf	utoa@base+1
  3284  0612  0833               	movf	itoa@base,w
  3285  0613  00AA               	movwf	utoa@base
  3286  0614  0837               	movf	itoa@buf,w
  3287  0615  2442               	fcall	_utoa
  3288  0616  0008               	return
  3289  0617                     __end_of_itoa:	
  3290                           ;	Return value of _itoa is never used
  3291                           
  3292                           
  3293                           	psect	text17
  3294  0442                     __ptext17:	
  3295 ;; *************** function _utoa *****************
  3296 ;; Defined at:
  3297 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;  buf             1    wreg     PTR unsigned char 
  3300 ;;		 -> byte(3), buffer(6), 
  3301 ;;  val             2    8[BANK0 ] unsigned int 
  3302 ;;  base            2   10[BANK0 ] int 
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  3305 ;;		 -> byte(3), buffer(6), 
  3306 ;;  v               2   13[BANK0 ] unsigned int 
  3307 ;;  c               1   15[BANK0 ] unsigned char 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;                  1    wreg      PTR unsigned char 
  3310 ;; Registers used:
  3311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1
  3317 ;;      Params:         0       4       0
  3318 ;;      Locals:         0       4       0
  3319 ;;      Temps:          0       1       0
  3320 ;;      Totals:         0       9       0
  3321 ;;Total ram usage:        9 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    3
  3324 ;; This function calls:
  3325 ;;		___lwdiv
  3326 ;;		___lwmod
  3327 ;; This function is called by:
  3328 ;;		_itoa
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           
  3333                           ;psect for function _utoa
  3334  0442                     _utoa:	
  3335                           
  3336                           ;incstack = 0
  3337                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3338                           ;utoa@buf stored from wreg
  3339  0442  0020               	movlb	0	; select bank0
  3340  0443  00B0               	movwf	utoa@buf
  3341  0444  0829               	movf	utoa@val+1,w
  3342  0445  00AE               	movwf	utoa@v+1
  3343  0446  0828               	movf	utoa@val,w
  3344  0447  00AD               	movwf	utoa@v
  3345  0448                     l1487:	
  3346  0448  082B               	movf	utoa@base+1,w
  3347  0449  00A1               	movwf	___lwdiv@divisor+1
  3348  044A  082A               	movf	utoa@base,w
  3349  044B  00A0               	movwf	___lwdiv@divisor
  3350  044C  082E               	movf	utoa@v+1,w
  3351  044D  00A3               	movwf	___lwdiv@dividend+1
  3352  044E  082D               	movf	utoa@v,w
  3353  044F  00A2               	movwf	___lwdiv@dividend
  3354  0450  251B               	fcall	___lwdiv
  3355  0451  0020               	movlb	0	; select bank0
  3356  0452  0821               	movf	?___lwdiv+1,w
  3357  0453  00AE               	movwf	utoa@v+1
  3358  0454  0820               	movf	?___lwdiv,w
  3359  0455  00AD               	movwf	utoa@v
  3360  0456  3001               	movlw	1
  3361  0457  00AC               	movwf	??_utoa
  3362  0458  082C               	movf	??_utoa,w
  3363  0459  07B0               	addwf	utoa@buf,f
  3364  045A  082D               	movf	utoa@v,w
  3365  045B  042E               	iorwf	utoa@v+1,w
  3366  045C  1D03               	btfss	3,2
  3367  045D  2C48               	goto	l1487
  3368  045E  0830               	movf	utoa@buf,w
  3369  045F  0086               	movwf	6
  3370  0460  0187               	clrf	7
  3371  0461  0181               	clrf	1
  3372  0462  3001               	movlw	1
  3373  0463  02B0               	subwf	utoa@buf,f
  3374  0464                     l1497:	
  3375  0464  082B               	movf	utoa@base+1,w
  3376  0465  00A1               	movwf	___lwmod@divisor+1
  3377  0466  082A               	movf	utoa@base,w
  3378  0467  00A0               	movwf	___lwmod@divisor
  3379  0468  0829               	movf	utoa@val+1,w
  3380  0469  00A3               	movwf	___lwmod@dividend+1
  3381  046A  0828               	movf	utoa@val,w
  3382  046B  00A2               	movwf	___lwmod@dividend
  3383  046C  257E               	fcall	___lwmod
  3384  046D  0020               	movlb	0	; select bank0
  3385  046E  0820               	movf	?___lwmod,w
  3386  046F  00AC               	movwf	??_utoa
  3387  0470  082C               	movf	??_utoa,w
  3388  0471  00AF               	movwf	utoa@c
  3389  0472  082B               	movf	utoa@base+1,w
  3390  0473  00A1               	movwf	___lwdiv@divisor+1
  3391  0474  082A               	movf	utoa@base,w
  3392  0475  00A0               	movwf	___lwdiv@divisor
  3393  0476  0829               	movf	utoa@val+1,w
  3394  0477  00A3               	movwf	___lwdiv@dividend+1
  3395  0478  0828               	movf	utoa@val,w
  3396  0479  00A2               	movwf	___lwdiv@dividend
  3397  047A  251B               	fcall	___lwdiv
  3398  047B  0020               	movlb	0	; select bank0
  3399  047C  0821               	movf	?___lwdiv+1,w
  3400  047D  00A9               	movwf	utoa@val+1
  3401  047E  0820               	movf	?___lwdiv,w
  3402  047F  00A8               	movwf	utoa@val
  3403  0480  300A               	movlw	10
  3404  0481  022F               	subwf	utoa@c,w
  3405  0482  1C03               	skipc
  3406  0483  2C88               	goto	l496
  3407  0484  3007               	movlw	7
  3408  0485  00AC               	movwf	??_utoa
  3409  0486  082C               	movf	??_utoa,w
  3410  0487  07AF               	addwf	utoa@c,f
  3411  0488                     l496:	
  3412  0488  3030               	movlw	48
  3413  0489  00AC               	movwf	??_utoa
  3414  048A  082C               	movf	??_utoa,w
  3415  048B  07AF               	addwf	utoa@c,f
  3416  048C  082F               	movf	utoa@c,w
  3417  048D  00AC               	movwf	??_utoa
  3418  048E  0830               	movf	utoa@buf,w
  3419  048F  0086               	movwf	6
  3420  0490  0187               	clrf	7
  3421  0491  082C               	movf	??_utoa,w
  3422  0492  0081               	movwf	1
  3423  0493  3001               	movlw	1
  3424  0494  02B0               	subwf	utoa@buf,f
  3425  0495  0828               	movf	utoa@val,w
  3426  0496  0429               	iorwf	utoa@val+1,w
  3427  0497  1D03               	btfss	3,2
  3428  0498  2C64               	goto	l1497
  3429                           
  3430                           ;	Return value of _utoa is never used
  3431  0499  3001               	movlw	1
  3432  049A  00AC               	movwf	??_utoa
  3433  049B  082C               	movf	??_utoa,w
  3434  049C  07B0               	addwf	utoa@buf,f
  3435  049D  0008               	return
  3436  049E                     __end_of_utoa:	
  3437                           
  3438                           	psect	text18
  3439  057E                     __ptext18:	
  3440 ;; *************** function ___lwmod *****************
  3441 ;; Defined at:
  3442 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  divisor         2    0[BANK0 ] unsigned int 
  3445 ;;  dividend        2    2[BANK0 ] unsigned int 
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;  counter         1    5[BANK0 ] unsigned char 
  3448 ;; Return value:  Size  Location     Type
  3449 ;;                  2    0[BANK0 ] unsigned int 
  3450 ;; Registers used:
  3451 ;;		wreg, status,2, status,0
  3452 ;; Tracked objects:
  3453 ;;		On entry : 0/0
  3454 ;;		On exit  : 0/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMMON   BANK0   BANK1
  3457 ;;      Params:         0       4       0
  3458 ;;      Locals:         0       1       0
  3459 ;;      Temps:          0       1       0
  3460 ;;      Totals:         0       6       0
  3461 ;;Total ram usage:        6 bytes
  3462 ;; Hardware stack levels used:    1
  3463 ;; Hardware stack levels required when called:    2
  3464 ;; This function calls:
  3465 ;;		Nothing
  3466 ;; This function is called by:
  3467 ;;		_utoa
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           
  3472                           ;psect for function ___lwmod
  3473  057E                     ___lwmod:	
  3474                           
  3475                           ;incstack = 0
  3476                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3477  057E  0020               	movlb	0	; select bank0
  3478  057F  0820               	movf	___lwmod@divisor,w
  3479  0580  0421               	iorwf	___lwmod@divisor+1,w
  3480  0581  1903               	btfsc	3,2
  3481  0582  2DA6               	goto	l1415
  3482  0583  01A5               	clrf	___lwmod@counter
  3483  0584  0AA5               	incf	___lwmod@counter,f
  3484  0585                     l1405:	
  3485  0585  1BA1               	btfsc	___lwmod@divisor+1,7
  3486  0586  2D91               	goto	l1407
  3487  0587  3001               	movlw	1
  3488  0588                     u855:	
  3489  0588  35A0               	lslf	___lwmod@divisor,f
  3490  0589  0DA1               	rlf	___lwmod@divisor+1,f
  3491  058A  0B89               	decfsz	9,f
  3492  058B  2D88               	goto	u855
  3493  058C  3001               	movlw	1
  3494  058D  00A4               	movwf	??___lwmod
  3495  058E  0824               	movf	??___lwmod,w
  3496  058F  07A5               	addwf	___lwmod@counter,f
  3497  0590  2D85               	goto	l1405
  3498  0591                     l1407:	
  3499  0591  0821               	movf	___lwmod@divisor+1,w
  3500  0592  0223               	subwf	___lwmod@dividend+1,w
  3501  0593  1D03               	skipz
  3502  0594  2D97               	goto	u875
  3503  0595  0820               	movf	___lwmod@divisor,w
  3504  0596  0222               	subwf	___lwmod@dividend,w
  3505  0597                     u875:	
  3506  0597  1C03               	skipc
  3507  0598  2D9D               	goto	l1411
  3508  0599  0820               	movf	___lwmod@divisor,w
  3509  059A  02A2               	subwf	___lwmod@dividend,f
  3510  059B  0821               	movf	___lwmod@divisor+1,w
  3511  059C  3BA3               	subwfb	___lwmod@dividend+1,f
  3512  059D                     l1411:	
  3513  059D  3001               	movlw	1
  3514  059E                     u885:	
  3515  059E  36A1               	lsrf	___lwmod@divisor+1,f
  3516  059F  0CA0               	rrf	___lwmod@divisor,f
  3517  05A0  0B89               	decfsz	9,f
  3518  05A1  2D9E               	goto	u885
  3519  05A2  3001               	movlw	1
  3520  05A3  02A5               	subwf	___lwmod@counter,f
  3521  05A4  1D03               	btfss	3,2
  3522  05A5  2D91               	goto	l1407
  3523  05A6                     l1415:	
  3524  05A6  0823               	movf	___lwmod@dividend+1,w
  3525  05A7  00A1               	movwf	?___lwmod+1
  3526  05A8  0822               	movf	___lwmod@dividend,w
  3527  05A9  00A0               	movwf	?___lwmod
  3528  05AA  0008               	return
  3529  05AB                     __end_of___lwmod:	
  3530                           
  3531                           	psect	text19
  3532  051B                     __ptext19:	
  3533 ;; *************** function ___lwdiv *****************
  3534 ;; Defined at:
  3535 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;  divisor         2    0[BANK0 ] unsigned int 
  3538 ;;  dividend        2    2[BANK0 ] unsigned int 
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;  quotient        2    5[BANK0 ] unsigned int 
  3541 ;;  counter         1    7[BANK0 ] unsigned char 
  3542 ;; Return value:  Size  Location     Type
  3543 ;;                  2    0[BANK0 ] unsigned int 
  3544 ;; Registers used:
  3545 ;;		wreg, status,2, status,0
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMMON   BANK0   BANK1
  3551 ;;      Params:         0       4       0
  3552 ;;      Locals:         0       3       0
  3553 ;;      Temps:          0       1       0
  3554 ;;      Totals:         0       8       0
  3555 ;;Total ram usage:        8 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; Hardware stack levels required when called:    2
  3558 ;; This function calls:
  3559 ;;		Nothing
  3560 ;; This function is called by:
  3561 ;;		_utoa
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           
  3566                           ;psect for function ___lwdiv
  3567  051B                     ___lwdiv:	
  3568                           
  3569                           ;incstack = 0
  3570                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3571  051B  0020               	movlb	0	; select bank0
  3572  051C  01A5               	clrf	___lwdiv@quotient
  3573  051D  01A6               	clrf	___lwdiv@quotient+1
  3574  051E  0820               	movf	___lwdiv@divisor,w
  3575  051F  0421               	iorwf	___lwdiv@divisor+1,w
  3576  0520  1903               	btfsc	3,2
  3577  0521  2D4B               	goto	l1393
  3578  0522  01A7               	clrf	___lwdiv@counter
  3579  0523  0AA7               	incf	___lwdiv@counter,f
  3580  0524                     l1381:	
  3581  0524  1BA1               	btfsc	___lwdiv@divisor+1,7
  3582  0525  2D30               	goto	l1383
  3583  0526  3001               	movlw	1
  3584  0527                     u785:	
  3585  0527  35A0               	lslf	___lwdiv@divisor,f
  3586  0528  0DA1               	rlf	___lwdiv@divisor+1,f
  3587  0529  0B89               	decfsz	9,f
  3588  052A  2D27               	goto	u785
  3589  052B  3001               	movlw	1
  3590  052C  00A4               	movwf	??___lwdiv
  3591  052D  0824               	movf	??___lwdiv,w
  3592  052E  07A7               	addwf	___lwdiv@counter,f
  3593  052F  2D24               	goto	l1381
  3594  0530                     l1383:	
  3595  0530  3001               	movlw	1
  3596  0531                     u805:	
  3597  0531  35A5               	lslf	___lwdiv@quotient,f
  3598  0532  0DA6               	rlf	___lwdiv@quotient+1,f
  3599  0533  0B89               	decfsz	9,f
  3600  0534  2D31               	goto	u805
  3601  0535  0821               	movf	___lwdiv@divisor+1,w
  3602  0536  0223               	subwf	___lwdiv@dividend+1,w
  3603  0537  1D03               	skipz
  3604  0538  2D3B               	goto	u815
  3605  0539  0820               	movf	___lwdiv@divisor,w
  3606  053A  0222               	subwf	___lwdiv@dividend,w
  3607  053B                     u815:	
  3608  053B  1C03               	skipc
  3609  053C  2D42               	goto	l1389
  3610  053D  0820               	movf	___lwdiv@divisor,w
  3611  053E  02A2               	subwf	___lwdiv@dividend,f
  3612  053F  0821               	movf	___lwdiv@divisor+1,w
  3613  0540  3BA3               	subwfb	___lwdiv@dividend+1,f
  3614  0541  1425               	bsf	___lwdiv@quotient,0
  3615  0542                     l1389:	
  3616  0542  3001               	movlw	1
  3617  0543                     u825:	
  3618  0543  36A1               	lsrf	___lwdiv@divisor+1,f
  3619  0544  0CA0               	rrf	___lwdiv@divisor,f
  3620  0545  0B89               	decfsz	9,f
  3621  0546  2D43               	goto	u825
  3622  0547  3001               	movlw	1
  3623  0548  02A7               	subwf	___lwdiv@counter,f
  3624  0549  1D03               	btfss	3,2
  3625  054A  2D30               	goto	l1383
  3626  054B                     l1393:	
  3627  054B  0826               	movf	___lwdiv@quotient+1,w
  3628  054C  00A1               	movwf	?___lwdiv+1
  3629  054D  0825               	movf	___lwdiv@quotient,w
  3630  054E  00A0               	movwf	?___lwdiv
  3631  054F  0008               	return
  3632  0550                     __end_of___lwdiv:	
  3633                           
  3634                           	psect	text20
  3635  02D4                     __ptext20:	
  3636 ;; *************** function ___fttol *****************
  3637 ;; Defined at:
  3638 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  f1              3   32[BANK0 ] float 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;  lval            4   41[BANK0 ] unsigned long 
  3643 ;;  exp1            1   45[BANK0 ] unsigned char 
  3644 ;;  sign1           1   40[BANK0 ] unsigned char 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  4   32[BANK0 ] long 
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, status,0
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMMON   BANK0   BANK1
  3654 ;;      Params:         0       4       0
  3655 ;;      Locals:         0       6       0
  3656 ;;      Temps:          0       4       0
  3657 ;;      Totals:         0      14       0
  3658 ;;Total ram usage:       14 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    2
  3661 ;; This function calls:
  3662 ;;		Nothing
  3663 ;; This function is called by:
  3664 ;;		_loop
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           
  3669                           ;psect for function ___fttol
  3670  02D4                     ___fttol:	
  3671                           
  3672                           ;incstack = 0
  3673                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3674  02D4  0020               	movlb	0	; select bank0
  3675  02D5  0840               	movf	___fttol@f1,w
  3676  02D6  00C4               	movwf	??___fttol
  3677  02D7  0841               	movf	___fttol@f1+1,w
  3678  02D8  00C5               	movwf	??___fttol+1
  3679  02D9  0842               	movf	___fttol@f1+2,w
  3680  02DA  00C6               	movwf	??___fttol+2
  3681  02DB  1003               	clrc
  3682  02DC  0D45               	rlf	??___fttol+1,w
  3683  02DD  0D46               	rlf	??___fttol+2,w
  3684  02DE  00C7               	movwf	??___fttol+3
  3685  02DF  0847               	movf	??___fttol+3,w
  3686  02E0  00CD               	movwf	___fttol@exp1
  3687  02E1  084D               	movf	___fttol@exp1,w
  3688  02E2  1D03               	btfss	3,2
  3689  02E3  2AED               	goto	l1779
  3690  02E4  3000               	movlw	0
  3691  02E5  00C3               	movwf	?___fttol+3
  3692  02E6  3000               	movlw	0
  3693  02E7  00C2               	movwf	?___fttol+2
  3694  02E8  3000               	movlw	0
  3695  02E9  00C1               	movwf	?___fttol+1
  3696  02EA  3000               	movlw	0
  3697  02EB  00C0               	movwf	?___fttol
  3698  02EC  0008               	return
  3699  02ED                     l1779:	
  3700  02ED  0840               	movf	___fttol@f1,w
  3701  02EE  00C4               	movwf	??___fttol
  3702  02EF  0841               	movf	___fttol@f1+1,w
  3703  02F0  00C5               	movwf	??___fttol+1
  3704  02F1  0842               	movf	___fttol@f1+2,w
  3705  02F2  00C6               	movwf	??___fttol+2
  3706  02F3  3017               	movlw	23
  3707  02F4                     u1335:	
  3708  02F4  36C6               	lsrf	??___fttol+2,f
  3709  02F5  0CC5               	rrf	??___fttol+1,f
  3710  02F6  0CC4               	rrf	??___fttol,f
  3711  02F7  0B89               	decfsz	9,f
  3712  02F8  2AF4               	goto	u1335
  3713  02F9  0844               	movf	??___fttol,w
  3714  02FA  00C7               	movwf	??___fttol+3
  3715  02FB  0847               	movf	??___fttol+3,w
  3716  02FC  00C8               	movwf	___fttol@sign1
  3717  02FD  17C1               	bsf	___fttol@f1+1,7
  3718  02FE  30FF               	movlw	255
  3719  02FF  05C0               	andwf	___fttol@f1,f
  3720  0300  30FF               	movlw	255
  3721  0301  05C1               	andwf	___fttol@f1+1,f
  3722  0302  3000               	movlw	0
  3723  0303  05C2               	andwf	___fttol@f1+2,f
  3724  0304  0840               	movf	___fttol@f1,w
  3725  0305  00C9               	movwf	___fttol@lval
  3726  0306  0841               	movf	___fttol@f1+1,w
  3727  0307  00CA               	movwf	___fttol@lval+1
  3728  0308  0842               	movf	___fttol@f1+2,w
  3729  0309  00CB               	movwf	___fttol@lval+2
  3730  030A  01CC               	clrf	___fttol@lval+3
  3731  030B  308E               	movlw	142
  3732  030C  02CD               	subwf	___fttol@exp1,f
  3733  030D  1FCD               	btfss	___fttol@exp1,7
  3734  030E  2B2B               	goto	l1799
  3735  030F  084D               	movf	___fttol@exp1,w
  3736  0310  3A80               	xorlw	128
  3737  0311  3E8F               	addlw	143
  3738  0312  1803               	skipnc
  3739  0313  2B1D               	goto	l1797
  3740  0314  3000               	movlw	0
  3741  0315  00C3               	movwf	?___fttol+3
  3742  0316  3000               	movlw	0
  3743  0317  00C2               	movwf	?___fttol+2
  3744  0318  3000               	movlw	0
  3745  0319  00C1               	movwf	?___fttol+1
  3746  031A  3000               	movlw	0
  3747  031B  00C0               	movwf	?___fttol
  3748  031C  0008               	return
  3749  031D                     l1797:	
  3750  031D  3001               	movlw	1
  3751  031E                     u1365:	
  3752  031E  36CC               	lsrf	___fttol@lval+3,f
  3753  031F  0CCB               	rrf	___fttol@lval+2,f
  3754  0320  0CCA               	rrf	___fttol@lval+1,f
  3755  0321  0CC9               	rrf	___fttol@lval,f
  3756  0322  0B89               	decfsz	9,f
  3757  0323  2B1E               	goto	u1365
  3758  0324  3001               	movlw	1
  3759  0325  00C4               	movwf	??___fttol
  3760  0326  0844               	movf	??___fttol,w
  3761  0327  07CD               	addwf	___fttol@exp1,f
  3762  0328  1903               	btfsc	3,2
  3763  0329  2B44               	goto	l1807
  3764  032A  2B1D               	goto	l1797
  3765  032B                     l1799:	
  3766  032B  3018               	movlw	24
  3767  032C  024D               	subwf	___fttol@exp1,w
  3768  032D  1C03               	skipc
  3769  032E  2B41               	goto	l481
  3770  032F  3000               	movlw	0
  3771  0330  00C3               	movwf	?___fttol+3
  3772  0331  3000               	movlw	0
  3773  0332  00C2               	movwf	?___fttol+2
  3774  0333  3000               	movlw	0
  3775  0334  00C1               	movwf	?___fttol+1
  3776  0335  3000               	movlw	0
  3777  0336  00C0               	movwf	?___fttol
  3778  0337  0008               	return
  3779  0338                     l1805:	
  3780  0338  3001               	movlw	1
  3781  0339                     u1395:	
  3782  0339  35C9               	lslf	___fttol@lval,f
  3783  033A  0DCA               	rlf	___fttol@lval+1,f
  3784  033B  0DCB               	rlf	___fttol@lval+2,f
  3785  033C  0DCC               	rlf	___fttol@lval+3,f
  3786  033D  0B89               	decfsz	9,f
  3787  033E  2B39               	goto	u1395
  3788  033F  3001               	movlw	1
  3789  0340  02CD               	subwf	___fttol@exp1,f
  3790  0341                     l481:	
  3791  0341  084D               	movf	___fttol@exp1,w
  3792  0342  1D03               	btfss	3,2
  3793  0343  2B38               	goto	l1805
  3794  0344                     l1807:	
  3795  0344  0848               	movf	___fttol@sign1,w
  3796  0345  1903               	btfsc	3,2
  3797  0346  2B52               	goto	l1811
  3798  0347  09C9               	comf	___fttol@lval,f
  3799  0348  09CA               	comf	___fttol@lval+1,f
  3800  0349  09CB               	comf	___fttol@lval+2,f
  3801  034A  09CC               	comf	___fttol@lval+3,f
  3802  034B  0AC9               	incf	___fttol@lval,f
  3803  034C  1903               	skipnz
  3804  034D  0ACA               	incf	___fttol@lval+1,f
  3805  034E  1903               	skipnz
  3806  034F  0ACB               	incf	___fttol@lval+2,f
  3807  0350  1903               	skipnz
  3808  0351  0ACC               	incf	___fttol@lval+3,f
  3809  0352                     l1811:	
  3810  0352  084C               	movf	___fttol@lval+3,w
  3811  0353  00C3               	movwf	?___fttol+3
  3812  0354  084B               	movf	___fttol@lval+2,w
  3813  0355  00C2               	movwf	?___fttol+2
  3814  0356  084A               	movf	___fttol@lval+1,w
  3815  0357  00C1               	movwf	?___fttol+1
  3816  0358  0849               	movf	___fttol@lval,w
  3817  0359  00C0               	movwf	?___fttol
  3818  035A  0008               	return
  3819  035B                     __end_of___fttol:	
  3820                           
  3821                           	psect	text21
  3822  019C                     __ptext21:	
  3823 ;; *************** function ___ftdiv *****************
  3824 ;; Defined at:
  3825 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;  f2              3   16[BANK0 ] float 
  3828 ;;  f1              3   19[BANK0 ] float 
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;  f3              3   27[BANK0 ] float 
  3831 ;;  sign            1   31[BANK0 ] unsigned char 
  3832 ;;  exp             1   30[BANK0 ] unsigned char 
  3833 ;;  cntr            1   26[BANK0 ] unsigned char 
  3834 ;; Return value:  Size  Location     Type
  3835 ;;                  3   16[BANK0 ] float 
  3836 ;; Registers used:
  3837 ;;		wreg, status,2, status,0, pclath, cstack
  3838 ;; Tracked objects:
  3839 ;;		On entry : 0/0
  3840 ;;		On exit  : 0/0
  3841 ;;		Unchanged: 0/0
  3842 ;; Data sizes:     COMMON   BANK0   BANK1
  3843 ;;      Params:         0       6       0
  3844 ;;      Locals:         0       6       0
  3845 ;;      Temps:          0       4       0
  3846 ;;      Totals:         0      16       0
  3847 ;;Total ram usage:       16 bytes
  3848 ;; Hardware stack levels used:    1
  3849 ;; Hardware stack levels required when called:    3
  3850 ;; This function calls:
  3851 ;;		___ftpack
  3852 ;; This function is called by:
  3853 ;;		_loop
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           
  3858                           ;psect for function ___ftdiv
  3859  019C                     ___ftdiv:	
  3860                           
  3861                           ;incstack = 0
  3862                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3863  019C  0020               	movlb	0	; select bank0
  3864  019D  0833               	movf	___ftdiv@f1,w
  3865  019E  00B6               	movwf	??___ftdiv
  3866  019F  0834               	movf	___ftdiv@f1+1,w
  3867  01A0  00B7               	movwf	??___ftdiv+1
  3868  01A1  0835               	movf	___ftdiv@f1+2,w
  3869  01A2  00B8               	movwf	??___ftdiv+2
  3870  01A3  1003               	clrc
  3871  01A4  0D37               	rlf	??___ftdiv+1,w
  3872  01A5  0D38               	rlf	??___ftdiv+2,w
  3873  01A6  00B9               	movwf	??___ftdiv+3
  3874  01A7  0839               	movf	??___ftdiv+3,w
  3875  01A8  00BE               	movwf	___ftdiv@exp
  3876  01A9  083E               	movf	___ftdiv@exp,w
  3877  01AA  1D03               	btfss	3,2
  3878  01AB  29B3               	goto	l1737
  3879  01AC  3000               	movlw	0
  3880  01AD  00B0               	movwf	?___ftdiv
  3881  01AE  3000               	movlw	0
  3882  01AF  00B1               	movwf	?___ftdiv+1
  3883  01B0  3000               	movlw	0
  3884  01B1  00B2               	movwf	?___ftdiv+2
  3885  01B2  0008               	return
  3886  01B3                     l1737:	
  3887  01B3  0830               	movf	___ftdiv@f2,w
  3888  01B4  00B6               	movwf	??___ftdiv
  3889  01B5  0831               	movf	___ftdiv@f2+1,w
  3890  01B6  00B7               	movwf	??___ftdiv+1
  3891  01B7  0832               	movf	___ftdiv@f2+2,w
  3892  01B8  00B8               	movwf	??___ftdiv+2
  3893  01B9  1003               	clrc
  3894  01BA  0D37               	rlf	??___ftdiv+1,w
  3895  01BB  0D38               	rlf	??___ftdiv+2,w
  3896  01BC  00B9               	movwf	??___ftdiv+3
  3897  01BD  0839               	movf	??___ftdiv+3,w
  3898  01BE  00BF               	movwf	___ftdiv@sign
  3899  01BF  083F               	movf	___ftdiv@sign,w
  3900  01C0  1D03               	btfss	3,2
  3901  01C1  29C9               	goto	l1743
  3902  01C2  3000               	movlw	0
  3903  01C3  00B0               	movwf	?___ftdiv
  3904  01C4  3000               	movlw	0
  3905  01C5  00B1               	movwf	?___ftdiv+1
  3906  01C6  3000               	movlw	0
  3907  01C7  00B2               	movwf	?___ftdiv+2
  3908  01C8  0008               	return
  3909  01C9                     l1743:	
  3910  01C9  3000               	movlw	0
  3911  01CA  00BB               	movwf	___ftdiv@f3
  3912  01CB  3000               	movlw	0
  3913  01CC  00BC               	movwf	___ftdiv@f3+1
  3914  01CD  3000               	movlw	0
  3915  01CE  00BD               	movwf	___ftdiv@f3+2
  3916  01CF  3089               	movlw	137
  3917  01D0  073F               	addwf	___ftdiv@sign,w
  3918  01D1  00B6               	movwf	??___ftdiv
  3919  01D2  0836               	movf	??___ftdiv,w
  3920  01D3  02BE               	subwf	___ftdiv@exp,f
  3921  01D4  0833               	movf	___ftdiv@f1,w
  3922  01D5  00B6               	movwf	??___ftdiv
  3923  01D6  0834               	movf	___ftdiv@f1+1,w
  3924  01D7  00B7               	movwf	??___ftdiv+1
  3925  01D8  0835               	movf	___ftdiv@f1+2,w
  3926  01D9  00B8               	movwf	??___ftdiv+2
  3927  01DA  3010               	movlw	16
  3928  01DB                     u1265:	
  3929  01DB  36B8               	lsrf	??___ftdiv+2,f
  3930  01DC  0CB7               	rrf	??___ftdiv+1,f
  3931  01DD  0CB6               	rrf	??___ftdiv,f
  3932  01DE  0B89               	decfsz	9,f
  3933  01DF  29DB               	goto	u1265
  3934  01E0  0836               	movf	??___ftdiv,w
  3935  01E1  00B9               	movwf	??___ftdiv+3
  3936  01E2  0839               	movf	??___ftdiv+3,w
  3937  01E3  00BF               	movwf	___ftdiv@sign
  3938  01E4  0830               	movf	___ftdiv@f2,w
  3939  01E5  00B6               	movwf	??___ftdiv
  3940  01E6  0831               	movf	___ftdiv@f2+1,w
  3941  01E7  00B7               	movwf	??___ftdiv+1
  3942  01E8  0832               	movf	___ftdiv@f2+2,w
  3943  01E9  00B8               	movwf	??___ftdiv+2
  3944  01EA  3010               	movlw	16
  3945  01EB                     u1275:	
  3946  01EB  36B8               	lsrf	??___ftdiv+2,f
  3947  01EC  0CB7               	rrf	??___ftdiv+1,f
  3948  01ED  0CB6               	rrf	??___ftdiv,f
  3949  01EE  0B89               	decfsz	9,f
  3950  01EF  29EB               	goto	u1275
  3951  01F0  0836               	movf	??___ftdiv,w
  3952  01F1  00B9               	movwf	??___ftdiv+3
  3953  01F2  0839               	movf	??___ftdiv+3,w
  3954  01F3  06BF               	xorwf	___ftdiv@sign,f
  3955  01F4  3080               	movlw	128
  3956  01F5  00B6               	movwf	??___ftdiv
  3957  01F6  0836               	movf	??___ftdiv,w
  3958  01F7  05BF               	andwf	___ftdiv@sign,f
  3959  01F8  17B4               	bsf	___ftdiv@f1+1,7
  3960  01F9  30FF               	movlw	255
  3961  01FA  05B3               	andwf	___ftdiv@f1,f
  3962  01FB  30FF               	movlw	255
  3963  01FC  05B4               	andwf	___ftdiv@f1+1,f
  3964  01FD  3000               	movlw	0
  3965  01FE  05B5               	andwf	___ftdiv@f1+2,f
  3966  01FF  17B1               	bsf	___ftdiv@f2+1,7
  3967  0200  30FF               	movlw	255
  3968  0201  05B0               	andwf	___ftdiv@f2,f
  3969  0202  30FF               	movlw	255
  3970  0203  05B1               	andwf	___ftdiv@f2+1,f
  3971  0204  3000               	movlw	0
  3972  0205  05B2               	andwf	___ftdiv@f2+2,f
  3973  0206  3018               	movlw	24
  3974  0207  00B6               	movwf	??___ftdiv
  3975  0208  0836               	movf	??___ftdiv,w
  3976  0209  00BA               	movwf	___ftdiv@cntr
  3977  020A                     l1757:	
  3978  020A  3001               	movlw	1
  3979  020B                     u1285:	
  3980  020B  35BB               	lslf	___ftdiv@f3,f
  3981  020C  0DBC               	rlf	___ftdiv@f3+1,f
  3982  020D  0DBD               	rlf	___ftdiv@f3+2,f
  3983  020E  0B89               	decfsz	9,f
  3984  020F  2A0B               	goto	u1285
  3985  0210  0832               	movf	___ftdiv@f2+2,w
  3986  0211  0235               	subwf	___ftdiv@f1+2,w
  3987  0212  1D03               	skipz
  3988  0213  2A1A               	goto	u1295
  3989  0214  0831               	movf	___ftdiv@f2+1,w
  3990  0215  0234               	subwf	___ftdiv@f1+1,w
  3991  0216  1D03               	skipz
  3992  0217  2A1A               	goto	u1295
  3993  0218  0830               	movf	___ftdiv@f2,w
  3994  0219  0233               	subwf	___ftdiv@f1,w
  3995  021A                     u1295:	
  3996  021A  1C03               	skipc
  3997  021B  2A23               	goto	l1765
  3998  021C  0830               	movf	___ftdiv@f2,w
  3999  021D  02B3               	subwf	___ftdiv@f1,f
  4000  021E  0831               	movf	___ftdiv@f2+1,w
  4001  021F  3BB4               	subwfb	___ftdiv@f1+1,f
  4002  0220  0832               	movf	___ftdiv@f2+2,w
  4003  0221  3BB5               	subwfb	___ftdiv@f1+2,f
  4004  0222  143B               	bsf	___ftdiv@f3,0
  4005  0223                     l1765:	
  4006  0223  3001               	movlw	1
  4007  0224                     u1305:	
  4008  0224  35B3               	lslf	___ftdiv@f1,f
  4009  0225  0DB4               	rlf	___ftdiv@f1+1,f
  4010  0226  0DB5               	rlf	___ftdiv@f1+2,f
  4011  0227  0B89               	decfsz	9,f
  4012  0228  2A24               	goto	u1305
  4013  0229  3001               	movlw	1
  4014  022A  02BA               	subwf	___ftdiv@cntr,f
  4015  022B  1D03               	btfss	3,2
  4016  022C  2A0A               	goto	l1757
  4017  022D  083B               	movf	___ftdiv@f3,w
  4018  022E  00A0               	movwf	___ftpack@arg
  4019  022F  083C               	movf	___ftdiv@f3+1,w
  4020  0230  00A1               	movwf	___ftpack@arg+1
  4021  0231  083D               	movf	___ftdiv@f3+2,w
  4022  0232  00A2               	movwf	___ftpack@arg+2
  4023  0233  083E               	movf	___ftdiv@exp,w
  4024  0234  00B6               	movwf	??___ftdiv
  4025  0235  0836               	movf	??___ftdiv,w
  4026  0236  00A3               	movwf	___ftpack@exp
  4027  0237  083F               	movf	___ftdiv@sign,w
  4028  0238  00B7               	movwf	??___ftdiv+1
  4029  0239  0837               	movf	??___ftdiv+1,w
  4030  023A  00A4               	movwf	___ftpack@sign
  4031  023B  23DD               	fcall	___ftpack
  4032  023C  0020               	movlb	0	; select bank0
  4033  023D  0820               	movf	?___ftpack,w
  4034  023E  00B0               	movwf	?___ftdiv
  4035  023F  0821               	movf	?___ftpack+1,w
  4036  0240  00B1               	movwf	?___ftdiv+1
  4037  0241  0822               	movf	?___ftpack+2,w
  4038  0242  00B2               	movwf	?___ftdiv+2
  4039  0243  0008               	return
  4040  0244                     __end_of___ftdiv:	
  4041                           
  4042                           	psect	text22
  4043  04DF                     __ptext22:	
  4044 ;; *************** function ___altoft *****************
  4045 ;; Defined at:
  4046 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  c               4    8[BANK0 ] long 
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;  sign            1   15[BANK0 ] unsigned char 
  4051 ;;  exp             1   14[BANK0 ] unsigned char 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  3    8[BANK0 ] float 
  4054 ;; Registers used:
  4055 ;;		wreg, status,2, status,0, pclath, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMMON   BANK0   BANK1
  4061 ;;      Params:         0       4       0
  4062 ;;      Locals:         0       2       0
  4063 ;;      Temps:          0       2       0
  4064 ;;      Totals:         0       8       0
  4065 ;;Total ram usage:        8 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    3
  4068 ;; This function calls:
  4069 ;;		___ftpack
  4070 ;; This function is called by:
  4071 ;;		_loop
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           
  4076                           ;psect for function ___altoft
  4077  04DF                     ___altoft:	
  4078                           
  4079                           ;incstack = 0
  4080                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  4081  04DF  0020               	movlb	0	; select bank0
  4082  04E0  01AF               	clrf	___altoft@sign
  4083  04E1  308E               	movlw	142
  4084  04E2  00AC               	movwf	??___altoft
  4085  04E3  082C               	movf	??___altoft,w
  4086  04E4  00AE               	movwf	___altoft@exp
  4087  04E5  1FAB               	btfss	___altoft@c+3,7
  4088  04E6  2CF4               	goto	l1725
  4089  04E7  09A8               	comf	___altoft@c,f
  4090  04E8  09A9               	comf	___altoft@c+1,f
  4091  04E9  09AA               	comf	___altoft@c+2,f
  4092  04EA  09AB               	comf	___altoft@c+3,f
  4093  04EB  0AA8               	incf	___altoft@c,f
  4094  04EC  1903               	skipnz
  4095  04ED  0AA9               	incf	___altoft@c+1,f
  4096  04EE  1903               	skipnz
  4097  04EF  0AAA               	incf	___altoft@c+2,f
  4098  04F0  1903               	skipnz
  4099  04F1  0AAB               	incf	___altoft@c+3,f
  4100  04F2  01AF               	clrf	___altoft@sign
  4101  04F3  0AAF               	incf	___altoft@sign,f
  4102  04F4                     l1725:	
  4103  04F4  30FF               	movlw	255
  4104  04F5  052B               	andwf	___altoft@c+3,w
  4105  04F6  1903               	btfsc	3,2
  4106  04F7  2D04               	goto	l1727
  4107  04F8  3001               	movlw	1
  4108  04F9                     u1225:	
  4109  04F9  36AB               	lsrf	___altoft@c+3,f
  4110  04FA  0CAA               	rrf	___altoft@c+2,f
  4111  04FB  0CA9               	rrf	___altoft@c+1,f
  4112  04FC  0CA8               	rrf	___altoft@c,f
  4113  04FD  0B89               	decfsz	9,f
  4114  04FE  2CF9               	goto	u1225
  4115  04FF  3001               	movlw	1
  4116  0500  00AC               	movwf	??___altoft
  4117  0501  082C               	movf	??___altoft,w
  4118  0502  07AE               	addwf	___altoft@exp,f
  4119  0503  2CF4               	goto	l1725
  4120  0504                     l1727:	
  4121  0504  0828               	movf	___altoft@c,w
  4122  0505  00A0               	movwf	___ftpack@arg
  4123  0506  0829               	movf	___altoft@c+1,w
  4124  0507  00A1               	movwf	___ftpack@arg+1
  4125  0508  082A               	movf	___altoft@c+2,w
  4126  0509  00A2               	movwf	___ftpack@arg+2
  4127  050A  082E               	movf	___altoft@exp,w
  4128  050B  00AC               	movwf	??___altoft
  4129  050C  082C               	movf	??___altoft,w
  4130  050D  00A3               	movwf	___ftpack@exp
  4131  050E  082F               	movf	___altoft@sign,w
  4132  050F  00AD               	movwf	??___altoft+1
  4133  0510  082D               	movf	??___altoft+1,w
  4134  0511  00A4               	movwf	___ftpack@sign
  4135  0512  23DD               	fcall	___ftpack
  4136  0513  0020               	movlb	0	; select bank0
  4137  0514  0820               	movf	?___ftpack,w
  4138  0515  00A8               	movwf	?___altoft
  4139  0516  0821               	movf	?___ftpack+1,w
  4140  0517  00A9               	movwf	?___altoft+1
  4141  0518  0822               	movf	?___ftpack+2,w
  4142  0519  00AA               	movwf	?___altoft+2
  4143  051A  0008               	return
  4144  051B                     __end_of___altoft:	
  4145                           
  4146                           	psect	text23
  4147  03DD                     __ptext23:	
  4148 ;; *************** function ___ftpack *****************
  4149 ;; Defined at:
  4150 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;  arg             3    0[BANK0 ] unsigned um
  4153 ;;  exp             1    3[BANK0 ] unsigned char 
  4154 ;;  sign            1    4[BANK0 ] unsigned char 
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;		None
  4157 ;; Return value:  Size  Location     Type
  4158 ;;                  3    0[BANK0 ] float 
  4159 ;; Registers used:
  4160 ;;		wreg, status,2, status,0
  4161 ;; Tracked objects:
  4162 ;;		On entry : 0/0
  4163 ;;		On exit  : 0/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMMON   BANK0   BANK1
  4166 ;;      Params:         0       5       0
  4167 ;;      Locals:         0       0       0
  4168 ;;      Temps:          0       3       0
  4169 ;;      Totals:         0       8       0
  4170 ;;Total ram usage:        8 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; Hardware stack levels required when called:    2
  4173 ;; This function calls:
  4174 ;;		Nothing
  4175 ;; This function is called by:
  4176 ;;		___altoft
  4177 ;;		___ftdiv
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           
  4182                           ;psect for function ___ftpack
  4183  03DD                     ___ftpack:	
  4184                           
  4185                           ;incstack = 0
  4186                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4187  03DD  0020               	movlb	0	; select bank0
  4188  03DE  0823               	movf	___ftpack@exp,w
  4189  03DF  1903               	btfsc	3,2
  4190  03E0  2BE6               	goto	l1457
  4191  03E1  0822               	movf	___ftpack@arg+2,w
  4192  03E2  0421               	iorwf	___ftpack@arg+1,w
  4193  03E3  0420               	iorwf	___ftpack@arg,w
  4194  03E4  1D03               	skipz
  4195  03E5  2BF7               	goto	l1463
  4196  03E6                     l1457:	
  4197  03E6  3000               	movlw	0
  4198  03E7  00A0               	movwf	?___ftpack
  4199  03E8  3000               	movlw	0
  4200  03E9  00A1               	movwf	?___ftpack+1
  4201  03EA  3000               	movlw	0
  4202  03EB  00A2               	movwf	?___ftpack+2
  4203  03EC  0008               	return
  4204  03ED                     l1461:	
  4205  03ED  3001               	movlw	1
  4206  03EE  00A5               	movwf	??___ftpack
  4207  03EF  0825               	movf	??___ftpack,w
  4208  03F0  07A3               	addwf	___ftpack@exp,f
  4209  03F1  3001               	movlw	1
  4210  03F2                     u935:	
  4211  03F2  36A2               	lsrf	___ftpack@arg+2,f
  4212  03F3  0CA1               	rrf	___ftpack@arg+1,f
  4213  03F4  0CA0               	rrf	___ftpack@arg,f
  4214  03F5  0B89               	decfsz	9,f
  4215  03F6  2BF2               	goto	u935
  4216  03F7                     l1463:	
  4217  03F7  30FE               	movlw	254
  4218  03F8  0522               	andwf	___ftpack@arg+2,w
  4219  03F9  1903               	btfsc	3,2
  4220  03FA  2C10               	goto	l390
  4221  03FB  2BED               	goto	l1461
  4222  03FC                     l1465:	
  4223  03FC  3001               	movlw	1
  4224  03FD  00A5               	movwf	??___ftpack
  4225  03FE  0825               	movf	??___ftpack,w
  4226  03FF  07A3               	addwf	___ftpack@exp,f
  4227  0400  3001               	movlw	1
  4228  0401  07A0               	addwf	___ftpack@arg,f
  4229  0402  3000               	movlw	0
  4230  0403  1803               	skipnc
  4231  0404  3001               	movlw	1
  4232  0405  07A1               	addwf	___ftpack@arg+1,f
  4233  0406  3000               	movlw	0
  4234  0407  1803               	skipnc
  4235  0408  3001               	movlw	1
  4236  0409  07A2               	addwf	___ftpack@arg+2,f
  4237  040A  3001               	movlw	1
  4238  040B                     u955:	
  4239  040B  36A2               	lsrf	___ftpack@arg+2,f
  4240  040C  0CA1               	rrf	___ftpack@arg+1,f
  4241  040D  0CA0               	rrf	___ftpack@arg,f
  4242  040E  0B89               	decfsz	9,f
  4243  040F  2C0B               	goto	u955
  4244  0410                     l390:	
  4245  0410  30FF               	movlw	255
  4246  0411  0522               	andwf	___ftpack@arg+2,w
  4247  0412  1903               	btfsc	3,2
  4248  0413  2C1D               	goto	l1473
  4249  0414  2BFC               	goto	l1465
  4250  0415                     l1471:	
  4251  0415  3001               	movlw	1
  4252  0416  02A3               	subwf	___ftpack@exp,f
  4253  0417  3001               	movlw	1
  4254  0418                     u975:	
  4255  0418  35A0               	lslf	___ftpack@arg,f
  4256  0419  0DA1               	rlf	___ftpack@arg+1,f
  4257  041A  0DA2               	rlf	___ftpack@arg+2,f
  4258  041B  0B89               	decfsz	9,f
  4259  041C  2C18               	goto	u975
  4260  041D                     l1473:	
  4261  041D  1BA1               	btfsc	___ftpack@arg+1,7
  4262  041E  2C23               	goto	l397
  4263  041F  3002               	movlw	2
  4264  0420  0223               	subwf	___ftpack@exp,w
  4265  0421  1803               	skipnc
  4266  0422  2C15               	goto	l1471
  4267  0423                     l397:	
  4268  0423  1823               	btfsc	___ftpack@exp,0
  4269  0424  2C2B               	goto	l398
  4270  0425  30FF               	movlw	255
  4271  0426  05A0               	andwf	___ftpack@arg,f
  4272  0427  307F               	movlw	127
  4273  0428  05A1               	andwf	___ftpack@arg+1,f
  4274  0429  30FF               	movlw	255
  4275  042A  05A2               	andwf	___ftpack@arg+2,f
  4276  042B                     l398:	
  4277  042B  1003               	clrc
  4278  042C  0CA3               	rrf	___ftpack@exp,f
  4279  042D  0823               	movf	___ftpack@exp,w
  4280  042E  00A5               	movwf	??___ftpack
  4281  042F  01A6               	clrf	??___ftpack+1
  4282  0430  01A7               	clrf	??___ftpack+2
  4283  0431  3010               	movlw	16
  4284  0432                     u1015:	
  4285  0432  35A5               	lslf	??___ftpack,f
  4286  0433  0DA6               	rlf	??___ftpack+1,f
  4287  0434  0DA7               	rlf	??___ftpack+2,f
  4288  0435  0B89               	decfsz	9,f
  4289  0436  2C32               	goto	u1015
  4290  0437  0825               	movf	??___ftpack,w
  4291  0438  04A0               	iorwf	___ftpack@arg,f
  4292  0439  0826               	movf	??___ftpack+1,w
  4293  043A  04A1               	iorwf	___ftpack@arg+1,f
  4294  043B  0827               	movf	??___ftpack+2,w
  4295  043C  04A2               	iorwf	___ftpack@arg+2,f
  4296  043D  0824               	movf	___ftpack@sign,w
  4297  043E  1903               	btfsc	3,2
  4298  043F  0008               	return
  4299  0440  17A2               	bsf	___ftpack@arg+2,7
  4300  0441  0008               	return
  4301  0442                     __end_of___ftpack:	
  4302                           
  4303                           	psect	text24
  4304  035B                     __ptext24:	
  4305 ;; *************** function ___aldiv *****************
  4306 ;; Defined at:
  4307 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  divisor         4    0[BANK0 ] long 
  4310 ;;  dividend        4    4[BANK0 ] long 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;  quotient        4   11[BANK0 ] long 
  4313 ;;  sign            1   10[BANK0 ] unsigned char 
  4314 ;;  counter         1    9[BANK0 ] unsigned char 
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  4    0[BANK0 ] long 
  4317 ;; Registers used:
  4318 ;;		wreg, status,2, status,0
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMMON   BANK0   BANK1
  4324 ;;      Params:         0       8       0
  4325 ;;      Locals:         0       6       0
  4326 ;;      Temps:          0       1       0
  4327 ;;      Totals:         0      15       0
  4328 ;;Total ram usage:       15 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    2
  4331 ;; This function calls:
  4332 ;;		Nothing
  4333 ;; This function is called by:
  4334 ;;		_loop
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           
  4339                           ;psect for function ___aldiv
  4340  035B                     ___aldiv:	
  4341                           
  4342                           ;incstack = 0
  4343                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4344  035B  0020               	movlb	0	; select bank0
  4345  035C  01AA               	clrf	___aldiv@sign
  4346  035D  1FA3               	btfss	___aldiv@divisor+3,7
  4347  035E  2B6C               	goto	l284
  4348  035F  09A0               	comf	___aldiv@divisor,f
  4349  0360  09A1               	comf	___aldiv@divisor+1,f
  4350  0361  09A2               	comf	___aldiv@divisor+2,f
  4351  0362  09A3               	comf	___aldiv@divisor+3,f
  4352  0363  0AA0               	incf	___aldiv@divisor,f
  4353  0364  1903               	skipnz
  4354  0365  0AA1               	incf	___aldiv@divisor+1,f
  4355  0366  1903               	skipnz
  4356  0367  0AA2               	incf	___aldiv@divisor+2,f
  4357  0368  1903               	skipnz
  4358  0369  0AA3               	incf	___aldiv@divisor+3,f
  4359  036A  01AA               	clrf	___aldiv@sign
  4360  036B  0AAA               	incf	___aldiv@sign,f
  4361  036C                     l284:	
  4362  036C  1FA7               	btfss	___aldiv@dividend+3,7
  4363  036D  2B7D               	goto	l1685
  4364  036E  09A4               	comf	___aldiv@dividend,f
  4365  036F  09A5               	comf	___aldiv@dividend+1,f
  4366  0370  09A6               	comf	___aldiv@dividend+2,f
  4367  0371  09A7               	comf	___aldiv@dividend+3,f
  4368  0372  0AA4               	incf	___aldiv@dividend,f
  4369  0373  1903               	skipnz
  4370  0374  0AA5               	incf	___aldiv@dividend+1,f
  4371  0375  1903               	skipnz
  4372  0376  0AA6               	incf	___aldiv@dividend+2,f
  4373  0377  1903               	skipnz
  4374  0378  0AA7               	incf	___aldiv@dividend+3,f
  4375  0379  3001               	movlw	1
  4376  037A  00A8               	movwf	??___aldiv
  4377  037B  0828               	movf	??___aldiv,w
  4378  037C  06AA               	xorwf	___aldiv@sign,f
  4379  037D                     l1685:	
  4380  037D  3000               	movlw	0
  4381  037E  00AE               	movwf	___aldiv@quotient+3
  4382  037F  3000               	movlw	0
  4383  0380  00AD               	movwf	___aldiv@quotient+2
  4384  0381  3000               	movlw	0
  4385  0382  00AC               	movwf	___aldiv@quotient+1
  4386  0383  3000               	movlw	0
  4387  0384  00AB               	movwf	___aldiv@quotient
  4388  0385  0823               	movf	___aldiv@divisor+3,w
  4389  0386  0422               	iorwf	___aldiv@divisor+2,w
  4390  0387  0421               	iorwf	___aldiv@divisor+1,w
  4391  0388  0420               	iorwf	___aldiv@divisor,w
  4392  0389  1903               	skipnz
  4393  038A  2BC6               	goto	l1707
  4394  038B  01A9               	clrf	___aldiv@counter
  4395  038C  0AA9               	incf	___aldiv@counter,f
  4396  038D                     l1693:	
  4397  038D  1BA3               	btfsc	___aldiv@divisor+3,7
  4398  038E  2B9B               	goto	l1695
  4399  038F  3001               	movlw	1
  4400  0390                     u1145:	
  4401  0390  35A0               	lslf	___aldiv@divisor,f
  4402  0391  0DA1               	rlf	___aldiv@divisor+1,f
  4403  0392  0DA2               	rlf	___aldiv@divisor+2,f
  4404  0393  0DA3               	rlf	___aldiv@divisor+3,f
  4405  0394  0B89               	decfsz	9,f
  4406  0395  2B90               	goto	u1145
  4407  0396  3001               	movlw	1
  4408  0397  00A8               	movwf	??___aldiv
  4409  0398  0828               	movf	??___aldiv,w
  4410  0399  07A9               	addwf	___aldiv@counter,f
  4411  039A  2B8D               	goto	l1693
  4412  039B                     l1695:	
  4413  039B  3001               	movlw	1
  4414  039C                     u1165:	
  4415  039C  35AB               	lslf	___aldiv@quotient,f
  4416  039D  0DAC               	rlf	___aldiv@quotient+1,f
  4417  039E  0DAD               	rlf	___aldiv@quotient+2,f
  4418  039F  0DAE               	rlf	___aldiv@quotient+3,f
  4419  03A0  0B89               	decfsz	9,f
  4420  03A1  2B9C               	goto	u1165
  4421  03A2  0823               	movf	___aldiv@divisor+3,w
  4422  03A3  0227               	subwf	___aldiv@dividend+3,w
  4423  03A4  1D03               	skipz
  4424  03A5  2BB0               	goto	u1175
  4425  03A6  0822               	movf	___aldiv@divisor+2,w
  4426  03A7  0226               	subwf	___aldiv@dividend+2,w
  4427  03A8  1D03               	skipz
  4428  03A9  2BB0               	goto	u1175
  4429  03AA  0821               	movf	___aldiv@divisor+1,w
  4430  03AB  0225               	subwf	___aldiv@dividend+1,w
  4431  03AC  1D03               	skipz
  4432  03AD  2BB0               	goto	u1175
  4433  03AE  0820               	movf	___aldiv@divisor,w
  4434  03AF  0224               	subwf	___aldiv@dividend,w
  4435  03B0                     u1175:	
  4436  03B0  1C03               	skipc
  4437  03B1  2BBB               	goto	l1703
  4438  03B2  0820               	movf	___aldiv@divisor,w
  4439  03B3  02A4               	subwf	___aldiv@dividend,f
  4440  03B4  0821               	movf	___aldiv@divisor+1,w
  4441  03B5  3BA5               	subwfb	___aldiv@dividend+1,f
  4442  03B6  0822               	movf	___aldiv@divisor+2,w
  4443  03B7  3BA6               	subwfb	___aldiv@dividend+2,f
  4444  03B8  0823               	movf	___aldiv@divisor+3,w
  4445  03B9  3BA7               	subwfb	___aldiv@dividend+3,f
  4446  03BA  142B               	bsf	___aldiv@quotient,0
  4447  03BB                     l1703:	
  4448  03BB  3001               	movlw	1
  4449  03BC                     u1185:	
  4450  03BC  36A3               	lsrf	___aldiv@divisor+3,f
  4451  03BD  0CA2               	rrf	___aldiv@divisor+2,f
  4452  03BE  0CA1               	rrf	___aldiv@divisor+1,f
  4453  03BF  0CA0               	rrf	___aldiv@divisor,f
  4454  03C0  0B89               	decfsz	9,f
  4455  03C1  2BBC               	goto	u1185
  4456  03C2  3001               	movlw	1
  4457  03C3  02A9               	subwf	___aldiv@counter,f
  4458  03C4  1D03               	btfss	3,2
  4459  03C5  2B9B               	goto	l1695
  4460  03C6                     l1707:	
  4461  03C6  082A               	movf	___aldiv@sign,w
  4462  03C7  1903               	btfsc	3,2
  4463  03C8  2BD4               	goto	l1711
  4464  03C9  09AB               	comf	___aldiv@quotient,f
  4465  03CA  09AC               	comf	___aldiv@quotient+1,f
  4466  03CB  09AD               	comf	___aldiv@quotient+2,f
  4467  03CC  09AE               	comf	___aldiv@quotient+3,f
  4468  03CD  0AAB               	incf	___aldiv@quotient,f
  4469  03CE  1903               	skipnz
  4470  03CF  0AAC               	incf	___aldiv@quotient+1,f
  4471  03D0  1903               	skipnz
  4472  03D1  0AAD               	incf	___aldiv@quotient+2,f
  4473  03D2  1903               	skipnz
  4474  03D3  0AAE               	incf	___aldiv@quotient+3,f
  4475  03D4                     l1711:	
  4476  03D4  082E               	movf	___aldiv@quotient+3,w
  4477  03D5  00A3               	movwf	?___aldiv+3
  4478  03D6  082D               	movf	___aldiv@quotient+2,w
  4479  03D7  00A2               	movwf	?___aldiv+2
  4480  03D8  082C               	movf	___aldiv@quotient+1,w
  4481  03D9  00A1               	movwf	?___aldiv+1
  4482  03DA  082B               	movf	___aldiv@quotient,w
  4483  03DB  00A0               	movwf	?___aldiv
  4484  03DC  0008               	return
  4485  03DD                     __end_of___aldiv:	
  4486                           
  4487                           	psect	intentry
  4488  0004                     __pintentry:	
  4489 ;; *************** function _ISR *****************
  4490 ;; Defined at:
  4491 ;;		line 33 in file "main.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;		None
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;  result          2    5[COMMON] int 
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  1    wreg      void 
  4498 ;; Registers used:
  4499 ;;		wreg, status,2, status,0, pclath, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMMON   BANK0   BANK1
  4505 ;;      Params:         0       0       0
  4506 ;;      Locals:         2       0       0
  4507 ;;      Temps:          5       0       0
  4508 ;;      Totals:         7       0       0
  4509 ;;Total ram usage:        7 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    1
  4512 ;; This function calls:
  4513 ;;		_nrf24l01ISR
  4514 ;; This function is called by:
  4515 ;;		Interrupt level 1
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519  0004                     _ISR:	
  4520                           
  4521                           ;incstack = 0
  4522  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4523                           
  4524                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  4525  0005  3180               	pagesel	$
  4526  0006  0020               	movlb	0	; select bank0
  4527  0007  087F               	movf	127,w
  4528  0008  00F4               	movwf	??_ISR+4
  4529                           
  4530                           ;main.c: 35: if (PIR1bits.ADIF){
  4531  0009  1F11               	btfss	17,6	;volatile
  4532  000A  2843               	goto	i1l1943
  4533                           
  4534                           ;main.c: 37: if (mode == 100) {
  4535  000B  3064               	movlw	100
  4536  000C  0678               	xorwf	_mode,w
  4537  000D  1D03               	btfss	3,2
  4538  000E  2841               	goto	i1l1941
  4539                           
  4540                           ;main.c: 39: int result = 0x00;
  4541  000F  01F5               	clrf	ISR@result
  4542  0010  01F6               	clrf	ISR@result+1
  4543                           
  4544                           ;main.c: 40: result = ADRESL;
  4545  0011  0021               	movlb	1	; select bank1
  4546  0012  081B               	movf	27,w	;volatile
  4547  0013  00F0               	movwf	??_ISR
  4548  0014  01F1               	clrf	??_ISR+1
  4549  0015  0870               	movf	??_ISR,w
  4550  0016  00F5               	movwf	ISR@result
  4551  0017  0871               	movf	??_ISR+1,w
  4552  0018  00F6               	movwf	ISR@result+1
  4553                           
  4554                           ;main.c: 41: result|= (ADRESH << 8);
  4555  0019  081C               	movf	28,w	;volatile
  4556  001A  00F0               	movwf	??_ISR
  4557  001B  01F1               	clrf	??_ISR+1
  4558  001C  0870               	movf	??_ISR,w
  4559  001D  00F1               	movwf	??_ISR+1
  4560  001E  01F0               	clrf	??_ISR
  4561  001F  0870               	movf	??_ISR,w
  4562  0020  04F5               	iorwf	ISR@result,f
  4563  0021  0871               	movf	??_ISR+1,w
  4564  0022  04F6               	iorwf	ISR@result+1,f
  4565                           
  4566                           ;main.c: 43: adcSum+= result;
  4567  0023  0875               	movf	ISR@result,w
  4568  0024  00F0               	movwf	??_ISR
  4569  0025  0876               	movf	ISR@result+1,w
  4570  0026  00F1               	movwf	??_ISR+1
  4571  0027  3000               	movlw	0
  4572  0028  1BF1               	btfsc	??_ISR+1,7
  4573  0029  30FF               	movlw	255
  4574  002A  00F2               	movwf	??_ISR+2
  4575  002B  00F3               	movwf	??_ISR+3
  4576  002C  0870               	movf	??_ISR,w
  4577  002D  0020               	movlb	0	; select bank0
  4578  002E  07D2               	addwf	_adcSum,f
  4579  002F  0871               	movf	??_ISR+1,w
  4580  0030  3DD3               	addwfc	_adcSum+1,f
  4581  0031  0872               	movf	??_ISR+2,w
  4582  0032  3DD4               	addwfc	_adcSum+2,f
  4583  0033  0873               	movf	??_ISR+3,w
  4584  0034  3DD5               	addwfc	_adcSum+3,f
  4585                           
  4586                           ;main.c: 45: if (!adcLoop){
  4587  0035  0877               	movf	_adcLoop,w
  4588  0036  1D03               	btfss	3,2
  4589  0037  283D               	goto	i1l77
  4590                           
  4591                           ;main.c: 46: mode = 101;
  4592  0038  3065               	movlw	101
  4593  0039  00F0               	movwf	??_ISR
  4594  003A  0870               	movf	??_ISR,w
  4595  003B  00F8               	movwf	_mode
  4596                           
  4597                           ;main.c: 47: }else{
  4598  003C  283F               	goto	i1l1939
  4599  003D                     i1l77:	
  4600                           
  4601                           ;main.c: 49: ADCON0bits.ADGO = 1;
  4602  003D  0021               	movlb	1	; select bank1
  4603  003E  149D               	bsf	29,1	;volatile
  4604  003F                     i1l1939:	
  4605                           
  4606                           ;main.c: 50: }
  4607                           ;main.c: 52: adcLoop--;
  4608  003F  3001               	movlw	1
  4609  0040  02F7               	subwf	_adcLoop,f
  4610  0041                     i1l1941:	
  4611                           
  4612                           ;main.c: 53: }
  4613                           ;main.c: 56: PIR1bits.ADIF = 0;
  4614  0041  0020               	movlb	0	; select bank0
  4615  0042  1311               	bcf	17,6	;volatile
  4616  0043                     i1l1943:	
  4617                           
  4618                           ;main.c: 57: }
  4619                           ;main.c: 59: if (INTCONbits.INTF){
  4620  0043  1C8B               	btfss	11,1	;volatile
  4621  0044  2847               	goto	i1l80
  4622                           
  4623                           ;main.c: 60: nrf24l01ISR();
  4624  0045  26B8               	fcall	_nrf24l01ISR
  4625                           
  4626                           ;main.c: 61: INTCONbits.INTF = 0;
  4627  0046  108B               	bcf	11,1	;volatile
  4628  0047                     i1l80:	
  4629  0047  0874               	movf	??_ISR+4,w
  4630  0048  0020               	movlb	0	; select bank0
  4631  0049  00FF               	movwf	127
  4632  004A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4633  004B  0009               	retfie
  4634  004C                     __end_of_ISR:	
  4635                           
  4636                           	psect	text26
  4637  06B8                     __ptext26:	
  4638 ;; *************** function _nrf24l01ISR *****************
  4639 ;; Defined at:
  4640 ;;		line 17 in file "nrf24l01.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;		None
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;		None
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		None
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMMON   BANK0   BANK1
  4654 ;;      Params:         0       0       0
  4655 ;;      Locals:         0       0       0
  4656 ;;      Temps:          0       0       0
  4657 ;;      Totals:         0       0       0
  4658 ;;Total ram usage:        0 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; This function calls:
  4661 ;;		Nothing
  4662 ;; This function is called by:
  4663 ;;		_ISR
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           
  4668                           ;psect for function _nrf24l01ISR
  4669  06B8                     _nrf24l01ISR:	
  4670                           
  4671                           ;incstack = 0
  4672                           ; Regs used in _nrf24l01ISR: []
  4673  06B8  0008               	return
  4674  06B9                     __end_of_nrf24l01ISR:	
  4675  007E                     btemp	set	126	;btemp
  4676  007E                     int$flags	set	126
  4677  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    6
    Data        2
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80     50      65
    BANK1            32      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    sendString@string	PTR unsigned char  size(1) Largest target is 3
		 -> byte(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _nrf24l01InitRegisters->_nrf24l01Send
    _loop->___fttol
    _sendString->_nrf24l01SendByte
    _sendName->_read_flashmem
    _nrf24l01SendByte->_nrf24l01SPISend
    _nrf24l01SendStart->_nrf24l01SetTransmitMode
    _nrf24l01SetTransmitMode->_nrf24l01Send
    _nrf24l01Send->_nrf24l01SPISend
    _itoa->_utoa
    _utoa->___lwdiv
    ___fttol->___ftdiv
    ___ftdiv->___altoft
    ___altoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   11717
                                             49 BANK0      1     1      0
                               _loop
                       _nrf24l01Init
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1937
                                             13 BANK0      1     1      0
              _nrf24l01InitRegisters
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    1937
                                              4 BANK0      9     9      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 3     3      0    9780
                                             46 BANK0      3     3      0
                            ___aldiv
                           ___altoft
                            ___ftdiv
                            ___fttol
                               _itoa
                   _nrf24l01SendByte
                    _nrf24l01SendEnd
                  _nrf24l01SendStart
                           _sendName
                         _sendString
                           _startADC
 ---------------------------------------------------------------------------------
 (2) _startADC                                             2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _sendString                                           3     3      0     225
                                              2 BANK0      3     3      0
                   _nrf24l01SendByte
 ---------------------------------------------------------------------------------
 (2) _sendName                                             4     4      0     326
                                              6 BANK0      4     4      0
                   _nrf24l01SendByte
                      _read_flashmem
 ---------------------------------------------------------------------------------
 (3) _read_flashmem                                        6     4      2     131
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SendByte                                     1     1      0      62
                                              1 BANK0      1     1      0
                    _nrf24l01SPISend
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendStart                                    0     0      0    1689
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
            _nrf24l01SetTransmitMode
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetTransmitMode                              2     2      0    1658
                                              4 BANK0      2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01Send                                         3     2      1    1590
                                              1 BANK0      3     2      1
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SPISend                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendEnd                                      0     0      0       0
                     _nrf24l01SPIEnd
 ---------------------------------------------------------------------------------
 (4) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _itoa                                                 7     3      4    1644
                                             17 BANK0      7     3      4
                               _utoa
 ---------------------------------------------------------------------------------
 (3) _utoa                                                 9     5      4    1165
                                              8 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     287
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     316
                                             32 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2400
                                             16 BANK0     16    10      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    2194
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1992
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     812
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  7     7      0      25
                                              0 COMMON     7     7      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___aldiv
     ___altoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
     _nrf24l01SendByte
       _nrf24l01SPISend
     _nrf24l01SendEnd
       _nrf24l01SPIEnd
     _nrf24l01SendStart
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetTransmitMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
     _sendName
       _nrf24l01SendByte
         _nrf24l01SPISend
       _read_flashmem
     _sendString
       _nrf24l01SendByte
         _nrf24l01SPISend
     _startADC
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 _ISR (ROOT)
   _nrf24l01ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     32      41       6       81.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      4A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 25 14:10:08 2018

                     ___altoft@exp 002E                        __CFG_CP$OFF 0000  
                    ___altoft@sign 002F                nrf24l01Send@command 0023  
                      __CFG_LVP$ON 0000                                l102 0061  
                              l122 019B                                l167 067F  
                              l284 036C                                l390 0410  
                              l481 0341                                l397 0423  
                              l398 042B                                l496 0488  
                              _ISR 0004                                u805 0531  
                              u815 053B                                u825 0543  
                              u935 03F2                                u855 0588  
                              u785 0527                                u955 040B  
                              u875 0597                                u885 059E  
                              u975 0418                       __CFG_BORV$LO 0000  
                              wreg 0009                               ?_ISR 0070  
                     ___ftdiv@cntr 003A                       ___ftdiv@sign 003F  
                   ??_nrf24l01Init 002D                               l2025 0684  
                             l2201 0085                               l1411 059D  
                             l2211 009F                               l2203 008F  
                             l1405 0585                               l2221 00B8  
                             l1407 0591                               l1415 05A6  
                             l2223 00C1                               l2215 00A7  
                             l2207 0097                               l2225 00EA  
                             l2233 012A                               l2067 061A  
                             l2075 0639                               l2235 013B  
                             l2219 00AF                               l1461 03ED  
                             l1381 0524                               l2229 010E  
                             l1711 03D4                               l1703 03BB  
                             l1471 0415                               l1463 03F7  
                             l1383 0530                               l1473 041D  
                             l1465 03FC                               l1457 03E6  
                             l1393 054B                               l1545 0576  
                             l2257 0167                               l2265 0181  
                             l1707 03C6                               l1811 0352  
                             l1571 060C                               l2259 017A  
                             l2355 04DD                               l1725 04F4  
                             l1805 0338                               l1389 0542  
                             l2197 006E                               l1727 0504  
                             l1743 01C9                               l1807 0344  
                             l1487 0448                               l1737 01B3  
                             l1497 0464                     ??_nrf24l01Send 0022  
                             l1693 038D                               l1685 037D  
                             l1765 0223                               l1757 020A  
                             l1695 039B                               l1779 02ED  
                             l1797 031D                               l1799 032B  
                     __CFG_WDTE$ON 0000                               u1015 0432  
                             u1145 0390                               u1225 04F9  
                             u1305 0224                               u1165 039C  
                             u1175 03B0                               u1335 02F4  
                             u1185 03BC                               u1265 01DB  
                             u1275 01EB                               u1285 020B  
                             u1365 031E                               u1295 021A  
                             u1617 04AB                               u1395 0339  
                             u1627 05C2                               u1637 05CB  
                             u1647 024C                               u1657 0573  
                             u1667 0662                               u1677 069A  
                             u1687 068A                               u1697 069F  
                             i1l80 0047                               i1l77 003D  
                     __CFG_WRT$OFF 0000                      __p_NVMEM_text 07E0  
                             _main 049E                               _byte 005D  
                     ___ftpack@arg 0020                               _mode 0078  
                             _itoa 05F4                               _loop 005B  
                     ___ftpack@exp 0023                               fsr0h 0005  
                             fsr1h 0007                               indf0 0000  
                             fsr0l 0004                               indf1 0001  
                             fsr1l 0006                               btemp 007E  
                             _utoa 0442                      __CFG_BOREN$ON 0000  
                             start 004C           ?_nrf24l01SetTransmitMode 0070  
                            ??_ISR 0070                       ___fttol@exp1 004D  
                     ___fttol@lval 0049                    __end_of___aldiv 03DD  
                            ?_main 0070                              ?_itoa 0031  
                            ?_loop 0070                    __end_of___ftdiv 0244  
                            ?_utoa 0028                    __end_of___fttol 035B  
                  __end_of___lwdiv 0550                    __end_of___lwmod 05AB  
                            _NVMEM 07E0                      __CFG_PWRTE$ON 0000  
                    ___ftpack@sign 0024                              loop@i 0050  
                            utoa@c 002F                              utoa@v 002D  
                            status 0003                              wtemp0 007E  
                 _nrf24l01SPIStart 0697                     __CFG_MCLRE$OFF 0000  
                  __initialization 004D                       __end_of_main 04DF  
                     __end_of_itoa 0617                       __end_of_loop 019C  
                     __end_of_utoa 049E                     __CFG_LPBOR$OFF 0000  
                           ??_main 0051                      ___fttol@sign1 0048  
                           ??_itoa 0035                             ??_loop 004E  
                           ??_utoa 002C                   ??_nrf24l01SPIEnd 0020  
         __size_of_nrf24l01SPISend 000C                   _nrf24l01SendByte 06B0  
                 __end_of___altoft 051B                             _ADRESH 009C  
                           _ADRESL 009B                             _ANSELA 018C  
                           _ANSELC 018E                   __end_of___ftpack 0442  
                           i1l1941 0041                             i1l1943 0043  
                           i1l1939 003F                             _PMADRH 0192  
                           _PMADRL 0191                             _PMDATH 0194  
                           _PMDATL 0193                             _PMCON1 0195  
                           _PMCON2 0196           __size_of_nrf24l01SendEnd 000A  
             __size_of_nrf24l01ISR 0001                             _adcSum 0052  
                        ??___aldiv 0028                     __CFG_STVREN$ON 0000  
                        ??___ftdiv 0036                          ??___fttol 0044  
                        ??___lwdiv 0024                          ??___lwmod 0024  
                           _buffer 0057               __end_of_nrf24l01Init 05D1  
             __end_of_nrf24l01Send 067A              _nrf24l01InitRegisters 0244  
                           _status 0056                   __end_of_sendName 0636  
                           itoa@cp 0036                       __pdataCOMMON 0078  
                 __end_of_startADC 057E             __size_of_read_flashmem 0023  
          __end_of__initialization 0058                         ___altoft@c 0028  
                       ___ftdiv@f1 0033                         ___ftdiv@f2 0030  
                       ___ftdiv@f3 003B                      __end_of_NVMEM 0800  
                       ___fttol@f1 0040                     __pcstackCOMMON 0070  
                     __pidataBANK0 06B6      nrf24l01InitRegisters@enRXAddr 002A  
                   _OPTION_REGbits 0095                         __pbssBANK0 0052  
                ??_nrf24l01SPISend 0020                          ISR@result 0075  
                    _read_flashmem 05D1                         __pmaintext 049E  
                ??_nrf24l01SendEnd 0020             ?_nrf24l01InitRegisters 0070  
                       __pintentry 0004                          ?___altoft 0028  
              nrf24l01SPISend@data 0020                  _nrf24l01SendStart 0690  
                        ?___ftpack 0020                 ?_nrf24l01SendStart 0070  
            __end_of_n_ADDRESS_MUL 06B8   __size_of_nrf24l01SetTransmitMode 0016  
         __end_of_nrf24l01SPIStart 069E                            _SSP1BUF 0211  
                      sendString@i 0024                ??_nrf24l01SendStart 0026  
                        ?_sendName 0070                     ?_read_flashmem 0020  
            __size_of_nrf24l01Init 0026              __size_of_nrf24l01Send 0014  
                          ___aldiv 035B          __end_of_nrf24l01SendStart 0697  
         __end_of_nrf24l01SendByte 06B5                            _adcLoop 0077  
                        ?_startADC 0070                            ___ftdiv 019C  
                          ___fttol 02D4                            ___lwdiv 051B  
                          ___lwmod 057E                         ??___altoft 002C  
                       ??___ftpack 0025                            __ptext1 05AB  
                          __ptext2 0244                            __ptext3 005B  
                          __ptext4 0550                            __ptext5 0636  
                          __ptext6 0617                            __ptext7 05D1  
                          __ptext8 06B0                            __ptext9 0690  
                     __size_of_ISR 0048                   ___aldiv@dividend 0024  
                          clrloop0 06A6               end_of_initialization 0058  
                     _nrf24l01Init 05AB                       _nrf24l01Send 0666  
                       _sendString 0636                            itoa@buf 0037  
                          itoa@val 0031                         ??_sendName 0026  
                 ___aldiv@quotient 002B                         ??_startADC 0020  
                          utoa@buf 0030                            utoa@val 0028  
                        _PORTAbits 000C                   __CFG_FOSC$INTOSC 0000  
                        _TRISAbits 008C                          _TRISCbits 008E  
                 nrf24l01Send@data 0021                      ??_nrf24l01ISR 0070  
                      ___ftdiv@exp 003E                    ??_read_flashmem 0022  
       __size_of_nrf24l01SendStart 0007      nrf24l01SetTransmitMode@config 0025  
                    __pidataCOMMON 06B5            _nrf24l01SetTransmitMode 0650  
              start_initialization 004D                    _nrf24l01SPISend 067A  
                      __end_of_ISR 004C        nrf24l01SendByte@payloadByte 0021  
                      ?_sendString 0070            __size_of_nrf24l01SPIEnd 0007  
                  _nrf24l01SendEnd 0686            ??_nrf24l01InitRegisters 0024  
              __end_of_nrf24l01ISR 06B9                        __pdataBANK0 0060  
                __size_of___altoft 003C                  __size_of___ftpack 0065  
                      __pbssCOMMON 0077                          ___latbits 0000  
                    __pcstackBANK0 0020                  ?_nrf24l01SPIStart 0070  
               ??_nrf24l01SPIStart 0020                     sendName@offset 0028  
                     sendName@btye 0027                   ___lwdiv@dividend 0022  
                __size_of_sendName 001F                           ?___aldiv 0020  
                         ?___ftdiv 0030                           ?___fttol 0040  
                ?_nrf24l01SendByte 0070                           ?___lwdiv 0020  
        ??_nrf24l01SetTransmitMode 0024                           ?___lwmod 0020  
             __end_of_n_ADDRESS_P0 06B0            __end_of_nrf24l01SPISend 0686  
                    _NVMEM_absaddr 07E0                  __size_of_startADC 002E  
               ??_nrf24l01SendByte 0021          nrf24l01InitRegisters@enAA 002B  
              __size_of_sendString 001A            __end_of_nrf24l01SendEnd 0690  
                 ___lwdiv@quotient 0025                    ___aldiv@divisor 0020  
                  ___aldiv@counter 0029  nrf24l01InitRegisters@setupRetries 0026  
                      _nrf24l01ISR 06B8                          clear_ram0 06A5  
                         _PIE1bits 0091                           _PIR1bits 0011  
                       _ADCON0bits 009D                         _ADCON1bits 009E  
                         _WPUAbits 020C    __end_of_nrf24l01SetTransmitMode 0666  
                   _nrf24l01SPIEnd 069E                    startADC@channel 0021  
                 __size_of___aldiv 0082                   __size_of___ftdiv 00A8  
                         ___altoft 04DF                   __size_of___fttol 0087  
                 __size_of___lwdiv 0035                   __size_of___lwmod 002D  
                         ___ftpack 03DD                   ?_nrf24l01SPISend 0070  
                       _ANSELAbits 018C                         _ANSELCbits 018E  
                    _n_ADDRESS_MUL 06B7                    ___lwdiv@divisor 0020  
                  ___lwdiv@counter 0027                           __ptext10 0650  
                         __ptext11 0666                           __ptext20 02D4  
                         __ptext12 0697                           __ptext21 019C  
                         __ptext13 067A                           __ptext22 04DF  
                         __ptext14 0686                           __ptext23 03DD  
                         __ptext15 069E                           __ptext24 035B  
                         __ptext16 05F4                           __ptext17 0442  
                         __ptext26 06B8                           __ptext18 057E  
                         __ptext19 051B                   ?_nrf24l01SendEnd 0070  
           __end_of_nrf24l01SPIEnd 06A5                       ??_sendString 0022  
                    __size_of_main 0041                      __size_of_itoa 0023  
                    __size_of_loop 0141                      __size_of_utoa 005C  
     nrf24l01InitRegisters@feature 0027                           _nextMode 0060  
                         _sendName 0617              __end_of_read_flashmem 05F4  
     nrf24l01InitRegisters@rfSetup 0028                   sendString@string 0023  
   __size_of_nrf24l01InitRegisters 0090      __end_of_nrf24l01InitRegisters 02D4  
                         int$flags 007E                           _startADC 0550  
     nrf24l01InitRegisters@setupAW 0025                       _SSP1STATbits 0214  
               __end_of_sendString 0650                         _INTCONbits 000B  
                       _FVRCONbits 0117                           itoa@base 0033  
                  ?_nrf24l01SPIEnd 0070                           intlevel1 0000  
              read_flashmem@offset 0020                       _n_ADDRESS_P0 06AB  
              read_flashmem@result 0024                         _PMCON1bits 0195  
                 ___lwmod@dividend 0022                  __CFG_CLKOUTEN$OFF 0000  
      nrf24l01InitRegisters@config 0029                         _OSCCONbits 0099  
        __size_of_nrf24l01SPIStart 0007                      __pstringtext1 06AB  
                    __pstringtext2 06B7                           utoa@base 002A  
       nrf24l01InitRegisters@DynPD 002C                    ___lwmod@divisor 0020  
                  ___lwmod@counter 0025                       ___aldiv@sign 002A  
                      _SSPCON1bits 0215                         _WDTCONbits 0097  
        __size_of_nrf24l01SendByte 0005                      ?_nrf24l01Init 0070  
                    ?_nrf24l01Send 0021                         _STATUSbits 0003  
                     ?_nrf24l01ISR 0070  
