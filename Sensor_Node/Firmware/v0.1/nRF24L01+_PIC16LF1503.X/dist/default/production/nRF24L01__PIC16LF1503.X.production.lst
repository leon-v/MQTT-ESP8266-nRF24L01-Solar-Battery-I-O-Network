

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue May 29 15:34:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	_NVMEM_text,global,class=CODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     
    49                           ; Version 1.45
    50                           ; Generated 16/11/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC16LF1503 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0008                     	;# 
    92  0009                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  000E                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  008C                     	;# 
   110  008E                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  010C                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011D                     	;# 
   137  018C                     	;# 
   138  018E                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  020C                     	;# 
   148  0211                     	;# 
   149  0211                     	;# 
   150  0212                     	;# 
   151  0212                     	;# 
   152  0213                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0214                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0216                     	;# 
   160  0216                     	;# 
   161  0217                     	;# 
   162  0217                     	;# 
   163  0391                     	;# 
   164  0392                     	;# 
   165  0393                     	;# 
   166  0498                     	;# 
   167  0498                     	;# 
   168  0499                     	;# 
   169  049A                     	;# 
   170  049B                     	;# 
   171  049B                     	;# 
   172  049C                     	;# 
   173  049D                     	;# 
   174  049E                     	;# 
   175  049F                     	;# 
   176  0611                     	;# 
   177  0612                     	;# 
   178  0613                     	;# 
   179  0613                     	;# 
   180  0614                     	;# 
   181  0615                     	;# 
   182  0616                     	;# 
   183  0616                     	;# 
   184  0617                     	;# 
   185  0618                     	;# 
   186  0619                     	;# 
   187  0619                     	;# 
   188  061A                     	;# 
   189  061B                     	;# 
   190  061C                     	;# 
   191  061C                     	;# 
   192  0691                     	;# 
   193  0692                     	;# 
   194  0693                     	;# 
   195  0694                     	;# 
   196  0695                     	;# 
   197  0F0F                     	;# 
   198  0F10                     	;# 
   199  0F11                     	;# 
   200  0F12                     	;# 
   201  0F13                     	;# 
   202  0F14                     	;# 
   203  0F15                     	;# 
   204  0F16                     	;# 
   205  0F17                     	;# 
   206  0F18                     	;# 
   207  0F19                     	;# 
   208  0F1A                     	;# 
   209  0F1B                     	;# 
   210  0F1C                     	;# 
   211  0F1D                     	;# 
   212  0F1E                     	;# 
   213  0F1F                     	;# 
   214  0FE3                     	;# 
   215  0FE4                     	;# 
   216  0FE5                     	;# 
   217  0FE6                     	;# 
   218  0FE7                     	;# 
   219  0FE8                     	;# 
   220  0FE9                     	;# 
   221  0FEA                     	;# 
   222  0FEB                     	;# 
   223  0FED                     	;# 
   224  0FEE                     	;# 
   225  0FEF                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000E                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  008C                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0095                     	;# 
   258  0096                     	;# 
   259  0097                     	;# 
   260  0099                     	;# 
   261  009A                     	;# 
   262  009B                     	;# 
   263  009B                     	;# 
   264  009C                     	;# 
   265  009D                     	;# 
   266  009E                     	;# 
   267  009F                     	;# 
   268  010C                     	;# 
   269  010E                     	;# 
   270  0111                     	;# 
   271  0112                     	;# 
   272  0113                     	;# 
   273  0114                     	;# 
   274  0115                     	;# 
   275  0116                     	;# 
   276  0117                     	;# 
   277  0118                     	;# 
   278  0119                     	;# 
   279  011D                     	;# 
   280  018C                     	;# 
   281  018E                     	;# 
   282  0191                     	;# 
   283  0191                     	;# 
   284  0192                     	;# 
   285  0193                     	;# 
   286  0193                     	;# 
   287  0194                     	;# 
   288  0195                     	;# 
   289  0196                     	;# 
   290  020C                     	;# 
   291  0211                     	;# 
   292  0211                     	;# 
   293  0212                     	;# 
   294  0212                     	;# 
   295  0213                     	;# 
   296  0213                     	;# 
   297  0214                     	;# 
   298  0214                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0216                     	;# 
   303  0216                     	;# 
   304  0217                     	;# 
   305  0217                     	;# 
   306  0391                     	;# 
   307  0392                     	;# 
   308  0393                     	;# 
   309  0498                     	;# 
   310  0498                     	;# 
   311  0499                     	;# 
   312  049A                     	;# 
   313  049B                     	;# 
   314  049B                     	;# 
   315  049C                     	;# 
   316  049D                     	;# 
   317  049E                     	;# 
   318  049F                     	;# 
   319  0611                     	;# 
   320  0612                     	;# 
   321  0613                     	;# 
   322  0613                     	;# 
   323  0614                     	;# 
   324  0615                     	;# 
   325  0616                     	;# 
   326  0616                     	;# 
   327  0617                     	;# 
   328  0618                     	;# 
   329  0619                     	;# 
   330  0619                     	;# 
   331  061A                     	;# 
   332  061B                     	;# 
   333  061C                     	;# 
   334  061C                     	;# 
   335  0691                     	;# 
   336  0692                     	;# 
   337  0693                     	;# 
   338  0694                     	;# 
   339  0695                     	;# 
   340  0F0F                     	;# 
   341  0F10                     	;# 
   342  0F11                     	;# 
   343  0F12                     	;# 
   344  0F13                     	;# 
   345  0F14                     	;# 
   346  0F15                     	;# 
   347  0F16                     	;# 
   348  0F17                     	;# 
   349  0F18                     	;# 
   350  0F19                     	;# 
   351  0F1A                     	;# 
   352  0F1B                     	;# 
   353  0F1C                     	;# 
   354  0F1D                     	;# 
   355  0F1E                     	;# 
   356  0F1F                     	;# 
   357  0FE3                     	;# 
   358  0FE4                     	;# 
   359  0FE5                     	;# 
   360  0FE6                     	;# 
   361  0FE7                     	;# 
   362  0FE8                     	;# 
   363  0FE9                     	;# 
   364  0FEA                     	;# 
   365  0FEB                     	;# 
   366  0FED                     	;# 
   367  0FEE                     	;# 
   368  0FEF                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000E                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0015                     	;# 
   387  0016                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001C                     	;# 
   395  008C                     	;# 
   396  008E                     	;# 
   397  0091                     	;# 
   398  0092                     	;# 
   399  0093                     	;# 
   400  0095                     	;# 
   401  0096                     	;# 
   402  0097                     	;# 
   403  0099                     	;# 
   404  009A                     	;# 
   405  009B                     	;# 
   406  009B                     	;# 
   407  009C                     	;# 
   408  009D                     	;# 
   409  009E                     	;# 
   410  009F                     	;# 
   411  010C                     	;# 
   412  010E                     	;# 
   413  0111                     	;# 
   414  0112                     	;# 
   415  0113                     	;# 
   416  0114                     	;# 
   417  0115                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  0118                     	;# 
   421  0119                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018E                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  020C                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0391                     	;# 
   450  0392                     	;# 
   451  0393                     	;# 
   452  0498                     	;# 
   453  0498                     	;# 
   454  0499                     	;# 
   455  049A                     	;# 
   456  049B                     	;# 
   457  049B                     	;# 
   458  049C                     	;# 
   459  049D                     	;# 
   460  049E                     	;# 
   461  049F                     	;# 
   462  0611                     	;# 
   463  0612                     	;# 
   464  0613                     	;# 
   465  0613                     	;# 
   466  0614                     	;# 
   467  0615                     	;# 
   468  0616                     	;# 
   469  0616                     	;# 
   470  0617                     	;# 
   471  0618                     	;# 
   472  0619                     	;# 
   473  0619                     	;# 
   474  061A                     	;# 
   475  061B                     	;# 
   476  061C                     	;# 
   477  061C                     	;# 
   478  0691                     	;# 
   479  0692                     	;# 
   480  0693                     	;# 
   481  0694                     	;# 
   482  0695                     	;# 
   483  0F0F                     	;# 
   484  0F10                     	;# 
   485  0F11                     	;# 
   486  0F12                     	;# 
   487  0F13                     	;# 
   488  0F14                     	;# 
   489  0F15                     	;# 
   490  0F16                     	;# 
   491  0F17                     	;# 
   492  0F18                     	;# 
   493  0F19                     	;# 
   494  0F1A                     	;# 
   495  0F1B                     	;# 
   496  0F1C                     	;# 
   497  0F1D                     	;# 
   498  0F1E                     	;# 
   499  0F1F                     	;# 
   500  0FE3                     	;# 
   501  0FE4                     	;# 
   502  0FE5                     	;# 
   503  0FE6                     	;# 
   504  0FE7                     	;# 
   505  0FE8                     	;# 
   506  0FE9                     	;# 
   507  0FEA                     	;# 
   508  0FEB                     	;# 
   509  0FED                     	;# 
   510  0FEE                     	;# 
   511  0FEF                     	;# 
   512  0000                     	;# 
   513  0001                     	;# 
   514  0002                     	;# 
   515  0003                     	;# 
   516  0004                     	;# 
   517  0005                     	;# 
   518  0006                     	;# 
   519  0007                     	;# 
   520  0008                     	;# 
   521  0009                     	;# 
   522  000A                     	;# 
   523  000B                     	;# 
   524  000C                     	;# 
   525  000E                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0013                     	;# 
   529  0015                     	;# 
   530  0016                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001C                     	;# 
   538  008C                     	;# 
   539  008E                     	;# 
   540  0091                     	;# 
   541  0092                     	;# 
   542  0093                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  009F                     	;# 
   554  010C                     	;# 
   555  010E                     	;# 
   556  0111                     	;# 
   557  0112                     	;# 
   558  0113                     	;# 
   559  0114                     	;# 
   560  0115                     	;# 
   561  0116                     	;# 
   562  0117                     	;# 
   563  0118                     	;# 
   564  0119                     	;# 
   565  011D                     	;# 
   566  018C                     	;# 
   567  018E                     	;# 
   568  0191                     	;# 
   569  0191                     	;# 
   570  0192                     	;# 
   571  0193                     	;# 
   572  0193                     	;# 
   573  0194                     	;# 
   574  0195                     	;# 
   575  0196                     	;# 
   576  020C                     	;# 
   577  0211                     	;# 
   578  0211                     	;# 
   579  0212                     	;# 
   580  0212                     	;# 
   581  0213                     	;# 
   582  0213                     	;# 
   583  0214                     	;# 
   584  0214                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0216                     	;# 
   589  0216                     	;# 
   590  0217                     	;# 
   591  0217                     	;# 
   592  0391                     	;# 
   593  0392                     	;# 
   594  0393                     	;# 
   595  0498                     	;# 
   596  0498                     	;# 
   597  0499                     	;# 
   598  049A                     	;# 
   599  049B                     	;# 
   600  049B                     	;# 
   601  049C                     	;# 
   602  049D                     	;# 
   603  049E                     	;# 
   604  049F                     	;# 
   605  0611                     	;# 
   606  0612                     	;# 
   607  0613                     	;# 
   608  0613                     	;# 
   609  0614                     	;# 
   610  0615                     	;# 
   611  0616                     	;# 
   612  0616                     	;# 
   613  0617                     	;# 
   614  0618                     	;# 
   615  0619                     	;# 
   616  0619                     	;# 
   617  061A                     	;# 
   618  061B                     	;# 
   619  061C                     	;# 
   620  061C                     	;# 
   621  0691                     	;# 
   622  0692                     	;# 
   623  0693                     	;# 
   624  0694                     	;# 
   625  0695                     	;# 
   626  0F0F                     	;# 
   627  0F10                     	;# 
   628  0F11                     	;# 
   629  0F12                     	;# 
   630  0F13                     	;# 
   631  0F14                     	;# 
   632  0F15                     	;# 
   633  0F16                     	;# 
   634  0F17                     	;# 
   635  0F18                     	;# 
   636  0F19                     	;# 
   637  0F1A                     	;# 
   638  0F1B                     	;# 
   639  0F1C                     	;# 
   640  0F1D                     	;# 
   641  0F1E                     	;# 
   642  0F1F                     	;# 
   643  0FE3                     	;# 
   644  0FE4                     	;# 
   645  0FE5                     	;# 
   646  0FE6                     	;# 
   647  0FE7                     	;# 
   648  0FE8                     	;# 
   649  0FE9                     	;# 
   650  0FEA                     	;# 
   651  0FEB                     	;# 
   652  0FED                     	;# 
   653  0FEE                     	;# 
   654  0FEF                     	;# 
   655                           
   656                           	psect	idataCOMMON
   657  0729                     __pidataCOMMON:	
   658                           
   659                           ;initializer for _mode
   660  0729  340A               	retlw	10
   661                           
   662                           	psect	idataBANK0
   663  072A                     __pidataBANK0:	
   664                           
   665                           ;initializer for _nextMode
   666  072A  340A               	retlw	10
   667  07E0                     _NVMEM_absaddr	set	2016
   668                           
   669                           	psect	stringtext1
   670  071A                     __pstringtext1:	
   671  071A                     _n_ADDRESS_P0:	
   672  071A  34AD               	retlw	173
   673  071B  3487               	retlw	135
   674  071C  3466               	retlw	102
   675  071D  34BC               	retlw	188
   676  071E  34BB               	retlw	187
   677  071F                     __end_of_n_ADDRESS_P0:	
   678                           
   679                           	psect	stringtext2
   680  072B                     __pstringtext2:	
   681  072B                     _n_ADDRESS_MUL:	
   682  072B  3421               	retlw	33
   683  072C                     __end_of_n_ADDRESS_MUL:	
   684  07E0                     _NVMEM_absaddr	set	2016
   685                           
   686                           	psect	_NVMEM_text
   687  07E0                     __p_NVMEM_text:	
   688  07E0                     _NVMEM:	
   689  07E0  3455               	retlw	85
   690  07E1  346E               	retlw	110
   691  07E2  3463               	retlw	99
   692  07E3  346F               	retlw	111
   693  07E4  346E               	retlw	110
   694  07E5  3466               	retlw	102
   695  07E6  3469               	retlw	105
   696  07E7  3467               	retlw	103
   697  07E8  3475               	retlw	117
   698  07E9  3472               	retlw	114
   699  07EA  3465               	retlw	101
   700  07EB  3464               	retlw	100
   701  07EC  3431               	retlw	49
   702  07ED  3400               	retlw	0
   703  07EE  3400               	retlw	0
   704  07EF  3400               	retlw	0
   705  07F0  3401               	retlw	1
   706  07F1  3400               	retlw	0
   707  07F2  3400               	retlw	0
   708  07F3  3400               	retlw	0
   709  07F4  3400               	retlw	0
   710  07F5  3400               	retlw	0
   711  07F6  3400               	retlw	0
   712  07F7  3400               	retlw	0
   713  07F8  3400               	retlw	0
   714  07F9  3400               	retlw	0
   715  07FA  3400               	retlw	0
   716  07FB  3400               	retlw	0
   717  07FC  3400               	retlw	0
   718  07FD  3400               	retlw	0
   719  07FE  3400               	retlw	0
   720  07FF  3400               	retlw	0
   721  0800                     __end_of_NVMEM:	
   722  000C                     _PORTAbits	set	12
   723  0003                     _STATUSbits	set	3
   724  000B                     _INTCONbits	set	11
   725  0011                     _PIR1bits	set	17
   726  0097                     _WDTCONbits	set	151
   727  0091                     _PIE1bits	set	145
   728  009E                     _ADCON1bits	set	158
   729  008E                     _TRISCbits	set	142
   730  008C                     _TRISAbits	set	140
   731  0095                     _OPTION_REGbits	set	149
   732  0099                     _OSCCONbits	set	153
   733  009D                     _ADCON0bits	set	157
   734  009C                     _ADRESH	set	156
   735  009B                     _ADRESL	set	155
   736  0117                     _FVRCONbits	set	279
   737  0194                     _PMDATH	set	404
   738  0193                     _PMDATL	set	403
   739  0196                     _PMCON2	set	406
   740  0195                     _PMCON1bits	set	405
   741  0192                     _PMADRH	set	402
   742  0191                     _PMADRL	set	401
   743  0195                     _PMCON1	set	405
   744  018E                     _ANSELC	set	398
   745  018C                     _ANSELA	set	396
   746  018E                     _ANSELCbits	set	398
   747  018C                     _ANSELAbits	set	396
   748  0215                     _SSPCON1bits	set	533
   749  0214                     _SSP1STATbits	set	532
   750  0211                     _SSP1BUF	set	529
   751  020C                     _WPUAbits	set	524
   752                           
   753                           	psect	stringtext3
   754  06FF                     __pstringtext3:	
   755  06FF                     STR_1:	
   756  06FF  342F               	retlw	47	;'/'
   757  0700  3442               	retlw	66	;'B'
   758  0701  344F               	retlw	79	;'O'
   759  0702  344F               	retlw	79	;'O'
   760  0703  3454               	retlw	84	;'T'
   761  0704  342F               	retlw	47	;'/'
   762  0705  3400               	retlw	0
   763                           
   764                           	psect	stringtext4
   765  071F                     __pstringtext4:	
   766  071F                     STR_2:	
   767  071F  342F               	retlw	47	;'/'
   768  0720  3441               	retlw	65	;'A'
   769  0721  3444               	retlw	68	;'D'
   770  0722  3443               	retlw	67	;'C'
   771  0723  3400               	retlw	0
   772                           
   773                           	psect	stringtext5
   774  0000                     __pstringtext5:	
   775  0704                     
   776                           ; #config settings
   777  0000                     
   778                           	psect	cinit
   779  0055                     start_initialization:	
   780  0055                     __initialization:	
   781                           
   782                           ; Initialize objects allocated to COMMON
   783  0055  2729               	fcall	__pidataCOMMON	;fetch initializer
   784  0056  00FD               	movwf	__pdataCOMMON& (0+127)
   785                           
   786                           ; Initialize objects allocated to BANK0
   787  0057  272A               	fcall	__pidataBANK0	;fetch initializer
   788  0058  00E3               	movwf	__pdataBANK0& (0+127)
   789                           
   790                           ; Clear objects allocated to COMMON
   791  0059  01FC               	clrf	__pbssCOMMON& (0+127)
   792                           
   793                           ; Clear objects allocated to BANK0
   794  005A  3053               	movlw	low __pbssBANK0
   795  005B  0084               	movwf	4
   796  005C  3000               	movlw	high __pbssBANK0
   797  005D  0085               	movwf	5
   798  005E  3010               	movlw	16
   799  005F  2714               	fcall	clear_ram0
   800  0060                     end_of_initialization:	
   801                           ;End of C runtime variable initialization code
   802                           
   803  0060                     __end_of__initialization:	
   804  0060  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   805  0061  0020               	movlb	0
   806  0062  2C9E               	ljmp	_main	;jump to C main() function
   807                           
   808                           	psect	bssCOMMON
   809  007C                     __pbssCOMMON:	
   810  007C                     _status:	
   811  007C                     	ds	1
   812                           
   813                           	psect	dataCOMMON
   814  007D                     __pdataCOMMON:	
   815  007D                     _mode:	
   816  007D                     	ds	1
   817                           
   818                           	psect	bssBANK0
   819  0053                     __pbssBANK0:	
   820  0053                     _adcSum:	
   821  0053                     	ds	4
   822  0057                     _intCount:	
   823  0057                     	ds	2
   824  0059                     _adcLoop:	
   825  0059                     	ds	1
   826  005A                     _buffer:	
   827  005A                     	ds	6
   828  0060                     _byte:	
   829  0060                     	ds	3
   830                           
   831                           	psect	dataBANK0
   832  0063                     __pdataBANK0:	
   833  0063                     _nextMode:	
   834  0063                     	ds	1
   835                           
   836                           	psect	clrtext
   837  0714                     clear_ram0:	
   838                           ;	Called with FSR0 containing the base address, and
   839                           ;	WREG with the size to clear
   840                           
   841  0714  0064               	clrwdt	;clear the watchdog before getting into this loop
   842  0715                     clrloop0:	
   843  0715  0180               	clrf	0	;clear RAM location pointed to by FSR
   844  0716  3101               	addfsr 0,1
   845  0717  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   846  0718  2F15               	goto	clrloop0	;have we reached the end yet?
   847  0719  3400               	retlw	0	;all done for this memory range, return
   848                           
   849                           	psect	cstackCOMMON
   850  0070                     __pcstackCOMMON:	
   851  0070                     ?_nrf24l01ISR:	
   852  0070                     ?_nrf24l01SendStart:	
   853                           ; 1 bytes @ 0x0
   854                           
   855  0070                     ?_nrf24l01SendFlash:	
   856                           ; 1 bytes @ 0x0
   857                           
   858  0070                     ?_nrf24l01SendEnd:	
   859                           ; 1 bytes @ 0x0
   860                           
   861  0070                     ?_nrf24l01Init:	
   862                           ; 1 bytes @ 0x0
   863                           
   864  0070                     ?_ISR:	
   865                           ; 1 bytes @ 0x0
   866                           
   867  0070                     ?_startADC:	
   868                           ; 1 bytes @ 0x0
   869                           
   870  0070                     ?_loop:	
   871                           ; 1 bytes @ 0x0
   872                           
   873  0070                     ?_main:	
   874                           ; 1 bytes @ 0x0
   875                           
   876  0070                     ?_nrf24l01SPIStart:	
   877                           ; 1 bytes @ 0x0
   878                           
   879  0070                     ??_nrf24l01SPIStart:	
   880                           ; 1 bytes @ 0x0
   881                           
   882  0070                     ?_nrf24l01SPISend:	
   883                           ; 1 bytes @ 0x0
   884                           
   885  0070                     ??_nrf24l01SPISend:	
   886                           ; 1 bytes @ 0x0
   887                           
   888  0070                     ?_nrf24l01SPIEnd:	
   889                           ; 1 bytes @ 0x0
   890                           
   891  0070                     ??_nrf24l01SPIEnd:	
   892                           ; 1 bytes @ 0x0
   893                           
   894  0070                     ?_nrf24l01SetTransmitMode:	
   895                           ; 1 bytes @ 0x0
   896                           
   897  0070                     ?_nrf24l01InitRegisters:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0070                     nrf24l01SPISend@data:	
   901                           ; 1 bytes @ 0x0
   902                           
   903                           
   904                           ; 1 bytes @ 0x0
   905  0070                     	ds	1
   906  0071                     ?_nrf24l01Send:	
   907  0071                     nrf24l01Send@data:	
   908                           ; 1 bytes @ 0x1
   909                           
   910                           
   911                           ; 1 bytes @ 0x1
   912  0071                     	ds	1
   913  0072                     ??_nrf24l01Send:	
   914                           
   915                           ; 1 bytes @ 0x2
   916  0072                     	ds	1
   917  0073                     nrf24l01Send@command:	
   918                           
   919                           ; 1 bytes @ 0x3
   920  0073                     	ds	1
   921  0074                     ??_nrf24l01ISR:	
   922                           
   923                           ; 1 bytes @ 0x4
   924  0074                     	ds	1
   925  0075                     ??_ISR:	
   926                           
   927                           ; 1 bytes @ 0x5
   928  0075                     	ds	5
   929  007A                     ISR@result:	
   930                           
   931                           ; 2 bytes @ 0xA
   932  007A                     	ds	2
   933                           
   934                           	psect	cstackBANK0
   935  0020                     __pcstackBANK0:	
   936  0020                     ?_nrf24l01SendString:	
   937  0020                     ??_nrf24l01SendEnd:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0020                     ?_write_flashmem:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0020                     ??_startADC:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0020                     ??_nrf24l01SetTransmitMode:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0020                     ??_nrf24l01InitRegisters:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0020                     ?_read_flashmem:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0020                     ?___lwdiv:	
   956                           ; 2 bytes @ 0x0
   957                           
   958  0020                     ?___lwmod:	
   959                           ; 2 bytes @ 0x0
   960                           
   961  0020                     ?___ftpack:	
   962                           ; 2 bytes @ 0x0
   963                           
   964  0020                     ?___aldiv:	
   965                           ; 3 bytes @ 0x0
   966                           
   967  0020                     nrf24l01SendString@string:	
   968                           ; 4 bytes @ 0x0
   969                           
   970  0020                     write_flashmem@offset:	
   971                           ; 2 bytes @ 0x0
   972                           
   973  0020                     read_flashmem@offset:	
   974                           ; 2 bytes @ 0x0
   975                           
   976  0020                     ___lwdiv@divisor:	
   977                           ; 2 bytes @ 0x0
   978                           
   979  0020                     ___lwmod@divisor:	
   980                           ; 2 bytes @ 0x0
   981                           
   982  0020                     ___ftpack@arg:	
   983                           ; 2 bytes @ 0x0
   984                           
   985  0020                     ___aldiv@divisor:	
   986                           ; 3 bytes @ 0x0
   987                           
   988                           
   989                           ; 4 bytes @ 0x0
   990  0020                     	ds	1
   991  0021                     startADC@channel:	
   992  0021                     nrf24l01SetTransmitMode@config:	
   993                           ; 1 bytes @ 0x1
   994                           
   995  0021                     nrf24l01InitRegisters@setupAW:	
   996                           ; 1 bytes @ 0x1
   997                           
   998                           
   999                           ; 1 bytes @ 0x1
  1000  0021                     	ds	1
  1001  0022                     ??_read_flashmem:	
  1002  0022                     ??_nrf24l01SendStart:	
  1003                           ; 1 bytes @ 0x2
  1004                           
  1005  0022                     ??_nrf24l01SendString:	
  1006                           ; 1 bytes @ 0x2
  1007                           
  1008  0022                     nrf24l01InitRegisters@setupRetries:	
  1009                           ; 1 bytes @ 0x2
  1010                           
  1011  0022                     write_flashmem@data:	
  1012                           ; 1 bytes @ 0x2
  1013                           
  1014  0022                     ___lwdiv@dividend:	
  1015                           ; 2 bytes @ 0x2
  1016                           
  1017  0022                     ___lwmod@dividend:	
  1018                           ; 2 bytes @ 0x2
  1019                           
  1020                           
  1021                           ; 2 bytes @ 0x2
  1022  0022                     	ds	1
  1023  0023                     nrf24l01InitRegisters@feature:	
  1024  0023                     ___ftpack@exp:	
  1025                           ; 1 bytes @ 0x3
  1026                           
  1027                           
  1028                           ; 1 bytes @ 0x3
  1029  0023                     	ds	1
  1030  0024                     ??_write_flashmem:	
  1031  0024                     ??___lwdiv:	
  1032                           ; 1 bytes @ 0x4
  1033                           
  1034  0024                     ??___lwmod:	
  1035                           ; 1 bytes @ 0x4
  1036                           
  1037  0024                     nrf24l01InitRegisters@rfSetup:	
  1038                           ; 1 bytes @ 0x4
  1039                           
  1040  0024                     ___ftpack@sign:	
  1041                           ; 1 bytes @ 0x4
  1042                           
  1043  0024                     read_flashmem@result:	
  1044                           ; 1 bytes @ 0x4
  1045                           
  1046  0024                     ___aldiv@dividend:	
  1047                           ; 2 bytes @ 0x4
  1048                           
  1049                           
  1050                           ; 4 bytes @ 0x4
  1051  0024                     	ds	1
  1052  0025                     ??___ftpack:	
  1053  0025                     nrf24l01SendString@i:	
  1054                           ; 1 bytes @ 0x5
  1055                           
  1056  0025                     nrf24l01InitRegisters@config:	
  1057                           ; 1 bytes @ 0x5
  1058                           
  1059  0025                     ___lwmod@counter:	
  1060                           ; 1 bytes @ 0x5
  1061                           
  1062  0025                     ___lwdiv@quotient:	
  1063                           ; 1 bytes @ 0x5
  1064                           
  1065                           
  1066                           ; 2 bytes @ 0x5
  1067  0025                     	ds	1
  1068  0026                     ??_nrf24l01SendFlash:	
  1069  0026                     nrf24l01InitRegisters@enRXAddr:	
  1070                           ; 1 bytes @ 0x6
  1071                           
  1072                           
  1073                           ; 1 bytes @ 0x6
  1074  0026                     	ds	1
  1075  0027                     nrf24l01SendFlash@offset:	
  1076  0027                     nrf24l01InitRegisters@DynPD:	
  1077                           ; 1 bytes @ 0x7
  1078                           
  1079  0027                     ___lwdiv@counter:	
  1080                           ; 1 bytes @ 0x7
  1081                           
  1082                           
  1083                           ; 1 bytes @ 0x7
  1084  0027                     	ds	1
  1085  0028                     ??_nrf24l01Init:	
  1086  0028                     ?_utoa:	
  1087                           ; 1 bytes @ 0x8
  1088                           
  1089  0028                     ??___aldiv:	
  1090                           ; 1 bytes @ 0x8
  1091                           
  1092  0028                     ?___altoft:	
  1093                           ; 1 bytes @ 0x8
  1094                           
  1095  0028                     nrf24l01SendFlash@i:	
  1096                           ; 3 bytes @ 0x8
  1097                           
  1098  0028                     utoa@val:	
  1099                           ; 1 bytes @ 0x8
  1100                           
  1101  0028                     ___altoft@c:	
  1102                           ; 2 bytes @ 0x8
  1103                           
  1104                           
  1105                           ; 4 bytes @ 0x8
  1106  0028                     	ds	1
  1107  0029                     nrf24l01SendFlash@btye:	
  1108  0029                     ___aldiv@counter:	
  1109                           ; 1 bytes @ 0x9
  1110                           
  1111                           
  1112                           ; 1 bytes @ 0x9
  1113  0029                     	ds	1
  1114  002A                     ___aldiv@sign:	
  1115  002A                     utoa@base:	
  1116                           ; 1 bytes @ 0xA
  1117                           
  1118                           
  1119                           ; 2 bytes @ 0xA
  1120  002A                     	ds	1
  1121  002B                     ___aldiv@quotient:	
  1122                           
  1123                           ; 4 bytes @ 0xB
  1124  002B                     	ds	1
  1125  002C                     ??_utoa:	
  1126  002C                     ??___altoft:	
  1127                           ; 1 bytes @ 0xC
  1128                           
  1129                           
  1130                           ; 1 bytes @ 0xC
  1131  002C                     	ds	1
  1132  002D                     utoa@v:	
  1133                           
  1134                           ; 2 bytes @ 0xD
  1135  002D                     	ds	1
  1136  002E                     ___altoft@exp:	
  1137                           
  1138                           ; 1 bytes @ 0xE
  1139  002E                     	ds	1
  1140  002F                     ___altoft@sign:	
  1141  002F                     utoa@c:	
  1142                           ; 1 bytes @ 0xF
  1143                           
  1144                           
  1145                           ; 1 bytes @ 0xF
  1146  002F                     	ds	1
  1147  0030                     ?___ftdiv:	
  1148  0030                     utoa@buf:	
  1149                           ; 3 bytes @ 0x10
  1150                           
  1151  0030                     ___ftdiv@f2:	
  1152                           ; 1 bytes @ 0x10
  1153                           
  1154                           
  1155                           ; 3 bytes @ 0x10
  1156  0030                     	ds	1
  1157  0031                     ?_itoa:	
  1158  0031                     itoa@val:	
  1159                           ; 1 bytes @ 0x11
  1160                           
  1161                           
  1162                           ; 2 bytes @ 0x11
  1163  0031                     	ds	2
  1164  0033                     itoa@base:	
  1165  0033                     ___ftdiv@f1:	
  1166                           ; 2 bytes @ 0x13
  1167                           
  1168                           
  1169                           ; 3 bytes @ 0x13
  1170  0033                     	ds	2
  1171  0035                     ??_itoa:	
  1172                           
  1173                           ; 1 bytes @ 0x15
  1174  0035                     	ds	1
  1175  0036                     ??___ftdiv:	
  1176  0036                     itoa@cp:	
  1177                           ; 1 bytes @ 0x16
  1178                           
  1179                           
  1180                           ; 1 bytes @ 0x16
  1181  0036                     	ds	1
  1182  0037                     itoa@buf:	
  1183                           
  1184                           ; 1 bytes @ 0x17
  1185  0037                     	ds	3
  1186  003A                     ___ftdiv@cntr:	
  1187                           
  1188                           ; 1 bytes @ 0x1A
  1189  003A                     	ds	1
  1190  003B                     ___ftdiv@f3:	
  1191                           
  1192                           ; 3 bytes @ 0x1B
  1193  003B                     	ds	3
  1194  003E                     ___ftdiv@exp:	
  1195                           
  1196                           ; 1 bytes @ 0x1E
  1197  003E                     	ds	1
  1198  003F                     ___ftdiv@sign:	
  1199                           
  1200                           ; 1 bytes @ 0x1F
  1201  003F                     	ds	1
  1202  0040                     ?___fttol:	
  1203  0040                     ___fttol@f1:	
  1204                           ; 4 bytes @ 0x20
  1205                           
  1206                           
  1207                           ; 3 bytes @ 0x20
  1208  0040                     	ds	4
  1209  0044                     ??___fttol:	
  1210                           
  1211                           ; 1 bytes @ 0x24
  1212  0044                     	ds	4
  1213  0048                     ___fttol@sign1:	
  1214                           
  1215                           ; 1 bytes @ 0x28
  1216  0048                     	ds	1
  1217  0049                     ___fttol@lval:	
  1218                           
  1219                           ; 4 bytes @ 0x29
  1220  0049                     	ds	4
  1221  004D                     ___fttol@exp1:	
  1222                           
  1223                           ; 1 bytes @ 0x2D
  1224  004D                     	ds	1
  1225  004E                     ??_loop:	
  1226                           
  1227                           ; 1 bytes @ 0x2E
  1228  004E                     	ds	2
  1229  0050                     ??_main:	
  1230                           
  1231                           ; 1 bytes @ 0x30
  1232  0050                     	ds	1
  1233  0051                     main@bootCount:	
  1234                           
  1235                           ; 2 bytes @ 0x31
  1236  0051                     	ds	2
  1237                           
  1238                           	psect	maintext
  1239  049E                     __pmaintext:	
  1240 ;;
  1241 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1242 ;;
  1243 ;; *************** function _main *****************
  1244 ;; Defined at:
  1245 ;;		line 187 in file "main.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;		None
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;  bootCount       2   49[BANK0 ] unsigned int 
  1250 ;; Return value:  Size  Location     Type
  1251 ;;                  1    wreg      void 
  1252 ;; Registers used:
  1253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1254 ;; Tracked objects:
  1255 ;;		On entry : B1F/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMMON   BANK0   BANK1
  1259 ;;      Params:         0       0       0
  1260 ;;      Locals:         0       2       0
  1261 ;;      Temps:          0       1       0
  1262 ;;      Totals:         0       3       0
  1263 ;;Total ram usage:        3 bytes
  1264 ;; Hardware stack levels required when called:    9
  1265 ;; This function calls:
  1266 ;;		_loop
  1267 ;;		_nrf24l01Init
  1268 ;;		_read_flashmem
  1269 ;;		_write_flashmem
  1270 ;; This function is called by:
  1271 ;;		Startup code after reset
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           
  1276                           ;psect for function _main
  1277  049E                     _main:	
  1278                           
  1279                           ;main.c: 193: INTCONbits.PEIE = 0;
  1280                           
  1281                           ;incstack = 0
  1282                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1283  049E  130B               	bcf	11,6	;volatile
  1284                           
  1285                           ;main.c: 194: INTCONbits.GIE = 0;
  1286  049F  138B               	bcf	11,7	;volatile
  1287                           
  1288                           ;main.c: 196: OSCCONbits.IRCF = 0b1111;
  1289  04A0  3078               	movlw	120
  1290  04A1  0021               	movlb	1	; select bank1
  1291  04A2  0499               	iorwf	25,f	;volatile
  1292                           
  1293                           ;main.c: 197: OSCCONbits.SCS = 0b10;
  1294  04A3  0819               	movf	25,w	;volatile
  1295  04A4  39FC               	andlw	-4
  1296  04A5  3802               	iorlw	2
  1297  04A6  0099               	movwf	25	;volatile
  1298                           
  1299                           ;main.c: 199: _delay((unsigned long)((10)*(16000000/4000.0)));
  1300  04A7  3034               	movlw	52
  1301  04A8  0020               	movlb	0	; select bank0
  1302  04A9  00D0               	movwf	??_main
  1303  04AA  30F1               	movlw	241
  1304  04AB                     u1497:	
  1305  04AB  0B89               	decfsz	9,f
  1306  04AC  2CAB               	goto	u1497
  1307  04AD  0BD0               	decfsz	??_main,f
  1308  04AE  2CAB               	goto	u1497
  1309  04AF  3200               	nop2
  1310                           
  1311                           ;main.c: 201: nrf24l01Init();
  1312  04B0  2607               	fcall	_nrf24l01Init
  1313                           
  1314                           ;main.c: 203: OPTION_REGbits.nWPUEN = 0;
  1315  04B1  0021               	movlb	1	; select bank1
  1316  04B2  1395               	bcf	21,7	;volatile
  1317                           
  1318                           ;main.c: 206: FVRCONbits.FVREN = 0;
  1319  04B3  0022               	movlb	2	; select bank2
  1320  04B4  1397               	bcf	23,7	;volatile
  1321                           
  1322                           ;main.c: 207: FVRCONbits.ADFVR = 1;
  1323  04B5  0817               	movf	23,w	;volatile
  1324  04B6  39FC               	andlw	-4
  1325  04B7  3801               	iorlw	1
  1326  04B8  0097               	movwf	23	;volatile
  1327                           
  1328                           ;main.c: 208: FVRCONbits.FVREN = 1;
  1329  04B9  1797               	bsf	23,7	;volatile
  1330                           
  1331                           ;main.c: 211: FVRCONbits.TSEN = 0;
  1332  04BA  1297               	bcf	23,5	;volatile
  1333                           
  1334                           ;main.c: 212: FVRCONbits.TSRNG = 0;
  1335  04BB  1217               	bcf	23,4	;volatile
  1336                           
  1337                           ;main.c: 213: FVRCONbits.TSEN = 1;
  1338  04BC  1697               	bsf	23,5	;volatile
  1339                           
  1340                           ;main.c: 216: ADCON0bits.ADON = 0;
  1341  04BD  0021               	movlb	1	; select bank1
  1342  04BE  101D               	bcf	29,0	;volatile
  1343                           
  1344                           ;main.c: 218: ANSELAbits.ANSA4 = 1;
  1345  04BF  0023               	movlb	3	; select bank3
  1346  04C0  160C               	bsf	12,4	;volatile
  1347                           
  1348                           ;main.c: 219: TRISAbits.TRISA4 = 1;
  1349  04C1  0021               	movlb	1	; select bank1
  1350  04C2  160C               	bsf	12,4	;volatile
  1351                           
  1352                           ;main.c: 220: WPUAbits.WPUA4 = 0;
  1353  04C3  0024               	movlb	4	; select bank4
  1354  04C4  120C               	bcf	12,4	;volatile
  1355                           
  1356                           ;main.c: 222: ANSELCbits.ANSC3 = 1;
  1357  04C5  0023               	movlb	3	; select bank3
  1358  04C6  158E               	bsf	14,3	;volatile
  1359                           
  1360                           ;main.c: 223: TRISCbits.TRISC3 = 1;
  1361  04C7  0021               	movlb	1	; select bank1
  1362  04C8  158E               	bsf	14,3	;volatile
  1363                           
  1364                           ;main.c: 225: ADCON1bits.ADCS = 0b111;
  1365  04C9  3070               	movlw	112
  1366  04CA  049E               	iorwf	30,f	;volatile
  1367                           
  1368                           ;main.c: 226: ADCON1bits.ADFM = 1;
  1369  04CB  179E               	bsf	30,7	;volatile
  1370                           
  1371                           ;main.c: 227: ADCON1bits.ADPREF = 0b00;
  1372  04CC  30FC               	movlw	-4
  1373  04CD  059E               	andwf	30,f	;volatile
  1374                           
  1375                           ;main.c: 229: PIE1bits.ADIE = 1;
  1376  04CE  1711               	bsf	17,6	;volatile
  1377                           
  1378                           ;main.c: 231: ADCON0bits.CHS = 3;
  1379  04CF  081D               	movf	29,w	;volatile
  1380  04D0  3983               	andlw	-125
  1381  04D1  380C               	iorlw	12
  1382  04D2  009D               	movwf	29	;volatile
  1383                           
  1384                           ;main.c: 232: ADCON0bits.ADON = 1;
  1385  04D3  141D               	bsf	29,0	;volatile
  1386                           
  1387                           ;main.c: 236: TRISAbits.TRISA2 = 1;
  1388  04D4  150C               	bsf	12,2	;volatile
  1389                           
  1390                           ;main.c: 237: INTCONbits.INTE = 1;
  1391  04D5  160B               	bsf	11,4	;volatile
  1392                           
  1393                           ;main.c: 238: OPTION_REGbits.INTEDG = 0;
  1394  04D6  1315               	bcf	21,6	;volatile
  1395                           
  1396                           ;main.c: 242: WDTCONbits.WDTPS = 7;
  1397  04D7  0817               	movf	23,w	;volatile
  1398  04D8  39C1               	andlw	-63
  1399  04D9  380E               	iorlw	14
  1400  04DA  0097               	movwf	23	;volatile
  1401                           
  1402                           ;main.c: 246: INTCONbits.PEIE = 1;
  1403  04DB  170B               	bsf	11,6	;volatile
  1404                           
  1405                           ;main.c: 247: INTCONbits.GIE = 1;
  1406  04DC  178B               	bsf	11,7	;volatile
  1407                           
  1408                           ;main.c: 249: unsigned int bootCount = read_flashmem(16);
  1409  04DD  3010               	movlw	16
  1410  04DE  0020               	movlb	0	; select bank0
  1411  04DF  00A0               	movwf	read_flashmem@offset
  1412  04E0  3000               	movlw	0
  1413  04E1  00A1               	movwf	read_flashmem@offset+1
  1414  04E2  2650               	fcall	_read_flashmem
  1415  04E3  0020               	movlb	0	; select bank0
  1416  04E4  0821               	movf	?_read_flashmem+1,w
  1417  04E5  00D2               	movwf	main@bootCount+1
  1418  04E6  0820               	movf	?_read_flashmem,w
  1419  04E7  00D1               	movwf	main@bootCount
  1420                           
  1421                           ;main.c: 250: bootCount++;
  1422  04E8  3001               	movlw	1
  1423  04E9  07D1               	addwf	main@bootCount,f
  1424  04EA  3000               	movlw	0
  1425  04EB  3DD2               	addwfc	main@bootCount+1,f
  1426                           
  1427                           ;main.c: 251: write_flashmem(16, bootCount);
  1428  04EC  3010               	movlw	16
  1429  04ED  00A0               	movwf	write_flashmem@offset
  1430  04EE  3000               	movlw	0
  1431  04EF  00A1               	movwf	write_flashmem@offset+1
  1432  04F0  0852               	movf	main@bootCount+1,w
  1433  04F1  00A3               	movwf	write_flashmem@data+1
  1434  04F2  0851               	movf	main@bootCount,w
  1435  04F3  00A2               	movwf	write_flashmem@data
  1436  04F4  24F7               	fcall	_write_flashmem
  1437  04F5                     l2074:	
  1438                           ;main.c: 253: while(1){
  1439                           
  1440                           
  1441                           ;main.c: 254: loop();
  1442  04F5  2063               	fcall	_loop
  1443  04F6  2CF5               	goto	l2074
  1444  04F7                     __end_of_main:	
  1445                           ;main.c: 255: }
  1446                           ;main.c: 257: return;
  1447                           
  1448                           
  1449                           	psect	text1
  1450  04F7                     __ptext1:	
  1451 ;; *************** function _write_flashmem *****************
  1452 ;; Defined at:
  1453 ;;		line 5 in file "flash.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;  offset          2    0[BANK0 ] unsigned int 
  1456 ;;  data            2    2[BANK0 ] unsigned int 
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;		None
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  1    wreg      void 
  1461 ;; Registers used:
  1462 ;;		wreg, status,2, status,0
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMMON   BANK0   BANK1
  1468 ;;      Params:         0       4       0
  1469 ;;      Locals:         0       0       0
  1470 ;;      Temps:          0       2       0
  1471 ;;      Totals:         0       6       0
  1472 ;;Total ram usage:        6 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    4
  1475 ;; This function calls:
  1476 ;;		Nothing
  1477 ;; This function is called by:
  1478 ;;		_main
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482                           
  1483                           ;psect for function _write_flashmem
  1484  04F7                     _write_flashmem:	
  1485                           
  1486                           ;flash.c: 7: INTCONbits.GIE = 0;
  1487                           
  1488                           ;incstack = 0
  1489                           ; Regs used in _write_flashmem: [wreg+status,2+status,0]
  1490  04F7  138B               	bcf	11,7	;volatile
  1491                           
  1492                           ;flash.c: 10: PMCON1 = 0x00;
  1493  04F8  0023               	movlb	3	; select bank3
  1494  04F9  0195               	clrf	21	;volatile
  1495                           
  1496                           ;flash.c: 12: PMADRL = (char) (((0x800U-32) + offset) >> 0);
  1497  04FA  0020               	movlb	0	; select bank0
  1498  04FB  0820               	movf	write_flashmem@offset,w
  1499  04FC  3EE0               	addlw	224
  1500  04FD  0023               	movlb	3	; select bank3
  1501  04FE  0091               	movwf	17	;volatile
  1502                           
  1503                           ;flash.c: 13: PMADRH = (char) (((0x800U-32) + offset) >> 8);
  1504  04FF  0020               	movlb	0	; select bank0
  1505  0500  0820               	movf	write_flashmem@offset,w
  1506  0501  3EE0               	addlw	224
  1507  0502  00A4               	movwf	??_write_flashmem
  1508  0503  3007               	movlw	7
  1509  0504  3D21               	addwfc	write_flashmem@offset+1,w
  1510  0505  00A5               	movwf	??_write_flashmem+1
  1511  0506  0825               	movf	??_write_flashmem+1,w
  1512  0507  0023               	movlb	3	; select bank3
  1513  0508  0092               	movwf	18	;volatile
  1514                           
  1515                           ;flash.c: 15: PMCON1bits.FREE = 1;
  1516  0509  1615               	bsf	21,4	;volatile
  1517                           
  1518                           ;flash.c: 16: PMCON1bits.WREN = 1;
  1519  050A  1515               	bsf	21,2	;volatile
  1520                           
  1521                           ;flash.c: 18: PMCON2 = 0x55;
  1522  050B  3055               	movlw	85
  1523  050C  0096               	movwf	22	;volsfr
  1524                           
  1525                           ;flash.c: 19: PMCON2 = 0xAA;
  1526  050D  30AA               	movlw	170
  1527  050E  0096               	movwf	22	;volsfr
  1528                           
  1529                           ;flash.c: 21: PMCON1bits.WR = 1;
  1530  050F  1495               	bsf	21,1	;volatile
  1531                           
  1532                           ;flash.c: 23: __nop();
  1533  0510  0000               	nop
  1534                           
  1535                           ;flash.c: 24: __nop();
  1536  0511  0000               	nop
  1537                           
  1538                           ;flash.c: 26: PMCON1bits.WREN = 0;
  1539  0512  0023               	movlb	3	; select bank3
  1540  0513  1115               	bcf	21,2	;volatile
  1541                           
  1542                           ;flash.c: 30: PMCON1 = 0x00;
  1543  0514  0195               	clrf	21	;volatile
  1544                           
  1545                           ;flash.c: 32: PMADRL = (char) (((0x800U-32) + offset) >> 0);
  1546  0515  0020               	movlb	0	; select bank0
  1547  0516  0820               	movf	write_flashmem@offset,w
  1548  0517  3EE0               	addlw	224
  1549  0518  0023               	movlb	3	; select bank3
  1550  0519  0091               	movwf	17	;volatile
  1551                           
  1552                           ;flash.c: 33: PMADRH = (char) (((0x800U-32) + offset) >> 8);
  1553  051A  0020               	movlb	0	; select bank0
  1554  051B  0820               	movf	write_flashmem@offset,w
  1555  051C  3EE0               	addlw	224
  1556  051D  00A4               	movwf	??_write_flashmem
  1557  051E  3007               	movlw	7
  1558  051F  3D21               	addwfc	write_flashmem@offset+1,w
  1559  0520  00A5               	movwf	??_write_flashmem+1
  1560  0521  0825               	movf	??_write_flashmem+1,w
  1561  0522  0023               	movlb	3	; select bank3
  1562  0523  0092               	movwf	18	;volatile
  1563                           
  1564                           ;flash.c: 35: PMCON1bits.FREE = 0;
  1565  0524  1215               	bcf	21,4	;volatile
  1566                           
  1567                           ;flash.c: 36: PMCON1bits.LWLO = 1;
  1568  0525  1695               	bsf	21,5	;volatile
  1569                           
  1570                           ;flash.c: 37: PMCON1bits.WREN = 1;
  1571  0526  1515               	bsf	21,2	;volatile
  1572                           
  1573                           ;flash.c: 39: PMDATL = (data >> 0);
  1574  0527  0020               	movlb	0	; select bank0
  1575  0528  0822               	movf	write_flashmem@data,w
  1576  0529  0023               	movlb	3	; select bank3
  1577  052A  0093               	movwf	19	;volatile
  1578                           
  1579                           ;flash.c: 40: PMDATH = (data >> 8);
  1580  052B  0020               	movlb	0	; select bank0
  1581  052C  0823               	movf	write_flashmem@data+1,w
  1582  052D  0023               	movlb	3	; select bank3
  1583  052E  0094               	movwf	20	;volatile
  1584                           
  1585                           ;flash.c: 42: PMCON1bits.LWLO = 0;
  1586  052F  1295               	bcf	21,5	;volatile
  1587                           
  1588                           ;flash.c: 44: PMCON2 = 0x55;
  1589  0530  3055               	movlw	85
  1590  0531  0096               	movwf	22	;volsfr
  1591                           
  1592                           ;flash.c: 45: PMCON2 = 0xAA;
  1593  0532  30AA               	movlw	170
  1594  0533  0096               	movwf	22	;volsfr
  1595                           
  1596                           ;flash.c: 47: PMCON1bits.WR = 1;
  1597  0534  1495               	bsf	21,1	;volatile
  1598                           
  1599                           ;flash.c: 49: __nop();
  1600  0535  0000               	nop
  1601                           
  1602                           ;flash.c: 50: __nop();
  1603  0536  0000               	nop
  1604                           
  1605                           ;flash.c: 52: PMCON1bits.WREN = 0;
  1606  0537  0023               	movlb	3	; select bank3
  1607  0538  1115               	bcf	21,2	;volatile
  1608                           
  1609                           ;flash.c: 55: INTCONbits.GIE = 1;
  1610  0539  178B               	bsf	11,7	;volatile
  1611  053A  0008               	return
  1612  053B                     __end_of_write_flashmem:	
  1613                           
  1614                           	psect	text2
  1615  0607                     __ptext2:	
  1616 ;; *************** function _nrf24l01Init *****************
  1617 ;; Defined at:
  1618 ;;		line 227 in file "nrf24l01.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;		None
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;		None
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  1    wreg      void 
  1625 ;; Registers used:
  1626 ;;		wreg, status,2, status,0, pclath, cstack
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMMON   BANK0   BANK1
  1632 ;;      Params:         0       0       0
  1633 ;;      Locals:         0       0       0
  1634 ;;      Temps:          0       1       0
  1635 ;;      Totals:         0       1       0
  1636 ;;Total ram usage:        1 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    7
  1639 ;; This function calls:
  1640 ;;		_nrf24l01InitRegisters
  1641 ;; This function is called by:
  1642 ;;		_main
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           
  1647                           ;psect for function _nrf24l01Init
  1648  0607                     _nrf24l01Init:	
  1649                           
  1650                           ;nrf24l01.c: 229: TRISAbits.TRISA0 = 0;
  1651                           
  1652                           ;incstack = 0
  1653                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1654  0607  0021               	movlb	1	; select bank1
  1655  0608  100C               	bcf	12,0	;volatile
  1656                           
  1657                           ;nrf24l01.c: 233: ANSELA = 0x00;
  1658  0609  0023               	movlb	3	; select bank3
  1659  060A  018C               	clrf	12	;volatile
  1660                           
  1661                           ;nrf24l01.c: 234: ANSELC = 0x00;
  1662  060B  018E               	clrf	14	;volatile
  1663                           
  1664                           ;nrf24l01.c: 236: TRISAbits.TRISA1 = 0;
  1665  060C  0021               	movlb	1	; select bank1
  1666  060D  108C               	bcf	12,1	;volatile
  1667                           
  1668                           ;nrf24l01.c: 238: TRISCbits.TRISC1 = 1;
  1669  060E  148E               	bsf	14,1	;volatile
  1670                           
  1671                           ;nrf24l01.c: 239: TRISCbits.TRISC2 = 0;
  1672  060F  110E               	bcf	14,2	;volatile
  1673                           
  1674                           ;nrf24l01.c: 240: TRISCbits.TRISC0 = 0;
  1675  0610  100E               	bcf	14,0	;volatile
  1676                           
  1677                           ;nrf24l01.c: 242: SSPCON1bits.SSPEN = 0;
  1678  0611  0024               	movlb	4	; select bank4
  1679  0612  1295               	bcf	21,5	;volatile
  1680                           
  1681                           ;nrf24l01.c: 243: SSPCON1bits.CKP = 0;
  1682  0613  1215               	bcf	21,4	;volatile
  1683                           
  1684                           ;nrf24l01.c: 244: SSP1STATbits.CKE = 1;
  1685  0614  1714               	bsf	20,6	;volatile
  1686                           
  1687                           ;nrf24l01.c: 245: SSPCON1bits.SSPM = 0b0000;
  1688  0615  30F0               	movlw	-16
  1689  0616  0595               	andwf	21,f	;volatile
  1690                           
  1691                           ;nrf24l01.c: 247: SSPCON1bits.SSPEN = 1;
  1692  0617  1695               	bsf	21,5	;volatile
  1693                           
  1694                           ;nrf24l01.c: 249: PORTAbits.RA0 = 0;
  1695  0618  0020               	movlb	0	; select bank0
  1696  0619  100C               	bcf	12,0	;volatile
  1697                           
  1698                           ;nrf24l01.c: 251: _delay((unsigned long)((11)*(16000000/4000.0)));
  1699  061A  303A               	movlw	58
  1700  061B  0020               	movlb	0	; select bank0
  1701  061C  00A8               	movwf	??_nrf24l01Init
  1702  061D  3023               	movlw	35
  1703  061E                     u1507:	
  1704  061E  0B89               	decfsz	9,f
  1705  061F  2E1E               	goto	u1507
  1706  0620  0BA8               	decfsz	??_nrf24l01Init,f
  1707  0621  2E1E               	goto	u1507
  1708                           
  1709                           ;nrf24l01.c: 253: nrf24l01InitRegisters();
  1710  0622  2366               	fcall	_nrf24l01InitRegisters
  1711                           
  1712                           ;nrf24l01.c: 255: _delay((unsigned long)((2)*(16000000/4000.0)));
  1713  0623  300B               	movlw	11
  1714  0624  0020               	movlb	0	; select bank0
  1715  0625  00A8               	movwf	??_nrf24l01Init
  1716  0626  3062               	movlw	98
  1717  0627                     u1517:	
  1718  0627  0B89               	decfsz	9,f
  1719  0628  2E27               	goto	u1517
  1720  0629  0BA8               	decfsz	??_nrf24l01Init,f
  1721  062A  2E27               	goto	u1517
  1722  062B  0000               	nop
  1723  062C  0008               	return
  1724  062D                     __end_of_nrf24l01Init:	
  1725                           
  1726                           	psect	text3
  1727  0366                     __ptext3:	
  1728 ;; *************** function _nrf24l01InitRegisters *****************
  1729 ;; Defined at:
  1730 ;;		line 140 in file "nrf24l01.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;		None
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;  DynPD           1    7[BANK0 ] struct .
  1735 ;;  enRXAddr        1    6[BANK0 ] struct .
  1736 ;;  config          1    5[BANK0 ] struct .
  1737 ;;  rfSetup         1    4[BANK0 ] struct .
  1738 ;;  feature         1    3[BANK0 ] struct .
  1739 ;;  setupRetries    1    2[BANK0 ] struct .
  1740 ;;  setupAW         1    1[BANK0 ] struct .
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  1    wreg      void 
  1743 ;; Registers used:
  1744 ;;		wreg, status,2, status,0, pclath, cstack
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMMON   BANK0   BANK1
  1750 ;;      Params:         0       0       0
  1751 ;;      Locals:         0       7       0
  1752 ;;      Temps:          0       1       0
  1753 ;;      Totals:         0       8       0
  1754 ;;Total ram usage:        8 bytes
  1755 ;; Hardware stack levels used:    1
  1756 ;; Hardware stack levels required when called:    6
  1757 ;; This function calls:
  1758 ;;		_nrf24l01Send
  1759 ;; This function is called by:
  1760 ;;		_nrf24l01Init
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           
  1765                           ;psect for function _nrf24l01InitRegisters
  1766  0366                     _nrf24l01InitRegisters:	
  1767                           
  1768                           ;nrf24l01.c: 142: nrf24l01Send(0b00100000 | 0x00, 0x00);
  1769                           
  1770                           ;incstack = 0
  1771                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  1772  0366  01F1               	clrf	nrf24l01Send@data
  1773  0367  3020               	movlw	32
  1774  0368  26D8               	fcall	_nrf24l01Send
  1775                           
  1776                           ;nrf24l01.c: 144: _delay((unsigned long)((10)*(16000000/4000.0)));
  1777  0369  3034               	movlw	52
  1778  036A  0020               	movlb	0	; select bank0
  1779  036B  00A0               	movwf	??_nrf24l01InitRegisters
  1780  036C  30F1               	movlw	241
  1781  036D                     u1527:	
  1782  036D  0B89               	decfsz	9,f
  1783  036E  2B6D               	goto	u1527
  1784  036F  0BA0               	decfsz	??_nrf24l01InitRegisters,f
  1785  0370  2B6D               	goto	u1527
  1786  0371  3200               	nop2
  1787                           
  1788                           ;nrf24l01.c: 146: n_SETUP_AW_t setupAW;
  1789                           ;nrf24l01.c: 147: setupAW.byte = 0x00;
  1790  0372  0020               	movlb	0	; select bank0
  1791  0373  01A1               	clrf	nrf24l01InitRegisters@setupAW
  1792                           
  1793                           ;nrf24l01.c: 148: setupAW.AW = 3;
  1794  0374  3003               	movlw	3
  1795  0375  04A1               	iorwf	nrf24l01InitRegisters@setupAW,f
  1796                           
  1797                           ;nrf24l01.c: 149: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  1798  0376  0821               	movf	nrf24l01InitRegisters@setupAW,w
  1799  0377  00A0               	movwf	??_nrf24l01InitRegisters
  1800  0378  0820               	movf	??_nrf24l01InitRegisters,w
  1801  0379  00F1               	movwf	nrf24l01Send@data
  1802  037A  3022               	movlw	34
  1803  037B  26D8               	fcall	_nrf24l01Send
  1804                           
  1805                           ;nrf24l01.c: 152: n_SETUP_RETR_t setupRetries;
  1806                           ;nrf24l01.c: 153: setupRetries.ARD = 15;
  1807  037C  30F0               	movlw	240
  1808  037D  0020               	movlb	0	; select bank0
  1809  037E  04A2               	iorwf	nrf24l01InitRegisters@setupRetries,f
  1810                           
  1811                           ;nrf24l01.c: 154: setupRetries.ARC = 15;
  1812  037F  300F               	movlw	15
  1813  0380  04A2               	iorwf	nrf24l01InitRegisters@setupRetries,f
  1814                           
  1815                           ;nrf24l01.c: 155: nrf24l01Send(0b00100000 | 0x04, setupRetries.byte);
  1816  0381  0822               	movf	nrf24l01InitRegisters@setupRetries,w
  1817  0382  00A0               	movwf	??_nrf24l01InitRegisters
  1818  0383  0820               	movf	??_nrf24l01InitRegisters,w
  1819  0384  00F1               	movwf	nrf24l01Send@data
  1820  0385  3024               	movlw	36
  1821  0386  26D8               	fcall	_nrf24l01Send
  1822                           
  1823                           ;nrf24l01.c: 163: n_RF_SETUP_t rfSetup;
  1824                           ;nrf24l01.c: 164: rfSetup.RF_DR_LOW = 0;
  1825  0387  0020               	movlb	0	; select bank0
  1826  0388  12A4               	bcf	nrf24l01InitRegisters@rfSetup,5
  1827                           
  1828                           ;nrf24l01.c: 165: rfSetup.RF_DR_HIGH = 1;
  1829  0389  15A4               	bsf	nrf24l01InitRegisters@rfSetup,3
  1830                           
  1831                           ;nrf24l01.c: 166: rfSetup.RF_PWR = 3;
  1832  038A  3006               	movlw	6
  1833  038B  04A4               	iorwf	nrf24l01InitRegisters@rfSetup,f
  1834                           
  1835                           ;nrf24l01.c: 167: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  1836  038C  0824               	movf	nrf24l01InitRegisters@rfSetup,w
  1837  038D  00A0               	movwf	??_nrf24l01InitRegisters
  1838  038E  0820               	movf	??_nrf24l01InitRegisters,w
  1839  038F  00F1               	movwf	nrf24l01Send@data
  1840  0390  3026               	movlw	38
  1841  0391  26D8               	fcall	_nrf24l01Send
  1842                           
  1843                           ;nrf24l01.c: 170: n_CONFIG_t config;
  1844                           ;nrf24l01.c: 171: config.PRIM_RX = 1;
  1845  0392  0020               	movlb	0	; select bank0
  1846  0393  1425               	bsf	nrf24l01InitRegisters@config,0
  1847                           
  1848                           ;nrf24l01.c: 172: config.EN_CRC = 1;
  1849  0394  15A5               	bsf	nrf24l01InitRegisters@config,3
  1850                           
  1851                           ;nrf24l01.c: 173: config.CRCO = 1;
  1852  0395  1525               	bsf	nrf24l01InitRegisters@config,2
  1853                           
  1854                           ;nrf24l01.c: 174: config.PWR_UP = 1;
  1855  0396  14A5               	bsf	nrf24l01InitRegisters@config,1
  1856                           
  1857                           ;nrf24l01.c: 175: nrf24l01Send(0b00100000 | 0x00, config.byte);
  1858  0397  0825               	movf	nrf24l01InitRegisters@config,w
  1859  0398  00A0               	movwf	??_nrf24l01InitRegisters
  1860  0399  0820               	movf	??_nrf24l01InitRegisters,w
  1861  039A  00F1               	movwf	nrf24l01Send@data
  1862  039B  3020               	movlw	32
  1863  039C  26D8               	fcall	_nrf24l01Send
  1864                           
  1865                           ;nrf24l01.c: 178: n_EN_RXADDR_t enRXAddr;
  1866                           ;nrf24l01.c: 179: enRXAddr.ERX_P0 = 1;
  1867  039D  0020               	movlb	0	; select bank0
  1868  039E  1426               	bsf	nrf24l01InitRegisters@enRXAddr,0
  1869                           
  1870                           ;nrf24l01.c: 180: enRXAddr.ERX_P1 = 1;
  1871  039F  14A6               	bsf	nrf24l01InitRegisters@enRXAddr,1
  1872                           
  1873                           ;nrf24l01.c: 181: enRXAddr.ERX_P2 = 1;
  1874  03A0  1526               	bsf	nrf24l01InitRegisters@enRXAddr,2
  1875                           
  1876                           ;nrf24l01.c: 182: enRXAddr.ERX_P3 = 1;
  1877  03A1  15A6               	bsf	nrf24l01InitRegisters@enRXAddr,3
  1878                           
  1879                           ;nrf24l01.c: 183: enRXAddr.ERX_P4 = 1;
  1880  03A2  1626               	bsf	nrf24l01InitRegisters@enRXAddr,4
  1881                           
  1882                           ;nrf24l01.c: 184: enRXAddr.ERX_P5 = 1;
  1883  03A3  16A6               	bsf	nrf24l01InitRegisters@enRXAddr,5
  1884                           
  1885                           ;nrf24l01.c: 185: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  1886  03A4  0826               	movf	nrf24l01InitRegisters@enRXAddr,w
  1887  03A5  00A0               	movwf	??_nrf24l01InitRegisters
  1888  03A6  0820               	movf	??_nrf24l01InitRegisters,w
  1889  03A7  00F1               	movwf	nrf24l01Send@data
  1890  03A8  3022               	movlw	34
  1891  03A9  26D8               	fcall	_nrf24l01Send
  1892                           
  1893                           ;nrf24l01.c: 200: n_FEATURE_t feature;
  1894                           ;nrf24l01.c: 201: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  1895  03AA  01F1               	clrf	nrf24l01Send@data
  1896  03AB  301D               	movlw	29
  1897  03AC  26D8               	fcall	_nrf24l01Send
  1898  03AD  0020               	movlb	0	; select bank0
  1899  03AE  00A0               	movwf	??_nrf24l01InitRegisters
  1900  03AF  0820               	movf	??_nrf24l01InitRegisters,w
  1901  03B0  00A3               	movwf	nrf24l01InitRegisters@feature
  1902                           
  1903                           ;nrf24l01.c: 202: feature.EN_DPL = 1;
  1904  03B1  1523               	bsf	nrf24l01InitRegisters@feature,2
  1905                           
  1906                           ;nrf24l01.c: 203: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  1907  03B2  0823               	movf	nrf24l01InitRegisters@feature,w
  1908  03B3  00A0               	movwf	??_nrf24l01InitRegisters
  1909  03B4  0820               	movf	??_nrf24l01InitRegisters,w
  1910  03B5  00F1               	movwf	nrf24l01Send@data
  1911  03B6  303D               	movlw	61
  1912  03B7  26D8               	fcall	_nrf24l01Send
  1913                           
  1914                           ;nrf24l01.c: 205: n_DYNPD_t DynPD;
  1915                           ;nrf24l01.c: 206: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  1916  03B8  01F1               	clrf	nrf24l01Send@data
  1917  03B9  301C               	movlw	28
  1918  03BA  26D8               	fcall	_nrf24l01Send
  1919  03BB  0020               	movlb	0	; select bank0
  1920  03BC  00A0               	movwf	??_nrf24l01InitRegisters
  1921  03BD  0820               	movf	??_nrf24l01InitRegisters,w
  1922  03BE  00A7               	movwf	nrf24l01InitRegisters@DynPD
  1923                           
  1924                           ;nrf24l01.c: 207: DynPD.DPL_P0 = 1;
  1925  03BF  1427               	bsf	nrf24l01InitRegisters@DynPD,0
  1926                           
  1927                           ;nrf24l01.c: 208: DynPD.DPL_P1 = 1;
  1928  03C0  14A7               	bsf	nrf24l01InitRegisters@DynPD,1
  1929                           
  1930                           ;nrf24l01.c: 209: DynPD.DPL_P2 = 1;
  1931  03C1  1527               	bsf	nrf24l01InitRegisters@DynPD,2
  1932                           
  1933                           ;nrf24l01.c: 210: DynPD.DPL_P3 = 1;
  1934  03C2  15A7               	bsf	nrf24l01InitRegisters@DynPD,3
  1935                           
  1936                           ;nrf24l01.c: 211: DynPD.DPL_P4 = 1;
  1937  03C3  1627               	bsf	nrf24l01InitRegisters@DynPD,4
  1938                           
  1939                           ;nrf24l01.c: 212: DynPD.DPL_P5 = 1;
  1940  03C4  16A7               	bsf	nrf24l01InitRegisters@DynPD,5
  1941                           
  1942                           ;nrf24l01.c: 213: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  1943  03C5  0827               	movf	nrf24l01InitRegisters@DynPD,w
  1944  03C6  00A0               	movwf	??_nrf24l01InitRegisters
  1945  03C7  0820               	movf	??_nrf24l01InitRegisters,w
  1946  03C8  00F1               	movwf	nrf24l01Send@data
  1947  03C9  303C               	movlw	60
  1948  03CA  26D8               	fcall	_nrf24l01Send
  1949                           
  1950                           ;nrf24l01.c: 216: status.byte = 0x00;
  1951  03CB  01FC               	clrf	_status
  1952                           
  1953                           ;nrf24l01.c: 217: status.RX_DR = 1;
  1954  03CC  177C               	bsf	_status,6
  1955                           
  1956                           ;nrf24l01.c: 218: status.TX_DS = 1;
  1957  03CD  16FC               	bsf	_status,5
  1958                           
  1959                           ;nrf24l01.c: 219: status.MAX_RT = 1;
  1960  03CE  167C               	bsf	_status,4
  1961                           
  1962                           ;nrf24l01.c: 220: nrf24l01Send(0b00100000 | 0x07, status.byte);
  1963  03CF  087C               	movf	_status,w
  1964  03D0  0020               	movlb	0	; select bank0
  1965  03D1  00A0               	movwf	??_nrf24l01InitRegisters
  1966  03D2  0820               	movf	??_nrf24l01InitRegisters,w
  1967  03D3  00F1               	movwf	nrf24l01Send@data
  1968  03D4  3027               	movlw	39
  1969  03D5  26D8               	fcall	_nrf24l01Send
  1970                           
  1971                           ;nrf24l01.c: 223: nrf24l01Send(0b11100001, 0);
  1972  03D6  01F1               	clrf	nrf24l01Send@data
  1973  03D7  30E1               	movlw	225
  1974  03D8  26D8               	fcall	_nrf24l01Send
  1975                           
  1976                           ;nrf24l01.c: 224: nrf24l01Send(0b11100010, 0);
  1977  03D9  01F1               	clrf	nrf24l01Send@data
  1978  03DA  30E2               	movlw	226
  1979  03DB  26D8               	fcall	_nrf24l01Send
  1980  03DC  0008               	return
  1981  03DD                     __end_of_nrf24l01InitRegisters:	
  1982                           
  1983                           	psect	text4
  1984  0063                     __ptext4:	
  1985 ;; *************** function _loop *****************
  1986 ;; Defined at:
  1987 ;;		line 81 in file "main.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMMON   BANK0   BANK1
  2001 ;;      Params:         0       0       0
  2002 ;;      Locals:         0       0       0
  2003 ;;      Temps:          0       2       0
  2004 ;;      Totals:         0       2       0
  2005 ;;Total ram usage:        2 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    8
  2008 ;; This function calls:
  2009 ;;		___aldiv
  2010 ;;		___altoft
  2011 ;;		___ftdiv
  2012 ;;		___fttol
  2013 ;;		_itoa
  2014 ;;		_nrf24l01SendEnd
  2015 ;;		_nrf24l01SendFlash
  2016 ;;		_nrf24l01SendStart
  2017 ;;		_nrf24l01SendString
  2018 ;;		_read_flashmem
  2019 ;;		_startADC
  2020 ;; This function is called by:
  2021 ;;		_main
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           
  2026                           ;psect for function _loop
  2027  0063                     _loop:	
  2028                           
  2029                           ;main.c: 83: if (mode != 1) {
  2030                           
  2031                           ;incstack = 0
  2032                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2033  0063  037D               	decf	_mode,w
  2034  0064  1903               	btfsc	3,2
  2035  0065  299A               	goto	l1898
  2036  0066  0064               	clrwdt	;# 
  2037                           
  2038                           ;main.c: 85: }
  2039                           ;main.c: 87: switch (mode){
  2040  0067  299A               	goto	l1898
  2041  0068                     l95:	
  2042                           ;main.c: 89: case 1:
  2043                           
  2044  0068  0063               	sleep	;# 
  2045                           
  2046                           ;main.c: 92: __nop();
  2047  0069  0000               	nop
  2048                           
  2049                           ;main.c: 93: __nop();
  2050  006A  0000               	nop
  2051                           
  2052                           ;main.c: 94: if (!STATUSbits.nTO && !STATUSbits.nPD){
  2053  006B  0020               	movlb	0	; select bank0
  2054  006C  1A03               	btfsc	3,4	;volatile
  2055  006D  0008               	return
  2056  006E  1983               	btfsc	3,3	;volatile
  2057  006F  0008               	return
  2058                           
  2059                           ;main.c: 95: mode = nextMode;
  2060  0070  0863               	movf	_nextMode,w
  2061  0071  00CE               	movwf	??_loop
  2062  0072  084E               	movf	??_loop,w
  2063  0073  00FD               	movwf	_mode
  2064                           
  2065                           ;main.c: 96: }
  2066                           ;main.c: 97: break;
  2067  0074  0008               	return
  2068  0075                     l1830:	
  2069                           ;main.c: 99: case 10:
  2070                           
  2071                           
  2072                           ;main.c: 102: itoa(buffer, read_flashmem(16), 10);
  2073  0075  3010               	movlw	16
  2074  0076  0020               	movlb	0	; select bank0
  2075  0077  00A0               	movwf	read_flashmem@offset
  2076  0078  3000               	movlw	0
  2077  0079  00A1               	movwf	read_flashmem@offset+1
  2078  007A  2650               	fcall	_read_flashmem
  2079  007B  0020               	movlb	0	; select bank0
  2080  007C  0821               	movf	?_read_flashmem+1,w
  2081  007D  00B2               	movwf	itoa@val+1
  2082  007E  0820               	movf	?_read_flashmem,w
  2083  007F  00B1               	movwf	itoa@val
  2084  0080  300A               	movlw	10
  2085  0081  00B3               	movwf	itoa@base
  2086  0082  3000               	movlw	0
  2087  0083  00B4               	movwf	itoa@base+1
  2088  0084  305A               	movlw	(low (_buffer| 0))& (0+255)
  2089  0085  2673               	fcall	_itoa
  2090                           
  2091                           ;main.c: 105: nrf24l01SendStart();
  2092  0086  2724               	fcall	_nrf24l01SendStart
  2093                           
  2094                           ;main.c: 106: nrf24l01SendFlash(0);
  2095  0087  3000               	movlw	0
  2096  0088  2696               	fcall	_nrf24l01SendFlash
  2097                           
  2098                           ;main.c: 107: nrf24l01SendString( (char *) "/BOOT/");
  2099  0089  30FF               	movlw	low (STR_1| (0+32768))
  2100  008A  0020               	movlb	0	; select bank0
  2101  008B  00A0               	movwf	nrf24l01SendString@string
  2102  008C  3086               	movlw	high (STR_1| (0+32768))
  2103  008D  00A1               	movwf	nrf24l01SendString@string+1
  2104  008E  262D               	fcall	_nrf24l01SendString
  2105                           
  2106                           ;main.c: 108: nrf24l01SendString(buffer);
  2107  008F  305A               	movlw	low _buffer
  2108  0090  0020               	movlb	0	; select bank0
  2109  0091  00A0               	movwf	nrf24l01SendString@string
  2110  0092  3000               	movlw	high _buffer
  2111  0093  00A1               	movwf	nrf24l01SendString@string+1
  2112  0094  262D               	fcall	_nrf24l01SendString
  2113                           
  2114                           ;main.c: 109: nrf24l01SendEnd();
  2115  0095  26E7               	fcall	_nrf24l01SendEnd
  2116                           
  2117                           ;main.c: 111: mode = 11;
  2118  0096  300B               	movlw	11
  2119  0097  0020               	movlb	0	; select bank0
  2120  0098  00CE               	movwf	??_loop
  2121  0099  084E               	movf	??_loop,w
  2122  009A  00FD               	movwf	_mode
  2123                           
  2124                           ;main.c: 112: break;
  2125  009B  0008               	return
  2126  009C                     l99:	
  2127                           ;main.c: 115: case 11:
  2128                           
  2129                           
  2130                           ;main.c: 116: mode = 1;
  2131  009C  01FD               	clrf	_mode
  2132  009D  0AFD               	incf	_mode,f
  2133                           
  2134                           ;main.c: 117: nextMode = 12;
  2135  009E  300C               	movlw	12
  2136  009F  0020               	movlb	0	; select bank0
  2137  00A0  00CE               	movwf	??_loop
  2138  00A1  084E               	movf	??_loop,w
  2139  00A2  00E3               	movwf	_nextMode
  2140                           
  2141                           ;main.c: 118: break;
  2142  00A3  0008               	return
  2143  00A4                     l1846:	
  2144                           ;main.c: 120: case 12:
  2145                           
  2146                           
  2147                           ;main.c: 121: startADC(3);
  2148  00A4  3003               	movlw	3
  2149  00A5  25AC               	fcall	_startADC
  2150                           
  2151                           ;main.c: 122: nextMode = 13;
  2152  00A6  300D               	movlw	13
  2153  00A7  0020               	movlb	0	; select bank0
  2154  00A8  00CE               	movwf	??_loop
  2155  00A9  084E               	movf	??_loop,w
  2156  00AA  00E3               	movwf	_nextMode
  2157                           
  2158                           ;main.c: 123: break;
  2159  00AB  0008               	return
  2160  00AC                     l1850:	
  2161                           ;main.c: 125: case 13:
  2162                           
  2163                           
  2164                           ;main.c: 126: startADC(7);
  2165  00AC  3007               	movlw	7
  2166  00AD  25AC               	fcall	_startADC
  2167                           
  2168                           ;main.c: 127: nextMode = 15;
  2169  00AE  300F               	movlw	15
  2170  00AF  0020               	movlb	0	; select bank0
  2171  00B0  00CE               	movwf	??_loop
  2172  00B1  084E               	movf	??_loop,w
  2173  00B2  00E3               	movwf	_nextMode
  2174                           
  2175                           ;main.c: 128: break;
  2176  00B3  0008               	return
  2177  00B4                     l1854:	
  2178                           ;main.c: 130: case 15:
  2179                           
  2180                           
  2181                           ;main.c: 131: startADC(29);
  2182  00B4  301D               	movlw	29
  2183  00B5  25AC               	fcall	_startADC
  2184                           
  2185                           ;main.c: 132: nextMode = 14;
  2186  00B6  300E               	movlw	14
  2187  00B7  0020               	movlb	0	; select bank0
  2188  00B8  00CE               	movwf	??_loop
  2189  00B9  084E               	movf	??_loop,w
  2190  00BA  00E3               	movwf	_nextMode
  2191                           
  2192                           ;main.c: 133: break;
  2193  00BB  0008               	return
  2194  00BC                     l1858:	
  2195                           ;main.c: 135: case 14:
  2196                           
  2197                           
  2198                           ;main.c: 136: startADC(31);
  2199  00BC  301F               	movlw	31
  2200  00BD  25AC               	fcall	_startADC
  2201                           
  2202                           ;main.c: 137: nextMode = 11;
  2203  00BE  300B               	movlw	11
  2204  00BF  0020               	movlb	0	; select bank0
  2205  00C0  00CE               	movwf	??_loop
  2206  00C1  084E               	movf	??_loop,w
  2207  00C2  00E3               	movwf	_nextMode
  2208                           
  2209                           ;main.c: 138: break;
  2210  00C3  0008               	return
  2211  00C4                     l1862:	
  2212                           ;main.c: 143: case 3:
  2213                           
  2214                           ;main.c: 142: switch (ADCON0bits.CHS){
  2215                           
  2216                           ;main.c: 140: case 3:
  2217                           
  2218                           
  2219                           ;main.c: 144: adcSum= (long) (( (float) adcSum) / 25.05);
  2220  00C4  0020               	movlb	0	; select bank0
  2221  00C5  0856               	movf	_adcSum+3,w
  2222  00C6  00AB               	movwf	___altoft@c+3
  2223  00C7  0855               	movf	_adcSum+2,w
  2224  00C8  00AA               	movwf	___altoft@c+2
  2225  00C9  0854               	movf	_adcSum+1,w
  2226  00CA  00A9               	movwf	___altoft@c+1
  2227  00CB  0853               	movf	_adcSum,w
  2228  00CC  00A8               	movwf	___altoft@c
  2229  00CD  253B               	fcall	___altoft
  2230  00CE  0020               	movlb	0	; select bank0
  2231  00CF  0828               	movf	?___altoft,w
  2232  00D0  00B3               	movwf	___ftdiv@f1
  2233  00D1  0829               	movf	?___altoft+1,w
  2234  00D2  00B4               	movwf	___ftdiv@f1+1
  2235  00D3  082A               	movf	?___altoft+2,w
  2236  00D4  00B5               	movwf	___ftdiv@f1+2
  2237  00D5  3066               	movlw	102
  2238  00D6  00B0               	movwf	___ftdiv@f2
  2239  00D7  30C8               	movlw	200
  2240  00D8  28F6               	goto	L6
  2241  00D9                     l1864:	
  2242                           ;main.c: 147: case 7:
  2243                           
  2244                           ;main.c: 145: break;
  2245                           
  2246                           
  2247                           ;main.c: 148: adcSum/= 25;
  2248  00D9  3000               	movlw	0
  2249  00DA  0020               	movlb	0	; select bank0
  2250  00DB  00A3               	movwf	___aldiv@divisor+3
  2251  00DC  3000               	movlw	0
  2252  00DD  00A2               	movwf	___aldiv@divisor+2
  2253  00DE  3000               	movlw	0
  2254  00DF  00A1               	movwf	___aldiv@divisor+1
  2255  00E0  3019               	movlw	25
  2256  00E1  2937               	goto	L4
  2257  00E2                     l1866:	
  2258                           ;main.c: 151: case 31:
  2259                           
  2260                           ;main.c: 149: break;
  2261                           
  2262                           
  2263                           ;main.c: 152: adcSum= (long) (( (float) adcSum) / 24.8);
  2264  00E2  0020               	movlb	0	; select bank0
  2265  00E3  0856               	movf	_adcSum+3,w
  2266  00E4  00AB               	movwf	___altoft@c+3
  2267  00E5  0855               	movf	_adcSum+2,w
  2268  00E6  00AA               	movwf	___altoft@c+2
  2269  00E7  0854               	movf	_adcSum+1,w
  2270  00E8  00A9               	movwf	___altoft@c+1
  2271  00E9  0853               	movf	_adcSum,w
  2272  00EA  00A8               	movwf	___altoft@c
  2273  00EB  253B               	fcall	___altoft
  2274  00EC  0020               	movlb	0	; select bank0
  2275  00ED  0828               	movf	?___altoft,w
  2276  00EE  00B3               	movwf	___ftdiv@f1
  2277  00EF  0829               	movf	?___altoft+1,w
  2278  00F0  00B4               	movwf	___ftdiv@f1+1
  2279  00F1  082A               	movf	?___altoft+2,w
  2280  00F2  00B5               	movwf	___ftdiv@f1+2
  2281  00F3  3066               	movlw	102
  2282  00F4  00B0               	movwf	___ftdiv@f2
  2283  00F5  30C6               	movlw	198
  2284  00F6                     L6:	
  2285  00F6  00B1               	movwf	___ftdiv@f2+1
  2286  00F7  3041               	movlw	65
  2287  00F8  00B2               	movwf	___ftdiv@f2+2
  2288  00F9  21B5               	fcall	___ftdiv
  2289  00FA  0020               	movlb	0	; select bank0
  2290  00FB  0830               	movf	?___ftdiv,w
  2291  00FC  00C0               	movwf	___fttol@f1
  2292  00FD  0831               	movf	?___ftdiv+1,w
  2293  00FE  00C1               	movwf	___fttol@f1+1
  2294  00FF  0832               	movf	?___ftdiv+2,w
  2295  0100  00C2               	movwf	___fttol@f1+2
  2296  0101  225D               	fcall	___fttol
  2297  0102  0020               	movlb	0	; select bank0
  2298  0103  0843               	movf	?___fttol+3,w
  2299  0104  00D6               	movwf	_adcSum+3
  2300  0105  0842               	movf	?___fttol+2,w
  2301  0106  00D5               	movwf	_adcSum+2
  2302  0107  0841               	movf	?___fttol+1,w
  2303  0108  00D4               	movwf	_adcSum+1
  2304  0109  0840               	movf	?___fttol,w
  2305  010A  2949               	goto	L3
  2306  010B                     l1868:	
  2307                           ;main.c: 155: case 29:
  2308                           
  2309                           ;main.c: 153: break;
  2310                           
  2311                           
  2312                           ;main.c: 156: adcSum/= 2089;
  2313  010B  3000               	movlw	0
  2314  010C  0020               	movlb	0	; select bank0
  2315  010D  00A3               	movwf	___aldiv@divisor+3
  2316  010E  3000               	movlw	0
  2317  010F  00A2               	movwf	___aldiv@divisor+2
  2318  0110  3008               	movlw	8
  2319  0111  00A1               	movwf	___aldiv@divisor+1
  2320  0112  3029               	movlw	41
  2321  0113  00A0               	movwf	___aldiv@divisor
  2322  0114  0856               	movf	_adcSum+3,w
  2323  0115  00A7               	movwf	___aldiv@dividend+3
  2324  0116  0855               	movf	_adcSum+2,w
  2325  0117  00A6               	movwf	___aldiv@dividend+2
  2326  0118  0854               	movf	_adcSum+1,w
  2327  0119  00A5               	movwf	___aldiv@dividend+1
  2328  011A  0853               	movf	_adcSum,w
  2329  011B  00A4               	movwf	___aldiv@dividend
  2330  011C  22E4               	fcall	___aldiv
  2331  011D  0020               	movlb	0	; select bank0
  2332  011E  0823               	movf	?___aldiv+3,w
  2333  011F  00D6               	movwf	_adcSum+3
  2334  0120  0822               	movf	?___aldiv+2,w
  2335  0121  00D5               	movwf	_adcSum+2
  2336  0122  0821               	movf	?___aldiv+1,w
  2337  0123  00D4               	movwf	_adcSum+1
  2338  0124  0820               	movf	?___aldiv,w
  2339  0125  00D3               	movwf	_adcSum
  2340                           
  2341                           ;main.c: 157: adcSum-= 40;
  2342  0126  30D8               	movlw	216
  2343  0127  07D3               	addwf	_adcSum,f
  2344  0128  30FF               	movlw	255
  2345  0129  3DD4               	addwfc	_adcSum+1,f
  2346  012A  30FF               	movlw	255
  2347  012B  3DD5               	addwfc	_adcSum+2,f
  2348  012C  30FF               	movlw	255
  2349  012D  3DD6               	addwfc	_adcSum+3,f
  2350                           
  2351                           ;main.c: 158: break;
  2352  012E  295C               	goto	l1878
  2353  012F                     l1872:	
  2354                           ;main.c: 160: default:
  2355                           
  2356                           
  2357                           ;main.c: 161: adcSum/= 255;
  2358  012F  3000               	movlw	0
  2359  0130  0020               	movlb	0	; select bank0
  2360  0131  00A3               	movwf	___aldiv@divisor+3
  2361  0132  3000               	movlw	0
  2362  0133  00A2               	movwf	___aldiv@divisor+2
  2363  0134  3000               	movlw	0
  2364  0135  00A1               	movwf	___aldiv@divisor+1
  2365  0136  30FF               	movlw	255
  2366  0137                     L4:	
  2367  0137  00A0               	movwf	___aldiv@divisor
  2368  0138  0856               	movf	_adcSum+3,w
  2369  0139  00A7               	movwf	___aldiv@dividend+3
  2370  013A  0855               	movf	_adcSum+2,w
  2371  013B  00A6               	movwf	___aldiv@dividend+2
  2372  013C  0854               	movf	_adcSum+1,w
  2373  013D  00A5               	movwf	___aldiv@dividend+1
  2374  013E  0853               	movf	_adcSum,w
  2375  013F  00A4               	movwf	___aldiv@dividend
  2376  0140  22E4               	fcall	___aldiv
  2377  0141  0020               	movlb	0	; select bank0
  2378  0142  0823               	movf	?___aldiv+3,w
  2379  0143  00D6               	movwf	_adcSum+3
  2380  0144  0822               	movf	?___aldiv+2,w
  2381  0145  00D5               	movwf	_adcSum+2
  2382  0146  0821               	movf	?___aldiv+1,w
  2383  0147  00D4               	movwf	_adcSum+1
  2384  0148  0820               	movf	?___aldiv,w
  2385  0149                     L3:	
  2386  0149  00D3               	movwf	_adcSum
  2387                           
  2388                           ;main.c: 163: }
  2389                           
  2390                           ;main.c: 162: break;
  2391  014A  295C               	goto	l1878
  2392  014B                     l1876:	
  2393  014B  0021               	movlb	1	; select bank1
  2394  014C  0C1D               	rrf	29,w	;volatile
  2395  014D  0C89               	rrf	9,f
  2396  014E  391F               	andlw	31
  2397                           
  2398                           ; Switch size 1, requested type "space"
  2399                           ; Number of cases is 4, Range of values is 3 to 31
  2400                           ; switch strategies available:
  2401                           ; Name         Instructions Cycles
  2402                           ; simple_byte           13     7 (average)
  2403                           ; direct_byte           67     9 (fixed)
  2404                           ; jumptable            263     9 (fixed)
  2405                           ;	Chosen strategy is simple_byte
  2406  014F  3A03               	xorlw	3	; case 3
  2407  0150  1903               	skipnz
  2408  0151  28C4               	goto	l1862
  2409  0152  3A04               	xorlw	4	; case 7
  2410  0153  1903               	skipnz
  2411  0154  28D9               	goto	l1864
  2412  0155  3A1A               	xorlw	26	; case 29
  2413  0156  1903               	skipnz
  2414  0157  290B               	goto	l1868
  2415  0158  3A02               	xorlw	2	; case 31
  2416  0159  1903               	skipnz
  2417  015A  28E2               	goto	l1866
  2418  015B  292F               	goto	l1872
  2419  015C                     l1878:	
  2420                           
  2421                           ;main.c: 166: itoa(buffer, adcSum, 10);
  2422  015C  0020               	movlb	0	; select bank0
  2423  015D  0854               	movf	_adcSum+1,w
  2424  015E  00B2               	movwf	itoa@val+1
  2425  015F  0853               	movf	_adcSum,w
  2426  0160  00B1               	movwf	itoa@val
  2427  0161  300A               	movlw	10
  2428  0162  00B3               	movwf	itoa@base
  2429  0163  3000               	movlw	0
  2430  0164  00B4               	movwf	itoa@base+1
  2431  0165  305A               	movlw	(low (_buffer| 0))& (0+255)
  2432  0166  2673               	fcall	_itoa
  2433                           
  2434                           ;main.c: 167: itoa(byte, ADCON0bits.CHS, 10);
  2435  0167  0021               	movlb	1	; select bank1
  2436  0168  0C1D               	rrf	29,w	;volatile
  2437  0169  0C89               	rrf	9,f
  2438  016A  391F               	andlw	31
  2439  016B  0020               	movlb	0	; select bank0
  2440  016C  00CE               	movwf	??_loop
  2441  016D  01CF               	clrf	??_loop+1
  2442  016E  084E               	movf	??_loop,w
  2443  016F  00B1               	movwf	itoa@val
  2444  0170  084F               	movf	??_loop+1,w
  2445  0171  00B2               	movwf	itoa@val+1
  2446  0172  300A               	movlw	10
  2447  0173  00B3               	movwf	itoa@base
  2448  0174  3000               	movlw	0
  2449  0175  00B4               	movwf	itoa@base+1
  2450  0176  3060               	movlw	(low (_byte| 0))& (0+255)
  2451  0177  2673               	fcall	_itoa
  2452                           
  2453                           ;main.c: 169: nrf24l01SendStart();
  2454  0178  2724               	fcall	_nrf24l01SendStart
  2455                           
  2456                           ;main.c: 170: nrf24l01SendFlash(0);
  2457  0179  3000               	movlw	0
  2458  017A  2696               	fcall	_nrf24l01SendFlash
  2459                           
  2460                           ;main.c: 171: nrf24l01SendString((char *) "/ADC");
  2461  017B  301F               	movlw	low (STR_2| (0+32768))
  2462  017C  0020               	movlb	0	; select bank0
  2463  017D  00A0               	movwf	nrf24l01SendString@string
  2464  017E  3087               	movlw	high (STR_2| (0+32768))
  2465  017F  00A1               	movwf	nrf24l01SendString@string+1
  2466  0180  262D               	fcall	_nrf24l01SendString
  2467                           
  2468                           ;main.c: 172: nrf24l01SendString(byte);
  2469  0181  3060               	movlw	low _byte
  2470  0182  0020               	movlb	0	; select bank0
  2471  0183  00A0               	movwf	nrf24l01SendString@string
  2472  0184  3000               	movlw	high _byte
  2473  0185  00A1               	movwf	nrf24l01SendString@string+1
  2474  0186  262D               	fcall	_nrf24l01SendString
  2475                           
  2476                           ;main.c: 173: nrf24l01SendString((char *) "/");
  2477  0187  3004               	movlw	low ((STR_1+5)| (0+32768))
  2478  0188  0020               	movlb	0	; select bank0
  2479  0189  00A0               	movwf	nrf24l01SendString@string
  2480  018A  3087               	movlw	high ((STR_1+5)| (0+32768))
  2481  018B  00A1               	movwf	nrf24l01SendString@string+1
  2482  018C  262D               	fcall	_nrf24l01SendString
  2483                           
  2484                           ;main.c: 174: nrf24l01SendString(buffer);
  2485  018D  305A               	movlw	low _buffer
  2486  018E  0020               	movlb	0	; select bank0
  2487  018F  00A0               	movwf	nrf24l01SendString@string
  2488  0190  3000               	movlw	high _buffer
  2489  0191  00A1               	movwf	nrf24l01SendString@string+1
  2490  0192  262D               	fcall	_nrf24l01SendString
  2491                           
  2492                           ;main.c: 176: nrf24l01SendEnd();
  2493  0193  26E7               	fcall	_nrf24l01SendEnd
  2494                           
  2495                           ;main.c: 178: mode = nextMode;
  2496  0194  0020               	movlb	0	; select bank0
  2497  0195  0863               	movf	_nextMode,w
  2498  0196  00CE               	movwf	??_loop
  2499  0197  084E               	movf	??_loop,w
  2500  0198  00FD               	movwf	_mode
  2501                           
  2502                           ;main.c: 181: }
  2503                           
  2504                           ;main.c: 179: break;
  2505  0199  0008               	return
  2506  019A                     l1898:	
  2507  019A  087D               	movf	_mode,w
  2508                           
  2509                           ; Switch size 1, requested type "space"
  2510                           ; Number of cases is 8, Range of values is 1 to 15
  2511                           ; switch strategies available:
  2512                           ; Name         Instructions Cycles
  2513                           ; simple_byte           25    13 (average)
  2514                           ; direct_byte           39     9 (fixed)
  2515                           ; jumptable            263     9 (fixed)
  2516                           ;	Chosen strategy is simple_byte
  2517  019B  3A01               	xorlw	1	; case 1
  2518  019C  1903               	skipnz
  2519  019D  2868               	goto	l95
  2520  019E  3A02               	xorlw	2	; case 3
  2521  019F  1903               	skipnz
  2522  01A0  294B               	goto	l1876
  2523  01A1  3A09               	xorlw	9	; case 10
  2524  01A2  1903               	skipnz
  2525  01A3  2875               	goto	l1830
  2526  01A4  3A01               	xorlw	1	; case 11
  2527  01A5  1903               	skipnz
  2528  01A6  289C               	goto	l99
  2529  01A7  3A07               	xorlw	7	; case 12
  2530  01A8  1903               	skipnz
  2531  01A9  28A4               	goto	l1846
  2532  01AA  3A01               	xorlw	1	; case 13
  2533  01AB  1903               	skipnz
  2534  01AC  28AC               	goto	l1850
  2535  01AD  3A03               	xorlw	3	; case 14
  2536  01AE  1903               	skipnz
  2537  01AF  28BC               	goto	l1858
  2538  01B0  3A01               	xorlw	1	; case 15
  2539  01B1  1903               	skipnz
  2540  01B2  28B4               	goto	l1854
  2541  01B3  29B4               	goto	l112
  2542  01B4                     l112:	
  2543  01B4  0008               	return
  2544  01B5                     __end_of_loop:	
  2545                           
  2546                           	psect	text5
  2547  05AC                     __ptext5:	
  2548 ;; *************** function _startADC *****************
  2549 ;; Defined at:
  2550 ;;		line 69 in file "main.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;  channel         1    wreg     unsigned char 
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;  channel         1    1[BANK0 ] unsigned char 
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  1    wreg      void 
  2557 ;; Registers used:
  2558 ;;		wreg, status,2, status,0
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMMON   BANK0   BANK1
  2564 ;;      Params:         0       0       0
  2565 ;;      Locals:         0       1       0
  2566 ;;      Temps:          0       1       0
  2567 ;;      Totals:         0       2       0
  2568 ;;Total ram usage:        2 bytes
  2569 ;; Hardware stack levels used:    1
  2570 ;; Hardware stack levels required when called:    4
  2571 ;; This function calls:
  2572 ;;		Nothing
  2573 ;; This function is called by:
  2574 ;;		_loop
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           
  2579                           ;psect for function _startADC
  2580  05AC                     _startADC:	
  2581                           
  2582                           ;incstack = 0
  2583                           ; Regs used in _startADC: [wreg+status,2+status,0]
  2584                           ;startADC@channel stored from wreg
  2585  05AC  0020               	movlb	0	; select bank0
  2586  05AD  00A1               	movwf	startADC@channel
  2587                           
  2588                           ;main.c: 70: adcSum = 0;
  2589  05AE  3000               	movlw	0
  2590  05AF  00D6               	movwf	_adcSum+3
  2591  05B0  3000               	movlw	0
  2592  05B1  00D5               	movwf	_adcSum+2
  2593  05B2  3000               	movlw	0
  2594  05B3  00D4               	movwf	_adcSum+1
  2595  05B4  3000               	movlw	0
  2596  05B5  00D3               	movwf	_adcSum
  2597                           
  2598                           ;main.c: 71: adcLoop = 255;
  2599  05B6  30FF               	movlw	255
  2600  05B7  00A0               	movwf	??_startADC
  2601  05B8  0820               	movf	??_startADC,w
  2602  05B9  00D9               	movwf	_adcLoop
  2603                           
  2604                           ;main.c: 73: if (ADCON0bits.CHS != channel) {
  2605  05BA  0021               	movlb	1	; select bank1
  2606  05BB  0C1D               	rrf	29,w	;volatile
  2607  05BC  0C89               	rrf	9,f
  2608  05BD  391F               	andlw	31
  2609  05BE  0020               	movlb	0	; select bank0
  2610  05BF  0621               	xorwf	startADC@channel,w
  2611  05C0  1903               	skipnz
  2612  05C1  2DD2               	goto	l1526
  2613                           
  2614                           ;main.c: 74: ADCON0bits.CHS = channel;
  2615  05C2  0821               	movf	startADC@channel,w
  2616  05C3  00A0               	movwf	??_startADC
  2617  05C4  0DA0               	rlf	??_startADC,f
  2618  05C5  0DA0               	rlf	??_startADC,f
  2619  05C6  0021               	movlb	1	; select bank1
  2620  05C7  081D               	movf	29,w	;volatile
  2621  05C8  0020               	movlb	0	; select bank0
  2622  05C9  0620               	xorwf	??_startADC,w
  2623  05CA  3983               	andlw	-125
  2624  05CB  0620               	xorwf	??_startADC,w
  2625  05CC  0021               	movlb	1	; select bank1
  2626  05CD  009D               	movwf	29	;volatile
  2627                           
  2628                           ;main.c: 75: _delay((unsigned long)((200)*(16000000/4000000.0)));
  2629  05CE  30A0               	movlw	160
  2630  05CF                     u1537:	
  2631  05CF  3200               	nop2
  2632  05D0  0B89               	decfsz	9,f
  2633  05D1  2DCF               	goto	u1537
  2634  05D2                     l1526:	
  2635                           
  2636                           ;main.c: 76: }
  2637                           ;main.c: 78: ADCON0bits.ADGO = 1;
  2638  05D2  0021               	movlb	1	; select bank1
  2639  05D3  149D               	bsf	29,1	;volatile
  2640                           
  2641                           ;main.c: 79: mode = 2;
  2642  05D4  3002               	movlw	2
  2643  05D5  0020               	movlb	0	; select bank0
  2644  05D6  00A0               	movwf	??_startADC
  2645  05D7  0820               	movf	??_startADC,w
  2646  05D8  00FD               	movwf	_mode
  2647  05D9  0008               	return
  2648  05DA                     __end_of_startADC:	
  2649                           
  2650                           	psect	text6
  2651  062D                     __ptext6:	
  2652 ;; *************** function _nrf24l01SendString *****************
  2653 ;; Defined at:
  2654 ;;		line 101 in file "nrf24l01.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;  string          2    0[BANK0 ] PTR unsigned char 
  2657 ;;		 -> STR_3(2), STR_2(5), byte(3), STR_1(7), 
  2658 ;;		 -> buffer(6), 
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;  i               1    5[BANK0 ] unsigned char 
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      void 
  2663 ;; Registers used:
  2664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMMON   BANK0   BANK1
  2670 ;;      Params:         0       2       0
  2671 ;;      Locals:         0       1       0
  2672 ;;      Temps:          0       3       0
  2673 ;;      Totals:         0       6       0
  2674 ;;Total ram usage:        6 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; Hardware stack levels required when called:    5
  2677 ;; This function calls:
  2678 ;;		_nrf24l01SPISend
  2679 ;; This function is called by:
  2680 ;;		_loop
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           
  2685                           ;psect for function _nrf24l01SendString
  2686  062D                     _nrf24l01SendString:	
  2687                           
  2688                           ;nrf24l01.c: 102: unsigned char i;
  2689                           ;nrf24l01.c: 103: for (i = 0; string[i] != '\0'; i++){
  2690                           
  2691                           ;incstack = 0
  2692                           ; Regs used in _nrf24l01SendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2693  062D  0020               	movlb	0	; select bank0
  2694  062E  01A5               	clrf	nrf24l01SendString@i
  2695  062F                     l1566:	
  2696  062F  0821               	movf	nrf24l01SendString@string+1,w
  2697  0630  00A3               	movwf	??_nrf24l01SendString+1
  2698  0631  0820               	movf	nrf24l01SendString@string,w
  2699  0632  00A2               	movwf	??_nrf24l01SendString
  2700  0633  0825               	movf	nrf24l01SendString@i,w
  2701  0634  0722               	addwf	??_nrf24l01SendString,w
  2702  0635  0084               	movwf	4
  2703  0636  0823               	movf	??_nrf24l01SendString+1,w
  2704  0637  1803               	skipnc
  2705  0638  0A23               	incf	??_nrf24l01SendString+1,w
  2706  0639  0085               	movwf	5
  2707  063A  0012               	moviw fsr0++
  2708  063B  1903               	btfsc	3,2
  2709  063C  0008               	return
  2710                           
  2711                           ;nrf24l01.c: 104: nrf24l01SPISend(string[i]);
  2712  063D  0821               	movf	nrf24l01SendString@string+1,w
  2713  063E  00A3               	movwf	??_nrf24l01SendString+1
  2714  063F  0820               	movf	nrf24l01SendString@string,w
  2715  0640  00A2               	movwf	??_nrf24l01SendString
  2716  0641  0825               	movf	nrf24l01SendString@i,w
  2717  0642  0722               	addwf	??_nrf24l01SendString,w
  2718  0643  0084               	movwf	4
  2719  0644  0823               	movf	??_nrf24l01SendString+1,w
  2720  0645  1803               	skipnc
  2721  0646  0A23               	incf	??_nrf24l01SendString+1,w
  2722  0647  0085               	movwf	5
  2723  0648  0800               	movf	0,w	;code access
  2724  0649  26F4               	fcall	_nrf24l01SPISend
  2725  064A  3001               	movlw	1
  2726  064B  0020               	movlb	0	; select bank0
  2727  064C  00A2               	movwf	??_nrf24l01SendString
  2728  064D  0822               	movf	??_nrf24l01SendString,w
  2729  064E  07A5               	addwf	nrf24l01SendString@i,f
  2730  064F  2E2F               	goto	l1566
  2731  0650                     __end_of_nrf24l01SendString:	
  2732                           
  2733                           	psect	text7
  2734  0724                     __ptext7:	
  2735 ;; *************** function _nrf24l01SendStart *****************
  2736 ;; Defined at:
  2737 ;;		line 92 in file "nrf24l01.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;		None
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;		None
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  1    wreg      void 
  2744 ;; Registers used:
  2745 ;;		wreg, status,2, status,0, pclath, cstack
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMMON   BANK0   BANK1
  2751 ;;      Params:         0       0       0
  2752 ;;      Locals:         0       0       0
  2753 ;;      Temps:          0       0       0
  2754 ;;      Totals:         0       0       0
  2755 ;;Total ram usage:        0 bytes
  2756 ;; Hardware stack levels used:    1
  2757 ;; Hardware stack levels required when called:    7
  2758 ;; This function calls:
  2759 ;;		_nrf24l01SPISend
  2760 ;;		_nrf24l01SPIStart
  2761 ;;		_nrf24l01SetTransmitMode
  2762 ;; This function is called by:
  2763 ;;		_loop
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           
  2768                           ;psect for function _nrf24l01SendStart
  2769  0724                     _nrf24l01SendStart:	
  2770                           
  2771                           ;nrf24l01.c: 94: nrf24l01SetTransmitMode();
  2772                           
  2773                           ;incstack = 0
  2774                           ; Regs used in _nrf24l01SendStart: [wreg+status,2+status,0+pclath+cstack]
  2775  0724  26B1               	fcall	_nrf24l01SetTransmitMode
  2776                           
  2777                           ;nrf24l01.c: 96: nrf24l01SPIStart();
  2778  0725  2706               	fcall	_nrf24l01SPIStart
  2779                           
  2780                           ;nrf24l01.c: 98: nrf24l01SPISend(0b10100000);
  2781  0726  30A0               	movlw	160
  2782  0727  26F4               	fcall	_nrf24l01SPISend
  2783  0728  0008               	return
  2784  0729                     __end_of_nrf24l01SendStart:	
  2785                           
  2786                           	psect	text8
  2787  06B1                     __ptext8:	
  2788 ;; *************** function _nrf24l01SetTransmitMode *****************
  2789 ;; Defined at:
  2790 ;;		line 62 in file "nrf24l01.c"
  2791 ;; Parameters:    Size  Location     Type
  2792 ;;		None
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;  config          1    1[BANK0 ] struct .
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  1    wreg      void 
  2797 ;; Registers used:
  2798 ;;		wreg, status,2, status,0, pclath, cstack
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMMON   BANK0   BANK1
  2804 ;;      Params:         0       0       0
  2805 ;;      Locals:         0       1       0
  2806 ;;      Temps:          0       1       0
  2807 ;;      Totals:         0       2       0
  2808 ;;Total ram usage:        2 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    6
  2811 ;; This function calls:
  2812 ;;		_nrf24l01Send
  2813 ;; This function is called by:
  2814 ;;		_nrf24l01SendStart
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           
  2819                           ;psect for function _nrf24l01SetTransmitMode
  2820  06B1                     _nrf24l01SetTransmitMode:	
  2821                           
  2822                           ;nrf24l01.c: 64: PORTAbits.RA0 = 0;
  2823                           
  2824                           ;incstack = 0
  2825                           ; Regs used in _nrf24l01SetTransmitMode: [wreg+status,2+status,0+pclath+cstack]
  2826  06B1  0020               	movlb	0	; select bank0
  2827  06B2  100C               	bcf	12,0	;volatile
  2828                           
  2829                           ;nrf24l01.c: 66: n_CONFIG_t config;
  2830                           ;nrf24l01.c: 67: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  2831  06B3  01F1               	clrf	nrf24l01Send@data
  2832  06B4  3000               	movlw	0
  2833  06B5  26D8               	fcall	_nrf24l01Send
  2834  06B6  0020               	movlb	0	; select bank0
  2835  06B7  00A0               	movwf	??_nrf24l01SetTransmitMode
  2836  06B8  0820               	movf	??_nrf24l01SetTransmitMode,w
  2837  06B9  00A1               	movwf	nrf24l01SetTransmitMode@config
  2838                           
  2839                           ;nrf24l01.c: 68: if (config.PRIM_RX == 1){
  2840  06BA  1C21               	btfss	nrf24l01SetTransmitMode@config,0
  2841  06BB  0008               	return
  2842                           
  2843                           ;nrf24l01.c: 69: config.PRIM_RX = 0;
  2844  06BC  1021               	bcf	nrf24l01SetTransmitMode@config,0
  2845                           
  2846                           ;nrf24l01.c: 70: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2847  06BD  0821               	movf	nrf24l01SetTransmitMode@config,w
  2848  06BE  00A0               	movwf	??_nrf24l01SetTransmitMode
  2849  06BF  0820               	movf	??_nrf24l01SetTransmitMode,w
  2850  06C0  00F1               	movwf	nrf24l01Send@data
  2851  06C1  3020               	movlw	32
  2852  06C2  26D8               	fcall	_nrf24l01Send
  2853                           
  2854                           ;nrf24l01.c: 71: _delay((unsigned long)((130)*(16000000/4000000.0)));
  2855  06C3  30AD               	movlw	173
  2856  06C4                     u1547:	
  2857  06C4  0B89               	decfsz	9,f
  2858  06C5  2EC4               	goto	u1547
  2859  06C6  0000               	nop
  2860  06C7  0008               	return
  2861  06C8                     __end_of_nrf24l01SetTransmitMode:	
  2862                           
  2863                           	psect	text9
  2864  0696                     __ptext9:	
  2865 ;; *************** function _nrf24l01SendFlash *****************
  2866 ;; Defined at:
  2867 ;;		line 108 in file "nrf24l01.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  offset          1    wreg     unsigned char 
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;  offset          1    7[BANK0 ] unsigned char 
  2872 ;;  btye            1    9[BANK0 ] unsigned char 
  2873 ;;  i               1    8[BANK0 ] unsigned char 
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  1    wreg      void 
  2876 ;; Registers used:
  2877 ;;		wreg, status,2, status,0, pclath, cstack
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMMON   BANK0   BANK1
  2883 ;;      Params:         0       0       0
  2884 ;;      Locals:         0       3       0
  2885 ;;      Temps:          0       1       0
  2886 ;;      Totals:         0       4       0
  2887 ;;Total ram usage:        4 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    5
  2890 ;; This function calls:
  2891 ;;		_nrf24l01SPISend
  2892 ;;		_read_flashmem
  2893 ;; This function is called by:
  2894 ;;		_loop
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           
  2899                           ;psect for function _nrf24l01SendFlash
  2900  0696                     _nrf24l01SendFlash:	
  2901                           
  2902                           ;incstack = 0
  2903                           ; Regs used in _nrf24l01SendFlash: [wreg+status,2+status,0+pclath+cstack]
  2904                           ;nrf24l01SendFlash@offset stored from wreg
  2905  0696  0020               	movlb	0	; select bank0
  2906  0697  00A7               	movwf	nrf24l01SendFlash@offset
  2907                           
  2908                           ;nrf24l01.c: 110: unsigned char btye = 1;
  2909  0698  01A9               	clrf	nrf24l01SendFlash@btye
  2910  0699  0AA9               	incf	nrf24l01SendFlash@btye,f
  2911                           
  2912                           ;nrf24l01.c: 111: unsigned char i = 0;
  2913  069A  01A8               	clrf	nrf24l01SendFlash@i
  2914  069B                     l1550:	
  2915                           ;nrf24l01.c: 113: while (1){
  2916                           
  2917                           
  2918                           ;nrf24l01.c: 114: btye = read_flashmem((unsigned) (offset + i));
  2919  069B  0827               	movf	nrf24l01SendFlash@offset,w
  2920  069C  0728               	addwf	nrf24l01SendFlash@i,w
  2921  069D  00A0               	movwf	read_flashmem@offset
  2922  069E  01A1               	clrf	read_flashmem@offset+1
  2923  069F  0DA1               	rlf	read_flashmem@offset+1,f
  2924  06A0  2650               	fcall	_read_flashmem
  2925  06A1  0020               	movlb	0	; select bank0
  2926  06A2  0820               	movf	?_read_flashmem,w
  2927  06A3  00A6               	movwf	??_nrf24l01SendFlash
  2928  06A4  0826               	movf	??_nrf24l01SendFlash,w
  2929  06A5  00A9               	movwf	nrf24l01SendFlash@btye
  2930                           
  2931                           ;nrf24l01.c: 116: if (btye == '\0'){
  2932  06A6  0829               	movf	nrf24l01SendFlash@btye,w
  2933  06A7  1903               	btfsc	3,2
  2934  06A8  0008               	return
  2935                           
  2936                           ;nrf24l01.c: 118: }
  2937                           ;nrf24l01.c: 120: nrf24l01SPISend(btye);
  2938                           
  2939                           ;nrf24l01.c: 117: break;
  2940  06A9  0829               	movf	nrf24l01SendFlash@btye,w
  2941  06AA  26F4               	fcall	_nrf24l01SPISend
  2942                           
  2943                           ;nrf24l01.c: 121: i++;
  2944  06AB  3001               	movlw	1
  2945  06AC  0020               	movlb	0	; select bank0
  2946  06AD  00A6               	movwf	??_nrf24l01SendFlash
  2947  06AE  0826               	movf	??_nrf24l01SendFlash,w
  2948  06AF  07A8               	addwf	nrf24l01SendFlash@i,f
  2949  06B0  2E9B               	goto	l1550
  2950  06B1                     __end_of_nrf24l01SendFlash:	
  2951                           
  2952                           	psect	text10
  2953  0650                     __ptext10:	
  2954 ;; *************** function _read_flashmem *****************
  2955 ;; Defined at:
  2956 ;;		line 58 in file "flash.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;  offset          2    0[BANK0 ] unsigned int 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;  result          2    4[BANK0 ] unsigned int 
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  2    0[BANK0 ] unsigned int 
  2963 ;; Registers used:
  2964 ;;		wreg, status,2, status,0
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMMON   BANK0   BANK1
  2970 ;;      Params:         0       2       0
  2971 ;;      Locals:         0       2       0
  2972 ;;      Temps:          0       2       0
  2973 ;;      Totals:         0       6       0
  2974 ;;Total ram usage:        6 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:    4
  2977 ;; This function calls:
  2978 ;;		Nothing
  2979 ;; This function is called by:
  2980 ;;		_loop
  2981 ;;		_main
  2982 ;;		_nrf24l01SendFlash
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           
  2987                           ;psect for function _read_flashmem
  2988  0650                     _read_flashmem:	
  2989                           
  2990                           ;flash.c: 60: INTCONbits.GIE = 0;
  2991                           
  2992                           ;incstack = 0
  2993                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  2994  0650  138B               	bcf	11,7	;volatile
  2995                           
  2996                           ;flash.c: 62: PMCON1 = 0x00;
  2997  0651  0023               	movlb	3	; select bank3
  2998  0652  0195               	clrf	21	;volatile
  2999                           
  3000                           ;flash.c: 64: PMADRL = (char) (((0x800U-32) + offset) >> 0);
  3001  0653  0020               	movlb	0	; select bank0
  3002  0654  0820               	movf	read_flashmem@offset,w
  3003  0655  3EE0               	addlw	224
  3004  0656  0023               	movlb	3	; select bank3
  3005  0657  0091               	movwf	17	;volatile
  3006                           
  3007                           ;flash.c: 65: PMADRH = (char) (((0x800U-32) + offset) >> 8);
  3008  0658  0020               	movlb	0	; select bank0
  3009  0659  0820               	movf	read_flashmem@offset,w
  3010  065A  3EE0               	addlw	224
  3011  065B  00A2               	movwf	??_read_flashmem
  3012  065C  3007               	movlw	7
  3013  065D  3D21               	addwfc	read_flashmem@offset+1,w
  3014  065E  00A3               	movwf	??_read_flashmem+1
  3015  065F  0823               	movf	??_read_flashmem+1,w
  3016  0660  0023               	movlb	3	; select bank3
  3017  0661  0092               	movwf	18	;volatile
  3018                           
  3019                           ;flash.c: 67: PMCON1bits.RD = 1;
  3020  0662  1415               	bsf	21,0	;volatile
  3021                           
  3022                           ;flash.c: 69: __nop();
  3023  0663  0000               	nop
  3024                           
  3025                           ;flash.c: 70: __nop();
  3026  0664  0000               	nop
  3027                           
  3028                           ;flash.c: 72: unsigned int result = (unsigned) ((PMDATH) << 8) | (PMDATL);
  3029  0665  0023               	movlb	3	; select bank3
  3030  0666  0814               	movf	20,w	;volatile
  3031  0667  0020               	movlb	0	; select bank0
  3032  0668  00A5               	movwf	read_flashmem@result+1
  3033  0669  0023               	movlb	3	; select bank3
  3034  066A  0813               	movf	19,w	;volatile
  3035  066B  0020               	movlb	0	; select bank0
  3036  066C  00A4               	movwf	read_flashmem@result
  3037                           
  3038                           ;flash.c: 74: INTCONbits.GIE = 1;
  3039  066D  178B               	bsf	11,7	;volatile
  3040                           
  3041                           ;flash.c: 76: return result;
  3042  066E  0825               	movf	read_flashmem@result+1,w
  3043  066F  00A1               	movwf	?_read_flashmem+1
  3044  0670  0824               	movf	read_flashmem@result,w
  3045  0671  00A0               	movwf	?_read_flashmem
  3046  0672  0008               	return
  3047  0673                     __end_of_read_flashmem:	
  3048                           
  3049                           	psect	text11
  3050  06E7                     __ptext11:	
  3051 ;; *************** function _nrf24l01SendEnd *****************
  3052 ;; Defined at:
  3053 ;;		line 125 in file "nrf24l01.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;		None
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;		None
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  1    wreg      void 
  3060 ;; Registers used:
  3061 ;;		wreg, status,2, status,0, pclath, cstack
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMMON   BANK0   BANK1
  3067 ;;      Params:         0       0       0
  3068 ;;      Locals:         0       0       0
  3069 ;;      Temps:          0       0       0
  3070 ;;      Totals:         0       0       0
  3071 ;;Total ram usage:        0 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    5
  3074 ;; This function calls:
  3075 ;;		_nrf24l01SPIEnd
  3076 ;; This function is called by:
  3077 ;;		_loop
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           
  3082                           ;psect for function _nrf24l01SendEnd
  3083  06E7                     _nrf24l01SendEnd:	
  3084                           
  3085                           ;nrf24l01.c: 127: nrf24l01SPIEnd();
  3086                           
  3087                           ;incstack = 0
  3088                           ; Regs used in _nrf24l01SendEnd: [wreg+status,2+status,0+pclath+cstack]
  3089  06E7  270D               	fcall	_nrf24l01SPIEnd
  3090                           
  3091                           ;nrf24l01.c: 129: PORTAbits.RA0 = 1;
  3092  06E8  0020               	movlb	0	; select bank0
  3093  06E9  140C               	bsf	12,0	;volatile
  3094                           
  3095                           ;nrf24l01.c: 130: _delay((unsigned long)((50)*(16000000/4000000.0)));
  3096  06EA  3042               	movlw	66
  3097  06EB                     u1557:	
  3098  06EB  0B89               	decfsz	9,f
  3099  06EC  2EEB               	goto	u1557
  3100  06ED  3200               	nop2
  3101                           
  3102                           ;nrf24l01.c: 131: PORTAbits.RA0 = 0;
  3103  06EE  0020               	movlb	0	; select bank0
  3104  06EF  100C               	bcf	12,0	;volatile
  3105  06F0  0063               	sleep	;# 
  3106                           
  3107                           ;nrf24l01.c: 135: __nop();
  3108  06F1  0000               	nop
  3109                           
  3110                           ;nrf24l01.c: 136: __nop();
  3111  06F2  0000               	nop
  3112  06F3  0008               	return
  3113  06F4                     __end_of_nrf24l01SendEnd:	
  3114                           
  3115                           	psect	text12
  3116  0673                     __ptext12:	
  3117 ;; *************** function _itoa *****************
  3118 ;; Defined at:
  3119 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;  buf             1    wreg     PTR unsigned char 
  3122 ;;		 -> byte(3), buffer(6), 
  3123 ;;  val             2   17[BANK0 ] int 
  3124 ;;  base            2   19[BANK0 ] int 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  buf             1   23[BANK0 ] PTR unsigned char 
  3127 ;;		 -> byte(3), buffer(6), 
  3128 ;;  cp              1   22[BANK0 ] PTR unsigned char 
  3129 ;;		 -> byte(3), buffer(6), 
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      PTR unsigned char 
  3132 ;; Registers used:
  3133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMMON   BANK0   BANK1
  3139 ;;      Params:         0       4       0
  3140 ;;      Locals:         0       2       0
  3141 ;;      Temps:          0       1       0
  3142 ;;      Totals:         0       7       0
  3143 ;;Total ram usage:        7 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    6
  3146 ;; This function calls:
  3147 ;;		_utoa
  3148 ;; This function is called by:
  3149 ;;		_loop
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           
  3154                           ;psect for function _itoa
  3155  0673                     _itoa:	
  3156                           
  3157                           ;incstack = 0
  3158                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3159                           ;itoa@buf stored from wreg
  3160  0673  0020               	movlb	0	; select bank0
  3161  0674  00B7               	movwf	itoa@buf
  3162  0675  0837               	movf	itoa@buf,w
  3163  0676  00B5               	movwf	??_itoa
  3164  0677  0835               	movf	??_itoa,w
  3165  0678  00B6               	movwf	itoa@cp
  3166  0679  1FB2               	btfss	itoa@val+1,7
  3167  067A  2E8B               	goto	l1540
  3168  067B  302D               	movlw	45
  3169  067C  00B5               	movwf	??_itoa
  3170  067D  0837               	movf	itoa@buf,w
  3171  067E  0086               	movwf	6
  3172  067F  0187               	clrf	7
  3173  0680  0835               	movf	??_itoa,w
  3174  0681  0081               	movwf	1
  3175  0682  3001               	movlw	1
  3176  0683  00B5               	movwf	??_itoa
  3177  0684  0835               	movf	??_itoa,w
  3178  0685  07B7               	addwf	itoa@buf,f
  3179  0686  09B1               	comf	itoa@val,f
  3180  0687  09B2               	comf	itoa@val+1,f
  3181  0688  0AB1               	incf	itoa@val,f
  3182  0689  1903               	skipnz
  3183  068A  0AB2               	incf	itoa@val+1,f
  3184  068B                     l1540:	
  3185  068B  0832               	movf	itoa@val+1,w
  3186  068C  00A9               	movwf	utoa@val+1
  3187  068D  0831               	movf	itoa@val,w
  3188  068E  00A8               	movwf	utoa@val
  3189  068F  0834               	movf	itoa@base+1,w
  3190  0690  00AB               	movwf	utoa@base+1
  3191  0691  0833               	movf	itoa@base,w
  3192  0692  00AA               	movwf	utoa@base
  3193  0693  0837               	movf	itoa@buf,w
  3194  0694  2442               	fcall	_utoa
  3195  0695  0008               	return
  3196  0696                     __end_of_itoa:	
  3197                           ;	Return value of _itoa is never used
  3198                           
  3199                           
  3200                           	psect	text13
  3201  0442                     __ptext13:	
  3202 ;; *************** function _utoa *****************
  3203 ;; Defined at:
  3204 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;  buf             1    wreg     PTR unsigned char 
  3207 ;;		 -> byte(3), buffer(6), 
  3208 ;;  val             2    8[BANK0 ] unsigned int 
  3209 ;;  base            2   10[BANK0 ] int 
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  3212 ;;		 -> byte(3), buffer(6), 
  3213 ;;  v               2   13[BANK0 ] unsigned int 
  3214 ;;  c               1   15[BANK0 ] unsigned char 
  3215 ;; Return value:  Size  Location     Type
  3216 ;;                  1    wreg      PTR unsigned char 
  3217 ;; Registers used:
  3218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3219 ;; Tracked objects:
  3220 ;;		On entry : 0/0
  3221 ;;		On exit  : 0/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMMON   BANK0   BANK1
  3224 ;;      Params:         0       4       0
  3225 ;;      Locals:         0       4       0
  3226 ;;      Temps:          0       1       0
  3227 ;;      Totals:         0       9       0
  3228 ;;Total ram usage:        9 bytes
  3229 ;; Hardware stack levels used:    1
  3230 ;; Hardware stack levels required when called:    5
  3231 ;; This function calls:
  3232 ;;		___lwdiv
  3233 ;;		___lwmod
  3234 ;; This function is called by:
  3235 ;;		_itoa
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           
  3240                           ;psect for function _utoa
  3241  0442                     _utoa:	
  3242                           
  3243                           ;incstack = 0
  3244                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3245                           ;utoa@buf stored from wreg
  3246  0442  0020               	movlb	0	; select bank0
  3247  0443  00B0               	movwf	utoa@buf
  3248  0444  0829               	movf	utoa@val+1,w
  3249  0445  00AE               	movwf	utoa@v+1
  3250  0446  0828               	movf	utoa@val,w
  3251  0447  00AD               	movwf	utoa@v
  3252  0448                     l1490:	
  3253  0448  082B               	movf	utoa@base+1,w
  3254  0449  00A1               	movwf	___lwdiv@divisor+1
  3255  044A  082A               	movf	utoa@base,w
  3256  044B  00A0               	movwf	___lwdiv@divisor
  3257  044C  082E               	movf	utoa@v+1,w
  3258  044D  00A3               	movwf	___lwdiv@dividend+1
  3259  044E  082D               	movf	utoa@v,w
  3260  044F  00A2               	movwf	___lwdiv@dividend
  3261  0450  2577               	fcall	___lwdiv
  3262  0451  0020               	movlb	0	; select bank0
  3263  0452  0821               	movf	?___lwdiv+1,w
  3264  0453  00AE               	movwf	utoa@v+1
  3265  0454  0820               	movf	?___lwdiv,w
  3266  0455  00AD               	movwf	utoa@v
  3267  0456  3001               	movlw	1
  3268  0457  00AC               	movwf	??_utoa
  3269  0458  082C               	movf	??_utoa,w
  3270  0459  07B0               	addwf	utoa@buf,f
  3271  045A  082D               	movf	utoa@v,w
  3272  045B  042E               	iorwf	utoa@v+1,w
  3273  045C  1D03               	btfss	3,2
  3274  045D  2C48               	goto	l1490
  3275  045E  0830               	movf	utoa@buf,w
  3276  045F  0086               	movwf	6
  3277  0460  0187               	clrf	7
  3278  0461  0181               	clrf	1
  3279  0462  3001               	movlw	1
  3280  0463  02B0               	subwf	utoa@buf,f
  3281  0464                     l1500:	
  3282  0464  082B               	movf	utoa@base+1,w
  3283  0465  00A1               	movwf	___lwmod@divisor+1
  3284  0466  082A               	movf	utoa@base,w
  3285  0467  00A0               	movwf	___lwmod@divisor
  3286  0468  0829               	movf	utoa@val+1,w
  3287  0469  00A3               	movwf	___lwmod@dividend+1
  3288  046A  0828               	movf	utoa@val,w
  3289  046B  00A2               	movwf	___lwmod@dividend
  3290  046C  25DA               	fcall	___lwmod
  3291  046D  0020               	movlb	0	; select bank0
  3292  046E  0820               	movf	?___lwmod,w
  3293  046F  00AC               	movwf	??_utoa
  3294  0470  082C               	movf	??_utoa,w
  3295  0471  00AF               	movwf	utoa@c
  3296  0472  082B               	movf	utoa@base+1,w
  3297  0473  00A1               	movwf	___lwdiv@divisor+1
  3298  0474  082A               	movf	utoa@base,w
  3299  0475  00A0               	movwf	___lwdiv@divisor
  3300  0476  0829               	movf	utoa@val+1,w
  3301  0477  00A3               	movwf	___lwdiv@dividend+1
  3302  0478  0828               	movf	utoa@val,w
  3303  0479  00A2               	movwf	___lwdiv@dividend
  3304  047A  2577               	fcall	___lwdiv
  3305  047B  0020               	movlb	0	; select bank0
  3306  047C  0821               	movf	?___lwdiv+1,w
  3307  047D  00A9               	movwf	utoa@val+1
  3308  047E  0820               	movf	?___lwdiv,w
  3309  047F  00A8               	movwf	utoa@val
  3310  0480  300A               	movlw	10
  3311  0481  022F               	subwf	utoa@c,w
  3312  0482  1C03               	skipc
  3313  0483  2C88               	goto	l499
  3314  0484  3007               	movlw	7
  3315  0485  00AC               	movwf	??_utoa
  3316  0486  082C               	movf	??_utoa,w
  3317  0487  07AF               	addwf	utoa@c,f
  3318  0488                     l499:	
  3319  0488  3030               	movlw	48
  3320  0489  00AC               	movwf	??_utoa
  3321  048A  082C               	movf	??_utoa,w
  3322  048B  07AF               	addwf	utoa@c,f
  3323  048C  082F               	movf	utoa@c,w
  3324  048D  00AC               	movwf	??_utoa
  3325  048E  0830               	movf	utoa@buf,w
  3326  048F  0086               	movwf	6
  3327  0490  0187               	clrf	7
  3328  0491  082C               	movf	??_utoa,w
  3329  0492  0081               	movwf	1
  3330  0493  3001               	movlw	1
  3331  0494  02B0               	subwf	utoa@buf,f
  3332  0495  0828               	movf	utoa@val,w
  3333  0496  0429               	iorwf	utoa@val+1,w
  3334  0497  1D03               	btfss	3,2
  3335  0498  2C64               	goto	l1500
  3336                           
  3337                           ;	Return value of _utoa is never used
  3338  0499  3001               	movlw	1
  3339  049A  00AC               	movwf	??_utoa
  3340  049B  082C               	movf	??_utoa,w
  3341  049C  07B0               	addwf	utoa@buf,f
  3342  049D  0008               	return
  3343  049E                     __end_of_utoa:	
  3344                           
  3345                           	psect	text14
  3346  05DA                     __ptext14:	
  3347 ;; *************** function ___lwmod *****************
  3348 ;; Defined at:
  3349 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;  divisor         2    0[BANK0 ] unsigned int 
  3352 ;;  dividend        2    2[BANK0 ] unsigned int 
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;  counter         1    5[BANK0 ] unsigned char 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  2    0[BANK0 ] unsigned int 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1
  3364 ;;      Params:         0       4       0
  3365 ;;      Locals:         0       1       0
  3366 ;;      Temps:          0       1       0
  3367 ;;      Totals:         0       6       0
  3368 ;;Total ram usage:        6 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    4
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_utoa
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           
  3379                           ;psect for function ___lwmod
  3380  05DA                     ___lwmod:	
  3381                           
  3382                           ;incstack = 0
  3383                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3384  05DA  0020               	movlb	0	; select bank0
  3385  05DB  0820               	movf	___lwmod@divisor,w
  3386  05DC  0421               	iorwf	___lwmod@divisor+1,w
  3387  05DD  1903               	btfsc	3,2
  3388  05DE  2E02               	goto	l1404
  3389  05DF  01A5               	clrf	___lwmod@counter
  3390  05E0  0AA5               	incf	___lwmod@counter,f
  3391  05E1                     l1394:	
  3392  05E1  1BA1               	btfsc	___lwmod@divisor+1,7
  3393  05E2  2DED               	goto	l1396
  3394  05E3  3001               	movlw	1
  3395  05E4                     u835:	
  3396  05E4  35A0               	lslf	___lwmod@divisor,f
  3397  05E5  0DA1               	rlf	___lwmod@divisor+1,f
  3398  05E6  0B89               	decfsz	9,f
  3399  05E7  2DE4               	goto	u835
  3400  05E8  3001               	movlw	1
  3401  05E9  00A4               	movwf	??___lwmod
  3402  05EA  0824               	movf	??___lwmod,w
  3403  05EB  07A5               	addwf	___lwmod@counter,f
  3404  05EC  2DE1               	goto	l1394
  3405  05ED                     l1396:	
  3406  05ED  0821               	movf	___lwmod@divisor+1,w
  3407  05EE  0223               	subwf	___lwmod@dividend+1,w
  3408  05EF  1D03               	skipz
  3409  05F0  2DF3               	goto	u855
  3410  05F1  0820               	movf	___lwmod@divisor,w
  3411  05F2  0222               	subwf	___lwmod@dividend,w
  3412  05F3                     u855:	
  3413  05F3  1C03               	skipc
  3414  05F4  2DF9               	goto	l1400
  3415  05F5  0820               	movf	___lwmod@divisor,w
  3416  05F6  02A2               	subwf	___lwmod@dividend,f
  3417  05F7  0821               	movf	___lwmod@divisor+1,w
  3418  05F8  3BA3               	subwfb	___lwmod@dividend+1,f
  3419  05F9                     l1400:	
  3420  05F9  3001               	movlw	1
  3421  05FA                     u865:	
  3422  05FA  36A1               	lsrf	___lwmod@divisor+1,f
  3423  05FB  0CA0               	rrf	___lwmod@divisor,f
  3424  05FC  0B89               	decfsz	9,f
  3425  05FD  2DFA               	goto	u865
  3426  05FE  3001               	movlw	1
  3427  05FF  02A5               	subwf	___lwmod@counter,f
  3428  0600  1D03               	btfss	3,2
  3429  0601  2DED               	goto	l1396
  3430  0602                     l1404:	
  3431  0602  0823               	movf	___lwmod@dividend+1,w
  3432  0603  00A1               	movwf	?___lwmod+1
  3433  0604  0822               	movf	___lwmod@dividend,w
  3434  0605  00A0               	movwf	?___lwmod
  3435  0606  0008               	return
  3436  0607                     __end_of___lwmod:	
  3437                           
  3438                           	psect	text15
  3439  0577                     __ptext15:	
  3440 ;; *************** function ___lwdiv *****************
  3441 ;; Defined at:
  3442 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  divisor         2    0[BANK0 ] unsigned int 
  3445 ;;  dividend        2    2[BANK0 ] unsigned int 
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;  quotient        2    5[BANK0 ] unsigned int 
  3448 ;;  counter         1    7[BANK0 ] unsigned char 
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  2    0[BANK0 ] unsigned int 
  3451 ;; Registers used:
  3452 ;;		wreg, status,2, status,0
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMMON   BANK0   BANK1
  3458 ;;      Params:         0       4       0
  3459 ;;      Locals:         0       3       0
  3460 ;;      Temps:          0       1       0
  3461 ;;      Totals:         0       8       0
  3462 ;;Total ram usage:        8 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    4
  3465 ;; This function calls:
  3466 ;;		Nothing
  3467 ;; This function is called by:
  3468 ;;		_utoa
  3469 ;; This function uses a non-reentrant model
  3470 ;;
  3471                           
  3472                           
  3473                           ;psect for function ___lwdiv
  3474  0577                     ___lwdiv:	
  3475                           
  3476                           ;incstack = 0
  3477                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3478  0577  0020               	movlb	0	; select bank0
  3479  0578  01A5               	clrf	___lwdiv@quotient
  3480  0579  01A6               	clrf	___lwdiv@quotient+1
  3481  057A  0820               	movf	___lwdiv@divisor,w
  3482  057B  0421               	iorwf	___lwdiv@divisor+1,w
  3483  057C  1903               	btfsc	3,2
  3484  057D  2DA7               	goto	l1382
  3485  057E  01A7               	clrf	___lwdiv@counter
  3486  057F  0AA7               	incf	___lwdiv@counter,f
  3487  0580                     l1370:	
  3488  0580  1BA1               	btfsc	___lwdiv@divisor+1,7
  3489  0581  2D8C               	goto	l1372
  3490  0582  3001               	movlw	1
  3491  0583                     u765:	
  3492  0583  35A0               	lslf	___lwdiv@divisor,f
  3493  0584  0DA1               	rlf	___lwdiv@divisor+1,f
  3494  0585  0B89               	decfsz	9,f
  3495  0586  2D83               	goto	u765
  3496  0587  3001               	movlw	1
  3497  0588  00A4               	movwf	??___lwdiv
  3498  0589  0824               	movf	??___lwdiv,w
  3499  058A  07A7               	addwf	___lwdiv@counter,f
  3500  058B  2D80               	goto	l1370
  3501  058C                     l1372:	
  3502  058C  3001               	movlw	1
  3503  058D                     u785:	
  3504  058D  35A5               	lslf	___lwdiv@quotient,f
  3505  058E  0DA6               	rlf	___lwdiv@quotient+1,f
  3506  058F  0B89               	decfsz	9,f
  3507  0590  2D8D               	goto	u785
  3508  0591  0821               	movf	___lwdiv@divisor+1,w
  3509  0592  0223               	subwf	___lwdiv@dividend+1,w
  3510  0593  1D03               	skipz
  3511  0594  2D97               	goto	u795
  3512  0595  0820               	movf	___lwdiv@divisor,w
  3513  0596  0222               	subwf	___lwdiv@dividend,w
  3514  0597                     u795:	
  3515  0597  1C03               	skipc
  3516  0598  2D9E               	goto	l1378
  3517  0599  0820               	movf	___lwdiv@divisor,w
  3518  059A  02A2               	subwf	___lwdiv@dividend,f
  3519  059B  0821               	movf	___lwdiv@divisor+1,w
  3520  059C  3BA3               	subwfb	___lwdiv@dividend+1,f
  3521  059D  1425               	bsf	___lwdiv@quotient,0
  3522  059E                     l1378:	
  3523  059E  3001               	movlw	1
  3524  059F                     u805:	
  3525  059F  36A1               	lsrf	___lwdiv@divisor+1,f
  3526  05A0  0CA0               	rrf	___lwdiv@divisor,f
  3527  05A1  0B89               	decfsz	9,f
  3528  05A2  2D9F               	goto	u805
  3529  05A3  3001               	movlw	1
  3530  05A4  02A7               	subwf	___lwdiv@counter,f
  3531  05A5  1D03               	btfss	3,2
  3532  05A6  2D8C               	goto	l1372
  3533  05A7                     l1382:	
  3534  05A7  0826               	movf	___lwdiv@quotient+1,w
  3535  05A8  00A1               	movwf	?___lwdiv+1
  3536  05A9  0825               	movf	___lwdiv@quotient,w
  3537  05AA  00A0               	movwf	?___lwdiv
  3538  05AB  0008               	return
  3539  05AC                     __end_of___lwdiv:	
  3540                           
  3541                           	psect	text16
  3542  025D                     __ptext16:	
  3543 ;; *************** function ___fttol *****************
  3544 ;; Defined at:
  3545 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;  f1              3   32[BANK0 ] float 
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;  lval            4   41[BANK0 ] unsigned long 
  3550 ;;  exp1            1   45[BANK0 ] unsigned char 
  3551 ;;  sign1           1   40[BANK0 ] unsigned char 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  4   32[BANK0 ] long 
  3554 ;; Registers used:
  3555 ;;		wreg, status,2, status,0
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMMON   BANK0   BANK1
  3561 ;;      Params:         0       4       0
  3562 ;;      Locals:         0       6       0
  3563 ;;      Temps:          0       4       0
  3564 ;;      Totals:         0      14       0
  3565 ;;Total ram usage:       14 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    4
  3568 ;; This function calls:
  3569 ;;		Nothing
  3570 ;; This function is called by:
  3571 ;;		_loop
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           
  3576                           ;psect for function ___fttol
  3577  025D                     ___fttol:	
  3578                           
  3579                           ;incstack = 0
  3580                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3581  025D  0020               	movlb	0	; select bank0
  3582  025E  0840               	movf	___fttol@f1,w
  3583  025F  00C4               	movwf	??___fttol
  3584  0260  0841               	movf	___fttol@f1+1,w
  3585  0261  00C5               	movwf	??___fttol+1
  3586  0262  0842               	movf	___fttol@f1+2,w
  3587  0263  00C6               	movwf	??___fttol+2
  3588  0264  1003               	clrc
  3589  0265  0D45               	rlf	??___fttol+1,w
  3590  0266  0D46               	rlf	??___fttol+2,w
  3591  0267  00C7               	movwf	??___fttol+3
  3592  0268  0847               	movf	??___fttol+3,w
  3593  0269  00CD               	movwf	___fttol@exp1
  3594  026A  084D               	movf	___fttol@exp1,w
  3595  026B  1D03               	btfss	3,2
  3596  026C  2A76               	goto	l1778
  3597  026D  3000               	movlw	0
  3598  026E  00C3               	movwf	?___fttol+3
  3599  026F  3000               	movlw	0
  3600  0270  00C2               	movwf	?___fttol+2
  3601  0271  3000               	movlw	0
  3602  0272  00C1               	movwf	?___fttol+1
  3603  0273  3000               	movlw	0
  3604  0274  00C0               	movwf	?___fttol
  3605  0275  0008               	return
  3606  0276                     l1778:	
  3607  0276  0840               	movf	___fttol@f1,w
  3608  0277  00C4               	movwf	??___fttol
  3609  0278  0841               	movf	___fttol@f1+1,w
  3610  0279  00C5               	movwf	??___fttol+1
  3611  027A  0842               	movf	___fttol@f1+2,w
  3612  027B  00C6               	movwf	??___fttol+2
  3613  027C  3017               	movlw	23
  3614  027D                     u1315:	
  3615  027D  36C6               	lsrf	??___fttol+2,f
  3616  027E  0CC5               	rrf	??___fttol+1,f
  3617  027F  0CC4               	rrf	??___fttol,f
  3618  0280  0B89               	decfsz	9,f
  3619  0281  2A7D               	goto	u1315
  3620  0282  0844               	movf	??___fttol,w
  3621  0283  00C7               	movwf	??___fttol+3
  3622  0284  0847               	movf	??___fttol+3,w
  3623  0285  00C8               	movwf	___fttol@sign1
  3624  0286  17C1               	bsf	___fttol@f1+1,7
  3625  0287  30FF               	movlw	255
  3626  0288  05C0               	andwf	___fttol@f1,f
  3627  0289  30FF               	movlw	255
  3628  028A  05C1               	andwf	___fttol@f1+1,f
  3629  028B  3000               	movlw	0
  3630  028C  05C2               	andwf	___fttol@f1+2,f
  3631  028D  0840               	movf	___fttol@f1,w
  3632  028E  00C9               	movwf	___fttol@lval
  3633  028F  0841               	movf	___fttol@f1+1,w
  3634  0290  00CA               	movwf	___fttol@lval+1
  3635  0291  0842               	movf	___fttol@f1+2,w
  3636  0292  00CB               	movwf	___fttol@lval+2
  3637  0293  01CC               	clrf	___fttol@lval+3
  3638  0294  308E               	movlw	142
  3639  0295  02CD               	subwf	___fttol@exp1,f
  3640  0296  1FCD               	btfss	___fttol@exp1,7
  3641  0297  2AB4               	goto	l1798
  3642  0298  084D               	movf	___fttol@exp1,w
  3643  0299  3A80               	xorlw	128
  3644  029A  3E8F               	addlw	143
  3645  029B  1803               	skipnc
  3646  029C  2AA6               	goto	l1796
  3647  029D  3000               	movlw	0
  3648  029E  00C3               	movwf	?___fttol+3
  3649  029F  3000               	movlw	0
  3650  02A0  00C2               	movwf	?___fttol+2
  3651  02A1  3000               	movlw	0
  3652  02A2  00C1               	movwf	?___fttol+1
  3653  02A3  3000               	movlw	0
  3654  02A4  00C0               	movwf	?___fttol
  3655  02A5  0008               	return
  3656  02A6                     l1796:	
  3657  02A6  3001               	movlw	1
  3658  02A7                     u1345:	
  3659  02A7  36CC               	lsrf	___fttol@lval+3,f
  3660  02A8  0CCB               	rrf	___fttol@lval+2,f
  3661  02A9  0CCA               	rrf	___fttol@lval+1,f
  3662  02AA  0CC9               	rrf	___fttol@lval,f
  3663  02AB  0B89               	decfsz	9,f
  3664  02AC  2AA7               	goto	u1345
  3665  02AD  3001               	movlw	1
  3666  02AE  00C4               	movwf	??___fttol
  3667  02AF  0844               	movf	??___fttol,w
  3668  02B0  07CD               	addwf	___fttol@exp1,f
  3669  02B1  1903               	btfsc	3,2
  3670  02B2  2ACD               	goto	l1806
  3671  02B3  2AA6               	goto	l1796
  3672  02B4                     l1798:	
  3673  02B4  3018               	movlw	24
  3674  02B5  024D               	subwf	___fttol@exp1,w
  3675  02B6  1C03               	skipc
  3676  02B7  2ACA               	goto	l484
  3677  02B8  3000               	movlw	0
  3678  02B9  00C3               	movwf	?___fttol+3
  3679  02BA  3000               	movlw	0
  3680  02BB  00C2               	movwf	?___fttol+2
  3681  02BC  3000               	movlw	0
  3682  02BD  00C1               	movwf	?___fttol+1
  3683  02BE  3000               	movlw	0
  3684  02BF  00C0               	movwf	?___fttol
  3685  02C0  0008               	return
  3686  02C1                     l1804:	
  3687  02C1  3001               	movlw	1
  3688  02C2                     u1375:	
  3689  02C2  35C9               	lslf	___fttol@lval,f
  3690  02C3  0DCA               	rlf	___fttol@lval+1,f
  3691  02C4  0DCB               	rlf	___fttol@lval+2,f
  3692  02C5  0DCC               	rlf	___fttol@lval+3,f
  3693  02C6  0B89               	decfsz	9,f
  3694  02C7  2AC2               	goto	u1375
  3695  02C8  3001               	movlw	1
  3696  02C9  02CD               	subwf	___fttol@exp1,f
  3697  02CA                     l484:	
  3698  02CA  084D               	movf	___fttol@exp1,w
  3699  02CB  1D03               	btfss	3,2
  3700  02CC  2AC1               	goto	l1804
  3701  02CD                     l1806:	
  3702  02CD  0848               	movf	___fttol@sign1,w
  3703  02CE  1903               	btfsc	3,2
  3704  02CF  2ADB               	goto	l1810
  3705  02D0  09C9               	comf	___fttol@lval,f
  3706  02D1  09CA               	comf	___fttol@lval+1,f
  3707  02D2  09CB               	comf	___fttol@lval+2,f
  3708  02D3  09CC               	comf	___fttol@lval+3,f
  3709  02D4  0AC9               	incf	___fttol@lval,f
  3710  02D5  1903               	skipnz
  3711  02D6  0ACA               	incf	___fttol@lval+1,f
  3712  02D7  1903               	skipnz
  3713  02D8  0ACB               	incf	___fttol@lval+2,f
  3714  02D9  1903               	skipnz
  3715  02DA  0ACC               	incf	___fttol@lval+3,f
  3716  02DB                     l1810:	
  3717  02DB  084C               	movf	___fttol@lval+3,w
  3718  02DC  00C3               	movwf	?___fttol+3
  3719  02DD  084B               	movf	___fttol@lval+2,w
  3720  02DE  00C2               	movwf	?___fttol+2
  3721  02DF  084A               	movf	___fttol@lval+1,w
  3722  02E0  00C1               	movwf	?___fttol+1
  3723  02E1  0849               	movf	___fttol@lval,w
  3724  02E2  00C0               	movwf	?___fttol
  3725  02E3  0008               	return
  3726  02E4                     __end_of___fttol:	
  3727                           
  3728                           	psect	text17
  3729  01B5                     __ptext17:	
  3730 ;; *************** function ___ftdiv *****************
  3731 ;; Defined at:
  3732 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;  f2              3   16[BANK0 ] float 
  3735 ;;  f1              3   19[BANK0 ] float 
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;  f3              3   27[BANK0 ] float 
  3738 ;;  sign            1   31[BANK0 ] unsigned char 
  3739 ;;  exp             1   30[BANK0 ] unsigned char 
  3740 ;;  cntr            1   26[BANK0 ] unsigned char 
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  3   16[BANK0 ] float 
  3743 ;; Registers used:
  3744 ;;		wreg, status,2, status,0, pclath, cstack
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMMON   BANK0   BANK1
  3750 ;;      Params:         0       6       0
  3751 ;;      Locals:         0       6       0
  3752 ;;      Temps:          0       4       0
  3753 ;;      Totals:         0      16       0
  3754 ;;Total ram usage:       16 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; Hardware stack levels required when called:    5
  3757 ;; This function calls:
  3758 ;;		___ftpack
  3759 ;; This function is called by:
  3760 ;;		_loop
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           
  3765                           ;psect for function ___ftdiv
  3766  01B5                     ___ftdiv:	
  3767                           
  3768                           ;incstack = 0
  3769                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3770  01B5  0020               	movlb	0	; select bank0
  3771  01B6  0833               	movf	___ftdiv@f1,w
  3772  01B7  00B6               	movwf	??___ftdiv
  3773  01B8  0834               	movf	___ftdiv@f1+1,w
  3774  01B9  00B7               	movwf	??___ftdiv+1
  3775  01BA  0835               	movf	___ftdiv@f1+2,w
  3776  01BB  00B8               	movwf	??___ftdiv+2
  3777  01BC  1003               	clrc
  3778  01BD  0D37               	rlf	??___ftdiv+1,w
  3779  01BE  0D38               	rlf	??___ftdiv+2,w
  3780  01BF  00B9               	movwf	??___ftdiv+3
  3781  01C0  0839               	movf	??___ftdiv+3,w
  3782  01C1  00BE               	movwf	___ftdiv@exp
  3783  01C2  083E               	movf	___ftdiv@exp,w
  3784  01C3  1D03               	btfss	3,2
  3785  01C4  29CC               	goto	l1736
  3786  01C5  3000               	movlw	0
  3787  01C6  00B0               	movwf	?___ftdiv
  3788  01C7  3000               	movlw	0
  3789  01C8  00B1               	movwf	?___ftdiv+1
  3790  01C9  3000               	movlw	0
  3791  01CA  00B2               	movwf	?___ftdiv+2
  3792  01CB  0008               	return
  3793  01CC                     l1736:	
  3794  01CC  0830               	movf	___ftdiv@f2,w
  3795  01CD  00B6               	movwf	??___ftdiv
  3796  01CE  0831               	movf	___ftdiv@f2+1,w
  3797  01CF  00B7               	movwf	??___ftdiv+1
  3798  01D0  0832               	movf	___ftdiv@f2+2,w
  3799  01D1  00B8               	movwf	??___ftdiv+2
  3800  01D2  1003               	clrc
  3801  01D3  0D37               	rlf	??___ftdiv+1,w
  3802  01D4  0D38               	rlf	??___ftdiv+2,w
  3803  01D5  00B9               	movwf	??___ftdiv+3
  3804  01D6  0839               	movf	??___ftdiv+3,w
  3805  01D7  00BF               	movwf	___ftdiv@sign
  3806  01D8  083F               	movf	___ftdiv@sign,w
  3807  01D9  1D03               	btfss	3,2
  3808  01DA  29E2               	goto	l1742
  3809  01DB  3000               	movlw	0
  3810  01DC  00B0               	movwf	?___ftdiv
  3811  01DD  3000               	movlw	0
  3812  01DE  00B1               	movwf	?___ftdiv+1
  3813  01DF  3000               	movlw	0
  3814  01E0  00B2               	movwf	?___ftdiv+2
  3815  01E1  0008               	return
  3816  01E2                     l1742:	
  3817  01E2  3000               	movlw	0
  3818  01E3  00BB               	movwf	___ftdiv@f3
  3819  01E4  3000               	movlw	0
  3820  01E5  00BC               	movwf	___ftdiv@f3+1
  3821  01E6  3000               	movlw	0
  3822  01E7  00BD               	movwf	___ftdiv@f3+2
  3823  01E8  3089               	movlw	137
  3824  01E9  073F               	addwf	___ftdiv@sign,w
  3825  01EA  00B6               	movwf	??___ftdiv
  3826  01EB  0836               	movf	??___ftdiv,w
  3827  01EC  02BE               	subwf	___ftdiv@exp,f
  3828  01ED  0833               	movf	___ftdiv@f1,w
  3829  01EE  00B6               	movwf	??___ftdiv
  3830  01EF  0834               	movf	___ftdiv@f1+1,w
  3831  01F0  00B7               	movwf	??___ftdiv+1
  3832  01F1  0835               	movf	___ftdiv@f1+2,w
  3833  01F2  00B8               	movwf	??___ftdiv+2
  3834  01F3  3010               	movlw	16
  3835  01F4                     u1245:	
  3836  01F4  36B8               	lsrf	??___ftdiv+2,f
  3837  01F5  0CB7               	rrf	??___ftdiv+1,f
  3838  01F6  0CB6               	rrf	??___ftdiv,f
  3839  01F7  0B89               	decfsz	9,f
  3840  01F8  29F4               	goto	u1245
  3841  01F9  0836               	movf	??___ftdiv,w
  3842  01FA  00B9               	movwf	??___ftdiv+3
  3843  01FB  0839               	movf	??___ftdiv+3,w
  3844  01FC  00BF               	movwf	___ftdiv@sign
  3845  01FD  0830               	movf	___ftdiv@f2,w
  3846  01FE  00B6               	movwf	??___ftdiv
  3847  01FF  0831               	movf	___ftdiv@f2+1,w
  3848  0200  00B7               	movwf	??___ftdiv+1
  3849  0201  0832               	movf	___ftdiv@f2+2,w
  3850  0202  00B8               	movwf	??___ftdiv+2
  3851  0203  3010               	movlw	16
  3852  0204                     u1255:	
  3853  0204  36B8               	lsrf	??___ftdiv+2,f
  3854  0205  0CB7               	rrf	??___ftdiv+1,f
  3855  0206  0CB6               	rrf	??___ftdiv,f
  3856  0207  0B89               	decfsz	9,f
  3857  0208  2A04               	goto	u1255
  3858  0209  0836               	movf	??___ftdiv,w
  3859  020A  00B9               	movwf	??___ftdiv+3
  3860  020B  0839               	movf	??___ftdiv+3,w
  3861  020C  06BF               	xorwf	___ftdiv@sign,f
  3862  020D  3080               	movlw	128
  3863  020E  00B6               	movwf	??___ftdiv
  3864  020F  0836               	movf	??___ftdiv,w
  3865  0210  05BF               	andwf	___ftdiv@sign,f
  3866  0211  17B4               	bsf	___ftdiv@f1+1,7
  3867  0212  30FF               	movlw	255
  3868  0213  05B3               	andwf	___ftdiv@f1,f
  3869  0214  30FF               	movlw	255
  3870  0215  05B4               	andwf	___ftdiv@f1+1,f
  3871  0216  3000               	movlw	0
  3872  0217  05B5               	andwf	___ftdiv@f1+2,f
  3873  0218  17B1               	bsf	___ftdiv@f2+1,7
  3874  0219  30FF               	movlw	255
  3875  021A  05B0               	andwf	___ftdiv@f2,f
  3876  021B  30FF               	movlw	255
  3877  021C  05B1               	andwf	___ftdiv@f2+1,f
  3878  021D  3000               	movlw	0
  3879  021E  05B2               	andwf	___ftdiv@f2+2,f
  3880  021F  3018               	movlw	24
  3881  0220  00B6               	movwf	??___ftdiv
  3882  0221  0836               	movf	??___ftdiv,w
  3883  0222  00BA               	movwf	___ftdiv@cntr
  3884  0223                     l1756:	
  3885  0223  3001               	movlw	1
  3886  0224                     u1265:	
  3887  0224  35BB               	lslf	___ftdiv@f3,f
  3888  0225  0DBC               	rlf	___ftdiv@f3+1,f
  3889  0226  0DBD               	rlf	___ftdiv@f3+2,f
  3890  0227  0B89               	decfsz	9,f
  3891  0228  2A24               	goto	u1265
  3892  0229  0832               	movf	___ftdiv@f2+2,w
  3893  022A  0235               	subwf	___ftdiv@f1+2,w
  3894  022B  1D03               	skipz
  3895  022C  2A33               	goto	u1275
  3896  022D  0831               	movf	___ftdiv@f2+1,w
  3897  022E  0234               	subwf	___ftdiv@f1+1,w
  3898  022F  1D03               	skipz
  3899  0230  2A33               	goto	u1275
  3900  0231  0830               	movf	___ftdiv@f2,w
  3901  0232  0233               	subwf	___ftdiv@f1,w
  3902  0233                     u1275:	
  3903  0233  1C03               	skipc
  3904  0234  2A3C               	goto	l1764
  3905  0235  0830               	movf	___ftdiv@f2,w
  3906  0236  02B3               	subwf	___ftdiv@f1,f
  3907  0237  0831               	movf	___ftdiv@f2+1,w
  3908  0238  3BB4               	subwfb	___ftdiv@f1+1,f
  3909  0239  0832               	movf	___ftdiv@f2+2,w
  3910  023A  3BB5               	subwfb	___ftdiv@f1+2,f
  3911  023B  143B               	bsf	___ftdiv@f3,0
  3912  023C                     l1764:	
  3913  023C  3001               	movlw	1
  3914  023D                     u1285:	
  3915  023D  35B3               	lslf	___ftdiv@f1,f
  3916  023E  0DB4               	rlf	___ftdiv@f1+1,f
  3917  023F  0DB5               	rlf	___ftdiv@f1+2,f
  3918  0240  0B89               	decfsz	9,f
  3919  0241  2A3D               	goto	u1285
  3920  0242  3001               	movlw	1
  3921  0243  02BA               	subwf	___ftdiv@cntr,f
  3922  0244  1D03               	btfss	3,2
  3923  0245  2A23               	goto	l1756
  3924  0246  083B               	movf	___ftdiv@f3,w
  3925  0247  00A0               	movwf	___ftpack@arg
  3926  0248  083C               	movf	___ftdiv@f3+1,w
  3927  0249  00A1               	movwf	___ftpack@arg+1
  3928  024A  083D               	movf	___ftdiv@f3+2,w
  3929  024B  00A2               	movwf	___ftpack@arg+2
  3930  024C  083E               	movf	___ftdiv@exp,w
  3931  024D  00B6               	movwf	??___ftdiv
  3932  024E  0836               	movf	??___ftdiv,w
  3933  024F  00A3               	movwf	___ftpack@exp
  3934  0250  083F               	movf	___ftdiv@sign,w
  3935  0251  00B7               	movwf	??___ftdiv+1
  3936  0252  0837               	movf	??___ftdiv+1,w
  3937  0253  00A4               	movwf	___ftpack@sign
  3938  0254  23DD               	fcall	___ftpack
  3939  0255  0020               	movlb	0	; select bank0
  3940  0256  0820               	movf	?___ftpack,w
  3941  0257  00B0               	movwf	?___ftdiv
  3942  0258  0821               	movf	?___ftpack+1,w
  3943  0259  00B1               	movwf	?___ftdiv+1
  3944  025A  0822               	movf	?___ftpack+2,w
  3945  025B  00B2               	movwf	?___ftdiv+2
  3946  025C  0008               	return
  3947  025D                     __end_of___ftdiv:	
  3948                           
  3949                           	psect	text18
  3950  053B                     __ptext18:	
  3951 ;; *************** function ___altoft *****************
  3952 ;; Defined at:
  3953 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;  c               4    8[BANK0 ] long 
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;  sign            1   15[BANK0 ] unsigned char 
  3958 ;;  exp             1   14[BANK0 ] unsigned char 
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  3    8[BANK0 ] float 
  3961 ;; Registers used:
  3962 ;;		wreg, status,2, status,0, pclath, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMMON   BANK0   BANK1
  3968 ;;      Params:         0       4       0
  3969 ;;      Locals:         0       2       0
  3970 ;;      Temps:          0       2       0
  3971 ;;      Totals:         0       8       0
  3972 ;;Total ram usage:        8 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    5
  3975 ;; This function calls:
  3976 ;;		___ftpack
  3977 ;; This function is called by:
  3978 ;;		_loop
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           
  3983                           ;psect for function ___altoft
  3984  053B                     ___altoft:	
  3985                           
  3986                           ;incstack = 0
  3987                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  3988  053B  0020               	movlb	0	; select bank0
  3989  053C  01AF               	clrf	___altoft@sign
  3990  053D  308E               	movlw	142
  3991  053E  00AC               	movwf	??___altoft
  3992  053F  082C               	movf	??___altoft,w
  3993  0540  00AE               	movwf	___altoft@exp
  3994  0541  1FAB               	btfss	___altoft@c+3,7
  3995  0542  2D50               	goto	l1724
  3996  0543  09A8               	comf	___altoft@c,f
  3997  0544  09A9               	comf	___altoft@c+1,f
  3998  0545  09AA               	comf	___altoft@c+2,f
  3999  0546  09AB               	comf	___altoft@c+3,f
  4000  0547  0AA8               	incf	___altoft@c,f
  4001  0548  1903               	skipnz
  4002  0549  0AA9               	incf	___altoft@c+1,f
  4003  054A  1903               	skipnz
  4004  054B  0AAA               	incf	___altoft@c+2,f
  4005  054C  1903               	skipnz
  4006  054D  0AAB               	incf	___altoft@c+3,f
  4007  054E  01AF               	clrf	___altoft@sign
  4008  054F  0AAF               	incf	___altoft@sign,f
  4009  0550                     l1724:	
  4010  0550  30FF               	movlw	255
  4011  0551  052B               	andwf	___altoft@c+3,w
  4012  0552  1903               	btfsc	3,2
  4013  0553  2D60               	goto	l1726
  4014  0554  3001               	movlw	1
  4015  0555                     u1205:	
  4016  0555  36AB               	lsrf	___altoft@c+3,f
  4017  0556  0CAA               	rrf	___altoft@c+2,f
  4018  0557  0CA9               	rrf	___altoft@c+1,f
  4019  0558  0CA8               	rrf	___altoft@c,f
  4020  0559  0B89               	decfsz	9,f
  4021  055A  2D55               	goto	u1205
  4022  055B  3001               	movlw	1
  4023  055C  00AC               	movwf	??___altoft
  4024  055D  082C               	movf	??___altoft,w
  4025  055E  07AE               	addwf	___altoft@exp,f
  4026  055F  2D50               	goto	l1724
  4027  0560                     l1726:	
  4028  0560  0828               	movf	___altoft@c,w
  4029  0561  00A0               	movwf	___ftpack@arg
  4030  0562  0829               	movf	___altoft@c+1,w
  4031  0563  00A1               	movwf	___ftpack@arg+1
  4032  0564  082A               	movf	___altoft@c+2,w
  4033  0565  00A2               	movwf	___ftpack@arg+2
  4034  0566  082E               	movf	___altoft@exp,w
  4035  0567  00AC               	movwf	??___altoft
  4036  0568  082C               	movf	??___altoft,w
  4037  0569  00A3               	movwf	___ftpack@exp
  4038  056A  082F               	movf	___altoft@sign,w
  4039  056B  00AD               	movwf	??___altoft+1
  4040  056C  082D               	movf	??___altoft+1,w
  4041  056D  00A4               	movwf	___ftpack@sign
  4042  056E  23DD               	fcall	___ftpack
  4043  056F  0020               	movlb	0	; select bank0
  4044  0570  0820               	movf	?___ftpack,w
  4045  0571  00A8               	movwf	?___altoft
  4046  0572  0821               	movf	?___ftpack+1,w
  4047  0573  00A9               	movwf	?___altoft+1
  4048  0574  0822               	movf	?___ftpack+2,w
  4049  0575  00AA               	movwf	?___altoft+2
  4050  0576  0008               	return
  4051  0577                     __end_of___altoft:	
  4052                           
  4053                           	psect	text19
  4054  03DD                     __ptext19:	
  4055 ;; *************** function ___ftpack *****************
  4056 ;; Defined at:
  4057 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;  arg             3    0[BANK0 ] unsigned um
  4060 ;;  exp             1    3[BANK0 ] unsigned char 
  4061 ;;  sign            1    4[BANK0 ] unsigned char 
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;		None
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  3    0[BANK0 ] float 
  4066 ;; Registers used:
  4067 ;;		wreg, status,2, status,0
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMMON   BANK0   BANK1
  4073 ;;      Params:         0       5       0
  4074 ;;      Locals:         0       0       0
  4075 ;;      Temps:          0       3       0
  4076 ;;      Totals:         0       8       0
  4077 ;;Total ram usage:        8 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    4
  4080 ;; This function calls:
  4081 ;;		Nothing
  4082 ;; This function is called by:
  4083 ;;		___altoft
  4084 ;;		___ftdiv
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           
  4089                           ;psect for function ___ftpack
  4090  03DD                     ___ftpack:	
  4091                           
  4092                           ;incstack = 0
  4093                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4094  03DD  0020               	movlb	0	; select bank0
  4095  03DE  0823               	movf	___ftpack@exp,w
  4096  03DF  1903               	btfsc	3,2
  4097  03E0  2BE6               	goto	l1460
  4098  03E1  0822               	movf	___ftpack@arg+2,w
  4099  03E2  0421               	iorwf	___ftpack@arg+1,w
  4100  03E3  0420               	iorwf	___ftpack@arg,w
  4101  03E4  1D03               	skipz
  4102  03E5  2BF7               	goto	l1466
  4103  03E6                     l1460:	
  4104  03E6  3000               	movlw	0
  4105  03E7  00A0               	movwf	?___ftpack
  4106  03E8  3000               	movlw	0
  4107  03E9  00A1               	movwf	?___ftpack+1
  4108  03EA  3000               	movlw	0
  4109  03EB  00A2               	movwf	?___ftpack+2
  4110  03EC  0008               	return
  4111  03ED                     l1464:	
  4112  03ED  3001               	movlw	1
  4113  03EE  00A5               	movwf	??___ftpack
  4114  03EF  0825               	movf	??___ftpack,w
  4115  03F0  07A3               	addwf	___ftpack@exp,f
  4116  03F1  3001               	movlw	1
  4117  03F2                     u925:	
  4118  03F2  36A2               	lsrf	___ftpack@arg+2,f
  4119  03F3  0CA1               	rrf	___ftpack@arg+1,f
  4120  03F4  0CA0               	rrf	___ftpack@arg,f
  4121  03F5  0B89               	decfsz	9,f
  4122  03F6  2BF2               	goto	u925
  4123  03F7                     l1466:	
  4124  03F7  30FE               	movlw	254
  4125  03F8  0522               	andwf	___ftpack@arg+2,w
  4126  03F9  1903               	btfsc	3,2
  4127  03FA  2C10               	goto	l393
  4128  03FB  2BED               	goto	l1464
  4129  03FC                     l1468:	
  4130  03FC  3001               	movlw	1
  4131  03FD  00A5               	movwf	??___ftpack
  4132  03FE  0825               	movf	??___ftpack,w
  4133  03FF  07A3               	addwf	___ftpack@exp,f
  4134  0400  3001               	movlw	1
  4135  0401  07A0               	addwf	___ftpack@arg,f
  4136  0402  3000               	movlw	0
  4137  0403  1803               	skipnc
  4138  0404  3001               	movlw	1
  4139  0405  07A1               	addwf	___ftpack@arg+1,f
  4140  0406  3000               	movlw	0
  4141  0407  1803               	skipnc
  4142  0408  3001               	movlw	1
  4143  0409  07A2               	addwf	___ftpack@arg+2,f
  4144  040A  3001               	movlw	1
  4145  040B                     u945:	
  4146  040B  36A2               	lsrf	___ftpack@arg+2,f
  4147  040C  0CA1               	rrf	___ftpack@arg+1,f
  4148  040D  0CA0               	rrf	___ftpack@arg,f
  4149  040E  0B89               	decfsz	9,f
  4150  040F  2C0B               	goto	u945
  4151  0410                     l393:	
  4152  0410  30FF               	movlw	255
  4153  0411  0522               	andwf	___ftpack@arg+2,w
  4154  0412  1903               	btfsc	3,2
  4155  0413  2C1D               	goto	l1476
  4156  0414  2BFC               	goto	l1468
  4157  0415                     l1474:	
  4158  0415  3001               	movlw	1
  4159  0416  02A3               	subwf	___ftpack@exp,f
  4160  0417  3001               	movlw	1
  4161  0418                     u965:	
  4162  0418  35A0               	lslf	___ftpack@arg,f
  4163  0419  0DA1               	rlf	___ftpack@arg+1,f
  4164  041A  0DA2               	rlf	___ftpack@arg+2,f
  4165  041B  0B89               	decfsz	9,f
  4166  041C  2C18               	goto	u965
  4167  041D                     l1476:	
  4168  041D  1BA1               	btfsc	___ftpack@arg+1,7
  4169  041E  2C23               	goto	l400
  4170  041F  3002               	movlw	2
  4171  0420  0223               	subwf	___ftpack@exp,w
  4172  0421  1803               	skipnc
  4173  0422  2C15               	goto	l1474
  4174  0423                     l400:	
  4175  0423  1823               	btfsc	___ftpack@exp,0
  4176  0424  2C2B               	goto	l401
  4177  0425  30FF               	movlw	255
  4178  0426  05A0               	andwf	___ftpack@arg,f
  4179  0427  307F               	movlw	127
  4180  0428  05A1               	andwf	___ftpack@arg+1,f
  4181  0429  30FF               	movlw	255
  4182  042A  05A2               	andwf	___ftpack@arg+2,f
  4183  042B                     l401:	
  4184  042B  1003               	clrc
  4185  042C  0CA3               	rrf	___ftpack@exp,f
  4186  042D  0823               	movf	___ftpack@exp,w
  4187  042E  00A5               	movwf	??___ftpack
  4188  042F  01A6               	clrf	??___ftpack+1
  4189  0430  01A7               	clrf	??___ftpack+2
  4190  0431  3010               	movlw	16
  4191  0432                     u1005:	
  4192  0432  35A5               	lslf	??___ftpack,f
  4193  0433  0DA6               	rlf	??___ftpack+1,f
  4194  0434  0DA7               	rlf	??___ftpack+2,f
  4195  0435  0B89               	decfsz	9,f
  4196  0436  2C32               	goto	u1005
  4197  0437  0825               	movf	??___ftpack,w
  4198  0438  04A0               	iorwf	___ftpack@arg,f
  4199  0439  0826               	movf	??___ftpack+1,w
  4200  043A  04A1               	iorwf	___ftpack@arg+1,f
  4201  043B  0827               	movf	??___ftpack+2,w
  4202  043C  04A2               	iorwf	___ftpack@arg+2,f
  4203  043D  0824               	movf	___ftpack@sign,w
  4204  043E  1903               	btfsc	3,2
  4205  043F  0008               	return
  4206  0440  17A2               	bsf	___ftpack@arg+2,7
  4207  0441  0008               	return
  4208  0442                     __end_of___ftpack:	
  4209                           
  4210                           	psect	text20
  4211  02E4                     __ptext20:	
  4212 ;; *************** function ___aldiv *****************
  4213 ;; Defined at:
  4214 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  divisor         4    0[BANK0 ] long 
  4217 ;;  dividend        4    4[BANK0 ] long 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  quotient        4   11[BANK0 ] long 
  4220 ;;  sign            1   10[BANK0 ] unsigned char 
  4221 ;;  counter         1    9[BANK0 ] unsigned char 
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  4    0[BANK0 ] long 
  4224 ;; Registers used:
  4225 ;;		wreg, status,2, status,0
  4226 ;; Tracked objects:
  4227 ;;		On entry : 0/0
  4228 ;;		On exit  : 0/0
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMMON   BANK0   BANK1
  4231 ;;      Params:         0       8       0
  4232 ;;      Locals:         0       6       0
  4233 ;;      Temps:          0       1       0
  4234 ;;      Totals:         0      15       0
  4235 ;;Total ram usage:       15 bytes
  4236 ;; Hardware stack levels used:    1
  4237 ;; Hardware stack levels required when called:    4
  4238 ;; This function calls:
  4239 ;;		Nothing
  4240 ;; This function is called by:
  4241 ;;		_loop
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           
  4246                           ;psect for function ___aldiv
  4247  02E4                     ___aldiv:	
  4248                           
  4249                           ;incstack = 0
  4250                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4251  02E4  0020               	movlb	0	; select bank0
  4252  02E5  01AA               	clrf	___aldiv@sign
  4253  02E6  1FA3               	btfss	___aldiv@divisor+3,7
  4254  02E7  2AF5               	goto	l287
  4255  02E8  09A0               	comf	___aldiv@divisor,f
  4256  02E9  09A1               	comf	___aldiv@divisor+1,f
  4257  02EA  09A2               	comf	___aldiv@divisor+2,f
  4258  02EB  09A3               	comf	___aldiv@divisor+3,f
  4259  02EC  0AA0               	incf	___aldiv@divisor,f
  4260  02ED  1903               	skipnz
  4261  02EE  0AA1               	incf	___aldiv@divisor+1,f
  4262  02EF  1903               	skipnz
  4263  02F0  0AA2               	incf	___aldiv@divisor+2,f
  4264  02F1  1903               	skipnz
  4265  02F2  0AA3               	incf	___aldiv@divisor+3,f
  4266  02F3  01AA               	clrf	___aldiv@sign
  4267  02F4  0AAA               	incf	___aldiv@sign,f
  4268  02F5                     l287:	
  4269  02F5  1FA7               	btfss	___aldiv@dividend+3,7
  4270  02F6  2B06               	goto	l1684
  4271  02F7  09A4               	comf	___aldiv@dividend,f
  4272  02F8  09A5               	comf	___aldiv@dividend+1,f
  4273  02F9  09A6               	comf	___aldiv@dividend+2,f
  4274  02FA  09A7               	comf	___aldiv@dividend+3,f
  4275  02FB  0AA4               	incf	___aldiv@dividend,f
  4276  02FC  1903               	skipnz
  4277  02FD  0AA5               	incf	___aldiv@dividend+1,f
  4278  02FE  1903               	skipnz
  4279  02FF  0AA6               	incf	___aldiv@dividend+2,f
  4280  0300  1903               	skipnz
  4281  0301  0AA7               	incf	___aldiv@dividend+3,f
  4282  0302  3001               	movlw	1
  4283  0303  00A8               	movwf	??___aldiv
  4284  0304  0828               	movf	??___aldiv,w
  4285  0305  06AA               	xorwf	___aldiv@sign,f
  4286  0306                     l1684:	
  4287  0306  3000               	movlw	0
  4288  0307  00AE               	movwf	___aldiv@quotient+3
  4289  0308  3000               	movlw	0
  4290  0309  00AD               	movwf	___aldiv@quotient+2
  4291  030A  3000               	movlw	0
  4292  030B  00AC               	movwf	___aldiv@quotient+1
  4293  030C  3000               	movlw	0
  4294  030D  00AB               	movwf	___aldiv@quotient
  4295  030E  0823               	movf	___aldiv@divisor+3,w
  4296  030F  0422               	iorwf	___aldiv@divisor+2,w
  4297  0310  0421               	iorwf	___aldiv@divisor+1,w
  4298  0311  0420               	iorwf	___aldiv@divisor,w
  4299  0312  1903               	skipnz
  4300  0313  2B4F               	goto	l1706
  4301  0314  01A9               	clrf	___aldiv@counter
  4302  0315  0AA9               	incf	___aldiv@counter,f
  4303  0316                     l1692:	
  4304  0316  1BA3               	btfsc	___aldiv@divisor+3,7
  4305  0317  2B24               	goto	l1694
  4306  0318  3001               	movlw	1
  4307  0319                     u1125:	
  4308  0319  35A0               	lslf	___aldiv@divisor,f
  4309  031A  0DA1               	rlf	___aldiv@divisor+1,f
  4310  031B  0DA2               	rlf	___aldiv@divisor+2,f
  4311  031C  0DA3               	rlf	___aldiv@divisor+3,f
  4312  031D  0B89               	decfsz	9,f
  4313  031E  2B19               	goto	u1125
  4314  031F  3001               	movlw	1
  4315  0320  00A8               	movwf	??___aldiv
  4316  0321  0828               	movf	??___aldiv,w
  4317  0322  07A9               	addwf	___aldiv@counter,f
  4318  0323  2B16               	goto	l1692
  4319  0324                     l1694:	
  4320  0324  3001               	movlw	1
  4321  0325                     u1145:	
  4322  0325  35AB               	lslf	___aldiv@quotient,f
  4323  0326  0DAC               	rlf	___aldiv@quotient+1,f
  4324  0327  0DAD               	rlf	___aldiv@quotient+2,f
  4325  0328  0DAE               	rlf	___aldiv@quotient+3,f
  4326  0329  0B89               	decfsz	9,f
  4327  032A  2B25               	goto	u1145
  4328  032B  0823               	movf	___aldiv@divisor+3,w
  4329  032C  0227               	subwf	___aldiv@dividend+3,w
  4330  032D  1D03               	skipz
  4331  032E  2B39               	goto	u1155
  4332  032F  0822               	movf	___aldiv@divisor+2,w
  4333  0330  0226               	subwf	___aldiv@dividend+2,w
  4334  0331  1D03               	skipz
  4335  0332  2B39               	goto	u1155
  4336  0333  0821               	movf	___aldiv@divisor+1,w
  4337  0334  0225               	subwf	___aldiv@dividend+1,w
  4338  0335  1D03               	skipz
  4339  0336  2B39               	goto	u1155
  4340  0337  0820               	movf	___aldiv@divisor,w
  4341  0338  0224               	subwf	___aldiv@dividend,w
  4342  0339                     u1155:	
  4343  0339  1C03               	skipc
  4344  033A  2B44               	goto	l1702
  4345  033B  0820               	movf	___aldiv@divisor,w
  4346  033C  02A4               	subwf	___aldiv@dividend,f
  4347  033D  0821               	movf	___aldiv@divisor+1,w
  4348  033E  3BA5               	subwfb	___aldiv@dividend+1,f
  4349  033F  0822               	movf	___aldiv@divisor+2,w
  4350  0340  3BA6               	subwfb	___aldiv@dividend+2,f
  4351  0341  0823               	movf	___aldiv@divisor+3,w
  4352  0342  3BA7               	subwfb	___aldiv@dividend+3,f
  4353  0343  142B               	bsf	___aldiv@quotient,0
  4354  0344                     l1702:	
  4355  0344  3001               	movlw	1
  4356  0345                     u1165:	
  4357  0345  36A3               	lsrf	___aldiv@divisor+3,f
  4358  0346  0CA2               	rrf	___aldiv@divisor+2,f
  4359  0347  0CA1               	rrf	___aldiv@divisor+1,f
  4360  0348  0CA0               	rrf	___aldiv@divisor,f
  4361  0349  0B89               	decfsz	9,f
  4362  034A  2B45               	goto	u1165
  4363  034B  3001               	movlw	1
  4364  034C  02A9               	subwf	___aldiv@counter,f
  4365  034D  1D03               	btfss	3,2
  4366  034E  2B24               	goto	l1694
  4367  034F                     l1706:	
  4368  034F  082A               	movf	___aldiv@sign,w
  4369  0350  1903               	btfsc	3,2
  4370  0351  2B5D               	goto	l1710
  4371  0352  09AB               	comf	___aldiv@quotient,f
  4372  0353  09AC               	comf	___aldiv@quotient+1,f
  4373  0354  09AD               	comf	___aldiv@quotient+2,f
  4374  0355  09AE               	comf	___aldiv@quotient+3,f
  4375  0356  0AAB               	incf	___aldiv@quotient,f
  4376  0357  1903               	skipnz
  4377  0358  0AAC               	incf	___aldiv@quotient+1,f
  4378  0359  1903               	skipnz
  4379  035A  0AAD               	incf	___aldiv@quotient+2,f
  4380  035B  1903               	skipnz
  4381  035C  0AAE               	incf	___aldiv@quotient+3,f
  4382  035D                     l1710:	
  4383  035D  082E               	movf	___aldiv@quotient+3,w
  4384  035E  00A3               	movwf	?___aldiv+3
  4385  035F  082D               	movf	___aldiv@quotient+2,w
  4386  0360  00A2               	movwf	?___aldiv+2
  4387  0361  082C               	movf	___aldiv@quotient+1,w
  4388  0362  00A1               	movwf	?___aldiv+1
  4389  0363  082B               	movf	___aldiv@quotient,w
  4390  0364  00A0               	movwf	?___aldiv
  4391  0365  0008               	return
  4392  0366                     __end_of___aldiv:	
  4393                           
  4394                           	psect	intentry
  4395  0004                     __pintentry:	
  4396 ;; *************** function _ISR *****************
  4397 ;; Defined at:
  4398 ;;		line 36 in file "main.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;  result          2   10[COMMON] int 
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      void 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2, status,0, pclath, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMMON   BANK0   BANK1
  4412 ;;      Params:         0       0       0
  4413 ;;      Locals:         2       0       0
  4414 ;;      Temps:          5       0       0
  4415 ;;      Totals:         7       0       0
  4416 ;;Total ram usage:        7 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    3
  4419 ;; This function calls:
  4420 ;;		_nrf24l01ISR
  4421 ;; This function is called by:
  4422 ;;		Interrupt level 1
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426  0004                     _ISR:	
  4427                           
  4428                           ;incstack = 0
  4429  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4430                           
  4431                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  4432  0005  3180               	pagesel	$
  4433  0006  0020               	movlb	0	; select bank0
  4434  0007  087F               	movf	127,w
  4435  0008  00F9               	movwf	??_ISR+4
  4436                           
  4437                           ;main.c: 37: intCount ++;
  4438  0009  3001               	movlw	1
  4439  000A  07D7               	addwf	_intCount,f
  4440  000B  3000               	movlw	0
  4441  000C  3DD8               	addwfc	_intCount+1,f
  4442                           
  4443                           ;main.c: 38: if (PIR1bits.ADIF){
  4444  000D  1F11               	btfss	17,6	;volatile
  4445  000E  2847               	goto	i1l2004
  4446                           
  4447                           ;main.c: 40: if (mode == 2) {
  4448  000F  3002               	movlw	2
  4449  0010  067D               	xorwf	_mode,w
  4450  0011  1D03               	btfss	3,2
  4451  0012  2846               	goto	i1l2002
  4452                           
  4453                           ;main.c: 42: int result = 0x00;
  4454  0013  01FA               	clrf	ISR@result
  4455  0014  01FB               	clrf	ISR@result+1
  4456                           
  4457                           ;main.c: 43: result = ADRESL;
  4458  0015  0021               	movlb	1	; select bank1
  4459  0016  081B               	movf	27,w	;volatile
  4460  0017  00F5               	movwf	??_ISR
  4461  0018  01F6               	clrf	??_ISR+1
  4462  0019  0875               	movf	??_ISR,w
  4463  001A  00FA               	movwf	ISR@result
  4464  001B  0876               	movf	??_ISR+1,w
  4465  001C  00FB               	movwf	ISR@result+1
  4466                           
  4467                           ;main.c: 44: result|= (ADRESH << 8);
  4468  001D  081C               	movf	28,w	;volatile
  4469  001E  00F5               	movwf	??_ISR
  4470  001F  01F6               	clrf	??_ISR+1
  4471  0020  0875               	movf	??_ISR,w
  4472  0021  00F6               	movwf	??_ISR+1
  4473  0022  01F5               	clrf	??_ISR
  4474  0023  0875               	movf	??_ISR,w
  4475  0024  04FA               	iorwf	ISR@result,f
  4476  0025  0876               	movf	??_ISR+1,w
  4477  0026  04FB               	iorwf	ISR@result+1,f
  4478                           
  4479                           ;main.c: 46: adcSum+= result;
  4480  0027  087A               	movf	ISR@result,w
  4481  0028  00F5               	movwf	??_ISR
  4482  0029  087B               	movf	ISR@result+1,w
  4483  002A  00F6               	movwf	??_ISR+1
  4484  002B  3000               	movlw	0
  4485  002C  1BF6               	btfsc	??_ISR+1,7
  4486  002D  30FF               	movlw	255
  4487  002E  00F7               	movwf	??_ISR+2
  4488  002F  00F8               	movwf	??_ISR+3
  4489  0030  0875               	movf	??_ISR,w
  4490  0031  0020               	movlb	0	; select bank0
  4491  0032  07D3               	addwf	_adcSum,f
  4492  0033  0876               	movf	??_ISR+1,w
  4493  0034  3DD4               	addwfc	_adcSum+1,f
  4494  0035  0877               	movf	??_ISR+2,w
  4495  0036  3DD5               	addwfc	_adcSum+2,f
  4496  0037  0878               	movf	??_ISR+3,w
  4497  0038  3DD6               	addwfc	_adcSum+3,f
  4498                           
  4499                           ;main.c: 48: if (!adcLoop){
  4500  0039  0859               	movf	_adcLoop,w
  4501  003A  1D03               	btfss	3,2
  4502  003B  2841               	goto	i1l83
  4503                           
  4504                           ;main.c: 49: mode = 3;
  4505  003C  3003               	movlw	3
  4506  003D  00F5               	movwf	??_ISR
  4507  003E  0875               	movf	??_ISR,w
  4508  003F  00FD               	movwf	_mode
  4509                           
  4510                           ;main.c: 50: }else{
  4511  0040  2843               	goto	i1l2000
  4512  0041                     i1l83:	
  4513                           
  4514                           ;main.c: 52: ADCON0bits.ADGO = 1;
  4515  0041  0021               	movlb	1	; select bank1
  4516  0042  149D               	bsf	29,1	;volatile
  4517  0043                     i1l2000:	
  4518                           
  4519                           ;main.c: 53: }
  4520                           ;main.c: 55: adcLoop--;
  4521  0043  3001               	movlw	1
  4522  0044  0020               	movlb	0	; select bank0
  4523  0045  02D9               	subwf	_adcLoop,f
  4524  0046                     i1l2002:	
  4525                           
  4526                           ;main.c: 56: }
  4527                           ;main.c: 59: PIR1bits.ADIF = 0;
  4528  0046  1311               	bcf	17,6	;volatile
  4529  0047                     i1l2004:	
  4530                           
  4531                           ;main.c: 60: }
  4532                           ;main.c: 62: if (INTCONbits.INTF){
  4533  0047  1C8B               	btfss	11,1	;volatile
  4534  0048  2850               	goto	i1l86
  4535                           
  4536                           ;main.c: 63: nrf24l01ISR();
  4537  0049  26C8               	fcall	_nrf24l01ISR
  4538                           
  4539                           ;main.c: 64: intCount++;
  4540  004A  3001               	movlw	1
  4541  004B  0020               	movlb	0	; select bank0
  4542  004C  07D7               	addwf	_intCount,f
  4543  004D  3000               	movlw	0
  4544  004E  3DD8               	addwfc	_intCount+1,f
  4545                           
  4546                           ;main.c: 65: INTCONbits.INTF = 0;
  4547  004F  108B               	bcf	11,1	;volatile
  4548  0050                     i1l86:	
  4549  0050  0879               	movf	??_ISR+4,w
  4550  0051  00FF               	movwf	127
  4551  0052  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4552  0053  0009               	retfie
  4553  0054                     __end_of_ISR:	
  4554                           
  4555                           	psect	text22
  4556  06C8                     __ptext22:	
  4557 ;; *************** function _nrf24l01ISR *****************
  4558 ;; Defined at:
  4559 ;;		line 51 in file "nrf24l01.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;		None
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;		None
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  1    wreg      void 
  4566 ;; Registers used:
  4567 ;;		wreg, status,2, status,0, pclath, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMMON   BANK0   BANK1
  4573 ;;      Params:         0       0       0
  4574 ;;      Locals:         0       0       0
  4575 ;;      Temps:          1       0       0
  4576 ;;      Totals:         1       0       0
  4577 ;;Total ram usage:        1 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    2
  4580 ;; This function calls:
  4581 ;;		_nrf24l01Send
  4582 ;; This function is called by:
  4583 ;;		_ISR
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           
  4588                           ;psect for function _nrf24l01ISR
  4589  06C8                     _nrf24l01ISR:	
  4590                           
  4591                           ;nrf24l01.c: 53: status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  4592                           
  4593                           ;incstack = 0
  4594                           ; Regs used in _nrf24l01ISR: [wreg+status,2+status,0+pclath+cstack]
  4595  06C8  01F1               	clrf	nrf24l01Send@data
  4596  06C9  3007               	movlw	7
  4597  06CA  26D8               	fcall	_nrf24l01Send
  4598  06CB  00F4               	movwf	??_nrf24l01ISR
  4599  06CC  0874               	movf	??_nrf24l01ISR,w
  4600  06CD  00FC               	movwf	_status
  4601                           
  4602                           ;nrf24l01.c: 55: if (status.TX_DS){
  4603  06CE  1EFC               	btfss	_status,5
  4604  06CF  0008               	return
  4605                           
  4606                           ;nrf24l01.c: 56: status.TX_DS = 1;
  4607  06D0  16FC               	bsf	_status,5
  4608                           
  4609                           ;nrf24l01.c: 57: nrf24l01Send(0b00100000 | 0x07, status.byte);
  4610  06D1  087C               	movf	_status,w
  4611  06D2  00F4               	movwf	??_nrf24l01ISR
  4612  06D3  0874               	movf	??_nrf24l01ISR,w
  4613  06D4  00F1               	movwf	nrf24l01Send@data
  4614  06D5  3027               	movlw	39
  4615  06D6  26D8               	fcall	_nrf24l01Send
  4616  06D7  0008               	return
  4617  06D8                     __end_of_nrf24l01ISR:	
  4618                           
  4619                           	psect	text23
  4620  06D8                     __ptext23:	
  4621 ;; *************** function _nrf24l01Send *****************
  4622 ;; Defined at:
  4623 ;;		line 39 in file "nrf24l01.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;  command         1    wreg     unsigned char 
  4626 ;;  data            1    1[COMMON] unsigned char 
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;  command         1    3[COMMON] unsigned char 
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  1    wreg      unsigned char 
  4631 ;; Registers used:
  4632 ;;		wreg, status,2, status,0, pclath, cstack
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMMON   BANK0   BANK1
  4638 ;;      Params:         0       0       0
  4639 ;;      Locals:         0       0       0
  4640 ;;      Temps:          0       0       0
  4641 ;;      Totals:         0       0       0
  4642 ;;Total ram usage:        0 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; Hardware stack levels required when called:    5
  4645 ;; This function calls:
  4646 ;;		_nrf24l01SPIEnd
  4647 ;;		_nrf24l01SPISend
  4648 ;;		_nrf24l01SPIStart
  4649 ;; This function is called by:
  4650 ;;		_nrf24l01ISR
  4651 ;;		_nrf24l01SetTransmitMode
  4652 ;;		_nrf24l01InitRegisters
  4653 ;;		_nrf24l01SetRecieveMode
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           
  4658                           ;psect for function _nrf24l01Send
  4659  06D8                     _nrf24l01Send:	
  4660                           
  4661                           ;incstack = 0
  4662                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  4663                           ;nrf24l01Send@command stored from wreg
  4664  06D8  00F3               	movwf	nrf24l01Send@command
  4665                           
  4666                           ;nrf24l01.c: 41: nrf24l01SPIStart();
  4667  06D9  2706               	fcall	_nrf24l01SPIStart
  4668                           
  4669                           ;nrf24l01.c: 43: status.byte = nrf24l01SPISend(command);
  4670  06DA  0873               	movf	nrf24l01Send@command,w
  4671  06DB  26F4               	fcall	_nrf24l01SPISend
  4672  06DC  00F2               	movwf	??_nrf24l01Send
  4673  06DD  0872               	movf	??_nrf24l01Send,w
  4674  06DE  00FC               	movwf	_status
  4675                           
  4676                           ;nrf24l01.c: 44: data = nrf24l01SPISend(data);
  4677  06DF  0871               	movf	nrf24l01Send@data,w
  4678  06E0  26F4               	fcall	_nrf24l01SPISend
  4679  06E1  00F2               	movwf	??_nrf24l01Send
  4680  06E2  0872               	movf	??_nrf24l01Send,w
  4681  06E3  00F1               	movwf	nrf24l01Send@data
  4682                           
  4683                           ;nrf24l01.c: 46: nrf24l01SPIEnd();
  4684  06E4  270D               	fcall	_nrf24l01SPIEnd
  4685                           
  4686                           ;nrf24l01.c: 48: return data;
  4687  06E5  0871               	movf	nrf24l01Send@data,w
  4688  06E6  0008               	return
  4689  06E7                     __end_of_nrf24l01Send:	
  4690                           
  4691                           	psect	text24
  4692  0706                     __ptext24:	
  4693 ;; *************** function _nrf24l01SPIStart *****************
  4694 ;; Defined at:
  4695 ;;		line 20 in file "nrf24l01.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;		None
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;		None
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      void 
  4702 ;; Registers used:
  4703 ;;		wreg
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMMON   BANK0   BANK1
  4709 ;;      Params:         0       0       0
  4710 ;;      Locals:         0       0       0
  4711 ;;      Temps:          0       0       0
  4712 ;;      Totals:         0       0       0
  4713 ;;Total ram usage:        0 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    4
  4716 ;; This function calls:
  4717 ;;		Nothing
  4718 ;; This function is called by:
  4719 ;;		_nrf24l01Send
  4720 ;;		_nrf24l01SendStart
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           
  4725                           ;psect for function _nrf24l01SPIStart
  4726  0706                     _nrf24l01SPIStart:	
  4727                           
  4728                           ;nrf24l01.c: 21: PORTAbits.RA1 = 0;
  4729                           
  4730                           ;incstack = 0
  4731                           ; Regs used in _nrf24l01SPIStart: [wreg]
  4732  0706  0020               	movlb	0	; select bank0
  4733  0707  108C               	bcf	12,1	;volatile
  4734                           
  4735                           ;nrf24l01.c: 22: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4736  0708  300D               	movlw	13
  4737  0709                     u156_27:	
  4738  0709  0B89               	decfsz	9,f
  4739  070A  2F09               	goto	u156_27
  4740  070B  0000               	nop
  4741  070C  0008               	return
  4742  070D                     __end_of_nrf24l01SPIStart:	
  4743                           
  4744                           	psect	text25
  4745  06F4                     __ptext25:	
  4746 ;; *************** function _nrf24l01SPISend *****************
  4747 ;; Defined at:
  4748 ;;		line 26 in file "nrf24l01.c"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;  data            1    wreg     unsigned char 
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;  data            1    0[COMMON] unsigned char 
  4753 ;; Return value:  Size  Location     Type
  4754 ;;                  1    wreg      unsigned char 
  4755 ;; Registers used:
  4756 ;;		wreg
  4757 ;; Tracked objects:
  4758 ;;		On entry : 0/0
  4759 ;;		On exit  : 0/0
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:     COMMON   BANK0   BANK1
  4762 ;;      Params:         0       0       0
  4763 ;;      Locals:         0       0       0
  4764 ;;      Temps:          0       0       0
  4765 ;;      Totals:         0       0       0
  4766 ;;Total ram usage:        0 bytes
  4767 ;; Hardware stack levels used:    1
  4768 ;; Hardware stack levels required when called:    4
  4769 ;; This function calls:
  4770 ;;		Nothing
  4771 ;; This function is called by:
  4772 ;;		_nrf24l01Send
  4773 ;;		_nrf24l01SendStart
  4774 ;;		_nrf24l01SendString
  4775 ;;		_nrf24l01SendFlash
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           
  4780                           ;psect for function _nrf24l01SPISend
  4781  06F4                     _nrf24l01SPISend:	
  4782                           
  4783                           ;incstack = 0
  4784                           ; Regs used in _nrf24l01SPISend: [wreg]
  4785                           ;nrf24l01SPISend@data stored from wreg
  4786  06F4  00F0               	movwf	nrf24l01SPISend@data
  4787                           
  4788                           ;nrf24l01.c: 27: SSP1BUF = data;
  4789  06F5  0870               	movf	nrf24l01SPISend@data,w
  4790  06F6  0024               	movlb	4	; select bank4
  4791  06F7  0091               	movwf	17	;volatile
  4792  06F8                     i1l156:	
  4793                           ;nrf24l01.c: 28: while (!SSP1STATbits.BF){ __nop(); }
  4794                           
  4795  06F8  0024               	movlb	4	; select bank4
  4796  06F9  1814               	btfsc	20,0	;volatile
  4797  06FA  2EFD               	goto	i1l1436
  4798  06FB  0000               	nop
  4799  06FC  2EF8               	goto	i1l156
  4800  06FD                     i1l1436:	
  4801                           
  4802                           ;nrf24l01.c: 29: return SSP1BUF;
  4803  06FD  0811               	movf	17,w	;volatile
  4804  06FE  0008               	return
  4805  06FF                     __end_of_nrf24l01SPISend:	
  4806                           
  4807                           	psect	text26
  4808  070D                     __ptext26:	
  4809 ;; *************** function _nrf24l01SPIEnd *****************
  4810 ;; Defined at:
  4811 ;;		line 33 in file "nrf24l01.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;		None
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;		None
  4816 ;; Return value:  Size  Location     Type
  4817 ;;                  1    wreg      void 
  4818 ;; Registers used:
  4819 ;;		wreg
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMMON   BANK0   BANK1
  4825 ;;      Params:         0       0       0
  4826 ;;      Locals:         0       0       0
  4827 ;;      Temps:          0       0       0
  4828 ;;      Totals:         0       0       0
  4829 ;;Total ram usage:        0 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    4
  4832 ;; This function calls:
  4833 ;;		Nothing
  4834 ;; This function is called by:
  4835 ;;		_nrf24l01Send
  4836 ;;		_nrf24l01SendEnd
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           
  4841                           ;psect for function _nrf24l01SPIEnd
  4842  070D                     _nrf24l01SPIEnd:	
  4843                           
  4844                           ;nrf24l01.c: 34: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4845                           
  4846                           ;incstack = 0
  4847                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  4848  070D  300D               	movlw	13
  4849  070E                     u157_27:	
  4850  070E  0B89               	decfsz	9,f
  4851  070F  2F0E               	goto	u157_27
  4852  0710  0000               	nop
  4853                           
  4854                           ;nrf24l01.c: 35: PORTAbits.RA1 = 1;
  4855  0711  0020               	movlb	0	; select bank0
  4856  0712  148C               	bsf	12,1	;volatile
  4857  0713  0008               	return
  4858  0714                     __end_of_nrf24l01SPIEnd:	
  4859  007E                     btemp	set	126	;btemp
  4860  007E                     int$flags	set	126
  4861  007E                     wtemp0	set	126


Data Sizes:
    Strings     12
    Constant    6
    Data        2
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     51      68
    BANK1            32      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    nrf24l01SendString@string	PTR unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[2]), STR_2(CODE[5]), byte(BANK0[3]), STR_1(CODE[7]), 
		 -> buffer(BANK0[6]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _loop->___fttol
    _nrf24l01SendStart->_nrf24l01SetTransmitMode
    _nrf24l01SendFlash->_read_flashmem
    _itoa->_utoa
    _utoa->___lwdiv
    ___fttol->___ftdiv
    ___ftdiv->___altoft
    ___altoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   12225
                                             48 BANK0      3     3      0
                               _loop
                       _nrf24l01Init
                      _read_flashmem
                     _write_flashmem
 ---------------------------------------------------------------------------------
 (1) _write_flashmem                                       6     2      4     260
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1485
                                              8 BANK0      1     1      0
              _nrf24l01InitRegisters
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                8     8      0    1485
                                              0 BANK0      8     8      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 2     2      0   10197
                                             46 BANK0      2     2      0
                            ___aldiv
                           ___altoft
                            ___ftdiv
                            ___fttol
                               _itoa
                    _nrf24l01SendEnd
                  _nrf24l01SendFlash
                  _nrf24l01SendStart
                 _nrf24l01SendString
                      _read_flashmem
                           _startADC
 ---------------------------------------------------------------------------------
 (2) _startADC                                             2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendString                                   6     4      2     496
                                              0 BANK0      6     4      2
                    _nrf24l01SPISend
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendStart                                    0     0      0    1373
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
            _nrf24l01SetTransmitMode
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetTransmitMode                              2     2      0    1351
                                              0 BANK0      2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1305
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendFlash                                    4     4      0     373
                                              6 BANK0      4     4      0
                    _nrf24l01SPISend
                      _read_flashmem
 ---------------------------------------------------------------------------------
 (1) _read_flashmem                                        6     4      2     259
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      22
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendEnd                                      0     0      0       0
                     _nrf24l01SPIEnd
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _itoa                                                 7     3      4    1802
                                             17 BANK0      7     3      4
                      _read_flashmem (ARG)
                               _utoa
 ---------------------------------------------------------------------------------
 (3) _utoa                                                 9     5      4    1165
                                              8 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     287
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     380
                                             32 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2528
                                             16 BANK0     16    10      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    2258
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1992
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     684
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  7     7      0    1330
                                              5 COMMON     7     7      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          1     1      0    1305
                                              4 COMMON     1     1      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1305
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      22
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___aldiv
     ___altoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     _itoa
       _read_flashmem (ARG)
       _utoa (ARG)
         ___lwdiv
         ___lwmod
     _nrf24l01SendEnd
       _nrf24l01SPIEnd
     _nrf24l01SendFlash
       _nrf24l01SPISend
       _read_flashmem
     _nrf24l01SendStart
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetTransmitMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
     _nrf24l01SendString
       _nrf24l01SPISend
     _read_flashmem
     _startADC
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
   _read_flashmem
   _write_flashmem

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      52       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     33      44       6       85.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      52       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue May 29 15:34:17 2018

                     ___altoft@exp 002E                        __CFG_CP$OFF 0000  
                    ___altoft@sign 002F                                 l95 0068  
                               l99 009C                 nrf24l01SendFlash@i 0028  
              nrf24l01Send@command 0073                        __CFG_LVP$ON 0000  
                              l112 01B4                                l400 0423  
                              l401 042B                                l287 02F5  
                              l393 0410                                l484 02CA  
                              l499 0488                                _ISR 0004  
                              u805 059F                                u835 05E4  
                              u925 03F2                                u765 0583  
                              u855 05F3                                u945 040B  
                              u785 058D                                u865 05FA  
                              u795 0597                                u965 0418  
                     __CFG_BORV$HI 0000                                wreg 0009  
                             ?_ISR 0070                       ___ftdiv@cntr 003A  
                     ___ftdiv@sign 003F                     ??_nrf24l01Init 0028  
                             l1400 05F9                               l1404 0602  
                             l1500 0464                               l1370 0580  
                             l2074 04F5                               l1460 03E6  
                             l1372 058C                               l1540 068B  
                             l1710 035D                               l1702 0344  
                             l1382 05A7                               l1550 069B  
                             l1526 05D2                               l1464 03ED  
                             l1706 034F                               l1474 0415  
                             l1466 03F7                               l1810 02DB  
                             l1378 059E                               l1394 05E1  
                             l1490 0448                               l1476 041D  
                             l1468 03FC                               l1724 0550  
                             l1804 02C1                               l1396 05ED  
                             l1726 0560                               l1742 01E2  
                             l1806 02CD                               l1566 062F  
                             l1830 0075                               l1736 01CC  
                   ??_nrf24l01Send 0072                               l1850 00AC  
                             l1692 0316                               l1684 0306  
                             l1764 023C                               l1756 0223  
                             l1694 0324                               l1862 00C4  
                             l1854 00B4                               l1846 00A4  
                             l1872 012F                               l1864 00D9  
                             l1778 0276                               l1866 00E2  
                             l1858 00BC                               l1796 02A6  
                             l1868 010B                               l1876 014B  
                             l1798 02B4                               l1878 015C  
                             l1898 019A                               STR_1 06FF  
                     __CFG_WDTE$ON 0000                               STR_2 071F  
                             STR_3 0704                               u1005 0432  
                             u1125 0319                               u1205 0555  
                             u1145 0325                               u1155 0339  
                             u1315 027D                               u1165 0345  
                             u1245 01F4                               u1255 0204  
                             u1265 0224                               u1345 02A7  
                             u1275 0233                               u1507 061E  
                             u1285 023D                               u1517 0627  
                             u1375 02C2                               u1527 036D  
                             u1537 05CF                               u1547 06C4  
                             u1557 06EB                               u1497 04AB  
                             i1l83 0041                               i1l86 0050  
                     __CFG_WRT$OFF 0000                      __p_NVMEM_text 07E0  
                             _main 049E                               _byte 0060  
                     ___ftpack@arg 0020                               _mode 007D  
                             _itoa 0673                               _loop 0063  
                     ___ftpack@exp 0023                               fsr0h 0005  
                             fsr1h 0007                               indf0 0000  
                             fsr0l 0004                               indf1 0001  
                             fsr1l 0006                               btemp 007E  
                             _utoa 0442                      __CFG_BOREN$ON 0000  
                             start 0054           ?_nrf24l01SetTransmitMode 0070  
                            ??_ISR 0075                      __CFG_LPBOR$ON 0000  
              nrf24l01SendString@i 0025                       ___fttol@exp1 004D  
                     ___fttol@lval 0049        __size_of_nrf24l01SendString 0023  
                  __end_of___aldiv 0366                              ?_main 0070  
                            ?_itoa 0031                              ?_loop 0070  
                  __end_of___ftdiv 025D                              ?_utoa 0028  
                  __end_of___fttol 02E4                    __end_of___lwdiv 05AC  
                            i1l156 06F8                    __end_of___lwmod 0607  
                            _NVMEM 07E0                      __CFG_PWRTE$ON 0000  
                    ___ftpack@sign 0024              nrf24l01SendFlash@btye 0029  
                            utoa@c 002F                              utoa@v 002D  
                            status 0003                              wtemp0 007E  
                 _nrf24l01SPIStart 0706                     __CFG_MCLRE$OFF 0000  
                  __initialization 0055                       __end_of_main 04F7  
                     __end_of_itoa 0696                       __end_of_loop 01B5  
                     __end_of_utoa 049E                             ??_main 0050  
                    ___fttol@sign1 0048                             ??_itoa 0035  
                           ??_loop 004E                             ??_utoa 002C  
                 ??_write_flashmem 0024                   ??_nrf24l01SPIEnd 0070  
                    main@bootCount 0051           __size_of_nrf24l01SPISend 000B  
                 __end_of___altoft 0577                             _ADRESH 009C  
                           _ADRESL 009B                             _ANSELA 018C  
                           _ANSELC 018E                   __end_of___ftpack 0442  
                           i1l2000 0043                             i1l2002 0046  
                           i1l2004 0047                             i1l1436 06FD  
                           u156_27 0709                             u157_27 070E  
                           _PMADRH 0192                             _PMADRL 0191  
                           _PMDATH 0194                             _PMDATL 0193  
                           _PMCON1 0195                             _PMCON2 0196  
         __size_of_nrf24l01SendEnd 000D               __size_of_nrf24l01ISR 0010  
                           _adcSum 0053                          ??___aldiv 0028  
                   __CFG_STVREN$ON 0000                          ??___ftdiv 0036  
                        ??___fttol 0044                          ??___lwdiv 0024  
                        ??___lwmod 0024                             _buffer 005A  
             __end_of_nrf24l01Init 062D               __end_of_nrf24l01Send 06E7  
            _nrf24l01InitRegisters 0366                             _status 007C  
             write_flashmem@offset 0020                             itoa@cp 0036  
                     __pdataCOMMON 007D                   __end_of_startADC 05DA  
           __size_of_read_flashmem 0023            __end_of__initialization 0060  
                       ___altoft@c 0028                         ___ftdiv@f1 0033  
                       ___ftdiv@f2 0030                         ___ftdiv@f3 003B  
                    __end_of_NVMEM 0800                         ___fttol@f1 0040  
                   __pcstackCOMMON 0070                       __pidataBANK0 072A  
    nrf24l01InitRegisters@enRXAddr 0026                     _OPTION_REGbits 0095  
                       __pbssBANK0 0053                  ??_nrf24l01SPISend 0070  
                        ISR@result 007A                      _read_flashmem 0650  
                       __pmaintext 049E                  ??_nrf24l01SendEnd 0020  
           ?_nrf24l01InitRegisters 0070                         __pintentry 0004  
                _nrf24l01SendFlash 0696                          ?___altoft 0028  
              nrf24l01SPISend@data 0070                  _nrf24l01SendStart 0724  
                        ?___ftpack 0020                 ?_nrf24l01SendFlash 0070  
               ?_nrf24l01SendStart 0070              __end_of_n_ADDRESS_MUL 072C  
 __size_of_nrf24l01SetTransmitMode 0017           __end_of_nrf24l01SPIStart 070D  
              ??_nrf24l01SendFlash 0026                            _SSP1BUF 0211  
              ??_nrf24l01SendStart 0022           nrf24l01SendString@string 0020  
                   ?_read_flashmem 0020              __size_of_nrf24l01Init 0026  
            __size_of_nrf24l01Send 000F          __end_of_nrf24l01SendFlash 06B1  
       __end_of_nrf24l01SendString 0650                            ___aldiv 02E4  
        __end_of_nrf24l01SendStart 0729                            _adcLoop 0059  
                        ?_startADC 0070                            ___ftdiv 01B5  
                          ___fttol 025D                            ___lwdiv 0577  
                          ___lwmod 05DA                         ??___altoft 002C  
                       ??___ftpack 0025                            __ptext1 04F7  
                          __ptext2 0607                            __ptext3 0366  
                          __ptext4 0063                            __ptext5 05AC  
                          __ptext6 062D                            __ptext7 0724  
                          __ptext8 06B1                            __ptext9 0696  
                     __size_of_ISR 0050                   ___aldiv@dividend 0024  
                          clrloop0 0715               end_of_initialization 0060  
                     _nrf24l01Init 0607                       _nrf24l01Send 06D8  
                          itoa@buf 0037                            itoa@val 0031  
                 ___aldiv@quotient 002B                         ??_startADC 0020  
          nrf24l01SendFlash@offset 0027                            utoa@buf 0030  
                          utoa@val 0028                          _PORTAbits 000C  
                 __CFG_FOSC$INTOSC 0000                          _TRISAbits 008C  
                        _TRISCbits 008E                   nrf24l01Send@data 0071  
                    ??_nrf24l01ISR 0074                        ___ftdiv@exp 003E  
                  ??_read_flashmem 0022         __size_of_nrf24l01SendFlash 001B  
       __size_of_nrf24l01SendStart 0005      nrf24l01SetTransmitMode@config 0021  
                    __pidataCOMMON 0729            _nrf24l01SetTransmitMode 06B1  
               write_flashmem@data 0022                start_initialization 0055  
                  _nrf24l01SPISend 06F4                        __end_of_ISR 0054  
          __size_of_write_flashmem 0044            __size_of_nrf24l01SPIEnd 0007  
                  _nrf24l01SendEnd 06E7            ??_nrf24l01InitRegisters 0020  
              __end_of_nrf24l01ISR 06D8                        __pdataBANK0 0063  
                __size_of___altoft 003C                  __size_of___ftpack 0065  
                      __pbssCOMMON 007C                          ___latbits 0000  
                    __pcstackBANK0 0020                  ?_nrf24l01SPIStart 0070  
               ??_nrf24l01SPIStart 0070                   ___lwdiv@dividend 0022  
                         ?___aldiv 0020                           ?___ftdiv 0030  
                         ?___fttol 0040                           ?___lwdiv 0020  
        ??_nrf24l01SetTransmitMode 0020                           ?___lwmod 0020  
             __end_of_n_ADDRESS_P0 071F            __end_of_nrf24l01SPISend 06FF  
                    _NVMEM_absaddr 07E0                  __size_of_startADC 002E  
               _nrf24l01SendString 062D            __end_of_nrf24l01SendEnd 06F4  
                 ___lwdiv@quotient 0025                ?_nrf24l01SendString 0020  
                  ___aldiv@divisor 0020                    ___aldiv@counter 0029  
nrf24l01InitRegisters@setupRetries 0022                        _nrf24l01ISR 06C8  
                        clear_ram0 0714                           _PIE1bits 0091  
                         _PIR1bits 0011               ??_nrf24l01SendString 0022  
                       _ADCON0bits 009D                         _ADCON1bits 009E  
                         _WPUAbits 020C    __end_of_nrf24l01SetTransmitMode 06C8  
                   _write_flashmem 04F7                     _nrf24l01SPIEnd 070D  
                  startADC@channel 0021                   __size_of___aldiv 0082  
                 __size_of___ftdiv 00A8                           ___altoft 053B  
                 __size_of___fttol 0087                   __size_of___lwdiv 0035  
                 __size_of___lwmod 002D                           ___ftpack 03DD  
                 ?_nrf24l01SPISend 0070                         _ANSELAbits 018C  
                       _ANSELCbits 018E                      _n_ADDRESS_MUL 072B  
                  ___lwdiv@divisor 0020                    ___lwdiv@counter 0027  
                         __ptext10 0650                           __ptext11 06E7  
                         __ptext20 02E4                           __ptext12 0673  
                         __ptext13 0442                           __ptext22 06C8  
                         __ptext14 05DA                           __ptext23 06D8  
                         __ptext15 0577                           __ptext24 0706  
                         __ptext16 025D             __end_of_write_flashmem 053B  
                         __ptext25 06F4                           __ptext17 01B5  
                         __ptext26 070D                           __ptext18 053B  
                         __ptext19 03DD                   ?_nrf24l01SendEnd 0070  
           __end_of_nrf24l01SPIEnd 0714                           _intCount 0057  
                    __size_of_main 0059                      __size_of_itoa 0023  
                    __size_of_loop 0152                      __size_of_utoa 005C  
     nrf24l01InitRegisters@feature 0023                           _nextMode 0063  
            __end_of_read_flashmem 0673       nrf24l01InitRegisters@rfSetup 0024  
   __size_of_nrf24l01InitRegisters 0077      __end_of_nrf24l01InitRegisters 03DD  
                         int$flags 007E                           _startADC 05AC  
     nrf24l01InitRegisters@setupAW 0021                       _SSP1STATbits 0214  
                       _INTCONbits 000B                         _FVRCONbits 0117  
                         itoa@base 0033                    ?_write_flashmem 0020  
                  ?_nrf24l01SPIEnd 0070                           intlevel1 0000  
              read_flashmem@offset 0020                       _n_ADDRESS_P0 071A  
              read_flashmem@result 0024                         _PMCON1bits 0195  
                 ___lwmod@dividend 0022                  __CFG_CLKOUTEN$OFF 0000  
      nrf24l01InitRegisters@config 0025                         _OSCCONbits 0099  
        __size_of_nrf24l01SPIStart 0007                      __pstringtext1 071A  
                    __pstringtext2 072B                      __pstringtext3 06FF  
                    __pstringtext4 071F                      __pstringtext5 0000  
                         utoa@base 002A         nrf24l01InitRegisters@DynPD 0027  
                  ___lwmod@divisor 0020                    ___lwmod@counter 0025  
                     ___aldiv@sign 002A                        _SSPCON1bits 0215  
                       _WDTCONbits 0097                      ?_nrf24l01Init 0070  
                    ?_nrf24l01Send 0071                         _STATUSbits 0003  
                     ?_nrf24l01ISR 0070  
