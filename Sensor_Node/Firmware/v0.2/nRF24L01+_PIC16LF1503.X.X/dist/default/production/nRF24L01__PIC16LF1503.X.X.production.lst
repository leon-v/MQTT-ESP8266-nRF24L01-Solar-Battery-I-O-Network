

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Jun 15 13:37:12 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	_NVMEM_text,global,class=CODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC16LF1503 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     	;# 
    87  0001                     	;# 
    88  0002                     	;# 
    89  0003                     	;# 
    90  0004                     	;# 
    91  0005                     	;# 
    92  0006                     	;# 
    93  0007                     	;# 
    94  0008                     	;# 
    95  0009                     	;# 
    96  000A                     	;# 
    97  000B                     	;# 
    98  000C                     	;# 
    99  000E                     	;# 
   100  0011                     	;# 
   101  0012                     	;# 
   102  0013                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  008C                     	;# 
   113  008E                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0095                     	;# 
   118  0096                     	;# 
   119  0097                     	;# 
   120  0099                     	;# 
   121  009A                     	;# 
   122  009B                     	;# 
   123  009B                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  010C                     	;# 
   129  010E                     	;# 
   130  0111                     	;# 
   131  0112                     	;# 
   132  0113                     	;# 
   133  0114                     	;# 
   134  0115                     	;# 
   135  0116                     	;# 
   136  0117                     	;# 
   137  0118                     	;# 
   138  0119                     	;# 
   139  011D                     	;# 
   140  018C                     	;# 
   141  018E                     	;# 
   142  0191                     	;# 
   143  0191                     	;# 
   144  0192                     	;# 
   145  0193                     	;# 
   146  0193                     	;# 
   147  0194                     	;# 
   148  0195                     	;# 
   149  0196                     	;# 
   150  020C                     	;# 
   151  0211                     	;# 
   152  0211                     	;# 
   153  0212                     	;# 
   154  0212                     	;# 
   155  0213                     	;# 
   156  0213                     	;# 
   157  0214                     	;# 
   158  0214                     	;# 
   159  0215                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0216                     	;# 
   163  0216                     	;# 
   164  0217                     	;# 
   165  0217                     	;# 
   166  0391                     	;# 
   167  0392                     	;# 
   168  0393                     	;# 
   169  0498                     	;# 
   170  0498                     	;# 
   171  0499                     	;# 
   172  049A                     	;# 
   173  049B                     	;# 
   174  049B                     	;# 
   175  049C                     	;# 
   176  049D                     	;# 
   177  049E                     	;# 
   178  049F                     	;# 
   179  0611                     	;# 
   180  0612                     	;# 
   181  0613                     	;# 
   182  0613                     	;# 
   183  0614                     	;# 
   184  0615                     	;# 
   185  0616                     	;# 
   186  0616                     	;# 
   187  0617                     	;# 
   188  0618                     	;# 
   189  0619                     	;# 
   190  0619                     	;# 
   191  061A                     	;# 
   192  061B                     	;# 
   193  061C                     	;# 
   194  061C                     	;# 
   195  0691                     	;# 
   196  0692                     	;# 
   197  0693                     	;# 
   198  0694                     	;# 
   199  0695                     	;# 
   200  0F0F                     	;# 
   201  0F10                     	;# 
   202  0F11                     	;# 
   203  0F12                     	;# 
   204  0F13                     	;# 
   205  0F14                     	;# 
   206  0F15                     	;# 
   207  0F16                     	;# 
   208  0F17                     	;# 
   209  0F18                     	;# 
   210  0F19                     	;# 
   211  0F1A                     	;# 
   212  0F1B                     	;# 
   213  0F1C                     	;# 
   214  0F1D                     	;# 
   215  0F1E                     	;# 
   216  0F1F                     	;# 
   217  0FE3                     	;# 
   218  0FE4                     	;# 
   219  0FE5                     	;# 
   220  0FE6                     	;# 
   221  0FE7                     	;# 
   222  0FE8                     	;# 
   223  0FE9                     	;# 
   224  0FEA                     	;# 
   225  0FEB                     	;# 
   226  0FED                     	;# 
   227  0FEE                     	;# 
   228  0FEF                     	;# 
   229  0000                     	;# 
   230  0001                     	;# 
   231  0002                     	;# 
   232  0003                     	;# 
   233  0004                     	;# 
   234  0005                     	;# 
   235  0006                     	;# 
   236  0007                     	;# 
   237  0008                     	;# 
   238  0009                     	;# 
   239  000A                     	;# 
   240  000B                     	;# 
   241  000C                     	;# 
   242  000E                     	;# 
   243  0011                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0015                     	;# 
   247  0016                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001C                     	;# 
   255  008C                     	;# 
   256  008E                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0095                     	;# 
   261  0096                     	;# 
   262  0097                     	;# 
   263  0099                     	;# 
   264  009A                     	;# 
   265  009B                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  009F                     	;# 
   271  010C                     	;# 
   272  010E                     	;# 
   273  0111                     	;# 
   274  0112                     	;# 
   275  0113                     	;# 
   276  0114                     	;# 
   277  0115                     	;# 
   278  0116                     	;# 
   279  0117                     	;# 
   280  0118                     	;# 
   281  0119                     	;# 
   282  011D                     	;# 
   283  018C                     	;# 
   284  018E                     	;# 
   285  0191                     	;# 
   286  0191                     	;# 
   287  0192                     	;# 
   288  0193                     	;# 
   289  0193                     	;# 
   290  0194                     	;# 
   291  0195                     	;# 
   292  0196                     	;# 
   293  020C                     	;# 
   294  0211                     	;# 
   295  0211                     	;# 
   296  0212                     	;# 
   297  0212                     	;# 
   298  0213                     	;# 
   299  0213                     	;# 
   300  0214                     	;# 
   301  0214                     	;# 
   302  0215                     	;# 
   303  0215                     	;# 
   304  0215                     	;# 
   305  0216                     	;# 
   306  0216                     	;# 
   307  0217                     	;# 
   308  0217                     	;# 
   309  0391                     	;# 
   310  0392                     	;# 
   311  0393                     	;# 
   312  0498                     	;# 
   313  0498                     	;# 
   314  0499                     	;# 
   315  049A                     	;# 
   316  049B                     	;# 
   317  049B                     	;# 
   318  049C                     	;# 
   319  049D                     	;# 
   320  049E                     	;# 
   321  049F                     	;# 
   322  0611                     	;# 
   323  0612                     	;# 
   324  0613                     	;# 
   325  0613                     	;# 
   326  0614                     	;# 
   327  0615                     	;# 
   328  0616                     	;# 
   329  0616                     	;# 
   330  0617                     	;# 
   331  0618                     	;# 
   332  0619                     	;# 
   333  0619                     	;# 
   334  061A                     	;# 
   335  061B                     	;# 
   336  061C                     	;# 
   337  061C                     	;# 
   338  0691                     	;# 
   339  0692                     	;# 
   340  0693                     	;# 
   341  0694                     	;# 
   342  0695                     	;# 
   343  0F0F                     	;# 
   344  0F10                     	;# 
   345  0F11                     	;# 
   346  0F12                     	;# 
   347  0F13                     	;# 
   348  0F14                     	;# 
   349  0F15                     	;# 
   350  0F16                     	;# 
   351  0F17                     	;# 
   352  0F18                     	;# 
   353  0F19                     	;# 
   354  0F1A                     	;# 
   355  0F1B                     	;# 
   356  0F1C                     	;# 
   357  0F1D                     	;# 
   358  0F1E                     	;# 
   359  0F1F                     	;# 
   360  0FE3                     	;# 
   361  0FE4                     	;# 
   362  0FE5                     	;# 
   363  0FE6                     	;# 
   364  0FE7                     	;# 
   365  0FE8                     	;# 
   366  0FE9                     	;# 
   367  0FEA                     	;# 
   368  0FEB                     	;# 
   369  0FED                     	;# 
   370  0FEE                     	;# 
   371  0FEF                     	;# 
   372  0000                     	;# 
   373  0001                     	;# 
   374  0002                     	;# 
   375  0003                     	;# 
   376  0004                     	;# 
   377  0005                     	;# 
   378  0006                     	;# 
   379  0007                     	;# 
   380  0008                     	;# 
   381  0009                     	;# 
   382  000A                     	;# 
   383  000B                     	;# 
   384  000C                     	;# 
   385  000E                     	;# 
   386  0011                     	;# 
   387  0012                     	;# 
   388  0013                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0016                     	;# 
   392  0017                     	;# 
   393  0018                     	;# 
   394  0019                     	;# 
   395  001A                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  008C                     	;# 
   399  008E                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0095                     	;# 
   404  0096                     	;# 
   405  0097                     	;# 
   406  0099                     	;# 
   407  009A                     	;# 
   408  009B                     	;# 
   409  009B                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009E                     	;# 
   413  009F                     	;# 
   414  010C                     	;# 
   415  010E                     	;# 
   416  0111                     	;# 
   417  0112                     	;# 
   418  0113                     	;# 
   419  0114                     	;# 
   420  0115                     	;# 
   421  0116                     	;# 
   422  0117                     	;# 
   423  0118                     	;# 
   424  0119                     	;# 
   425  011D                     	;# 
   426  018C                     	;# 
   427  018E                     	;# 
   428  0191                     	;# 
   429  0191                     	;# 
   430  0192                     	;# 
   431  0193                     	;# 
   432  0193                     	;# 
   433  0194                     	;# 
   434  0195                     	;# 
   435  0196                     	;# 
   436  020C                     	;# 
   437  0211                     	;# 
   438  0211                     	;# 
   439  0212                     	;# 
   440  0212                     	;# 
   441  0213                     	;# 
   442  0213                     	;# 
   443  0214                     	;# 
   444  0214                     	;# 
   445  0215                     	;# 
   446  0215                     	;# 
   447  0215                     	;# 
   448  0216                     	;# 
   449  0216                     	;# 
   450  0217                     	;# 
   451  0217                     	;# 
   452  0391                     	;# 
   453  0392                     	;# 
   454  0393                     	;# 
   455  0498                     	;# 
   456  0498                     	;# 
   457  0499                     	;# 
   458  049A                     	;# 
   459  049B                     	;# 
   460  049B                     	;# 
   461  049C                     	;# 
   462  049D                     	;# 
   463  049E                     	;# 
   464  049F                     	;# 
   465  0611                     	;# 
   466  0612                     	;# 
   467  0613                     	;# 
   468  0613                     	;# 
   469  0614                     	;# 
   470  0615                     	;# 
   471  0616                     	;# 
   472  0616                     	;# 
   473  0617                     	;# 
   474  0618                     	;# 
   475  0619                     	;# 
   476  0619                     	;# 
   477  061A                     	;# 
   478  061B                     	;# 
   479  061C                     	;# 
   480  061C                     	;# 
   481  0691                     	;# 
   482  0692                     	;# 
   483  0693                     	;# 
   484  0694                     	;# 
   485  0695                     	;# 
   486  0F0F                     	;# 
   487  0F10                     	;# 
   488  0F11                     	;# 
   489  0F12                     	;# 
   490  0F13                     	;# 
   491  0F14                     	;# 
   492  0F15                     	;# 
   493  0F16                     	;# 
   494  0F17                     	;# 
   495  0F18                     	;# 
   496  0F19                     	;# 
   497  0F1A                     	;# 
   498  0F1B                     	;# 
   499  0F1C                     	;# 
   500  0F1D                     	;# 
   501  0F1E                     	;# 
   502  0F1F                     	;# 
   503  0FE3                     	;# 
   504  0FE4                     	;# 
   505  0FE5                     	;# 
   506  0FE6                     	;# 
   507  0FE7                     	;# 
   508  0FE8                     	;# 
   509  0FE9                     	;# 
   510  0FEA                     	;# 
   511  0FEB                     	;# 
   512  0FED                     	;# 
   513  0FEE                     	;# 
   514  0FEF                     	;# 
   515  0000                     	;# 
   516  0001                     	;# 
   517  0002                     	;# 
   518  0003                     	;# 
   519  0004                     	;# 
   520  0005                     	;# 
   521  0006                     	;# 
   522  0007                     	;# 
   523  0008                     	;# 
   524  0009                     	;# 
   525  000A                     	;# 
   526  000B                     	;# 
   527  000C                     	;# 
   528  000E                     	;# 
   529  0011                     	;# 
   530  0012                     	;# 
   531  0013                     	;# 
   532  0015                     	;# 
   533  0016                     	;# 
   534  0016                     	;# 
   535  0017                     	;# 
   536  0018                     	;# 
   537  0019                     	;# 
   538  001A                     	;# 
   539  001B                     	;# 
   540  001C                     	;# 
   541  008C                     	;# 
   542  008E                     	;# 
   543  0091                     	;# 
   544  0092                     	;# 
   545  0093                     	;# 
   546  0095                     	;# 
   547  0096                     	;# 
   548  0097                     	;# 
   549  0099                     	;# 
   550  009A                     	;# 
   551  009B                     	;# 
   552  009B                     	;# 
   553  009C                     	;# 
   554  009D                     	;# 
   555  009E                     	;# 
   556  009F                     	;# 
   557  010C                     	;# 
   558  010E                     	;# 
   559  0111                     	;# 
   560  0112                     	;# 
   561  0113                     	;# 
   562  0114                     	;# 
   563  0115                     	;# 
   564  0116                     	;# 
   565  0117                     	;# 
   566  0118                     	;# 
   567  0119                     	;# 
   568  011D                     	;# 
   569  018C                     	;# 
   570  018E                     	;# 
   571  0191                     	;# 
   572  0191                     	;# 
   573  0192                     	;# 
   574  0193                     	;# 
   575  0193                     	;# 
   576  0194                     	;# 
   577  0195                     	;# 
   578  0196                     	;# 
   579  020C                     	;# 
   580  0211                     	;# 
   581  0211                     	;# 
   582  0212                     	;# 
   583  0212                     	;# 
   584  0213                     	;# 
   585  0213                     	;# 
   586  0214                     	;# 
   587  0214                     	;# 
   588  0215                     	;# 
   589  0215                     	;# 
   590  0215                     	;# 
   591  0216                     	;# 
   592  0216                     	;# 
   593  0217                     	;# 
   594  0217                     	;# 
   595  0391                     	;# 
   596  0392                     	;# 
   597  0393                     	;# 
   598  0498                     	;# 
   599  0498                     	;# 
   600  0499                     	;# 
   601  049A                     	;# 
   602  049B                     	;# 
   603  049B                     	;# 
   604  049C                     	;# 
   605  049D                     	;# 
   606  049E                     	;# 
   607  049F                     	;# 
   608  0611                     	;# 
   609  0612                     	;# 
   610  0613                     	;# 
   611  0613                     	;# 
   612  0614                     	;# 
   613  0615                     	;# 
   614  0616                     	;# 
   615  0616                     	;# 
   616  0617                     	;# 
   617  0618                     	;# 
   618  0619                     	;# 
   619  0619                     	;# 
   620  061A                     	;# 
   621  061B                     	;# 
   622  061C                     	;# 
   623  061C                     	;# 
   624  0691                     	;# 
   625  0692                     	;# 
   626  0693                     	;# 
   627  0694                     	;# 
   628  0695                     	;# 
   629  0F0F                     	;# 
   630  0F10                     	;# 
   631  0F11                     	;# 
   632  0F12                     	;# 
   633  0F13                     	;# 
   634  0F14                     	;# 
   635  0F15                     	;# 
   636  0F16                     	;# 
   637  0F17                     	;# 
   638  0F18                     	;# 
   639  0F19                     	;# 
   640  0F1A                     	;# 
   641  0F1B                     	;# 
   642  0F1C                     	;# 
   643  0F1D                     	;# 
   644  0F1E                     	;# 
   645  0F1F                     	;# 
   646  0FE3                     	;# 
   647  0FE4                     	;# 
   648  0FE5                     	;# 
   649  0FE6                     	;# 
   650  0FE7                     	;# 
   651  0FE8                     	;# 
   652  0FE9                     	;# 
   653  0FEA                     	;# 
   654  0FEB                     	;# 
   655  0FED                     	;# 
   656  0FEE                     	;# 
   657  0FEF                     	;# 
   658  0000                     	;# 
   659  0001                     	;# 
   660  0002                     	;# 
   661  0003                     	;# 
   662  0004                     	;# 
   663  0005                     	;# 
   664  0006                     	;# 
   665  0007                     	;# 
   666  0008                     	;# 
   667  0009                     	;# 
   668  000A                     	;# 
   669  000B                     	;# 
   670  000C                     	;# 
   671  000E                     	;# 
   672  0011                     	;# 
   673  0012                     	;# 
   674  0013                     	;# 
   675  0015                     	;# 
   676  0016                     	;# 
   677  0016                     	;# 
   678  0017                     	;# 
   679  0018                     	;# 
   680  0019                     	;# 
   681  001A                     	;# 
   682  001B                     	;# 
   683  001C                     	;# 
   684  008C                     	;# 
   685  008E                     	;# 
   686  0091                     	;# 
   687  0092                     	;# 
   688  0093                     	;# 
   689  0095                     	;# 
   690  0096                     	;# 
   691  0097                     	;# 
   692  0099                     	;# 
   693  009A                     	;# 
   694  009B                     	;# 
   695  009B                     	;# 
   696  009C                     	;# 
   697  009D                     	;# 
   698  009E                     	;# 
   699  009F                     	;# 
   700  010C                     	;# 
   701  010E                     	;# 
   702  0111                     	;# 
   703  0112                     	;# 
   704  0113                     	;# 
   705  0114                     	;# 
   706  0115                     	;# 
   707  0116                     	;# 
   708  0117                     	;# 
   709  0118                     	;# 
   710  0119                     	;# 
   711  011D                     	;# 
   712  018C                     	;# 
   713  018E                     	;# 
   714  0191                     	;# 
   715  0191                     	;# 
   716  0192                     	;# 
   717  0193                     	;# 
   718  0193                     	;# 
   719  0194                     	;# 
   720  0195                     	;# 
   721  0196                     	;# 
   722  020C                     	;# 
   723  0211                     	;# 
   724  0211                     	;# 
   725  0212                     	;# 
   726  0212                     	;# 
   727  0213                     	;# 
   728  0213                     	;# 
   729  0214                     	;# 
   730  0214                     	;# 
   731  0215                     	;# 
   732  0215                     	;# 
   733  0215                     	;# 
   734  0216                     	;# 
   735  0216                     	;# 
   736  0217                     	;# 
   737  0217                     	;# 
   738  0391                     	;# 
   739  0392                     	;# 
   740  0393                     	;# 
   741  0498                     	;# 
   742  0498                     	;# 
   743  0499                     	;# 
   744  049A                     	;# 
   745  049B                     	;# 
   746  049B                     	;# 
   747  049C                     	;# 
   748  049D                     	;# 
   749  049E                     	;# 
   750  049F                     	;# 
   751  0611                     	;# 
   752  0612                     	;# 
   753  0613                     	;# 
   754  0613                     	;# 
   755  0614                     	;# 
   756  0615                     	;# 
   757  0616                     	;# 
   758  0616                     	;# 
   759  0617                     	;# 
   760  0618                     	;# 
   761  0619                     	;# 
   762  0619                     	;# 
   763  061A                     	;# 
   764  061B                     	;# 
   765  061C                     	;# 
   766  061C                     	;# 
   767  0691                     	;# 
   768  0692                     	;# 
   769  0693                     	;# 
   770  0694                     	;# 
   771  0695                     	;# 
   772  0F0F                     	;# 
   773  0F10                     	;# 
   774  0F11                     	;# 
   775  0F12                     	;# 
   776  0F13                     	;# 
   777  0F14                     	;# 
   778  0F15                     	;# 
   779  0F16                     	;# 
   780  0F17                     	;# 
   781  0F18                     	;# 
   782  0F19                     	;# 
   783  0F1A                     	;# 
   784  0F1B                     	;# 
   785  0F1C                     	;# 
   786  0F1D                     	;# 
   787  0F1E                     	;# 
   788  0F1F                     	;# 
   789  0FE3                     	;# 
   790  0FE4                     	;# 
   791  0FE5                     	;# 
   792  0FE6                     	;# 
   793  0FE7                     	;# 
   794  0FE8                     	;# 
   795  0FE9                     	;# 
   796  0FEA                     	;# 
   797  0FEB                     	;# 
   798  0FED                     	;# 
   799  0FEE                     	;# 
   800  0FEF                     	;# 
   801                           
   802                           	psect	idataBANK0
   803  07D4                     __pidataBANK0:	
   804                           
   805                           ;initializer for _mode
   806  07D4  340A               	retlw	10
   807                           
   808                           ;initializer for _nextMode
   809  07D5  340A               	retlw	10
   810  07E0                     _NVMEM_absaddr	set	2016
   811                           
   812                           	psect	stringtext1
   813  07CA                     __pstringtext1:	
   814  07CA                     _n_ADDRESS_P0:	
   815  07CA  34AD               	retlw	173
   816  07CB  3487               	retlw	135
   817  07CC  3466               	retlw	102
   818  07CD  34BC               	retlw	188
   819  07CE  34BB               	retlw	187
   820  07CF                     __end_of_n_ADDRESS_P0:	
   821                           
   822                           	psect	stringtext2
   823  07D6                     __pstringtext2:	
   824  07D6                     _n_ADDRESS_MUL:	
   825  07D6  3421               	retlw	33
   826  07D7                     __end_of_n_ADDRESS_MUL:	
   827  07E0                     _NVMEM_absaddr	set	2016
   828                           
   829                           	psect	_NVMEM_text
   830  07E0                     __p_NVMEM_text:	
   831  07E0                     _NVMEM:	
   832  07E0  3455               	retlw	85
   833  07E1  346E               	retlw	110
   834  07E2  3463               	retlw	99
   835  07E3  346F               	retlw	111
   836  07E4  346E               	retlw	110
   837  07E5  3466               	retlw	102
   838  07E6  3469               	retlw	105
   839  07E7  3467               	retlw	103
   840  07E8  3475               	retlw	117
   841  07E9  3472               	retlw	114
   842  07EA  3465               	retlw	101
   843  07EB  3464               	retlw	100
   844  07EC  3431               	retlw	49
   845  07ED  3400               	retlw	0
   846  07EE  3400               	retlw	0
   847  07EF  3400               	retlw	0
   848  07F0  3400               	retlw	0
   849  07F1  3400               	retlw	0
   850  07F2  3400               	retlw	0
   851  07F3  3400               	retlw	0
   852  07F4  3400               	retlw	0
   853  07F5  3400               	retlw	0
   854  07F6  3400               	retlw	0
   855  07F7  3400               	retlw	0
   856  07F8  3400               	retlw	0
   857  07F9  3400               	retlw	0
   858  07FA  3400               	retlw	0
   859  07FB  3400               	retlw	0
   860  07FC  3400               	retlw	0
   861  07FD  3400               	retlw	0
   862  07FE  3400               	retlw	0
   863  07FF  3400               	retlw	0
   864  0800                     __end_of_NVMEM:	
   865  0003                     _STATUSbits	set	3
   866  0011                     _PIR1bits	set	17
   867  000C                     _PORTAbits	set	12
   868  000B                     _INTCONbits	set	11
   869  0097                     _WDTCONbits	set	151
   870  0091                     _PIE1bits	set	145
   871  009E                     _ADCON1bits	set	158
   872  0095                     _OPTION_REGbits	set	149
   873  0099                     _OSCCONbits	set	153
   874  009D                     _ADCON0bits	set	157
   875  009C                     _ADRESH	set	156
   876  009B                     _ADRESL	set	155
   877  008E                     _TRISCbits	set	142
   878  008C                     _TRISAbits	set	140
   879  0117                     _FVRCONbits	set	279
   880  018E                     _ANSELCbits	set	398
   881  018C                     _ANSELAbits	set	396
   882  018E                     _ANSELC	set	398
   883  018C                     _ANSELA	set	396
   884  0194                     _PMDATH	set	404
   885  0193                     _PMDATL	set	403
   886  0196                     _PMCON2	set	406
   887  0195                     _PMCON1bits	set	405
   888  0192                     _PMADRH	set	402
   889  0191                     _PMADRL	set	401
   890  0195                     _PMCON1	set	405
   891  020C                     _WPUAbits	set	524
   892  0211                     _SSP1BUF	set	529
   893  0214                     _SSP1STATbits	set	532
   894  0215                     _SSPCON1bits	set	533
   895                           
   896                           	psect	stringtext3
   897  079A                     __pstringtext3:	
   898  079A                     STR_2:	
   899  079A  342F               	retlw	47	;'/'
   900  079B  3443               	retlw	67	;'C'
   901  079C  344F               	retlw	79	;'O'
   902  079D  3455               	retlw	85	;'U'
   903  079E  344E               	retlw	78	;'N'
   904  079F  3454               	retlw	84	;'T'
   905  07A0  342F               	retlw	47	;'/'
   906  07A1  3400               	retlw	0
   907                           
   908                           	psect	stringtext4
   909  07A2                     __pstringtext4:	
   910  07A2                     STR_1:	
   911  07A2  342F               	retlw	47	;'/'
   912  07A3  3442               	retlw	66	;'B'
   913  07A4  344F               	retlw	79	;'O'
   914  07A5  344F               	retlw	79	;'O'
   915  07A6  3454               	retlw	84	;'T'
   916  07A7  342F               	retlw	47	;'/'
   917  07A8  3400               	retlw	0
   918                           
   919                           	psect	stringtext5
   920  07CF                     __pstringtext5:	
   921  07CF                     STR_3:	
   922  07CF  342F               	retlw	47	;'/'
   923  07D0  3441               	retlw	65	;'A'
   924  07D1  3444               	retlw	68	;'D'
   925  07D2  3443               	retlw	67	;'C'
   926  07D3  3400               	retlw	0
   927                           
   928                           	psect	stringtext6
   929  0000                     __pstringtext6:	
   930  07A0                     
   931                           ; #config settings
   932  0000                     
   933                           	psect	cinit
   934  0045                     start_initialization:	
   935  0045                     __initialization:	
   936                           
   937                           ; Initialize objects allocated to BANK0
   938  0045  27D4               	fcall	__pidataBANK0	;fetch initializer
   939  0046  00E3               	movwf	__pdataBANK0& (0+127)
   940  0047  27D5               	fcall	__pidataBANK0+1	;fetch initializer
   941  0048  00E4               	movwf	(__pdataBANK0+1)& (0+127)
   942                           
   943                           ; Clear objects allocated to BANK0
   944  0049  3048               	movlw	low __pbssBANK0
   945  004A  0084               	movwf	4
   946  004B  3000               	movlw	high __pbssBANK0
   947  004C  0085               	movwf	5
   948  004D  301B               	movlw	27
   949  004E  27BE               	fcall	clear_ram0
   950  004F                     end_of_initialization:	
   951                           ;End of C runtime variable initialization code
   952                           
   953  004F                     __end_of__initialization:	
   954  004F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   955  0050  0020               	movlb	0
   956  0051  2B50               	ljmp	_main	;jump to C main() function
   957                           
   958                           	psect	bssBANK0
   959  0048                     __pbssBANK0:	
   960  0048                     _adcSum:	
   961  0048                     	ds	4
   962  004C                     _nrf24l01:	
   963  004C                     	ds	3
   964  004F                     _counter:	
   965  004F                     	ds	2
   966  0051                     _sleepLoop:	
   967  0051                     	ds	1
   968  0052                     _adcLoop:	
   969  0052                     	ds	1
   970  0053                     _string:	
   971  0053                     	ds	16
   972                           
   973                           	psect	dataBANK0
   974  0063                     __pdataBANK0:	
   975  0063                     _mode:	
   976  0063                     	ds	1
   977  0064                     _nextMode:	
   978  0064                     	ds	1
   979                           
   980                           	psect	clrtext
   981  07BE                     clear_ram0:	
   982                           ;	Called with FSR0 containing the base address, and
   983                           ;	WREG with the size to clear
   984                           
   985  07BE  0064               	clrwdt	;clear the watchdog before getting into this loop
   986  07BF                     clrloop0:	
   987  07BF  0180               	clrf	0	;clear RAM location pointed to by FSR
   988  07C0  3101               	addfsr 0,1
   989  07C1  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   990  07C2  2FBF               	goto	clrloop0	;have we reached the end yet?
   991  07C3  3400               	retlw	0	;all done for this memory range, return
   992                           
   993                           	psect	cstackBANK1
   994  00A0                     __pcstackBANK1:	
   995  00A0                     __itoa@buffer:	
   996                           
   997                           ; 1 bytes @ 0x0
   998  00A0                     	ds	1
   999  00A1                     ??_loop:	
  1000                           
  1001                           ; 1 bytes @ 0x1
  1002  00A1                     	ds	4
  1003  00A5                     ??_main:	
  1004                           
  1005                           ; 1 bytes @ 0x5
  1006  00A5                     	ds	1
  1007  00A6                     main@bootCount:	
  1008                           
  1009                           ; 2 bytes @ 0x6
  1010  00A6                     	ds	2
  1011                           
  1012                           	psect	cstackCOMMON
  1013  0070                     __pcstackCOMMON:	
  1014  0070                     ?_nrf24l01ISR:	
  1015  0070                     ?_nrf24l01Init:	
  1016                           ; 1 bytes @ 0x0
  1017                           
  1018  0070                     ?_nrf24l01InterfaceInit:	
  1019                           ; 1 bytes @ 0x0
  1020                           
  1021  0070                     ?_nrf24l01SPISend:	
  1022                           ; 1 bytes @ 0x0
  1023                           
  1024  0070                     ??_nrf24l01SPISend:	
  1025                           ; 1 bytes @ 0x0
  1026                           
  1027  0070                     ?_nrf24l01SPIStart:	
  1028                           ; 1 bytes @ 0x0
  1029                           
  1030  0070                     ??_nrf24l01SPIStart:	
  1031                           ; 1 bytes @ 0x0
  1032                           
  1033  0070                     ?_nrf24l01SPIEnd:	
  1034                           ; 1 bytes @ 0x0
  1035                           
  1036  0070                     ??_nrf24l01SPIEnd:	
  1037                           ; 1 bytes @ 0x0
  1038                           
  1039  0070                     ?_enableInterrupts:	
  1040                           ; 1 bytes @ 0x0
  1041                           
  1042  0070                     ??_enableInterrupts:	
  1043                           ; 1 bytes @ 0x0
  1044                           
  1045  0070                     ?_ISR:	
  1046                           ; 1 bytes @ 0x0
  1047                           
  1048  0070                     ?_startADC:	
  1049                           ; 1 bytes @ 0x0
  1050                           
  1051  0070                     ?_loop:	
  1052                           ; 1 bytes @ 0x0
  1053                           
  1054  0070                     ?_main:	
  1055                           ; 1 bytes @ 0x0
  1056                           
  1057  0070                     ?_nrf24l01SetRXMode:	
  1058                           ; 1 bytes @ 0x0
  1059                           
  1060  0070                     ?_nrf24l01HandleRX:	
  1061                           ; 1 bytes @ 0x0
  1062                           
  1063  0070                     ?_nrf24l01CheckACK:	
  1064                           ; 1 bytes @ 0x0
  1065                           
  1066  0070                     ?_nrf24l01InitRegisters:	
  1067                           ; 1 bytes @ 0x0
  1068                           
  1069  0070                     ?i1_nrf24l01SetRXMode:	
  1070                           ; 1 bytes @ 0x0
  1071                           
  1072  0070                     ?i1_read_flashmem:	
  1073                           ; 1 bytes @ 0x0
  1074                           
  1075  0070                     ?i1_strlen:	
  1076                           ; 2 bytes @ 0x0
  1077                           
  1078  0070                     nrf24l01SPISend@data:	
  1079                           ; 2 bytes @ 0x0
  1080                           
  1081  0070                     enableInterrupts@enable:	
  1082                           ; 1 bytes @ 0x0
  1083                           
  1084  0070                     i1read_flashmem@offset:	
  1085                           ; 1 bytes @ 0x0
  1086                           
  1087                           
  1088                           ; 2 bytes @ 0x0
  1089  0070                     	ds	1
  1090  0071                     ??_nrf24l01Send:	
  1091                           
  1092                           ; 1 bytes @ 0x1
  1093  0071                     	ds	1
  1094  0072                     ??i1_read_flashmem:	
  1095  0072                     ??i1_strlen:	
  1096                           ; 1 bytes @ 0x2
  1097                           
  1098  0072                     nrf24l01Send@command:	
  1099                           ; 1 bytes @ 0x2
  1100                           
  1101                           
  1102                           ; 1 bytes @ 0x2
  1103  0072                     	ds	1
  1104  0073                     ??i1_nrf24l01SetRXMode:	
  1105                           
  1106                           ; 1 bytes @ 0x3
  1107  0073                     	ds	1
  1108  0074                     i1nrf24l01SetRXMode@rxMode:	
  1109                           
  1110                           ; 1 bytes @ 0x4
  1111  0074                     	ds	1
  1112  0075                     i1nrf24l01SetRXMode@config:	
  1113  0075                     i1read_flashmem@result:	
  1114                           ; 1 bytes @ 0x5
  1115                           
  1116                           
  1117                           ; 2 bytes @ 0x5
  1118  0075                     	ds	1
  1119  0076                     ??_nrf24l01CheckACK:	
  1120  0076                     i1strlen@s:	
  1121                           ; 1 bytes @ 0x6
  1122                           
  1123                           
  1124                           ; 1 bytes @ 0x6
  1125  0076                     	ds	1
  1126  0077                     i1strlen@cp:	
  1127  0077                     i1read_flashmem@address:	
  1128                           ; 1 bytes @ 0x7
  1129                           
  1130                           
  1131                           ; 2 bytes @ 0x7
  1132  0077                     	ds	2
  1133  0079                     ??_nrf24l01HandleRX:	
  1134                           
  1135                           ; 1 bytes @ 0x9
  1136  0079                     	ds	4
  1137  007D                     ??_nrf24l01ISR:	
  1138                           
  1139                           ; 1 bytes @ 0xD
  1140  007D                     	ds	1
  1141                           
  1142                           	psect	cstackBANK0
  1143  0020                     __pcstackBANK0:	
  1144  0020                     ?_nrf24l01Send:	
  1145  0020                     nrf24l01Send@data:	
  1146                           ; 1 bytes @ 0x0
  1147                           
  1148                           
  1149                           ; 1 bytes @ 0x0
  1150  0020                     	ds	1
  1151  0021                     nrf24l01HandleRX@width:	
  1152                           
  1153                           ; 1 bytes @ 0x1
  1154  0021                     	ds	1
  1155  0022                     nrf24l01HandleRX@byte:	
  1156                           
  1157                           ; 1 bytes @ 0x2
  1158  0022                     	ds	1
  1159  0023                     nrf24l01HandleRX@i:	
  1160                           
  1161                           ; 1 bytes @ 0x3
  1162  0023                     	ds	1
  1163  0024                     nrf24l01ISR@tempStatus:	
  1164                           
  1165                           ; 1 bytes @ 0x4
  1166  0024                     	ds	1
  1167  0025                     ??_ISR:	
  1168                           
  1169                           ; 1 bytes @ 0x5
  1170  0025                     	ds	4
  1171  0029                     ISR@result:	
  1172                           
  1173                           ; 2 bytes @ 0x9
  1174  0029                     	ds	2
  1175  002B                     ?_write_flashmem:	
  1176  002B                     ??_nrf24l01InterfaceInit:	
  1177                           ; 1 bytes @ 0xB
  1178                           
  1179  002B                     ??_startADC:	
  1180                           ; 1 bytes @ 0xB
  1181                           
  1182  002B                     ??_nrf24l01SetRXMode:	
  1183                           ; 1 bytes @ 0xB
  1184                           
  1185  002B                     ??_nrf24l01InitRegisters:	
  1186                           ; 1 bytes @ 0xB
  1187                           
  1188  002B                     ?_strlen:	
  1189                           ; 1 bytes @ 0xB
  1190                           
  1191  002B                     ?_read_flashmem:	
  1192                           ; 2 bytes @ 0xB
  1193                           
  1194  002B                     ?___lwdiv:	
  1195                           ; 2 bytes @ 0xB
  1196                           
  1197  002B                     ?___lwmod:	
  1198                           ; 2 bytes @ 0xB
  1199                           
  1200  002B                     ?___lmul:	
  1201                           ; 2 bytes @ 0xB
  1202                           
  1203  002B                     ?___lldiv:	
  1204                           ; 4 bytes @ 0xB
  1205                           
  1206  002B                     write_flashmem@offset:	
  1207                           ; 4 bytes @ 0xB
  1208                           
  1209  002B                     read_flashmem@offset:	
  1210                           ; 2 bytes @ 0xB
  1211                           
  1212  002B                     ___lwdiv@divisor:	
  1213                           ; 2 bytes @ 0xB
  1214                           
  1215  002B                     ___lwmod@divisor:	
  1216                           ; 2 bytes @ 0xB
  1217                           
  1218  002B                     ___lmul@multiplier:	
  1219                           ; 2 bytes @ 0xB
  1220                           
  1221  002B                     ___lldiv@divisor:	
  1222                           ; 4 bytes @ 0xB
  1223                           
  1224                           
  1225                           ; 4 bytes @ 0xB
  1226  002B                     	ds	1
  1227  002C                     startADC@channel:	
  1228  002C                     nrf24l01SetRXMode@rxMode:	
  1229                           ; 1 bytes @ 0xC
  1230                           
  1231  002C                     nrf24l01InitRegisters@feature:	
  1232                           ; 1 bytes @ 0xC
  1233                           
  1234                           
  1235                           ; 1 bytes @ 0xC
  1236  002C                     	ds	1
  1237  002D                     ??_strlen:	
  1238  002D                     ??_read_flashmem:	
  1239                           ; 1 bytes @ 0xD
  1240                           
  1241  002D                     nrf24l01SetRXMode@config:	
  1242                           ; 1 bytes @ 0xD
  1243                           
  1244  002D                     nrf24l01InitRegisters@status:	
  1245                           ; 1 bytes @ 0xD
  1246                           
  1247  002D                     write_flashmem@data:	
  1248                           ; 1 bytes @ 0xD
  1249                           
  1250  002D                     ___lwdiv@dividend:	
  1251                           ; 2 bytes @ 0xD
  1252                           
  1253  002D                     ___lwmod@dividend:	
  1254                           ; 2 bytes @ 0xD
  1255                           
  1256                           
  1257                           ; 2 bytes @ 0xD
  1258  002D                     	ds	1
  1259  002E                     nrf24l01InitRegisters@enRXAddr:	
  1260                           
  1261                           ; 1 bytes @ 0xE
  1262  002E                     	ds	1
  1263  002F                     ??_write_flashmem:	
  1264  002F                     ??___lwdiv:	
  1265                           ; 1 bytes @ 0xF
  1266                           
  1267  002F                     ??___lwmod:	
  1268                           ; 1 bytes @ 0xF
  1269                           
  1270  002F                     nrf24l01InitRegisters@enAA:	
  1271                           ; 1 bytes @ 0xF
  1272                           
  1273  002F                     write_flashmem@address:	
  1274                           ; 1 bytes @ 0xF
  1275                           
  1276  002F                     ___lmul@multiplicand:	
  1277                           ; 2 bytes @ 0xF
  1278                           
  1279  002F                     ___lldiv@dividend:	
  1280                           ; 4 bytes @ 0xF
  1281                           
  1282                           
  1283                           ; 4 bytes @ 0xF
  1284  002F                     	ds	1
  1285  0030                     nrf24l01InitRegisters@DynPD:	
  1286  0030                     ___lwdiv@counter:	
  1287                           ; 1 bytes @ 0x10
  1288                           
  1289  0030                     ___lwmod@counter:	
  1290                           ; 1 bytes @ 0x10
  1291                           
  1292  0030                     read_flashmem@result:	
  1293                           ; 1 bytes @ 0x10
  1294                           
  1295                           
  1296                           ; 2 bytes @ 0x10
  1297  0030                     	ds	1
  1298  0031                     nrf24l01InitRegisters@config:	
  1299  0031                     strlen@cp:	
  1300                           ; 1 bytes @ 0x11
  1301                           
  1302  0031                     ___lwdiv@quotient:	
  1303                           ; 1 bytes @ 0x11
  1304                           
  1305                           
  1306                           ; 2 bytes @ 0x11
  1307  0031                     	ds	1
  1308  0032                     ??_nrf24l01Init:	
  1309  0032                     strlen@s:	
  1310                           ; 1 bytes @ 0x12
  1311                           
  1312  0032                     read_flashmem@address:	
  1313                           ; 1 bytes @ 0x12
  1314                           
  1315                           
  1316                           ; 2 bytes @ 0x12
  1317  0032                     	ds	1
  1318  0033                     ?_strcpy:	
  1319  0033                     ?_utoa:	
  1320                           ; 1 bytes @ 0x13
  1321                           
  1322  0033                     ??___lmul:	
  1323                           ; 1 bytes @ 0x13
  1324                           
  1325  0033                     ??___lldiv:	
  1326                           ; 1 bytes @ 0x13
  1327                           
  1328  0033                     utoa@val:	
  1329                           ; 1 bytes @ 0x13
  1330                           
  1331  0033                     strcpy@from:	
  1332                           ; 2 bytes @ 0x13
  1333                           
  1334  0033                     ___lmul@product:	
  1335                           ; 2 bytes @ 0x13
  1336                           
  1337                           
  1338                           ; 4 bytes @ 0x13
  1339  0033                     	ds	1
  1340  0034                     ?_nrf24l01SendString:	
  1341  0034                     nrf24l01SendString@waitForAck:	
  1342                           ; 1 bytes @ 0x14
  1343                           
  1344  0034                     ___lldiv@quotient:	
  1345                           ; 1 bytes @ 0x14
  1346                           
  1347                           
  1348                           ; 4 bytes @ 0x14
  1349  0034                     	ds	1
  1350  0035                     ??_strcpy:	
  1351  0035                     ??_nrf24l01SendString:	
  1352                           ; 1 bytes @ 0x15
  1353                           
  1354  0035                     utoa@base:	
  1355                           ; 1 bytes @ 0x15
  1356                           
  1357                           
  1358                           ; 2 bytes @ 0x15
  1359  0035                     	ds	1
  1360  0036                     strcpy@cp:	
  1361                           
  1362                           ; 1 bytes @ 0x16
  1363  0036                     	ds	1
  1364  0037                     ??_utoa:	
  1365  0037                     strcpy@to:	
  1366                           ; 1 bytes @ 0x17
  1367                           
  1368                           
  1369                           ; 1 bytes @ 0x17
  1370  0037                     	ds	1
  1371  0038                     nrf24l01SendString@btye:	
  1372  0038                     ___lldiv@counter:	
  1373                           ; 1 bytes @ 0x18
  1374                           
  1375  0038                     utoa@v:	
  1376                           ; 1 bytes @ 0x18
  1377                           
  1378                           
  1379                           ; 2 bytes @ 0x18
  1380  0038                     	ds	1
  1381  0039                     nrf24l01SendString@string:	
  1382                           
  1383                           ; 1 bytes @ 0x19
  1384  0039                     	ds	1
  1385  003A                     nrf24l01SendString@i:	
  1386  003A                     utoa@c:	
  1387                           ; 1 bytes @ 0x1A
  1388                           
  1389                           
  1390                           ; 1 bytes @ 0x1A
  1391  003A                     	ds	1
  1392  003B                     utoa@buf:	
  1393                           
  1394                           ; 1 bytes @ 0x1B
  1395  003B                     	ds	1
  1396  003C                     ?_itoa:	
  1397  003C                     itoa@val:	
  1398                           ; 1 bytes @ 0x1C
  1399                           
  1400                           
  1401                           ; 2 bytes @ 0x1C
  1402  003C                     	ds	2
  1403  003E                     itoa@base:	
  1404                           
  1405                           ; 2 bytes @ 0x1E
  1406  003E                     	ds	2
  1407  0040                     ??_itoa:	
  1408                           
  1409                           ; 1 bytes @ 0x20
  1410  0040                     	ds	1
  1411  0041                     itoa@cp:	
  1412                           
  1413                           ; 1 bytes @ 0x21
  1414  0041                     	ds	1
  1415  0042                     itoa@buf:	
  1416                           
  1417                           ; 1 bytes @ 0x22
  1418  0042                     	ds	1
  1419  0043                     ?__itoa:	
  1420  0043                     __itoa@number:	
  1421                           ; 1 bytes @ 0x23
  1422                           
  1423                           
  1424                           ; 2 bytes @ 0x23
  1425  0043                     	ds	2
  1426  0045                     __itoa@base:	
  1427                           
  1428                           ; 1 bytes @ 0x25
  1429  0045                     	ds	1
  1430  0046                     ??__itoa:	
  1431                           
  1432                           ; 1 bytes @ 0x26
  1433  0046                     	ds	2
  1434                           
  1435                           	psect	maintext
  1436  0350                     __pmaintext:	
  1437 ;;
  1438 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1439 ;;
  1440 ;; *************** function _main *****************
  1441 ;; Defined at:
  1442 ;;		line 191 in file "main.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;		None
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;  bootCount       2    6[BANK1 ] unsigned int 
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1451 ;; Tracked objects:
  1452 ;;		On entry : B1F/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMMON   BANK0   BANK1
  1456 ;;      Params:         0       0       0
  1457 ;;      Locals:         0       0       2
  1458 ;;      Temps:          0       0       1
  1459 ;;      Totals:         0       0       3
  1460 ;;Total ram usage:        3 bytes
  1461 ;; Hardware stack levels required when called:   11
  1462 ;; This function calls:
  1463 ;;		_loop
  1464 ;;		_nrf24l01Init
  1465 ;;		_read_flashmem
  1466 ;;		_write_flashmem
  1467 ;; This function is called by:
  1468 ;;		Startup code after reset
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           
  1473                           ;psect for function _main
  1474  0350                     _main:	
  1475                           
  1476                           ;main.c: 194: ANSELA = 0x00;
  1477                           
  1478                           ;incstack = 0
  1479                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1480  0350  0023               	movlb	3	; select bank3
  1481  0351  018C               	clrf	12	;volatile
  1482                           
  1483                           ;main.c: 195: ANSELC = 0x00;
  1484  0352  018E               	clrf	14	;volatile
  1485                           
  1486                           ;main.c: 201: INTCONbits.PEIE = 0;
  1487  0353  130B               	bcf	11,6	;volatile
  1488                           
  1489                           ;main.c: 202: INTCONbits.GIE = 0;
  1490  0354  138B               	bcf	11,7	;volatile
  1491                           
  1492                           ;main.c: 204: OSCCONbits.IRCF = 0b1111;
  1493  0355  3078               	movlw	120
  1494  0356  0021               	movlb	1	; select bank1
  1495  0357  0499               	iorwf	25,f	;volatile
  1496                           
  1497                           ;main.c: 205: OSCCONbits.SCS = 0b10;
  1498  0358  0819               	movf	25,w	;volatile
  1499  0359  39FC               	andlw	-4
  1500  035A  3802               	iorlw	2
  1501  035B  0099               	movwf	25	;volatile
  1502                           
  1503                           ;main.c: 207: _delay((unsigned long)((10)*(16000000/4000.0)));
  1504  035C  3034               	movlw	52
  1505  035D  0021               	movlb	1	; select bank1
  1506  035E  00A5               	movwf	??_main^(0+128)
  1507  035F  30F1               	movlw	241
  1508  0360                     u2047:	
  1509  0360  0B89               	decfsz	9,f
  1510  0361  2B60               	goto	u2047
  1511  0362  0BA5               	decfsz	??_main^(0+128),f
  1512  0363  2B60               	goto	u2047
  1513  0364  3200               	nop2
  1514                           
  1515                           ;main.c: 209: nrf24l01Init();
  1516  0365  2723               	fcall	_nrf24l01Init
  1517                           
  1518                           ;main.c: 211: OPTION_REGbits.nWPUEN = 0;
  1519  0366  0021               	movlb	1	; select bank1
  1520  0367  1395               	bcf	21,7	;volatile
  1521                           
  1522                           ;main.c: 214: FVRCONbits.FVREN = 0;
  1523  0368  0022               	movlb	2	; select bank2
  1524  0369  1397               	bcf	23,7	;volatile
  1525                           
  1526                           ;main.c: 215: FVRCONbits.ADFVR = 1;
  1527  036A  0817               	movf	23,w	;volatile
  1528  036B  39FC               	andlw	-4
  1529  036C  3801               	iorlw	1
  1530  036D  0097               	movwf	23	;volatile
  1531                           
  1532                           ;main.c: 216: FVRCONbits.FVREN = 1;
  1533  036E  1797               	bsf	23,7	;volatile
  1534                           
  1535                           ;main.c: 219: FVRCONbits.TSEN = 0;
  1536  036F  1297               	bcf	23,5	;volatile
  1537                           
  1538                           ;main.c: 220: FVRCONbits.TSRNG = 0;
  1539  0370  1217               	bcf	23,4	;volatile
  1540                           
  1541                           ;main.c: 221: FVRCONbits.TSEN = 1;
  1542  0371  1697               	bsf	23,5	;volatile
  1543                           
  1544                           ;main.c: 224: ADCON0bits.ADON = 0;
  1545  0372  0021               	movlb	1	; select bank1
  1546  0373  101D               	bcf	29,0	;volatile
  1547                           
  1548                           ;main.c: 226: ANSELAbits.ANSA4 = 1;
  1549  0374  0023               	movlb	3	; select bank3
  1550  0375  160C               	bsf	12,4	;volatile
  1551                           
  1552                           ;main.c: 227: TRISAbits.TRISA4 = 1;
  1553  0376  0021               	movlb	1	; select bank1
  1554  0377  160C               	bsf	12,4	;volatile
  1555                           
  1556                           ;main.c: 228: WPUAbits.WPUA4 = 0;
  1557  0378  0024               	movlb	4	; select bank4
  1558  0379  120C               	bcf	12,4	;volatile
  1559                           
  1560                           ;main.c: 230: ANSELCbits.ANSC3 = 1;
  1561  037A  0023               	movlb	3	; select bank3
  1562  037B  158E               	bsf	14,3	;volatile
  1563                           
  1564                           ;main.c: 231: TRISCbits.TRISC3 = 1;
  1565  037C  0021               	movlb	1	; select bank1
  1566  037D  158E               	bsf	14,3	;volatile
  1567                           
  1568                           ;main.c: 233: ADCON1bits.ADCS = 0b111;
  1569  037E  3070               	movlw	112
  1570  037F  049E               	iorwf	30,f	;volatile
  1571                           
  1572                           ;main.c: 234: ADCON1bits.ADFM = 1;
  1573  0380  179E               	bsf	30,7	;volatile
  1574                           
  1575                           ;main.c: 235: ADCON1bits.ADPREF = 0b00;
  1576  0381  30FC               	movlw	-4
  1577  0382  059E               	andwf	30,f	;volatile
  1578                           
  1579                           ;main.c: 237: PIE1bits.ADIE = 1;
  1580  0383  1711               	bsf	17,6	;volatile
  1581                           
  1582                           ;main.c: 239: ADCON0bits.CHS = 3;
  1583  0384  081D               	movf	29,w	;volatile
  1584  0385  3983               	andlw	-125
  1585  0386  380C               	iorlw	12
  1586  0387  009D               	movwf	29	;volatile
  1587                           
  1588                           ;main.c: 240: ADCON0bits.ADON = 1;
  1589  0388  141D               	bsf	29,0	;volatile
  1590                           
  1591                           ;main.c: 244: TRISAbits.TRISA2 = 1;
  1592  0389  150C               	bsf	12,2	;volatile
  1593                           
  1594                           ;main.c: 245: INTCONbits.INTE = 1;
  1595  038A  160B               	bsf	11,4	;volatile
  1596                           
  1597                           ;main.c: 246: OPTION_REGbits.INTEDG = 0;
  1598  038B  1315               	bcf	21,6	;volatile
  1599                           
  1600                           ;main.c: 250: WDTCONbits.WDTPS = 12;
  1601  038C  0817               	movf	23,w	;volatile
  1602  038D  39C1               	andlw	-63
  1603  038E  3818               	iorlw	24
  1604  038F  0097               	movwf	23	;volatile
  1605                           
  1606                           ;main.c: 253: TRISAbits.TRISA5 = 0;
  1607  0390  128C               	bcf	12,5	;volatile
  1608                           
  1609                           ;main.c: 254: PORTAbits.RA5 = 0;
  1610  0391  0020               	movlb	0	; select bank0
  1611  0392  128C               	bcf	12,5	;volatile
  1612                           
  1613                           ;main.c: 257: INTCONbits.PEIE = 1;
  1614  0393  170B               	bsf	11,6	;volatile
  1615                           
  1616                           ;main.c: 258: INTCONbits.GIE = 1;
  1617  0394  178B               	bsf	11,7	;volatile
  1618                           
  1619                           ;main.c: 260: unsigned int bootCount = read_flashmem(16);
  1620  0395  3010               	movlw	16
  1621  0396  00AB               	movwf	read_flashmem@offset
  1622  0397  3000               	movlw	0
  1623  0398  00AC               	movwf	read_flashmem@offset+1
  1624  0399  259F               	fcall	_read_flashmem
  1625  039A  0020               	movlb	0	; select bank0
  1626  039B  082C               	movf	?_read_flashmem+1,w
  1627  039C  0021               	movlb	1	; select bank1
  1628  039D  00A7               	movwf	(main@bootCount+1)^(0+128)
  1629  039E  0020               	movlb	0	; select bank0
  1630  039F  082B               	movf	?_read_flashmem,w
  1631  03A0  0021               	movlb	1	; select bank1
  1632  03A1  00A6               	movwf	main@bootCount^(0+128)
  1633                           
  1634                           ;main.c: 261: if (bootCount == 13313){
  1635  03A2  0326               	decf	main@bootCount^(0+128),w
  1636  03A3  3034               	movlw	52
  1637  03A4  1903               	skipnz
  1638  03A5  0627               	xorwf	(main@bootCount+1)^(0+128),w
  1639  03A6  1D03               	btfss	3,2
  1640  03A7  2BAC               	goto	l192
  1641                           
  1642                           ;main.c: 262: bootCount = 1;
  1643  03A8  3001               	movlw	1
  1644  03A9  00A6               	movwf	main@bootCount^(0+128)
  1645  03AA  3000               	movlw	0
  1646  03AB  00A7               	movwf	(main@bootCount^(0+128)+1)
  1647  03AC                     l192:	
  1648                           
  1649                           ;main.c: 263: }
  1650                           ;main.c: 264: bootCount++;
  1651  03AC  3001               	movlw	1
  1652  03AD  07A6               	addwf	main@bootCount^(0+128),f
  1653  03AE  3000               	movlw	0
  1654  03AF  3DA7               	addwfc	(main@bootCount+1)^(0+128),f
  1655                           
  1656                           ;main.c: 265: write_flashmem(16, bootCount);
  1657  03B0  3010               	movlw	16
  1658  03B1  0020               	movlb	0	; select bank0
  1659  03B2  00AB               	movwf	write_flashmem@offset
  1660  03B3  3000               	movlw	0
  1661  03B4  00AC               	movwf	write_flashmem@offset+1
  1662  03B5  0021               	movlb	1	; select bank1
  1663  03B6  0827               	movf	(main@bootCount+1)^(0+128),w
  1664  03B7  0020               	movlb	0	; select bank0
  1665  03B8  00AE               	movwf	write_flashmem@data+1
  1666  03B9  0021               	movlb	1	; select bank1
  1667  03BA  0826               	movf	main@bootCount^(0+128),w
  1668  03BB  0020               	movlb	0	; select bank0
  1669  03BC  00AD               	movwf	write_flashmem@data
  1670  03BD  24BC               	fcall	_write_flashmem
  1671  03BE                     l2943:	
  1672                           ;main.c: 267: while(1){
  1673                           
  1674                           
  1675                           ;main.c: 268: loop();
  1676  03BE  2052               	fcall	_loop
  1677  03BF  2BBE               	goto	l2943
  1678  03C0                     __end_of_main:	
  1679                           ;main.c: 269: }
  1680                           ;main.c: 271: return;
  1681                           
  1682                           
  1683                           	psect	text1
  1684  04BC                     __ptext1:	
  1685 ;; *************** function _write_flashmem *****************
  1686 ;; Defined at:
  1687 ;;		line 3 in file "flash.c"
  1688 ;; Parameters:    Size  Location     Type
  1689 ;;  offset          2   11[BANK0 ] unsigned int 
  1690 ;;  data            2   13[BANK0 ] unsigned int 
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;  address         2   15[BANK0 ] unsigned int 
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      void 
  1695 ;; Registers used:
  1696 ;;		wreg, status,2, status,0
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMMON   BANK0   BANK1
  1702 ;;      Params:         0       4       0
  1703 ;;      Locals:         0       2       0
  1704 ;;      Temps:          0       0       0
  1705 ;;      Totals:         0       6       0
  1706 ;;Total ram usage:        6 bytes
  1707 ;; Hardware stack levels used:    1
  1708 ;; Hardware stack levels required when called:    6
  1709 ;; This function calls:
  1710 ;;		Nothing
  1711 ;; This function is called by:
  1712 ;;		_main
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           
  1717                           ;psect for function _write_flashmem
  1718  04BC                     _write_flashmem:	
  1719                           
  1720                           ;flash.c: 5: unsigned int address;
  1721                           ;flash.c: 7: INTCONbits.GIE = 0;
  1722                           
  1723                           ;incstack = 0
  1724                           ; Regs used in _write_flashmem: [wreg+status,2+status,0]
  1725  04BC  138B               	bcf	11,7	;volatile
  1726                           
  1727                           ;flash.c: 10: PMCON1 = 0x00;
  1728  04BD  0023               	movlb	3	; select bank3
  1729  04BE  0195               	clrf	21	;volatile
  1730                           
  1731                           ;flash.c: 12: address = (0x800U-32) + offset;
  1732  04BF  0020               	movlb	0	; select bank0
  1733  04C0  082B               	movf	write_flashmem@offset,w
  1734  04C1  3EE0               	addlw	224
  1735  04C2  00AF               	movwf	write_flashmem@address
  1736  04C3  3007               	movlw	7
  1737  04C4  3D2C               	addwfc	write_flashmem@offset+1,w
  1738  04C5  00B0               	movwf	write_flashmem@address+1
  1739                           
  1740                           ;flash.c: 13: PMADRL = (char) (address >> 0);
  1741  04C6  082F               	movf	write_flashmem@address,w
  1742  04C7  0023               	movlb	3	; select bank3
  1743  04C8  0091               	movwf	17	;volatile
  1744                           
  1745                           ;flash.c: 14: PMADRH = (char) (address >> 8);
  1746  04C9  0020               	movlb	0	; select bank0
  1747  04CA  0830               	movf	write_flashmem@address+1,w
  1748  04CB  0023               	movlb	3	; select bank3
  1749  04CC  0092               	movwf	18	;volatile
  1750                           
  1751                           ;flash.c: 16: PMCON1bits.FREE = 1;
  1752  04CD  1615               	bsf	21,4	;volatile
  1753                           
  1754                           ;flash.c: 17: PMCON1bits.WREN = 1;
  1755  04CE  1515               	bsf	21,2	;volatile
  1756                           
  1757                           ;flash.c: 19: PMCON2 = 0x55;
  1758  04CF  3055               	movlw	85
  1759  04D0  0096               	movwf	22	;volsfr
  1760                           
  1761                           ;flash.c: 20: PMCON2 = 0xAA;
  1762  04D1  30AA               	movlw	170
  1763  04D2  0096               	movwf	22	;volsfr
  1764                           
  1765                           ;flash.c: 22: PMCON1bits.WR = 1;
  1766  04D3  1495               	bsf	21,1	;volatile
  1767                           
  1768                           ;flash.c: 24: __nop();
  1769  04D4  0000               	nop
  1770                           
  1771                           ;flash.c: 25: __nop();
  1772  04D5  0000               	nop
  1773                           
  1774                           ;flash.c: 27: PMCON1bits.WREN = 0;
  1775  04D6  0023               	movlb	3	; select bank3
  1776  04D7  1115               	bcf	21,2	;volatile
  1777                           
  1778                           ;flash.c: 31: PMCON1 = 0x00;
  1779  04D8  0195               	clrf	21	;volatile
  1780                           
  1781                           ;flash.c: 33: PMADRL = (char) (address >> 0);
  1782  04D9  0020               	movlb	0	; select bank0
  1783  04DA  082F               	movf	write_flashmem@address,w
  1784  04DB  0023               	movlb	3	; select bank3
  1785  04DC  0091               	movwf	17	;volatile
  1786                           
  1787                           ;flash.c: 34: PMADRH = (char) (address >> 8);
  1788  04DD  0020               	movlb	0	; select bank0
  1789  04DE  0830               	movf	write_flashmem@address+1,w
  1790  04DF  0023               	movlb	3	; select bank3
  1791  04E0  0092               	movwf	18	;volatile
  1792                           
  1793                           ;flash.c: 36: PMCON1bits.FREE = 0;
  1794  04E1  1215               	bcf	21,4	;volatile
  1795                           
  1796                           ;flash.c: 37: PMCON1bits.LWLO = 1;
  1797  04E2  1695               	bsf	21,5	;volatile
  1798                           
  1799                           ;flash.c: 38: PMCON1bits.WREN = 1;
  1800  04E3  1515               	bsf	21,2	;volatile
  1801                           
  1802                           ;flash.c: 40: PMDATL = (data >> 0);
  1803  04E4  0020               	movlb	0	; select bank0
  1804  04E5  082D               	movf	write_flashmem@data,w
  1805  04E6  0023               	movlb	3	; select bank3
  1806  04E7  0093               	movwf	19	;volatile
  1807                           
  1808                           ;flash.c: 41: PMDATH = (data >> 8);
  1809  04E8  0020               	movlb	0	; select bank0
  1810  04E9  082E               	movf	write_flashmem@data+1,w
  1811  04EA  0023               	movlb	3	; select bank3
  1812  04EB  0094               	movwf	20	;volatile
  1813                           
  1814                           ;flash.c: 43: PMCON1bits.LWLO = 0;
  1815  04EC  1295               	bcf	21,5	;volatile
  1816                           
  1817                           ;flash.c: 45: PMCON2 = 0x55;
  1818  04ED  3055               	movlw	85
  1819  04EE  0096               	movwf	22	;volsfr
  1820                           
  1821                           ;flash.c: 46: PMCON2 = 0xAA;
  1822  04EF  30AA               	movlw	170
  1823  04F0  0096               	movwf	22	;volsfr
  1824                           
  1825                           ;flash.c: 48: PMCON1bits.WR = 1;
  1826  04F1  1495               	bsf	21,1	;volatile
  1827                           
  1828                           ;flash.c: 50: __nop();
  1829  04F2  0000               	nop
  1830                           
  1831                           ;flash.c: 51: __nop();
  1832  04F3  0000               	nop
  1833                           
  1834                           ;flash.c: 53: PMCON1bits.WREN = 0;
  1835  04F4  0023               	movlb	3	; select bank3
  1836  04F5  1115               	bcf	21,2	;volatile
  1837                           
  1838                           ;flash.c: 56: INTCONbits.GIE = 1;
  1839  04F6  178B               	bsf	11,7	;volatile
  1840  04F7  0008               	return
  1841  04F8                     __end_of_write_flashmem:	
  1842                           
  1843                           	psect	text2
  1844  0723                     __ptext2:	
  1845 ;; *************** function _nrf24l01Init *****************
  1846 ;; Defined at:
  1847 ;;		line 311 in file "nrf24l01.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		wreg, status,2, status,0, pclath, cstack
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMMON   BANK0   BANK1
  1861 ;;      Params:         0       0       0
  1862 ;;      Locals:         0       0       0
  1863 ;;      Temps:          0       1       0
  1864 ;;      Totals:         0       1       0
  1865 ;;Total ram usage:        1 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    9
  1868 ;; This function calls:
  1869 ;;		_nrf24l01InitRegisters
  1870 ;;		_nrf24l01InterfaceInit
  1871 ;;		_nrf24l01Send
  1872 ;; This function is called by:
  1873 ;;		_main
  1874 ;; This function uses a non-reentrant model
  1875 ;;
  1876                           
  1877                           
  1878                           ;psect for function _nrf24l01Init
  1879  0723                     _nrf24l01Init:	
  1880                           
  1881                           ;nrf24l01.c: 314: nrf24l01InterfaceInit();
  1882                           
  1883                           ;incstack = 0
  1884                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1885  0723  2781               	fcall	_nrf24l01InterfaceInit
  1886                           
  1887                           ;nrf24l01.c: 318: PORTAbits.RA0 = 0;
  1888  0724  0020               	movlb	0	; select bank0
  1889  0725  100C               	bcf	12,0	;volatile
  1890                           
  1891                           ;nrf24l01.c: 320: _delay((unsigned long)((11)*(16000000/4000.0)));
  1892  0726  303A               	movlw	58
  1893  0727  0020               	movlb	0	; select bank0
  1894  0728  00B2               	movwf	??_nrf24l01Init
  1895  0729  3023               	movlw	35
  1896  072A                     u2057:	
  1897  072A  0B89               	decfsz	9,f
  1898  072B  2F2A               	goto	u2057
  1899  072C  0BB2               	decfsz	??_nrf24l01Init,f
  1900  072D  2F2A               	goto	u2057
  1901                           
  1902                           ;nrf24l01.c: 322: nrf24l01InitRegisters();
  1903  072E  22DB               	fcall	_nrf24l01InitRegisters
  1904                           
  1905                           ;nrf24l01.c: 324: _delay((unsigned long)((2)*(16000000/4000.0)));
  1906  072F  300B               	movlw	11
  1907  0730  0020               	movlb	0	; select bank0
  1908  0731  00B2               	movwf	??_nrf24l01Init
  1909  0732  3062               	movlw	98
  1910  0733                     u2067:	
  1911  0733  0B89               	decfsz	9,f
  1912  0734  2F33               	goto	u2067
  1913  0735  0BB2               	decfsz	??_nrf24l01Init,f
  1914  0736  2F33               	goto	u2067
  1915  0737  0000               	nop
  1916                           
  1917                           ;nrf24l01.c: 326: nrf24l01.status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  1918  0738  0020               	movlb	0	; select bank0
  1919  0739  01A0               	clrf	nrf24l01Send@data
  1920  073A  3007               	movlw	7
  1921  073B  275C               	fcall	_nrf24l01Send
  1922  073C  0020               	movlb	0	; select bank0
  1923  073D  00B2               	movwf	??_nrf24l01Init
  1924  073E  0832               	movf	??_nrf24l01Init,w
  1925  073F  00CC               	movwf	_nrf24l01	;volatile
  1926  0740  0008               	return
  1927  0741                     __end_of_nrf24l01Init:	
  1928                           
  1929                           	psect	text3
  1930  0781                     __ptext3:	
  1931 ;; *************** function _nrf24l01InterfaceInit *****************
  1932 ;; Defined at:
  1933 ;;		line 9 in file "interface.c"
  1934 ;; Parameters:    Size  Location     Type
  1935 ;;		None
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;		None
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  1    wreg      void 
  1940 ;; Registers used:
  1941 ;;		wreg, status,2, status,0
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMMON   BANK0   BANK1
  1947 ;;      Params:         0       0       0
  1948 ;;      Locals:         0       0       0
  1949 ;;      Temps:          0       0       0
  1950 ;;      Totals:         0       0       0
  1951 ;;Total ram usage:        0 bytes
  1952 ;; Hardware stack levels used:    1
  1953 ;; Hardware stack levels required when called:    6
  1954 ;; This function calls:
  1955 ;;		Nothing
  1956 ;; This function is called by:
  1957 ;;		_nrf24l01Init
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           
  1962                           ;psect for function _nrf24l01InterfaceInit
  1963  0781                     _nrf24l01InterfaceInit:	
  1964                           
  1965                           ;interface.c: 11: TRISAbits.TRISA0 = 0;
  1966                           
  1967                           ;incstack = 0
  1968                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  1969  0781  0021               	movlb	1	; select bank1
  1970  0782  100C               	bcf	12,0	;volatile
  1971                           
  1972                           ;interface.c: 12: TRISAbits.TRISA1 = 0;
  1973  0783  108C               	bcf	12,1	;volatile
  1974                           
  1975                           ;interface.c: 14: TRISCbits.TRISC1 = 1;
  1976  0784  148E               	bsf	14,1	;volatile
  1977                           
  1978                           ;interface.c: 15: TRISCbits.TRISC2 = 0;
  1979  0785  110E               	bcf	14,2	;volatile
  1980                           
  1981                           ;interface.c: 16: TRISCbits.TRISC0 = 0;
  1982  0786  100E               	bcf	14,0	;volatile
  1983                           
  1984                           ;interface.c: 18: SSPCON1bits.SSPEN = 0;
  1985  0787  0024               	movlb	4	; select bank4
  1986  0788  1295               	bcf	21,5	;volatile
  1987                           
  1988                           ;interface.c: 19: SSPCON1bits.CKP = 0;
  1989  0789  1215               	bcf	21,4	;volatile
  1990                           
  1991                           ;interface.c: 20: SSP1STATbits.CKE = 1;
  1992  078A  1714               	bsf	20,6	;volatile
  1993                           
  1994                           ;interface.c: 21: SSPCON1bits.SSPM = 0b0000;
  1995  078B  30F0               	movlw	-16
  1996  078C  0595               	andwf	21,f	;volatile
  1997                           
  1998                           ;interface.c: 23: SSPCON1bits.SSPEN = 1;
  1999  078D  1695               	bsf	21,5	;volatile
  2000  078E  0008               	return
  2001  078F                     __end_of_nrf24l01InterfaceInit:	
  2002                           
  2003                           	psect	text4
  2004  02DB                     __ptext4:	
  2005 ;; *************** function _nrf24l01InitRegisters *****************
  2006 ;; Defined at:
  2007 ;;		line 219 in file "nrf24l01.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;		None
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  config          1   17[BANK0 ] struct .
  2012 ;;  DynPD           1   16[BANK0 ] struct .
  2013 ;;  enAA            1   15[BANK0 ] struct .
  2014 ;;  enRXAddr        1   14[BANK0 ] struct .
  2015 ;;  status          1   13[BANK0 ] struct .
  2016 ;;  feature         1   12[BANK0 ] struct .
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      void 
  2019 ;; Registers used:
  2020 ;;		wreg, status,2, status,0, pclath, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMMON   BANK0   BANK1
  2026 ;;      Params:         0       0       0
  2027 ;;      Locals:         0       6       0
  2028 ;;      Temps:          0       1       0
  2029 ;;      Totals:         0       7       0
  2030 ;;Total ram usage:        7 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    8
  2033 ;; This function calls:
  2034 ;;		_nrf24l01Send
  2035 ;; This function is called by:
  2036 ;;		_nrf24l01Init
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           
  2041                           ;psect for function _nrf24l01InitRegisters
  2042  02DB                     _nrf24l01InitRegisters:	
  2043                           
  2044                           ;nrf24l01.c: 222: n_CONFIG_t config;
  2045                           ;nrf24l01.c: 224: config.PWR_UP = 0;
  2046                           
  2047                           ;incstack = 0
  2048                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  2049  02DB  0020               	movlb	0	; select bank0
  2050  02DC  10B1               	bcf	nrf24l01InitRegisters@config,1
  2051                           
  2052                           ;nrf24l01.c: 225: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2053  02DD  0831               	movf	nrf24l01InitRegisters@config,w
  2054  02DE  00AB               	movwf	??_nrf24l01InitRegisters
  2055  02DF  082B               	movf	??_nrf24l01InitRegisters,w
  2056  02E0  00A0               	movwf	nrf24l01Send@data
  2057  02E1  3020               	movlw	32
  2058  02E2  275C               	fcall	_nrf24l01Send
  2059                           
  2060                           ;nrf24l01.c: 227: _delay((unsigned long)((10000)*(16000000/4000000.0)));
  2061  02E3  3034               	movlw	52
  2062  02E4  0020               	movlb	0	; select bank0
  2063  02E5  00AB               	movwf	??_nrf24l01InitRegisters
  2064  02E6  30F1               	movlw	241
  2065  02E7                     u2077:	
  2066  02E7  0B89               	decfsz	9,f
  2067  02E8  2AE7               	goto	u2077
  2068  02E9  0BAB               	decfsz	??_nrf24l01InitRegisters,f
  2069  02EA  2AE7               	goto	u2077
  2070  02EB  3200               	nop2
  2071                           
  2072                           ;nrf24l01.c: 253: n_EN_RXADDR_t enRXAddr;
  2073                           ;nrf24l01.c: 254: enRXAddr.ERX_P0 = 1;
  2074  02EC  0020               	movlb	0	; select bank0
  2075  02ED  142E               	bsf	nrf24l01InitRegisters@enRXAddr,0
  2076                           
  2077                           ;nrf24l01.c: 255: enRXAddr.ERX_P1 = 1;
  2078  02EE  14AE               	bsf	nrf24l01InitRegisters@enRXAddr,1
  2079                           
  2080                           ;nrf24l01.c: 256: enRXAddr.ERX_P2 = 1;
  2081  02EF  152E               	bsf	nrf24l01InitRegisters@enRXAddr,2
  2082                           
  2083                           ;nrf24l01.c: 257: enRXAddr.ERX_P3 = 1;
  2084  02F0  15AE               	bsf	nrf24l01InitRegisters@enRXAddr,3
  2085                           
  2086                           ;nrf24l01.c: 258: enRXAddr.ERX_P4 = 1;
  2087  02F1  162E               	bsf	nrf24l01InitRegisters@enRXAddr,4
  2088                           
  2089                           ;nrf24l01.c: 259: enRXAddr.ERX_P5 = 1;
  2090  02F2  16AE               	bsf	nrf24l01InitRegisters@enRXAddr,5
  2091                           
  2092                           ;nrf24l01.c: 260: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  2093  02F3  082E               	movf	nrf24l01InitRegisters@enRXAddr,w
  2094  02F4  00AB               	movwf	??_nrf24l01InitRegisters
  2095  02F5  082B               	movf	??_nrf24l01InitRegisters,w
  2096  02F6  00A0               	movwf	nrf24l01Send@data
  2097  02F7  3022               	movlw	34
  2098  02F8  275C               	fcall	_nrf24l01Send
  2099                           
  2100                           ;nrf24l01.c: 263: n_EN_AA_t enAA;
  2101                           ;nrf24l01.c: 264: enAA.byte = nrf24l01Send(0b00000000 | 0x01, 0);
  2102  02F9  0020               	movlb	0	; select bank0
  2103  02FA  01A0               	clrf	nrf24l01Send@data
  2104  02FB  3001               	movlw	1
  2105  02FC  275C               	fcall	_nrf24l01Send
  2106  02FD  0020               	movlb	0	; select bank0
  2107  02FE  00AB               	movwf	??_nrf24l01InitRegisters
  2108  02FF  082B               	movf	??_nrf24l01InitRegisters,w
  2109  0300  00AF               	movwf	nrf24l01InitRegisters@enAA
  2110                           
  2111                           ;nrf24l01.c: 265: enAA.ENAA_P0 = 0;
  2112  0301  102F               	bcf	nrf24l01InitRegisters@enAA,0
  2113                           
  2114                           ;nrf24l01.c: 266: enAA.ENAA_P1 = 0;
  2115  0302  10AF               	bcf	nrf24l01InitRegisters@enAA,1
  2116                           
  2117                           ;nrf24l01.c: 267: enAA.ENAA_P2 = 0;
  2118  0303  112F               	bcf	nrf24l01InitRegisters@enAA,2
  2119                           
  2120                           ;nrf24l01.c: 268: enAA.ENAA_P3 = 0;
  2121  0304  11AF               	bcf	nrf24l01InitRegisters@enAA,3
  2122                           
  2123                           ;nrf24l01.c: 269: enAA.ENAA_P4 = 0;
  2124  0305  122F               	bcf	nrf24l01InitRegisters@enAA,4
  2125                           
  2126                           ;nrf24l01.c: 270: enAA.ENAA_P5 = 0;
  2127  0306  12AF               	bcf	nrf24l01InitRegisters@enAA,5
  2128                           
  2129                           ;nrf24l01.c: 271: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  2130  0307  082F               	movf	nrf24l01InitRegisters@enAA,w
  2131  0308  00AB               	movwf	??_nrf24l01InitRegisters
  2132  0309  082B               	movf	??_nrf24l01InitRegisters,w
  2133  030A  00A0               	movwf	nrf24l01Send@data
  2134  030B  3021               	movlw	33
  2135  030C  275C               	fcall	_nrf24l01Send
  2136                           
  2137                           ;nrf24l01.c: 275: n_FEATURE_t feature;
  2138                           ;nrf24l01.c: 276: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  2139  030D  0020               	movlb	0	; select bank0
  2140  030E  01A0               	clrf	nrf24l01Send@data
  2141  030F  301D               	movlw	29
  2142  0310  275C               	fcall	_nrf24l01Send
  2143  0311  0020               	movlb	0	; select bank0
  2144  0312  00AB               	movwf	??_nrf24l01InitRegisters
  2145  0313  082B               	movf	??_nrf24l01InitRegisters,w
  2146  0314  00AC               	movwf	nrf24l01InitRegisters@feature
  2147                           
  2148                           ;nrf24l01.c: 277: feature.EN_DPL = 1;
  2149  0315  152C               	bsf	nrf24l01InitRegisters@feature,2
  2150                           
  2151                           ;nrf24l01.c: 278: feature.EN_DYN_ACK = 1;
  2152  0316  142C               	bsf	nrf24l01InitRegisters@feature,0
  2153                           
  2154                           ;nrf24l01.c: 279: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  2155  0317  082C               	movf	nrf24l01InitRegisters@feature,w
  2156  0318  00AB               	movwf	??_nrf24l01InitRegisters
  2157  0319  082B               	movf	??_nrf24l01InitRegisters,w
  2158  031A  00A0               	movwf	nrf24l01Send@data
  2159  031B  303D               	movlw	61
  2160  031C  275C               	fcall	_nrf24l01Send
  2161                           
  2162                           ;nrf24l01.c: 281: n_DYNPD_t DynPD;
  2163                           ;nrf24l01.c: 282: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  2164  031D  0020               	movlb	0	; select bank0
  2165  031E  01A0               	clrf	nrf24l01Send@data
  2166  031F  301C               	movlw	28
  2167  0320  275C               	fcall	_nrf24l01Send
  2168  0321  0020               	movlb	0	; select bank0
  2169  0322  00AB               	movwf	??_nrf24l01InitRegisters
  2170  0323  082B               	movf	??_nrf24l01InitRegisters,w
  2171  0324  00B0               	movwf	nrf24l01InitRegisters@DynPD
  2172                           
  2173                           ;nrf24l01.c: 283: DynPD.DPL_P0 = 1;
  2174  0325  1430               	bsf	nrf24l01InitRegisters@DynPD,0
  2175                           
  2176                           ;nrf24l01.c: 284: DynPD.DPL_P1 = 1;
  2177  0326  14B0               	bsf	nrf24l01InitRegisters@DynPD,1
  2178                           
  2179                           ;nrf24l01.c: 285: DynPD.DPL_P2 = 1;
  2180  0327  1530               	bsf	nrf24l01InitRegisters@DynPD,2
  2181                           
  2182                           ;nrf24l01.c: 286: DynPD.DPL_P3 = 1;
  2183  0328  15B0               	bsf	nrf24l01InitRegisters@DynPD,3
  2184                           
  2185                           ;nrf24l01.c: 287: DynPD.DPL_P4 = 1;
  2186  0329  1630               	bsf	nrf24l01InitRegisters@DynPD,4
  2187                           
  2188                           ;nrf24l01.c: 288: DynPD.DPL_P5 = 1;
  2189  032A  16B0               	bsf	nrf24l01InitRegisters@DynPD,5
  2190                           
  2191                           ;nrf24l01.c: 289: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  2192  032B  0830               	movf	nrf24l01InitRegisters@DynPD,w
  2193  032C  00AB               	movwf	??_nrf24l01InitRegisters
  2194  032D  082B               	movf	??_nrf24l01InitRegisters,w
  2195  032E  00A0               	movwf	nrf24l01Send@data
  2196  032F  303C               	movlw	60
  2197  0330  275C               	fcall	_nrf24l01Send
  2198                           
  2199                           ;nrf24l01.c: 292: n_STATUS_t status;
  2200                           ;nrf24l01.c: 293: status.byte = 0x00;
  2201  0331  0020               	movlb	0	; select bank0
  2202  0332  01AD               	clrf	nrf24l01InitRegisters@status
  2203                           
  2204                           ;nrf24l01.c: 294: status.RX_DR = 1;
  2205  0333  172D               	bsf	nrf24l01InitRegisters@status,6
  2206                           
  2207                           ;nrf24l01.c: 295: status.TX_DS = 1;
  2208  0334  16AD               	bsf	nrf24l01InitRegisters@status,5
  2209                           
  2210                           ;nrf24l01.c: 296: status.MAX_RT = 1;
  2211  0335  162D               	bsf	nrf24l01InitRegisters@status,4
  2212                           
  2213                           ;nrf24l01.c: 297: nrf24l01Send(0b00100000 | 0x07, status.byte);
  2214  0336  082D               	movf	nrf24l01InitRegisters@status,w
  2215  0337  00AB               	movwf	??_nrf24l01InitRegisters
  2216  0338  082B               	movf	??_nrf24l01InitRegisters,w
  2217  0339  00A0               	movwf	nrf24l01Send@data
  2218  033A  3027               	movlw	39
  2219  033B  275C               	fcall	_nrf24l01Send
  2220                           
  2221                           ;nrf24l01.c: 300: nrf24l01Send(0b11100001, 0);
  2222  033C  0020               	movlb	0	; select bank0
  2223  033D  01A0               	clrf	nrf24l01Send@data
  2224  033E  30E1               	movlw	225
  2225  033F  275C               	fcall	_nrf24l01Send
  2226                           
  2227                           ;nrf24l01.c: 301: nrf24l01Send(0b11100010, 0);
  2228  0340  0020               	movlb	0	; select bank0
  2229  0341  01A0               	clrf	nrf24l01Send@data
  2230  0342  30E2               	movlw	226
  2231  0343  275C               	fcall	_nrf24l01Send
  2232                           
  2233                           ;nrf24l01.c: 304: config.PRIM_RX = 1;
  2234  0344  0020               	movlb	0	; select bank0
  2235  0345  1431               	bsf	nrf24l01InitRegisters@config,0
  2236                           
  2237                           ;nrf24l01.c: 305: config.EN_CRC = 1;
  2238  0346  15B1               	bsf	nrf24l01InitRegisters@config,3
  2239                           
  2240                           ;nrf24l01.c: 306: config.CRCO = 1;
  2241  0347  1531               	bsf	nrf24l01InitRegisters@config,2
  2242                           
  2243                           ;nrf24l01.c: 307: config.PWR_UP = 1;
  2244  0348  14B1               	bsf	nrf24l01InitRegisters@config,1
  2245                           
  2246                           ;nrf24l01.c: 308: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2247  0349  0831               	movf	nrf24l01InitRegisters@config,w
  2248  034A  00AB               	movwf	??_nrf24l01InitRegisters
  2249  034B  082B               	movf	??_nrf24l01InitRegisters,w
  2250  034C  00A0               	movwf	nrf24l01Send@data
  2251  034D  3020               	movlw	32
  2252  034E  275C               	fcall	_nrf24l01Send
  2253  034F  0008               	return
  2254  0350                     __end_of_nrf24l01InitRegisters:	
  2255                           
  2256                           	psect	text5
  2257  0052                     __ptext5:	
  2258 ;; *************** function _loop *****************
  2259 ;; Defined at:
  2260 ;;		line 74 in file "main.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;		None
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;		None
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      void 
  2267 ;; Registers used:
  2268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMMON   BANK0   BANK1
  2274 ;;      Params:         0       0       0
  2275 ;;      Locals:         0       0       0
  2276 ;;      Temps:          0       0       4
  2277 ;;      Totals:         0       0       4
  2278 ;;Total ram usage:        4 bytes
  2279 ;; Hardware stack levels used:    1
  2280 ;; Hardware stack levels required when called:   10
  2281 ;; This function calls:
  2282 ;;		___lldiv
  2283 ;;		___lmul
  2284 ;;		__itoa
  2285 ;;		_nrf24l01SendString
  2286 ;;		_read_flashmem
  2287 ;;		_startADC
  2288 ;;		_strcpy
  2289 ;;		_strlen
  2290 ;; This function is called by:
  2291 ;;		_main
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           
  2296                           ;psect for function _loop
  2297  0052                     _loop:	
  2298                           
  2299                           ;main.c: 76: if (mode != 1) {
  2300                           
  2301                           ;incstack = 0
  2302                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2303  0052  0020               	movlb	0	; select bank0
  2304  0053  0363               	decf	_mode,w
  2305  0054  1903               	btfsc	3,2
  2306  0055  29FA               	goto	l2829
  2307  0056  0064               	clrwdt	;# 
  2308                           
  2309                           ;main.c: 78: }
  2310                           ;main.c: 80: switch (mode){
  2311  0057  29FA               	goto	l2829
  2312  0058                     l168:	
  2313                           ;main.c: 82: case 1:
  2314                           
  2315  0058  0063               	sleep	;# 
  2316                           
  2317                           ;main.c: 85: __nop();
  2318  0059  0000               	nop
  2319                           
  2320                           ;main.c: 86: __nop();
  2321  005A  0000               	nop
  2322                           
  2323                           ;main.c: 88: if (!STATUSbits.nTO && !STATUSbits.nPD){
  2324  005B  0020               	movlb	0	; select bank0
  2325  005C  1E03               	btfss	3,4	;volatile
  2326  005D  1983               	btfsc	3,3	;volatile
  2327  005E  2866               	goto	l2765
  2328                           
  2329                           ;main.c: 89: mode = nextMode;
  2330  005F  0864               	movf	_nextMode,w
  2331  0060  0021               	movlb	1	; select bank1
  2332  0061  00A1               	movwf	??_loop^(0+128)
  2333  0062  0821               	movf	??_loop^(0+128),w
  2334  0063  0020               	movlb	0	; select bank0
  2335  0064  00E3               	movwf	_mode
  2336                           
  2337                           ;main.c: 90: sleepLoop = 0;
  2338  0065  01D1               	clrf	_sleepLoop
  2339  0066                     l2765:	
  2340                           
  2341                           ;main.c: 91: }
  2342                           ;main.c: 93: if (sleepLoop++ > 5){
  2343  0066  0851               	movf	_sleepLoop,w
  2344  0067  0AD1               	incf	_sleepLoop,f
  2345  0068  0021               	movlb	1	; select bank1
  2346  0069  00A1               	movwf	??_loop^(0+128)
  2347  006A  3006               	movlw	6
  2348  006B  0221               	subwf	??_loop^(0+128),w
  2349  006C  1C03               	skipc
  2350  006D  0008               	return
  2351  006E  0001               	reset	;# 
  2352                           
  2353                           ;main.c: 95: }
  2354                           ;main.c: 96: break;
  2355  006F  0008               	return
  2356  0070                     l2769:	
  2357                           ;main.c: 98: case 10:
  2358                           
  2359                           
  2360                           ;main.c: 100: strcpy(string, "/BOOT/");
  2361  0070  30A2               	movlw	low (STR_1| (0+32768))
  2362  0071  0020               	movlb	0	; select bank0
  2363  0072  00B3               	movwf	strcpy@from
  2364  0073  3087               	movlw	high (STR_1| (0+32768))
  2365  0074  00B4               	movwf	strcpy@from+1
  2366  0075  3053               	movlw	(low (_string| 0))& (0+255)
  2367  0076  2741               	fcall	_strcpy
  2368                           
  2369                           ;main.c: 101: _itoa(string + strlen(string), read_flashmem(16), 10);
  2370  0077  3010               	movlw	16
  2371  0078  0020               	movlb	0	; select bank0
  2372  0079  00AB               	movwf	read_flashmem@offset
  2373  007A  3000               	movlw	0
  2374  007B  00AC               	movwf	read_flashmem@offset+1
  2375  007C  259F               	fcall	_read_flashmem
  2376  007D  0020               	movlb	0	; select bank0
  2377  007E  082C               	movf	?_read_flashmem+1,w
  2378  007F  00C4               	movwf	__itoa@number+1
  2379  0080  082B               	movf	?_read_flashmem,w
  2380  0081  00C3               	movwf	__itoa@number
  2381  0082  300A               	movlw	10
  2382  0083  0021               	movlb	1	; select bank1
  2383  0084  00A1               	movwf	??_loop^(0+128)
  2384  0085  0821               	movf	??_loop^(0+128),w
  2385  0086  0020               	movlb	0	; select bank0
  2386  0087  00C5               	movwf	__itoa@base
  2387  0088  3053               	movlw	(low (_string| 0))& (0+255)
  2388  0089  26B7               	fcall	_strlen
  2389  008A  0020               	movlb	0	; select bank0
  2390  008B  082B               	movf	?_strlen,w
  2391  008C  3E53               	addlw	(low (_string| 0))& (0+255)
  2392  008D  276F               	fcall	__itoa
  2393                           
  2394                           ;main.c: 102: nrf24l01SendString(string, 0);
  2395  008E  0020               	movlb	0	; select bank0
  2396  008F  01B4               	clrf	nrf24l01SendString@waitForAck
  2397  0090  3053               	movlw	(low (_string| 0))& (0+255)
  2398  0091  2219               	fcall	_nrf24l01SendString
  2399                           
  2400                           ;main.c: 103: mode = 11;
  2401  0092  300B               	movlw	11
  2402  0093  0021               	movlb	1	; select bank1
  2403  0094  00A1               	movwf	??_loop^(0+128)
  2404  0095  0821               	movf	??_loop^(0+128),w
  2405  0096  0020               	movlb	0	; select bank0
  2406  0097  00E3               	movwf	_mode
  2407                           
  2408                           ;main.c: 104: break;
  2409  0098  0008               	return
  2410  0099                     l173:	
  2411                           ;main.c: 106: case 11:
  2412                           
  2413                           
  2414                           ;main.c: 107: mode = 1;
  2415  0099  01E3               	clrf	_mode
  2416  009A  0AE3               	incf	_mode,f
  2417                           
  2418                           ;main.c: 108: nextMode = 4;
  2419  009B  3004               	movlw	4
  2420  009C  0021               	movlb	1	; select bank1
  2421  009D  00A1               	movwf	??_loop^(0+128)
  2422  009E  0821               	movf	??_loop^(0+128),w
  2423  009F  0020               	movlb	0	; select bank0
  2424  00A0  00E4               	movwf	_nextMode
  2425                           
  2426                           ;main.c: 109: break;
  2427  00A1  0008               	return
  2428  00A2                     l2779:	
  2429                           ;main.c: 111: case 4:
  2430                           
  2431                           
  2432                           ;main.c: 112: strcpy(string, "/COUNT/");
  2433  00A2  309A               	movlw	low (STR_2| (0+32768))
  2434  00A3  00B3               	movwf	strcpy@from
  2435  00A4  3087               	movlw	high (STR_2| (0+32768))
  2436  00A5  00B4               	movwf	strcpy@from+1
  2437  00A6  3053               	movlw	(low (_string| 0))& (0+255)
  2438  00A7  2741               	fcall	_strcpy
  2439                           
  2440                           ;main.c: 113: _itoa(string + strlen(string), counter, 10);
  2441  00A8  0020               	movlb	0	; select bank0
  2442  00A9  0850               	movf	_counter+1,w
  2443  00AA  00C4               	movwf	__itoa@number+1
  2444  00AB  084F               	movf	_counter,w
  2445  00AC  00C3               	movwf	__itoa@number
  2446  00AD  300A               	movlw	10
  2447  00AE  0021               	movlb	1	; select bank1
  2448  00AF  00A1               	movwf	??_loop^(0+128)
  2449  00B0  0821               	movf	??_loop^(0+128),w
  2450  00B1  0020               	movlb	0	; select bank0
  2451  00B2  00C5               	movwf	__itoa@base
  2452  00B3  3053               	movlw	(low (_string| 0))& (0+255)
  2453  00B4  26B7               	fcall	_strlen
  2454  00B5  0020               	movlb	0	; select bank0
  2455  00B6  082B               	movf	?_strlen,w
  2456  00B7  3E53               	addlw	(low (_string| 0))& (0+255)
  2457  00B8  276F               	fcall	__itoa
  2458                           
  2459                           ;main.c: 114: nrf24l01SendString(string, 0);
  2460  00B9  0020               	movlb	0	; select bank0
  2461  00BA  01B4               	clrf	nrf24l01SendString@waitForAck
  2462  00BB  3053               	movlw	(low (_string| 0))& (0+255)
  2463  00BC  2219               	fcall	_nrf24l01SendString
  2464                           
  2465                           ;main.c: 115: mode = 12;
  2466  00BD  300C               	movlw	12
  2467  00BE  0021               	movlb	1	; select bank1
  2468  00BF  00A1               	movwf	??_loop^(0+128)
  2469  00C0  0821               	movf	??_loop^(0+128),w
  2470  00C1  0020               	movlb	0	; select bank0
  2471  00C2  00E3               	movwf	_mode
  2472                           
  2473                           ;main.c: 116: break;
  2474  00C3  0008               	return
  2475  00C4                     l2787:	
  2476                           ;main.c: 118: case 12:
  2477                           
  2478                           
  2479                           ;main.c: 119: startADC(3);
  2480  00C4  3003               	movlw	3
  2481  00C5  2632               	fcall	_startADC
  2482                           
  2483                           ;main.c: 128: nextMode = 13;
  2484  00C6  300D               	movlw	13
  2485  00C7  0021               	movlb	1	; select bank1
  2486  00C8  00A1               	movwf	??_loop^(0+128)
  2487  00C9  0821               	movf	??_loop^(0+128),w
  2488  00CA  0020               	movlb	0	; select bank0
  2489  00CB  00E4               	movwf	_nextMode
  2490                           
  2491                           ;main.c: 129: break;
  2492  00CC  0008               	return
  2493  00CD                     l2791:	
  2494                           ;main.c: 131: case 13:
  2495                           
  2496                           
  2497                           ;main.c: 132: startADC(7);
  2498  00CD  3007               	movlw	7
  2499  00CE  2632               	fcall	_startADC
  2500                           
  2501                           ;main.c: 133: nextMode = 15;
  2502  00CF  300F               	movlw	15
  2503  00D0  0021               	movlb	1	; select bank1
  2504  00D1  00A1               	movwf	??_loop^(0+128)
  2505  00D2  0821               	movf	??_loop^(0+128),w
  2506  00D3  0020               	movlb	0	; select bank0
  2507  00D4  00E4               	movwf	_nextMode
  2508                           
  2509                           ;main.c: 134: break;
  2510  00D5  0008               	return
  2511  00D6                     l2795:	
  2512                           ;main.c: 136: case 15:
  2513                           
  2514                           
  2515                           ;main.c: 137: startADC(29);
  2516  00D6  301D               	movlw	29
  2517  00D7  2632               	fcall	_startADC
  2518                           
  2519                           ;main.c: 138: nextMode = 14;
  2520  00D8  300E               	movlw	14
  2521  00D9  0021               	movlb	1	; select bank1
  2522  00DA  00A1               	movwf	??_loop^(0+128)
  2523  00DB  0821               	movf	??_loop^(0+128),w
  2524  00DC  0020               	movlb	0	; select bank0
  2525  00DD  00E4               	movwf	_nextMode
  2526                           
  2527                           ;main.c: 139: break;
  2528  00DE  0008               	return
  2529  00DF                     l2799:	
  2530                           ;main.c: 141: case 14:
  2531                           
  2532                           
  2533                           ;main.c: 142: startADC(31);
  2534  00DF  301F               	movlw	31
  2535  00E0  2632               	fcall	_startADC
  2536                           
  2537                           ;main.c: 143: nextMode = 11;
  2538  00E1  300B               	movlw	11
  2539  00E2  0021               	movlb	1	; select bank1
  2540  00E3  00A1               	movwf	??_loop^(0+128)
  2541  00E4  0821               	movf	??_loop^(0+128),w
  2542  00E5  0020               	movlb	0	; select bank0
  2543  00E6  00E4               	movwf	_nextMode
  2544                           
  2545                           ;main.c: 144: break;
  2546  00E7  0008               	return
  2547  00E8                     l2803:	
  2548                           ;main.c: 149: case 3:
  2549                           
  2550                           ;main.c: 148: switch (ADCON0bits.CHS){
  2551                           
  2552                           ;main.c: 146: case 3:
  2553                           
  2554                           
  2555                           ;main.c: 150: adcSum*= 100;
  2556  00E8  3000               	movlw	0
  2557  00E9  0020               	movlb	0	; select bank0
  2558  00EA  00AE               	movwf	___lmul@multiplier+3
  2559  00EB  3000               	movlw	0
  2560  00EC  00AD               	movwf	___lmul@multiplier+2
  2561  00ED  3000               	movlw	0
  2562  00EE  00AC               	movwf	___lmul@multiplier+1
  2563  00EF  3064               	movlw	100
  2564  00F0  00AB               	movwf	___lmul@multiplier
  2565  00F1  084B               	movf	_adcSum+3,w
  2566  00F2  00B2               	movwf	___lmul@multiplicand+3
  2567  00F3  084A               	movf	_adcSum+2,w
  2568  00F4  00B1               	movwf	___lmul@multiplicand+2
  2569  00F5  0849               	movf	_adcSum+1,w
  2570  00F6  00B0               	movwf	___lmul@multiplicand+1
  2571  00F7  0848               	movf	_adcSum,w
  2572  00F8  00AF               	movwf	___lmul@multiplicand
  2573  00F9  2602               	fcall	___lmul
  2574  00FA  0020               	movlb	0	; select bank0
  2575  00FB  082E               	movf	?___lmul+3,w
  2576  00FC  00CB               	movwf	_adcSum+3
  2577  00FD  082D               	movf	?___lmul+2,w
  2578  00FE  00CA               	movwf	_adcSum+2
  2579  00FF  082C               	movf	?___lmul+1,w
  2580  0100  00C9               	movwf	_adcSum+1
  2581  0101  082B               	movf	?___lmul,w
  2582  0102  00C8               	movwf	_adcSum
  2583                           
  2584                           ;main.c: 151: adcSum/= 2505;
  2585  0103  3000               	movlw	0
  2586  0104  00AE               	movwf	___lldiv@divisor+3
  2587  0105  3000               	movlw	0
  2588  0106  00AD               	movwf	___lldiv@divisor+2
  2589  0107  3009               	movlw	9
  2590  0108  00AC               	movwf	___lldiv@divisor+1
  2591  0109  30C9               	movlw	201
  2592  010A  298D               	goto	L4
  2593  010B                     l2805:	
  2594                           ;main.c: 154: case 7:
  2595                           
  2596                           ;main.c: 152: break;
  2597                           
  2598                           
  2599                           ;main.c: 155: adcSum*= 100;
  2600  010B  3000               	movlw	0
  2601  010C  0020               	movlb	0	; select bank0
  2602  010D  00AE               	movwf	___lmul@multiplier+3
  2603  010E  3000               	movlw	0
  2604  010F  00AD               	movwf	___lmul@multiplier+2
  2605  0110  3000               	movlw	0
  2606  0111  00AC               	movwf	___lmul@multiplier+1
  2607  0112  3064               	movlw	100
  2608  0113  00AB               	movwf	___lmul@multiplier
  2609  0114  084B               	movf	_adcSum+3,w
  2610  0115  00B2               	movwf	___lmul@multiplicand+3
  2611  0116  084A               	movf	_adcSum+2,w
  2612  0117  00B1               	movwf	___lmul@multiplicand+2
  2613  0118  0849               	movf	_adcSum+1,w
  2614  0119  00B0               	movwf	___lmul@multiplicand+1
  2615  011A  0848               	movf	_adcSum,w
  2616  011B  00AF               	movwf	___lmul@multiplicand
  2617  011C  2602               	fcall	___lmul
  2618  011D  0020               	movlb	0	; select bank0
  2619  011E  082E               	movf	?___lmul+3,w
  2620  011F  00CB               	movwf	_adcSum+3
  2621  0120  082D               	movf	?___lmul+2,w
  2622  0121  00CA               	movwf	_adcSum+2
  2623  0122  082C               	movf	?___lmul+1,w
  2624  0123  00C9               	movwf	_adcSum+1
  2625  0124  082B               	movf	?___lmul,w
  2626  0125  00C8               	movwf	_adcSum
  2627                           
  2628                           ;main.c: 156: adcSum/= 2500;
  2629  0126  3000               	movlw	0
  2630  0127  00AE               	movwf	___lldiv@divisor+3
  2631  0128  3000               	movlw	0
  2632  0129  00AD               	movwf	___lldiv@divisor+2
  2633  012A  3009               	movlw	9
  2634  012B  00AC               	movwf	___lldiv@divisor+1
  2635  012C  30C4               	movlw	196
  2636  012D  298D               	goto	L4
  2637  012E                     l2807:	
  2638                           ;main.c: 159: case 31:
  2639                           
  2640                           ;main.c: 157: break;
  2641                           
  2642                           
  2643                           ;main.c: 160: adcSum*= 100;
  2644  012E  3000               	movlw	0
  2645  012F  0020               	movlb	0	; select bank0
  2646  0130  00AE               	movwf	___lmul@multiplier+3
  2647  0131  3000               	movlw	0
  2648  0132  00AD               	movwf	___lmul@multiplier+2
  2649  0133  3000               	movlw	0
  2650  0134  00AC               	movwf	___lmul@multiplier+1
  2651  0135  3064               	movlw	100
  2652  0136  00AB               	movwf	___lmul@multiplier
  2653  0137  084B               	movf	_adcSum+3,w
  2654  0138  00B2               	movwf	___lmul@multiplicand+3
  2655  0139  084A               	movf	_adcSum+2,w
  2656  013A  00B1               	movwf	___lmul@multiplicand+2
  2657  013B  0849               	movf	_adcSum+1,w
  2658  013C  00B0               	movwf	___lmul@multiplicand+1
  2659  013D  0848               	movf	_adcSum,w
  2660  013E  00AF               	movwf	___lmul@multiplicand
  2661  013F  2602               	fcall	___lmul
  2662  0140  0020               	movlb	0	; select bank0
  2663  0141  082E               	movf	?___lmul+3,w
  2664  0142  00CB               	movwf	_adcSum+3
  2665  0143  082D               	movf	?___lmul+2,w
  2666  0144  00CA               	movwf	_adcSum+2
  2667  0145  082C               	movf	?___lmul+1,w
  2668  0146  00C9               	movwf	_adcSum+1
  2669  0147  082B               	movf	?___lmul,w
  2670  0148  00C8               	movwf	_adcSum
  2671                           
  2672                           ;main.c: 161: adcSum/= 2475;
  2673  0149  3000               	movlw	0
  2674  014A  00AE               	movwf	___lldiv@divisor+3
  2675  014B  3000               	movlw	0
  2676  014C  00AD               	movwf	___lldiv@divisor+2
  2677  014D  3009               	movlw	9
  2678  014E  00AC               	movwf	___lldiv@divisor+1
  2679  014F  30AB               	movlw	171
  2680  0150  298D               	goto	L4
  2681  0151                     l2809:	
  2682                           ;main.c: 164: case 29:
  2683                           
  2684                           ;main.c: 162: break;
  2685                           
  2686                           
  2687                           ;main.c: 165: adcSum/= 2089;
  2688  0151  3000               	movlw	0
  2689  0152  0020               	movlb	0	; select bank0
  2690  0153  00AE               	movwf	___lldiv@divisor+3
  2691  0154  3000               	movlw	0
  2692  0155  00AD               	movwf	___lldiv@divisor+2
  2693  0156  3008               	movlw	8
  2694  0157  00AC               	movwf	___lldiv@divisor+1
  2695  0158  3029               	movlw	41
  2696  0159  00AB               	movwf	___lldiv@divisor
  2697  015A  084B               	movf	_adcSum+3,w
  2698  015B  00B2               	movwf	___lldiv@dividend+3
  2699  015C  084A               	movf	_adcSum+2,w
  2700  015D  00B1               	movwf	___lldiv@dividend+2
  2701  015E  0849               	movf	_adcSum+1,w
  2702  015F  00B0               	movwf	___lldiv@dividend+1
  2703  0160  0848               	movf	_adcSum,w
  2704  0161  00AF               	movwf	___lldiv@dividend
  2705  0162  241C               	fcall	___lldiv
  2706  0163  0020               	movlb	0	; select bank0
  2707  0164  082E               	movf	?___lldiv+3,w
  2708  0165  00CB               	movwf	_adcSum+3
  2709  0166  082D               	movf	?___lldiv+2,w
  2710  0167  00CA               	movwf	_adcSum+2
  2711  0168  082C               	movf	?___lldiv+1,w
  2712  0169  00C9               	movwf	_adcSum+1
  2713  016A  082B               	movf	?___lldiv,w
  2714  016B  00C8               	movwf	_adcSum
  2715                           
  2716                           ;main.c: 166: adcSum-= 40;
  2717  016C  3028               	movlw	40
  2718  016D  0021               	movlb	1	; select bank1
  2719  016E  00A1               	movwf	??_loop^(0+128)
  2720  016F  3000               	movlw	0
  2721  0170  00A2               	movwf	(??_loop^(0+128)+1)
  2722  0171  3000               	movlw	0
  2723  0172  00A3               	movwf	(??_loop^(0+128)+2)
  2724  0173  3000               	movlw	0
  2725  0174  00A4               	movwf	(??_loop^(0+128)+3)
  2726  0175  0821               	movf	??_loop^(0+128),w
  2727  0176  0020               	movlb	0	; select bank0
  2728  0177  02C8               	subwf	_adcSum,f
  2729  0178  0021               	movlb	1	; select bank1
  2730  0179  0822               	movf	(??_loop+1)^(0+128),w
  2731  017A  0020               	movlb	0	; select bank0
  2732  017B  3BC9               	subwfb	_adcSum+1,f
  2733  017C  0021               	movlb	1	; select bank1
  2734  017D  0823               	movf	(??_loop+2)^(0+128),w
  2735  017E  0020               	movlb	0	; select bank0
  2736  017F  3BCA               	subwfb	_adcSum+2,f
  2737  0180  0021               	movlb	1	; select bank1
  2738  0181  0824               	movf	(??_loop+3)^(0+128),w
  2739  0182  0020               	movlb	0	; select bank0
  2740  0183  3BCB               	subwfb	_adcSum+3,f
  2741                           
  2742                           ;main.c: 167: break;
  2743  0184  29B2               	goto	l2819
  2744  0185                     l2813:	
  2745                           ;main.c: 169: default:
  2746                           
  2747                           
  2748                           ;main.c: 170: adcSum/= 255;
  2749  0185  3000               	movlw	0
  2750  0186  0020               	movlb	0	; select bank0
  2751  0187  00AE               	movwf	___lldiv@divisor+3
  2752  0188  3000               	movlw	0
  2753  0189  00AD               	movwf	___lldiv@divisor+2
  2754  018A  3000               	movlw	0
  2755  018B  00AC               	movwf	___lldiv@divisor+1
  2756  018C  30FF               	movlw	255
  2757  018D                     L4:	
  2758  018D  00AB               	movwf	___lldiv@divisor
  2759  018E  084B               	movf	_adcSum+3,w
  2760  018F  00B2               	movwf	___lldiv@dividend+3
  2761  0190  084A               	movf	_adcSum+2,w
  2762  0191  00B1               	movwf	___lldiv@dividend+2
  2763  0192  0849               	movf	_adcSum+1,w
  2764  0193  00B0               	movwf	___lldiv@dividend+1
  2765  0194  0848               	movf	_adcSum,w
  2766  0195  00AF               	movwf	___lldiv@dividend
  2767  0196  241C               	fcall	___lldiv
  2768  0197  0020               	movlb	0	; select bank0
  2769  0198  082E               	movf	?___lldiv+3,w
  2770  0199  00CB               	movwf	_adcSum+3
  2771  019A  082D               	movf	?___lldiv+2,w
  2772  019B  00CA               	movwf	_adcSum+2
  2773  019C  082C               	movf	?___lldiv+1,w
  2774  019D  00C9               	movwf	_adcSum+1
  2775  019E  082B               	movf	?___lldiv,w
  2776  019F  00C8               	movwf	_adcSum
  2777                           
  2778                           ;main.c: 172: }
  2779                           
  2780                           ;main.c: 171: break;
  2781  01A0  29B2               	goto	l2819
  2782  01A1                     l2817:	
  2783  01A1  0021               	movlb	1	; select bank1
  2784  01A2  0C1D               	rrf	29,w	;volatile
  2785  01A3  0C89               	rrf	9,f
  2786  01A4  391F               	andlw	31
  2787                           
  2788                           ; Switch size 1, requested type "space"
  2789                           ; Number of cases is 4, Range of values is 3 to 31
  2790                           ; switch strategies available:
  2791                           ; Name         Instructions Cycles
  2792                           ; simple_byte           13     7 (average)
  2793                           ; direct_byte           67     9 (fixed)
  2794                           ; jumptable            263     9 (fixed)
  2795                           ;	Chosen strategy is simple_byte
  2796  01A5  3A03               	xorlw	3	; case 3
  2797  01A6  1903               	skipnz
  2798  01A7  28E8               	goto	l2803
  2799  01A8  3A04               	xorlw	4	; case 7
  2800  01A9  1903               	skipnz
  2801  01AA  290B               	goto	l2805
  2802  01AB  3A1A               	xorlw	26	; case 29
  2803  01AC  1903               	skipnz
  2804  01AD  2951               	goto	l2809
  2805  01AE  3A02               	xorlw	2	; case 31
  2806  01AF  1903               	skipnz
  2807  01B0  292E               	goto	l2807
  2808  01B1  2985               	goto	l2813
  2809  01B2                     l2819:	
  2810                           
  2811                           ;main.c: 174: strcpy(string, "/ADC");
  2812  01B2  30CF               	movlw	low (STR_3| (0+32768))
  2813  01B3  0020               	movlb	0	; select bank0
  2814  01B4  00B3               	movwf	strcpy@from
  2815  01B5  3087               	movlw	high (STR_3| (0+32768))
  2816  01B6  00B4               	movwf	strcpy@from+1
  2817  01B7  3053               	movlw	(low (_string| 0))& (0+255)
  2818  01B8  2741               	fcall	_strcpy
  2819                           
  2820                           ;main.c: 175: _itoa(string + strlen(string), ADCON0bits.CHS, 10);
  2821  01B9  0021               	movlb	1	; select bank1
  2822  01BA  0C1D               	rrf	29,w	;volatile
  2823  01BB  0C89               	rrf	9,f
  2824  01BC  391F               	andlw	31
  2825  01BD  00A1               	movwf	??_loop^(0+128)
  2826  01BE  01A2               	clrf	(??_loop^(0+128)+1)
  2827  01BF  0821               	movf	??_loop^(0+128),w
  2828  01C0  0020               	movlb	0	; select bank0
  2829  01C1  00C3               	movwf	__itoa@number
  2830  01C2  0021               	movlb	1	; select bank1
  2831  01C3  0822               	movf	(??_loop+1)^(0+128),w
  2832  01C4  0020               	movlb	0	; select bank0
  2833  01C5  00C4               	movwf	__itoa@number+1
  2834  01C6  300A               	movlw	10
  2835  01C7  0021               	movlb	1	; select bank1
  2836  01C8  00A3               	movwf	(??_loop+2)^(0+128)
  2837  01C9  0823               	movf	(??_loop+2)^(0+128),w
  2838  01CA  0020               	movlb	0	; select bank0
  2839  01CB  00C5               	movwf	__itoa@base
  2840  01CC  3053               	movlw	(low (_string| 0))& (0+255)
  2841  01CD  26B7               	fcall	_strlen
  2842  01CE  0020               	movlb	0	; select bank0
  2843  01CF  082B               	movf	?_strlen,w
  2844  01D0  3E53               	addlw	(low (_string| 0))& (0+255)
  2845  01D1  276F               	fcall	__itoa
  2846                           
  2847                           ;main.c: 176: strcpy(string + strlen(string), "/");
  2848  01D2  30A0               	movlw	low ((STR_2+6)| (0+32768))
  2849  01D3  0020               	movlb	0	; select bank0
  2850  01D4  00B3               	movwf	strcpy@from
  2851  01D5  3087               	movlw	high ((STR_2+6)| (0+32768))
  2852  01D6  00B4               	movwf	strcpy@from+1
  2853  01D7  3053               	movlw	(low (_string| 0))& (0+255)
  2854  01D8  26B7               	fcall	_strlen
  2855  01D9  0020               	movlb	0	; select bank0
  2856  01DA  082B               	movf	?_strlen,w
  2857  01DB  3E53               	addlw	(low (_string| 0))& (0+255)
  2858  01DC  2741               	fcall	_strcpy
  2859                           
  2860                           ;main.c: 177: _itoa(string + strlen(string), adcSum, 10);
  2861  01DD  0020               	movlb	0	; select bank0
  2862  01DE  0849               	movf	_adcSum+1,w
  2863  01DF  00C4               	movwf	__itoa@number+1
  2864  01E0  0848               	movf	_adcSum,w
  2865  01E1  00C3               	movwf	__itoa@number
  2866  01E2  300A               	movlw	10
  2867  01E3  0021               	movlb	1	; select bank1
  2868  01E4  00A1               	movwf	??_loop^(0+128)
  2869  01E5  0821               	movf	??_loop^(0+128),w
  2870  01E6  0020               	movlb	0	; select bank0
  2871  01E7  00C5               	movwf	__itoa@base
  2872  01E8  3053               	movlw	(low (_string| 0))& (0+255)
  2873  01E9  26B7               	fcall	_strlen
  2874  01EA  0020               	movlb	0	; select bank0
  2875  01EB  082B               	movf	?_strlen,w
  2876  01EC  3E53               	addlw	(low (_string| 0))& (0+255)
  2877  01ED  276F               	fcall	__itoa
  2878                           
  2879                           ;main.c: 179: nrf24l01SendString(string, 0);
  2880  01EE  0020               	movlb	0	; select bank0
  2881  01EF  01B4               	clrf	nrf24l01SendString@waitForAck
  2882  01F0  3053               	movlw	(low (_string| 0))& (0+255)
  2883  01F1  2219               	fcall	_nrf24l01SendString
  2884                           
  2885                           ;main.c: 182: mode = nextMode;
  2886  01F2  0020               	movlb	0	; select bank0
  2887  01F3  0864               	movf	_nextMode,w
  2888  01F4  0021               	movlb	1	; select bank1
  2889  01F5  00A1               	movwf	??_loop^(0+128)
  2890  01F6  0821               	movf	??_loop^(0+128),w
  2891  01F7  0020               	movlb	0	; select bank0
  2892  01F8  00E3               	movwf	_mode
  2893                           
  2894                           ;main.c: 185: }
  2895                           
  2896                           ;main.c: 183: break;
  2897  01F9  0008               	return
  2898  01FA                     l2829:	
  2899  01FA  0020               	movlb	0	; select bank0
  2900  01FB  0863               	movf	_mode,w
  2901                           
  2902                           ; Switch size 1, requested type "space"
  2903                           ; Number of cases is 9, Range of values is 1 to 15
  2904                           ; switch strategies available:
  2905                           ; Name         Instructions Cycles
  2906                           ; simple_byte           28    15 (average)
  2907                           ; direct_byte           39     9 (fixed)
  2908                           ; jumptable            263     9 (fixed)
  2909                           ;	Chosen strategy is simple_byte
  2910  01FC  3A01               	xorlw	1	; case 1
  2911  01FD  1903               	skipnz
  2912  01FE  2858               	goto	l168
  2913  01FF  3A02               	xorlw	2	; case 3
  2914  0200  1903               	skipnz
  2915  0201  29A1               	goto	l2817
  2916  0202  3A07               	xorlw	7	; case 4
  2917  0203  1903               	skipnz
  2918  0204  28A2               	goto	l2779
  2919  0205  3A0E               	xorlw	14	; case 10
  2920  0206  1903               	skipnz
  2921  0207  2870               	goto	l2769
  2922  0208  3A01               	xorlw	1	; case 11
  2923  0209  1903               	skipnz
  2924  020A  2899               	goto	l173
  2925  020B  3A07               	xorlw	7	; case 12
  2926  020C  1903               	skipnz
  2927  020D  28C4               	goto	l2787
  2928  020E  3A01               	xorlw	1	; case 13
  2929  020F  1903               	skipnz
  2930  0210  28CD               	goto	l2791
  2931  0211  3A03               	xorlw	3	; case 14
  2932  0212  1903               	skipnz
  2933  0213  28DF               	goto	l2799
  2934  0214  3A01               	xorlw	1	; case 15
  2935  0215  1903               	skipnz
  2936  0216  28D6               	goto	l2795
  2937  0217  2A18               	goto	l187
  2938  0218                     l187:	
  2939  0218  0008               	return
  2940  0219                     __end_of_loop:	
  2941                           
  2942                           	psect	text6
  2943  06B7                     __ptext6:	
  2944 ;; *************** function _strlen *****************
  2945 ;; Defined at:
  2946 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  s               1    wreg     PTR const unsigned char 
  2949 ;;		 -> string(16), 
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;  s               1   18[BANK0 ] PTR const unsigned char 
  2952 ;;		 -> string(16), 
  2953 ;;  cp              1   17[BANK0 ] PTR const unsigned char 
  2954 ;;		 -> string(16), 
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  2   11[BANK0 ] unsigned int 
  2957 ;; Registers used:
  2958 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMMON   BANK0   BANK1
  2964 ;;      Params:         0       2       0
  2965 ;;      Locals:         0       2       0
  2966 ;;      Temps:          0       4       0
  2967 ;;      Totals:         0       8       0
  2968 ;;Total ram usage:        8 bytes
  2969 ;; Hardware stack levels used:    1
  2970 ;; Hardware stack levels required when called:    6
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		_loop
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           
  2979                           ;psect for function _strlen
  2980  06B7                     _strlen:	
  2981                           
  2982                           ;incstack = 0
  2983                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  2984                           ;strlen@s stored from wreg
  2985  06B7  0020               	movlb	0	; select bank0
  2986  06B8  00B2               	movwf	strlen@s
  2987  06B9  0832               	movf	strlen@s,w
  2988  06BA  00AD               	movwf	??_strlen
  2989  06BB  082D               	movf	??_strlen,w
  2990  06BC  00B1               	movwf	strlen@cp
  2991  06BD                     l2443:	
  2992  06BD  0831               	movf	strlen@cp,w
  2993  06BE  0086               	movwf	6
  2994  06BF  0187               	clrf	7
  2995  06C0  0801               	movf	1,w
  2996  06C1  1903               	btfsc	3,2
  2997  06C2  2EC8               	goto	l2445
  2998  06C3  3001               	movlw	1
  2999  06C4  00AD               	movwf	??_strlen
  3000  06C5  082D               	movf	??_strlen,w
  3001  06C6  07B1               	addwf	strlen@cp,f
  3002  06C7  2EBD               	goto	l2443
  3003  06C8                     l2445:	
  3004  06C8  0832               	movf	strlen@s,w
  3005  06C9  00AD               	movwf	??_strlen
  3006  06CA  3000               	movlw	0
  3007  06CB  00AE               	movwf	??_strlen+1
  3008  06CC  09AD               	comf	??_strlen,f
  3009  06CD  09AE               	comf	??_strlen+1,f
  3010  06CE  0AAD               	incf	??_strlen,f
  3011  06CF  1903               	skipnz
  3012  06D0  0AAE               	incf	??_strlen+1,f
  3013  06D1  0831               	movf	strlen@cp,w
  3014  06D2  00AF               	movwf	??_strlen+2
  3015  06D3  3000               	movlw	0
  3016  06D4  00B0               	movwf	??_strlen+3
  3017  06D5  082D               	movf	??_strlen,w
  3018  06D6  072F               	addwf	??_strlen+2,w
  3019  06D7  00AB               	movwf	?_strlen
  3020  06D8  082E               	movf	??_strlen+1,w
  3021  06D9  3D30               	addwfc	??_strlen+3,w
  3022  06DA  00AC               	movwf	?_strlen+1
  3023  06DB  0008               	return
  3024  06DC                     __end_of_strlen:	
  3025                           
  3026                           	psect	text7
  3027  0741                     __ptext7:	
  3028 ;; *************** function _strcpy *****************
  3029 ;; Defined at:
  3030 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;  to              1    wreg     PTR unsigned char 
  3033 ;;		 -> string(16), 
  3034 ;;  from            2   19[BANK0 ] PTR const unsigned char 
  3035 ;;		 -> STR_4(2), STR_3(5), STR_2(8), STR_1(7), 
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;  to              1   23[BANK0 ] PTR unsigned char 
  3038 ;;		 -> string(16), 
  3039 ;;  cp              1   22[BANK0 ] PTR unsigned char 
  3040 ;;		 -> string(16), 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      PTR unsigned char 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMMON   BANK0   BANK1
  3050 ;;      Params:         0       2       0
  3051 ;;      Locals:         0       2       0
  3052 ;;      Temps:          0       1       0
  3053 ;;      Totals:         0       5       0
  3054 ;;Total ram usage:        5 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    6
  3057 ;; This function calls:
  3058 ;;		Nothing
  3059 ;; This function is called by:
  3060 ;;		_loop
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           
  3065                           ;psect for function _strcpy
  3066  0741                     _strcpy:	
  3067                           
  3068                           ;incstack = 0
  3069                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3070                           ;strcpy@to stored from wreg
  3071  0741  0020               	movlb	0	; select bank0
  3072  0742  00B7               	movwf	strcpy@to
  3073  0743  0837               	movf	strcpy@to,w
  3074  0744  00B5               	movwf	??_strcpy
  3075  0745  0835               	movf	??_strcpy,w
  3076  0746  00B6               	movwf	strcpy@cp
  3077  0747                     l2437:	
  3078  0747  0836               	movf	strcpy@cp,w
  3079  0748  0086               	movwf	6
  3080  0749  0187               	clrf	7
  3081  074A  0833               	movf	strcpy@from,w
  3082  074B  0084               	movwf	4
  3083  074C  0834               	movf	strcpy@from+1,w
  3084  074D  0085               	movwf	5
  3085  074E  0800               	movf	0,w	;code access
  3086  074F  3FC0               	movwi [0]fsr1
  3087  0750  0889               	movf	9,f
  3088  0751  1903               	btfsc	3,2
  3089  0752  0008               	return
  3090  0753  3001               	movlw	1
  3091  0754  00B5               	movwf	??_strcpy
  3092  0755  0835               	movf	??_strcpy,w
  3093  0756  07B6               	addwf	strcpy@cp,f
  3094  0757  3001               	movlw	1
  3095  0758  07B3               	addwf	strcpy@from,f
  3096  0759  3000               	movlw	0
  3097  075A  3DB4               	addwfc	strcpy@from+1,f
  3098  075B  2F47               	goto	l2437
  3099  075C                     __end_of_strcpy:	
  3100                           ;	Return value of _strcpy is never used
  3101                           
  3102                           
  3103                           	psect	text8
  3104  0632                     __ptext8:	
  3105 ;; *************** function _startADC *****************
  3106 ;; Defined at:
  3107 ;;		line 62 in file "main.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;  channel         1    wreg     unsigned char 
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;  channel         1   12[BANK0 ] unsigned char 
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		wreg, status,2, status,0
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMMON   BANK0   BANK1
  3121 ;;      Params:         0       0       0
  3122 ;;      Locals:         0       1       0
  3123 ;;      Temps:          0       1       0
  3124 ;;      Totals:         0       2       0
  3125 ;;Total ram usage:        2 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; Hardware stack levels required when called:    6
  3128 ;; This function calls:
  3129 ;;		Nothing
  3130 ;; This function is called by:
  3131 ;;		_loop
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           
  3136                           ;psect for function _startADC
  3137  0632                     _startADC:	
  3138                           
  3139                           ;incstack = 0
  3140                           ; Regs used in _startADC: [wreg+status,2+status,0]
  3141                           ;startADC@channel stored from wreg
  3142  0632  0020               	movlb	0	; select bank0
  3143  0633  00AC               	movwf	startADC@channel
  3144                           
  3145                           ;main.c: 63: adcSum = 0;
  3146  0634  3000               	movlw	0
  3147  0635  00CB               	movwf	_adcSum+3
  3148  0636  3000               	movlw	0
  3149  0637  00CA               	movwf	_adcSum+2
  3150  0638  3000               	movlw	0
  3151  0639  00C9               	movwf	_adcSum+1
  3152  063A  3000               	movlw	0
  3153  063B  00C8               	movwf	_adcSum
  3154                           
  3155                           ;main.c: 64: adcLoop = 255;
  3156  063C  30FF               	movlw	255
  3157  063D  00AB               	movwf	??_startADC
  3158  063E  082B               	movf	??_startADC,w
  3159  063F  00D2               	movwf	_adcLoop
  3160                           
  3161                           ;main.c: 66: if (ADCON0bits.CHS != channel) {
  3162  0640  0021               	movlb	1	; select bank1
  3163  0641  0C1D               	rrf	29,w	;volatile
  3164  0642  0C89               	rrf	9,f
  3165  0643  391F               	andlw	31
  3166  0644  0020               	movlb	0	; select bank0
  3167  0645  062C               	xorwf	startADC@channel,w
  3168  0646  1903               	skipnz
  3169  0647  2E58               	goto	l2427
  3170                           
  3171                           ;main.c: 67: ADCON0bits.CHS = channel;
  3172  0648  082C               	movf	startADC@channel,w
  3173  0649  00AB               	movwf	??_startADC
  3174  064A  0DAB               	rlf	??_startADC,f
  3175  064B  0DAB               	rlf	??_startADC,f
  3176  064C  0021               	movlb	1	; select bank1
  3177  064D  081D               	movf	29,w	;volatile
  3178  064E  0020               	movlb	0	; select bank0
  3179  064F  062B               	xorwf	??_startADC,w
  3180  0650  3983               	andlw	-125
  3181  0651  062B               	xorwf	??_startADC,w
  3182  0652  0021               	movlb	1	; select bank1
  3183  0653  009D               	movwf	29	;volatile
  3184                           
  3185                           ;main.c: 68: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3186  0654  30A0               	movlw	160
  3187  0655                     u2087:	
  3188  0655  3200               	nop2
  3189  0656  0B89               	decfsz	9,f
  3190  0657  2E55               	goto	u2087
  3191  0658                     l2427:	
  3192                           
  3193                           ;main.c: 69: }
  3194                           ;main.c: 71: ADCON0bits.ADGO = 1;
  3195  0658  0021               	movlb	1	; select bank1
  3196  0659  149D               	bsf	29,1	;volatile
  3197                           
  3198                           ;main.c: 72: mode = 2;
  3199  065A  3002               	movlw	2
  3200  065B  0020               	movlb	0	; select bank0
  3201  065C  00AB               	movwf	??_startADC
  3202  065D  082B               	movf	??_startADC,w
  3203  065E  00E3               	movwf	_mode
  3204  065F  0008               	return
  3205  0660                     __end_of_startADC:	
  3206                           
  3207                           	psect	text9
  3208  0219                     __ptext9:	
  3209 ;; *************** function _nrf24l01SendString *****************
  3210 ;; Defined at:
  3211 ;;		line 153 in file "nrf24l01.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;  string          1    wreg     PTR unsigned char 
  3214 ;;		 -> string(16), 
  3215 ;;  waitForAck      1   20[BANK0 ] unsigned char 
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;  string          1   25[BANK0 ] PTR unsigned char 
  3218 ;;		 -> string(16), 
  3219 ;;  i               1   26[BANK0 ] unsigned char 
  3220 ;;  btye            1   24[BANK0 ] unsigned char 
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  1    wreg      void 
  3223 ;; Registers used:
  3224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMMON   BANK0   BANK1
  3230 ;;      Params:         0       1       0
  3231 ;;      Locals:         0       3       0
  3232 ;;      Temps:          0       3       0
  3233 ;;      Totals:         0       7       0
  3234 ;;Total ram usage:        7 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    9
  3237 ;; This function calls:
  3238 ;;		_enableInterrupts
  3239 ;;		_nrf24l01SPIEnd
  3240 ;;		_nrf24l01SPISend
  3241 ;;		_nrf24l01SPIStart
  3242 ;;		_nrf24l01SetRXMode
  3243 ;;		_read_flashmem
  3244 ;; This function is called by:
  3245 ;;		_loop
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           
  3250                           ;psect for function _nrf24l01SendString
  3251  0219                     _nrf24l01SendString:	
  3252                           
  3253                           ;incstack = 0
  3254                           ; Regs used in _nrf24l01SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3255                           ;nrf24l01SendString@string stored from wreg
  3256  0219  0020               	movlb	0	; select bank0
  3257  021A  00B9               	movwf	nrf24l01SendString@string
  3258                           
  3259                           ;nrf24l01.c: 155: if (!waitForAck){
  3260  021B  0834               	movf	nrf24l01SendString@waitForAck,w
  3261  021C  1D03               	btfss	3,2
  3262  021D  2A52               	goto	l2453
  3263                           
  3264                           ;nrf24l01.c: 156: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3265  021E  3002               	movlw	2
  3266  021F  0020               	movlb	0	; select bank0
  3267  0220  00B6               	movwf	??_nrf24l01SendString+1
  3268  0221  3004               	movlw	4
  3269  0222  00B5               	movwf	??_nrf24l01SendString
  3270  0223  30BA               	movlw	186
  3271  0224                     u2097:	
  3272  0224  0B89               	decfsz	9,f
  3273  0225  2A24               	goto	u2097
  3274  0226  0BB5               	decfsz	??_nrf24l01SendString,f
  3275  0227  2A24               	goto	u2097
  3276  0228  0BB6               	decfsz	??_nrf24l01SendString+1,f
  3277  0229  2A24               	goto	u2097
  3278  022A  0000               	nop
  3279                           
  3280                           ;nrf24l01.c: 157: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3281  022B  3002               	movlw	2
  3282  022C  0020               	movlb	0	; select bank0
  3283  022D  00B6               	movwf	??_nrf24l01SendString+1
  3284  022E  3004               	movlw	4
  3285  022F  00B5               	movwf	??_nrf24l01SendString
  3286  0230  30BA               	movlw	186
  3287  0231                     u2107:	
  3288  0231  0B89               	decfsz	9,f
  3289  0232  2A31               	goto	u2107
  3290  0233  0BB5               	decfsz	??_nrf24l01SendString,f
  3291  0234  2A31               	goto	u2107
  3292  0235  0BB6               	decfsz	??_nrf24l01SendString+1,f
  3293  0236  2A31               	goto	u2107
  3294  0237  0000               	nop
  3295                           
  3296                           ;nrf24l01.c: 158: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3297  0238  3002               	movlw	2
  3298  0239  0020               	movlb	0	; select bank0
  3299  023A  00B6               	movwf	??_nrf24l01SendString+1
  3300  023B  3004               	movlw	4
  3301  023C  00B5               	movwf	??_nrf24l01SendString
  3302  023D  30BA               	movlw	186
  3303  023E                     u2117:	
  3304  023E  0B89               	decfsz	9,f
  3305  023F  2A3E               	goto	u2117
  3306  0240  0BB5               	decfsz	??_nrf24l01SendString,f
  3307  0241  2A3E               	goto	u2117
  3308  0242  0BB6               	decfsz	??_nrf24l01SendString+1,f
  3309  0243  2A3E               	goto	u2117
  3310  0244  0000               	nop
  3311                           
  3312                           ;nrf24l01.c: 159: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3313  0245  3002               	movlw	2
  3314  0246  0020               	movlb	0	; select bank0
  3315  0247  00B6               	movwf	??_nrf24l01SendString+1
  3316  0248  3004               	movlw	4
  3317  0249  00B5               	movwf	??_nrf24l01SendString
  3318  024A  30BA               	movlw	186
  3319  024B                     u2127:	
  3320  024B  0B89               	decfsz	9,f
  3321  024C  2A4B               	goto	u2127
  3322  024D  0BB5               	decfsz	??_nrf24l01SendString,f
  3323  024E  2A4B               	goto	u2127
  3324  024F  0BB6               	decfsz	??_nrf24l01SendString+1,f
  3325  0250  2A4B               	goto	u2127
  3326  0251  0000               	nop
  3327  0252                     l2453:	
  3328                           
  3329                           ;nrf24l01.c: 160: }
  3330                           ;nrf24l01.c: 162: nrf24l01.TXBusyCount = 0;
  3331  0252  30F0               	movlw	-16
  3332  0253  0020               	movlb	0	; select bank0
  3333  0254  05CE               	andwf	_nrf24l01+2,f	;volatile
  3334  0255                     l2461:	
  3335                           ;nrf24l01.c: 163: while (nrf24l01.TXBusy){
  3336                           
  3337  0255  0020               	movlb	0	; select bank0
  3338  0256  1ECD               	btfss	_nrf24l01+1,5	;volatile
  3339  0257  2A70               	goto	l2463
  3340                           
  3341                           ;nrf24l01.c: 164: if (++nrf24l01.TXBusyCount == 15) {
  3342  0258  084E               	movf	_nrf24l01+2,w	;volatile
  3343  0259  390F               	andlw	15
  3344  025A  00B5               	movwf	??_nrf24l01SendString
  3345  025B  0AB5               	incf	??_nrf24l01SendString,f
  3346  025C  084E               	movf	_nrf24l01+2,w	;volatile
  3347  025D  0635               	xorwf	??_nrf24l01SendString,w
  3348  025E  39F0               	andlw	-16
  3349  025F  0635               	xorwf	??_nrf24l01SendString,w
  3350  0260  00CE               	movwf	_nrf24l01+2	;volatile
  3351  0261  084E               	movf	_nrf24l01+2,w	;volatile
  3352  0262  390F               	andlw	15
  3353  0263  3A0F               	xorlw	15
  3354  0264  1903               	btfsc	3,2
  3355  0265  0001               	reset	;# 
  3356                           
  3357                           ;nrf24l01.c: 166: }
  3358                           ;nrf24l01.c: 167: _delay((unsigned long)((10000)*(16000000/4000000.0)));
  3359  0266  3034               	movlw	52
  3360  0267  0020               	movlb	0	; select bank0
  3361  0268  00B5               	movwf	??_nrf24l01SendString
  3362  0269  30F1               	movlw	241
  3363  026A                     u2137:	
  3364  026A  0B89               	decfsz	9,f
  3365  026B  2A6A               	goto	u2137
  3366  026C  0BB5               	decfsz	??_nrf24l01SendString,f
  3367  026D  2A6A               	goto	u2137
  3368  026E  3200               	nop2
  3369  026F  2A55               	goto	l2461
  3370  0270                     l2463:	
  3371                           
  3372                           ;nrf24l01.c: 168: }
  3373                           ;nrf24l01.c: 170: nrf24l01.waitForTXACKCount = 0;
  3374  0270  30E1               	movlw	-31
  3375  0271  05CD               	andwf	_nrf24l01+1,f	;volatile
  3376  0272                     l2471:	
  3377                           ;nrf24l01.c: 171: while (nrf24l01.waitForTXACK){
  3378                           
  3379  0272  0020               	movlb	0	; select bank0
  3380  0273  1C4D               	btfss	_nrf24l01+1,0	;volatile
  3381  0274  2A8E               	goto	l2473
  3382                           
  3383                           ;nrf24l01.c: 172: if (++nrf24l01.waitForTXACKCount == 15) {
  3384  0275  0C4D               	rrf	_nrf24l01+1,w	;volatile
  3385  0276  390F               	andlw	15
  3386  0277  00B5               	movwf	??_nrf24l01SendString
  3387  0278  0AB5               	incf	??_nrf24l01SendString,f
  3388  0279  0DB5               	rlf	??_nrf24l01SendString,f
  3389  027A  084D               	movf	_nrf24l01+1,w	;volatile
  3390  027B  0635               	xorwf	??_nrf24l01SendString,w
  3391  027C  39E1               	andlw	-31
  3392  027D  0635               	xorwf	??_nrf24l01SendString,w
  3393  027E  00CD               	movwf	_nrf24l01+1	;volatile
  3394  027F  0C4D               	rrf	_nrf24l01+1,w	;volatile
  3395  0280  390F               	andlw	15
  3396  0281  3A0F               	xorlw	15
  3397  0282  1903               	btfsc	3,2
  3398  0283  0001               	reset	;# 
  3399                           
  3400                           ;nrf24l01.c: 174: }
  3401                           ;nrf24l01.c: 175: _delay((unsigned long)((1000)*(16000000/4000000.0)));
  3402  0284  3006               	movlw	6
  3403  0285  0020               	movlb	0	; select bank0
  3404  0286  00B5               	movwf	??_nrf24l01SendString
  3405  0287  3030               	movlw	48
  3406  0288                     u2147:	
  3407  0288  0B89               	decfsz	9,f
  3408  0289  2A88               	goto	u2147
  3409  028A  0BB5               	decfsz	??_nrf24l01SendString,f
  3410  028B  2A88               	goto	u2147
  3411  028C  0000               	nop
  3412  028D  2A72               	goto	l2471
  3413  028E                     l2473:	
  3414                           
  3415                           ;nrf24l01.c: 176: }
  3416                           ;nrf24l01.c: 178: enableInterrupts(0);
  3417  028E  3000               	movlw	0
  3418  028F  27B7               	fcall	_enableInterrupts
  3419                           
  3420                           ;nrf24l01.c: 180: unsigned char btye;
  3421                           ;nrf24l01.c: 181: unsigned char i;
  3422                           ;nrf24l01.c: 183: nrf24l01SetRXMode(0);
  3423  0290  3000               	movlw	0
  3424  0291  24F8               	fcall	_nrf24l01SetRXMode
  3425                           
  3426                           ;nrf24l01.c: 185: nrf24l01.TXBusy = 1;
  3427  0292  0020               	movlb	0	; select bank0
  3428  0293  16CD               	bsf	_nrf24l01+1,5	;volatile
  3429                           
  3430                           ;nrf24l01.c: 186: nrf24l01.waitForTXACK = waitForAck;
  3431  0294  0C34               	rrf	nrf24l01SendString@waitForAck,w
  3432  0295  1C03               	skipc
  3433  0296  104D               	bcf	_nrf24l01+1,0	;volatile
  3434  0297  1803               	skipnc
  3435  0298  144D               	bsf	_nrf24l01+1,0	;volatile
  3436                           
  3437                           ;nrf24l01.c: 188: nrf24l01SPIStart();
  3438  0299  27A9               	fcall	_nrf24l01SPIStart
  3439                           
  3440                           ;nrf24l01.c: 190: nrf24l01SPISend(0b10110000);
  3441  029A  30B0               	movlw	176
  3442  029B  278F               	fcall	_nrf24l01SPISend
  3443                           
  3444                           ;nrf24l01.c: 192: i = 0;
  3445  029C  0020               	movlb	0	; select bank0
  3446  029D  01BA               	clrf	nrf24l01SendString@i
  3447  029E                     l2485:	
  3448                           ;nrf24l01.c: 193: while (1){
  3449                           
  3450                           
  3451                           ;nrf24l01.c: 194: btye = read_flashmem((unsigned) 0 + i++);
  3452  029E  0020               	movlb	0	; select bank0
  3453  029F  083A               	movf	nrf24l01SendString@i,w
  3454  02A0  00B5               	movwf	??_nrf24l01SendString
  3455  02A1  01B6               	clrf	??_nrf24l01SendString+1
  3456  02A2  0835               	movf	??_nrf24l01SendString,w
  3457  02A3  00AB               	movwf	read_flashmem@offset
  3458  02A4  0836               	movf	??_nrf24l01SendString+1,w
  3459  02A5  00AC               	movwf	read_flashmem@offset+1
  3460  02A6  259F               	fcall	_read_flashmem
  3461  02A7  0020               	movlb	0	; select bank0
  3462  02A8  082B               	movf	?_read_flashmem,w
  3463  02A9  00B7               	movwf	??_nrf24l01SendString+2
  3464  02AA  0837               	movf	??_nrf24l01SendString+2,w
  3465  02AB  00B8               	movwf	nrf24l01SendString@btye
  3466  02AC  3001               	movlw	1
  3467  02AD  00B5               	movwf	??_nrf24l01SendString
  3468  02AE  0835               	movf	??_nrf24l01SendString,w
  3469  02AF  07BA               	addwf	nrf24l01SendString@i,f
  3470                           
  3471                           ;nrf24l01.c: 196: if (btye == '\0'){
  3472  02B0  0838               	movf	nrf24l01SendString@btye,w
  3473  02B1  1903               	btfsc	3,2
  3474  02B2  2AB6               	goto	l2491
  3475                           
  3476                           ;nrf24l01.c: 198: }
  3477                           ;nrf24l01.c: 200: nrf24l01SPISend(btye);
  3478                           
  3479                           ;nrf24l01.c: 197: break;
  3480  02B3  0838               	movf	nrf24l01SendString@btye,w
  3481  02B4  278F               	fcall	_nrf24l01SPISend
  3482  02B5  2A9E               	goto	l2485
  3483  02B6                     l2491:	
  3484                           
  3485                           ;nrf24l01.c: 201: }
  3486                           ;nrf24l01.c: 203: for (i = 0; string[i] != '\0'; i++){
  3487  02B6  0020               	movlb	0	; select bank0
  3488  02B7  01BA               	clrf	nrf24l01SendString@i
  3489  02B8                     l2497:	
  3490  02B8  083A               	movf	nrf24l01SendString@i,w
  3491  02B9  0739               	addwf	nrf24l01SendString@string,w
  3492  02BA  00B5               	movwf	??_nrf24l01SendString
  3493  02BB  0835               	movf	??_nrf24l01SendString,w
  3494  02BC  0086               	movwf	6
  3495  02BD  0187               	clrf	7
  3496  02BE  0801               	movf	1,w
  3497  02BF  1903               	btfsc	3,2
  3498  02C0  2ACF               	goto	l2499
  3499                           
  3500                           ;nrf24l01.c: 204: nrf24l01SPISend(string[i]);
  3501  02C1  083A               	movf	nrf24l01SendString@i,w
  3502  02C2  0739               	addwf	nrf24l01SendString@string,w
  3503  02C3  00B5               	movwf	??_nrf24l01SendString
  3504  02C4  0835               	movf	??_nrf24l01SendString,w
  3505  02C5  0086               	movwf	6
  3506  02C6  0187               	clrf	7
  3507  02C7  0801               	movf	1,w
  3508  02C8  278F               	fcall	_nrf24l01SPISend
  3509  02C9  3001               	movlw	1
  3510  02CA  0020               	movlb	0	; select bank0
  3511  02CB  00B5               	movwf	??_nrf24l01SendString
  3512  02CC  0835               	movf	??_nrf24l01SendString,w
  3513  02CD  07BA               	addwf	nrf24l01SendString@i,f
  3514  02CE  2AB8               	goto	l2497
  3515  02CF                     l2499:	
  3516                           
  3517                           ;nrf24l01.c: 205: }
  3518                           ;nrf24l01.c: 207: nrf24l01SPIEnd();
  3519  02CF  27B0               	fcall	_nrf24l01SPIEnd
  3520                           
  3521                           ;nrf24l01.c: 209: PORTAbits.RA0 = 1;
  3522  02D0  0020               	movlb	0	; select bank0
  3523  02D1  140C               	bsf	12,0	;volatile
  3524                           
  3525                           ;nrf24l01.c: 211: _delay((unsigned long)((20)*(16000000/4000000.0)));
  3526  02D2  301A               	movlw	26
  3527  02D3                     u2157:	
  3528  02D3  0B89               	decfsz	9,f
  3529  02D4  2AD3               	goto	u2157
  3530  02D5  3200               	nop2
  3531                           
  3532                           ;nrf24l01.c: 213: PORTAbits.RA0 = 0;
  3533  02D6  0020               	movlb	0	; select bank0
  3534  02D7  100C               	bcf	12,0	;volatile
  3535                           
  3536                           ;nrf24l01.c: 215: enableInterrupts(1);
  3537  02D8  3001               	movlw	1
  3538  02D9  27B7               	fcall	_enableInterrupts
  3539  02DA  0008               	return
  3540  02DB                     __end_of_nrf24l01SendString:	
  3541                           
  3542                           	psect	text10
  3543  059F                     __ptext10:	
  3544 ;; *************** function _read_flashmem *****************
  3545 ;; Defined at:
  3546 ;;		line 59 in file "flash.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  offset          2   11[BANK0 ] unsigned int 
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;  address         2   18[BANK0 ] unsigned int 
  3551 ;;  result          2   16[BANK0 ] unsigned int 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  2   11[BANK0 ] unsigned int 
  3554 ;; Registers used:
  3555 ;;		wreg, status,2, status,0
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMMON   BANK0   BANK1
  3561 ;;      Params:         0       2       0
  3562 ;;      Locals:         0       4       0
  3563 ;;      Temps:          0       3       0
  3564 ;;      Totals:         0       9       0
  3565 ;;Total ram usage:        9 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    6
  3568 ;; This function calls:
  3569 ;;		Nothing
  3570 ;; This function is called by:
  3571 ;;		_loop
  3572 ;;		_main
  3573 ;;		_nrf24l01SendString
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           
  3578                           ;psect for function _read_flashmem
  3579  059F                     _read_flashmem:	
  3580                           
  3581                           ;flash.c: 61: unsigned int address;
  3582                           ;flash.c: 63: INTCONbits.GIE = 0;
  3583                           
  3584                           ;incstack = 0
  3585                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  3586  059F  138B               	bcf	11,7	;volatile
  3587                           
  3588                           ;flash.c: 65: PMCON1 = 0x00;
  3589  05A0  0023               	movlb	3	; select bank3
  3590  05A1  0195               	clrf	21	;volatile
  3591                           
  3592                           ;flash.c: 67: address = (0x800U-32) + offset;
  3593  05A2  0020               	movlb	0	; select bank0
  3594  05A3  082B               	movf	read_flashmem@offset,w
  3595  05A4  3EE0               	addlw	224
  3596  05A5  00B2               	movwf	read_flashmem@address
  3597  05A6  3007               	movlw	7
  3598  05A7  3D2C               	addwfc	read_flashmem@offset+1,w
  3599  05A8  00B3               	movwf	read_flashmem@address+1
  3600                           
  3601                           ;flash.c: 68: PMADRL = (char) (address >> 0);
  3602  05A9  0832               	movf	read_flashmem@address,w
  3603  05AA  0023               	movlb	3	; select bank3
  3604  05AB  0091               	movwf	17	;volatile
  3605                           
  3606                           ;flash.c: 69: PMADRH = (char) (address >> 8);
  3607  05AC  0020               	movlb	0	; select bank0
  3608  05AD  0833               	movf	read_flashmem@address+1,w
  3609  05AE  0023               	movlb	3	; select bank3
  3610  05AF  0092               	movwf	18	;volatile
  3611                           
  3612                           ;flash.c: 71: PMCON1bits.RD = 1;
  3613  05B0  1415               	bsf	21,0	;volatile
  3614                           
  3615                           ;flash.c: 73: __nop();
  3616  05B1  0000               	nop
  3617                           
  3618                           ;flash.c: 74: __nop();
  3619  05B2  0000               	nop
  3620                           
  3621                           ;flash.c: 76: unsigned int result = 0;
  3622  05B3  0020               	movlb	0	; select bank0
  3623  05B4  01B0               	clrf	read_flashmem@result
  3624  05B5  01B1               	clrf	read_flashmem@result+1
  3625                           
  3626                           ;flash.c: 77: result = PMDATL;
  3627  05B6  0023               	movlb	3	; select bank3
  3628  05B7  0813               	movf	19,w	;volatile
  3629  05B8  0020               	movlb	0	; select bank0
  3630  05B9  00AD               	movwf	??_read_flashmem
  3631  05BA  01AE               	clrf	??_read_flashmem+1
  3632  05BB  082D               	movf	??_read_flashmem,w
  3633  05BC  00B0               	movwf	read_flashmem@result
  3634  05BD  082E               	movf	??_read_flashmem+1,w
  3635  05BE  00B1               	movwf	read_flashmem@result+1
  3636                           
  3637                           ;flash.c: 78: result|= ( (unsigned) (PMDATH) << 8);
  3638  05BF  0023               	movlb	3	; select bank3
  3639  05C0  0814               	movf	20,w	;volatile
  3640  05C1  0020               	movlb	0	; select bank0
  3641  05C2  00AD               	movwf	??_read_flashmem
  3642  05C3  01AE               	clrf	??_read_flashmem+1
  3643  05C4  082D               	movf	??_read_flashmem,w
  3644  05C5  00AE               	movwf	??_read_flashmem+1
  3645  05C6  01AD               	clrf	??_read_flashmem
  3646  05C7  082D               	movf	??_read_flashmem,w
  3647  05C8  04B0               	iorwf	read_flashmem@result,f
  3648  05C9  082E               	movf	??_read_flashmem+1,w
  3649  05CA  04B1               	iorwf	read_flashmem@result+1,f
  3650                           
  3651                           ;flash.c: 80: INTCONbits.GIE = 1;
  3652  05CB  178B               	bsf	11,7	;volatile
  3653                           
  3654                           ;flash.c: 82: return result;
  3655  05CC  0831               	movf	read_flashmem@result+1,w
  3656  05CD  00AC               	movwf	?_read_flashmem+1
  3657  05CE  0830               	movf	read_flashmem@result,w
  3658  05CF  00AB               	movwf	?_read_flashmem
  3659  05D0  0008               	return
  3660  05D1                     __end_of_read_flashmem:	
  3661                           
  3662                           	psect	text11
  3663  04F8                     __ptext11:	
  3664 ;; *************** function _nrf24l01SetRXMode *****************
  3665 ;; Defined at:
  3666 ;;		line 27 in file "nrf24l01.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;  rxMode          1    wreg     unsigned char 
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;  rxMode          1   12[BANK0 ] unsigned char 
  3671 ;;  config          1   13[BANK0 ] struct .
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      void 
  3674 ;; Registers used:
  3675 ;;		wreg, status,2, status,0, pclath, cstack
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMMON   BANK0   BANK1
  3681 ;;      Params:         0       0       0
  3682 ;;      Locals:         0       2       0
  3683 ;;      Temps:          0       1       0
  3684 ;;      Totals:         0       3       0
  3685 ;;Total ram usage:        3 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    8
  3688 ;; This function calls:
  3689 ;;		_nrf24l01Send
  3690 ;; This function is called by:
  3691 ;;		_nrf24l01SendString
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           
  3696                           ;psect for function _nrf24l01SetRXMode
  3697  04F8                     _nrf24l01SetRXMode:	
  3698                           
  3699                           ;incstack = 0
  3700                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  3701                           ;nrf24l01SetRXMode@rxMode stored from wreg
  3702  04F8  0020               	movlb	0	; select bank0
  3703  04F9  00AC               	movwf	nrf24l01SetRXMode@rxMode
  3704                           
  3705                           ;nrf24l01.c: 28: n_CONFIG_t config;
  3706                           ;nrf24l01.c: 29: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  3707  04FA  01A0               	clrf	nrf24l01Send@data
  3708  04FB  3000               	movlw	0
  3709  04FC  275C               	fcall	_nrf24l01Send
  3710  04FD  0020               	movlb	0	; select bank0
  3711  04FE  00AB               	movwf	??_nrf24l01SetRXMode
  3712  04FF  082B               	movf	??_nrf24l01SetRXMode,w
  3713  0500  00AD               	movwf	nrf24l01SetRXMode@config
  3714                           
  3715                           ;nrf24l01.c: 31: nrf24l01.RXMode = rxMode;
  3716  0501  0C2C               	rrf	nrf24l01SetRXMode@rxMode,w
  3717  0502  1C03               	skipc
  3718  0503  12CE               	bcf	_nrf24l01+2,5	;volatile
  3719  0504  1803               	skipnc
  3720  0505  16CE               	bsf	_nrf24l01+2,5	;volatile
  3721                           
  3722                           ;nrf24l01.c: 33: if (config.PRIM_RX != nrf24l01.RXMode){
  3723  0506  1ECE               	btfss	_nrf24l01+2,5	;volatile
  3724  0507  2D0A               	goto	u1550
  3725  0508  3001               	movlw	1
  3726  0509  2D0B               	goto	u1552
  3727  050A                     u1550:	
  3728  050A  3000               	movlw	0
  3729  050B                     u1552:	
  3730  050B  00AB               	movwf	??_nrf24l01SetRXMode
  3731  050C  1C2D               	btfss	nrf24l01SetRXMode@config,0
  3732  050D  2D10               	goto	u1560
  3733  050E  3001               	movlw	1
  3734  050F  2D11               	goto	u1562
  3735  0510                     u1560:	
  3736  0510  3000               	movlw	0
  3737  0511                     u1562:	
  3738  0511  062B               	xorwf	??_nrf24l01SetRXMode,w
  3739  0512  1903               	skipnz
  3740  0513  0008               	return
  3741                           
  3742                           ;nrf24l01.c: 35: PORTAbits.RA0 = 0;
  3743  0514  100C               	bcf	12,0	;volatile
  3744                           
  3745                           ;nrf24l01.c: 36: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3746  0515  30A0               	movlw	160
  3747  0516                     u2167:	
  3748  0516  3200               	nop2
  3749  0517  0B89               	decfsz	9,f
  3750  0518  2D16               	goto	u2167
  3751                           
  3752                           ;nrf24l01.c: 38: config.PRIM_RX = nrf24l01.RXMode;
  3753  0519  0020               	movlb	0	; select bank0
  3754  051A  102D               	bcf	nrf24l01SetRXMode@config,0
  3755  051B  1ACE               	btfsc	_nrf24l01+2,5	;volatile
  3756  051C  142D               	bsf	nrf24l01SetRXMode@config,0
  3757                           
  3758                           ;nrf24l01.c: 39: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3759  051D  0020               	movlb	0	; select bank0
  3760  051E  082D               	movf	nrf24l01SetRXMode@config,w
  3761  051F  00AB               	movwf	??_nrf24l01SetRXMode
  3762  0520  082B               	movf	??_nrf24l01SetRXMode,w
  3763  0521  00A0               	movwf	nrf24l01Send@data
  3764  0522  3020               	movlw	32
  3765  0523  275C               	fcall	_nrf24l01Send
  3766                           
  3767                           ;nrf24l01.c: 40: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3768  0524  30A0               	movlw	160
  3769  0525                     u2177:	
  3770  0525  3200               	nop2
  3771  0526  0B89               	decfsz	9,f
  3772  0527  2D25               	goto	u2177
  3773                           
  3774                           ;nrf24l01.c: 42: if (nrf24l01.RXMode){
  3775  0528  0020               	movlb	0	; select bank0
  3776  0529  1ECE               	btfss	_nrf24l01+2,5	;volatile
  3777  052A  0008               	return
  3778                           
  3779                           ;nrf24l01.c: 43: PORTAbits.RA0 = 1;
  3780  052B  140C               	bsf	12,0	;volatile
  3781                           
  3782                           ;nrf24l01.c: 44: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3783  052C  30A0               	movlw	160
  3784  052D                     u2187:	
  3785  052D  3200               	nop2
  3786  052E  0B89               	decfsz	9,f
  3787  052F  2D2D               	goto	u2187
  3788  0530  0008               	return
  3789  0531                     __end_of_nrf24l01SetRXMode:	
  3790                           
  3791                           	psect	text12
  3792  076F                     __ptext12:	
  3793 ;; *************** function __itoa *****************
  3794 ;; Defined at:
  3795 ;;		line 56 in file "interface.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  buffer          1    wreg     PTR unsigned char 
  3798 ;;		 -> string(16), 
  3799 ;;  number          2   35[BANK0 ] unsigned int 
  3800 ;;  base            1   37[BANK0 ] unsigned char 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  buffer          1    0[BANK1 ] PTR unsigned char 
  3803 ;;		 -> string(16), 
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  1    wreg      void 
  3806 ;; Registers used:
  3807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMMON   BANK0   BANK1
  3813 ;;      Params:         0       3       0
  3814 ;;      Locals:         0       0       1
  3815 ;;      Temps:          0       2       0
  3816 ;;      Totals:         0       5       1
  3817 ;;Total ram usage:        6 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    9
  3820 ;; This function calls:
  3821 ;;		_itoa
  3822 ;; This function is called by:
  3823 ;;		_loop
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           
  3828                           ;psect for function __itoa
  3829  076F                     __itoa:	
  3830                           
  3831                           ;incstack = 0
  3832                           ; Regs used in __itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3833                           ;__itoa@buffer stored from wreg
  3834  076F  0021               	movlb	1	; select bank1
  3835  0770  00A0               	movwf	__itoa@buffer^(0+128)
  3836                           
  3837                           ;interface.c: 57: itoa(buffer, number, base);
  3838  0771  0020               	movlb	0	; select bank0
  3839  0772  0844               	movf	__itoa@number+1,w
  3840  0773  00BD               	movwf	itoa@val+1
  3841  0774  0843               	movf	__itoa@number,w
  3842  0775  00BC               	movwf	itoa@val
  3843  0776  0845               	movf	__itoa@base,w
  3844  0777  00C6               	movwf	??__itoa
  3845  0778  01C7               	clrf	??__itoa+1
  3846  0779  0846               	movf	??__itoa,w
  3847  077A  00BE               	movwf	itoa@base
  3848  077B  0847               	movf	??__itoa+1,w
  3849  077C  00BF               	movwf	itoa@base+1
  3850  077D  0021               	movlb	1	; select bank1
  3851  077E  0820               	movf	__itoa@buffer^(0+128),w
  3852  077F  2700               	fcall	_itoa
  3853  0780  0008               	return
  3854  0781                     __end_of__itoa:	
  3855                           
  3856                           	psect	text13
  3857  0700                     __ptext13:	
  3858 ;; *************** function _itoa *****************
  3859 ;; Defined at:
  3860 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;  buf             1    wreg     PTR unsigned char 
  3863 ;;		 -> string(16), 
  3864 ;;  val             2   28[BANK0 ] int 
  3865 ;;  base            2   30[BANK0 ] int 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  buf             1   34[BANK0 ] PTR unsigned char 
  3868 ;;		 -> string(16), 
  3869 ;;  cp              1   33[BANK0 ] PTR unsigned char 
  3870 ;;		 -> string(16), 
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      PTR unsigned char 
  3873 ;; Registers used:
  3874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMMON   BANK0   BANK1
  3880 ;;      Params:         0       4       0
  3881 ;;      Locals:         0       2       0
  3882 ;;      Temps:          0       1       0
  3883 ;;      Totals:         0       7       0
  3884 ;;Total ram usage:        7 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; Hardware stack levels required when called:    8
  3887 ;; This function calls:
  3888 ;;		_utoa
  3889 ;; This function is called by:
  3890 ;;		__itoa
  3891 ;; This function uses a non-reentrant model
  3892 ;;
  3893                           
  3894                           
  3895                           ;psect for function _itoa
  3896  0700                     _itoa:	
  3897                           
  3898                           ;incstack = 0
  3899                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3900                           ;itoa@buf stored from wreg
  3901  0700  0020               	movlb	0	; select bank0
  3902  0701  00C2               	movwf	itoa@buf
  3903  0702  0842               	movf	itoa@buf,w
  3904  0703  00C0               	movwf	??_itoa
  3905  0704  0840               	movf	??_itoa,w
  3906  0705  00C1               	movwf	itoa@cp
  3907  0706  1FBD               	btfss	itoa@val+1,7
  3908  0707  2F18               	goto	l2363
  3909  0708  302D               	movlw	45
  3910  0709  00C0               	movwf	??_itoa
  3911  070A  0842               	movf	itoa@buf,w
  3912  070B  0086               	movwf	6
  3913  070C  0187               	clrf	7
  3914  070D  0840               	movf	??_itoa,w
  3915  070E  0081               	movwf	1
  3916  070F  3001               	movlw	1
  3917  0710  00C0               	movwf	??_itoa
  3918  0711  0840               	movf	??_itoa,w
  3919  0712  07C2               	addwf	itoa@buf,f
  3920  0713  09BC               	comf	itoa@val,f
  3921  0714  09BD               	comf	itoa@val+1,f
  3922  0715  0ABC               	incf	itoa@val,f
  3923  0716  1903               	skipnz
  3924  0717  0ABD               	incf	itoa@val+1,f
  3925  0718                     l2363:	
  3926  0718  083D               	movf	itoa@val+1,w
  3927  0719  00B4               	movwf	utoa@val+1
  3928  071A  083C               	movf	itoa@val,w
  3929  071B  00B3               	movwf	utoa@val
  3930  071C  083F               	movf	itoa@base+1,w
  3931  071D  00B6               	movwf	utoa@base+1
  3932  071E  083E               	movf	itoa@base,w
  3933  071F  00B5               	movwf	utoa@base
  3934  0720  0842               	movf	itoa@buf,w
  3935  0721  23C0               	fcall	_utoa
  3936  0722  0008               	return
  3937  0723                     __end_of_itoa:	
  3938                           ;	Return value of _itoa is never used
  3939                           
  3940                           
  3941                           	psect	text14
  3942  03C0                     __ptext14:	
  3943 ;; *************** function _utoa *****************
  3944 ;; Defined at:
  3945 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;  buf             1    wreg     PTR unsigned char 
  3948 ;;		 -> string(16), 
  3949 ;;  val             2   19[BANK0 ] unsigned int 
  3950 ;;  base            2   21[BANK0 ] int 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  buf             1   27[BANK0 ] PTR unsigned char 
  3953 ;;		 -> string(16), 
  3954 ;;  v               2   24[BANK0 ] unsigned int 
  3955 ;;  c               1   26[BANK0 ] unsigned char 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      PTR unsigned char 
  3958 ;; Registers used:
  3959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMMON   BANK0   BANK1
  3965 ;;      Params:         0       4       0
  3966 ;;      Locals:         0       4       0
  3967 ;;      Temps:          0       1       0
  3968 ;;      Totals:         0       9       0
  3969 ;;Total ram usage:        9 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    7
  3972 ;; This function calls:
  3973 ;;		___lwdiv
  3974 ;;		___lwmod
  3975 ;; This function is called by:
  3976 ;;		_itoa
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           
  3981                           ;psect for function _utoa
  3982  03C0                     _utoa:	
  3983                           
  3984                           ;incstack = 0
  3985                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3986                           ;utoa@buf stored from wreg
  3987  03C0  0020               	movlb	0	; select bank0
  3988  03C1  00BB               	movwf	utoa@buf
  3989  03C2  0834               	movf	utoa@val+1,w
  3990  03C3  00B9               	movwf	utoa@v+1
  3991  03C4  0833               	movf	utoa@val,w
  3992  03C5  00B8               	movwf	utoa@v
  3993  03C6                     l2297:	
  3994  03C6  0836               	movf	utoa@base+1,w
  3995  03C7  00AC               	movwf	___lwdiv@divisor+1
  3996  03C8  0835               	movf	utoa@base,w
  3997  03C9  00AB               	movwf	___lwdiv@divisor
  3998  03CA  0839               	movf	utoa@v+1,w
  3999  03CB  00AE               	movwf	___lwdiv@dividend+1
  4000  03CC  0838               	movf	utoa@v,w
  4001  03CD  00AD               	movwf	___lwdiv@dividend
  4002  03CE  256A               	fcall	___lwdiv
  4003  03CF  0020               	movlb	0	; select bank0
  4004  03D0  082C               	movf	?___lwdiv+1,w
  4005  03D1  00B9               	movwf	utoa@v+1
  4006  03D2  082B               	movf	?___lwdiv,w
  4007  03D3  00B8               	movwf	utoa@v
  4008  03D4  3001               	movlw	1
  4009  03D5  00B7               	movwf	??_utoa
  4010  03D6  0837               	movf	??_utoa,w
  4011  03D7  07BB               	addwf	utoa@buf,f
  4012  03D8  0838               	movf	utoa@v,w
  4013  03D9  0439               	iorwf	utoa@v+1,w
  4014  03DA  1D03               	btfss	3,2
  4015  03DB  2BC6               	goto	l2297
  4016  03DC  083B               	movf	utoa@buf,w
  4017  03DD  0086               	movwf	6
  4018  03DE  0187               	clrf	7
  4019  03DF  0181               	clrf	1
  4020  03E0  3001               	movlw	1
  4021  03E1  02BB               	subwf	utoa@buf,f
  4022  03E2                     l2307:	
  4023  03E2  0836               	movf	utoa@base+1,w
  4024  03E3  00AC               	movwf	___lwmod@divisor+1
  4025  03E4  0835               	movf	utoa@base,w
  4026  03E5  00AB               	movwf	___lwmod@divisor
  4027  03E6  0834               	movf	utoa@val+1,w
  4028  03E7  00AE               	movwf	___lwmod@dividend+1
  4029  03E8  0833               	movf	utoa@val,w
  4030  03E9  00AD               	movwf	___lwmod@dividend
  4031  03EA  2660               	fcall	___lwmod
  4032  03EB  0020               	movlb	0	; select bank0
  4033  03EC  082B               	movf	?___lwmod,w
  4034  03ED  00B7               	movwf	??_utoa
  4035  03EE  0837               	movf	??_utoa,w
  4036  03EF  00BA               	movwf	utoa@c
  4037  03F0  0836               	movf	utoa@base+1,w
  4038  03F1  00AC               	movwf	___lwdiv@divisor+1
  4039  03F2  0835               	movf	utoa@base,w
  4040  03F3  00AB               	movwf	___lwdiv@divisor
  4041  03F4  0834               	movf	utoa@val+1,w
  4042  03F5  00AE               	movwf	___lwdiv@dividend+1
  4043  03F6  0833               	movf	utoa@val,w
  4044  03F7  00AD               	movwf	___lwdiv@dividend
  4045  03F8  256A               	fcall	___lwdiv
  4046  03F9  0020               	movlb	0	; select bank0
  4047  03FA  082C               	movf	?___lwdiv+1,w
  4048  03FB  00B4               	movwf	utoa@val+1
  4049  03FC  082B               	movf	?___lwdiv,w
  4050  03FD  00B3               	movwf	utoa@val
  4051  03FE  300A               	movlw	10
  4052  03FF  023A               	subwf	utoa@c,w
  4053  0400  1C03               	skipc
  4054  0401  2C06               	goto	l552
  4055  0402  3007               	movlw	7
  4056  0403  00B7               	movwf	??_utoa
  4057  0404  0837               	movf	??_utoa,w
  4058  0405  07BA               	addwf	utoa@c,f
  4059  0406                     l552:	
  4060  0406  3030               	movlw	48
  4061  0407  00B7               	movwf	??_utoa
  4062  0408  0837               	movf	??_utoa,w
  4063  0409  07BA               	addwf	utoa@c,f
  4064  040A  083A               	movf	utoa@c,w
  4065  040B  00B7               	movwf	??_utoa
  4066  040C  083B               	movf	utoa@buf,w
  4067  040D  0086               	movwf	6
  4068  040E  0187               	clrf	7
  4069  040F  0837               	movf	??_utoa,w
  4070  0410  0081               	movwf	1
  4071  0411  3001               	movlw	1
  4072  0412  02BB               	subwf	utoa@buf,f
  4073  0413  0833               	movf	utoa@val,w
  4074  0414  0434               	iorwf	utoa@val+1,w
  4075  0415  1D03               	btfss	3,2
  4076  0416  2BE2               	goto	l2307
  4077                           
  4078                           ;	Return value of _utoa is never used
  4079  0417  3001               	movlw	1
  4080  0418  00B7               	movwf	??_utoa
  4081  0419  0837               	movf	??_utoa,w
  4082  041A  07BB               	addwf	utoa@buf,f
  4083  041B  0008               	return
  4084  041C                     __end_of_utoa:	
  4085                           
  4086                           	psect	text15
  4087  0660                     __ptext15:	
  4088 ;; *************** function ___lwmod *****************
  4089 ;; Defined at:
  4090 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;  divisor         2   11[BANK0 ] unsigned int 
  4093 ;;  dividend        2   13[BANK0 ] unsigned int 
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;  counter         1   16[BANK0 ] unsigned char 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  2   11[BANK0 ] unsigned int 
  4098 ;; Registers used:
  4099 ;;		wreg, status,2, status,0
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMMON   BANK0   BANK1
  4105 ;;      Params:         0       4       0
  4106 ;;      Locals:         0       1       0
  4107 ;;      Temps:          0       1       0
  4108 ;;      Totals:         0       6       0
  4109 ;;Total ram usage:        6 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    6
  4112 ;; This function calls:
  4113 ;;		Nothing
  4114 ;; This function is called by:
  4115 ;;		_utoa
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           
  4120                           ;psect for function ___lwmod
  4121  0660                     ___lwmod:	
  4122                           
  4123                           ;incstack = 0
  4124                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4125  0660  0020               	movlb	0	; select bank0
  4126  0661  082B               	movf	___lwmod@divisor,w
  4127  0662  042C               	iorwf	___lwmod@divisor+1,w
  4128  0663  1903               	btfsc	3,2
  4129  0664  2E88               	goto	l2279
  4130  0665  01B0               	clrf	___lwmod@counter
  4131  0666  0AB0               	incf	___lwmod@counter,f
  4132  0667                     l2269:	
  4133  0667  1BAC               	btfsc	___lwmod@divisor+1,7
  4134  0668  2E73               	goto	l2271
  4135  0669  3001               	movlw	1
  4136  066A                     u1465:	
  4137  066A  35AB               	lslf	___lwmod@divisor,f
  4138  066B  0DAC               	rlf	___lwmod@divisor+1,f
  4139  066C  0B89               	decfsz	9,f
  4140  066D  2E6A               	goto	u1465
  4141  066E  3001               	movlw	1
  4142  066F  00AF               	movwf	??___lwmod
  4143  0670  082F               	movf	??___lwmod,w
  4144  0671  07B0               	addwf	___lwmod@counter,f
  4145  0672  2E67               	goto	l2269
  4146  0673                     l2271:	
  4147  0673  082C               	movf	___lwmod@divisor+1,w
  4148  0674  022E               	subwf	___lwmod@dividend+1,w
  4149  0675  1D03               	skipz
  4150  0676  2E79               	goto	u1485
  4151  0677  082B               	movf	___lwmod@divisor,w
  4152  0678  022D               	subwf	___lwmod@dividend,w
  4153  0679                     u1485:	
  4154  0679  1C03               	skipc
  4155  067A  2E7F               	goto	l2275
  4156  067B  082B               	movf	___lwmod@divisor,w
  4157  067C  02AD               	subwf	___lwmod@dividend,f
  4158  067D  082C               	movf	___lwmod@divisor+1,w
  4159  067E  3BAE               	subwfb	___lwmod@dividend+1,f
  4160  067F                     l2275:	
  4161  067F  3001               	movlw	1
  4162  0680                     u1495:	
  4163  0680  36AC               	lsrf	___lwmod@divisor+1,f
  4164  0681  0CAB               	rrf	___lwmod@divisor,f
  4165  0682  0B89               	decfsz	9,f
  4166  0683  2E80               	goto	u1495
  4167  0684  3001               	movlw	1
  4168  0685  02B0               	subwf	___lwmod@counter,f
  4169  0686  1D03               	btfss	3,2
  4170  0687  2E73               	goto	l2271
  4171  0688                     l2279:	
  4172  0688  082E               	movf	___lwmod@dividend+1,w
  4173  0689  00AC               	movwf	?___lwmod+1
  4174  068A  082D               	movf	___lwmod@dividend,w
  4175  068B  00AB               	movwf	?___lwmod
  4176  068C  0008               	return
  4177  068D                     __end_of___lwmod:	
  4178                           
  4179                           	psect	text16
  4180  056A                     __ptext16:	
  4181 ;; *************** function ___lwdiv *****************
  4182 ;; Defined at:
  4183 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;  divisor         2   11[BANK0 ] unsigned int 
  4186 ;;  dividend        2   13[BANK0 ] unsigned int 
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;  quotient        2   17[BANK0 ] unsigned int 
  4189 ;;  counter         1   16[BANK0 ] unsigned char 
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  2   11[BANK0 ] unsigned int 
  4192 ;; Registers used:
  4193 ;;		wreg, status,2, status,0
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMMON   BANK0   BANK1
  4199 ;;      Params:         0       4       0
  4200 ;;      Locals:         0       3       0
  4201 ;;      Temps:          0       1       0
  4202 ;;      Totals:         0       8       0
  4203 ;;Total ram usage:        8 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    6
  4206 ;; This function calls:
  4207 ;;		Nothing
  4208 ;; This function is called by:
  4209 ;;		_utoa
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           
  4214                           ;psect for function ___lwdiv
  4215  056A                     ___lwdiv:	
  4216                           
  4217                           ;incstack = 0
  4218                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4219  056A  0020               	movlb	0	; select bank0
  4220  056B  01B1               	clrf	___lwdiv@quotient
  4221  056C  01B2               	clrf	___lwdiv@quotient+1
  4222  056D  082B               	movf	___lwdiv@divisor,w
  4223  056E  042C               	iorwf	___lwdiv@divisor+1,w
  4224  056F  1903               	btfsc	3,2
  4225  0570  2D9A               	goto	l2257
  4226  0571  01B0               	clrf	___lwdiv@counter
  4227  0572  0AB0               	incf	___lwdiv@counter,f
  4228  0573                     l2245:	
  4229  0573  1BAC               	btfsc	___lwdiv@divisor+1,7
  4230  0574  2D7F               	goto	l2247
  4231  0575  3001               	movlw	1
  4232  0576                     u1395:	
  4233  0576  35AB               	lslf	___lwdiv@divisor,f
  4234  0577  0DAC               	rlf	___lwdiv@divisor+1,f
  4235  0578  0B89               	decfsz	9,f
  4236  0579  2D76               	goto	u1395
  4237  057A  3001               	movlw	1
  4238  057B  00AF               	movwf	??___lwdiv
  4239  057C  082F               	movf	??___lwdiv,w
  4240  057D  07B0               	addwf	___lwdiv@counter,f
  4241  057E  2D73               	goto	l2245
  4242  057F                     l2247:	
  4243  057F  3001               	movlw	1
  4244  0580                     u1415:	
  4245  0580  35B1               	lslf	___lwdiv@quotient,f
  4246  0581  0DB2               	rlf	___lwdiv@quotient+1,f
  4247  0582  0B89               	decfsz	9,f
  4248  0583  2D80               	goto	u1415
  4249  0584  082C               	movf	___lwdiv@divisor+1,w
  4250  0585  022E               	subwf	___lwdiv@dividend+1,w
  4251  0586  1D03               	skipz
  4252  0587  2D8A               	goto	u1425
  4253  0588  082B               	movf	___lwdiv@divisor,w
  4254  0589  022D               	subwf	___lwdiv@dividend,w
  4255  058A                     u1425:	
  4256  058A  1C03               	skipc
  4257  058B  2D91               	goto	l2253
  4258  058C  082B               	movf	___lwdiv@divisor,w
  4259  058D  02AD               	subwf	___lwdiv@dividend,f
  4260  058E  082C               	movf	___lwdiv@divisor+1,w
  4261  058F  3BAE               	subwfb	___lwdiv@dividend+1,f
  4262  0590  1431               	bsf	___lwdiv@quotient,0
  4263  0591                     l2253:	
  4264  0591  3001               	movlw	1
  4265  0592                     u1435:	
  4266  0592  36AC               	lsrf	___lwdiv@divisor+1,f
  4267  0593  0CAB               	rrf	___lwdiv@divisor,f
  4268  0594  0B89               	decfsz	9,f
  4269  0595  2D92               	goto	u1435
  4270  0596  3001               	movlw	1
  4271  0597  02B0               	subwf	___lwdiv@counter,f
  4272  0598  1D03               	btfss	3,2
  4273  0599  2D7F               	goto	l2247
  4274  059A                     l2257:	
  4275  059A  0832               	movf	___lwdiv@quotient+1,w
  4276  059B  00AC               	movwf	?___lwdiv+1
  4277  059C  0831               	movf	___lwdiv@quotient,w
  4278  059D  00AB               	movwf	?___lwdiv
  4279  059E  0008               	return
  4280  059F                     __end_of___lwdiv:	
  4281                           
  4282                           	psect	text17
  4283  0602                     __ptext17:	
  4284 ;; *************** function ___lmul *****************
  4285 ;; Defined at:
  4286 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;  multiplier      4   11[BANK0 ] unsigned long 
  4289 ;;  multiplicand    4   15[BANK0 ] unsigned long 
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;  product         4   19[BANK0 ] unsigned long 
  4292 ;; Return value:  Size  Location     Type
  4293 ;;                  4   11[BANK0 ] unsigned long 
  4294 ;; Registers used:
  4295 ;;		wreg, status,2, status,0
  4296 ;; Tracked objects:
  4297 ;;		On entry : 0/0
  4298 ;;		On exit  : 0/0
  4299 ;;		Unchanged: 0/0
  4300 ;; Data sizes:     COMMON   BANK0   BANK1
  4301 ;;      Params:         0       8       0
  4302 ;;      Locals:         0       4       0
  4303 ;;      Temps:          0       0       0
  4304 ;;      Totals:         0      12       0
  4305 ;;Total ram usage:       12 bytes
  4306 ;; Hardware stack levels used:    1
  4307 ;; Hardware stack levels required when called:    6
  4308 ;; This function calls:
  4309 ;;		Nothing
  4310 ;; This function is called by:
  4311 ;;		_loop
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315                           
  4316                           ;psect for function ___lmul
  4317  0602                     ___lmul:	
  4318                           
  4319                           ;incstack = 0
  4320                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4321  0602  3000               	movlw	0
  4322  0603  0020               	movlb	0	; select bank0
  4323  0604  00B6               	movwf	___lmul@product+3
  4324  0605  3000               	movlw	0
  4325  0606  00B5               	movwf	___lmul@product+2
  4326  0607  3000               	movlw	0
  4327  0608  00B4               	movwf	___lmul@product+1
  4328  0609  3000               	movlw	0
  4329  060A  00B3               	movwf	___lmul@product
  4330  060B                     l2625:	
  4331  060B  1C2B               	btfss	___lmul@multiplier,0
  4332  060C  2E15               	goto	l2629
  4333  060D  082F               	movf	___lmul@multiplicand,w
  4334  060E  07B3               	addwf	___lmul@product,f
  4335  060F  0830               	movf	___lmul@multiplicand+1,w
  4336  0610  3DB4               	addwfc	___lmul@product+1,f
  4337  0611  0831               	movf	___lmul@multiplicand+2,w
  4338  0612  3DB5               	addwfc	___lmul@product+2,f
  4339  0613  0832               	movf	___lmul@multiplicand+3,w
  4340  0614  3DB6               	addwfc	___lmul@product+3,f
  4341  0615                     l2629:	
  4342  0615  3001               	movlw	1
  4343  0616                     u1805:	
  4344  0616  35AF               	lslf	___lmul@multiplicand,f
  4345  0617  0DB0               	rlf	___lmul@multiplicand+1,f
  4346  0618  0DB1               	rlf	___lmul@multiplicand+2,f
  4347  0619  0DB2               	rlf	___lmul@multiplicand+3,f
  4348  061A  0B89               	decfsz	9,f
  4349  061B  2E16               	goto	u1805
  4350  061C  3001               	movlw	1
  4351  061D                     u1815:	
  4352  061D  36AE               	lsrf	___lmul@multiplier+3,f
  4353  061E  0CAD               	rrf	___lmul@multiplier+2,f
  4354  061F  0CAC               	rrf	___lmul@multiplier+1,f
  4355  0620  0CAB               	rrf	___lmul@multiplier,f
  4356  0621  0B89               	decfsz	9,f
  4357  0622  2E1D               	goto	u1815
  4358  0623  082E               	movf	___lmul@multiplier+3,w
  4359  0624  042D               	iorwf	___lmul@multiplier+2,w
  4360  0625  042C               	iorwf	___lmul@multiplier+1,w
  4361  0626  042B               	iorwf	___lmul@multiplier,w
  4362  0627  1D03               	skipz
  4363  0628  2E0B               	goto	l2625
  4364  0629  0836               	movf	___lmul@product+3,w
  4365  062A  00AE               	movwf	?___lmul+3
  4366  062B  0835               	movf	___lmul@product+2,w
  4367  062C  00AD               	movwf	?___lmul+2
  4368  062D  0834               	movf	___lmul@product+1,w
  4369  062E  00AC               	movwf	?___lmul+1
  4370  062F  0833               	movf	___lmul@product,w
  4371  0630  00AB               	movwf	?___lmul
  4372  0631  0008               	return
  4373  0632                     __end_of___lmul:	
  4374                           
  4375                           	psect	text18
  4376  041C                     __ptext18:	
  4377 ;; *************** function ___lldiv *****************
  4378 ;; Defined at:
  4379 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  divisor         4   11[BANK0 ] unsigned long 
  4382 ;;  dividend        4   15[BANK0 ] unsigned long 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  quotient        4   20[BANK0 ] unsigned long 
  4385 ;;  counter         1   24[BANK0 ] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  4   11[BANK0 ] unsigned long 
  4388 ;; Registers used:
  4389 ;;		wreg, status,2, status,0
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMMON   BANK0   BANK1
  4395 ;;      Params:         0       8       0
  4396 ;;      Locals:         0       5       0
  4397 ;;      Temps:          0       1       0
  4398 ;;      Totals:         0      14       0
  4399 ;;Total ram usage:       14 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    6
  4402 ;; This function calls:
  4403 ;;		Nothing
  4404 ;; This function is called by:
  4405 ;;		_loop
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           
  4410                           ;psect for function ___lldiv
  4411  041C                     ___lldiv:	
  4412                           
  4413                           ;incstack = 0
  4414                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4415  041C  3000               	movlw	0
  4416  041D  0020               	movlb	0	; select bank0
  4417  041E  00B7               	movwf	___lldiv@quotient+3
  4418  041F  3000               	movlw	0
  4419  0420  00B6               	movwf	___lldiv@quotient+2
  4420  0421  3000               	movlw	0
  4421  0422  00B5               	movwf	___lldiv@quotient+1
  4422  0423  3000               	movlw	0
  4423  0424  00B4               	movwf	___lldiv@quotient
  4424  0425  082E               	movf	___lldiv@divisor+3,w
  4425  0426  042D               	iorwf	___lldiv@divisor+2,w
  4426  0427  042C               	iorwf	___lldiv@divisor+1,w
  4427  0428  042B               	iorwf	___lldiv@divisor,w
  4428  0429  1903               	skipnz
  4429  042A  2C66               	goto	l2657
  4430  042B  01B8               	clrf	___lldiv@counter
  4431  042C  0AB8               	incf	___lldiv@counter,f
  4432  042D                     l2643:	
  4433  042D  1BAE               	btfsc	___lldiv@divisor+3,7
  4434  042E  2C3B               	goto	l2645
  4435  042F  3001               	movlw	1
  4436  0430                     u1845:	
  4437  0430  35AB               	lslf	___lldiv@divisor,f
  4438  0431  0DAC               	rlf	___lldiv@divisor+1,f
  4439  0432  0DAD               	rlf	___lldiv@divisor+2,f
  4440  0433  0DAE               	rlf	___lldiv@divisor+3,f
  4441  0434  0B89               	decfsz	9,f
  4442  0435  2C30               	goto	u1845
  4443  0436  3001               	movlw	1
  4444  0437  00B3               	movwf	??___lldiv
  4445  0438  0833               	movf	??___lldiv,w
  4446  0439  07B8               	addwf	___lldiv@counter,f
  4447  043A  2C2D               	goto	l2643
  4448  043B                     l2645:	
  4449  043B  3001               	movlw	1
  4450  043C                     u1865:	
  4451  043C  35B4               	lslf	___lldiv@quotient,f
  4452  043D  0DB5               	rlf	___lldiv@quotient+1,f
  4453  043E  0DB6               	rlf	___lldiv@quotient+2,f
  4454  043F  0DB7               	rlf	___lldiv@quotient+3,f
  4455  0440  0B89               	decfsz	9,f
  4456  0441  2C3C               	goto	u1865
  4457  0442  082E               	movf	___lldiv@divisor+3,w
  4458  0443  0232               	subwf	___lldiv@dividend+3,w
  4459  0444  1D03               	skipz
  4460  0445  2C50               	goto	u1875
  4461  0446  082D               	movf	___lldiv@divisor+2,w
  4462  0447  0231               	subwf	___lldiv@dividend+2,w
  4463  0448  1D03               	skipz
  4464  0449  2C50               	goto	u1875
  4465  044A  082C               	movf	___lldiv@divisor+1,w
  4466  044B  0230               	subwf	___lldiv@dividend+1,w
  4467  044C  1D03               	skipz
  4468  044D  2C50               	goto	u1875
  4469  044E  082B               	movf	___lldiv@divisor,w
  4470  044F  022F               	subwf	___lldiv@dividend,w
  4471  0450                     u1875:	
  4472  0450  1C03               	skipc
  4473  0451  2C5B               	goto	l2653
  4474  0452  082B               	movf	___lldiv@divisor,w
  4475  0453  02AF               	subwf	___lldiv@dividend,f
  4476  0454  082C               	movf	___lldiv@divisor+1,w
  4477  0455  3BB0               	subwfb	___lldiv@dividend+1,f
  4478  0456  082D               	movf	___lldiv@divisor+2,w
  4479  0457  3BB1               	subwfb	___lldiv@dividend+2,f
  4480  0458  082E               	movf	___lldiv@divisor+3,w
  4481  0459  3BB2               	subwfb	___lldiv@dividend+3,f
  4482  045A  1434               	bsf	___lldiv@quotient,0
  4483  045B                     l2653:	
  4484  045B  3001               	movlw	1
  4485  045C                     u1885:	
  4486  045C  36AE               	lsrf	___lldiv@divisor+3,f
  4487  045D  0CAD               	rrf	___lldiv@divisor+2,f
  4488  045E  0CAC               	rrf	___lldiv@divisor+1,f
  4489  045F  0CAB               	rrf	___lldiv@divisor,f
  4490  0460  0B89               	decfsz	9,f
  4491  0461  2C5C               	goto	u1885
  4492  0462  3001               	movlw	1
  4493  0463  02B8               	subwf	___lldiv@counter,f
  4494  0464  1D03               	btfss	3,2
  4495  0465  2C3B               	goto	l2645
  4496  0466                     l2657:	
  4497  0466  0837               	movf	___lldiv@quotient+3,w
  4498  0467  00AE               	movwf	?___lldiv+3
  4499  0468  0836               	movf	___lldiv@quotient+2,w
  4500  0469  00AD               	movwf	?___lldiv+2
  4501  046A  0835               	movf	___lldiv@quotient+1,w
  4502  046B  00AC               	movwf	?___lldiv+1
  4503  046C  0834               	movf	___lldiv@quotient,w
  4504  046D  00AB               	movwf	?___lldiv
  4505  046E  0008               	return
  4506  046F                     __end_of___lldiv:	
  4507                           
  4508                           	psect	intentry
  4509  0004                     __pintentry:	
  4510 ;; *************** function _ISR *****************
  4511 ;; Defined at:
  4512 ;;		line 31 in file "main.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;		None
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;  result          2    9[BANK0 ] int 
  4517 ;; Return value:  Size  Location     Type
  4518 ;;                  1    wreg      void 
  4519 ;; Registers used:
  4520 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4521 ;; Tracked objects:
  4522 ;;		On entry : 0/0
  4523 ;;		On exit  : 0/0
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMMON   BANK0   BANK1
  4526 ;;      Params:         0       0       0
  4527 ;;      Locals:         0       2       0
  4528 ;;      Temps:          0       4       0
  4529 ;;      Totals:         0       6       0
  4530 ;;Total ram usage:        6 bytes
  4531 ;; Hardware stack levels used:    1
  4532 ;; Hardware stack levels required when called:    5
  4533 ;; This function calls:
  4534 ;;		_nrf24l01ISR
  4535 ;; This function is called by:
  4536 ;;		Interrupt level 1
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540  0004                     _ISR:	
  4541                           
  4542                           ;incstack = 0
  4543  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4544                           
  4545                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4546  0005  3180               	pagesel	$
  4547  0006  0020               	movlb	0	; select bank0
  4548  0007  087F               	movf	127,w
  4549  0008  00A8               	movwf	??_ISR+3
  4550                           
  4551                           ;main.c: 32: if (PIR1bits.ADIF){
  4552  0009  1F11               	btfss	17,6	;volatile
  4553  000A  283B               	goto	i1l2861
  4554                           
  4555                           ;main.c: 34: if (mode == 2) {
  4556  000B  3002               	movlw	2
  4557  000C  0663               	xorwf	_mode,w
  4558  000D  1D03               	btfss	3,2
  4559  000E  283A               	goto	i1l2859
  4560                           
  4561                           ;main.c: 36: int result = 0x00;
  4562  000F  01A9               	clrf	ISR@result
  4563  0010  01AA               	clrf	ISR@result+1
  4564                           
  4565                           ;main.c: 37: result = ADRESL;
  4566  0011  0021               	movlb	1	; select bank1
  4567  0012  081B               	movf	27,w	;volatile
  4568  0013  0020               	movlb	0	; select bank0
  4569  0014  00A5               	movwf	??_ISR
  4570  0015  01A6               	clrf	??_ISR+1
  4571  0016  0825               	movf	??_ISR,w
  4572  0017  00A9               	movwf	ISR@result
  4573  0018  0826               	movf	??_ISR+1,w
  4574  0019  00AA               	movwf	ISR@result+1
  4575                           
  4576                           ;main.c: 38: result|= (ADRESH << 8);
  4577  001A  0021               	movlb	1	; select bank1
  4578  001B  081C               	movf	28,w	;volatile
  4579  001C  0020               	movlb	0	; select bank0
  4580  001D  00A5               	movwf	??_ISR
  4581  001E  01A6               	clrf	??_ISR+1
  4582  001F  0825               	movf	??_ISR,w
  4583  0020  00A6               	movwf	??_ISR+1
  4584  0021  01A5               	clrf	??_ISR
  4585  0022  0825               	movf	??_ISR,w
  4586  0023  04A9               	iorwf	ISR@result,f
  4587  0024  0826               	movf	??_ISR+1,w
  4588  0025  04AA               	iorwf	ISR@result+1,f
  4589                           
  4590                           ;main.c: 40: adcSum+= (unsigned) result;
  4591  0026  0829               	movf	ISR@result,w
  4592  0027  07C8               	addwf	_adcSum,f
  4593  0028  082A               	movf	ISR@result+1,w
  4594  0029  3DC9               	addwfc	_adcSum+1,f
  4595  002A  3000               	movlw	0
  4596  002B  3DCA               	addwfc	_adcSum+2,f
  4597  002C  3DCB               	addwfc	_adcSum+3,f
  4598                           
  4599                           ;main.c: 42: if (!adcLoop){
  4600  002D  0852               	movf	_adcLoop,w
  4601  002E  1D03               	btfss	3,2
  4602  002F  2835               	goto	i1l156
  4603                           
  4604                           ;main.c: 43: mode = 3;
  4605  0030  3003               	movlw	3
  4606  0031  00A5               	movwf	??_ISR
  4607  0032  0825               	movf	??_ISR,w
  4608  0033  00E3               	movwf	_mode
  4609                           
  4610                           ;main.c: 44: }else{
  4611  0034  2837               	goto	i1l2857
  4612  0035                     i1l156:	
  4613                           
  4614                           ;main.c: 46: ADCON0bits.ADGO = 1;
  4615  0035  0021               	movlb	1	; select bank1
  4616  0036  149D               	bsf	29,1	;volatile
  4617  0037                     i1l2857:	
  4618                           
  4619                           ;main.c: 47: }
  4620                           ;main.c: 49: adcLoop--;
  4621  0037  3001               	movlw	1
  4622  0038  0020               	movlb	0	; select bank0
  4623  0039  02D2               	subwf	_adcLoop,f
  4624  003A                     i1l2859:	
  4625                           
  4626                           ;main.c: 50: }
  4627                           ;main.c: 53: PIR1bits.ADIF = 0;
  4628  003A  1311               	bcf	17,6	;volatile
  4629  003B                     i1l2861:	
  4630                           
  4631                           ;main.c: 54: }
  4632                           ;main.c: 56: if (INTCONbits.INTF){
  4633  003B  1C8B               	btfss	11,1	;volatile
  4634  003C  283F               	goto	i1l159
  4635                           
  4636                           ;main.c: 57: nrf24l01ISR();
  4637  003D  25D1               	fcall	_nrf24l01ISR
  4638                           
  4639                           ;main.c: 58: INTCONbits.INTF = 0;
  4640  003E  108B               	bcf	11,1	;volatile
  4641  003F                     i1l159:	
  4642  003F  0020               	movlb	0	; select bank0
  4643  0040  0828               	movf	??_ISR+3,w
  4644  0041  00FF               	movwf	127
  4645  0042  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4646  0043  0009               	retfie
  4647  0044                     __end_of_ISR:	
  4648                           
  4649                           	psect	text20
  4650  05D1                     __ptext20:	
  4651 ;; *************** function _nrf24l01ISR *****************
  4652 ;; Defined at:
  4653 ;;		line 97 in file "nrf24l01.c"
  4654 ;; Parameters:    Size  Location     Type
  4655 ;;		None
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;  tempStatus      1    4[BANK0 ] struct .
  4658 ;; Return value:  Size  Location     Type
  4659 ;;                  1    wreg      void 
  4660 ;; Registers used:
  4661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMMON   BANK0   BANK1
  4667 ;;      Params:         0       0       0
  4668 ;;      Locals:         0       1       0
  4669 ;;      Temps:          1       0       0
  4670 ;;      Totals:         1       1       0
  4671 ;;Total ram usage:        2 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:    4
  4674 ;; This function calls:
  4675 ;;		_nrf24l01CheckACK
  4676 ;;		_nrf24l01HandleRX
  4677 ;;		_nrf24l01Send
  4678 ;; This function is called by:
  4679 ;;		_ISR
  4680 ;; This function uses a non-reentrant model
  4681 ;;
  4682                           
  4683                           
  4684                           ;psect for function _nrf24l01ISR
  4685  05D1                     _nrf24l01ISR:	
  4686                           
  4687                           ;nrf24l01.c: 99: n_STATUS_t tempStatus;
  4688                           ;nrf24l01.c: 100: nrf24l01.status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  4689                           
  4690                           ;incstack = 0
  4691                           ; Regs used in _nrf24l01ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4692  05D1  0020               	movlb	0	; select bank0
  4693  05D2  01A0               	clrf	nrf24l01Send@data
  4694  05D3  3007               	movlw	7
  4695  05D4  275C               	fcall	_nrf24l01Send
  4696  05D5  00FD               	movwf	??_nrf24l01ISR
  4697  05D6  087D               	movf	??_nrf24l01ISR,w
  4698  05D7  0020               	movlb	0	; select bank0
  4699  05D8  00CC               	movwf	_nrf24l01	;volatile
  4700                           
  4701                           ;nrf24l01.c: 103: if (nrf24l01.status.byte == 0x00){
  4702  05D9  084C               	movf	_nrf24l01,w	;volatile
  4703  05DA  1903               	btfsc	3,2
  4704  05DB  0001               	reset	;# 
  4705                           
  4706                           ;nrf24l01.c: 105: }
  4707                           ;nrf24l01.c: 108: if (nrf24l01.status.byte == 0xFF){
  4708  05DC  0020               	movlb	0	; select bank0
  4709  05DD  0A4C               	incf	_nrf24l01,w	;volatile
  4710  05DE  1903               	btfsc	3,2
  4711  05DF  0001               	reset	;# 
  4712                           
  4713                           ;nrf24l01.c: 110: }
  4714                           ;nrf24l01.c: 113: if (nrf24l01.status.RX_DR){
  4715  05E0  0020               	movlb	0	; select bank0
  4716  05E1  1F4C               	btfss	_nrf24l01,6	;volatile
  4717  05E2  2DEE               	goto	i1l2741
  4718                           
  4719                           ;nrf24l01.c: 115: nrf24l01.waitForTXACK = 0;
  4720  05E3  104D               	bcf	_nrf24l01+1,0	;volatile
  4721                           
  4722                           ;nrf24l01.c: 118: tempStatus.byte = 0x00;
  4723  05E4  01A4               	clrf	nrf24l01ISR@tempStatus
  4724                           
  4725                           ;nrf24l01.c: 119: tempStatus.RX_DR = 1;
  4726  05E5  1724               	bsf	nrf24l01ISR@tempStatus,6
  4727                           
  4728                           ;nrf24l01.c: 120: nrf24l01Send(0b00100000 | 0x07, tempStatus.byte);
  4729  05E6  0824               	movf	nrf24l01ISR@tempStatus,w
  4730  05E7  00FD               	movwf	??_nrf24l01ISR
  4731  05E8  087D               	movf	??_nrf24l01ISR,w
  4732  05E9  00A0               	movwf	nrf24l01Send@data
  4733  05EA  3027               	movlw	39
  4734  05EB  275C               	fcall	_nrf24l01Send
  4735                           
  4736                           ;nrf24l01.c: 123: nrf24l01HandleRX();
  4737  05EC  246F               	fcall	_nrf24l01HandleRX
  4738                           
  4739                           ;nrf24l01.c: 126: nrf24l01CheckACK();
  4740  05ED  27C4               	fcall	_nrf24l01CheckACK
  4741  05EE                     i1l2741:	
  4742                           
  4743                           ;nrf24l01.c: 127: }
  4744                           ;nrf24l01.c: 131: if (nrf24l01.status.TX_DS){
  4745  05EE  0020               	movlb	0	; select bank0
  4746  05EF  1ECC               	btfss	_nrf24l01,5	;volatile
  4747  05F0  0008               	return
  4748                           
  4749                           ;nrf24l01.c: 134: tempStatus.byte = 0x00;
  4750  05F1  01A4               	clrf	nrf24l01ISR@tempStatus
  4751                           
  4752                           ;nrf24l01.c: 135: tempStatus.TX_DS = 1;
  4753  05F2  16A4               	bsf	nrf24l01ISR@tempStatus,5
  4754                           
  4755                           ;nrf24l01.c: 136: nrf24l01Send(0b00100000 | 0x07, tempStatus.byte);
  4756  05F3  0824               	movf	nrf24l01ISR@tempStatus,w
  4757  05F4  00FD               	movwf	??_nrf24l01ISR
  4758  05F5  087D               	movf	??_nrf24l01ISR,w
  4759  05F6  00A0               	movwf	nrf24l01Send@data
  4760  05F7  3027               	movlw	39
  4761  05F8  275C               	fcall	_nrf24l01Send
  4762                           
  4763                           ;nrf24l01.c: 139: nrf24l01.TXBusy = 0;
  4764  05F9  0020               	movlb	0	; select bank0
  4765  05FA  12CD               	bcf	_nrf24l01+1,5	;volatile
  4766                           
  4767                           ;nrf24l01.c: 142: if (nrf24l01.RXMode == 0){
  4768  05FB  1ACE               	btfsc	_nrf24l01+2,5	;volatile
  4769  05FC  0008               	return
  4770                           
  4771                           ;nrf24l01.c: 145: counter++;
  4772  05FD  3001               	movlw	1
  4773  05FE  07CF               	addwf	_counter,f
  4774  05FF  3000               	movlw	0
  4775  0600  3DD0               	addwfc	_counter+1,f
  4776  0601  0008               	return
  4777  0602                     __end_of_nrf24l01ISR:	
  4778                           
  4779                           	psect	text21
  4780  046F                     __ptext21:	
  4781 ;; *************** function _nrf24l01HandleRX *****************
  4782 ;; Defined at:
  4783 ;;		line 50 in file "nrf24l01.c"
  4784 ;; Parameters:    Size  Location     Type
  4785 ;;		None
  4786 ;; Auto vars:     Size  Location     Type
  4787 ;;  i               1    3[BANK0 ] unsigned char 
  4788 ;;  byte            1    2[BANK0 ] unsigned char 
  4789 ;;  width           1    1[BANK0 ] unsigned char 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1    wreg      void 
  4792 ;; Registers used:
  4793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMMON   BANK0   BANK1
  4799 ;;      Params:         0       0       0
  4800 ;;      Locals:         0       3       0
  4801 ;;      Temps:          4       0       0
  4802 ;;      Totals:         4       3       0
  4803 ;;Total ram usage:        7 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    2
  4806 ;; This function calls:
  4807 ;;		_nrf24l01SPISend
  4808 ;;		_nrf24l01Send
  4809 ;;		i1_read_flashmem
  4810 ;;		i1_strlen
  4811 ;; This function is called by:
  4812 ;;		_nrf24l01ISR
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           
  4817                           ;psect for function _nrf24l01HandleRX
  4818  046F                     _nrf24l01HandleRX:	
  4819                           
  4820                           ;nrf24l01.c: 53: unsigned char byte;
  4821                           ;nrf24l01.c: 54: unsigned char i;
  4822                           ;nrf24l01.c: 56: unsigned char width = nrf24l01Send(0b01100000, 0);
  4823                           
  4824                           ;incstack = 0
  4825                           ; Regs used in _nrf24l01HandleRX: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4826  046F  0020               	movlb	0	; select bank0
  4827  0470  01A0               	clrf	nrf24l01Send@data
  4828  0471  3060               	movlw	96
  4829  0472  275C               	fcall	_nrf24l01Send
  4830  0473  00F9               	movwf	??_nrf24l01HandleRX
  4831  0474  0879               	movf	??_nrf24l01HandleRX,w
  4832  0475  0020               	movlb	0	; select bank0
  4833  0476  00A1               	movwf	nrf24l01HandleRX@width
  4834                           
  4835                           ;nrf24l01.c: 58: i = 0;
  4836  0477  01A3               	clrf	nrf24l01HandleRX@i
  4837  0478                     i1l2525:	
  4838                           ;nrf24l01.c: 59: while (i < width){
  4839                           
  4840  0478  0821               	movf	nrf24l01HandleRX@width,w
  4841  0479  0223               	subwf	nrf24l01HandleRX@i,w
  4842  047A  1803               	btfsc	3,0
  4843  047B  2CB6               	goto	i1l2533
  4844                           
  4845                           ;nrf24l01.c: 60: byte = nrf24l01SPISend(0);
  4846  047C  3000               	movlw	0
  4847  047D  278F               	fcall	_nrf24l01SPISend
  4848  047E  00F9               	movwf	??_nrf24l01HandleRX
  4849  047F  0879               	movf	??_nrf24l01HandleRX,w
  4850  0480  0020               	movlb	0	; select bank0
  4851  0481  00A2               	movwf	nrf24l01HandleRX@byte
  4852                           
  4853                           ;nrf24l01.c: 62: if (byte == '/'){
  4854  0482  302F               	movlw	47
  4855  0483  0622               	xorwf	nrf24l01HandleRX@byte,w
  4856  0484  1903               	btfsc	3,2
  4857  0485  2CB6               	goto	i1l2533
  4858                           
  4859                           ;nrf24l01.c: 64: }
  4860                           ;nrf24l01.c: 66: if (byte != read_flashmem( (unsigned) 0 + i)){
  4861                           
  4862                           ;nrf24l01.c: 63: break;
  4863  0486  0823               	movf	nrf24l01HandleRX@i,w
  4864  0487  00F9               	movwf	??_nrf24l01HandleRX
  4865  0488  01FA               	clrf	??_nrf24l01HandleRX+1
  4866  0489  0879               	movf	??_nrf24l01HandleRX,w
  4867  048A  00F0               	movwf	i1read_flashmem@offset
  4868  048B  087A               	movf	??_nrf24l01HandleRX+1,w
  4869  048C  00F1               	movwf	i1read_flashmem@offset+1
  4870  048D  268D               	fcall	i1_read_flashmem
  4871  048E  0020               	movlb	0	; select bank0
  4872  048F  0822               	movf	nrf24l01HandleRX@byte,w
  4873  0490  00FB               	movwf	??_nrf24l01HandleRX+2
  4874  0491  01FC               	clrf	??_nrf24l01HandleRX+3
  4875  0492  0871               	movf	?i1_read_flashmem+1,w
  4876  0493  067C               	xorwf	??_nrf24l01HandleRX+3,w
  4877  0494  1D03               	skipz
  4878  0495  2C98               	goto	u176_25
  4879  0496  0870               	movf	?i1_read_flashmem,w
  4880  0497  067B               	xorwf	??_nrf24l01HandleRX+2,w
  4881  0498                     u176_25:	
  4882  0498  1903               	skipnz
  4883  0499  2C9C               	goto	i1l2523
  4884                           
  4885                           ;nrf24l01.c: 67: nrf24l01.RXPending = 0;
  4886  049A  124E               	bcf	_nrf24l01+2,4	;volatile
  4887                           
  4888                           ;nrf24l01.c: 68: return;
  4889  049B  0008               	return
  4890  049C                     i1l2523:	
  4891                           
  4892                           ;nrf24l01.c: 69: }
  4893                           ;nrf24l01.c: 71: i++;
  4894  049C  3001               	movlw	1
  4895  049D  00F9               	movwf	??_nrf24l01HandleRX
  4896  049E  0879               	movf	??_nrf24l01HandleRX,w
  4897  049F  07A3               	addwf	nrf24l01HandleRX@i,f
  4898  04A0  2C78               	goto	i1l2525
  4899  04A1                     i1l2527:	
  4900                           ;nrf24l01.c: 72: }
  4901                           ;nrf24l01.c: 74: while (i < width){
  4902                           
  4903                           
  4904                           ;nrf24l01.c: 75: byte = nrf24l01SPISend(0);
  4905  04A1  3000               	movlw	0
  4906  04A2  278F               	fcall	_nrf24l01SPISend
  4907  04A3  00F9               	movwf	??_nrf24l01HandleRX
  4908  04A4  0879               	movf	??_nrf24l01HandleRX,w
  4909  04A5  0020               	movlb	0	; select bank0
  4910  04A6  00A2               	movwf	nrf24l01HandleRX@byte
  4911                           
  4912                           ;nrf24l01.c: 76: string[strlen(string)] = byte;
  4913  04A7  0822               	movf	nrf24l01HandleRX@byte,w
  4914  04A8  00F9               	movwf	??_nrf24l01HandleRX
  4915  04A9  3053               	movlw	(low (_string| 0))& (0+255)
  4916  04AA  26DC               	fcall	i1_strlen
  4917  04AB  0870               	movf	?i1_strlen,w
  4918  04AC  3E53               	addlw	(low (_string| 0))& (0+255)
  4919  04AD  0086               	movwf	6
  4920  04AE  0187               	clrf	7
  4921  04AF  0879               	movf	??_nrf24l01HandleRX,w
  4922  04B0  0081               	movwf	1
  4923                           
  4924                           ;nrf24l01.c: 77: i++;
  4925  04B1  3001               	movlw	1
  4926  04B2  00F9               	movwf	??_nrf24l01HandleRX
  4927  04B3  0879               	movf	??_nrf24l01HandleRX,w
  4928  04B4  0020               	movlb	0	; select bank0
  4929  04B5  07A3               	addwf	nrf24l01HandleRX@i,f
  4930  04B6                     i1l2533:	
  4931  04B6  0821               	movf	nrf24l01HandleRX@width,w
  4932  04B7  0223               	subwf	nrf24l01HandleRX@i,w
  4933  04B8  1C03               	skipc
  4934  04B9  2CA1               	goto	i1l2527
  4935                           
  4936                           ;nrf24l01.c: 78: }
  4937                           ;nrf24l01.c: 80: nrf24l01.RXPending = 1;
  4938  04BA  164E               	bsf	_nrf24l01+2,4	;volatile
  4939  04BB  0008               	return
  4940  04BC                     __end_of_nrf24l01HandleRX:	
  4941                           
  4942                           	psect	text22
  4943  06DC                     __ptext22:	
  4944 ;; *************** function i1_strlen *****************
  4945 ;; Defined at:
  4946 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;  s               1    wreg     PTR const unsigned char 
  4949 ;;		 -> string(16), 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;  s               1    6[COMMON] PTR const unsigned char 
  4952 ;;		 -> string(16), 
  4953 ;;  strlen          1    7[COMMON] PTR const unsigned char 
  4954 ;;		 -> string(16), 
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  2    0[COMMON] unsigned int 
  4957 ;; Registers used:
  4958 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMMON   BANK0   BANK1
  4964 ;;      Params:         2       0       0
  4965 ;;      Locals:         2       0       0
  4966 ;;      Temps:          4       0       0
  4967 ;;      Totals:         8       0       0
  4968 ;;Total ram usage:        8 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; This function calls:
  4971 ;;		Nothing
  4972 ;; This function is called by:
  4973 ;;		_nrf24l01HandleRX
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           
  4978                           ;psect for function i1_strlen
  4979  06DC                     i1_strlen:	
  4980                           
  4981                           ;incstack = 0
  4982                           ; Regs used in i1_strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  4983                           ;i1strlen@s stored from wreg
  4984  06DC  00F6               	movwf	i1strlen@s
  4985  06DD  0876               	movf	i1strlen@s,w
  4986  06DE  00F2               	movwf	??i1_strlen
  4987  06DF  0872               	movf	??i1_strlen,w
  4988  06E0  00F7               	movwf	i1strlen@cp
  4989  06E1                     i1l1679:	
  4990  06E1  0877               	movf	i1strlen@cp,w
  4991  06E2  0086               	movwf	6
  4992  06E3  0187               	clrf	7
  4993  06E4  0801               	movf	1,w
  4994  06E5  1903               	btfsc	3,2
  4995  06E6  2EEC               	goto	i1l1681
  4996  06E7  3001               	movlw	1
  4997  06E8  00F2               	movwf	??i1_strlen
  4998  06E9  0872               	movf	??i1_strlen,w
  4999  06EA  07F7               	addwf	i1strlen@cp,f
  5000  06EB  2EE1               	goto	i1l1679
  5001  06EC                     i1l1681:	
  5002  06EC  0876               	movf	i1strlen@s,w
  5003  06ED  00F2               	movwf	??i1_strlen
  5004  06EE  3000               	movlw	0
  5005  06EF  00F3               	movwf	??i1_strlen+1
  5006  06F0  09F2               	comf	??i1_strlen,f
  5007  06F1  09F3               	comf	??i1_strlen+1,f
  5008  06F2  0AF2               	incf	??i1_strlen,f
  5009  06F3  1903               	skipnz
  5010  06F4  0AF3               	incf	??i1_strlen+1,f
  5011  06F5  0877               	movf	i1strlen@cp,w
  5012  06F6  00F4               	movwf	??i1_strlen+2
  5013  06F7  3000               	movlw	0
  5014  06F8  00F5               	movwf	??i1_strlen+3
  5015  06F9  0872               	movf	??i1_strlen,w
  5016  06FA  0774               	addwf	??i1_strlen+2,w
  5017  06FB  00F0               	movwf	?i1_strlen
  5018  06FC  0873               	movf	??i1_strlen+1,w
  5019  06FD  3D75               	addwfc	??i1_strlen+3,w
  5020  06FE  00F1               	movwf	?i1_strlen+1
  5021  06FF  0008               	return
  5022  0700                     __end_ofi1_strlen:	
  5023                           
  5024                           	psect	text23
  5025  068D                     __ptext23:	
  5026 ;; *************** function i1_read_flashmem *****************
  5027 ;; Defined at:
  5028 ;;		line 59 in file "flash.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  offset          2    0[COMMON] unsigned int 
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  read_flashme    2    7[COMMON] unsigned int 
  5033 ;;  read_flashme    2    5[COMMON] unsigned int 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  2    0[COMMON] unsigned int 
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, status,0
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMMON   BANK0   BANK1
  5043 ;;      Params:         2       0       0
  5044 ;;      Locals:         4       0       0
  5045 ;;      Temps:          3       0       0
  5046 ;;      Totals:         9       0       0
  5047 ;;Total ram usage:        9 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; This function calls:
  5050 ;;		Nothing
  5051 ;; This function is called by:
  5052 ;;		_nrf24l01HandleRX
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           
  5057                           ;psect for function i1_read_flashmem
  5058  068D                     i1_read_flashmem:	
  5059                           
  5060                           ;flash.c: 61: unsigned int address;
  5061                           ;flash.c: 63: INTCONbits.GIE = 0;
  5062                           
  5063                           ;incstack = 0
  5064                           ; Regs used in i1_read_flashmem: [wreg+status,2+status,0]
  5065  068D  138B               	bcf	11,7	;volatile
  5066                           
  5067                           ;flash.c: 65: PMCON1 = 0x00;
  5068  068E  0023               	movlb	3	; select bank3
  5069  068F  0195               	clrf	21	;volatile
  5070                           
  5071                           ;flash.c: 67: address = (0x800U-32) + offset;
  5072  0690  0870               	movf	i1read_flashmem@offset,w
  5073  0691  3EE0               	addlw	224
  5074  0692  00F7               	movwf	i1read_flashmem@address
  5075  0693  3007               	movlw	7
  5076  0694  3D71               	addwfc	i1read_flashmem@offset+1,w
  5077  0695  00F8               	movwf	i1read_flashmem@address+1
  5078                           
  5079                           ;flash.c: 68: PMADRL = (char) (address >> 0);
  5080  0696  0877               	movf	i1read_flashmem@address,w
  5081  0697  0091               	movwf	17	;volatile
  5082                           
  5083                           ;flash.c: 69: PMADRH = (char) (address >> 8);
  5084  0698  0878               	movf	i1read_flashmem@address+1,w
  5085  0699  0092               	movwf	18	;volatile
  5086                           
  5087                           ;flash.c: 71: PMCON1bits.RD = 1;
  5088  069A  1415               	bsf	21,0	;volatile
  5089                           
  5090                           ;flash.c: 73: __nop();
  5091  069B  0000               	nop
  5092                           
  5093                           ;flash.c: 74: __nop();
  5094  069C  0000               	nop
  5095                           
  5096                           ;flash.c: 76: unsigned int result = 0;
  5097  069D  01F5               	clrf	i1read_flashmem@result
  5098  069E  01F6               	clrf	i1read_flashmem@result+1
  5099                           
  5100                           ;flash.c: 77: result = PMDATL;
  5101  069F  0023               	movlb	3	; select bank3
  5102  06A0  0813               	movf	19,w	;volatile
  5103  06A1  00F2               	movwf	??i1_read_flashmem
  5104  06A2  01F3               	clrf	??i1_read_flashmem+1
  5105  06A3  0872               	movf	??i1_read_flashmem,w
  5106  06A4  00F5               	movwf	i1read_flashmem@result
  5107  06A5  0873               	movf	??i1_read_flashmem+1,w
  5108  06A6  00F6               	movwf	i1read_flashmem@result+1
  5109                           
  5110                           ;flash.c: 78: result|= ( (unsigned) (PMDATH) << 8);
  5111  06A7  0814               	movf	20,w	;volatile
  5112  06A8  00F2               	movwf	??i1_read_flashmem
  5113  06A9  01F3               	clrf	??i1_read_flashmem+1
  5114  06AA  0872               	movf	??i1_read_flashmem,w
  5115  06AB  00F3               	movwf	??i1_read_flashmem+1
  5116  06AC  01F2               	clrf	??i1_read_flashmem
  5117  06AD  0872               	movf	??i1_read_flashmem,w
  5118  06AE  04F5               	iorwf	i1read_flashmem@result,f
  5119  06AF  0873               	movf	??i1_read_flashmem+1,w
  5120  06B0  04F6               	iorwf	i1read_flashmem@result+1,f
  5121                           
  5122                           ;flash.c: 80: INTCONbits.GIE = 1;
  5123  06B1  178B               	bsf	11,7	;volatile
  5124                           
  5125                           ;flash.c: 82: return result;
  5126  06B2  0876               	movf	i1read_flashmem@result+1,w
  5127  06B3  00F1               	movwf	?i1_read_flashmem+1
  5128  06B4  0875               	movf	i1read_flashmem@result,w
  5129  06B5  00F0               	movwf	?i1_read_flashmem
  5130  06B6  0008               	return
  5131  06B7                     __end_ofi1_read_flashmem:	
  5132                           
  5133                           	psect	text24
  5134  07C4                     __ptext24:	
  5135 ;; *************** function _nrf24l01CheckACK *****************
  5136 ;; Defined at:
  5137 ;;		line 83 in file "nrf24l01.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;		None
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;		None
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      void 
  5144 ;; Registers used:
  5145 ;;		wreg, status,2, status,0, pclath, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMMON   BANK0   BANK1
  5151 ;;      Params:         0       0       0
  5152 ;;      Locals:         0       0       0
  5153 ;;      Temps:          0       0       0
  5154 ;;      Totals:         0       0       0
  5155 ;;Total ram usage:        0 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    3
  5158 ;; This function calls:
  5159 ;;		i1_nrf24l01SetRXMode
  5160 ;; This function is called by:
  5161 ;;		_nrf24l01ISR
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           
  5166                           ;psect for function _nrf24l01CheckACK
  5167  07C4                     _nrf24l01CheckACK:	
  5168                           
  5169                           ;nrf24l01.c: 92: nrf24l01.waitForTXACK = 0;
  5170                           
  5171                           ;incstack = 0
  5172                           ; Regs used in _nrf24l01CheckACK: [wreg+status,2+status,0+pclath+cstack]
  5173  07C4  0020               	movlb	0	; select bank0
  5174  07C5  104D               	bcf	_nrf24l01+1,0	;volatile
  5175                           
  5176                           ;nrf24l01.c: 93: nrf24l01.RXPending = 0;
  5177  07C6  124E               	bcf	_nrf24l01+2,4	;volatile
  5178                           
  5179                           ;nrf24l01.c: 94: nrf24l01SetRXMode(0);
  5180  07C7  3000               	movlw	0
  5181  07C8  2531               	fcall	i1_nrf24l01SetRXMode
  5182  07C9  0008               	return
  5183  07CA                     __end_of_nrf24l01CheckACK:	
  5184                           
  5185                           	psect	text25
  5186  0531                     __ptext25:	
  5187 ;; *************** function i1_nrf24l01SetRXMode *****************
  5188 ;; Defined at:
  5189 ;;		line 27 in file "nrf24l01.c"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;  rxMode          1    wreg     unsigned char 
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;  rxMode          1    4[COMMON] unsigned char 
  5194 ;;  nrf24l01SetR    1    5[COMMON] struct .
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  1    wreg      void 
  5197 ;; Registers used:
  5198 ;;		wreg, status,2, status,0, pclath, cstack
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMMON   BANK0   BANK1
  5204 ;;      Params:         0       0       0
  5205 ;;      Locals:         2       0       0
  5206 ;;      Temps:          1       0       0
  5207 ;;      Totals:         3       0       0
  5208 ;;Total ram usage:        3 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    2
  5211 ;; This function calls:
  5212 ;;		_nrf24l01Send
  5213 ;; This function is called by:
  5214 ;;		_nrf24l01CheckACK
  5215 ;; This function uses a non-reentrant model
  5216 ;;
  5217                           
  5218                           
  5219                           ;psect for function i1_nrf24l01SetRXMode
  5220  0531                     i1_nrf24l01SetRXMode:	
  5221                           
  5222                           ;incstack = 0
  5223                           ; Regs used in i1_nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  5224                           ;i1nrf24l01SetRXMode@rxMode stored from wreg
  5225  0531  00F4               	movwf	i1nrf24l01SetRXMode@rxMode
  5226                           
  5227                           ;nrf24l01.c: 28: n_CONFIG_t config;
  5228                           ;nrf24l01.c: 29: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  5229  0532  0020               	movlb	0	; select bank0
  5230  0533  01A0               	clrf	nrf24l01Send@data
  5231  0534  3000               	movlw	0
  5232  0535  275C               	fcall	_nrf24l01Send
  5233  0536  00F3               	movwf	??i1_nrf24l01SetRXMode
  5234  0537  0873               	movf	??i1_nrf24l01SetRXMode,w
  5235  0538  00F5               	movwf	i1nrf24l01SetRXMode@config
  5236                           
  5237                           ;nrf24l01.c: 31: nrf24l01.RXMode = rxMode;
  5238  0539  0C74               	rrf	i1nrf24l01SetRXMode@rxMode,w
  5239  053A  0020               	movlb	0	; select bank0
  5240  053B  1C03               	skipc
  5241  053C  12CE               	bcf	_nrf24l01+2,5	;volatile
  5242  053D  1803               	skipnc
  5243  053E  16CE               	bsf	_nrf24l01+2,5	;volatile
  5244                           
  5245                           ;nrf24l01.c: 33: if (config.PRIM_RX != nrf24l01.RXMode){
  5246  053F  1ECE               	btfss	_nrf24l01+2,5	;volatile
  5247  0540  2D43               	goto	u160_20
  5248  0541  3001               	movlw	1
  5249  0542  2D44               	goto	u160_22
  5250  0543                     u160_20:	
  5251  0543  3000               	movlw	0
  5252  0544                     u160_22:	
  5253  0544  00F3               	movwf	??i1_nrf24l01SetRXMode
  5254  0545  1C75               	btfss	i1nrf24l01SetRXMode@config,0
  5255  0546  2D49               	goto	u161_20
  5256  0547  3001               	movlw	1
  5257  0548  2D4A               	goto	u161_22
  5258  0549                     u161_20:	
  5259  0549  3000               	movlw	0
  5260  054A                     u161_22:	
  5261  054A  0673               	xorwf	??i1_nrf24l01SetRXMode,w
  5262  054B  1903               	skipnz
  5263  054C  0008               	return
  5264                           
  5265                           ;nrf24l01.c: 35: PORTAbits.RA0 = 0;
  5266  054D  100C               	bcf	12,0	;volatile
  5267                           
  5268                           ;nrf24l01.c: 36: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5269  054E  30A0               	movlw	160
  5270  054F                     u219_27:	
  5271  054F  3200               	nop2
  5272  0550  0B89               	decfsz	9,f
  5273  0551  2D4F               	goto	u219_27
  5274                           
  5275                           ;nrf24l01.c: 38: config.PRIM_RX = nrf24l01.RXMode;
  5276  0552  1075               	bcf	i1nrf24l01SetRXMode@config,0
  5277  0553  0020               	movlb	0	; select bank0
  5278  0554  1ACE               	btfsc	_nrf24l01+2,5	;volatile
  5279  0555  1475               	bsf	i1nrf24l01SetRXMode@config,0
  5280                           
  5281                           ;nrf24l01.c: 39: nrf24l01Send(0b00100000 | 0x00, config.byte);
  5282  0556  0875               	movf	i1nrf24l01SetRXMode@config,w
  5283  0557  00F3               	movwf	??i1_nrf24l01SetRXMode
  5284  0558  0873               	movf	??i1_nrf24l01SetRXMode,w
  5285  0559  0020               	movlb	0	; select bank0
  5286  055A  00A0               	movwf	nrf24l01Send@data
  5287  055B  3020               	movlw	32
  5288  055C  275C               	fcall	_nrf24l01Send
  5289                           
  5290                           ;nrf24l01.c: 40: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5291  055D  30A0               	movlw	160
  5292  055E                     u220_27:	
  5293  055E  3200               	nop2
  5294  055F  0B89               	decfsz	9,f
  5295  0560  2D5E               	goto	u220_27
  5296                           
  5297                           ;nrf24l01.c: 42: if (nrf24l01.RXMode){
  5298  0561  0020               	movlb	0	; select bank0
  5299  0562  1ECE               	btfss	_nrf24l01+2,5	;volatile
  5300  0563  0008               	return
  5301                           
  5302                           ;nrf24l01.c: 43: PORTAbits.RA0 = 1;
  5303  0564  140C               	bsf	12,0	;volatile
  5304                           
  5305                           ;nrf24l01.c: 44: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5306  0565  30A0               	movlw	160
  5307  0566                     u221_27:	
  5308  0566  3200               	nop2
  5309  0567  0B89               	decfsz	9,f
  5310  0568  2D66               	goto	u221_27
  5311  0569  0008               	return
  5312  056A                     __end_ofi1_nrf24l01SetRXMode:	
  5313                           
  5314                           	psect	text26
  5315  075C                     __ptext26:	
  5316 ;; *************** function _nrf24l01Send *****************
  5317 ;; Defined at:
  5318 ;;		line 10 in file "nrf24l01.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;  command         1    wreg     unsigned char 
  5321 ;;  data            1    0[BANK0 ] unsigned char 
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;  command         1    2[COMMON] unsigned char 
  5324 ;; Return value:  Size  Location     Type
  5325 ;;                  1    wreg      unsigned char 
  5326 ;; Registers used:
  5327 ;;		wreg, status,2, status,0, pclath, cstack
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/0
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMMON   BANK0   BANK1
  5333 ;;      Params:         0       0       0
  5334 ;;      Locals:         0       0       0
  5335 ;;      Temps:          0       0       0
  5336 ;;      Totals:         0       0       0
  5337 ;;Total ram usage:        0 bytes
  5338 ;; Hardware stack levels used:    1
  5339 ;; Hardware stack levels required when called:    7
  5340 ;; This function calls:
  5341 ;;		_enableInterrupts
  5342 ;;		_nrf24l01SPIEnd
  5343 ;;		_nrf24l01SPISend
  5344 ;;		_nrf24l01SPIStart
  5345 ;; This function is called by:
  5346 ;;		_nrf24l01SetRXMode
  5347 ;;		_nrf24l01HandleRX
  5348 ;;		_nrf24l01ISR
  5349 ;;		_nrf24l01InitRegisters
  5350 ;;		_nrf24l01Init
  5351 ;;		i1_nrf24l01SetRXMode
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           
  5356                           ;psect for function _nrf24l01Send
  5357  075C                     _nrf24l01Send:	
  5358                           
  5359                           ;incstack = 0
  5360                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  5361                           ;nrf24l01Send@command stored from wreg
  5362  075C  00F2               	movwf	nrf24l01Send@command
  5363                           
  5364                           ;nrf24l01.c: 12: enableInterrupts(0);
  5365  075D  3000               	movlw	0
  5366  075E  27B7               	fcall	_enableInterrupts
  5367                           
  5368                           ;nrf24l01.c: 14: nrf24l01SPIStart();
  5369  075F  27A9               	fcall	_nrf24l01SPIStart
  5370                           
  5371                           ;nrf24l01.c: 16: nrf24l01SPISend(command);
  5372  0760  0872               	movf	nrf24l01Send@command,w
  5373  0761  278F               	fcall	_nrf24l01SPISend
  5374                           
  5375                           ;nrf24l01.c: 17: data = nrf24l01SPISend(data);
  5376  0762  0020               	movlb	0	; select bank0
  5377  0763  0820               	movf	nrf24l01Send@data,w
  5378  0764  278F               	fcall	_nrf24l01SPISend
  5379  0765  00F1               	movwf	??_nrf24l01Send
  5380  0766  0871               	movf	??_nrf24l01Send,w
  5381  0767  0020               	movlb	0	; select bank0
  5382  0768  00A0               	movwf	nrf24l01Send@data
  5383                           
  5384                           ;nrf24l01.c: 19: nrf24l01SPIEnd();
  5385  0769  27B0               	fcall	_nrf24l01SPIEnd
  5386                           
  5387                           ;nrf24l01.c: 21: enableInterrupts(1);
  5388  076A  3001               	movlw	1
  5389  076B  27B7               	fcall	_enableInterrupts
  5390                           
  5391                           ;nrf24l01.c: 23: return data;
  5392  076C  0020               	movlb	0	; select bank0
  5393  076D  0820               	movf	nrf24l01Send@data,w
  5394  076E  0008               	return
  5395  076F                     __end_of_nrf24l01Send:	
  5396                           
  5397                           	psect	text27
  5398  07A9                     __ptext27:	
  5399 ;; *************** function _nrf24l01SPIStart *****************
  5400 ;; Defined at:
  5401 ;;		line 39 in file "interface.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;		None
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;		None
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  1    wreg      void 
  5408 ;; Registers used:
  5409 ;;		wreg
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMMON   BANK0   BANK1
  5415 ;;      Params:         0       0       0
  5416 ;;      Locals:         0       0       0
  5417 ;;      Temps:          0       0       0
  5418 ;;      Totals:         0       0       0
  5419 ;;Total ram usage:        0 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    6
  5422 ;; This function calls:
  5423 ;;		Nothing
  5424 ;; This function is called by:
  5425 ;;		_nrf24l01Send
  5426 ;;		_nrf24l01SendString
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           
  5431                           ;psect for function _nrf24l01SPIStart
  5432  07A9                     _nrf24l01SPIStart:	
  5433                           
  5434                           ;interface.c: 40: PORTAbits.RA1 = 0;
  5435                           
  5436                           ;incstack = 0
  5437                           ; Regs used in _nrf24l01SPIStart: [wreg]
  5438  07A9  0020               	movlb	0	; select bank0
  5439  07AA  108C               	bcf	12,1	;volatile
  5440                           
  5441                           ;interface.c: 41: _delay((unsigned long)((10)*(16000000/4000000.0)));
  5442  07AB  300D               	movlw	13
  5443  07AC                     u222_27:	
  5444  07AC  0B89               	decfsz	9,f
  5445  07AD  2FAC               	goto	u222_27
  5446  07AE  0000               	nop
  5447  07AF  0008               	return
  5448  07B0                     __end_of_nrf24l01SPIStart:	
  5449                           
  5450                           	psect	text28
  5451  078F                     __ptext28:	
  5452 ;; *************** function _nrf24l01SPISend *****************
  5453 ;; Defined at:
  5454 ;;		line 28 in file "interface.c"
  5455 ;; Parameters:    Size  Location     Type
  5456 ;;  data            1    wreg     unsigned char 
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;  data            1    0[COMMON] unsigned char 
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  1    wreg      unsigned char 
  5461 ;; Registers used:
  5462 ;;		wreg
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMMON   BANK0   BANK1
  5468 ;;      Params:         0       0       0
  5469 ;;      Locals:         0       0       0
  5470 ;;      Temps:          0       0       0
  5471 ;;      Totals:         0       0       0
  5472 ;;Total ram usage:        0 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; Hardware stack levels required when called:    6
  5475 ;; This function calls:
  5476 ;;		Nothing
  5477 ;; This function is called by:
  5478 ;;		_nrf24l01Send
  5479 ;;		_nrf24l01HandleRX
  5480 ;;		_nrf24l01SendString
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           
  5485                           ;psect for function _nrf24l01SPISend
  5486  078F                     _nrf24l01SPISend:	
  5487                           
  5488                           ;incstack = 0
  5489                           ; Regs used in _nrf24l01SPISend: [wreg]
  5490                           ;nrf24l01SPISend@data stored from wreg
  5491  078F  00F0               	movwf	nrf24l01SPISend@data
  5492                           
  5493                           ;interface.c: 29: SSP1BUF = data;
  5494  0790  0870               	movf	nrf24l01SPISend@data,w
  5495  0791  0024               	movlb	4	; select bank4
  5496  0792  0091               	movwf	17	;volatile
  5497  0793                     i1l54:	
  5498                           ;interface.c: 31: while (!SSP1STATbits.BF){
  5499                           
  5500  0793  0024               	movlb	4	; select bank4
  5501  0794  1814               	btfsc	20,0	;volatile
  5502  0795  2F98               	goto	i1l2221
  5503                           
  5504                           ;interface.c: 32: __nop();
  5505  0796  0000               	nop
  5506  0797  2F93               	goto	i1l54
  5507  0798                     i1l2221:	
  5508                           
  5509                           ;interface.c: 33: }
  5510                           ;interface.c: 35: return SSP1BUF;
  5511  0798  0811               	movf	17,w	;volatile
  5512  0799  0008               	return
  5513  079A                     __end_of_nrf24l01SPISend:	
  5514                           
  5515                           	psect	text29
  5516  07B0                     __ptext29:	
  5517 ;; *************** function _nrf24l01SPIEnd *****************
  5518 ;; Defined at:
  5519 ;;		line 45 in file "interface.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;		None
  5522 ;; Auto vars:     Size  Location     Type
  5523 ;;		None
  5524 ;; Return value:  Size  Location     Type
  5525 ;;                  1    wreg      void 
  5526 ;; Registers used:
  5527 ;;		wreg
  5528 ;; Tracked objects:
  5529 ;;		On entry : 0/0
  5530 ;;		On exit  : 0/0
  5531 ;;		Unchanged: 0/0
  5532 ;; Data sizes:     COMMON   BANK0   BANK1
  5533 ;;      Params:         0       0       0
  5534 ;;      Locals:         0       0       0
  5535 ;;      Temps:          0       0       0
  5536 ;;      Totals:         0       0       0
  5537 ;;Total ram usage:        0 bytes
  5538 ;; Hardware stack levels used:    1
  5539 ;; Hardware stack levels required when called:    6
  5540 ;; This function calls:
  5541 ;;		Nothing
  5542 ;; This function is called by:
  5543 ;;		_nrf24l01Send
  5544 ;;		_nrf24l01SendString
  5545 ;; This function uses a non-reentrant model
  5546 ;;
  5547                           
  5548                           
  5549                           ;psect for function _nrf24l01SPIEnd
  5550  07B0                     _nrf24l01SPIEnd:	
  5551                           
  5552                           ;interface.c: 46: _delay((unsigned long)((10)*(16000000/4000000.0)));
  5553                           
  5554                           ;incstack = 0
  5555                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  5556  07B0  300D               	movlw	13
  5557  07B1                     u223_27:	
  5558  07B1  0B89               	decfsz	9,f
  5559  07B2  2FB1               	goto	u223_27
  5560  07B3  0000               	nop
  5561                           
  5562                           ;interface.c: 47: PORTAbits.RA1 = 1;
  5563  07B4  0020               	movlb	0	; select bank0
  5564  07B5  148C               	bsf	12,1	;volatile
  5565  07B6  0008               	return
  5566  07B7                     __end_of_nrf24l01SPIEnd:	
  5567                           
  5568                           	psect	text30
  5569  07B7                     __ptext30:	
  5570 ;; *************** function _enableInterrupts *****************
  5571 ;; Defined at:
  5572 ;;		line 51 in file "interface.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;  enable          1    wreg     unsigned char 
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;  enable          1    0[COMMON] unsigned char 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  1    wreg      void 
  5579 ;; Registers used:
  5580 ;;		wreg, status,0
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMMON   BANK0   BANK1
  5586 ;;      Params:         0       0       0
  5587 ;;      Locals:         0       0       0
  5588 ;;      Temps:          0       0       0
  5589 ;;      Totals:         0       0       0
  5590 ;;Total ram usage:        0 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    6
  5593 ;; This function calls:
  5594 ;;		Nothing
  5595 ;; This function is called by:
  5596 ;;		_nrf24l01Send
  5597 ;;		_nrf24l01SendString
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           
  5602                           ;psect for function _enableInterrupts
  5603  07B7                     _enableInterrupts:	
  5604                           
  5605                           ;incstack = 0
  5606                           ; Regs used in _enableInterrupts: [wreg+status,0]
  5607                           ;enableInterrupts@enable stored from wreg
  5608  07B7  00F0               	movwf	enableInterrupts@enable
  5609                           
  5610                           ;interface.c: 52: INTCONbits.INTE = enable;
  5611  07B8  0C70               	rrf	enableInterrupts@enable,w
  5612  07B9  1C03               	skipc
  5613  07BA  120B               	bcf	11,4	;volatile
  5614  07BB  1803               	skipnc
  5615  07BC  160B               	bsf	11,4	;volatile
  5616  07BD  0008               	return
  5617  07BE                     __end_of_enableInterrupts:	
  5618  007E                     btemp	set	126	;btemp
  5619  007E                     int$flags	set	126
  5620  007E                     wtemp0	set	126


Data Sizes:
    Strings     20
    Constant    6
    Data        2
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     40      69
    BANK1            32      8       8

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[2]), STR_3(CODE[5]), STR_2(CODE[8]), STR_1(CODE[7]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    nrf24l01SendString@string	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    _itoa@buffer	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01HandleRX
    _nrf24l01HandleRX->i1_read_flashmem
    _nrf24l01CheckACK->i1_nrf24l01SetRXMode

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _loop->__itoa
    _strcpy->_strlen
    _nrf24l01SendString->_read_flashmem
    __itoa->_itoa
    _itoa->_utoa
    _utoa->___lwdiv

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01HandleRX

Critical Paths under _main in BANK1

    _main->_loop
    _loop->__itoa

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   13214
                                              5 BANK1      3     3      0
                               _loop
                       _nrf24l01Init
                      _read_flashmem
                     _write_flashmem
 ---------------------------------------------------------------------------------
 (1) _write_flashmem                                       6     2      4     374
                                             11 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    3695
                                             18 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                7     7      0    2004
                                             11 BANK0      7     7      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 4     4      0    8665
                                              1 BANK1      4     4      0
                            ___lldiv
                             ___lmul
                              __itoa
                 _nrf24l01SendString
                      _read_flashmem
                           _startADC
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     328
                                             11 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               5     3      2     549
                                             19 BANK0      5     3      2
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _startADC                                             2     2      0      62
                                             11 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendString                                   7     6      1    2885
                                             20 BANK0      7     6      1
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                      _read_flashmem
 ---------------------------------------------------------------------------------
 (1) _read_flashmem                                        9     7      2     409
                                             11 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetRXMode                                    3     3      0    1790
                                             11 BANK0      3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1691
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      31
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _enableInterrupts                                     1     1      0      31
 ---------------------------------------------------------------------------------
 (2) __itoa                                                6     3      3    2823
                                             35 BANK0      5     2      3
                                              0 BANK1      1     1      0
                               _itoa
                      _read_flashmem (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 7     3      4    1982
                                             28 BANK0      7     3      4
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     5      4    1562
                                             19 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     386
                                             11 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     549
                                             11 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     598
                                             11 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8    1011
                                             11 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  6     6      0    5791
                                              5 BANK0      6     6      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          2     2      0    5751
                                             13 COMMON     1     1      0
                                              4 BANK0      1     1      0
                   _nrf24l01CheckACK
                   _nrf24l01HandleRX
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01HandleRX                                     7     7      0    2196
                                              9 COMMON     4     4      0
                                              1 BANK0      3     3      0
                    _nrf24l01SPISend
                       _nrf24l01Send
                    i1_read_flashmem
                           i1_strlen
 ---------------------------------------------------------------------------------
 (9) i1_strlen                                             8     6      2      90
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (9) i1_read_flashmem                                      9     7      2     118
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (8) _nrf24l01CheckACK                                     0     0      0    1790
                i1_nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (9) i1_nrf24l01SetRXMode                                  3     3      0    1790
                                              3 COMMON     3     3      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1691
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      31
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _enableInterrupts                                     1     1      0      31
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___lldiv
     ___lmul
     __itoa
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _read_flashmem (ARG)
       _strlen (ARG)
     _nrf24l01SendString
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _read_flashmem
     _read_flashmem
     _startADC
     _strcpy
       _strlen (ARG)
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _read_flashmem
   _write_flashmem

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01CheckACK
       i1_nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
     _nrf24l01HandleRX
       _nrf24l01SPISend
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       i1_read_flashmem
       i1_strlen
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     28      45       6       86.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      8       8       8       25.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5B       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Jun 15 13:37:12 2018

                   __CFG_CP$OFF 0000             nrf24l01Send@command 0072                     __CFG_LVP$ON 0000  
                           l173 0099                             l168 0058                             l192 03AC  
                           l187 0218                             l552 0406                             _ISR 0004  
  nrf24l01SendString@waitForAck 0034                    __CFG_BORV$LO 0000                             wreg 0009  
                          ?_ISR 0070                  ??_nrf24l01Init 0032                            l2307 03E2  
                          l2253 0591                            l2245 0573                            l2247 057F  
                          l2271 0673                            l2257 059A                            l2275 067F  
                          l2363 0718                            l2427 0658                            l2443 06BD  
                          l2269 0667                            l2461 0255                            l2453 0252  
                          l2437 0747                            l2445 06C8                            l2279 0688  
                          l2471 0272                            l2463 0270                            l2625 060B  
                          l2297 03C6                            l2473 028E                  ??_nrf24l01Send 0071  
                          l2643 042D                            l2491 02B6                            l2803 00E8  
                          l2653 045B                            l2645 043B                            l2629 0615  
                          l2485 029E                            l2813 0185                            l2805 010B  
                          l2807 012E                            l2657 0466                            l2497 02B8  
                          l2809 0151                            l2817 01A1                            l2499 02CF  
                          l2819 01B2                            l2765 0066                            l2829 01FA  
                          l2791 00CD                            l2943 03BE                            l2769 0070  
                          l2795 00D6                            l2787 00C4                            l2779 00A2  
                          l2799 00DF                            STR_1 07A2                    __CFG_WDTE$ON 0000  
                          STR_2 079A                            STR_3 07CF                            STR_4 07A0  
                          u2107 0231                            u2117 023E                            u1415 0580  
                          u2127 024B                            u2047 0360                            u1425 058A  
                          u2137 026A                            u2057 072A                            u1435 0592  
                          u2147 0288                            u2067 0733                            u2157 02D3  
                          u2077 02E7                            u1550 050A                            u2167 0516  
                          u2087 0655                            u1560 0510                            u1552 050B  
                          u1465 066A                            u2177 0525                            u2097 0224  
                          u1562 0511                            u1395 0576                            u2187 052D  
                          u1805 0616                            u1485 0679                            u1815 061D  
                          u1495 0680                            u1845 0430                            u1865 043C  
                          u1875 0450                            u1885 045C                            i1l54 0793  
__size_of_nrf24l01InterfaceInit 000E                    __CFG_WRT$OFF 0000   __end_of_nrf24l01InterfaceInit 078F  
                 __p_NVMEM_text 07E0                            _main 0350                            _mode 0063  
                          _itoa 0700                            _loop 0052                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          indf1 0001                            fsr1l 0006                            btemp 007E  
                          _utoa 03C0                            start 0044                   __CFG_MCLRE$ON 0000  
                         ??_ISR 0025             nrf24l01SendString@i 003A     __size_of_nrf24l01SendString 00C2  
                         ?_main 0070        __size_ofi1_read_flashmem 002A                           ?_itoa 003C  
                         ?_loop 0070                 __end_of___lldiv 046F                           ?_utoa 0033  
               __end_of___lwdiv 059F                           i1l156 0035                           i1l159 003F  
               __end_of___lwmod 068D                           _NVMEM 07E0          enableInterrupts@enable 0070  
           ___lmul@multiplicand 002F                   __CFG_PWRTE$ON 0000                           __itoa 076F  
                __CFG_BOREN$OFF 0000                _enableInterrupts 07B7                           utoa@c 003A  
                         utoa@v 0038                           status 0003                           wtemp0 007E  
   __end_ofi1_nrf24l01SetRXMode 056A                __end_ofi1_strlen 0700                _nrf24l01SPIStart 07A9  
               __initialization 0045                _nrf24l01CheckACK 07C4                    __end_of_main 03C0  
                  __end_of_itoa 0723                    __end_of_loop 0219                    __end_of_utoa 041C  
                __CFG_LPBOR$OFF 0000                _nrf24l01HandleRX 046F                          ??_main 00A5  
                        ??_itoa 0040                          ??_loop 00A1                      i1strlen@cp 0077  
                        ??_utoa 0037                ??_write_flashmem 002F                ??_nrf24l01SPIEnd 0070  
                 main@bootCount 00A6        __size_of_nrf24l01SPISend 000B                          ?__itoa 0043  
                        _ADRESH 009C                          _ADRESL 009B                          _ANSELA 018C  
                        _ANSELC 018E                          i1l2221 0798                          i1l2523 049C  
                        i1l2533 04B6                          i1l2525 0478                          i1l2527 04A1  
                        i1l1681 06EC                          i1l2741 05EE                          i1l1679 06E1  
                        i1l2861 003B                          i1l2857 0037                          i1l2859 003A  
                        u220_27 055E                          u221_27 0566                          u222_27 07AC  
                        u223_27 07B1                          u160_20 0543                          u160_22 0544  
                        u161_20 0549                          u161_22 054A                          u219_27 054F  
                        _PMADRH 0192                          u176_25 0498                          _PMADRL 0191  
                        _PMDATH 0194                          _PMDATL 0193                          _PMCON1 0195  
                        _PMCON2 0196            __size_of_nrf24l01ISR 0031         nrf24l01SetRXMode@config 002D  
                        _adcSum 0048                          ___lmul 0602         nrf24l01SetRXMode@rxMode 002C  
                __CFG_STVREN$ON 0000                       ??___lldiv 0033                       ??___lwdiv 002F  
                     ??___lwmod 002F            __end_of_nrf24l01Init 0741            __end_of_nrf24l01Send 076F  
         _nrf24l01InitRegisters 02DB                          _strcpy 0741                          _string 0053  
                        _strlen 06B7       i1nrf24l01SetRXMode@config 0075            write_flashmem@offset 002B  
                        itoa@cp 0041       i1nrf24l01SetRXMode@rxMode 0074                __end_of_startADC 0660  
        __size_of_read_flashmem 0032               ??i1_read_flashmem 0072         __end_of__initialization 004F  
                  __itoa@buffer 00A0                   __end_of_NVMEM 0800                    __itoa@number 0043  
                __pcstackCOMMON 0070                    __pidataBANK0 07D4                   __end_of__itoa 0781  
          nrf24l01HandleRX@byte 0022   nrf24l01InitRegisters@enRXAddr 002E                  _OPTION_REGbits 0095  
                     ?i1_strlen 0070                         ??__itoa 0046                      __pbssBANK0 0048  
                    __itoa@base 0045               ??_nrf24l01SPISend 0070                       ISR@result 0029  
                 _read_flashmem 059F                      __pmaintext 0350                         ?___lmul 002B  
             _nrf24l01SetRXMode 04F8          ?_nrf24l01InitRegisters 0070                      __pintentry 0004  
           nrf24l01SPISend@data 0070                  ___lmul@product 0033              ?_nrf24l01SetRXMode 0070  
      __end_of_enableInterrupts 07BE                         ?_strcpy 0033                         ?_strlen 002B  
         __end_of_n_ADDRESS_MUL 07D7             ??_nrf24l01SetRXMode 002B        __end_of_nrf24l01SPIStart 07B0  
                    ??i1_strlen 0072                         _SSP1BUF 0211        __end_of_nrf24l01CheckACK 07CA  
         nrf24l01ISR@tempStatus 0024        nrf24l01SendString@string 0039           i1read_flashmem@offset 0070  
         i1read_flashmem@result 0075        __end_of_nrf24l01HandleRX 04BC           _nrf24l01InterfaceInit 0781  
                ?_read_flashmem 002B           __size_of_nrf24l01Init 001E           __size_of_nrf24l01Send 0013  
     __end_of_nrf24l01SetRXMode 0531      __end_of_nrf24l01SendString 02DB                 __size_of___lmul 0030  
                       _adcLoop 0052                       ?_startADC 0070                         ___lldiv 041C  
                       ___lwdiv 056A                         ___lwmod 0660                         __ptext1 04BC  
                       __ptext2 0723                         __ptext3 0781                         __ptext4 02DB  
                       __ptext5 0052                         __ptext6 06B7                         __ptext7 0741  
                       __ptext8 0632                         __ptext9 0219                 __size_of_strcpy 001B  
               __size_of_strlen 0025                    __size_of_ISR 0040                         _counter 004F  
         write_flashmem@address 002F                         clrloop0 07BF            end_of_initialization 004F  
                  _nrf24l01Init 0723                    _nrf24l01Send 075C                         itoa@buf 0042  
                       itoa@val 003C                 ___lldiv@divisor 002B                 ___lldiv@counter 0038  
  __size_ofi1_nrf24l01SetRXMode 0039                      ??_startADC 002B                         utoa@buf 003B  
                       utoa@val 0033                 i1_read_flashmem 068D                         strlen@s 0032  
                     _PORTAbits 000C                __CFG_FOSC$INTOSC 0000                       _TRISAbits 008C  
                     _TRISCbits 008E                nrf24l01Send@data 0020                   ??_nrf24l01ISR 007D  
        ?_nrf24l01InterfaceInit 0070                 ??_read_flashmem 002D      __size_of_nrf24l01SetRXMode 0039  
                __end_of___lmul 0632              write_flashmem@data 002D                  __end_of_strcpy 075C  
                __end_of_strlen 06DC             start_initialization 0045                 _nrf24l01SPISend 078F  
                   __end_of_ISR 0044                       i1strlen@s 0076               __size_ofi1_strlen 0024  
       __size_of_write_flashmem 003C           nrf24l01HandleRX@width 0021         __size_of_nrf24l01SPIEnd 0007  
        nrf24l01SendString@btye 0038         ??_nrf24l01InitRegisters 002B         __end_ofi1_read_flashmem 06B7  
                      ??___lmul 0033             __end_of_nrf24l01ISR 0602                     __pdataBANK0 0063  
             ?_enableInterrupts 0070                        ??_strcpy 0035                        ??_strlen 002D  
            ??_enableInterrupts 0070                       ___latbits 0000                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0               ?_nrf24l01SPIStart 0070               ?_nrf24l01CheckACK 0070  
            ??_nrf24l01SPIStart 0070              ??_nrf24l01CheckACK 0076               ?_nrf24l01HandleRX 0070  
            ??_nrf24l01HandleRX 0079                ___lwdiv@dividend 002D                        ?___lldiv 002B  
                      ?___lwdiv 002B                        ?___lwmod 002B            __end_of_n_ADDRESS_P0 07CF  
       __end_of_nrf24l01SPISend 079A                   _NVMEM_absaddr 07E0               __size_of_startADC 002E  
     nrf24l01InitRegisters@enAA 002F              _nrf24l01SendString 0219                ___lwdiv@quotient 0031  
                __size_of__itoa 0012             i1_nrf24l01SetRXMode 0531             ?_nrf24l01SendString 0034  
                   _nrf24l01ISR 05D1                       clear_ram0 07BE                        _PIE1bits 0091  
                      _PIR1bits 0011                ?i1_read_flashmem 0070                       _sleepLoop 0051  
        i1read_flashmem@address 0077            ?i1_nrf24l01SetRXMode 0070            ??_nrf24l01SendString 0035  
                    _ADCON0bits 009D                      _ADCON1bits 009E                        _WPUAbits 020C  
                      i1_strlen 06DC               ___lmul@multiplier 002B         ??_nrf24l01InterfaceInit 002B  
                _write_flashmem 04BC                  _nrf24l01SPIEnd 07B0                 startADC@channel 002C  
         ??i1_nrf24l01SetRXMode 0073            read_flashmem@address 0032                __size_of___lldiv 0053  
              __size_of___lwdiv 0035                __size_of___lwmod 002D                ?_nrf24l01SPISend 0070  
                    _ANSELAbits 018C                      _ANSELCbits 018E                   _n_ADDRESS_MUL 07D6  
               ___lwdiv@divisor 002B                 ___lwdiv@counter 0030                        __ptext10 059F  
                      __ptext11 04F8                        __ptext20 05D1                        __ptext12 076F  
                      __ptext21 046F                        __ptext13 0700                        __ptext30 07B7  
                      __ptext22 06DC                        __ptext14 03C0                        __ptext23 068D  
                      __ptext15 0660                        __ptext24 07C4                        __ptext16 056A  
        __end_of_write_flashmem 04F8                        __ptext25 0531                        __ptext17 0602  
                      __ptext26 075C                        __ptext18 041C                        __ptext27 07A9  
                      __ptext28 078F                        __ptext29 07B0          __end_of_nrf24l01SPIEnd 07B7  
                      _nrf24l01 004C                      strcpy@from 0033                   __size_of_main 0070  
                 __size_of_itoa 0023                   __size_of_loop 01C7                   __size_of_utoa 005C  
  nrf24l01InitRegisters@feature 002C                        _nextMode 0064           __end_of_read_flashmem 05D1  
__size_of_nrf24l01InitRegisters 0075   __end_of_nrf24l01InitRegisters 0350                        int$flags 007E  
                      _startADC 0632                    _SSP1STATbits 0214                      _INTCONbits 000B  
                    _FVRCONbits 0117                        itoa@base 003E                 ?_write_flashmem 002B  
               ?_nrf24l01SPIEnd 0070               nrf24l01HandleRX@i 0023                        intlevel1 0000  
           read_flashmem@offset 002B                    _n_ADDRESS_P0 07CA             read_flashmem@result 0030  
     __size_of_enableInterrupts 0007                      _PMCON1bits 0195                ___lwmod@dividend 002D  
              ___lldiv@dividend 002F               __CFG_CLKOUTEN$OFF 0000     nrf24l01InitRegisters@config 0031  
                    _OSCCONbits 0099       __size_of_nrf24l01SPIStart 0007       __size_of_nrf24l01CheckACK 0006  
   nrf24l01InitRegisters@status 002D       __size_of_nrf24l01HandleRX 004D                   __pstringtext1 07CA  
                 __pstringtext2 07D6                   __pstringtext3 079A                   __pstringtext4 07A2  
                 __pstringtext5 07CF                   __pstringtext6 0000                        utoa@base 0035  
    nrf24l01InitRegisters@DynPD 0030                ___lldiv@quotient 0034                 ___lwmod@divisor 002B  
                      strcpy@cp 0036                        strlen@cp 0031                        strcpy@to 0037  
               ___lwmod@counter 0030                     _SSPCON1bits 0215                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020                      _STATUSbits 0003  
                  ?_nrf24l01ISR 0070  
