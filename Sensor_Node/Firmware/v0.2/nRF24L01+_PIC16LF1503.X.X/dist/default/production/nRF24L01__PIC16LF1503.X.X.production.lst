

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jun 05 17:50:55 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	_NVMEM_text,global,class=CODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	cinit,global,class=CODE,merge=1,delta=2
    14                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     
    49                           ; Version 1.45
    50                           ; Generated 16/11/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC16LF1503 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0008                     	;# 
    92  0009                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  000E                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  008C                     	;# 
   110  008E                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  010C                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011D                     	;# 
   137  018C                     	;# 
   138  018E                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  020C                     	;# 
   148  0211                     	;# 
   149  0211                     	;# 
   150  0212                     	;# 
   151  0212                     	;# 
   152  0213                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0214                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0216                     	;# 
   160  0216                     	;# 
   161  0217                     	;# 
   162  0217                     	;# 
   163  0391                     	;# 
   164  0392                     	;# 
   165  0393                     	;# 
   166  0498                     	;# 
   167  0498                     	;# 
   168  0499                     	;# 
   169  049A                     	;# 
   170  049B                     	;# 
   171  049B                     	;# 
   172  049C                     	;# 
   173  049D                     	;# 
   174  049E                     	;# 
   175  049F                     	;# 
   176  0611                     	;# 
   177  0612                     	;# 
   178  0613                     	;# 
   179  0613                     	;# 
   180  0614                     	;# 
   181  0615                     	;# 
   182  0616                     	;# 
   183  0616                     	;# 
   184  0617                     	;# 
   185  0618                     	;# 
   186  0619                     	;# 
   187  0619                     	;# 
   188  061A                     	;# 
   189  061B                     	;# 
   190  061C                     	;# 
   191  061C                     	;# 
   192  0691                     	;# 
   193  0692                     	;# 
   194  0693                     	;# 
   195  0694                     	;# 
   196  0695                     	;# 
   197  0F0F                     	;# 
   198  0F10                     	;# 
   199  0F11                     	;# 
   200  0F12                     	;# 
   201  0F13                     	;# 
   202  0F14                     	;# 
   203  0F15                     	;# 
   204  0F16                     	;# 
   205  0F17                     	;# 
   206  0F18                     	;# 
   207  0F19                     	;# 
   208  0F1A                     	;# 
   209  0F1B                     	;# 
   210  0F1C                     	;# 
   211  0F1D                     	;# 
   212  0F1E                     	;# 
   213  0F1F                     	;# 
   214  0FE3                     	;# 
   215  0FE4                     	;# 
   216  0FE5                     	;# 
   217  0FE6                     	;# 
   218  0FE7                     	;# 
   219  0FE8                     	;# 
   220  0FE9                     	;# 
   221  0FEA                     	;# 
   222  0FEB                     	;# 
   223  0FED                     	;# 
   224  0FEE                     	;# 
   225  0FEF                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000E                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  008C                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0095                     	;# 
   258  0096                     	;# 
   259  0097                     	;# 
   260  0099                     	;# 
   261  009A                     	;# 
   262  009B                     	;# 
   263  009B                     	;# 
   264  009C                     	;# 
   265  009D                     	;# 
   266  009E                     	;# 
   267  009F                     	;# 
   268  010C                     	;# 
   269  010E                     	;# 
   270  0111                     	;# 
   271  0112                     	;# 
   272  0113                     	;# 
   273  0114                     	;# 
   274  0115                     	;# 
   275  0116                     	;# 
   276  0117                     	;# 
   277  0118                     	;# 
   278  0119                     	;# 
   279  011D                     	;# 
   280  018C                     	;# 
   281  018E                     	;# 
   282  0191                     	;# 
   283  0191                     	;# 
   284  0192                     	;# 
   285  0193                     	;# 
   286  0193                     	;# 
   287  0194                     	;# 
   288  0195                     	;# 
   289  0196                     	;# 
   290  020C                     	;# 
   291  0211                     	;# 
   292  0211                     	;# 
   293  0212                     	;# 
   294  0212                     	;# 
   295  0213                     	;# 
   296  0213                     	;# 
   297  0214                     	;# 
   298  0214                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0216                     	;# 
   303  0216                     	;# 
   304  0217                     	;# 
   305  0217                     	;# 
   306  0391                     	;# 
   307  0392                     	;# 
   308  0393                     	;# 
   309  0498                     	;# 
   310  0498                     	;# 
   311  0499                     	;# 
   312  049A                     	;# 
   313  049B                     	;# 
   314  049B                     	;# 
   315  049C                     	;# 
   316  049D                     	;# 
   317  049E                     	;# 
   318  049F                     	;# 
   319  0611                     	;# 
   320  0612                     	;# 
   321  0613                     	;# 
   322  0613                     	;# 
   323  0614                     	;# 
   324  0615                     	;# 
   325  0616                     	;# 
   326  0616                     	;# 
   327  0617                     	;# 
   328  0618                     	;# 
   329  0619                     	;# 
   330  0619                     	;# 
   331  061A                     	;# 
   332  061B                     	;# 
   333  061C                     	;# 
   334  061C                     	;# 
   335  0691                     	;# 
   336  0692                     	;# 
   337  0693                     	;# 
   338  0694                     	;# 
   339  0695                     	;# 
   340  0F0F                     	;# 
   341  0F10                     	;# 
   342  0F11                     	;# 
   343  0F12                     	;# 
   344  0F13                     	;# 
   345  0F14                     	;# 
   346  0F15                     	;# 
   347  0F16                     	;# 
   348  0F17                     	;# 
   349  0F18                     	;# 
   350  0F19                     	;# 
   351  0F1A                     	;# 
   352  0F1B                     	;# 
   353  0F1C                     	;# 
   354  0F1D                     	;# 
   355  0F1E                     	;# 
   356  0F1F                     	;# 
   357  0FE3                     	;# 
   358  0FE4                     	;# 
   359  0FE5                     	;# 
   360  0FE6                     	;# 
   361  0FE7                     	;# 
   362  0FE8                     	;# 
   363  0FE9                     	;# 
   364  0FEA                     	;# 
   365  0FEB                     	;# 
   366  0FED                     	;# 
   367  0FEE                     	;# 
   368  0FEF                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000E                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0015                     	;# 
   387  0016                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001C                     	;# 
   395  008C                     	;# 
   396  008E                     	;# 
   397  0091                     	;# 
   398  0092                     	;# 
   399  0093                     	;# 
   400  0095                     	;# 
   401  0096                     	;# 
   402  0097                     	;# 
   403  0099                     	;# 
   404  009A                     	;# 
   405  009B                     	;# 
   406  009B                     	;# 
   407  009C                     	;# 
   408  009D                     	;# 
   409  009E                     	;# 
   410  009F                     	;# 
   411  010C                     	;# 
   412  010E                     	;# 
   413  0111                     	;# 
   414  0112                     	;# 
   415  0113                     	;# 
   416  0114                     	;# 
   417  0115                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  0118                     	;# 
   421  0119                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018E                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  020C                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0391                     	;# 
   450  0392                     	;# 
   451  0393                     	;# 
   452  0498                     	;# 
   453  0498                     	;# 
   454  0499                     	;# 
   455  049A                     	;# 
   456  049B                     	;# 
   457  049B                     	;# 
   458  049C                     	;# 
   459  049D                     	;# 
   460  049E                     	;# 
   461  049F                     	;# 
   462  0611                     	;# 
   463  0612                     	;# 
   464  0613                     	;# 
   465  0613                     	;# 
   466  0614                     	;# 
   467  0615                     	;# 
   468  0616                     	;# 
   469  0616                     	;# 
   470  0617                     	;# 
   471  0618                     	;# 
   472  0619                     	;# 
   473  0619                     	;# 
   474  061A                     	;# 
   475  061B                     	;# 
   476  061C                     	;# 
   477  061C                     	;# 
   478  0691                     	;# 
   479  0692                     	;# 
   480  0693                     	;# 
   481  0694                     	;# 
   482  0695                     	;# 
   483  0F0F                     	;# 
   484  0F10                     	;# 
   485  0F11                     	;# 
   486  0F12                     	;# 
   487  0F13                     	;# 
   488  0F14                     	;# 
   489  0F15                     	;# 
   490  0F16                     	;# 
   491  0F17                     	;# 
   492  0F18                     	;# 
   493  0F19                     	;# 
   494  0F1A                     	;# 
   495  0F1B                     	;# 
   496  0F1C                     	;# 
   497  0F1D                     	;# 
   498  0F1E                     	;# 
   499  0F1F                     	;# 
   500  0FE3                     	;# 
   501  0FE4                     	;# 
   502  0FE5                     	;# 
   503  0FE6                     	;# 
   504  0FE7                     	;# 
   505  0FE8                     	;# 
   506  0FE9                     	;# 
   507  0FEA                     	;# 
   508  0FEB                     	;# 
   509  0FED                     	;# 
   510  0FEE                     	;# 
   511  0FEF                     	;# 
   512  0000                     	;# 
   513  0001                     	;# 
   514  0002                     	;# 
   515  0003                     	;# 
   516  0004                     	;# 
   517  0005                     	;# 
   518  0006                     	;# 
   519  0007                     	;# 
   520  0008                     	;# 
   521  0009                     	;# 
   522  000A                     	;# 
   523  000B                     	;# 
   524  000C                     	;# 
   525  000E                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0013                     	;# 
   529  0015                     	;# 
   530  0016                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001C                     	;# 
   538  008C                     	;# 
   539  008E                     	;# 
   540  0091                     	;# 
   541  0092                     	;# 
   542  0093                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  009F                     	;# 
   554  010C                     	;# 
   555  010E                     	;# 
   556  0111                     	;# 
   557  0112                     	;# 
   558  0113                     	;# 
   559  0114                     	;# 
   560  0115                     	;# 
   561  0116                     	;# 
   562  0117                     	;# 
   563  0118                     	;# 
   564  0119                     	;# 
   565  011D                     	;# 
   566  018C                     	;# 
   567  018E                     	;# 
   568  0191                     	;# 
   569  0191                     	;# 
   570  0192                     	;# 
   571  0193                     	;# 
   572  0193                     	;# 
   573  0194                     	;# 
   574  0195                     	;# 
   575  0196                     	;# 
   576  020C                     	;# 
   577  0211                     	;# 
   578  0211                     	;# 
   579  0212                     	;# 
   580  0212                     	;# 
   581  0213                     	;# 
   582  0213                     	;# 
   583  0214                     	;# 
   584  0214                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0216                     	;# 
   589  0216                     	;# 
   590  0217                     	;# 
   591  0217                     	;# 
   592  0391                     	;# 
   593  0392                     	;# 
   594  0393                     	;# 
   595  0498                     	;# 
   596  0498                     	;# 
   597  0499                     	;# 
   598  049A                     	;# 
   599  049B                     	;# 
   600  049B                     	;# 
   601  049C                     	;# 
   602  049D                     	;# 
   603  049E                     	;# 
   604  049F                     	;# 
   605  0611                     	;# 
   606  0612                     	;# 
   607  0613                     	;# 
   608  0613                     	;# 
   609  0614                     	;# 
   610  0615                     	;# 
   611  0616                     	;# 
   612  0616                     	;# 
   613  0617                     	;# 
   614  0618                     	;# 
   615  0619                     	;# 
   616  0619                     	;# 
   617  061A                     	;# 
   618  061B                     	;# 
   619  061C                     	;# 
   620  061C                     	;# 
   621  0691                     	;# 
   622  0692                     	;# 
   623  0693                     	;# 
   624  0694                     	;# 
   625  0695                     	;# 
   626  0F0F                     	;# 
   627  0F10                     	;# 
   628  0F11                     	;# 
   629  0F12                     	;# 
   630  0F13                     	;# 
   631  0F14                     	;# 
   632  0F15                     	;# 
   633  0F16                     	;# 
   634  0F17                     	;# 
   635  0F18                     	;# 
   636  0F19                     	;# 
   637  0F1A                     	;# 
   638  0F1B                     	;# 
   639  0F1C                     	;# 
   640  0F1D                     	;# 
   641  0F1E                     	;# 
   642  0F1F                     	;# 
   643  0FE3                     	;# 
   644  0FE4                     	;# 
   645  0FE5                     	;# 
   646  0FE6                     	;# 
   647  0FE7                     	;# 
   648  0FE8                     	;# 
   649  0FE9                     	;# 
   650  0FEA                     	;# 
   651  0FEB                     	;# 
   652  0FED                     	;# 
   653  0FEE                     	;# 
   654  0FEF                     	;# 
   655  0000                     	;# 
   656  0001                     	;# 
   657  0002                     	;# 
   658  0003                     	;# 
   659  0004                     	;# 
   660  0005                     	;# 
   661  0006                     	;# 
   662  0007                     	;# 
   663  0008                     	;# 
   664  0009                     	;# 
   665  000A                     	;# 
   666  000B                     	;# 
   667  000C                     	;# 
   668  000E                     	;# 
   669  0011                     	;# 
   670  0012                     	;# 
   671  0013                     	;# 
   672  0015                     	;# 
   673  0016                     	;# 
   674  0016                     	;# 
   675  0017                     	;# 
   676  0018                     	;# 
   677  0019                     	;# 
   678  001A                     	;# 
   679  001B                     	;# 
   680  001C                     	;# 
   681  008C                     	;# 
   682  008E                     	;# 
   683  0091                     	;# 
   684  0092                     	;# 
   685  0093                     	;# 
   686  0095                     	;# 
   687  0096                     	;# 
   688  0097                     	;# 
   689  0099                     	;# 
   690  009A                     	;# 
   691  009B                     	;# 
   692  009B                     	;# 
   693  009C                     	;# 
   694  009D                     	;# 
   695  009E                     	;# 
   696  009F                     	;# 
   697  010C                     	;# 
   698  010E                     	;# 
   699  0111                     	;# 
   700  0112                     	;# 
   701  0113                     	;# 
   702  0114                     	;# 
   703  0115                     	;# 
   704  0116                     	;# 
   705  0117                     	;# 
   706  0118                     	;# 
   707  0119                     	;# 
   708  011D                     	;# 
   709  018C                     	;# 
   710  018E                     	;# 
   711  0191                     	;# 
   712  0191                     	;# 
   713  0192                     	;# 
   714  0193                     	;# 
   715  0193                     	;# 
   716  0194                     	;# 
   717  0195                     	;# 
   718  0196                     	;# 
   719  020C                     	;# 
   720  0211                     	;# 
   721  0211                     	;# 
   722  0212                     	;# 
   723  0212                     	;# 
   724  0213                     	;# 
   725  0213                     	;# 
   726  0214                     	;# 
   727  0214                     	;# 
   728  0215                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0216                     	;# 
   732  0216                     	;# 
   733  0217                     	;# 
   734  0217                     	;# 
   735  0391                     	;# 
   736  0392                     	;# 
   737  0393                     	;# 
   738  0498                     	;# 
   739  0498                     	;# 
   740  0499                     	;# 
   741  049A                     	;# 
   742  049B                     	;# 
   743  049B                     	;# 
   744  049C                     	;# 
   745  049D                     	;# 
   746  049E                     	;# 
   747  049F                     	;# 
   748  0611                     	;# 
   749  0612                     	;# 
   750  0613                     	;# 
   751  0613                     	;# 
   752  0614                     	;# 
   753  0615                     	;# 
   754  0616                     	;# 
   755  0616                     	;# 
   756  0617                     	;# 
   757  0618                     	;# 
   758  0619                     	;# 
   759  0619                     	;# 
   760  061A                     	;# 
   761  061B                     	;# 
   762  061C                     	;# 
   763  061C                     	;# 
   764  0691                     	;# 
   765  0692                     	;# 
   766  0693                     	;# 
   767  0694                     	;# 
   768  0695                     	;# 
   769  0F0F                     	;# 
   770  0F10                     	;# 
   771  0F11                     	;# 
   772  0F12                     	;# 
   773  0F13                     	;# 
   774  0F14                     	;# 
   775  0F15                     	;# 
   776  0F16                     	;# 
   777  0F17                     	;# 
   778  0F18                     	;# 
   779  0F19                     	;# 
   780  0F1A                     	;# 
   781  0F1B                     	;# 
   782  0F1C                     	;# 
   783  0F1D                     	;# 
   784  0F1E                     	;# 
   785  0F1F                     	;# 
   786  0FE3                     	;# 
   787  0FE4                     	;# 
   788  0FE5                     	;# 
   789  0FE6                     	;# 
   790  0FE7                     	;# 
   791  0FE8                     	;# 
   792  0FE9                     	;# 
   793  0FEA                     	;# 
   794  0FEB                     	;# 
   795  0FED                     	;# 
   796  0FEE                     	;# 
   797  0FEF                     	;# 
   798                           
   799                           	psect	idataCOMMON
   800  0585                     __pidataCOMMON:	
   801                           
   802                           ;initializer for _mode
   803  0585  340A               	retlw	10
   804                           
   805                           	psect	idataBANK0
   806  0586                     __pidataBANK0:	
   807                           
   808                           ;initializer for _nextMode
   809  0586  340A               	retlw	10
   810  07E0                     _NVMEM_absaddr	set	2016
   811                           
   812                           	psect	stringtext1
   813  057B                     __pstringtext1:	
   814  057B                     _n_ADDRESS_P0:	
   815  057B  34AD               	retlw	173
   816  057C  3487               	retlw	135
   817  057D  3466               	retlw	102
   818  057E  34BC               	retlw	188
   819  057F  34BB               	retlw	187
   820  0580                     __end_of_n_ADDRESS_P0:	
   821                           
   822                           	psect	stringtext2
   823  0587                     __pstringtext2:	
   824  0587                     _n_ADDRESS_MUL:	
   825  0587  3421               	retlw	33
   826  0588                     __end_of_n_ADDRESS_MUL:	
   827  07E0                     _NVMEM_absaddr	set	2016
   828                           
   829                           	psect	_NVMEM_text
   830  07E0                     __p_NVMEM_text:	
   831  07E0                     _NVMEM:	
   832  07E0  3455               	retlw	85
   833  07E1  346E               	retlw	110
   834  07E2  3463               	retlw	99
   835  07E3  346F               	retlw	111
   836  07E4  346E               	retlw	110
   837  07E5  3466               	retlw	102
   838  07E6  3469               	retlw	105
   839  07E7  3467               	retlw	103
   840  07E8  3475               	retlw	117
   841  07E9  3472               	retlw	114
   842  07EA  3465               	retlw	101
   843  07EB  3464               	retlw	100
   844  07EC  3432               	retlw	50
   845  07ED  3400               	retlw	0
   846  07EE  3400               	retlw	0
   847  07EF  3400               	retlw	0
   848  07F0  3400               	retlw	0
   849  07F1  3400               	retlw	0
   850  07F2  3400               	retlw	0
   851  07F3  3400               	retlw	0
   852  07F4  3400               	retlw	0
   853  07F5  3400               	retlw	0
   854  07F6  3400               	retlw	0
   855  07F7  3400               	retlw	0
   856  07F8  3400               	retlw	0
   857  07F9  3400               	retlw	0
   858  07FA  3400               	retlw	0
   859  07FB  3400               	retlw	0
   860  07FC  3400               	retlw	0
   861  07FD  3400               	retlw	0
   862  07FE  3400               	retlw	0
   863  07FF  3400               	retlw	0
   864  0800                     __end_of_NVMEM:	
   865  0003                     _STATUSbits	set	3
   866  0011                     _PIR1bits	set	17
   867  000C                     _PORTAbits	set	12
   868  000B                     _INTCONbits	set	11
   869  0097                     _WDTCONbits	set	151
   870  0091                     _PIE1bits	set	145
   871  009E                     _ADCON1bits	set	158
   872  0095                     _OPTION_REGbits	set	149
   873  0099                     _OSCCONbits	set	153
   874  009D                     _ADCON0bits	set	157
   875  009C                     _ADRESH	set	156
   876  009B                     _ADRESL	set	155
   877  008E                     _TRISCbits	set	142
   878  008C                     _TRISAbits	set	140
   879  0117                     _FVRCONbits	set	279
   880  018E                     _ANSELCbits	set	398
   881  018C                     _ANSELAbits	set	396
   882  018E                     _ANSELC	set	398
   883  018C                     _ANSELA	set	396
   884  0194                     _PMDATH	set	404
   885  0193                     _PMDATL	set	403
   886  0196                     _PMCON2	set	406
   887  0195                     _PMCON1bits	set	405
   888  0192                     _PMADRH	set	402
   889  0191                     _PMADRL	set	401
   890  0195                     _PMCON1	set	405
   891  020C                     _WPUAbits	set	524
   892  0211                     _SSP1BUF	set	529
   893  0214                     _SSP1STATbits	set	532
   894  0215                     _SSPCON1bits	set	533
   895                           
   896                           	psect	stringtext3
   897  0551                     __pstringtext3:	
   898  0551                     STR_2:	
   899  0551  342F               	retlw	47	;'/'
   900  0552  3443               	retlw	67	;'C'
   901  0553  344F               	retlw	79	;'O'
   902  0554  3455               	retlw	85	;'U'
   903  0555  344E               	retlw	78	;'N'
   904  0556  3454               	retlw	84	;'T'
   905  0557  342F               	retlw	47	;'/'
   906  0558  3400               	retlw	0
   907                           
   908                           	psect	stringtext4
   909  0559                     __pstringtext4:	
   910  0559                     STR_1:	
   911  0559  342F               	retlw	47	;'/'
   912  055A  3442               	retlw	66	;'B'
   913  055B  344F               	retlw	79	;'O'
   914  055C  344F               	retlw	79	;'O'
   915  055D  3454               	retlw	84	;'T'
   916  055E  342F               	retlw	47	;'/'
   917  055F  3400               	retlw	0
   918                           
   919                           	psect	stringtext5
   920  0580                     __pstringtext5:	
   921  0580                     STR_3:	
   922  0580  342F               	retlw	47	;'/'
   923  0581  3441               	retlw	65	;'A'
   924  0582  3444               	retlw	68	;'D'
   925  0583  3443               	retlw	67	;'C'
   926  0584  3400               	retlw	0
   927                           
   928                           	psect	stringtext6
   929  0000                     __pstringtext6:	
   930  0557                     
   931                           ; #config settings
   932  0000                     
   933                           	psect	cinit
   934  0043                     start_initialization:	
   935  0043                     __initialization:	
   936                           
   937                           ; Initialize objects allocated to COMMON
   938  0043  2585               	fcall	__pidataCOMMON	;fetch initializer
   939  0044  00FD               	movwf	__pdataCOMMON& (0+127)
   940                           
   941                           ; Initialize objects allocated to BANK0
   942  0045  2586               	fcall	__pidataBANK0	;fetch initializer
   943  0046  00D5               	movwf	__pdataBANK0& (0+127)
   944                           
   945                           ; Clear objects allocated to COMMON
   946  0047  01FC               	clrf	__pbssCOMMON& (0+127)
   947                           
   948                           ; Clear objects allocated to BANK0
   949  0048  3045               	movlw	low __pbssBANK0
   950  0049  0084               	movwf	4
   951  004A  3000               	movlw	high __pbssBANK0
   952  004B  0085               	movwf	5
   953  004C  3010               	movlw	16
   954  004D  2575               	fcall	clear_ram0
   955  004E                     end_of_initialization:	
   956                           ;End of C runtime variable initialization code
   957                           
   958  004E                     __end_of__initialization:	
   959  004E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   960  004F  0020               	movlb	0
   961  0050  2A37               	ljmp	_main	;jump to C main() function
   962                           
   963                           	psect	bssCOMMON
   964  007C                     __pbssCOMMON:	
   965  007C                     _adcLoop:	
   966  007C                     	ds	1
   967                           
   968                           	psect	dataCOMMON
   969  007D                     __pdataCOMMON:	
   970  007D                     _mode:	
   971  007D                     	ds	1
   972                           
   973                           	psect	bssBANK0
   974  0045                     __pbssBANK0:	
   975  0045                     _adcSum:	
   976  0045                     	ds	4
   977  0049                     _counter:	
   978  0049                     	ds	2
   979  004B                     _sleepLoop:	
   980  004B                     	ds	1
   981  004C                     _buffer:	
   982  004C                     	ds	6
   983  0052                     _byte:	
   984  0052                     	ds	3
   985                           
   986                           	psect	dataBANK0
   987  0055                     __pdataBANK0:	
   988  0055                     _nextMode:	
   989  0055                     	ds	1
   990                           
   991                           	psect	clrtext
   992  0575                     clear_ram0:	
   993                           ;	Called with FSR0 containing the base address, and
   994                           ;	WREG with the size to clear
   995                           
   996  0575  0064               	clrwdt	;clear the watchdog before getting into this loop
   997  0576                     clrloop0:	
   998  0576  0180               	clrf	0	;clear RAM location pointed to by FSR
   999  0577  3101               	addfsr 0,1
  1000  0578  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1001  0579  2D76               	goto	clrloop0	;have we reached the end yet?
  1002  057A  3400               	retlw	0	;all done for this memory range, return
  1003                           
  1004                           	psect	cstackCOMMON
  1005  0070                     __pcstackCOMMON:	
  1006  0070                     ?_nrf24l01ISR:	
  1007  0070                     ?_nrf24l01SetRecieveMode:	
  1008                           ; 1 bytes @ 0x0
  1009                           
  1010  0070                     ?_nrf24l01SendStart:	
  1011                           ; 1 bytes @ 0x0
  1012                           
  1013  0070                     ?_nrf24l01SendFlash:	
  1014                           ; 1 bytes @ 0x0
  1015                           
  1016  0070                     ?_nrf24l01SendEnd:	
  1017                           ; 1 bytes @ 0x0
  1018                           
  1019  0070                     ?_nrf24l01Init:	
  1020                           ; 1 bytes @ 0x0
  1021                           
  1022  0070                     ?_nrf24l01InterfaceInit:	
  1023                           ; 1 bytes @ 0x0
  1024                           
  1025  0070                     ?_nrf24l01SPISend:	
  1026                           ; 1 bytes @ 0x0
  1027                           
  1028  0070                     ??_nrf24l01SPISend:	
  1029                           ; 1 bytes @ 0x0
  1030                           
  1031  0070                     ?_nrf24l01SPIStart:	
  1032                           ; 1 bytes @ 0x0
  1033                           
  1034  0070                     ??_nrf24l01SPIStart:	
  1035                           ; 1 bytes @ 0x0
  1036                           
  1037  0070                     ?_nrf24l01SPIEnd:	
  1038                           ; 1 bytes @ 0x0
  1039                           
  1040  0070                     ??_nrf24l01SPIEnd:	
  1041                           ; 1 bytes @ 0x0
  1042                           
  1043  0070                     ?_ISR:	
  1044                           ; 1 bytes @ 0x0
  1045                           
  1046  0070                     ?_startADC:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049  0070                     ?_loop:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052  0070                     ?_main:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055  0070                     ?_nrf24l01SetTransmitMode:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058  0070                     ?_nrf24l01InitRegisters:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0070                     nrf24l01SPISend@data:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064                           
  1065                           ; 1 bytes @ 0x0
  1066  0070                     	ds	1
  1067  0071                     ?_nrf24l01Send:	
  1068  0071                     nrf24l01Send@data:	
  1069                           ; 1 bytes @ 0x1
  1070                           
  1071                           
  1072                           ; 1 bytes @ 0x1
  1073  0071                     	ds	1
  1074  0072                     ??_nrf24l01Send:	
  1075                           
  1076                           ; 1 bytes @ 0x2
  1077  0072                     	ds	1
  1078  0073                     nrf24l01Send@command:	
  1079                           
  1080                           ; 1 bytes @ 0x3
  1081  0073                     	ds	1
  1082  0074                     ??_nrf24l01ISR:	
  1083                           
  1084                           ; 1 bytes @ 0x4
  1085  0074                     	ds	1
  1086  0075                     nrf24l01ISR@status:	
  1087                           
  1088                           ; 1 bytes @ 0x5
  1089  0075                     	ds	1
  1090  0076                     ??_ISR:	
  1091                           
  1092                           ; 1 bytes @ 0x6
  1093  0076                     	ds	4
  1094  007A                     ISR@result:	
  1095                           
  1096                           ; 2 bytes @ 0xA
  1097  007A                     	ds	2
  1098                           
  1099                           	psect	cstackBANK0
  1100  0020                     __pcstackBANK0:	
  1101  0020                     ??_nrf24l01SetRecieveMode:	
  1102  0020                     ?_nrf24l01SendString:	
  1103                           ; 1 bytes @ 0x0
  1104                           
  1105  0020                     ??_nrf24l01SendEnd:	
  1106                           ; 1 bytes @ 0x0
  1107                           
  1108  0020                     ?_write_flashmem:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111  0020                     ??_nrf24l01InterfaceInit:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114  0020                     ??_startADC:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0020                     ??_nrf24l01SetTransmitMode:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0020                     ??_nrf24l01InitRegisters:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0020                     ?_read_flashmem:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0020                     ?___lwdiv:	
  1127                           ; 2 bytes @ 0x0
  1128                           
  1129  0020                     ?___lwmod:	
  1130                           ; 2 bytes @ 0x0
  1131                           
  1132  0020                     ?___lldiv:	
  1133                           ; 2 bytes @ 0x0
  1134                           
  1135  0020                     write_flashmem@offset:	
  1136                           ; 4 bytes @ 0x0
  1137                           
  1138  0020                     read_flashmem@offset:	
  1139                           ; 2 bytes @ 0x0
  1140                           
  1141  0020                     nrf24l01SendString@string:	
  1142                           ; 2 bytes @ 0x0
  1143                           
  1144  0020                     ___lwdiv@divisor:	
  1145                           ; 2 bytes @ 0x0
  1146                           
  1147  0020                     ___lwmod@divisor:	
  1148                           ; 2 bytes @ 0x0
  1149                           
  1150  0020                     ___lldiv@divisor:	
  1151                           ; 2 bytes @ 0x0
  1152                           
  1153                           
  1154                           ; 4 bytes @ 0x0
  1155  0020                     	ds	1
  1156  0021                     startADC@channel:	
  1157  0021                     nrf24l01SetTransmitMode@config:	
  1158                           ; 1 bytes @ 0x1
  1159                           
  1160  0021                     nrf24l01SetRecieveMode@config:	
  1161                           ; 1 bytes @ 0x1
  1162                           
  1163  0021                     nrf24l01InitRegisters@setupAW:	
  1164                           ; 1 bytes @ 0x1
  1165                           
  1166                           
  1167                           ; 1 bytes @ 0x1
  1168  0021                     	ds	1
  1169  0022                     ??_nrf24l01SendString:	
  1170  0022                     ??_read_flashmem:	
  1171                           ; 1 bytes @ 0x2
  1172                           
  1173  0022                     nrf24l01InitRegisters@feature:	
  1174                           ; 1 bytes @ 0x2
  1175                           
  1176  0022                     write_flashmem@data:	
  1177                           ; 1 bytes @ 0x2
  1178                           
  1179  0022                     ___lwdiv@dividend:	
  1180                           ; 2 bytes @ 0x2
  1181                           
  1182  0022                     ___lwmod@dividend:	
  1183                           ; 2 bytes @ 0x2
  1184                           
  1185                           
  1186                           ; 2 bytes @ 0x2
  1187  0022                     	ds	1
  1188  0023                     nrf24l01InitRegisters@rfSetup:	
  1189                           
  1190                           ; 1 bytes @ 0x3
  1191  0023                     	ds	1
  1192  0024                     ??_write_flashmem:	
  1193  0024                     ??___lwdiv:	
  1194                           ; 1 bytes @ 0x4
  1195                           
  1196  0024                     ??___lwmod:	
  1197                           ; 1 bytes @ 0x4
  1198                           
  1199  0024                     nrf24l01InitRegisters@config:	
  1200                           ; 1 bytes @ 0x4
  1201                           
  1202  0024                     write_flashmem@address:	
  1203                           ; 1 bytes @ 0x4
  1204                           
  1205  0024                     ___lldiv@dividend:	
  1206                           ; 2 bytes @ 0x4
  1207                           
  1208                           
  1209                           ; 4 bytes @ 0x4
  1210  0024                     	ds	1
  1211  0025                     nrf24l01SendString@i:	
  1212  0025                     nrf24l01InitRegisters@status:	
  1213                           ; 1 bytes @ 0x5
  1214                           
  1215  0025                     ___lwmod@counter:	
  1216                           ; 1 bytes @ 0x5
  1217                           
  1218  0025                     read_flashmem@result:	
  1219                           ; 1 bytes @ 0x5
  1220                           
  1221  0025                     ___lwdiv@quotient:	
  1222                           ; 2 bytes @ 0x5
  1223                           
  1224                           
  1225                           ; 2 bytes @ 0x5
  1226  0025                     	ds	1
  1227  0026                     nrf24l01InitRegisters@enRXAddr:	
  1228                           
  1229                           ; 1 bytes @ 0x6
  1230  0026                     	ds	1
  1231  0027                     nrf24l01InitRegisters@enAA:	
  1232  0027                     ___lwdiv@counter:	
  1233                           ; 1 bytes @ 0x7
  1234                           
  1235  0027                     read_flashmem@address:	
  1236                           ; 1 bytes @ 0x7
  1237                           
  1238                           
  1239                           ; 2 bytes @ 0x7
  1240  0027                     	ds	1
  1241  0028                     ?_utoa:	
  1242  0028                     ??___lldiv:	
  1243                           ; 1 bytes @ 0x8
  1244                           
  1245  0028                     nrf24l01InitRegisters@DynPD:	
  1246                           ; 1 bytes @ 0x8
  1247                           
  1248  0028                     utoa@val:	
  1249                           ; 1 bytes @ 0x8
  1250                           
  1251                           
  1252                           ; 2 bytes @ 0x8
  1253  0028                     	ds	1
  1254  0029                     ??_nrf24l01SendFlash:	
  1255  0029                     ??_nrf24l01Init:	
  1256                           ; 1 bytes @ 0x9
  1257                           
  1258  0029                     ___lldiv@quotient:	
  1259                           ; 1 bytes @ 0x9
  1260                           
  1261                           
  1262                           ; 4 bytes @ 0x9
  1263  0029                     	ds	1
  1264  002A                     nrf24l01SendFlash@offset:	
  1265  002A                     utoa@base:	
  1266                           ; 1 bytes @ 0xA
  1267                           
  1268                           
  1269                           ; 2 bytes @ 0xA
  1270  002A                     	ds	1
  1271  002B                     nrf24l01SendFlash@i:	
  1272                           
  1273                           ; 1 bytes @ 0xB
  1274  002B                     	ds	1
  1275  002C                     ??_utoa:	
  1276  002C                     nrf24l01SendFlash@btye:	
  1277                           ; 1 bytes @ 0xC
  1278                           
  1279                           
  1280                           ; 1 bytes @ 0xC
  1281  002C                     	ds	1
  1282  002D                     ??_nrf24l01SendStart:	
  1283  002D                     ___lldiv@counter:	
  1284                           ; 1 bytes @ 0xD
  1285                           
  1286  002D                     utoa@v:	
  1287                           ; 1 bytes @ 0xD
  1288                           
  1289                           
  1290                           ; 2 bytes @ 0xD
  1291  002D                     	ds	2
  1292  002F                     utoa@c:	
  1293                           
  1294                           ; 1 bytes @ 0xF
  1295  002F                     	ds	1
  1296  0030                     utoa@buf:	
  1297                           
  1298                           ; 1 bytes @ 0x10
  1299  0030                     	ds	1
  1300  0031                     ?_itoa:	
  1301  0031                     itoa@val:	
  1302                           ; 1 bytes @ 0x11
  1303                           
  1304                           
  1305                           ; 2 bytes @ 0x11
  1306  0031                     	ds	2
  1307  0033                     itoa@base:	
  1308                           
  1309                           ; 2 bytes @ 0x13
  1310  0033                     	ds	2
  1311  0035                     ??_itoa:	
  1312                           
  1313                           ; 1 bytes @ 0x15
  1314  0035                     	ds	1
  1315  0036                     itoa@cp:	
  1316                           
  1317                           ; 1 bytes @ 0x16
  1318  0036                     	ds	1
  1319  0037                     itoa@buf:	
  1320                           
  1321                           ; 1 bytes @ 0x17
  1322  0037                     	ds	1
  1323  0038                     ?__itoa:	
  1324  0038                     __itoa@number:	
  1325                           ; 1 bytes @ 0x18
  1326                           
  1327                           
  1328                           ; 2 bytes @ 0x18
  1329  0038                     	ds	2
  1330  003A                     __itoa@base:	
  1331                           
  1332                           ; 1 bytes @ 0x1A
  1333  003A                     	ds	1
  1334  003B                     ??__itoa:	
  1335                           
  1336                           ; 1 bytes @ 0x1B
  1337  003B                     	ds	2
  1338  003D                     __itoa@buffer:	
  1339                           
  1340                           ; 1 bytes @ 0x1D
  1341  003D                     	ds	1
  1342  003E                     ??_loop:	
  1343                           
  1344                           ; 1 bytes @ 0x1E
  1345  003E                     	ds	4
  1346  0042                     ??_main:	
  1347                           
  1348                           ; 1 bytes @ 0x22
  1349  0042                     	ds	1
  1350  0043                     main@bootCount:	
  1351                           
  1352                           ; 2 bytes @ 0x23
  1353  0043                     	ds	2
  1354                           
  1355                           	psect	maintext
  1356  0237                     __pmaintext:	
  1357 ;;
  1358 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1359 ;;
  1360 ;; *************** function _main *****************
  1361 ;; Defined at:
  1362 ;;		line 212 in file "main.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;		None
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;  bootCount       2   35[BANK0 ] unsigned int 
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  1    wreg      void 
  1369 ;; Registers used:
  1370 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1371 ;; Tracked objects:
  1372 ;;		On entry : B1F/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMMON   BANK0   BANK1
  1376 ;;      Params:         0       0       0
  1377 ;;      Locals:         0       2       0
  1378 ;;      Temps:          0       1       0
  1379 ;;      Totals:         0       3       0
  1380 ;;Total ram usage:        3 bytes
  1381 ;; Hardware stack levels required when called:    9
  1382 ;; This function calls:
  1383 ;;		_loop
  1384 ;;		_nrf24l01Init
  1385 ;;		_read_flashmem
  1386 ;;		_write_flashmem
  1387 ;; This function is called by:
  1388 ;;		Startup code after reset
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392                           
  1393                           ;psect for function _main
  1394  0237                     _main:	
  1395                           
  1396                           ;main.c: 215: ANSELA = 0x00;
  1397                           
  1398                           ;incstack = 0
  1399                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1400  0237  0023               	movlb	3	; select bank3
  1401  0238  018C               	clrf	12	;volatile
  1402                           
  1403                           ;main.c: 216: ANSELC = 0x00;
  1404  0239  018E               	clrf	14	;volatile
  1405                           
  1406                           ;main.c: 222: INTCONbits.PEIE = 0;
  1407  023A  130B               	bcf	11,6	;volatile
  1408                           
  1409                           ;main.c: 223: INTCONbits.GIE = 0;
  1410  023B  138B               	bcf	11,7	;volatile
  1411                           
  1412                           ;main.c: 225: OSCCONbits.IRCF = 0b1111;
  1413  023C  3078               	movlw	120
  1414  023D  0021               	movlb	1	; select bank1
  1415  023E  0499               	iorwf	25,f	;volatile
  1416                           
  1417                           ;main.c: 226: OSCCONbits.SCS = 0b10;
  1418  023F  0819               	movf	25,w	;volatile
  1419  0240  39FC               	andlw	-4
  1420  0241  3802               	iorlw	2
  1421  0242  0099               	movwf	25	;volatile
  1422                           
  1423                           ;main.c: 228: _delay((unsigned long)((10)*(16000000/4000.0)));
  1424  0243  3034               	movlw	52
  1425  0244  0020               	movlb	0	; select bank0
  1426  0245  00C2               	movwf	??_main
  1427  0246  30F1               	movlw	241
  1428  0247                     u857:	
  1429  0247  0B89               	decfsz	9,f
  1430  0248  2A47               	goto	u857
  1431  0249  0BC2               	decfsz	??_main,f
  1432  024A  2A47               	goto	u857
  1433  024B  3200               	nop2
  1434                           
  1435                           ;main.c: 230: nrf24l01Init();
  1436  024C  24E5               	fcall	_nrf24l01Init
  1437                           
  1438                           ;main.c: 232: OPTION_REGbits.nWPUEN = 0;
  1439  024D  0021               	movlb	1	; select bank1
  1440  024E  1395               	bcf	21,7	;volatile
  1441                           
  1442                           ;main.c: 235: FVRCONbits.FVREN = 0;
  1443  024F  0022               	movlb	2	; select bank2
  1444  0250  1397               	bcf	23,7	;volatile
  1445                           
  1446                           ;main.c: 236: FVRCONbits.ADFVR = 1;
  1447  0251  0817               	movf	23,w	;volatile
  1448  0252  39FC               	andlw	-4
  1449  0253  3801               	iorlw	1
  1450  0254  0097               	movwf	23	;volatile
  1451                           
  1452                           ;main.c: 237: FVRCONbits.FVREN = 1;
  1453  0255  1797               	bsf	23,7	;volatile
  1454                           
  1455                           ;main.c: 240: FVRCONbits.TSEN = 0;
  1456  0256  1297               	bcf	23,5	;volatile
  1457                           
  1458                           ;main.c: 241: FVRCONbits.TSRNG = 0;
  1459  0257  1217               	bcf	23,4	;volatile
  1460                           
  1461                           ;main.c: 242: FVRCONbits.TSEN = 1;
  1462  0258  1697               	bsf	23,5	;volatile
  1463                           
  1464                           ;main.c: 245: ADCON0bits.ADON = 0;
  1465  0259  0021               	movlb	1	; select bank1
  1466  025A  101D               	bcf	29,0	;volatile
  1467                           
  1468                           ;main.c: 247: ANSELAbits.ANSA4 = 1;
  1469  025B  0023               	movlb	3	; select bank3
  1470  025C  160C               	bsf	12,4	;volatile
  1471                           
  1472                           ;main.c: 248: TRISAbits.TRISA4 = 1;
  1473  025D  0021               	movlb	1	; select bank1
  1474  025E  160C               	bsf	12,4	;volatile
  1475                           
  1476                           ;main.c: 249: WPUAbits.WPUA4 = 0;
  1477  025F  0024               	movlb	4	; select bank4
  1478  0260  120C               	bcf	12,4	;volatile
  1479                           
  1480                           ;main.c: 251: ANSELCbits.ANSC3 = 1;
  1481  0261  0023               	movlb	3	; select bank3
  1482  0262  158E               	bsf	14,3	;volatile
  1483                           
  1484                           ;main.c: 252: TRISCbits.TRISC3 = 1;
  1485  0263  0021               	movlb	1	; select bank1
  1486  0264  158E               	bsf	14,3	;volatile
  1487                           
  1488                           ;main.c: 254: ADCON1bits.ADCS = 0b111;
  1489  0265  3070               	movlw	112
  1490  0266  049E               	iorwf	30,f	;volatile
  1491                           
  1492                           ;main.c: 255: ADCON1bits.ADFM = 1;
  1493  0267  179E               	bsf	30,7	;volatile
  1494                           
  1495                           ;main.c: 256: ADCON1bits.ADPREF = 0b00;
  1496  0268  30FC               	movlw	-4
  1497  0269  059E               	andwf	30,f	;volatile
  1498                           
  1499                           ;main.c: 258: PIE1bits.ADIE = 1;
  1500  026A  1711               	bsf	17,6	;volatile
  1501                           
  1502                           ;main.c: 260: ADCON0bits.CHS = 3;
  1503  026B  081D               	movf	29,w	;volatile
  1504  026C  3983               	andlw	-125
  1505  026D  380C               	iorlw	12
  1506  026E  009D               	movwf	29	;volatile
  1507                           
  1508                           ;main.c: 261: ADCON0bits.ADON = 1;
  1509  026F  141D               	bsf	29,0	;volatile
  1510                           
  1511                           ;main.c: 265: TRISAbits.TRISA2 = 1;
  1512  0270  150C               	bsf	12,2	;volatile
  1513                           
  1514                           ;main.c: 266: INTCONbits.INTE = 1;
  1515  0271  160B               	bsf	11,4	;volatile
  1516                           
  1517                           ;main.c: 267: OPTION_REGbits.INTEDG = 0;
  1518  0272  1315               	bcf	21,6	;volatile
  1519                           
  1520                           ;main.c: 271: WDTCONbits.WDTPS = 10;
  1521  0273  0817               	movf	23,w	;volatile
  1522  0274  39C1               	andlw	-63
  1523  0275  3814               	iorlw	20
  1524  0276  0097               	movwf	23	;volatile
  1525                           
  1526                           ;main.c: 276: TRISAbits.TRISA5 = 0;
  1527  0277  128C               	bcf	12,5	;volatile
  1528                           
  1529                           ;main.c: 277: PORTAbits.RA5 = 0;
  1530  0278  0020               	movlb	0	; select bank0
  1531  0279  128C               	bcf	12,5	;volatile
  1532                           
  1533                           ;main.c: 282: INTCONbits.PEIE = 1;
  1534  027A  170B               	bsf	11,6	;volatile
  1535                           
  1536                           ;main.c: 283: INTCONbits.GIE = 1;
  1537  027B  178B               	bsf	11,7	;volatile
  1538                           
  1539                           ;main.c: 285: unsigned int bootCount = read_flashmem(16);
  1540  027C  3010               	movlw	16
  1541  027D  00A0               	movwf	read_flashmem@offset
  1542  027E  3000               	movlw	0
  1543  027F  00A1               	movwf	read_flashmem@offset+1
  1544  0280  23BF               	fcall	_read_flashmem
  1545  0281  0020               	movlb	0	; select bank0
  1546  0282  0821               	movf	?_read_flashmem+1,w
  1547  0283  00C4               	movwf	main@bootCount+1
  1548  0284  0820               	movf	?_read_flashmem,w
  1549  0285  00C3               	movwf	main@bootCount
  1550                           
  1551                           ;main.c: 286: if (bootCount == 13313){
  1552  0286  0343               	decf	main@bootCount,w
  1553  0287  3034               	movlw	52
  1554  0288  1903               	skipnz
  1555  0289  0644               	xorwf	main@bootCount+1,w
  1556  028A  1D03               	btfss	3,2
  1557  028B  2A90               	goto	l191
  1558                           
  1559                           ;main.c: 287: bootCount = 1;
  1560  028C  3001               	movlw	1
  1561  028D  00C3               	movwf	main@bootCount
  1562  028E  3000               	movlw	0
  1563  028F  00C4               	movwf	main@bootCount+1
  1564  0290                     l191:	
  1565                           
  1566                           ;main.c: 288: }
  1567                           ;main.c: 289: bootCount++;
  1568  0290  3001               	movlw	1
  1569  0291  07C3               	addwf	main@bootCount,f
  1570  0292  3000               	movlw	0
  1571  0293  3DC4               	addwfc	main@bootCount+1,f
  1572                           
  1573                           ;main.c: 290: write_flashmem(16, bootCount);
  1574  0294  3010               	movlw	16
  1575  0295  00A0               	movwf	write_flashmem@offset
  1576  0296  3000               	movlw	0
  1577  0297  00A1               	movwf	write_flashmem@offset+1
  1578  0298  0844               	movf	main@bootCount+1,w
  1579  0299  00A3               	movwf	write_flashmem@data+1
  1580  029A  0843               	movf	main@bootCount,w
  1581  029B  00A2               	movwf	write_flashmem@data
  1582  029C  234E               	fcall	_write_flashmem
  1583  029D                     l1911:	
  1584                           ;main.c: 292: while(1){
  1585                           
  1586                           
  1587                           ;main.c: 293: loop();
  1588  029D  2051               	fcall	_loop
  1589  029E  2A9D               	goto	l1911
  1590  029F                     __end_of_main:	
  1591                           ;main.c: 294: }
  1592                           ;main.c: 296: return;
  1593                           
  1594                           
  1595                           	psect	text1
  1596  034E                     __ptext1:	
  1597 ;; *************** function _write_flashmem *****************
  1598 ;; Defined at:
  1599 ;;		line 3 in file "flash.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;  offset          2    0[BANK0 ] unsigned int 
  1602 ;;  data            2    2[BANK0 ] unsigned int 
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;  address         2    4[BANK0 ] unsigned int 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		wreg, status,2, status,0
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMMON   BANK0   BANK1
  1614 ;;      Params:         0       4       0
  1615 ;;      Locals:         0       2       0
  1616 ;;      Temps:          0       0       0
  1617 ;;      Totals:         0       6       0
  1618 ;;Total ram usage:        6 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    4
  1621 ;; This function calls:
  1622 ;;		Nothing
  1623 ;; This function is called by:
  1624 ;;		_main
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           
  1629                           ;psect for function _write_flashmem
  1630  034E                     _write_flashmem:	
  1631                           
  1632                           ;flash.c: 5: unsigned int address;
  1633                           ;flash.c: 7: INTCONbits.GIE = 0;
  1634                           
  1635                           ;incstack = 0
  1636                           ; Regs used in _write_flashmem: [wreg+status,2+status,0]
  1637  034E  138B               	bcf	11,7	;volatile
  1638                           
  1639                           ;flash.c: 10: PMCON1 = 0x00;
  1640  034F  0023               	movlb	3	; select bank3
  1641  0350  0195               	clrf	21	;volatile
  1642                           
  1643                           ;flash.c: 12: address = (0x800U-32) + offset;
  1644  0351  0020               	movlb	0	; select bank0
  1645  0352  0820               	movf	write_flashmem@offset,w
  1646  0353  3EE0               	addlw	224
  1647  0354  00A4               	movwf	write_flashmem@address
  1648  0355  3007               	movlw	7
  1649  0356  3D21               	addwfc	write_flashmem@offset+1,w
  1650  0357  00A5               	movwf	write_flashmem@address+1
  1651                           
  1652                           ;flash.c: 13: PMADRL = (char) (address >> 0);
  1653  0358  0824               	movf	write_flashmem@address,w
  1654  0359  0023               	movlb	3	; select bank3
  1655  035A  0091               	movwf	17	;volatile
  1656                           
  1657                           ;flash.c: 14: PMADRH = (char) (address >> 8);
  1658  035B  0020               	movlb	0	; select bank0
  1659  035C  0825               	movf	write_flashmem@address+1,w
  1660  035D  0023               	movlb	3	; select bank3
  1661  035E  0092               	movwf	18	;volatile
  1662                           
  1663                           ;flash.c: 16: PMCON1bits.FREE = 1;
  1664  035F  1615               	bsf	21,4	;volatile
  1665                           
  1666                           ;flash.c: 17: PMCON1bits.WREN = 1;
  1667  0360  1515               	bsf	21,2	;volatile
  1668                           
  1669                           ;flash.c: 19: PMCON2 = 0x55;
  1670  0361  3055               	movlw	85
  1671  0362  0096               	movwf	22	;volsfr
  1672                           
  1673                           ;flash.c: 20: PMCON2 = 0xAA;
  1674  0363  30AA               	movlw	170
  1675  0364  0096               	movwf	22	;volsfr
  1676                           
  1677                           ;flash.c: 22: PMCON1bits.WR = 1;
  1678  0365  1495               	bsf	21,1	;volatile
  1679                           
  1680                           ;flash.c: 24: __nop();
  1681  0366  0000               	nop
  1682                           
  1683                           ;flash.c: 25: __nop();
  1684  0367  0000               	nop
  1685                           
  1686                           ;flash.c: 27: PMCON1bits.WREN = 0;
  1687  0368  0023               	movlb	3	; select bank3
  1688  0369  1115               	bcf	21,2	;volatile
  1689                           
  1690                           ;flash.c: 31: PMCON1 = 0x00;
  1691  036A  0195               	clrf	21	;volatile
  1692                           
  1693                           ;flash.c: 33: PMADRL = (char) (address >> 0);
  1694  036B  0020               	movlb	0	; select bank0
  1695  036C  0824               	movf	write_flashmem@address,w
  1696  036D  0023               	movlb	3	; select bank3
  1697  036E  0091               	movwf	17	;volatile
  1698                           
  1699                           ;flash.c: 34: PMADRH = (char) (address >> 8);
  1700  036F  0020               	movlb	0	; select bank0
  1701  0370  0825               	movf	write_flashmem@address+1,w
  1702  0371  0023               	movlb	3	; select bank3
  1703  0372  0092               	movwf	18	;volatile
  1704                           
  1705                           ;flash.c: 36: PMCON1bits.FREE = 0;
  1706  0373  1215               	bcf	21,4	;volatile
  1707                           
  1708                           ;flash.c: 37: PMCON1bits.LWLO = 1;
  1709  0374  1695               	bsf	21,5	;volatile
  1710                           
  1711                           ;flash.c: 38: PMCON1bits.WREN = 1;
  1712  0375  1515               	bsf	21,2	;volatile
  1713                           
  1714                           ;flash.c: 40: PMDATL = (data >> 0);
  1715  0376  0020               	movlb	0	; select bank0
  1716  0377  0822               	movf	write_flashmem@data,w
  1717  0378  0023               	movlb	3	; select bank3
  1718  0379  0093               	movwf	19	;volatile
  1719                           
  1720                           ;flash.c: 41: PMDATH = (data >> 8);
  1721  037A  0020               	movlb	0	; select bank0
  1722  037B  0823               	movf	write_flashmem@data+1,w
  1723  037C  0023               	movlb	3	; select bank3
  1724  037D  0094               	movwf	20	;volatile
  1725                           
  1726                           ;flash.c: 43: PMCON1bits.LWLO = 0;
  1727  037E  1295               	bcf	21,5	;volatile
  1728                           
  1729                           ;flash.c: 45: PMCON2 = 0x55;
  1730  037F  3055               	movlw	85
  1731  0380  0096               	movwf	22	;volsfr
  1732                           
  1733                           ;flash.c: 46: PMCON2 = 0xAA;
  1734  0381  30AA               	movlw	170
  1735  0382  0096               	movwf	22	;volsfr
  1736                           
  1737                           ;flash.c: 48: PMCON1bits.WR = 1;
  1738  0383  1495               	bsf	21,1	;volatile
  1739                           
  1740                           ;flash.c: 50: __nop();
  1741  0384  0000               	nop
  1742                           
  1743                           ;flash.c: 51: __nop();
  1744  0385  0000               	nop
  1745                           
  1746                           ;flash.c: 53: PMCON1bits.WREN = 0;
  1747  0386  0023               	movlb	3	; select bank3
  1748  0387  1115               	bcf	21,2	;volatile
  1749                           
  1750                           ;flash.c: 56: INTCONbits.GIE = 1;
  1751  0388  178B               	bsf	11,7	;volatile
  1752  0389  0008               	return
  1753  038A                     __end_of_write_flashmem:	
  1754                           
  1755                           	psect	text2
  1756  04E5                     __ptext2:	
  1757 ;; *************** function _nrf24l01Init *****************
  1758 ;; Defined at:
  1759 ;;		line 211 in file "nrf24l01.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;		None
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;		None
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      void 
  1766 ;; Registers used:
  1767 ;;		wreg, status,2, status,0, pclath, cstack
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMMON   BANK0   BANK1
  1773 ;;      Params:         0       0       0
  1774 ;;      Locals:         0       0       0
  1775 ;;      Temps:          0       1       0
  1776 ;;      Totals:         0       1       0
  1777 ;;Total ram usage:        1 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    7
  1780 ;; This function calls:
  1781 ;;		_nrf24l01InitRegisters
  1782 ;;		_nrf24l01InterfaceInit
  1783 ;; This function is called by:
  1784 ;;		_main
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           
  1789                           ;psect for function _nrf24l01Init
  1790  04E5                     _nrf24l01Init:	
  1791                           
  1792                           ;nrf24l01.c: 214: nrf24l01InterfaceInit();
  1793                           
  1794                           ;incstack = 0
  1795                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1796  04E5  252C               	fcall	_nrf24l01InterfaceInit
  1797                           
  1798                           ;nrf24l01.c: 218: PORTAbits.RA0 = 0;
  1799  04E6  0020               	movlb	0	; select bank0
  1800  04E7  100C               	bcf	12,0	;volatile
  1801                           
  1802                           ;nrf24l01.c: 220: _delay((unsigned long)((11)*(16000000/4000.0)));
  1803  04E8  303A               	movlw	58
  1804  04E9  0020               	movlb	0	; select bank0
  1805  04EA  00A9               	movwf	??_nrf24l01Init
  1806  04EB  3023               	movlw	35
  1807  04EC                     u867:	
  1808  04EC  0B89               	decfsz	9,f
  1809  04ED  2CEC               	goto	u867
  1810  04EE  0BA9               	decfsz	??_nrf24l01Init,f
  1811  04EF  2CEC               	goto	u867
  1812                           
  1813                           ;nrf24l01.c: 222: nrf24l01InitRegisters();
  1814  04F0  21B8               	fcall	_nrf24l01InitRegisters
  1815                           
  1816                           ;nrf24l01.c: 224: _delay((unsigned long)((2)*(16000000/4000.0)));
  1817  04F1  300B               	movlw	11
  1818  04F2  0020               	movlb	0	; select bank0
  1819  04F3  00A9               	movwf	??_nrf24l01Init
  1820  04F4  3062               	movlw	98
  1821  04F5                     u877:	
  1822  04F5  0B89               	decfsz	9,f
  1823  04F6  2CF5               	goto	u877
  1824  04F7  0BA9               	decfsz	??_nrf24l01Init,f
  1825  04F8  2CF5               	goto	u877
  1826  04F9  0000               	nop
  1827  04FA  0008               	return
  1828  04FB                     __end_of_nrf24l01Init:	
  1829                           
  1830                           	psect	text3
  1831  052C                     __ptext3:	
  1832 ;; *************** function _nrf24l01InterfaceInit *****************
  1833 ;; Defined at:
  1834 ;;		line 8 in file "interface.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;		None
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;		None
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  1    wreg      void 
  1841 ;; Registers used:
  1842 ;;		wreg, status,2, status,0
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMMON   BANK0   BANK1
  1848 ;;      Params:         0       0       0
  1849 ;;      Locals:         0       0       0
  1850 ;;      Temps:          0       0       0
  1851 ;;      Totals:         0       0       0
  1852 ;;Total ram usage:        0 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; Hardware stack levels required when called:    4
  1855 ;; This function calls:
  1856 ;;		Nothing
  1857 ;; This function is called by:
  1858 ;;		_nrf24l01Init
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           
  1863                           ;psect for function _nrf24l01InterfaceInit
  1864  052C                     _nrf24l01InterfaceInit:	
  1865                           
  1866                           ;interface.c: 10: TRISAbits.TRISA0 = 0;
  1867                           
  1868                           ;incstack = 0
  1869                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  1870  052C  0021               	movlb	1	; select bank1
  1871  052D  100C               	bcf	12,0	;volatile
  1872                           
  1873                           ;interface.c: 11: TRISAbits.TRISA1 = 0;
  1874  052E  108C               	bcf	12,1	;volatile
  1875                           
  1876                           ;interface.c: 13: TRISCbits.TRISC1 = 1;
  1877  052F  148E               	bsf	14,1	;volatile
  1878                           
  1879                           ;interface.c: 14: TRISCbits.TRISC2 = 0;
  1880  0530  110E               	bcf	14,2	;volatile
  1881                           
  1882                           ;interface.c: 15: TRISCbits.TRISC0 = 0;
  1883  0531  100E               	bcf	14,0	;volatile
  1884                           
  1885                           ;interface.c: 17: SSPCON1bits.SSPEN = 0;
  1886  0532  0024               	movlb	4	; select bank4
  1887  0533  1295               	bcf	21,5	;volatile
  1888                           
  1889                           ;interface.c: 18: SSPCON1bits.CKP = 0;
  1890  0534  1215               	bcf	21,4	;volatile
  1891                           
  1892                           ;interface.c: 19: SSP1STATbits.CKE = 1;
  1893  0535  1714               	bsf	20,6	;volatile
  1894                           
  1895                           ;interface.c: 20: SSPCON1bits.SSPM = 0b0000;
  1896  0536  30F0               	movlw	-16
  1897  0537  0595               	andwf	21,f	;volatile
  1898                           
  1899                           ;interface.c: 22: SSPCON1bits.SSPEN = 1;
  1900  0538  1695               	bsf	21,5	;volatile
  1901  0539  0008               	return
  1902  053A                     __end_of_nrf24l01InterfaceInit:	
  1903                           
  1904                           	psect	text4
  1905  01B8                     __ptext4:	
  1906 ;; *************** function _nrf24l01InitRegisters *****************
  1907 ;; Defined at:
  1908 ;;		line 123 in file "nrf24l01.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;		None
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;  DynPD           1    8[BANK0 ] struct .
  1913 ;;  enAA            1    7[BANK0 ] struct .
  1914 ;;  enRXAddr        1    6[BANK0 ] struct .
  1915 ;;  status          1    5[BANK0 ] struct .
  1916 ;;  config          1    4[BANK0 ] struct .
  1917 ;;  rfSetup         1    3[BANK0 ] struct .
  1918 ;;  feature         1    2[BANK0 ] struct .
  1919 ;;  setupAW         1    1[BANK0 ] struct .
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, status,2, status,0, pclath, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMMON   BANK0   BANK1
  1929 ;;      Params:         0       0       0
  1930 ;;      Locals:         0       8       0
  1931 ;;      Temps:          0       1       0
  1932 ;;      Totals:         0       9       0
  1933 ;;Total ram usage:        9 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    6
  1936 ;; This function calls:
  1937 ;;		_nrf24l01Send
  1938 ;; This function is called by:
  1939 ;;		_nrf24l01Init
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           
  1944                           ;psect for function _nrf24l01InitRegisters
  1945  01B8                     _nrf24l01InitRegisters:	
  1946                           
  1947                           ;nrf24l01.c: 125: nrf24l01Send(0b00100000 | 0x00, 0x00);
  1948                           
  1949                           ;incstack = 0
  1950                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  1951  01B8  01F1               	clrf	nrf24l01Send@data
  1952  01B9  3020               	movlw	32
  1953  01BA  253A               	fcall	_nrf24l01Send
  1954                           
  1955                           ;nrf24l01.c: 127: _delay((unsigned long)((10)*(16000000/4000.0)));
  1956  01BB  3034               	movlw	52
  1957  01BC  0020               	movlb	0	; select bank0
  1958  01BD  00A0               	movwf	??_nrf24l01InitRegisters
  1959  01BE  30F1               	movlw	241
  1960  01BF                     u887:	
  1961  01BF  0B89               	decfsz	9,f
  1962  01C0  29BF               	goto	u887
  1963  01C1  0BA0               	decfsz	??_nrf24l01InitRegisters,f
  1964  01C2  29BF               	goto	u887
  1965  01C3  3200               	nop2
  1966                           
  1967                           ;nrf24l01.c: 129: n_SETUP_AW_t setupAW;
  1968                           ;nrf24l01.c: 130: setupAW.byte = 0x00;
  1969  01C4  0020               	movlb	0	; select bank0
  1970  01C5  01A1               	clrf	nrf24l01InitRegisters@setupAW
  1971                           
  1972                           ;nrf24l01.c: 131: setupAW.AW = 3;
  1973  01C6  3003               	movlw	3
  1974  01C7  04A1               	iorwf	nrf24l01InitRegisters@setupAW,f
  1975                           
  1976                           ;nrf24l01.c: 132: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  1977  01C8  0821               	movf	nrf24l01InitRegisters@setupAW,w
  1978  01C9  00A0               	movwf	??_nrf24l01InitRegisters
  1979  01CA  0820               	movf	??_nrf24l01InitRegisters,w
  1980  01CB  00F1               	movwf	nrf24l01Send@data
  1981  01CC  3022               	movlw	34
  1982  01CD  253A               	fcall	_nrf24l01Send
  1983                           
  1984                           ;nrf24l01.c: 146: n_RF_SETUP_t rfSetup;
  1985                           ;nrf24l01.c: 147: rfSetup.RF_DR_LOW = 0;
  1986  01CE  0020               	movlb	0	; select bank0
  1987  01CF  12A3               	bcf	nrf24l01InitRegisters@rfSetup,5
  1988                           
  1989                           ;nrf24l01.c: 148: rfSetup.RF_DR_HIGH = 1;
  1990  01D0  15A3               	bsf	nrf24l01InitRegisters@rfSetup,3
  1991                           
  1992                           ;nrf24l01.c: 149: rfSetup.RF_PWR = 3;
  1993  01D1  3006               	movlw	6
  1994  01D2  04A3               	iorwf	nrf24l01InitRegisters@rfSetup,f
  1995                           
  1996                           ;nrf24l01.c: 150: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  1997  01D3  0823               	movf	nrf24l01InitRegisters@rfSetup,w
  1998  01D4  00A0               	movwf	??_nrf24l01InitRegisters
  1999  01D5  0820               	movf	??_nrf24l01InitRegisters,w
  2000  01D6  00F1               	movwf	nrf24l01Send@data
  2001  01D7  3026               	movlw	38
  2002  01D8  253A               	fcall	_nrf24l01Send
  2003                           
  2004                           ;nrf24l01.c: 153: n_CONFIG_t config;
  2005                           ;nrf24l01.c: 154: config.PRIM_RX = 1;
  2006  01D9  0020               	movlb	0	; select bank0
  2007  01DA  1424               	bsf	nrf24l01InitRegisters@config,0
  2008                           
  2009                           ;nrf24l01.c: 155: config.EN_CRC = 1;
  2010  01DB  15A4               	bsf	nrf24l01InitRegisters@config,3
  2011                           
  2012                           ;nrf24l01.c: 156: config.CRCO = 1;
  2013  01DC  1524               	bsf	nrf24l01InitRegisters@config,2
  2014                           
  2015                           ;nrf24l01.c: 157: config.PWR_UP = 1;
  2016  01DD  14A4               	bsf	nrf24l01InitRegisters@config,1
  2017                           
  2018                           ;nrf24l01.c: 158: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2019  01DE  0824               	movf	nrf24l01InitRegisters@config,w
  2020  01DF  00A0               	movwf	??_nrf24l01InitRegisters
  2021  01E0  0820               	movf	??_nrf24l01InitRegisters,w
  2022  01E1  00F1               	movwf	nrf24l01Send@data
  2023  01E2  3020               	movlw	32
  2024  01E3  253A               	fcall	_nrf24l01Send
  2025                           
  2026                           ;nrf24l01.c: 161: n_EN_RXADDR_t enRXAddr;
  2027                           ;nrf24l01.c: 162: enRXAddr.ERX_P0 = 1;
  2028  01E4  0020               	movlb	0	; select bank0
  2029  01E5  1426               	bsf	nrf24l01InitRegisters@enRXAddr,0
  2030                           
  2031                           ;nrf24l01.c: 163: enRXAddr.ERX_P1 = 1;
  2032  01E6  14A6               	bsf	nrf24l01InitRegisters@enRXAddr,1
  2033                           
  2034                           ;nrf24l01.c: 164: enRXAddr.ERX_P2 = 1;
  2035  01E7  1526               	bsf	nrf24l01InitRegisters@enRXAddr,2
  2036                           
  2037                           ;nrf24l01.c: 165: enRXAddr.ERX_P3 = 1;
  2038  01E8  15A6               	bsf	nrf24l01InitRegisters@enRXAddr,3
  2039                           
  2040                           ;nrf24l01.c: 166: enRXAddr.ERX_P4 = 1;
  2041  01E9  1626               	bsf	nrf24l01InitRegisters@enRXAddr,4
  2042                           
  2043                           ;nrf24l01.c: 167: enRXAddr.ERX_P5 = 1;
  2044  01EA  16A6               	bsf	nrf24l01InitRegisters@enRXAddr,5
  2045                           
  2046                           ;nrf24l01.c: 168: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  2047  01EB  0826               	movf	nrf24l01InitRegisters@enRXAddr,w
  2048  01EC  00A0               	movwf	??_nrf24l01InitRegisters
  2049  01ED  0820               	movf	??_nrf24l01InitRegisters,w
  2050  01EE  00F1               	movwf	nrf24l01Send@data
  2051  01EF  3022               	movlw	34
  2052  01F0  253A               	fcall	_nrf24l01Send
  2053                           
  2054                           ;nrf24l01.c: 171: n_EN_AA_t enAA;
  2055                           ;nrf24l01.c: 172: enAA.byte = nrf24l01Send(0b00000000 | 0x01, 0);
  2056  01F1  01F1               	clrf	nrf24l01Send@data
  2057  01F2  3001               	movlw	1
  2058  01F3  253A               	fcall	_nrf24l01Send
  2059  01F4  0020               	movlb	0	; select bank0
  2060  01F5  00A0               	movwf	??_nrf24l01InitRegisters
  2061  01F6  0820               	movf	??_nrf24l01InitRegisters,w
  2062  01F7  00A7               	movwf	nrf24l01InitRegisters@enAA
  2063                           
  2064                           ;nrf24l01.c: 173: enAA.ENAA_P0 = 0;
  2065  01F8  1027               	bcf	nrf24l01InitRegisters@enAA,0
  2066                           
  2067                           ;nrf24l01.c: 174: enAA.ENAA_P1 = 0;
  2068  01F9  10A7               	bcf	nrf24l01InitRegisters@enAA,1
  2069                           
  2070                           ;nrf24l01.c: 175: enAA.ENAA_P2 = 0;
  2071  01FA  1127               	bcf	nrf24l01InitRegisters@enAA,2
  2072                           
  2073                           ;nrf24l01.c: 176: enAA.ENAA_P3 = 0;
  2074  01FB  11A7               	bcf	nrf24l01InitRegisters@enAA,3
  2075                           
  2076                           ;nrf24l01.c: 177: enAA.ENAA_P4 = 0;
  2077  01FC  1227               	bcf	nrf24l01InitRegisters@enAA,4
  2078                           
  2079                           ;nrf24l01.c: 178: enAA.ENAA_P5 = 0;
  2080  01FD  12A7               	bcf	nrf24l01InitRegisters@enAA,5
  2081                           
  2082                           ;nrf24l01.c: 179: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  2083  01FE  0827               	movf	nrf24l01InitRegisters@enAA,w
  2084  01FF  00A0               	movwf	??_nrf24l01InitRegisters
  2085  0200  0820               	movf	??_nrf24l01InitRegisters,w
  2086  0201  00F1               	movwf	nrf24l01Send@data
  2087  0202  3021               	movlw	33
  2088  0203  253A               	fcall	_nrf24l01Send
  2089                           
  2090                           ;nrf24l01.c: 183: n_FEATURE_t feature;
  2091                           ;nrf24l01.c: 184: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  2092  0204  01F1               	clrf	nrf24l01Send@data
  2093  0205  301D               	movlw	29
  2094  0206  253A               	fcall	_nrf24l01Send
  2095  0207  0020               	movlb	0	; select bank0
  2096  0208  00A0               	movwf	??_nrf24l01InitRegisters
  2097  0209  0820               	movf	??_nrf24l01InitRegisters,w
  2098  020A  00A2               	movwf	nrf24l01InitRegisters@feature
  2099                           
  2100                           ;nrf24l01.c: 185: feature.EN_DPL = 1;
  2101  020B  1522               	bsf	nrf24l01InitRegisters@feature,2
  2102                           
  2103                           ;nrf24l01.c: 186: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  2104  020C  0822               	movf	nrf24l01InitRegisters@feature,w
  2105  020D  00A0               	movwf	??_nrf24l01InitRegisters
  2106  020E  0820               	movf	??_nrf24l01InitRegisters,w
  2107  020F  00F1               	movwf	nrf24l01Send@data
  2108  0210  303D               	movlw	61
  2109  0211  253A               	fcall	_nrf24l01Send
  2110                           
  2111                           ;nrf24l01.c: 188: n_DYNPD_t DynPD;
  2112                           ;nrf24l01.c: 189: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  2113  0212  01F1               	clrf	nrf24l01Send@data
  2114  0213  301C               	movlw	28
  2115  0214  253A               	fcall	_nrf24l01Send
  2116  0215  0020               	movlb	0	; select bank0
  2117  0216  00A0               	movwf	??_nrf24l01InitRegisters
  2118  0217  0820               	movf	??_nrf24l01InitRegisters,w
  2119  0218  00A8               	movwf	nrf24l01InitRegisters@DynPD
  2120                           
  2121                           ;nrf24l01.c: 190: DynPD.DPL_P0 = 1;
  2122  0219  1428               	bsf	nrf24l01InitRegisters@DynPD,0
  2123                           
  2124                           ;nrf24l01.c: 191: DynPD.DPL_P1 = 1;
  2125  021A  14A8               	bsf	nrf24l01InitRegisters@DynPD,1
  2126                           
  2127                           ;nrf24l01.c: 192: DynPD.DPL_P2 = 1;
  2128  021B  1528               	bsf	nrf24l01InitRegisters@DynPD,2
  2129                           
  2130                           ;nrf24l01.c: 193: DynPD.DPL_P3 = 1;
  2131  021C  15A8               	bsf	nrf24l01InitRegisters@DynPD,3
  2132                           
  2133                           ;nrf24l01.c: 194: DynPD.DPL_P4 = 1;
  2134  021D  1628               	bsf	nrf24l01InitRegisters@DynPD,4
  2135                           
  2136                           ;nrf24l01.c: 195: DynPD.DPL_P5 = 1;
  2137  021E  16A8               	bsf	nrf24l01InitRegisters@DynPD,5
  2138                           
  2139                           ;nrf24l01.c: 196: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  2140  021F  0828               	movf	nrf24l01InitRegisters@DynPD,w
  2141  0220  00A0               	movwf	??_nrf24l01InitRegisters
  2142  0221  0820               	movf	??_nrf24l01InitRegisters,w
  2143  0222  00F1               	movwf	nrf24l01Send@data
  2144  0223  303C               	movlw	60
  2145  0224  253A               	fcall	_nrf24l01Send
  2146                           
  2147                           ;nrf24l01.c: 199: n_STATUS_t status;
  2148                           ;nrf24l01.c: 200: status.byte = 0x00;
  2149  0225  0020               	movlb	0	; select bank0
  2150  0226  01A5               	clrf	nrf24l01InitRegisters@status
  2151                           
  2152                           ;nrf24l01.c: 201: status.RX_DR = 1;
  2153  0227  1725               	bsf	nrf24l01InitRegisters@status,6
  2154                           
  2155                           ;nrf24l01.c: 202: status.TX_DS = 1;
  2156  0228  16A5               	bsf	nrf24l01InitRegisters@status,5
  2157                           
  2158                           ;nrf24l01.c: 203: status.MAX_RT = 1;
  2159  0229  1625               	bsf	nrf24l01InitRegisters@status,4
  2160                           
  2161                           ;nrf24l01.c: 204: nrf24l01Send(0b00100000 | 0x07, status.byte);
  2162  022A  0825               	movf	nrf24l01InitRegisters@status,w
  2163  022B  00A0               	movwf	??_nrf24l01InitRegisters
  2164  022C  0820               	movf	??_nrf24l01InitRegisters,w
  2165  022D  00F1               	movwf	nrf24l01Send@data
  2166  022E  3027               	movlw	39
  2167  022F  253A               	fcall	_nrf24l01Send
  2168                           
  2169                           ;nrf24l01.c: 207: nrf24l01Send(0b11100001, 0);
  2170  0230  01F1               	clrf	nrf24l01Send@data
  2171  0231  30E1               	movlw	225
  2172  0232  253A               	fcall	_nrf24l01Send
  2173                           
  2174                           ;nrf24l01.c: 208: nrf24l01Send(0b11100010, 0);
  2175  0233  01F1               	clrf	nrf24l01Send@data
  2176  0234  30E2               	movlw	226
  2177  0235  253A               	fcall	_nrf24l01Send
  2178  0236  0008               	return
  2179  0237                     __end_of_nrf24l01InitRegisters:	
  2180                           
  2181                           	psect	text5
  2182  0051                     __ptext5:	
  2183 ;; *************** function _loop *****************
  2184 ;; Defined at:
  2185 ;;		line 76 in file "main.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  1    wreg      void 
  2192 ;; Registers used:
  2193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1
  2199 ;;      Params:         0       0       0
  2200 ;;      Locals:         0       0       0
  2201 ;;      Temps:          0       4       0
  2202 ;;      Totals:         0       4       0
  2203 ;;Total ram usage:        4 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    8
  2206 ;; This function calls:
  2207 ;;		___lldiv
  2208 ;;		__itoa
  2209 ;;		_nrf24l01SendEnd
  2210 ;;		_nrf24l01SendFlash
  2211 ;;		_nrf24l01SendStart
  2212 ;;		_nrf24l01SendString
  2213 ;;		_nrf24l01SetRecieveMode
  2214 ;;		_read_flashmem
  2215 ;;		_startADC
  2216 ;; This function is called by:
  2217 ;;		_main
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           
  2222                           ;psect for function _loop
  2223  0051                     _loop:	
  2224                           
  2225                           ;main.c: 78: if (mode != 1) {
  2226                           
  2227                           ;incstack = 0
  2228                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2229  0051  037D               	decf	_mode,w
  2230  0052  1903               	btfsc	3,2
  2231  0053  299A               	goto	l1799
  2232  0054  0064               	clrwdt	;# 
  2233                           
  2234                           ;main.c: 80: }
  2235                           ;main.c: 82: switch (mode){
  2236  0055  299A               	goto	l1799
  2237  0056                     l1699:	
  2238                           ;main.c: 84: case 1:
  2239                           
  2240                           
  2241                           ;main.c: 85: nrf24l01SetRecieveMode();
  2242  0056  2492               	fcall	_nrf24l01SetRecieveMode
  2243                           
  2244                           ;main.c: 87: PORTAbits.RA5 = (unsigned) !PORTAbits.RA5;
  2245  0057  1003               	clrc
  2246  0058  0020               	movlb	0	; select bank0
  2247  0059  1E8C               	btfss	12,5	;volatile
  2248  005A  1403               	setc
  2249  005B  1C03               	btfss	3,0
  2250  005C  2860               	goto	u750
  2251  005D  0020               	movlb	0	; select bank0
  2252  005E  168C               	bsf	12,5	;volatile
  2253  005F  2862               	goto	u764
  2254  0060                     u750:	
  2255  0060  0020               	movlb	0	; select bank0
  2256  0061  128C               	bcf	12,5	;volatile
  2257  0062                     u764:	
  2258  0062  0063               	sleep	;# 
  2259                           
  2260                           ;main.c: 90: __nop();
  2261  0063  0000               	nop
  2262                           
  2263                           ;main.c: 91: __nop();
  2264  0064  0000               	nop
  2265                           
  2266                           ;main.c: 92: if (!STATUSbits.nTO && !STATUSbits.nPD){
  2267  0065  0020               	movlb	0	; select bank0
  2268  0066  1E03               	btfss	3,4	;volatile
  2269  0067  1983               	btfsc	3,3	;volatile
  2270  0068  286E               	goto	l1715
  2271                           
  2272                           ;main.c: 93: mode = nextMode;
  2273  0069  0855               	movf	_nextMode,w
  2274  006A  00BE               	movwf	??_loop
  2275  006B  083E               	movf	??_loop,w
  2276  006C  00FD               	movwf	_mode
  2277                           
  2278                           ;main.c: 94: sleepLoop = 0;
  2279  006D  01CB               	clrf	_sleepLoop
  2280  006E                     l1715:	
  2281                           
  2282                           ;main.c: 95: }
  2283                           ;main.c: 97: if (sleepLoop++ > 5){
  2284  006E  084B               	movf	_sleepLoop,w
  2285  006F  0ACB               	incf	_sleepLoop,f
  2286  0070  00BE               	movwf	??_loop
  2287  0071  3006               	movlw	6
  2288  0072  023E               	subwf	??_loop,w
  2289  0073  1C03               	skipc
  2290  0074  0008               	return
  2291  0075  0001               	reset	;# 
  2292                           
  2293                           ;main.c: 99: }
  2294                           ;main.c: 100: break;
  2295  0076  0008               	return
  2296  0077                     l1719:	
  2297                           ;main.c: 102: case 10:
  2298                           
  2299                           
  2300                           ;main.c: 105: _itoa(buffer, read_flashmem(16), 10);
  2301  0077  3010               	movlw	16
  2302  0078  0020               	movlb	0	; select bank0
  2303  0079  00A0               	movwf	read_flashmem@offset
  2304  007A  3000               	movlw	0
  2305  007B  00A1               	movwf	read_flashmem@offset+1
  2306  007C  23BF               	fcall	_read_flashmem
  2307  007D  0020               	movlb	0	; select bank0
  2308  007E  0821               	movf	?_read_flashmem+1,w
  2309  007F  00B9               	movwf	__itoa@number+1
  2310  0080  0820               	movf	?_read_flashmem,w
  2311  0081  00B8               	movwf	__itoa@number
  2312  0082  300A               	movlw	10
  2313  0083  00BE               	movwf	??_loop
  2314  0084  083E               	movf	??_loop,w
  2315  0085  00BA               	movwf	__itoa@base
  2316  0086  304C               	movlw	(low (_buffer| 0))& (0+255)
  2317  0087  250D               	fcall	__itoa
  2318                           
  2319                           ;main.c: 107: nrf24l01SendStart();
  2320  0088  2560               	fcall	_nrf24l01SendStart
  2321                           
  2322                           ;main.c: 108: nrf24l01SendFlash(0);
  2323  0089  3000               	movlw	0
  2324  008A  24CA               	fcall	_nrf24l01SendFlash
  2325                           
  2326                           ;main.c: 109: nrf24l01SendString( (char *) "/BOOT/");
  2327  008B  3059               	movlw	low (STR_1| (0+32768))
  2328  008C  0020               	movlb	0	; select bank0
  2329  008D  00A0               	movwf	nrf24l01SendString@string
  2330  008E  3085               	movlw	high (STR_1| (0+32768))
  2331  008F  00A1               	movwf	nrf24l01SendString@string+1
  2332  0090  244C               	fcall	_nrf24l01SendString
  2333                           
  2334                           ;main.c: 110: nrf24l01SendString(buffer);
  2335  0091  304C               	movlw	low _buffer
  2336  0092  0020               	movlb	0	; select bank0
  2337  0093  00A0               	movwf	nrf24l01SendString@string
  2338  0094  3000               	movlw	high _buffer
  2339  0095  00A1               	movwf	nrf24l01SendString@string+1
  2340  0096  244C               	fcall	_nrf24l01SendString
  2341                           
  2342                           ;main.c: 111: nrf24l01SendEnd();
  2343  0097  24FB               	fcall	_nrf24l01SendEnd
  2344                           
  2345                           ;main.c: 113: mode = 11;
  2346  0098  300B               	movlw	11
  2347  0099  0020               	movlb	0	; select bank0
  2348  009A  00BE               	movwf	??_loop
  2349  009B  083E               	movf	??_loop,w
  2350  009C  00FD               	movwf	_mode
  2351                           
  2352                           ;main.c: 114: break;
  2353  009D  0008               	return
  2354  009E                     l172:	
  2355                           ;main.c: 117: case 11:
  2356                           
  2357                           
  2358                           ;main.c: 118: mode = 1;
  2359  009E  01FD               	clrf	_mode
  2360  009F  0AFD               	incf	_mode,f
  2361                           
  2362                           ;main.c: 119: nextMode = 4;
  2363  00A0  3004               	movlw	4
  2364  00A1  0020               	movlb	0	; select bank0
  2365  00A2  00BE               	movwf	??_loop
  2366  00A3  083E               	movf	??_loop,w
  2367  00A4  00D5               	movwf	_nextMode
  2368                           
  2369                           ;main.c: 121: break;
  2370  00A5  0008               	return
  2371  00A6                     l1735:	
  2372                           ;main.c: 123: case 4:
  2373                           
  2374                           
  2375                           ;main.c: 124: _itoa(buffer, counter++, 10);
  2376  00A6  0020               	movlb	0	; select bank0
  2377  00A7  084A               	movf	_counter+1,w
  2378  00A8  00B9               	movwf	__itoa@number+1
  2379  00A9  0849               	movf	_counter,w
  2380  00AA  00B8               	movwf	__itoa@number
  2381  00AB  300A               	movlw	10
  2382  00AC  00BE               	movwf	??_loop
  2383  00AD  083E               	movf	??_loop,w
  2384  00AE  00BA               	movwf	__itoa@base
  2385  00AF  304C               	movlw	(low (_buffer| 0))& (0+255)
  2386  00B0  250D               	fcall	__itoa
  2387  00B1  3001               	movlw	1
  2388  00B2  0020               	movlb	0	; select bank0
  2389  00B3  07C9               	addwf	_counter,f
  2390  00B4  3000               	movlw	0
  2391  00B5  3DCA               	addwfc	_counter+1,f
  2392                           
  2393                           ;main.c: 126: nrf24l01SendStart();
  2394  00B6  2560               	fcall	_nrf24l01SendStart
  2395                           
  2396                           ;main.c: 127: nrf24l01SendString((char *) "/COUNT/");
  2397  00B7  3051               	movlw	low (STR_2| (0+32768))
  2398  00B8  0020               	movlb	0	; select bank0
  2399  00B9  00A0               	movwf	nrf24l01SendString@string
  2400  00BA  3085               	movlw	high (STR_2| (0+32768))
  2401  00BB  00A1               	movwf	nrf24l01SendString@string+1
  2402  00BC  244C               	fcall	_nrf24l01SendString
  2403                           
  2404                           ;main.c: 128: nrf24l01SendString(buffer);
  2405  00BD  304C               	movlw	low _buffer
  2406  00BE  0020               	movlb	0	; select bank0
  2407  00BF  00A0               	movwf	nrf24l01SendString@string
  2408  00C0  3000               	movlw	high _buffer
  2409  00C1  00A1               	movwf	nrf24l01SendString@string+1
  2410  00C2  244C               	fcall	_nrf24l01SendString
  2411                           
  2412                           ;main.c: 130: nrf24l01SendEnd();
  2413  00C3  24FB               	fcall	_nrf24l01SendEnd
  2414                           
  2415                           ;main.c: 132: mode = 12;
  2416  00C4  300C               	movlw	12
  2417  00C5  0020               	movlb	0	; select bank0
  2418  00C6  00BE               	movwf	??_loop
  2419  00C7  083E               	movf	??_loop,w
  2420  00C8  00FD               	movwf	_mode
  2421                           
  2422                           ;main.c: 133: break;
  2423  00C9  0008               	return
  2424  00CA                     l1749:	
  2425                           ;main.c: 135: case 12:
  2426                           
  2427                           
  2428                           ;main.c: 136: startADC(3);
  2429  00CA  3003               	movlw	3
  2430  00CB  23F1               	fcall	_startADC
  2431                           
  2432                           ;main.c: 145: nextMode = 13;
  2433  00CC  300D               	movlw	13
  2434  00CD  0020               	movlb	0	; select bank0
  2435  00CE  00BE               	movwf	??_loop
  2436  00CF  083E               	movf	??_loop,w
  2437  00D0  00D5               	movwf	_nextMode
  2438                           
  2439                           ;main.c: 146: break;
  2440  00D1  0008               	return
  2441  00D2                     l1753:	
  2442                           ;main.c: 148: case 13:
  2443                           
  2444                           
  2445                           ;main.c: 149: startADC(7);
  2446  00D2  3007               	movlw	7
  2447  00D3  23F1               	fcall	_startADC
  2448                           
  2449                           ;main.c: 150: nextMode = 15;
  2450  00D4  300F               	movlw	15
  2451  00D5  0020               	movlb	0	; select bank0
  2452  00D6  00BE               	movwf	??_loop
  2453  00D7  083E               	movf	??_loop,w
  2454  00D8  00D5               	movwf	_nextMode
  2455                           
  2456                           ;main.c: 151: break;
  2457  00D9  0008               	return
  2458  00DA                     l1757:	
  2459                           ;main.c: 153: case 15:
  2460                           
  2461                           
  2462                           ;main.c: 154: startADC(29);
  2463  00DA  301D               	movlw	29
  2464  00DB  23F1               	fcall	_startADC
  2465                           
  2466                           ;main.c: 155: nextMode = 14;
  2467  00DC  300E               	movlw	14
  2468  00DD  0020               	movlb	0	; select bank0
  2469  00DE  00BE               	movwf	??_loop
  2470  00DF  083E               	movf	??_loop,w
  2471  00E0  00D5               	movwf	_nextMode
  2472                           
  2473                           ;main.c: 156: break;
  2474  00E1  0008               	return
  2475  00E2                     l1761:	
  2476                           ;main.c: 158: case 14:
  2477                           
  2478                           
  2479                           ;main.c: 159: startADC(31);
  2480  00E2  301F               	movlw	31
  2481  00E3  23F1               	fcall	_startADC
  2482                           
  2483                           ;main.c: 160: nextMode = 11;
  2484  00E4  300B               	movlw	11
  2485  00E5  0020               	movlb	0	; select bank0
  2486  00E6  00BE               	movwf	??_loop
  2487  00E7  083E               	movf	??_loop,w
  2488  00E8  00D5               	movwf	_nextMode
  2489                           
  2490                           ;main.c: 161: break;
  2491  00E9  0008               	return
  2492  00EA                     l1765:	
  2493                           ;main.c: 166: case 3:
  2494                           
  2495                           ;main.c: 165: switch (ADCON0bits.CHS){
  2496                           
  2497                           ;main.c: 163: case 3:
  2498                           
  2499                           
  2500                           ;main.c: 168: adcSum/= 2505;
  2501  00EA  3000               	movlw	0
  2502  00EB  0020               	movlb	0	; select bank0
  2503  00EC  00A3               	movwf	___lldiv@divisor+3
  2504  00ED  3000               	movlw	0
  2505  00EE  00A2               	movwf	___lldiv@divisor+2
  2506  00EF  3009               	movlw	9
  2507  00F0  00A1               	movwf	___lldiv@divisor+1
  2508  00F1  30C9               	movlw	201
  2509  00F2  2939               	goto	L4
  2510  00F3                     l1767:	
  2511                           ;main.c: 171: case 7:
  2512                           
  2513                           ;main.c: 169: break;
  2514                           
  2515                           
  2516                           ;main.c: 173: adcSum/= 2500;
  2517  00F3  3000               	movlw	0
  2518  00F4  0020               	movlb	0	; select bank0
  2519  00F5  00A3               	movwf	___lldiv@divisor+3
  2520  00F6  3000               	movlw	0
  2521  00F7  00A2               	movwf	___lldiv@divisor+2
  2522  00F8  3009               	movlw	9
  2523  00F9  00A1               	movwf	___lldiv@divisor+1
  2524  00FA  30C4               	movlw	196
  2525  00FB  2939               	goto	L4
  2526  00FC                     l1769:	
  2527                           ;main.c: 176: case 31:
  2528                           
  2529                           ;main.c: 174: break;
  2530                           
  2531                           
  2532                           ;main.c: 178: adcSum/= 2475;
  2533  00FC  3000               	movlw	0
  2534  00FD  0020               	movlb	0	; select bank0
  2535  00FE  00A3               	movwf	___lldiv@divisor+3
  2536  00FF  3000               	movlw	0
  2537  0100  00A2               	movwf	___lldiv@divisor+2
  2538  0101  3009               	movlw	9
  2539  0102  00A1               	movwf	___lldiv@divisor+1
  2540  0103  30AB               	movlw	171
  2541  0104  2939               	goto	L4
  2542  0105                     l1771:	
  2543                           ;main.c: 181: case 29:
  2544                           
  2545                           ;main.c: 179: break;
  2546                           
  2547                           
  2548                           ;main.c: 182: adcSum/= 2089;
  2549  0105  3000               	movlw	0
  2550  0106  0020               	movlb	0	; select bank0
  2551  0107  00A3               	movwf	___lldiv@divisor+3
  2552  0108  3000               	movlw	0
  2553  0109  00A2               	movwf	___lldiv@divisor+2
  2554  010A  3008               	movlw	8
  2555  010B  00A1               	movwf	___lldiv@divisor+1
  2556  010C  3029               	movlw	41
  2557  010D  00A0               	movwf	___lldiv@divisor
  2558  010E  0848               	movf	_adcSum+3,w
  2559  010F  00A7               	movwf	___lldiv@dividend+3
  2560  0110  0847               	movf	_adcSum+2,w
  2561  0111  00A6               	movwf	___lldiv@dividend+2
  2562  0112  0846               	movf	_adcSum+1,w
  2563  0113  00A5               	movwf	___lldiv@dividend+1
  2564  0114  0845               	movf	_adcSum,w
  2565  0115  00A4               	movwf	___lldiv@dividend
  2566  0116  22FB               	fcall	___lldiv
  2567  0117  0020               	movlb	0	; select bank0
  2568  0118  0823               	movf	?___lldiv+3,w
  2569  0119  00C8               	movwf	_adcSum+3
  2570  011A  0822               	movf	?___lldiv+2,w
  2571  011B  00C7               	movwf	_adcSum+2
  2572  011C  0821               	movf	?___lldiv+1,w
  2573  011D  00C6               	movwf	_adcSum+1
  2574  011E  0820               	movf	?___lldiv,w
  2575  011F  00C5               	movwf	_adcSum
  2576                           
  2577                           ;main.c: 183: adcSum-= 40;
  2578  0120  3028               	movlw	40
  2579  0121  00BE               	movwf	??_loop
  2580  0122  3000               	movlw	0
  2581  0123  00BF               	movwf	??_loop+1
  2582  0124  3000               	movlw	0
  2583  0125  00C0               	movwf	??_loop+2
  2584  0126  3000               	movlw	0
  2585  0127  00C1               	movwf	??_loop+3
  2586  0128  083E               	movf	??_loop,w
  2587  0129  02C5               	subwf	_adcSum,f
  2588  012A  083F               	movf	??_loop+1,w
  2589  012B  3BC6               	subwfb	_adcSum+1,f
  2590  012C  0840               	movf	??_loop+2,w
  2591  012D  3BC7               	subwfb	_adcSum+2,f
  2592  012E  0841               	movf	??_loop+3,w
  2593  012F  3BC8               	subwfb	_adcSum+3,f
  2594                           
  2595                           ;main.c: 184: break;
  2596  0130  295E               	goto	l1781
  2597  0131                     l1775:	
  2598                           ;main.c: 186: default:
  2599                           
  2600                           
  2601                           ;main.c: 187: adcSum/= 255;
  2602  0131  3000               	movlw	0
  2603  0132  0020               	movlb	0	; select bank0
  2604  0133  00A3               	movwf	___lldiv@divisor+3
  2605  0134  3000               	movlw	0
  2606  0135  00A2               	movwf	___lldiv@divisor+2
  2607  0136  3000               	movlw	0
  2608  0137  00A1               	movwf	___lldiv@divisor+1
  2609  0138  30FF               	movlw	255
  2610  0139                     L4:	
  2611  0139  00A0               	movwf	___lldiv@divisor
  2612  013A  0848               	movf	_adcSum+3,w
  2613  013B  00A7               	movwf	___lldiv@dividend+3
  2614  013C  0847               	movf	_adcSum+2,w
  2615  013D  00A6               	movwf	___lldiv@dividend+2
  2616  013E  0846               	movf	_adcSum+1,w
  2617  013F  00A5               	movwf	___lldiv@dividend+1
  2618  0140  0845               	movf	_adcSum,w
  2619  0141  00A4               	movwf	___lldiv@dividend
  2620  0142  22FB               	fcall	___lldiv
  2621  0143  0020               	movlb	0	; select bank0
  2622  0144  0823               	movf	?___lldiv+3,w
  2623  0145  00C8               	movwf	_adcSum+3
  2624  0146  0822               	movf	?___lldiv+2,w
  2625  0147  00C7               	movwf	_adcSum+2
  2626  0148  0821               	movf	?___lldiv+1,w
  2627  0149  00C6               	movwf	_adcSum+1
  2628  014A  0820               	movf	?___lldiv,w
  2629  014B  00C5               	movwf	_adcSum
  2630                           
  2631                           ;main.c: 189: }
  2632                           
  2633                           ;main.c: 188: break;
  2634  014C  295E               	goto	l1781
  2635  014D                     l1779:	
  2636  014D  0021               	movlb	1	; select bank1
  2637  014E  0C1D               	rrf	29,w	;volatile
  2638  014F  0C89               	rrf	9,f
  2639  0150  391F               	andlw	31
  2640                           
  2641                           ; Switch size 1, requested type "space"
  2642                           ; Number of cases is 4, Range of values is 3 to 31
  2643                           ; switch strategies available:
  2644                           ; Name         Instructions Cycles
  2645                           ; simple_byte           13     7 (average)
  2646                           ; direct_byte           67     9 (fixed)
  2647                           ; jumptable            263     9 (fixed)
  2648                           ;	Chosen strategy is simple_byte
  2649  0151  3A03               	xorlw	3	; case 3
  2650  0152  1903               	skipnz
  2651  0153  28EA               	goto	l1765
  2652  0154  3A04               	xorlw	4	; case 7
  2653  0155  1903               	skipnz
  2654  0156  28F3               	goto	l1767
  2655  0157  3A1A               	xorlw	26	; case 29
  2656  0158  1903               	skipnz
  2657  0159  2905               	goto	l1771
  2658  015A  3A02               	xorlw	2	; case 31
  2659  015B  1903               	skipnz
  2660  015C  28FC               	goto	l1769
  2661  015D  2931               	goto	l1775
  2662  015E                     l1781:	
  2663                           
  2664                           ;main.c: 192: _itoa(buffer, adcSum, 10);
  2665  015E  0020               	movlb	0	; select bank0
  2666  015F  0846               	movf	_adcSum+1,w
  2667  0160  00B9               	movwf	__itoa@number+1
  2668  0161  0845               	movf	_adcSum,w
  2669  0162  00B8               	movwf	__itoa@number
  2670  0163  300A               	movlw	10
  2671  0164  00BE               	movwf	??_loop
  2672  0165  083E               	movf	??_loop,w
  2673  0166  00BA               	movwf	__itoa@base
  2674  0167  304C               	movlw	(low (_buffer| 0))& (0+255)
  2675  0168  250D               	fcall	__itoa
  2676                           
  2677                           ;main.c: 193: _itoa(byte, ADCON0bits.CHS, 10);
  2678  0169  0021               	movlb	1	; select bank1
  2679  016A  0C1D               	rrf	29,w	;volatile
  2680  016B  0C89               	rrf	9,f
  2681  016C  391F               	andlw	31
  2682  016D  0020               	movlb	0	; select bank0
  2683  016E  00BE               	movwf	??_loop
  2684  016F  01BF               	clrf	??_loop+1
  2685  0170  083E               	movf	??_loop,w
  2686  0171  00B8               	movwf	__itoa@number
  2687  0172  083F               	movf	??_loop+1,w
  2688  0173  00B9               	movwf	__itoa@number+1
  2689  0174  300A               	movlw	10
  2690  0175  00C0               	movwf	??_loop+2
  2691  0176  0840               	movf	??_loop+2,w
  2692  0177  00BA               	movwf	__itoa@base
  2693  0178  3052               	movlw	(low (_byte| 0))& (0+255)
  2694  0179  250D               	fcall	__itoa
  2695                           
  2696                           ;main.c: 195: nrf24l01SendStart();
  2697  017A  2560               	fcall	_nrf24l01SendStart
  2698                           
  2699                           ;main.c: 196: nrf24l01SendString((char *) "/ADC");
  2700  017B  3080               	movlw	low (STR_3| (0+32768))
  2701  017C  0020               	movlb	0	; select bank0
  2702  017D  00A0               	movwf	nrf24l01SendString@string
  2703  017E  3085               	movlw	high (STR_3| (0+32768))
  2704  017F  00A1               	movwf	nrf24l01SendString@string+1
  2705  0180  244C               	fcall	_nrf24l01SendString
  2706                           
  2707                           ;main.c: 197: nrf24l01SendString(byte);
  2708  0181  3052               	movlw	low _byte
  2709  0182  0020               	movlb	0	; select bank0
  2710  0183  00A0               	movwf	nrf24l01SendString@string
  2711  0184  3000               	movlw	high _byte
  2712  0185  00A1               	movwf	nrf24l01SendString@string+1
  2713  0186  244C               	fcall	_nrf24l01SendString
  2714                           
  2715                           ;main.c: 198: nrf24l01SendString((char *) "/");
  2716  0187  3057               	movlw	low ((STR_2+6)| (0+32768))
  2717  0188  0020               	movlb	0	; select bank0
  2718  0189  00A0               	movwf	nrf24l01SendString@string
  2719  018A  3085               	movlw	high ((STR_2+6)| (0+32768))
  2720  018B  00A1               	movwf	nrf24l01SendString@string+1
  2721  018C  244C               	fcall	_nrf24l01SendString
  2722                           
  2723                           ;main.c: 199: nrf24l01SendString(buffer);
  2724  018D  304C               	movlw	low _buffer
  2725  018E  0020               	movlb	0	; select bank0
  2726  018F  00A0               	movwf	nrf24l01SendString@string
  2727  0190  3000               	movlw	high _buffer
  2728  0191  00A1               	movwf	nrf24l01SendString@string+1
  2729  0192  244C               	fcall	_nrf24l01SendString
  2730                           
  2731                           ;main.c: 201: nrf24l01SendEnd();
  2732  0193  24FB               	fcall	_nrf24l01SendEnd
  2733                           
  2734                           ;main.c: 203: mode = nextMode;
  2735  0194  0020               	movlb	0	; select bank0
  2736  0195  0855               	movf	_nextMode,w
  2737  0196  00BE               	movwf	??_loop
  2738  0197  083E               	movf	??_loop,w
  2739  0198  00FD               	movwf	_mode
  2740                           
  2741                           ;main.c: 206: }
  2742                           
  2743                           ;main.c: 204: break;
  2744  0199  0008               	return
  2745  019A                     l1799:	
  2746  019A  087D               	movf	_mode,w
  2747                           
  2748                           ; Switch size 1, requested type "space"
  2749                           ; Number of cases is 9, Range of values is 1 to 15
  2750                           ; switch strategies available:
  2751                           ; Name         Instructions Cycles
  2752                           ; simple_byte           28    15 (average)
  2753                           ; direct_byte           39     9 (fixed)
  2754                           ; jumptable            263     9 (fixed)
  2755                           ;	Chosen strategy is simple_byte
  2756  019B  3A01               	xorlw	1	; case 1
  2757  019C  1903               	skipnz
  2758  019D  2856               	goto	l1699
  2759  019E  3A02               	xorlw	2	; case 3
  2760  019F  1903               	skipnz
  2761  01A0  294D               	goto	l1779
  2762  01A1  3A07               	xorlw	7	; case 4
  2763  01A2  1903               	skipnz
  2764  01A3  28A6               	goto	l1735
  2765  01A4  3A0E               	xorlw	14	; case 10
  2766  01A5  1903               	skipnz
  2767  01A6  2877               	goto	l1719
  2768  01A7  3A01               	xorlw	1	; case 11
  2769  01A8  1903               	skipnz
  2770  01A9  289E               	goto	l172
  2771  01AA  3A07               	xorlw	7	; case 12
  2772  01AB  1903               	skipnz
  2773  01AC  28CA               	goto	l1749
  2774  01AD  3A01               	xorlw	1	; case 13
  2775  01AE  1903               	skipnz
  2776  01AF  28D2               	goto	l1753
  2777  01B0  3A03               	xorlw	3	; case 14
  2778  01B1  1903               	skipnz
  2779  01B2  28E2               	goto	l1761
  2780  01B3  3A01               	xorlw	1	; case 15
  2781  01B4  1903               	skipnz
  2782  01B5  28DA               	goto	l1757
  2783  01B6  29B7               	goto	l186
  2784  01B7                     l186:	
  2785  01B7  0008               	return
  2786  01B8                     __end_of_loop:	
  2787                           
  2788                           	psect	text6
  2789  03F1                     __ptext6:	
  2790 ;; *************** function _startADC *****************
  2791 ;; Defined at:
  2792 ;;		line 64 in file "main.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  channel         1    wreg     unsigned char 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  channel         1    1[BANK0 ] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMMON   BANK0   BANK1
  2806 ;;      Params:         0       0       0
  2807 ;;      Locals:         0       1       0
  2808 ;;      Temps:          0       1       0
  2809 ;;      Totals:         0       2       0
  2810 ;;Total ram usage:        2 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    4
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_loop
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           
  2821                           ;psect for function _startADC
  2822  03F1                     _startADC:	
  2823                           
  2824                           ;incstack = 0
  2825                           ; Regs used in _startADC: [wreg+status,2+status,0]
  2826                           ;startADC@channel stored from wreg
  2827  03F1  0020               	movlb	0	; select bank0
  2828  03F2  00A1               	movwf	startADC@channel
  2829                           
  2830                           ;main.c: 65: adcSum = 0;
  2831  03F3  3000               	movlw	0
  2832  03F4  00C8               	movwf	_adcSum+3
  2833  03F5  3000               	movlw	0
  2834  03F6  00C7               	movwf	_adcSum+2
  2835  03F7  3000               	movlw	0
  2836  03F8  00C6               	movwf	_adcSum+1
  2837  03F9  3000               	movlw	0
  2838  03FA  00C5               	movwf	_adcSum
  2839                           
  2840                           ;main.c: 66: adcLoop = 255;
  2841  03FB  30FF               	movlw	255
  2842  03FC  00A0               	movwf	??_startADC
  2843  03FD  0820               	movf	??_startADC,w
  2844  03FE  00FC               	movwf	_adcLoop
  2845                           
  2846                           ;main.c: 68: if (ADCON0bits.CHS != channel) {
  2847  03FF  0021               	movlb	1	; select bank1
  2848  0400  0C1D               	rrf	29,w	;volatile
  2849  0401  0C89               	rrf	9,f
  2850  0402  391F               	andlw	31
  2851  0403  0020               	movlb	0	; select bank0
  2852  0404  0621               	xorwf	startADC@channel,w
  2853  0405  1903               	skipnz
  2854  0406  2C17               	goto	l1465
  2855                           
  2856                           ;main.c: 69: ADCON0bits.CHS = channel;
  2857  0407  0821               	movf	startADC@channel,w
  2858  0408  00A0               	movwf	??_startADC
  2859  0409  0DA0               	rlf	??_startADC,f
  2860  040A  0DA0               	rlf	??_startADC,f
  2861  040B  0021               	movlb	1	; select bank1
  2862  040C  081D               	movf	29,w	;volatile
  2863  040D  0020               	movlb	0	; select bank0
  2864  040E  0620               	xorwf	??_startADC,w
  2865  040F  3983               	andlw	-125
  2866  0410  0620               	xorwf	??_startADC,w
  2867  0411  0021               	movlb	1	; select bank1
  2868  0412  009D               	movwf	29	;volatile
  2869                           
  2870                           ;main.c: 70: _delay((unsigned long)((200)*(16000000/4000000.0)));
  2871  0413  30A0               	movlw	160
  2872  0414                     u897:	
  2873  0414  3200               	nop2
  2874  0415  0B89               	decfsz	9,f
  2875  0416  2C14               	goto	u897
  2876  0417                     l1465:	
  2877                           
  2878                           ;main.c: 71: }
  2879                           ;main.c: 73: ADCON0bits.ADGO = 1;
  2880  0417  0021               	movlb	1	; select bank1
  2881  0418  149D               	bsf	29,1	;volatile
  2882                           
  2883                           ;main.c: 74: mode = 2;
  2884  0419  3002               	movlw	2
  2885  041A  0020               	movlb	0	; select bank0
  2886  041B  00A0               	movwf	??_startADC
  2887  041C  0820               	movf	??_startADC,w
  2888  041D  00FD               	movwf	_mode
  2889  041E  0008               	return
  2890  041F                     __end_of_startADC:	
  2891                           
  2892                           	psect	text7
  2893  0492                     __ptext7:	
  2894 ;; *************** function _nrf24l01SetRecieveMode *****************
  2895 ;; Defined at:
  2896 ;;		line 47 in file "nrf24l01.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;  config          1    1[BANK0 ] struct .
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, status,0, pclath, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMMON   BANK0   BANK1
  2910 ;;      Params:         0       0       0
  2911 ;;      Locals:         0       1       0
  2912 ;;      Temps:          0       1       0
  2913 ;;      Totals:         0       2       0
  2914 ;;Total ram usage:        2 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    6
  2917 ;; This function calls:
  2918 ;;		_nrf24l01Send
  2919 ;; This function is called by:
  2920 ;;		_loop
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           
  2925                           ;psect for function _nrf24l01SetRecieveMode
  2926  0492                     _nrf24l01SetRecieveMode:	
  2927                           
  2928                           ;nrf24l01.c: 49: PORTAbits.RA0 = 0;
  2929                           
  2930                           ;incstack = 0
  2931                           ; Regs used in _nrf24l01SetRecieveMode: [wreg+status,2+status,0+pclath+cstack]
  2932  0492  0020               	movlb	0	; select bank0
  2933  0493  100C               	bcf	12,0	;volatile
  2934                           
  2935                           ;nrf24l01.c: 51: _delay((unsigned long)((200)*(16000000/4000000.0)));
  2936  0494  30A0               	movlw	160
  2937  0495                     u907:	
  2938  0495  3200               	nop2
  2939  0496  0B89               	decfsz	9,f
  2940  0497  2C95               	goto	u907
  2941                           
  2942                           ;nrf24l01.c: 53: n_CONFIG_t config;
  2943                           ;nrf24l01.c: 54: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  2944  0498  01F1               	clrf	nrf24l01Send@data
  2945  0499  3000               	movlw	0
  2946  049A  253A               	fcall	_nrf24l01Send
  2947  049B  0020               	movlb	0	; select bank0
  2948  049C  00A0               	movwf	??_nrf24l01SetRecieveMode
  2949  049D  0820               	movf	??_nrf24l01SetRecieveMode,w
  2950  049E  00A1               	movwf	nrf24l01SetRecieveMode@config
  2951                           
  2952                           ;nrf24l01.c: 55: if (config.PRIM_RX == 0){
  2953  049F  1821               	btfsc	nrf24l01SetRecieveMode@config,0
  2954  04A0  0008               	return
  2955                           
  2956                           ;nrf24l01.c: 56: config.PRIM_RX = 1;
  2957  04A1  1421               	bsf	nrf24l01SetRecieveMode@config,0
  2958                           
  2959                           ;nrf24l01.c: 57: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2960  04A2  0821               	movf	nrf24l01SetRecieveMode@config,w
  2961  04A3  00A0               	movwf	??_nrf24l01SetRecieveMode
  2962  04A4  0820               	movf	??_nrf24l01SetRecieveMode,w
  2963  04A5  00F1               	movwf	nrf24l01Send@data
  2964  04A6  3020               	movlw	32
  2965  04A7  253A               	fcall	_nrf24l01Send
  2966                           
  2967                           ;nrf24l01.c: 58: PORTAbits.RA0 = 1;
  2968  04A8  0020               	movlb	0	; select bank0
  2969  04A9  140C               	bsf	12,0	;volatile
  2970                           
  2971                           ;nrf24l01.c: 59: _delay((unsigned long)((200)*(16000000/4000000.0)));
  2972  04AA  30A0               	movlw	160
  2973  04AB                     u917:	
  2974  04AB  3200               	nop2
  2975  04AC  0B89               	decfsz	9,f
  2976  04AD  2CAB               	goto	u917
  2977  04AE  0008               	return
  2978  04AF                     __end_of_nrf24l01SetRecieveMode:	
  2979                           
  2980                           	psect	text8
  2981  044C                     __ptext8:	
  2982 ;; *************** function _nrf24l01SendString *****************
  2983 ;; Defined at:
  2984 ;;		line 76 in file "nrf24l01.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;  string          2    0[BANK0 ] PTR unsigned char 
  2987 ;;		 -> STR_4(2), STR_3(5), byte(3), STR_2(8), 
  2988 ;;		 -> STR_1(7), buffer(6), 
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  i               1    5[BANK0 ] unsigned char 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMMON   BANK0   BANK1
  3000 ;;      Params:         0       2       0
  3001 ;;      Locals:         0       1       0
  3002 ;;      Temps:          0       3       0
  3003 ;;      Totals:         0       6       0
  3004 ;;Total ram usage:        6 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    5
  3007 ;; This function calls:
  3008 ;;		_nrf24l01SPISend
  3009 ;; This function is called by:
  3010 ;;		_loop
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           
  3015                           ;psect for function _nrf24l01SendString
  3016  044C                     _nrf24l01SendString:	
  3017                           
  3018                           ;nrf24l01.c: 77: unsigned char i;
  3019                           ;nrf24l01.c: 78: for (i = 0; string[i] != '\0'; i++){
  3020                           
  3021                           ;incstack = 0
  3022                           ; Regs used in _nrf24l01SendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3023  044C  0020               	movlb	0	; select bank0
  3024  044D  01A5               	clrf	nrf24l01SendString@i
  3025  044E                     l1493:	
  3026  044E  0821               	movf	nrf24l01SendString@string+1,w
  3027  044F  00A3               	movwf	??_nrf24l01SendString+1
  3028  0450  0820               	movf	nrf24l01SendString@string,w
  3029  0451  00A2               	movwf	??_nrf24l01SendString
  3030  0452  0825               	movf	nrf24l01SendString@i,w
  3031  0453  0722               	addwf	??_nrf24l01SendString,w
  3032  0454  0084               	movwf	4
  3033  0455  0823               	movf	??_nrf24l01SendString+1,w
  3034  0456  1803               	skipnc
  3035  0457  0A23               	incf	??_nrf24l01SendString+1,w
  3036  0458  0085               	movwf	5
  3037  0459  0012               	moviw fsr0++
  3038  045A  1903               	btfsc	3,2
  3039  045B  0008               	return
  3040                           
  3041                           ;nrf24l01.c: 79: nrf24l01SPISend(string[i]);
  3042  045C  0821               	movf	nrf24l01SendString@string+1,w
  3043  045D  00A3               	movwf	??_nrf24l01SendString+1
  3044  045E  0820               	movf	nrf24l01SendString@string,w
  3045  045F  00A2               	movwf	??_nrf24l01SendString
  3046  0460  0825               	movf	nrf24l01SendString@i,w
  3047  0461  0722               	addwf	??_nrf24l01SendString,w
  3048  0462  0084               	movwf	4
  3049  0463  0823               	movf	??_nrf24l01SendString+1,w
  3050  0464  1803               	skipnc
  3051  0465  0A23               	incf	??_nrf24l01SendString+1,w
  3052  0466  0085               	movwf	5
  3053  0467  0800               	movf	0,w	;code access
  3054  0468  2546               	fcall	_nrf24l01SPISend
  3055  0469  3001               	movlw	1
  3056  046A  0020               	movlb	0	; select bank0
  3057  046B  00A2               	movwf	??_nrf24l01SendString
  3058  046C  0822               	movf	??_nrf24l01SendString,w
  3059  046D  07A5               	addwf	nrf24l01SendString@i,f
  3060  046E  2C4E               	goto	l1493
  3061  046F                     __end_of_nrf24l01SendString:	
  3062                           
  3063                           	psect	text9
  3064  0560                     __ptext9:	
  3065 ;; *************** function _nrf24l01SendStart *****************
  3066 ;; Defined at:
  3067 ;;		line 65 in file "nrf24l01.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;		None
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;		None
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      void 
  3074 ;; Registers used:
  3075 ;;		wreg, status,2, status,0, pclath, cstack
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMMON   BANK0   BANK1
  3081 ;;      Params:         0       0       0
  3082 ;;      Locals:         0       0       0
  3083 ;;      Temps:          0       0       0
  3084 ;;      Totals:         0       0       0
  3085 ;;Total ram usage:        0 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    7
  3088 ;; This function calls:
  3089 ;;		_nrf24l01SPISend
  3090 ;;		_nrf24l01SPIStart
  3091 ;;		_nrf24l01SendFlash
  3092 ;;		_nrf24l01SetTransmitMode
  3093 ;; This function is called by:
  3094 ;;		_loop
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           
  3099                           ;psect for function _nrf24l01SendStart
  3100  0560                     _nrf24l01SendStart:	
  3101                           
  3102                           ;nrf24l01.c: 67: nrf24l01SetTransmitMode();
  3103                           
  3104                           ;incstack = 0
  3105                           ; Regs used in _nrf24l01SendStart: [wreg+status,2+status,0+pclath+cstack]
  3106  0560  24AF               	fcall	_nrf24l01SetTransmitMode
  3107                           
  3108                           ;nrf24l01.c: 69: nrf24l01SPIStart();
  3109  0561  2567               	fcall	_nrf24l01SPIStart
  3110                           
  3111                           ;nrf24l01.c: 71: nrf24l01SPISend(0b10100000);
  3112  0562  30A0               	movlw	160
  3113  0563  2546               	fcall	_nrf24l01SPISend
  3114                           
  3115                           ;nrf24l01.c: 73: nrf24l01SendFlash(0);
  3116  0564  3000               	movlw	0
  3117  0565  24CA               	fcall	_nrf24l01SendFlash
  3118  0566  0008               	return
  3119  0567                     __end_of_nrf24l01SendStart:	
  3120                           
  3121                           	psect	text10
  3122  04AF                     __ptext10:	
  3123 ;; *************** function _nrf24l01SetTransmitMode *****************
  3124 ;; Defined at:
  3125 ;;		line 31 in file "nrf24l01.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;		None
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;  config          1    1[BANK0 ] struct .
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      void 
  3132 ;; Registers used:
  3133 ;;		wreg, status,2, status,0, pclath, cstack
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMMON   BANK0   BANK1
  3139 ;;      Params:         0       0       0
  3140 ;;      Locals:         0       1       0
  3141 ;;      Temps:          0       1       0
  3142 ;;      Totals:         0       2       0
  3143 ;;Total ram usage:        2 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    6
  3146 ;; This function calls:
  3147 ;;		_nrf24l01Send
  3148 ;; This function is called by:
  3149 ;;		_nrf24l01SendStart
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           
  3154                           ;psect for function _nrf24l01SetTransmitMode
  3155  04AF                     _nrf24l01SetTransmitMode:	
  3156                           
  3157                           ;nrf24l01.c: 33: PORTAbits.RA0 = 0;
  3158                           
  3159                           ;incstack = 0
  3160                           ; Regs used in _nrf24l01SetTransmitMode: [wreg+status,2+status,0+pclath+cstack]
  3161  04AF  0020               	movlb	0	; select bank0
  3162  04B0  100C               	bcf	12,0	;volatile
  3163                           
  3164                           ;nrf24l01.c: 35: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3165  04B1  30A0               	movlw	160
  3166  04B2                     u927:	
  3167  04B2  3200               	nop2
  3168  04B3  0B89               	decfsz	9,f
  3169  04B4  2CB2               	goto	u927
  3170                           
  3171                           ;nrf24l01.c: 37: n_CONFIG_t config;
  3172                           ;nrf24l01.c: 38: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  3173  04B5  01F1               	clrf	nrf24l01Send@data
  3174  04B6  3000               	movlw	0
  3175  04B7  253A               	fcall	_nrf24l01Send
  3176  04B8  0020               	movlb	0	; select bank0
  3177  04B9  00A0               	movwf	??_nrf24l01SetTransmitMode
  3178  04BA  0820               	movf	??_nrf24l01SetTransmitMode,w
  3179  04BB  00A1               	movwf	nrf24l01SetTransmitMode@config
  3180                           
  3181                           ;nrf24l01.c: 39: if (config.PRIM_RX == 1){
  3182  04BC  1C21               	btfss	nrf24l01SetTransmitMode@config,0
  3183  04BD  0008               	return
  3184                           
  3185                           ;nrf24l01.c: 40: config.PRIM_RX = 0;
  3186  04BE  1021               	bcf	nrf24l01SetTransmitMode@config,0
  3187                           
  3188                           ;nrf24l01.c: 41: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3189  04BF  0821               	movf	nrf24l01SetTransmitMode@config,w
  3190  04C0  00A0               	movwf	??_nrf24l01SetTransmitMode
  3191  04C1  0820               	movf	??_nrf24l01SetTransmitMode,w
  3192  04C2  00F1               	movwf	nrf24l01Send@data
  3193  04C3  3020               	movlw	32
  3194  04C4  253A               	fcall	_nrf24l01Send
  3195                           
  3196                           ;nrf24l01.c: 42: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3197  04C5  30A0               	movlw	160
  3198  04C6                     u937:	
  3199  04C6  3200               	nop2
  3200  04C7  0B89               	decfsz	9,f
  3201  04C8  2CC6               	goto	u937
  3202  04C9  0008               	return
  3203  04CA                     __end_of_nrf24l01SetTransmitMode:	
  3204                           
  3205                           	psect	text11
  3206  04CA                     __ptext11:	
  3207 ;; *************** function _nrf24l01SendFlash *****************
  3208 ;; Defined at:
  3209 ;;		line 83 in file "nrf24l01.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;  offset          1    wreg     unsigned char 
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;  offset          1   10[BANK0 ] unsigned char 
  3214 ;;  btye            1   12[BANK0 ] unsigned char 
  3215 ;;  i               1   11[BANK0 ] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  1    wreg      void 
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0, pclath, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMMON   BANK0   BANK1
  3225 ;;      Params:         0       0       0
  3226 ;;      Locals:         0       3       0
  3227 ;;      Temps:          0       1       0
  3228 ;;      Totals:         0       4       0
  3229 ;;Total ram usage:        4 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    5
  3232 ;; This function calls:
  3233 ;;		_nrf24l01SPISend
  3234 ;;		_read_flashmem
  3235 ;; This function is called by:
  3236 ;;		_loop
  3237 ;;		_nrf24l01SendStart
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241                           
  3242                           ;psect for function _nrf24l01SendFlash
  3243  04CA                     _nrf24l01SendFlash:	
  3244                           
  3245                           ;incstack = 0
  3246                           ; Regs used in _nrf24l01SendFlash: [wreg+status,2+status,0+pclath+cstack]
  3247                           ;nrf24l01SendFlash@offset stored from wreg
  3248  04CA  0020               	movlb	0	; select bank0
  3249  04CB  00AA               	movwf	nrf24l01SendFlash@offset
  3250                           
  3251                           ;nrf24l01.c: 85: unsigned char btye = 1;
  3252  04CC  01AC               	clrf	nrf24l01SendFlash@btye
  3253  04CD  0AAC               	incf	nrf24l01SendFlash@btye,f
  3254                           
  3255                           ;nrf24l01.c: 86: unsigned char i = 0;
  3256  04CE  01AB               	clrf	nrf24l01SendFlash@i
  3257  04CF                     l1425:	
  3258                           ;nrf24l01.c: 88: while (1){
  3259                           
  3260                           
  3261                           ;nrf24l01.c: 89: btye = read_flashmem((unsigned) (offset + i));
  3262  04CF  082A               	movf	nrf24l01SendFlash@offset,w
  3263  04D0  072B               	addwf	nrf24l01SendFlash@i,w
  3264  04D1  00A0               	movwf	read_flashmem@offset
  3265  04D2  01A1               	clrf	read_flashmem@offset+1
  3266  04D3  0DA1               	rlf	read_flashmem@offset+1,f
  3267  04D4  23BF               	fcall	_read_flashmem
  3268  04D5  0020               	movlb	0	; select bank0
  3269  04D6  0820               	movf	?_read_flashmem,w
  3270  04D7  00A9               	movwf	??_nrf24l01SendFlash
  3271  04D8  0829               	movf	??_nrf24l01SendFlash,w
  3272  04D9  00AC               	movwf	nrf24l01SendFlash@btye
  3273                           
  3274                           ;nrf24l01.c: 91: if (btye == '\0'){
  3275  04DA  082C               	movf	nrf24l01SendFlash@btye,w
  3276  04DB  1903               	btfsc	3,2
  3277  04DC  0008               	return
  3278                           
  3279                           ;nrf24l01.c: 93: }
  3280                           ;nrf24l01.c: 95: nrf24l01SPISend(btye);
  3281                           
  3282                           ;nrf24l01.c: 92: break;
  3283  04DD  082C               	movf	nrf24l01SendFlash@btye,w
  3284  04DE  2546               	fcall	_nrf24l01SPISend
  3285                           
  3286                           ;nrf24l01.c: 96: i++;
  3287  04DF  3001               	movlw	1
  3288  04E0  0020               	movlb	0	; select bank0
  3289  04E1  00A9               	movwf	??_nrf24l01SendFlash
  3290  04E2  0829               	movf	??_nrf24l01SendFlash,w
  3291  04E3  07AB               	addwf	nrf24l01SendFlash@i,f
  3292  04E4  2CCF               	goto	l1425
  3293  04E5                     __end_of_nrf24l01SendFlash:	
  3294                           
  3295                           	psect	text12
  3296  03BF                     __ptext12:	
  3297 ;; *************** function _read_flashmem *****************
  3298 ;; Defined at:
  3299 ;;		line 59 in file "flash.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;  offset          2    0[BANK0 ] unsigned int 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;  address         2    7[BANK0 ] unsigned int 
  3304 ;;  result          2    5[BANK0 ] unsigned int 
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  2    0[BANK0 ] unsigned int 
  3307 ;; Registers used:
  3308 ;;		wreg, status,2, status,0
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMMON   BANK0   BANK1
  3314 ;;      Params:         0       2       0
  3315 ;;      Locals:         0       4       0
  3316 ;;      Temps:          0       3       0
  3317 ;;      Totals:         0       9       0
  3318 ;;Total ram usage:        9 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; Hardware stack levels required when called:    4
  3321 ;; This function calls:
  3322 ;;		Nothing
  3323 ;; This function is called by:
  3324 ;;		_loop
  3325 ;;		_main
  3326 ;;		_nrf24l01SendFlash
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           
  3331                           ;psect for function _read_flashmem
  3332  03BF                     _read_flashmem:	
  3333                           
  3334                           ;flash.c: 61: unsigned int address;
  3335                           ;flash.c: 63: INTCONbits.GIE = 0;
  3336                           
  3337                           ;incstack = 0
  3338                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  3339  03BF  138B               	bcf	11,7	;volatile
  3340                           
  3341                           ;flash.c: 65: PMCON1 = 0x00;
  3342  03C0  0023               	movlb	3	; select bank3
  3343  03C1  0195               	clrf	21	;volatile
  3344                           
  3345                           ;flash.c: 67: address = (0x800U-32) + offset;
  3346  03C2  0020               	movlb	0	; select bank0
  3347  03C3  0820               	movf	read_flashmem@offset,w
  3348  03C4  3EE0               	addlw	224
  3349  03C5  00A7               	movwf	read_flashmem@address
  3350  03C6  3007               	movlw	7
  3351  03C7  3D21               	addwfc	read_flashmem@offset+1,w
  3352  03C8  00A8               	movwf	read_flashmem@address+1
  3353                           
  3354                           ;flash.c: 68: PMADRL = (char) (address >> 0);
  3355  03C9  0827               	movf	read_flashmem@address,w
  3356  03CA  0023               	movlb	3	; select bank3
  3357  03CB  0091               	movwf	17	;volatile
  3358                           
  3359                           ;flash.c: 69: PMADRH = (char) (address >> 8);
  3360  03CC  0020               	movlb	0	; select bank0
  3361  03CD  0828               	movf	read_flashmem@address+1,w
  3362  03CE  0023               	movlb	3	; select bank3
  3363  03CF  0092               	movwf	18	;volatile
  3364                           
  3365                           ;flash.c: 71: PMCON1bits.RD = 1;
  3366  03D0  1415               	bsf	21,0	;volatile
  3367                           
  3368                           ;flash.c: 73: __nop();
  3369  03D1  0000               	nop
  3370                           
  3371                           ;flash.c: 74: __nop();
  3372  03D2  0000               	nop
  3373                           
  3374                           ;flash.c: 76: unsigned int result = 0;
  3375  03D3  0020               	movlb	0	; select bank0
  3376  03D4  01A5               	clrf	read_flashmem@result
  3377  03D5  01A6               	clrf	read_flashmem@result+1
  3378                           
  3379                           ;flash.c: 77: result = PMDATL;
  3380  03D6  0023               	movlb	3	; select bank3
  3381  03D7  0813               	movf	19,w	;volatile
  3382  03D8  0020               	movlb	0	; select bank0
  3383  03D9  00A2               	movwf	??_read_flashmem
  3384  03DA  01A3               	clrf	??_read_flashmem+1
  3385  03DB  0822               	movf	??_read_flashmem,w
  3386  03DC  00A5               	movwf	read_flashmem@result
  3387  03DD  0823               	movf	??_read_flashmem+1,w
  3388  03DE  00A6               	movwf	read_flashmem@result+1
  3389                           
  3390                           ;flash.c: 78: result|= ( (unsigned) (PMDATH) << 8);
  3391  03DF  0023               	movlb	3	; select bank3
  3392  03E0  0814               	movf	20,w	;volatile
  3393  03E1  0020               	movlb	0	; select bank0
  3394  03E2  00A2               	movwf	??_read_flashmem
  3395  03E3  01A3               	clrf	??_read_flashmem+1
  3396  03E4  0822               	movf	??_read_flashmem,w
  3397  03E5  00A3               	movwf	??_read_flashmem+1
  3398  03E6  01A2               	clrf	??_read_flashmem
  3399  03E7  0822               	movf	??_read_flashmem,w
  3400  03E8  04A5               	iorwf	read_flashmem@result,f
  3401  03E9  0823               	movf	??_read_flashmem+1,w
  3402  03EA  04A6               	iorwf	read_flashmem@result+1,f
  3403                           
  3404                           ;flash.c: 80: INTCONbits.GIE = 1;
  3405  03EB  178B               	bsf	11,7	;volatile
  3406                           
  3407                           ;flash.c: 82: return result;
  3408  03EC  0826               	movf	read_flashmem@result+1,w
  3409  03ED  00A1               	movwf	?_read_flashmem+1
  3410  03EE  0825               	movf	read_flashmem@result,w
  3411  03EF  00A0               	movwf	?_read_flashmem
  3412  03F0  0008               	return
  3413  03F1                     __end_of_read_flashmem:	
  3414                           
  3415                           	psect	text13
  3416  04FB                     __ptext13:	
  3417 ;; *************** function _nrf24l01SendEnd *****************
  3418 ;; Defined at:
  3419 ;;		line 100 in file "nrf24l01.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;		None
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;		None
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  1    wreg      void 
  3426 ;; Registers used:
  3427 ;;		wreg, status,2, status,0, pclath, cstack
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMMON   BANK0   BANK1
  3433 ;;      Params:         0       0       0
  3434 ;;      Locals:         0       0       0
  3435 ;;      Temps:          0       2       0
  3436 ;;      Totals:         0       2       0
  3437 ;;Total ram usage:        2 bytes
  3438 ;; Hardware stack levels used:    1
  3439 ;; Hardware stack levels required when called:    5
  3440 ;; This function calls:
  3441 ;;		_nrf24l01SPIEnd
  3442 ;; This function is called by:
  3443 ;;		_loop
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           
  3448                           ;psect for function _nrf24l01SendEnd
  3449  04FB                     _nrf24l01SendEnd:	
  3450                           
  3451                           ;nrf24l01.c: 102: nrf24l01SPIEnd();
  3452                           
  3453                           ;incstack = 0
  3454                           ; Regs used in _nrf24l01SendEnd: [wreg+status,2+status,0+pclath+cstack]
  3455  04FB  256E               	fcall	_nrf24l01SPIEnd
  3456                           
  3457                           ;nrf24l01.c: 104: PORTAbits.RA0 = 1;
  3458  04FC  0020               	movlb	0	; select bank0
  3459  04FD  140C               	bsf	12,0	;volatile
  3460                           
  3461                           ;nrf24l01.c: 107: _delay((unsigned long)((100)*(16000000/4000.0)));
  3462  04FE  3003               	movlw	3
  3463  04FF  0020               	movlb	0	; select bank0
  3464  0500  00A1               	movwf	??_nrf24l01SendEnd+1
  3465  0501  3008               	movlw	8
  3466  0502  00A0               	movwf	??_nrf24l01SendEnd
  3467  0503  3077               	movlw	119
  3468  0504                     u947:	
  3469  0504  0B89               	decfsz	9,f
  3470  0505  2D04               	goto	u947
  3471  0506  0BA0               	decfsz	??_nrf24l01SendEnd,f
  3472  0507  2D04               	goto	u947
  3473  0508  0BA1               	decfsz	??_nrf24l01SendEnd+1,f
  3474  0509  2D04               	goto	u947
  3475                           
  3476                           ;nrf24l01.c: 113: PORTAbits.RA0 = 0;
  3477  050A  0020               	movlb	0	; select bank0
  3478  050B  100C               	bcf	12,0	;volatile
  3479  050C  0008               	return
  3480  050D                     __end_of_nrf24l01SendEnd:	
  3481                           
  3482                           	psect	text14
  3483  050D                     __ptext14:	
  3484 ;; *************** function __itoa *****************
  3485 ;; Defined at:
  3486 ;;		line 50 in file "interface.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;  buffer          1    wreg     PTR unsigned char 
  3489 ;;		 -> byte(3), buffer(6), 
  3490 ;;  number          2   24[BANK0 ] unsigned int 
  3491 ;;  base            1   26[BANK0 ] unsigned char 
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;  buffer          1   29[BANK0 ] PTR unsigned char 
  3494 ;;		 -> byte(3), buffer(6), 
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  1    wreg      void 
  3497 ;; Registers used:
  3498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3499 ;; Tracked objects:
  3500 ;;		On entry : 0/0
  3501 ;;		On exit  : 0/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMMON   BANK0   BANK1
  3504 ;;      Params:         0       3       0
  3505 ;;      Locals:         0       1       0
  3506 ;;      Temps:          0       2       0
  3507 ;;      Totals:         0       6       0
  3508 ;;Total ram usage:        6 bytes
  3509 ;; Hardware stack levels used:    1
  3510 ;; Hardware stack levels required when called:    7
  3511 ;; This function calls:
  3512 ;;		_itoa
  3513 ;; This function is called by:
  3514 ;;		_loop
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           
  3519                           ;psect for function __itoa
  3520  050D                     __itoa:	
  3521                           
  3522                           ;incstack = 0
  3523                           ; Regs used in __itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3524                           ;__itoa@buffer stored from wreg
  3525  050D  0020               	movlb	0	; select bank0
  3526  050E  00BD               	movwf	__itoa@buffer
  3527                           
  3528                           ;interface.c: 51: itoa(buffer, number, base);
  3529  050F  0839               	movf	__itoa@number+1,w
  3530  0510  00B2               	movwf	itoa@val+1
  3531  0511  0838               	movf	__itoa@number,w
  3532  0512  00B1               	movwf	itoa@val
  3533  0513  083A               	movf	__itoa@base,w
  3534  0514  00BB               	movwf	??__itoa
  3535  0515  01BC               	clrf	??__itoa+1
  3536  0516  083B               	movf	??__itoa,w
  3537  0517  00B3               	movwf	itoa@base
  3538  0518  083C               	movf	??__itoa+1,w
  3539  0519  00B4               	movwf	itoa@base+1
  3540  051A  083D               	movf	__itoa@buffer,w
  3541  051B  246F               	fcall	_itoa
  3542  051C  0008               	return
  3543  051D                     __end_of__itoa:	
  3544                           
  3545                           	psect	text15
  3546  046F                     __ptext15:	
  3547 ;; *************** function _itoa *****************
  3548 ;; Defined at:
  3549 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;  buf             1    wreg     PTR unsigned char 
  3552 ;;		 -> byte(3), buffer(6), 
  3553 ;;  val             2   17[BANK0 ] int 
  3554 ;;  base            2   19[BANK0 ] int 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  buf             1   23[BANK0 ] PTR unsigned char 
  3557 ;;		 -> byte(3), buffer(6), 
  3558 ;;  cp              1   22[BANK0 ] PTR unsigned char 
  3559 ;;		 -> byte(3), buffer(6), 
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      PTR unsigned char 
  3562 ;; Registers used:
  3563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMMON   BANK0   BANK1
  3569 ;;      Params:         0       4       0
  3570 ;;      Locals:         0       2       0
  3571 ;;      Temps:          0       1       0
  3572 ;;      Totals:         0       7       0
  3573 ;;Total ram usage:        7 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    6
  3576 ;; This function calls:
  3577 ;;		_utoa
  3578 ;; This function is called by:
  3579 ;;		__itoa
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           
  3584                           ;psect for function _itoa
  3585  046F                     _itoa:	
  3586                           
  3587                           ;incstack = 0
  3588                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3589                           ;itoa@buf stored from wreg
  3590  046F  0020               	movlb	0	; select bank0
  3591  0470  00B7               	movwf	itoa@buf
  3592  0471  0837               	movf	itoa@buf,w
  3593  0472  00B5               	movwf	??_itoa
  3594  0473  0835               	movf	??_itoa,w
  3595  0474  00B6               	movwf	itoa@cp
  3596  0475  1FB2               	btfss	itoa@val+1,7
  3597  0476  2C87               	goto	l1417
  3598  0477  302D               	movlw	45
  3599  0478  00B5               	movwf	??_itoa
  3600  0479  0837               	movf	itoa@buf,w
  3601  047A  0086               	movwf	6
  3602  047B  0187               	clrf	7
  3603  047C  0835               	movf	??_itoa,w
  3604  047D  0081               	movwf	1
  3605  047E  3001               	movlw	1
  3606  047F  00B5               	movwf	??_itoa
  3607  0480  0835               	movf	??_itoa,w
  3608  0481  07B7               	addwf	itoa@buf,f
  3609  0482  09B1               	comf	itoa@val,f
  3610  0483  09B2               	comf	itoa@val+1,f
  3611  0484  0AB1               	incf	itoa@val,f
  3612  0485  1903               	skipnz
  3613  0486  0AB2               	incf	itoa@val+1,f
  3614  0487                     l1417:	
  3615  0487  0832               	movf	itoa@val+1,w
  3616  0488  00A9               	movwf	utoa@val+1
  3617  0489  0831               	movf	itoa@val,w
  3618  048A  00A8               	movwf	utoa@val
  3619  048B  0834               	movf	itoa@base+1,w
  3620  048C  00AB               	movwf	utoa@base+1
  3621  048D  0833               	movf	itoa@base,w
  3622  048E  00AA               	movwf	utoa@base
  3623  048F  0837               	movf	itoa@buf,w
  3624  0490  229F               	fcall	_utoa
  3625  0491  0008               	return
  3626  0492                     __end_of_itoa:	
  3627                           ;	Return value of _itoa is never used
  3628                           
  3629                           
  3630                           	psect	text16
  3631  029F                     __ptext16:	
  3632 ;; *************** function _utoa *****************
  3633 ;; Defined at:
  3634 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  buf             1    wreg     PTR unsigned char 
  3637 ;;		 -> byte(3), buffer(6), 
  3638 ;;  val             2    8[BANK0 ] unsigned int 
  3639 ;;  base            2   10[BANK0 ] int 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  3642 ;;		 -> byte(3), buffer(6), 
  3643 ;;  v               2   13[BANK0 ] unsigned int 
  3644 ;;  c               1   15[BANK0 ] unsigned char 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  1    wreg      PTR unsigned char 
  3647 ;; Registers used:
  3648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMMON   BANK0   BANK1
  3654 ;;      Params:         0       4       0
  3655 ;;      Locals:         0       4       0
  3656 ;;      Temps:          0       1       0
  3657 ;;      Totals:         0       9       0
  3658 ;;Total ram usage:        9 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    5
  3661 ;; This function calls:
  3662 ;;		___lwdiv
  3663 ;;		___lwmod
  3664 ;; This function is called by:
  3665 ;;		_itoa
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           
  3670                           ;psect for function _utoa
  3671  029F                     _utoa:	
  3672                           
  3673                           ;incstack = 0
  3674                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3675                           ;utoa@buf stored from wreg
  3676  029F  0020               	movlb	0	; select bank0
  3677  02A0  00B0               	movwf	utoa@buf
  3678  02A1  0829               	movf	utoa@val+1,w
  3679  02A2  00AE               	movwf	utoa@v+1
  3680  02A3  0828               	movf	utoa@val,w
  3681  02A4  00AD               	movwf	utoa@v
  3682  02A5                     l1365:	
  3683  02A5  082B               	movf	utoa@base+1,w
  3684  02A6  00A1               	movwf	___lwdiv@divisor+1
  3685  02A7  082A               	movf	utoa@base,w
  3686  02A8  00A0               	movwf	___lwdiv@divisor
  3687  02A9  082E               	movf	utoa@v+1,w
  3688  02AA  00A3               	movwf	___lwdiv@dividend+1
  3689  02AB  082D               	movf	utoa@v,w
  3690  02AC  00A2               	movwf	___lwdiv@dividend
  3691  02AD  238A               	fcall	___lwdiv
  3692  02AE  0020               	movlb	0	; select bank0
  3693  02AF  0821               	movf	?___lwdiv+1,w
  3694  02B0  00AE               	movwf	utoa@v+1
  3695  02B1  0820               	movf	?___lwdiv,w
  3696  02B2  00AD               	movwf	utoa@v
  3697  02B3  3001               	movlw	1
  3698  02B4  00AC               	movwf	??_utoa
  3699  02B5  082C               	movf	??_utoa,w
  3700  02B6  07B0               	addwf	utoa@buf,f
  3701  02B7  082D               	movf	utoa@v,w
  3702  02B8  042E               	iorwf	utoa@v+1,w
  3703  02B9  1D03               	btfss	3,2
  3704  02BA  2AA5               	goto	l1365
  3705  02BB  0830               	movf	utoa@buf,w
  3706  02BC  0086               	movwf	6
  3707  02BD  0187               	clrf	7
  3708  02BE  0181               	clrf	1
  3709  02BF  3001               	movlw	1
  3710  02C0  02B0               	subwf	utoa@buf,f
  3711  02C1                     l1375:	
  3712  02C1  082B               	movf	utoa@base+1,w
  3713  02C2  00A1               	movwf	___lwmod@divisor+1
  3714  02C3  082A               	movf	utoa@base,w
  3715  02C4  00A0               	movwf	___lwmod@divisor
  3716  02C5  0829               	movf	utoa@val+1,w
  3717  02C6  00A3               	movwf	___lwmod@dividend+1
  3718  02C7  0828               	movf	utoa@val,w
  3719  02C8  00A2               	movwf	___lwmod@dividend
  3720  02C9  241F               	fcall	___lwmod
  3721  02CA  0020               	movlb	0	; select bank0
  3722  02CB  0820               	movf	?___lwmod,w
  3723  02CC  00AC               	movwf	??_utoa
  3724  02CD  082C               	movf	??_utoa,w
  3725  02CE  00AF               	movwf	utoa@c
  3726  02CF  082B               	movf	utoa@base+1,w
  3727  02D0  00A1               	movwf	___lwdiv@divisor+1
  3728  02D1  082A               	movf	utoa@base,w
  3729  02D2  00A0               	movwf	___lwdiv@divisor
  3730  02D3  0829               	movf	utoa@val+1,w
  3731  02D4  00A3               	movwf	___lwdiv@dividend+1
  3732  02D5  0828               	movf	utoa@val,w
  3733  02D6  00A2               	movwf	___lwdiv@dividend
  3734  02D7  238A               	fcall	___lwdiv
  3735  02D8  0020               	movlb	0	; select bank0
  3736  02D9  0821               	movf	?___lwdiv+1,w
  3737  02DA  00A9               	movwf	utoa@val+1
  3738  02DB  0820               	movf	?___lwdiv,w
  3739  02DC  00A8               	movwf	utoa@val
  3740  02DD  300A               	movlw	10
  3741  02DE  022F               	subwf	utoa@c,w
  3742  02DF  1C03               	skipc
  3743  02E0  2AE5               	goto	l528
  3744  02E1  3007               	movlw	7
  3745  02E2  00AC               	movwf	??_utoa
  3746  02E3  082C               	movf	??_utoa,w
  3747  02E4  07AF               	addwf	utoa@c,f
  3748  02E5                     l528:	
  3749  02E5  3030               	movlw	48
  3750  02E6  00AC               	movwf	??_utoa
  3751  02E7  082C               	movf	??_utoa,w
  3752  02E8  07AF               	addwf	utoa@c,f
  3753  02E9  082F               	movf	utoa@c,w
  3754  02EA  00AC               	movwf	??_utoa
  3755  02EB  0830               	movf	utoa@buf,w
  3756  02EC  0086               	movwf	6
  3757  02ED  0187               	clrf	7
  3758  02EE  082C               	movf	??_utoa,w
  3759  02EF  0081               	movwf	1
  3760  02F0  3001               	movlw	1
  3761  02F1  02B0               	subwf	utoa@buf,f
  3762  02F2  0828               	movf	utoa@val,w
  3763  02F3  0429               	iorwf	utoa@val+1,w
  3764  02F4  1D03               	btfss	3,2
  3765  02F5  2AC1               	goto	l1375
  3766                           
  3767                           ;	Return value of _utoa is never used
  3768  02F6  3001               	movlw	1
  3769  02F7  00AC               	movwf	??_utoa
  3770  02F8  082C               	movf	??_utoa,w
  3771  02F9  07B0               	addwf	utoa@buf,f
  3772  02FA  0008               	return
  3773  02FB                     __end_of_utoa:	
  3774                           
  3775                           	psect	text17
  3776  041F                     __ptext17:	
  3777 ;; *************** function ___lwmod *****************
  3778 ;; Defined at:
  3779 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  divisor         2    0[BANK0 ] unsigned int 
  3782 ;;  dividend        2    2[BANK0 ] unsigned int 
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;  counter         1    5[BANK0 ] unsigned char 
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  2    0[BANK0 ] unsigned int 
  3787 ;; Registers used:
  3788 ;;		wreg, status,2, status,0
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMMON   BANK0   BANK1
  3794 ;;      Params:         0       4       0
  3795 ;;      Locals:         0       1       0
  3796 ;;      Temps:          0       1       0
  3797 ;;      Totals:         0       6       0
  3798 ;;Total ram usage:        6 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:    4
  3801 ;; This function calls:
  3802 ;;		Nothing
  3803 ;; This function is called by:
  3804 ;;		_utoa
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           
  3809                           ;psect for function ___lwmod
  3810  041F                     ___lwmod:	
  3811                           
  3812                           ;incstack = 0
  3813                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3814  041F  0020               	movlb	0	; select bank0
  3815  0420  0820               	movf	___lwmod@divisor,w
  3816  0421  0421               	iorwf	___lwmod@divisor+1,w
  3817  0422  1903               	btfsc	3,2
  3818  0423  2C47               	goto	l1331
  3819  0424  01A5               	clrf	___lwmod@counter
  3820  0425  0AA5               	incf	___lwmod@counter,f
  3821  0426                     l1321:	
  3822  0426  1BA1               	btfsc	___lwmod@divisor+1,7
  3823  0427  2C32               	goto	l1323
  3824  0428  3001               	movlw	1
  3825  0429                     u515:	
  3826  0429  35A0               	lslf	___lwmod@divisor,f
  3827  042A  0DA1               	rlf	___lwmod@divisor+1,f
  3828  042B  0B89               	decfsz	9,f
  3829  042C  2C29               	goto	u515
  3830  042D  3001               	movlw	1
  3831  042E  00A4               	movwf	??___lwmod
  3832  042F  0824               	movf	??___lwmod,w
  3833  0430  07A5               	addwf	___lwmod@counter,f
  3834  0431  2C26               	goto	l1321
  3835  0432                     l1323:	
  3836  0432  0821               	movf	___lwmod@divisor+1,w
  3837  0433  0223               	subwf	___lwmod@dividend+1,w
  3838  0434  1D03               	skipz
  3839  0435  2C38               	goto	u535
  3840  0436  0820               	movf	___lwmod@divisor,w
  3841  0437  0222               	subwf	___lwmod@dividend,w
  3842  0438                     u535:	
  3843  0438  1C03               	skipc
  3844  0439  2C3E               	goto	l1327
  3845  043A  0820               	movf	___lwmod@divisor,w
  3846  043B  02A2               	subwf	___lwmod@dividend,f
  3847  043C  0821               	movf	___lwmod@divisor+1,w
  3848  043D  3BA3               	subwfb	___lwmod@dividend+1,f
  3849  043E                     l1327:	
  3850  043E  3001               	movlw	1
  3851  043F                     u545:	
  3852  043F  36A1               	lsrf	___lwmod@divisor+1,f
  3853  0440  0CA0               	rrf	___lwmod@divisor,f
  3854  0441  0B89               	decfsz	9,f
  3855  0442  2C3F               	goto	u545
  3856  0443  3001               	movlw	1
  3857  0444  02A5               	subwf	___lwmod@counter,f
  3858  0445  1D03               	btfss	3,2
  3859  0446  2C32               	goto	l1323
  3860  0447                     l1331:	
  3861  0447  0823               	movf	___lwmod@dividend+1,w
  3862  0448  00A1               	movwf	?___lwmod+1
  3863  0449  0822               	movf	___lwmod@dividend,w
  3864  044A  00A0               	movwf	?___lwmod
  3865  044B  0008               	return
  3866  044C                     __end_of___lwmod:	
  3867                           
  3868                           	psect	text18
  3869  038A                     __ptext18:	
  3870 ;; *************** function ___lwdiv *****************
  3871 ;; Defined at:
  3872 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  divisor         2    0[BANK0 ] unsigned int 
  3875 ;;  dividend        2    2[BANK0 ] unsigned int 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;  quotient        2    5[BANK0 ] unsigned int 
  3878 ;;  counter         1    7[BANK0 ] unsigned char 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  2    0[BANK0 ] unsigned int 
  3881 ;; Registers used:
  3882 ;;		wreg, status,2, status,0
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMMON   BANK0   BANK1
  3888 ;;      Params:         0       4       0
  3889 ;;      Locals:         0       3       0
  3890 ;;      Temps:          0       1       0
  3891 ;;      Totals:         0       8       0
  3892 ;;Total ram usage:        8 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    4
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_utoa
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           
  3903                           ;psect for function ___lwdiv
  3904  038A                     ___lwdiv:	
  3905                           
  3906                           ;incstack = 0
  3907                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3908  038A  0020               	movlb	0	; select bank0
  3909  038B  01A5               	clrf	___lwdiv@quotient
  3910  038C  01A6               	clrf	___lwdiv@quotient+1
  3911  038D  0820               	movf	___lwdiv@divisor,w
  3912  038E  0421               	iorwf	___lwdiv@divisor+1,w
  3913  038F  1903               	btfsc	3,2
  3914  0390  2BBA               	goto	l1309
  3915  0391  01A7               	clrf	___lwdiv@counter
  3916  0392  0AA7               	incf	___lwdiv@counter,f
  3917  0393                     l1297:	
  3918  0393  1BA1               	btfsc	___lwdiv@divisor+1,7
  3919  0394  2B9F               	goto	l1299
  3920  0395  3001               	movlw	1
  3921  0396                     u445:	
  3922  0396  35A0               	lslf	___lwdiv@divisor,f
  3923  0397  0DA1               	rlf	___lwdiv@divisor+1,f
  3924  0398  0B89               	decfsz	9,f
  3925  0399  2B96               	goto	u445
  3926  039A  3001               	movlw	1
  3927  039B  00A4               	movwf	??___lwdiv
  3928  039C  0824               	movf	??___lwdiv,w
  3929  039D  07A7               	addwf	___lwdiv@counter,f
  3930  039E  2B93               	goto	l1297
  3931  039F                     l1299:	
  3932  039F  3001               	movlw	1
  3933  03A0                     u465:	
  3934  03A0  35A5               	lslf	___lwdiv@quotient,f
  3935  03A1  0DA6               	rlf	___lwdiv@quotient+1,f
  3936  03A2  0B89               	decfsz	9,f
  3937  03A3  2BA0               	goto	u465
  3938  03A4  0821               	movf	___lwdiv@divisor+1,w
  3939  03A5  0223               	subwf	___lwdiv@dividend+1,w
  3940  03A6  1D03               	skipz
  3941  03A7  2BAA               	goto	u475
  3942  03A8  0820               	movf	___lwdiv@divisor,w
  3943  03A9  0222               	subwf	___lwdiv@dividend,w
  3944  03AA                     u475:	
  3945  03AA  1C03               	skipc
  3946  03AB  2BB1               	goto	l1305
  3947  03AC  0820               	movf	___lwdiv@divisor,w
  3948  03AD  02A2               	subwf	___lwdiv@dividend,f
  3949  03AE  0821               	movf	___lwdiv@divisor+1,w
  3950  03AF  3BA3               	subwfb	___lwdiv@dividend+1,f
  3951  03B0  1425               	bsf	___lwdiv@quotient,0
  3952  03B1                     l1305:	
  3953  03B1  3001               	movlw	1
  3954  03B2                     u485:	
  3955  03B2  36A1               	lsrf	___lwdiv@divisor+1,f
  3956  03B3  0CA0               	rrf	___lwdiv@divisor,f
  3957  03B4  0B89               	decfsz	9,f
  3958  03B5  2BB2               	goto	u485
  3959  03B6  3001               	movlw	1
  3960  03B7  02A7               	subwf	___lwdiv@counter,f
  3961  03B8  1D03               	btfss	3,2
  3962  03B9  2B9F               	goto	l1299
  3963  03BA                     l1309:	
  3964  03BA  0826               	movf	___lwdiv@quotient+1,w
  3965  03BB  00A1               	movwf	?___lwdiv+1
  3966  03BC  0825               	movf	___lwdiv@quotient,w
  3967  03BD  00A0               	movwf	?___lwdiv
  3968  03BE  0008               	return
  3969  03BF                     __end_of___lwdiv:	
  3970                           
  3971                           	psect	text19
  3972  02FB                     __ptext19:	
  3973 ;; *************** function ___lldiv *****************
  3974 ;; Defined at:
  3975 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  divisor         4    0[BANK0 ] unsigned long 
  3978 ;;  dividend        4    4[BANK0 ] unsigned long 
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;  quotient        4    9[BANK0 ] unsigned long 
  3981 ;;  counter         1   13[BANK0 ] unsigned char 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  4    0[BANK0 ] unsigned long 
  3984 ;; Registers used:
  3985 ;;		wreg, status,2, status,0
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMMON   BANK0   BANK1
  3991 ;;      Params:         0       8       0
  3992 ;;      Locals:         0       5       0
  3993 ;;      Temps:          0       1       0
  3994 ;;      Totals:         0      14       0
  3995 ;;Total ram usage:       14 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    4
  3998 ;; This function calls:
  3999 ;;		Nothing
  4000 ;; This function is called by:
  4001 ;;		_loop
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           
  4006                           ;psect for function ___lldiv
  4007  02FB                     ___lldiv:	
  4008                           
  4009                           ;incstack = 0
  4010                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4011  02FB  3000               	movlw	0
  4012  02FC  0020               	movlb	0	; select bank0
  4013  02FD  00AC               	movwf	___lldiv@quotient+3
  4014  02FE  3000               	movlw	0
  4015  02FF  00AB               	movwf	___lldiv@quotient+2
  4016  0300  3000               	movlw	0
  4017  0301  00AA               	movwf	___lldiv@quotient+1
  4018  0302  3000               	movlw	0
  4019  0303  00A9               	movwf	___lldiv@quotient
  4020  0304  0823               	movf	___lldiv@divisor+3,w
  4021  0305  0422               	iorwf	___lldiv@divisor+2,w
  4022  0306  0421               	iorwf	___lldiv@divisor+1,w
  4023  0307  0420               	iorwf	___lldiv@divisor,w
  4024  0308  1903               	skipnz
  4025  0309  2B45               	goto	l1627
  4026  030A  01AD               	clrf	___lldiv@counter
  4027  030B  0AAD               	incf	___lldiv@counter,f
  4028  030C                     l1613:	
  4029  030C  1BA3               	btfsc	___lldiv@divisor+3,7
  4030  030D  2B1A               	goto	l1615
  4031  030E  3001               	movlw	1
  4032  030F                     u675:	
  4033  030F  35A0               	lslf	___lldiv@divisor,f
  4034  0310  0DA1               	rlf	___lldiv@divisor+1,f
  4035  0311  0DA2               	rlf	___lldiv@divisor+2,f
  4036  0312  0DA3               	rlf	___lldiv@divisor+3,f
  4037  0313  0B89               	decfsz	9,f
  4038  0314  2B0F               	goto	u675
  4039  0315  3001               	movlw	1
  4040  0316  00A8               	movwf	??___lldiv
  4041  0317  0828               	movf	??___lldiv,w
  4042  0318  07AD               	addwf	___lldiv@counter,f
  4043  0319  2B0C               	goto	l1613
  4044  031A                     l1615:	
  4045  031A  3001               	movlw	1
  4046  031B                     u695:	
  4047  031B  35A9               	lslf	___lldiv@quotient,f
  4048  031C  0DAA               	rlf	___lldiv@quotient+1,f
  4049  031D  0DAB               	rlf	___lldiv@quotient+2,f
  4050  031E  0DAC               	rlf	___lldiv@quotient+3,f
  4051  031F  0B89               	decfsz	9,f
  4052  0320  2B1B               	goto	u695
  4053  0321  0823               	movf	___lldiv@divisor+3,w
  4054  0322  0227               	subwf	___lldiv@dividend+3,w
  4055  0323  1D03               	skipz
  4056  0324  2B2F               	goto	u705
  4057  0325  0822               	movf	___lldiv@divisor+2,w
  4058  0326  0226               	subwf	___lldiv@dividend+2,w
  4059  0327  1D03               	skipz
  4060  0328  2B2F               	goto	u705
  4061  0329  0821               	movf	___lldiv@divisor+1,w
  4062  032A  0225               	subwf	___lldiv@dividend+1,w
  4063  032B  1D03               	skipz
  4064  032C  2B2F               	goto	u705
  4065  032D  0820               	movf	___lldiv@divisor,w
  4066  032E  0224               	subwf	___lldiv@dividend,w
  4067  032F                     u705:	
  4068  032F  1C03               	skipc
  4069  0330  2B3A               	goto	l1623
  4070  0331  0820               	movf	___lldiv@divisor,w
  4071  0332  02A4               	subwf	___lldiv@dividend,f
  4072  0333  0821               	movf	___lldiv@divisor+1,w
  4073  0334  3BA5               	subwfb	___lldiv@dividend+1,f
  4074  0335  0822               	movf	___lldiv@divisor+2,w
  4075  0336  3BA6               	subwfb	___lldiv@dividend+2,f
  4076  0337  0823               	movf	___lldiv@divisor+3,w
  4077  0338  3BA7               	subwfb	___lldiv@dividend+3,f
  4078  0339  1429               	bsf	___lldiv@quotient,0
  4079  033A                     l1623:	
  4080  033A  3001               	movlw	1
  4081  033B                     u715:	
  4082  033B  36A3               	lsrf	___lldiv@divisor+3,f
  4083  033C  0CA2               	rrf	___lldiv@divisor+2,f
  4084  033D  0CA1               	rrf	___lldiv@divisor+1,f
  4085  033E  0CA0               	rrf	___lldiv@divisor,f
  4086  033F  0B89               	decfsz	9,f
  4087  0340  2B3B               	goto	u715
  4088  0341  3001               	movlw	1
  4089  0342  02AD               	subwf	___lldiv@counter,f
  4090  0343  1D03               	btfss	3,2
  4091  0344  2B1A               	goto	l1615
  4092  0345                     l1627:	
  4093  0345  082C               	movf	___lldiv@quotient+3,w
  4094  0346  00A3               	movwf	?___lldiv+3
  4095  0347  082B               	movf	___lldiv@quotient+2,w
  4096  0348  00A2               	movwf	?___lldiv+2
  4097  0349  082A               	movf	___lldiv@quotient+1,w
  4098  034A  00A1               	movwf	?___lldiv+1
  4099  034B  0829               	movf	___lldiv@quotient,w
  4100  034C  00A0               	movwf	?___lldiv
  4101  034D  0008               	return
  4102  034E                     __end_of___lldiv:	
  4103                           
  4104                           	psect	intentry
  4105  0004                     __pintentry:	
  4106 ;; *************** function _ISR *****************
  4107 ;; Defined at:
  4108 ;;		line 33 in file "main.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;		None
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;  result          2   10[COMMON] int 
  4113 ;; Return value:  Size  Location     Type
  4114 ;;                  1    wreg      void 
  4115 ;; Registers used:
  4116 ;;		wreg, status,2, status,0, pclath, cstack
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMMON   BANK0   BANK1
  4122 ;;      Params:         0       0       0
  4123 ;;      Locals:         2       0       0
  4124 ;;      Temps:          4       0       0
  4125 ;;      Totals:         6       0       0
  4126 ;;Total ram usage:        6 bytes
  4127 ;; Hardware stack levels used:    1
  4128 ;; Hardware stack levels required when called:    3
  4129 ;; This function calls:
  4130 ;;		_nrf24l01ISR
  4131 ;; This function is called by:
  4132 ;;		Interrupt level 1
  4133 ;; This function uses a non-reentrant model
  4134 ;;
  4135                           
  4136  0004                     _ISR:	
  4137                           
  4138                           ;incstack = 0
  4139  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4140                           
  4141                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  4142  0005  3180               	pagesel	$
  4143  0006  0020               	movlb	0	; select bank0
  4144  0007  087F               	movf	127,w
  4145  0008  00F9               	movwf	??_ISR+3
  4146                           
  4147                           ;main.c: 34: if (PIR1bits.ADIF){
  4148  0009  1F11               	btfss	17,6	;volatile
  4149  000A  2839               	goto	i1l1829
  4150                           
  4151                           ;main.c: 36: if (mode == 2) {
  4152  000B  3002               	movlw	2
  4153  000C  067D               	xorwf	_mode,w
  4154  000D  1D03               	btfss	3,2
  4155  000E  2837               	goto	i1l1827
  4156                           
  4157                           ;main.c: 38: int result = 0x00;
  4158  000F  01FA               	clrf	ISR@result
  4159  0010  01FB               	clrf	ISR@result+1
  4160                           
  4161                           ;main.c: 39: result = ADRESL;
  4162  0011  0021               	movlb	1	; select bank1
  4163  0012  081B               	movf	27,w	;volatile
  4164  0013  00F6               	movwf	??_ISR
  4165  0014  01F7               	clrf	??_ISR+1
  4166  0015  0876               	movf	??_ISR,w
  4167  0016  00FA               	movwf	ISR@result
  4168  0017  0877               	movf	??_ISR+1,w
  4169  0018  00FB               	movwf	ISR@result+1
  4170                           
  4171                           ;main.c: 40: result|= (ADRESH << 8);
  4172  0019  081C               	movf	28,w	;volatile
  4173  001A  00F6               	movwf	??_ISR
  4174  001B  01F7               	clrf	??_ISR+1
  4175  001C  0876               	movf	??_ISR,w
  4176  001D  00F7               	movwf	??_ISR+1
  4177  001E  01F6               	clrf	??_ISR
  4178  001F  0876               	movf	??_ISR,w
  4179  0020  04FA               	iorwf	ISR@result,f
  4180  0021  0877               	movf	??_ISR+1,w
  4181  0022  04FB               	iorwf	ISR@result+1,f
  4182                           
  4183                           ;main.c: 42: adcSum+= (unsigned) result;
  4184  0023  087A               	movf	ISR@result,w
  4185  0024  0020               	movlb	0	; select bank0
  4186  0025  07C5               	addwf	_adcSum,f
  4187  0026  087B               	movf	ISR@result+1,w
  4188  0027  3DC6               	addwfc	_adcSum+1,f
  4189  0028  3000               	movlw	0
  4190  0029  3DC7               	addwfc	_adcSum+2,f
  4191  002A  3DC8               	addwfc	_adcSum+3,f
  4192                           
  4193                           ;main.c: 44: if (!adcLoop){
  4194  002B  087C               	movf	_adcLoop,w
  4195  002C  1D03               	btfss	3,2
  4196  002D  2833               	goto	i1l155
  4197                           
  4198                           ;main.c: 45: mode = 3;
  4199  002E  3003               	movlw	3
  4200  002F  00F6               	movwf	??_ISR
  4201  0030  0876               	movf	??_ISR,w
  4202  0031  00FD               	movwf	_mode
  4203                           
  4204                           ;main.c: 46: }else{
  4205  0032  2835               	goto	i1l1825
  4206  0033                     i1l155:	
  4207                           
  4208                           ;main.c: 48: ADCON0bits.ADGO = 1;
  4209  0033  0021               	movlb	1	; select bank1
  4210  0034  149D               	bsf	29,1	;volatile
  4211  0035                     i1l1825:	
  4212                           
  4213                           ;main.c: 49: }
  4214                           ;main.c: 51: adcLoop--;
  4215  0035  3001               	movlw	1
  4216  0036  02FC               	subwf	_adcLoop,f
  4217  0037                     i1l1827:	
  4218                           
  4219                           ;main.c: 52: }
  4220                           ;main.c: 55: PIR1bits.ADIF = 0;
  4221  0037  0020               	movlb	0	; select bank0
  4222  0038  1311               	bcf	17,6	;volatile
  4223  0039                     i1l1829:	
  4224                           
  4225                           ;main.c: 56: }
  4226                           ;main.c: 58: if (INTCONbits.INTF){
  4227  0039  1C8B               	btfss	11,1	;volatile
  4228  003A  283D               	goto	i1l158
  4229                           
  4230                           ;main.c: 59: nrf24l01ISR();
  4231  003B  251D               	fcall	_nrf24l01ISR
  4232                           
  4233                           ;main.c: 60: INTCONbits.INTF = 0;
  4234  003C  108B               	bcf	11,1	;volatile
  4235  003D                     i1l158:	
  4236  003D  0879               	movf	??_ISR+3,w
  4237  003E  0020               	movlb	0	; select bank0
  4238  003F  00FF               	movwf	127
  4239  0040  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4240  0041  0009               	retfie
  4241  0042                     __end_of_ISR:	
  4242                           
  4243                           	psect	text21
  4244  051D                     __ptext21:	
  4245 ;; *************** function _nrf24l01ISR *****************
  4246 ;; Defined at:
  4247 ;;		line 21 in file "nrf24l01.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;		None
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;  status          1    5[COMMON] struct .
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      void 
  4254 ;; Registers used:
  4255 ;;		wreg, status,2, status,0, pclath, cstack
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMMON   BANK0   BANK1
  4261 ;;      Params:         0       0       0
  4262 ;;      Locals:         1       0       0
  4263 ;;      Temps:          1       0       0
  4264 ;;      Totals:         2       0       0
  4265 ;;Total ram usage:        2 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    2
  4268 ;; This function calls:
  4269 ;;		_nrf24l01Send
  4270 ;; This function is called by:
  4271 ;;		_ISR
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           
  4276                           ;psect for function _nrf24l01ISR
  4277  051D                     _nrf24l01ISR:	
  4278                           
  4279                           ;nrf24l01.c: 23: n_STATUS_t status;
  4280                           ;nrf24l01.c: 24: status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  4281                           
  4282                           ;incstack = 0
  4283                           ; Regs used in _nrf24l01ISR: [wreg+status,2+status,0+pclath+cstack]
  4284  051D  01F1               	clrf	nrf24l01Send@data
  4285  051E  3007               	movlw	7
  4286  051F  253A               	fcall	_nrf24l01Send
  4287  0520  00F4               	movwf	??_nrf24l01ISR
  4288  0521  0874               	movf	??_nrf24l01ISR,w
  4289  0522  00F5               	movwf	nrf24l01ISR@status
  4290                           
  4291                           ;nrf24l01.c: 26: if (status.TX_DS){
  4292  0523  1EF5               	btfss	nrf24l01ISR@status,5
  4293  0524  0008               	return
  4294                           
  4295                           ;nrf24l01.c: 27: nrf24l01Send(0b00100000 | 0x07, status.byte);
  4296  0525  0875               	movf	nrf24l01ISR@status,w
  4297  0526  00F4               	movwf	??_nrf24l01ISR
  4298  0527  0874               	movf	??_nrf24l01ISR,w
  4299  0528  00F1               	movwf	nrf24l01Send@data
  4300  0529  3027               	movlw	39
  4301  052A  253A               	fcall	_nrf24l01Send
  4302  052B  0008               	return
  4303  052C                     __end_of_nrf24l01ISR:	
  4304                           
  4305                           	psect	text22
  4306  053A                     __ptext22:	
  4307 ;; *************** function _nrf24l01Send *****************
  4308 ;; Defined at:
  4309 ;;		line 9 in file "nrf24l01.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;  command         1    wreg     unsigned char 
  4312 ;;  data            1    1[COMMON] unsigned char 
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  command         1    3[COMMON] unsigned char 
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  1    wreg      unsigned char 
  4317 ;; Registers used:
  4318 ;;		wreg, status,2, status,0, pclath, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMMON   BANK0   BANK1
  4324 ;;      Params:         0       0       0
  4325 ;;      Locals:         0       0       0
  4326 ;;      Temps:          0       0       0
  4327 ;;      Totals:         0       0       0
  4328 ;;Total ram usage:        0 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    5
  4331 ;; This function calls:
  4332 ;;		_nrf24l01SPIEnd
  4333 ;;		_nrf24l01SPISend
  4334 ;;		_nrf24l01SPIStart
  4335 ;; This function is called by:
  4336 ;;		_nrf24l01ISR
  4337 ;;		_nrf24l01SetTransmitMode
  4338 ;;		_nrf24l01SetRecieveMode
  4339 ;;		_nrf24l01InitRegisters
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           
  4344                           ;psect for function _nrf24l01Send
  4345  053A                     _nrf24l01Send:	
  4346                           
  4347                           ;incstack = 0
  4348                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  4349                           ;nrf24l01Send@command stored from wreg
  4350  053A  00F3               	movwf	nrf24l01Send@command
  4351                           
  4352                           ;nrf24l01.c: 11: nrf24l01SPIStart();
  4353  053B  2567               	fcall	_nrf24l01SPIStart
  4354                           
  4355                           ;nrf24l01.c: 13: nrf24l01SPISend(command);
  4356  053C  0873               	movf	nrf24l01Send@command,w
  4357  053D  2546               	fcall	_nrf24l01SPISend
  4358                           
  4359                           ;nrf24l01.c: 14: data = nrf24l01SPISend(data);
  4360  053E  0871               	movf	nrf24l01Send@data,w
  4361  053F  2546               	fcall	_nrf24l01SPISend
  4362  0540  00F2               	movwf	??_nrf24l01Send
  4363  0541  0872               	movf	??_nrf24l01Send,w
  4364  0542  00F1               	movwf	nrf24l01Send@data
  4365                           
  4366                           ;nrf24l01.c: 16: nrf24l01SPIEnd();
  4367  0543  256E               	fcall	_nrf24l01SPIEnd
  4368                           
  4369                           ;nrf24l01.c: 18: return data;
  4370  0544  0871               	movf	nrf24l01Send@data,w
  4371  0545  0008               	return
  4372  0546                     __end_of_nrf24l01Send:	
  4373                           
  4374                           	psect	text23
  4375  0567                     __ptext23:	
  4376 ;; *************** function _nrf24l01SPIStart *****************
  4377 ;; Defined at:
  4378 ;;		line 38 in file "interface.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;		None
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;		None
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  1    wreg      void 
  4385 ;; Registers used:
  4386 ;;		wreg
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMMON   BANK0   BANK1
  4392 ;;      Params:         0       0       0
  4393 ;;      Locals:         0       0       0
  4394 ;;      Temps:          0       0       0
  4395 ;;      Totals:         0       0       0
  4396 ;;Total ram usage:        0 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    4
  4399 ;; This function calls:
  4400 ;;		Nothing
  4401 ;; This function is called by:
  4402 ;;		_nrf24l01Send
  4403 ;;		_nrf24l01SendStart
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           
  4408                           ;psect for function _nrf24l01SPIStart
  4409  0567                     _nrf24l01SPIStart:	
  4410                           
  4411                           ;interface.c: 39: PORTAbits.RA1 = 0;
  4412                           
  4413                           ;incstack = 0
  4414                           ; Regs used in _nrf24l01SPIStart: [wreg]
  4415  0567  0020               	movlb	0	; select bank0
  4416  0568  108C               	bcf	12,1	;volatile
  4417                           
  4418                           ;interface.c: 40: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4419  0569  300D               	movlw	13
  4420  056A                     u95_27:	
  4421  056A  0B89               	decfsz	9,f
  4422  056B  2D6A               	goto	u95_27
  4423  056C  0000               	nop
  4424  056D  0008               	return
  4425  056E                     __end_of_nrf24l01SPIStart:	
  4426                           
  4427                           	psect	text24
  4428  0546                     __ptext24:	
  4429 ;; *************** function _nrf24l01SPISend *****************
  4430 ;; Defined at:
  4431 ;;		line 27 in file "interface.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;  data            1    wreg     unsigned char 
  4434 ;; Auto vars:     Size  Location     Type
  4435 ;;  data            1    0[COMMON] unsigned char 
  4436 ;; Return value:  Size  Location     Type
  4437 ;;                  1    wreg      unsigned char 
  4438 ;; Registers used:
  4439 ;;		wreg
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMMON   BANK0   BANK1
  4445 ;;      Params:         0       0       0
  4446 ;;      Locals:         0       0       0
  4447 ;;      Temps:          0       0       0
  4448 ;;      Totals:         0       0       0
  4449 ;;Total ram usage:        0 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    4
  4452 ;; This function calls:
  4453 ;;		Nothing
  4454 ;; This function is called by:
  4455 ;;		_nrf24l01Send
  4456 ;;		_nrf24l01SendStart
  4457 ;;		_nrf24l01SendString
  4458 ;;		_nrf24l01SendFlash
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           
  4463                           ;psect for function _nrf24l01SPISend
  4464  0546                     _nrf24l01SPISend:	
  4465                           
  4466                           ;incstack = 0
  4467                           ; Regs used in _nrf24l01SPISend: [wreg]
  4468                           ;nrf24l01SPISend@data stored from wreg
  4469  0546  00F0               	movwf	nrf24l01SPISend@data
  4470                           
  4471                           ;interface.c: 28: SSP1BUF = data;
  4472  0547  0870               	movf	nrf24l01SPISend@data,w
  4473  0548  0024               	movlb	4	; select bank4
  4474  0549  0091               	movwf	17	;volatile
  4475  054A                     i1l50:	
  4476                           ;interface.c: 30: while (!SSP1STATbits.BF){
  4477                           
  4478  054A  0024               	movlb	4	; select bank4
  4479  054B  1814               	btfsc	20,0	;volatile
  4480  054C  2D4F               	goto	i1l1395
  4481                           
  4482                           ;interface.c: 31: __nop();
  4483  054D  0000               	nop
  4484  054E  2D4A               	goto	i1l50
  4485  054F                     i1l1395:	
  4486                           
  4487                           ;interface.c: 32: }
  4488                           ;interface.c: 34: return SSP1BUF;
  4489  054F  0811               	movf	17,w	;volatile
  4490  0550  0008               	return
  4491  0551                     __end_of_nrf24l01SPISend:	
  4492                           
  4493                           	psect	text25
  4494  056E                     __ptext25:	
  4495 ;; *************** function _nrf24l01SPIEnd *****************
  4496 ;; Defined at:
  4497 ;;		line 44 in file "interface.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;		None
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;		None
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  1    wreg      void 
  4504 ;; Registers used:
  4505 ;;		wreg
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMMON   BANK0   BANK1
  4511 ;;      Params:         0       0       0
  4512 ;;      Locals:         0       0       0
  4513 ;;      Temps:          0       0       0
  4514 ;;      Totals:         0       0       0
  4515 ;;Total ram usage:        0 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; Hardware stack levels required when called:    4
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		_nrf24l01Send
  4522 ;;		_nrf24l01SendEnd
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           
  4527                           ;psect for function _nrf24l01SPIEnd
  4528  056E                     _nrf24l01SPIEnd:	
  4529                           
  4530                           ;interface.c: 45: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4531                           
  4532                           ;incstack = 0
  4533                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  4534  056E  300D               	movlw	13
  4535  056F                     u96_27:	
  4536  056F  0B89               	decfsz	9,f
  4537  0570  2D6F               	goto	u96_27
  4538  0571  0000               	nop
  4539                           
  4540                           ;interface.c: 46: PORTAbits.RA1 = 1;
  4541  0572  0020               	movlb	0	; select bank0
  4542  0573  148C               	bsf	12,1	;volatile
  4543  0574  0008               	return
  4544  0575                     __end_of_nrf24l01SPIEnd:	
  4545  007E                     btemp	set	126	;btemp
  4546  007E                     int$flags	set	126
  4547  007E                     wtemp0	set	126


Data Sizes:
    Strings     20
    Constant    6
    Data        2
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     37      54
    BANK1            32      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    nrf24l01SendString@string	PTR unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[2]), STR_3(CODE[5]), byte(BANK0[3]), STR_2(CODE[8]), 
		 -> STR_1(CODE[7]), buffer(BANK0[6]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 

    _itoa@buffer	PTR unsigned char  size(1) Largest target is 6
		 -> byte(BANK0[3]), buffer(BANK0[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _loop->__itoa
    _nrf24l01SendStart->_nrf24l01SendFlash
    _nrf24l01SendFlash->_read_flashmem
    __itoa->_itoa
    _itoa->_utoa
    _utoa->___lwdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    9780
                                             34 BANK0      3     3      0
                               _loop
                       _nrf24l01Init
                      _read_flashmem
                     _write_flashmem
 ---------------------------------------------------------------------------------
 (1) _write_flashmem                                       6     2      4     283
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1580
                                              9 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    1580
                                              0 BANK0      9     9      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 4     4      0    7586
                                             30 BANK0      4     4      0
                            ___lldiv
                              __itoa
                    _nrf24l01SendEnd
                  _nrf24l01SendFlash
                  _nrf24l01SendStart
                 _nrf24l01SendString
             _nrf24l01SetRecieveMode
                      _read_flashmem
                           _startADC
 ---------------------------------------------------------------------------------
 (2) _startADC                                             2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRecieveMode                               2     2      0    1415
                                              0 BANK0      2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendString                                   6     4      2     624
                                              0 BANK0      6     4      2
                    _nrf24l01SPISend
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendStart                                    0     0      0    1835
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SendFlash
            _nrf24l01SetTransmitMode
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetTransmitMode                              2     2      0    1415
                                              0 BANK0      2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1369
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SendFlash                                    4     4      0     398
                                              9 BANK0      4     4      0
                    _nrf24l01SPISend
                      _read_flashmem
 ---------------------------------------------------------------------------------
 (1) _read_flashmem                                        9     7      2     284
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      22
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendEnd                                      2     2      0       0
                                              0 BANK0      2     2      0
                     _nrf24l01SPIEnd
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __itoa                                                6     3      3    2184
                                             24 BANK0      6     3      3
                               _itoa
                      _read_flashmem (ARG)
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 7     3      4    1486
                                             17 BANK0      7     3      4
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     5      4    1165
                                              8 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     287
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     802
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  6     6      0    1439
                                              6 COMMON     6     6      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          2     2      0    1414
                                              4 COMMON     2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1369
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      22
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___lldiv
     __itoa
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _read_flashmem (ARG)
     _nrf24l01SendEnd
       _nrf24l01SPIEnd
     _nrf24l01SendFlash
       _nrf24l01SPISend
       _read_flashmem
     _nrf24l01SendStart
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SendFlash
         _nrf24l01SPISend
         _read_flashmem
       _nrf24l01SetTransmitMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
     _nrf24l01SendString
       _nrf24l01SPISend
     _nrf24l01SetRecieveMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _read_flashmem
     _startADC
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _read_flashmem
   _write_flashmem

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      44       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     25      36       6       67.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      44       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jun 05 17:50:55 2018

                     __CFG_CP$OFF 0000                nrf24l01SendFlash@i 002B               nrf24l01Send@command 0073  
 __size_of_nrf24l01SetRecieveMode 001D                       __CFG_LVP$ON 0000                               l172 009E  
                             l191 0290                               l186 01B7                               l528 02E5  
                             u515 0429                               _ISR 0004                               u445 0396  
                             u535 0438                               u705 032F                               u465 03A0  
                             u545 043F                               u715 033B                               u475 03AA  
                             u485 03B2                               u750 0060                               u675 030F  
                             u907 0495                               u764 0062                               u917 04AB  
                             u695 031B                               u927 04B2                               u937 04C6  
                             u857 0247                               u947 0504                               u867 04EC  
                             u877 04F5                               u887 01BF                               u897 0414  
                    __CFG_BORV$LO 0000                               wreg 0009                              ?_ISR 0070  
                  ??_nrf24l01Init 0029                              l1305 03B1                              l1321 0426  
                            l1323 0432                              l1331 0447                              l1309 03BA  
                            l1327 043E                              l1417 0487                              l1425 04CF  
                            l1613 030C                              l1365 02A5                              l1623 033A  
                            l1615 031A                              l1375 02C1                              l1297 0393  
                            l1465 0417                              l1627 0345                              l1299 039F  
                            l1715 006E                              l1493 044E                              l1735 00A6  
                            l1719 0077                              l1911 029D                              l1761 00E2  
                            l1753 00D2                    ??_nrf24l01Send 0072                              l1771 0105  
                            l1781 015E                              l1765 00EA                              l1757 00DA  
                            l1749 00CA                              l1775 0131                              l1767 00F3  
                            l1769 00FC                              l1779 014D                              l1699 0056  
                            l1799 019A                              STR_1 0559                      __CFG_WDTE$ON 0000  
                            STR_2 0551                              STR_3 0580                              STR_4 0557  
                            i1l50 054A    __size_of_nrf24l01InterfaceInit 000E                      __CFG_WRT$OFF 0000  
   __end_of_nrf24l01InterfaceInit 053A                     __p_NVMEM_text 07E0                              _main 0237  
                            _byte 0052                              _mode 007D                              _itoa 046F  
                            _loop 0051                              fsr0h 0005                              fsr1h 0007  
                            indf0 0000                              fsr0l 0004                              indf1 0001  
                            fsr1l 0006                              btemp 007E                              _utoa 029F  
                            start 0042          ?_nrf24l01SetTransmitMode 0070                     __CFG_MCLRE$ON 0000  
                           ??_ISR 0076               nrf24l01SendString@i 0025       __size_of_nrf24l01SendString 0023  
                           ?_main 0070                             ?_itoa 0031                             ?_loop 0070  
                 __end_of___lldiv 034E                             ?_utoa 0028                   __end_of___lwdiv 03BF  
                           i1l155 0033                             i1l158 003D                   __end_of___lwmod 044C  
                           _NVMEM 07E0                             u95_27 056A                             u96_27 056F  
                   __CFG_PWRTE$ON 0000                             __itoa 050D                    __CFG_BOREN$OFF 0000  
          _nrf24l01SetRecieveMode 0492             nrf24l01SendFlash@btye 002C                             utoa@c 002F  
                           utoa@v 002D                             status 0003                             wtemp0 007E  
                _nrf24l01SPIStart 0567                   __initialization 0043                      __end_of_main 029F  
                    __end_of_itoa 0492                      __end_of_loop 01B8                      __end_of_utoa 02FB  
                  __CFG_LPBOR$OFF 0000                            ??_main 0042                            ??_itoa 0035  
                          ??_loop 003E                            ??_utoa 002C                  ??_write_flashmem 0024  
                ??_nrf24l01SPIEnd 0070                     main@bootCount 0043          __size_of_nrf24l01SPISend 000B  
                          ?__itoa 0038                            _ADRESH 009C                            _ADRESL 009B  
                          _ANSELA 018C                            _ANSELC 018E                            i1l1395 054F  
                          i1l1825 0035                            i1l1827 0037                            i1l1829 0039  
                          _PMADRH 0192                            _PMADRL 0191                            _PMDATH 0194  
                          _PMDATL 0193                            _PMCON1 0195                            _PMCON2 0196  
        __size_of_nrf24l01SendEnd 0012              __size_of_nrf24l01ISR 000F                            _adcSum 0045  
                  __CFG_STVREN$ON 0000                         ??___lldiv 0028                         ??___lwdiv 0024  
                       ??___lwmod 0024                            _buffer 004C              __end_of_nrf24l01Init 04FB  
            __end_of_nrf24l01Send 0546             _nrf24l01InitRegisters 01B8              write_flashmem@offset 0020  
                          itoa@cp 0036                      __pdataCOMMON 007D                  __end_of_startADC 041F  
          __size_of_read_flashmem 0032           __end_of__initialization 004E                      __itoa@buffer 003D  
                   __end_of_NVMEM 0800                      __itoa@number 0038                    __pcstackCOMMON 0070  
                    __pidataBANK0 0586                     __end_of__itoa 051D     nrf24l01InitRegisters@enRXAddr 0026  
                  _OPTION_REGbits 0095                           ??__itoa 003B                        __pbssBANK0 0045  
                      __itoa@base 003A                 ??_nrf24l01SPISend 0070                         ISR@result 007A  
                   _read_flashmem 03BF                        __pmaintext 0237                 ??_nrf24l01SendEnd 0020  
          ?_nrf24l01InitRegisters 0070                        __pintentry 0004                 _nrf24l01SendFlash 04CA  
             nrf24l01SPISend@data 0070                 _nrf24l01SendStart 0560                ?_nrf24l01SendFlash 0070  
              ?_nrf24l01SendStart 0070             __end_of_n_ADDRESS_MUL 0588  __size_of_nrf24l01SetTransmitMode 001B  
        __end_of_nrf24l01SPIStart 056E               ??_nrf24l01SendFlash 0029                           _SSP1BUF 0211  
         ?_nrf24l01SetRecieveMode 0070               ??_nrf24l01SendStart 002D          nrf24l01SendString@string 0020  
           _nrf24l01InterfaceInit 052C                    ?_read_flashmem 0020             __size_of_nrf24l01Init 0016  
           __size_of_nrf24l01Send 000C         __end_of_nrf24l01SendFlash 04E5        __end_of_nrf24l01SendString 046F  
       __end_of_nrf24l01SendStart 0567                           _adcLoop 007C                         ?_startADC 0070  
                         ___lldiv 02FB                           ___lwdiv 038A                           ___lwmod 041F  
                         __ptext1 034E                           __ptext2 04E5                           __ptext3 052C  
                         __ptext4 01B8                           __ptext5 0051                           __ptext6 03F1  
                         __ptext7 0492                           __ptext8 044C                           __ptext9 0560  
                    __size_of_ISR 003E                           _counter 0049    __end_of_nrf24l01SetRecieveMode 04AF  
           write_flashmem@address 0024                           clrloop0 0576              end_of_initialization 004E  
                    _nrf24l01Init 04E5                      _nrf24l01Send 053A                           itoa@buf 0037  
                         itoa@val 0031                   ___lldiv@divisor 0020                   ___lldiv@counter 002D  
                      ??_startADC 0020           nrf24l01SendFlash@offset 002A                           utoa@buf 0030  
                         utoa@val 0028                         _PORTAbits 000C                  __CFG_FOSC$INTOSC 0000  
                       _TRISAbits 008C                         _TRISCbits 008E                  nrf24l01Send@data 0071  
                   ??_nrf24l01ISR 0074            ?_nrf24l01InterfaceInit 0070                   ??_read_flashmem 0022  
      __size_of_nrf24l01SendFlash 001B        __size_of_nrf24l01SendStart 0007     nrf24l01SetTransmitMode@config 0021  
                   __pidataCOMMON 0585           _nrf24l01SetTransmitMode 04AF                write_flashmem@data 0022  
             start_initialization 0043                   _nrf24l01SPISend 0546                       __end_of_ISR 0042  
         __size_of_write_flashmem 003C           __size_of_nrf24l01SPIEnd 0007                   _nrf24l01SendEnd 04FB  
         ??_nrf24l01InitRegisters 0020               __end_of_nrf24l01ISR 052C                       __pdataBANK0 0055  
                     __pbssCOMMON 007C                         ___latbits 0000                     __pcstackBANK0 0020  
               ?_nrf24l01SPIStart 0070                ??_nrf24l01SPIStart 0070                  ___lwdiv@dividend 0022  
                        ?___lldiv 0020                          ?___lwdiv 0020         ??_nrf24l01SetTransmitMode 0020  
                        ?___lwmod 0020              __end_of_n_ADDRESS_P0 0580           __end_of_nrf24l01SPISend 0551  
                   _NVMEM_absaddr 07E0                 __size_of_startADC 002E         nrf24l01InitRegisters@enAA 0027  
              _nrf24l01SendString 044C           __end_of_nrf24l01SendEnd 050D                  ___lwdiv@quotient 0025  
                  __size_of__itoa 0010               ?_nrf24l01SendString 0020                       _nrf24l01ISR 051D  
                       clear_ram0 0575                          _PIE1bits 0091                          _PIR1bits 0011  
                       _sleepLoop 004B              ??_nrf24l01SendString 0022                        _ADCON0bits 009D  
                      _ADCON1bits 009E                          _WPUAbits 020C   __end_of_nrf24l01SetTransmitMode 04CA  
         ??_nrf24l01InterfaceInit 0020                 nrf24l01ISR@status 0075                    _write_flashmem 034E  
                  _nrf24l01SPIEnd 056E                   startADC@channel 0021              read_flashmem@address 0027  
                __size_of___lldiv 0053                  __size_of___lwdiv 0035                  __size_of___lwmod 002D  
                ?_nrf24l01SPISend 0070                        _ANSELAbits 018C                        _ANSELCbits 018E  
                   _n_ADDRESS_MUL 0587                   ___lwdiv@divisor 0020                   ___lwdiv@counter 0027  
                        __ptext10 04AF                          __ptext11 04CA                          __ptext12 03BF  
                        __ptext21 051D                          __ptext13 04FB                          __ptext22 053A  
                        __ptext14 050D                          __ptext23 0567                          __ptext15 046F  
                        __ptext24 0546                          __ptext16 029F            __end_of_write_flashmem 038A  
                        __ptext25 056E                          __ptext17 041F                          __ptext18 038A  
                        __ptext19 02FB                  ?_nrf24l01SendEnd 0070            __end_of_nrf24l01SPIEnd 0575  
                   __size_of_main 0068                     __size_of_itoa 0023                     __size_of_loop 0167  
                   __size_of_utoa 005C      nrf24l01InitRegisters@feature 0022                          _nextMode 0055  
           __end_of_read_flashmem 03F1      nrf24l01InitRegisters@rfSetup 0023    __size_of_nrf24l01InitRegisters 007F  
   __end_of_nrf24l01InitRegisters 0237                          int$flags 007E                          _startADC 03F1  
    nrf24l01InitRegisters@setupAW 0021                      _SSP1STATbits 0214          ??_nrf24l01SetRecieveMode 0020  
                      _INTCONbits 000B                        _FVRCONbits 0117                          itoa@base 0033  
                 ?_write_flashmem 0020                   ?_nrf24l01SPIEnd 0070                          intlevel1 0000  
             read_flashmem@offset 0020                      _n_ADDRESS_P0 057B               read_flashmem@result 0025  
                      _PMCON1bits 0195                  ___lwmod@dividend 0022                  ___lldiv@dividend 0024  
               __CFG_CLKOUTEN$OFF 0000       nrf24l01InitRegisters@config 0024                        _OSCCONbits 0099  
       __size_of_nrf24l01SPIStart 0007      nrf24l01SetRecieveMode@config 0021       nrf24l01InitRegisters@status 0025  
                   __pstringtext1 057B                     __pstringtext2 0587                     __pstringtext3 0551  
                   __pstringtext4 0559                     __pstringtext5 0580                     __pstringtext6 0000  
                        utoa@base 002A        nrf24l01InitRegisters@DynPD 0028                  ___lldiv@quotient 0029  
                 ___lwmod@divisor 0020                   ___lwmod@counter 0025                       _SSPCON1bits 0215  
                      _WDTCONbits 0097                     ?_nrf24l01Init 0070                     ?_nrf24l01Send 0071  
                      _STATUSbits 0003                      ?_nrf24l01ISR 0070  
