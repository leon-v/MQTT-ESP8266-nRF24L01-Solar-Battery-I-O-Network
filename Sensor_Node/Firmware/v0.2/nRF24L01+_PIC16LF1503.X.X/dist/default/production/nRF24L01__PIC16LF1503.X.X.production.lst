

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jun 06 13:55:40 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	_NVMEM_text,global,class=CODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	cinit,global,class=CODE,merge=1,delta=2
    14                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     
    49                           ; Version 1.45
    50                           ; Generated 16/11/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC16LF1503 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0008                     	;# 
    92  0009                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  000E                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  008C                     	;# 
   110  008E                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  010C                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011D                     	;# 
   137  018C                     	;# 
   138  018E                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  020C                     	;# 
   148  0211                     	;# 
   149  0211                     	;# 
   150  0212                     	;# 
   151  0212                     	;# 
   152  0213                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0214                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0216                     	;# 
   160  0216                     	;# 
   161  0217                     	;# 
   162  0217                     	;# 
   163  0391                     	;# 
   164  0392                     	;# 
   165  0393                     	;# 
   166  0498                     	;# 
   167  0498                     	;# 
   168  0499                     	;# 
   169  049A                     	;# 
   170  049B                     	;# 
   171  049B                     	;# 
   172  049C                     	;# 
   173  049D                     	;# 
   174  049E                     	;# 
   175  049F                     	;# 
   176  0611                     	;# 
   177  0612                     	;# 
   178  0613                     	;# 
   179  0613                     	;# 
   180  0614                     	;# 
   181  0615                     	;# 
   182  0616                     	;# 
   183  0616                     	;# 
   184  0617                     	;# 
   185  0618                     	;# 
   186  0619                     	;# 
   187  0619                     	;# 
   188  061A                     	;# 
   189  061B                     	;# 
   190  061C                     	;# 
   191  061C                     	;# 
   192  0691                     	;# 
   193  0692                     	;# 
   194  0693                     	;# 
   195  0694                     	;# 
   196  0695                     	;# 
   197  0F0F                     	;# 
   198  0F10                     	;# 
   199  0F11                     	;# 
   200  0F12                     	;# 
   201  0F13                     	;# 
   202  0F14                     	;# 
   203  0F15                     	;# 
   204  0F16                     	;# 
   205  0F17                     	;# 
   206  0F18                     	;# 
   207  0F19                     	;# 
   208  0F1A                     	;# 
   209  0F1B                     	;# 
   210  0F1C                     	;# 
   211  0F1D                     	;# 
   212  0F1E                     	;# 
   213  0F1F                     	;# 
   214  0FE3                     	;# 
   215  0FE4                     	;# 
   216  0FE5                     	;# 
   217  0FE6                     	;# 
   218  0FE7                     	;# 
   219  0FE8                     	;# 
   220  0FE9                     	;# 
   221  0FEA                     	;# 
   222  0FEB                     	;# 
   223  0FED                     	;# 
   224  0FEE                     	;# 
   225  0FEF                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000E                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  008C                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0095                     	;# 
   258  0096                     	;# 
   259  0097                     	;# 
   260  0099                     	;# 
   261  009A                     	;# 
   262  009B                     	;# 
   263  009B                     	;# 
   264  009C                     	;# 
   265  009D                     	;# 
   266  009E                     	;# 
   267  009F                     	;# 
   268  010C                     	;# 
   269  010E                     	;# 
   270  0111                     	;# 
   271  0112                     	;# 
   272  0113                     	;# 
   273  0114                     	;# 
   274  0115                     	;# 
   275  0116                     	;# 
   276  0117                     	;# 
   277  0118                     	;# 
   278  0119                     	;# 
   279  011D                     	;# 
   280  018C                     	;# 
   281  018E                     	;# 
   282  0191                     	;# 
   283  0191                     	;# 
   284  0192                     	;# 
   285  0193                     	;# 
   286  0193                     	;# 
   287  0194                     	;# 
   288  0195                     	;# 
   289  0196                     	;# 
   290  020C                     	;# 
   291  0211                     	;# 
   292  0211                     	;# 
   293  0212                     	;# 
   294  0212                     	;# 
   295  0213                     	;# 
   296  0213                     	;# 
   297  0214                     	;# 
   298  0214                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0216                     	;# 
   303  0216                     	;# 
   304  0217                     	;# 
   305  0217                     	;# 
   306  0391                     	;# 
   307  0392                     	;# 
   308  0393                     	;# 
   309  0498                     	;# 
   310  0498                     	;# 
   311  0499                     	;# 
   312  049A                     	;# 
   313  049B                     	;# 
   314  049B                     	;# 
   315  049C                     	;# 
   316  049D                     	;# 
   317  049E                     	;# 
   318  049F                     	;# 
   319  0611                     	;# 
   320  0612                     	;# 
   321  0613                     	;# 
   322  0613                     	;# 
   323  0614                     	;# 
   324  0615                     	;# 
   325  0616                     	;# 
   326  0616                     	;# 
   327  0617                     	;# 
   328  0618                     	;# 
   329  0619                     	;# 
   330  0619                     	;# 
   331  061A                     	;# 
   332  061B                     	;# 
   333  061C                     	;# 
   334  061C                     	;# 
   335  0691                     	;# 
   336  0692                     	;# 
   337  0693                     	;# 
   338  0694                     	;# 
   339  0695                     	;# 
   340  0F0F                     	;# 
   341  0F10                     	;# 
   342  0F11                     	;# 
   343  0F12                     	;# 
   344  0F13                     	;# 
   345  0F14                     	;# 
   346  0F15                     	;# 
   347  0F16                     	;# 
   348  0F17                     	;# 
   349  0F18                     	;# 
   350  0F19                     	;# 
   351  0F1A                     	;# 
   352  0F1B                     	;# 
   353  0F1C                     	;# 
   354  0F1D                     	;# 
   355  0F1E                     	;# 
   356  0F1F                     	;# 
   357  0FE3                     	;# 
   358  0FE4                     	;# 
   359  0FE5                     	;# 
   360  0FE6                     	;# 
   361  0FE7                     	;# 
   362  0FE8                     	;# 
   363  0FE9                     	;# 
   364  0FEA                     	;# 
   365  0FEB                     	;# 
   366  0FED                     	;# 
   367  0FEE                     	;# 
   368  0FEF                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000E                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0015                     	;# 
   387  0016                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001C                     	;# 
   395  008C                     	;# 
   396  008E                     	;# 
   397  0091                     	;# 
   398  0092                     	;# 
   399  0093                     	;# 
   400  0095                     	;# 
   401  0096                     	;# 
   402  0097                     	;# 
   403  0099                     	;# 
   404  009A                     	;# 
   405  009B                     	;# 
   406  009B                     	;# 
   407  009C                     	;# 
   408  009D                     	;# 
   409  009E                     	;# 
   410  009F                     	;# 
   411  010C                     	;# 
   412  010E                     	;# 
   413  0111                     	;# 
   414  0112                     	;# 
   415  0113                     	;# 
   416  0114                     	;# 
   417  0115                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  0118                     	;# 
   421  0119                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018E                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  020C                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0391                     	;# 
   450  0392                     	;# 
   451  0393                     	;# 
   452  0498                     	;# 
   453  0498                     	;# 
   454  0499                     	;# 
   455  049A                     	;# 
   456  049B                     	;# 
   457  049B                     	;# 
   458  049C                     	;# 
   459  049D                     	;# 
   460  049E                     	;# 
   461  049F                     	;# 
   462  0611                     	;# 
   463  0612                     	;# 
   464  0613                     	;# 
   465  0613                     	;# 
   466  0614                     	;# 
   467  0615                     	;# 
   468  0616                     	;# 
   469  0616                     	;# 
   470  0617                     	;# 
   471  0618                     	;# 
   472  0619                     	;# 
   473  0619                     	;# 
   474  061A                     	;# 
   475  061B                     	;# 
   476  061C                     	;# 
   477  061C                     	;# 
   478  0691                     	;# 
   479  0692                     	;# 
   480  0693                     	;# 
   481  0694                     	;# 
   482  0695                     	;# 
   483  0F0F                     	;# 
   484  0F10                     	;# 
   485  0F11                     	;# 
   486  0F12                     	;# 
   487  0F13                     	;# 
   488  0F14                     	;# 
   489  0F15                     	;# 
   490  0F16                     	;# 
   491  0F17                     	;# 
   492  0F18                     	;# 
   493  0F19                     	;# 
   494  0F1A                     	;# 
   495  0F1B                     	;# 
   496  0F1C                     	;# 
   497  0F1D                     	;# 
   498  0F1E                     	;# 
   499  0F1F                     	;# 
   500  0FE3                     	;# 
   501  0FE4                     	;# 
   502  0FE5                     	;# 
   503  0FE6                     	;# 
   504  0FE7                     	;# 
   505  0FE8                     	;# 
   506  0FE9                     	;# 
   507  0FEA                     	;# 
   508  0FEB                     	;# 
   509  0FED                     	;# 
   510  0FEE                     	;# 
   511  0FEF                     	;# 
   512  0000                     	;# 
   513  0001                     	;# 
   514  0002                     	;# 
   515  0003                     	;# 
   516  0004                     	;# 
   517  0005                     	;# 
   518  0006                     	;# 
   519  0007                     	;# 
   520  0008                     	;# 
   521  0009                     	;# 
   522  000A                     	;# 
   523  000B                     	;# 
   524  000C                     	;# 
   525  000E                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0013                     	;# 
   529  0015                     	;# 
   530  0016                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001C                     	;# 
   538  008C                     	;# 
   539  008E                     	;# 
   540  0091                     	;# 
   541  0092                     	;# 
   542  0093                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  009F                     	;# 
   554  010C                     	;# 
   555  010E                     	;# 
   556  0111                     	;# 
   557  0112                     	;# 
   558  0113                     	;# 
   559  0114                     	;# 
   560  0115                     	;# 
   561  0116                     	;# 
   562  0117                     	;# 
   563  0118                     	;# 
   564  0119                     	;# 
   565  011D                     	;# 
   566  018C                     	;# 
   567  018E                     	;# 
   568  0191                     	;# 
   569  0191                     	;# 
   570  0192                     	;# 
   571  0193                     	;# 
   572  0193                     	;# 
   573  0194                     	;# 
   574  0195                     	;# 
   575  0196                     	;# 
   576  020C                     	;# 
   577  0211                     	;# 
   578  0211                     	;# 
   579  0212                     	;# 
   580  0212                     	;# 
   581  0213                     	;# 
   582  0213                     	;# 
   583  0214                     	;# 
   584  0214                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0216                     	;# 
   589  0216                     	;# 
   590  0217                     	;# 
   591  0217                     	;# 
   592  0391                     	;# 
   593  0392                     	;# 
   594  0393                     	;# 
   595  0498                     	;# 
   596  0498                     	;# 
   597  0499                     	;# 
   598  049A                     	;# 
   599  049B                     	;# 
   600  049B                     	;# 
   601  049C                     	;# 
   602  049D                     	;# 
   603  049E                     	;# 
   604  049F                     	;# 
   605  0611                     	;# 
   606  0612                     	;# 
   607  0613                     	;# 
   608  0613                     	;# 
   609  0614                     	;# 
   610  0615                     	;# 
   611  0616                     	;# 
   612  0616                     	;# 
   613  0617                     	;# 
   614  0618                     	;# 
   615  0619                     	;# 
   616  0619                     	;# 
   617  061A                     	;# 
   618  061B                     	;# 
   619  061C                     	;# 
   620  061C                     	;# 
   621  0691                     	;# 
   622  0692                     	;# 
   623  0693                     	;# 
   624  0694                     	;# 
   625  0695                     	;# 
   626  0F0F                     	;# 
   627  0F10                     	;# 
   628  0F11                     	;# 
   629  0F12                     	;# 
   630  0F13                     	;# 
   631  0F14                     	;# 
   632  0F15                     	;# 
   633  0F16                     	;# 
   634  0F17                     	;# 
   635  0F18                     	;# 
   636  0F19                     	;# 
   637  0F1A                     	;# 
   638  0F1B                     	;# 
   639  0F1C                     	;# 
   640  0F1D                     	;# 
   641  0F1E                     	;# 
   642  0F1F                     	;# 
   643  0FE3                     	;# 
   644  0FE4                     	;# 
   645  0FE5                     	;# 
   646  0FE6                     	;# 
   647  0FE7                     	;# 
   648  0FE8                     	;# 
   649  0FE9                     	;# 
   650  0FEA                     	;# 
   651  0FEB                     	;# 
   652  0FED                     	;# 
   653  0FEE                     	;# 
   654  0FEF                     	;# 
   655  0000                     	;# 
   656  0001                     	;# 
   657  0002                     	;# 
   658  0003                     	;# 
   659  0004                     	;# 
   660  0005                     	;# 
   661  0006                     	;# 
   662  0007                     	;# 
   663  0008                     	;# 
   664  0009                     	;# 
   665  000A                     	;# 
   666  000B                     	;# 
   667  000C                     	;# 
   668  000E                     	;# 
   669  0011                     	;# 
   670  0012                     	;# 
   671  0013                     	;# 
   672  0015                     	;# 
   673  0016                     	;# 
   674  0016                     	;# 
   675  0017                     	;# 
   676  0018                     	;# 
   677  0019                     	;# 
   678  001A                     	;# 
   679  001B                     	;# 
   680  001C                     	;# 
   681  008C                     	;# 
   682  008E                     	;# 
   683  0091                     	;# 
   684  0092                     	;# 
   685  0093                     	;# 
   686  0095                     	;# 
   687  0096                     	;# 
   688  0097                     	;# 
   689  0099                     	;# 
   690  009A                     	;# 
   691  009B                     	;# 
   692  009B                     	;# 
   693  009C                     	;# 
   694  009D                     	;# 
   695  009E                     	;# 
   696  009F                     	;# 
   697  010C                     	;# 
   698  010E                     	;# 
   699  0111                     	;# 
   700  0112                     	;# 
   701  0113                     	;# 
   702  0114                     	;# 
   703  0115                     	;# 
   704  0116                     	;# 
   705  0117                     	;# 
   706  0118                     	;# 
   707  0119                     	;# 
   708  011D                     	;# 
   709  018C                     	;# 
   710  018E                     	;# 
   711  0191                     	;# 
   712  0191                     	;# 
   713  0192                     	;# 
   714  0193                     	;# 
   715  0193                     	;# 
   716  0194                     	;# 
   717  0195                     	;# 
   718  0196                     	;# 
   719  020C                     	;# 
   720  0211                     	;# 
   721  0211                     	;# 
   722  0212                     	;# 
   723  0212                     	;# 
   724  0213                     	;# 
   725  0213                     	;# 
   726  0214                     	;# 
   727  0214                     	;# 
   728  0215                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0216                     	;# 
   732  0216                     	;# 
   733  0217                     	;# 
   734  0217                     	;# 
   735  0391                     	;# 
   736  0392                     	;# 
   737  0393                     	;# 
   738  0498                     	;# 
   739  0498                     	;# 
   740  0499                     	;# 
   741  049A                     	;# 
   742  049B                     	;# 
   743  049B                     	;# 
   744  049C                     	;# 
   745  049D                     	;# 
   746  049E                     	;# 
   747  049F                     	;# 
   748  0611                     	;# 
   749  0612                     	;# 
   750  0613                     	;# 
   751  0613                     	;# 
   752  0614                     	;# 
   753  0615                     	;# 
   754  0616                     	;# 
   755  0616                     	;# 
   756  0617                     	;# 
   757  0618                     	;# 
   758  0619                     	;# 
   759  0619                     	;# 
   760  061A                     	;# 
   761  061B                     	;# 
   762  061C                     	;# 
   763  061C                     	;# 
   764  0691                     	;# 
   765  0692                     	;# 
   766  0693                     	;# 
   767  0694                     	;# 
   768  0695                     	;# 
   769  0F0F                     	;# 
   770  0F10                     	;# 
   771  0F11                     	;# 
   772  0F12                     	;# 
   773  0F13                     	;# 
   774  0F14                     	;# 
   775  0F15                     	;# 
   776  0F16                     	;# 
   777  0F17                     	;# 
   778  0F18                     	;# 
   779  0F19                     	;# 
   780  0F1A                     	;# 
   781  0F1B                     	;# 
   782  0F1C                     	;# 
   783  0F1D                     	;# 
   784  0F1E                     	;# 
   785  0F1F                     	;# 
   786  0FE3                     	;# 
   787  0FE4                     	;# 
   788  0FE5                     	;# 
   789  0FE6                     	;# 
   790  0FE7                     	;# 
   791  0FE8                     	;# 
   792  0FE9                     	;# 
   793  0FEA                     	;# 
   794  0FEB                     	;# 
   795  0FED                     	;# 
   796  0FEE                     	;# 
   797  0FEF                     	;# 
   798                           
   799                           	psect	idataCOMMON
   800  0644                     __pidataCOMMON:	
   801                           
   802                           ;initializer for _mode
   803  0644  340A               	retlw	10
   804                           
   805                           	psect	idataBANK0
   806  0645                     __pidataBANK0:	
   807                           
   808                           ;initializer for _nextMode
   809  0645  340A               	retlw	10
   810  07E0                     _NVMEM_absaddr	set	2016
   811                           
   812                           	psect	stringtext1
   813  063A                     __pstringtext1:	
   814  063A                     _n_ADDRESS_P0:	
   815  063A  34AD               	retlw	173
   816  063B  3487               	retlw	135
   817  063C  3466               	retlw	102
   818  063D  34BC               	retlw	188
   819  063E  34BB               	retlw	187
   820  063F                     __end_of_n_ADDRESS_P0:	
   821                           
   822                           	psect	stringtext2
   823  0646                     __pstringtext2:	
   824  0646                     _n_ADDRESS_MUL:	
   825  0646  3421               	retlw	33
   826  0647                     __end_of_n_ADDRESS_MUL:	
   827  07E0                     _NVMEM_absaddr	set	2016
   828                           
   829                           	psect	_NVMEM_text
   830  07E0                     __p_NVMEM_text:	
   831  07E0                     _NVMEM:	
   832  07E0  3455               	retlw	85
   833  07E1  346E               	retlw	110
   834  07E2  3463               	retlw	99
   835  07E3  346F               	retlw	111
   836  07E4  346E               	retlw	110
   837  07E5  3466               	retlw	102
   838  07E6  3469               	retlw	105
   839  07E7  3467               	retlw	103
   840  07E8  3475               	retlw	117
   841  07E9  3472               	retlw	114
   842  07EA  3465               	retlw	101
   843  07EB  3464               	retlw	100
   844  07EC  3432               	retlw	50
   845  07ED  3400               	retlw	0
   846  07EE  3400               	retlw	0
   847  07EF  3400               	retlw	0
   848  07F0  3400               	retlw	0
   849  07F1  3400               	retlw	0
   850  07F2  3400               	retlw	0
   851  07F3  3400               	retlw	0
   852  07F4  3400               	retlw	0
   853  07F5  3400               	retlw	0
   854  07F6  3400               	retlw	0
   855  07F7  3400               	retlw	0
   856  07F8  3400               	retlw	0
   857  07F9  3400               	retlw	0
   858  07FA  3400               	retlw	0
   859  07FB  3400               	retlw	0
   860  07FC  3400               	retlw	0
   861  07FD  3400               	retlw	0
   862  07FE  3400               	retlw	0
   863  07FF  3400               	retlw	0
   864  0800                     __end_of_NVMEM:	
   865  0003                     _STATUSbits	set	3
   866  0011                     _PIR1bits	set	17
   867  000C                     _PORTAbits	set	12
   868  000B                     _INTCONbits	set	11
   869  0097                     _WDTCONbits	set	151
   870  0091                     _PIE1bits	set	145
   871  009E                     _ADCON1bits	set	158
   872  0095                     _OPTION_REGbits	set	149
   873  0099                     _OSCCONbits	set	153
   874  009D                     _ADCON0bits	set	157
   875  009C                     _ADRESH	set	156
   876  009B                     _ADRESL	set	155
   877  008E                     _TRISCbits	set	142
   878  008C                     _TRISAbits	set	140
   879  0117                     _FVRCONbits	set	279
   880  018E                     _ANSELCbits	set	398
   881  018C                     _ANSELAbits	set	396
   882  018E                     _ANSELC	set	398
   883  018C                     _ANSELA	set	396
   884  0194                     _PMDATH	set	404
   885  0193                     _PMDATL	set	403
   886  0196                     _PMCON2	set	406
   887  0195                     _PMCON1bits	set	405
   888  0192                     _PMADRH	set	402
   889  0191                     _PMADRL	set	401
   890  0195                     _PMCON1	set	405
   891  020C                     _WPUAbits	set	524
   892  0211                     _SSP1BUF	set	529
   893  0214                     _SSP1STATbits	set	532
   894  0215                     _SSPCON1bits	set	533
   895                           
   896                           	psect	stringtext3
   897  0617                     __pstringtext3:	
   898  0617                     STR_2:	
   899  0617  342F               	retlw	47	;'/'
   900  0618  3443               	retlw	67	;'C'
   901  0619  344F               	retlw	79	;'O'
   902  061A  3455               	retlw	85	;'U'
   903  061B  344E               	retlw	78	;'N'
   904  061C  3454               	retlw	84	;'T'
   905  061D  342F               	retlw	47	;'/'
   906  061E  3400               	retlw	0
   907                           
   908                           	psect	stringtext4
   909  061F                     __pstringtext4:	
   910  061F                     STR_1:	
   911  061F  342F               	retlw	47	;'/'
   912  0620  3442               	retlw	66	;'B'
   913  0621  344F               	retlw	79	;'O'
   914  0622  344F               	retlw	79	;'O'
   915  0623  3454               	retlw	84	;'T'
   916  0624  342F               	retlw	47	;'/'
   917  0625  3400               	retlw	0
   918                           
   919                           	psect	stringtext5
   920  063F                     __pstringtext5:	
   921  063F                     STR_3:	
   922  063F  342F               	retlw	47	;'/'
   923  0640  3441               	retlw	65	;'A'
   924  0641  3444               	retlw	68	;'D'
   925  0642  3443               	retlw	67	;'C'
   926  0643  3400               	retlw	0
   927                           
   928                           	psect	stringtext6
   929  0000                     __pstringtext6:	
   930  061D                     
   931                           ; #config settings
   932  0000                     
   933                           	psect	cinit
   934  0043                     start_initialization:	
   935  0043                     __initialization:	
   936                           
   937                           ; Initialize objects allocated to COMMON
   938  0043  2644               	fcall	__pidataCOMMON	;fetch initializer
   939  0044  00FD               	movwf	__pdataCOMMON& (0+127)
   940                           
   941                           ; Initialize objects allocated to BANK0
   942  0045  2645               	fcall	__pidataBANK0	;fetch initializer
   943  0046  00DB               	movwf	__pdataBANK0& (0+127)
   944                           
   945                           ; Clear objects allocated to COMMON
   946  0047  01FC               	clrf	__pbssCOMMON& (0+127)
   947                           
   948                           ; Clear objects allocated to BANK0
   949  0048  3045               	movlw	low __pbssBANK0
   950  0049  0084               	movwf	4
   951  004A  3000               	movlw	high __pbssBANK0
   952  004B  0085               	movwf	5
   953  004C  3016               	movlw	22
   954  004D  2634               	fcall	clear_ram0
   955  004E                     end_of_initialization:	
   956                           ;End of C runtime variable initialization code
   957                           
   958  004E                     __end_of__initialization:	
   959  004E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   960  004F  0020               	movlb	0
   961  0050  2A86               	ljmp	_main	;jump to C main() function
   962                           
   963                           	psect	bssCOMMON
   964  007C                     __pbssCOMMON:	
   965  007C                     _adcLoop:	
   966  007C                     	ds	1
   967                           
   968                           	psect	dataCOMMON
   969  007D                     __pdataCOMMON:	
   970  007D                     _mode:	
   971  007D                     	ds	1
   972                           
   973                           	psect	bssBANK0
   974  0045                     __pbssBANK0:	
   975  0045                     _adcSum:	
   976  0045                     	ds	4
   977  0049                     _counter:	
   978  0049                     	ds	2
   979  004B                     _string:	
   980  004B                     	ds	16
   981                           
   982                           	psect	dataBANK0
   983  005B                     __pdataBANK0:	
   984  005B                     _nextMode:	
   985  005B                     	ds	1
   986                           
   987                           	psect	clrtext
   988  0634                     clear_ram0:	
   989                           ;	Called with FSR0 containing the base address, and
   990                           ;	WREG with the size to clear
   991                           
   992  0634  0064               	clrwdt	;clear the watchdog before getting into this loop
   993  0635                     clrloop0:	
   994  0635  0180               	clrf	0	;clear RAM location pointed to by FSR
   995  0636  3101               	addfsr 0,1
   996  0637  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   997  0638  2E35               	goto	clrloop0	;have we reached the end yet?
   998  0639  3400               	retlw	0	;all done for this memory range, return
   999                           
  1000                           	psect	cstackCOMMON
  1001  0070                     __pcstackCOMMON:	
  1002  0070                     ?_nrf24l01ISR:	
  1003  0070                     ?_nrf24l01SetRecieveMode:	
  1004                           ; 1 bytes @ 0x0
  1005                           
  1006  0070                     ?_nrf24l01SendString:	
  1007                           ; 1 bytes @ 0x0
  1008                           
  1009  0070                     ?_nrf24l01Init:	
  1010                           ; 1 bytes @ 0x0
  1011                           
  1012  0070                     ?_nrf24l01InterfaceInit:	
  1013                           ; 1 bytes @ 0x0
  1014                           
  1015  0070                     ?_nrf24l01SPISend:	
  1016                           ; 1 bytes @ 0x0
  1017                           
  1018  0070                     ??_nrf24l01SPISend:	
  1019                           ; 1 bytes @ 0x0
  1020                           
  1021  0070                     ?_nrf24l01SPIStart:	
  1022                           ; 1 bytes @ 0x0
  1023                           
  1024  0070                     ??_nrf24l01SPIStart:	
  1025                           ; 1 bytes @ 0x0
  1026                           
  1027  0070                     ?_nrf24l01SPIEnd:	
  1028                           ; 1 bytes @ 0x0
  1029                           
  1030  0070                     ??_nrf24l01SPIEnd:	
  1031                           ; 1 bytes @ 0x0
  1032                           
  1033  0070                     ?_ISR:	
  1034                           ; 1 bytes @ 0x0
  1035                           
  1036  0070                     ?_startADC:	
  1037                           ; 1 bytes @ 0x0
  1038                           
  1039  0070                     ?_loop:	
  1040                           ; 1 bytes @ 0x0
  1041                           
  1042  0070                     ?_main:	
  1043                           ; 1 bytes @ 0x0
  1044                           
  1045  0070                     ?_nrf24l01SetTransmitMode:	
  1046                           ; 1 bytes @ 0x0
  1047                           
  1048  0070                     ?_nrf24l01InitRegisters:	
  1049                           ; 1 bytes @ 0x0
  1050                           
  1051  0070                     nrf24l01SPISend@data:	
  1052                           ; 1 bytes @ 0x0
  1053                           
  1054                           
  1055                           ; 1 bytes @ 0x0
  1056  0070                     	ds	1
  1057  0071                     ?_nrf24l01Send:	
  1058  0071                     nrf24l01Send@data:	
  1059                           ; 1 bytes @ 0x1
  1060                           
  1061                           
  1062                           ; 1 bytes @ 0x1
  1063  0071                     	ds	1
  1064  0072                     ??_nrf24l01Send:	
  1065                           
  1066                           ; 1 bytes @ 0x2
  1067  0072                     	ds	1
  1068  0073                     nrf24l01Send@command:	
  1069                           
  1070                           ; 1 bytes @ 0x3
  1071  0073                     	ds	1
  1072  0074                     ??_nrf24l01ISR:	
  1073                           
  1074                           ; 1 bytes @ 0x4
  1075  0074                     	ds	1
  1076  0075                     nrf24l01ISR@status:	
  1077                           
  1078                           ; 1 bytes @ 0x5
  1079  0075                     	ds	1
  1080  0076                     ??_ISR:	
  1081                           
  1082                           ; 1 bytes @ 0x6
  1083  0076                     	ds	4
  1084  007A                     ISR@result:	
  1085                           
  1086                           ; 2 bytes @ 0xA
  1087  007A                     	ds	2
  1088                           
  1089                           	psect	cstackBANK0
  1090  0020                     __pcstackBANK0:	
  1091  0020                     ??_nrf24l01SetRecieveMode:	
  1092  0020                     ?_write_flashmem:	
  1093                           ; 1 bytes @ 0x0
  1094                           
  1095  0020                     ??_nrf24l01InterfaceInit:	
  1096                           ; 1 bytes @ 0x0
  1097                           
  1098  0020                     ??_startADC:	
  1099                           ; 1 bytes @ 0x0
  1100                           
  1101  0020                     ??_nrf24l01SetTransmitMode:	
  1102                           ; 1 bytes @ 0x0
  1103                           
  1104  0020                     ??_nrf24l01InitRegisters:	
  1105                           ; 1 bytes @ 0x0
  1106                           
  1107  0020                     ?_strlen:	
  1108                           ; 1 bytes @ 0x0
  1109                           
  1110  0020                     ?_read_flashmem:	
  1111                           ; 2 bytes @ 0x0
  1112                           
  1113  0020                     ?___lwdiv:	
  1114                           ; 2 bytes @ 0x0
  1115                           
  1116  0020                     ?___lwmod:	
  1117                           ; 2 bytes @ 0x0
  1118                           
  1119  0020                     ?___lmul:	
  1120                           ; 2 bytes @ 0x0
  1121                           
  1122  0020                     ?___lldiv:	
  1123                           ; 4 bytes @ 0x0
  1124                           
  1125  0020                     write_flashmem@offset:	
  1126                           ; 4 bytes @ 0x0
  1127                           
  1128  0020                     read_flashmem@offset:	
  1129                           ; 2 bytes @ 0x0
  1130                           
  1131  0020                     ___lwdiv@divisor:	
  1132                           ; 2 bytes @ 0x0
  1133                           
  1134  0020                     ___lwmod@divisor:	
  1135                           ; 2 bytes @ 0x0
  1136                           
  1137  0020                     ___lmul@multiplier:	
  1138                           ; 2 bytes @ 0x0
  1139                           
  1140  0020                     ___lldiv@divisor:	
  1141                           ; 4 bytes @ 0x0
  1142                           
  1143                           
  1144                           ; 4 bytes @ 0x0
  1145  0020                     	ds	1
  1146  0021                     startADC@channel:	
  1147  0021                     nrf24l01SetTransmitMode@config:	
  1148                           ; 1 bytes @ 0x1
  1149                           
  1150  0021                     nrf24l01SetRecieveMode@config:	
  1151                           ; 1 bytes @ 0x1
  1152                           
  1153  0021                     nrf24l01InitRegisters@channel:	
  1154                           ; 1 bytes @ 0x1
  1155                           
  1156                           
  1157                           ; 1 bytes @ 0x1
  1158  0021                     	ds	1
  1159  0022                     ??_strlen:	
  1160  0022                     ??_read_flashmem:	
  1161                           ; 1 bytes @ 0x2
  1162                           
  1163  0022                     nrf24l01InitRegisters@setupAW:	
  1164                           ; 1 bytes @ 0x2
  1165                           
  1166  0022                     write_flashmem@data:	
  1167                           ; 1 bytes @ 0x2
  1168                           
  1169  0022                     ___lwdiv@dividend:	
  1170                           ; 2 bytes @ 0x2
  1171                           
  1172  0022                     ___lwmod@dividend:	
  1173                           ; 2 bytes @ 0x2
  1174                           
  1175                           
  1176                           ; 2 bytes @ 0x2
  1177  0022                     	ds	1
  1178  0023                     nrf24l01InitRegisters@feature:	
  1179                           
  1180                           ; 1 bytes @ 0x3
  1181  0023                     	ds	1
  1182  0024                     ??_write_flashmem:	
  1183  0024                     ??___lwdiv:	
  1184                           ; 1 bytes @ 0x4
  1185                           
  1186  0024                     ??___lwmod:	
  1187                           ; 1 bytes @ 0x4
  1188                           
  1189  0024                     nrf24l01InitRegisters@rfSetup:	
  1190                           ; 1 bytes @ 0x4
  1191                           
  1192  0024                     write_flashmem@address:	
  1193                           ; 1 bytes @ 0x4
  1194                           
  1195  0024                     ___lmul@multiplicand:	
  1196                           ; 2 bytes @ 0x4
  1197                           
  1198  0024                     ___lldiv@dividend:	
  1199                           ; 4 bytes @ 0x4
  1200                           
  1201                           
  1202                           ; 4 bytes @ 0x4
  1203  0024                     	ds	1
  1204  0025                     nrf24l01InitRegisters@config:	
  1205  0025                     ___lwmod@counter:	
  1206                           ; 1 bytes @ 0x5
  1207                           
  1208  0025                     read_flashmem@result:	
  1209                           ; 1 bytes @ 0x5
  1210                           
  1211  0025                     ___lwdiv@quotient:	
  1212                           ; 2 bytes @ 0x5
  1213                           
  1214                           
  1215                           ; 2 bytes @ 0x5
  1216  0025                     	ds	1
  1217  0026                     nrf24l01InitRegisters@status:	
  1218  0026                     strlen@cp:	
  1219                           ; 1 bytes @ 0x6
  1220                           
  1221                           
  1222                           ; 1 bytes @ 0x6
  1223  0026                     	ds	1
  1224  0027                     nrf24l01InitRegisters@enRXAddr:	
  1225  0027                     ___lwdiv@counter:	
  1226                           ; 1 bytes @ 0x7
  1227                           
  1228  0027                     strlen@s:	
  1229                           ; 1 bytes @ 0x7
  1230                           
  1231  0027                     read_flashmem@address:	
  1232                           ; 1 bytes @ 0x7
  1233                           
  1234                           
  1235                           ; 2 bytes @ 0x7
  1236  0027                     	ds	1
  1237  0028                     ?_strcpy:	
  1238  0028                     ?_utoa:	
  1239                           ; 1 bytes @ 0x8
  1240                           
  1241  0028                     ??___lmul:	
  1242                           ; 1 bytes @ 0x8
  1243                           
  1244  0028                     ??___lldiv:	
  1245                           ; 1 bytes @ 0x8
  1246                           
  1247  0028                     nrf24l01InitRegisters@enAA:	
  1248                           ; 1 bytes @ 0x8
  1249                           
  1250  0028                     utoa@val:	
  1251                           ; 1 bytes @ 0x8
  1252                           
  1253  0028                     strcpy@from:	
  1254                           ; 2 bytes @ 0x8
  1255                           
  1256  0028                     ___lmul@product:	
  1257                           ; 2 bytes @ 0x8
  1258                           
  1259                           
  1260                           ; 4 bytes @ 0x8
  1261  0028                     	ds	1
  1262  0029                     ??_nrf24l01SendString:	
  1263  0029                     nrf24l01InitRegisters@DynPD:	
  1264                           ; 1 bytes @ 0x9
  1265                           
  1266  0029                     ___lldiv@quotient:	
  1267                           ; 1 bytes @ 0x9
  1268                           
  1269                           
  1270                           ; 4 bytes @ 0x9
  1271  0029                     	ds	1
  1272  002A                     ??_strcpy:	
  1273  002A                     ??_nrf24l01Init:	
  1274                           ; 1 bytes @ 0xA
  1275                           
  1276  002A                     utoa@base:	
  1277                           ; 1 bytes @ 0xA
  1278                           
  1279                           
  1280                           ; 2 bytes @ 0xA
  1281  002A                     	ds	1
  1282  002B                     strcpy@cp:	
  1283                           
  1284                           ; 1 bytes @ 0xB
  1285  002B                     	ds	1
  1286  002C                     ??_utoa:	
  1287  002C                     nrf24l01SendString@btye:	
  1288                           ; 1 bytes @ 0xC
  1289                           
  1290  002C                     strcpy@to:	
  1291                           ; 1 bytes @ 0xC
  1292                           
  1293                           
  1294                           ; 1 bytes @ 0xC
  1295  002C                     	ds	1
  1296  002D                     nrf24l01SendString@string:	
  1297  002D                     ___lldiv@counter:	
  1298                           ; 1 bytes @ 0xD
  1299                           
  1300  002D                     utoa@v:	
  1301                           ; 1 bytes @ 0xD
  1302                           
  1303                           
  1304                           ; 2 bytes @ 0xD
  1305  002D                     	ds	1
  1306  002E                     nrf24l01SendString@i:	
  1307                           
  1308                           ; 1 bytes @ 0xE
  1309  002E                     	ds	1
  1310  002F                     utoa@c:	
  1311                           
  1312                           ; 1 bytes @ 0xF
  1313  002F                     	ds	1
  1314  0030                     utoa@buf:	
  1315                           
  1316                           ; 1 bytes @ 0x10
  1317  0030                     	ds	1
  1318  0031                     ?_itoa:	
  1319  0031                     itoa@val:	
  1320                           ; 1 bytes @ 0x11
  1321                           
  1322                           
  1323                           ; 2 bytes @ 0x11
  1324  0031                     	ds	2
  1325  0033                     itoa@base:	
  1326                           
  1327                           ; 2 bytes @ 0x13
  1328  0033                     	ds	2
  1329  0035                     ??_itoa:	
  1330                           
  1331                           ; 1 bytes @ 0x15
  1332  0035                     	ds	1
  1333  0036                     itoa@cp:	
  1334                           
  1335                           ; 1 bytes @ 0x16
  1336  0036                     	ds	1
  1337  0037                     itoa@buf:	
  1338                           
  1339                           ; 1 bytes @ 0x17
  1340  0037                     	ds	1
  1341  0038                     ?__itoa:	
  1342  0038                     __itoa@number:	
  1343                           ; 1 bytes @ 0x18
  1344                           
  1345                           
  1346                           ; 2 bytes @ 0x18
  1347  0038                     	ds	2
  1348  003A                     __itoa@base:	
  1349                           
  1350                           ; 1 bytes @ 0x1A
  1351  003A                     	ds	1
  1352  003B                     ??__itoa:	
  1353                           
  1354                           ; 1 bytes @ 0x1B
  1355  003B                     	ds	2
  1356  003D                     __itoa@buffer:	
  1357                           
  1358                           ; 1 bytes @ 0x1D
  1359  003D                     	ds	1
  1360  003E                     ??_loop:	
  1361                           
  1362                           ; 1 bytes @ 0x1E
  1363  003E                     	ds	4
  1364  0042                     ??_main:	
  1365                           
  1366                           ; 1 bytes @ 0x22
  1367  0042                     	ds	1
  1368  0043                     main@bootCount:	
  1369                           
  1370                           ; 2 bytes @ 0x23
  1371  0043                     	ds	2
  1372                           
  1373                           	psect	maintext
  1374  0286                     __pmaintext:	
  1375 ;;
  1376 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1377 ;;
  1378 ;; *************** function _main *****************
  1379 ;; Defined at:
  1380 ;;		line 196 in file "main.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;		None
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;  bootCount       2   35[BANK0 ] unsigned int 
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  1    wreg      void 
  1387 ;; Registers used:
  1388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1389 ;; Tracked objects:
  1390 ;;		On entry : B1F/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMMON   BANK0   BANK1
  1394 ;;      Params:         0       0       0
  1395 ;;      Locals:         0       2       0
  1396 ;;      Temps:          0       1       0
  1397 ;;      Totals:         0       3       0
  1398 ;;Total ram usage:        3 bytes
  1399 ;; Hardware stack levels required when called:    9
  1400 ;; This function calls:
  1401 ;;		_loop
  1402 ;;		_nrf24l01Init
  1403 ;;		_read_flashmem
  1404 ;;		_write_flashmem
  1405 ;; This function is called by:
  1406 ;;		Startup code after reset
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           
  1411                           ;psect for function _main
  1412  0286                     _main:	
  1413                           
  1414                           ;main.c: 199: ANSELA = 0x00;
  1415                           
  1416                           ;incstack = 0
  1417                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1418  0286  0023               	movlb	3	; select bank3
  1419  0287  018C               	clrf	12	;volatile
  1420                           
  1421                           ;main.c: 200: ANSELC = 0x00;
  1422  0288  018E               	clrf	14	;volatile
  1423                           
  1424                           ;main.c: 206: INTCONbits.PEIE = 0;
  1425  0289  130B               	bcf	11,6	;volatile
  1426                           
  1427                           ;main.c: 207: INTCONbits.GIE = 0;
  1428  028A  138B               	bcf	11,7	;volatile
  1429                           
  1430                           ;main.c: 209: OSCCONbits.IRCF = 0b1111;
  1431  028B  3078               	movlw	120
  1432  028C  0021               	movlb	1	; select bank1
  1433  028D  0499               	iorwf	25,f	;volatile
  1434                           
  1435                           ;main.c: 210: OSCCONbits.SCS = 0b10;
  1436  028E  0819               	movf	25,w	;volatile
  1437  028F  39FC               	andlw	-4
  1438  0290  3802               	iorlw	2
  1439  0291  0099               	movwf	25	;volatile
  1440                           
  1441                           ;main.c: 212: _delay((unsigned long)((10)*(16000000/4000.0)));
  1442  0292  3034               	movlw	52
  1443  0293  0020               	movlb	0	; select bank0
  1444  0294  00C2               	movwf	??_main
  1445  0295  30F1               	movlw	241
  1446  0296                     u1057:	
  1447  0296  0B89               	decfsz	9,f
  1448  0297  2A96               	goto	u1057
  1449  0298  0BC2               	decfsz	??_main,f
  1450  0299  2A96               	goto	u1057
  1451  029A  3200               	nop2
  1452                           
  1453                           ;main.c: 214: nrf24l01Init();
  1454  029B  25CC               	fcall	_nrf24l01Init
  1455                           
  1456                           ;main.c: 216: OPTION_REGbits.nWPUEN = 0;
  1457  029C  0021               	movlb	1	; select bank1
  1458  029D  1395               	bcf	21,7	;volatile
  1459                           
  1460                           ;main.c: 219: FVRCONbits.FVREN = 0;
  1461  029E  0022               	movlb	2	; select bank2
  1462  029F  1397               	bcf	23,7	;volatile
  1463                           
  1464                           ;main.c: 220: FVRCONbits.ADFVR = 1;
  1465  02A0  0817               	movf	23,w	;volatile
  1466  02A1  39FC               	andlw	-4
  1467  02A2  3801               	iorlw	1
  1468  02A3  0097               	movwf	23	;volatile
  1469                           
  1470                           ;main.c: 221: FVRCONbits.FVREN = 1;
  1471  02A4  1797               	bsf	23,7	;volatile
  1472                           
  1473                           ;main.c: 224: FVRCONbits.TSEN = 0;
  1474  02A5  1297               	bcf	23,5	;volatile
  1475                           
  1476                           ;main.c: 225: FVRCONbits.TSRNG = 0;
  1477  02A6  1217               	bcf	23,4	;volatile
  1478                           
  1479                           ;main.c: 226: FVRCONbits.TSEN = 1;
  1480  02A7  1697               	bsf	23,5	;volatile
  1481                           
  1482                           ;main.c: 229: ADCON0bits.ADON = 0;
  1483  02A8  0021               	movlb	1	; select bank1
  1484  02A9  101D               	bcf	29,0	;volatile
  1485                           
  1486                           ;main.c: 231: ANSELAbits.ANSA4 = 1;
  1487  02AA  0023               	movlb	3	; select bank3
  1488  02AB  160C               	bsf	12,4	;volatile
  1489                           
  1490                           ;main.c: 232: TRISAbits.TRISA4 = 1;
  1491  02AC  0021               	movlb	1	; select bank1
  1492  02AD  160C               	bsf	12,4	;volatile
  1493                           
  1494                           ;main.c: 233: WPUAbits.WPUA4 = 0;
  1495  02AE  0024               	movlb	4	; select bank4
  1496  02AF  120C               	bcf	12,4	;volatile
  1497                           
  1498                           ;main.c: 235: ANSELCbits.ANSC3 = 1;
  1499  02B0  0023               	movlb	3	; select bank3
  1500  02B1  158E               	bsf	14,3	;volatile
  1501                           
  1502                           ;main.c: 236: TRISCbits.TRISC3 = 1;
  1503  02B2  0021               	movlb	1	; select bank1
  1504  02B3  158E               	bsf	14,3	;volatile
  1505                           
  1506                           ;main.c: 238: ADCON1bits.ADCS = 0b111;
  1507  02B4  3070               	movlw	112
  1508  02B5  049E               	iorwf	30,f	;volatile
  1509                           
  1510                           ;main.c: 239: ADCON1bits.ADFM = 1;
  1511  02B6  179E               	bsf	30,7	;volatile
  1512                           
  1513                           ;main.c: 240: ADCON1bits.ADPREF = 0b00;
  1514  02B7  30FC               	movlw	-4
  1515  02B8  059E               	andwf	30,f	;volatile
  1516                           
  1517                           ;main.c: 242: PIE1bits.ADIE = 1;
  1518  02B9  1711               	bsf	17,6	;volatile
  1519                           
  1520                           ;main.c: 244: ADCON0bits.CHS = 3;
  1521  02BA  081D               	movf	29,w	;volatile
  1522  02BB  3983               	andlw	-125
  1523  02BC  380C               	iorlw	12
  1524  02BD  009D               	movwf	29	;volatile
  1525                           
  1526                           ;main.c: 245: ADCON0bits.ADON = 1;
  1527  02BE  141D               	bsf	29,0	;volatile
  1528                           
  1529                           ;main.c: 249: TRISAbits.TRISA2 = 1;
  1530  02BF  150C               	bsf	12,2	;volatile
  1531                           
  1532                           ;main.c: 250: INTCONbits.INTE = 1;
  1533  02C0  160B               	bsf	11,4	;volatile
  1534                           
  1535                           ;main.c: 251: OPTION_REGbits.INTEDG = 0;
  1536  02C1  1315               	bcf	21,6	;volatile
  1537                           
  1538                           ;main.c: 255: WDTCONbits.WDTPS = 12;
  1539  02C2  0817               	movf	23,w	;volatile
  1540  02C3  39C1               	andlw	-63
  1541  02C4  3818               	iorlw	24
  1542  02C5  0097               	movwf	23	;volatile
  1543                           
  1544                           ;main.c: 260: TRISAbits.TRISA5 = 0;
  1545  02C6  128C               	bcf	12,5	;volatile
  1546                           
  1547                           ;main.c: 261: PORTAbits.RA5 = 0;
  1548  02C7  0020               	movlb	0	; select bank0
  1549  02C8  128C               	bcf	12,5	;volatile
  1550                           
  1551                           ;main.c: 266: INTCONbits.PEIE = 1;
  1552  02C9  170B               	bsf	11,6	;volatile
  1553                           
  1554                           ;main.c: 267: INTCONbits.GIE = 1;
  1555  02CA  178B               	bsf	11,7	;volatile
  1556                           
  1557                           ;main.c: 269: unsigned int bootCount = read_flashmem(16);
  1558  02CB  3010               	movlw	16
  1559  02CC  00A0               	movwf	read_flashmem@offset
  1560  02CD  3000               	movlw	0
  1561  02CE  00A1               	movwf	read_flashmem@offset+1
  1562  02CF  245D               	fcall	_read_flashmem
  1563  02D0  0020               	movlb	0	; select bank0
  1564  02D1  0821               	movf	?_read_flashmem+1,w
  1565  02D2  00C4               	movwf	main@bootCount+1
  1566  02D3  0820               	movf	?_read_flashmem,w
  1567  02D4  00C3               	movwf	main@bootCount
  1568                           
  1569                           ;main.c: 270: if (bootCount == 13313){
  1570  02D5  0343               	decf	main@bootCount,w
  1571  02D6  3034               	movlw	52
  1572  02D7  1903               	skipnz
  1573  02D8  0644               	xorwf	main@bootCount+1,w
  1574  02D9  1D03               	btfss	3,2
  1575  02DA  2ADF               	goto	l186
  1576                           
  1577                           ;main.c: 271: bootCount = 1;
  1578  02DB  3001               	movlw	1
  1579  02DC  00C3               	movwf	main@bootCount
  1580  02DD  3000               	movlw	0
  1581  02DE  00C4               	movwf	main@bootCount+1
  1582  02DF                     l186:	
  1583                           
  1584                           ;main.c: 272: }
  1585                           ;main.c: 273: bootCount++;
  1586  02DF  3001               	movlw	1
  1587  02E0  07C3               	addwf	main@bootCount,f
  1588  02E1  3000               	movlw	0
  1589  02E2  3DC4               	addwfc	main@bootCount+1,f
  1590                           
  1591                           ;main.c: 274: write_flashmem(16, bootCount);
  1592  02E3  3010               	movlw	16
  1593  02E4  00A0               	movwf	write_flashmem@offset
  1594  02E5  3000               	movlw	0
  1595  02E6  00A1               	movwf	write_flashmem@offset+1
  1596  02E7  0844               	movf	main@bootCount+1,w
  1597  02E8  00A3               	movwf	write_flashmem@data+1
  1598  02E9  0843               	movf	main@bootCount,w
  1599  02EA  00A2               	movwf	write_flashmem@data
  1600  02EB  23EC               	fcall	_write_flashmem
  1601  02EC                     l1981:	
  1602                           ;main.c: 276: while(1){
  1603                           
  1604                           
  1605                           ;main.c: 277: loop();
  1606  02EC  2051               	fcall	_loop
  1607  02ED  2AEC               	goto	l1981
  1608  02EE                     __end_of_main:	
  1609                           ;main.c: 278: }
  1610                           ;main.c: 280: return;
  1611                           
  1612                           
  1613                           	psect	text1
  1614  03EC                     __ptext1:	
  1615 ;; *************** function _write_flashmem *****************
  1616 ;; Defined at:
  1617 ;;		line 4 in file "flash.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  offset          2    0[BANK0 ] unsigned int 
  1620 ;;  data            2    2[BANK0 ] unsigned int 
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;  address         2    4[BANK0 ] unsigned int 
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  1    wreg      void 
  1625 ;; Registers used:
  1626 ;;		wreg, status,2, status,0
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMMON   BANK0   BANK1
  1632 ;;      Params:         0       4       0
  1633 ;;      Locals:         0       2       0
  1634 ;;      Temps:          0       0       0
  1635 ;;      Totals:         0       6       0
  1636 ;;Total ram usage:        6 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    4
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_main
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           
  1647                           ;psect for function _write_flashmem
  1648  03EC                     _write_flashmem:	
  1649                           
  1650                           ;flash.c: 6: unsigned int address;
  1651                           ;flash.c: 8: INTCONbits.GIE = 0;
  1652                           
  1653                           ;incstack = 0
  1654                           ; Regs used in _write_flashmem: [wreg+status,2+status,0]
  1655  03EC  138B               	bcf	11,7	;volatile
  1656                           
  1657                           ;flash.c: 11: PMCON1 = 0x00;
  1658  03ED  0023               	movlb	3	; select bank3
  1659  03EE  0195               	clrf	21	;volatile
  1660                           
  1661                           ;flash.c: 13: address = (0x800U-32) + offset;
  1662  03EF  0020               	movlb	0	; select bank0
  1663  03F0  0820               	movf	write_flashmem@offset,w
  1664  03F1  3EE0               	addlw	224
  1665  03F2  00A4               	movwf	write_flashmem@address
  1666  03F3  3007               	movlw	7
  1667  03F4  3D21               	addwfc	write_flashmem@offset+1,w
  1668  03F5  00A5               	movwf	write_flashmem@address+1
  1669                           
  1670                           ;flash.c: 14: PMADRL = (char) (address >> 0);
  1671  03F6  0824               	movf	write_flashmem@address,w
  1672  03F7  0023               	movlb	3	; select bank3
  1673  03F8  0091               	movwf	17	;volatile
  1674                           
  1675                           ;flash.c: 15: PMADRH = (char) (address >> 8);
  1676  03F9  0020               	movlb	0	; select bank0
  1677  03FA  0825               	movf	write_flashmem@address+1,w
  1678  03FB  0023               	movlb	3	; select bank3
  1679  03FC  0092               	movwf	18	;volatile
  1680                           
  1681                           ;flash.c: 17: PMCON1bits.FREE = 1;
  1682  03FD  1615               	bsf	21,4	;volatile
  1683                           
  1684                           ;flash.c: 18: PMCON1bits.WREN = 1;
  1685  03FE  1515               	bsf	21,2	;volatile
  1686                           
  1687                           ;flash.c: 20: PMCON2 = 0x55;
  1688  03FF  3055               	movlw	85
  1689  0400  0096               	movwf	22	;volsfr
  1690                           
  1691                           ;flash.c: 21: PMCON2 = 0xAA;
  1692  0401  30AA               	movlw	170
  1693  0402  0096               	movwf	22	;volsfr
  1694                           
  1695                           ;flash.c: 23: PMCON1bits.WR = 1;
  1696  0403  1495               	bsf	21,1	;volatile
  1697                           
  1698                           ;flash.c: 25: __nop();
  1699  0404  0000               	nop
  1700                           
  1701                           ;flash.c: 26: __nop();
  1702  0405  0000               	nop
  1703                           
  1704                           ;flash.c: 28: PMCON1bits.WREN = 0;
  1705  0406  0023               	movlb	3	; select bank3
  1706  0407  1115               	bcf	21,2	;volatile
  1707                           
  1708                           ;flash.c: 32: PMCON1 = 0x00;
  1709  0408  0195               	clrf	21	;volatile
  1710                           
  1711                           ;flash.c: 34: PMADRL = (char) (address >> 0);
  1712  0409  0020               	movlb	0	; select bank0
  1713  040A  0824               	movf	write_flashmem@address,w
  1714  040B  0023               	movlb	3	; select bank3
  1715  040C  0091               	movwf	17	;volatile
  1716                           
  1717                           ;flash.c: 35: PMADRH = (char) (address >> 8);
  1718  040D  0020               	movlb	0	; select bank0
  1719  040E  0825               	movf	write_flashmem@address+1,w
  1720  040F  0023               	movlb	3	; select bank3
  1721  0410  0092               	movwf	18	;volatile
  1722                           
  1723                           ;flash.c: 37: PMCON1bits.FREE = 0;
  1724  0411  1215               	bcf	21,4	;volatile
  1725                           
  1726                           ;flash.c: 38: PMCON1bits.LWLO = 1;
  1727  0412  1695               	bsf	21,5	;volatile
  1728                           
  1729                           ;flash.c: 39: PMCON1bits.WREN = 1;
  1730  0413  1515               	bsf	21,2	;volatile
  1731                           
  1732                           ;flash.c: 41: PMDATL = (data >> 0);
  1733  0414  0020               	movlb	0	; select bank0
  1734  0415  0822               	movf	write_flashmem@data,w
  1735  0416  0023               	movlb	3	; select bank3
  1736  0417  0093               	movwf	19	;volatile
  1737                           
  1738                           ;flash.c: 42: PMDATH = (data >> 8);
  1739  0418  0020               	movlb	0	; select bank0
  1740  0419  0823               	movf	write_flashmem@data+1,w
  1741  041A  0023               	movlb	3	; select bank3
  1742  041B  0094               	movwf	20	;volatile
  1743                           
  1744                           ;flash.c: 44: PMCON1bits.LWLO = 0;
  1745  041C  1295               	bcf	21,5	;volatile
  1746                           
  1747                           ;flash.c: 46: PMCON2 = 0x55;
  1748  041D  3055               	movlw	85
  1749  041E  0096               	movwf	22	;volsfr
  1750                           
  1751                           ;flash.c: 47: PMCON2 = 0xAA;
  1752  041F  30AA               	movlw	170
  1753  0420  0096               	movwf	22	;volsfr
  1754                           
  1755                           ;flash.c: 49: PMCON1bits.WR = 1;
  1756  0421  1495               	bsf	21,1	;volatile
  1757                           
  1758                           ;flash.c: 51: __nop();
  1759  0422  0000               	nop
  1760                           
  1761                           ;flash.c: 52: __nop();
  1762  0423  0000               	nop
  1763                           
  1764                           ;flash.c: 54: PMCON1bits.WREN = 0;
  1765  0424  0023               	movlb	3	; select bank3
  1766  0425  1115               	bcf	21,2	;volatile
  1767                           
  1768                           ;flash.c: 57: INTCONbits.GIE = 1;
  1769  0426  178B               	bsf	11,7	;volatile
  1770  0427  0008               	return
  1771  0428                     __end_of_write_flashmem:	
  1772                           
  1773                           	psect	text2
  1774  05CC                     __ptext2:	
  1775 ;; *************** function _nrf24l01Init *****************
  1776 ;; Defined at:
  1777 ;;		line 230 in file "nrf24l01.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;		None
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;		None
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  1    wreg      void 
  1784 ;; Registers used:
  1785 ;;		wreg, status,2, status,0, pclath, cstack
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMMON   BANK0   BANK1
  1791 ;;      Params:         0       0       0
  1792 ;;      Locals:         0       0       0
  1793 ;;      Temps:          0       1       0
  1794 ;;      Totals:         0       1       0
  1795 ;;Total ram usage:        1 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    7
  1798 ;; This function calls:
  1799 ;;		_nrf24l01InitRegisters
  1800 ;;		_nrf24l01InterfaceInit
  1801 ;; This function is called by:
  1802 ;;		_main
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           
  1807                           ;psect for function _nrf24l01Init
  1808  05CC                     _nrf24l01Init:	
  1809                           
  1810                           ;nrf24l01.c: 233: nrf24l01InterfaceInit();
  1811                           
  1812                           ;incstack = 0
  1813                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1814  05CC  25F2               	fcall	_nrf24l01InterfaceInit
  1815                           
  1816                           ;nrf24l01.c: 237: PORTAbits.RA0 = 0;
  1817  05CD  0020               	movlb	0	; select bank0
  1818  05CE  100C               	bcf	12,0	;volatile
  1819                           
  1820                           ;nrf24l01.c: 239: _delay((unsigned long)((11)*(16000000/4000.0)));
  1821  05CF  303A               	movlw	58
  1822  05D0  0020               	movlb	0	; select bank0
  1823  05D1  00AA               	movwf	??_nrf24l01Init
  1824  05D2  3023               	movlw	35
  1825  05D3                     u1067:	
  1826  05D3  0B89               	decfsz	9,f
  1827  05D4  2DD3               	goto	u1067
  1828  05D5  0BAA               	decfsz	??_nrf24l01Init,f
  1829  05D6  2DD3               	goto	u1067
  1830                           
  1831                           ;nrf24l01.c: 241: nrf24l01InitRegisters();
  1832  05D7  21FC               	fcall	_nrf24l01InitRegisters
  1833                           
  1834                           ;nrf24l01.c: 243: _delay((unsigned long)((2)*(16000000/4000.0)));
  1835  05D8  300B               	movlw	11
  1836  05D9  0020               	movlb	0	; select bank0
  1837  05DA  00AA               	movwf	??_nrf24l01Init
  1838  05DB  3062               	movlw	98
  1839  05DC                     u1077:	
  1840  05DC  0B89               	decfsz	9,f
  1841  05DD  2DDC               	goto	u1077
  1842  05DE  0BAA               	decfsz	??_nrf24l01Init,f
  1843  05DF  2DDC               	goto	u1077
  1844  05E0  0000               	nop
  1845  05E1  0008               	return
  1846  05E2                     __end_of_nrf24l01Init:	
  1847                           
  1848                           	psect	text3
  1849  05F2                     __ptext3:	
  1850 ;; *************** function _nrf24l01InterfaceInit *****************
  1851 ;; Defined at:
  1852 ;;		line 9 in file "interface.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;		None
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;		None
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      void 
  1859 ;; Registers used:
  1860 ;;		wreg, status,2, status,0
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMMON   BANK0   BANK1
  1866 ;;      Params:         0       0       0
  1867 ;;      Locals:         0       0       0
  1868 ;;      Temps:          0       0       0
  1869 ;;      Totals:         0       0       0
  1870 ;;Total ram usage:        0 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; Hardware stack levels required when called:    4
  1873 ;; This function calls:
  1874 ;;		Nothing
  1875 ;; This function is called by:
  1876 ;;		_nrf24l01Init
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           
  1881                           ;psect for function _nrf24l01InterfaceInit
  1882  05F2                     _nrf24l01InterfaceInit:	
  1883                           
  1884                           ;interface.c: 11: TRISAbits.TRISA0 = 0;
  1885                           
  1886                           ;incstack = 0
  1887                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  1888  05F2  0021               	movlb	1	; select bank1
  1889  05F3  100C               	bcf	12,0	;volatile
  1890                           
  1891                           ;interface.c: 12: TRISAbits.TRISA1 = 0;
  1892  05F4  108C               	bcf	12,1	;volatile
  1893                           
  1894                           ;interface.c: 14: TRISCbits.TRISC1 = 1;
  1895  05F5  148E               	bsf	14,1	;volatile
  1896                           
  1897                           ;interface.c: 15: TRISCbits.TRISC2 = 0;
  1898  05F6  110E               	bcf	14,2	;volatile
  1899                           
  1900                           ;interface.c: 16: TRISCbits.TRISC0 = 0;
  1901  05F7  100E               	bcf	14,0	;volatile
  1902                           
  1903                           ;interface.c: 18: SSPCON1bits.SSPEN = 0;
  1904  05F8  0024               	movlb	4	; select bank4
  1905  05F9  1295               	bcf	21,5	;volatile
  1906                           
  1907                           ;interface.c: 19: SSPCON1bits.CKP = 0;
  1908  05FA  1215               	bcf	21,4	;volatile
  1909                           
  1910                           ;interface.c: 20: SSP1STATbits.CKE = 1;
  1911  05FB  1714               	bsf	20,6	;volatile
  1912                           
  1913                           ;interface.c: 21: SSPCON1bits.SSPM = 0b0000;
  1914  05FC  30F0               	movlw	-16
  1915  05FD  0595               	andwf	21,f	;volatile
  1916                           
  1917                           ;interface.c: 23: SSPCON1bits.SSPEN = 1;
  1918  05FE  1695               	bsf	21,5	;volatile
  1919  05FF  0008               	return
  1920  0600                     __end_of_nrf24l01InterfaceInit:	
  1921                           
  1922                           	psect	text4
  1923  01FC                     __ptext4:	
  1924 ;; *************** function _nrf24l01InitRegisters *****************
  1925 ;; Defined at:
  1926 ;;		line 142 in file "nrf24l01.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;		None
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;  DynPD           1    9[BANK0 ] struct .
  1931 ;;  enAA            1    8[BANK0 ] struct .
  1932 ;;  enRXAddr        1    7[BANK0 ] struct .
  1933 ;;  status          1    6[BANK0 ] struct .
  1934 ;;  config          1    5[BANK0 ] struct .
  1935 ;;  rfSetup         1    4[BANK0 ] struct .
  1936 ;;  feature         1    3[BANK0 ] struct .
  1937 ;;  setupAW         1    2[BANK0 ] struct .
  1938 ;;  channel         1    1[BANK0 ] struct .
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0, pclath, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMMON   BANK0   BANK1
  1948 ;;      Params:         0       0       0
  1949 ;;      Locals:         0       9       0
  1950 ;;      Temps:          0       1       0
  1951 ;;      Totals:         0      10       0
  1952 ;;Total ram usage:       10 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    6
  1955 ;; This function calls:
  1956 ;;		_nrf24l01Send
  1957 ;; This function is called by:
  1958 ;;		_nrf24l01Init
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           
  1963                           ;psect for function _nrf24l01InitRegisters
  1964  01FC                     _nrf24l01InitRegisters:	
  1965                           
  1966                           ;nrf24l01.c: 144: nrf24l01Send(0b00100000 | 0x00, 0x00);
  1967                           
  1968                           ;incstack = 0
  1969                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  1970  01FC  01F1               	clrf	nrf24l01Send@data
  1971  01FD  3020               	movlw	32
  1972  01FE  2600               	fcall	_nrf24l01Send
  1973                           
  1974                           ;nrf24l01.c: 146: _delay((unsigned long)((10)*(16000000/4000.0)));
  1975  01FF  3034               	movlw	52
  1976  0200  0020               	movlb	0	; select bank0
  1977  0201  00A0               	movwf	??_nrf24l01InitRegisters
  1978  0202  30F1               	movlw	241
  1979  0203                     u1087:	
  1980  0203  0B89               	decfsz	9,f
  1981  0204  2A03               	goto	u1087
  1982  0205  0BA0               	decfsz	??_nrf24l01InitRegisters,f
  1983  0206  2A03               	goto	u1087
  1984  0207  3200               	nop2
  1985                           
  1986                           ;nrf24l01.c: 148: n_SETUP_AW_t setupAW;
  1987                           ;nrf24l01.c: 149: setupAW.byte = 0x00;
  1988  0208  0020               	movlb	0	; select bank0
  1989  0209  01A2               	clrf	nrf24l01InitRegisters@setupAW
  1990                           
  1991                           ;nrf24l01.c: 150: setupAW.AW = 3;
  1992  020A  3003               	movlw	3
  1993  020B  04A2               	iorwf	nrf24l01InitRegisters@setupAW,f
  1994                           
  1995                           ;nrf24l01.c: 151: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  1996  020C  0822               	movf	nrf24l01InitRegisters@setupAW,w
  1997  020D  00A0               	movwf	??_nrf24l01InitRegisters
  1998  020E  0820               	movf	??_nrf24l01InitRegisters,w
  1999  020F  00F1               	movwf	nrf24l01Send@data
  2000  0210  3022               	movlw	34
  2001  0211  2600               	fcall	_nrf24l01Send
  2002                           
  2003                           ;nrf24l01.c: 160: n_RF_CH_t channel;
  2004                           ;nrf24l01.c: 161: channel.RF_CH = 83;
  2005  0212  0020               	movlb	0	; select bank0
  2006  0213  0821               	movf	nrf24l01InitRegisters@channel,w
  2007  0214  3980               	andlw	-128
  2008  0215  3853               	iorlw	83
  2009  0216  00A1               	movwf	nrf24l01InitRegisters@channel
  2010                           
  2011                           ;nrf24l01.c: 162: nrf24l01Send(0b00100000 | 0x05, channel.byte);
  2012  0217  0821               	movf	nrf24l01InitRegisters@channel,w
  2013  0218  00A0               	movwf	??_nrf24l01InitRegisters
  2014  0219  0820               	movf	??_nrf24l01InitRegisters,w
  2015  021A  00F1               	movwf	nrf24l01Send@data
  2016  021B  3025               	movlw	37
  2017  021C  2600               	fcall	_nrf24l01Send
  2018                           
  2019                           ;nrf24l01.c: 165: n_RF_SETUP_t rfSetup;
  2020                           ;nrf24l01.c: 166: rfSetup.RF_DR_LOW = 0;
  2021  021D  0020               	movlb	0	; select bank0
  2022  021E  12A4               	bcf	nrf24l01InitRegisters@rfSetup,5
  2023                           
  2024                           ;nrf24l01.c: 167: rfSetup.RF_DR_HIGH = 1;
  2025  021F  15A4               	bsf	nrf24l01InitRegisters@rfSetup,3
  2026                           
  2027                           ;nrf24l01.c: 168: rfSetup.RF_PWR = 3;
  2028  0220  3006               	movlw	6
  2029  0221  04A4               	iorwf	nrf24l01InitRegisters@rfSetup,f
  2030                           
  2031                           ;nrf24l01.c: 169: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  2032  0222  0824               	movf	nrf24l01InitRegisters@rfSetup,w
  2033  0223  00A0               	movwf	??_nrf24l01InitRegisters
  2034  0224  0820               	movf	??_nrf24l01InitRegisters,w
  2035  0225  00F1               	movwf	nrf24l01Send@data
  2036  0226  3026               	movlw	38
  2037  0227  2600               	fcall	_nrf24l01Send
  2038                           
  2039                           ;nrf24l01.c: 172: n_CONFIG_t config;
  2040                           ;nrf24l01.c: 173: config.PRIM_RX = 1;
  2041  0228  0020               	movlb	0	; select bank0
  2042  0229  1425               	bsf	nrf24l01InitRegisters@config,0
  2043                           
  2044                           ;nrf24l01.c: 174: config.EN_CRC = 1;
  2045  022A  15A5               	bsf	nrf24l01InitRegisters@config,3
  2046                           
  2047                           ;nrf24l01.c: 175: config.CRCO = 1;
  2048  022B  1525               	bsf	nrf24l01InitRegisters@config,2
  2049                           
  2050                           ;nrf24l01.c: 176: config.PWR_UP = 1;
  2051  022C  14A5               	bsf	nrf24l01InitRegisters@config,1
  2052                           
  2053                           ;nrf24l01.c: 177: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2054  022D  0825               	movf	nrf24l01InitRegisters@config,w
  2055  022E  00A0               	movwf	??_nrf24l01InitRegisters
  2056  022F  0820               	movf	??_nrf24l01InitRegisters,w
  2057  0230  00F1               	movwf	nrf24l01Send@data
  2058  0231  3020               	movlw	32
  2059  0232  2600               	fcall	_nrf24l01Send
  2060                           
  2061                           ;nrf24l01.c: 180: n_EN_RXADDR_t enRXAddr;
  2062                           ;nrf24l01.c: 181: enRXAddr.ERX_P0 = 1;
  2063  0233  0020               	movlb	0	; select bank0
  2064  0234  1427               	bsf	nrf24l01InitRegisters@enRXAddr,0
  2065                           
  2066                           ;nrf24l01.c: 182: enRXAddr.ERX_P1 = 1;
  2067  0235  14A7               	bsf	nrf24l01InitRegisters@enRXAddr,1
  2068                           
  2069                           ;nrf24l01.c: 183: enRXAddr.ERX_P2 = 1;
  2070  0236  1527               	bsf	nrf24l01InitRegisters@enRXAddr,2
  2071                           
  2072                           ;nrf24l01.c: 184: enRXAddr.ERX_P3 = 1;
  2073  0237  15A7               	bsf	nrf24l01InitRegisters@enRXAddr,3
  2074                           
  2075                           ;nrf24l01.c: 185: enRXAddr.ERX_P4 = 1;
  2076  0238  1627               	bsf	nrf24l01InitRegisters@enRXAddr,4
  2077                           
  2078                           ;nrf24l01.c: 186: enRXAddr.ERX_P5 = 1;
  2079  0239  16A7               	bsf	nrf24l01InitRegisters@enRXAddr,5
  2080                           
  2081                           ;nrf24l01.c: 187: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  2082  023A  0827               	movf	nrf24l01InitRegisters@enRXAddr,w
  2083  023B  00A0               	movwf	??_nrf24l01InitRegisters
  2084  023C  0820               	movf	??_nrf24l01InitRegisters,w
  2085  023D  00F1               	movwf	nrf24l01Send@data
  2086  023E  3022               	movlw	34
  2087  023F  2600               	fcall	_nrf24l01Send
  2088                           
  2089                           ;nrf24l01.c: 190: n_EN_AA_t enAA;
  2090                           ;nrf24l01.c: 191: enAA.byte = nrf24l01Send(0b00000000 | 0x01, 0);
  2091  0240  01F1               	clrf	nrf24l01Send@data
  2092  0241  3001               	movlw	1
  2093  0242  2600               	fcall	_nrf24l01Send
  2094  0243  0020               	movlb	0	; select bank0
  2095  0244  00A0               	movwf	??_nrf24l01InitRegisters
  2096  0245  0820               	movf	??_nrf24l01InitRegisters,w
  2097  0246  00A8               	movwf	nrf24l01InitRegisters@enAA
  2098                           
  2099                           ;nrf24l01.c: 192: enAA.ENAA_P0 = 0;
  2100  0247  1028               	bcf	nrf24l01InitRegisters@enAA,0
  2101                           
  2102                           ;nrf24l01.c: 193: enAA.ENAA_P1 = 0;
  2103  0248  10A8               	bcf	nrf24l01InitRegisters@enAA,1
  2104                           
  2105                           ;nrf24l01.c: 194: enAA.ENAA_P2 = 0;
  2106  0249  1128               	bcf	nrf24l01InitRegisters@enAA,2
  2107                           
  2108                           ;nrf24l01.c: 195: enAA.ENAA_P3 = 0;
  2109  024A  11A8               	bcf	nrf24l01InitRegisters@enAA,3
  2110                           
  2111                           ;nrf24l01.c: 196: enAA.ENAA_P4 = 0;
  2112  024B  1228               	bcf	nrf24l01InitRegisters@enAA,4
  2113                           
  2114                           ;nrf24l01.c: 197: enAA.ENAA_P5 = 0;
  2115  024C  12A8               	bcf	nrf24l01InitRegisters@enAA,5
  2116                           
  2117                           ;nrf24l01.c: 198: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  2118  024D  0828               	movf	nrf24l01InitRegisters@enAA,w
  2119  024E  00A0               	movwf	??_nrf24l01InitRegisters
  2120  024F  0820               	movf	??_nrf24l01InitRegisters,w
  2121  0250  00F1               	movwf	nrf24l01Send@data
  2122  0251  3021               	movlw	33
  2123  0252  2600               	fcall	_nrf24l01Send
  2124                           
  2125                           ;nrf24l01.c: 202: n_FEATURE_t feature;
  2126                           ;nrf24l01.c: 203: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  2127  0253  01F1               	clrf	nrf24l01Send@data
  2128  0254  301D               	movlw	29
  2129  0255  2600               	fcall	_nrf24l01Send
  2130  0256  0020               	movlb	0	; select bank0
  2131  0257  00A0               	movwf	??_nrf24l01InitRegisters
  2132  0258  0820               	movf	??_nrf24l01InitRegisters,w
  2133  0259  00A3               	movwf	nrf24l01InitRegisters@feature
  2134                           
  2135                           ;nrf24l01.c: 204: feature.EN_DPL = 1;
  2136  025A  1523               	bsf	nrf24l01InitRegisters@feature,2
  2137                           
  2138                           ;nrf24l01.c: 205: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  2139  025B  0823               	movf	nrf24l01InitRegisters@feature,w
  2140  025C  00A0               	movwf	??_nrf24l01InitRegisters
  2141  025D  0820               	movf	??_nrf24l01InitRegisters,w
  2142  025E  00F1               	movwf	nrf24l01Send@data
  2143  025F  303D               	movlw	61
  2144  0260  2600               	fcall	_nrf24l01Send
  2145                           
  2146                           ;nrf24l01.c: 207: n_DYNPD_t DynPD;
  2147                           ;nrf24l01.c: 208: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  2148  0261  01F1               	clrf	nrf24l01Send@data
  2149  0262  301C               	movlw	28
  2150  0263  2600               	fcall	_nrf24l01Send
  2151  0264  0020               	movlb	0	; select bank0
  2152  0265  00A0               	movwf	??_nrf24l01InitRegisters
  2153  0266  0820               	movf	??_nrf24l01InitRegisters,w
  2154  0267  00A9               	movwf	nrf24l01InitRegisters@DynPD
  2155                           
  2156                           ;nrf24l01.c: 209: DynPD.DPL_P0 = 1;
  2157  0268  1429               	bsf	nrf24l01InitRegisters@DynPD,0
  2158                           
  2159                           ;nrf24l01.c: 210: DynPD.DPL_P1 = 1;
  2160  0269  14A9               	bsf	nrf24l01InitRegisters@DynPD,1
  2161                           
  2162                           ;nrf24l01.c: 211: DynPD.DPL_P2 = 1;
  2163  026A  1529               	bsf	nrf24l01InitRegisters@DynPD,2
  2164                           
  2165                           ;nrf24l01.c: 212: DynPD.DPL_P3 = 1;
  2166  026B  15A9               	bsf	nrf24l01InitRegisters@DynPD,3
  2167                           
  2168                           ;nrf24l01.c: 213: DynPD.DPL_P4 = 1;
  2169  026C  1629               	bsf	nrf24l01InitRegisters@DynPD,4
  2170                           
  2171                           ;nrf24l01.c: 214: DynPD.DPL_P5 = 1;
  2172  026D  16A9               	bsf	nrf24l01InitRegisters@DynPD,5
  2173                           
  2174                           ;nrf24l01.c: 215: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  2175  026E  0829               	movf	nrf24l01InitRegisters@DynPD,w
  2176  026F  00A0               	movwf	??_nrf24l01InitRegisters
  2177  0270  0820               	movf	??_nrf24l01InitRegisters,w
  2178  0271  00F1               	movwf	nrf24l01Send@data
  2179  0272  303C               	movlw	60
  2180  0273  2600               	fcall	_nrf24l01Send
  2181                           
  2182                           ;nrf24l01.c: 218: n_STATUS_t status;
  2183                           ;nrf24l01.c: 219: status.byte = 0x00;
  2184  0274  0020               	movlb	0	; select bank0
  2185  0275  01A6               	clrf	nrf24l01InitRegisters@status
  2186                           
  2187                           ;nrf24l01.c: 220: status.RX_DR = 1;
  2188  0276  1726               	bsf	nrf24l01InitRegisters@status,6
  2189                           
  2190                           ;nrf24l01.c: 221: status.TX_DS = 1;
  2191  0277  16A6               	bsf	nrf24l01InitRegisters@status,5
  2192                           
  2193                           ;nrf24l01.c: 222: status.MAX_RT = 1;
  2194  0278  1626               	bsf	nrf24l01InitRegisters@status,4
  2195                           
  2196                           ;nrf24l01.c: 223: nrf24l01Send(0b00100000 | 0x07, status.byte);
  2197  0279  0826               	movf	nrf24l01InitRegisters@status,w
  2198  027A  00A0               	movwf	??_nrf24l01InitRegisters
  2199  027B  0820               	movf	??_nrf24l01InitRegisters,w
  2200  027C  00F1               	movwf	nrf24l01Send@data
  2201  027D  3027               	movlw	39
  2202  027E  2600               	fcall	_nrf24l01Send
  2203                           
  2204                           ;nrf24l01.c: 226: nrf24l01Send(0b11100001, 0);
  2205  027F  01F1               	clrf	nrf24l01Send@data
  2206  0280  30E1               	movlw	225
  2207  0281  2600               	fcall	_nrf24l01Send
  2208                           
  2209                           ;nrf24l01.c: 227: nrf24l01Send(0b11100010, 0);
  2210  0282  01F1               	clrf	nrf24l01Send@data
  2211  0283  30E2               	movlw	226
  2212  0284  2600               	fcall	_nrf24l01Send
  2213  0285  0008               	return
  2214  0286                     __end_of_nrf24l01InitRegisters:	
  2215                           
  2216                           	psect	text5
  2217  0051                     __ptext5:	
  2218 ;; *************** function _loop *****************
  2219 ;; Defined at:
  2220 ;;		line 72 in file "main.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;		None
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;		None
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  1    wreg      void 
  2227 ;; Registers used:
  2228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMMON   BANK0   BANK1
  2234 ;;      Params:         0       0       0
  2235 ;;      Locals:         0       0       0
  2236 ;;      Temps:          0       4       0
  2237 ;;      Totals:         0       4       0
  2238 ;;Total ram usage:        4 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; Hardware stack levels required when called:    8
  2241 ;; This function calls:
  2242 ;;		___lldiv
  2243 ;;		___lmul
  2244 ;;		__itoa
  2245 ;;		_nrf24l01SendString
  2246 ;;		_nrf24l01SetRecieveMode
  2247 ;;		_read_flashmem
  2248 ;;		_startADC
  2249 ;;		_strcpy
  2250 ;;		_strlen
  2251 ;; This function is called by:
  2252 ;;		_main
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256                           
  2257                           ;psect for function _loop
  2258  0051                     _loop:	
  2259                           
  2260                           ;main.c: 74: if (mode != 1) {
  2261                           
  2262                           ;incstack = 0
  2263                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2264  0051  037D               	decf	_mode,w
  2265  0052  1903               	btfsc	3,2
  2266  0053  29DE               	goto	l1869
  2267  0054  0064               	clrwdt	;# 
  2268                           
  2269                           ;main.c: 76: }
  2270                           ;main.c: 78: switch (mode){
  2271  0055  29DE               	goto	l1869
  2272  0056                     l1793:	
  2273                           ;main.c: 80: case 1:
  2274                           
  2275                           
  2276                           ;main.c: 81: nrf24l01SetRecieveMode();
  2277  0056  2562               	fcall	_nrf24l01SetRecieveMode
  2278                           
  2279                           ;main.c: 83: PORTAbits.RA5 = (unsigned) !PORTAbits.RA5;
  2280  0057  1003               	clrc
  2281  0058  0020               	movlb	0	; select bank0
  2282  0059  1E8C               	btfss	12,5	;volatile
  2283  005A  1403               	setc
  2284  005B  1C03               	btfss	3,0
  2285  005C  2860               	goto	u920
  2286  005D  0020               	movlb	0	; select bank0
  2287  005E  168C               	bsf	12,5	;volatile
  2288  005F  2862               	goto	u934
  2289  0060                     u920:	
  2290  0060  0020               	movlb	0	; select bank0
  2291  0061  128C               	bcf	12,5	;volatile
  2292  0062                     u934:	
  2293  0062  0063               	sleep	;# 
  2294                           
  2295                           ;main.c: 86: __nop();
  2296  0063  0000               	nop
  2297                           
  2298                           ;main.c: 87: __nop();
  2299  0064  0000               	nop
  2300                           
  2301                           ;main.c: 88: if (!STATUSbits.nTO && !STATUSbits.nPD){
  2302  0065  0020               	movlb	0	; select bank0
  2303  0066  1E03               	btfss	3,4	;volatile
  2304  0067  1983               	btfsc	3,3	;volatile
  2305  0068  286D               	goto	l164
  2306                           
  2307                           ;main.c: 89: mode = nextMode;
  2308  0069  085B               	movf	_nextMode,w
  2309  006A  00BE               	movwf	??_loop
  2310  006B  083E               	movf	??_loop,w
  2311  006C  00FD               	movwf	_mode
  2312  006D                     l164:	
  2313  006D  0001               	reset	;# 
  2314                           
  2315                           ;main.c: 93: break;
  2316  006E  0008               	return
  2317  006F                     l1807:	
  2318                           ;main.c: 95: case 10:
  2319                           
  2320                           
  2321                           ;main.c: 99: strcpy(string, "/BOOT/");
  2322  006F  301F               	movlw	low (STR_1| (0+32768))
  2323  0070  0020               	movlb	0	; select bank0
  2324  0071  00A8               	movwf	strcpy@from
  2325  0072  3086               	movlw	high (STR_1| (0+32768))
  2326  0073  00A9               	movwf	strcpy@from+1
  2327  0074  304B               	movlw	(low (_string| 0))& (0+255)
  2328  0075  257F               	fcall	_strcpy
  2329                           
  2330                           ;main.c: 100: _itoa(string + strlen(string), read_flashmem(16), 10);
  2331  0076  3010               	movlw	16
  2332  0077  0020               	movlb	0	; select bank0
  2333  0078  00A0               	movwf	read_flashmem@offset
  2334  0079  3000               	movlw	0
  2335  007A  00A1               	movwf	read_flashmem@offset+1
  2336  007B  245D               	fcall	_read_flashmem
  2337  007C  0020               	movlb	0	; select bank0
  2338  007D  0821               	movf	?_read_flashmem+1,w
  2339  007E  00B9               	movwf	__itoa@number+1
  2340  007F  0820               	movf	?_read_flashmem,w
  2341  0080  00B8               	movwf	__itoa@number
  2342  0081  300A               	movlw	10
  2343  0082  00BE               	movwf	??_loop
  2344  0083  083E               	movf	??_loop,w
  2345  0084  00BA               	movwf	__itoa@base
  2346  0085  304B               	movlw	(low (_string| 0))& (0+255)
  2347  0086  251A               	fcall	_strlen
  2348  0087  0020               	movlb	0	; select bank0
  2349  0088  0820               	movf	?_strlen,w
  2350  0089  3E4B               	addlw	(low (_string| 0))& (0+255)
  2351  008A  25E2               	fcall	__itoa
  2352                           
  2353                           ;main.c: 102: nrf24l01SendString(string);
  2354  008B  304B               	movlw	(low (_string| 0))& (0+255)
  2355  008C  239D               	fcall	_nrf24l01SendString
  2356                           
  2357                           ;main.c: 104: mode = 11;
  2358  008D  300B               	movlw	11
  2359  008E  0020               	movlb	0	; select bank0
  2360  008F  00BE               	movwf	??_loop
  2361  0090  083E               	movf	??_loop,w
  2362  0091  00FD               	movwf	_mode
  2363                           
  2364                           ;main.c: 105: break;
  2365  0092  0008               	return
  2366  0093                     l167:	
  2367                           ;main.c: 108: case 11:
  2368                           
  2369                           
  2370                           ;main.c: 109: mode = 1;
  2371  0093  01FD               	clrf	_mode
  2372  0094  0AFD               	incf	_mode,f
  2373                           
  2374                           ;main.c: 110: nextMode = 4;
  2375  0095  3004               	movlw	4
  2376  0096  0020               	movlb	0	; select bank0
  2377  0097  00BE               	movwf	??_loop
  2378  0098  083E               	movf	??_loop,w
  2379  0099  00DB               	movwf	_nextMode
  2380                           
  2381                           ;main.c: 112: break;
  2382  009A  0008               	return
  2383  009B                     l1817:	
  2384                           ;main.c: 114: case 4:
  2385                           
  2386                           
  2387                           ;main.c: 116: strcpy(string, "/COUNT/");
  2388  009B  3017               	movlw	low (STR_2| (0+32768))
  2389  009C  0020               	movlb	0	; select bank0
  2390  009D  00A8               	movwf	strcpy@from
  2391  009E  3086               	movlw	high (STR_2| (0+32768))
  2392  009F  00A9               	movwf	strcpy@from+1
  2393  00A0  304B               	movlw	(low (_string| 0))& (0+255)
  2394  00A1  257F               	fcall	_strcpy
  2395                           
  2396                           ;main.c: 117: _itoa(string + strlen(string), counter++, 10);
  2397  00A2  0020               	movlb	0	; select bank0
  2398  00A3  084A               	movf	_counter+1,w
  2399  00A4  00B9               	movwf	__itoa@number+1
  2400  00A5  0849               	movf	_counter,w
  2401  00A6  00B8               	movwf	__itoa@number
  2402  00A7  300A               	movlw	10
  2403  00A8  00BE               	movwf	??_loop
  2404  00A9  083E               	movf	??_loop,w
  2405  00AA  00BA               	movwf	__itoa@base
  2406  00AB  304B               	movlw	(low (_string| 0))& (0+255)
  2407  00AC  251A               	fcall	_strlen
  2408  00AD  0020               	movlb	0	; select bank0
  2409  00AE  0820               	movf	?_strlen,w
  2410  00AF  3E4B               	addlw	(low (_string| 0))& (0+255)
  2411  00B0  25E2               	fcall	__itoa
  2412  00B1  3001               	movlw	1
  2413  00B2  0020               	movlb	0	; select bank0
  2414  00B3  07C9               	addwf	_counter,f
  2415  00B4  3000               	movlw	0
  2416  00B5  3DCA               	addwfc	_counter+1,f
  2417                           
  2418                           ;main.c: 119: nrf24l01SendString(string);
  2419  00B6  304B               	movlw	(low (_string| 0))& (0+255)
  2420  00B7  239D               	fcall	_nrf24l01SendString
  2421                           
  2422                           ;main.c: 121: mode = 12;
  2423  00B8  300C               	movlw	12
  2424  00B9  0020               	movlb	0	; select bank0
  2425  00BA  00BE               	movwf	??_loop
  2426  00BB  083E               	movf	??_loop,w
  2427  00BC  00FD               	movwf	_mode
  2428                           
  2429                           ;main.c: 122: break;
  2430  00BD  0008               	return
  2431  00BE                     l1827:	
  2432                           ;main.c: 124: case 12:
  2433                           
  2434                           
  2435                           ;main.c: 125: startADC(3);
  2436  00BE  3003               	movlw	3
  2437  00BF  24BF               	fcall	_startADC
  2438                           
  2439                           ;main.c: 134: nextMode = 13;
  2440  00C0  300D               	movlw	13
  2441  00C1  0020               	movlb	0	; select bank0
  2442  00C2  00BE               	movwf	??_loop
  2443  00C3  083E               	movf	??_loop,w
  2444  00C4  00DB               	movwf	_nextMode
  2445                           
  2446                           ;main.c: 135: break;
  2447  00C5  0008               	return
  2448  00C6                     l1831:	
  2449                           ;main.c: 137: case 13:
  2450                           
  2451                           
  2452                           ;main.c: 138: startADC(7);
  2453  00C6  3007               	movlw	7
  2454  00C7  24BF               	fcall	_startADC
  2455                           
  2456                           ;main.c: 139: nextMode = 15;
  2457  00C8  300F               	movlw	15
  2458  00C9  0020               	movlb	0	; select bank0
  2459  00CA  00BE               	movwf	??_loop
  2460  00CB  083E               	movf	??_loop,w
  2461  00CC  00DB               	movwf	_nextMode
  2462                           
  2463                           ;main.c: 140: break;
  2464  00CD  0008               	return
  2465  00CE                     l1835:	
  2466                           ;main.c: 142: case 15:
  2467                           
  2468                           
  2469                           ;main.c: 143: startADC(29);
  2470  00CE  301D               	movlw	29
  2471  00CF  24BF               	fcall	_startADC
  2472                           
  2473                           ;main.c: 144: nextMode = 14;
  2474  00D0  300E               	movlw	14
  2475  00D1  0020               	movlb	0	; select bank0
  2476  00D2  00BE               	movwf	??_loop
  2477  00D3  083E               	movf	??_loop,w
  2478  00D4  00DB               	movwf	_nextMode
  2479                           
  2480                           ;main.c: 145: break;
  2481  00D5  0008               	return
  2482  00D6                     l1839:	
  2483                           ;main.c: 147: case 14:
  2484                           
  2485                           
  2486                           ;main.c: 148: startADC(31);
  2487  00D6  301F               	movlw	31
  2488  00D7  24BF               	fcall	_startADC
  2489                           
  2490                           ;main.c: 149: nextMode = 11;
  2491  00D8  300B               	movlw	11
  2492  00D9  0020               	movlb	0	; select bank0
  2493  00DA  00BE               	movwf	??_loop
  2494  00DB  083E               	movf	??_loop,w
  2495  00DC  00DB               	movwf	_nextMode
  2496                           
  2497                           ;main.c: 150: break;
  2498  00DD  0008               	return
  2499  00DE                     l1843:	
  2500                           ;main.c: 155: case 3:
  2501                           
  2502                           ;main.c: 154: switch (ADCON0bits.CHS){
  2503                           
  2504                           ;main.c: 152: case 3:
  2505                           
  2506                           
  2507                           ;main.c: 156: adcSum*= 100;
  2508  00DE  3000               	movlw	0
  2509  00DF  0020               	movlb	0	; select bank0
  2510  00E0  00A3               	movwf	___lmul@multiplier+3
  2511  00E1  3000               	movlw	0
  2512  00E2  00A2               	movwf	___lmul@multiplier+2
  2513  00E3  3000               	movlw	0
  2514  00E4  00A1               	movwf	___lmul@multiplier+1
  2515  00E5  3064               	movlw	100
  2516  00E6  00A0               	movwf	___lmul@multiplier
  2517  00E7  0848               	movf	_adcSum+3,w
  2518  00E8  00A7               	movwf	___lmul@multiplicand+3
  2519  00E9  0847               	movf	_adcSum+2,w
  2520  00EA  00A6               	movwf	___lmul@multiplicand+2
  2521  00EB  0846               	movf	_adcSum+1,w
  2522  00EC  00A5               	movwf	___lmul@multiplicand+1
  2523  00ED  0845               	movf	_adcSum,w
  2524  00EE  00A4               	movwf	___lmul@multiplicand
  2525  00EF  248F               	fcall	___lmul
  2526  00F0  0020               	movlb	0	; select bank0
  2527  00F1  0823               	movf	?___lmul+3,w
  2528  00F2  00C8               	movwf	_adcSum+3
  2529  00F3  0822               	movf	?___lmul+2,w
  2530  00F4  00C7               	movwf	_adcSum+2
  2531  00F5  0821               	movf	?___lmul+1,w
  2532  00F6  00C6               	movwf	_adcSum+1
  2533  00F7  0820               	movf	?___lmul,w
  2534  00F8  00C5               	movwf	_adcSum
  2535                           
  2536                           ;main.c: 157: adcSum/= 2505;
  2537  00F9  3000               	movlw	0
  2538  00FA  00A3               	movwf	___lldiv@divisor+3
  2539  00FB  3000               	movlw	0
  2540  00FC  00A2               	movwf	___lldiv@divisor+2
  2541  00FD  3009               	movlw	9
  2542  00FE  00A1               	movwf	___lldiv@divisor+1
  2543  00FF  30C9               	movlw	201
  2544  0100  297B               	goto	L4
  2545  0101                     l1845:	
  2546                           ;main.c: 160: case 7:
  2547                           
  2548                           ;main.c: 158: break;
  2549                           
  2550                           
  2551                           ;main.c: 161: adcSum*= 100;
  2552  0101  3000               	movlw	0
  2553  0102  0020               	movlb	0	; select bank0
  2554  0103  00A3               	movwf	___lmul@multiplier+3
  2555  0104  3000               	movlw	0
  2556  0105  00A2               	movwf	___lmul@multiplier+2
  2557  0106  3000               	movlw	0
  2558  0107  00A1               	movwf	___lmul@multiplier+1
  2559  0108  3064               	movlw	100
  2560  0109  00A0               	movwf	___lmul@multiplier
  2561  010A  0848               	movf	_adcSum+3,w
  2562  010B  00A7               	movwf	___lmul@multiplicand+3
  2563  010C  0847               	movf	_adcSum+2,w
  2564  010D  00A6               	movwf	___lmul@multiplicand+2
  2565  010E  0846               	movf	_adcSum+1,w
  2566  010F  00A5               	movwf	___lmul@multiplicand+1
  2567  0110  0845               	movf	_adcSum,w
  2568  0111  00A4               	movwf	___lmul@multiplicand
  2569  0112  248F               	fcall	___lmul
  2570  0113  0020               	movlb	0	; select bank0
  2571  0114  0823               	movf	?___lmul+3,w
  2572  0115  00C8               	movwf	_adcSum+3
  2573  0116  0822               	movf	?___lmul+2,w
  2574  0117  00C7               	movwf	_adcSum+2
  2575  0118  0821               	movf	?___lmul+1,w
  2576  0119  00C6               	movwf	_adcSum+1
  2577  011A  0820               	movf	?___lmul,w
  2578  011B  00C5               	movwf	_adcSum
  2579                           
  2580                           ;main.c: 162: adcSum/= 2500;
  2581  011C  3000               	movlw	0
  2582  011D  00A3               	movwf	___lldiv@divisor+3
  2583  011E  3000               	movlw	0
  2584  011F  00A2               	movwf	___lldiv@divisor+2
  2585  0120  3009               	movlw	9
  2586  0121  00A1               	movwf	___lldiv@divisor+1
  2587  0122  30C4               	movlw	196
  2588  0123  297B               	goto	L4
  2589  0124                     l1847:	
  2590                           ;main.c: 165: case 31:
  2591                           
  2592                           ;main.c: 163: break;
  2593                           
  2594                           
  2595                           ;main.c: 166: adcSum*= 100;
  2596  0124  3000               	movlw	0
  2597  0125  0020               	movlb	0	; select bank0
  2598  0126  00A3               	movwf	___lmul@multiplier+3
  2599  0127  3000               	movlw	0
  2600  0128  00A2               	movwf	___lmul@multiplier+2
  2601  0129  3000               	movlw	0
  2602  012A  00A1               	movwf	___lmul@multiplier+1
  2603  012B  3064               	movlw	100
  2604  012C  00A0               	movwf	___lmul@multiplier
  2605  012D  0848               	movf	_adcSum+3,w
  2606  012E  00A7               	movwf	___lmul@multiplicand+3
  2607  012F  0847               	movf	_adcSum+2,w
  2608  0130  00A6               	movwf	___lmul@multiplicand+2
  2609  0131  0846               	movf	_adcSum+1,w
  2610  0132  00A5               	movwf	___lmul@multiplicand+1
  2611  0133  0845               	movf	_adcSum,w
  2612  0134  00A4               	movwf	___lmul@multiplicand
  2613  0135  248F               	fcall	___lmul
  2614  0136  0020               	movlb	0	; select bank0
  2615  0137  0823               	movf	?___lmul+3,w
  2616  0138  00C8               	movwf	_adcSum+3
  2617  0139  0822               	movf	?___lmul+2,w
  2618  013A  00C7               	movwf	_adcSum+2
  2619  013B  0821               	movf	?___lmul+1,w
  2620  013C  00C6               	movwf	_adcSum+1
  2621  013D  0820               	movf	?___lmul,w
  2622  013E  00C5               	movwf	_adcSum
  2623                           
  2624                           ;main.c: 167: adcSum/= 2475;
  2625  013F  3000               	movlw	0
  2626  0140  00A3               	movwf	___lldiv@divisor+3
  2627  0141  3000               	movlw	0
  2628  0142  00A2               	movwf	___lldiv@divisor+2
  2629  0143  3009               	movlw	9
  2630  0144  00A1               	movwf	___lldiv@divisor+1
  2631  0145  30AB               	movlw	171
  2632  0146  297B               	goto	L4
  2633  0147                     l1849:	
  2634                           ;main.c: 170: case 29:
  2635                           
  2636                           ;main.c: 168: break;
  2637                           
  2638                           
  2639                           ;main.c: 171: adcSum/= 2089;
  2640  0147  3000               	movlw	0
  2641  0148  0020               	movlb	0	; select bank0
  2642  0149  00A3               	movwf	___lldiv@divisor+3
  2643  014A  3000               	movlw	0
  2644  014B  00A2               	movwf	___lldiv@divisor+2
  2645  014C  3008               	movlw	8
  2646  014D  00A1               	movwf	___lldiv@divisor+1
  2647  014E  3029               	movlw	41
  2648  014F  00A0               	movwf	___lldiv@divisor
  2649  0150  0848               	movf	_adcSum+3,w
  2650  0151  00A7               	movwf	___lldiv@dividend+3
  2651  0152  0847               	movf	_adcSum+2,w
  2652  0153  00A6               	movwf	___lldiv@dividend+2
  2653  0154  0846               	movf	_adcSum+1,w
  2654  0155  00A5               	movwf	___lldiv@dividend+1
  2655  0156  0845               	movf	_adcSum,w
  2656  0157  00A4               	movwf	___lldiv@dividend
  2657  0158  234A               	fcall	___lldiv
  2658  0159  0020               	movlb	0	; select bank0
  2659  015A  0823               	movf	?___lldiv+3,w
  2660  015B  00C8               	movwf	_adcSum+3
  2661  015C  0822               	movf	?___lldiv+2,w
  2662  015D  00C7               	movwf	_adcSum+2
  2663  015E  0821               	movf	?___lldiv+1,w
  2664  015F  00C6               	movwf	_adcSum+1
  2665  0160  0820               	movf	?___lldiv,w
  2666  0161  00C5               	movwf	_adcSum
  2667                           
  2668                           ;main.c: 172: adcSum-= 40;
  2669  0162  3028               	movlw	40
  2670  0163  00BE               	movwf	??_loop
  2671  0164  3000               	movlw	0
  2672  0165  00BF               	movwf	??_loop+1
  2673  0166  3000               	movlw	0
  2674  0167  00C0               	movwf	??_loop+2
  2675  0168  3000               	movlw	0
  2676  0169  00C1               	movwf	??_loop+3
  2677  016A  083E               	movf	??_loop,w
  2678  016B  02C5               	subwf	_adcSum,f
  2679  016C  083F               	movf	??_loop+1,w
  2680  016D  3BC6               	subwfb	_adcSum+1,f
  2681  016E  0840               	movf	??_loop+2,w
  2682  016F  3BC7               	subwfb	_adcSum+2,f
  2683  0170  0841               	movf	??_loop+3,w
  2684  0171  3BC8               	subwfb	_adcSum+3,f
  2685                           
  2686                           ;main.c: 173: break;
  2687  0172  29A0               	goto	l1859
  2688  0173                     l1853:	
  2689                           ;main.c: 175: default:
  2690                           
  2691                           
  2692                           ;main.c: 176: adcSum/= 255;
  2693  0173  3000               	movlw	0
  2694  0174  0020               	movlb	0	; select bank0
  2695  0175  00A3               	movwf	___lldiv@divisor+3
  2696  0176  3000               	movlw	0
  2697  0177  00A2               	movwf	___lldiv@divisor+2
  2698  0178  3000               	movlw	0
  2699  0179  00A1               	movwf	___lldiv@divisor+1
  2700  017A  30FF               	movlw	255
  2701  017B                     L4:	
  2702  017B  00A0               	movwf	___lldiv@divisor
  2703  017C  0848               	movf	_adcSum+3,w
  2704  017D  00A7               	movwf	___lldiv@dividend+3
  2705  017E  0847               	movf	_adcSum+2,w
  2706  017F  00A6               	movwf	___lldiv@dividend+2
  2707  0180  0846               	movf	_adcSum+1,w
  2708  0181  00A5               	movwf	___lldiv@dividend+1
  2709  0182  0845               	movf	_adcSum,w
  2710  0183  00A4               	movwf	___lldiv@dividend
  2711  0184  234A               	fcall	___lldiv
  2712  0185  0020               	movlb	0	; select bank0
  2713  0186  0823               	movf	?___lldiv+3,w
  2714  0187  00C8               	movwf	_adcSum+3
  2715  0188  0822               	movf	?___lldiv+2,w
  2716  0189  00C7               	movwf	_adcSum+2
  2717  018A  0821               	movf	?___lldiv+1,w
  2718  018B  00C6               	movwf	_adcSum+1
  2719  018C  0820               	movf	?___lldiv,w
  2720  018D  00C5               	movwf	_adcSum
  2721                           
  2722                           ;main.c: 178: }
  2723                           
  2724                           ;main.c: 177: break;
  2725  018E  29A0               	goto	l1859
  2726  018F                     l1857:	
  2727  018F  0021               	movlb	1	; select bank1
  2728  0190  0C1D               	rrf	29,w	;volatile
  2729  0191  0C89               	rrf	9,f
  2730  0192  391F               	andlw	31
  2731                           
  2732                           ; Switch size 1, requested type "space"
  2733                           ; Number of cases is 4, Range of values is 3 to 31
  2734                           ; switch strategies available:
  2735                           ; Name         Instructions Cycles
  2736                           ; simple_byte           13     7 (average)
  2737                           ; direct_byte           67     9 (fixed)
  2738                           ; jumptable            263     9 (fixed)
  2739                           ;	Chosen strategy is simple_byte
  2740  0193  3A03               	xorlw	3	; case 3
  2741  0194  1903               	skipnz
  2742  0195  28DE               	goto	l1843
  2743  0196  3A04               	xorlw	4	; case 7
  2744  0197  1903               	skipnz
  2745  0198  2901               	goto	l1845
  2746  0199  3A1A               	xorlw	26	; case 29
  2747  019A  1903               	skipnz
  2748  019B  2947               	goto	l1849
  2749  019C  3A02               	xorlw	2	; case 31
  2750  019D  1903               	skipnz
  2751  019E  2924               	goto	l1847
  2752  019F  2973               	goto	l1853
  2753  01A0                     l1859:	
  2754                           
  2755                           ;main.c: 180: strcpy(string, "/ADC");
  2756  01A0  303F               	movlw	low (STR_3| (0+32768))
  2757  01A1  0020               	movlb	0	; select bank0
  2758  01A2  00A8               	movwf	strcpy@from
  2759  01A3  3086               	movlw	high (STR_3| (0+32768))
  2760  01A4  00A9               	movwf	strcpy@from+1
  2761  01A5  304B               	movlw	(low (_string| 0))& (0+255)
  2762  01A6  257F               	fcall	_strcpy
  2763                           
  2764                           ;main.c: 181: _itoa(string + strlen(string), ADCON0bits.CHS, 10);
  2765  01A7  0021               	movlb	1	; select bank1
  2766  01A8  0C1D               	rrf	29,w	;volatile
  2767  01A9  0C89               	rrf	9,f
  2768  01AA  391F               	andlw	31
  2769  01AB  0020               	movlb	0	; select bank0
  2770  01AC  00BE               	movwf	??_loop
  2771  01AD  01BF               	clrf	??_loop+1
  2772  01AE  083E               	movf	??_loop,w
  2773  01AF  00B8               	movwf	__itoa@number
  2774  01B0  083F               	movf	??_loop+1,w
  2775  01B1  00B9               	movwf	__itoa@number+1
  2776  01B2  300A               	movlw	10
  2777  01B3  00C0               	movwf	??_loop+2
  2778  01B4  0840               	movf	??_loop+2,w
  2779  01B5  00BA               	movwf	__itoa@base
  2780  01B6  304B               	movlw	(low (_string| 0))& (0+255)
  2781  01B7  251A               	fcall	_strlen
  2782  01B8  0020               	movlb	0	; select bank0
  2783  01B9  0820               	movf	?_strlen,w
  2784  01BA  3E4B               	addlw	(low (_string| 0))& (0+255)
  2785  01BB  25E2               	fcall	__itoa
  2786                           
  2787                           ;main.c: 182: strcpy(string + strlen(string), "/");
  2788  01BC  301D               	movlw	low ((STR_2+6)| (0+32768))
  2789  01BD  0020               	movlb	0	; select bank0
  2790  01BE  00A8               	movwf	strcpy@from
  2791  01BF  3086               	movlw	high ((STR_2+6)| (0+32768))
  2792  01C0  00A9               	movwf	strcpy@from+1
  2793  01C1  304B               	movlw	(low (_string| 0))& (0+255)
  2794  01C2  251A               	fcall	_strlen
  2795  01C3  0020               	movlb	0	; select bank0
  2796  01C4  0820               	movf	?_strlen,w
  2797  01C5  3E4B               	addlw	(low (_string| 0))& (0+255)
  2798  01C6  257F               	fcall	_strcpy
  2799                           
  2800                           ;main.c: 183: _itoa(string + strlen(string), adcSum, 10);
  2801  01C7  0020               	movlb	0	; select bank0
  2802  01C8  0846               	movf	_adcSum+1,w
  2803  01C9  00B9               	movwf	__itoa@number+1
  2804  01CA  0845               	movf	_adcSum,w
  2805  01CB  00B8               	movwf	__itoa@number
  2806  01CC  300A               	movlw	10
  2807  01CD  00BE               	movwf	??_loop
  2808  01CE  083E               	movf	??_loop,w
  2809  01CF  00BA               	movwf	__itoa@base
  2810  01D0  304B               	movlw	(low (_string| 0))& (0+255)
  2811  01D1  251A               	fcall	_strlen
  2812  01D2  0020               	movlb	0	; select bank0
  2813  01D3  0820               	movf	?_strlen,w
  2814  01D4  3E4B               	addlw	(low (_string| 0))& (0+255)
  2815  01D5  25E2               	fcall	__itoa
  2816                           
  2817                           ;main.c: 185: nrf24l01SendString(string);
  2818  01D6  304B               	movlw	(low (_string| 0))& (0+255)
  2819  01D7  239D               	fcall	_nrf24l01SendString
  2820                           
  2821                           ;main.c: 187: mode = nextMode;
  2822  01D8  0020               	movlb	0	; select bank0
  2823  01D9  085B               	movf	_nextMode,w
  2824  01DA  00BE               	movwf	??_loop
  2825  01DB  083E               	movf	??_loop,w
  2826  01DC  00FD               	movwf	_mode
  2827                           
  2828                           ;main.c: 190: }
  2829                           
  2830                           ;main.c: 188: break;
  2831  01DD  0008               	return
  2832  01DE                     l1869:	
  2833  01DE  087D               	movf	_mode,w
  2834                           
  2835                           ; Switch size 1, requested type "space"
  2836                           ; Number of cases is 9, Range of values is 1 to 15
  2837                           ; switch strategies available:
  2838                           ; Name         Instructions Cycles
  2839                           ; simple_byte           28    15 (average)
  2840                           ; direct_byte           39     9 (fixed)
  2841                           ; jumptable            263     9 (fixed)
  2842                           ;	Chosen strategy is simple_byte
  2843  01DF  3A01               	xorlw	1	; case 1
  2844  01E0  1903               	skipnz
  2845  01E1  2856               	goto	l1793
  2846  01E2  3A02               	xorlw	2	; case 3
  2847  01E3  1903               	skipnz
  2848  01E4  298F               	goto	l1857
  2849  01E5  3A07               	xorlw	7	; case 4
  2850  01E6  1903               	skipnz
  2851  01E7  289B               	goto	l1817
  2852  01E8  3A0E               	xorlw	14	; case 10
  2853  01E9  1903               	skipnz
  2854  01EA  286F               	goto	l1807
  2855  01EB  3A01               	xorlw	1	; case 11
  2856  01EC  1903               	skipnz
  2857  01ED  2893               	goto	l167
  2858  01EE  3A07               	xorlw	7	; case 12
  2859  01EF  1903               	skipnz
  2860  01F0  28BE               	goto	l1827
  2861  01F1  3A01               	xorlw	1	; case 13
  2862  01F2  1903               	skipnz
  2863  01F3  28C6               	goto	l1831
  2864  01F4  3A03               	xorlw	3	; case 14
  2865  01F5  1903               	skipnz
  2866  01F6  28D6               	goto	l1839
  2867  01F7  3A01               	xorlw	1	; case 15
  2868  01F8  1903               	skipnz
  2869  01F9  28CE               	goto	l1835
  2870  01FA  29FB               	goto	l181
  2871  01FB                     l181:	
  2872  01FB  0008               	return
  2873  01FC                     __end_of_loop:	
  2874                           
  2875                           	psect	text6
  2876  051A                     __ptext6:	
  2877 ;; *************** function _strlen *****************
  2878 ;; Defined at:
  2879 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  s               1    wreg     PTR const unsigned char 
  2882 ;;		 -> string(16), 
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  2885 ;;		 -> string(16), 
  2886 ;;  cp              1    6[BANK0 ] PTR const unsigned char 
  2887 ;;		 -> string(16), 
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  2    0[BANK0 ] unsigned int 
  2890 ;; Registers used:
  2891 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMMON   BANK0   BANK1
  2897 ;;      Params:         0       2       0
  2898 ;;      Locals:         0       2       0
  2899 ;;      Temps:          0       4       0
  2900 ;;      Totals:         0       8       0
  2901 ;;Total ram usage:        8 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    4
  2904 ;; This function calls:
  2905 ;;		Nothing
  2906 ;; This function is called by:
  2907 ;;		_loop
  2908 ;;		_nrf24l01HandleRX
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           
  2913                           ;psect for function _strlen
  2914  051A                     _strlen:	
  2915                           
  2916                           ;incstack = 0
  2917                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  2918                           ;strlen@s stored from wreg
  2919  051A  0020               	movlb	0	; select bank0
  2920  051B  00A7               	movwf	strlen@s
  2921  051C  0827               	movf	strlen@s,w
  2922  051D  00A2               	movwf	??_strlen
  2923  051E  0822               	movf	??_strlen,w
  2924  051F  00A6               	movwf	strlen@cp
  2925  0520                     l1537:	
  2926  0520  0826               	movf	strlen@cp,w
  2927  0521  0086               	movwf	6
  2928  0522  0187               	clrf	7
  2929  0523  0801               	movf	1,w
  2930  0524  1903               	btfsc	3,2
  2931  0525  2D2B               	goto	l1539
  2932  0526  3001               	movlw	1
  2933  0527  00A2               	movwf	??_strlen
  2934  0528  0822               	movf	??_strlen,w
  2935  0529  07A6               	addwf	strlen@cp,f
  2936  052A  2D20               	goto	l1537
  2937  052B                     l1539:	
  2938  052B  0827               	movf	strlen@s,w
  2939  052C  00A2               	movwf	??_strlen
  2940  052D  3000               	movlw	0
  2941  052E  00A3               	movwf	??_strlen+1
  2942  052F  09A2               	comf	??_strlen,f
  2943  0530  09A3               	comf	??_strlen+1,f
  2944  0531  0AA2               	incf	??_strlen,f
  2945  0532  1903               	skipnz
  2946  0533  0AA3               	incf	??_strlen+1,f
  2947  0534  0826               	movf	strlen@cp,w
  2948  0535  00A4               	movwf	??_strlen+2
  2949  0536  3000               	movlw	0
  2950  0537  00A5               	movwf	??_strlen+3
  2951  0538  0822               	movf	??_strlen,w
  2952  0539  0724               	addwf	??_strlen+2,w
  2953  053A  00A0               	movwf	?_strlen
  2954  053B  0823               	movf	??_strlen+1,w
  2955  053C  3D25               	addwfc	??_strlen+3,w
  2956  053D  00A1               	movwf	?_strlen+1
  2957  053E  0008               	return
  2958  053F                     __end_of_strlen:	
  2959                           
  2960                           	psect	text7
  2961  057F                     __ptext7:	
  2962 ;; *************** function _strcpy *****************
  2963 ;; Defined at:
  2964 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;  to              1    wreg     PTR unsigned char 
  2967 ;;		 -> string(16), 
  2968 ;;  from            2    8[BANK0 ] PTR const unsigned char 
  2969 ;;		 -> STR_4(2), STR_3(5), STR_2(8), STR_1(7), 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;  to              1   12[BANK0 ] PTR unsigned char 
  2972 ;;		 -> string(16), 
  2973 ;;  cp              1   11[BANK0 ] PTR unsigned char 
  2974 ;;		 -> string(16), 
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      PTR unsigned char 
  2977 ;; Registers used:
  2978 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMMON   BANK0   BANK1
  2984 ;;      Params:         0       2       0
  2985 ;;      Locals:         0       2       0
  2986 ;;      Temps:          0       1       0
  2987 ;;      Totals:         0       5       0
  2988 ;;Total ram usage:        5 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    4
  2991 ;; This function calls:
  2992 ;;		Nothing
  2993 ;; This function is called by:
  2994 ;;		_loop
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           
  2999                           ;psect for function _strcpy
  3000  057F                     _strcpy:	
  3001                           
  3002                           ;incstack = 0
  3003                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3004                           ;strcpy@to stored from wreg
  3005  057F  0020               	movlb	0	; select bank0
  3006  0580  00AC               	movwf	strcpy@to
  3007  0581  082C               	movf	strcpy@to,w
  3008  0582  00AA               	movwf	??_strcpy
  3009  0583  082A               	movf	??_strcpy,w
  3010  0584  00AB               	movwf	strcpy@cp
  3011  0585                     l1531:	
  3012  0585  082B               	movf	strcpy@cp,w
  3013  0586  0086               	movwf	6
  3014  0587  0187               	clrf	7
  3015  0588  0828               	movf	strcpy@from,w
  3016  0589  0084               	movwf	4
  3017  058A  0829               	movf	strcpy@from+1,w
  3018  058B  0085               	movwf	5
  3019  058C  0800               	movf	0,w	;code access
  3020  058D  3FC0               	movwi [0]fsr1
  3021  058E  0889               	movf	9,f
  3022  058F  1903               	btfsc	3,2
  3023  0590  0008               	return
  3024  0591  3001               	movlw	1
  3025  0592  00AA               	movwf	??_strcpy
  3026  0593  082A               	movf	??_strcpy,w
  3027  0594  07AB               	addwf	strcpy@cp,f
  3028  0595  3001               	movlw	1
  3029  0596  07A8               	addwf	strcpy@from,f
  3030  0597  3000               	movlw	0
  3031  0598  3DA9               	addwfc	strcpy@from+1,f
  3032  0599  2D85               	goto	l1531
  3033  059A                     __end_of_strcpy:	
  3034                           ;	Return value of _strcpy is never used
  3035                           
  3036                           
  3037                           	psect	text8
  3038  04BF                     __ptext8:	
  3039 ;; *************** function _startADC *****************
  3040 ;; Defined at:
  3041 ;;		line 60 in file "main.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;  channel         1    wreg     unsigned char 
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;  channel         1    1[BANK0 ] unsigned char 
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		wreg, status,2, status,0
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMMON   BANK0   BANK1
  3055 ;;      Params:         0       0       0
  3056 ;;      Locals:         0       1       0
  3057 ;;      Temps:          0       1       0
  3058 ;;      Totals:         0       2       0
  3059 ;;Total ram usage:        2 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    4
  3062 ;; This function calls:
  3063 ;;		Nothing
  3064 ;; This function is called by:
  3065 ;;		_loop
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           
  3070                           ;psect for function _startADC
  3071  04BF                     _startADC:	
  3072                           
  3073                           ;incstack = 0
  3074                           ; Regs used in _startADC: [wreg+status,2+status,0]
  3075                           ;startADC@channel stored from wreg
  3076  04BF  0020               	movlb	0	; select bank0
  3077  04C0  00A1               	movwf	startADC@channel
  3078                           
  3079                           ;main.c: 61: adcSum = 0;
  3080  04C1  3000               	movlw	0
  3081  04C2  00C8               	movwf	_adcSum+3
  3082  04C3  3000               	movlw	0
  3083  04C4  00C7               	movwf	_adcSum+2
  3084  04C5  3000               	movlw	0
  3085  04C6  00C6               	movwf	_adcSum+1
  3086  04C7  3000               	movlw	0
  3087  04C8  00C5               	movwf	_adcSum
  3088                           
  3089                           ;main.c: 62: adcLoop = 255;
  3090  04C9  30FF               	movlw	255
  3091  04CA  00A0               	movwf	??_startADC
  3092  04CB  0820               	movf	??_startADC,w
  3093  04CC  00FC               	movwf	_adcLoop
  3094                           
  3095                           ;main.c: 64: if (ADCON0bits.CHS != channel) {
  3096  04CD  0021               	movlb	1	; select bank1
  3097  04CE  0C1D               	rrf	29,w	;volatile
  3098  04CF  0C89               	rrf	9,f
  3099  04D0  391F               	andlw	31
  3100  04D1  0020               	movlb	0	; select bank0
  3101  04D2  0621               	xorwf	startADC@channel,w
  3102  04D3  1903               	skipnz
  3103  04D4  2CE5               	goto	l1505
  3104                           
  3105                           ;main.c: 65: ADCON0bits.CHS = channel;
  3106  04D5  0821               	movf	startADC@channel,w
  3107  04D6  00A0               	movwf	??_startADC
  3108  04D7  0DA0               	rlf	??_startADC,f
  3109  04D8  0DA0               	rlf	??_startADC,f
  3110  04D9  0021               	movlb	1	; select bank1
  3111  04DA  081D               	movf	29,w	;volatile
  3112  04DB  0020               	movlb	0	; select bank0
  3113  04DC  0620               	xorwf	??_startADC,w
  3114  04DD  3983               	andlw	-125
  3115  04DE  0620               	xorwf	??_startADC,w
  3116  04DF  0021               	movlb	1	; select bank1
  3117  04E0  009D               	movwf	29	;volatile
  3118                           
  3119                           ;main.c: 66: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3120  04E1  30A0               	movlw	160
  3121  04E2                     u1097:	
  3122  04E2  3200               	nop2
  3123  04E3  0B89               	decfsz	9,f
  3124  04E4  2CE2               	goto	u1097
  3125  04E5                     l1505:	
  3126                           
  3127                           ;main.c: 67: }
  3128                           ;main.c: 69: ADCON0bits.ADGO = 1;
  3129  04E5  0021               	movlb	1	; select bank1
  3130  04E6  149D               	bsf	29,1	;volatile
  3131                           
  3132                           ;main.c: 70: mode = 2;
  3133  04E7  3002               	movlw	2
  3134  04E8  0020               	movlb	0	; select bank0
  3135  04E9  00A0               	movwf	??_startADC
  3136  04EA  0820               	movf	??_startADC,w
  3137  04EB  00FD               	movwf	_mode
  3138  04EC  0008               	return
  3139  04ED                     __end_of_startADC:	
  3140                           
  3141                           	psect	text9
  3142  0562                     __ptext9:	
  3143 ;; *************** function _nrf24l01SetRecieveMode *****************
  3144 ;; Defined at:
  3145 ;;		line 86 in file "nrf24l01.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;		None
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;  config          1    1[BANK0 ] struct .
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  1    wreg      void 
  3152 ;; Registers used:
  3153 ;;		wreg, status,2, status,0, pclath, cstack
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMMON   BANK0   BANK1
  3159 ;;      Params:         0       0       0
  3160 ;;      Locals:         0       1       0
  3161 ;;      Temps:          0       1       0
  3162 ;;      Totals:         0       2       0
  3163 ;;Total ram usage:        2 bytes
  3164 ;; Hardware stack levels used:    1
  3165 ;; Hardware stack levels required when called:    6
  3166 ;; This function calls:
  3167 ;;		_nrf24l01Send
  3168 ;; This function is called by:
  3169 ;;		_loop
  3170 ;; This function uses a non-reentrant model
  3171 ;;
  3172                           
  3173                           
  3174                           ;psect for function _nrf24l01SetRecieveMode
  3175  0562                     _nrf24l01SetRecieveMode:	
  3176                           
  3177                           ;nrf24l01.c: 88: PORTAbits.RA0 = 0;
  3178                           
  3179                           ;incstack = 0
  3180                           ; Regs used in _nrf24l01SetRecieveMode: [wreg+status,2+status,0+pclath+cstack]
  3181  0562  0020               	movlb	0	; select bank0
  3182  0563  100C               	bcf	12,0	;volatile
  3183                           
  3184                           ;nrf24l01.c: 90: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3185  0564  30A0               	movlw	160
  3186  0565                     u1107:	
  3187  0565  3200               	nop2
  3188  0566  0B89               	decfsz	9,f
  3189  0567  2D65               	goto	u1107
  3190                           
  3191                           ;nrf24l01.c: 92: n_CONFIG_t config;
  3192                           ;nrf24l01.c: 93: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  3193  0568  01F1               	clrf	nrf24l01Send@data
  3194  0569  3000               	movlw	0
  3195  056A  2600               	fcall	_nrf24l01Send
  3196  056B  0020               	movlb	0	; select bank0
  3197  056C  00A0               	movwf	??_nrf24l01SetRecieveMode
  3198  056D  0820               	movf	??_nrf24l01SetRecieveMode,w
  3199  056E  00A1               	movwf	nrf24l01SetRecieveMode@config
  3200                           
  3201                           ;nrf24l01.c: 94: if (config.PRIM_RX == 0){
  3202  056F  1821               	btfsc	nrf24l01SetRecieveMode@config,0
  3203  0570  0008               	return
  3204                           
  3205                           ;nrf24l01.c: 95: config.PRIM_RX = 1;
  3206  0571  1421               	bsf	nrf24l01SetRecieveMode@config,0
  3207                           
  3208                           ;nrf24l01.c: 96: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3209  0572  0821               	movf	nrf24l01SetRecieveMode@config,w
  3210  0573  00A0               	movwf	??_nrf24l01SetRecieveMode
  3211  0574  0820               	movf	??_nrf24l01SetRecieveMode,w
  3212  0575  00F1               	movwf	nrf24l01Send@data
  3213  0576  3020               	movlw	32
  3214  0577  2600               	fcall	_nrf24l01Send
  3215                           
  3216                           ;nrf24l01.c: 97: PORTAbits.RA0 = 1;
  3217  0578  0020               	movlb	0	; select bank0
  3218  0579  140C               	bsf	12,0	;volatile
  3219                           
  3220                           ;nrf24l01.c: 98: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3221  057A  30A0               	movlw	160
  3222  057B                     u1117:	
  3223  057B  3200               	nop2
  3224  057C  0B89               	decfsz	9,f
  3225  057D  2D7B               	goto	u1117
  3226  057E  0008               	return
  3227  057F                     __end_of_nrf24l01SetRecieveMode:	
  3228                           
  3229                           	psect	text10
  3230  039D                     __ptext10:	
  3231 ;; *************** function _nrf24l01SendString *****************
  3232 ;; Defined at:
  3233 ;;		line 102 in file "nrf24l01.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  string          1    wreg     PTR unsigned char 
  3236 ;;		 -> string(16), 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  string          1   13[BANK0 ] PTR unsigned char 
  3239 ;;		 -> string(16), 
  3240 ;;  i               1   14[BANK0 ] unsigned char 
  3241 ;;  btye            1   12[BANK0 ] unsigned char 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMMON   BANK0   BANK1
  3251 ;;      Params:         0       0       0
  3252 ;;      Locals:         0       3       0
  3253 ;;      Temps:          0       3       0
  3254 ;;      Totals:         0       6       0
  3255 ;;Total ram usage:        6 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    7
  3258 ;; This function calls:
  3259 ;;		_nrf24l01SPIEnd
  3260 ;;		_nrf24l01SPISend
  3261 ;;		_nrf24l01SPIStart
  3262 ;;		_nrf24l01SetTransmitMode
  3263 ;;		_read_flashmem
  3264 ;; This function is called by:
  3265 ;;		_loop
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           
  3270                           ;psect for function _nrf24l01SendString
  3271  039D                     _nrf24l01SendString:	
  3272                           
  3273                           ;incstack = 0
  3274                           ; Regs used in _nrf24l01SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3275                           ;nrf24l01SendString@string stored from wreg
  3276  039D  0020               	movlb	0	; select bank0
  3277  039E  00AD               	movwf	nrf24l01SendString@string
  3278                           
  3279                           ;nrf24l01.c: 104: unsigned char btye;
  3280                           ;nrf24l01.c: 105: unsigned char i;
  3281                           ;nrf24l01.c: 107: nrf24l01SetTransmitMode();
  3282  039F  259A               	fcall	_nrf24l01SetTransmitMode
  3283                           
  3284                           ;nrf24l01.c: 109: nrf24l01SPIStart();
  3285  03A0  2626               	fcall	_nrf24l01SPIStart
  3286                           
  3287                           ;nrf24l01.c: 111: nrf24l01SPISend(0b10100000);
  3288  03A1  30A0               	movlw	160
  3289  03A2  260C               	fcall	_nrf24l01SPISend
  3290                           
  3291                           ;nrf24l01.c: 113: i = 0;
  3292  03A3  0020               	movlb	0	; select bank0
  3293  03A4  01AE               	clrf	nrf24l01SendString@i
  3294  03A5                     l1547:	
  3295                           ;nrf24l01.c: 114: while (1){
  3296                           
  3297                           
  3298                           ;nrf24l01.c: 115: btye = read_flashmem((unsigned) 0 + i++);
  3299  03A5  0020               	movlb	0	; select bank0
  3300  03A6  082E               	movf	nrf24l01SendString@i,w
  3301  03A7  00A9               	movwf	??_nrf24l01SendString
  3302  03A8  01AA               	clrf	??_nrf24l01SendString+1
  3303  03A9  0829               	movf	??_nrf24l01SendString,w
  3304  03AA  00A0               	movwf	read_flashmem@offset
  3305  03AB  082A               	movf	??_nrf24l01SendString+1,w
  3306  03AC  00A1               	movwf	read_flashmem@offset+1
  3307  03AD  245D               	fcall	_read_flashmem
  3308  03AE  0020               	movlb	0	; select bank0
  3309  03AF  0820               	movf	?_read_flashmem,w
  3310  03B0  00AB               	movwf	??_nrf24l01SendString+2
  3311  03B1  082B               	movf	??_nrf24l01SendString+2,w
  3312  03B2  00AC               	movwf	nrf24l01SendString@btye
  3313  03B3  3001               	movlw	1
  3314  03B4  00A9               	movwf	??_nrf24l01SendString
  3315  03B5  0829               	movf	??_nrf24l01SendString,w
  3316  03B6  07AE               	addwf	nrf24l01SendString@i,f
  3317                           
  3318                           ;nrf24l01.c: 117: if (btye == '\0'){
  3319  03B7  082C               	movf	nrf24l01SendString@btye,w
  3320  03B8  1903               	btfsc	3,2
  3321  03B9  2BBD               	goto	l1557
  3322                           
  3323                           ;nrf24l01.c: 119: }
  3324                           ;nrf24l01.c: 121: nrf24l01SPISend(btye);
  3325                           
  3326                           ;nrf24l01.c: 118: break;
  3327  03BA  082C               	movf	nrf24l01SendString@btye,w
  3328  03BB  260C               	fcall	_nrf24l01SPISend
  3329  03BC  2BA5               	goto	l1547
  3330  03BD                     l1557:	
  3331                           
  3332                           ;nrf24l01.c: 122: }
  3333                           ;nrf24l01.c: 124: for (i = 0; string[i] != '\0'; i++){
  3334  03BD  0020               	movlb	0	; select bank0
  3335  03BE  01AE               	clrf	nrf24l01SendString@i
  3336  03BF                     l1563:	
  3337  03BF  082E               	movf	nrf24l01SendString@i,w
  3338  03C0  072D               	addwf	nrf24l01SendString@string,w
  3339  03C1  00A9               	movwf	??_nrf24l01SendString
  3340  03C2  0829               	movf	??_nrf24l01SendString,w
  3341  03C3  0086               	movwf	6
  3342  03C4  0187               	clrf	7
  3343  03C5  0801               	movf	1,w
  3344  03C6  1903               	btfsc	3,2
  3345  03C7  2BD6               	goto	l1565
  3346                           
  3347                           ;nrf24l01.c: 125: nrf24l01SPISend(string[i]);
  3348  03C8  082E               	movf	nrf24l01SendString@i,w
  3349  03C9  072D               	addwf	nrf24l01SendString@string,w
  3350  03CA  00A9               	movwf	??_nrf24l01SendString
  3351  03CB  0829               	movf	??_nrf24l01SendString,w
  3352  03CC  0086               	movwf	6
  3353  03CD  0187               	clrf	7
  3354  03CE  0801               	movf	1,w
  3355  03CF  260C               	fcall	_nrf24l01SPISend
  3356  03D0  3001               	movlw	1
  3357  03D1  0020               	movlb	0	; select bank0
  3358  03D2  00A9               	movwf	??_nrf24l01SendString
  3359  03D3  0829               	movf	??_nrf24l01SendString,w
  3360  03D4  07AE               	addwf	nrf24l01SendString@i,f
  3361  03D5  2BBF               	goto	l1563
  3362  03D6                     l1565:	
  3363                           
  3364                           ;nrf24l01.c: 126: }
  3365                           ;nrf24l01.c: 128: nrf24l01SPIEnd();
  3366  03D6  262D               	fcall	_nrf24l01SPIEnd
  3367                           
  3368                           ;nrf24l01.c: 130: PORTAbits.RA0 = 1;
  3369  03D7  0020               	movlb	0	; select bank0
  3370  03D8  140C               	bsf	12,0	;volatile
  3371                           
  3372                           ;nrf24l01.c: 132: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3373  03D9  3085               	movlw	133
  3374  03DA                     u1127:	
  3375  03DA  0B89               	decfsz	9,f
  3376  03DB  2BDA               	goto	u1127
  3377  03DC  0000               	nop
  3378                           
  3379                           ;nrf24l01.c: 134: PORTAbits.RA0 = 0;
  3380  03DD  0020               	movlb	0	; select bank0
  3381  03DE  100C               	bcf	12,0	;volatile
  3382                           
  3383                           ;nrf24l01.c: 138: _delay((unsigned long)((100)*(16000000/4000.0)));
  3384  03DF  3003               	movlw	3
  3385  03E0  0020               	movlb	0	; select bank0
  3386  03E1  00AA               	movwf	??_nrf24l01SendString+1
  3387  03E2  3008               	movlw	8
  3388  03E3  00A9               	movwf	??_nrf24l01SendString
  3389  03E4  3077               	movlw	119
  3390  03E5                     u1137:	
  3391  03E5  0B89               	decfsz	9,f
  3392  03E6  2BE5               	goto	u1137
  3393  03E7  0BA9               	decfsz	??_nrf24l01SendString,f
  3394  03E8  2BE5               	goto	u1137
  3395  03E9  0BAA               	decfsz	??_nrf24l01SendString+1,f
  3396  03EA  2BE5               	goto	u1137
  3397  03EB  0008               	return
  3398  03EC                     __end_of_nrf24l01SendString:	
  3399                           
  3400                           	psect	text11
  3401  045D                     __ptext11:	
  3402 ;; *************** function _read_flashmem *****************
  3403 ;; Defined at:
  3404 ;;		line 61 in file "flash.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  offset          2    0[BANK0 ] unsigned int 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  address         2    7[BANK0 ] unsigned int 
  3409 ;;  result          2    5[BANK0 ] unsigned int 
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  2    0[BANK0 ] unsigned int 
  3412 ;; Registers used:
  3413 ;;		wreg, status,2, status,0
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMMON   BANK0   BANK1
  3419 ;;      Params:         0       2       0
  3420 ;;      Locals:         0       4       0
  3421 ;;      Temps:          0       3       0
  3422 ;;      Totals:         0       9       0
  3423 ;;Total ram usage:        9 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    4
  3426 ;; This function calls:
  3427 ;;		Nothing
  3428 ;; This function is called by:
  3429 ;;		_loop
  3430 ;;		_main
  3431 ;;		_nrf24l01SendString
  3432 ;;		_nrf24l01HandleRX
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           
  3437                           ;psect for function _read_flashmem
  3438  045D                     _read_flashmem:	
  3439                           
  3440                           ;flash.c: 63: unsigned int address;
  3441                           ;flash.c: 65: INTCONbits.GIE = 0;
  3442                           
  3443                           ;incstack = 0
  3444                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  3445  045D  138B               	bcf	11,7	;volatile
  3446                           
  3447                           ;flash.c: 67: PMCON1 = 0x00;
  3448  045E  0023               	movlb	3	; select bank3
  3449  045F  0195               	clrf	21	;volatile
  3450                           
  3451                           ;flash.c: 69: address = (0x800U-32) + offset;
  3452  0460  0020               	movlb	0	; select bank0
  3453  0461  0820               	movf	read_flashmem@offset,w
  3454  0462  3EE0               	addlw	224
  3455  0463  00A7               	movwf	read_flashmem@address
  3456  0464  3007               	movlw	7
  3457  0465  3D21               	addwfc	read_flashmem@offset+1,w
  3458  0466  00A8               	movwf	read_flashmem@address+1
  3459                           
  3460                           ;flash.c: 70: PMADRL = (char) (address >> 0);
  3461  0467  0827               	movf	read_flashmem@address,w
  3462  0468  0023               	movlb	3	; select bank3
  3463  0469  0091               	movwf	17	;volatile
  3464                           
  3465                           ;flash.c: 71: PMADRH = (char) (address >> 8);
  3466  046A  0020               	movlb	0	; select bank0
  3467  046B  0828               	movf	read_flashmem@address+1,w
  3468  046C  0023               	movlb	3	; select bank3
  3469  046D  0092               	movwf	18	;volatile
  3470                           
  3471                           ;flash.c: 73: PMCON1bits.RD = 1;
  3472  046E  1415               	bsf	21,0	;volatile
  3473                           
  3474                           ;flash.c: 75: __nop();
  3475  046F  0000               	nop
  3476                           
  3477                           ;flash.c: 76: __nop();
  3478  0470  0000               	nop
  3479                           
  3480                           ;flash.c: 78: unsigned int result = 0;
  3481  0471  0020               	movlb	0	; select bank0
  3482  0472  01A5               	clrf	read_flashmem@result
  3483  0473  01A6               	clrf	read_flashmem@result+1
  3484                           
  3485                           ;flash.c: 79: result = PMDATL;
  3486  0474  0023               	movlb	3	; select bank3
  3487  0475  0813               	movf	19,w	;volatile
  3488  0476  0020               	movlb	0	; select bank0
  3489  0477  00A2               	movwf	??_read_flashmem
  3490  0478  01A3               	clrf	??_read_flashmem+1
  3491  0479  0822               	movf	??_read_flashmem,w
  3492  047A  00A5               	movwf	read_flashmem@result
  3493  047B  0823               	movf	??_read_flashmem+1,w
  3494  047C  00A6               	movwf	read_flashmem@result+1
  3495                           
  3496                           ;flash.c: 80: result|= ( (unsigned) (PMDATH) << 8);
  3497  047D  0023               	movlb	3	; select bank3
  3498  047E  0814               	movf	20,w	;volatile
  3499  047F  0020               	movlb	0	; select bank0
  3500  0480  00A2               	movwf	??_read_flashmem
  3501  0481  01A3               	clrf	??_read_flashmem+1
  3502  0482  0822               	movf	??_read_flashmem,w
  3503  0483  00A3               	movwf	??_read_flashmem+1
  3504  0484  01A2               	clrf	??_read_flashmem
  3505  0485  0822               	movf	??_read_flashmem,w
  3506  0486  04A5               	iorwf	read_flashmem@result,f
  3507  0487  0823               	movf	??_read_flashmem+1,w
  3508  0488  04A6               	iorwf	read_flashmem@result+1,f
  3509                           
  3510                           ;flash.c: 82: INTCONbits.GIE = 1;
  3511  0489  178B               	bsf	11,7	;volatile
  3512                           
  3513                           ;flash.c: 84: return result;
  3514  048A  0826               	movf	read_flashmem@result+1,w
  3515  048B  00A1               	movwf	?_read_flashmem+1
  3516  048C  0825               	movf	read_flashmem@result,w
  3517  048D  00A0               	movwf	?_read_flashmem
  3518  048E  0008               	return
  3519  048F                     __end_of_read_flashmem:	
  3520                           
  3521                           	psect	text12
  3522  059A                     __ptext12:	
  3523 ;; *************** function _nrf24l01SetTransmitMode *****************
  3524 ;; Defined at:
  3525 ;;		line 70 in file "nrf24l01.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;		None
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;  config          1    1[BANK0 ] struct .
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      void 
  3532 ;; Registers used:
  3533 ;;		wreg, status,2, status,0, pclath, cstack
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMMON   BANK0   BANK1
  3539 ;;      Params:         0       0       0
  3540 ;;      Locals:         0       1       0
  3541 ;;      Temps:          0       1       0
  3542 ;;      Totals:         0       2       0
  3543 ;;Total ram usage:        2 bytes
  3544 ;; Hardware stack levels used:    1
  3545 ;; Hardware stack levels required when called:    6
  3546 ;; This function calls:
  3547 ;;		_nrf24l01Send
  3548 ;; This function is called by:
  3549 ;;		_nrf24l01SendString
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           
  3554                           ;psect for function _nrf24l01SetTransmitMode
  3555  059A                     _nrf24l01SetTransmitMode:	
  3556                           
  3557                           ;nrf24l01.c: 72: PORTAbits.RA0 = 0;
  3558                           
  3559                           ;incstack = 0
  3560                           ; Regs used in _nrf24l01SetTransmitMode: [wreg+status,2+status,0+pclath+cstack]
  3561  059A  0020               	movlb	0	; select bank0
  3562  059B  100C               	bcf	12,0	;volatile
  3563                           
  3564                           ;nrf24l01.c: 74: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3565  059C  30A0               	movlw	160
  3566  059D                     u1147:	
  3567  059D  3200               	nop2
  3568  059E  0B89               	decfsz	9,f
  3569  059F  2D9D               	goto	u1147
  3570                           
  3571                           ;nrf24l01.c: 76: n_CONFIG_t config;
  3572                           ;nrf24l01.c: 77: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  3573  05A0  01F1               	clrf	nrf24l01Send@data
  3574  05A1  3000               	movlw	0
  3575  05A2  2600               	fcall	_nrf24l01Send
  3576  05A3  0020               	movlb	0	; select bank0
  3577  05A4  00A0               	movwf	??_nrf24l01SetTransmitMode
  3578  05A5  0820               	movf	??_nrf24l01SetTransmitMode,w
  3579  05A6  00A1               	movwf	nrf24l01SetTransmitMode@config
  3580                           
  3581                           ;nrf24l01.c: 78: if (config.PRIM_RX == 1){
  3582  05A7  1C21               	btfss	nrf24l01SetTransmitMode@config,0
  3583  05A8  0008               	return
  3584                           
  3585                           ;nrf24l01.c: 79: config.PRIM_RX = 0;
  3586  05A9  1021               	bcf	nrf24l01SetTransmitMode@config,0
  3587                           
  3588                           ;nrf24l01.c: 80: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3589  05AA  0821               	movf	nrf24l01SetTransmitMode@config,w
  3590  05AB  00A0               	movwf	??_nrf24l01SetTransmitMode
  3591  05AC  0820               	movf	??_nrf24l01SetTransmitMode,w
  3592  05AD  00F1               	movwf	nrf24l01Send@data
  3593  05AE  3020               	movlw	32
  3594  05AF  2600               	fcall	_nrf24l01Send
  3595                           
  3596                           ;nrf24l01.c: 81: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3597  05B0  30A0               	movlw	160
  3598  05B1                     u1157:	
  3599  05B1  3200               	nop2
  3600  05B2  0B89               	decfsz	9,f
  3601  05B3  2DB1               	goto	u1157
  3602  05B4  0008               	return
  3603  05B5                     __end_of_nrf24l01SetTransmitMode:	
  3604                           
  3605                           	psect	text13
  3606  05E2                     __ptext13:	
  3607 ;; *************** function __itoa *****************
  3608 ;; Defined at:
  3609 ;;		line 51 in file "interface.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;  buffer          1    wreg     PTR unsigned char 
  3612 ;;		 -> string(16), 
  3613 ;;  number          2   24[BANK0 ] unsigned int 
  3614 ;;  base            1   26[BANK0 ] unsigned char 
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;  buffer          1   29[BANK0 ] PTR unsigned char 
  3617 ;;		 -> string(16), 
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMMON   BANK0   BANK1
  3627 ;;      Params:         0       3       0
  3628 ;;      Locals:         0       1       0
  3629 ;;      Temps:          0       2       0
  3630 ;;      Totals:         0       6       0
  3631 ;;Total ram usage:        6 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    7
  3634 ;; This function calls:
  3635 ;;		_itoa
  3636 ;; This function is called by:
  3637 ;;		_loop
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           
  3642                           ;psect for function __itoa
  3643  05E2                     __itoa:	
  3644                           
  3645                           ;incstack = 0
  3646                           ; Regs used in __itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3647                           ;__itoa@buffer stored from wreg
  3648  05E2  0020               	movlb	0	; select bank0
  3649  05E3  00BD               	movwf	__itoa@buffer
  3650                           
  3651                           ;interface.c: 52: itoa(buffer, number, base);
  3652  05E4  0839               	movf	__itoa@number+1,w
  3653  05E5  00B2               	movwf	itoa@val+1
  3654  05E6  0838               	movf	__itoa@number,w
  3655  05E7  00B1               	movwf	itoa@val
  3656  05E8  083A               	movf	__itoa@base,w
  3657  05E9  00BB               	movwf	??__itoa
  3658  05EA  01BC               	clrf	??__itoa+1
  3659  05EB  083B               	movf	??__itoa,w
  3660  05EC  00B3               	movwf	itoa@base
  3661  05ED  083C               	movf	??__itoa+1,w
  3662  05EE  00B4               	movwf	itoa@base+1
  3663  05EF  083D               	movf	__itoa@buffer,w
  3664  05F0  253F               	fcall	_itoa
  3665  05F1  0008               	return
  3666  05F2                     __end_of__itoa:	
  3667                           
  3668                           	psect	text14
  3669  053F                     __ptext14:	
  3670 ;; *************** function _itoa *****************
  3671 ;; Defined at:
  3672 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;  buf             1    wreg     PTR unsigned char 
  3675 ;;		 -> string(16), 
  3676 ;;  val             2   17[BANK0 ] int 
  3677 ;;  base            2   19[BANK0 ] int 
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;  buf             1   23[BANK0 ] PTR unsigned char 
  3680 ;;		 -> string(16), 
  3681 ;;  cp              1   22[BANK0 ] PTR unsigned char 
  3682 ;;		 -> string(16), 
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      PTR unsigned char 
  3685 ;; Registers used:
  3686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMMON   BANK0   BANK1
  3692 ;;      Params:         0       4       0
  3693 ;;      Locals:         0       2       0
  3694 ;;      Temps:          0       1       0
  3695 ;;      Totals:         0       7       0
  3696 ;;Total ram usage:        7 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:    6
  3699 ;; This function calls:
  3700 ;;		_utoa
  3701 ;; This function is called by:
  3702 ;;		__itoa
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           
  3707                           ;psect for function _itoa
  3708  053F                     _itoa:	
  3709                           
  3710                           ;incstack = 0
  3711                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3712                           ;itoa@buf stored from wreg
  3713  053F  0020               	movlb	0	; select bank0
  3714  0540  00B7               	movwf	itoa@buf
  3715  0541  0837               	movf	itoa@buf,w
  3716  0542  00B5               	movwf	??_itoa
  3717  0543  0835               	movf	??_itoa,w
  3718  0544  00B6               	movwf	itoa@cp
  3719  0545  1FB2               	btfss	itoa@val+1,7
  3720  0546  2D57               	goto	l1471
  3721  0547  302D               	movlw	45
  3722  0548  00B5               	movwf	??_itoa
  3723  0549  0837               	movf	itoa@buf,w
  3724  054A  0086               	movwf	6
  3725  054B  0187               	clrf	7
  3726  054C  0835               	movf	??_itoa,w
  3727  054D  0081               	movwf	1
  3728  054E  3001               	movlw	1
  3729  054F  00B5               	movwf	??_itoa
  3730  0550  0835               	movf	??_itoa,w
  3731  0551  07B7               	addwf	itoa@buf,f
  3732  0552  09B1               	comf	itoa@val,f
  3733  0553  09B2               	comf	itoa@val+1,f
  3734  0554  0AB1               	incf	itoa@val,f
  3735  0555  1903               	skipnz
  3736  0556  0AB2               	incf	itoa@val+1,f
  3737  0557                     l1471:	
  3738  0557  0832               	movf	itoa@val+1,w
  3739  0558  00A9               	movwf	utoa@val+1
  3740  0559  0831               	movf	itoa@val,w
  3741  055A  00A8               	movwf	utoa@val
  3742  055B  0834               	movf	itoa@base+1,w
  3743  055C  00AB               	movwf	utoa@base+1
  3744  055D  0833               	movf	itoa@base,w
  3745  055E  00AA               	movwf	utoa@base
  3746  055F  0837               	movf	itoa@buf,w
  3747  0560  22EE               	fcall	_utoa
  3748  0561  0008               	return
  3749  0562                     __end_of_itoa:	
  3750                           ;	Return value of _itoa is never used
  3751                           
  3752                           
  3753                           	psect	text15
  3754  02EE                     __ptext15:	
  3755 ;; *************** function _utoa *****************
  3756 ;; Defined at:
  3757 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  buf             1    wreg     PTR unsigned char 
  3760 ;;		 -> string(16), 
  3761 ;;  val             2    8[BANK0 ] unsigned int 
  3762 ;;  base            2   10[BANK0 ] int 
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  3765 ;;		 -> string(16), 
  3766 ;;  v               2   13[BANK0 ] unsigned int 
  3767 ;;  c               1   15[BANK0 ] unsigned char 
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  1    wreg      PTR unsigned char 
  3770 ;; Registers used:
  3771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMMON   BANK0   BANK1
  3777 ;;      Params:         0       4       0
  3778 ;;      Locals:         0       4       0
  3779 ;;      Temps:          0       1       0
  3780 ;;      Totals:         0       9       0
  3781 ;;Total ram usage:        9 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:    5
  3784 ;; This function calls:
  3785 ;;		___lwdiv
  3786 ;;		___lwmod
  3787 ;; This function is called by:
  3788 ;;		_itoa
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           
  3793                           ;psect for function _utoa
  3794  02EE                     _utoa:	
  3795                           
  3796                           ;incstack = 0
  3797                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3798                           ;utoa@buf stored from wreg
  3799  02EE  0020               	movlb	0	; select bank0
  3800  02EF  00B0               	movwf	utoa@buf
  3801  02F0  0829               	movf	utoa@val+1,w
  3802  02F1  00AE               	movwf	utoa@v+1
  3803  02F2  0828               	movf	utoa@val,w
  3804  02F3  00AD               	movwf	utoa@v
  3805  02F4                     l1391:	
  3806  02F4  082B               	movf	utoa@base+1,w
  3807  02F5  00A1               	movwf	___lwdiv@divisor+1
  3808  02F6  082A               	movf	utoa@base,w
  3809  02F7  00A0               	movwf	___lwdiv@divisor
  3810  02F8  082E               	movf	utoa@v+1,w
  3811  02F9  00A3               	movwf	___lwdiv@dividend+1
  3812  02FA  082D               	movf	utoa@v,w
  3813  02FB  00A2               	movwf	___lwdiv@dividend
  3814  02FC  2428               	fcall	___lwdiv
  3815  02FD  0020               	movlb	0	; select bank0
  3816  02FE  0821               	movf	?___lwdiv+1,w
  3817  02FF  00AE               	movwf	utoa@v+1
  3818  0300  0820               	movf	?___lwdiv,w
  3819  0301  00AD               	movwf	utoa@v
  3820  0302  3001               	movlw	1
  3821  0303  00AC               	movwf	??_utoa
  3822  0304  082C               	movf	??_utoa,w
  3823  0305  07B0               	addwf	utoa@buf,f
  3824  0306  082D               	movf	utoa@v,w
  3825  0307  042E               	iorwf	utoa@v+1,w
  3826  0308  1D03               	btfss	3,2
  3827  0309  2AF4               	goto	l1391
  3828  030A  0830               	movf	utoa@buf,w
  3829  030B  0086               	movwf	6
  3830  030C  0187               	clrf	7
  3831  030D  0181               	clrf	1
  3832  030E  3001               	movlw	1
  3833  030F  02B0               	subwf	utoa@buf,f
  3834  0310                     l1401:	
  3835  0310  082B               	movf	utoa@base+1,w
  3836  0311  00A1               	movwf	___lwmod@divisor+1
  3837  0312  082A               	movf	utoa@base,w
  3838  0313  00A0               	movwf	___lwmod@divisor
  3839  0314  0829               	movf	utoa@val+1,w
  3840  0315  00A3               	movwf	___lwmod@dividend+1
  3841  0316  0828               	movf	utoa@val,w
  3842  0317  00A2               	movwf	___lwmod@dividend
  3843  0318  24ED               	fcall	___lwmod
  3844  0319  0020               	movlb	0	; select bank0
  3845  031A  0820               	movf	?___lwmod,w
  3846  031B  00AC               	movwf	??_utoa
  3847  031C  082C               	movf	??_utoa,w
  3848  031D  00AF               	movwf	utoa@c
  3849  031E  082B               	movf	utoa@base+1,w
  3850  031F  00A1               	movwf	___lwdiv@divisor+1
  3851  0320  082A               	movf	utoa@base,w
  3852  0321  00A0               	movwf	___lwdiv@divisor
  3853  0322  0829               	movf	utoa@val+1,w
  3854  0323  00A3               	movwf	___lwdiv@dividend+1
  3855  0324  0828               	movf	utoa@val,w
  3856  0325  00A2               	movwf	___lwdiv@dividend
  3857  0326  2428               	fcall	___lwdiv
  3858  0327  0020               	movlb	0	; select bank0
  3859  0328  0821               	movf	?___lwdiv+1,w
  3860  0329  00A9               	movwf	utoa@val+1
  3861  032A  0820               	movf	?___lwdiv,w
  3862  032B  00A8               	movwf	utoa@val
  3863  032C  300A               	movlw	10
  3864  032D  022F               	subwf	utoa@c,w
  3865  032E  1C03               	skipc
  3866  032F  2B34               	goto	l528
  3867  0330  3007               	movlw	7
  3868  0331  00AC               	movwf	??_utoa
  3869  0332  082C               	movf	??_utoa,w
  3870  0333  07AF               	addwf	utoa@c,f
  3871  0334                     l528:	
  3872  0334  3030               	movlw	48
  3873  0335  00AC               	movwf	??_utoa
  3874  0336  082C               	movf	??_utoa,w
  3875  0337  07AF               	addwf	utoa@c,f
  3876  0338  082F               	movf	utoa@c,w
  3877  0339  00AC               	movwf	??_utoa
  3878  033A  0830               	movf	utoa@buf,w
  3879  033B  0086               	movwf	6
  3880  033C  0187               	clrf	7
  3881  033D  082C               	movf	??_utoa,w
  3882  033E  0081               	movwf	1
  3883  033F  3001               	movlw	1
  3884  0340  02B0               	subwf	utoa@buf,f
  3885  0341  0828               	movf	utoa@val,w
  3886  0342  0429               	iorwf	utoa@val+1,w
  3887  0343  1D03               	btfss	3,2
  3888  0344  2B10               	goto	l1401
  3889                           
  3890                           ;	Return value of _utoa is never used
  3891  0345  3001               	movlw	1
  3892  0346  00AC               	movwf	??_utoa
  3893  0347  082C               	movf	??_utoa,w
  3894  0348  07B0               	addwf	utoa@buf,f
  3895  0349  0008               	return
  3896  034A                     __end_of_utoa:	
  3897                           
  3898                           	psect	text16
  3899  04ED                     __ptext16:	
  3900 ;; *************** function ___lwmod *****************
  3901 ;; Defined at:
  3902 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;  divisor         2    0[BANK0 ] unsigned int 
  3905 ;;  dividend        2    2[BANK0 ] unsigned int 
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;  counter         1    5[BANK0 ] unsigned char 
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  2    0[BANK0 ] unsigned int 
  3910 ;; Registers used:
  3911 ;;		wreg, status,2, status,0
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMMON   BANK0   BANK1
  3917 ;;      Params:         0       4       0
  3918 ;;      Locals:         0       1       0
  3919 ;;      Temps:          0       1       0
  3920 ;;      Totals:         0       6       0
  3921 ;;Total ram usage:        6 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    4
  3924 ;; This function calls:
  3925 ;;		Nothing
  3926 ;; This function is called by:
  3927 ;;		_utoa
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           
  3932                           ;psect for function ___lwmod
  3933  04ED                     ___lwmod:	
  3934                           
  3935                           ;incstack = 0
  3936                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3937  04ED  0020               	movlb	0	; select bank0
  3938  04EE  0820               	movf	___lwmod@divisor,w
  3939  04EF  0421               	iorwf	___lwmod@divisor+1,w
  3940  04F0  1903               	btfsc	3,2
  3941  04F1  2D15               	goto	l1385
  3942  04F2  01A5               	clrf	___lwmod@counter
  3943  04F3  0AA5               	incf	___lwmod@counter,f
  3944  04F4                     l1375:	
  3945  04F4  1BA1               	btfsc	___lwmod@divisor+1,7
  3946  04F5  2D00               	goto	l1377
  3947  04F6  3001               	movlw	1
  3948  04F7                     u615:	
  3949  04F7  35A0               	lslf	___lwmod@divisor,f
  3950  04F8  0DA1               	rlf	___lwmod@divisor+1,f
  3951  04F9  0B89               	decfsz	9,f
  3952  04FA  2CF7               	goto	u615
  3953  04FB  3001               	movlw	1
  3954  04FC  00A4               	movwf	??___lwmod
  3955  04FD  0824               	movf	??___lwmod,w
  3956  04FE  07A5               	addwf	___lwmod@counter,f
  3957  04FF  2CF4               	goto	l1375
  3958  0500                     l1377:	
  3959  0500  0821               	movf	___lwmod@divisor+1,w
  3960  0501  0223               	subwf	___lwmod@dividend+1,w
  3961  0502  1D03               	skipz
  3962  0503  2D06               	goto	u635
  3963  0504  0820               	movf	___lwmod@divisor,w
  3964  0505  0222               	subwf	___lwmod@dividend,w
  3965  0506                     u635:	
  3966  0506  1C03               	skipc
  3967  0507  2D0C               	goto	l1381
  3968  0508  0820               	movf	___lwmod@divisor,w
  3969  0509  02A2               	subwf	___lwmod@dividend,f
  3970  050A  0821               	movf	___lwmod@divisor+1,w
  3971  050B  3BA3               	subwfb	___lwmod@dividend+1,f
  3972  050C                     l1381:	
  3973  050C  3001               	movlw	1
  3974  050D                     u645:	
  3975  050D  36A1               	lsrf	___lwmod@divisor+1,f
  3976  050E  0CA0               	rrf	___lwmod@divisor,f
  3977  050F  0B89               	decfsz	9,f
  3978  0510  2D0D               	goto	u645
  3979  0511  3001               	movlw	1
  3980  0512  02A5               	subwf	___lwmod@counter,f
  3981  0513  1D03               	btfss	3,2
  3982  0514  2D00               	goto	l1377
  3983  0515                     l1385:	
  3984  0515  0823               	movf	___lwmod@dividend+1,w
  3985  0516  00A1               	movwf	?___lwmod+1
  3986  0517  0822               	movf	___lwmod@dividend,w
  3987  0518  00A0               	movwf	?___lwmod
  3988  0519  0008               	return
  3989  051A                     __end_of___lwmod:	
  3990                           
  3991                           	psect	text17
  3992  0428                     __ptext17:	
  3993 ;; *************** function ___lwdiv *****************
  3994 ;; Defined at:
  3995 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;  divisor         2    0[BANK0 ] unsigned int 
  3998 ;;  dividend        2    2[BANK0 ] unsigned int 
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;  quotient        2    5[BANK0 ] unsigned int 
  4001 ;;  counter         1    7[BANK0 ] unsigned char 
  4002 ;; Return value:  Size  Location     Type
  4003 ;;                  2    0[BANK0 ] unsigned int 
  4004 ;; Registers used:
  4005 ;;		wreg, status,2, status,0
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMMON   BANK0   BANK1
  4011 ;;      Params:         0       4       0
  4012 ;;      Locals:         0       3       0
  4013 ;;      Temps:          0       1       0
  4014 ;;      Totals:         0       8       0
  4015 ;;Total ram usage:        8 bytes
  4016 ;; Hardware stack levels used:    1
  4017 ;; Hardware stack levels required when called:    4
  4018 ;; This function calls:
  4019 ;;		Nothing
  4020 ;; This function is called by:
  4021 ;;		_utoa
  4022 ;; This function uses a non-reentrant model
  4023 ;;
  4024                           
  4025                           
  4026                           ;psect for function ___lwdiv
  4027  0428                     ___lwdiv:	
  4028                           
  4029                           ;incstack = 0
  4030                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4031  0428  0020               	movlb	0	; select bank0
  4032  0429  01A5               	clrf	___lwdiv@quotient
  4033  042A  01A6               	clrf	___lwdiv@quotient+1
  4034  042B  0820               	movf	___lwdiv@divisor,w
  4035  042C  0421               	iorwf	___lwdiv@divisor+1,w
  4036  042D  1903               	btfsc	3,2
  4037  042E  2C58               	goto	l1363
  4038  042F  01A7               	clrf	___lwdiv@counter
  4039  0430  0AA7               	incf	___lwdiv@counter,f
  4040  0431                     l1351:	
  4041  0431  1BA1               	btfsc	___lwdiv@divisor+1,7
  4042  0432  2C3D               	goto	l1353
  4043  0433  3001               	movlw	1
  4044  0434                     u545:	
  4045  0434  35A0               	lslf	___lwdiv@divisor,f
  4046  0435  0DA1               	rlf	___lwdiv@divisor+1,f
  4047  0436  0B89               	decfsz	9,f
  4048  0437  2C34               	goto	u545
  4049  0438  3001               	movlw	1
  4050  0439  00A4               	movwf	??___lwdiv
  4051  043A  0824               	movf	??___lwdiv,w
  4052  043B  07A7               	addwf	___lwdiv@counter,f
  4053  043C  2C31               	goto	l1351
  4054  043D                     l1353:	
  4055  043D  3001               	movlw	1
  4056  043E                     u565:	
  4057  043E  35A5               	lslf	___lwdiv@quotient,f
  4058  043F  0DA6               	rlf	___lwdiv@quotient+1,f
  4059  0440  0B89               	decfsz	9,f
  4060  0441  2C3E               	goto	u565
  4061  0442  0821               	movf	___lwdiv@divisor+1,w
  4062  0443  0223               	subwf	___lwdiv@dividend+1,w
  4063  0444  1D03               	skipz
  4064  0445  2C48               	goto	u575
  4065  0446  0820               	movf	___lwdiv@divisor,w
  4066  0447  0222               	subwf	___lwdiv@dividend,w
  4067  0448                     u575:	
  4068  0448  1C03               	skipc
  4069  0449  2C4F               	goto	l1359
  4070  044A  0820               	movf	___lwdiv@divisor,w
  4071  044B  02A2               	subwf	___lwdiv@dividend,f
  4072  044C  0821               	movf	___lwdiv@divisor+1,w
  4073  044D  3BA3               	subwfb	___lwdiv@dividend+1,f
  4074  044E  1425               	bsf	___lwdiv@quotient,0
  4075  044F                     l1359:	
  4076  044F  3001               	movlw	1
  4077  0450                     u585:	
  4078  0450  36A1               	lsrf	___lwdiv@divisor+1,f
  4079  0451  0CA0               	rrf	___lwdiv@divisor,f
  4080  0452  0B89               	decfsz	9,f
  4081  0453  2C50               	goto	u585
  4082  0454  3001               	movlw	1
  4083  0455  02A7               	subwf	___lwdiv@counter,f
  4084  0456  1D03               	btfss	3,2
  4085  0457  2C3D               	goto	l1353
  4086  0458                     l1363:	
  4087  0458  0826               	movf	___lwdiv@quotient+1,w
  4088  0459  00A1               	movwf	?___lwdiv+1
  4089  045A  0825               	movf	___lwdiv@quotient,w
  4090  045B  00A0               	movwf	?___lwdiv
  4091  045C  0008               	return
  4092  045D                     __end_of___lwdiv:	
  4093                           
  4094                           	psect	text18
  4095  048F                     __ptext18:	
  4096 ;; *************** function ___lmul *****************
  4097 ;; Defined at:
  4098 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4101 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;  product         4    8[BANK0 ] unsigned long 
  4104 ;; Return value:  Size  Location     Type
  4105 ;;                  4    0[BANK0 ] unsigned long 
  4106 ;; Registers used:
  4107 ;;		wreg, status,2, status,0
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMMON   BANK0   BANK1
  4113 ;;      Params:         0       8       0
  4114 ;;      Locals:         0       4       0
  4115 ;;      Temps:          0       0       0
  4116 ;;      Totals:         0      12       0
  4117 ;;Total ram usage:       12 bytes
  4118 ;; Hardware stack levels used:    1
  4119 ;; Hardware stack levels required when called:    4
  4120 ;; This function calls:
  4121 ;;		Nothing
  4122 ;; This function is called by:
  4123 ;;		_loop
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           
  4128                           ;psect for function ___lmul
  4129  048F                     ___lmul:	
  4130                           
  4131                           ;incstack = 0
  4132                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4133  048F  3000               	movlw	0
  4134  0490  0020               	movlb	0	; select bank0
  4135  0491  00AB               	movwf	___lmul@product+3
  4136  0492  3000               	movlw	0
  4137  0493  00AA               	movwf	___lmul@product+2
  4138  0494  3000               	movlw	0
  4139  0495  00A9               	movwf	___lmul@product+1
  4140  0496  3000               	movlw	0
  4141  0497  00A8               	movwf	___lmul@product
  4142  0498                     l1685:	
  4143  0498  1C20               	btfss	___lmul@multiplier,0
  4144  0499  2CA2               	goto	l1689
  4145  049A  0824               	movf	___lmul@multiplicand,w
  4146  049B  07A8               	addwf	___lmul@product,f
  4147  049C  0825               	movf	___lmul@multiplicand+1,w
  4148  049D  3DA9               	addwfc	___lmul@product+1,f
  4149  049E  0826               	movf	___lmul@multiplicand+2,w
  4150  049F  3DAA               	addwfc	___lmul@product+2,f
  4151  04A0  0827               	movf	___lmul@multiplicand+3,w
  4152  04A1  3DAB               	addwfc	___lmul@product+3,f
  4153  04A2                     l1689:	
  4154  04A2  3001               	movlw	1
  4155  04A3                     u795:	
  4156  04A3  35A4               	lslf	___lmul@multiplicand,f
  4157  04A4  0DA5               	rlf	___lmul@multiplicand+1,f
  4158  04A5  0DA6               	rlf	___lmul@multiplicand+2,f
  4159  04A6  0DA7               	rlf	___lmul@multiplicand+3,f
  4160  04A7  0B89               	decfsz	9,f
  4161  04A8  2CA3               	goto	u795
  4162  04A9  3001               	movlw	1
  4163  04AA                     u805:	
  4164  04AA  36A3               	lsrf	___lmul@multiplier+3,f
  4165  04AB  0CA2               	rrf	___lmul@multiplier+2,f
  4166  04AC  0CA1               	rrf	___lmul@multiplier+1,f
  4167  04AD  0CA0               	rrf	___lmul@multiplier,f
  4168  04AE  0B89               	decfsz	9,f
  4169  04AF  2CAA               	goto	u805
  4170  04B0  0823               	movf	___lmul@multiplier+3,w
  4171  04B1  0422               	iorwf	___lmul@multiplier+2,w
  4172  04B2  0421               	iorwf	___lmul@multiplier+1,w
  4173  04B3  0420               	iorwf	___lmul@multiplier,w
  4174  04B4  1D03               	skipz
  4175  04B5  2C98               	goto	l1685
  4176  04B6  082B               	movf	___lmul@product+3,w
  4177  04B7  00A3               	movwf	?___lmul+3
  4178  04B8  082A               	movf	___lmul@product+2,w
  4179  04B9  00A2               	movwf	?___lmul+2
  4180  04BA  0829               	movf	___lmul@product+1,w
  4181  04BB  00A1               	movwf	?___lmul+1
  4182  04BC  0828               	movf	___lmul@product,w
  4183  04BD  00A0               	movwf	?___lmul
  4184  04BE  0008               	return
  4185  04BF                     __end_of___lmul:	
  4186                           
  4187                           	psect	text19
  4188  034A                     __ptext19:	
  4189 ;; *************** function ___lldiv *****************
  4190 ;; Defined at:
  4191 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;  divisor         4    0[BANK0 ] unsigned long 
  4194 ;;  dividend        4    4[BANK0 ] unsigned long 
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;  quotient        4    9[BANK0 ] unsigned long 
  4197 ;;  counter         1   13[BANK0 ] unsigned char 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  4    0[BANK0 ] unsigned long 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMMON   BANK0   BANK1
  4207 ;;      Params:         0       8       0
  4208 ;;      Locals:         0       5       0
  4209 ;;      Temps:          0       1       0
  4210 ;;      Totals:         0      14       0
  4211 ;;Total ram usage:       14 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    4
  4214 ;; This function calls:
  4215 ;;		Nothing
  4216 ;; This function is called by:
  4217 ;;		_loop
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           
  4222                           ;psect for function ___lldiv
  4223  034A                     ___lldiv:	
  4224                           
  4225                           ;incstack = 0
  4226                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4227  034A  3000               	movlw	0
  4228  034B  0020               	movlb	0	; select bank0
  4229  034C  00AC               	movwf	___lldiv@quotient+3
  4230  034D  3000               	movlw	0
  4231  034E  00AB               	movwf	___lldiv@quotient+2
  4232  034F  3000               	movlw	0
  4233  0350  00AA               	movwf	___lldiv@quotient+1
  4234  0351  3000               	movlw	0
  4235  0352  00A9               	movwf	___lldiv@quotient
  4236  0353  0823               	movf	___lldiv@divisor+3,w
  4237  0354  0422               	iorwf	___lldiv@divisor+2,w
  4238  0355  0421               	iorwf	___lldiv@divisor+1,w
  4239  0356  0420               	iorwf	___lldiv@divisor,w
  4240  0357  1903               	skipnz
  4241  0358  2B94               	goto	l1717
  4242  0359  01AD               	clrf	___lldiv@counter
  4243  035A  0AAD               	incf	___lldiv@counter,f
  4244  035B                     l1703:	
  4245  035B  1BA3               	btfsc	___lldiv@divisor+3,7
  4246  035C  2B69               	goto	l1705
  4247  035D  3001               	movlw	1
  4248  035E                     u835:	
  4249  035E  35A0               	lslf	___lldiv@divisor,f
  4250  035F  0DA1               	rlf	___lldiv@divisor+1,f
  4251  0360  0DA2               	rlf	___lldiv@divisor+2,f
  4252  0361  0DA3               	rlf	___lldiv@divisor+3,f
  4253  0362  0B89               	decfsz	9,f
  4254  0363  2B5E               	goto	u835
  4255  0364  3001               	movlw	1
  4256  0365  00A8               	movwf	??___lldiv
  4257  0366  0828               	movf	??___lldiv,w
  4258  0367  07AD               	addwf	___lldiv@counter,f
  4259  0368  2B5B               	goto	l1703
  4260  0369                     l1705:	
  4261  0369  3001               	movlw	1
  4262  036A                     u855:	
  4263  036A  35A9               	lslf	___lldiv@quotient,f
  4264  036B  0DAA               	rlf	___lldiv@quotient+1,f
  4265  036C  0DAB               	rlf	___lldiv@quotient+2,f
  4266  036D  0DAC               	rlf	___lldiv@quotient+3,f
  4267  036E  0B89               	decfsz	9,f
  4268  036F  2B6A               	goto	u855
  4269  0370  0823               	movf	___lldiv@divisor+3,w
  4270  0371  0227               	subwf	___lldiv@dividend+3,w
  4271  0372  1D03               	skipz
  4272  0373  2B7E               	goto	u865
  4273  0374  0822               	movf	___lldiv@divisor+2,w
  4274  0375  0226               	subwf	___lldiv@dividend+2,w
  4275  0376  1D03               	skipz
  4276  0377  2B7E               	goto	u865
  4277  0378  0821               	movf	___lldiv@divisor+1,w
  4278  0379  0225               	subwf	___lldiv@dividend+1,w
  4279  037A  1D03               	skipz
  4280  037B  2B7E               	goto	u865
  4281  037C  0820               	movf	___lldiv@divisor,w
  4282  037D  0224               	subwf	___lldiv@dividend,w
  4283  037E                     u865:	
  4284  037E  1C03               	skipc
  4285  037F  2B89               	goto	l1713
  4286  0380  0820               	movf	___lldiv@divisor,w
  4287  0381  02A4               	subwf	___lldiv@dividend,f
  4288  0382  0821               	movf	___lldiv@divisor+1,w
  4289  0383  3BA5               	subwfb	___lldiv@dividend+1,f
  4290  0384  0822               	movf	___lldiv@divisor+2,w
  4291  0385  3BA6               	subwfb	___lldiv@dividend+2,f
  4292  0386  0823               	movf	___lldiv@divisor+3,w
  4293  0387  3BA7               	subwfb	___lldiv@dividend+3,f
  4294  0388  1429               	bsf	___lldiv@quotient,0
  4295  0389                     l1713:	
  4296  0389  3001               	movlw	1
  4297  038A                     u875:	
  4298  038A  36A3               	lsrf	___lldiv@divisor+3,f
  4299  038B  0CA2               	rrf	___lldiv@divisor+2,f
  4300  038C  0CA1               	rrf	___lldiv@divisor+1,f
  4301  038D  0CA0               	rrf	___lldiv@divisor,f
  4302  038E  0B89               	decfsz	9,f
  4303  038F  2B8A               	goto	u875
  4304  0390  3001               	movlw	1
  4305  0391  02AD               	subwf	___lldiv@counter,f
  4306  0392  1D03               	btfss	3,2
  4307  0393  2B69               	goto	l1705
  4308  0394                     l1717:	
  4309  0394  082C               	movf	___lldiv@quotient+3,w
  4310  0395  00A3               	movwf	?___lldiv+3
  4311  0396  082B               	movf	___lldiv@quotient+2,w
  4312  0397  00A2               	movwf	?___lldiv+2
  4313  0398  082A               	movf	___lldiv@quotient+1,w
  4314  0399  00A1               	movwf	?___lldiv+1
  4315  039A  0829               	movf	___lldiv@quotient,w
  4316  039B  00A0               	movwf	?___lldiv
  4317  039C  0008               	return
  4318  039D                     __end_of___lldiv:	
  4319                           
  4320                           	psect	intentry
  4321  0004                     __pintentry:	
  4322 ;; *************** function _ISR *****************
  4323 ;; Defined at:
  4324 ;;		line 29 in file "main.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;		None
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;  result          2   10[COMMON] int 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  1    wreg      void 
  4331 ;; Registers used:
  4332 ;;		wreg, status,2, status,0, pclath, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMMON   BANK0   BANK1
  4338 ;;      Params:         0       0       0
  4339 ;;      Locals:         2       0       0
  4340 ;;      Temps:          4       0       0
  4341 ;;      Totals:         6       0       0
  4342 ;;Total ram usage:        6 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    3
  4345 ;; This function calls:
  4346 ;;		_nrf24l01ISR
  4347 ;; This function is called by:
  4348 ;;		Interrupt level 1
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352  0004                     _ISR:	
  4353                           
  4354                           ;incstack = 0
  4355  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4356                           
  4357                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  4358  0005  3180               	pagesel	$
  4359  0006  0020               	movlb	0	; select bank0
  4360  0007  087F               	movf	127,w
  4361  0008  00F9               	movwf	??_ISR+3
  4362                           
  4363                           ;main.c: 30: if (PIR1bits.ADIF){
  4364  0009  1F11               	btfss	17,6	;volatile
  4365  000A  2839               	goto	i1l1899
  4366                           
  4367                           ;main.c: 32: if (mode == 2) {
  4368  000B  3002               	movlw	2
  4369  000C  067D               	xorwf	_mode,w
  4370  000D  1D03               	btfss	3,2
  4371  000E  2837               	goto	i1l1897
  4372                           
  4373                           ;main.c: 34: int result = 0x00;
  4374  000F  01FA               	clrf	ISR@result
  4375  0010  01FB               	clrf	ISR@result+1
  4376                           
  4377                           ;main.c: 35: result = ADRESL;
  4378  0011  0021               	movlb	1	; select bank1
  4379  0012  081B               	movf	27,w	;volatile
  4380  0013  00F6               	movwf	??_ISR
  4381  0014  01F7               	clrf	??_ISR+1
  4382  0015  0876               	movf	??_ISR,w
  4383  0016  00FA               	movwf	ISR@result
  4384  0017  0877               	movf	??_ISR+1,w
  4385  0018  00FB               	movwf	ISR@result+1
  4386                           
  4387                           ;main.c: 36: result|= (ADRESH << 8);
  4388  0019  081C               	movf	28,w	;volatile
  4389  001A  00F6               	movwf	??_ISR
  4390  001B  01F7               	clrf	??_ISR+1
  4391  001C  0876               	movf	??_ISR,w
  4392  001D  00F7               	movwf	??_ISR+1
  4393  001E  01F6               	clrf	??_ISR
  4394  001F  0876               	movf	??_ISR,w
  4395  0020  04FA               	iorwf	ISR@result,f
  4396  0021  0877               	movf	??_ISR+1,w
  4397  0022  04FB               	iorwf	ISR@result+1,f
  4398                           
  4399                           ;main.c: 38: adcSum+= (unsigned) result;
  4400  0023  087A               	movf	ISR@result,w
  4401  0024  0020               	movlb	0	; select bank0
  4402  0025  07C5               	addwf	_adcSum,f
  4403  0026  087B               	movf	ISR@result+1,w
  4404  0027  3DC6               	addwfc	_adcSum+1,f
  4405  0028  3000               	movlw	0
  4406  0029  3DC7               	addwfc	_adcSum+2,f
  4407  002A  3DC8               	addwfc	_adcSum+3,f
  4408                           
  4409                           ;main.c: 40: if (!adcLoop){
  4410  002B  087C               	movf	_adcLoop,w
  4411  002C  1D03               	btfss	3,2
  4412  002D  2833               	goto	i1l151
  4413                           
  4414                           ;main.c: 41: mode = 3;
  4415  002E  3003               	movlw	3
  4416  002F  00F6               	movwf	??_ISR
  4417  0030  0876               	movf	??_ISR,w
  4418  0031  00FD               	movwf	_mode
  4419                           
  4420                           ;main.c: 42: }else{
  4421  0032  2835               	goto	i1l1895
  4422  0033                     i1l151:	
  4423                           
  4424                           ;main.c: 44: ADCON0bits.ADGO = 1;
  4425  0033  0021               	movlb	1	; select bank1
  4426  0034  149D               	bsf	29,1	;volatile
  4427  0035                     i1l1895:	
  4428                           
  4429                           ;main.c: 45: }
  4430                           ;main.c: 47: adcLoop--;
  4431  0035  3001               	movlw	1
  4432  0036  02FC               	subwf	_adcLoop,f
  4433  0037                     i1l1897:	
  4434                           
  4435                           ;main.c: 48: }
  4436                           ;main.c: 51: PIR1bits.ADIF = 0;
  4437  0037  0020               	movlb	0	; select bank0
  4438  0038  1311               	bcf	17,6	;volatile
  4439  0039                     i1l1899:	
  4440                           
  4441                           ;main.c: 52: }
  4442                           ;main.c: 54: if (INTCONbits.INTF){
  4443  0039  1C8B               	btfss	11,1	;volatile
  4444  003A  283D               	goto	i1l154
  4445                           
  4446                           ;main.c: 55: nrf24l01ISR();
  4447  003B  25B5               	fcall	_nrf24l01ISR
  4448                           
  4449                           ;main.c: 56: INTCONbits.INTF = 0;
  4450  003C  108B               	bcf	11,1	;volatile
  4451  003D                     i1l154:	
  4452  003D  0879               	movf	??_ISR+3,w
  4453  003E  0020               	movlb	0	; select bank0
  4454  003F  00FF               	movwf	127
  4455  0040  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4456  0041  0009               	retfie
  4457  0042                     __end_of_ISR:	
  4458                           
  4459                           	psect	text21
  4460  05B5                     __ptext21:	
  4461 ;; *************** function _nrf24l01ISR *****************
  4462 ;; Defined at:
  4463 ;;		line 54 in file "nrf24l01.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;		None
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;  status          1    5[COMMON] struct .
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  1    wreg      void 
  4470 ;; Registers used:
  4471 ;;		wreg, status,2, status,0, pclath, cstack
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMMON   BANK0   BANK1
  4477 ;;      Params:         0       0       0
  4478 ;;      Locals:         1       0       0
  4479 ;;      Temps:          1       0       0
  4480 ;;      Totals:         2       0       0
  4481 ;;Total ram usage:        2 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    2
  4484 ;; This function calls:
  4485 ;;		_nrf24l01Send
  4486 ;; This function is called by:
  4487 ;;		_ISR
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           
  4492                           ;psect for function _nrf24l01ISR
  4493  05B5                     _nrf24l01ISR:	
  4494                           
  4495                           ;nrf24l01.c: 56: n_STATUS_t status;
  4496                           ;nrf24l01.c: 57: status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  4497                           
  4498                           ;incstack = 0
  4499                           ; Regs used in _nrf24l01ISR: [wreg+status,2+status,0+pclath+cstack]
  4500  05B5  01F1               	clrf	nrf24l01Send@data
  4501  05B6  3007               	movlw	7
  4502  05B7  2600               	fcall	_nrf24l01Send
  4503  05B8  00F4               	movwf	??_nrf24l01ISR
  4504  05B9  0874               	movf	??_nrf24l01ISR,w
  4505  05BA  00F5               	movwf	nrf24l01ISR@status
  4506                           
  4507                           ;nrf24l01.c: 59: if (status.TX_DS){
  4508  05BB  1EF5               	btfss	nrf24l01ISR@status,5
  4509  05BC  2DC3               	goto	i1l1785
  4510                           
  4511                           ;nrf24l01.c: 60: nrf24l01Send(0b00100000 | 0x07, status.byte);
  4512  05BD  0875               	movf	nrf24l01ISR@status,w
  4513  05BE  00F4               	movwf	??_nrf24l01ISR
  4514  05BF  0874               	movf	??_nrf24l01ISR,w
  4515  05C0  00F1               	movwf	nrf24l01Send@data
  4516  05C1  3027               	movlw	39
  4517  05C2  2600               	fcall	_nrf24l01Send
  4518  05C3                     i1l1785:	
  4519                           
  4520                           ;nrf24l01.c: 61: }
  4521                           ;nrf24l01.c: 63: if (status.RX_DR){
  4522  05C3  1F75               	btfss	nrf24l01ISR@status,6
  4523  05C4  0008               	return
  4524                           
  4525                           ;nrf24l01.c: 65: nrf24l01Send(0b00100000 | 0x07, status.byte);
  4526  05C5  0875               	movf	nrf24l01ISR@status,w
  4527  05C6  00F4               	movwf	??_nrf24l01ISR
  4528  05C7  0874               	movf	??_nrf24l01ISR,w
  4529  05C8  00F1               	movwf	nrf24l01Send@data
  4530  05C9  3027               	movlw	39
  4531  05CA  2600               	fcall	_nrf24l01Send
  4532  05CB  0008               	return
  4533  05CC                     __end_of_nrf24l01ISR:	
  4534                           
  4535                           	psect	text22
  4536  0600                     __ptext22:	
  4537 ;; *************** function _nrf24l01Send *****************
  4538 ;; Defined at:
  4539 ;;		line 10 in file "nrf24l01.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  command         1    wreg     unsigned char 
  4542 ;;  data            1    1[COMMON] unsigned char 
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;  command         1    3[COMMON] unsigned char 
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  1    wreg      unsigned char 
  4547 ;; Registers used:
  4548 ;;		wreg, status,2, status,0, pclath, cstack
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMMON   BANK0   BANK1
  4554 ;;      Params:         0       0       0
  4555 ;;      Locals:         0       0       0
  4556 ;;      Temps:          0       0       0
  4557 ;;      Totals:         0       0       0
  4558 ;;Total ram usage:        0 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; Hardware stack levels required when called:    5
  4561 ;; This function calls:
  4562 ;;		_nrf24l01SPIEnd
  4563 ;;		_nrf24l01SPISend
  4564 ;;		_nrf24l01SPIStart
  4565 ;; This function is called by:
  4566 ;;		_nrf24l01ISR
  4567 ;;		_nrf24l01SetTransmitMode
  4568 ;;		_nrf24l01SetRecieveMode
  4569 ;;		_nrf24l01InitRegisters
  4570 ;;		_nrf24l01HandleRX
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           
  4575                           ;psect for function _nrf24l01Send
  4576  0600                     _nrf24l01Send:	
  4577                           
  4578                           ;incstack = 0
  4579                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  4580                           ;nrf24l01Send@command stored from wreg
  4581  0600  00F3               	movwf	nrf24l01Send@command
  4582                           
  4583                           ;nrf24l01.c: 12: nrf24l01SPIStart();
  4584  0601  2626               	fcall	_nrf24l01SPIStart
  4585                           
  4586                           ;nrf24l01.c: 14: nrf24l01SPISend(command);
  4587  0602  0873               	movf	nrf24l01Send@command,w
  4588  0603  260C               	fcall	_nrf24l01SPISend
  4589                           
  4590                           ;nrf24l01.c: 15: data = nrf24l01SPISend(data);
  4591  0604  0871               	movf	nrf24l01Send@data,w
  4592  0605  260C               	fcall	_nrf24l01SPISend
  4593  0606  00F2               	movwf	??_nrf24l01Send
  4594  0607  0872               	movf	??_nrf24l01Send,w
  4595  0608  00F1               	movwf	nrf24l01Send@data
  4596                           
  4597                           ;nrf24l01.c: 17: nrf24l01SPIEnd();
  4598  0609  262D               	fcall	_nrf24l01SPIEnd
  4599                           
  4600                           ;nrf24l01.c: 19: return data;
  4601  060A  0871               	movf	nrf24l01Send@data,w
  4602  060B  0008               	return
  4603  060C                     __end_of_nrf24l01Send:	
  4604                           
  4605                           	psect	text23
  4606  0626                     __ptext23:	
  4607 ;; *************** function _nrf24l01SPIStart *****************
  4608 ;; Defined at:
  4609 ;;		line 39 in file "interface.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;		None
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;		None
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      void 
  4616 ;; Registers used:
  4617 ;;		wreg
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMMON   BANK0   BANK1
  4623 ;;      Params:         0       0       0
  4624 ;;      Locals:         0       0       0
  4625 ;;      Temps:          0       0       0
  4626 ;;      Totals:         0       0       0
  4627 ;;Total ram usage:        0 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    4
  4630 ;; This function calls:
  4631 ;;		Nothing
  4632 ;; This function is called by:
  4633 ;;		_nrf24l01Send
  4634 ;;		_nrf24l01SendString
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           
  4639                           ;psect for function _nrf24l01SPIStart
  4640  0626                     _nrf24l01SPIStart:	
  4641                           
  4642                           ;interface.c: 40: PORTAbits.RA1 = 0;
  4643                           
  4644                           ;incstack = 0
  4645                           ; Regs used in _nrf24l01SPIStart: [wreg]
  4646  0626  0020               	movlb	0	; select bank0
  4647  0627  108C               	bcf	12,1	;volatile
  4648                           
  4649                           ;interface.c: 41: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4650  0628  300D               	movlw	13
  4651  0629                     u116_27:	
  4652  0629  0B89               	decfsz	9,f
  4653  062A  2E29               	goto	u116_27
  4654  062B  0000               	nop
  4655  062C  0008               	return
  4656  062D                     __end_of_nrf24l01SPIStart:	
  4657                           
  4658                           	psect	text24
  4659  060C                     __ptext24:	
  4660 ;; *************** function _nrf24l01SPISend *****************
  4661 ;; Defined at:
  4662 ;;		line 28 in file "interface.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;  data            1    wreg     unsigned char 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;  data            1    0[COMMON] unsigned char 
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  1    wreg      unsigned char 
  4669 ;; Registers used:
  4670 ;;		wreg
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMMON   BANK0   BANK1
  4676 ;;      Params:         0       0       0
  4677 ;;      Locals:         0       0       0
  4678 ;;      Temps:          0       0       0
  4679 ;;      Totals:         0       0       0
  4680 ;;Total ram usage:        0 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    4
  4683 ;; This function calls:
  4684 ;;		Nothing
  4685 ;; This function is called by:
  4686 ;;		_nrf24l01Send
  4687 ;;		_nrf24l01SendString
  4688 ;;		_nrf24l01HandleRX
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           
  4693                           ;psect for function _nrf24l01SPISend
  4694  060C                     _nrf24l01SPISend:	
  4695                           
  4696                           ;incstack = 0
  4697                           ; Regs used in _nrf24l01SPISend: [wreg]
  4698                           ;nrf24l01SPISend@data stored from wreg
  4699  060C  00F0               	movwf	nrf24l01SPISend@data
  4700                           
  4701                           ;interface.c: 29: SSP1BUF = data;
  4702  060D  0870               	movf	nrf24l01SPISend@data,w
  4703  060E  0024               	movlb	4	; select bank4
  4704  060F  0091               	movwf	17	;volatile
  4705  0610                     i1l52:	
  4706                           ;interface.c: 31: while (!SSP1STATbits.BF){
  4707                           
  4708  0610  0024               	movlb	4	; select bank4
  4709  0611  1814               	btfsc	20,0	;volatile
  4710  0612  2E15               	goto	i1l1449
  4711                           
  4712                           ;interface.c: 32: __nop();
  4713  0613  0000               	nop
  4714  0614  2E10               	goto	i1l52
  4715  0615                     i1l1449:	
  4716                           
  4717                           ;interface.c: 33: }
  4718                           ;interface.c: 35: return SSP1BUF;
  4719  0615  0811               	movf	17,w	;volatile
  4720  0616  0008               	return
  4721  0617                     __end_of_nrf24l01SPISend:	
  4722                           
  4723                           	psect	text25
  4724  062D                     __ptext25:	
  4725 ;; *************** function _nrf24l01SPIEnd *****************
  4726 ;; Defined at:
  4727 ;;		line 45 in file "interface.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;		None
  4730 ;; Auto vars:     Size  Location     Type
  4731 ;;		None
  4732 ;; Return value:  Size  Location     Type
  4733 ;;                  1    wreg      void 
  4734 ;; Registers used:
  4735 ;;		wreg
  4736 ;; Tracked objects:
  4737 ;;		On entry : 0/0
  4738 ;;		On exit  : 0/0
  4739 ;;		Unchanged: 0/0
  4740 ;; Data sizes:     COMMON   BANK0   BANK1
  4741 ;;      Params:         0       0       0
  4742 ;;      Locals:         0       0       0
  4743 ;;      Temps:          0       0       0
  4744 ;;      Totals:         0       0       0
  4745 ;;Total ram usage:        0 bytes
  4746 ;; Hardware stack levels used:    1
  4747 ;; Hardware stack levels required when called:    4
  4748 ;; This function calls:
  4749 ;;		Nothing
  4750 ;; This function is called by:
  4751 ;;		_nrf24l01Send
  4752 ;;		_nrf24l01SendString
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           
  4757                           ;psect for function _nrf24l01SPIEnd
  4758  062D                     _nrf24l01SPIEnd:	
  4759                           
  4760                           ;interface.c: 46: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4761                           
  4762                           ;incstack = 0
  4763                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  4764  062D  300D               	movlw	13
  4765  062E                     u117_27:	
  4766  062E  0B89               	decfsz	9,f
  4767  062F  2E2E               	goto	u117_27
  4768  0630  0000               	nop
  4769                           
  4770                           ;interface.c: 47: PORTAbits.RA1 = 1;
  4771  0631  0020               	movlb	0	; select bank0
  4772  0632  148C               	bsf	12,1	;volatile
  4773  0633  0008               	return
  4774  0634                     __end_of_nrf24l01SPIEnd:	
  4775  007E                     btemp	set	126	;btemp
  4776  007E                     int$flags	set	126
  4777  007E                     wtemp0	set	126


Data Sizes:
    Strings     20
    Constant    6
    Data        2
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     37      60
    BANK1            32      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[2]), STR_3(CODE[5]), STR_2(CODE[8]), STR_1(CODE[7]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    nrf24l01SendString@string	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    _itoa@buffer	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _loop->__itoa
    _strcpy->_strlen
    _nrf24l01SendString->_read_flashmem
    __itoa->_itoa
    _itoa->_utoa
    _utoa->___lwdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   10881
                                             34 BANK0      3     3      0
                               _loop
                       _nrf24l01Init
                      _read_flashmem
                     _write_flashmem
 ---------------------------------------------------------------------------------
 (1) _write_flashmem                                       6     2      4     283
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1795
                                             10 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               10    10      0    1795
                                              0 BANK0     10    10      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 4     4      0    8408
                                             30 BANK0      4     4      0
                            ___lldiv
                             ___lmul
                              __itoa
                 _nrf24l01SendString
             _nrf24l01SetRecieveMode
                      _read_flashmem
                           _startADC
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     270
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               5     3      2     451
                                              8 BANK0      5     3      2
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _startADC                                             2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRecieveMode                               2     2      0    1607
                                              0 BANK0      2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendString                                   6     6      0    2226
                                              9 BANK0      6     6      0
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
            _nrf24l01SetTransmitMode
                      _read_flashmem
 ---------------------------------------------------------------------------------
 (1) _read_flashmem                                        9     7      2     348
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetTransmitMode                              2     2      0    1607
                                              0 BANK0      2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1561
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      22
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __itoa                                                6     3      3    2184
                                             24 BANK0      6     3      3
                               _itoa
                      _read_flashmem (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 7     3      4    1486
                                             17 BANK0      7     3      4
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     5      4    1165
                                              8 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     287
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     476
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     802
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  6     6      0    1675
                                              6 COMMON     6     6      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          2     2      0    1650
                                              4 COMMON     2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1561
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      22
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___lldiv
     ___lmul
     __itoa
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _read_flashmem (ARG)
       _strlen (ARG)
     _nrf24l01SendString
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetTransmitMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _read_flashmem
     _nrf24l01SetRecieveMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _read_flashmem
     _startADC
     _strcpy
       _strlen (ARG)
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _read_flashmem
   _write_flashmem

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     25      3C       6       75.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      4A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jun 06 13:55:40 2018

                     __CFG_CP$OFF 0000               nrf24l01Send@command 0073   __size_of_nrf24l01SetRecieveMode 001D  
                     __CFG_LVP$ON 0000                               l164 006D                               l181 01FB  
                             l167 0093                               l186 02DF                               l528 0334  
                             _ISR 0004                               u615 04F7                               u545 0434  
                             u635 0506                               u805 04AA                               u565 043E  
                             u645 050D                               u575 0448                               u920 0060  
                             u585 0450                               u835 035E                               u934 0062  
                             u855 036A                               u865 037E                               u875 038A  
                             u795 04A3                      __CFG_BORV$LO 0000                               wreg 0009  
                            ?_ISR 0070                    ??_nrf24l01Init 002A                              l1401 0310  
                            l1351 0431                              l1353 043D                              l1505 04E5  
                            l1363 0458                              l1531 0585                              l1381 050C  
                            l1703 035B                              l1359 044F                              l1375 04F4  
                            l1391 02F4                              l1471 0557                              l1713 0389  
                            l1705 0369                              l1377 0500                              l1385 0515  
                            l1537 0520                              l1563 03BF                              l1547 03A5  
                            l1539 052B                              l1717 0394                              l1565 03D6  
                            l1557 03BD                              l1831 00C6                              l1807 006F  
                            l1817 009B                    ??_nrf24l01Send 0072                              l1843 00DE  
                            l1835 00CE                              l1827 00BE                              l1685 0498  
                            l1853 0173                              l1845 0101                              l1847 0124  
                            l1839 00D6                              l1689 04A2                              l1849 0147  
                            l1857 018F                              l1793 0056                              l1859 01A0  
                            l1869 01DE                              l1981 02EC                              STR_1 061F  
                    __CFG_WDTE$ON 0000                              STR_2 0617                              STR_3 063F  
                            STR_4 061D                              u1107 0565                              u1117 057B  
                            u1127 03DA                              u1137 03E5                              u1057 0296  
                            u1147 059D                              u1067 05D3                              u1157 05B1  
                            u1077 05DC                              u1087 0203                              u1097 04E2  
                            i1l52 0610    __size_of_nrf24l01InterfaceInit 000E                      __CFG_WRT$OFF 0000  
   __end_of_nrf24l01InterfaceInit 0600                     __p_NVMEM_text 07E0                              _main 0286  
                            _mode 007D                              _itoa 053F                              _loop 0051  
                            fsr0h 0005                              fsr1h 0007                              indf0 0000  
                            fsr0l 0004                              indf1 0001                              fsr1l 0006  
                            btemp 007E                              _utoa 02EE                              start 0042  
        ?_nrf24l01SetTransmitMode 0070                     __CFG_MCLRE$ON 0000                             ??_ISR 0076  
             nrf24l01SendString@i 002E       __size_of_nrf24l01SendString 004F                             ?_main 0070  
                           ?_itoa 0031                             ?_loop 0070                   __end_of___lldiv 039D  
                           ?_utoa 0028                   __end_of___lwdiv 045D                             i1l151 0033  
                           i1l154 003D                   __end_of___lwmod 051A                             _NVMEM 07E0  
             ___lmul@multiplicand 0024                     __CFG_PWRTE$ON 0000                             __itoa 05E2  
                  __CFG_BOREN$OFF 0000            _nrf24l01SetRecieveMode 0562                             utoa@c 002F  
                           utoa@v 002D                             status 0003                             wtemp0 007E  
                _nrf24l01SPIStart 0626                   __initialization 0043                      __end_of_main 02EE  
                    __end_of_itoa 0562                      __end_of_loop 01FC                      __end_of_utoa 034A  
                  __CFG_LPBOR$OFF 0000                            ??_main 0042                            ??_itoa 0035  
                          ??_loop 003E                            ??_utoa 002C                  ??_write_flashmem 0024  
                ??_nrf24l01SPIEnd 0070                     main@bootCount 0043          __size_of_nrf24l01SPISend 000B  
                          ?__itoa 0038                            _ADRESH 009C                            _ADRESL 009B  
                          _ANSELA 018C                            _ANSELC 018E                            i1l1449 0615  
                          i1l1785 05C3                            i1l1895 0035                            i1l1897 0037  
                          i1l1899 0039                            u116_27 0629                            u117_27 062E  
                          _PMADRH 0192                            _PMADRL 0191                            _PMDATH 0194  
                          _PMDATL 0193                            _PMCON1 0195                            _PMCON2 0196  
            __size_of_nrf24l01ISR 0017                            _adcSum 0045                            ___lmul 048F  
                  __CFG_STVREN$ON 0000                         ??___lldiv 0028                         ??___lwdiv 0024  
                       ??___lwmod 0024              __end_of_nrf24l01Init 05E2              __end_of_nrf24l01Send 060C  
           _nrf24l01InitRegisters 01FC                            _strcpy 057F                            _string 004B  
                          _strlen 051A              write_flashmem@offset 0020                            itoa@cp 0036  
                    __pdataCOMMON 007D                  __end_of_startADC 04ED            __size_of_read_flashmem 0032  
         __end_of__initialization 004E                      __itoa@buffer 003D                     __end_of_NVMEM 0800  
                    __itoa@number 0038                    __pcstackCOMMON 0070                      __pidataBANK0 0645  
                   __end_of__itoa 05F2     nrf24l01InitRegisters@enRXAddr 0027                    _OPTION_REGbits 0095  
                         ??__itoa 003B                        __pbssBANK0 0045                        __itoa@base 003A  
               ??_nrf24l01SPISend 0070                         ISR@result 007A                     _read_flashmem 045D  
                      __pmaintext 0286                           ?___lmul 0020            ?_nrf24l01InitRegisters 0070  
                      __pintentry 0004               nrf24l01SPISend@data 0070                    ___lmul@product 0028  
                         ?_strcpy 0028                           ?_strlen 0020             __end_of_n_ADDRESS_MUL 0647  
__size_of_nrf24l01SetTransmitMode 001B          __end_of_nrf24l01SPIStart 062D                           _SSP1BUF 0211  
         ?_nrf24l01SetRecieveMode 0070          nrf24l01SendString@string 002D             _nrf24l01InterfaceInit 05F2  
                  ?_read_flashmem 0020             __size_of_nrf24l01Init 0016             __size_of_nrf24l01Send 000C  
      __end_of_nrf24l01SendString 03EC                   __size_of___lmul 0030                           _adcLoop 007C  
                       ?_startADC 0070                           ___lldiv 034A                           ___lwdiv 0428  
                         ___lwmod 04ED                           __ptext1 03EC                           __ptext2 05CC  
                         __ptext3 05F2                           __ptext4 01FC                           __ptext5 0051  
                         __ptext6 051A                           __ptext7 057F                           __ptext8 04BF  
                         __ptext9 0562                   __size_of_strcpy 001B                   __size_of_strlen 0025  
                    __size_of_ISR 003E                           _counter 0049    __end_of_nrf24l01SetRecieveMode 057F  
           write_flashmem@address 0024                           clrloop0 0635              end_of_initialization 004E  
                    _nrf24l01Init 05CC                      _nrf24l01Send 0600                           itoa@buf 0037  
                         itoa@val 0031                   ___lldiv@divisor 0020                   ___lldiv@counter 002D  
                      ??_startADC 0020                           utoa@buf 0030                           utoa@val 0028  
                         strlen@s 0027                         _PORTAbits 000C                  __CFG_FOSC$INTOSC 0000  
                       _TRISAbits 008C                         _TRISCbits 008E                  nrf24l01Send@data 0071  
                   ??_nrf24l01ISR 0074            ?_nrf24l01InterfaceInit 0070                   ??_read_flashmem 0022  
                  __end_of___lmul 04BF     nrf24l01SetTransmitMode@config 0021                     __pidataCOMMON 0644  
         _nrf24l01SetTransmitMode 059A                write_flashmem@data 0022                    __end_of_strcpy 059A  
                  __end_of_strlen 053F               start_initialization 0043                   _nrf24l01SPISend 060C  
                     __end_of_ISR 0042           __size_of_write_flashmem 003C           __size_of_nrf24l01SPIEnd 0007  
          nrf24l01SendString@btye 002C           ??_nrf24l01InitRegisters 0020                          ??___lmul 0028  
             __end_of_nrf24l01ISR 05CC                       __pdataBANK0 005B                          ??_strcpy 002A  
                        ??_strlen 0022                       __pbssCOMMON 007C                         ___latbits 0000  
                   __pcstackBANK0 0020                 ?_nrf24l01SPIStart 0070                ??_nrf24l01SPIStart 0070  
                ___lwdiv@dividend 0022                          ?___lldiv 0020                          ?___lwdiv 0020  
       ??_nrf24l01SetTransmitMode 0020                          ?___lwmod 0020              __end_of_n_ADDRESS_P0 063F  
         __end_of_nrf24l01SPISend 0617                     _NVMEM_absaddr 07E0                 __size_of_startADC 002E  
       nrf24l01InitRegisters@enAA 0028                _nrf24l01SendString 039D                  ___lwdiv@quotient 0025  
                  __size_of__itoa 0010               ?_nrf24l01SendString 0070                       _nrf24l01ISR 05B5  
                       clear_ram0 0634                          _PIE1bits 0091                          _PIR1bits 0011  
            ??_nrf24l01SendString 0029                        _ADCON0bits 009D                        _ADCON1bits 009E  
                        _WPUAbits 020C   __end_of_nrf24l01SetTransmitMode 05B5                 ___lmul@multiplier 0020  
         ??_nrf24l01InterfaceInit 0020                 nrf24l01ISR@status 0075                    _write_flashmem 03EC  
                  _nrf24l01SPIEnd 062D                   startADC@channel 0021              read_flashmem@address 0027  
                __size_of___lldiv 0053                  __size_of___lwdiv 0035                  __size_of___lwmod 002D  
                ?_nrf24l01SPISend 0070                        _ANSELAbits 018C                        _ANSELCbits 018E  
                   _n_ADDRESS_MUL 0646                   ___lwdiv@divisor 0020                   ___lwdiv@counter 0027  
                        __ptext10 039D                          __ptext11 045D                          __ptext12 059A  
                        __ptext21 05B5                          __ptext13 05E2                          __ptext22 0600  
                        __ptext14 053F                          __ptext23 0626                          __ptext15 02EE  
                        __ptext24 060C                          __ptext16 04ED            __end_of_write_flashmem 0428  
                        __ptext25 062D                          __ptext17 0428                          __ptext18 048F  
                        __ptext19 034A            __end_of_nrf24l01SPIEnd 0634                        strcpy@from 0028  
                   __size_of_main 0068                     __size_of_itoa 0023                     __size_of_loop 01AB  
    nrf24l01InitRegisters@channel 0021                     __size_of_utoa 005C      nrf24l01InitRegisters@feature 0023  
                        _nextMode 005B             __end_of_read_flashmem 048F      nrf24l01InitRegisters@rfSetup 0024  
  __size_of_nrf24l01InitRegisters 008A     __end_of_nrf24l01InitRegisters 0286                          int$flags 007E  
                        _startADC 04BF      nrf24l01InitRegisters@setupAW 0022                      _SSP1STATbits 0214  
        ??_nrf24l01SetRecieveMode 0020                        _INTCONbits 000B                        _FVRCONbits 0117  
                        itoa@base 0033                   ?_write_flashmem 0020                   ?_nrf24l01SPIEnd 0070  
                        intlevel1 0000               read_flashmem@offset 0020                      _n_ADDRESS_P0 063A  
             read_flashmem@result 0025                        _PMCON1bits 0195                  ___lwmod@dividend 0022  
                ___lldiv@dividend 0024                 __CFG_CLKOUTEN$OFF 0000       nrf24l01InitRegisters@config 0025  
                      _OSCCONbits 0099         __size_of_nrf24l01SPIStart 0007      nrf24l01SetRecieveMode@config 0021  
     nrf24l01InitRegisters@status 0026                     __pstringtext1 063A                     __pstringtext2 0646  
                   __pstringtext3 0617                     __pstringtext4 061F                     __pstringtext5 063F  
                   __pstringtext6 0000                          utoa@base 002A        nrf24l01InitRegisters@DynPD 0029  
                ___lldiv@quotient 0029                   ___lwmod@divisor 0020                          strcpy@cp 002B  
                        strlen@cp 0026                          strcpy@to 002C                   ___lwmod@counter 0025  
                     _SSPCON1bits 0215                        _WDTCONbits 0097                     ?_nrf24l01Init 0070  
                   ?_nrf24l01Send 0071                        _STATUSbits 0003                      ?_nrf24l01ISR 0070  
