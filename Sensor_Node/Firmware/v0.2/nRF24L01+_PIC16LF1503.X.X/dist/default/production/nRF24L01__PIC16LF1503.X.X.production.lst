

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jun 13 18:03:06 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	_NVMEM_text,global,class=CODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	dabs	1,0x7E,2
    50  0000                     
    51                           ; Version 1.45
    52                           ; Generated 16/11/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC16LF1503 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  0007                     	;# 
    93  0008                     	;# 
    94  0009                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000E                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  008C                     	;# 
   112  008E                     	;# 
   113  0091                     	;# 
   114  0092                     	;# 
   115  0093                     	;# 
   116  0095                     	;# 
   117  0096                     	;# 
   118  0097                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009B                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  009F                     	;# 
   127  010C                     	;# 
   128  010E                     	;# 
   129  0111                     	;# 
   130  0112                     	;# 
   131  0113                     	;# 
   132  0114                     	;# 
   133  0115                     	;# 
   134  0116                     	;# 
   135  0117                     	;# 
   136  0118                     	;# 
   137  0119                     	;# 
   138  011D                     	;# 
   139  018C                     	;# 
   140  018E                     	;# 
   141  0191                     	;# 
   142  0191                     	;# 
   143  0192                     	;# 
   144  0193                     	;# 
   145  0193                     	;# 
   146  0194                     	;# 
   147  0195                     	;# 
   148  0196                     	;# 
   149  020C                     	;# 
   150  0211                     	;# 
   151  0211                     	;# 
   152  0212                     	;# 
   153  0212                     	;# 
   154  0213                     	;# 
   155  0213                     	;# 
   156  0214                     	;# 
   157  0214                     	;# 
   158  0215                     	;# 
   159  0215                     	;# 
   160  0215                     	;# 
   161  0216                     	;# 
   162  0216                     	;# 
   163  0217                     	;# 
   164  0217                     	;# 
   165  0391                     	;# 
   166  0392                     	;# 
   167  0393                     	;# 
   168  0498                     	;# 
   169  0498                     	;# 
   170  0499                     	;# 
   171  049A                     	;# 
   172  049B                     	;# 
   173  049B                     	;# 
   174  049C                     	;# 
   175  049D                     	;# 
   176  049E                     	;# 
   177  049F                     	;# 
   178  0611                     	;# 
   179  0612                     	;# 
   180  0613                     	;# 
   181  0613                     	;# 
   182  0614                     	;# 
   183  0615                     	;# 
   184  0616                     	;# 
   185  0616                     	;# 
   186  0617                     	;# 
   187  0618                     	;# 
   188  0619                     	;# 
   189  0619                     	;# 
   190  061A                     	;# 
   191  061B                     	;# 
   192  061C                     	;# 
   193  061C                     	;# 
   194  0691                     	;# 
   195  0692                     	;# 
   196  0693                     	;# 
   197  0694                     	;# 
   198  0695                     	;# 
   199  0F0F                     	;# 
   200  0F10                     	;# 
   201  0F11                     	;# 
   202  0F12                     	;# 
   203  0F13                     	;# 
   204  0F14                     	;# 
   205  0F15                     	;# 
   206  0F16                     	;# 
   207  0F17                     	;# 
   208  0F18                     	;# 
   209  0F19                     	;# 
   210  0F1A                     	;# 
   211  0F1B                     	;# 
   212  0F1C                     	;# 
   213  0F1D                     	;# 
   214  0F1E                     	;# 
   215  0F1F                     	;# 
   216  0FE3                     	;# 
   217  0FE4                     	;# 
   218  0FE5                     	;# 
   219  0FE6                     	;# 
   220  0FE7                     	;# 
   221  0FE8                     	;# 
   222  0FE9                     	;# 
   223  0FEA                     	;# 
   224  0FEB                     	;# 
   225  0FED                     	;# 
   226  0FEE                     	;# 
   227  0FEF                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000E                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0016                     	;# 
   248  0017                     	;# 
   249  0018                     	;# 
   250  0019                     	;# 
   251  001A                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  008C                     	;# 
   255  008E                     	;# 
   256  0091                     	;# 
   257  0092                     	;# 
   258  0093                     	;# 
   259  0095                     	;# 
   260  0096                     	;# 
   261  0097                     	;# 
   262  0099                     	;# 
   263  009A                     	;# 
   264  009B                     	;# 
   265  009B                     	;# 
   266  009C                     	;# 
   267  009D                     	;# 
   268  009E                     	;# 
   269  009F                     	;# 
   270  010C                     	;# 
   271  010E                     	;# 
   272  0111                     	;# 
   273  0112                     	;# 
   274  0113                     	;# 
   275  0114                     	;# 
   276  0115                     	;# 
   277  0116                     	;# 
   278  0117                     	;# 
   279  0118                     	;# 
   280  0119                     	;# 
   281  011D                     	;# 
   282  018C                     	;# 
   283  018E                     	;# 
   284  0191                     	;# 
   285  0191                     	;# 
   286  0192                     	;# 
   287  0193                     	;# 
   288  0193                     	;# 
   289  0194                     	;# 
   290  0195                     	;# 
   291  0196                     	;# 
   292  020C                     	;# 
   293  0211                     	;# 
   294  0211                     	;# 
   295  0212                     	;# 
   296  0212                     	;# 
   297  0213                     	;# 
   298  0213                     	;# 
   299  0214                     	;# 
   300  0214                     	;# 
   301  0215                     	;# 
   302  0215                     	;# 
   303  0215                     	;# 
   304  0216                     	;# 
   305  0216                     	;# 
   306  0217                     	;# 
   307  0217                     	;# 
   308  0391                     	;# 
   309  0392                     	;# 
   310  0393                     	;# 
   311  0498                     	;# 
   312  0498                     	;# 
   313  0499                     	;# 
   314  049A                     	;# 
   315  049B                     	;# 
   316  049B                     	;# 
   317  049C                     	;# 
   318  049D                     	;# 
   319  049E                     	;# 
   320  049F                     	;# 
   321  0611                     	;# 
   322  0612                     	;# 
   323  0613                     	;# 
   324  0613                     	;# 
   325  0614                     	;# 
   326  0615                     	;# 
   327  0616                     	;# 
   328  0616                     	;# 
   329  0617                     	;# 
   330  0618                     	;# 
   331  0619                     	;# 
   332  0619                     	;# 
   333  061A                     	;# 
   334  061B                     	;# 
   335  061C                     	;# 
   336  061C                     	;# 
   337  0691                     	;# 
   338  0692                     	;# 
   339  0693                     	;# 
   340  0694                     	;# 
   341  0695                     	;# 
   342  0F0F                     	;# 
   343  0F10                     	;# 
   344  0F11                     	;# 
   345  0F12                     	;# 
   346  0F13                     	;# 
   347  0F14                     	;# 
   348  0F15                     	;# 
   349  0F16                     	;# 
   350  0F17                     	;# 
   351  0F18                     	;# 
   352  0F19                     	;# 
   353  0F1A                     	;# 
   354  0F1B                     	;# 
   355  0F1C                     	;# 
   356  0F1D                     	;# 
   357  0F1E                     	;# 
   358  0F1F                     	;# 
   359  0FE3                     	;# 
   360  0FE4                     	;# 
   361  0FE5                     	;# 
   362  0FE6                     	;# 
   363  0FE7                     	;# 
   364  0FE8                     	;# 
   365  0FE9                     	;# 
   366  0FEA                     	;# 
   367  0FEB                     	;# 
   368  0FED                     	;# 
   369  0FEE                     	;# 
   370  0FEF                     	;# 
   371  0000                     	;# 
   372  0001                     	;# 
   373  0002                     	;# 
   374  0003                     	;# 
   375  0004                     	;# 
   376  0005                     	;# 
   377  0006                     	;# 
   378  0007                     	;# 
   379  0008                     	;# 
   380  0009                     	;# 
   381  000A                     	;# 
   382  000B                     	;# 
   383  000C                     	;# 
   384  000E                     	;# 
   385  0011                     	;# 
   386  0012                     	;# 
   387  0013                     	;# 
   388  0015                     	;# 
   389  0016                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001C                     	;# 
   397  008C                     	;# 
   398  008E                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0093                     	;# 
   402  0095                     	;# 
   403  0096                     	;# 
   404  0097                     	;# 
   405  0099                     	;# 
   406  009A                     	;# 
   407  009B                     	;# 
   408  009B                     	;# 
   409  009C                     	;# 
   410  009D                     	;# 
   411  009E                     	;# 
   412  009F                     	;# 
   413  010C                     	;# 
   414  010E                     	;# 
   415  0111                     	;# 
   416  0112                     	;# 
   417  0113                     	;# 
   418  0114                     	;# 
   419  0115                     	;# 
   420  0116                     	;# 
   421  0117                     	;# 
   422  0118                     	;# 
   423  0119                     	;# 
   424  011D                     	;# 
   425  018C                     	;# 
   426  018E                     	;# 
   427  0191                     	;# 
   428  0191                     	;# 
   429  0192                     	;# 
   430  0193                     	;# 
   431  0193                     	;# 
   432  0194                     	;# 
   433  0195                     	;# 
   434  0196                     	;# 
   435  020C                     	;# 
   436  0211                     	;# 
   437  0211                     	;# 
   438  0212                     	;# 
   439  0212                     	;# 
   440  0213                     	;# 
   441  0213                     	;# 
   442  0214                     	;# 
   443  0214                     	;# 
   444  0215                     	;# 
   445  0215                     	;# 
   446  0215                     	;# 
   447  0216                     	;# 
   448  0216                     	;# 
   449  0217                     	;# 
   450  0217                     	;# 
   451  0391                     	;# 
   452  0392                     	;# 
   453  0393                     	;# 
   454  0498                     	;# 
   455  0498                     	;# 
   456  0499                     	;# 
   457  049A                     	;# 
   458  049B                     	;# 
   459  049B                     	;# 
   460  049C                     	;# 
   461  049D                     	;# 
   462  049E                     	;# 
   463  049F                     	;# 
   464  0611                     	;# 
   465  0612                     	;# 
   466  0613                     	;# 
   467  0613                     	;# 
   468  0614                     	;# 
   469  0615                     	;# 
   470  0616                     	;# 
   471  0616                     	;# 
   472  0617                     	;# 
   473  0618                     	;# 
   474  0619                     	;# 
   475  0619                     	;# 
   476  061A                     	;# 
   477  061B                     	;# 
   478  061C                     	;# 
   479  061C                     	;# 
   480  0691                     	;# 
   481  0692                     	;# 
   482  0693                     	;# 
   483  0694                     	;# 
   484  0695                     	;# 
   485  0F0F                     	;# 
   486  0F10                     	;# 
   487  0F11                     	;# 
   488  0F12                     	;# 
   489  0F13                     	;# 
   490  0F14                     	;# 
   491  0F15                     	;# 
   492  0F16                     	;# 
   493  0F17                     	;# 
   494  0F18                     	;# 
   495  0F19                     	;# 
   496  0F1A                     	;# 
   497  0F1B                     	;# 
   498  0F1C                     	;# 
   499  0F1D                     	;# 
   500  0F1E                     	;# 
   501  0F1F                     	;# 
   502  0FE3                     	;# 
   503  0FE4                     	;# 
   504  0FE5                     	;# 
   505  0FE6                     	;# 
   506  0FE7                     	;# 
   507  0FE8                     	;# 
   508  0FE9                     	;# 
   509  0FEA                     	;# 
   510  0FEB                     	;# 
   511  0FED                     	;# 
   512  0FEE                     	;# 
   513  0FEF                     	;# 
   514  0000                     	;# 
   515  0001                     	;# 
   516  0002                     	;# 
   517  0003                     	;# 
   518  0004                     	;# 
   519  0005                     	;# 
   520  0006                     	;# 
   521  0007                     	;# 
   522  0008                     	;# 
   523  0009                     	;# 
   524  000A                     	;# 
   525  000B                     	;# 
   526  000C                     	;# 
   527  000E                     	;# 
   528  0011                     	;# 
   529  0012                     	;# 
   530  0013                     	;# 
   531  0015                     	;# 
   532  0016                     	;# 
   533  0016                     	;# 
   534  0017                     	;# 
   535  0018                     	;# 
   536  0019                     	;# 
   537  001A                     	;# 
   538  001B                     	;# 
   539  001C                     	;# 
   540  008C                     	;# 
   541  008E                     	;# 
   542  0091                     	;# 
   543  0092                     	;# 
   544  0093                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0097                     	;# 
   548  0099                     	;# 
   549  009A                     	;# 
   550  009B                     	;# 
   551  009B                     	;# 
   552  009C                     	;# 
   553  009D                     	;# 
   554  009E                     	;# 
   555  009F                     	;# 
   556  010C                     	;# 
   557  010E                     	;# 
   558  0111                     	;# 
   559  0112                     	;# 
   560  0113                     	;# 
   561  0114                     	;# 
   562  0115                     	;# 
   563  0116                     	;# 
   564  0117                     	;# 
   565  0118                     	;# 
   566  0119                     	;# 
   567  011D                     	;# 
   568  018C                     	;# 
   569  018E                     	;# 
   570  0191                     	;# 
   571  0191                     	;# 
   572  0192                     	;# 
   573  0193                     	;# 
   574  0193                     	;# 
   575  0194                     	;# 
   576  0195                     	;# 
   577  0196                     	;# 
   578  020C                     	;# 
   579  0211                     	;# 
   580  0211                     	;# 
   581  0212                     	;# 
   582  0212                     	;# 
   583  0213                     	;# 
   584  0213                     	;# 
   585  0214                     	;# 
   586  0214                     	;# 
   587  0215                     	;# 
   588  0215                     	;# 
   589  0215                     	;# 
   590  0216                     	;# 
   591  0216                     	;# 
   592  0217                     	;# 
   593  0217                     	;# 
   594  0391                     	;# 
   595  0392                     	;# 
   596  0393                     	;# 
   597  0498                     	;# 
   598  0498                     	;# 
   599  0499                     	;# 
   600  049A                     	;# 
   601  049B                     	;# 
   602  049B                     	;# 
   603  049C                     	;# 
   604  049D                     	;# 
   605  049E                     	;# 
   606  049F                     	;# 
   607  0611                     	;# 
   608  0612                     	;# 
   609  0613                     	;# 
   610  0613                     	;# 
   611  0614                     	;# 
   612  0615                     	;# 
   613  0616                     	;# 
   614  0616                     	;# 
   615  0617                     	;# 
   616  0618                     	;# 
   617  0619                     	;# 
   618  0619                     	;# 
   619  061A                     	;# 
   620  061B                     	;# 
   621  061C                     	;# 
   622  061C                     	;# 
   623  0691                     	;# 
   624  0692                     	;# 
   625  0693                     	;# 
   626  0694                     	;# 
   627  0695                     	;# 
   628  0F0F                     	;# 
   629  0F10                     	;# 
   630  0F11                     	;# 
   631  0F12                     	;# 
   632  0F13                     	;# 
   633  0F14                     	;# 
   634  0F15                     	;# 
   635  0F16                     	;# 
   636  0F17                     	;# 
   637  0F18                     	;# 
   638  0F19                     	;# 
   639  0F1A                     	;# 
   640  0F1B                     	;# 
   641  0F1C                     	;# 
   642  0F1D                     	;# 
   643  0F1E                     	;# 
   644  0F1F                     	;# 
   645  0FE3                     	;# 
   646  0FE4                     	;# 
   647  0FE5                     	;# 
   648  0FE6                     	;# 
   649  0FE7                     	;# 
   650  0FE8                     	;# 
   651  0FE9                     	;# 
   652  0FEA                     	;# 
   653  0FEB                     	;# 
   654  0FED                     	;# 
   655  0FEE                     	;# 
   656  0FEF                     	;# 
   657  0000                     	;# 
   658  0001                     	;# 
   659  0002                     	;# 
   660  0003                     	;# 
   661  0004                     	;# 
   662  0005                     	;# 
   663  0006                     	;# 
   664  0007                     	;# 
   665  0008                     	;# 
   666  0009                     	;# 
   667  000A                     	;# 
   668  000B                     	;# 
   669  000C                     	;# 
   670  000E                     	;# 
   671  0011                     	;# 
   672  0012                     	;# 
   673  0013                     	;# 
   674  0015                     	;# 
   675  0016                     	;# 
   676  0016                     	;# 
   677  0017                     	;# 
   678  0018                     	;# 
   679  0019                     	;# 
   680  001A                     	;# 
   681  001B                     	;# 
   682  001C                     	;# 
   683  008C                     	;# 
   684  008E                     	;# 
   685  0091                     	;# 
   686  0092                     	;# 
   687  0093                     	;# 
   688  0095                     	;# 
   689  0096                     	;# 
   690  0097                     	;# 
   691  0099                     	;# 
   692  009A                     	;# 
   693  009B                     	;# 
   694  009B                     	;# 
   695  009C                     	;# 
   696  009D                     	;# 
   697  009E                     	;# 
   698  009F                     	;# 
   699  010C                     	;# 
   700  010E                     	;# 
   701  0111                     	;# 
   702  0112                     	;# 
   703  0113                     	;# 
   704  0114                     	;# 
   705  0115                     	;# 
   706  0116                     	;# 
   707  0117                     	;# 
   708  0118                     	;# 
   709  0119                     	;# 
   710  011D                     	;# 
   711  018C                     	;# 
   712  018E                     	;# 
   713  0191                     	;# 
   714  0191                     	;# 
   715  0192                     	;# 
   716  0193                     	;# 
   717  0193                     	;# 
   718  0194                     	;# 
   719  0195                     	;# 
   720  0196                     	;# 
   721  020C                     	;# 
   722  0211                     	;# 
   723  0211                     	;# 
   724  0212                     	;# 
   725  0212                     	;# 
   726  0213                     	;# 
   727  0213                     	;# 
   728  0214                     	;# 
   729  0214                     	;# 
   730  0215                     	;# 
   731  0215                     	;# 
   732  0215                     	;# 
   733  0216                     	;# 
   734  0216                     	;# 
   735  0217                     	;# 
   736  0217                     	;# 
   737  0391                     	;# 
   738  0392                     	;# 
   739  0393                     	;# 
   740  0498                     	;# 
   741  0498                     	;# 
   742  0499                     	;# 
   743  049A                     	;# 
   744  049B                     	;# 
   745  049B                     	;# 
   746  049C                     	;# 
   747  049D                     	;# 
   748  049E                     	;# 
   749  049F                     	;# 
   750  0611                     	;# 
   751  0612                     	;# 
   752  0613                     	;# 
   753  0613                     	;# 
   754  0614                     	;# 
   755  0615                     	;# 
   756  0616                     	;# 
   757  0616                     	;# 
   758  0617                     	;# 
   759  0618                     	;# 
   760  0619                     	;# 
   761  0619                     	;# 
   762  061A                     	;# 
   763  061B                     	;# 
   764  061C                     	;# 
   765  061C                     	;# 
   766  0691                     	;# 
   767  0692                     	;# 
   768  0693                     	;# 
   769  0694                     	;# 
   770  0695                     	;# 
   771  0F0F                     	;# 
   772  0F10                     	;# 
   773  0F11                     	;# 
   774  0F12                     	;# 
   775  0F13                     	;# 
   776  0F14                     	;# 
   777  0F15                     	;# 
   778  0F16                     	;# 
   779  0F17                     	;# 
   780  0F18                     	;# 
   781  0F19                     	;# 
   782  0F1A                     	;# 
   783  0F1B                     	;# 
   784  0F1C                     	;# 
   785  0F1D                     	;# 
   786  0F1E                     	;# 
   787  0F1F                     	;# 
   788  0FE3                     	;# 
   789  0FE4                     	;# 
   790  0FE5                     	;# 
   791  0FE6                     	;# 
   792  0FE7                     	;# 
   793  0FE8                     	;# 
   794  0FE9                     	;# 
   795  0FEA                     	;# 
   796  0FEB                     	;# 
   797  0FED                     	;# 
   798  0FEE                     	;# 
   799  0FEF                     	;# 
   800                           
   801                           	psect	idataBANK0
   802  078F                     __pidataBANK0:	
   803                           
   804                           ;initializer for _mode
   805  078F  340A               	retlw	10
   806                           
   807                           ;initializer for _nextMode
   808  0790  340A               	retlw	10
   809  07E0                     _NVMEM_absaddr	set	2016
   810                           
   811                           	psect	stringtext1
   812  0782                     __pstringtext1:	
   813  0782                     _n_ADDRESS_P0:	
   814  0782  34AD               	retlw	173
   815  0783  3487               	retlw	135
   816  0784  3466               	retlw	102
   817  0785  34BC               	retlw	188
   818  0786  34BB               	retlw	187
   819  0787                     __end_of_n_ADDRESS_P0:	
   820                           
   821                           	psect	stringtext2
   822  0791                     __pstringtext2:	
   823  0791                     _n_ADDRESS_MUL:	
   824  0791  3421               	retlw	33
   825  0792                     __end_of_n_ADDRESS_MUL:	
   826  07E0                     _NVMEM_absaddr	set	2016
   827                           
   828                           	psect	_NVMEM_text
   829  07E0                     __p_NVMEM_text:	
   830  07E0                     _NVMEM:	
   831  07E0  3455               	retlw	85
   832  07E1  346E               	retlw	110
   833  07E2  3463               	retlw	99
   834  07E3  346F               	retlw	111
   835  07E4  346E               	retlw	110
   836  07E5  3466               	retlw	102
   837  07E6  3469               	retlw	105
   838  07E7  3467               	retlw	103
   839  07E8  3475               	retlw	117
   840  07E9  3472               	retlw	114
   841  07EA  3465               	retlw	101
   842  07EB  3464               	retlw	100
   843  07EC  3431               	retlw	49
   844  07ED  3400               	retlw	0
   845  07EE  3400               	retlw	0
   846  07EF  3400               	retlw	0
   847  07F0  3400               	retlw	0
   848  07F1  3400               	retlw	0
   849  07F2  3400               	retlw	0
   850  07F3  3400               	retlw	0
   851  07F4  3400               	retlw	0
   852  07F5  3400               	retlw	0
   853  07F6  3400               	retlw	0
   854  07F7  3400               	retlw	0
   855  07F8  3400               	retlw	0
   856  07F9  3400               	retlw	0
   857  07FA  3400               	retlw	0
   858  07FB  3400               	retlw	0
   859  07FC  3400               	retlw	0
   860  07FD  3400               	retlw	0
   861  07FE  3400               	retlw	0
   862  07FF  3400               	retlw	0
   863  0800                     __end_of_NVMEM:	
   864  0003                     _STATUSbits	set	3
   865  0011                     _PIR1bits	set	17
   866  000C                     _PORTAbits	set	12
   867  000B                     _INTCONbits	set	11
   868  0097                     _WDTCONbits	set	151
   869  0091                     _PIE1bits	set	145
   870  009E                     _ADCON1bits	set	158
   871  0095                     _OPTION_REGbits	set	149
   872  0099                     _OSCCONbits	set	153
   873  009D                     _ADCON0bits	set	157
   874  009C                     _ADRESH	set	156
   875  009B                     _ADRESL	set	155
   876  008E                     _TRISCbits	set	142
   877  008C                     _TRISAbits	set	140
   878  0117                     _FVRCONbits	set	279
   879  018E                     _ANSELCbits	set	398
   880  018C                     _ANSELAbits	set	396
   881  018E                     _ANSELC	set	398
   882  018C                     _ANSELA	set	396
   883  0194                     _PMDATH	set	404
   884  0193                     _PMDATL	set	403
   885  0196                     _PMCON2	set	406
   886  0195                     _PMCON1bits	set	405
   887  0192                     _PMADRH	set	402
   888  0191                     _PMADRL	set	401
   889  0195                     _PMCON1	set	405
   890  020C                     _WPUAbits	set	524
   891  0211                     _SSP1BUF	set	529
   892  0214                     _SSP1STATbits	set	532
   893  0215                     _SSPCON1bits	set	533
   894                           
   895                           	psect	stringtext3
   896  075F                     __pstringtext3:	
   897  075F                     STR_2:	
   898  075F  342F               	retlw	47	;'/'
   899  0760  3443               	retlw	67	;'C'
   900  0761  344F               	retlw	79	;'O'
   901  0762  3455               	retlw	85	;'U'
   902  0763  344E               	retlw	78	;'N'
   903  0764  3454               	retlw	84	;'T'
   904  0765  342F               	retlw	47	;'/'
   905  0766  3400               	retlw	0
   906                           
   907                           	psect	stringtext4
   908  0767                     __pstringtext4:	
   909  0767                     STR_1:	
   910  0767  342F               	retlw	47	;'/'
   911  0768  3442               	retlw	66	;'B'
   912  0769  344F               	retlw	79	;'O'
   913  076A  344F               	retlw	79	;'O'
   914  076B  3454               	retlw	84	;'T'
   915  076C  342F               	retlw	47	;'/'
   916  076D  3400               	retlw	0
   917                           
   918                           	psect	stringtext5
   919  0787                     __pstringtext5:	
   920  0787                     STR_3:	
   921  0787  342F               	retlw	47	;'/'
   922  0788  3441               	retlw	65	;'A'
   923  0789  3444               	retlw	68	;'D'
   924  078A  3443               	retlw	67	;'C'
   925  078B  3400               	retlw	0
   926                           
   927                           	psect	stringtext6
   928  0000                     __pstringtext6:	
   929  0765                     
   930                           ; #config settings
   931  0000                     
   932                           	psect	cinit
   933  0045                     start_initialization:	
   934  0045                     __initialization:	
   935                           
   936                           ; Initialize objects allocated to BANK0
   937  0045  278F               	fcall	__pidataBANK0	;fetch initializer
   938  0046  00E3               	movwf	__pdataBANK0& (0+127)
   939  0047  2790               	fcall	__pidataBANK0+1	;fetch initializer
   940  0048  00E4               	movwf	(__pdataBANK0+1)& (0+127)
   941                           
   942                           ; Clear objects allocated to BANK0
   943  0049  3048               	movlw	low __pbssBANK0
   944  004A  0084               	movwf	4
   945  004B  3000               	movlw	high __pbssBANK0
   946  004C  0085               	movwf	5
   947  004D  301B               	movlw	27
   948  004E  277C               	fcall	clear_ram0
   949  004F                     end_of_initialization:	
   950                           ;End of C runtime variable initialization code
   951                           
   952  004F                     __end_of__initialization:	
   953  004F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   954  0050  0020               	movlb	0
   955  0051  2B36               	ljmp	_main	;jump to C main() function
   956                           
   957                           	psect	bssBANK0
   958  0048                     __pbssBANK0:	
   959  0048                     _adcSum:	
   960  0048                     	ds	4
   961  004C                     _nrf24l01:	
   962  004C                     	ds	3
   963  004F                     _counter:	
   964  004F                     	ds	2
   965  0051                     _sleepLoop:	
   966  0051                     	ds	1
   967  0052                     _adcLoop:	
   968  0052                     	ds	1
   969  0053                     _string:	
   970  0053                     	ds	16
   971                           
   972                           	psect	dataBANK0
   973  0063                     __pdataBANK0:	
   974  0063                     _mode:	
   975  0063                     	ds	1
   976  0064                     _nextMode:	
   977  0064                     	ds	1
   978                           
   979                           	psect	clrtext
   980  077C                     clear_ram0:	
   981                           ;	Called with FSR0 containing the base address, and
   982                           ;	WREG with the size to clear
   983                           
   984  077C  0064               	clrwdt	;clear the watchdog before getting into this loop
   985  077D                     clrloop0:	
   986  077D  0180               	clrf	0	;clear RAM location pointed to by FSR
   987  077E  3101               	addfsr 0,1
   988  077F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   989  0780  2F7D               	goto	clrloop0	;have we reached the end yet?
   990  0781  3400               	retlw	0	;all done for this memory range, return
   991                           
   992                           	psect	cstackBANK1
   993  00A0                     __pcstackBANK1:	
   994  00A0                     __itoa@buffer:	
   995                           
   996                           ; 1 bytes @ 0x0
   997  00A0                     	ds	1
   998  00A1                     ??_loop:	
   999                           
  1000                           ; 1 bytes @ 0x1
  1001  00A1                     	ds	4
  1002  00A5                     ??_main:	
  1003                           
  1004                           ; 1 bytes @ 0x5
  1005  00A5                     	ds	1
  1006  00A6                     main@bootCount:	
  1007                           
  1008                           ; 2 bytes @ 0x6
  1009  00A6                     	ds	2
  1010                           
  1011                           	psect	cstackCOMMON
  1012  0070                     __pcstackCOMMON:	
  1013  0070                     ?_nrf24l01ISR:	
  1014  0070                     ?_nrf24l01Service:	
  1015                           ; 1 bytes @ 0x0
  1016                           
  1017  0070                     ?_nrf24l01Init:	
  1018                           ; 1 bytes @ 0x0
  1019                           
  1020  0070                     ?_nrf24l01InterfaceInit:	
  1021                           ; 1 bytes @ 0x0
  1022                           
  1023  0070                     ?_nrf24l01SPISend:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0070                     ??_nrf24l01SPISend:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0070                     ?_nrf24l01SPIStart:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ??_nrf24l01SPIStart:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     ?_nrf24l01SPIEnd:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ??_nrf24l01SPIEnd:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ?_ISR:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ?_startADC:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047  0070                     ?_loop:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050  0070                     ?_main:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     ?_nrf24l01SetMode:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0070                     ?_nrf24l01HandleRX:	
  1057                           ; 1 bytes @ 0x0
  1058                           
  1059  0070                     ?_nrf24l01CheckACK:	
  1060                           ; 1 bytes @ 0x0
  1061                           
  1062  0070                     ?_nrf24l01InitRegisters:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065  0070                     ?i1_read_flashmem:	
  1066                           ; 1 bytes @ 0x0
  1067                           
  1068  0070                     ?i1_strlen:	
  1069                           ; 2 bytes @ 0x0
  1070                           
  1071  0070                     nrf24l01SPISend@data:	
  1072                           ; 2 bytes @ 0x0
  1073                           
  1074  0070                     i1read_flashmem@offset:	
  1075                           ; 1 bytes @ 0x0
  1076                           
  1077                           
  1078                           ; 2 bytes @ 0x0
  1079  0070                     	ds	1
  1080  0071                     ??_nrf24l01Send:	
  1081                           
  1082                           ; 1 bytes @ 0x1
  1083  0071                     	ds	1
  1084  0072                     ??i1_read_flashmem:	
  1085  0072                     ??i1_strlen:	
  1086                           ; 1 bytes @ 0x2
  1087                           
  1088  0072                     nrf24l01Send@command:	
  1089                           ; 1 bytes @ 0x2
  1090                           
  1091                           
  1092                           ; 1 bytes @ 0x2
  1093  0072                     	ds	3
  1094  0075                     i1read_flashmem@result:	
  1095                           
  1096                           ; 2 bytes @ 0x5
  1097  0075                     	ds	1
  1098  0076                     i1strlen@s:	
  1099                           
  1100                           ; 1 bytes @ 0x6
  1101  0076                     	ds	1
  1102  0077                     i1strlen@cp:	
  1103  0077                     i1read_flashmem@address:	
  1104                           ; 1 bytes @ 0x7
  1105                           
  1106                           
  1107                           ; 2 bytes @ 0x7
  1108  0077                     	ds	2
  1109  0079                     ??_nrf24l01HandleRX:	
  1110                           
  1111                           ; 1 bytes @ 0x9
  1112  0079                     	ds	4
  1113  007D                     ??_nrf24l01ISR:	
  1114                           
  1115                           ; 1 bytes @ 0xD
  1116  007D                     	ds	1
  1117                           
  1118                           	psect	cstackBANK0
  1119  0020                     __pcstackBANK0:	
  1120  0020                     ?_nrf24l01Send:	
  1121  0020                     nrf24l01Send@data:	
  1122                           ; 1 bytes @ 0x0
  1123                           
  1124                           
  1125                           ; 1 bytes @ 0x0
  1126  0020                     	ds	1
  1127  0021                     nrf24l01HandleRX@width:	
  1128                           
  1129                           ; 1 bytes @ 0x1
  1130  0021                     	ds	1
  1131  0022                     nrf24l01HandleRX@byte:	
  1132                           
  1133                           ; 1 bytes @ 0x2
  1134  0022                     	ds	1
  1135  0023                     nrf24l01HandleRX@i:	
  1136                           
  1137                           ; 1 bytes @ 0x3
  1138  0023                     	ds	1
  1139  0024                     nrf24l01ISR@tempStatus:	
  1140                           
  1141                           ; 1 bytes @ 0x4
  1142  0024                     	ds	1
  1143  0025                     ??_ISR:	
  1144                           
  1145                           ; 1 bytes @ 0x5
  1146  0025                     	ds	4
  1147  0029                     ISR@result:	
  1148                           
  1149                           ; 2 bytes @ 0x9
  1150  0029                     	ds	2
  1151  002B                     ?_write_flashmem:	
  1152  002B                     ??_nrf24l01InterfaceInit:	
  1153                           ; 1 bytes @ 0xB
  1154                           
  1155  002B                     ??_startADC:	
  1156                           ; 1 bytes @ 0xB
  1157                           
  1158  002B                     ??_nrf24l01SetMode:	
  1159                           ; 1 bytes @ 0xB
  1160                           
  1161  002B                     ??_nrf24l01CheckACK:	
  1162                           ; 1 bytes @ 0xB
  1163                           
  1164  002B                     ??_nrf24l01InitRegisters:	
  1165                           ; 1 bytes @ 0xB
  1166                           
  1167  002B                     ?_strlen:	
  1168                           ; 1 bytes @ 0xB
  1169                           
  1170  002B                     ?_read_flashmem:	
  1171                           ; 2 bytes @ 0xB
  1172                           
  1173  002B                     ?___lwdiv:	
  1174                           ; 2 bytes @ 0xB
  1175                           
  1176  002B                     ?___lwmod:	
  1177                           ; 2 bytes @ 0xB
  1178                           
  1179  002B                     ?___lmul:	
  1180                           ; 2 bytes @ 0xB
  1181                           
  1182  002B                     ?___lldiv:	
  1183                           ; 4 bytes @ 0xB
  1184                           
  1185  002B                     write_flashmem@offset:	
  1186                           ; 4 bytes @ 0xB
  1187                           
  1188  002B                     read_flashmem@offset:	
  1189                           ; 2 bytes @ 0xB
  1190                           
  1191  002B                     ___lwdiv@divisor:	
  1192                           ; 2 bytes @ 0xB
  1193                           
  1194  002B                     ___lwmod@divisor:	
  1195                           ; 2 bytes @ 0xB
  1196                           
  1197  002B                     ___lmul@multiplier:	
  1198                           ; 2 bytes @ 0xB
  1199                           
  1200  002B                     ___lldiv@divisor:	
  1201                           ; 4 bytes @ 0xB
  1202                           
  1203                           
  1204                           ; 4 bytes @ 0xB
  1205  002B                     	ds	1
  1206  002C                     startADC@channel:	
  1207  002C                     nrf24l01SetMode@config:	
  1208                           ; 1 bytes @ 0xC
  1209                           
  1210  002C                     nrf24l01InitRegisters@rfSetup:	
  1211                           ; 1 bytes @ 0xC
  1212                           
  1213                           
  1214                           ; 1 bytes @ 0xC
  1215  002C                     	ds	1
  1216  002D                     ??_nrf24l01Service:	
  1217  002D                     ??_strlen:	
  1218                           ; 1 bytes @ 0xD
  1219                           
  1220  002D                     ??_read_flashmem:	
  1221                           ; 1 bytes @ 0xD
  1222                           
  1223  002D                     nrf24l01InitRegisters@feature:	
  1224                           ; 1 bytes @ 0xD
  1225                           
  1226  002D                     write_flashmem@data:	
  1227                           ; 1 bytes @ 0xD
  1228                           
  1229  002D                     ___lwdiv@dividend:	
  1230                           ; 2 bytes @ 0xD
  1231                           
  1232  002D                     ___lwmod@dividend:	
  1233                           ; 2 bytes @ 0xD
  1234                           
  1235                           
  1236                           ; 2 bytes @ 0xD
  1237  002D                     	ds	1
  1238  002E                     nrf24l01InitRegisters@config:	
  1239                           
  1240                           ; 1 bytes @ 0xE
  1241  002E                     	ds	1
  1242  002F                     ??_write_flashmem:	
  1243  002F                     ??___lwdiv:	
  1244                           ; 1 bytes @ 0xF
  1245                           
  1246  002F                     ??___lwmod:	
  1247                           ; 1 bytes @ 0xF
  1248                           
  1249  002F                     nrf24l01InitRegisters@enRXAddr:	
  1250                           ; 1 bytes @ 0xF
  1251                           
  1252  002F                     write_flashmem@address:	
  1253                           ; 1 bytes @ 0xF
  1254                           
  1255  002F                     ___lmul@multiplicand:	
  1256                           ; 2 bytes @ 0xF
  1257                           
  1258  002F                     ___lldiv@dividend:	
  1259                           ; 4 bytes @ 0xF
  1260                           
  1261                           
  1262                           ; 4 bytes @ 0xF
  1263  002F                     	ds	1
  1264  0030                     nrf24l01InitRegisters@enAA:	
  1265  0030                     ___lwdiv@counter:	
  1266                           ; 1 bytes @ 0x10
  1267                           
  1268  0030                     ___lwmod@counter:	
  1269                           ; 1 bytes @ 0x10
  1270                           
  1271  0030                     read_flashmem@result:	
  1272                           ; 1 bytes @ 0x10
  1273                           
  1274                           
  1275                           ; 2 bytes @ 0x10
  1276  0030                     	ds	1
  1277  0031                     nrf24l01InitRegisters@DynPD:	
  1278  0031                     strlen@cp:	
  1279                           ; 1 bytes @ 0x11
  1280                           
  1281  0031                     ___lwdiv@quotient:	
  1282                           ; 1 bytes @ 0x11
  1283                           
  1284                           
  1285                           ; 2 bytes @ 0x11
  1286  0031                     	ds	1
  1287  0032                     ??_nrf24l01Init:	
  1288  0032                     strlen@s:	
  1289                           ; 1 bytes @ 0x12
  1290                           
  1291  0032                     read_flashmem@address:	
  1292                           ; 1 bytes @ 0x12
  1293                           
  1294                           
  1295                           ; 2 bytes @ 0x12
  1296  0032                     	ds	1
  1297  0033                     ?_strcpy:	
  1298  0033                     ?_utoa:	
  1299                           ; 1 bytes @ 0x13
  1300                           
  1301  0033                     ??___lmul:	
  1302                           ; 1 bytes @ 0x13
  1303                           
  1304  0033                     ??___lldiv:	
  1305                           ; 1 bytes @ 0x13
  1306                           
  1307  0033                     utoa@val:	
  1308                           ; 1 bytes @ 0x13
  1309                           
  1310  0033                     strcpy@from:	
  1311                           ; 2 bytes @ 0x13
  1312                           
  1313  0033                     ___lmul@product:	
  1314                           ; 2 bytes @ 0x13
  1315                           
  1316                           
  1317                           ; 4 bytes @ 0x13
  1318  0033                     	ds	1
  1319  0034                     ?_nrf24l01SendString:	
  1320  0034                     nrf24l01SendString@waitForAck:	
  1321                           ; 1 bytes @ 0x14
  1322                           
  1323  0034                     ___lldiv@quotient:	
  1324                           ; 1 bytes @ 0x14
  1325                           
  1326                           
  1327                           ; 4 bytes @ 0x14
  1328  0034                     	ds	1
  1329  0035                     ??_strcpy:	
  1330  0035                     ??_nrf24l01SendString:	
  1331                           ; 1 bytes @ 0x15
  1332                           
  1333  0035                     utoa@base:	
  1334                           ; 1 bytes @ 0x15
  1335                           
  1336                           
  1337                           ; 2 bytes @ 0x15
  1338  0035                     	ds	1
  1339  0036                     strcpy@cp:	
  1340                           
  1341                           ; 1 bytes @ 0x16
  1342  0036                     	ds	1
  1343  0037                     ??_utoa:	
  1344  0037                     strcpy@to:	
  1345                           ; 1 bytes @ 0x17
  1346                           
  1347                           
  1348                           ; 1 bytes @ 0x17
  1349  0037                     	ds	1
  1350  0038                     nrf24l01SendString@btye:	
  1351  0038                     ___lldiv@counter:	
  1352                           ; 1 bytes @ 0x18
  1353                           
  1354  0038                     utoa@v:	
  1355                           ; 1 bytes @ 0x18
  1356                           
  1357                           
  1358                           ; 2 bytes @ 0x18
  1359  0038                     	ds	1
  1360  0039                     nrf24l01SendString@string:	
  1361                           
  1362                           ; 1 bytes @ 0x19
  1363  0039                     	ds	1
  1364  003A                     nrf24l01SendString@i:	
  1365  003A                     utoa@c:	
  1366                           ; 1 bytes @ 0x1A
  1367                           
  1368                           
  1369                           ; 1 bytes @ 0x1A
  1370  003A                     	ds	1
  1371  003B                     utoa@buf:	
  1372                           
  1373                           ; 1 bytes @ 0x1B
  1374  003B                     	ds	1
  1375  003C                     ?_itoa:	
  1376  003C                     itoa@val:	
  1377                           ; 1 bytes @ 0x1C
  1378                           
  1379                           
  1380                           ; 2 bytes @ 0x1C
  1381  003C                     	ds	2
  1382  003E                     itoa@base:	
  1383                           
  1384                           ; 2 bytes @ 0x1E
  1385  003E                     	ds	2
  1386  0040                     ??_itoa:	
  1387                           
  1388                           ; 1 bytes @ 0x20
  1389  0040                     	ds	1
  1390  0041                     itoa@cp:	
  1391                           
  1392                           ; 1 bytes @ 0x21
  1393  0041                     	ds	1
  1394  0042                     itoa@buf:	
  1395                           
  1396                           ; 1 bytes @ 0x22
  1397  0042                     	ds	1
  1398  0043                     ?__itoa:	
  1399  0043                     __itoa@number:	
  1400                           ; 1 bytes @ 0x23
  1401                           
  1402                           
  1403                           ; 2 bytes @ 0x23
  1404  0043                     	ds	2
  1405  0045                     __itoa@base:	
  1406                           
  1407                           ; 1 bytes @ 0x25
  1408  0045                     	ds	1
  1409  0046                     ??__itoa:	
  1410                           
  1411                           ; 1 bytes @ 0x26
  1412  0046                     	ds	2
  1413                           
  1414                           	psect	maintext
  1415  0336                     __pmaintext:	
  1416 ;;
  1417 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1418 ;;
  1419 ;; *************** function _main *****************
  1420 ;; Defined at:
  1421 ;;		line 209 in file "main.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;		None
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  bootCount       2    6[BANK1 ] unsigned int 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      void 
  1428 ;; Registers used:
  1429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : B1F/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMMON   BANK0   BANK1
  1435 ;;      Params:         0       0       0
  1436 ;;      Locals:         0       0       2
  1437 ;;      Temps:          0       0       1
  1438 ;;      Totals:         0       0       3
  1439 ;;Total ram usage:        3 bytes
  1440 ;; Hardware stack levels required when called:   10
  1441 ;; This function calls:
  1442 ;;		_loop
  1443 ;;		_nrf24l01Init
  1444 ;;		_read_flashmem
  1445 ;;		_write_flashmem
  1446 ;; This function is called by:
  1447 ;;		Startup code after reset
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           
  1452                           ;psect for function _main
  1453  0336                     _main:	
  1454                           
  1455                           ;main.c: 212: ANSELA = 0x00;
  1456                           
  1457                           ;incstack = 0
  1458                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1459  0336  0023               	movlb	3	; select bank3
  1460  0337  018C               	clrf	12	;volatile
  1461                           
  1462                           ;main.c: 213: ANSELC = 0x00;
  1463  0338  018E               	clrf	14	;volatile
  1464                           
  1465                           ;main.c: 219: INTCONbits.PEIE = 0;
  1466  0339  130B               	bcf	11,6	;volatile
  1467                           
  1468                           ;main.c: 220: INTCONbits.GIE = 0;
  1469  033A  138B               	bcf	11,7	;volatile
  1470                           
  1471                           ;main.c: 222: OSCCONbits.IRCF = 0b1111;
  1472  033B  3078               	movlw	120
  1473  033C  0021               	movlb	1	; select bank1
  1474  033D  0499               	iorwf	25,f	;volatile
  1475                           
  1476                           ;main.c: 223: OSCCONbits.SCS = 0b10;
  1477  033E  0819               	movf	25,w	;volatile
  1478  033F  39FC               	andlw	-4
  1479  0340  3802               	iorlw	2
  1480  0341  0099               	movwf	25	;volatile
  1481                           
  1482                           ;main.c: 225: _delay((unsigned long)((10)*(16000000/4000.0)));
  1483  0342  3034               	movlw	52
  1484  0343  0021               	movlb	1	; select bank1
  1485  0344  00A5               	movwf	??_main^(0+128)
  1486  0345  30F1               	movlw	241
  1487  0346                     u2107:	
  1488  0346  0B89               	decfsz	9,f
  1489  0347  2B46               	goto	u2107
  1490  0348  0BA5               	decfsz	??_main^(0+128),f
  1491  0349  2B46               	goto	u2107
  1492  034A  3200               	nop2
  1493                           
  1494                           ;main.c: 227: nrf24l01Init();
  1495  034B  26EA               	fcall	_nrf24l01Init
  1496                           
  1497                           ;main.c: 229: OPTION_REGbits.nWPUEN = 0;
  1498  034C  0021               	movlb	1	; select bank1
  1499  034D  1395               	bcf	21,7	;volatile
  1500                           
  1501                           ;main.c: 232: FVRCONbits.FVREN = 0;
  1502  034E  0022               	movlb	2	; select bank2
  1503  034F  1397               	bcf	23,7	;volatile
  1504                           
  1505                           ;main.c: 233: FVRCONbits.ADFVR = 1;
  1506  0350  0817               	movf	23,w	;volatile
  1507  0351  39FC               	andlw	-4
  1508  0352  3801               	iorlw	1
  1509  0353  0097               	movwf	23	;volatile
  1510                           
  1511                           ;main.c: 234: FVRCONbits.FVREN = 1;
  1512  0354  1797               	bsf	23,7	;volatile
  1513                           
  1514                           ;main.c: 237: FVRCONbits.TSEN = 0;
  1515  0355  1297               	bcf	23,5	;volatile
  1516                           
  1517                           ;main.c: 238: FVRCONbits.TSRNG = 0;
  1518  0356  1217               	bcf	23,4	;volatile
  1519                           
  1520                           ;main.c: 239: FVRCONbits.TSEN = 1;
  1521  0357  1697               	bsf	23,5	;volatile
  1522                           
  1523                           ;main.c: 242: ADCON0bits.ADON = 0;
  1524  0358  0021               	movlb	1	; select bank1
  1525  0359  101D               	bcf	29,0	;volatile
  1526                           
  1527                           ;main.c: 244: ANSELAbits.ANSA4 = 1;
  1528  035A  0023               	movlb	3	; select bank3
  1529  035B  160C               	bsf	12,4	;volatile
  1530                           
  1531                           ;main.c: 245: TRISAbits.TRISA4 = 1;
  1532  035C  0021               	movlb	1	; select bank1
  1533  035D  160C               	bsf	12,4	;volatile
  1534                           
  1535                           ;main.c: 246: WPUAbits.WPUA4 = 0;
  1536  035E  0024               	movlb	4	; select bank4
  1537  035F  120C               	bcf	12,4	;volatile
  1538                           
  1539                           ;main.c: 248: ANSELCbits.ANSC3 = 1;
  1540  0360  0023               	movlb	3	; select bank3
  1541  0361  158E               	bsf	14,3	;volatile
  1542                           
  1543                           ;main.c: 249: TRISCbits.TRISC3 = 1;
  1544  0362  0021               	movlb	1	; select bank1
  1545  0363  158E               	bsf	14,3	;volatile
  1546                           
  1547                           ;main.c: 251: ADCON1bits.ADCS = 0b111;
  1548  0364  3070               	movlw	112
  1549  0365  049E               	iorwf	30,f	;volatile
  1550                           
  1551                           ;main.c: 252: ADCON1bits.ADFM = 1;
  1552  0366  179E               	bsf	30,7	;volatile
  1553                           
  1554                           ;main.c: 253: ADCON1bits.ADPREF = 0b00;
  1555  0367  30FC               	movlw	-4
  1556  0368  059E               	andwf	30,f	;volatile
  1557                           
  1558                           ;main.c: 255: PIE1bits.ADIE = 1;
  1559  0369  1711               	bsf	17,6	;volatile
  1560                           
  1561                           ;main.c: 257: ADCON0bits.CHS = 3;
  1562  036A  081D               	movf	29,w	;volatile
  1563  036B  3983               	andlw	-125
  1564  036C  380C               	iorlw	12
  1565  036D  009D               	movwf	29	;volatile
  1566                           
  1567                           ;main.c: 258: ADCON0bits.ADON = 1;
  1568  036E  141D               	bsf	29,0	;volatile
  1569                           
  1570                           ;main.c: 262: TRISAbits.TRISA2 = 1;
  1571  036F  150C               	bsf	12,2	;volatile
  1572                           
  1573                           ;main.c: 263: INTCONbits.INTE = 1;
  1574  0370  160B               	bsf	11,4	;volatile
  1575                           
  1576                           ;main.c: 264: OPTION_REGbits.INTEDG = 0;
  1577  0371  1315               	bcf	21,6	;volatile
  1578                           
  1579                           ;main.c: 268: WDTCONbits.WDTPS = 10;
  1580  0372  0817               	movf	23,w	;volatile
  1581  0373  39C1               	andlw	-63
  1582  0374  3814               	iorlw	20
  1583  0375  0097               	movwf	23	;volatile
  1584                           
  1585                           ;main.c: 273: TRISAbits.TRISA5 = 0;
  1586  0376  128C               	bcf	12,5	;volatile
  1587                           
  1588                           ;main.c: 274: PORTAbits.RA5 = 0;
  1589  0377  0020               	movlb	0	; select bank0
  1590  0378  128C               	bcf	12,5	;volatile
  1591                           
  1592                           ;main.c: 279: INTCONbits.PEIE = 1;
  1593  0379  170B               	bsf	11,6	;volatile
  1594                           
  1595                           ;main.c: 280: INTCONbits.GIE = 1;
  1596  037A  178B               	bsf	11,7	;volatile
  1597                           
  1598                           ;main.c: 282: unsigned int bootCount = read_flashmem(16);
  1599  037B  3010               	movlw	16
  1600  037C  00AB               	movwf	read_flashmem@offset
  1601  037D  3000               	movlw	0
  1602  037E  00AC               	movwf	read_flashmem@offset+1
  1603  037F  2512               	fcall	_read_flashmem
  1604  0380  0020               	movlb	0	; select bank0
  1605  0381  082C               	movf	?_read_flashmem+1,w
  1606  0382  0021               	movlb	1	; select bank1
  1607  0383  00A7               	movwf	(main@bootCount+1)^(0+128)
  1608  0384  0020               	movlb	0	; select bank0
  1609  0385  082B               	movf	?_read_flashmem,w
  1610  0386  0021               	movlb	1	; select bank1
  1611  0387  00A6               	movwf	main@bootCount^(0+128)
  1612                           
  1613                           ;main.c: 283: if (bootCount == 13313){
  1614  0388  0326               	decf	main@bootCount^(0+128),w
  1615  0389  3034               	movlw	52
  1616  038A  1903               	skipnz
  1617  038B  0627               	xorwf	(main@bootCount+1)^(0+128),w
  1618  038C  1D03               	btfss	3,2
  1619  038D  2B92               	goto	l192
  1620                           
  1621                           ;main.c: 284: bootCount = 1;
  1622  038E  3001               	movlw	1
  1623  038F  00A6               	movwf	main@bootCount^(0+128)
  1624  0390  3000               	movlw	0
  1625  0391  00A7               	movwf	(main@bootCount^(0+128)+1)
  1626  0392                     l192:	
  1627                           
  1628                           ;main.c: 285: }
  1629                           ;main.c: 286: bootCount++;
  1630  0392  3001               	movlw	1
  1631  0393  07A6               	addwf	main@bootCount^(0+128),f
  1632  0394  3000               	movlw	0
  1633  0395  3DA7               	addwfc	(main@bootCount+1)^(0+128),f
  1634                           
  1635                           ;main.c: 287: write_flashmem(16, bootCount);
  1636  0396  3010               	movlw	16
  1637  0397  0020               	movlb	0	; select bank0
  1638  0398  00AB               	movwf	write_flashmem@offset
  1639  0399  3000               	movlw	0
  1640  039A  00AC               	movwf	write_flashmem@offset+1
  1641  039B  0021               	movlb	1	; select bank1
  1642  039C  0827               	movf	(main@bootCount+1)^(0+128),w
  1643  039D  0020               	movlb	0	; select bank0
  1644  039E  00AE               	movwf	write_flashmem@data+1
  1645  039F  0021               	movlb	1	; select bank1
  1646  03A0  0826               	movf	main@bootCount^(0+128),w
  1647  03A1  0020               	movlb	0	; select bank0
  1648  03A2  00AD               	movwf	write_flashmem@data
  1649  03A3  24A1               	fcall	_write_flashmem
  1650  03A4                     l2947:	
  1651                           ;main.c: 289: while(1){
  1652                           
  1653                           
  1654                           ;main.c: 290: loop();
  1655  03A4  2052               	fcall	_loop
  1656  03A5  2BA4               	goto	l2947
  1657  03A6                     __end_of_main:	
  1658                           ;main.c: 291: }
  1659                           ;main.c: 293: return;
  1660                           
  1661                           
  1662                           	psect	text1
  1663  04A1                     __ptext1:	
  1664 ;; *************** function _write_flashmem *****************
  1665 ;; Defined at:
  1666 ;;		line 3 in file "flash.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  offset          2   11[BANK0 ] unsigned int 
  1669 ;;  data            2   13[BANK0 ] unsigned int 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  address         2   15[BANK0 ] unsigned int 
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  1    wreg      void 
  1674 ;; Registers used:
  1675 ;;		wreg, status,2, status,0
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMMON   BANK0   BANK1
  1681 ;;      Params:         0       4       0
  1682 ;;      Locals:         0       2       0
  1683 ;;      Temps:          0       0       0
  1684 ;;      Totals:         0       6       0
  1685 ;;Total ram usage:        6 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; Hardware stack levels required when called:    5
  1688 ;; This function calls:
  1689 ;;		Nothing
  1690 ;; This function is called by:
  1691 ;;		_main
  1692 ;; This function uses a non-reentrant model
  1693 ;;
  1694                           
  1695                           
  1696                           ;psect for function _write_flashmem
  1697  04A1                     _write_flashmem:	
  1698                           
  1699                           ;flash.c: 5: unsigned int address;
  1700                           ;flash.c: 7: INTCONbits.GIE = 0;
  1701                           
  1702                           ;incstack = 0
  1703                           ; Regs used in _write_flashmem: [wreg+status,2+status,0]
  1704  04A1  138B               	bcf	11,7	;volatile
  1705                           
  1706                           ;flash.c: 10: PMCON1 = 0x00;
  1707  04A2  0023               	movlb	3	; select bank3
  1708  04A3  0195               	clrf	21	;volatile
  1709                           
  1710                           ;flash.c: 12: address = (0x800U-32) + offset;
  1711  04A4  0020               	movlb	0	; select bank0
  1712  04A5  082B               	movf	write_flashmem@offset,w
  1713  04A6  3EE0               	addlw	224
  1714  04A7  00AF               	movwf	write_flashmem@address
  1715  04A8  3007               	movlw	7
  1716  04A9  3D2C               	addwfc	write_flashmem@offset+1,w
  1717  04AA  00B0               	movwf	write_flashmem@address+1
  1718                           
  1719                           ;flash.c: 13: PMADRL = (char) (address >> 0);
  1720  04AB  082F               	movf	write_flashmem@address,w
  1721  04AC  0023               	movlb	3	; select bank3
  1722  04AD  0091               	movwf	17	;volatile
  1723                           
  1724                           ;flash.c: 14: PMADRH = (char) (address >> 8);
  1725  04AE  0020               	movlb	0	; select bank0
  1726  04AF  0830               	movf	write_flashmem@address+1,w
  1727  04B0  0023               	movlb	3	; select bank3
  1728  04B1  0092               	movwf	18	;volatile
  1729                           
  1730                           ;flash.c: 16: PMCON1bits.FREE = 1;
  1731  04B2  1615               	bsf	21,4	;volatile
  1732                           
  1733                           ;flash.c: 17: PMCON1bits.WREN = 1;
  1734  04B3  1515               	bsf	21,2	;volatile
  1735                           
  1736                           ;flash.c: 19: PMCON2 = 0x55;
  1737  04B4  3055               	movlw	85
  1738  04B5  0096               	movwf	22	;volsfr
  1739                           
  1740                           ;flash.c: 20: PMCON2 = 0xAA;
  1741  04B6  30AA               	movlw	170
  1742  04B7  0096               	movwf	22	;volsfr
  1743                           
  1744                           ;flash.c: 22: PMCON1bits.WR = 1;
  1745  04B8  1495               	bsf	21,1	;volatile
  1746                           
  1747                           ;flash.c: 24: __nop();
  1748  04B9  0000               	nop
  1749                           
  1750                           ;flash.c: 25: __nop();
  1751  04BA  0000               	nop
  1752                           
  1753                           ;flash.c: 27: PMCON1bits.WREN = 0;
  1754  04BB  0023               	movlb	3	; select bank3
  1755  04BC  1115               	bcf	21,2	;volatile
  1756                           
  1757                           ;flash.c: 31: PMCON1 = 0x00;
  1758  04BD  0195               	clrf	21	;volatile
  1759                           
  1760                           ;flash.c: 33: PMADRL = (char) (address >> 0);
  1761  04BE  0020               	movlb	0	; select bank0
  1762  04BF  082F               	movf	write_flashmem@address,w
  1763  04C0  0023               	movlb	3	; select bank3
  1764  04C1  0091               	movwf	17	;volatile
  1765                           
  1766                           ;flash.c: 34: PMADRH = (char) (address >> 8);
  1767  04C2  0020               	movlb	0	; select bank0
  1768  04C3  0830               	movf	write_flashmem@address+1,w
  1769  04C4  0023               	movlb	3	; select bank3
  1770  04C5  0092               	movwf	18	;volatile
  1771                           
  1772                           ;flash.c: 36: PMCON1bits.FREE = 0;
  1773  04C6  1215               	bcf	21,4	;volatile
  1774                           
  1775                           ;flash.c: 37: PMCON1bits.LWLO = 1;
  1776  04C7  1695               	bsf	21,5	;volatile
  1777                           
  1778                           ;flash.c: 38: PMCON1bits.WREN = 1;
  1779  04C8  1515               	bsf	21,2	;volatile
  1780                           
  1781                           ;flash.c: 40: PMDATL = (data >> 0);
  1782  04C9  0020               	movlb	0	; select bank0
  1783  04CA  082D               	movf	write_flashmem@data,w
  1784  04CB  0023               	movlb	3	; select bank3
  1785  04CC  0093               	movwf	19	;volatile
  1786                           
  1787                           ;flash.c: 41: PMDATH = (data >> 8);
  1788  04CD  0020               	movlb	0	; select bank0
  1789  04CE  082E               	movf	write_flashmem@data+1,w
  1790  04CF  0023               	movlb	3	; select bank3
  1791  04D0  0094               	movwf	20	;volatile
  1792                           
  1793                           ;flash.c: 43: PMCON1bits.LWLO = 0;
  1794  04D1  1295               	bcf	21,5	;volatile
  1795                           
  1796                           ;flash.c: 45: PMCON2 = 0x55;
  1797  04D2  3055               	movlw	85
  1798  04D3  0096               	movwf	22	;volsfr
  1799                           
  1800                           ;flash.c: 46: PMCON2 = 0xAA;
  1801  04D4  30AA               	movlw	170
  1802  04D5  0096               	movwf	22	;volsfr
  1803                           
  1804                           ;flash.c: 48: PMCON1bits.WR = 1;
  1805  04D6  1495               	bsf	21,1	;volatile
  1806                           
  1807                           ;flash.c: 50: __nop();
  1808  04D7  0000               	nop
  1809                           
  1810                           ;flash.c: 51: __nop();
  1811  04D8  0000               	nop
  1812                           
  1813                           ;flash.c: 53: PMCON1bits.WREN = 0;
  1814  04D9  0023               	movlb	3	; select bank3
  1815  04DA  1115               	bcf	21,2	;volatile
  1816                           
  1817                           ;flash.c: 56: INTCONbits.GIE = 1;
  1818  04DB  178B               	bsf	11,7	;volatile
  1819  04DC  0008               	return
  1820  04DD                     __end_of_write_flashmem:	
  1821                           
  1822                           	psect	text2
  1823  06EA                     __ptext2:	
  1824 ;; *************** function _nrf24l01Init *****************
  1825 ;; Defined at:
  1826 ;;		line 319 in file "nrf24l01.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, status,2, status,0, pclath, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMMON   BANK0   BANK1
  1840 ;;      Params:         0       0       0
  1841 ;;      Locals:         0       0       0
  1842 ;;      Temps:          0       1       0
  1843 ;;      Totals:         0       1       0
  1844 ;;Total ram usage:        1 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    8
  1847 ;; This function calls:
  1848 ;;		_nrf24l01InitRegisters
  1849 ;;		_nrf24l01InterfaceInit
  1850 ;;		_nrf24l01Send
  1851 ;; This function is called by:
  1852 ;;		_main
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           
  1857                           ;psect for function _nrf24l01Init
  1858  06EA                     _nrf24l01Init:	
  1859                           
  1860                           ;nrf24l01.c: 322: nrf24l01InterfaceInit();
  1861                           
  1862                           ;incstack = 0
  1863                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1864  06EA  2735               	fcall	_nrf24l01InterfaceInit
  1865                           
  1866                           ;nrf24l01.c: 326: PORTAbits.RA0 = 0;
  1867  06EB  0020               	movlb	0	; select bank0
  1868  06EC  100C               	bcf	12,0	;volatile
  1869                           
  1870                           ;nrf24l01.c: 328: _delay((unsigned long)((11)*(16000000/4000.0)));
  1871  06ED  303A               	movlw	58
  1872  06EE  0020               	movlb	0	; select bank0
  1873  06EF  00B2               	movwf	??_nrf24l01Init
  1874  06F0  3023               	movlw	35
  1875  06F1                     u2117:	
  1876  06F1  0B89               	decfsz	9,f
  1877  06F2  2EF1               	goto	u2117
  1878  06F3  0BB2               	decfsz	??_nrf24l01Init,f
  1879  06F4  2EF1               	goto	u2117
  1880                           
  1881                           ;nrf24l01.c: 330: nrf24l01InitRegisters();
  1882  06F5  22BE               	fcall	_nrf24l01InitRegisters
  1883                           
  1884                           ;nrf24l01.c: 332: _delay((unsigned long)((2)*(16000000/4000.0)));
  1885  06F6  300B               	movlw	11
  1886  06F7  0020               	movlb	0	; select bank0
  1887  06F8  00B2               	movwf	??_nrf24l01Init
  1888  06F9  3062               	movlw	98
  1889  06FA                     u2127:	
  1890  06FA  0B89               	decfsz	9,f
  1891  06FB  2EFA               	goto	u2127
  1892  06FC  0BB2               	decfsz	??_nrf24l01Init,f
  1893  06FD  2EFA               	goto	u2127
  1894  06FE  0000               	nop
  1895                           
  1896                           ;nrf24l01.c: 334: nrf24l01.status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  1897  06FF  0020               	movlb	0	; select bank0
  1898  0700  01A0               	clrf	nrf24l01Send@data
  1899  0701  3007               	movlw	7
  1900  0702  2745               	fcall	_nrf24l01Send
  1901  0703  0020               	movlb	0	; select bank0
  1902  0704  00B2               	movwf	??_nrf24l01Init
  1903  0705  0832               	movf	??_nrf24l01Init,w
  1904  0706  00CC               	movwf	_nrf24l01	;volatile
  1905  0707  0008               	return
  1906  0708                     __end_of_nrf24l01Init:	
  1907                           
  1908                           	psect	text3
  1909  0735                     __ptext3:	
  1910 ;; *************** function _nrf24l01InterfaceInit *****************
  1911 ;; Defined at:
  1912 ;;		line 9 in file "interface.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;		None
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;		None
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg, status,2, status,0
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMMON   BANK0   BANK1
  1926 ;;      Params:         0       0       0
  1927 ;;      Locals:         0       0       0
  1928 ;;      Temps:          0       0       0
  1929 ;;      Totals:         0       0       0
  1930 ;;Total ram usage:        0 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    5
  1933 ;; This function calls:
  1934 ;;		Nothing
  1935 ;; This function is called by:
  1936 ;;		_nrf24l01Init
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940                           
  1941                           ;psect for function _nrf24l01InterfaceInit
  1942  0735                     _nrf24l01InterfaceInit:	
  1943                           
  1944                           ;interface.c: 11: TRISAbits.TRISA0 = 0;
  1945                           
  1946                           ;incstack = 0
  1947                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  1948  0735  0021               	movlb	1	; select bank1
  1949  0736  100C               	bcf	12,0	;volatile
  1950                           
  1951                           ;interface.c: 12: TRISAbits.TRISA1 = 0;
  1952  0737  108C               	bcf	12,1	;volatile
  1953                           
  1954                           ;interface.c: 14: TRISCbits.TRISC1 = 1;
  1955  0738  148E               	bsf	14,1	;volatile
  1956                           
  1957                           ;interface.c: 15: TRISCbits.TRISC2 = 0;
  1958  0739  110E               	bcf	14,2	;volatile
  1959                           
  1960                           ;interface.c: 16: TRISCbits.TRISC0 = 0;
  1961  073A  100E               	bcf	14,0	;volatile
  1962                           
  1963                           ;interface.c: 18: SSPCON1bits.SSPEN = 0;
  1964  073B  0024               	movlb	4	; select bank4
  1965  073C  1295               	bcf	21,5	;volatile
  1966                           
  1967                           ;interface.c: 19: SSPCON1bits.CKP = 0;
  1968  073D  1215               	bcf	21,4	;volatile
  1969                           
  1970                           ;interface.c: 20: SSP1STATbits.CKE = 1;
  1971  073E  1714               	bsf	20,6	;volatile
  1972                           
  1973                           ;interface.c: 21: SSPCON1bits.SSPM = 0b0010;
  1974  073F  0815               	movf	21,w	;volatile
  1975  0740  39F0               	andlw	-16
  1976  0741  3802               	iorlw	2
  1977  0742  0095               	movwf	21	;volatile
  1978                           
  1979                           ;interface.c: 23: SSPCON1bits.SSPEN = 1;
  1980  0743  1695               	bsf	21,5	;volatile
  1981  0744  0008               	return
  1982  0745                     __end_of_nrf24l01InterfaceInit:	
  1983                           
  1984                           	psect	text4
  1985  02BE                     __ptext4:	
  1986 ;; *************** function _nrf24l01InitRegisters *****************
  1987 ;; Defined at:
  1988 ;;		line 231 in file "nrf24l01.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;		None
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;  DynPD           1   17[BANK0 ] struct .
  1993 ;;  enAA            1   16[BANK0 ] struct .
  1994 ;;  enRXAddr        1   15[BANK0 ] struct .
  1995 ;;  config          1   14[BANK0 ] struct .
  1996 ;;  feature         1   13[BANK0 ] struct .
  1997 ;;  rfSetup         1   12[BANK0 ] struct .
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  1    wreg      void 
  2000 ;; Registers used:
  2001 ;;		wreg, status,2, status,0, pclath, cstack
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMMON   BANK0   BANK1
  2007 ;;      Params:         0       0       0
  2008 ;;      Locals:         0       6       0
  2009 ;;      Temps:          0       1       0
  2010 ;;      Totals:         0       7       0
  2011 ;;Total ram usage:        7 bytes
  2012 ;; Hardware stack levels used:    1
  2013 ;; Hardware stack levels required when called:    7
  2014 ;; This function calls:
  2015 ;;		_nrf24l01Send
  2016 ;; This function is called by:
  2017 ;;		_nrf24l01Init
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           
  2022                           ;psect for function _nrf24l01InitRegisters
  2023  02BE                     _nrf24l01InitRegisters:	
  2024                           
  2025                           ;nrf24l01.c: 235: _delay((unsigned long)((10000)*(16000000/4000000.0)));
  2026                           
  2027                           ;incstack = 0
  2028                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  2029  02BE  3034               	movlw	52
  2030  02BF  0020               	movlb	0	; select bank0
  2031  02C0  00AB               	movwf	??_nrf24l01InitRegisters
  2032  02C1  30F1               	movlw	241
  2033  02C2                     u2137:	
  2034  02C2  0B89               	decfsz	9,f
  2035  02C3  2AC2               	goto	u2137
  2036  02C4  0BAB               	decfsz	??_nrf24l01InitRegisters,f
  2037  02C5  2AC2               	goto	u2137
  2038  02C6  3200               	nop2
  2039                           
  2040                           ;nrf24l01.c: 238: n_CONFIG_t config;
  2041                           ;nrf24l01.c: 239: config.PRIM_RX = 1;
  2042  02C7  0020               	movlb	0	; select bank0
  2043  02C8  142E               	bsf	nrf24l01InitRegisters@config,0
  2044                           
  2045                           ;nrf24l01.c: 240: config.EN_CRC = 1;
  2046  02C9  15AE               	bsf	nrf24l01InitRegisters@config,3
  2047                           
  2048                           ;nrf24l01.c: 241: config.CRCO = 1;
  2049  02CA  152E               	bsf	nrf24l01InitRegisters@config,2
  2050                           
  2051                           ;nrf24l01.c: 242: config.PWR_UP = 1;
  2052  02CB  14AE               	bsf	nrf24l01InitRegisters@config,1
  2053                           
  2054                           ;nrf24l01.c: 243: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2055  02CC  082E               	movf	nrf24l01InitRegisters@config,w
  2056  02CD  00AB               	movwf	??_nrf24l01InitRegisters
  2057  02CE  082B               	movf	??_nrf24l01InitRegisters,w
  2058  02CF  00A0               	movwf	nrf24l01Send@data
  2059  02D0  3020               	movlw	32
  2060  02D1  2745               	fcall	_nrf24l01Send
  2061                           
  2062                           ;nrf24l01.c: 262: n_RF_SETUP_t rfSetup;
  2063                           ;nrf24l01.c: 263: rfSetup.RF_DR_LOW = 0;
  2064  02D2  0020               	movlb	0	; select bank0
  2065  02D3  12AC               	bcf	nrf24l01InitRegisters@rfSetup,5
  2066                           
  2067                           ;nrf24l01.c: 264: rfSetup.RF_DR_HIGH = 1;
  2068  02D4  15AC               	bsf	nrf24l01InitRegisters@rfSetup,3
  2069                           
  2070                           ;nrf24l01.c: 265: rfSetup.RF_PWR = 3;
  2071  02D5  3006               	movlw	6
  2072  02D6  04AC               	iorwf	nrf24l01InitRegisters@rfSetup,f
  2073                           
  2074                           ;nrf24l01.c: 266: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  2075  02D7  082C               	movf	nrf24l01InitRegisters@rfSetup,w
  2076  02D8  00AB               	movwf	??_nrf24l01InitRegisters
  2077  02D9  082B               	movf	??_nrf24l01InitRegisters,w
  2078  02DA  00A0               	movwf	nrf24l01Send@data
  2079  02DB  3026               	movlw	38
  2080  02DC  2745               	fcall	_nrf24l01Send
  2081                           
  2082                           ;nrf24l01.c: 269: n_EN_RXADDR_t enRXAddr;
  2083                           ;nrf24l01.c: 270: enRXAddr.ERX_P0 = 1;
  2084  02DD  0020               	movlb	0	; select bank0
  2085  02DE  142F               	bsf	nrf24l01InitRegisters@enRXAddr,0
  2086                           
  2087                           ;nrf24l01.c: 271: enRXAddr.ERX_P1 = 1;
  2088  02DF  14AF               	bsf	nrf24l01InitRegisters@enRXAddr,1
  2089                           
  2090                           ;nrf24l01.c: 272: enRXAddr.ERX_P2 = 1;
  2091  02E0  152F               	bsf	nrf24l01InitRegisters@enRXAddr,2
  2092                           
  2093                           ;nrf24l01.c: 273: enRXAddr.ERX_P3 = 1;
  2094  02E1  15AF               	bsf	nrf24l01InitRegisters@enRXAddr,3
  2095                           
  2096                           ;nrf24l01.c: 274: enRXAddr.ERX_P4 = 1;
  2097  02E2  162F               	bsf	nrf24l01InitRegisters@enRXAddr,4
  2098                           
  2099                           ;nrf24l01.c: 275: enRXAddr.ERX_P5 = 1;
  2100  02E3  16AF               	bsf	nrf24l01InitRegisters@enRXAddr,5
  2101                           
  2102                           ;nrf24l01.c: 276: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  2103  02E4  082F               	movf	nrf24l01InitRegisters@enRXAddr,w
  2104  02E5  00AB               	movwf	??_nrf24l01InitRegisters
  2105  02E6  082B               	movf	??_nrf24l01InitRegisters,w
  2106  02E7  00A0               	movwf	nrf24l01Send@data
  2107  02E8  3022               	movlw	34
  2108  02E9  2745               	fcall	_nrf24l01Send
  2109                           
  2110                           ;nrf24l01.c: 279: n_EN_AA_t enAA;
  2111                           ;nrf24l01.c: 280: enAA.byte = nrf24l01Send(0b00000000 | 0x01, 0);
  2112  02EA  0020               	movlb	0	; select bank0
  2113  02EB  01A0               	clrf	nrf24l01Send@data
  2114  02EC  3001               	movlw	1
  2115  02ED  2745               	fcall	_nrf24l01Send
  2116  02EE  0020               	movlb	0	; select bank0
  2117  02EF  00AB               	movwf	??_nrf24l01InitRegisters
  2118  02F0  082B               	movf	??_nrf24l01InitRegisters,w
  2119  02F1  00B0               	movwf	nrf24l01InitRegisters@enAA
  2120                           
  2121                           ;nrf24l01.c: 281: enAA.ENAA_P0 = 0;
  2122  02F2  1030               	bcf	nrf24l01InitRegisters@enAA,0
  2123                           
  2124                           ;nrf24l01.c: 282: enAA.ENAA_P1 = 0;
  2125  02F3  10B0               	bcf	nrf24l01InitRegisters@enAA,1
  2126                           
  2127                           ;nrf24l01.c: 283: enAA.ENAA_P2 = 0;
  2128  02F4  1130               	bcf	nrf24l01InitRegisters@enAA,2
  2129                           
  2130                           ;nrf24l01.c: 284: enAA.ENAA_P3 = 0;
  2131  02F5  11B0               	bcf	nrf24l01InitRegisters@enAA,3
  2132                           
  2133                           ;nrf24l01.c: 285: enAA.ENAA_P4 = 0;
  2134  02F6  1230               	bcf	nrf24l01InitRegisters@enAA,4
  2135                           
  2136                           ;nrf24l01.c: 286: enAA.ENAA_P5 = 0;
  2137  02F7  12B0               	bcf	nrf24l01InitRegisters@enAA,5
  2138                           
  2139                           ;nrf24l01.c: 287: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  2140  02F8  0830               	movf	nrf24l01InitRegisters@enAA,w
  2141  02F9  00AB               	movwf	??_nrf24l01InitRegisters
  2142  02FA  082B               	movf	??_nrf24l01InitRegisters,w
  2143  02FB  00A0               	movwf	nrf24l01Send@data
  2144  02FC  3021               	movlw	33
  2145  02FD  2745               	fcall	_nrf24l01Send
  2146                           
  2147                           ;nrf24l01.c: 291: n_FEATURE_t feature;
  2148                           ;nrf24l01.c: 292: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  2149  02FE  0020               	movlb	0	; select bank0
  2150  02FF  01A0               	clrf	nrf24l01Send@data
  2151  0300  301D               	movlw	29
  2152  0301  2745               	fcall	_nrf24l01Send
  2153  0302  0020               	movlb	0	; select bank0
  2154  0303  00AB               	movwf	??_nrf24l01InitRegisters
  2155  0304  082B               	movf	??_nrf24l01InitRegisters,w
  2156  0305  00AD               	movwf	nrf24l01InitRegisters@feature
  2157                           
  2158                           ;nrf24l01.c: 293: feature.EN_DPL = 1;
  2159  0306  152D               	bsf	nrf24l01InitRegisters@feature,2
  2160                           
  2161                           ;nrf24l01.c: 294: feature.EN_DYN_ACK = 1;
  2162  0307  142D               	bsf	nrf24l01InitRegisters@feature,0
  2163                           
  2164                           ;nrf24l01.c: 295: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  2165  0308  082D               	movf	nrf24l01InitRegisters@feature,w
  2166  0309  00AB               	movwf	??_nrf24l01InitRegisters
  2167  030A  082B               	movf	??_nrf24l01InitRegisters,w
  2168  030B  00A0               	movwf	nrf24l01Send@data
  2169  030C  303D               	movlw	61
  2170  030D  2745               	fcall	_nrf24l01Send
  2171                           
  2172                           ;nrf24l01.c: 297: n_DYNPD_t DynPD;
  2173                           ;nrf24l01.c: 298: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  2174  030E  0020               	movlb	0	; select bank0
  2175  030F  01A0               	clrf	nrf24l01Send@data
  2176  0310  301C               	movlw	28
  2177  0311  2745               	fcall	_nrf24l01Send
  2178  0312  0020               	movlb	0	; select bank0
  2179  0313  00AB               	movwf	??_nrf24l01InitRegisters
  2180  0314  082B               	movf	??_nrf24l01InitRegisters,w
  2181  0315  00B1               	movwf	nrf24l01InitRegisters@DynPD
  2182                           
  2183                           ;nrf24l01.c: 299: DynPD.DPL_P0 = 1;
  2184  0316  1431               	bsf	nrf24l01InitRegisters@DynPD,0
  2185                           
  2186                           ;nrf24l01.c: 300: DynPD.DPL_P1 = 1;
  2187  0317  14B1               	bsf	nrf24l01InitRegisters@DynPD,1
  2188                           
  2189                           ;nrf24l01.c: 301: DynPD.DPL_P2 = 1;
  2190  0318  1531               	bsf	nrf24l01InitRegisters@DynPD,2
  2191                           
  2192                           ;nrf24l01.c: 302: DynPD.DPL_P3 = 1;
  2193  0319  15B1               	bsf	nrf24l01InitRegisters@DynPD,3
  2194                           
  2195                           ;nrf24l01.c: 303: DynPD.DPL_P4 = 1;
  2196  031A  1631               	bsf	nrf24l01InitRegisters@DynPD,4
  2197                           
  2198                           ;nrf24l01.c: 304: DynPD.DPL_P5 = 1;
  2199  031B  16B1               	bsf	nrf24l01InitRegisters@DynPD,5
  2200                           
  2201                           ;nrf24l01.c: 305: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  2202  031C  0831               	movf	nrf24l01InitRegisters@DynPD,w
  2203  031D  00AB               	movwf	??_nrf24l01InitRegisters
  2204  031E  082B               	movf	??_nrf24l01InitRegisters,w
  2205  031F  00A0               	movwf	nrf24l01Send@data
  2206  0320  303C               	movlw	60
  2207  0321  2745               	fcall	_nrf24l01Send
  2208                           
  2209                           ;nrf24l01.c: 308: nrf24l01.status.byte = 0x00;
  2210  0322  0020               	movlb	0	; select bank0
  2211  0323  01CC               	clrf	_nrf24l01	;volatile
  2212                           
  2213                           ;nrf24l01.c: 309: nrf24l01.status.RX_DR = 1;
  2214  0324  174C               	bsf	_nrf24l01,6	;volatile
  2215                           
  2216                           ;nrf24l01.c: 310: nrf24l01.status.TX_DS = 1;
  2217  0325  16CC               	bsf	_nrf24l01,5	;volatile
  2218                           
  2219                           ;nrf24l01.c: 311: nrf24l01.status.MAX_RT = 1;
  2220  0326  164C               	bsf	_nrf24l01,4	;volatile
  2221                           
  2222                           ;nrf24l01.c: 312: nrf24l01Send(0b00100000 | 0x07, nrf24l01.status.byte);
  2223  0327  084C               	movf	_nrf24l01,w	;volatile
  2224  0328  00AB               	movwf	??_nrf24l01InitRegisters
  2225  0329  082B               	movf	??_nrf24l01InitRegisters,w
  2226  032A  00A0               	movwf	nrf24l01Send@data
  2227  032B  3027               	movlw	39
  2228  032C  2745               	fcall	_nrf24l01Send
  2229                           
  2230                           ;nrf24l01.c: 315: nrf24l01Send(0b11100001, 0);
  2231  032D  0020               	movlb	0	; select bank0
  2232  032E  01A0               	clrf	nrf24l01Send@data
  2233  032F  30E1               	movlw	225
  2234  0330  2745               	fcall	_nrf24l01Send
  2235                           
  2236                           ;nrf24l01.c: 316: nrf24l01Send(0b11100010, 0);
  2237  0331  0020               	movlb	0	; select bank0
  2238  0332  01A0               	clrf	nrf24l01Send@data
  2239  0333  30E2               	movlw	226
  2240  0334  2745               	fcall	_nrf24l01Send
  2241  0335  0008               	return
  2242  0336                     __end_of_nrf24l01InitRegisters:	
  2243                           
  2244                           	psect	text5
  2245  0052                     __ptext5:	
  2246 ;; *************** function _loop *****************
  2247 ;; Defined at:
  2248 ;;		line 74 in file "main.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;		None
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;		None
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      void 
  2255 ;; Registers used:
  2256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMMON   BANK0   BANK1
  2262 ;;      Params:         0       0       0
  2263 ;;      Locals:         0       0       0
  2264 ;;      Temps:          0       0       4
  2265 ;;      Totals:         0       0       4
  2266 ;;Total ram usage:        4 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    9
  2269 ;; This function calls:
  2270 ;;		___lldiv
  2271 ;;		___lmul
  2272 ;;		__itoa
  2273 ;;		_nrf24l01SendString
  2274 ;;		_nrf24l01Service
  2275 ;;		_read_flashmem
  2276 ;;		_startADC
  2277 ;;		_strcpy
  2278 ;;		_strlen
  2279 ;; This function is called by:
  2280 ;;		_main
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           
  2285                           ;psect for function _loop
  2286  0052                     _loop:	
  2287  0052                     l2747:	
  2288                           ;main.c: 77: while (nrf24l01Service()){
  2289                           
  2290                           ;incstack = 0
  2291                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2292                           
  2293  0052  262A               	fcall	_nrf24l01Service
  2294  0053  3A00               	xorlw	0
  2295  0054  1903               	btfsc	3,2
  2296  0055  2860               	goto	l2749
  2297                           
  2298                           ;main.c: 78: _delay((unsigned long)((10000)*(16000000/4000000.0)));
  2299  0056  3034               	movlw	52
  2300  0057  0021               	movlb	1	; select bank1
  2301  0058  00A1               	movwf	??_loop^(0+128)
  2302  0059  30F1               	movlw	241
  2303  005A                     u2147:	
  2304  005A  0B89               	decfsz	9,f
  2305  005B  285A               	goto	u2147
  2306  005C  0BA1               	decfsz	??_loop^(0+128),f
  2307  005D  285A               	goto	u2147
  2308  005E  3200               	nop2
  2309  005F  2852               	goto	l2747
  2310  0060                     l2749:	
  2311                           
  2312                           ;main.c: 79: }
  2313                           ;main.c: 81: if (mode != 1) {
  2314  0060  0020               	movlb	0	; select bank0
  2315  0061  0363               	decf	_mode,w
  2316  0062  1903               	btfsc	3,2
  2317  0063  2A15               	goto	l2833
  2318  0064  0064               	clrwdt	;# 
  2319                           
  2320                           ;main.c: 83: }
  2321                           ;main.c: 85: switch (mode){
  2322  0065  2A15               	goto	l2833
  2323  0066                     l2753:	
  2324                           ;main.c: 87: case 1:
  2325                           
  2326                           
  2327                           ;main.c: 90: PORTAbits.RA5 = (unsigned) !PORTAbits.RA5;
  2328  0066  1003               	clrc
  2329  0067  0020               	movlb	0	; select bank0
  2330  0068  1E8C               	btfss	12,5	;volatile
  2331  0069  1403               	setc
  2332  006A  1C03               	btfss	3,0
  2333  006B  286F               	goto	u2000
  2334  006C  0020               	movlb	0	; select bank0
  2335  006D  168C               	bsf	12,5	;volatile
  2336  006E  2871               	goto	u2014
  2337  006F                     u2000:	
  2338  006F  0020               	movlb	0	; select bank0
  2339  0070  128C               	bcf	12,5	;volatile
  2340  0071                     u2014:	
  2341  0071  0063               	sleep	;# 
  2342                           
  2343                           ;main.c: 93: __nop();
  2344  0072  0000               	nop
  2345                           
  2346                           ;main.c: 94: __nop();
  2347  0073  0000               	nop
  2348                           
  2349                           ;main.c: 96: if (!STATUSbits.nTO && !STATUSbits.nPD){
  2350  0074  0020               	movlb	0	; select bank0
  2351  0075  1E03               	btfss	3,4	;volatile
  2352  0076  1983               	btfsc	3,3	;volatile
  2353  0077  287F               	goto	l2767
  2354                           
  2355                           ;main.c: 97: mode = nextMode;
  2356  0078  0864               	movf	_nextMode,w
  2357  0079  0021               	movlb	1	; select bank1
  2358  007A  00A1               	movwf	??_loop^(0+128)
  2359  007B  0821               	movf	??_loop^(0+128),w
  2360  007C  0020               	movlb	0	; select bank0
  2361  007D  00E3               	movwf	_mode
  2362                           
  2363                           ;main.c: 98: sleepLoop = 0;
  2364  007E  01D1               	clrf	_sleepLoop
  2365  007F                     l2767:	
  2366                           
  2367                           ;main.c: 99: }
  2368                           ;main.c: 101: nrf24l01Service();
  2369  007F  262A               	fcall	_nrf24l01Service
  2370                           
  2371                           ;main.c: 103: if (sleepLoop++ > 5){
  2372  0080  0020               	movlb	0	; select bank0
  2373  0081  0851               	movf	_sleepLoop,w
  2374  0082  0AD1               	incf	_sleepLoop,f
  2375  0083  0021               	movlb	1	; select bank1
  2376  0084  00A1               	movwf	??_loop^(0+128)
  2377  0085  3006               	movlw	6
  2378  0086  0221               	subwf	??_loop^(0+128),w
  2379  0087  1C03               	skipc
  2380  0088  0008               	return
  2381  0089  0001               	reset	;# 
  2382                           
  2383                           ;main.c: 105: }
  2384                           ;main.c: 106: break;
  2385  008A  0008               	return
  2386  008B                     l2773:	
  2387                           ;main.c: 108: case 10:
  2388                           
  2389                           
  2390                           ;main.c: 112: strcpy(string, "/BOOT/");
  2391  008B  3067               	movlw	low (STR_1| (0+32768))
  2392  008C  0020               	movlb	0	; select bank0
  2393  008D  00B3               	movwf	strcpy@from
  2394  008E  3087               	movlw	high (STR_1| (0+32768))
  2395  008F  00B4               	movwf	strcpy@from+1
  2396  0090  3053               	movlw	(low (_string| 0))& (0+255)
  2397  0091  2708               	fcall	_strcpy
  2398                           
  2399                           ;main.c: 113: _itoa(string + strlen(string), read_flashmem(16), 10);
  2400  0092  3010               	movlw	16
  2401  0093  0020               	movlb	0	; select bank0
  2402  0094  00AB               	movwf	read_flashmem@offset
  2403  0095  3000               	movlw	0
  2404  0096  00AC               	movwf	read_flashmem@offset+1
  2405  0097  2512               	fcall	_read_flashmem
  2406  0098  0020               	movlb	0	; select bank0
  2407  0099  082C               	movf	?_read_flashmem+1,w
  2408  009A  00C4               	movwf	__itoa@number+1
  2409  009B  082B               	movf	?_read_flashmem,w
  2410  009C  00C3               	movwf	__itoa@number
  2411  009D  300A               	movlw	10
  2412  009E  0021               	movlb	1	; select bank1
  2413  009F  00A1               	movwf	??_loop^(0+128)
  2414  00A0  0821               	movf	??_loop^(0+128),w
  2415  00A1  0020               	movlb	0	; select bank0
  2416  00A2  00C5               	movwf	__itoa@base
  2417  00A3  3053               	movlw	(low (_string| 0))& (0+255)
  2418  00A4  267E               	fcall	_strlen
  2419  00A5  0020               	movlb	0	; select bank0
  2420  00A6  082B               	movf	?_strlen,w
  2421  00A7  3E53               	addlw	(low (_string| 0))& (0+255)
  2422  00A8  2723               	fcall	__itoa
  2423                           
  2424                           ;main.c: 115: nrf24l01SendString(string, 0);
  2425  00A9  0020               	movlb	0	; select bank0
  2426  00AA  01B4               	clrf	nrf24l01SendString@waitForAck
  2427  00AB  3053               	movlw	(low (_string| 0))& (0+255)
  2428  00AC  2234               	fcall	_nrf24l01SendString
  2429                           
  2430                           ;main.c: 117: mode = 11;
  2431  00AD  300B               	movlw	11
  2432  00AE  0021               	movlb	1	; select bank1
  2433  00AF  00A1               	movwf	??_loop^(0+128)
  2434  00B0  0821               	movf	??_loop^(0+128),w
  2435  00B1  0020               	movlb	0	; select bank0
  2436  00B2  00E3               	movwf	_mode
  2437                           
  2438                           ;main.c: 118: break;
  2439  00B3  0008               	return
  2440  00B4                     l173:	
  2441                           ;main.c: 121: case 11:
  2442                           
  2443                           
  2444                           ;main.c: 122: mode = 1;
  2445  00B4  01E3               	clrf	_mode
  2446  00B5  0AE3               	incf	_mode,f
  2447                           
  2448                           ;main.c: 123: nextMode = 4;
  2449  00B6  3004               	movlw	4
  2450  00B7  0021               	movlb	1	; select bank1
  2451  00B8  00A1               	movwf	??_loop^(0+128)
  2452  00B9  0821               	movf	??_loop^(0+128),w
  2453  00BA  0020               	movlb	0	; select bank0
  2454  00BB  00E4               	movwf	_nextMode
  2455                           
  2456                           ;main.c: 124: break;
  2457  00BC  0008               	return
  2458  00BD                     l2783:	
  2459                           ;main.c: 126: case 4:
  2460                           
  2461                           
  2462                           ;main.c: 128: strcpy(string, "/COUNT/");
  2463  00BD  305F               	movlw	low (STR_2| (0+32768))
  2464  00BE  00B3               	movwf	strcpy@from
  2465  00BF  3087               	movlw	high (STR_2| (0+32768))
  2466  00C0  00B4               	movwf	strcpy@from+1
  2467  00C1  3053               	movlw	(low (_string| 0))& (0+255)
  2468  00C2  2708               	fcall	_strcpy
  2469                           
  2470                           ;main.c: 129: _itoa(string + strlen(string), counter, 10);
  2471  00C3  0020               	movlb	0	; select bank0
  2472  00C4  0850               	movf	_counter+1,w
  2473  00C5  00C4               	movwf	__itoa@number+1
  2474  00C6  084F               	movf	_counter,w
  2475  00C7  00C3               	movwf	__itoa@number
  2476  00C8  300A               	movlw	10
  2477  00C9  0021               	movlb	1	; select bank1
  2478  00CA  00A1               	movwf	??_loop^(0+128)
  2479  00CB  0821               	movf	??_loop^(0+128),w
  2480  00CC  0020               	movlb	0	; select bank0
  2481  00CD  00C5               	movwf	__itoa@base
  2482  00CE  3053               	movlw	(low (_string| 0))& (0+255)
  2483  00CF  267E               	fcall	_strlen
  2484  00D0  0020               	movlb	0	; select bank0
  2485  00D1  082B               	movf	?_strlen,w
  2486  00D2  3E53               	addlw	(low (_string| 0))& (0+255)
  2487  00D3  2723               	fcall	__itoa
  2488                           
  2489                           ;main.c: 131: nrf24l01SendString(string, 0);
  2490  00D4  0020               	movlb	0	; select bank0
  2491  00D5  01B4               	clrf	nrf24l01SendString@waitForAck
  2492  00D6  3053               	movlw	(low (_string| 0))& (0+255)
  2493  00D7  2234               	fcall	_nrf24l01SendString
  2494                           
  2495                           ;main.c: 133: mode = 12;
  2496  00D8  300C               	movlw	12
  2497  00D9  0021               	movlb	1	; select bank1
  2498  00DA  00A1               	movwf	??_loop^(0+128)
  2499  00DB  0821               	movf	??_loop^(0+128),w
  2500  00DC  0020               	movlb	0	; select bank0
  2501  00DD  00E3               	movwf	_mode
  2502                           
  2503                           ;main.c: 134: break;
  2504  00DE  0008               	return
  2505  00DF                     l2791:	
  2506                           ;main.c: 136: case 12:
  2507                           
  2508                           
  2509                           ;main.c: 137: startADC(3);
  2510  00DF  3003               	movlw	3
  2511  00E0  2574               	fcall	_startADC
  2512                           
  2513                           ;main.c: 146: nextMode = 13;
  2514  00E1  300D               	movlw	13
  2515  00E2  0021               	movlb	1	; select bank1
  2516  00E3  00A1               	movwf	??_loop^(0+128)
  2517  00E4  0821               	movf	??_loop^(0+128),w
  2518  00E5  0020               	movlb	0	; select bank0
  2519  00E6  00E4               	movwf	_nextMode
  2520                           
  2521                           ;main.c: 147: break;
  2522  00E7  0008               	return
  2523  00E8                     l2795:	
  2524                           ;main.c: 149: case 13:
  2525                           
  2526                           
  2527                           ;main.c: 150: startADC(7);
  2528  00E8  3007               	movlw	7
  2529  00E9  2574               	fcall	_startADC
  2530                           
  2531                           ;main.c: 151: nextMode = 15;
  2532  00EA  300F               	movlw	15
  2533  00EB  0021               	movlb	1	; select bank1
  2534  00EC  00A1               	movwf	??_loop^(0+128)
  2535  00ED  0821               	movf	??_loop^(0+128),w
  2536  00EE  0020               	movlb	0	; select bank0
  2537  00EF  00E4               	movwf	_nextMode
  2538                           
  2539                           ;main.c: 152: break;
  2540  00F0  0008               	return
  2541  00F1                     l2799:	
  2542                           ;main.c: 154: case 15:
  2543                           
  2544                           
  2545                           ;main.c: 155: startADC(29);
  2546  00F1  301D               	movlw	29
  2547  00F2  2574               	fcall	_startADC
  2548                           
  2549                           ;main.c: 156: nextMode = 14;
  2550  00F3  300E               	movlw	14
  2551  00F4  0021               	movlb	1	; select bank1
  2552  00F5  00A1               	movwf	??_loop^(0+128)
  2553  00F6  0821               	movf	??_loop^(0+128),w
  2554  00F7  0020               	movlb	0	; select bank0
  2555  00F8  00E4               	movwf	_nextMode
  2556                           
  2557                           ;main.c: 157: break;
  2558  00F9  0008               	return
  2559  00FA                     l2803:	
  2560                           ;main.c: 159: case 14:
  2561                           
  2562                           
  2563                           ;main.c: 160: startADC(31);
  2564  00FA  301F               	movlw	31
  2565  00FB  2574               	fcall	_startADC
  2566                           
  2567                           ;main.c: 161: nextMode = 11;
  2568  00FC  300B               	movlw	11
  2569  00FD  0021               	movlb	1	; select bank1
  2570  00FE  00A1               	movwf	??_loop^(0+128)
  2571  00FF  0821               	movf	??_loop^(0+128),w
  2572  0100  0020               	movlb	0	; select bank0
  2573  0101  00E4               	movwf	_nextMode
  2574                           
  2575                           ;main.c: 162: break;
  2576  0102  0008               	return
  2577  0103                     l2807:	
  2578                           ;main.c: 167: case 3:
  2579                           
  2580                           ;main.c: 166: switch (ADCON0bits.CHS){
  2581                           
  2582                           ;main.c: 164: case 3:
  2583                           
  2584                           
  2585                           ;main.c: 168: adcSum*= 100;
  2586  0103  3000               	movlw	0
  2587  0104  0020               	movlb	0	; select bank0
  2588  0105  00AE               	movwf	___lmul@multiplier+3
  2589  0106  3000               	movlw	0
  2590  0107  00AD               	movwf	___lmul@multiplier+2
  2591  0108  3000               	movlw	0
  2592  0109  00AC               	movwf	___lmul@multiplier+1
  2593  010A  3064               	movlw	100
  2594  010B  00AB               	movwf	___lmul@multiplier
  2595  010C  084B               	movf	_adcSum+3,w
  2596  010D  00B2               	movwf	___lmul@multiplicand+3
  2597  010E  084A               	movf	_adcSum+2,w
  2598  010F  00B1               	movwf	___lmul@multiplicand+2
  2599  0110  0849               	movf	_adcSum+1,w
  2600  0111  00B0               	movwf	___lmul@multiplicand+1
  2601  0112  0848               	movf	_adcSum,w
  2602  0113  00AF               	movwf	___lmul@multiplicand
  2603  0114  2544               	fcall	___lmul
  2604  0115  0020               	movlb	0	; select bank0
  2605  0116  082E               	movf	?___lmul+3,w
  2606  0117  00CB               	movwf	_adcSum+3
  2607  0118  082D               	movf	?___lmul+2,w
  2608  0119  00CA               	movwf	_adcSum+2
  2609  011A  082C               	movf	?___lmul+1,w
  2610  011B  00C9               	movwf	_adcSum+1
  2611  011C  082B               	movf	?___lmul,w
  2612  011D  00C8               	movwf	_adcSum
  2613                           
  2614                           ;main.c: 169: adcSum/= 2505;
  2615  011E  3000               	movlw	0
  2616  011F  00AE               	movwf	___lldiv@divisor+3
  2617  0120  3000               	movlw	0
  2618  0121  00AD               	movwf	___lldiv@divisor+2
  2619  0122  3009               	movlw	9
  2620  0123  00AC               	movwf	___lldiv@divisor+1
  2621  0124  30C9               	movlw	201
  2622  0125  29A8               	goto	L4
  2623  0126                     l2809:	
  2624                           ;main.c: 172: case 7:
  2625                           
  2626                           ;main.c: 170: break;
  2627                           
  2628                           
  2629                           ;main.c: 173: adcSum*= 100;
  2630  0126  3000               	movlw	0
  2631  0127  0020               	movlb	0	; select bank0
  2632  0128  00AE               	movwf	___lmul@multiplier+3
  2633  0129  3000               	movlw	0
  2634  012A  00AD               	movwf	___lmul@multiplier+2
  2635  012B  3000               	movlw	0
  2636  012C  00AC               	movwf	___lmul@multiplier+1
  2637  012D  3064               	movlw	100
  2638  012E  00AB               	movwf	___lmul@multiplier
  2639  012F  084B               	movf	_adcSum+3,w
  2640  0130  00B2               	movwf	___lmul@multiplicand+3
  2641  0131  084A               	movf	_adcSum+2,w
  2642  0132  00B1               	movwf	___lmul@multiplicand+2
  2643  0133  0849               	movf	_adcSum+1,w
  2644  0134  00B0               	movwf	___lmul@multiplicand+1
  2645  0135  0848               	movf	_adcSum,w
  2646  0136  00AF               	movwf	___lmul@multiplicand
  2647  0137  2544               	fcall	___lmul
  2648  0138  0020               	movlb	0	; select bank0
  2649  0139  082E               	movf	?___lmul+3,w
  2650  013A  00CB               	movwf	_adcSum+3
  2651  013B  082D               	movf	?___lmul+2,w
  2652  013C  00CA               	movwf	_adcSum+2
  2653  013D  082C               	movf	?___lmul+1,w
  2654  013E  00C9               	movwf	_adcSum+1
  2655  013F  082B               	movf	?___lmul,w
  2656  0140  00C8               	movwf	_adcSum
  2657                           
  2658                           ;main.c: 174: adcSum/= 2500;
  2659  0141  3000               	movlw	0
  2660  0142  00AE               	movwf	___lldiv@divisor+3
  2661  0143  3000               	movlw	0
  2662  0144  00AD               	movwf	___lldiv@divisor+2
  2663  0145  3009               	movlw	9
  2664  0146  00AC               	movwf	___lldiv@divisor+1
  2665  0147  30C4               	movlw	196
  2666  0148  29A8               	goto	L4
  2667  0149                     l2811:	
  2668                           ;main.c: 177: case 31:
  2669                           
  2670                           ;main.c: 175: break;
  2671                           
  2672                           
  2673                           ;main.c: 178: adcSum*= 100;
  2674  0149  3000               	movlw	0
  2675  014A  0020               	movlb	0	; select bank0
  2676  014B  00AE               	movwf	___lmul@multiplier+3
  2677  014C  3000               	movlw	0
  2678  014D  00AD               	movwf	___lmul@multiplier+2
  2679  014E  3000               	movlw	0
  2680  014F  00AC               	movwf	___lmul@multiplier+1
  2681  0150  3064               	movlw	100
  2682  0151  00AB               	movwf	___lmul@multiplier
  2683  0152  084B               	movf	_adcSum+3,w
  2684  0153  00B2               	movwf	___lmul@multiplicand+3
  2685  0154  084A               	movf	_adcSum+2,w
  2686  0155  00B1               	movwf	___lmul@multiplicand+2
  2687  0156  0849               	movf	_adcSum+1,w
  2688  0157  00B0               	movwf	___lmul@multiplicand+1
  2689  0158  0848               	movf	_adcSum,w
  2690  0159  00AF               	movwf	___lmul@multiplicand
  2691  015A  2544               	fcall	___lmul
  2692  015B  0020               	movlb	0	; select bank0
  2693  015C  082E               	movf	?___lmul+3,w
  2694  015D  00CB               	movwf	_adcSum+3
  2695  015E  082D               	movf	?___lmul+2,w
  2696  015F  00CA               	movwf	_adcSum+2
  2697  0160  082C               	movf	?___lmul+1,w
  2698  0161  00C9               	movwf	_adcSum+1
  2699  0162  082B               	movf	?___lmul,w
  2700  0163  00C8               	movwf	_adcSum
  2701                           
  2702                           ;main.c: 179: adcSum/= 2475;
  2703  0164  3000               	movlw	0
  2704  0165  00AE               	movwf	___lldiv@divisor+3
  2705  0166  3000               	movlw	0
  2706  0167  00AD               	movwf	___lldiv@divisor+2
  2707  0168  3009               	movlw	9
  2708  0169  00AC               	movwf	___lldiv@divisor+1
  2709  016A  30AB               	movlw	171
  2710  016B  29A8               	goto	L4
  2711  016C                     l2813:	
  2712                           ;main.c: 182: case 29:
  2713                           
  2714                           ;main.c: 180: break;
  2715                           
  2716                           
  2717                           ;main.c: 183: adcSum/= 2089;
  2718  016C  3000               	movlw	0
  2719  016D  0020               	movlb	0	; select bank0
  2720  016E  00AE               	movwf	___lldiv@divisor+3
  2721  016F  3000               	movlw	0
  2722  0170  00AD               	movwf	___lldiv@divisor+2
  2723  0171  3008               	movlw	8
  2724  0172  00AC               	movwf	___lldiv@divisor+1
  2725  0173  3029               	movlw	41
  2726  0174  00AB               	movwf	___lldiv@divisor
  2727  0175  084B               	movf	_adcSum+3,w
  2728  0176  00B2               	movwf	___lldiv@dividend+3
  2729  0177  084A               	movf	_adcSum+2,w
  2730  0178  00B1               	movwf	___lldiv@dividend+2
  2731  0179  0849               	movf	_adcSum+1,w
  2732  017A  00B0               	movwf	___lldiv@dividend+1
  2733  017B  0848               	movf	_adcSum,w
  2734  017C  00AF               	movwf	___lldiv@dividend
  2735  017D  2402               	fcall	___lldiv
  2736  017E  0020               	movlb	0	; select bank0
  2737  017F  082E               	movf	?___lldiv+3,w
  2738  0180  00CB               	movwf	_adcSum+3
  2739  0181  082D               	movf	?___lldiv+2,w
  2740  0182  00CA               	movwf	_adcSum+2
  2741  0183  082C               	movf	?___lldiv+1,w
  2742  0184  00C9               	movwf	_adcSum+1
  2743  0185  082B               	movf	?___lldiv,w
  2744  0186  00C8               	movwf	_adcSum
  2745                           
  2746                           ;main.c: 184: adcSum-= 40;
  2747  0187  3028               	movlw	40
  2748  0188  0021               	movlb	1	; select bank1
  2749  0189  00A1               	movwf	??_loop^(0+128)
  2750  018A  3000               	movlw	0
  2751  018B  00A2               	movwf	(??_loop^(0+128)+1)
  2752  018C  3000               	movlw	0
  2753  018D  00A3               	movwf	(??_loop^(0+128)+2)
  2754  018E  3000               	movlw	0
  2755  018F  00A4               	movwf	(??_loop^(0+128)+3)
  2756  0190  0821               	movf	??_loop^(0+128),w
  2757  0191  0020               	movlb	0	; select bank0
  2758  0192  02C8               	subwf	_adcSum,f
  2759  0193  0021               	movlb	1	; select bank1
  2760  0194  0822               	movf	(??_loop+1)^(0+128),w
  2761  0195  0020               	movlb	0	; select bank0
  2762  0196  3BC9               	subwfb	_adcSum+1,f
  2763  0197  0021               	movlb	1	; select bank1
  2764  0198  0823               	movf	(??_loop+2)^(0+128),w
  2765  0199  0020               	movlb	0	; select bank0
  2766  019A  3BCA               	subwfb	_adcSum+2,f
  2767  019B  0021               	movlb	1	; select bank1
  2768  019C  0824               	movf	(??_loop+3)^(0+128),w
  2769  019D  0020               	movlb	0	; select bank0
  2770  019E  3BCB               	subwfb	_adcSum+3,f
  2771                           
  2772                           ;main.c: 185: break;
  2773  019F  29CD               	goto	l2823
  2774  01A0                     l2817:	
  2775                           ;main.c: 187: default:
  2776                           
  2777                           
  2778                           ;main.c: 188: adcSum/= 255;
  2779  01A0  3000               	movlw	0
  2780  01A1  0020               	movlb	0	; select bank0
  2781  01A2  00AE               	movwf	___lldiv@divisor+3
  2782  01A3  3000               	movlw	0
  2783  01A4  00AD               	movwf	___lldiv@divisor+2
  2784  01A5  3000               	movlw	0
  2785  01A6  00AC               	movwf	___lldiv@divisor+1
  2786  01A7  30FF               	movlw	255
  2787  01A8                     L4:	
  2788  01A8  00AB               	movwf	___lldiv@divisor
  2789  01A9  084B               	movf	_adcSum+3,w
  2790  01AA  00B2               	movwf	___lldiv@dividend+3
  2791  01AB  084A               	movf	_adcSum+2,w
  2792  01AC  00B1               	movwf	___lldiv@dividend+2
  2793  01AD  0849               	movf	_adcSum+1,w
  2794  01AE  00B0               	movwf	___lldiv@dividend+1
  2795  01AF  0848               	movf	_adcSum,w
  2796  01B0  00AF               	movwf	___lldiv@dividend
  2797  01B1  2402               	fcall	___lldiv
  2798  01B2  0020               	movlb	0	; select bank0
  2799  01B3  082E               	movf	?___lldiv+3,w
  2800  01B4  00CB               	movwf	_adcSum+3
  2801  01B5  082D               	movf	?___lldiv+2,w
  2802  01B6  00CA               	movwf	_adcSum+2
  2803  01B7  082C               	movf	?___lldiv+1,w
  2804  01B8  00C9               	movwf	_adcSum+1
  2805  01B9  082B               	movf	?___lldiv,w
  2806  01BA  00C8               	movwf	_adcSum
  2807                           
  2808                           ;main.c: 190: }
  2809                           
  2810                           ;main.c: 189: break;
  2811  01BB  29CD               	goto	l2823
  2812  01BC                     l2821:	
  2813  01BC  0021               	movlb	1	; select bank1
  2814  01BD  0C1D               	rrf	29,w	;volatile
  2815  01BE  0C89               	rrf	9,f
  2816  01BF  391F               	andlw	31
  2817                           
  2818                           ; Switch size 1, requested type "space"
  2819                           ; Number of cases is 4, Range of values is 3 to 31
  2820                           ; switch strategies available:
  2821                           ; Name         Instructions Cycles
  2822                           ; simple_byte           13     7 (average)
  2823                           ; direct_byte           67     9 (fixed)
  2824                           ; jumptable            263     9 (fixed)
  2825                           ;	Chosen strategy is simple_byte
  2826  01C0  3A03               	xorlw	3	; case 3
  2827  01C1  1903               	skipnz
  2828  01C2  2903               	goto	l2807
  2829  01C3  3A04               	xorlw	4	; case 7
  2830  01C4  1903               	skipnz
  2831  01C5  2926               	goto	l2809
  2832  01C6  3A1A               	xorlw	26	; case 29
  2833  01C7  1903               	skipnz
  2834  01C8  296C               	goto	l2813
  2835  01C9  3A02               	xorlw	2	; case 31
  2836  01CA  1903               	skipnz
  2837  01CB  2949               	goto	l2811
  2838  01CC  29A0               	goto	l2817
  2839  01CD                     l2823:	
  2840                           
  2841                           ;main.c: 192: strcpy(string, "/ADC");
  2842  01CD  3087               	movlw	low (STR_3| (0+32768))
  2843  01CE  0020               	movlb	0	; select bank0
  2844  01CF  00B3               	movwf	strcpy@from
  2845  01D0  3087               	movlw	high (STR_3| (0+32768))
  2846  01D1  00B4               	movwf	strcpy@from+1
  2847  01D2  3053               	movlw	(low (_string| 0))& (0+255)
  2848  01D3  2708               	fcall	_strcpy
  2849                           
  2850                           ;main.c: 193: _itoa(string + strlen(string), ADCON0bits.CHS, 10);
  2851  01D4  0021               	movlb	1	; select bank1
  2852  01D5  0C1D               	rrf	29,w	;volatile
  2853  01D6  0C89               	rrf	9,f
  2854  01D7  391F               	andlw	31
  2855  01D8  00A1               	movwf	??_loop^(0+128)
  2856  01D9  01A2               	clrf	(??_loop^(0+128)+1)
  2857  01DA  0821               	movf	??_loop^(0+128),w
  2858  01DB  0020               	movlb	0	; select bank0
  2859  01DC  00C3               	movwf	__itoa@number
  2860  01DD  0021               	movlb	1	; select bank1
  2861  01DE  0822               	movf	(??_loop+1)^(0+128),w
  2862  01DF  0020               	movlb	0	; select bank0
  2863  01E0  00C4               	movwf	__itoa@number+1
  2864  01E1  300A               	movlw	10
  2865  01E2  0021               	movlb	1	; select bank1
  2866  01E3  00A3               	movwf	(??_loop+2)^(0+128)
  2867  01E4  0823               	movf	(??_loop+2)^(0+128),w
  2868  01E5  0020               	movlb	0	; select bank0
  2869  01E6  00C5               	movwf	__itoa@base
  2870  01E7  3053               	movlw	(low (_string| 0))& (0+255)
  2871  01E8  267E               	fcall	_strlen
  2872  01E9  0020               	movlb	0	; select bank0
  2873  01EA  082B               	movf	?_strlen,w
  2874  01EB  3E53               	addlw	(low (_string| 0))& (0+255)
  2875  01EC  2723               	fcall	__itoa
  2876                           
  2877                           ;main.c: 194: strcpy(string + strlen(string), "/");
  2878  01ED  3065               	movlw	low ((STR_2+6)| (0+32768))
  2879  01EE  0020               	movlb	0	; select bank0
  2880  01EF  00B3               	movwf	strcpy@from
  2881  01F0  3087               	movlw	high ((STR_2+6)| (0+32768))
  2882  01F1  00B4               	movwf	strcpy@from+1
  2883  01F2  3053               	movlw	(low (_string| 0))& (0+255)
  2884  01F3  267E               	fcall	_strlen
  2885  01F4  0020               	movlb	0	; select bank0
  2886  01F5  082B               	movf	?_strlen,w
  2887  01F6  3E53               	addlw	(low (_string| 0))& (0+255)
  2888  01F7  2708               	fcall	_strcpy
  2889                           
  2890                           ;main.c: 195: _itoa(string + strlen(string), adcSum, 10);
  2891  01F8  0020               	movlb	0	; select bank0
  2892  01F9  0849               	movf	_adcSum+1,w
  2893  01FA  00C4               	movwf	__itoa@number+1
  2894  01FB  0848               	movf	_adcSum,w
  2895  01FC  00C3               	movwf	__itoa@number
  2896  01FD  300A               	movlw	10
  2897  01FE  0021               	movlb	1	; select bank1
  2898  01FF  00A1               	movwf	??_loop^(0+128)
  2899  0200  0821               	movf	??_loop^(0+128),w
  2900  0201  0020               	movlb	0	; select bank0
  2901  0202  00C5               	movwf	__itoa@base
  2902  0203  3053               	movlw	(low (_string| 0))& (0+255)
  2903  0204  267E               	fcall	_strlen
  2904  0205  0020               	movlb	0	; select bank0
  2905  0206  082B               	movf	?_strlen,w
  2906  0207  3E53               	addlw	(low (_string| 0))& (0+255)
  2907  0208  2723               	fcall	__itoa
  2908                           
  2909                           ;main.c: 197: nrf24l01SendString(string, 0);
  2910  0209  0020               	movlb	0	; select bank0
  2911  020A  01B4               	clrf	nrf24l01SendString@waitForAck
  2912  020B  3053               	movlw	(low (_string| 0))& (0+255)
  2913  020C  2234               	fcall	_nrf24l01SendString
  2914                           
  2915                           ;main.c: 200: mode = nextMode;
  2916  020D  0020               	movlb	0	; select bank0
  2917  020E  0864               	movf	_nextMode,w
  2918  020F  0021               	movlb	1	; select bank1
  2919  0210  00A1               	movwf	??_loop^(0+128)
  2920  0211  0821               	movf	??_loop^(0+128),w
  2921  0212  0020               	movlb	0	; select bank0
  2922  0213  00E3               	movwf	_mode
  2923                           
  2924                           ;main.c: 203: }
  2925                           
  2926                           ;main.c: 201: break;
  2927  0214  0008               	return
  2928  0215                     l2833:	
  2929  0215  0020               	movlb	0	; select bank0
  2930  0216  0863               	movf	_mode,w
  2931                           
  2932                           ; Switch size 1, requested type "space"
  2933                           ; Number of cases is 9, Range of values is 1 to 15
  2934                           ; switch strategies available:
  2935                           ; Name         Instructions Cycles
  2936                           ; simple_byte           28    15 (average)
  2937                           ; direct_byte           39     9 (fixed)
  2938                           ; jumptable            263     9 (fixed)
  2939                           ;	Chosen strategy is simple_byte
  2940  0217  3A01               	xorlw	1	; case 1
  2941  0218  1903               	skipnz
  2942  0219  2866               	goto	l2753
  2943  021A  3A02               	xorlw	2	; case 3
  2944  021B  1903               	skipnz
  2945  021C  29BC               	goto	l2821
  2946  021D  3A07               	xorlw	7	; case 4
  2947  021E  1903               	skipnz
  2948  021F  28BD               	goto	l2783
  2949  0220  3A0E               	xorlw	14	; case 10
  2950  0221  1903               	skipnz
  2951  0222  288B               	goto	l2773
  2952  0223  3A01               	xorlw	1	; case 11
  2953  0224  1903               	skipnz
  2954  0225  28B4               	goto	l173
  2955  0226  3A07               	xorlw	7	; case 12
  2956  0227  1903               	skipnz
  2957  0228  28DF               	goto	l2791
  2958  0229  3A01               	xorlw	1	; case 13
  2959  022A  1903               	skipnz
  2960  022B  28E8               	goto	l2795
  2961  022C  3A03               	xorlw	3	; case 14
  2962  022D  1903               	skipnz
  2963  022E  28FA               	goto	l2803
  2964  022F  3A01               	xorlw	1	; case 15
  2965  0230  1903               	skipnz
  2966  0231  28F1               	goto	l2799
  2967  0232  2A33               	goto	l187
  2968  0233                     l187:	
  2969  0233  0008               	return
  2970  0234                     __end_of_loop:	
  2971                           
  2972                           	psect	text6
  2973  067E                     __ptext6:	
  2974 ;; *************** function _strlen *****************
  2975 ;; Defined at:
  2976 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;  s               1    wreg     PTR const unsigned char 
  2979 ;;		 -> string(16), 
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  s               1   18[BANK0 ] PTR const unsigned char 
  2982 ;;		 -> string(16), 
  2983 ;;  cp              1   17[BANK0 ] PTR const unsigned char 
  2984 ;;		 -> string(16), 
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  2   11[BANK0 ] unsigned int 
  2987 ;; Registers used:
  2988 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMMON   BANK0   BANK1
  2994 ;;      Params:         0       2       0
  2995 ;;      Locals:         0       2       0
  2996 ;;      Temps:          0       4       0
  2997 ;;      Totals:         0       8       0
  2998 ;;Total ram usage:        8 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    5
  3001 ;; This function calls:
  3002 ;;		Nothing
  3003 ;; This function is called by:
  3004 ;;		_loop
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           
  3009                           ;psect for function _strlen
  3010  067E                     _strlen:	
  3011                           
  3012                           ;incstack = 0
  3013                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  3014                           ;strlen@s stored from wreg
  3015  067E  0020               	movlb	0	; select bank0
  3016  067F  00B2               	movwf	strlen@s
  3017  0680  0832               	movf	strlen@s,w
  3018  0681  00AD               	movwf	??_strlen
  3019  0682  082D               	movf	??_strlen,w
  3020  0683  00B1               	movwf	strlen@cp
  3021  0684                     l2447:	
  3022  0684  0831               	movf	strlen@cp,w
  3023  0685  0086               	movwf	6
  3024  0686  0187               	clrf	7
  3025  0687  0801               	movf	1,w
  3026  0688  1903               	btfsc	3,2
  3027  0689  2E8F               	goto	l2449
  3028  068A  3001               	movlw	1
  3029  068B  00AD               	movwf	??_strlen
  3030  068C  082D               	movf	??_strlen,w
  3031  068D  07B1               	addwf	strlen@cp,f
  3032  068E  2E84               	goto	l2447
  3033  068F                     l2449:	
  3034  068F  0832               	movf	strlen@s,w
  3035  0690  00AD               	movwf	??_strlen
  3036  0691  3000               	movlw	0
  3037  0692  00AE               	movwf	??_strlen+1
  3038  0693  09AD               	comf	??_strlen,f
  3039  0694  09AE               	comf	??_strlen+1,f
  3040  0695  0AAD               	incf	??_strlen,f
  3041  0696  1903               	skipnz
  3042  0697  0AAE               	incf	??_strlen+1,f
  3043  0698  0831               	movf	strlen@cp,w
  3044  0699  00AF               	movwf	??_strlen+2
  3045  069A  3000               	movlw	0
  3046  069B  00B0               	movwf	??_strlen+3
  3047  069C  082D               	movf	??_strlen,w
  3048  069D  072F               	addwf	??_strlen+2,w
  3049  069E  00AB               	movwf	?_strlen
  3050  069F  082E               	movf	??_strlen+1,w
  3051  06A0  3D30               	addwfc	??_strlen+3,w
  3052  06A1  00AC               	movwf	?_strlen+1
  3053  06A2  0008               	return
  3054  06A3                     __end_of_strlen:	
  3055                           
  3056                           	psect	text7
  3057  0708                     __ptext7:	
  3058 ;; *************** function _strcpy *****************
  3059 ;; Defined at:
  3060 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  to              1    wreg     PTR unsigned char 
  3063 ;;		 -> string(16), 
  3064 ;;  from            2   19[BANK0 ] PTR const unsigned char 
  3065 ;;		 -> STR_4(2), STR_3(5), STR_2(8), STR_1(7), 
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;  to              1   23[BANK0 ] PTR unsigned char 
  3068 ;;		 -> string(16), 
  3069 ;;  cp              1   22[BANK0 ] PTR unsigned char 
  3070 ;;		 -> string(16), 
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  1    wreg      PTR unsigned char 
  3073 ;; Registers used:
  3074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMMON   BANK0   BANK1
  3080 ;;      Params:         0       2       0
  3081 ;;      Locals:         0       2       0
  3082 ;;      Temps:          0       1       0
  3083 ;;      Totals:         0       5       0
  3084 ;;Total ram usage:        5 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    5
  3087 ;; This function calls:
  3088 ;;		Nothing
  3089 ;; This function is called by:
  3090 ;;		_loop
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           
  3095                           ;psect for function _strcpy
  3096  0708                     _strcpy:	
  3097                           
  3098                           ;incstack = 0
  3099                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3100                           ;strcpy@to stored from wreg
  3101  0708  0020               	movlb	0	; select bank0
  3102  0709  00B7               	movwf	strcpy@to
  3103  070A  0837               	movf	strcpy@to,w
  3104  070B  00B5               	movwf	??_strcpy
  3105  070C  0835               	movf	??_strcpy,w
  3106  070D  00B6               	movwf	strcpy@cp
  3107  070E                     l2441:	
  3108  070E  0836               	movf	strcpy@cp,w
  3109  070F  0086               	movwf	6
  3110  0710  0187               	clrf	7
  3111  0711  0833               	movf	strcpy@from,w
  3112  0712  0084               	movwf	4
  3113  0713  0834               	movf	strcpy@from+1,w
  3114  0714  0085               	movwf	5
  3115  0715  0800               	movf	0,w	;code access
  3116  0716  3FC0               	movwi [0]fsr1
  3117  0717  0889               	movf	9,f
  3118  0718  1903               	btfsc	3,2
  3119  0719  0008               	return
  3120  071A  3001               	movlw	1
  3121  071B  00B5               	movwf	??_strcpy
  3122  071C  0835               	movf	??_strcpy,w
  3123  071D  07B6               	addwf	strcpy@cp,f
  3124  071E  3001               	movlw	1
  3125  071F  07B3               	addwf	strcpy@from,f
  3126  0720  3000               	movlw	0
  3127  0721  3DB4               	addwfc	strcpy@from+1,f
  3128  0722  2F0E               	goto	l2441
  3129  0723                     __end_of_strcpy:	
  3130                           ;	Return value of _strcpy is never used
  3131                           
  3132                           
  3133                           	psect	text8
  3134  0574                     __ptext8:	
  3135 ;; *************** function _startADC *****************
  3136 ;; Defined at:
  3137 ;;		line 62 in file "main.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;  channel         1    wreg     unsigned char 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  channel         1   12[BANK0 ] unsigned char 
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      void 
  3144 ;; Registers used:
  3145 ;;		wreg, status,2, status,0
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMMON   BANK0   BANK1
  3151 ;;      Params:         0       0       0
  3152 ;;      Locals:         0       1       0
  3153 ;;      Temps:          0       1       0
  3154 ;;      Totals:         0       2       0
  3155 ;;Total ram usage:        2 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    5
  3158 ;; This function calls:
  3159 ;;		Nothing
  3160 ;; This function is called by:
  3161 ;;		_loop
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           
  3166                           ;psect for function _startADC
  3167  0574                     _startADC:	
  3168                           
  3169                           ;incstack = 0
  3170                           ; Regs used in _startADC: [wreg+status,2+status,0]
  3171                           ;startADC@channel stored from wreg
  3172  0574  0020               	movlb	0	; select bank0
  3173  0575  00AC               	movwf	startADC@channel
  3174                           
  3175                           ;main.c: 63: adcSum = 0;
  3176  0576  3000               	movlw	0
  3177  0577  00CB               	movwf	_adcSum+3
  3178  0578  3000               	movlw	0
  3179  0579  00CA               	movwf	_adcSum+2
  3180  057A  3000               	movlw	0
  3181  057B  00C9               	movwf	_adcSum+1
  3182  057C  3000               	movlw	0
  3183  057D  00C8               	movwf	_adcSum
  3184                           
  3185                           ;main.c: 64: adcLoop = 255;
  3186  057E  30FF               	movlw	255
  3187  057F  00AB               	movwf	??_startADC
  3188  0580  082B               	movf	??_startADC,w
  3189  0581  00D2               	movwf	_adcLoop
  3190                           
  3191                           ;main.c: 66: if (ADCON0bits.CHS != channel) {
  3192  0582  0021               	movlb	1	; select bank1
  3193  0583  0C1D               	rrf	29,w	;volatile
  3194  0584  0C89               	rrf	9,f
  3195  0585  391F               	andlw	31
  3196  0586  0020               	movlb	0	; select bank0
  3197  0587  062C               	xorwf	startADC@channel,w
  3198  0588  1903               	skipnz
  3199  0589  2D9A               	goto	l2401
  3200                           
  3201                           ;main.c: 67: ADCON0bits.CHS = channel;
  3202  058A  082C               	movf	startADC@channel,w
  3203  058B  00AB               	movwf	??_startADC
  3204  058C  0DAB               	rlf	??_startADC,f
  3205  058D  0DAB               	rlf	??_startADC,f
  3206  058E  0021               	movlb	1	; select bank1
  3207  058F  081D               	movf	29,w	;volatile
  3208  0590  0020               	movlb	0	; select bank0
  3209  0591  062B               	xorwf	??_startADC,w
  3210  0592  3983               	andlw	-125
  3211  0593  062B               	xorwf	??_startADC,w
  3212  0594  0021               	movlb	1	; select bank1
  3213  0595  009D               	movwf	29	;volatile
  3214                           
  3215                           ;main.c: 68: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3216  0596  30A0               	movlw	160
  3217  0597                     u2157:	
  3218  0597  3200               	nop2
  3219  0598  0B89               	decfsz	9,f
  3220  0599  2D97               	goto	u2157
  3221  059A                     l2401:	
  3222                           
  3223                           ;main.c: 69: }
  3224                           ;main.c: 71: ADCON0bits.ADGO = 1;
  3225  059A  0021               	movlb	1	; select bank1
  3226  059B  149D               	bsf	29,1	;volatile
  3227                           
  3228                           ;main.c: 72: mode = 2;
  3229  059C  3002               	movlw	2
  3230  059D  0020               	movlb	0	; select bank0
  3231  059E  00AB               	movwf	??_startADC
  3232  059F  082B               	movf	??_startADC,w
  3233  05A0  00E3               	movwf	_mode
  3234  05A1  0008               	return
  3235  05A2                     __end_of_startADC:	
  3236                           
  3237                           	psect	text9
  3238  062A                     __ptext9:	
  3239 ;; *************** function _nrf24l01Service *****************
  3240 ;; Defined at:
  3241 ;;		line 125 in file "nrf24l01.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;		None
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;		None
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      unsigned char 
  3248 ;; Registers used:
  3249 ;;		wreg, status,2, status,0, pclath, cstack
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMMON   BANK0   BANK1
  3255 ;;      Params:         0       0       0
  3256 ;;      Locals:         0       0       0
  3257 ;;      Temps:          0       2       0
  3258 ;;      Totals:         0       2       0
  3259 ;;Total ram usage:        2 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    8
  3262 ;; This function calls:
  3263 ;;		_nrf24l01CheckACK
  3264 ;;		_nrf24l01SetMode
  3265 ;; This function is called by:
  3266 ;;		_loop
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           
  3271                           ;psect for function _nrf24l01Service
  3272  062A                     _nrf24l01Service:	
  3273                           
  3274                           ;nrf24l01.c: 128: if (nrf24l01.RXPending){
  3275                           
  3276                           ;incstack = 0
  3277                           ; Regs used in _nrf24l01Service: [wreg+status,2+status,0+pclath+cstack]
  3278  062A  0020               	movlb	0	; select bank0
  3279  062B  1E4E               	btfss	_nrf24l01+2,4	;volatile
  3280  062C  2E35               	goto	l255
  3281                           
  3282                           ;nrf24l01.c: 131: if (nrf24l01.waitForTXACK){
  3283  062D  1C4D               	btfss	_nrf24l01+1,0	;volatile
  3284  062E  2E34               	goto	l256
  3285                           
  3286                           ;nrf24l01.c: 132: nrf24l01CheckACK();
  3287  062F  278C               	fcall	_nrf24l01CheckACK
  3288                           
  3289                           ;nrf24l01.c: 135: if (!nrf24l01.waitForTXACK){
  3290  0630  0020               	movlb	0	; select bank0
  3291  0631  184D               	btfsc	_nrf24l01+1,0	;volatile
  3292  0632  2E34               	goto	l256
  3293                           
  3294                           ;nrf24l01.c: 136: nrf24l01.waitForTXACK = 0;
  3295  0633  104D               	bcf	_nrf24l01+1,0	;volatile
  3296  0634                     l256:	
  3297                           
  3298                           ;nrf24l01.c: 137: }
  3299                           ;nrf24l01.c: 138: }
  3300                           ;nrf24l01.c: 140: if (nrf24l01.waitForTXACK){
  3301  0634  084D               	movf	_nrf24l01+1,w	;volatile
  3302  0635                     l255:	
  3303                           
  3304                           ;nrf24l01.c: 142: }
  3305                           ;nrf24l01.c: 144: }
  3306                           ;nrf24l01.c: 147: if (nrf24l01.RXMode == 0){
  3307  0635  1ECE               	btfss	_nrf24l01+2,5	;volatile
  3308                           
  3309                           ;nrf24l01.c: 148: if (nrf24l01.waitForTXACK){
  3310  0636  1C4D               	btfss	_nrf24l01+1,0	;volatile
  3311  0637  2E3C               	goto	l2423
  3312                           
  3313                           ;nrf24l01.c: 151: nrf24l01.waitForTXACKCount = 0;
  3314  0638  30E1               	movlw	-31
  3315  0639  05CD               	andwf	_nrf24l01+1,f	;volatile
  3316                           
  3317                           ;nrf24l01.c: 152: nrf24l01.RXMode = 1;
  3318  063A  16CE               	bsf	_nrf24l01+2,5	;volatile
  3319                           
  3320                           ;nrf24l01.c: 153: nrf24l01SetMode();
  3321  063B  25D0               	fcall	_nrf24l01SetMode
  3322  063C                     l2423:	
  3323                           
  3324                           ;nrf24l01.c: 155: }
  3325                           ;nrf24l01.c: 156: }
  3326                           ;nrf24l01.c: 160: if (nrf24l01.RXMode == 1){
  3327  063C  0020               	movlb	0	; select bank0
  3328  063D  1ACE               	btfsc	_nrf24l01+2,5	;volatile
  3329                           
  3330                           ;nrf24l01.c: 161: if (nrf24l01.waitForTXACK){
  3331  063E  1C4D               	btfss	_nrf24l01+1,0	;volatile
  3332  063F  2E51               	goto	l2431
  3333                           
  3334                           ;nrf24l01.c: 162: if (++nrf24l01.waitForTXACKCount >= 10) {
  3335  0640  0C4D               	rrf	_nrf24l01+1,w	;volatile
  3336  0641  390F               	andlw	15
  3337  0642  00AD               	movwf	??_nrf24l01Service
  3338  0643  0AAD               	incf	??_nrf24l01Service,f
  3339  0644  0DAD               	rlf	??_nrf24l01Service,f
  3340  0645  084D               	movf	_nrf24l01+1,w	;volatile
  3341  0646  062D               	xorwf	??_nrf24l01Service,w
  3342  0647  39E1               	andlw	-31
  3343  0648  062D               	xorwf	??_nrf24l01Service,w
  3344  0649  00CD               	movwf	_nrf24l01+1	;volatile
  3345  064A  0C4D               	rrf	_nrf24l01+1,w	;volatile
  3346  064B  390F               	andlw	15
  3347  064C  00AE               	movwf	??_nrf24l01Service+1
  3348  064D  300A               	movlw	10
  3349  064E  022E               	subwf	??_nrf24l01Service+1,w
  3350  064F  1803               	btfsc	3,0
  3351                           
  3352                           ;nrf24l01.c: 163: nrf24l01.waitForTXACK = 0;
  3353  0650  104D               	bcf	_nrf24l01+1,0	;volatile
  3354  0651                     l2431:	
  3355                           
  3356                           ;nrf24l01.c: 164: }
  3357                           ;nrf24l01.c: 165: }
  3358                           ;nrf24l01.c: 166: }
  3359                           ;nrf24l01.c: 169: return nrf24l01.waitForTXACK;
  3360  0651  084D               	movf	_nrf24l01+1,w	;volatile
  3361  0652  3901               	andlw	1
  3362  0653  0008               	return
  3363  0654                     __end_of_nrf24l01Service:	
  3364                           
  3365                           	psect	text10
  3366  078C                     __ptext10:	
  3367 ;; *************** function _nrf24l01CheckACK *****************
  3368 ;; Defined at:
  3369 ;;		line 74 in file "nrf24l01.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;		None
  3372 ;; Auto vars:     Size  Location     Type
  3373 ;;		None
  3374 ;; Return value:  Size  Location     Type
  3375 ;;                  1    wreg      void 
  3376 ;; Registers used:
  3377 ;;		None
  3378 ;; Tracked objects:
  3379 ;;		On entry : 0/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMMON   BANK0   BANK1
  3383 ;;      Params:         0       0       0
  3384 ;;      Locals:         0       0       0
  3385 ;;      Temps:          0       0       0
  3386 ;;      Totals:         0       0       0
  3387 ;;Total ram usage:        0 bytes
  3388 ;; Hardware stack levels used:    1
  3389 ;; Hardware stack levels required when called:    5
  3390 ;; This function calls:
  3391 ;;		Nothing
  3392 ;; This function is called by:
  3393 ;;		_nrf24l01Service
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           
  3398                           ;psect for function _nrf24l01CheckACK
  3399  078C                     _nrf24l01CheckACK:	
  3400                           
  3401                           ;nrf24l01.c: 79: nrf24l01.RXPending = 0;
  3402                           
  3403                           ;incstack = 0
  3404                           ; Regs used in _nrf24l01CheckACK: []
  3405  078C  0020               	movlb	0	; select bank0
  3406  078D  124E               	bcf	_nrf24l01+2,4	;volatile
  3407  078E  0008               	return
  3408  078F                     __end_of_nrf24l01CheckACK:	
  3409                           
  3410                           	psect	text11
  3411  0234                     __ptext11:	
  3412 ;; *************** function _nrf24l01SendString *****************
  3413 ;; Defined at:
  3414 ;;		line 173 in file "nrf24l01.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  string          1    wreg     PTR unsigned char 
  3417 ;;		 -> string(16), 
  3418 ;;  waitForAck      1   20[BANK0 ] unsigned char 
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  string          1   25[BANK0 ] PTR unsigned char 
  3421 ;;		 -> string(16), 
  3422 ;;  i               1   26[BANK0 ] unsigned char 
  3423 ;;  btye            1   24[BANK0 ] unsigned char 
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  1    wreg      void 
  3426 ;; Registers used:
  3427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMMON   BANK0   BANK1
  3433 ;;      Params:         0       1       0
  3434 ;;      Locals:         0       3       0
  3435 ;;      Temps:          0       3       0
  3436 ;;      Totals:         0       7       0
  3437 ;;Total ram usage:        7 bytes
  3438 ;; Hardware stack levels used:    1
  3439 ;; Hardware stack levels required when called:    8
  3440 ;; This function calls:
  3441 ;;		_nrf24l01SPIEnd
  3442 ;;		_nrf24l01SPISend
  3443 ;;		_nrf24l01SPIStart
  3444 ;;		_nrf24l01SetMode
  3445 ;;		_read_flashmem
  3446 ;; This function is called by:
  3447 ;;		_loop
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           
  3452                           ;psect for function _nrf24l01SendString
  3453  0234                     _nrf24l01SendString:	
  3454                           
  3455                           ;incstack = 0
  3456                           ; Regs used in _nrf24l01SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3457                           ;nrf24l01SendString@string stored from wreg
  3458  0234  0020               	movlb	0	; select bank0
  3459  0235  00B9               	movwf	nrf24l01SendString@string
  3460                           
  3461                           ;nrf24l01.c: 175: nrf24l01.TXBusyCount = 0;
  3462  0236  30F0               	movlw	-16
  3463  0237  05CE               	andwf	_nrf24l01+2,f	;volatile
  3464  0238                     l2461:	
  3465                           ;nrf24l01.c: 176: while (nrf24l01.TXBusy){
  3466                           
  3467  0238  0020               	movlb	0	; select bank0
  3468  0239  1ECD               	btfss	_nrf24l01+1,5	;volatile
  3469  023A  2A59               	goto	l270
  3470                           
  3471                           ;nrf24l01.c: 177: if (++nrf24l01.TXBusyCount >= 5) {
  3472  023B  084E               	movf	_nrf24l01+2,w	;volatile
  3473  023C  390F               	andlw	15
  3474  023D  00B5               	movwf	??_nrf24l01SendString
  3475  023E  0AB5               	incf	??_nrf24l01SendString,f
  3476  023F  084E               	movf	_nrf24l01+2,w	;volatile
  3477  0240  0635               	xorwf	??_nrf24l01SendString,w
  3478  0241  39F0               	andlw	-16
  3479  0242  0635               	xorwf	??_nrf24l01SendString,w
  3480  0243  00CE               	movwf	_nrf24l01+2	;volatile
  3481  0244  084E               	movf	_nrf24l01+2,w	;volatile
  3482  0245  390F               	andlw	15
  3483  0246  00B6               	movwf	??_nrf24l01SendString+1
  3484  0247  3005               	movlw	5
  3485  0248  0236               	subwf	??_nrf24l01SendString+1,w
  3486  0249  1803               	btfsc	3,0
  3487                           
  3488                           ;nrf24l01.c: 178: nrf24l01.TXBusy = 0;
  3489  024A  12CD               	bcf	_nrf24l01+1,5	;volatile
  3490                           
  3491                           ;nrf24l01.c: 179: }
  3492                           ;nrf24l01.c: 180: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3493  024B  3002               	movlw	2
  3494  024C  0020               	movlb	0	; select bank0
  3495  024D  00B6               	movwf	??_nrf24l01SendString+1
  3496  024E  3004               	movlw	4
  3497  024F  00B5               	movwf	??_nrf24l01SendString
  3498  0250  30BA               	movlw	186
  3499  0251                     u2167:	
  3500  0251  0B89               	decfsz	9,f
  3501  0252  2A51               	goto	u2167
  3502  0253  0BB5               	decfsz	??_nrf24l01SendString,f
  3503  0254  2A51               	goto	u2167
  3504  0255  0BB6               	decfsz	??_nrf24l01SendString+1,f
  3505  0256  2A51               	goto	u2167
  3506  0257  0000               	nop
  3507  0258  2A38               	goto	l2461
  3508  0259                     l270:	
  3509                           
  3510                           ;nrf24l01.c: 181: }
  3511                           ;nrf24l01.c: 188: unsigned char btye;
  3512                           ;nrf24l01.c: 189: unsigned char i;
  3513                           ;nrf24l01.c: 191: nrf24l01.RXMode = 0;
  3514  0259  12CE               	bcf	_nrf24l01+2,5	;volatile
  3515                           
  3516                           ;nrf24l01.c: 192: nrf24l01SetMode();
  3517  025A  25D0               	fcall	_nrf24l01SetMode
  3518                           
  3519                           ;nrf24l01.c: 194: nrf24l01SPIStart();
  3520  025B  276E               	fcall	_nrf24l01SPIStart
  3521                           
  3522                           ;nrf24l01.c: 196: nrf24l01SPISend(0b10110000);
  3523  025C  30B0               	movlw	176
  3524  025D  2754               	fcall	_nrf24l01SPISend
  3525                           
  3526                           ;nrf24l01.c: 198: i = 0;
  3527  025E  0020               	movlb	0	; select bank0
  3528  025F  01BA               	clrf	nrf24l01SendString@i
  3529  0260                     l2467:	
  3530                           ;nrf24l01.c: 199: while (1){
  3531                           
  3532                           
  3533                           ;nrf24l01.c: 200: btye = read_flashmem((unsigned) 0 + i++);
  3534  0260  0020               	movlb	0	; select bank0
  3535  0261  083A               	movf	nrf24l01SendString@i,w
  3536  0262  00B5               	movwf	??_nrf24l01SendString
  3537  0263  01B6               	clrf	??_nrf24l01SendString+1
  3538  0264  0835               	movf	??_nrf24l01SendString,w
  3539  0265  00AB               	movwf	read_flashmem@offset
  3540  0266  0836               	movf	??_nrf24l01SendString+1,w
  3541  0267  00AC               	movwf	read_flashmem@offset+1
  3542  0268  2512               	fcall	_read_flashmem
  3543  0269  0020               	movlb	0	; select bank0
  3544  026A  082B               	movf	?_read_flashmem,w
  3545  026B  00B7               	movwf	??_nrf24l01SendString+2
  3546  026C  0837               	movf	??_nrf24l01SendString+2,w
  3547  026D  00B8               	movwf	nrf24l01SendString@btye
  3548  026E  3001               	movlw	1
  3549  026F  00B5               	movwf	??_nrf24l01SendString
  3550  0270  0835               	movf	??_nrf24l01SendString,w
  3551  0271  07BA               	addwf	nrf24l01SendString@i,f
  3552                           
  3553                           ;nrf24l01.c: 202: if (btye == '\0'){
  3554  0272  0838               	movf	nrf24l01SendString@btye,w
  3555  0273  1903               	btfsc	3,2
  3556  0274  2A78               	goto	l2477
  3557                           
  3558                           ;nrf24l01.c: 204: }
  3559                           ;nrf24l01.c: 206: nrf24l01SPISend(btye);
  3560                           
  3561                           ;nrf24l01.c: 203: break;
  3562  0275  0838               	movf	nrf24l01SendString@btye,w
  3563  0276  2754               	fcall	_nrf24l01SPISend
  3564  0277  2A60               	goto	l2467
  3565  0278                     l2477:	
  3566                           
  3567                           ;nrf24l01.c: 207: }
  3568                           ;nrf24l01.c: 209: for (i = 0; string[i] != '\0'; i++){
  3569  0278  0020               	movlb	0	; select bank0
  3570  0279  01BA               	clrf	nrf24l01SendString@i
  3571  027A                     l2483:	
  3572  027A  083A               	movf	nrf24l01SendString@i,w
  3573  027B  0739               	addwf	nrf24l01SendString@string,w
  3574  027C  00B5               	movwf	??_nrf24l01SendString
  3575  027D  0835               	movf	??_nrf24l01SendString,w
  3576  027E  0086               	movwf	6
  3577  027F  0187               	clrf	7
  3578  0280  0801               	movf	1,w
  3579  0281  1903               	btfsc	3,2
  3580  0282  2A91               	goto	l2485
  3581                           
  3582                           ;nrf24l01.c: 210: nrf24l01SPISend(string[i]);
  3583  0283  083A               	movf	nrf24l01SendString@i,w
  3584  0284  0739               	addwf	nrf24l01SendString@string,w
  3585  0285  00B5               	movwf	??_nrf24l01SendString
  3586  0286  0835               	movf	??_nrf24l01SendString,w
  3587  0287  0086               	movwf	6
  3588  0288  0187               	clrf	7
  3589  0289  0801               	movf	1,w
  3590  028A  2754               	fcall	_nrf24l01SPISend
  3591  028B  3001               	movlw	1
  3592  028C  0020               	movlb	0	; select bank0
  3593  028D  00B5               	movwf	??_nrf24l01SendString
  3594  028E  0835               	movf	??_nrf24l01SendString,w
  3595  028F  07BA               	addwf	nrf24l01SendString@i,f
  3596  0290  2A7A               	goto	l2483
  3597  0291                     l2485:	
  3598                           
  3599                           ;nrf24l01.c: 211: }
  3600                           ;nrf24l01.c: 213: nrf24l01SPIEnd();
  3601  0291  2775               	fcall	_nrf24l01SPIEnd
  3602                           
  3603                           ;nrf24l01.c: 215: nrf24l01.TXBusy = 1;
  3604  0292  0020               	movlb	0	; select bank0
  3605  0293  16CD               	bsf	_nrf24l01+1,5	;volatile
  3606                           
  3607                           ;nrf24l01.c: 216: nrf24l01.waitForTXACK = waitForAck;
  3608  0294  0C34               	rrf	nrf24l01SendString@waitForAck,w
  3609  0295  1C03               	skipc
  3610  0296  104D               	bcf	_nrf24l01+1,0	;volatile
  3611  0297  1803               	skipnc
  3612  0298  144D               	bsf	_nrf24l01+1,0	;volatile
  3613                           
  3614                           ;nrf24l01.c: 218: PORTAbits.RA0 = 1;
  3615  0299  140C               	bsf	12,0	;volatile
  3616                           
  3617                           ;nrf24l01.c: 220: _delay((unsigned long)((20)*(16000000/4000000.0)));
  3618  029A  301A               	movlw	26
  3619  029B                     u2177:	
  3620  029B  0B89               	decfsz	9,f
  3621  029C  2A9B               	goto	u2177
  3622  029D  3200               	nop2
  3623                           
  3624                           ;nrf24l01.c: 222: PORTAbits.RA0 = 0;
  3625  029E  0020               	movlb	0	; select bank0
  3626  029F  100C               	bcf	12,0	;volatile
  3627                           
  3628                           ;nrf24l01.c: 224: if (waitForAck){
  3629  02A0  0834               	movf	nrf24l01SendString@waitForAck,w
  3630  02A1  1903               	btfsc	3,2
  3631  02A2  0008               	return
  3632                           
  3633                           ;nrf24l01.c: 225: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3634  02A3  3002               	movlw	2
  3635  02A4  0020               	movlb	0	; select bank0
  3636  02A5  00B6               	movwf	??_nrf24l01SendString+1
  3637  02A6  3004               	movlw	4
  3638  02A7  00B5               	movwf	??_nrf24l01SendString
  3639  02A8  30BA               	movlw	186
  3640  02A9                     u2187:	
  3641  02A9  0B89               	decfsz	9,f
  3642  02AA  2AA9               	goto	u2187
  3643  02AB  0BB5               	decfsz	??_nrf24l01SendString,f
  3644  02AC  2AA9               	goto	u2187
  3645  02AD  0BB6               	decfsz	??_nrf24l01SendString+1,f
  3646  02AE  2AA9               	goto	u2187
  3647  02AF  0000               	nop
  3648                           
  3649                           ;nrf24l01.c: 226: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3650  02B0  3002               	movlw	2
  3651  02B1  0020               	movlb	0	; select bank0
  3652  02B2  00B6               	movwf	??_nrf24l01SendString+1
  3653  02B3  3004               	movlw	4
  3654  02B4  00B5               	movwf	??_nrf24l01SendString
  3655  02B5  30BA               	movlw	186
  3656  02B6                     u2197:	
  3657  02B6  0B89               	decfsz	9,f
  3658  02B7  2AB6               	goto	u2197
  3659  02B8  0BB5               	decfsz	??_nrf24l01SendString,f
  3660  02B9  2AB6               	goto	u2197
  3661  02BA  0BB6               	decfsz	??_nrf24l01SendString+1,f
  3662  02BB  2AB6               	goto	u2197
  3663  02BC  0000               	nop
  3664  02BD  0008               	return
  3665  02BE                     __end_of_nrf24l01SendString:	
  3666                           
  3667                           	psect	text12
  3668  0512                     __ptext12:	
  3669 ;; *************** function _read_flashmem *****************
  3670 ;; Defined at:
  3671 ;;		line 59 in file "flash.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;  offset          2   11[BANK0 ] unsigned int 
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  address         2   18[BANK0 ] unsigned int 
  3676 ;;  result          2   16[BANK0 ] unsigned int 
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  2   11[BANK0 ] unsigned int 
  3679 ;; Registers used:
  3680 ;;		wreg, status,2, status,0
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMMON   BANK0   BANK1
  3686 ;;      Params:         0       2       0
  3687 ;;      Locals:         0       4       0
  3688 ;;      Temps:          0       3       0
  3689 ;;      Totals:         0       9       0
  3690 ;;Total ram usage:        9 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:    5
  3693 ;; This function calls:
  3694 ;;		Nothing
  3695 ;; This function is called by:
  3696 ;;		_loop
  3697 ;;		_main
  3698 ;;		_nrf24l01SendString
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           
  3703                           ;psect for function _read_flashmem
  3704  0512                     _read_flashmem:	
  3705                           
  3706                           ;flash.c: 61: unsigned int address;
  3707                           ;flash.c: 63: INTCONbits.GIE = 0;
  3708                           
  3709                           ;incstack = 0
  3710                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  3711  0512  138B               	bcf	11,7	;volatile
  3712                           
  3713                           ;flash.c: 65: PMCON1 = 0x00;
  3714  0513  0023               	movlb	3	; select bank3
  3715  0514  0195               	clrf	21	;volatile
  3716                           
  3717                           ;flash.c: 67: address = (0x800U-32) + offset;
  3718  0515  0020               	movlb	0	; select bank0
  3719  0516  082B               	movf	read_flashmem@offset,w
  3720  0517  3EE0               	addlw	224
  3721  0518  00B2               	movwf	read_flashmem@address
  3722  0519  3007               	movlw	7
  3723  051A  3D2C               	addwfc	read_flashmem@offset+1,w
  3724  051B  00B3               	movwf	read_flashmem@address+1
  3725                           
  3726                           ;flash.c: 68: PMADRL = (char) (address >> 0);
  3727  051C  0832               	movf	read_flashmem@address,w
  3728  051D  0023               	movlb	3	; select bank3
  3729  051E  0091               	movwf	17	;volatile
  3730                           
  3731                           ;flash.c: 69: PMADRH = (char) (address >> 8);
  3732  051F  0020               	movlb	0	; select bank0
  3733  0520  0833               	movf	read_flashmem@address+1,w
  3734  0521  0023               	movlb	3	; select bank3
  3735  0522  0092               	movwf	18	;volatile
  3736                           
  3737                           ;flash.c: 71: PMCON1bits.RD = 1;
  3738  0523  1415               	bsf	21,0	;volatile
  3739                           
  3740                           ;flash.c: 73: __nop();
  3741  0524  0000               	nop
  3742                           
  3743                           ;flash.c: 74: __nop();
  3744  0525  0000               	nop
  3745                           
  3746                           ;flash.c: 76: unsigned int result = 0;
  3747  0526  0020               	movlb	0	; select bank0
  3748  0527  01B0               	clrf	read_flashmem@result
  3749  0528  01B1               	clrf	read_flashmem@result+1
  3750                           
  3751                           ;flash.c: 77: result = PMDATL;
  3752  0529  0023               	movlb	3	; select bank3
  3753  052A  0813               	movf	19,w	;volatile
  3754  052B  0020               	movlb	0	; select bank0
  3755  052C  00AD               	movwf	??_read_flashmem
  3756  052D  01AE               	clrf	??_read_flashmem+1
  3757  052E  082D               	movf	??_read_flashmem,w
  3758  052F  00B0               	movwf	read_flashmem@result
  3759  0530  082E               	movf	??_read_flashmem+1,w
  3760  0531  00B1               	movwf	read_flashmem@result+1
  3761                           
  3762                           ;flash.c: 78: result|= ( (unsigned) (PMDATH) << 8);
  3763  0532  0023               	movlb	3	; select bank3
  3764  0533  0814               	movf	20,w	;volatile
  3765  0534  0020               	movlb	0	; select bank0
  3766  0535  00AD               	movwf	??_read_flashmem
  3767  0536  01AE               	clrf	??_read_flashmem+1
  3768  0537  082D               	movf	??_read_flashmem,w
  3769  0538  00AE               	movwf	??_read_flashmem+1
  3770  0539  01AD               	clrf	??_read_flashmem
  3771  053A  082D               	movf	??_read_flashmem,w
  3772  053B  04B0               	iorwf	read_flashmem@result,f
  3773  053C  082E               	movf	??_read_flashmem+1,w
  3774  053D  04B1               	iorwf	read_flashmem@result+1,f
  3775                           
  3776                           ;flash.c: 80: INTCONbits.GIE = 1;
  3777  053E  178B               	bsf	11,7	;volatile
  3778                           
  3779                           ;flash.c: 82: return result;
  3780  053F  0831               	movf	read_flashmem@result+1,w
  3781  0540  00AC               	movwf	?_read_flashmem+1
  3782  0541  0830               	movf	read_flashmem@result,w
  3783  0542  00AB               	movwf	?_read_flashmem
  3784  0543  0008               	return
  3785  0544                     __end_of_read_flashmem:	
  3786                           
  3787                           	psect	text13
  3788  05D0                     __ptext13:	
  3789 ;; *************** function _nrf24l01SetMode *****************
  3790 ;; Defined at:
  3791 ;;		line 23 in file "nrf24l01.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;		None
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;  config          1   12[BANK0 ] struct .
  3796 ;; Return value:  Size  Location     Type
  3797 ;;                  1    wreg      void 
  3798 ;; Registers used:
  3799 ;;		wreg, status,2, status,0, pclath, cstack
  3800 ;; Tracked objects:
  3801 ;;		On entry : 0/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMMON   BANK0   BANK1
  3805 ;;      Params:         0       0       0
  3806 ;;      Locals:         0       1       0
  3807 ;;      Temps:          0       1       0
  3808 ;;      Totals:         0       2       0
  3809 ;;Total ram usage:        2 bytes
  3810 ;; Hardware stack levels used:    1
  3811 ;; Hardware stack levels required when called:    7
  3812 ;; This function calls:
  3813 ;;		_nrf24l01Send
  3814 ;; This function is called by:
  3815 ;;		_nrf24l01Service
  3816 ;;		_nrf24l01SendString
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           
  3821                           ;psect for function _nrf24l01SetMode
  3822  05D0                     _nrf24l01SetMode:	
  3823                           
  3824                           ;nrf24l01.c: 25: n_CONFIG_t config;
  3825                           ;nrf24l01.c: 26: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  3826                           
  3827                           ;incstack = 0
  3828                           ; Regs used in _nrf24l01SetMode: [wreg+status,2+status,0+pclath+cstack]
  3829  05D0  0020               	movlb	0	; select bank0
  3830  05D1  01A0               	clrf	nrf24l01Send@data
  3831  05D2  3000               	movlw	0
  3832  05D3  2745               	fcall	_nrf24l01Send
  3833  05D4  0020               	movlb	0	; select bank0
  3834  05D5  00AB               	movwf	??_nrf24l01SetMode
  3835  05D6  082B               	movf	??_nrf24l01SetMode,w
  3836  05D7  00AC               	movwf	nrf24l01SetMode@config
  3837                           
  3838                           ;nrf24l01.c: 28: if (config.PRIM_RX != nrf24l01.RXMode){
  3839  05D8  1ECE               	btfss	_nrf24l01+2,5	;volatile
  3840  05D9  2DDC               	goto	u1590
  3841  05DA  3001               	movlw	1
  3842  05DB  2DDD               	goto	u1592
  3843  05DC                     u1590:	
  3844  05DC  3000               	movlw	0
  3845  05DD                     u1592:	
  3846  05DD  00AB               	movwf	??_nrf24l01SetMode
  3847  05DE  1C2C               	btfss	nrf24l01SetMode@config,0
  3848  05DF  2DE2               	goto	u1600
  3849  05E0  3001               	movlw	1
  3850  05E1  2DE3               	goto	u1602
  3851  05E2                     u1600:	
  3852  05E2  3000               	movlw	0
  3853  05E3                     u1602:	
  3854  05E3  062B               	xorwf	??_nrf24l01SetMode,w
  3855  05E4  1903               	skipnz
  3856  05E5  0008               	return
  3857                           
  3858                           ;nrf24l01.c: 30: PORTAbits.RA0 = 0;
  3859  05E6  100C               	bcf	12,0	;volatile
  3860                           
  3861                           ;nrf24l01.c: 31: _delay((unsigned long)((130)*(16000000/4000000.0)));
  3862  05E7  30AD               	movlw	173
  3863  05E8                     u2207:	
  3864  05E8  0B89               	decfsz	9,f
  3865  05E9  2DE8               	goto	u2207
  3866  05EA  0000               	nop
  3867                           
  3868                           ;nrf24l01.c: 33: config.PRIM_RX = nrf24l01.RXMode;
  3869  05EB  0020               	movlb	0	; select bank0
  3870  05EC  102C               	bcf	nrf24l01SetMode@config,0
  3871  05ED  1ACE               	btfsc	_nrf24l01+2,5	;volatile
  3872  05EE  142C               	bsf	nrf24l01SetMode@config,0
  3873                           
  3874                           ;nrf24l01.c: 34: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3875  05EF  0020               	movlb	0	; select bank0
  3876  05F0  082C               	movf	nrf24l01SetMode@config,w
  3877  05F1  00AB               	movwf	??_nrf24l01SetMode
  3878  05F2  082B               	movf	??_nrf24l01SetMode,w
  3879  05F3  00A0               	movwf	nrf24l01Send@data
  3880  05F4  3020               	movlw	32
  3881  05F5  2745               	fcall	_nrf24l01Send
  3882                           
  3883                           ;nrf24l01.c: 36: PORTAbits.RA0 = 1;
  3884  05F6  0020               	movlb	0	; select bank0
  3885  05F7  140C               	bsf	12,0	;volatile
  3886                           
  3887                           ;nrf24l01.c: 37: _delay((unsigned long)((130)*(16000000/4000000.0)));
  3888  05F8  30AD               	movlw	173
  3889  05F9                     u2217:	
  3890  05F9  0B89               	decfsz	9,f
  3891  05FA  2DF9               	goto	u2217
  3892  05FB  0000               	nop
  3893  05FC  0008               	return
  3894  05FD                     __end_of_nrf24l01SetMode:	
  3895                           
  3896                           	psect	text14
  3897  0723                     __ptext14:	
  3898 ;; *************** function __itoa *****************
  3899 ;; Defined at:
  3900 ;;		line 51 in file "interface.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;  buffer          1    wreg     PTR unsigned char 
  3903 ;;		 -> string(16), 
  3904 ;;  number          2   35[BANK0 ] unsigned int 
  3905 ;;  base            1   37[BANK0 ] unsigned char 
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;  buffer          1    0[BANK1 ] PTR unsigned char 
  3908 ;;		 -> string(16), 
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  1    wreg      void 
  3911 ;; Registers used:
  3912 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMMON   BANK0   BANK1
  3918 ;;      Params:         0       3       0
  3919 ;;      Locals:         0       0       1
  3920 ;;      Temps:          0       2       0
  3921 ;;      Totals:         0       5       1
  3922 ;;Total ram usage:        6 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:    8
  3925 ;; This function calls:
  3926 ;;		_itoa
  3927 ;; This function is called by:
  3928 ;;		_loop
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           
  3933                           ;psect for function __itoa
  3934  0723                     __itoa:	
  3935                           
  3936                           ;incstack = 0
  3937                           ; Regs used in __itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3938                           ;__itoa@buffer stored from wreg
  3939  0723  0021               	movlb	1	; select bank1
  3940  0724  00A0               	movwf	__itoa@buffer^(0+128)
  3941                           
  3942                           ;interface.c: 52: itoa(buffer, number, base);
  3943  0725  0020               	movlb	0	; select bank0
  3944  0726  0844               	movf	__itoa@number+1,w
  3945  0727  00BD               	movwf	itoa@val+1
  3946  0728  0843               	movf	__itoa@number,w
  3947  0729  00BC               	movwf	itoa@val
  3948  072A  0845               	movf	__itoa@base,w
  3949  072B  00C6               	movwf	??__itoa
  3950  072C  01C7               	clrf	??__itoa+1
  3951  072D  0846               	movf	??__itoa,w
  3952  072E  00BE               	movwf	itoa@base
  3953  072F  0847               	movf	??__itoa+1,w
  3954  0730  00BF               	movwf	itoa@base+1
  3955  0731  0021               	movlb	1	; select bank1
  3956  0732  0820               	movf	__itoa@buffer^(0+128),w
  3957  0733  26C7               	fcall	_itoa
  3958  0734  0008               	return
  3959  0735                     __end_of__itoa:	
  3960                           
  3961                           	psect	text15
  3962  06C7                     __ptext15:	
  3963 ;; *************** function _itoa *****************
  3964 ;; Defined at:
  3965 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;  buf             1    wreg     PTR unsigned char 
  3968 ;;		 -> string(16), 
  3969 ;;  val             2   28[BANK0 ] int 
  3970 ;;  base            2   30[BANK0 ] int 
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;  buf             1   34[BANK0 ] PTR unsigned char 
  3973 ;;		 -> string(16), 
  3974 ;;  cp              1   33[BANK0 ] PTR unsigned char 
  3975 ;;		 -> string(16), 
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      PTR unsigned char 
  3978 ;; Registers used:
  3979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMMON   BANK0   BANK1
  3985 ;;      Params:         0       4       0
  3986 ;;      Locals:         0       2       0
  3987 ;;      Temps:          0       1       0
  3988 ;;      Totals:         0       7       0
  3989 ;;Total ram usage:        7 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    7
  3992 ;; This function calls:
  3993 ;;		_utoa
  3994 ;; This function is called by:
  3995 ;;		__itoa
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           
  4000                           ;psect for function _itoa
  4001  06C7                     _itoa:	
  4002                           
  4003                           ;incstack = 0
  4004                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4005                           ;itoa@buf stored from wreg
  4006  06C7  0020               	movlb	0	; select bank0
  4007  06C8  00C2               	movwf	itoa@buf
  4008  06C9  0842               	movf	itoa@buf,w
  4009  06CA  00C0               	movwf	??_itoa
  4010  06CB  0840               	movf	??_itoa,w
  4011  06CC  00C1               	movwf	itoa@cp
  4012  06CD  1FBD               	btfss	itoa@val+1,7
  4013  06CE  2EDF               	goto	l2353
  4014  06CF  302D               	movlw	45
  4015  06D0  00C0               	movwf	??_itoa
  4016  06D1  0842               	movf	itoa@buf,w
  4017  06D2  0086               	movwf	6
  4018  06D3  0187               	clrf	7
  4019  06D4  0840               	movf	??_itoa,w
  4020  06D5  0081               	movwf	1
  4021  06D6  3001               	movlw	1
  4022  06D7  00C0               	movwf	??_itoa
  4023  06D8  0840               	movf	??_itoa,w
  4024  06D9  07C2               	addwf	itoa@buf,f
  4025  06DA  09BC               	comf	itoa@val,f
  4026  06DB  09BD               	comf	itoa@val+1,f
  4027  06DC  0ABC               	incf	itoa@val,f
  4028  06DD  1903               	skipnz
  4029  06DE  0ABD               	incf	itoa@val+1,f
  4030  06DF                     l2353:	
  4031  06DF  083D               	movf	itoa@val+1,w
  4032  06E0  00B4               	movwf	utoa@val+1
  4033  06E1  083C               	movf	itoa@val,w
  4034  06E2  00B3               	movwf	utoa@val
  4035  06E3  083F               	movf	itoa@base+1,w
  4036  06E4  00B6               	movwf	utoa@base+1
  4037  06E5  083E               	movf	itoa@base,w
  4038  06E6  00B5               	movwf	utoa@base
  4039  06E7  0842               	movf	itoa@buf,w
  4040  06E8  23A6               	fcall	_utoa
  4041  06E9  0008               	return
  4042  06EA                     __end_of_itoa:	
  4043                           ;	Return value of _itoa is never used
  4044                           
  4045                           
  4046                           	psect	text16
  4047  03A6                     __ptext16:	
  4048 ;; *************** function _utoa *****************
  4049 ;; Defined at:
  4050 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;  buf             1    wreg     PTR unsigned char 
  4053 ;;		 -> string(16), 
  4054 ;;  val             2   19[BANK0 ] unsigned int 
  4055 ;;  base            2   21[BANK0 ] int 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  buf             1   27[BANK0 ] PTR unsigned char 
  4058 ;;		 -> string(16), 
  4059 ;;  v               2   24[BANK0 ] unsigned int 
  4060 ;;  c               1   26[BANK0 ] unsigned char 
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  1    wreg      PTR unsigned char 
  4063 ;; Registers used:
  4064 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMMON   BANK0   BANK1
  4070 ;;      Params:         0       4       0
  4071 ;;      Locals:         0       4       0
  4072 ;;      Temps:          0       1       0
  4073 ;;      Totals:         0       9       0
  4074 ;;Total ram usage:        9 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    6
  4077 ;; This function calls:
  4078 ;;		___lwdiv
  4079 ;;		___lwmod
  4080 ;; This function is called by:
  4081 ;;		_itoa
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           
  4086                           ;psect for function _utoa
  4087  03A6                     _utoa:	
  4088                           
  4089                           ;incstack = 0
  4090                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4091                           ;utoa@buf stored from wreg
  4092  03A6  0020               	movlb	0	; select bank0
  4093  03A7  00BB               	movwf	utoa@buf
  4094  03A8  0834               	movf	utoa@val+1,w
  4095  03A9  00B9               	movwf	utoa@v+1
  4096  03AA  0833               	movf	utoa@val,w
  4097  03AB  00B8               	movwf	utoa@v
  4098  03AC                     l2287:	
  4099  03AC  0836               	movf	utoa@base+1,w
  4100  03AD  00AC               	movwf	___lwdiv@divisor+1
  4101  03AE  0835               	movf	utoa@base,w
  4102  03AF  00AB               	movwf	___lwdiv@divisor
  4103  03B0  0839               	movf	utoa@v+1,w
  4104  03B1  00AE               	movwf	___lwdiv@dividend+1
  4105  03B2  0838               	movf	utoa@v,w
  4106  03B3  00AD               	movwf	___lwdiv@dividend
  4107  03B4  24DD               	fcall	___lwdiv
  4108  03B5  0020               	movlb	0	; select bank0
  4109  03B6  082C               	movf	?___lwdiv+1,w
  4110  03B7  00B9               	movwf	utoa@v+1
  4111  03B8  082B               	movf	?___lwdiv,w
  4112  03B9  00B8               	movwf	utoa@v
  4113  03BA  3001               	movlw	1
  4114  03BB  00B7               	movwf	??_utoa
  4115  03BC  0837               	movf	??_utoa,w
  4116  03BD  07BB               	addwf	utoa@buf,f
  4117  03BE  0838               	movf	utoa@v,w
  4118  03BF  0439               	iorwf	utoa@v+1,w
  4119  03C0  1D03               	btfss	3,2
  4120  03C1  2BAC               	goto	l2287
  4121  03C2  083B               	movf	utoa@buf,w
  4122  03C3  0086               	movwf	6
  4123  03C4  0187               	clrf	7
  4124  03C5  0181               	clrf	1
  4125  03C6  3001               	movlw	1
  4126  03C7  02BB               	subwf	utoa@buf,f
  4127  03C8                     l2297:	
  4128  03C8  0836               	movf	utoa@base+1,w
  4129  03C9  00AC               	movwf	___lwmod@divisor+1
  4130  03CA  0835               	movf	utoa@base,w
  4131  03CB  00AB               	movwf	___lwmod@divisor
  4132  03CC  0834               	movf	utoa@val+1,w
  4133  03CD  00AE               	movwf	___lwmod@dividend+1
  4134  03CE  0833               	movf	utoa@val,w
  4135  03CF  00AD               	movwf	___lwmod@dividend
  4136  03D0  25FD               	fcall	___lwmod
  4137  03D1  0020               	movlb	0	; select bank0
  4138  03D2  082B               	movf	?___lwmod,w
  4139  03D3  00B7               	movwf	??_utoa
  4140  03D4  0837               	movf	??_utoa,w
  4141  03D5  00BA               	movwf	utoa@c
  4142  03D6  0836               	movf	utoa@base+1,w
  4143  03D7  00AC               	movwf	___lwdiv@divisor+1
  4144  03D8  0835               	movf	utoa@base,w
  4145  03D9  00AB               	movwf	___lwdiv@divisor
  4146  03DA  0834               	movf	utoa@val+1,w
  4147  03DB  00AE               	movwf	___lwdiv@dividend+1
  4148  03DC  0833               	movf	utoa@val,w
  4149  03DD  00AD               	movwf	___lwdiv@dividend
  4150  03DE  24DD               	fcall	___lwdiv
  4151  03DF  0020               	movlb	0	; select bank0
  4152  03E0  082C               	movf	?___lwdiv+1,w
  4153  03E1  00B4               	movwf	utoa@val+1
  4154  03E2  082B               	movf	?___lwdiv,w
  4155  03E3  00B3               	movwf	utoa@val
  4156  03E4  300A               	movlw	10
  4157  03E5  023A               	subwf	utoa@c,w
  4158  03E6  1C03               	skipc
  4159  03E7  2BEC               	goto	l556
  4160  03E8  3007               	movlw	7
  4161  03E9  00B7               	movwf	??_utoa
  4162  03EA  0837               	movf	??_utoa,w
  4163  03EB  07BA               	addwf	utoa@c,f
  4164  03EC                     l556:	
  4165  03EC  3030               	movlw	48
  4166  03ED  00B7               	movwf	??_utoa
  4167  03EE  0837               	movf	??_utoa,w
  4168  03EF  07BA               	addwf	utoa@c,f
  4169  03F0  083A               	movf	utoa@c,w
  4170  03F1  00B7               	movwf	??_utoa
  4171  03F2  083B               	movf	utoa@buf,w
  4172  03F3  0086               	movwf	6
  4173  03F4  0187               	clrf	7
  4174  03F5  0837               	movf	??_utoa,w
  4175  03F6  0081               	movwf	1
  4176  03F7  3001               	movlw	1
  4177  03F8  02BB               	subwf	utoa@buf,f
  4178  03F9  0833               	movf	utoa@val,w
  4179  03FA  0434               	iorwf	utoa@val+1,w
  4180  03FB  1D03               	btfss	3,2
  4181  03FC  2BC8               	goto	l2297
  4182                           
  4183                           ;	Return value of _utoa is never used
  4184  03FD  3001               	movlw	1
  4185  03FE  00B7               	movwf	??_utoa
  4186  03FF  0837               	movf	??_utoa,w
  4187  0400  07BB               	addwf	utoa@buf,f
  4188  0401  0008               	return
  4189  0402                     __end_of_utoa:	
  4190                           
  4191                           	psect	text17
  4192  05FD                     __ptext17:	
  4193 ;; *************** function ___lwmod *****************
  4194 ;; Defined at:
  4195 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;  divisor         2   11[BANK0 ] unsigned int 
  4198 ;;  dividend        2   13[BANK0 ] unsigned int 
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;  counter         1   16[BANK0 ] unsigned char 
  4201 ;; Return value:  Size  Location     Type
  4202 ;;                  2   11[BANK0 ] unsigned int 
  4203 ;; Registers used:
  4204 ;;		wreg, status,2, status,0
  4205 ;; Tracked objects:
  4206 ;;		On entry : 0/0
  4207 ;;		On exit  : 0/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMMON   BANK0   BANK1
  4210 ;;      Params:         0       4       0
  4211 ;;      Locals:         0       1       0
  4212 ;;      Temps:          0       1       0
  4213 ;;      Totals:         0       6       0
  4214 ;;Total ram usage:        6 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    5
  4217 ;; This function calls:
  4218 ;;		Nothing
  4219 ;; This function is called by:
  4220 ;;		_utoa
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           
  4225                           ;psect for function ___lwmod
  4226  05FD                     ___lwmod:	
  4227                           
  4228                           ;incstack = 0
  4229                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4230  05FD  0020               	movlb	0	; select bank0
  4231  05FE  082B               	movf	___lwmod@divisor,w
  4232  05FF  042C               	iorwf	___lwmod@divisor+1,w
  4233  0600  1903               	btfsc	3,2
  4234  0601  2E25               	goto	l2267
  4235  0602  01B0               	clrf	___lwmod@counter
  4236  0603  0AB0               	incf	___lwmod@counter,f
  4237  0604                     l2257:	
  4238  0604  1BAC               	btfsc	___lwmod@divisor+1,7
  4239  0605  2E10               	goto	l2259
  4240  0606  3001               	movlw	1
  4241  0607                     u1495:	
  4242  0607  35AB               	lslf	___lwmod@divisor,f
  4243  0608  0DAC               	rlf	___lwmod@divisor+1,f
  4244  0609  0B89               	decfsz	9,f
  4245  060A  2E07               	goto	u1495
  4246  060B  3001               	movlw	1
  4247  060C  00AF               	movwf	??___lwmod
  4248  060D  082F               	movf	??___lwmod,w
  4249  060E  07B0               	addwf	___lwmod@counter,f
  4250  060F  2E04               	goto	l2257
  4251  0610                     l2259:	
  4252  0610  082C               	movf	___lwmod@divisor+1,w
  4253  0611  022E               	subwf	___lwmod@dividend+1,w
  4254  0612  1D03               	skipz
  4255  0613  2E16               	goto	u1515
  4256  0614  082B               	movf	___lwmod@divisor,w
  4257  0615  022D               	subwf	___lwmod@dividend,w
  4258  0616                     u1515:	
  4259  0616  1C03               	skipc
  4260  0617  2E1C               	goto	l2263
  4261  0618  082B               	movf	___lwmod@divisor,w
  4262  0619  02AD               	subwf	___lwmod@dividend,f
  4263  061A  082C               	movf	___lwmod@divisor+1,w
  4264  061B  3BAE               	subwfb	___lwmod@dividend+1,f
  4265  061C                     l2263:	
  4266  061C  3001               	movlw	1
  4267  061D                     u1525:	
  4268  061D  36AC               	lsrf	___lwmod@divisor+1,f
  4269  061E  0CAB               	rrf	___lwmod@divisor,f
  4270  061F  0B89               	decfsz	9,f
  4271  0620  2E1D               	goto	u1525
  4272  0621  3001               	movlw	1
  4273  0622  02B0               	subwf	___lwmod@counter,f
  4274  0623  1D03               	btfss	3,2
  4275  0624  2E10               	goto	l2259
  4276  0625                     l2267:	
  4277  0625  082E               	movf	___lwmod@dividend+1,w
  4278  0626  00AC               	movwf	?___lwmod+1
  4279  0627  082D               	movf	___lwmod@dividend,w
  4280  0628  00AB               	movwf	?___lwmod
  4281  0629  0008               	return
  4282  062A                     __end_of___lwmod:	
  4283                           
  4284                           	psect	text18
  4285  04DD                     __ptext18:	
  4286 ;; *************** function ___lwdiv *****************
  4287 ;; Defined at:
  4288 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;  divisor         2   11[BANK0 ] unsigned int 
  4291 ;;  dividend        2   13[BANK0 ] unsigned int 
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  quotient        2   17[BANK0 ] unsigned int 
  4294 ;;  counter         1   16[BANK0 ] unsigned char 
  4295 ;; Return value:  Size  Location     Type
  4296 ;;                  2   11[BANK0 ] unsigned int 
  4297 ;; Registers used:
  4298 ;;		wreg, status,2, status,0
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMMON   BANK0   BANK1
  4304 ;;      Params:         0       4       0
  4305 ;;      Locals:         0       3       0
  4306 ;;      Temps:          0       1       0
  4307 ;;      Totals:         0       8       0
  4308 ;;Total ram usage:        8 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    5
  4311 ;; This function calls:
  4312 ;;		Nothing
  4313 ;; This function is called by:
  4314 ;;		_utoa
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           
  4319                           ;psect for function ___lwdiv
  4320  04DD                     ___lwdiv:	
  4321                           
  4322                           ;incstack = 0
  4323                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4324  04DD  0020               	movlb	0	; select bank0
  4325  04DE  01B1               	clrf	___lwdiv@quotient
  4326  04DF  01B2               	clrf	___lwdiv@quotient+1
  4327  04E0  082B               	movf	___lwdiv@divisor,w
  4328  04E1  042C               	iorwf	___lwdiv@divisor+1,w
  4329  04E2  1903               	btfsc	3,2
  4330  04E3  2D0D               	goto	l2245
  4331  04E4  01B0               	clrf	___lwdiv@counter
  4332  04E5  0AB0               	incf	___lwdiv@counter,f
  4333  04E6                     l2233:	
  4334  04E6  1BAC               	btfsc	___lwdiv@divisor+1,7
  4335  04E7  2CF2               	goto	l2235
  4336  04E8  3001               	movlw	1
  4337  04E9                     u1425:	
  4338  04E9  35AB               	lslf	___lwdiv@divisor,f
  4339  04EA  0DAC               	rlf	___lwdiv@divisor+1,f
  4340  04EB  0B89               	decfsz	9,f
  4341  04EC  2CE9               	goto	u1425
  4342  04ED  3001               	movlw	1
  4343  04EE  00AF               	movwf	??___lwdiv
  4344  04EF  082F               	movf	??___lwdiv,w
  4345  04F0  07B0               	addwf	___lwdiv@counter,f
  4346  04F1  2CE6               	goto	l2233
  4347  04F2                     l2235:	
  4348  04F2  3001               	movlw	1
  4349  04F3                     u1445:	
  4350  04F3  35B1               	lslf	___lwdiv@quotient,f
  4351  04F4  0DB2               	rlf	___lwdiv@quotient+1,f
  4352  04F5  0B89               	decfsz	9,f
  4353  04F6  2CF3               	goto	u1445
  4354  04F7  082C               	movf	___lwdiv@divisor+1,w
  4355  04F8  022E               	subwf	___lwdiv@dividend+1,w
  4356  04F9  1D03               	skipz
  4357  04FA  2CFD               	goto	u1455
  4358  04FB  082B               	movf	___lwdiv@divisor,w
  4359  04FC  022D               	subwf	___lwdiv@dividend,w
  4360  04FD                     u1455:	
  4361  04FD  1C03               	skipc
  4362  04FE  2D04               	goto	l2241
  4363  04FF  082B               	movf	___lwdiv@divisor,w
  4364  0500  02AD               	subwf	___lwdiv@dividend,f
  4365  0501  082C               	movf	___lwdiv@divisor+1,w
  4366  0502  3BAE               	subwfb	___lwdiv@dividend+1,f
  4367  0503  1431               	bsf	___lwdiv@quotient,0
  4368  0504                     l2241:	
  4369  0504  3001               	movlw	1
  4370  0505                     u1465:	
  4371  0505  36AC               	lsrf	___lwdiv@divisor+1,f
  4372  0506  0CAB               	rrf	___lwdiv@divisor,f
  4373  0507  0B89               	decfsz	9,f
  4374  0508  2D05               	goto	u1465
  4375  0509  3001               	movlw	1
  4376  050A  02B0               	subwf	___lwdiv@counter,f
  4377  050B  1D03               	btfss	3,2
  4378  050C  2CF2               	goto	l2235
  4379  050D                     l2245:	
  4380  050D  0832               	movf	___lwdiv@quotient+1,w
  4381  050E  00AC               	movwf	?___lwdiv+1
  4382  050F  0831               	movf	___lwdiv@quotient,w
  4383  0510  00AB               	movwf	?___lwdiv
  4384  0511  0008               	return
  4385  0512                     __end_of___lwdiv:	
  4386                           
  4387                           	psect	text19
  4388  0544                     __ptext19:	
  4389 ;; *************** function ___lmul *****************
  4390 ;; Defined at:
  4391 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;  multiplier      4   11[BANK0 ] unsigned long 
  4394 ;;  multiplicand    4   15[BANK0 ] unsigned long 
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;  product         4   19[BANK0 ] unsigned long 
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  4   11[BANK0 ] unsigned long 
  4399 ;; Registers used:
  4400 ;;		wreg, status,2, status,0
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMMON   BANK0   BANK1
  4406 ;;      Params:         0       8       0
  4407 ;;      Locals:         0       4       0
  4408 ;;      Temps:          0       0       0
  4409 ;;      Totals:         0      12       0
  4410 ;;Total ram usage:       12 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    5
  4413 ;; This function calls:
  4414 ;;		Nothing
  4415 ;; This function is called by:
  4416 ;;		_loop
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420                           
  4421                           ;psect for function ___lmul
  4422  0544                     ___lmul:	
  4423                           
  4424                           ;incstack = 0
  4425                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4426  0544  3000               	movlw	0
  4427  0545  0020               	movlb	0	; select bank0
  4428  0546  00B6               	movwf	___lmul@product+3
  4429  0547  3000               	movlw	0
  4430  0548  00B5               	movwf	___lmul@product+2
  4431  0549  3000               	movlw	0
  4432  054A  00B4               	movwf	___lmul@product+1
  4433  054B  3000               	movlw	0
  4434  054C  00B3               	movwf	___lmul@product
  4435  054D                     l2617:	
  4436  054D  1C2B               	btfss	___lmul@multiplier,0
  4437  054E  2D57               	goto	l2621
  4438  054F  082F               	movf	___lmul@multiplicand,w
  4439  0550  07B3               	addwf	___lmul@product,f
  4440  0551  0830               	movf	___lmul@multiplicand+1,w
  4441  0552  3DB4               	addwfc	___lmul@product+1,f
  4442  0553  0831               	movf	___lmul@multiplicand+2,w
  4443  0554  3DB5               	addwfc	___lmul@product+2,f
  4444  0555  0832               	movf	___lmul@multiplicand+3,w
  4445  0556  3DB6               	addwfc	___lmul@product+3,f
  4446  0557                     l2621:	
  4447  0557  3001               	movlw	1
  4448  0558                     u1845:	
  4449  0558  35AF               	lslf	___lmul@multiplicand,f
  4450  0559  0DB0               	rlf	___lmul@multiplicand+1,f
  4451  055A  0DB1               	rlf	___lmul@multiplicand+2,f
  4452  055B  0DB2               	rlf	___lmul@multiplicand+3,f
  4453  055C  0B89               	decfsz	9,f
  4454  055D  2D58               	goto	u1845
  4455  055E  3001               	movlw	1
  4456  055F                     u1855:	
  4457  055F  36AE               	lsrf	___lmul@multiplier+3,f
  4458  0560  0CAD               	rrf	___lmul@multiplier+2,f
  4459  0561  0CAC               	rrf	___lmul@multiplier+1,f
  4460  0562  0CAB               	rrf	___lmul@multiplier,f
  4461  0563  0B89               	decfsz	9,f
  4462  0564  2D5F               	goto	u1855
  4463  0565  082E               	movf	___lmul@multiplier+3,w
  4464  0566  042D               	iorwf	___lmul@multiplier+2,w
  4465  0567  042C               	iorwf	___lmul@multiplier+1,w
  4466  0568  042B               	iorwf	___lmul@multiplier,w
  4467  0569  1D03               	skipz
  4468  056A  2D4D               	goto	l2617
  4469  056B  0836               	movf	___lmul@product+3,w
  4470  056C  00AE               	movwf	?___lmul+3
  4471  056D  0835               	movf	___lmul@product+2,w
  4472  056E  00AD               	movwf	?___lmul+2
  4473  056F  0834               	movf	___lmul@product+1,w
  4474  0570  00AC               	movwf	?___lmul+1
  4475  0571  0833               	movf	___lmul@product,w
  4476  0572  00AB               	movwf	?___lmul
  4477  0573  0008               	return
  4478  0574                     __end_of___lmul:	
  4479                           
  4480                           	psect	text20
  4481  0402                     __ptext20:	
  4482 ;; *************** function ___lldiv *****************
  4483 ;; Defined at:
  4484 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4485 ;; Parameters:    Size  Location     Type
  4486 ;;  divisor         4   11[BANK0 ] unsigned long 
  4487 ;;  dividend        4   15[BANK0 ] unsigned long 
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;  quotient        4   20[BANK0 ] unsigned long 
  4490 ;;  counter         1   24[BANK0 ] unsigned char 
  4491 ;; Return value:  Size  Location     Type
  4492 ;;                  4   11[BANK0 ] unsigned long 
  4493 ;; Registers used:
  4494 ;;		wreg, status,2, status,0
  4495 ;; Tracked objects:
  4496 ;;		On entry : 0/0
  4497 ;;		On exit  : 0/0
  4498 ;;		Unchanged: 0/0
  4499 ;; Data sizes:     COMMON   BANK0   BANK1
  4500 ;;      Params:         0       8       0
  4501 ;;      Locals:         0       5       0
  4502 ;;      Temps:          0       1       0
  4503 ;;      Totals:         0      14       0
  4504 ;;Total ram usage:       14 bytes
  4505 ;; Hardware stack levels used:    1
  4506 ;; Hardware stack levels required when called:    5
  4507 ;; This function calls:
  4508 ;;		Nothing
  4509 ;; This function is called by:
  4510 ;;		_loop
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           
  4515                           ;psect for function ___lldiv
  4516  0402                     ___lldiv:	
  4517                           
  4518                           ;incstack = 0
  4519                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4520  0402  3000               	movlw	0
  4521  0403  0020               	movlb	0	; select bank0
  4522  0404  00B7               	movwf	___lldiv@quotient+3
  4523  0405  3000               	movlw	0
  4524  0406  00B6               	movwf	___lldiv@quotient+2
  4525  0407  3000               	movlw	0
  4526  0408  00B5               	movwf	___lldiv@quotient+1
  4527  0409  3000               	movlw	0
  4528  040A  00B4               	movwf	___lldiv@quotient
  4529  040B  082E               	movf	___lldiv@divisor+3,w
  4530  040C  042D               	iorwf	___lldiv@divisor+2,w
  4531  040D  042C               	iorwf	___lldiv@divisor+1,w
  4532  040E  042B               	iorwf	___lldiv@divisor,w
  4533  040F  1903               	skipnz
  4534  0410  2C4C               	goto	l2649
  4535  0411  01B8               	clrf	___lldiv@counter
  4536  0412  0AB8               	incf	___lldiv@counter,f
  4537  0413                     l2635:	
  4538  0413  1BAE               	btfsc	___lldiv@divisor+3,7
  4539  0414  2C21               	goto	l2637
  4540  0415  3001               	movlw	1
  4541  0416                     u1885:	
  4542  0416  35AB               	lslf	___lldiv@divisor,f
  4543  0417  0DAC               	rlf	___lldiv@divisor+1,f
  4544  0418  0DAD               	rlf	___lldiv@divisor+2,f
  4545  0419  0DAE               	rlf	___lldiv@divisor+3,f
  4546  041A  0B89               	decfsz	9,f
  4547  041B  2C16               	goto	u1885
  4548  041C  3001               	movlw	1
  4549  041D  00B3               	movwf	??___lldiv
  4550  041E  0833               	movf	??___lldiv,w
  4551  041F  07B8               	addwf	___lldiv@counter,f
  4552  0420  2C13               	goto	l2635
  4553  0421                     l2637:	
  4554  0421  3001               	movlw	1
  4555  0422                     u1905:	
  4556  0422  35B4               	lslf	___lldiv@quotient,f
  4557  0423  0DB5               	rlf	___lldiv@quotient+1,f
  4558  0424  0DB6               	rlf	___lldiv@quotient+2,f
  4559  0425  0DB7               	rlf	___lldiv@quotient+3,f
  4560  0426  0B89               	decfsz	9,f
  4561  0427  2C22               	goto	u1905
  4562  0428  082E               	movf	___lldiv@divisor+3,w
  4563  0429  0232               	subwf	___lldiv@dividend+3,w
  4564  042A  1D03               	skipz
  4565  042B  2C36               	goto	u1915
  4566  042C  082D               	movf	___lldiv@divisor+2,w
  4567  042D  0231               	subwf	___lldiv@dividend+2,w
  4568  042E  1D03               	skipz
  4569  042F  2C36               	goto	u1915
  4570  0430  082C               	movf	___lldiv@divisor+1,w
  4571  0431  0230               	subwf	___lldiv@dividend+1,w
  4572  0432  1D03               	skipz
  4573  0433  2C36               	goto	u1915
  4574  0434  082B               	movf	___lldiv@divisor,w
  4575  0435  022F               	subwf	___lldiv@dividend,w
  4576  0436                     u1915:	
  4577  0436  1C03               	skipc
  4578  0437  2C41               	goto	l2645
  4579  0438  082B               	movf	___lldiv@divisor,w
  4580  0439  02AF               	subwf	___lldiv@dividend,f
  4581  043A  082C               	movf	___lldiv@divisor+1,w
  4582  043B  3BB0               	subwfb	___lldiv@dividend+1,f
  4583  043C  082D               	movf	___lldiv@divisor+2,w
  4584  043D  3BB1               	subwfb	___lldiv@dividend+2,f
  4585  043E  082E               	movf	___lldiv@divisor+3,w
  4586  043F  3BB2               	subwfb	___lldiv@dividend+3,f
  4587  0440  1434               	bsf	___lldiv@quotient,0
  4588  0441                     l2645:	
  4589  0441  3001               	movlw	1
  4590  0442                     u1925:	
  4591  0442  36AE               	lsrf	___lldiv@divisor+3,f
  4592  0443  0CAD               	rrf	___lldiv@divisor+2,f
  4593  0444  0CAC               	rrf	___lldiv@divisor+1,f
  4594  0445  0CAB               	rrf	___lldiv@divisor,f
  4595  0446  0B89               	decfsz	9,f
  4596  0447  2C42               	goto	u1925
  4597  0448  3001               	movlw	1
  4598  0449  02B8               	subwf	___lldiv@counter,f
  4599  044A  1D03               	btfss	3,2
  4600  044B  2C21               	goto	l2637
  4601  044C                     l2649:	
  4602  044C  0837               	movf	___lldiv@quotient+3,w
  4603  044D  00AE               	movwf	?___lldiv+3
  4604  044E  0836               	movf	___lldiv@quotient+2,w
  4605  044F  00AD               	movwf	?___lldiv+2
  4606  0450  0835               	movf	___lldiv@quotient+1,w
  4607  0451  00AC               	movwf	?___lldiv+1
  4608  0452  0834               	movf	___lldiv@quotient,w
  4609  0453  00AB               	movwf	?___lldiv
  4610  0454  0008               	return
  4611  0455                     __end_of___lldiv:	
  4612                           
  4613                           	psect	intentry
  4614  0004                     __pintentry:	
  4615 ;; *************** function _ISR *****************
  4616 ;; Defined at:
  4617 ;;		line 31 in file "main.c"
  4618 ;; Parameters:    Size  Location     Type
  4619 ;;		None
  4620 ;; Auto vars:     Size  Location     Type
  4621 ;;  result          2    9[BANK0 ] int 
  4622 ;; Return value:  Size  Location     Type
  4623 ;;                  1    wreg      void 
  4624 ;; Registers used:
  4625 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4626 ;; Tracked objects:
  4627 ;;		On entry : 0/0
  4628 ;;		On exit  : 0/0
  4629 ;;		Unchanged: 0/0
  4630 ;; Data sizes:     COMMON   BANK0   BANK1
  4631 ;;      Params:         0       0       0
  4632 ;;      Locals:         0       2       0
  4633 ;;      Temps:          0       4       0
  4634 ;;      Totals:         0       6       0
  4635 ;;Total ram usage:        6 bytes
  4636 ;; Hardware stack levels used:    1
  4637 ;; Hardware stack levels required when called:    4
  4638 ;; This function calls:
  4639 ;;		_nrf24l01ISR
  4640 ;; This function is called by:
  4641 ;;		Interrupt level 1
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645  0004                     _ISR:	
  4646                           
  4647                           ;incstack = 0
  4648  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4649                           
  4650                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4651  0005  3180               	pagesel	$
  4652  0006  0020               	movlb	0	; select bank0
  4653  0007  087F               	movf	127,w
  4654  0008  00A8               	movwf	??_ISR+3
  4655                           
  4656                           ;main.c: 32: if (PIR1bits.ADIF){
  4657  0009  1F11               	btfss	17,6	;volatile
  4658  000A  283B               	goto	i1l2865
  4659                           
  4660                           ;main.c: 34: if (mode == 2) {
  4661  000B  3002               	movlw	2
  4662  000C  0663               	xorwf	_mode,w
  4663  000D  1D03               	btfss	3,2
  4664  000E  283A               	goto	i1l2863
  4665                           
  4666                           ;main.c: 36: int result = 0x00;
  4667  000F  01A9               	clrf	ISR@result
  4668  0010  01AA               	clrf	ISR@result+1
  4669                           
  4670                           ;main.c: 37: result = ADRESL;
  4671  0011  0021               	movlb	1	; select bank1
  4672  0012  081B               	movf	27,w	;volatile
  4673  0013  0020               	movlb	0	; select bank0
  4674  0014  00A5               	movwf	??_ISR
  4675  0015  01A6               	clrf	??_ISR+1
  4676  0016  0825               	movf	??_ISR,w
  4677  0017  00A9               	movwf	ISR@result
  4678  0018  0826               	movf	??_ISR+1,w
  4679  0019  00AA               	movwf	ISR@result+1
  4680                           
  4681                           ;main.c: 38: result|= (ADRESH << 8);
  4682  001A  0021               	movlb	1	; select bank1
  4683  001B  081C               	movf	28,w	;volatile
  4684  001C  0020               	movlb	0	; select bank0
  4685  001D  00A5               	movwf	??_ISR
  4686  001E  01A6               	clrf	??_ISR+1
  4687  001F  0825               	movf	??_ISR,w
  4688  0020  00A6               	movwf	??_ISR+1
  4689  0021  01A5               	clrf	??_ISR
  4690  0022  0825               	movf	??_ISR,w
  4691  0023  04A9               	iorwf	ISR@result,f
  4692  0024  0826               	movf	??_ISR+1,w
  4693  0025  04AA               	iorwf	ISR@result+1,f
  4694                           
  4695                           ;main.c: 40: adcSum+= (unsigned) result;
  4696  0026  0829               	movf	ISR@result,w
  4697  0027  07C8               	addwf	_adcSum,f
  4698  0028  082A               	movf	ISR@result+1,w
  4699  0029  3DC9               	addwfc	_adcSum+1,f
  4700  002A  3000               	movlw	0
  4701  002B  3DCA               	addwfc	_adcSum+2,f
  4702  002C  3DCB               	addwfc	_adcSum+3,f
  4703                           
  4704                           ;main.c: 42: if (!adcLoop){
  4705  002D  0852               	movf	_adcLoop,w
  4706  002E  1D03               	btfss	3,2
  4707  002F  2835               	goto	i1l153
  4708                           
  4709                           ;main.c: 43: mode = 3;
  4710  0030  3003               	movlw	3
  4711  0031  00A5               	movwf	??_ISR
  4712  0032  0825               	movf	??_ISR,w
  4713  0033  00E3               	movwf	_mode
  4714                           
  4715                           ;main.c: 44: }else{
  4716  0034  2837               	goto	i1l2861
  4717  0035                     i1l153:	
  4718                           
  4719                           ;main.c: 46: ADCON0bits.ADGO = 1;
  4720  0035  0021               	movlb	1	; select bank1
  4721  0036  149D               	bsf	29,1	;volatile
  4722  0037                     i1l2861:	
  4723                           
  4724                           ;main.c: 47: }
  4725                           ;main.c: 49: adcLoop--;
  4726  0037  3001               	movlw	1
  4727  0038  0020               	movlb	0	; select bank0
  4728  0039  02D2               	subwf	_adcLoop,f
  4729  003A                     i1l2863:	
  4730                           
  4731                           ;main.c: 50: }
  4732                           ;main.c: 53: PIR1bits.ADIF = 0;
  4733  003A  1311               	bcf	17,6	;volatile
  4734  003B                     i1l2865:	
  4735                           
  4736                           ;main.c: 54: }
  4737                           ;main.c: 56: if (INTCONbits.INTF){
  4738  003B  1C8B               	btfss	11,1	;volatile
  4739  003C  283F               	goto	i1l156
  4740                           
  4741                           ;main.c: 57: nrf24l01ISR();
  4742  003D  25A2               	fcall	_nrf24l01ISR
  4743                           
  4744                           ;main.c: 58: INTCONbits.INTF = 0;
  4745  003E  108B               	bcf	11,1	;volatile
  4746  003F                     i1l156:	
  4747  003F  0020               	movlb	0	; select bank0
  4748  0040  0828               	movf	??_ISR+3,w
  4749  0041  00FF               	movwf	127
  4750  0042  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4751  0043  0009               	retfie
  4752  0044                     __end_of_ISR:	
  4753                           
  4754                           	psect	text22
  4755  05A2                     __ptext22:	
  4756 ;; *************** function _nrf24l01ISR *****************
  4757 ;; Defined at:
  4758 ;;		line 82 in file "nrf24l01.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;		None
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;  tempStatus      1    4[BANK0 ] struct .
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  1    wreg      void 
  4765 ;; Registers used:
  4766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMMON   BANK0   BANK1
  4772 ;;      Params:         0       0       0
  4773 ;;      Locals:         0       1       0
  4774 ;;      Temps:          1       0       0
  4775 ;;      Totals:         1       1       0
  4776 ;;Total ram usage:        2 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; Hardware stack levels required when called:    3
  4779 ;; This function calls:
  4780 ;;		_nrf24l01HandleRX
  4781 ;;		_nrf24l01Send
  4782 ;; This function is called by:
  4783 ;;		_ISR
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           
  4788                           ;psect for function _nrf24l01ISR
  4789  05A2                     _nrf24l01ISR:	
  4790                           
  4791                           ;nrf24l01.c: 84: counter++;
  4792                           
  4793                           ;incstack = 0
  4794                           ; Regs used in _nrf24l01ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4795  05A2  3001               	movlw	1
  4796  05A3  0020               	movlb	0	; select bank0
  4797  05A4  07CF               	addwf	_counter,f
  4798  05A5  3000               	movlw	0
  4799  05A6  3DD0               	addwfc	_counter+1,f
  4800                           
  4801                           ;nrf24l01.c: 86: n_STATUS_t tempStatus;
  4802                           ;nrf24l01.c: 87: nrf24l01.status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  4803  05A7  01A0               	clrf	nrf24l01Send@data
  4804  05A8  3007               	movlw	7
  4805  05A9  2745               	fcall	_nrf24l01Send
  4806  05AA  00FD               	movwf	??_nrf24l01ISR
  4807  05AB  087D               	movf	??_nrf24l01ISR,w
  4808  05AC  0020               	movlb	0	; select bank0
  4809  05AD  00CC               	movwf	_nrf24l01	;volatile
  4810                           
  4811                           ;nrf24l01.c: 90: if (nrf24l01.status.byte == 0x00){
  4812  05AE  084C               	movf	_nrf24l01,w	;volatile
  4813  05AF  1903               	btfsc	3,2
  4814  05B0  0001               	reset	;# 
  4815                           
  4816                           ;nrf24l01.c: 92: }
  4817                           ;nrf24l01.c: 95: if (nrf24l01.status.byte == 0xFF){
  4818  05B1  0020               	movlb	0	; select bank0
  4819  05B2  0A4C               	incf	_nrf24l01,w	;volatile
  4820  05B3  1903               	btfsc	3,2
  4821  05B4  0001               	reset	;# 
  4822                           
  4823                           ;nrf24l01.c: 97: }
  4824                           ;nrf24l01.c: 99: if (nrf24l01.status.TX_DS){
  4825  05B5  0020               	movlb	0	; select bank0
  4826  05B6  1ECC               	btfss	_nrf24l01,5	;volatile
  4827  05B7  2DC2               	goto	i1l2731
  4828                           
  4829                           ;nrf24l01.c: 102: tempStatus.byte = 0x00;
  4830  05B8  01A4               	clrf	nrf24l01ISR@tempStatus
  4831                           
  4832                           ;nrf24l01.c: 103: tempStatus.TX_DS = 1;
  4833  05B9  16A4               	bsf	nrf24l01ISR@tempStatus,5
  4834                           
  4835                           ;nrf24l01.c: 104: nrf24l01Send(0b00100000 | 0x07, tempStatus.byte);
  4836  05BA  0824               	movf	nrf24l01ISR@tempStatus,w
  4837  05BB  00FD               	movwf	??_nrf24l01ISR
  4838  05BC  087D               	movf	??_nrf24l01ISR,w
  4839  05BD  00A0               	movwf	nrf24l01Send@data
  4840  05BE  3027               	movlw	39
  4841  05BF  2745               	fcall	_nrf24l01Send
  4842                           
  4843                           ;nrf24l01.c: 108: nrf24l01.TXBusy = 0;
  4844  05C0  0020               	movlb	0	; select bank0
  4845  05C1  12CD               	bcf	_nrf24l01+1,5	;volatile
  4846  05C2                     i1l2731:	
  4847                           
  4848                           ;nrf24l01.c: 109: }
  4849                           ;nrf24l01.c: 113: if (nrf24l01.status.RX_DR){
  4850  05C2  1F4C               	btfss	_nrf24l01,6	;volatile
  4851  05C3  0008               	return
  4852                           
  4853                           ;nrf24l01.c: 116: tempStatus.byte = 0x00;
  4854  05C4  01A4               	clrf	nrf24l01ISR@tempStatus
  4855                           
  4856                           ;nrf24l01.c: 117: tempStatus.RX_DR = 1;
  4857  05C5  1724               	bsf	nrf24l01ISR@tempStatus,6
  4858                           
  4859                           ;nrf24l01.c: 118: nrf24l01Send(0b00100000 | 0x07, tempStatus.byte);
  4860  05C6  0824               	movf	nrf24l01ISR@tempStatus,w
  4861  05C7  00FD               	movwf	??_nrf24l01ISR
  4862  05C8  087D               	movf	??_nrf24l01ISR,w
  4863  05C9  00A0               	movwf	nrf24l01Send@data
  4864  05CA  3027               	movlw	39
  4865  05CB  2745               	fcall	_nrf24l01Send
  4866                           
  4867                           ;nrf24l01.c: 119: nrf24l01HandleRX();
  4868  05CC  2455               	fcall	_nrf24l01HandleRX
  4869                           
  4870                           ;nrf24l01.c: 121: nrf24l01.RXPending = 1;
  4871  05CD  0020               	movlb	0	; select bank0
  4872  05CE  164E               	bsf	_nrf24l01+2,4	;volatile
  4873  05CF  0008               	return
  4874  05D0                     __end_of_nrf24l01ISR:	
  4875                           
  4876                           	psect	text23
  4877  0455                     __ptext23:	
  4878 ;; *************** function _nrf24l01HandleRX *****************
  4879 ;; Defined at:
  4880 ;;		line 43 in file "nrf24l01.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;		None
  4883 ;; Auto vars:     Size  Location     Type
  4884 ;;  i               1    3[BANK0 ] unsigned char 
  4885 ;;  byte            1    2[BANK0 ] unsigned char 
  4886 ;;  width           1    1[BANK0 ] unsigned char 
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  1    wreg      void 
  4889 ;; Registers used:
  4890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMMON   BANK0   BANK1
  4896 ;;      Params:         0       0       0
  4897 ;;      Locals:         0       3       0
  4898 ;;      Temps:          4       0       0
  4899 ;;      Totals:         4       3       0
  4900 ;;Total ram usage:        7 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; Hardware stack levels required when called:    2
  4903 ;; This function calls:
  4904 ;;		_nrf24l01SPISend
  4905 ;;		_nrf24l01Send
  4906 ;;		i1_read_flashmem
  4907 ;;		i1_strlen
  4908 ;; This function is called by:
  4909 ;;		_nrf24l01ISR
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           
  4914                           ;psect for function _nrf24l01HandleRX
  4915  0455                     _nrf24l01HandleRX:	
  4916                           
  4917                           ;nrf24l01.c: 46: unsigned char byte;
  4918                           ;nrf24l01.c: 47: unsigned char i;
  4919                           ;nrf24l01.c: 49: unsigned char width = nrf24l01Send(0b01100000, 0);
  4920                           
  4921                           ;incstack = 0
  4922                           ; Regs used in _nrf24l01HandleRX: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4923  0455  0020               	movlb	0	; select bank0
  4924  0456  01A0               	clrf	nrf24l01Send@data
  4925  0457  3060               	movlw	96
  4926  0458  2745               	fcall	_nrf24l01Send
  4927  0459  00F9               	movwf	??_nrf24l01HandleRX
  4928  045A  0879               	movf	??_nrf24l01HandleRX,w
  4929  045B  0020               	movlb	0	; select bank0
  4930  045C  00A1               	movwf	nrf24l01HandleRX@width
  4931                           
  4932                           ;nrf24l01.c: 51: i = 0;
  4933  045D  01A3               	clrf	nrf24l01HandleRX@i
  4934  045E                     i1l2517:	
  4935                           ;nrf24l01.c: 52: while (i < width){
  4936                           
  4937  045E  0821               	movf	nrf24l01HandleRX@width,w
  4938  045F  0223               	subwf	nrf24l01HandleRX@i,w
  4939  0460  1803               	btfsc	3,0
  4940  0461  2C9C               	goto	i1l2525
  4941                           
  4942                           ;nrf24l01.c: 53: byte = nrf24l01SPISend(0);
  4943  0462  3000               	movlw	0
  4944  0463  2754               	fcall	_nrf24l01SPISend
  4945  0464  00F9               	movwf	??_nrf24l01HandleRX
  4946  0465  0879               	movf	??_nrf24l01HandleRX,w
  4947  0466  0020               	movlb	0	; select bank0
  4948  0467  00A2               	movwf	nrf24l01HandleRX@byte
  4949                           
  4950                           ;nrf24l01.c: 55: if (byte == '/'){
  4951  0468  302F               	movlw	47
  4952  0469  0622               	xorwf	nrf24l01HandleRX@byte,w
  4953  046A  1903               	btfsc	3,2
  4954  046B  2C9C               	goto	i1l2525
  4955                           
  4956                           ;nrf24l01.c: 57: }
  4957                           ;nrf24l01.c: 59: if (byte != read_flashmem( (unsigned) 0 + i)){
  4958                           
  4959                           ;nrf24l01.c: 56: break;
  4960  046C  0823               	movf	nrf24l01HandleRX@i,w
  4961  046D  00F9               	movwf	??_nrf24l01HandleRX
  4962  046E  01FA               	clrf	??_nrf24l01HandleRX+1
  4963  046F  0879               	movf	??_nrf24l01HandleRX,w
  4964  0470  00F0               	movwf	i1read_flashmem@offset
  4965  0471  087A               	movf	??_nrf24l01HandleRX+1,w
  4966  0472  00F1               	movwf	i1read_flashmem@offset+1
  4967  0473  2654               	fcall	i1_read_flashmem
  4968  0474  0020               	movlb	0	; select bank0
  4969  0475  0822               	movf	nrf24l01HandleRX@byte,w
  4970  0476  00FB               	movwf	??_nrf24l01HandleRX+2
  4971  0477  01FC               	clrf	??_nrf24l01HandleRX+3
  4972  0478  0871               	movf	?i1_read_flashmem+1,w
  4973  0479  067C               	xorwf	??_nrf24l01HandleRX+3,w
  4974  047A  1D03               	skipz
  4975  047B  2C7E               	goto	u180_25
  4976  047C  0870               	movf	?i1_read_flashmem,w
  4977  047D  067B               	xorwf	??_nrf24l01HandleRX+2,w
  4978  047E                     u180_25:	
  4979  047E  1903               	skipnz
  4980  047F  2C82               	goto	i1l2515
  4981                           
  4982                           ;nrf24l01.c: 60: nrf24l01.RXPending = 0;
  4983  0480  124E               	bcf	_nrf24l01+2,4	;volatile
  4984                           
  4985                           ;nrf24l01.c: 61: return;
  4986  0481  0008               	return
  4987  0482                     i1l2515:	
  4988                           
  4989                           ;nrf24l01.c: 62: }
  4990                           ;nrf24l01.c: 64: i++;
  4991  0482  3001               	movlw	1
  4992  0483  00F9               	movwf	??_nrf24l01HandleRX
  4993  0484  0879               	movf	??_nrf24l01HandleRX,w
  4994  0485  07A3               	addwf	nrf24l01HandleRX@i,f
  4995  0486  2C5E               	goto	i1l2517
  4996  0487                     i1l2519:	
  4997                           ;nrf24l01.c: 65: }
  4998                           ;nrf24l01.c: 67: while (i < width){
  4999                           
  5000                           
  5001                           ;nrf24l01.c: 68: byte = nrf24l01SPISend(0);
  5002  0487  3000               	movlw	0
  5003  0488  2754               	fcall	_nrf24l01SPISend
  5004  0489  00F9               	movwf	??_nrf24l01HandleRX
  5005  048A  0879               	movf	??_nrf24l01HandleRX,w
  5006  048B  0020               	movlb	0	; select bank0
  5007  048C  00A2               	movwf	nrf24l01HandleRX@byte
  5008                           
  5009                           ;nrf24l01.c: 69: string[strlen(string)] = byte;
  5010  048D  0822               	movf	nrf24l01HandleRX@byte,w
  5011  048E  00F9               	movwf	??_nrf24l01HandleRX
  5012  048F  3053               	movlw	(low (_string| 0))& (0+255)
  5013  0490  26A3               	fcall	i1_strlen
  5014  0491  0870               	movf	?i1_strlen,w
  5015  0492  3E53               	addlw	(low (_string| 0))& (0+255)
  5016  0493  0086               	movwf	6
  5017  0494  0187               	clrf	7
  5018  0495  0879               	movf	??_nrf24l01HandleRX,w
  5019  0496  0081               	movwf	1
  5020                           
  5021                           ;nrf24l01.c: 70: i++;
  5022  0497  3001               	movlw	1
  5023  0498  00F9               	movwf	??_nrf24l01HandleRX
  5024  0499  0879               	movf	??_nrf24l01HandleRX,w
  5025  049A  0020               	movlb	0	; select bank0
  5026  049B  07A3               	addwf	nrf24l01HandleRX@i,f
  5027  049C                     i1l2525:	
  5028  049C  0821               	movf	nrf24l01HandleRX@width,w
  5029  049D  0223               	subwf	nrf24l01HandleRX@i,w
  5030  049E  1803               	btfsc	3,0
  5031  049F  0008               	return
  5032  04A0  2C87               	goto	i1l2519
  5033  04A1                     __end_of_nrf24l01HandleRX:	
  5034                           
  5035                           	psect	text24
  5036  06A3                     __ptext24:	
  5037 ;; *************** function i1_strlen *****************
  5038 ;; Defined at:
  5039 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;  s               1    wreg     PTR const unsigned char 
  5042 ;;		 -> string(16), 
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;  s               1    6[COMMON] PTR const unsigned char 
  5045 ;;		 -> string(16), 
  5046 ;;  strlen          1    7[COMMON] PTR const unsigned char 
  5047 ;;		 -> string(16), 
  5048 ;; Return value:  Size  Location     Type
  5049 ;;                  2    0[COMMON] unsigned int 
  5050 ;; Registers used:
  5051 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMMON   BANK0   BANK1
  5057 ;;      Params:         2       0       0
  5058 ;;      Locals:         2       0       0
  5059 ;;      Temps:          4       0       0
  5060 ;;      Totals:         8       0       0
  5061 ;;Total ram usage:        8 bytes
  5062 ;; Hardware stack levels used:    1
  5063 ;; This function calls:
  5064 ;;		Nothing
  5065 ;; This function is called by:
  5066 ;;		_nrf24l01HandleRX
  5067 ;; This function uses a non-reentrant model
  5068 ;;
  5069                           
  5070                           
  5071                           ;psect for function i1_strlen
  5072  06A3                     i1_strlen:	
  5073                           
  5074                           ;incstack = 0
  5075                           ; Regs used in i1_strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5076                           ;i1strlen@s stored from wreg
  5077  06A3  00F6               	movwf	i1strlen@s
  5078  06A4  0876               	movf	i1strlen@s,w
  5079  06A5  00F2               	movwf	??i1_strlen
  5080  06A6  0872               	movf	??i1_strlen,w
  5081  06A7  00F7               	movwf	i1strlen@cp
  5082  06A8                     i1l1653:	
  5083  06A8  0877               	movf	i1strlen@cp,w
  5084  06A9  0086               	movwf	6
  5085  06AA  0187               	clrf	7
  5086  06AB  0801               	movf	1,w
  5087  06AC  1903               	btfsc	3,2
  5088  06AD  2EB3               	goto	i1l1655
  5089  06AE  3001               	movlw	1
  5090  06AF  00F2               	movwf	??i1_strlen
  5091  06B0  0872               	movf	??i1_strlen,w
  5092  06B1  07F7               	addwf	i1strlen@cp,f
  5093  06B2  2EA8               	goto	i1l1653
  5094  06B3                     i1l1655:	
  5095  06B3  0876               	movf	i1strlen@s,w
  5096  06B4  00F2               	movwf	??i1_strlen
  5097  06B5  3000               	movlw	0
  5098  06B6  00F3               	movwf	??i1_strlen+1
  5099  06B7  09F2               	comf	??i1_strlen,f
  5100  06B8  09F3               	comf	??i1_strlen+1,f
  5101  06B9  0AF2               	incf	??i1_strlen,f
  5102  06BA  1903               	skipnz
  5103  06BB  0AF3               	incf	??i1_strlen+1,f
  5104  06BC  0877               	movf	i1strlen@cp,w
  5105  06BD  00F4               	movwf	??i1_strlen+2
  5106  06BE  3000               	movlw	0
  5107  06BF  00F5               	movwf	??i1_strlen+3
  5108  06C0  0872               	movf	??i1_strlen,w
  5109  06C1  0774               	addwf	??i1_strlen+2,w
  5110  06C2  00F0               	movwf	?i1_strlen
  5111  06C3  0873               	movf	??i1_strlen+1,w
  5112  06C4  3D75               	addwfc	??i1_strlen+3,w
  5113  06C5  00F1               	movwf	?i1_strlen+1
  5114  06C6  0008               	return
  5115  06C7                     __end_ofi1_strlen:	
  5116                           
  5117                           	psect	text25
  5118  0654                     __ptext25:	
  5119 ;; *************** function i1_read_flashmem *****************
  5120 ;; Defined at:
  5121 ;;		line 59 in file "flash.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  offset          2    0[COMMON] unsigned int 
  5124 ;; Auto vars:     Size  Location     Type
  5125 ;;  read_flashme    2    7[COMMON] unsigned int 
  5126 ;;  read_flashme    2    5[COMMON] unsigned int 
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  2    0[COMMON] unsigned int 
  5129 ;; Registers used:
  5130 ;;		wreg, status,2, status,0
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMMON   BANK0   BANK1
  5136 ;;      Params:         2       0       0
  5137 ;;      Locals:         4       0       0
  5138 ;;      Temps:          3       0       0
  5139 ;;      Totals:         9       0       0
  5140 ;;Total ram usage:        9 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; This function calls:
  5143 ;;		Nothing
  5144 ;; This function is called by:
  5145 ;;		_nrf24l01HandleRX
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           
  5150                           ;psect for function i1_read_flashmem
  5151  0654                     i1_read_flashmem:	
  5152                           
  5153                           ;flash.c: 61: unsigned int address;
  5154                           ;flash.c: 63: INTCONbits.GIE = 0;
  5155                           
  5156                           ;incstack = 0
  5157                           ; Regs used in i1_read_flashmem: [wreg+status,2+status,0]
  5158  0654  138B               	bcf	11,7	;volatile
  5159                           
  5160                           ;flash.c: 65: PMCON1 = 0x00;
  5161  0655  0023               	movlb	3	; select bank3
  5162  0656  0195               	clrf	21	;volatile
  5163                           
  5164                           ;flash.c: 67: address = (0x800U-32) + offset;
  5165  0657  0870               	movf	i1read_flashmem@offset,w
  5166  0658  3EE0               	addlw	224
  5167  0659  00F7               	movwf	i1read_flashmem@address
  5168  065A  3007               	movlw	7
  5169  065B  3D71               	addwfc	i1read_flashmem@offset+1,w
  5170  065C  00F8               	movwf	i1read_flashmem@address+1
  5171                           
  5172                           ;flash.c: 68: PMADRL = (char) (address >> 0);
  5173  065D  0877               	movf	i1read_flashmem@address,w
  5174  065E  0091               	movwf	17	;volatile
  5175                           
  5176                           ;flash.c: 69: PMADRH = (char) (address >> 8);
  5177  065F  0878               	movf	i1read_flashmem@address+1,w
  5178  0660  0092               	movwf	18	;volatile
  5179                           
  5180                           ;flash.c: 71: PMCON1bits.RD = 1;
  5181  0661  1415               	bsf	21,0	;volatile
  5182                           
  5183                           ;flash.c: 73: __nop();
  5184  0662  0000               	nop
  5185                           
  5186                           ;flash.c: 74: __nop();
  5187  0663  0000               	nop
  5188                           
  5189                           ;flash.c: 76: unsigned int result = 0;
  5190  0664  01F5               	clrf	i1read_flashmem@result
  5191  0665  01F6               	clrf	i1read_flashmem@result+1
  5192                           
  5193                           ;flash.c: 77: result = PMDATL;
  5194  0666  0023               	movlb	3	; select bank3
  5195  0667  0813               	movf	19,w	;volatile
  5196  0668  00F2               	movwf	??i1_read_flashmem
  5197  0669  01F3               	clrf	??i1_read_flashmem+1
  5198  066A  0872               	movf	??i1_read_flashmem,w
  5199  066B  00F5               	movwf	i1read_flashmem@result
  5200  066C  0873               	movf	??i1_read_flashmem+1,w
  5201  066D  00F6               	movwf	i1read_flashmem@result+1
  5202                           
  5203                           ;flash.c: 78: result|= ( (unsigned) (PMDATH) << 8);
  5204  066E  0814               	movf	20,w	;volatile
  5205  066F  00F2               	movwf	??i1_read_flashmem
  5206  0670  01F3               	clrf	??i1_read_flashmem+1
  5207  0671  0872               	movf	??i1_read_flashmem,w
  5208  0672  00F3               	movwf	??i1_read_flashmem+1
  5209  0673  01F2               	clrf	??i1_read_flashmem
  5210  0674  0872               	movf	??i1_read_flashmem,w
  5211  0675  04F5               	iorwf	i1read_flashmem@result,f
  5212  0676  0873               	movf	??i1_read_flashmem+1,w
  5213  0677  04F6               	iorwf	i1read_flashmem@result+1,f
  5214                           
  5215                           ;flash.c: 80: INTCONbits.GIE = 1;
  5216  0678  178B               	bsf	11,7	;volatile
  5217                           
  5218                           ;flash.c: 82: return result;
  5219  0679  0876               	movf	i1read_flashmem@result+1,w
  5220  067A  00F1               	movwf	?i1_read_flashmem+1
  5221  067B  0875               	movf	i1read_flashmem@result,w
  5222  067C  00F0               	movwf	?i1_read_flashmem
  5223  067D  0008               	return
  5224  067E                     __end_ofi1_read_flashmem:	
  5225                           
  5226                           	psect	text26
  5227  0745                     __ptext26:	
  5228 ;; *************** function _nrf24l01Send *****************
  5229 ;; Defined at:
  5230 ;;		line 10 in file "nrf24l01.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;  command         1    wreg     unsigned char 
  5233 ;;  data            1    0[BANK0 ] unsigned char 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  command         1    2[COMMON] unsigned char 
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  1    wreg      unsigned char 
  5238 ;; Registers used:
  5239 ;;		wreg, status,2, status,0, pclath, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMMON   BANK0   BANK1
  5245 ;;      Params:         0       0       0
  5246 ;;      Locals:         0       0       0
  5247 ;;      Temps:          0       0       0
  5248 ;;      Totals:         0       0       0
  5249 ;;Total ram usage:        0 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:    6
  5252 ;; This function calls:
  5253 ;;		_nrf24l01SPIEnd
  5254 ;;		_nrf24l01SPISend
  5255 ;;		_nrf24l01SPIStart
  5256 ;; This function is called by:
  5257 ;;		_nrf24l01SetMode
  5258 ;;		_nrf24l01HandleRX
  5259 ;;		_nrf24l01ISR
  5260 ;;		_nrf24l01InitRegisters
  5261 ;;		_nrf24l01Init
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           
  5266                           ;psect for function _nrf24l01Send
  5267  0745                     _nrf24l01Send:	
  5268                           
  5269                           ;incstack = 0
  5270                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  5271                           ;nrf24l01Send@command stored from wreg
  5272  0745  00F2               	movwf	nrf24l01Send@command
  5273                           
  5274                           ;nrf24l01.c: 12: nrf24l01SPIStart();
  5275  0746  276E               	fcall	_nrf24l01SPIStart
  5276                           
  5277                           ;nrf24l01.c: 14: nrf24l01SPISend(command);
  5278  0747  0872               	movf	nrf24l01Send@command,w
  5279  0748  2754               	fcall	_nrf24l01SPISend
  5280                           
  5281                           ;nrf24l01.c: 15: data = nrf24l01SPISend(data);
  5282  0749  0020               	movlb	0	; select bank0
  5283  074A  0820               	movf	nrf24l01Send@data,w
  5284  074B  2754               	fcall	_nrf24l01SPISend
  5285  074C  00F1               	movwf	??_nrf24l01Send
  5286  074D  0871               	movf	??_nrf24l01Send,w
  5287  074E  0020               	movlb	0	; select bank0
  5288  074F  00A0               	movwf	nrf24l01Send@data
  5289                           
  5290                           ;nrf24l01.c: 17: nrf24l01SPIEnd();
  5291  0750  2775               	fcall	_nrf24l01SPIEnd
  5292                           
  5293                           ;nrf24l01.c: 19: return data;
  5294  0751  0020               	movlb	0	; select bank0
  5295  0752  0820               	movf	nrf24l01Send@data,w
  5296  0753  0008               	return
  5297  0754                     __end_of_nrf24l01Send:	
  5298                           
  5299                           	psect	text27
  5300  076E                     __ptext27:	
  5301 ;; *************** function _nrf24l01SPIStart *****************
  5302 ;; Defined at:
  5303 ;;		line 39 in file "interface.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;		None
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;		None
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  1    wreg      void 
  5310 ;; Registers used:
  5311 ;;		wreg
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMMON   BANK0   BANK1
  5317 ;;      Params:         0       0       0
  5318 ;;      Locals:         0       0       0
  5319 ;;      Temps:          0       0       0
  5320 ;;      Totals:         0       0       0
  5321 ;;Total ram usage:        0 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:    5
  5324 ;; This function calls:
  5325 ;;		Nothing
  5326 ;; This function is called by:
  5327 ;;		_nrf24l01Send
  5328 ;;		_nrf24l01SendString
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           
  5333                           ;psect for function _nrf24l01SPIStart
  5334  076E                     _nrf24l01SPIStart:	
  5335                           
  5336                           ;interface.c: 40: PORTAbits.RA1 = 0;
  5337                           
  5338                           ;incstack = 0
  5339                           ; Regs used in _nrf24l01SPIStart: [wreg]
  5340  076E  0020               	movlb	0	; select bank0
  5341  076F  108C               	bcf	12,1	;volatile
  5342                           
  5343                           ;interface.c: 41: _delay((unsigned long)((10)*(16000000/4000000.0)));
  5344  0770  300D               	movlw	13
  5345  0771                     u222_27:	
  5346  0771  0B89               	decfsz	9,f
  5347  0772  2F71               	goto	u222_27
  5348  0773  0000               	nop
  5349  0774  0008               	return
  5350  0775                     __end_of_nrf24l01SPIStart:	
  5351                           
  5352                           	psect	text28
  5353  0754                     __ptext28:	
  5354 ;; *************** function _nrf24l01SPISend *****************
  5355 ;; Defined at:
  5356 ;;		line 28 in file "interface.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;  data            1    wreg     unsigned char 
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;  data            1    0[COMMON] unsigned char 
  5361 ;; Return value:  Size  Location     Type
  5362 ;;                  1    wreg      unsigned char 
  5363 ;; Registers used:
  5364 ;;		wreg
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMMON   BANK0   BANK1
  5370 ;;      Params:         0       0       0
  5371 ;;      Locals:         0       0       0
  5372 ;;      Temps:          0       0       0
  5373 ;;      Totals:         0       0       0
  5374 ;;Total ram usage:        0 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; Hardware stack levels required when called:    5
  5377 ;; This function calls:
  5378 ;;		Nothing
  5379 ;; This function is called by:
  5380 ;;		_nrf24l01Send
  5381 ;;		_nrf24l01HandleRX
  5382 ;;		_nrf24l01SendString
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           
  5387                           ;psect for function _nrf24l01SPISend
  5388  0754                     _nrf24l01SPISend:	
  5389                           
  5390                           ;incstack = 0
  5391                           ; Regs used in _nrf24l01SPISend: [wreg]
  5392                           ;nrf24l01SPISend@data stored from wreg
  5393  0754  00F0               	movwf	nrf24l01SPISend@data
  5394                           
  5395                           ;interface.c: 29: SSP1BUF = data;
  5396  0755  0870               	movf	nrf24l01SPISend@data,w
  5397  0756  0024               	movlb	4	; select bank4
  5398  0757  0091               	movwf	17	;volatile
  5399  0758                     i1l52:	
  5400                           ;interface.c: 31: while (!SSP1STATbits.BF){
  5401                           
  5402  0758  0024               	movlb	4	; select bank4
  5403  0759  1814               	btfsc	20,0	;volatile
  5404  075A  2F5D               	goto	i1l2273
  5405                           
  5406                           ;interface.c: 32: __nop();
  5407  075B  0000               	nop
  5408  075C  2F58               	goto	i1l52
  5409  075D                     i1l2273:	
  5410                           
  5411                           ;interface.c: 33: }
  5412                           ;interface.c: 35: return SSP1BUF;
  5413  075D  0811               	movf	17,w	;volatile
  5414  075E  0008               	return
  5415  075F                     __end_of_nrf24l01SPISend:	
  5416                           
  5417                           	psect	text29
  5418  0775                     __ptext29:	
  5419 ;; *************** function _nrf24l01SPIEnd *****************
  5420 ;; Defined at:
  5421 ;;		line 45 in file "interface.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;		None
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;		None
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  1    wreg      void 
  5428 ;; Registers used:
  5429 ;;		wreg
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMMON   BANK0   BANK1
  5435 ;;      Params:         0       0       0
  5436 ;;      Locals:         0       0       0
  5437 ;;      Temps:          0       0       0
  5438 ;;      Totals:         0       0       0
  5439 ;;Total ram usage:        0 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; Hardware stack levels required when called:    5
  5442 ;; This function calls:
  5443 ;;		Nothing
  5444 ;; This function is called by:
  5445 ;;		_nrf24l01Send
  5446 ;;		_nrf24l01SendString
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           
  5451                           ;psect for function _nrf24l01SPIEnd
  5452  0775                     _nrf24l01SPIEnd:	
  5453                           
  5454                           ;interface.c: 46: _delay((unsigned long)((10)*(16000000/4000000.0)));
  5455                           
  5456                           ;incstack = 0
  5457                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  5458  0775  300D               	movlw	13
  5459  0776                     u223_27:	
  5460  0776  0B89               	decfsz	9,f
  5461  0777  2F76               	goto	u223_27
  5462  0778  0000               	nop
  5463                           
  5464                           ;interface.c: 47: PORTAbits.RA1 = 1;
  5465  0779  0020               	movlb	0	; select bank0
  5466  077A  148C               	bsf	12,1	;volatile
  5467  077B  0008               	return
  5468  077C                     __end_of_nrf24l01SPIEnd:	
  5469  007E                     btemp	set	126	;btemp
  5470  007E                     int$flags	set	126
  5471  007E                     wtemp0	set	126


Data Sizes:
    Strings     20
    Constant    6
    Data        2
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     40      69
    BANK1            32      8       8

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[2]), STR_3(CODE[5]), STR_2(CODE[8]), STR_1(CODE[7]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    nrf24l01SendString@string	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    _itoa@buffer	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01HandleRX
    _nrf24l01HandleRX->i1_read_flashmem

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _loop->__itoa
    _strcpy->_strlen
    _nrf24l01Service->_nrf24l01SetMode
    _nrf24l01SendString->_read_flashmem
    __itoa->_itoa
    _itoa->_utoa
    _utoa->___lwdiv

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01HandleRX

Critical Paths under _main in BANK1

    _main->_loop
    _loop->__itoa

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   14470
                                              5 BANK1      3     3      0
                               _loop
                       _nrf24l01Init
                      _read_flashmem
                     _write_flashmem
 ---------------------------------------------------------------------------------
 (1) _write_flashmem                                       6     2      4     374
                                             11 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    3456
                                             18 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                7     7      0    1866
                                             11 BANK0      7     7      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 4     4      0   10160
                                              1 BANK1      4     4      0
                            ___lldiv
                             ___lmul
                              __itoa
                 _nrf24l01SendString
                    _nrf24l01Service
                      _read_flashmem
                           _startADC
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     328
                                             11 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               5     3      2     549
                                             19 BANK0      5     3      2
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _startADC                                             2     2      0      62
                                             11 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01Service                                      2     2      0    1658
                                             13 BANK0      2     2      0
                   _nrf24l01CheckACK
                    _nrf24l01SetMode
 ---------------------------------------------------------------------------------
 (3) _nrf24l01CheckACK                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendString                                   7     6      1    2722
                                             20 BANK0      7     6      1
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                    _nrf24l01SetMode
                      _read_flashmem
 ---------------------------------------------------------------------------------
 (1) _read_flashmem                                        9     7      2     409
                                             11 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetMode                                      2     2      0    1658
                                             11 BANK0      2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1590
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      31
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __itoa                                                6     3      3    2823
                                             35 BANK0      5     2      3
                                              0 BANK1      1     1      0
                               _itoa
                      _read_flashmem (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 7     3      4    1982
                                             28 BANK0      7     3      4
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     5      4    1562
                                             19 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     386
                                             11 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     549
                                             11 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     598
                                             11 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8    1011
                                             11 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  6     6      0    3799
                                              5 BANK0      6     6      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          2     2      0    3759
                                             13 COMMON     1     1      0
                                              4 BANK0      1     1      0
                   _nrf24l01HandleRX
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01HandleRX                                     7     7      0    2095
                                              9 COMMON     4     4      0
                                              1 BANK0      3     3      0
                    _nrf24l01SPISend
                       _nrf24l01Send
                    i1_read_flashmem
                           i1_strlen
 ---------------------------------------------------------------------------------
 (9) i1_strlen                                             8     6      2      90
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (9) i1_read_flashmem                                      9     7      2     118
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1590
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      31
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___lldiv
     ___lmul
     __itoa
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _read_flashmem (ARG)
       _strlen (ARG)
     _nrf24l01SendString
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _read_flashmem
     _nrf24l01Service
       _nrf24l01CheckACK
       _nrf24l01SetMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
     _read_flashmem
     _startADC
     _strcpy
       _strlen (ARG)
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
   _read_flashmem
   _write_flashmem

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01HandleRX
       _nrf24l01SPISend
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       i1_read_flashmem
       i1_strlen
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     28      45       6       86.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      8       8       8       25.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5B       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jun 13 18:03:06 2018

                   __CFG_CP$OFF 0000             nrf24l01Send@command 0072                     __CFG_LVP$ON 0000  
                           l173 00B4                             l270 0259                             l255 0635  
                           l256 0634                             l192 0392                             l187 0233  
                           l556 03EC                             _ISR 0004    nrf24l01SendString@waitForAck 0034  
                  __CFG_BORV$LO 0000                             wreg 0009                            ?_ISR 0070  
                ??_nrf24l01Init 0032                            l2241 0504                            l2233 04E6  
                          l2401 059A                            l2235 04F2                            l2245 050D  
                          l2263 061C                            l2431 0651                            l2423 063C  
                          l2257 0604                            l2353 06DF                            l2441 070E  
                          l2259 0610                            l2267 0625                            l2621 0557  
                          l2461 0238                            l2287 03AC                            l2447 0684  
                          l2617 054D                            l2297 03C8                            l2449 068F  
                ??_nrf24l01Send 0071                            l2635 0413                            l2483 027A  
                          l2467 0260                            l2811 0149                            l2803 00FA  
                          l2645 0441                            l2637 0421                            l2485 0291  
                          l2477 0278                            l2813 016C                            l2821 01BC  
                          l2823 01CD                            l2807 0103                            l2649 044C  
                          l2817 01A0                            l2809 0126                            l2753 0066  
                          l2833 0215                            l2747 0052                            l2773 008B  
                          l2749 0060                            l2791 00DF                            l2783 00BD  
                          l2767 007F                            l2795 00E8                            l2947 03A4  
                          l2799 00F1                            STR_1 0767                    __CFG_WDTE$ON 0000  
                          STR_2 075F                            STR_3 0787                            STR_4 0765  
                          u2000 006F                            u2014 0071                            u2107 0346  
                          u2117 06F1                            u2207 05E8                            u2127 06FA  
                          u1600 05E2                            u1425 04E9                            u2217 05F9  
                          u2137 02C2                            u1602 05E3                            u1515 0616  
                          u2147 005A                            u1445 04F3                            u1525 061D  
                          u2157 0597                            u1455 04FD                            u2167 0251  
                          u1465 0505                            u2177 029B                            u2187 02A9  
                          u2197 02B6                            u1590 05DC                            u1495 0607  
                          u1592 05DD                            u1905 0422                            u1915 0436  
                          u1925 0442                            u1845 0558                            u1855 055F  
                          u1885 0416                            i1l52 0758  __size_of_nrf24l01InterfaceInit 0010  
                  __CFG_WRT$OFF 0000   __end_of_nrf24l01InterfaceInit 0745                   __p_NVMEM_text 07E0  
                          _main 0336                            _mode 0063                            _itoa 06C7  
                          _loop 0052                            fsr0h 0005                            fsr1h 0007  
                          indf0 0000                            fsr0l 0004                            indf1 0001  
                          fsr1l 0006                            btemp 007E                            _utoa 03A6  
                          start 0044                   __CFG_MCLRE$ON 0000                           ??_ISR 0025  
           nrf24l01SendString@i 003A     __size_of_nrf24l01SendString 008A                           ?_main 0070  
      __size_ofi1_read_flashmem 002A                           ?_itoa 003C                           ?_loop 0070  
               __end_of___lldiv 0455                           ?_utoa 0033                 __end_of___lwdiv 0512  
                         i1l153 0035                           i1l156 003F                 __end_of___lwmod 062A  
                         _NVMEM 07E0             ___lmul@multiplicand 002F                   __CFG_PWRTE$ON 0000  
                         __itoa 0723                  __CFG_BOREN$OFF 0000                           utoa@c 003A  
                         utoa@v 0038                           status 0003                           wtemp0 007E  
              __end_ofi1_strlen 06C7                _nrf24l01SPIStart 076E                 __initialization 0045  
              _nrf24l01CheckACK 078C                    __end_of_main 03A6                    __end_of_itoa 06EA  
                  __end_of_loop 0234                    __end_of_utoa 0402                  __CFG_LPBOR$OFF 0000  
              _nrf24l01HandleRX 0455                          ??_main 00A5                          ??_itoa 0040  
                        ??_loop 00A1                      i1strlen@cp 0077                          ??_utoa 0037  
              ??_write_flashmem 002F                ??_nrf24l01SPIEnd 0070                   main@bootCount 00A6  
      __size_of_nrf24l01SPISend 000B                          ?__itoa 0043                          _ADRESH 009C  
                        _ADRESL 009B                          _ANSELA 018C                          _ANSELC 018E  
                        i1l2273 075D                          i1l2515 0482                          i1l1653 06A8  
                        i1l2525 049C                          i1l2517 045E                          i1l1655 06B3  
                        i1l2519 0487                          i1l2731 05C2                          i1l2861 0037  
                        i1l2863 003A                          i1l2865 003B                          u222_27 0771  
                        u223_27 0776                          u180_25 047E                          _PMADRH 0192  
                        _PMADRL 0191                          _PMDATH 0194                          _PMDATL 0193  
                        _PMCON1 0195                          _PMCON2 0196        __size_of_nrf24l01SetMode 002D  
      __size_of_nrf24l01Service 002A            __size_of_nrf24l01ISR 002E                          _adcSum 0048  
                        ___lmul 0544                  __CFG_STVREN$ON 0000                       ??___lldiv 0033  
                     ??___lwdiv 002F                       ??___lwmod 002F           nrf24l01SetMode@config 002C  
          __end_of_nrf24l01Init 0708            __end_of_nrf24l01Send 0754           _nrf24l01InitRegisters 02BE  
                        _strcpy 0708                          _string 0053                          _strlen 067E  
          write_flashmem@offset 002B                          itoa@cp 0041                __end_of_startADC 05A2  
        __size_of_read_flashmem 0032               ??i1_read_flashmem 0072         __end_of__initialization 004F  
                  __itoa@buffer 00A0                   __end_of_NVMEM 0800                    __itoa@number 0043  
                __pcstackCOMMON 0070                    __pidataBANK0 078F                   __end_of__itoa 0735  
          nrf24l01HandleRX@byte 0022   nrf24l01InitRegisters@enRXAddr 002F                  _OPTION_REGbits 0095  
                     ?i1_strlen 0070                         ??__itoa 0046                      __pbssBANK0 0048  
                    __itoa@base 0045               ??_nrf24l01SPISend 0070                       ISR@result 0029  
                 _read_flashmem 0512                      __pmaintext 0336                         ?___lmul 002B  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004               ??_nrf24l01SetMode 002B  
           nrf24l01SPISend@data 0070               ??_nrf24l01Service 002D                  ___lmul@product 0033  
                       ?_strcpy 0033                         ?_strlen 002B           __end_of_n_ADDRESS_MUL 0792  
      __end_of_nrf24l01SPIStart 0775                      ??i1_strlen 0072                         _SSP1BUF 0211  
      __end_of_nrf24l01CheckACK 078F           nrf24l01ISR@tempStatus 0024        nrf24l01SendString@string 0039  
         i1read_flashmem@offset 0070           i1read_flashmem@result 0075        __end_of_nrf24l01HandleRX 04A1  
         _nrf24l01InterfaceInit 0735                  ?_read_flashmem 002B           __size_of_nrf24l01Init 001E  
         __size_of_nrf24l01Send 000F      __end_of_nrf24l01SendString 02BE                 __size_of___lmul 0030  
                       _adcLoop 0052                       ?_startADC 0070                         ___lldiv 0402  
                       ___lwdiv 04DD                         ___lwmod 05FD                         __ptext1 04A1  
                       __ptext2 06EA                         __ptext3 0735                         __ptext4 02BE  
                       __ptext5 0052                         __ptext6 067E                         __ptext7 0708  
                       __ptext8 0574                         __ptext9 062A                 __size_of_strcpy 001B  
               __size_of_strlen 0025                    __size_of_ISR 0040                         _counter 004F  
         write_flashmem@address 002F                         clrloop0 077D            end_of_initialization 004F  
                  _nrf24l01Init 06EA                    _nrf24l01Send 0745                         itoa@buf 0042  
                       itoa@val 003C                 ___lldiv@divisor 002B                 ___lldiv@counter 0038  
                    ??_startADC 002B                         utoa@buf 003B                         utoa@val 0033  
               i1_read_flashmem 0654                         strlen@s 0032                       _PORTAbits 000C  
              __CFG_FOSC$INTOSC 0000                       _TRISAbits 008C                       _TRISCbits 008E  
              nrf24l01Send@data 0020                   ??_nrf24l01ISR 007D          ?_nrf24l01InterfaceInit 0070  
               ??_read_flashmem 002D                  __end_of___lmul 0574              write_flashmem@data 002D  
                __end_of_strcpy 0723                  __end_of_strlen 06A3             start_initialization 0045  
               _nrf24l01SPISend 0754                     __end_of_ISR 0044                       i1strlen@s 0076  
             __size_ofi1_strlen 0024         __size_of_write_flashmem 003C           nrf24l01HandleRX@width 0021  
       __size_of_nrf24l01SPIEnd 0007                 _nrf24l01SetMode 05D0                 _nrf24l01Service 062A  
        nrf24l01SendString@btye 0038         ??_nrf24l01InitRegisters 002B         __end_ofi1_read_flashmem 067E  
                      ??___lmul 0033             __end_of_nrf24l01ISR 05D0                     __pdataBANK0 0063  
                      ??_strcpy 0035                        ??_strlen 002D                       ___latbits 0000  
                 __pcstackBANK0 0020                   __pcstackBANK1 00A0               ?_nrf24l01SPIStart 0070  
             ?_nrf24l01CheckACK 0070              ??_nrf24l01SPIStart 0070              ??_nrf24l01CheckACK 002B  
             ?_nrf24l01HandleRX 0070              ??_nrf24l01HandleRX 0079                ___lwdiv@dividend 002D  
                      ?___lldiv 002B                        ?___lwdiv 002B                        ?___lwmod 002B  
          __end_of_n_ADDRESS_P0 0787         __end_of_nrf24l01SPISend 075F                   _NVMEM_absaddr 07E0  
             __size_of_startADC 002E       nrf24l01InitRegisters@enAA 0030              _nrf24l01SendString 0234  
       __end_of_nrf24l01SetMode 05FD                ___lwdiv@quotient 0031                  __size_of__itoa 0012  
       __end_of_nrf24l01Service 0654             ?_nrf24l01SendString 0034                     _nrf24l01ISR 05A2  
                     clear_ram0 077C                        _PIE1bits 0091                        _PIR1bits 0011  
              ?i1_read_flashmem 0070                       _sleepLoop 0051          i1read_flashmem@address 0077  
          ??_nrf24l01SendString 0035                      _ADCON0bits 009D                      _ADCON1bits 009E  
                      _WPUAbits 020C                        i1_strlen 06A3               ___lmul@multiplier 002B  
       ??_nrf24l01InterfaceInit 002B                  _write_flashmem 04A1                  _nrf24l01SPIEnd 0775  
               startADC@channel 002C            read_flashmem@address 0032                __size_of___lldiv 0053  
              __size_of___lwdiv 0035                __size_of___lwmod 002D                ?_nrf24l01SPISend 0070  
                    _ANSELAbits 018C                      _ANSELCbits 018E                   _n_ADDRESS_MUL 0791  
               ___lwdiv@divisor 002B                 ___lwdiv@counter 0030                        __ptext10 078C  
                      __ptext11 0234                        __ptext20 0402                        __ptext12 0512  
                      __ptext13 05D0                        __ptext22 05A2                        __ptext14 0723  
                      __ptext23 0455                        __ptext15 06C7                        __ptext24 06A3  
                      __ptext16 03A6          __end_of_write_flashmem 04DD                        __ptext25 0654  
                      __ptext17 05FD                        __ptext26 0745                        __ptext18 04DD  
                      __ptext27 076E                        __ptext19 0544                        __ptext28 0754  
                      __ptext29 0775                ?_nrf24l01SetMode 0070          __end_of_nrf24l01SPIEnd 077C  
                      _nrf24l01 004C                ?_nrf24l01Service 0070                      strcpy@from 0033  
                 __size_of_main 0070                   __size_of_itoa 0023                   __size_of_loop 01E2  
                 __size_of_utoa 005C    nrf24l01InitRegisters@feature 002D                        _nextMode 0064  
         __end_of_read_flashmem 0544    nrf24l01InitRegisters@rfSetup 002C  __size_of_nrf24l01InitRegisters 0078  
 __end_of_nrf24l01InitRegisters 0336                        int$flags 007E                        _startADC 0574  
                  _SSP1STATbits 0214                      _INTCONbits 000B                      _FVRCONbits 0117  
                      itoa@base 003E                 ?_write_flashmem 002B                 ?_nrf24l01SPIEnd 0070  
             nrf24l01HandleRX@i 0023                        intlevel1 0000             read_flashmem@offset 002B  
                  _n_ADDRESS_P0 0782             read_flashmem@result 0030                      _PMCON1bits 0195  
              ___lwmod@dividend 002D                ___lldiv@dividend 002F               __CFG_CLKOUTEN$OFF 0000  
   nrf24l01InitRegisters@config 002E                      _OSCCONbits 0099       __size_of_nrf24l01SPIStart 0007  
     __size_of_nrf24l01CheckACK 0003       __size_of_nrf24l01HandleRX 004C                   __pstringtext1 0782  
                 __pstringtext2 0791                   __pstringtext3 075F                   __pstringtext4 0767  
                 __pstringtext5 0787                   __pstringtext6 0000                        utoa@base 0035  
    nrf24l01InitRegisters@DynPD 0031                ___lldiv@quotient 0034                 ___lwmod@divisor 002B  
                      strcpy@cp 0036                        strlen@cp 0031                        strcpy@to 0037  
               ___lwmod@counter 0030                     _SSPCON1bits 0215                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020                      _STATUSbits 0003  
                  ?_nrf24l01ISR 0070  
