

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jun 06 17:23:46 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	_NVMEM_text,global,class=CODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	cinit,global,class=CODE,merge=1,delta=2
    14                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     
    49                           ; Version 1.45
    50                           ; Generated 16/11/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC16LF1503 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0008                     	;# 
    92  0009                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  000E                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  008C                     	;# 
   110  008E                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  010C                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011D                     	;# 
   137  018C                     	;# 
   138  018E                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  020C                     	;# 
   148  0211                     	;# 
   149  0211                     	;# 
   150  0212                     	;# 
   151  0212                     	;# 
   152  0213                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0214                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0216                     	;# 
   160  0216                     	;# 
   161  0217                     	;# 
   162  0217                     	;# 
   163  0391                     	;# 
   164  0392                     	;# 
   165  0393                     	;# 
   166  0498                     	;# 
   167  0498                     	;# 
   168  0499                     	;# 
   169  049A                     	;# 
   170  049B                     	;# 
   171  049B                     	;# 
   172  049C                     	;# 
   173  049D                     	;# 
   174  049E                     	;# 
   175  049F                     	;# 
   176  0611                     	;# 
   177  0612                     	;# 
   178  0613                     	;# 
   179  0613                     	;# 
   180  0614                     	;# 
   181  0615                     	;# 
   182  0616                     	;# 
   183  0616                     	;# 
   184  0617                     	;# 
   185  0618                     	;# 
   186  0619                     	;# 
   187  0619                     	;# 
   188  061A                     	;# 
   189  061B                     	;# 
   190  061C                     	;# 
   191  061C                     	;# 
   192  0691                     	;# 
   193  0692                     	;# 
   194  0693                     	;# 
   195  0694                     	;# 
   196  0695                     	;# 
   197  0F0F                     	;# 
   198  0F10                     	;# 
   199  0F11                     	;# 
   200  0F12                     	;# 
   201  0F13                     	;# 
   202  0F14                     	;# 
   203  0F15                     	;# 
   204  0F16                     	;# 
   205  0F17                     	;# 
   206  0F18                     	;# 
   207  0F19                     	;# 
   208  0F1A                     	;# 
   209  0F1B                     	;# 
   210  0F1C                     	;# 
   211  0F1D                     	;# 
   212  0F1E                     	;# 
   213  0F1F                     	;# 
   214  0FE3                     	;# 
   215  0FE4                     	;# 
   216  0FE5                     	;# 
   217  0FE6                     	;# 
   218  0FE7                     	;# 
   219  0FE8                     	;# 
   220  0FE9                     	;# 
   221  0FEA                     	;# 
   222  0FEB                     	;# 
   223  0FED                     	;# 
   224  0FEE                     	;# 
   225  0FEF                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000E                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  008C                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0095                     	;# 
   258  0096                     	;# 
   259  0097                     	;# 
   260  0099                     	;# 
   261  009A                     	;# 
   262  009B                     	;# 
   263  009B                     	;# 
   264  009C                     	;# 
   265  009D                     	;# 
   266  009E                     	;# 
   267  009F                     	;# 
   268  010C                     	;# 
   269  010E                     	;# 
   270  0111                     	;# 
   271  0112                     	;# 
   272  0113                     	;# 
   273  0114                     	;# 
   274  0115                     	;# 
   275  0116                     	;# 
   276  0117                     	;# 
   277  0118                     	;# 
   278  0119                     	;# 
   279  011D                     	;# 
   280  018C                     	;# 
   281  018E                     	;# 
   282  0191                     	;# 
   283  0191                     	;# 
   284  0192                     	;# 
   285  0193                     	;# 
   286  0193                     	;# 
   287  0194                     	;# 
   288  0195                     	;# 
   289  0196                     	;# 
   290  020C                     	;# 
   291  0211                     	;# 
   292  0211                     	;# 
   293  0212                     	;# 
   294  0212                     	;# 
   295  0213                     	;# 
   296  0213                     	;# 
   297  0214                     	;# 
   298  0214                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0216                     	;# 
   303  0216                     	;# 
   304  0217                     	;# 
   305  0217                     	;# 
   306  0391                     	;# 
   307  0392                     	;# 
   308  0393                     	;# 
   309  0498                     	;# 
   310  0498                     	;# 
   311  0499                     	;# 
   312  049A                     	;# 
   313  049B                     	;# 
   314  049B                     	;# 
   315  049C                     	;# 
   316  049D                     	;# 
   317  049E                     	;# 
   318  049F                     	;# 
   319  0611                     	;# 
   320  0612                     	;# 
   321  0613                     	;# 
   322  0613                     	;# 
   323  0614                     	;# 
   324  0615                     	;# 
   325  0616                     	;# 
   326  0616                     	;# 
   327  0617                     	;# 
   328  0618                     	;# 
   329  0619                     	;# 
   330  0619                     	;# 
   331  061A                     	;# 
   332  061B                     	;# 
   333  061C                     	;# 
   334  061C                     	;# 
   335  0691                     	;# 
   336  0692                     	;# 
   337  0693                     	;# 
   338  0694                     	;# 
   339  0695                     	;# 
   340  0F0F                     	;# 
   341  0F10                     	;# 
   342  0F11                     	;# 
   343  0F12                     	;# 
   344  0F13                     	;# 
   345  0F14                     	;# 
   346  0F15                     	;# 
   347  0F16                     	;# 
   348  0F17                     	;# 
   349  0F18                     	;# 
   350  0F19                     	;# 
   351  0F1A                     	;# 
   352  0F1B                     	;# 
   353  0F1C                     	;# 
   354  0F1D                     	;# 
   355  0F1E                     	;# 
   356  0F1F                     	;# 
   357  0FE3                     	;# 
   358  0FE4                     	;# 
   359  0FE5                     	;# 
   360  0FE6                     	;# 
   361  0FE7                     	;# 
   362  0FE8                     	;# 
   363  0FE9                     	;# 
   364  0FEA                     	;# 
   365  0FEB                     	;# 
   366  0FED                     	;# 
   367  0FEE                     	;# 
   368  0FEF                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000E                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0015                     	;# 
   387  0016                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001C                     	;# 
   395  008C                     	;# 
   396  008E                     	;# 
   397  0091                     	;# 
   398  0092                     	;# 
   399  0093                     	;# 
   400  0095                     	;# 
   401  0096                     	;# 
   402  0097                     	;# 
   403  0099                     	;# 
   404  009A                     	;# 
   405  009B                     	;# 
   406  009B                     	;# 
   407  009C                     	;# 
   408  009D                     	;# 
   409  009E                     	;# 
   410  009F                     	;# 
   411  010C                     	;# 
   412  010E                     	;# 
   413  0111                     	;# 
   414  0112                     	;# 
   415  0113                     	;# 
   416  0114                     	;# 
   417  0115                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  0118                     	;# 
   421  0119                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018E                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  020C                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0391                     	;# 
   450  0392                     	;# 
   451  0393                     	;# 
   452  0498                     	;# 
   453  0498                     	;# 
   454  0499                     	;# 
   455  049A                     	;# 
   456  049B                     	;# 
   457  049B                     	;# 
   458  049C                     	;# 
   459  049D                     	;# 
   460  049E                     	;# 
   461  049F                     	;# 
   462  0611                     	;# 
   463  0612                     	;# 
   464  0613                     	;# 
   465  0613                     	;# 
   466  0614                     	;# 
   467  0615                     	;# 
   468  0616                     	;# 
   469  0616                     	;# 
   470  0617                     	;# 
   471  0618                     	;# 
   472  0619                     	;# 
   473  0619                     	;# 
   474  061A                     	;# 
   475  061B                     	;# 
   476  061C                     	;# 
   477  061C                     	;# 
   478  0691                     	;# 
   479  0692                     	;# 
   480  0693                     	;# 
   481  0694                     	;# 
   482  0695                     	;# 
   483  0F0F                     	;# 
   484  0F10                     	;# 
   485  0F11                     	;# 
   486  0F12                     	;# 
   487  0F13                     	;# 
   488  0F14                     	;# 
   489  0F15                     	;# 
   490  0F16                     	;# 
   491  0F17                     	;# 
   492  0F18                     	;# 
   493  0F19                     	;# 
   494  0F1A                     	;# 
   495  0F1B                     	;# 
   496  0F1C                     	;# 
   497  0F1D                     	;# 
   498  0F1E                     	;# 
   499  0F1F                     	;# 
   500  0FE3                     	;# 
   501  0FE4                     	;# 
   502  0FE5                     	;# 
   503  0FE6                     	;# 
   504  0FE7                     	;# 
   505  0FE8                     	;# 
   506  0FE9                     	;# 
   507  0FEA                     	;# 
   508  0FEB                     	;# 
   509  0FED                     	;# 
   510  0FEE                     	;# 
   511  0FEF                     	;# 
   512  0000                     	;# 
   513  0001                     	;# 
   514  0002                     	;# 
   515  0003                     	;# 
   516  0004                     	;# 
   517  0005                     	;# 
   518  0006                     	;# 
   519  0007                     	;# 
   520  0008                     	;# 
   521  0009                     	;# 
   522  000A                     	;# 
   523  000B                     	;# 
   524  000C                     	;# 
   525  000E                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0013                     	;# 
   529  0015                     	;# 
   530  0016                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001C                     	;# 
   538  008C                     	;# 
   539  008E                     	;# 
   540  0091                     	;# 
   541  0092                     	;# 
   542  0093                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  009F                     	;# 
   554  010C                     	;# 
   555  010E                     	;# 
   556  0111                     	;# 
   557  0112                     	;# 
   558  0113                     	;# 
   559  0114                     	;# 
   560  0115                     	;# 
   561  0116                     	;# 
   562  0117                     	;# 
   563  0118                     	;# 
   564  0119                     	;# 
   565  011D                     	;# 
   566  018C                     	;# 
   567  018E                     	;# 
   568  0191                     	;# 
   569  0191                     	;# 
   570  0192                     	;# 
   571  0193                     	;# 
   572  0193                     	;# 
   573  0194                     	;# 
   574  0195                     	;# 
   575  0196                     	;# 
   576  020C                     	;# 
   577  0211                     	;# 
   578  0211                     	;# 
   579  0212                     	;# 
   580  0212                     	;# 
   581  0213                     	;# 
   582  0213                     	;# 
   583  0214                     	;# 
   584  0214                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0216                     	;# 
   589  0216                     	;# 
   590  0217                     	;# 
   591  0217                     	;# 
   592  0391                     	;# 
   593  0392                     	;# 
   594  0393                     	;# 
   595  0498                     	;# 
   596  0498                     	;# 
   597  0499                     	;# 
   598  049A                     	;# 
   599  049B                     	;# 
   600  049B                     	;# 
   601  049C                     	;# 
   602  049D                     	;# 
   603  049E                     	;# 
   604  049F                     	;# 
   605  0611                     	;# 
   606  0612                     	;# 
   607  0613                     	;# 
   608  0613                     	;# 
   609  0614                     	;# 
   610  0615                     	;# 
   611  0616                     	;# 
   612  0616                     	;# 
   613  0617                     	;# 
   614  0618                     	;# 
   615  0619                     	;# 
   616  0619                     	;# 
   617  061A                     	;# 
   618  061B                     	;# 
   619  061C                     	;# 
   620  061C                     	;# 
   621  0691                     	;# 
   622  0692                     	;# 
   623  0693                     	;# 
   624  0694                     	;# 
   625  0695                     	;# 
   626  0F0F                     	;# 
   627  0F10                     	;# 
   628  0F11                     	;# 
   629  0F12                     	;# 
   630  0F13                     	;# 
   631  0F14                     	;# 
   632  0F15                     	;# 
   633  0F16                     	;# 
   634  0F17                     	;# 
   635  0F18                     	;# 
   636  0F19                     	;# 
   637  0F1A                     	;# 
   638  0F1B                     	;# 
   639  0F1C                     	;# 
   640  0F1D                     	;# 
   641  0F1E                     	;# 
   642  0F1F                     	;# 
   643  0FE3                     	;# 
   644  0FE4                     	;# 
   645  0FE5                     	;# 
   646  0FE6                     	;# 
   647  0FE7                     	;# 
   648  0FE8                     	;# 
   649  0FE9                     	;# 
   650  0FEA                     	;# 
   651  0FEB                     	;# 
   652  0FED                     	;# 
   653  0FEE                     	;# 
   654  0FEF                     	;# 
   655  0000                     	;# 
   656  0001                     	;# 
   657  0002                     	;# 
   658  0003                     	;# 
   659  0004                     	;# 
   660  0005                     	;# 
   661  0006                     	;# 
   662  0007                     	;# 
   663  0008                     	;# 
   664  0009                     	;# 
   665  000A                     	;# 
   666  000B                     	;# 
   667  000C                     	;# 
   668  000E                     	;# 
   669  0011                     	;# 
   670  0012                     	;# 
   671  0013                     	;# 
   672  0015                     	;# 
   673  0016                     	;# 
   674  0016                     	;# 
   675  0017                     	;# 
   676  0018                     	;# 
   677  0019                     	;# 
   678  001A                     	;# 
   679  001B                     	;# 
   680  001C                     	;# 
   681  008C                     	;# 
   682  008E                     	;# 
   683  0091                     	;# 
   684  0092                     	;# 
   685  0093                     	;# 
   686  0095                     	;# 
   687  0096                     	;# 
   688  0097                     	;# 
   689  0099                     	;# 
   690  009A                     	;# 
   691  009B                     	;# 
   692  009B                     	;# 
   693  009C                     	;# 
   694  009D                     	;# 
   695  009E                     	;# 
   696  009F                     	;# 
   697  010C                     	;# 
   698  010E                     	;# 
   699  0111                     	;# 
   700  0112                     	;# 
   701  0113                     	;# 
   702  0114                     	;# 
   703  0115                     	;# 
   704  0116                     	;# 
   705  0117                     	;# 
   706  0118                     	;# 
   707  0119                     	;# 
   708  011D                     	;# 
   709  018C                     	;# 
   710  018E                     	;# 
   711  0191                     	;# 
   712  0191                     	;# 
   713  0192                     	;# 
   714  0193                     	;# 
   715  0193                     	;# 
   716  0194                     	;# 
   717  0195                     	;# 
   718  0196                     	;# 
   719  020C                     	;# 
   720  0211                     	;# 
   721  0211                     	;# 
   722  0212                     	;# 
   723  0212                     	;# 
   724  0213                     	;# 
   725  0213                     	;# 
   726  0214                     	;# 
   727  0214                     	;# 
   728  0215                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0216                     	;# 
   732  0216                     	;# 
   733  0217                     	;# 
   734  0217                     	;# 
   735  0391                     	;# 
   736  0392                     	;# 
   737  0393                     	;# 
   738  0498                     	;# 
   739  0498                     	;# 
   740  0499                     	;# 
   741  049A                     	;# 
   742  049B                     	;# 
   743  049B                     	;# 
   744  049C                     	;# 
   745  049D                     	;# 
   746  049E                     	;# 
   747  049F                     	;# 
   748  0611                     	;# 
   749  0612                     	;# 
   750  0613                     	;# 
   751  0613                     	;# 
   752  0614                     	;# 
   753  0615                     	;# 
   754  0616                     	;# 
   755  0616                     	;# 
   756  0617                     	;# 
   757  0618                     	;# 
   758  0619                     	;# 
   759  0619                     	;# 
   760  061A                     	;# 
   761  061B                     	;# 
   762  061C                     	;# 
   763  061C                     	;# 
   764  0691                     	;# 
   765  0692                     	;# 
   766  0693                     	;# 
   767  0694                     	;# 
   768  0695                     	;# 
   769  0F0F                     	;# 
   770  0F10                     	;# 
   771  0F11                     	;# 
   772  0F12                     	;# 
   773  0F13                     	;# 
   774  0F14                     	;# 
   775  0F15                     	;# 
   776  0F16                     	;# 
   777  0F17                     	;# 
   778  0F18                     	;# 
   779  0F19                     	;# 
   780  0F1A                     	;# 
   781  0F1B                     	;# 
   782  0F1C                     	;# 
   783  0F1D                     	;# 
   784  0F1E                     	;# 
   785  0F1F                     	;# 
   786  0FE3                     	;# 
   787  0FE4                     	;# 
   788  0FE5                     	;# 
   789  0FE6                     	;# 
   790  0FE7                     	;# 
   791  0FE8                     	;# 
   792  0FE9                     	;# 
   793  0FEA                     	;# 
   794  0FEB                     	;# 
   795  0FED                     	;# 
   796  0FEE                     	;# 
   797  0FEF                     	;# 
   798                           
   799                           	psect	idataCOMMON
   800  064C                     __pidataCOMMON:	
   801                           
   802                           ;initializer for _mode
   803  064C  340A               	retlw	10
   804                           
   805                           	psect	idataBANK0
   806  064D                     __pidataBANK0:	
   807                           
   808                           ;initializer for _nextMode
   809  064D  340A               	retlw	10
   810  07E0                     _NVMEM_absaddr	set	2016
   811                           
   812                           	psect	stringtext1
   813  0642                     __pstringtext1:	
   814  0642                     _n_ADDRESS_P0:	
   815  0642  34AD               	retlw	173
   816  0643  3487               	retlw	135
   817  0644  3466               	retlw	102
   818  0645  34BC               	retlw	188
   819  0646  34BB               	retlw	187
   820  0647                     __end_of_n_ADDRESS_P0:	
   821                           
   822                           	psect	stringtext2
   823  064E                     __pstringtext2:	
   824  064E                     _n_ADDRESS_MUL:	
   825  064E  3421               	retlw	33
   826  064F                     __end_of_n_ADDRESS_MUL:	
   827  07E0                     _NVMEM_absaddr	set	2016
   828                           
   829                           	psect	_NVMEM_text
   830  07E0                     __p_NVMEM_text:	
   831  07E0                     _NVMEM:	
   832  07E0  3455               	retlw	85
   833  07E1  346E               	retlw	110
   834  07E2  3463               	retlw	99
   835  07E3  346F               	retlw	111
   836  07E4  346E               	retlw	110
   837  07E5  3466               	retlw	102
   838  07E6  3469               	retlw	105
   839  07E7  3467               	retlw	103
   840  07E8  3475               	retlw	117
   841  07E9  3472               	retlw	114
   842  07EA  3465               	retlw	101
   843  07EB  3464               	retlw	100
   844  07EC  3431               	retlw	49
   845  07ED  3400               	retlw	0
   846  07EE  3400               	retlw	0
   847  07EF  3400               	retlw	0
   848  07F0  3400               	retlw	0
   849  07F1  3400               	retlw	0
   850  07F2  3400               	retlw	0
   851  07F3  3400               	retlw	0
   852  07F4  3400               	retlw	0
   853  07F5  3400               	retlw	0
   854  07F6  3400               	retlw	0
   855  07F7  3400               	retlw	0
   856  07F8  3400               	retlw	0
   857  07F9  3400               	retlw	0
   858  07FA  3400               	retlw	0
   859  07FB  3400               	retlw	0
   860  07FC  3400               	retlw	0
   861  07FD  3400               	retlw	0
   862  07FE  3400               	retlw	0
   863  07FF  3400               	retlw	0
   864  0800                     __end_of_NVMEM:	
   865  0003                     _STATUSbits	set	3
   866  0011                     _PIR1bits	set	17
   867  000C                     _PORTAbits	set	12
   868  000B                     _INTCONbits	set	11
   869  0097                     _WDTCONbits	set	151
   870  0091                     _PIE1bits	set	145
   871  009E                     _ADCON1bits	set	158
   872  0095                     _OPTION_REGbits	set	149
   873  0099                     _OSCCONbits	set	153
   874  009D                     _ADCON0bits	set	157
   875  009C                     _ADRESH	set	156
   876  009B                     _ADRESL	set	155
   877  008E                     _TRISCbits	set	142
   878  008C                     _TRISAbits	set	140
   879  0117                     _FVRCONbits	set	279
   880  018E                     _ANSELCbits	set	398
   881  018C                     _ANSELAbits	set	396
   882  018E                     _ANSELC	set	398
   883  018C                     _ANSELA	set	396
   884  0194                     _PMDATH	set	404
   885  0193                     _PMDATL	set	403
   886  0196                     _PMCON2	set	406
   887  0195                     _PMCON1bits	set	405
   888  0192                     _PMADRH	set	402
   889  0191                     _PMADRL	set	401
   890  0195                     _PMCON1	set	405
   891  020C                     _WPUAbits	set	524
   892  0211                     _SSP1BUF	set	529
   893  0214                     _SSP1STATbits	set	532
   894  0215                     _SSPCON1bits	set	533
   895                           
   896                           	psect	stringtext3
   897  061F                     __pstringtext3:	
   898  061F                     STR_2:	
   899  061F  342F               	retlw	47	;'/'
   900  0620  3443               	retlw	67	;'C'
   901  0621  344F               	retlw	79	;'O'
   902  0622  3455               	retlw	85	;'U'
   903  0623  344E               	retlw	78	;'N'
   904  0624  3454               	retlw	84	;'T'
   905  0625  342F               	retlw	47	;'/'
   906  0626  3400               	retlw	0
   907                           
   908                           	psect	stringtext4
   909  0627                     __pstringtext4:	
   910  0627                     STR_1:	
   911  0627  342F               	retlw	47	;'/'
   912  0628  3442               	retlw	66	;'B'
   913  0629  344F               	retlw	79	;'O'
   914  062A  344F               	retlw	79	;'O'
   915  062B  3454               	retlw	84	;'T'
   916  062C  342F               	retlw	47	;'/'
   917  062D  3400               	retlw	0
   918                           
   919                           	psect	stringtext5
   920  0647                     __pstringtext5:	
   921  0647                     STR_3:	
   922  0647  342F               	retlw	47	;'/'
   923  0648  3441               	retlw	65	;'A'
   924  0649  3444               	retlw	68	;'D'
   925  064A  3443               	retlw	67	;'C'
   926  064B  3400               	retlw	0
   927                           
   928                           	psect	stringtext6
   929  0000                     __pstringtext6:	
   930  0625                     
   931                           ; #config settings
   932  0000                     
   933                           	psect	cinit
   934  0043                     start_initialization:	
   935  0043                     __initialization:	
   936                           
   937                           ; Initialize objects allocated to COMMON
   938  0043  264C               	fcall	__pidataCOMMON	;fetch initializer
   939  0044  00FD               	movwf	__pdataCOMMON& (0+127)
   940                           
   941                           ; Initialize objects allocated to BANK0
   942  0045  264D               	fcall	__pidataBANK0	;fetch initializer
   943  0046  00DC               	movwf	__pdataBANK0& (0+127)
   944                           
   945                           ; Clear objects allocated to COMMON
   946  0047  01FC               	clrf	__pbssCOMMON& (0+127)
   947                           
   948                           ; Clear objects allocated to BANK0
   949  0048  3045               	movlw	low __pbssBANK0
   950  0049  0084               	movwf	4
   951  004A  3000               	movlw	high __pbssBANK0
   952  004B  0085               	movwf	5
   953  004C  3017               	movlw	23
   954  004D  263C               	fcall	clear_ram0
   955  004E                     end_of_initialization:	
   956                           ;End of C runtime variable initialization code
   957                           
   958  004E                     __end_of__initialization:	
   959  004E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   960  004F  0020               	movlb	0
   961  0050  2A8E               	ljmp	_main	;jump to C main() function
   962                           
   963                           	psect	bssCOMMON
   964  007C                     __pbssCOMMON:	
   965  007C                     _adcLoop:	
   966  007C                     	ds	1
   967                           
   968                           	psect	dataCOMMON
   969  007D                     __pdataCOMMON:	
   970  007D                     _mode:	
   971  007D                     	ds	1
   972                           
   973                           	psect	bssBANK0
   974  0045                     __pbssBANK0:	
   975  0045                     _adcSum:	
   976  0045                     	ds	4
   977  0049                     _counter:	
   978  0049                     	ds	2
   979  004B                     _sleepLoop:	
   980  004B                     	ds	1
   981  004C                     _string:	
   982  004C                     	ds	16
   983                           
   984                           	psect	dataBANK0
   985  005C                     __pdataBANK0:	
   986  005C                     _nextMode:	
   987  005C                     	ds	1
   988                           
   989                           	psect	clrtext
   990  063C                     clear_ram0:	
   991                           ;	Called with FSR0 containing the base address, and
   992                           ;	WREG with the size to clear
   993                           
   994  063C  0064               	clrwdt	;clear the watchdog before getting into this loop
   995  063D                     clrloop0:	
   996  063D  0180               	clrf	0	;clear RAM location pointed to by FSR
   997  063E  3101               	addfsr 0,1
   998  063F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   999  0640  2E3D               	goto	clrloop0	;have we reached the end yet?
  1000  0641  3400               	retlw	0	;all done for this memory range, return
  1001                           
  1002                           	psect	cstackCOMMON
  1003  0070                     __pcstackCOMMON:	
  1004  0070                     ?_nrf24l01ISR:	
  1005  0070                     ?_nrf24l01SetRecieveMode:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0070                     ?_nrf24l01SendString:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011  0070                     ?_nrf24l01Init:	
  1012                           ; 1 bytes @ 0x0
  1013                           
  1014  0070                     ?_nrf24l01InterfaceInit:	
  1015                           ; 1 bytes @ 0x0
  1016                           
  1017  0070                     ?_nrf24l01SPISend:	
  1018                           ; 1 bytes @ 0x0
  1019                           
  1020  0070                     ??_nrf24l01SPISend:	
  1021                           ; 1 bytes @ 0x0
  1022                           
  1023  0070                     ?_nrf24l01SPIStart:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0070                     ??_nrf24l01SPIStart:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0070                     ?_nrf24l01SPIEnd:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ??_nrf24l01SPIEnd:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     ?_ISR:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ?_startADC:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ?_loop:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ?_main:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047  0070                     ?_nrf24l01SetTransmitMode:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050  0070                     ?_nrf24l01InitRegisters:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     nrf24l01SPISend@data:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056                           
  1057                           ; 1 bytes @ 0x0
  1058  0070                     	ds	1
  1059  0071                     ?_nrf24l01Send:	
  1060  0071                     nrf24l01Send@data:	
  1061                           ; 1 bytes @ 0x1
  1062                           
  1063                           
  1064                           ; 1 bytes @ 0x1
  1065  0071                     	ds	1
  1066  0072                     ??_nrf24l01Send:	
  1067                           
  1068                           ; 1 bytes @ 0x2
  1069  0072                     	ds	1
  1070  0073                     nrf24l01Send@command:	
  1071                           
  1072                           ; 1 bytes @ 0x3
  1073  0073                     	ds	1
  1074  0074                     ??_nrf24l01ISR:	
  1075                           
  1076                           ; 1 bytes @ 0x4
  1077  0074                     	ds	1
  1078  0075                     nrf24l01ISR@status:	
  1079                           
  1080                           ; 1 bytes @ 0x5
  1081  0075                     	ds	1
  1082  0076                     ??_ISR:	
  1083                           
  1084                           ; 1 bytes @ 0x6
  1085  0076                     	ds	4
  1086  007A                     ISR@result:	
  1087                           
  1088                           ; 2 bytes @ 0xA
  1089  007A                     	ds	2
  1090                           
  1091                           	psect	cstackBANK0
  1092  0020                     __pcstackBANK0:	
  1093  0020                     ??_nrf24l01SetRecieveMode:	
  1094  0020                     ?_write_flashmem:	
  1095                           ; 1 bytes @ 0x0
  1096                           
  1097  0020                     ??_nrf24l01InterfaceInit:	
  1098                           ; 1 bytes @ 0x0
  1099                           
  1100  0020                     ??_startADC:	
  1101                           ; 1 bytes @ 0x0
  1102                           
  1103  0020                     ??_nrf24l01SetTransmitMode:	
  1104                           ; 1 bytes @ 0x0
  1105                           
  1106  0020                     ??_nrf24l01InitRegisters:	
  1107                           ; 1 bytes @ 0x0
  1108                           
  1109  0020                     ?_strlen:	
  1110                           ; 1 bytes @ 0x0
  1111                           
  1112  0020                     ?_read_flashmem:	
  1113                           ; 2 bytes @ 0x0
  1114                           
  1115  0020                     ?___lwdiv:	
  1116                           ; 2 bytes @ 0x0
  1117                           
  1118  0020                     ?___lwmod:	
  1119                           ; 2 bytes @ 0x0
  1120                           
  1121  0020                     ?___lmul:	
  1122                           ; 2 bytes @ 0x0
  1123                           
  1124  0020                     ?___lldiv:	
  1125                           ; 4 bytes @ 0x0
  1126                           
  1127  0020                     write_flashmem@offset:	
  1128                           ; 4 bytes @ 0x0
  1129                           
  1130  0020                     read_flashmem@offset:	
  1131                           ; 2 bytes @ 0x0
  1132                           
  1133  0020                     ___lwdiv@divisor:	
  1134                           ; 2 bytes @ 0x0
  1135                           
  1136  0020                     ___lwmod@divisor:	
  1137                           ; 2 bytes @ 0x0
  1138                           
  1139  0020                     ___lmul@multiplier:	
  1140                           ; 2 bytes @ 0x0
  1141                           
  1142  0020                     ___lldiv@divisor:	
  1143                           ; 4 bytes @ 0x0
  1144                           
  1145                           
  1146                           ; 4 bytes @ 0x0
  1147  0020                     	ds	1
  1148  0021                     startADC@channel:	
  1149  0021                     nrf24l01SetTransmitMode@config:	
  1150                           ; 1 bytes @ 0x1
  1151                           
  1152  0021                     nrf24l01SetRecieveMode@config:	
  1153                           ; 1 bytes @ 0x1
  1154                           
  1155  0021                     nrf24l01InitRegisters@channel:	
  1156                           ; 1 bytes @ 0x1
  1157                           
  1158                           
  1159                           ; 1 bytes @ 0x1
  1160  0021                     	ds	1
  1161  0022                     ??_strlen:	
  1162  0022                     ??_read_flashmem:	
  1163                           ; 1 bytes @ 0x2
  1164                           
  1165  0022                     nrf24l01InitRegisters@setupAW:	
  1166                           ; 1 bytes @ 0x2
  1167                           
  1168  0022                     write_flashmem@data:	
  1169                           ; 1 bytes @ 0x2
  1170                           
  1171  0022                     ___lwdiv@dividend:	
  1172                           ; 2 bytes @ 0x2
  1173                           
  1174  0022                     ___lwmod@dividend:	
  1175                           ; 2 bytes @ 0x2
  1176                           
  1177                           
  1178                           ; 2 bytes @ 0x2
  1179  0022                     	ds	1
  1180  0023                     nrf24l01InitRegisters@feature:	
  1181                           
  1182                           ; 1 bytes @ 0x3
  1183  0023                     	ds	1
  1184  0024                     ??_write_flashmem:	
  1185  0024                     ??___lwdiv:	
  1186                           ; 1 bytes @ 0x4
  1187                           
  1188  0024                     ??___lwmod:	
  1189                           ; 1 bytes @ 0x4
  1190                           
  1191  0024                     nrf24l01InitRegisters@rfSetup:	
  1192                           ; 1 bytes @ 0x4
  1193                           
  1194  0024                     write_flashmem@address:	
  1195                           ; 1 bytes @ 0x4
  1196                           
  1197  0024                     ___lmul@multiplicand:	
  1198                           ; 2 bytes @ 0x4
  1199                           
  1200  0024                     ___lldiv@dividend:	
  1201                           ; 4 bytes @ 0x4
  1202                           
  1203                           
  1204                           ; 4 bytes @ 0x4
  1205  0024                     	ds	1
  1206  0025                     nrf24l01InitRegisters@config:	
  1207  0025                     ___lwmod@counter:	
  1208                           ; 1 bytes @ 0x5
  1209                           
  1210  0025                     read_flashmem@result:	
  1211                           ; 1 bytes @ 0x5
  1212                           
  1213  0025                     ___lwdiv@quotient:	
  1214                           ; 2 bytes @ 0x5
  1215                           
  1216                           
  1217                           ; 2 bytes @ 0x5
  1218  0025                     	ds	1
  1219  0026                     nrf24l01InitRegisters@status:	
  1220  0026                     strlen@cp:	
  1221                           ; 1 bytes @ 0x6
  1222                           
  1223                           
  1224                           ; 1 bytes @ 0x6
  1225  0026                     	ds	1
  1226  0027                     nrf24l01InitRegisters@enRXAddr:	
  1227  0027                     ___lwdiv@counter:	
  1228                           ; 1 bytes @ 0x7
  1229                           
  1230  0027                     strlen@s:	
  1231                           ; 1 bytes @ 0x7
  1232                           
  1233  0027                     read_flashmem@address:	
  1234                           ; 1 bytes @ 0x7
  1235                           
  1236                           
  1237                           ; 2 bytes @ 0x7
  1238  0027                     	ds	1
  1239  0028                     ?_strcpy:	
  1240  0028                     ?_utoa:	
  1241                           ; 1 bytes @ 0x8
  1242                           
  1243  0028                     ??___lmul:	
  1244                           ; 1 bytes @ 0x8
  1245                           
  1246  0028                     ??___lldiv:	
  1247                           ; 1 bytes @ 0x8
  1248                           
  1249  0028                     nrf24l01InitRegisters@enAA:	
  1250                           ; 1 bytes @ 0x8
  1251                           
  1252  0028                     utoa@val:	
  1253                           ; 1 bytes @ 0x8
  1254                           
  1255  0028                     strcpy@from:	
  1256                           ; 2 bytes @ 0x8
  1257                           
  1258  0028                     ___lmul@product:	
  1259                           ; 2 bytes @ 0x8
  1260                           
  1261                           
  1262                           ; 4 bytes @ 0x8
  1263  0028                     	ds	1
  1264  0029                     ??_nrf24l01SendString:	
  1265  0029                     nrf24l01InitRegisters@DynPD:	
  1266                           ; 1 bytes @ 0x9
  1267                           
  1268  0029                     ___lldiv@quotient:	
  1269                           ; 1 bytes @ 0x9
  1270                           
  1271                           
  1272                           ; 4 bytes @ 0x9
  1273  0029                     	ds	1
  1274  002A                     ??_strcpy:	
  1275  002A                     ??_nrf24l01Init:	
  1276                           ; 1 bytes @ 0xA
  1277                           
  1278  002A                     utoa@base:	
  1279                           ; 1 bytes @ 0xA
  1280                           
  1281                           
  1282                           ; 2 bytes @ 0xA
  1283  002A                     	ds	1
  1284  002B                     strcpy@cp:	
  1285                           
  1286                           ; 1 bytes @ 0xB
  1287  002B                     	ds	1
  1288  002C                     ??_utoa:	
  1289  002C                     nrf24l01SendString@btye:	
  1290                           ; 1 bytes @ 0xC
  1291                           
  1292  002C                     strcpy@to:	
  1293                           ; 1 bytes @ 0xC
  1294                           
  1295                           
  1296                           ; 1 bytes @ 0xC
  1297  002C                     	ds	1
  1298  002D                     nrf24l01SendString@string:	
  1299  002D                     ___lldiv@counter:	
  1300                           ; 1 bytes @ 0xD
  1301                           
  1302  002D                     utoa@v:	
  1303                           ; 1 bytes @ 0xD
  1304                           
  1305                           
  1306                           ; 2 bytes @ 0xD
  1307  002D                     	ds	1
  1308  002E                     nrf24l01SendString@i:	
  1309                           
  1310                           ; 1 bytes @ 0xE
  1311  002E                     	ds	1
  1312  002F                     utoa@c:	
  1313                           
  1314                           ; 1 bytes @ 0xF
  1315  002F                     	ds	1
  1316  0030                     utoa@buf:	
  1317                           
  1318                           ; 1 bytes @ 0x10
  1319  0030                     	ds	1
  1320  0031                     ?_itoa:	
  1321  0031                     itoa@val:	
  1322                           ; 1 bytes @ 0x11
  1323                           
  1324                           
  1325                           ; 2 bytes @ 0x11
  1326  0031                     	ds	2
  1327  0033                     itoa@base:	
  1328                           
  1329                           ; 2 bytes @ 0x13
  1330  0033                     	ds	2
  1331  0035                     ??_itoa:	
  1332                           
  1333                           ; 1 bytes @ 0x15
  1334  0035                     	ds	1
  1335  0036                     itoa@cp:	
  1336                           
  1337                           ; 1 bytes @ 0x16
  1338  0036                     	ds	1
  1339  0037                     itoa@buf:	
  1340                           
  1341                           ; 1 bytes @ 0x17
  1342  0037                     	ds	1
  1343  0038                     ?__itoa:	
  1344  0038                     __itoa@number:	
  1345                           ; 1 bytes @ 0x18
  1346                           
  1347                           
  1348                           ; 2 bytes @ 0x18
  1349  0038                     	ds	2
  1350  003A                     __itoa@base:	
  1351                           
  1352                           ; 1 bytes @ 0x1A
  1353  003A                     	ds	1
  1354  003B                     ??__itoa:	
  1355                           
  1356                           ; 1 bytes @ 0x1B
  1357  003B                     	ds	2
  1358  003D                     __itoa@buffer:	
  1359                           
  1360                           ; 1 bytes @ 0x1D
  1361  003D                     	ds	1
  1362  003E                     ??_loop:	
  1363                           
  1364                           ; 1 bytes @ 0x1E
  1365  003E                     	ds	4
  1366  0042                     ??_main:	
  1367                           
  1368                           ; 1 bytes @ 0x22
  1369  0042                     	ds	1
  1370  0043                     main@bootCount:	
  1371                           
  1372                           ; 2 bytes @ 0x23
  1373  0043                     	ds	2
  1374                           
  1375                           	psect	maintext
  1376  028E                     __pmaintext:	
  1377 ;;
  1378 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1379 ;;
  1380 ;; *************** function _main *****************
  1381 ;; Defined at:
  1382 ;;		line 202 in file "main.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;		None
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;  bootCount       2   35[BANK0 ] unsigned int 
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  1    wreg      void 
  1389 ;; Registers used:
  1390 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1391 ;; Tracked objects:
  1392 ;;		On entry : B1F/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMMON   BANK0   BANK1
  1396 ;;      Params:         0       0       0
  1397 ;;      Locals:         0       2       0
  1398 ;;      Temps:          0       1       0
  1399 ;;      Totals:         0       3       0
  1400 ;;Total ram usage:        3 bytes
  1401 ;; Hardware stack levels required when called:    9
  1402 ;; This function calls:
  1403 ;;		_loop
  1404 ;;		_nrf24l01Init
  1405 ;;		_read_flashmem
  1406 ;;		_write_flashmem
  1407 ;; This function is called by:
  1408 ;;		Startup code after reset
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           
  1413                           ;psect for function _main
  1414  028E                     _main:	
  1415                           
  1416                           ;main.c: 205: ANSELA = 0x00;
  1417                           
  1418                           ;incstack = 0
  1419                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1420  028E  0023               	movlb	3	; select bank3
  1421  028F  018C               	clrf	12	;volatile
  1422                           
  1423                           ;main.c: 206: ANSELC = 0x00;
  1424  0290  018E               	clrf	14	;volatile
  1425                           
  1426                           ;main.c: 212: INTCONbits.PEIE = 0;
  1427  0291  130B               	bcf	11,6	;volatile
  1428                           
  1429                           ;main.c: 213: INTCONbits.GIE = 0;
  1430  0292  138B               	bcf	11,7	;volatile
  1431                           
  1432                           ;main.c: 215: OSCCONbits.IRCF = 0b1111;
  1433  0293  3078               	movlw	120
  1434  0294  0021               	movlb	1	; select bank1
  1435  0295  0499               	iorwf	25,f	;volatile
  1436                           
  1437                           ;main.c: 216: OSCCONbits.SCS = 0b10;
  1438  0296  0819               	movf	25,w	;volatile
  1439  0297  39FC               	andlw	-4
  1440  0298  3802               	iorlw	2
  1441  0299  0099               	movwf	25	;volatile
  1442                           
  1443                           ;main.c: 218: _delay((unsigned long)((10)*(16000000/4000.0)));
  1444  029A  3034               	movlw	52
  1445  029B  0020               	movlb	0	; select bank0
  1446  029C  00C2               	movwf	??_main
  1447  029D  30F1               	movlw	241
  1448  029E                     u1077:	
  1449  029E  0B89               	decfsz	9,f
  1450  029F  2A9E               	goto	u1077
  1451  02A0  0BC2               	decfsz	??_main,f
  1452  02A1  2A9E               	goto	u1077
  1453  02A2  3200               	nop2
  1454                           
  1455                           ;main.c: 220: nrf24l01Init();
  1456  02A3  25D4               	fcall	_nrf24l01Init
  1457                           
  1458                           ;main.c: 222: OPTION_REGbits.nWPUEN = 0;
  1459  02A4  0021               	movlb	1	; select bank1
  1460  02A5  1395               	bcf	21,7	;volatile
  1461                           
  1462                           ;main.c: 225: FVRCONbits.FVREN = 0;
  1463  02A6  0022               	movlb	2	; select bank2
  1464  02A7  1397               	bcf	23,7	;volatile
  1465                           
  1466                           ;main.c: 226: FVRCONbits.ADFVR = 1;
  1467  02A8  0817               	movf	23,w	;volatile
  1468  02A9  39FC               	andlw	-4
  1469  02AA  3801               	iorlw	1
  1470  02AB  0097               	movwf	23	;volatile
  1471                           
  1472                           ;main.c: 227: FVRCONbits.FVREN = 1;
  1473  02AC  1797               	bsf	23,7	;volatile
  1474                           
  1475                           ;main.c: 230: FVRCONbits.TSEN = 0;
  1476  02AD  1297               	bcf	23,5	;volatile
  1477                           
  1478                           ;main.c: 231: FVRCONbits.TSRNG = 0;
  1479  02AE  1217               	bcf	23,4	;volatile
  1480                           
  1481                           ;main.c: 232: FVRCONbits.TSEN = 1;
  1482  02AF  1697               	bsf	23,5	;volatile
  1483                           
  1484                           ;main.c: 235: ADCON0bits.ADON = 0;
  1485  02B0  0021               	movlb	1	; select bank1
  1486  02B1  101D               	bcf	29,0	;volatile
  1487                           
  1488                           ;main.c: 237: ANSELAbits.ANSA4 = 1;
  1489  02B2  0023               	movlb	3	; select bank3
  1490  02B3  160C               	bsf	12,4	;volatile
  1491                           
  1492                           ;main.c: 238: TRISAbits.TRISA4 = 1;
  1493  02B4  0021               	movlb	1	; select bank1
  1494  02B5  160C               	bsf	12,4	;volatile
  1495                           
  1496                           ;main.c: 239: WPUAbits.WPUA4 = 0;
  1497  02B6  0024               	movlb	4	; select bank4
  1498  02B7  120C               	bcf	12,4	;volatile
  1499                           
  1500                           ;main.c: 241: ANSELCbits.ANSC3 = 1;
  1501  02B8  0023               	movlb	3	; select bank3
  1502  02B9  158E               	bsf	14,3	;volatile
  1503                           
  1504                           ;main.c: 242: TRISCbits.TRISC3 = 1;
  1505  02BA  0021               	movlb	1	; select bank1
  1506  02BB  158E               	bsf	14,3	;volatile
  1507                           
  1508                           ;main.c: 244: ADCON1bits.ADCS = 0b111;
  1509  02BC  3070               	movlw	112
  1510  02BD  049E               	iorwf	30,f	;volatile
  1511                           
  1512                           ;main.c: 245: ADCON1bits.ADFM = 1;
  1513  02BE  179E               	bsf	30,7	;volatile
  1514                           
  1515                           ;main.c: 246: ADCON1bits.ADPREF = 0b00;
  1516  02BF  30FC               	movlw	-4
  1517  02C0  059E               	andwf	30,f	;volatile
  1518                           
  1519                           ;main.c: 248: PIE1bits.ADIE = 1;
  1520  02C1  1711               	bsf	17,6	;volatile
  1521                           
  1522                           ;main.c: 250: ADCON0bits.CHS = 3;
  1523  02C2  081D               	movf	29,w	;volatile
  1524  02C3  3983               	andlw	-125
  1525  02C4  380C               	iorlw	12
  1526  02C5  009D               	movwf	29	;volatile
  1527                           
  1528                           ;main.c: 251: ADCON0bits.ADON = 1;
  1529  02C6  141D               	bsf	29,0	;volatile
  1530                           
  1531                           ;main.c: 255: TRISAbits.TRISA2 = 1;
  1532  02C7  150C               	bsf	12,2	;volatile
  1533                           
  1534                           ;main.c: 256: INTCONbits.INTE = 1;
  1535  02C8  160B               	bsf	11,4	;volatile
  1536                           
  1537                           ;main.c: 257: OPTION_REGbits.INTEDG = 0;
  1538  02C9  1315               	bcf	21,6	;volatile
  1539                           
  1540                           ;main.c: 261: WDTCONbits.WDTPS = 12;
  1541  02CA  0817               	movf	23,w	;volatile
  1542  02CB  39C1               	andlw	-63
  1543  02CC  3818               	iorlw	24
  1544  02CD  0097               	movwf	23	;volatile
  1545                           
  1546                           ;main.c: 266: TRISAbits.TRISA5 = 0;
  1547  02CE  128C               	bcf	12,5	;volatile
  1548                           
  1549                           ;main.c: 267: PORTAbits.RA5 = 0;
  1550  02CF  0020               	movlb	0	; select bank0
  1551  02D0  128C               	bcf	12,5	;volatile
  1552                           
  1553                           ;main.c: 272: INTCONbits.PEIE = 1;
  1554  02D1  170B               	bsf	11,6	;volatile
  1555                           
  1556                           ;main.c: 273: INTCONbits.GIE = 1;
  1557  02D2  178B               	bsf	11,7	;volatile
  1558                           
  1559                           ;main.c: 275: unsigned int bootCount = read_flashmem(16);
  1560  02D3  3010               	movlw	16
  1561  02D4  00A0               	movwf	read_flashmem@offset
  1562  02D5  3000               	movlw	0
  1563  02D6  00A1               	movwf	read_flashmem@offset+1
  1564  02D7  2465               	fcall	_read_flashmem
  1565  02D8  0020               	movlb	0	; select bank0
  1566  02D9  0821               	movf	?_read_flashmem+1,w
  1567  02DA  00C4               	movwf	main@bootCount+1
  1568  02DB  0820               	movf	?_read_flashmem,w
  1569  02DC  00C3               	movwf	main@bootCount
  1570                           
  1571                           ;main.c: 276: if (bootCount == 13313){
  1572  02DD  0343               	decf	main@bootCount,w
  1573  02DE  3034               	movlw	52
  1574  02DF  1903               	skipnz
  1575  02E0  0644               	xorwf	main@bootCount+1,w
  1576  02E1  1D03               	btfss	3,2
  1577  02E2  2AE7               	goto	l189
  1578                           
  1579                           ;main.c: 277: bootCount = 1;
  1580  02E3  3001               	movlw	1
  1581  02E4  00C3               	movwf	main@bootCount
  1582  02E5  3000               	movlw	0
  1583  02E6  00C4               	movwf	main@bootCount+1
  1584  02E7                     l189:	
  1585                           
  1586                           ;main.c: 278: }
  1587                           ;main.c: 279: bootCount++;
  1588  02E7  3001               	movlw	1
  1589  02E8  07C3               	addwf	main@bootCount,f
  1590  02E9  3000               	movlw	0
  1591  02EA  3DC4               	addwfc	main@bootCount+1,f
  1592                           
  1593                           ;main.c: 280: write_flashmem(16, bootCount);
  1594  02EB  3010               	movlw	16
  1595  02EC  00A0               	movwf	write_flashmem@offset
  1596  02ED  3000               	movlw	0
  1597  02EE  00A1               	movwf	write_flashmem@offset+1
  1598  02EF  0844               	movf	main@bootCount+1,w
  1599  02F0  00A3               	movwf	write_flashmem@data+1
  1600  02F1  0843               	movf	main@bootCount,w
  1601  02F2  00A2               	movwf	write_flashmem@data
  1602  02F3  23F4               	fcall	_write_flashmem
  1603  02F4                     l1996:	
  1604                           ;main.c: 282: while(1){
  1605                           
  1606                           
  1607                           ;main.c: 283: loop();
  1608  02F4  2051               	fcall	_loop
  1609  02F5  2AF4               	goto	l1996
  1610  02F6                     __end_of_main:	
  1611                           ;main.c: 284: }
  1612                           ;main.c: 286: return;
  1613                           
  1614                           
  1615                           	psect	text1
  1616  03F4                     __ptext1:	
  1617 ;; *************** function _write_flashmem *****************
  1618 ;; Defined at:
  1619 ;;		line 4 in file "flash.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  offset          2    0[BANK0 ] unsigned int 
  1622 ;;  data            2    2[BANK0 ] unsigned int 
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;  address         2    4[BANK0 ] unsigned int 
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		wreg, status,2, status,0
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMMON   BANK0   BANK1
  1634 ;;      Params:         0       4       0
  1635 ;;      Locals:         0       2       0
  1636 ;;      Temps:          0       0       0
  1637 ;;      Totals:         0       6       0
  1638 ;;Total ram usage:        6 bytes
  1639 ;; Hardware stack levels used:    1
  1640 ;; Hardware stack levels required when called:    4
  1641 ;; This function calls:
  1642 ;;		Nothing
  1643 ;; This function is called by:
  1644 ;;		_main
  1645 ;; This function uses a non-reentrant model
  1646 ;;
  1647                           
  1648                           
  1649                           ;psect for function _write_flashmem
  1650  03F4                     _write_flashmem:	
  1651                           
  1652                           ;flash.c: 6: unsigned int address;
  1653                           ;flash.c: 8: INTCONbits.GIE = 0;
  1654                           
  1655                           ;incstack = 0
  1656                           ; Regs used in _write_flashmem: [wreg+status,2+status,0]
  1657  03F4  138B               	bcf	11,7	;volatile
  1658                           
  1659                           ;flash.c: 11: PMCON1 = 0x00;
  1660  03F5  0023               	movlb	3	; select bank3
  1661  03F6  0195               	clrf	21	;volatile
  1662                           
  1663                           ;flash.c: 13: address = (0x800U-32) + offset;
  1664  03F7  0020               	movlb	0	; select bank0
  1665  03F8  0820               	movf	write_flashmem@offset,w
  1666  03F9  3EE0               	addlw	224
  1667  03FA  00A4               	movwf	write_flashmem@address
  1668  03FB  3007               	movlw	7
  1669  03FC  3D21               	addwfc	write_flashmem@offset+1,w
  1670  03FD  00A5               	movwf	write_flashmem@address+1
  1671                           
  1672                           ;flash.c: 14: PMADRL = (char) (address >> 0);
  1673  03FE  0824               	movf	write_flashmem@address,w
  1674  03FF  0023               	movlb	3	; select bank3
  1675  0400  0091               	movwf	17	;volatile
  1676                           
  1677                           ;flash.c: 15: PMADRH = (char) (address >> 8);
  1678  0401  0020               	movlb	0	; select bank0
  1679  0402  0825               	movf	write_flashmem@address+1,w
  1680  0403  0023               	movlb	3	; select bank3
  1681  0404  0092               	movwf	18	;volatile
  1682                           
  1683                           ;flash.c: 17: PMCON1bits.FREE = 1;
  1684  0405  1615               	bsf	21,4	;volatile
  1685                           
  1686                           ;flash.c: 18: PMCON1bits.WREN = 1;
  1687  0406  1515               	bsf	21,2	;volatile
  1688                           
  1689                           ;flash.c: 20: PMCON2 = 0x55;
  1690  0407  3055               	movlw	85
  1691  0408  0096               	movwf	22	;volsfr
  1692                           
  1693                           ;flash.c: 21: PMCON2 = 0xAA;
  1694  0409  30AA               	movlw	170
  1695  040A  0096               	movwf	22	;volsfr
  1696                           
  1697                           ;flash.c: 23: PMCON1bits.WR = 1;
  1698  040B  1495               	bsf	21,1	;volatile
  1699                           
  1700                           ;flash.c: 25: __nop();
  1701  040C  0000               	nop
  1702                           
  1703                           ;flash.c: 26: __nop();
  1704  040D  0000               	nop
  1705                           
  1706                           ;flash.c: 28: PMCON1bits.WREN = 0;
  1707  040E  0023               	movlb	3	; select bank3
  1708  040F  1115               	bcf	21,2	;volatile
  1709                           
  1710                           ;flash.c: 32: PMCON1 = 0x00;
  1711  0410  0195               	clrf	21	;volatile
  1712                           
  1713                           ;flash.c: 34: PMADRL = (char) (address >> 0);
  1714  0411  0020               	movlb	0	; select bank0
  1715  0412  0824               	movf	write_flashmem@address,w
  1716  0413  0023               	movlb	3	; select bank3
  1717  0414  0091               	movwf	17	;volatile
  1718                           
  1719                           ;flash.c: 35: PMADRH = (char) (address >> 8);
  1720  0415  0020               	movlb	0	; select bank0
  1721  0416  0825               	movf	write_flashmem@address+1,w
  1722  0417  0023               	movlb	3	; select bank3
  1723  0418  0092               	movwf	18	;volatile
  1724                           
  1725                           ;flash.c: 37: PMCON1bits.FREE = 0;
  1726  0419  1215               	bcf	21,4	;volatile
  1727                           
  1728                           ;flash.c: 38: PMCON1bits.LWLO = 1;
  1729  041A  1695               	bsf	21,5	;volatile
  1730                           
  1731                           ;flash.c: 39: PMCON1bits.WREN = 1;
  1732  041B  1515               	bsf	21,2	;volatile
  1733                           
  1734                           ;flash.c: 41: PMDATL = (data >> 0);
  1735  041C  0020               	movlb	0	; select bank0
  1736  041D  0822               	movf	write_flashmem@data,w
  1737  041E  0023               	movlb	3	; select bank3
  1738  041F  0093               	movwf	19	;volatile
  1739                           
  1740                           ;flash.c: 42: PMDATH = (data >> 8);
  1741  0420  0020               	movlb	0	; select bank0
  1742  0421  0823               	movf	write_flashmem@data+1,w
  1743  0422  0023               	movlb	3	; select bank3
  1744  0423  0094               	movwf	20	;volatile
  1745                           
  1746                           ;flash.c: 44: PMCON1bits.LWLO = 0;
  1747  0424  1295               	bcf	21,5	;volatile
  1748                           
  1749                           ;flash.c: 46: PMCON2 = 0x55;
  1750  0425  3055               	movlw	85
  1751  0426  0096               	movwf	22	;volsfr
  1752                           
  1753                           ;flash.c: 47: PMCON2 = 0xAA;
  1754  0427  30AA               	movlw	170
  1755  0428  0096               	movwf	22	;volsfr
  1756                           
  1757                           ;flash.c: 49: PMCON1bits.WR = 1;
  1758  0429  1495               	bsf	21,1	;volatile
  1759                           
  1760                           ;flash.c: 51: __nop();
  1761  042A  0000               	nop
  1762                           
  1763                           ;flash.c: 52: __nop();
  1764  042B  0000               	nop
  1765                           
  1766                           ;flash.c: 54: PMCON1bits.WREN = 0;
  1767  042C  0023               	movlb	3	; select bank3
  1768  042D  1115               	bcf	21,2	;volatile
  1769                           
  1770                           ;flash.c: 57: INTCONbits.GIE = 1;
  1771  042E  178B               	bsf	11,7	;volatile
  1772  042F  0008               	return
  1773  0430                     __end_of_write_flashmem:	
  1774                           
  1775                           	psect	text2
  1776  05D4                     __ptext2:	
  1777 ;; *************** function _nrf24l01Init *****************
  1778 ;; Defined at:
  1779 ;;		line 230 in file "nrf24l01.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;		None
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;		None
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      void 
  1786 ;; Registers used:
  1787 ;;		wreg, status,2, status,0, pclath, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMMON   BANK0   BANK1
  1793 ;;      Params:         0       0       0
  1794 ;;      Locals:         0       0       0
  1795 ;;      Temps:          0       1       0
  1796 ;;      Totals:         0       1       0
  1797 ;;Total ram usage:        1 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    7
  1800 ;; This function calls:
  1801 ;;		_nrf24l01InitRegisters
  1802 ;;		_nrf24l01InterfaceInit
  1803 ;; This function is called by:
  1804 ;;		_main
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           
  1809                           ;psect for function _nrf24l01Init
  1810  05D4                     _nrf24l01Init:	
  1811                           
  1812                           ;nrf24l01.c: 233: nrf24l01InterfaceInit();
  1813                           
  1814                           ;incstack = 0
  1815                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1816  05D4  25FA               	fcall	_nrf24l01InterfaceInit
  1817                           
  1818                           ;nrf24l01.c: 237: PORTAbits.RA0 = 0;
  1819  05D5  0020               	movlb	0	; select bank0
  1820  05D6  100C               	bcf	12,0	;volatile
  1821                           
  1822                           ;nrf24l01.c: 239: _delay((unsigned long)((11)*(16000000/4000.0)));
  1823  05D7  303A               	movlw	58
  1824  05D8  0020               	movlb	0	; select bank0
  1825  05D9  00AA               	movwf	??_nrf24l01Init
  1826  05DA  3023               	movlw	35
  1827  05DB                     u1087:	
  1828  05DB  0B89               	decfsz	9,f
  1829  05DC  2DDB               	goto	u1087
  1830  05DD  0BAA               	decfsz	??_nrf24l01Init,f
  1831  05DE  2DDB               	goto	u1087
  1832                           
  1833                           ;nrf24l01.c: 241: nrf24l01InitRegisters();
  1834  05DF  2204               	fcall	_nrf24l01InitRegisters
  1835                           
  1836                           ;nrf24l01.c: 243: _delay((unsigned long)((2)*(16000000/4000.0)));
  1837  05E0  300B               	movlw	11
  1838  05E1  0020               	movlb	0	; select bank0
  1839  05E2  00AA               	movwf	??_nrf24l01Init
  1840  05E3  3062               	movlw	98
  1841  05E4                     u1097:	
  1842  05E4  0B89               	decfsz	9,f
  1843  05E5  2DE4               	goto	u1097
  1844  05E6  0BAA               	decfsz	??_nrf24l01Init,f
  1845  05E7  2DE4               	goto	u1097
  1846  05E8  0000               	nop
  1847  05E9  0008               	return
  1848  05EA                     __end_of_nrf24l01Init:	
  1849                           
  1850                           	psect	text3
  1851  05FA                     __ptext3:	
  1852 ;; *************** function _nrf24l01InterfaceInit *****************
  1853 ;; Defined at:
  1854 ;;		line 9 in file "interface.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;		None
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      void 
  1861 ;; Registers used:
  1862 ;;		wreg, status,2, status,0
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1
  1868 ;;      Params:         0       0       0
  1869 ;;      Locals:         0       0       0
  1870 ;;      Temps:          0       0       0
  1871 ;;      Totals:         0       0       0
  1872 ;;Total ram usage:        0 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    4
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_nrf24l01Init
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           
  1883                           ;psect for function _nrf24l01InterfaceInit
  1884  05FA                     _nrf24l01InterfaceInit:	
  1885                           
  1886                           ;interface.c: 11: TRISAbits.TRISA0 = 0;
  1887                           
  1888                           ;incstack = 0
  1889                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  1890  05FA  0021               	movlb	1	; select bank1
  1891  05FB  100C               	bcf	12,0	;volatile
  1892                           
  1893                           ;interface.c: 12: TRISAbits.TRISA1 = 0;
  1894  05FC  108C               	bcf	12,1	;volatile
  1895                           
  1896                           ;interface.c: 14: TRISCbits.TRISC1 = 1;
  1897  05FD  148E               	bsf	14,1	;volatile
  1898                           
  1899                           ;interface.c: 15: TRISCbits.TRISC2 = 0;
  1900  05FE  110E               	bcf	14,2	;volatile
  1901                           
  1902                           ;interface.c: 16: TRISCbits.TRISC0 = 0;
  1903  05FF  100E               	bcf	14,0	;volatile
  1904                           
  1905                           ;interface.c: 18: SSPCON1bits.SSPEN = 0;
  1906  0600  0024               	movlb	4	; select bank4
  1907  0601  1295               	bcf	21,5	;volatile
  1908                           
  1909                           ;interface.c: 19: SSPCON1bits.CKP = 0;
  1910  0602  1215               	bcf	21,4	;volatile
  1911                           
  1912                           ;interface.c: 20: SSP1STATbits.CKE = 1;
  1913  0603  1714               	bsf	20,6	;volatile
  1914                           
  1915                           ;interface.c: 21: SSPCON1bits.SSPM = 0b0000;
  1916  0604  30F0               	movlw	-16
  1917  0605  0595               	andwf	21,f	;volatile
  1918                           
  1919                           ;interface.c: 23: SSPCON1bits.SSPEN = 1;
  1920  0606  1695               	bsf	21,5	;volatile
  1921  0607  0008               	return
  1922  0608                     __end_of_nrf24l01InterfaceInit:	
  1923                           
  1924                           	psect	text4
  1925  0204                     __ptext4:	
  1926 ;; *************** function _nrf24l01InitRegisters *****************
  1927 ;; Defined at:
  1928 ;;		line 142 in file "nrf24l01.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;		None
  1931 ;; Auto vars:     Size  Location     Type
  1932 ;;  DynPD           1    9[BANK0 ] struct .
  1933 ;;  enAA            1    8[BANK0 ] struct .
  1934 ;;  enRXAddr        1    7[BANK0 ] struct .
  1935 ;;  status          1    6[BANK0 ] struct .
  1936 ;;  config          1    5[BANK0 ] struct .
  1937 ;;  rfSetup         1    4[BANK0 ] struct .
  1938 ;;  feature         1    3[BANK0 ] struct .
  1939 ;;  setupAW         1    2[BANK0 ] struct .
  1940 ;;  channel         1    1[BANK0 ] struct .
  1941 ;; Return value:  Size  Location     Type
  1942 ;;                  1    wreg      void 
  1943 ;; Registers used:
  1944 ;;		wreg, status,2, status,0, pclath, cstack
  1945 ;; Tracked objects:
  1946 ;;		On entry : 0/0
  1947 ;;		On exit  : 0/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMMON   BANK0   BANK1
  1950 ;;      Params:         0       0       0
  1951 ;;      Locals:         0       9       0
  1952 ;;      Temps:          0       1       0
  1953 ;;      Totals:         0      10       0
  1954 ;;Total ram usage:       10 bytes
  1955 ;; Hardware stack levels used:    1
  1956 ;; Hardware stack levels required when called:    6
  1957 ;; This function calls:
  1958 ;;		_nrf24l01Send
  1959 ;; This function is called by:
  1960 ;;		_nrf24l01Init
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           
  1965                           ;psect for function _nrf24l01InitRegisters
  1966  0204                     _nrf24l01InitRegisters:	
  1967                           
  1968                           ;nrf24l01.c: 144: nrf24l01Send(0b00100000 | 0x00, 0x00);
  1969                           
  1970                           ;incstack = 0
  1971                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  1972  0204  01F1               	clrf	nrf24l01Send@data
  1973  0205  3020               	movlw	32
  1974  0206  2608               	fcall	_nrf24l01Send
  1975                           
  1976                           ;nrf24l01.c: 146: _delay((unsigned long)((10)*(16000000/4000.0)));
  1977  0207  3034               	movlw	52
  1978  0208  0020               	movlb	0	; select bank0
  1979  0209  00A0               	movwf	??_nrf24l01InitRegisters
  1980  020A  30F1               	movlw	241
  1981  020B                     u1107:	
  1982  020B  0B89               	decfsz	9,f
  1983  020C  2A0B               	goto	u1107
  1984  020D  0BA0               	decfsz	??_nrf24l01InitRegisters,f
  1985  020E  2A0B               	goto	u1107
  1986  020F  3200               	nop2
  1987                           
  1988                           ;nrf24l01.c: 148: n_SETUP_AW_t setupAW;
  1989                           ;nrf24l01.c: 149: setupAW.byte = 0x00;
  1990  0210  0020               	movlb	0	; select bank0
  1991  0211  01A2               	clrf	nrf24l01InitRegisters@setupAW
  1992                           
  1993                           ;nrf24l01.c: 150: setupAW.AW = 3;
  1994  0212  3003               	movlw	3
  1995  0213  04A2               	iorwf	nrf24l01InitRegisters@setupAW,f
  1996                           
  1997                           ;nrf24l01.c: 151: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  1998  0214  0822               	movf	nrf24l01InitRegisters@setupAW,w
  1999  0215  00A0               	movwf	??_nrf24l01InitRegisters
  2000  0216  0820               	movf	??_nrf24l01InitRegisters,w
  2001  0217  00F1               	movwf	nrf24l01Send@data
  2002  0218  3022               	movlw	34
  2003  0219  2608               	fcall	_nrf24l01Send
  2004                           
  2005                           ;nrf24l01.c: 160: n_RF_CH_t channel;
  2006                           ;nrf24l01.c: 161: channel.RF_CH = 83;
  2007  021A  0020               	movlb	0	; select bank0
  2008  021B  0821               	movf	nrf24l01InitRegisters@channel,w
  2009  021C  3980               	andlw	-128
  2010  021D  3853               	iorlw	83
  2011  021E  00A1               	movwf	nrf24l01InitRegisters@channel
  2012                           
  2013                           ;nrf24l01.c: 162: nrf24l01Send(0b00100000 | 0x05, channel.byte);
  2014  021F  0821               	movf	nrf24l01InitRegisters@channel,w
  2015  0220  00A0               	movwf	??_nrf24l01InitRegisters
  2016  0221  0820               	movf	??_nrf24l01InitRegisters,w
  2017  0222  00F1               	movwf	nrf24l01Send@data
  2018  0223  3025               	movlw	37
  2019  0224  2608               	fcall	_nrf24l01Send
  2020                           
  2021                           ;nrf24l01.c: 165: n_RF_SETUP_t rfSetup;
  2022                           ;nrf24l01.c: 166: rfSetup.RF_DR_LOW = 0;
  2023  0225  0020               	movlb	0	; select bank0
  2024  0226  12A4               	bcf	nrf24l01InitRegisters@rfSetup,5
  2025                           
  2026                           ;nrf24l01.c: 167: rfSetup.RF_DR_HIGH = 1;
  2027  0227  15A4               	bsf	nrf24l01InitRegisters@rfSetup,3
  2028                           
  2029                           ;nrf24l01.c: 168: rfSetup.RF_PWR = 3;
  2030  0228  3006               	movlw	6
  2031  0229  04A4               	iorwf	nrf24l01InitRegisters@rfSetup,f
  2032                           
  2033                           ;nrf24l01.c: 169: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  2034  022A  0824               	movf	nrf24l01InitRegisters@rfSetup,w
  2035  022B  00A0               	movwf	??_nrf24l01InitRegisters
  2036  022C  0820               	movf	??_nrf24l01InitRegisters,w
  2037  022D  00F1               	movwf	nrf24l01Send@data
  2038  022E  3026               	movlw	38
  2039  022F  2608               	fcall	_nrf24l01Send
  2040                           
  2041                           ;nrf24l01.c: 172: n_CONFIG_t config;
  2042                           ;nrf24l01.c: 173: config.PRIM_RX = 1;
  2043  0230  0020               	movlb	0	; select bank0
  2044  0231  1425               	bsf	nrf24l01InitRegisters@config,0
  2045                           
  2046                           ;nrf24l01.c: 174: config.EN_CRC = 1;
  2047  0232  15A5               	bsf	nrf24l01InitRegisters@config,3
  2048                           
  2049                           ;nrf24l01.c: 175: config.CRCO = 1;
  2050  0233  1525               	bsf	nrf24l01InitRegisters@config,2
  2051                           
  2052                           ;nrf24l01.c: 176: config.PWR_UP = 1;
  2053  0234  14A5               	bsf	nrf24l01InitRegisters@config,1
  2054                           
  2055                           ;nrf24l01.c: 177: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2056  0235  0825               	movf	nrf24l01InitRegisters@config,w
  2057  0236  00A0               	movwf	??_nrf24l01InitRegisters
  2058  0237  0820               	movf	??_nrf24l01InitRegisters,w
  2059  0238  00F1               	movwf	nrf24l01Send@data
  2060  0239  3020               	movlw	32
  2061  023A  2608               	fcall	_nrf24l01Send
  2062                           
  2063                           ;nrf24l01.c: 180: n_EN_RXADDR_t enRXAddr;
  2064                           ;nrf24l01.c: 181: enRXAddr.ERX_P0 = 1;
  2065  023B  0020               	movlb	0	; select bank0
  2066  023C  1427               	bsf	nrf24l01InitRegisters@enRXAddr,0
  2067                           
  2068                           ;nrf24l01.c: 182: enRXAddr.ERX_P1 = 1;
  2069  023D  14A7               	bsf	nrf24l01InitRegisters@enRXAddr,1
  2070                           
  2071                           ;nrf24l01.c: 183: enRXAddr.ERX_P2 = 1;
  2072  023E  1527               	bsf	nrf24l01InitRegisters@enRXAddr,2
  2073                           
  2074                           ;nrf24l01.c: 184: enRXAddr.ERX_P3 = 1;
  2075  023F  15A7               	bsf	nrf24l01InitRegisters@enRXAddr,3
  2076                           
  2077                           ;nrf24l01.c: 185: enRXAddr.ERX_P4 = 1;
  2078  0240  1627               	bsf	nrf24l01InitRegisters@enRXAddr,4
  2079                           
  2080                           ;nrf24l01.c: 186: enRXAddr.ERX_P5 = 1;
  2081  0241  16A7               	bsf	nrf24l01InitRegisters@enRXAddr,5
  2082                           
  2083                           ;nrf24l01.c: 187: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  2084  0242  0827               	movf	nrf24l01InitRegisters@enRXAddr,w
  2085  0243  00A0               	movwf	??_nrf24l01InitRegisters
  2086  0244  0820               	movf	??_nrf24l01InitRegisters,w
  2087  0245  00F1               	movwf	nrf24l01Send@data
  2088  0246  3022               	movlw	34
  2089  0247  2608               	fcall	_nrf24l01Send
  2090                           
  2091                           ;nrf24l01.c: 190: n_EN_AA_t enAA;
  2092                           ;nrf24l01.c: 191: enAA.byte = nrf24l01Send(0b00000000 | 0x01, 0);
  2093  0248  01F1               	clrf	nrf24l01Send@data
  2094  0249  3001               	movlw	1
  2095  024A  2608               	fcall	_nrf24l01Send
  2096  024B  0020               	movlb	0	; select bank0
  2097  024C  00A0               	movwf	??_nrf24l01InitRegisters
  2098  024D  0820               	movf	??_nrf24l01InitRegisters,w
  2099  024E  00A8               	movwf	nrf24l01InitRegisters@enAA
  2100                           
  2101                           ;nrf24l01.c: 192: enAA.ENAA_P0 = 0;
  2102  024F  1028               	bcf	nrf24l01InitRegisters@enAA,0
  2103                           
  2104                           ;nrf24l01.c: 193: enAA.ENAA_P1 = 0;
  2105  0250  10A8               	bcf	nrf24l01InitRegisters@enAA,1
  2106                           
  2107                           ;nrf24l01.c: 194: enAA.ENAA_P2 = 0;
  2108  0251  1128               	bcf	nrf24l01InitRegisters@enAA,2
  2109                           
  2110                           ;nrf24l01.c: 195: enAA.ENAA_P3 = 0;
  2111  0252  11A8               	bcf	nrf24l01InitRegisters@enAA,3
  2112                           
  2113                           ;nrf24l01.c: 196: enAA.ENAA_P4 = 0;
  2114  0253  1228               	bcf	nrf24l01InitRegisters@enAA,4
  2115                           
  2116                           ;nrf24l01.c: 197: enAA.ENAA_P5 = 0;
  2117  0254  12A8               	bcf	nrf24l01InitRegisters@enAA,5
  2118                           
  2119                           ;nrf24l01.c: 198: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  2120  0255  0828               	movf	nrf24l01InitRegisters@enAA,w
  2121  0256  00A0               	movwf	??_nrf24l01InitRegisters
  2122  0257  0820               	movf	??_nrf24l01InitRegisters,w
  2123  0258  00F1               	movwf	nrf24l01Send@data
  2124  0259  3021               	movlw	33
  2125  025A  2608               	fcall	_nrf24l01Send
  2126                           
  2127                           ;nrf24l01.c: 202: n_FEATURE_t feature;
  2128                           ;nrf24l01.c: 203: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  2129  025B  01F1               	clrf	nrf24l01Send@data
  2130  025C  301D               	movlw	29
  2131  025D  2608               	fcall	_nrf24l01Send
  2132  025E  0020               	movlb	0	; select bank0
  2133  025F  00A0               	movwf	??_nrf24l01InitRegisters
  2134  0260  0820               	movf	??_nrf24l01InitRegisters,w
  2135  0261  00A3               	movwf	nrf24l01InitRegisters@feature
  2136                           
  2137                           ;nrf24l01.c: 204: feature.EN_DPL = 1;
  2138  0262  1523               	bsf	nrf24l01InitRegisters@feature,2
  2139                           
  2140                           ;nrf24l01.c: 205: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  2141  0263  0823               	movf	nrf24l01InitRegisters@feature,w
  2142  0264  00A0               	movwf	??_nrf24l01InitRegisters
  2143  0265  0820               	movf	??_nrf24l01InitRegisters,w
  2144  0266  00F1               	movwf	nrf24l01Send@data
  2145  0267  303D               	movlw	61
  2146  0268  2608               	fcall	_nrf24l01Send
  2147                           
  2148                           ;nrf24l01.c: 207: n_DYNPD_t DynPD;
  2149                           ;nrf24l01.c: 208: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  2150  0269  01F1               	clrf	nrf24l01Send@data
  2151  026A  301C               	movlw	28
  2152  026B  2608               	fcall	_nrf24l01Send
  2153  026C  0020               	movlb	0	; select bank0
  2154  026D  00A0               	movwf	??_nrf24l01InitRegisters
  2155  026E  0820               	movf	??_nrf24l01InitRegisters,w
  2156  026F  00A9               	movwf	nrf24l01InitRegisters@DynPD
  2157                           
  2158                           ;nrf24l01.c: 209: DynPD.DPL_P0 = 1;
  2159  0270  1429               	bsf	nrf24l01InitRegisters@DynPD,0
  2160                           
  2161                           ;nrf24l01.c: 210: DynPD.DPL_P1 = 1;
  2162  0271  14A9               	bsf	nrf24l01InitRegisters@DynPD,1
  2163                           
  2164                           ;nrf24l01.c: 211: DynPD.DPL_P2 = 1;
  2165  0272  1529               	bsf	nrf24l01InitRegisters@DynPD,2
  2166                           
  2167                           ;nrf24l01.c: 212: DynPD.DPL_P3 = 1;
  2168  0273  15A9               	bsf	nrf24l01InitRegisters@DynPD,3
  2169                           
  2170                           ;nrf24l01.c: 213: DynPD.DPL_P4 = 1;
  2171  0274  1629               	bsf	nrf24l01InitRegisters@DynPD,4
  2172                           
  2173                           ;nrf24l01.c: 214: DynPD.DPL_P5 = 1;
  2174  0275  16A9               	bsf	nrf24l01InitRegisters@DynPD,5
  2175                           
  2176                           ;nrf24l01.c: 215: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  2177  0276  0829               	movf	nrf24l01InitRegisters@DynPD,w
  2178  0277  00A0               	movwf	??_nrf24l01InitRegisters
  2179  0278  0820               	movf	??_nrf24l01InitRegisters,w
  2180  0279  00F1               	movwf	nrf24l01Send@data
  2181  027A  303C               	movlw	60
  2182  027B  2608               	fcall	_nrf24l01Send
  2183                           
  2184                           ;nrf24l01.c: 218: n_STATUS_t status;
  2185                           ;nrf24l01.c: 219: status.byte = 0x00;
  2186  027C  0020               	movlb	0	; select bank0
  2187  027D  01A6               	clrf	nrf24l01InitRegisters@status
  2188                           
  2189                           ;nrf24l01.c: 220: status.RX_DR = 1;
  2190  027E  1726               	bsf	nrf24l01InitRegisters@status,6
  2191                           
  2192                           ;nrf24l01.c: 221: status.TX_DS = 1;
  2193  027F  16A6               	bsf	nrf24l01InitRegisters@status,5
  2194                           
  2195                           ;nrf24l01.c: 222: status.MAX_RT = 1;
  2196  0280  1626               	bsf	nrf24l01InitRegisters@status,4
  2197                           
  2198                           ;nrf24l01.c: 223: nrf24l01Send(0b00100000 | 0x07, status.byte);
  2199  0281  0826               	movf	nrf24l01InitRegisters@status,w
  2200  0282  00A0               	movwf	??_nrf24l01InitRegisters
  2201  0283  0820               	movf	??_nrf24l01InitRegisters,w
  2202  0284  00F1               	movwf	nrf24l01Send@data
  2203  0285  3027               	movlw	39
  2204  0286  2608               	fcall	_nrf24l01Send
  2205                           
  2206                           ;nrf24l01.c: 226: nrf24l01Send(0b11100001, 0);
  2207  0287  01F1               	clrf	nrf24l01Send@data
  2208  0288  30E1               	movlw	225
  2209  0289  2608               	fcall	_nrf24l01Send
  2210                           
  2211                           ;nrf24l01.c: 227: nrf24l01Send(0b11100010, 0);
  2212  028A  01F1               	clrf	nrf24l01Send@data
  2213  028B  30E2               	movlw	226
  2214  028C  2608               	fcall	_nrf24l01Send
  2215  028D  0008               	return
  2216  028E                     __end_of_nrf24l01InitRegisters:	
  2217                           
  2218                           	psect	text5
  2219  0051                     __ptext5:	
  2220 ;; *************** function _loop *****************
  2221 ;; Defined at:
  2222 ;;		line 75 in file "main.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;		None
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;		None
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  1    wreg      void 
  2229 ;; Registers used:
  2230 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMMON   BANK0   BANK1
  2236 ;;      Params:         0       0       0
  2237 ;;      Locals:         0       0       0
  2238 ;;      Temps:          0       4       0
  2239 ;;      Totals:         0       4       0
  2240 ;;Total ram usage:        4 bytes
  2241 ;; Hardware stack levels used:    1
  2242 ;; Hardware stack levels required when called:    8
  2243 ;; This function calls:
  2244 ;;		___lldiv
  2245 ;;		___lmul
  2246 ;;		__itoa
  2247 ;;		_nrf24l01SendString
  2248 ;;		_nrf24l01SetRecieveMode
  2249 ;;		_read_flashmem
  2250 ;;		_startADC
  2251 ;;		_strcpy
  2252 ;;		_strlen
  2253 ;; This function is called by:
  2254 ;;		_main
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           
  2259                           ;psect for function _loop
  2260  0051                     _loop:	
  2261                           
  2262                           ;main.c: 77: if (mode != 1) {
  2263                           
  2264                           ;incstack = 0
  2265                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2266  0051  037D               	decf	_mode,w
  2267  0052  1903               	btfsc	3,2
  2268  0053  29E6               	goto	l1884
  2269  0054  0064               	clrwdt	;# 
  2270                           
  2271                           ;main.c: 79: }
  2272                           ;main.c: 81: switch (mode){
  2273  0055  29E6               	goto	l1884
  2274  0056                     l1802:	
  2275                           ;main.c: 83: case 1:
  2276                           
  2277                           
  2278                           ;main.c: 84: nrf24l01SetRecieveMode();
  2279  0056  256A               	fcall	_nrf24l01SetRecieveMode
  2280                           
  2281                           ;main.c: 86: PORTAbits.RA5 = (unsigned) !PORTAbits.RA5;
  2282  0057  1003               	clrc
  2283  0058  0020               	movlb	0	; select bank0
  2284  0059  1E8C               	btfss	12,5	;volatile
  2285  005A  1403               	setc
  2286  005B  1C03               	btfss	3,0
  2287  005C  2860               	goto	u930
  2288  005D  0020               	movlb	0	; select bank0
  2289  005E  168C               	bsf	12,5	;volatile
  2290  005F  2862               	goto	u944
  2291  0060                     u930:	
  2292  0060  0020               	movlb	0	; select bank0
  2293  0061  128C               	bcf	12,5	;volatile
  2294  0062                     u944:	
  2295  0062  0063               	sleep	;# 
  2296                           
  2297                           ;main.c: 89: __nop();
  2298  0063  0000               	nop
  2299                           
  2300                           ;main.c: 90: __nop();
  2301  0064  0000               	nop
  2302                           
  2303                           ;main.c: 91: if (!STATUSbits.nTO && !STATUSbits.nPD){
  2304  0065  0020               	movlb	0	; select bank0
  2305  0066  1E03               	btfss	3,4	;volatile
  2306  0067  1983               	btfsc	3,3	;volatile
  2307  0068  286E               	goto	l1818
  2308                           
  2309                           ;main.c: 92: mode = nextMode;
  2310  0069  085C               	movf	_nextMode,w
  2311  006A  00BE               	movwf	??_loop
  2312  006B  083E               	movf	??_loop,w
  2313  006C  00FD               	movwf	_mode
  2314                           
  2315                           ;main.c: 93: sleepLoop = 0;
  2316  006D  01CB               	clrf	_sleepLoop
  2317  006E                     l1818:	
  2318                           
  2319                           ;main.c: 94: }
  2320                           ;main.c: 96: if (sleepLoop++ > 5){
  2321  006E  084B               	movf	_sleepLoop,w
  2322  006F  0ACB               	incf	_sleepLoop,f
  2323  0070  00BE               	movwf	??_loop
  2324  0071  3006               	movlw	6
  2325  0072  023E               	subwf	??_loop,w
  2326  0073  1C03               	skipc
  2327  0074  0008               	return
  2328  0075  0001               	reset	;# 
  2329                           
  2330                           ;main.c: 98: }
  2331                           ;main.c: 99: break;
  2332  0076  0008               	return
  2333  0077                     l1822:	
  2334                           ;main.c: 101: case 10:
  2335                           
  2336                           
  2337                           ;main.c: 105: strcpy(string, "/BOOT/");
  2338  0077  3027               	movlw	low (STR_1| (0+32768))
  2339  0078  0020               	movlb	0	; select bank0
  2340  0079  00A8               	movwf	strcpy@from
  2341  007A  3086               	movlw	high (STR_1| (0+32768))
  2342  007B  00A9               	movwf	strcpy@from+1
  2343  007C  304C               	movlw	(low (_string| 0))& (0+255)
  2344  007D  2587               	fcall	_strcpy
  2345                           
  2346                           ;main.c: 106: _itoa(string + strlen(string), read_flashmem(16), 10);
  2347  007E  3010               	movlw	16
  2348  007F  0020               	movlb	0	; select bank0
  2349  0080  00A0               	movwf	read_flashmem@offset
  2350  0081  3000               	movlw	0
  2351  0082  00A1               	movwf	read_flashmem@offset+1
  2352  0083  2465               	fcall	_read_flashmem
  2353  0084  0020               	movlb	0	; select bank0
  2354  0085  0821               	movf	?_read_flashmem+1,w
  2355  0086  00B9               	movwf	__itoa@number+1
  2356  0087  0820               	movf	?_read_flashmem,w
  2357  0088  00B8               	movwf	__itoa@number
  2358  0089  300A               	movlw	10
  2359  008A  00BE               	movwf	??_loop
  2360  008B  083E               	movf	??_loop,w
  2361  008C  00BA               	movwf	__itoa@base
  2362  008D  304C               	movlw	(low (_string| 0))& (0+255)
  2363  008E  2522               	fcall	_strlen
  2364  008F  0020               	movlb	0	; select bank0
  2365  0090  0820               	movf	?_strlen,w
  2366  0091  3E4C               	addlw	(low (_string| 0))& (0+255)
  2367  0092  25EA               	fcall	__itoa
  2368                           
  2369                           ;main.c: 108: nrf24l01SendString(string);
  2370  0093  304C               	movlw	(low (_string| 0))& (0+255)
  2371  0094  23A5               	fcall	_nrf24l01SendString
  2372                           
  2373                           ;main.c: 110: mode = 11;
  2374  0095  300B               	movlw	11
  2375  0096  0020               	movlb	0	; select bank0
  2376  0097  00BE               	movwf	??_loop
  2377  0098  083E               	movf	??_loop,w
  2378  0099  00FD               	movwf	_mode
  2379                           
  2380                           ;main.c: 111: break;
  2381  009A  0008               	return
  2382  009B                     l170:	
  2383                           ;main.c: 114: case 11:
  2384                           
  2385                           
  2386                           ;main.c: 115: mode = 1;
  2387  009B  01FD               	clrf	_mode
  2388  009C  0AFD               	incf	_mode,f
  2389                           
  2390                           ;main.c: 116: nextMode = 4;
  2391  009D  3004               	movlw	4
  2392  009E  0020               	movlb	0	; select bank0
  2393  009F  00BE               	movwf	??_loop
  2394  00A0  083E               	movf	??_loop,w
  2395  00A1  00DC               	movwf	_nextMode
  2396                           
  2397                           ;main.c: 118: break;
  2398  00A2  0008               	return
  2399  00A3                     l1832:	
  2400                           ;main.c: 120: case 4:
  2401                           
  2402                           
  2403                           ;main.c: 122: strcpy(string, "/COUNT/");
  2404  00A3  301F               	movlw	low (STR_2| (0+32768))
  2405  00A4  0020               	movlb	0	; select bank0
  2406  00A5  00A8               	movwf	strcpy@from
  2407  00A6  3086               	movlw	high (STR_2| (0+32768))
  2408  00A7  00A9               	movwf	strcpy@from+1
  2409  00A8  304C               	movlw	(low (_string| 0))& (0+255)
  2410  00A9  2587               	fcall	_strcpy
  2411                           
  2412                           ;main.c: 123: _itoa(string + strlen(string), counter++, 10);
  2413  00AA  0020               	movlb	0	; select bank0
  2414  00AB  084A               	movf	_counter+1,w
  2415  00AC  00B9               	movwf	__itoa@number+1
  2416  00AD  0849               	movf	_counter,w
  2417  00AE  00B8               	movwf	__itoa@number
  2418  00AF  300A               	movlw	10
  2419  00B0  00BE               	movwf	??_loop
  2420  00B1  083E               	movf	??_loop,w
  2421  00B2  00BA               	movwf	__itoa@base
  2422  00B3  304C               	movlw	(low (_string| 0))& (0+255)
  2423  00B4  2522               	fcall	_strlen
  2424  00B5  0020               	movlb	0	; select bank0
  2425  00B6  0820               	movf	?_strlen,w
  2426  00B7  3E4C               	addlw	(low (_string| 0))& (0+255)
  2427  00B8  25EA               	fcall	__itoa
  2428  00B9  3001               	movlw	1
  2429  00BA  0020               	movlb	0	; select bank0
  2430  00BB  07C9               	addwf	_counter,f
  2431  00BC  3000               	movlw	0
  2432  00BD  3DCA               	addwfc	_counter+1,f
  2433                           
  2434                           ;main.c: 125: nrf24l01SendString(string);
  2435  00BE  304C               	movlw	(low (_string| 0))& (0+255)
  2436  00BF  23A5               	fcall	_nrf24l01SendString
  2437                           
  2438                           ;main.c: 127: mode = 12;
  2439  00C0  300C               	movlw	12
  2440  00C1  0020               	movlb	0	; select bank0
  2441  00C2  00BE               	movwf	??_loop
  2442  00C3  083E               	movf	??_loop,w
  2443  00C4  00FD               	movwf	_mode
  2444                           
  2445                           ;main.c: 128: break;
  2446  00C5  0008               	return
  2447  00C6                     l1842:	
  2448                           ;main.c: 130: case 12:
  2449                           
  2450                           
  2451                           ;main.c: 131: startADC(3);
  2452  00C6  3003               	movlw	3
  2453  00C7  24C7               	fcall	_startADC
  2454                           
  2455                           ;main.c: 140: nextMode = 13;
  2456  00C8  300D               	movlw	13
  2457  00C9  0020               	movlb	0	; select bank0
  2458  00CA  00BE               	movwf	??_loop
  2459  00CB  083E               	movf	??_loop,w
  2460  00CC  00DC               	movwf	_nextMode
  2461                           
  2462                           ;main.c: 141: break;
  2463  00CD  0008               	return
  2464  00CE                     l1846:	
  2465                           ;main.c: 143: case 13:
  2466                           
  2467                           
  2468                           ;main.c: 144: startADC(7);
  2469  00CE  3007               	movlw	7
  2470  00CF  24C7               	fcall	_startADC
  2471                           
  2472                           ;main.c: 145: nextMode = 15;
  2473  00D0  300F               	movlw	15
  2474  00D1  0020               	movlb	0	; select bank0
  2475  00D2  00BE               	movwf	??_loop
  2476  00D3  083E               	movf	??_loop,w
  2477  00D4  00DC               	movwf	_nextMode
  2478                           
  2479                           ;main.c: 146: break;
  2480  00D5  0008               	return
  2481  00D6                     l1850:	
  2482                           ;main.c: 148: case 15:
  2483                           
  2484                           
  2485                           ;main.c: 149: startADC(29);
  2486  00D6  301D               	movlw	29
  2487  00D7  24C7               	fcall	_startADC
  2488                           
  2489                           ;main.c: 150: nextMode = 14;
  2490  00D8  300E               	movlw	14
  2491  00D9  0020               	movlb	0	; select bank0
  2492  00DA  00BE               	movwf	??_loop
  2493  00DB  083E               	movf	??_loop,w
  2494  00DC  00DC               	movwf	_nextMode
  2495                           
  2496                           ;main.c: 151: break;
  2497  00DD  0008               	return
  2498  00DE                     l1854:	
  2499                           ;main.c: 153: case 14:
  2500                           
  2501                           
  2502                           ;main.c: 154: startADC(31);
  2503  00DE  301F               	movlw	31
  2504  00DF  24C7               	fcall	_startADC
  2505                           
  2506                           ;main.c: 155: nextMode = 11;
  2507  00E0  300B               	movlw	11
  2508  00E1  0020               	movlb	0	; select bank0
  2509  00E2  00BE               	movwf	??_loop
  2510  00E3  083E               	movf	??_loop,w
  2511  00E4  00DC               	movwf	_nextMode
  2512                           
  2513                           ;main.c: 156: break;
  2514  00E5  0008               	return
  2515  00E6                     l1858:	
  2516                           ;main.c: 161: case 3:
  2517                           
  2518                           ;main.c: 160: switch (ADCON0bits.CHS){
  2519                           
  2520                           ;main.c: 158: case 3:
  2521                           
  2522                           
  2523                           ;main.c: 162: adcSum*= 100;
  2524  00E6  3000               	movlw	0
  2525  00E7  0020               	movlb	0	; select bank0
  2526  00E8  00A3               	movwf	___lmul@multiplier+3
  2527  00E9  3000               	movlw	0
  2528  00EA  00A2               	movwf	___lmul@multiplier+2
  2529  00EB  3000               	movlw	0
  2530  00EC  00A1               	movwf	___lmul@multiplier+1
  2531  00ED  3064               	movlw	100
  2532  00EE  00A0               	movwf	___lmul@multiplier
  2533  00EF  0848               	movf	_adcSum+3,w
  2534  00F0  00A7               	movwf	___lmul@multiplicand+3
  2535  00F1  0847               	movf	_adcSum+2,w
  2536  00F2  00A6               	movwf	___lmul@multiplicand+2
  2537  00F3  0846               	movf	_adcSum+1,w
  2538  00F4  00A5               	movwf	___lmul@multiplicand+1
  2539  00F5  0845               	movf	_adcSum,w
  2540  00F6  00A4               	movwf	___lmul@multiplicand
  2541  00F7  2497               	fcall	___lmul
  2542  00F8  0020               	movlb	0	; select bank0
  2543  00F9  0823               	movf	?___lmul+3,w
  2544  00FA  00C8               	movwf	_adcSum+3
  2545  00FB  0822               	movf	?___lmul+2,w
  2546  00FC  00C7               	movwf	_adcSum+2
  2547  00FD  0821               	movf	?___lmul+1,w
  2548  00FE  00C6               	movwf	_adcSum+1
  2549  00FF  0820               	movf	?___lmul,w
  2550  0100  00C5               	movwf	_adcSum
  2551                           
  2552                           ;main.c: 163: adcSum/= 2505;
  2553  0101  3000               	movlw	0
  2554  0102  00A3               	movwf	___lldiv@divisor+3
  2555  0103  3000               	movlw	0
  2556  0104  00A2               	movwf	___lldiv@divisor+2
  2557  0105  3009               	movlw	9
  2558  0106  00A1               	movwf	___lldiv@divisor+1
  2559  0107  30C9               	movlw	201
  2560  0108  2983               	goto	L4
  2561  0109                     l1860:	
  2562                           ;main.c: 166: case 7:
  2563                           
  2564                           ;main.c: 164: break;
  2565                           
  2566                           
  2567                           ;main.c: 167: adcSum*= 100;
  2568  0109  3000               	movlw	0
  2569  010A  0020               	movlb	0	; select bank0
  2570  010B  00A3               	movwf	___lmul@multiplier+3
  2571  010C  3000               	movlw	0
  2572  010D  00A2               	movwf	___lmul@multiplier+2
  2573  010E  3000               	movlw	0
  2574  010F  00A1               	movwf	___lmul@multiplier+1
  2575  0110  3064               	movlw	100
  2576  0111  00A0               	movwf	___lmul@multiplier
  2577  0112  0848               	movf	_adcSum+3,w
  2578  0113  00A7               	movwf	___lmul@multiplicand+3
  2579  0114  0847               	movf	_adcSum+2,w
  2580  0115  00A6               	movwf	___lmul@multiplicand+2
  2581  0116  0846               	movf	_adcSum+1,w
  2582  0117  00A5               	movwf	___lmul@multiplicand+1
  2583  0118  0845               	movf	_adcSum,w
  2584  0119  00A4               	movwf	___lmul@multiplicand
  2585  011A  2497               	fcall	___lmul
  2586  011B  0020               	movlb	0	; select bank0
  2587  011C  0823               	movf	?___lmul+3,w
  2588  011D  00C8               	movwf	_adcSum+3
  2589  011E  0822               	movf	?___lmul+2,w
  2590  011F  00C7               	movwf	_adcSum+2
  2591  0120  0821               	movf	?___lmul+1,w
  2592  0121  00C6               	movwf	_adcSum+1
  2593  0122  0820               	movf	?___lmul,w
  2594  0123  00C5               	movwf	_adcSum
  2595                           
  2596                           ;main.c: 168: adcSum/= 2500;
  2597  0124  3000               	movlw	0
  2598  0125  00A3               	movwf	___lldiv@divisor+3
  2599  0126  3000               	movlw	0
  2600  0127  00A2               	movwf	___lldiv@divisor+2
  2601  0128  3009               	movlw	9
  2602  0129  00A1               	movwf	___lldiv@divisor+1
  2603  012A  30C4               	movlw	196
  2604  012B  2983               	goto	L4
  2605  012C                     l1862:	
  2606                           ;main.c: 171: case 31:
  2607                           
  2608                           ;main.c: 169: break;
  2609                           
  2610                           
  2611                           ;main.c: 172: adcSum*= 100;
  2612  012C  3000               	movlw	0
  2613  012D  0020               	movlb	0	; select bank0
  2614  012E  00A3               	movwf	___lmul@multiplier+3
  2615  012F  3000               	movlw	0
  2616  0130  00A2               	movwf	___lmul@multiplier+2
  2617  0131  3000               	movlw	0
  2618  0132  00A1               	movwf	___lmul@multiplier+1
  2619  0133  3064               	movlw	100
  2620  0134  00A0               	movwf	___lmul@multiplier
  2621  0135  0848               	movf	_adcSum+3,w
  2622  0136  00A7               	movwf	___lmul@multiplicand+3
  2623  0137  0847               	movf	_adcSum+2,w
  2624  0138  00A6               	movwf	___lmul@multiplicand+2
  2625  0139  0846               	movf	_adcSum+1,w
  2626  013A  00A5               	movwf	___lmul@multiplicand+1
  2627  013B  0845               	movf	_adcSum,w
  2628  013C  00A4               	movwf	___lmul@multiplicand
  2629  013D  2497               	fcall	___lmul
  2630  013E  0020               	movlb	0	; select bank0
  2631  013F  0823               	movf	?___lmul+3,w
  2632  0140  00C8               	movwf	_adcSum+3
  2633  0141  0822               	movf	?___lmul+2,w
  2634  0142  00C7               	movwf	_adcSum+2
  2635  0143  0821               	movf	?___lmul+1,w
  2636  0144  00C6               	movwf	_adcSum+1
  2637  0145  0820               	movf	?___lmul,w
  2638  0146  00C5               	movwf	_adcSum
  2639                           
  2640                           ;main.c: 173: adcSum/= 2475;
  2641  0147  3000               	movlw	0
  2642  0148  00A3               	movwf	___lldiv@divisor+3
  2643  0149  3000               	movlw	0
  2644  014A  00A2               	movwf	___lldiv@divisor+2
  2645  014B  3009               	movlw	9
  2646  014C  00A1               	movwf	___lldiv@divisor+1
  2647  014D  30AB               	movlw	171
  2648  014E  2983               	goto	L4
  2649  014F                     l1864:	
  2650                           ;main.c: 176: case 29:
  2651                           
  2652                           ;main.c: 174: break;
  2653                           
  2654                           
  2655                           ;main.c: 177: adcSum/= 2089;
  2656  014F  3000               	movlw	0
  2657  0150  0020               	movlb	0	; select bank0
  2658  0151  00A3               	movwf	___lldiv@divisor+3
  2659  0152  3000               	movlw	0
  2660  0153  00A2               	movwf	___lldiv@divisor+2
  2661  0154  3008               	movlw	8
  2662  0155  00A1               	movwf	___lldiv@divisor+1
  2663  0156  3029               	movlw	41
  2664  0157  00A0               	movwf	___lldiv@divisor
  2665  0158  0848               	movf	_adcSum+3,w
  2666  0159  00A7               	movwf	___lldiv@dividend+3
  2667  015A  0847               	movf	_adcSum+2,w
  2668  015B  00A6               	movwf	___lldiv@dividend+2
  2669  015C  0846               	movf	_adcSum+1,w
  2670  015D  00A5               	movwf	___lldiv@dividend+1
  2671  015E  0845               	movf	_adcSum,w
  2672  015F  00A4               	movwf	___lldiv@dividend
  2673  0160  2352               	fcall	___lldiv
  2674  0161  0020               	movlb	0	; select bank0
  2675  0162  0823               	movf	?___lldiv+3,w
  2676  0163  00C8               	movwf	_adcSum+3
  2677  0164  0822               	movf	?___lldiv+2,w
  2678  0165  00C7               	movwf	_adcSum+2
  2679  0166  0821               	movf	?___lldiv+1,w
  2680  0167  00C6               	movwf	_adcSum+1
  2681  0168  0820               	movf	?___lldiv,w
  2682  0169  00C5               	movwf	_adcSum
  2683                           
  2684                           ;main.c: 178: adcSum-= 40;
  2685  016A  3028               	movlw	40
  2686  016B  00BE               	movwf	??_loop
  2687  016C  3000               	movlw	0
  2688  016D  00BF               	movwf	??_loop+1
  2689  016E  3000               	movlw	0
  2690  016F  00C0               	movwf	??_loop+2
  2691  0170  3000               	movlw	0
  2692  0171  00C1               	movwf	??_loop+3
  2693  0172  083E               	movf	??_loop,w
  2694  0173  02C5               	subwf	_adcSum,f
  2695  0174  083F               	movf	??_loop+1,w
  2696  0175  3BC6               	subwfb	_adcSum+1,f
  2697  0176  0840               	movf	??_loop+2,w
  2698  0177  3BC7               	subwfb	_adcSum+2,f
  2699  0178  0841               	movf	??_loop+3,w
  2700  0179  3BC8               	subwfb	_adcSum+3,f
  2701                           
  2702                           ;main.c: 179: break;
  2703  017A  29A8               	goto	l1874
  2704  017B                     l1868:	
  2705                           ;main.c: 181: default:
  2706                           
  2707                           
  2708                           ;main.c: 182: adcSum/= 255;
  2709  017B  3000               	movlw	0
  2710  017C  0020               	movlb	0	; select bank0
  2711  017D  00A3               	movwf	___lldiv@divisor+3
  2712  017E  3000               	movlw	0
  2713  017F  00A2               	movwf	___lldiv@divisor+2
  2714  0180  3000               	movlw	0
  2715  0181  00A1               	movwf	___lldiv@divisor+1
  2716  0182  30FF               	movlw	255
  2717  0183                     L4:	
  2718  0183  00A0               	movwf	___lldiv@divisor
  2719  0184  0848               	movf	_adcSum+3,w
  2720  0185  00A7               	movwf	___lldiv@dividend+3
  2721  0186  0847               	movf	_adcSum+2,w
  2722  0187  00A6               	movwf	___lldiv@dividend+2
  2723  0188  0846               	movf	_adcSum+1,w
  2724  0189  00A5               	movwf	___lldiv@dividend+1
  2725  018A  0845               	movf	_adcSum,w
  2726  018B  00A4               	movwf	___lldiv@dividend
  2727  018C  2352               	fcall	___lldiv
  2728  018D  0020               	movlb	0	; select bank0
  2729  018E  0823               	movf	?___lldiv+3,w
  2730  018F  00C8               	movwf	_adcSum+3
  2731  0190  0822               	movf	?___lldiv+2,w
  2732  0191  00C7               	movwf	_adcSum+2
  2733  0192  0821               	movf	?___lldiv+1,w
  2734  0193  00C6               	movwf	_adcSum+1
  2735  0194  0820               	movf	?___lldiv,w
  2736  0195  00C5               	movwf	_adcSum
  2737                           
  2738                           ;main.c: 184: }
  2739                           
  2740                           ;main.c: 183: break;
  2741  0196  29A8               	goto	l1874
  2742  0197                     l1872:	
  2743  0197  0021               	movlb	1	; select bank1
  2744  0198  0C1D               	rrf	29,w	;volatile
  2745  0199  0C89               	rrf	9,f
  2746  019A  391F               	andlw	31
  2747                           
  2748                           ; Switch size 1, requested type "space"
  2749                           ; Number of cases is 4, Range of values is 3 to 31
  2750                           ; switch strategies available:
  2751                           ; Name         Instructions Cycles
  2752                           ; simple_byte           13     7 (average)
  2753                           ; direct_byte           67     9 (fixed)
  2754                           ; jumptable            263     9 (fixed)
  2755                           ;	Chosen strategy is simple_byte
  2756  019B  3A03               	xorlw	3	; case 3
  2757  019C  1903               	skipnz
  2758  019D  28E6               	goto	l1858
  2759  019E  3A04               	xorlw	4	; case 7
  2760  019F  1903               	skipnz
  2761  01A0  2909               	goto	l1860
  2762  01A1  3A1A               	xorlw	26	; case 29
  2763  01A2  1903               	skipnz
  2764  01A3  294F               	goto	l1864
  2765  01A4  3A02               	xorlw	2	; case 31
  2766  01A5  1903               	skipnz
  2767  01A6  292C               	goto	l1862
  2768  01A7  297B               	goto	l1868
  2769  01A8                     l1874:	
  2770                           
  2771                           ;main.c: 186: strcpy(string, "/ADC");
  2772  01A8  3047               	movlw	low (STR_3| (0+32768))
  2773  01A9  0020               	movlb	0	; select bank0
  2774  01AA  00A8               	movwf	strcpy@from
  2775  01AB  3086               	movlw	high (STR_3| (0+32768))
  2776  01AC  00A9               	movwf	strcpy@from+1
  2777  01AD  304C               	movlw	(low (_string| 0))& (0+255)
  2778  01AE  2587               	fcall	_strcpy
  2779                           
  2780                           ;main.c: 187: _itoa(string + strlen(string), ADCON0bits.CHS, 10);
  2781  01AF  0021               	movlb	1	; select bank1
  2782  01B0  0C1D               	rrf	29,w	;volatile
  2783  01B1  0C89               	rrf	9,f
  2784  01B2  391F               	andlw	31
  2785  01B3  0020               	movlb	0	; select bank0
  2786  01B4  00BE               	movwf	??_loop
  2787  01B5  01BF               	clrf	??_loop+1
  2788  01B6  083E               	movf	??_loop,w
  2789  01B7  00B8               	movwf	__itoa@number
  2790  01B8  083F               	movf	??_loop+1,w
  2791  01B9  00B9               	movwf	__itoa@number+1
  2792  01BA  300A               	movlw	10
  2793  01BB  00C0               	movwf	??_loop+2
  2794  01BC  0840               	movf	??_loop+2,w
  2795  01BD  00BA               	movwf	__itoa@base
  2796  01BE  304C               	movlw	(low (_string| 0))& (0+255)
  2797  01BF  2522               	fcall	_strlen
  2798  01C0  0020               	movlb	0	; select bank0
  2799  01C1  0820               	movf	?_strlen,w
  2800  01C2  3E4C               	addlw	(low (_string| 0))& (0+255)
  2801  01C3  25EA               	fcall	__itoa
  2802                           
  2803                           ;main.c: 188: strcpy(string + strlen(string), "/");
  2804  01C4  3025               	movlw	low ((STR_2+6)| (0+32768))
  2805  01C5  0020               	movlb	0	; select bank0
  2806  01C6  00A8               	movwf	strcpy@from
  2807  01C7  3086               	movlw	high ((STR_2+6)| (0+32768))
  2808  01C8  00A9               	movwf	strcpy@from+1
  2809  01C9  304C               	movlw	(low (_string| 0))& (0+255)
  2810  01CA  2522               	fcall	_strlen
  2811  01CB  0020               	movlb	0	; select bank0
  2812  01CC  0820               	movf	?_strlen,w
  2813  01CD  3E4C               	addlw	(low (_string| 0))& (0+255)
  2814  01CE  2587               	fcall	_strcpy
  2815                           
  2816                           ;main.c: 189: _itoa(string + strlen(string), adcSum, 10);
  2817  01CF  0020               	movlb	0	; select bank0
  2818  01D0  0846               	movf	_adcSum+1,w
  2819  01D1  00B9               	movwf	__itoa@number+1
  2820  01D2  0845               	movf	_adcSum,w
  2821  01D3  00B8               	movwf	__itoa@number
  2822  01D4  300A               	movlw	10
  2823  01D5  00BE               	movwf	??_loop
  2824  01D6  083E               	movf	??_loop,w
  2825  01D7  00BA               	movwf	__itoa@base
  2826  01D8  304C               	movlw	(low (_string| 0))& (0+255)
  2827  01D9  2522               	fcall	_strlen
  2828  01DA  0020               	movlb	0	; select bank0
  2829  01DB  0820               	movf	?_strlen,w
  2830  01DC  3E4C               	addlw	(low (_string| 0))& (0+255)
  2831  01DD  25EA               	fcall	__itoa
  2832                           
  2833                           ;main.c: 191: nrf24l01SendString(string);
  2834  01DE  304C               	movlw	(low (_string| 0))& (0+255)
  2835  01DF  23A5               	fcall	_nrf24l01SendString
  2836                           
  2837                           ;main.c: 193: mode = nextMode;
  2838  01E0  0020               	movlb	0	; select bank0
  2839  01E1  085C               	movf	_nextMode,w
  2840  01E2  00BE               	movwf	??_loop
  2841  01E3  083E               	movf	??_loop,w
  2842  01E4  00FD               	movwf	_mode
  2843                           
  2844                           ;main.c: 196: }
  2845                           
  2846                           ;main.c: 194: break;
  2847  01E5  0008               	return
  2848  01E6                     l1884:	
  2849  01E6  087D               	movf	_mode,w
  2850                           
  2851                           ; Switch size 1, requested type "space"
  2852                           ; Number of cases is 9, Range of values is 1 to 15
  2853                           ; switch strategies available:
  2854                           ; Name         Instructions Cycles
  2855                           ; simple_byte           28    15 (average)
  2856                           ; direct_byte           39     9 (fixed)
  2857                           ; jumptable            263     9 (fixed)
  2858                           ;	Chosen strategy is simple_byte
  2859  01E7  3A01               	xorlw	1	; case 1
  2860  01E8  1903               	skipnz
  2861  01E9  2856               	goto	l1802
  2862  01EA  3A02               	xorlw	2	; case 3
  2863  01EB  1903               	skipnz
  2864  01EC  2997               	goto	l1872
  2865  01ED  3A07               	xorlw	7	; case 4
  2866  01EE  1903               	skipnz
  2867  01EF  28A3               	goto	l1832
  2868  01F0  3A0E               	xorlw	14	; case 10
  2869  01F1  1903               	skipnz
  2870  01F2  2877               	goto	l1822
  2871  01F3  3A01               	xorlw	1	; case 11
  2872  01F4  1903               	skipnz
  2873  01F5  289B               	goto	l170
  2874  01F6  3A07               	xorlw	7	; case 12
  2875  01F7  1903               	skipnz
  2876  01F8  28C6               	goto	l1842
  2877  01F9  3A01               	xorlw	1	; case 13
  2878  01FA  1903               	skipnz
  2879  01FB  28CE               	goto	l1846
  2880  01FC  3A03               	xorlw	3	; case 14
  2881  01FD  1903               	skipnz
  2882  01FE  28DE               	goto	l1854
  2883  01FF  3A01               	xorlw	1	; case 15
  2884  0200  1903               	skipnz
  2885  0201  28D6               	goto	l1850
  2886  0202  2A03               	goto	l184
  2887  0203                     l184:	
  2888  0203  0008               	return
  2889  0204                     __end_of_loop:	
  2890                           
  2891                           	psect	text6
  2892  0522                     __ptext6:	
  2893 ;; *************** function _strlen *****************
  2894 ;; Defined at:
  2895 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  s               1    wreg     PTR const unsigned char 
  2898 ;;		 -> string(16), 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  2901 ;;		 -> string(16), 
  2902 ;;  cp              1    6[BANK0 ] PTR const unsigned char 
  2903 ;;		 -> string(16), 
  2904 ;; Return value:  Size  Location     Type
  2905 ;;                  2    0[BANK0 ] unsigned int 
  2906 ;; Registers used:
  2907 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2908 ;; Tracked objects:
  2909 ;;		On entry : 0/0
  2910 ;;		On exit  : 0/0
  2911 ;;		Unchanged: 0/0
  2912 ;; Data sizes:     COMMON   BANK0   BANK1
  2913 ;;      Params:         0       2       0
  2914 ;;      Locals:         0       2       0
  2915 ;;      Temps:          0       4       0
  2916 ;;      Totals:         0       8       0
  2917 ;;Total ram usage:        8 bytes
  2918 ;; Hardware stack levels used:    1
  2919 ;; Hardware stack levels required when called:    4
  2920 ;; This function calls:
  2921 ;;		Nothing
  2922 ;; This function is called by:
  2923 ;;		_loop
  2924 ;;		_nrf24l01HandleRX
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           
  2929                           ;psect for function _strlen
  2930  0522                     _strlen:	
  2931                           
  2932                           ;incstack = 0
  2933                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  2934                           ;strlen@s stored from wreg
  2935  0522  0020               	movlb	0	; select bank0
  2936  0523  00A7               	movwf	strlen@s
  2937  0524  0827               	movf	strlen@s,w
  2938  0525  00A2               	movwf	??_strlen
  2939  0526  0822               	movf	??_strlen,w
  2940  0527  00A6               	movwf	strlen@cp
  2941  0528                     l1546:	
  2942  0528  0826               	movf	strlen@cp,w
  2943  0529  0086               	movwf	6
  2944  052A  0187               	clrf	7
  2945  052B  0801               	movf	1,w
  2946  052C  1903               	btfsc	3,2
  2947  052D  2D33               	goto	l1548
  2948  052E  3001               	movlw	1
  2949  052F  00A2               	movwf	??_strlen
  2950  0530  0822               	movf	??_strlen,w
  2951  0531  07A6               	addwf	strlen@cp,f
  2952  0532  2D28               	goto	l1546
  2953  0533                     l1548:	
  2954  0533  0827               	movf	strlen@s,w
  2955  0534  00A2               	movwf	??_strlen
  2956  0535  3000               	movlw	0
  2957  0536  00A3               	movwf	??_strlen+1
  2958  0537  09A2               	comf	??_strlen,f
  2959  0538  09A3               	comf	??_strlen+1,f
  2960  0539  0AA2               	incf	??_strlen,f
  2961  053A  1903               	skipnz
  2962  053B  0AA3               	incf	??_strlen+1,f
  2963  053C  0826               	movf	strlen@cp,w
  2964  053D  00A4               	movwf	??_strlen+2
  2965  053E  3000               	movlw	0
  2966  053F  00A5               	movwf	??_strlen+3
  2967  0540  0822               	movf	??_strlen,w
  2968  0541  0724               	addwf	??_strlen+2,w
  2969  0542  00A0               	movwf	?_strlen
  2970  0543  0823               	movf	??_strlen+1,w
  2971  0544  3D25               	addwfc	??_strlen+3,w
  2972  0545  00A1               	movwf	?_strlen+1
  2973  0546  0008               	return
  2974  0547                     __end_of_strlen:	
  2975                           
  2976                           	psect	text7
  2977  0587                     __ptext7:	
  2978 ;; *************** function _strcpy *****************
  2979 ;; Defined at:
  2980 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;  to              1    wreg     PTR unsigned char 
  2983 ;;		 -> string(16), 
  2984 ;;  from            2    8[BANK0 ] PTR const unsigned char 
  2985 ;;		 -> STR_4(2), STR_3(5), STR_2(8), STR_1(7), 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  to              1   12[BANK0 ] PTR unsigned char 
  2988 ;;		 -> string(16), 
  2989 ;;  cp              1   11[BANK0 ] PTR unsigned char 
  2990 ;;		 -> string(16), 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      PTR unsigned char 
  2993 ;; Registers used:
  2994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMMON   BANK0   BANK1
  3000 ;;      Params:         0       2       0
  3001 ;;      Locals:         0       2       0
  3002 ;;      Temps:          0       1       0
  3003 ;;      Totals:         0       5       0
  3004 ;;Total ram usage:        5 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    4
  3007 ;; This function calls:
  3008 ;;		Nothing
  3009 ;; This function is called by:
  3010 ;;		_loop
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           
  3015                           ;psect for function _strcpy
  3016  0587                     _strcpy:	
  3017                           
  3018                           ;incstack = 0
  3019                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3020                           ;strcpy@to stored from wreg
  3021  0587  0020               	movlb	0	; select bank0
  3022  0588  00AC               	movwf	strcpy@to
  3023  0589  082C               	movf	strcpy@to,w
  3024  058A  00AA               	movwf	??_strcpy
  3025  058B  082A               	movf	??_strcpy,w
  3026  058C  00AB               	movwf	strcpy@cp
  3027  058D                     l1540:	
  3028  058D  082B               	movf	strcpy@cp,w
  3029  058E  0086               	movwf	6
  3030  058F  0187               	clrf	7
  3031  0590  0828               	movf	strcpy@from,w
  3032  0591  0084               	movwf	4
  3033  0592  0829               	movf	strcpy@from+1,w
  3034  0593  0085               	movwf	5
  3035  0594  0800               	movf	0,w	;code access
  3036  0595  3FC0               	movwi [0]fsr1
  3037  0596  0889               	movf	9,f
  3038  0597  1903               	btfsc	3,2
  3039  0598  0008               	return
  3040  0599  3001               	movlw	1
  3041  059A  00AA               	movwf	??_strcpy
  3042  059B  082A               	movf	??_strcpy,w
  3043  059C  07AB               	addwf	strcpy@cp,f
  3044  059D  3001               	movlw	1
  3045  059E  07A8               	addwf	strcpy@from,f
  3046  059F  3000               	movlw	0
  3047  05A0  3DA9               	addwfc	strcpy@from+1,f
  3048  05A1  2D8D               	goto	l1540
  3049  05A2                     __end_of_strcpy:	
  3050                           ;	Return value of _strcpy is never used
  3051                           
  3052                           
  3053                           	psect	text8
  3054  04C7                     __ptext8:	
  3055 ;; *************** function _startADC *****************
  3056 ;; Defined at:
  3057 ;;		line 63 in file "main.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  channel         1    wreg     unsigned char 
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;  channel         1    1[BANK0 ] unsigned char 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  1    wreg      void 
  3064 ;; Registers used:
  3065 ;;		wreg, status,2, status,0
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMMON   BANK0   BANK1
  3071 ;;      Params:         0       0       0
  3072 ;;      Locals:         0       1       0
  3073 ;;      Temps:          0       1       0
  3074 ;;      Totals:         0       2       0
  3075 ;;Total ram usage:        2 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    4
  3078 ;; This function calls:
  3079 ;;		Nothing
  3080 ;; This function is called by:
  3081 ;;		_loop
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           
  3086                           ;psect for function _startADC
  3087  04C7                     _startADC:	
  3088                           
  3089                           ;incstack = 0
  3090                           ; Regs used in _startADC: [wreg+status,2+status,0]
  3091                           ;startADC@channel stored from wreg
  3092  04C7  0020               	movlb	0	; select bank0
  3093  04C8  00A1               	movwf	startADC@channel
  3094                           
  3095                           ;main.c: 64: adcSum = 0;
  3096  04C9  3000               	movlw	0
  3097  04CA  00C8               	movwf	_adcSum+3
  3098  04CB  3000               	movlw	0
  3099  04CC  00C7               	movwf	_adcSum+2
  3100  04CD  3000               	movlw	0
  3101  04CE  00C6               	movwf	_adcSum+1
  3102  04CF  3000               	movlw	0
  3103  04D0  00C5               	movwf	_adcSum
  3104                           
  3105                           ;main.c: 65: adcLoop = 255;
  3106  04D1  30FF               	movlw	255
  3107  04D2  00A0               	movwf	??_startADC
  3108  04D3  0820               	movf	??_startADC,w
  3109  04D4  00FC               	movwf	_adcLoop
  3110                           
  3111                           ;main.c: 67: if (ADCON0bits.CHS != channel) {
  3112  04D5  0021               	movlb	1	; select bank1
  3113  04D6  0C1D               	rrf	29,w	;volatile
  3114  04D7  0C89               	rrf	9,f
  3115  04D8  391F               	andlw	31
  3116  04D9  0020               	movlb	0	; select bank0
  3117  04DA  0621               	xorwf	startADC@channel,w
  3118  04DB  1903               	skipnz
  3119  04DC  2CED               	goto	l1514
  3120                           
  3121                           ;main.c: 68: ADCON0bits.CHS = channel;
  3122  04DD  0821               	movf	startADC@channel,w
  3123  04DE  00A0               	movwf	??_startADC
  3124  04DF  0DA0               	rlf	??_startADC,f
  3125  04E0  0DA0               	rlf	??_startADC,f
  3126  04E1  0021               	movlb	1	; select bank1
  3127  04E2  081D               	movf	29,w	;volatile
  3128  04E3  0020               	movlb	0	; select bank0
  3129  04E4  0620               	xorwf	??_startADC,w
  3130  04E5  3983               	andlw	-125
  3131  04E6  0620               	xorwf	??_startADC,w
  3132  04E7  0021               	movlb	1	; select bank1
  3133  04E8  009D               	movwf	29	;volatile
  3134                           
  3135                           ;main.c: 69: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3136  04E9  30A0               	movlw	160
  3137  04EA                     u1117:	
  3138  04EA  3200               	nop2
  3139  04EB  0B89               	decfsz	9,f
  3140  04EC  2CEA               	goto	u1117
  3141  04ED                     l1514:	
  3142                           
  3143                           ;main.c: 70: }
  3144                           ;main.c: 72: ADCON0bits.ADGO = 1;
  3145  04ED  0021               	movlb	1	; select bank1
  3146  04EE  149D               	bsf	29,1	;volatile
  3147                           
  3148                           ;main.c: 73: mode = 2;
  3149  04EF  3002               	movlw	2
  3150  04F0  0020               	movlb	0	; select bank0
  3151  04F1  00A0               	movwf	??_startADC
  3152  04F2  0820               	movf	??_startADC,w
  3153  04F3  00FD               	movwf	_mode
  3154  04F4  0008               	return
  3155  04F5                     __end_of_startADC:	
  3156                           
  3157                           	psect	text9
  3158  056A                     __ptext9:	
  3159 ;; *************** function _nrf24l01SetRecieveMode *****************
  3160 ;; Defined at:
  3161 ;;		line 86 in file "nrf24l01.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;		None
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  config          1    1[BANK0 ] struct .
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  1    wreg      void 
  3168 ;; Registers used:
  3169 ;;		wreg, status,2, status,0, pclath, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMMON   BANK0   BANK1
  3175 ;;      Params:         0       0       0
  3176 ;;      Locals:         0       1       0
  3177 ;;      Temps:          0       1       0
  3178 ;;      Totals:         0       2       0
  3179 ;;Total ram usage:        2 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    6
  3182 ;; This function calls:
  3183 ;;		_nrf24l01Send
  3184 ;; This function is called by:
  3185 ;;		_loop
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           
  3190                           ;psect for function _nrf24l01SetRecieveMode
  3191  056A                     _nrf24l01SetRecieveMode:	
  3192                           
  3193                           ;nrf24l01.c: 88: PORTAbits.RA0 = 0;
  3194                           
  3195                           ;incstack = 0
  3196                           ; Regs used in _nrf24l01SetRecieveMode: [wreg+status,2+status,0+pclath+cstack]
  3197  056A  0020               	movlb	0	; select bank0
  3198  056B  100C               	bcf	12,0	;volatile
  3199                           
  3200                           ;nrf24l01.c: 90: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3201  056C  30A0               	movlw	160
  3202  056D                     u1127:	
  3203  056D  3200               	nop2
  3204  056E  0B89               	decfsz	9,f
  3205  056F  2D6D               	goto	u1127
  3206                           
  3207                           ;nrf24l01.c: 92: n_CONFIG_t config;
  3208                           ;nrf24l01.c: 93: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  3209  0570  01F1               	clrf	nrf24l01Send@data
  3210  0571  3000               	movlw	0
  3211  0572  2608               	fcall	_nrf24l01Send
  3212  0573  0020               	movlb	0	; select bank0
  3213  0574  00A0               	movwf	??_nrf24l01SetRecieveMode
  3214  0575  0820               	movf	??_nrf24l01SetRecieveMode,w
  3215  0576  00A1               	movwf	nrf24l01SetRecieveMode@config
  3216                           
  3217                           ;nrf24l01.c: 94: if (config.PRIM_RX == 0){
  3218  0577  1821               	btfsc	nrf24l01SetRecieveMode@config,0
  3219  0578  0008               	return
  3220                           
  3221                           ;nrf24l01.c: 95: config.PRIM_RX = 1;
  3222  0579  1421               	bsf	nrf24l01SetRecieveMode@config,0
  3223                           
  3224                           ;nrf24l01.c: 96: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3225  057A  0821               	movf	nrf24l01SetRecieveMode@config,w
  3226  057B  00A0               	movwf	??_nrf24l01SetRecieveMode
  3227  057C  0820               	movf	??_nrf24l01SetRecieveMode,w
  3228  057D  00F1               	movwf	nrf24l01Send@data
  3229  057E  3020               	movlw	32
  3230  057F  2608               	fcall	_nrf24l01Send
  3231                           
  3232                           ;nrf24l01.c: 97: PORTAbits.RA0 = 1;
  3233  0580  0020               	movlb	0	; select bank0
  3234  0581  140C               	bsf	12,0	;volatile
  3235                           
  3236                           ;nrf24l01.c: 98: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3237  0582  30A0               	movlw	160
  3238  0583                     u1137:	
  3239  0583  3200               	nop2
  3240  0584  0B89               	decfsz	9,f
  3241  0585  2D83               	goto	u1137
  3242  0586  0008               	return
  3243  0587                     __end_of_nrf24l01SetRecieveMode:	
  3244                           
  3245                           	psect	text10
  3246  03A5                     __ptext10:	
  3247 ;; *************** function _nrf24l01SendString *****************
  3248 ;; Defined at:
  3249 ;;		line 102 in file "nrf24l01.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  string          1    wreg     PTR unsigned char 
  3252 ;;		 -> string(16), 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  string          1   13[BANK0 ] PTR unsigned char 
  3255 ;;		 -> string(16), 
  3256 ;;  i               1   14[BANK0 ] unsigned char 
  3257 ;;  btye            1   12[BANK0 ] unsigned char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      void 
  3260 ;; Registers used:
  3261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMMON   BANK0   BANK1
  3267 ;;      Params:         0       0       0
  3268 ;;      Locals:         0       3       0
  3269 ;;      Temps:          0       3       0
  3270 ;;      Totals:         0       6       0
  3271 ;;Total ram usage:        6 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    7
  3274 ;; This function calls:
  3275 ;;		_nrf24l01SPIEnd
  3276 ;;		_nrf24l01SPISend
  3277 ;;		_nrf24l01SPIStart
  3278 ;;		_nrf24l01SetTransmitMode
  3279 ;;		_read_flashmem
  3280 ;; This function is called by:
  3281 ;;		_loop
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           
  3286                           ;psect for function _nrf24l01SendString
  3287  03A5                     _nrf24l01SendString:	
  3288                           
  3289                           ;incstack = 0
  3290                           ; Regs used in _nrf24l01SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3291                           ;nrf24l01SendString@string stored from wreg
  3292  03A5  0020               	movlb	0	; select bank0
  3293  03A6  00AD               	movwf	nrf24l01SendString@string
  3294                           
  3295                           ;nrf24l01.c: 104: unsigned char btye;
  3296                           ;nrf24l01.c: 105: unsigned char i;
  3297                           ;nrf24l01.c: 107: nrf24l01SetTransmitMode();
  3298  03A7  25A2               	fcall	_nrf24l01SetTransmitMode
  3299                           
  3300                           ;nrf24l01.c: 109: nrf24l01SPIStart();
  3301  03A8  262E               	fcall	_nrf24l01SPIStart
  3302                           
  3303                           ;nrf24l01.c: 111: nrf24l01SPISend(0b10100000);
  3304  03A9  30A0               	movlw	160
  3305  03AA  2614               	fcall	_nrf24l01SPISend
  3306                           
  3307                           ;nrf24l01.c: 113: i = 0;
  3308  03AB  0020               	movlb	0	; select bank0
  3309  03AC  01AE               	clrf	nrf24l01SendString@i
  3310  03AD                     l1556:	
  3311                           ;nrf24l01.c: 114: while (1){
  3312                           
  3313                           
  3314                           ;nrf24l01.c: 115: btye = read_flashmem((unsigned) 0 + i++);
  3315  03AD  0020               	movlb	0	; select bank0
  3316  03AE  082E               	movf	nrf24l01SendString@i,w
  3317  03AF  00A9               	movwf	??_nrf24l01SendString
  3318  03B0  01AA               	clrf	??_nrf24l01SendString+1
  3319  03B1  0829               	movf	??_nrf24l01SendString,w
  3320  03B2  00A0               	movwf	read_flashmem@offset
  3321  03B3  082A               	movf	??_nrf24l01SendString+1,w
  3322  03B4  00A1               	movwf	read_flashmem@offset+1
  3323  03B5  2465               	fcall	_read_flashmem
  3324  03B6  0020               	movlb	0	; select bank0
  3325  03B7  0820               	movf	?_read_flashmem,w
  3326  03B8  00AB               	movwf	??_nrf24l01SendString+2
  3327  03B9  082B               	movf	??_nrf24l01SendString+2,w
  3328  03BA  00AC               	movwf	nrf24l01SendString@btye
  3329  03BB  3001               	movlw	1
  3330  03BC  00A9               	movwf	??_nrf24l01SendString
  3331  03BD  0829               	movf	??_nrf24l01SendString,w
  3332  03BE  07AE               	addwf	nrf24l01SendString@i,f
  3333                           
  3334                           ;nrf24l01.c: 117: if (btye == '\0'){
  3335  03BF  082C               	movf	nrf24l01SendString@btye,w
  3336  03C0  1903               	btfsc	3,2
  3337  03C1  2BC5               	goto	l1566
  3338                           
  3339                           ;nrf24l01.c: 119: }
  3340                           ;nrf24l01.c: 121: nrf24l01SPISend(btye);
  3341                           
  3342                           ;nrf24l01.c: 118: break;
  3343  03C2  082C               	movf	nrf24l01SendString@btye,w
  3344  03C3  2614               	fcall	_nrf24l01SPISend
  3345  03C4  2BAD               	goto	l1556
  3346  03C5                     l1566:	
  3347                           
  3348                           ;nrf24l01.c: 122: }
  3349                           ;nrf24l01.c: 124: for (i = 0; string[i] != '\0'; i++){
  3350  03C5  0020               	movlb	0	; select bank0
  3351  03C6  01AE               	clrf	nrf24l01SendString@i
  3352  03C7                     l1572:	
  3353  03C7  082E               	movf	nrf24l01SendString@i,w
  3354  03C8  072D               	addwf	nrf24l01SendString@string,w
  3355  03C9  00A9               	movwf	??_nrf24l01SendString
  3356  03CA  0829               	movf	??_nrf24l01SendString,w
  3357  03CB  0086               	movwf	6
  3358  03CC  0187               	clrf	7
  3359  03CD  0801               	movf	1,w
  3360  03CE  1903               	btfsc	3,2
  3361  03CF  2BDE               	goto	l1574
  3362                           
  3363                           ;nrf24l01.c: 125: nrf24l01SPISend(string[i]);
  3364  03D0  082E               	movf	nrf24l01SendString@i,w
  3365  03D1  072D               	addwf	nrf24l01SendString@string,w
  3366  03D2  00A9               	movwf	??_nrf24l01SendString
  3367  03D3  0829               	movf	??_nrf24l01SendString,w
  3368  03D4  0086               	movwf	6
  3369  03D5  0187               	clrf	7
  3370  03D6  0801               	movf	1,w
  3371  03D7  2614               	fcall	_nrf24l01SPISend
  3372  03D8  3001               	movlw	1
  3373  03D9  0020               	movlb	0	; select bank0
  3374  03DA  00A9               	movwf	??_nrf24l01SendString
  3375  03DB  0829               	movf	??_nrf24l01SendString,w
  3376  03DC  07AE               	addwf	nrf24l01SendString@i,f
  3377  03DD  2BC7               	goto	l1572
  3378  03DE                     l1574:	
  3379                           
  3380                           ;nrf24l01.c: 126: }
  3381                           ;nrf24l01.c: 128: nrf24l01SPIEnd();
  3382  03DE  2635               	fcall	_nrf24l01SPIEnd
  3383                           
  3384                           ;nrf24l01.c: 130: PORTAbits.RA0 = 1;
  3385  03DF  0020               	movlb	0	; select bank0
  3386  03E0  140C               	bsf	12,0	;volatile
  3387                           
  3388                           ;nrf24l01.c: 132: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3389  03E1  3085               	movlw	133
  3390  03E2                     u1147:	
  3391  03E2  0B89               	decfsz	9,f
  3392  03E3  2BE2               	goto	u1147
  3393  03E4  0000               	nop
  3394                           
  3395                           ;nrf24l01.c: 134: PORTAbits.RA0 = 0;
  3396  03E5  0020               	movlb	0	; select bank0
  3397  03E6  100C               	bcf	12,0	;volatile
  3398                           
  3399                           ;nrf24l01.c: 138: _delay((unsigned long)((100)*(16000000/4000.0)));
  3400  03E7  3003               	movlw	3
  3401  03E8  0020               	movlb	0	; select bank0
  3402  03E9  00AA               	movwf	??_nrf24l01SendString+1
  3403  03EA  3008               	movlw	8
  3404  03EB  00A9               	movwf	??_nrf24l01SendString
  3405  03EC  3077               	movlw	119
  3406  03ED                     u1157:	
  3407  03ED  0B89               	decfsz	9,f
  3408  03EE  2BED               	goto	u1157
  3409  03EF  0BA9               	decfsz	??_nrf24l01SendString,f
  3410  03F0  2BED               	goto	u1157
  3411  03F1  0BAA               	decfsz	??_nrf24l01SendString+1,f
  3412  03F2  2BED               	goto	u1157
  3413  03F3  0008               	return
  3414  03F4                     __end_of_nrf24l01SendString:	
  3415                           
  3416                           	psect	text11
  3417  0465                     __ptext11:	
  3418 ;; *************** function _read_flashmem *****************
  3419 ;; Defined at:
  3420 ;;		line 61 in file "flash.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;  offset          2    0[BANK0 ] unsigned int 
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;  address         2    7[BANK0 ] unsigned int 
  3425 ;;  result          2    5[BANK0 ] unsigned int 
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  2    0[BANK0 ] unsigned int 
  3428 ;; Registers used:
  3429 ;;		wreg, status,2, status,0
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMMON   BANK0   BANK1
  3435 ;;      Params:         0       2       0
  3436 ;;      Locals:         0       4       0
  3437 ;;      Temps:          0       3       0
  3438 ;;      Totals:         0       9       0
  3439 ;;Total ram usage:        9 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:    4
  3442 ;; This function calls:
  3443 ;;		Nothing
  3444 ;; This function is called by:
  3445 ;;		_loop
  3446 ;;		_main
  3447 ;;		_nrf24l01SendString
  3448 ;;		_nrf24l01HandleRX
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451                           
  3452                           
  3453                           ;psect for function _read_flashmem
  3454  0465                     _read_flashmem:	
  3455                           
  3456                           ;flash.c: 63: unsigned int address;
  3457                           ;flash.c: 65: INTCONbits.GIE = 0;
  3458                           
  3459                           ;incstack = 0
  3460                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  3461  0465  138B               	bcf	11,7	;volatile
  3462                           
  3463                           ;flash.c: 67: PMCON1 = 0x00;
  3464  0466  0023               	movlb	3	; select bank3
  3465  0467  0195               	clrf	21	;volatile
  3466                           
  3467                           ;flash.c: 69: address = (0x800U-32) + offset;
  3468  0468  0020               	movlb	0	; select bank0
  3469  0469  0820               	movf	read_flashmem@offset,w
  3470  046A  3EE0               	addlw	224
  3471  046B  00A7               	movwf	read_flashmem@address
  3472  046C  3007               	movlw	7
  3473  046D  3D21               	addwfc	read_flashmem@offset+1,w
  3474  046E  00A8               	movwf	read_flashmem@address+1
  3475                           
  3476                           ;flash.c: 70: PMADRL = (char) (address >> 0);
  3477  046F  0827               	movf	read_flashmem@address,w
  3478  0470  0023               	movlb	3	; select bank3
  3479  0471  0091               	movwf	17	;volatile
  3480                           
  3481                           ;flash.c: 71: PMADRH = (char) (address >> 8);
  3482  0472  0020               	movlb	0	; select bank0
  3483  0473  0828               	movf	read_flashmem@address+1,w
  3484  0474  0023               	movlb	3	; select bank3
  3485  0475  0092               	movwf	18	;volatile
  3486                           
  3487                           ;flash.c: 73: PMCON1bits.RD = 1;
  3488  0476  1415               	bsf	21,0	;volatile
  3489                           
  3490                           ;flash.c: 75: __nop();
  3491  0477  0000               	nop
  3492                           
  3493                           ;flash.c: 76: __nop();
  3494  0478  0000               	nop
  3495                           
  3496                           ;flash.c: 78: unsigned int result = 0;
  3497  0479  0020               	movlb	0	; select bank0
  3498  047A  01A5               	clrf	read_flashmem@result
  3499  047B  01A6               	clrf	read_flashmem@result+1
  3500                           
  3501                           ;flash.c: 79: result = PMDATL;
  3502  047C  0023               	movlb	3	; select bank3
  3503  047D  0813               	movf	19,w	;volatile
  3504  047E  0020               	movlb	0	; select bank0
  3505  047F  00A2               	movwf	??_read_flashmem
  3506  0480  01A3               	clrf	??_read_flashmem+1
  3507  0481  0822               	movf	??_read_flashmem,w
  3508  0482  00A5               	movwf	read_flashmem@result
  3509  0483  0823               	movf	??_read_flashmem+1,w
  3510  0484  00A6               	movwf	read_flashmem@result+1
  3511                           
  3512                           ;flash.c: 80: result|= ( (unsigned) (PMDATH) << 8);
  3513  0485  0023               	movlb	3	; select bank3
  3514  0486  0814               	movf	20,w	;volatile
  3515  0487  0020               	movlb	0	; select bank0
  3516  0488  00A2               	movwf	??_read_flashmem
  3517  0489  01A3               	clrf	??_read_flashmem+1
  3518  048A  0822               	movf	??_read_flashmem,w
  3519  048B  00A3               	movwf	??_read_flashmem+1
  3520  048C  01A2               	clrf	??_read_flashmem
  3521  048D  0822               	movf	??_read_flashmem,w
  3522  048E  04A5               	iorwf	read_flashmem@result,f
  3523  048F  0823               	movf	??_read_flashmem+1,w
  3524  0490  04A6               	iorwf	read_flashmem@result+1,f
  3525                           
  3526                           ;flash.c: 82: INTCONbits.GIE = 1;
  3527  0491  178B               	bsf	11,7	;volatile
  3528                           
  3529                           ;flash.c: 84: return result;
  3530  0492  0826               	movf	read_flashmem@result+1,w
  3531  0493  00A1               	movwf	?_read_flashmem+1
  3532  0494  0825               	movf	read_flashmem@result,w
  3533  0495  00A0               	movwf	?_read_flashmem
  3534  0496  0008               	return
  3535  0497                     __end_of_read_flashmem:	
  3536                           
  3537                           	psect	text12
  3538  05A2                     __ptext12:	
  3539 ;; *************** function _nrf24l01SetTransmitMode *****************
  3540 ;; Defined at:
  3541 ;;		line 70 in file "nrf24l01.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  config          1    1[BANK0 ] struct .
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      void 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0, pclath, cstack
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMMON   BANK0   BANK1
  3555 ;;      Params:         0       0       0
  3556 ;;      Locals:         0       1       0
  3557 ;;      Temps:          0       1       0
  3558 ;;      Totals:         0       2       0
  3559 ;;Total ram usage:        2 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    6
  3562 ;; This function calls:
  3563 ;;		_nrf24l01Send
  3564 ;; This function is called by:
  3565 ;;		_nrf24l01SendString
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           
  3570                           ;psect for function _nrf24l01SetTransmitMode
  3571  05A2                     _nrf24l01SetTransmitMode:	
  3572                           
  3573                           ;nrf24l01.c: 72: PORTAbits.RA0 = 0;
  3574                           
  3575                           ;incstack = 0
  3576                           ; Regs used in _nrf24l01SetTransmitMode: [wreg+status,2+status,0+pclath+cstack]
  3577  05A2  0020               	movlb	0	; select bank0
  3578  05A3  100C               	bcf	12,0	;volatile
  3579                           
  3580                           ;nrf24l01.c: 74: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3581  05A4  30A0               	movlw	160
  3582  05A5                     u1167:	
  3583  05A5  3200               	nop2
  3584  05A6  0B89               	decfsz	9,f
  3585  05A7  2DA5               	goto	u1167
  3586                           
  3587                           ;nrf24l01.c: 76: n_CONFIG_t config;
  3588                           ;nrf24l01.c: 77: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  3589  05A8  01F1               	clrf	nrf24l01Send@data
  3590  05A9  3000               	movlw	0
  3591  05AA  2608               	fcall	_nrf24l01Send
  3592  05AB  0020               	movlb	0	; select bank0
  3593  05AC  00A0               	movwf	??_nrf24l01SetTransmitMode
  3594  05AD  0820               	movf	??_nrf24l01SetTransmitMode,w
  3595  05AE  00A1               	movwf	nrf24l01SetTransmitMode@config
  3596                           
  3597                           ;nrf24l01.c: 78: if (config.PRIM_RX == 1){
  3598  05AF  1C21               	btfss	nrf24l01SetTransmitMode@config,0
  3599  05B0  0008               	return
  3600                           
  3601                           ;nrf24l01.c: 79: config.PRIM_RX = 0;
  3602  05B1  1021               	bcf	nrf24l01SetTransmitMode@config,0
  3603                           
  3604                           ;nrf24l01.c: 80: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3605  05B2  0821               	movf	nrf24l01SetTransmitMode@config,w
  3606  05B3  00A0               	movwf	??_nrf24l01SetTransmitMode
  3607  05B4  0820               	movf	??_nrf24l01SetTransmitMode,w
  3608  05B5  00F1               	movwf	nrf24l01Send@data
  3609  05B6  3020               	movlw	32
  3610  05B7  2608               	fcall	_nrf24l01Send
  3611                           
  3612                           ;nrf24l01.c: 81: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3613  05B8  30A0               	movlw	160
  3614  05B9                     u1177:	
  3615  05B9  3200               	nop2
  3616  05BA  0B89               	decfsz	9,f
  3617  05BB  2DB9               	goto	u1177
  3618  05BC  0008               	return
  3619  05BD                     __end_of_nrf24l01SetTransmitMode:	
  3620                           
  3621                           	psect	text13
  3622  05EA                     __ptext13:	
  3623 ;; *************** function __itoa *****************
  3624 ;; Defined at:
  3625 ;;		line 51 in file "interface.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;  buffer          1    wreg     PTR unsigned char 
  3628 ;;		 -> string(16), 
  3629 ;;  number          2   24[BANK0 ] unsigned int 
  3630 ;;  base            1   26[BANK0 ] unsigned char 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  buffer          1   29[BANK0 ] PTR unsigned char 
  3633 ;;		 -> string(16), 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  1    wreg      void 
  3636 ;; Registers used:
  3637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMMON   BANK0   BANK1
  3643 ;;      Params:         0       3       0
  3644 ;;      Locals:         0       1       0
  3645 ;;      Temps:          0       2       0
  3646 ;;      Totals:         0       6       0
  3647 ;;Total ram usage:        6 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    7
  3650 ;; This function calls:
  3651 ;;		_itoa
  3652 ;; This function is called by:
  3653 ;;		_loop
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           
  3658                           ;psect for function __itoa
  3659  05EA                     __itoa:	
  3660                           
  3661                           ;incstack = 0
  3662                           ; Regs used in __itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3663                           ;__itoa@buffer stored from wreg
  3664  05EA  0020               	movlb	0	; select bank0
  3665  05EB  00BD               	movwf	__itoa@buffer
  3666                           
  3667                           ;interface.c: 52: itoa(buffer, number, base);
  3668  05EC  0839               	movf	__itoa@number+1,w
  3669  05ED  00B2               	movwf	itoa@val+1
  3670  05EE  0838               	movf	__itoa@number,w
  3671  05EF  00B1               	movwf	itoa@val
  3672  05F0  083A               	movf	__itoa@base,w
  3673  05F1  00BB               	movwf	??__itoa
  3674  05F2  01BC               	clrf	??__itoa+1
  3675  05F3  083B               	movf	??__itoa,w
  3676  05F4  00B3               	movwf	itoa@base
  3677  05F5  083C               	movf	??__itoa+1,w
  3678  05F6  00B4               	movwf	itoa@base+1
  3679  05F7  083D               	movf	__itoa@buffer,w
  3680  05F8  2547               	fcall	_itoa
  3681  05F9  0008               	return
  3682  05FA                     __end_of__itoa:	
  3683                           
  3684                           	psect	text14
  3685  0547                     __ptext14:	
  3686 ;; *************** function _itoa *****************
  3687 ;; Defined at:
  3688 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;  buf             1    wreg     PTR unsigned char 
  3691 ;;		 -> string(16), 
  3692 ;;  val             2   17[BANK0 ] int 
  3693 ;;  base            2   19[BANK0 ] int 
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  buf             1   23[BANK0 ] PTR unsigned char 
  3696 ;;		 -> string(16), 
  3697 ;;  cp              1   22[BANK0 ] PTR unsigned char 
  3698 ;;		 -> string(16), 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      PTR unsigned char 
  3701 ;; Registers used:
  3702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1
  3708 ;;      Params:         0       4       0
  3709 ;;      Locals:         0       2       0
  3710 ;;      Temps:          0       1       0
  3711 ;;      Totals:         0       7       0
  3712 ;;Total ram usage:        7 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    6
  3715 ;; This function calls:
  3716 ;;		_utoa
  3717 ;; This function is called by:
  3718 ;;		__itoa
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           
  3723                           ;psect for function _itoa
  3724  0547                     _itoa:	
  3725                           
  3726                           ;incstack = 0
  3727                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3728                           ;itoa@buf stored from wreg
  3729  0547  0020               	movlb	0	; select bank0
  3730  0548  00B7               	movwf	itoa@buf
  3731  0549  0837               	movf	itoa@buf,w
  3732  054A  00B5               	movwf	??_itoa
  3733  054B  0835               	movf	??_itoa,w
  3734  054C  00B6               	movwf	itoa@cp
  3735  054D  1FB2               	btfss	itoa@val+1,7
  3736  054E  2D5F               	goto	l1480
  3737  054F  302D               	movlw	45
  3738  0550  00B5               	movwf	??_itoa
  3739  0551  0837               	movf	itoa@buf,w
  3740  0552  0086               	movwf	6
  3741  0553  0187               	clrf	7
  3742  0554  0835               	movf	??_itoa,w
  3743  0555  0081               	movwf	1
  3744  0556  3001               	movlw	1
  3745  0557  00B5               	movwf	??_itoa
  3746  0558  0835               	movf	??_itoa,w
  3747  0559  07B7               	addwf	itoa@buf,f
  3748  055A  09B1               	comf	itoa@val,f
  3749  055B  09B2               	comf	itoa@val+1,f
  3750  055C  0AB1               	incf	itoa@val,f
  3751  055D  1903               	skipnz
  3752  055E  0AB2               	incf	itoa@val+1,f
  3753  055F                     l1480:	
  3754  055F  0832               	movf	itoa@val+1,w
  3755  0560  00A9               	movwf	utoa@val+1
  3756  0561  0831               	movf	itoa@val,w
  3757  0562  00A8               	movwf	utoa@val
  3758  0563  0834               	movf	itoa@base+1,w
  3759  0564  00AB               	movwf	utoa@base+1
  3760  0565  0833               	movf	itoa@base,w
  3761  0566  00AA               	movwf	utoa@base
  3762  0567  0837               	movf	itoa@buf,w
  3763  0568  22F6               	fcall	_utoa
  3764  0569  0008               	return
  3765  056A                     __end_of_itoa:	
  3766                           ;	Return value of _itoa is never used
  3767                           
  3768                           
  3769                           	psect	text15
  3770  02F6                     __ptext15:	
  3771 ;; *************** function _utoa *****************
  3772 ;; Defined at:
  3773 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3774 ;; Parameters:    Size  Location     Type
  3775 ;;  buf             1    wreg     PTR unsigned char 
  3776 ;;		 -> string(16), 
  3777 ;;  val             2    8[BANK0 ] unsigned int 
  3778 ;;  base            2   10[BANK0 ] int 
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  3781 ;;		 -> string(16), 
  3782 ;;  v               2   13[BANK0 ] unsigned int 
  3783 ;;  c               1   15[BANK0 ] unsigned char 
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  1    wreg      PTR unsigned char 
  3786 ;; Registers used:
  3787 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMMON   BANK0   BANK1
  3793 ;;      Params:         0       4       0
  3794 ;;      Locals:         0       4       0
  3795 ;;      Temps:          0       1       0
  3796 ;;      Totals:         0       9       0
  3797 ;;Total ram usage:        9 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; Hardware stack levels required when called:    5
  3800 ;; This function calls:
  3801 ;;		___lwdiv
  3802 ;;		___lwmod
  3803 ;; This function is called by:
  3804 ;;		_itoa
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           
  3809                           ;psect for function _utoa
  3810  02F6                     _utoa:	
  3811                           
  3812                           ;incstack = 0
  3813                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3814                           ;utoa@buf stored from wreg
  3815  02F6  0020               	movlb	0	; select bank0
  3816  02F7  00B0               	movwf	utoa@buf
  3817  02F8  0829               	movf	utoa@val+1,w
  3818  02F9  00AE               	movwf	utoa@v+1
  3819  02FA  0828               	movf	utoa@val,w
  3820  02FB  00AD               	movwf	utoa@v
  3821  02FC                     l1400:	
  3822  02FC  082B               	movf	utoa@base+1,w
  3823  02FD  00A1               	movwf	___lwdiv@divisor+1
  3824  02FE  082A               	movf	utoa@base,w
  3825  02FF  00A0               	movwf	___lwdiv@divisor
  3826  0300  082E               	movf	utoa@v+1,w
  3827  0301  00A3               	movwf	___lwdiv@dividend+1
  3828  0302  082D               	movf	utoa@v,w
  3829  0303  00A2               	movwf	___lwdiv@dividend
  3830  0304  2430               	fcall	___lwdiv
  3831  0305  0020               	movlb	0	; select bank0
  3832  0306  0821               	movf	?___lwdiv+1,w
  3833  0307  00AE               	movwf	utoa@v+1
  3834  0308  0820               	movf	?___lwdiv,w
  3835  0309  00AD               	movwf	utoa@v
  3836  030A  3001               	movlw	1
  3837  030B  00AC               	movwf	??_utoa
  3838  030C  082C               	movf	??_utoa,w
  3839  030D  07B0               	addwf	utoa@buf,f
  3840  030E  082D               	movf	utoa@v,w
  3841  030F  042E               	iorwf	utoa@v+1,w
  3842  0310  1D03               	btfss	3,2
  3843  0311  2AFC               	goto	l1400
  3844  0312  0830               	movf	utoa@buf,w
  3845  0313  0086               	movwf	6
  3846  0314  0187               	clrf	7
  3847  0315  0181               	clrf	1
  3848  0316  3001               	movlw	1
  3849  0317  02B0               	subwf	utoa@buf,f
  3850  0318                     l1410:	
  3851  0318  082B               	movf	utoa@base+1,w
  3852  0319  00A1               	movwf	___lwmod@divisor+1
  3853  031A  082A               	movf	utoa@base,w
  3854  031B  00A0               	movwf	___lwmod@divisor
  3855  031C  0829               	movf	utoa@val+1,w
  3856  031D  00A3               	movwf	___lwmod@dividend+1
  3857  031E  0828               	movf	utoa@val,w
  3858  031F  00A2               	movwf	___lwmod@dividend
  3859  0320  24F5               	fcall	___lwmod
  3860  0321  0020               	movlb	0	; select bank0
  3861  0322  0820               	movf	?___lwmod,w
  3862  0323  00AC               	movwf	??_utoa
  3863  0324  082C               	movf	??_utoa,w
  3864  0325  00AF               	movwf	utoa@c
  3865  0326  082B               	movf	utoa@base+1,w
  3866  0327  00A1               	movwf	___lwdiv@divisor+1
  3867  0328  082A               	movf	utoa@base,w
  3868  0329  00A0               	movwf	___lwdiv@divisor
  3869  032A  0829               	movf	utoa@val+1,w
  3870  032B  00A3               	movwf	___lwdiv@dividend+1
  3871  032C  0828               	movf	utoa@val,w
  3872  032D  00A2               	movwf	___lwdiv@dividend
  3873  032E  2430               	fcall	___lwdiv
  3874  032F  0020               	movlb	0	; select bank0
  3875  0330  0821               	movf	?___lwdiv+1,w
  3876  0331  00A9               	movwf	utoa@val+1
  3877  0332  0820               	movf	?___lwdiv,w
  3878  0333  00A8               	movwf	utoa@val
  3879  0334  300A               	movlw	10
  3880  0335  022F               	subwf	utoa@c,w
  3881  0336  1C03               	skipc
  3882  0337  2B3C               	goto	l531
  3883  0338  3007               	movlw	7
  3884  0339  00AC               	movwf	??_utoa
  3885  033A  082C               	movf	??_utoa,w
  3886  033B  07AF               	addwf	utoa@c,f
  3887  033C                     l531:	
  3888  033C  3030               	movlw	48
  3889  033D  00AC               	movwf	??_utoa
  3890  033E  082C               	movf	??_utoa,w
  3891  033F  07AF               	addwf	utoa@c,f
  3892  0340  082F               	movf	utoa@c,w
  3893  0341  00AC               	movwf	??_utoa
  3894  0342  0830               	movf	utoa@buf,w
  3895  0343  0086               	movwf	6
  3896  0344  0187               	clrf	7
  3897  0345  082C               	movf	??_utoa,w
  3898  0346  0081               	movwf	1
  3899  0347  3001               	movlw	1
  3900  0348  02B0               	subwf	utoa@buf,f
  3901  0349  0828               	movf	utoa@val,w
  3902  034A  0429               	iorwf	utoa@val+1,w
  3903  034B  1D03               	btfss	3,2
  3904  034C  2B18               	goto	l1410
  3905                           
  3906                           ;	Return value of _utoa is never used
  3907  034D  3001               	movlw	1
  3908  034E  00AC               	movwf	??_utoa
  3909  034F  082C               	movf	??_utoa,w
  3910  0350  07B0               	addwf	utoa@buf,f
  3911  0351  0008               	return
  3912  0352                     __end_of_utoa:	
  3913                           
  3914                           	psect	text16
  3915  04F5                     __ptext16:	
  3916 ;; *************** function ___lwmod *****************
  3917 ;; Defined at:
  3918 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;  divisor         2    0[BANK0 ] unsigned int 
  3921 ;;  dividend        2    2[BANK0 ] unsigned int 
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  counter         1    5[BANK0 ] unsigned char 
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  2    0[BANK0 ] unsigned int 
  3926 ;; Registers used:
  3927 ;;		wreg, status,2, status,0
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMMON   BANK0   BANK1
  3933 ;;      Params:         0       4       0
  3934 ;;      Locals:         0       1       0
  3935 ;;      Temps:          0       1       0
  3936 ;;      Totals:         0       6       0
  3937 ;;Total ram usage:        6 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; Hardware stack levels required when called:    4
  3940 ;; This function calls:
  3941 ;;		Nothing
  3942 ;; This function is called by:
  3943 ;;		_utoa
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           
  3948                           ;psect for function ___lwmod
  3949  04F5                     ___lwmod:	
  3950                           
  3951                           ;incstack = 0
  3952                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3953  04F5  0020               	movlb	0	; select bank0
  3954  04F6  0820               	movf	___lwmod@divisor,w
  3955  04F7  0421               	iorwf	___lwmod@divisor+1,w
  3956  04F8  1903               	btfsc	3,2
  3957  04F9  2D1D               	goto	l1394
  3958  04FA  01A5               	clrf	___lwmod@counter
  3959  04FB  0AA5               	incf	___lwmod@counter,f
  3960  04FC                     l1384:	
  3961  04FC  1BA1               	btfsc	___lwmod@divisor+1,7
  3962  04FD  2D08               	goto	l1386
  3963  04FE  3001               	movlw	1
  3964  04FF                     u625:	
  3965  04FF  35A0               	lslf	___lwmod@divisor,f
  3966  0500  0DA1               	rlf	___lwmod@divisor+1,f
  3967  0501  0B89               	decfsz	9,f
  3968  0502  2CFF               	goto	u625
  3969  0503  3001               	movlw	1
  3970  0504  00A4               	movwf	??___lwmod
  3971  0505  0824               	movf	??___lwmod,w
  3972  0506  07A5               	addwf	___lwmod@counter,f
  3973  0507  2CFC               	goto	l1384
  3974  0508                     l1386:	
  3975  0508  0821               	movf	___lwmod@divisor+1,w
  3976  0509  0223               	subwf	___lwmod@dividend+1,w
  3977  050A  1D03               	skipz
  3978  050B  2D0E               	goto	u645
  3979  050C  0820               	movf	___lwmod@divisor,w
  3980  050D  0222               	subwf	___lwmod@dividend,w
  3981  050E                     u645:	
  3982  050E  1C03               	skipc
  3983  050F  2D14               	goto	l1390
  3984  0510  0820               	movf	___lwmod@divisor,w
  3985  0511  02A2               	subwf	___lwmod@dividend,f
  3986  0512  0821               	movf	___lwmod@divisor+1,w
  3987  0513  3BA3               	subwfb	___lwmod@dividend+1,f
  3988  0514                     l1390:	
  3989  0514  3001               	movlw	1
  3990  0515                     u655:	
  3991  0515  36A1               	lsrf	___lwmod@divisor+1,f
  3992  0516  0CA0               	rrf	___lwmod@divisor,f
  3993  0517  0B89               	decfsz	9,f
  3994  0518  2D15               	goto	u655
  3995  0519  3001               	movlw	1
  3996  051A  02A5               	subwf	___lwmod@counter,f
  3997  051B  1D03               	btfss	3,2
  3998  051C  2D08               	goto	l1386
  3999  051D                     l1394:	
  4000  051D  0823               	movf	___lwmod@dividend+1,w
  4001  051E  00A1               	movwf	?___lwmod+1
  4002  051F  0822               	movf	___lwmod@dividend,w
  4003  0520  00A0               	movwf	?___lwmod
  4004  0521  0008               	return
  4005  0522                     __end_of___lwmod:	
  4006                           
  4007                           	psect	text17
  4008  0430                     __ptext17:	
  4009 ;; *************** function ___lwdiv *****************
  4010 ;; Defined at:
  4011 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;  divisor         2    0[BANK0 ] unsigned int 
  4014 ;;  dividend        2    2[BANK0 ] unsigned int 
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;  quotient        2    5[BANK0 ] unsigned int 
  4017 ;;  counter         1    7[BANK0 ] unsigned char 
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  2    0[BANK0 ] unsigned int 
  4020 ;; Registers used:
  4021 ;;		wreg, status,2, status,0
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMMON   BANK0   BANK1
  4027 ;;      Params:         0       4       0
  4028 ;;      Locals:         0       3       0
  4029 ;;      Temps:          0       1       0
  4030 ;;      Totals:         0       8       0
  4031 ;;Total ram usage:        8 bytes
  4032 ;; Hardware stack levels used:    1
  4033 ;; Hardware stack levels required when called:    4
  4034 ;; This function calls:
  4035 ;;		Nothing
  4036 ;; This function is called by:
  4037 ;;		_utoa
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           
  4042                           ;psect for function ___lwdiv
  4043  0430                     ___lwdiv:	
  4044                           
  4045                           ;incstack = 0
  4046                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4047  0430  0020               	movlb	0	; select bank0
  4048  0431  01A5               	clrf	___lwdiv@quotient
  4049  0432  01A6               	clrf	___lwdiv@quotient+1
  4050  0433  0820               	movf	___lwdiv@divisor,w
  4051  0434  0421               	iorwf	___lwdiv@divisor+1,w
  4052  0435  1903               	btfsc	3,2
  4053  0436  2C60               	goto	l1372
  4054  0437  01A7               	clrf	___lwdiv@counter
  4055  0438  0AA7               	incf	___lwdiv@counter,f
  4056  0439                     l1360:	
  4057  0439  1BA1               	btfsc	___lwdiv@divisor+1,7
  4058  043A  2C45               	goto	l1362
  4059  043B  3001               	movlw	1
  4060  043C                     u555:	
  4061  043C  35A0               	lslf	___lwdiv@divisor,f
  4062  043D  0DA1               	rlf	___lwdiv@divisor+1,f
  4063  043E  0B89               	decfsz	9,f
  4064  043F  2C3C               	goto	u555
  4065  0440  3001               	movlw	1
  4066  0441  00A4               	movwf	??___lwdiv
  4067  0442  0824               	movf	??___lwdiv,w
  4068  0443  07A7               	addwf	___lwdiv@counter,f
  4069  0444  2C39               	goto	l1360
  4070  0445                     l1362:	
  4071  0445  3001               	movlw	1
  4072  0446                     u575:	
  4073  0446  35A5               	lslf	___lwdiv@quotient,f
  4074  0447  0DA6               	rlf	___lwdiv@quotient+1,f
  4075  0448  0B89               	decfsz	9,f
  4076  0449  2C46               	goto	u575
  4077  044A  0821               	movf	___lwdiv@divisor+1,w
  4078  044B  0223               	subwf	___lwdiv@dividend+1,w
  4079  044C  1D03               	skipz
  4080  044D  2C50               	goto	u585
  4081  044E  0820               	movf	___lwdiv@divisor,w
  4082  044F  0222               	subwf	___lwdiv@dividend,w
  4083  0450                     u585:	
  4084  0450  1C03               	skipc
  4085  0451  2C57               	goto	l1368
  4086  0452  0820               	movf	___lwdiv@divisor,w
  4087  0453  02A2               	subwf	___lwdiv@dividend,f
  4088  0454  0821               	movf	___lwdiv@divisor+1,w
  4089  0455  3BA3               	subwfb	___lwdiv@dividend+1,f
  4090  0456  1425               	bsf	___lwdiv@quotient,0
  4091  0457                     l1368:	
  4092  0457  3001               	movlw	1
  4093  0458                     u595:	
  4094  0458  36A1               	lsrf	___lwdiv@divisor+1,f
  4095  0459  0CA0               	rrf	___lwdiv@divisor,f
  4096  045A  0B89               	decfsz	9,f
  4097  045B  2C58               	goto	u595
  4098  045C  3001               	movlw	1
  4099  045D  02A7               	subwf	___lwdiv@counter,f
  4100  045E  1D03               	btfss	3,2
  4101  045F  2C45               	goto	l1362
  4102  0460                     l1372:	
  4103  0460  0826               	movf	___lwdiv@quotient+1,w
  4104  0461  00A1               	movwf	?___lwdiv+1
  4105  0462  0825               	movf	___lwdiv@quotient,w
  4106  0463  00A0               	movwf	?___lwdiv
  4107  0464  0008               	return
  4108  0465                     __end_of___lwdiv:	
  4109                           
  4110                           	psect	text18
  4111  0497                     __ptext18:	
  4112 ;; *************** function ___lmul *****************
  4113 ;; Defined at:
  4114 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4117 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;  product         4    8[BANK0 ] unsigned long 
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  4    0[BANK0 ] unsigned long 
  4122 ;; Registers used:
  4123 ;;		wreg, status,2, status,0
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMMON   BANK0   BANK1
  4129 ;;      Params:         0       8       0
  4130 ;;      Locals:         0       4       0
  4131 ;;      Temps:          0       0       0
  4132 ;;      Totals:         0      12       0
  4133 ;;Total ram usage:       12 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    4
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_loop
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           
  4144                           ;psect for function ___lmul
  4145  0497                     ___lmul:	
  4146                           
  4147                           ;incstack = 0
  4148                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4149  0497  3000               	movlw	0
  4150  0498  0020               	movlb	0	; select bank0
  4151  0499  00AB               	movwf	___lmul@product+3
  4152  049A  3000               	movlw	0
  4153  049B  00AA               	movwf	___lmul@product+2
  4154  049C  3000               	movlw	0
  4155  049D  00A9               	movwf	___lmul@product+1
  4156  049E  3000               	movlw	0
  4157  049F  00A8               	movwf	___lmul@product
  4158  04A0                     l1694:	
  4159  04A0  1C20               	btfss	___lmul@multiplier,0
  4160  04A1  2CAA               	goto	l1698
  4161  04A2  0824               	movf	___lmul@multiplicand,w
  4162  04A3  07A8               	addwf	___lmul@product,f
  4163  04A4  0825               	movf	___lmul@multiplicand+1,w
  4164  04A5  3DA9               	addwfc	___lmul@product+1,f
  4165  04A6  0826               	movf	___lmul@multiplicand+2,w
  4166  04A7  3DAA               	addwfc	___lmul@product+2,f
  4167  04A8  0827               	movf	___lmul@multiplicand+3,w
  4168  04A9  3DAB               	addwfc	___lmul@product+3,f
  4169  04AA                     l1698:	
  4170  04AA  3001               	movlw	1
  4171  04AB                     u805:	
  4172  04AB  35A4               	lslf	___lmul@multiplicand,f
  4173  04AC  0DA5               	rlf	___lmul@multiplicand+1,f
  4174  04AD  0DA6               	rlf	___lmul@multiplicand+2,f
  4175  04AE  0DA7               	rlf	___lmul@multiplicand+3,f
  4176  04AF  0B89               	decfsz	9,f
  4177  04B0  2CAB               	goto	u805
  4178  04B1  3001               	movlw	1
  4179  04B2                     u815:	
  4180  04B2  36A3               	lsrf	___lmul@multiplier+3,f
  4181  04B3  0CA2               	rrf	___lmul@multiplier+2,f
  4182  04B4  0CA1               	rrf	___lmul@multiplier+1,f
  4183  04B5  0CA0               	rrf	___lmul@multiplier,f
  4184  04B6  0B89               	decfsz	9,f
  4185  04B7  2CB2               	goto	u815
  4186  04B8  0823               	movf	___lmul@multiplier+3,w
  4187  04B9  0422               	iorwf	___lmul@multiplier+2,w
  4188  04BA  0421               	iorwf	___lmul@multiplier+1,w
  4189  04BB  0420               	iorwf	___lmul@multiplier,w
  4190  04BC  1D03               	skipz
  4191  04BD  2CA0               	goto	l1694
  4192  04BE  082B               	movf	___lmul@product+3,w
  4193  04BF  00A3               	movwf	?___lmul+3
  4194  04C0  082A               	movf	___lmul@product+2,w
  4195  04C1  00A2               	movwf	?___lmul+2
  4196  04C2  0829               	movf	___lmul@product+1,w
  4197  04C3  00A1               	movwf	?___lmul+1
  4198  04C4  0828               	movf	___lmul@product,w
  4199  04C5  00A0               	movwf	?___lmul
  4200  04C6  0008               	return
  4201  04C7                     __end_of___lmul:	
  4202                           
  4203                           	psect	text19
  4204  0352                     __ptext19:	
  4205 ;; *************** function ___lldiv *****************
  4206 ;; Defined at:
  4207 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;  divisor         4    0[BANK0 ] unsigned long 
  4210 ;;  dividend        4    4[BANK0 ] unsigned long 
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  quotient        4    9[BANK0 ] unsigned long 
  4213 ;;  counter         1   13[BANK0 ] unsigned char 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  4    0[BANK0 ] unsigned long 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1
  4223 ;;      Params:         0       8       0
  4224 ;;      Locals:         0       5       0
  4225 ;;      Temps:          0       1       0
  4226 ;;      Totals:         0      14       0
  4227 ;;Total ram usage:       14 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    4
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_loop
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function ___lldiv
  4239  0352                     ___lldiv:	
  4240                           
  4241                           ;incstack = 0
  4242                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4243  0352  3000               	movlw	0
  4244  0353  0020               	movlb	0	; select bank0
  4245  0354  00AC               	movwf	___lldiv@quotient+3
  4246  0355  3000               	movlw	0
  4247  0356  00AB               	movwf	___lldiv@quotient+2
  4248  0357  3000               	movlw	0
  4249  0358  00AA               	movwf	___lldiv@quotient+1
  4250  0359  3000               	movlw	0
  4251  035A  00A9               	movwf	___lldiv@quotient
  4252  035B  0823               	movf	___lldiv@divisor+3,w
  4253  035C  0422               	iorwf	___lldiv@divisor+2,w
  4254  035D  0421               	iorwf	___lldiv@divisor+1,w
  4255  035E  0420               	iorwf	___lldiv@divisor,w
  4256  035F  1903               	skipnz
  4257  0360  2B9C               	goto	l1726
  4258  0361  01AD               	clrf	___lldiv@counter
  4259  0362  0AAD               	incf	___lldiv@counter,f
  4260  0363                     l1712:	
  4261  0363  1BA3               	btfsc	___lldiv@divisor+3,7
  4262  0364  2B71               	goto	l1714
  4263  0365  3001               	movlw	1
  4264  0366                     u845:	
  4265  0366  35A0               	lslf	___lldiv@divisor,f
  4266  0367  0DA1               	rlf	___lldiv@divisor+1,f
  4267  0368  0DA2               	rlf	___lldiv@divisor+2,f
  4268  0369  0DA3               	rlf	___lldiv@divisor+3,f
  4269  036A  0B89               	decfsz	9,f
  4270  036B  2B66               	goto	u845
  4271  036C  3001               	movlw	1
  4272  036D  00A8               	movwf	??___lldiv
  4273  036E  0828               	movf	??___lldiv,w
  4274  036F  07AD               	addwf	___lldiv@counter,f
  4275  0370  2B63               	goto	l1712
  4276  0371                     l1714:	
  4277  0371  3001               	movlw	1
  4278  0372                     u865:	
  4279  0372  35A9               	lslf	___lldiv@quotient,f
  4280  0373  0DAA               	rlf	___lldiv@quotient+1,f
  4281  0374  0DAB               	rlf	___lldiv@quotient+2,f
  4282  0375  0DAC               	rlf	___lldiv@quotient+3,f
  4283  0376  0B89               	decfsz	9,f
  4284  0377  2B72               	goto	u865
  4285  0378  0823               	movf	___lldiv@divisor+3,w
  4286  0379  0227               	subwf	___lldiv@dividend+3,w
  4287  037A  1D03               	skipz
  4288  037B  2B86               	goto	u875
  4289  037C  0822               	movf	___lldiv@divisor+2,w
  4290  037D  0226               	subwf	___lldiv@dividend+2,w
  4291  037E  1D03               	skipz
  4292  037F  2B86               	goto	u875
  4293  0380  0821               	movf	___lldiv@divisor+1,w
  4294  0381  0225               	subwf	___lldiv@dividend+1,w
  4295  0382  1D03               	skipz
  4296  0383  2B86               	goto	u875
  4297  0384  0820               	movf	___lldiv@divisor,w
  4298  0385  0224               	subwf	___lldiv@dividend,w
  4299  0386                     u875:	
  4300  0386  1C03               	skipc
  4301  0387  2B91               	goto	l1722
  4302  0388  0820               	movf	___lldiv@divisor,w
  4303  0389  02A4               	subwf	___lldiv@dividend,f
  4304  038A  0821               	movf	___lldiv@divisor+1,w
  4305  038B  3BA5               	subwfb	___lldiv@dividend+1,f
  4306  038C  0822               	movf	___lldiv@divisor+2,w
  4307  038D  3BA6               	subwfb	___lldiv@dividend+2,f
  4308  038E  0823               	movf	___lldiv@divisor+3,w
  4309  038F  3BA7               	subwfb	___lldiv@dividend+3,f
  4310  0390  1429               	bsf	___lldiv@quotient,0
  4311  0391                     l1722:	
  4312  0391  3001               	movlw	1
  4313  0392                     u885:	
  4314  0392  36A3               	lsrf	___lldiv@divisor+3,f
  4315  0393  0CA2               	rrf	___lldiv@divisor+2,f
  4316  0394  0CA1               	rrf	___lldiv@divisor+1,f
  4317  0395  0CA0               	rrf	___lldiv@divisor,f
  4318  0396  0B89               	decfsz	9,f
  4319  0397  2B92               	goto	u885
  4320  0398  3001               	movlw	1
  4321  0399  02AD               	subwf	___lldiv@counter,f
  4322  039A  1D03               	btfss	3,2
  4323  039B  2B71               	goto	l1714
  4324  039C                     l1726:	
  4325  039C  082C               	movf	___lldiv@quotient+3,w
  4326  039D  00A3               	movwf	?___lldiv+3
  4327  039E  082B               	movf	___lldiv@quotient+2,w
  4328  039F  00A2               	movwf	?___lldiv+2
  4329  03A0  082A               	movf	___lldiv@quotient+1,w
  4330  03A1  00A1               	movwf	?___lldiv+1
  4331  03A2  0829               	movf	___lldiv@quotient,w
  4332  03A3  00A0               	movwf	?___lldiv
  4333  03A4  0008               	return
  4334  03A5                     __end_of___lldiv:	
  4335                           
  4336                           	psect	intentry
  4337  0004                     __pintentry:	
  4338 ;; *************** function _ISR *****************
  4339 ;; Defined at:
  4340 ;;		line 32 in file "main.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;		None
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;  result          2   10[COMMON] int 
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  1    wreg      void 
  4347 ;; Registers used:
  4348 ;;		wreg, status,2, status,0, pclath, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMMON   BANK0   BANK1
  4354 ;;      Params:         0       0       0
  4355 ;;      Locals:         2       0       0
  4356 ;;      Temps:          4       0       0
  4357 ;;      Totals:         6       0       0
  4358 ;;Total ram usage:        6 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    3
  4361 ;; This function calls:
  4362 ;;		_nrf24l01ISR
  4363 ;; This function is called by:
  4364 ;;		Interrupt level 1
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368  0004                     _ISR:	
  4369                           
  4370                           ;incstack = 0
  4371  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4372                           
  4373                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  4374  0005  3180               	pagesel	$
  4375  0006  0020               	movlb	0	; select bank0
  4376  0007  087F               	movf	127,w
  4377  0008  00F9               	movwf	??_ISR+3
  4378                           
  4379                           ;main.c: 33: if (PIR1bits.ADIF){
  4380  0009  1F11               	btfss	17,6	;volatile
  4381  000A  2839               	goto	i1l1914
  4382                           
  4383                           ;main.c: 35: if (mode == 2) {
  4384  000B  3002               	movlw	2
  4385  000C  067D               	xorwf	_mode,w
  4386  000D  1D03               	btfss	3,2
  4387  000E  2837               	goto	i1l1912
  4388                           
  4389                           ;main.c: 37: int result = 0x00;
  4390  000F  01FA               	clrf	ISR@result
  4391  0010  01FB               	clrf	ISR@result+1
  4392                           
  4393                           ;main.c: 38: result = ADRESL;
  4394  0011  0021               	movlb	1	; select bank1
  4395  0012  081B               	movf	27,w	;volatile
  4396  0013  00F6               	movwf	??_ISR
  4397  0014  01F7               	clrf	??_ISR+1
  4398  0015  0876               	movf	??_ISR,w
  4399  0016  00FA               	movwf	ISR@result
  4400  0017  0877               	movf	??_ISR+1,w
  4401  0018  00FB               	movwf	ISR@result+1
  4402                           
  4403                           ;main.c: 39: result|= (ADRESH << 8);
  4404  0019  081C               	movf	28,w	;volatile
  4405  001A  00F6               	movwf	??_ISR
  4406  001B  01F7               	clrf	??_ISR+1
  4407  001C  0876               	movf	??_ISR,w
  4408  001D  00F7               	movwf	??_ISR+1
  4409  001E  01F6               	clrf	??_ISR
  4410  001F  0876               	movf	??_ISR,w
  4411  0020  04FA               	iorwf	ISR@result,f
  4412  0021  0877               	movf	??_ISR+1,w
  4413  0022  04FB               	iorwf	ISR@result+1,f
  4414                           
  4415                           ;main.c: 41: adcSum+= (unsigned) result;
  4416  0023  087A               	movf	ISR@result,w
  4417  0024  0020               	movlb	0	; select bank0
  4418  0025  07C5               	addwf	_adcSum,f
  4419  0026  087B               	movf	ISR@result+1,w
  4420  0027  3DC6               	addwfc	_adcSum+1,f
  4421  0028  3000               	movlw	0
  4422  0029  3DC7               	addwfc	_adcSum+2,f
  4423  002A  3DC8               	addwfc	_adcSum+3,f
  4424                           
  4425                           ;main.c: 43: if (!adcLoop){
  4426  002B  087C               	movf	_adcLoop,w
  4427  002C  1D03               	btfss	3,2
  4428  002D  2833               	goto	i1l153
  4429                           
  4430                           ;main.c: 44: mode = 3;
  4431  002E  3003               	movlw	3
  4432  002F  00F6               	movwf	??_ISR
  4433  0030  0876               	movf	??_ISR,w
  4434  0031  00FD               	movwf	_mode
  4435                           
  4436                           ;main.c: 45: }else{
  4437  0032  2835               	goto	i1l1910
  4438  0033                     i1l153:	
  4439                           
  4440                           ;main.c: 47: ADCON0bits.ADGO = 1;
  4441  0033  0021               	movlb	1	; select bank1
  4442  0034  149D               	bsf	29,1	;volatile
  4443  0035                     i1l1910:	
  4444                           
  4445                           ;main.c: 48: }
  4446                           ;main.c: 50: adcLoop--;
  4447  0035  3001               	movlw	1
  4448  0036  02FC               	subwf	_adcLoop,f
  4449  0037                     i1l1912:	
  4450                           
  4451                           ;main.c: 51: }
  4452                           ;main.c: 54: PIR1bits.ADIF = 0;
  4453  0037  0020               	movlb	0	; select bank0
  4454  0038  1311               	bcf	17,6	;volatile
  4455  0039                     i1l1914:	
  4456                           
  4457                           ;main.c: 55: }
  4458                           ;main.c: 57: if (INTCONbits.INTF){
  4459  0039  1C8B               	btfss	11,1	;volatile
  4460  003A  283D               	goto	i1l156
  4461                           
  4462                           ;main.c: 58: nrf24l01ISR();
  4463  003B  25BD               	fcall	_nrf24l01ISR
  4464                           
  4465                           ;main.c: 59: INTCONbits.INTF = 0;
  4466  003C  108B               	bcf	11,1	;volatile
  4467  003D                     i1l156:	
  4468  003D  0879               	movf	??_ISR+3,w
  4469  003E  0020               	movlb	0	; select bank0
  4470  003F  00FF               	movwf	127
  4471  0040  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4472  0041  0009               	retfie
  4473  0042                     __end_of_ISR:	
  4474                           
  4475                           	psect	text21
  4476  05BD                     __ptext21:	
  4477 ;; *************** function _nrf24l01ISR *****************
  4478 ;; Defined at:
  4479 ;;		line 54 in file "nrf24l01.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;		None
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;  status          1    5[COMMON] struct .
  4484 ;; Return value:  Size  Location     Type
  4485 ;;                  1    wreg      void 
  4486 ;; Registers used:
  4487 ;;		wreg, status,2, status,0, pclath, cstack
  4488 ;; Tracked objects:
  4489 ;;		On entry : 0/0
  4490 ;;		On exit  : 0/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMMON   BANK0   BANK1
  4493 ;;      Params:         0       0       0
  4494 ;;      Locals:         1       0       0
  4495 ;;      Temps:          1       0       0
  4496 ;;      Totals:         2       0       0
  4497 ;;Total ram usage:        2 bytes
  4498 ;; Hardware stack levels used:    1
  4499 ;; Hardware stack levels required when called:    2
  4500 ;; This function calls:
  4501 ;;		_nrf24l01Send
  4502 ;; This function is called by:
  4503 ;;		_ISR
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           
  4508                           ;psect for function _nrf24l01ISR
  4509  05BD                     _nrf24l01ISR:	
  4510                           
  4511                           ;nrf24l01.c: 56: n_STATUS_t status;
  4512                           ;nrf24l01.c: 57: status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  4513                           
  4514                           ;incstack = 0
  4515                           ; Regs used in _nrf24l01ISR: [wreg+status,2+status,0+pclath+cstack]
  4516  05BD  01F1               	clrf	nrf24l01Send@data
  4517  05BE  3007               	movlw	7
  4518  05BF  2608               	fcall	_nrf24l01Send
  4519  05C0  00F4               	movwf	??_nrf24l01ISR
  4520  05C1  0874               	movf	??_nrf24l01ISR,w
  4521  05C2  00F5               	movwf	nrf24l01ISR@status
  4522                           
  4523                           ;nrf24l01.c: 59: if (status.TX_DS){
  4524  05C3  1EF5               	btfss	nrf24l01ISR@status,5
  4525  05C4  2DCB               	goto	i1l1794
  4526                           
  4527                           ;nrf24l01.c: 60: nrf24l01Send(0b00100000 | 0x07, status.byte);
  4528  05C5  0875               	movf	nrf24l01ISR@status,w
  4529  05C6  00F4               	movwf	??_nrf24l01ISR
  4530  05C7  0874               	movf	??_nrf24l01ISR,w
  4531  05C8  00F1               	movwf	nrf24l01Send@data
  4532  05C9  3027               	movlw	39
  4533  05CA  2608               	fcall	_nrf24l01Send
  4534  05CB                     i1l1794:	
  4535                           
  4536                           ;nrf24l01.c: 61: }
  4537                           ;nrf24l01.c: 63: if (status.RX_DR){
  4538  05CB  1F75               	btfss	nrf24l01ISR@status,6
  4539  05CC  0008               	return
  4540                           
  4541                           ;nrf24l01.c: 65: nrf24l01Send(0b00100000 | 0x07, status.byte);
  4542  05CD  0875               	movf	nrf24l01ISR@status,w
  4543  05CE  00F4               	movwf	??_nrf24l01ISR
  4544  05CF  0874               	movf	??_nrf24l01ISR,w
  4545  05D0  00F1               	movwf	nrf24l01Send@data
  4546  05D1  3027               	movlw	39
  4547  05D2  2608               	fcall	_nrf24l01Send
  4548  05D3  0008               	return
  4549  05D4                     __end_of_nrf24l01ISR:	
  4550                           
  4551                           	psect	text22
  4552  0608                     __ptext22:	
  4553 ;; *************** function _nrf24l01Send *****************
  4554 ;; Defined at:
  4555 ;;		line 10 in file "nrf24l01.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  command         1    wreg     unsigned char 
  4558 ;;  data            1    1[COMMON] unsigned char 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  command         1    3[COMMON] unsigned char 
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  1    wreg      unsigned char 
  4563 ;; Registers used:
  4564 ;;		wreg, status,2, status,0, pclath, cstack
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMMON   BANK0   BANK1
  4570 ;;      Params:         0       0       0
  4571 ;;      Locals:         0       0       0
  4572 ;;      Temps:          0       0       0
  4573 ;;      Totals:         0       0       0
  4574 ;;Total ram usage:        0 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:    5
  4577 ;; This function calls:
  4578 ;;		_nrf24l01SPIEnd
  4579 ;;		_nrf24l01SPISend
  4580 ;;		_nrf24l01SPIStart
  4581 ;; This function is called by:
  4582 ;;		_nrf24l01ISR
  4583 ;;		_nrf24l01SetTransmitMode
  4584 ;;		_nrf24l01SetRecieveMode
  4585 ;;		_nrf24l01InitRegisters
  4586 ;;		_nrf24l01HandleRX
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           
  4591                           ;psect for function _nrf24l01Send
  4592  0608                     _nrf24l01Send:	
  4593                           
  4594                           ;incstack = 0
  4595                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  4596                           ;nrf24l01Send@command stored from wreg
  4597  0608  00F3               	movwf	nrf24l01Send@command
  4598                           
  4599                           ;nrf24l01.c: 12: nrf24l01SPIStart();
  4600  0609  262E               	fcall	_nrf24l01SPIStart
  4601                           
  4602                           ;nrf24l01.c: 14: nrf24l01SPISend(command);
  4603  060A  0873               	movf	nrf24l01Send@command,w
  4604  060B  2614               	fcall	_nrf24l01SPISend
  4605                           
  4606                           ;nrf24l01.c: 15: data = nrf24l01SPISend(data);
  4607  060C  0871               	movf	nrf24l01Send@data,w
  4608  060D  2614               	fcall	_nrf24l01SPISend
  4609  060E  00F2               	movwf	??_nrf24l01Send
  4610  060F  0872               	movf	??_nrf24l01Send,w
  4611  0610  00F1               	movwf	nrf24l01Send@data
  4612                           
  4613                           ;nrf24l01.c: 17: nrf24l01SPIEnd();
  4614  0611  2635               	fcall	_nrf24l01SPIEnd
  4615                           
  4616                           ;nrf24l01.c: 19: return data;
  4617  0612  0871               	movf	nrf24l01Send@data,w
  4618  0613  0008               	return
  4619  0614                     __end_of_nrf24l01Send:	
  4620                           
  4621                           	psect	text23
  4622  062E                     __ptext23:	
  4623 ;; *************** function _nrf24l01SPIStart *****************
  4624 ;; Defined at:
  4625 ;;		line 39 in file "interface.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;		None
  4628 ;; Auto vars:     Size  Location     Type
  4629 ;;		None
  4630 ;; Return value:  Size  Location     Type
  4631 ;;                  1    wreg      void 
  4632 ;; Registers used:
  4633 ;;		wreg
  4634 ;; Tracked objects:
  4635 ;;		On entry : 0/0
  4636 ;;		On exit  : 0/0
  4637 ;;		Unchanged: 0/0
  4638 ;; Data sizes:     COMMON   BANK0   BANK1
  4639 ;;      Params:         0       0       0
  4640 ;;      Locals:         0       0       0
  4641 ;;      Temps:          0       0       0
  4642 ;;      Totals:         0       0       0
  4643 ;;Total ram usage:        0 bytes
  4644 ;; Hardware stack levels used:    1
  4645 ;; Hardware stack levels required when called:    4
  4646 ;; This function calls:
  4647 ;;		Nothing
  4648 ;; This function is called by:
  4649 ;;		_nrf24l01Send
  4650 ;;		_nrf24l01SendString
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           
  4655                           ;psect for function _nrf24l01SPIStart
  4656  062E                     _nrf24l01SPIStart:	
  4657                           
  4658                           ;interface.c: 40: PORTAbits.RA1 = 0;
  4659                           
  4660                           ;incstack = 0
  4661                           ; Regs used in _nrf24l01SPIStart: [wreg]
  4662  062E  0020               	movlb	0	; select bank0
  4663  062F  108C               	bcf	12,1	;volatile
  4664                           
  4665                           ;interface.c: 41: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4666  0630  300D               	movlw	13
  4667  0631                     u118_27:	
  4668  0631  0B89               	decfsz	9,f
  4669  0632  2E31               	goto	u118_27
  4670  0633  0000               	nop
  4671  0634  0008               	return
  4672  0635                     __end_of_nrf24l01SPIStart:	
  4673                           
  4674                           	psect	text24
  4675  0614                     __ptext24:	
  4676 ;; *************** function _nrf24l01SPISend *****************
  4677 ;; Defined at:
  4678 ;;		line 28 in file "interface.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;  data            1    wreg     unsigned char 
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;  data            1    0[COMMON] unsigned char 
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  1    wreg      unsigned char 
  4685 ;; Registers used:
  4686 ;;		wreg
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMMON   BANK0   BANK1
  4692 ;;      Params:         0       0       0
  4693 ;;      Locals:         0       0       0
  4694 ;;      Temps:          0       0       0
  4695 ;;      Totals:         0       0       0
  4696 ;;Total ram usage:        0 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    4
  4699 ;; This function calls:
  4700 ;;		Nothing
  4701 ;; This function is called by:
  4702 ;;		_nrf24l01Send
  4703 ;;		_nrf24l01SendString
  4704 ;;		_nrf24l01HandleRX
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           
  4709                           ;psect for function _nrf24l01SPISend
  4710  0614                     _nrf24l01SPISend:	
  4711                           
  4712                           ;incstack = 0
  4713                           ; Regs used in _nrf24l01SPISend: [wreg]
  4714                           ;nrf24l01SPISend@data stored from wreg
  4715  0614  00F0               	movwf	nrf24l01SPISend@data
  4716                           
  4717                           ;interface.c: 29: SSP1BUF = data;
  4718  0615  0870               	movf	nrf24l01SPISend@data,w
  4719  0616  0024               	movlb	4	; select bank4
  4720  0617  0091               	movwf	17	;volatile
  4721  0618                     i1l52:	
  4722                           ;interface.c: 31: while (!SSP1STATbits.BF){
  4723                           
  4724  0618  0024               	movlb	4	; select bank4
  4725  0619  1814               	btfsc	20,0	;volatile
  4726  061A  2E1D               	goto	i1l1458
  4727                           
  4728                           ;interface.c: 32: __nop();
  4729  061B  0000               	nop
  4730  061C  2E18               	goto	i1l52
  4731  061D                     i1l1458:	
  4732                           
  4733                           ;interface.c: 33: }
  4734                           ;interface.c: 35: return SSP1BUF;
  4735  061D  0811               	movf	17,w	;volatile
  4736  061E  0008               	return
  4737  061F                     __end_of_nrf24l01SPISend:	
  4738                           
  4739                           	psect	text25
  4740  0635                     __ptext25:	
  4741 ;; *************** function _nrf24l01SPIEnd *****************
  4742 ;; Defined at:
  4743 ;;		line 45 in file "interface.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;		None
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;		None
  4748 ;; Return value:  Size  Location     Type
  4749 ;;                  1    wreg      void 
  4750 ;; Registers used:
  4751 ;;		wreg
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMMON   BANK0   BANK1
  4757 ;;      Params:         0       0       0
  4758 ;;      Locals:         0       0       0
  4759 ;;      Temps:          0       0       0
  4760 ;;      Totals:         0       0       0
  4761 ;;Total ram usage:        0 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; Hardware stack levels required when called:    4
  4764 ;; This function calls:
  4765 ;;		Nothing
  4766 ;; This function is called by:
  4767 ;;		_nrf24l01Send
  4768 ;;		_nrf24l01SendString
  4769 ;; This function uses a non-reentrant model
  4770 ;;
  4771                           
  4772                           
  4773                           ;psect for function _nrf24l01SPIEnd
  4774  0635                     _nrf24l01SPIEnd:	
  4775                           
  4776                           ;interface.c: 46: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4777                           
  4778                           ;incstack = 0
  4779                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  4780  0635  300D               	movlw	13
  4781  0636                     u119_27:	
  4782  0636  0B89               	decfsz	9,f
  4783  0637  2E36               	goto	u119_27
  4784  0638  0000               	nop
  4785                           
  4786                           ;interface.c: 47: PORTAbits.RA1 = 1;
  4787  0639  0020               	movlb	0	; select bank0
  4788  063A  148C               	bsf	12,1	;volatile
  4789  063B  0008               	return
  4790  063C                     __end_of_nrf24l01SPIEnd:	
  4791  007E                     btemp	set	126	;btemp
  4792  007E                     int$flags	set	126
  4793  007E                     wtemp0	set	126


Data Sizes:
    Strings     20
    Constant    6
    Data        2
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     37      61
    BANK1            32      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[2]), STR_3(CODE[5]), STR_2(CODE[8]), STR_1(CODE[7]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    nrf24l01SendString@string	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    _itoa@buffer	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _loop->__itoa
    _strcpy->_strlen
    _nrf24l01SendString->_read_flashmem
    __itoa->_itoa
    _itoa->_utoa
    _utoa->___lwdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   10881
                                             34 BANK0      3     3      0
                               _loop
                       _nrf24l01Init
                      _read_flashmem
                     _write_flashmem
 ---------------------------------------------------------------------------------
 (1) _write_flashmem                                       6     2      4     283
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1795
                                             10 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               10    10      0    1795
                                              0 BANK0     10    10      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 4     4      0    8408
                                             30 BANK0      4     4      0
                            ___lldiv
                             ___lmul
                              __itoa
                 _nrf24l01SendString
             _nrf24l01SetRecieveMode
                      _read_flashmem
                           _startADC
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     270
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               5     3      2     451
                                              8 BANK0      5     3      2
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _startADC                                             2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRecieveMode                               2     2      0    1607
                                              0 BANK0      2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendString                                   6     6      0    2226
                                              9 BANK0      6     6      0
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
            _nrf24l01SetTransmitMode
                      _read_flashmem
 ---------------------------------------------------------------------------------
 (1) _read_flashmem                                        9     7      2     348
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetTransmitMode                              2     2      0    1607
                                              0 BANK0      2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1561
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      22
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __itoa                                                6     3      3    2184
                                             24 BANK0      6     3      3
                               _itoa
                      _read_flashmem (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 7     3      4    1486
                                             17 BANK0      7     3      4
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     5      4    1165
                                              8 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     287
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     476
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     802
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  6     6      0    1675
                                              6 COMMON     6     6      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          2     2      0    1650
                                              4 COMMON     2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1561
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      22
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___lldiv
     ___lmul
     __itoa
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _read_flashmem (ARG)
       _strlen (ARG)
     _nrf24l01SendString
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetTransmitMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _read_flashmem
     _nrf24l01SetRecieveMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _read_flashmem
     _startADC
     _strcpy
       _strlen (ARG)
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _read_flashmem
   _write_flashmem

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     25      3D       6       76.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      4B       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jun 06 17:23:46 2018

                     __CFG_CP$OFF 0000               nrf24l01Send@command 0073   __size_of_nrf24l01SetRecieveMode 001D  
                     __CFG_LVP$ON 0000                               l170 009B                               l184 0203  
                             l531 033C                               l189 02E7                               _ISR 0004  
                             u625 04FF                               u555 043C                               u805 04AB  
                             u645 050E                               u815 04B2                               u575 0446  
                             u655 0515                               u585 0450                               u930 0060  
                             u595 0458                               u845 0366                               u944 0062  
                             u865 0372                               u875 0386                               u885 0392  
                    __CFG_BORV$LO 0000                               wreg 0009                              ?_ISR 0070  
                  ??_nrf24l01Init 002A                              l1400 02FC                              l1410 0318  
                            l1360 0439                              l1362 0445                              l1514 04ED  
                            l1372 0460                              l1540 058D                              l1390 0514  
                            l1712 0363                              l1368 0457                              l1384 04FC  
                            l1480 055F                              l1722 0391                              l1714 0371  
                            l1386 0508                              l1394 051D                              l1546 0528  
                            l1802 0056                              l1572 03C7                              l1556 03AD  
                            l1548 0533                              l1726 039C                              l1574 03DE  
                            l1566 03C5                              l1822 0077                              l1832 00A3  
                  ??_nrf24l01Send 0072                              l1850 00D6                              l1842 00C6  
                            l1818 006E                              l1860 0109                              l1694 04A0  
                            l1862 012C                              l1854 00DE                              l1846 00CE  
                            l1864 014F                              l1872 0197                              l1698 04AA  
                            l1874 01A8                              l1858 00E6                              l1868 017B  
                            l1884 01E6                              l1996 02F4                              STR_1 0627  
                    __CFG_WDTE$ON 0000                              STR_2 061F                              STR_3 0647  
                            STR_4 0625                              u1107 020B                              u1117 04EA  
                            u1127 056D                              u1137 0583                              u1147 03E2  
                            u1157 03ED                              u1077 029E                              u1167 05A5  
                            u1087 05DB                              u1177 05B9                              u1097 05E4  
                            i1l52 0618    __size_of_nrf24l01InterfaceInit 000E                      __CFG_WRT$OFF 0000  
   __end_of_nrf24l01InterfaceInit 0608                     __p_NVMEM_text 07E0                              _main 028E  
                            _mode 007D                              _itoa 0547                              _loop 0051  
                            fsr0h 0005                              fsr1h 0007                              indf0 0000  
                            fsr0l 0004                              indf1 0001                              fsr1l 0006  
                            btemp 007E                              _utoa 02F6                              start 0042  
        ?_nrf24l01SetTransmitMode 0070                     __CFG_MCLRE$ON 0000                             ??_ISR 0076  
             nrf24l01SendString@i 002E       __size_of_nrf24l01SendString 004F                             ?_main 0070  
                           ?_itoa 0031                             ?_loop 0070                   __end_of___lldiv 03A5  
                           ?_utoa 0028                   __end_of___lwdiv 0465                             i1l153 0033  
                           i1l156 003D                   __end_of___lwmod 0522                             _NVMEM 07E0  
             ___lmul@multiplicand 0024                     __CFG_PWRTE$ON 0000                             __itoa 05EA  
                  __CFG_BOREN$OFF 0000            _nrf24l01SetRecieveMode 056A                             utoa@c 002F  
                           utoa@v 002D                             status 0003                             wtemp0 007E  
                _nrf24l01SPIStart 062E                   __initialization 0043                      __end_of_main 02F6  
                    __end_of_itoa 056A                      __end_of_loop 0204                      __end_of_utoa 0352  
                  __CFG_LPBOR$OFF 0000                            ??_main 0042                            ??_itoa 0035  
                          ??_loop 003E                            ??_utoa 002C                  ??_write_flashmem 0024  
                ??_nrf24l01SPIEnd 0070                     main@bootCount 0043          __size_of_nrf24l01SPISend 000B  
                          ?__itoa 0038                            _ADRESH 009C                            _ADRESL 009B  
                          _ANSELA 018C                            _ANSELC 018E                            i1l1458 061D  
                          i1l1910 0035                            i1l1912 0037                            i1l1914 0039  
                          i1l1794 05CB                            u118_27 0631                            u119_27 0636  
                          _PMADRH 0192                            _PMADRL 0191                            _PMDATH 0194  
                          _PMDATL 0193                            _PMCON1 0195                            _PMCON2 0196  
            __size_of_nrf24l01ISR 0017                            _adcSum 0045                            ___lmul 0497  
                  __CFG_STVREN$ON 0000                         ??___lldiv 0028                         ??___lwdiv 0024  
                       ??___lwmod 0024              __end_of_nrf24l01Init 05EA              __end_of_nrf24l01Send 0614  
           _nrf24l01InitRegisters 0204                            _strcpy 0587                            _string 004C  
                          _strlen 0522              write_flashmem@offset 0020                            itoa@cp 0036  
                    __pdataCOMMON 007D                  __end_of_startADC 04F5            __size_of_read_flashmem 0032  
         __end_of__initialization 004E                      __itoa@buffer 003D                     __end_of_NVMEM 0800  
                    __itoa@number 0038                    __pcstackCOMMON 0070                      __pidataBANK0 064D  
                   __end_of__itoa 05FA     nrf24l01InitRegisters@enRXAddr 0027                    _OPTION_REGbits 0095  
                         ??__itoa 003B                        __pbssBANK0 0045                        __itoa@base 003A  
               ??_nrf24l01SPISend 0070                         ISR@result 007A                     _read_flashmem 0465  
                      __pmaintext 028E                           ?___lmul 0020            ?_nrf24l01InitRegisters 0070  
                      __pintentry 0004               nrf24l01SPISend@data 0070                    ___lmul@product 0028  
                         ?_strcpy 0028                           ?_strlen 0020             __end_of_n_ADDRESS_MUL 064F  
__size_of_nrf24l01SetTransmitMode 001B          __end_of_nrf24l01SPIStart 0635                           _SSP1BUF 0211  
         ?_nrf24l01SetRecieveMode 0070          nrf24l01SendString@string 002D             _nrf24l01InterfaceInit 05FA  
                  ?_read_flashmem 0020             __size_of_nrf24l01Init 0016             __size_of_nrf24l01Send 000C  
      __end_of_nrf24l01SendString 03F4                   __size_of___lmul 0030                           _adcLoop 007C  
                       ?_startADC 0070                           ___lldiv 0352                           ___lwdiv 0430  
                         ___lwmod 04F5                           __ptext1 03F4                           __ptext2 05D4  
                         __ptext3 05FA                           __ptext4 0204                           __ptext5 0051  
                         __ptext6 0522                           __ptext7 0587                           __ptext8 04C7  
                         __ptext9 056A                   __size_of_strcpy 001B                   __size_of_strlen 0025  
                    __size_of_ISR 003E                           _counter 0049    __end_of_nrf24l01SetRecieveMode 0587  
           write_flashmem@address 0024                           clrloop0 063D              end_of_initialization 004E  
                    _nrf24l01Init 05D4                      _nrf24l01Send 0608                           itoa@buf 0037  
                         itoa@val 0031                   ___lldiv@divisor 0020                   ___lldiv@counter 002D  
                      ??_startADC 0020                           utoa@buf 0030                           utoa@val 0028  
                         strlen@s 0027                         _PORTAbits 000C                  __CFG_FOSC$INTOSC 0000  
                       _TRISAbits 008C                         _TRISCbits 008E                  nrf24l01Send@data 0071  
                   ??_nrf24l01ISR 0074            ?_nrf24l01InterfaceInit 0070                   ??_read_flashmem 0022  
                  __end_of___lmul 04C7     nrf24l01SetTransmitMode@config 0021                     __pidataCOMMON 064C  
         _nrf24l01SetTransmitMode 05A2                write_flashmem@data 0022                    __end_of_strcpy 05A2  
                  __end_of_strlen 0547               start_initialization 0043                   _nrf24l01SPISend 0614  
                     __end_of_ISR 0042           __size_of_write_flashmem 003C           __size_of_nrf24l01SPIEnd 0007  
          nrf24l01SendString@btye 002C           ??_nrf24l01InitRegisters 0020                          ??___lmul 0028  
             __end_of_nrf24l01ISR 05D4                       __pdataBANK0 005C                          ??_strcpy 002A  
                        ??_strlen 0022                       __pbssCOMMON 007C                         ___latbits 0000  
                   __pcstackBANK0 0020                 ?_nrf24l01SPIStart 0070                ??_nrf24l01SPIStart 0070  
                ___lwdiv@dividend 0022                          ?___lldiv 0020                          ?___lwdiv 0020  
       ??_nrf24l01SetTransmitMode 0020                          ?___lwmod 0020              __end_of_n_ADDRESS_P0 0647  
         __end_of_nrf24l01SPISend 061F                     _NVMEM_absaddr 07E0                 __size_of_startADC 002E  
       nrf24l01InitRegisters@enAA 0028                _nrf24l01SendString 03A5                  ___lwdiv@quotient 0025  
                  __size_of__itoa 0010               ?_nrf24l01SendString 0070                       _nrf24l01ISR 05BD  
                       clear_ram0 063C                          _PIE1bits 0091                          _PIR1bits 0011  
                       _sleepLoop 004B              ??_nrf24l01SendString 0029                        _ADCON0bits 009D  
                      _ADCON1bits 009E                          _WPUAbits 020C   __end_of_nrf24l01SetTransmitMode 05BD  
               ___lmul@multiplier 0020           ??_nrf24l01InterfaceInit 0020                 nrf24l01ISR@status 0075  
                  _write_flashmem 03F4                    _nrf24l01SPIEnd 0635                   startADC@channel 0021  
            read_flashmem@address 0027                  __size_of___lldiv 0053                  __size_of___lwdiv 0035  
                __size_of___lwmod 002D                  ?_nrf24l01SPISend 0070                        _ANSELAbits 018C  
                      _ANSELCbits 018E                     _n_ADDRESS_MUL 064E                   ___lwdiv@divisor 0020  
                 ___lwdiv@counter 0027                          __ptext10 03A5                          __ptext11 0465  
                        __ptext12 05A2                          __ptext21 05BD                          __ptext13 05EA  
                        __ptext22 0608                          __ptext14 0547                          __ptext23 062E  
                        __ptext15 02F6                          __ptext24 0614                          __ptext16 04F5  
          __end_of_write_flashmem 0430                          __ptext25 0635                          __ptext17 0430  
                        __ptext18 0497                          __ptext19 0352            __end_of_nrf24l01SPIEnd 063C  
                      strcpy@from 0028                     __size_of_main 0068                     __size_of_itoa 0023  
                   __size_of_loop 01B3      nrf24l01InitRegisters@channel 0021                     __size_of_utoa 005C  
    nrf24l01InitRegisters@feature 0023                          _nextMode 005C             __end_of_read_flashmem 0497  
    nrf24l01InitRegisters@rfSetup 0024    __size_of_nrf24l01InitRegisters 008A     __end_of_nrf24l01InitRegisters 028E  
                        int$flags 007E                          _startADC 04C7      nrf24l01InitRegisters@setupAW 0022  
                    _SSP1STATbits 0214          ??_nrf24l01SetRecieveMode 0020                        _INTCONbits 000B  
                      _FVRCONbits 0117                          itoa@base 0033                   ?_write_flashmem 0020  
                 ?_nrf24l01SPIEnd 0070                          intlevel1 0000               read_flashmem@offset 0020  
                    _n_ADDRESS_P0 0642               read_flashmem@result 0025                        _PMCON1bits 0195  
                ___lwmod@dividend 0022                  ___lldiv@dividend 0024                 __CFG_CLKOUTEN$OFF 0000  
     nrf24l01InitRegisters@config 0025                        _OSCCONbits 0099         __size_of_nrf24l01SPIStart 0007  
    nrf24l01SetRecieveMode@config 0021       nrf24l01InitRegisters@status 0026                     __pstringtext1 0642  
                   __pstringtext2 064E                     __pstringtext3 061F                     __pstringtext4 0627  
                   __pstringtext5 0647                     __pstringtext6 0000                          utoa@base 002A  
      nrf24l01InitRegisters@DynPD 0029                  ___lldiv@quotient 0029                   ___lwmod@divisor 0020  
                        strcpy@cp 002B                          strlen@cp 0026                          strcpy@to 002C  
                 ___lwmod@counter 0025                       _SSPCON1bits 0215                        _WDTCONbits 0097  
                   ?_nrf24l01Init 0070                     ?_nrf24l01Send 0071                        _STATUSbits 0003  
                    ?_nrf24l01ISR 0070  
