

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
<<<<<<< HEAD
<<<<<<< HEAD
                                                                                               Tue Jun 19 20:55:38 2018
=======
                                                                                               Wed Jun 20 12:19:00 2018
>>>>>>> d3b061564ec233887182288815f9c857f16f8cdf
=======
                                                                                               Tue Jun 19 17:39:04 2018
>>>>>>> parent of b709a45... old

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	_NVMEM_text,global,class=CODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	stringtext7,global,class=STRCODE,delta=2
    13                           	psect	stringtext8,global,class=STRCODE,delta=2
    14                           	psect	stringtext9,global,class=STRCODE,delta=2
    15                           	psect	stringtext10,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	dabs	1,0x7E,2
    50  0000                     
    51                           ; Version 1.45
    52                           ; Generated 16/11/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC16LF1503 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  0007                     	;# 
    93  0008                     	;# 
    94  0009                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000E                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  008C                     	;# 
   112  008E                     	;# 
   113  0091                     	;# 
   114  0092                     	;# 
   115  0093                     	;# 
   116  0095                     	;# 
   117  0096                     	;# 
   118  0097                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009B                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  009F                     	;# 
   127  010C                     	;# 
   128  010E                     	;# 
   129  0111                     	;# 
   130  0112                     	;# 
   131  0113                     	;# 
   132  0114                     	;# 
   133  0115                     	;# 
   134  0116                     	;# 
   135  0117                     	;# 
   136  0118                     	;# 
   137  0119                     	;# 
   138  011D                     	;# 
   139  018C                     	;# 
   140  018E                     	;# 
   141  0191                     	;# 
   142  0191                     	;# 
   143  0192                     	;# 
   144  0193                     	;# 
   145  0193                     	;# 
   146  0194                     	;# 
   147  0195                     	;# 
   148  0196                     	;# 
   149  020C                     	;# 
   150  0211                     	;# 
   151  0211                     	;# 
   152  0212                     	;# 
   153  0212                     	;# 
   154  0213                     	;# 
   155  0213                     	;# 
   156  0214                     	;# 
   157  0214                     	;# 
   158  0215                     	;# 
   159  0215                     	;# 
   160  0215                     	;# 
   161  0216                     	;# 
   162  0216                     	;# 
   163  0217                     	;# 
   164  0217                     	;# 
   165  0391                     	;# 
   166  0392                     	;# 
   167  0393                     	;# 
   168  0498                     	;# 
   169  0498                     	;# 
   170  0499                     	;# 
   171  049A                     	;# 
   172  049B                     	;# 
   173  049B                     	;# 
   174  049C                     	;# 
   175  049D                     	;# 
   176  049E                     	;# 
   177  049F                     	;# 
   178  0611                     	;# 
   179  0612                     	;# 
   180  0613                     	;# 
   181  0613                     	;# 
   182  0614                     	;# 
   183  0615                     	;# 
   184  0616                     	;# 
   185  0616                     	;# 
   186  0617                     	;# 
   187  0618                     	;# 
   188  0619                     	;# 
   189  0619                     	;# 
   190  061A                     	;# 
   191  061B                     	;# 
   192  061C                     	;# 
   193  061C                     	;# 
   194  0691                     	;# 
   195  0692                     	;# 
   196  0693                     	;# 
   197  0694                     	;# 
   198  0695                     	;# 
   199  0F0F                     	;# 
   200  0F10                     	;# 
   201  0F11                     	;# 
   202  0F12                     	;# 
   203  0F13                     	;# 
   204  0F14                     	;# 
   205  0F15                     	;# 
   206  0F16                     	;# 
   207  0F17                     	;# 
   208  0F18                     	;# 
   209  0F19                     	;# 
   210  0F1A                     	;# 
   211  0F1B                     	;# 
   212  0F1C                     	;# 
   213  0F1D                     	;# 
   214  0F1E                     	;# 
   215  0F1F                     	;# 
   216  0FE3                     	;# 
   217  0FE4                     	;# 
   218  0FE5                     	;# 
   219  0FE6                     	;# 
   220  0FE7                     	;# 
   221  0FE8                     	;# 
   222  0FE9                     	;# 
   223  0FEA                     	;# 
   224  0FEB                     	;# 
   225  0FED                     	;# 
   226  0FEE                     	;# 
   227  0FEF                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000E                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0016                     	;# 
   248  0017                     	;# 
   249  0018                     	;# 
   250  0019                     	;# 
   251  001A                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  008C                     	;# 
   255  008E                     	;# 
   256  0091                     	;# 
   257  0092                     	;# 
   258  0093                     	;# 
   259  0095                     	;# 
   260  0096                     	;# 
   261  0097                     	;# 
   262  0099                     	;# 
   263  009A                     	;# 
   264  009B                     	;# 
   265  009B                     	;# 
   266  009C                     	;# 
   267  009D                     	;# 
   268  009E                     	;# 
   269  009F                     	;# 
   270  010C                     	;# 
   271  010E                     	;# 
   272  0111                     	;# 
   273  0112                     	;# 
   274  0113                     	;# 
   275  0114                     	;# 
   276  0115                     	;# 
   277  0116                     	;# 
   278  0117                     	;# 
   279  0118                     	;# 
   280  0119                     	;# 
   281  011D                     	;# 
   282  018C                     	;# 
   283  018E                     	;# 
   284  0191                     	;# 
   285  0191                     	;# 
   286  0192                     	;# 
   287  0193                     	;# 
   288  0193                     	;# 
   289  0194                     	;# 
   290  0195                     	;# 
   291  0196                     	;# 
   292  020C                     	;# 
   293  0211                     	;# 
   294  0211                     	;# 
   295  0212                     	;# 
   296  0212                     	;# 
   297  0213                     	;# 
   298  0213                     	;# 
   299  0214                     	;# 
   300  0214                     	;# 
   301  0215                     	;# 
   302  0215                     	;# 
   303  0215                     	;# 
   304  0216                     	;# 
   305  0216                     	;# 
   306  0217                     	;# 
   307  0217                     	;# 
   308  0391                     	;# 
   309  0392                     	;# 
   310  0393                     	;# 
   311  0498                     	;# 
   312  0498                     	;# 
   313  0499                     	;# 
   314  049A                     	;# 
   315  049B                     	;# 
   316  049B                     	;# 
   317  049C                     	;# 
   318  049D                     	;# 
   319  049E                     	;# 
   320  049F                     	;# 
   321  0611                     	;# 
   322  0612                     	;# 
   323  0613                     	;# 
   324  0613                     	;# 
   325  0614                     	;# 
   326  0615                     	;# 
   327  0616                     	;# 
   328  0616                     	;# 
   329  0617                     	;# 
   330  0618                     	;# 
   331  0619                     	;# 
   332  0619                     	;# 
   333  061A                     	;# 
   334  061B                     	;# 
   335  061C                     	;# 
   336  061C                     	;# 
   337  0691                     	;# 
   338  0692                     	;# 
   339  0693                     	;# 
   340  0694                     	;# 
   341  0695                     	;# 
   342  0F0F                     	;# 
   343  0F10                     	;# 
   344  0F11                     	;# 
   345  0F12                     	;# 
   346  0F13                     	;# 
   347  0F14                     	;# 
   348  0F15                     	;# 
   349  0F16                     	;# 
   350  0F17                     	;# 
   351  0F18                     	;# 
   352  0F19                     	;# 
   353  0F1A                     	;# 
   354  0F1B                     	;# 
   355  0F1C                     	;# 
   356  0F1D                     	;# 
   357  0F1E                     	;# 
   358  0F1F                     	;# 
   359  0FE3                     	;# 
   360  0FE4                     	;# 
   361  0FE5                     	;# 
   362  0FE6                     	;# 
   363  0FE7                     	;# 
   364  0FE8                     	;# 
   365  0FE9                     	;# 
   366  0FEA                     	;# 
   367  0FEB                     	;# 
   368  0FED                     	;# 
   369  0FEE                     	;# 
   370  0FEF                     	;# 
   371  0000                     	;# 
   372  0001                     	;# 
   373  0002                     	;# 
   374  0003                     	;# 
   375  0004                     	;# 
   376  0005                     	;# 
   377  0006                     	;# 
   378  0007                     	;# 
   379  0008                     	;# 
   380  0009                     	;# 
   381  000A                     	;# 
   382  000B                     	;# 
   383  000C                     	;# 
   384  000E                     	;# 
   385  0011                     	;# 
   386  0012                     	;# 
   387  0013                     	;# 
   388  0015                     	;# 
   389  0016                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001C                     	;# 
   397  008C                     	;# 
   398  008E                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0093                     	;# 
   402  0095                     	;# 
   403  0096                     	;# 
   404  0097                     	;# 
   405  0099                     	;# 
   406  009A                     	;# 
   407  009B                     	;# 
   408  009B                     	;# 
   409  009C                     	;# 
   410  009D                     	;# 
   411  009E                     	;# 
   412  009F                     	;# 
   413  010C                     	;# 
   414  010E                     	;# 
   415  0111                     	;# 
   416  0112                     	;# 
   417  0113                     	;# 
   418  0114                     	;# 
   419  0115                     	;# 
   420  0116                     	;# 
   421  0117                     	;# 
   422  0118                     	;# 
   423  0119                     	;# 
   424  011D                     	;# 
   425  018C                     	;# 
   426  018E                     	;# 
   427  0191                     	;# 
   428  0191                     	;# 
   429  0192                     	;# 
   430  0193                     	;# 
   431  0193                     	;# 
   432  0194                     	;# 
   433  0195                     	;# 
   434  0196                     	;# 
   435  020C                     	;# 
   436  0211                     	;# 
   437  0211                     	;# 
   438  0212                     	;# 
   439  0212                     	;# 
   440  0213                     	;# 
   441  0213                     	;# 
   442  0214                     	;# 
   443  0214                     	;# 
   444  0215                     	;# 
   445  0215                     	;# 
   446  0215                     	;# 
   447  0216                     	;# 
   448  0216                     	;# 
   449  0217                     	;# 
   450  0217                     	;# 
   451  0391                     	;# 
   452  0392                     	;# 
   453  0393                     	;# 
   454  0498                     	;# 
   455  0498                     	;# 
   456  0499                     	;# 
   457  049A                     	;# 
   458  049B                     	;# 
   459  049B                     	;# 
   460  049C                     	;# 
   461  049D                     	;# 
   462  049E                     	;# 
   463  049F                     	;# 
   464  0611                     	;# 
   465  0612                     	;# 
   466  0613                     	;# 
   467  0613                     	;# 
   468  0614                     	;# 
   469  0615                     	;# 
   470  0616                     	;# 
   471  0616                     	;# 
   472  0617                     	;# 
   473  0618                     	;# 
   474  0619                     	;# 
   475  0619                     	;# 
   476  061A                     	;# 
   477  061B                     	;# 
   478  061C                     	;# 
   479  061C                     	;# 
   480  0691                     	;# 
   481  0692                     	;# 
   482  0693                     	;# 
   483  0694                     	;# 
   484  0695                     	;# 
   485  0F0F                     	;# 
   486  0F10                     	;# 
   487  0F11                     	;# 
   488  0F12                     	;# 
   489  0F13                     	;# 
   490  0F14                     	;# 
   491  0F15                     	;# 
   492  0F16                     	;# 
   493  0F17                     	;# 
   494  0F18                     	;# 
   495  0F19                     	;# 
   496  0F1A                     	;# 
   497  0F1B                     	;# 
   498  0F1C                     	;# 
   499  0F1D                     	;# 
   500  0F1E                     	;# 
   501  0F1F                     	;# 
   502  0FE3                     	;# 
   503  0FE4                     	;# 
   504  0FE5                     	;# 
   505  0FE6                     	;# 
   506  0FE7                     	;# 
   507  0FE8                     	;# 
   508  0FE9                     	;# 
   509  0FEA                     	;# 
   510  0FEB                     	;# 
   511  0FED                     	;# 
   512  0FEE                     	;# 
   513  0FEF                     	;# 
   514  0000                     	;# 
   515  0001                     	;# 
   516  0002                     	;# 
   517  0003                     	;# 
   518  0004                     	;# 
   519  0005                     	;# 
   520  0006                     	;# 
   521  0007                     	;# 
   522  0008                     	;# 
   523  0009                     	;# 
   524  000A                     	;# 
   525  000B                     	;# 
   526  000C                     	;# 
   527  000E                     	;# 
   528  0011                     	;# 
   529  0012                     	;# 
   530  0013                     	;# 
   531  0015                     	;# 
   532  0016                     	;# 
   533  0016                     	;# 
   534  0017                     	;# 
   535  0018                     	;# 
   536  0019                     	;# 
   537  001A                     	;# 
   538  001B                     	;# 
   539  001C                     	;# 
   540  008C                     	;# 
   541  008E                     	;# 
   542  0091                     	;# 
   543  0092                     	;# 
   544  0093                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0097                     	;# 
   548  0099                     	;# 
   549  009A                     	;# 
   550  009B                     	;# 
   551  009B                     	;# 
   552  009C                     	;# 
   553  009D                     	;# 
   554  009E                     	;# 
   555  009F                     	;# 
   556  010C                     	;# 
   557  010E                     	;# 
   558  0111                     	;# 
   559  0112                     	;# 
   560  0113                     	;# 
   561  0114                     	;# 
   562  0115                     	;# 
   563  0116                     	;# 
   564  0117                     	;# 
   565  0118                     	;# 
   566  0119                     	;# 
   567  011D                     	;# 
   568  018C                     	;# 
   569  018E                     	;# 
   570  0191                     	;# 
   571  0191                     	;# 
   572  0192                     	;# 
   573  0193                     	;# 
   574  0193                     	;# 
   575  0194                     	;# 
   576  0195                     	;# 
   577  0196                     	;# 
   578  020C                     	;# 
   579  0211                     	;# 
   580  0211                     	;# 
   581  0212                     	;# 
   582  0212                     	;# 
   583  0213                     	;# 
   584  0213                     	;# 
   585  0214                     	;# 
   586  0214                     	;# 
   587  0215                     	;# 
   588  0215                     	;# 
   589  0215                     	;# 
   590  0216                     	;# 
   591  0216                     	;# 
   592  0217                     	;# 
   593  0217                     	;# 
   594  0391                     	;# 
   595  0392                     	;# 
   596  0393                     	;# 
   597  0498                     	;# 
   598  0498                     	;# 
   599  0499                     	;# 
   600  049A                     	;# 
   601  049B                     	;# 
   602  049B                     	;# 
   603  049C                     	;# 
   604  049D                     	;# 
   605  049E                     	;# 
   606  049F                     	;# 
   607  0611                     	;# 
   608  0612                     	;# 
   609  0613                     	;# 
   610  0613                     	;# 
   611  0614                     	;# 
   612  0615                     	;# 
   613  0616                     	;# 
   614  0616                     	;# 
   615  0617                     	;# 
   616  0618                     	;# 
   617  0619                     	;# 
   618  0619                     	;# 
   619  061A                     	;# 
   620  061B                     	;# 
   621  061C                     	;# 
   622  061C                     	;# 
   623  0691                     	;# 
   624  0692                     	;# 
   625  0693                     	;# 
   626  0694                     	;# 
   627  0695                     	;# 
   628  0F0F                     	;# 
   629  0F10                     	;# 
   630  0F11                     	;# 
   631  0F12                     	;# 
   632  0F13                     	;# 
   633  0F14                     	;# 
   634  0F15                     	;# 
   635  0F16                     	;# 
   636  0F17                     	;# 
   637  0F18                     	;# 
   638  0F19                     	;# 
   639  0F1A                     	;# 
   640  0F1B                     	;# 
   641  0F1C                     	;# 
   642  0F1D                     	;# 
   643  0F1E                     	;# 
   644  0F1F                     	;# 
   645  0FE3                     	;# 
   646  0FE4                     	;# 
   647  0FE5                     	;# 
   648  0FE6                     	;# 
   649  0FE7                     	;# 
   650  0FE8                     	;# 
   651  0FE9                     	;# 
   652  0FEA                     	;# 
   653  0FEB                     	;# 
   654  0FED                     	;# 
   655  0FEE                     	;# 
   656  0FEF                     	;# 
   657  0000                     	;# 
   658  0001                     	;# 
   659  0002                     	;# 
   660  0003                     	;# 
   661  0004                     	;# 
   662  0005                     	;# 
   663  0006                     	;# 
   664  0007                     	;# 
   665  0008                     	;# 
   666  0009                     	;# 
   667  000A                     	;# 
   668  000B                     	;# 
   669  000C                     	;# 
   670  000E                     	;# 
   671  0011                     	;# 
   672  0012                     	;# 
   673  0013                     	;# 
   674  0015                     	;# 
   675  0016                     	;# 
   676  0016                     	;# 
   677  0017                     	;# 
   678  0018                     	;# 
   679  0019                     	;# 
   680  001A                     	;# 
   681  001B                     	;# 
   682  001C                     	;# 
   683  008C                     	;# 
   684  008E                     	;# 
   685  0091                     	;# 
   686  0092                     	;# 
   687  0093                     	;# 
   688  0095                     	;# 
   689  0096                     	;# 
   690  0097                     	;# 
   691  0099                     	;# 
   692  009A                     	;# 
   693  009B                     	;# 
   694  009B                     	;# 
   695  009C                     	;# 
   696  009D                     	;# 
   697  009E                     	;# 
   698  009F                     	;# 
   699  010C                     	;# 
   700  010E                     	;# 
   701  0111                     	;# 
   702  0112                     	;# 
   703  0113                     	;# 
   704  0114                     	;# 
   705  0115                     	;# 
   706  0116                     	;# 
   707  0117                     	;# 
   708  0118                     	;# 
   709  0119                     	;# 
   710  011D                     	;# 
   711  018C                     	;# 
   712  018E                     	;# 
   713  0191                     	;# 
   714  0191                     	;# 
   715  0192                     	;# 
   716  0193                     	;# 
   717  0193                     	;# 
   718  0194                     	;# 
   719  0195                     	;# 
   720  0196                     	;# 
   721  020C                     	;# 
   722  0211                     	;# 
   723  0211                     	;# 
   724  0212                     	;# 
   725  0212                     	;# 
   726  0213                     	;# 
   727  0213                     	;# 
   728  0214                     	;# 
   729  0214                     	;# 
   730  0215                     	;# 
   731  0215                     	;# 
   732  0215                     	;# 
   733  0216                     	;# 
   734  0216                     	;# 
   735  0217                     	;# 
   736  0217                     	;# 
   737  0391                     	;# 
   738  0392                     	;# 
   739  0393                     	;# 
   740  0498                     	;# 
   741  0498                     	;# 
   742  0499                     	;# 
   743  049A                     	;# 
   744  049B                     	;# 
   745  049B                     	;# 
   746  049C                     	;# 
   747  049D                     	;# 
   748  049E                     	;# 
   749  049F                     	;# 
   750  0611                     	;# 
   751  0612                     	;# 
   752  0613                     	;# 
   753  0613                     	;# 
   754  0614                     	;# 
   755  0615                     	;# 
   756  0616                     	;# 
   757  0616                     	;# 
   758  0617                     	;# 
   759  0618                     	;# 
   760  0619                     	;# 
   761  0619                     	;# 
   762  061A                     	;# 
   763  061B                     	;# 
   764  061C                     	;# 
   765  061C                     	;# 
   766  0691                     	;# 
   767  0692                     	;# 
   768  0693                     	;# 
   769  0694                     	;# 
   770  0695                     	;# 
   771  0F0F                     	;# 
   772  0F10                     	;# 
   773  0F11                     	;# 
   774  0F12                     	;# 
   775  0F13                     	;# 
   776  0F14                     	;# 
   777  0F15                     	;# 
   778  0F16                     	;# 
   779  0F17                     	;# 
   780  0F18                     	;# 
   781  0F19                     	;# 
   782  0F1A                     	;# 
   783  0F1B                     	;# 
   784  0F1C                     	;# 
   785  0F1D                     	;# 
   786  0F1E                     	;# 
   787  0F1F                     	;# 
   788  0FE3                     	;# 
   789  0FE4                     	;# 
   790  0FE5                     	;# 
   791  0FE6                     	;# 
   792  0FE7                     	;# 
   793  0FE8                     	;# 
   794  0FE9                     	;# 
   795  0FEA                     	;# 
   796  0FEB                     	;# 
   797  0FED                     	;# 
   798  0FEE                     	;# 
   799  0FEF                     	;# 
   800                           
   801                           	psect	idataBANK0
   802  0660                     __pidataBANK0:	
   803                           
   804                           ;initializer for _mode
   805  0660  340A               	retlw	10
   806                           
   807                           ;initializer for _nextMode
   808  0661  340A               	retlw	10
   809  07E0                     _NVMEM_absaddr	set	2016
   810                           
   811                           	psect	stringtext1
   812  0644                     __pstringtext1:	
   813  0644                     _n_ADDRESS_P0:	
   814  0644  34AD               	retlw	173
   815  0645  3487               	retlw	135
   816  0646  3466               	retlw	102
   817  0647  34BC               	retlw	188
   818  0648  34BB               	retlw	187
   819  0649                     __end_of_n_ADDRESS_P0:	
   820                           
   821                           	psect	stringtext2
   822  0662                     __pstringtext2:	
   823  0662                     _n_ADDRESS_MUL:	
   824  0662  3421               	retlw	33
   825  0663                     __end_of_n_ADDRESS_MUL:	
   826  07E0                     _NVMEM_absaddr	set	2016
   827                           
   828                           	psect	_NVMEM_text
   829  07E0                     __p_NVMEM_text:	
   830  07E0                     _NVMEM:	
   831  07E0  3455               	retlw	85
   832  07E1  346E               	retlw	110
   833  07E2  3463               	retlw	99
   834  07E3  346F               	retlw	111
   835  07E4  346E               	retlw	110
   836  07E5  3466               	retlw	102
   837  07E6  3469               	retlw	105
   838  07E7  3467               	retlw	103
   839  07E8  3475               	retlw	117
   840  07E9  3472               	retlw	114
   841  07EA  3465               	retlw	101
   842  07EB  3464               	retlw	100
   843  07EC  3400               	retlw	0
   844  07ED  3400               	retlw	0
   845  07EE  3400               	retlw	0
   846  07EF  3400               	retlw	0
   847  07F0  3400               	retlw	0
   848  07F1  3400               	retlw	0
   849  07F2  3400               	retlw	0
   850  07F3  3400               	retlw	0
   851  07F4  3400               	retlw	0
   852  07F5  3400               	retlw	0
   853  07F6  3400               	retlw	0
   854  07F7  3400               	retlw	0
   855  07F8  3400               	retlw	0
   856  07F9  3400               	retlw	0
   857  07FA  3400               	retlw	0
   858  07FB  3400               	retlw	0
   859  07FC  3400               	retlw	0
   860  07FD  3400               	retlw	0
   861  07FE  3400               	retlw	0
   862  07FF  3400               	retlw	0
   863  0800                     __end_of_NVMEM:	
   864  0003                     _STATUSbits	set	3
   865  000C                     _PORTAbits	set	12
   866  000B                     _INTCONbits	set	11
   867  0097                     _WDTCONbits	set	151
   868  009E                     _ADCON1bits	set	158
   869  0095                     _OPTION_REGbits	set	149
   870  0099                     _OSCCONbits	set	153
   871  009C                     _ADRESH	set	156
   872  009B                     _ADRESL	set	155
   873  009D                     _ADCON0bits	set	157
   874  008E                     _TRISCbits	set	142
   875  008C                     _TRISAbits	set	140
   876  0117                     _FVRCONbits	set	279
   877  018E                     _ANSELCbits	set	398
   878  018C                     _ANSELAbits	set	396
   879  018E                     _ANSELC	set	398
   880  018C                     _ANSELA	set	396
   881  0194                     _PMDATH	set	404
   882  0193                     _PMDATL	set	403
   883  0196                     _PMCON2	set	406
   884  0195                     _PMCON1bits	set	405
   885  0192                     _PMADRH	set	402
   886  0191                     _PMADRL	set	401
   887  0195                     _PMCON1	set	405
   888  020C                     _WPUAbits	set	524
   889  0211                     _SSP1BUF	set	529
   890  0214                     _SSP1STATbits	set	532
   891  0215                     _SSPCON1bits	set	533
   892                           
   893                           	psect	stringtext3
   894  0632                     __pstringtext3:	
   895  0632                     STR_5:	
   896  0632  3441               	retlw	65	;'A'
   897  0633  3444               	retlw	68	;'D'
   898  0634  3443               	retlw	67	;'C'
   899  0635  3433               	retlw	51	;'3'
   900  0636  3431               	retlw	49	;'1'
   901  0637  3400               	retlw	0
   902                           
   903                           	psect	stringtext4
   904  0638                     __pstringtext4:	
   905  0638                     STR_4:	
   906  0638  3441               	retlw	65	;'A'
   907  0639  3444               	retlw	68	;'D'
   908  063A  3443               	retlw	67	;'C'
   909  063B  3432               	retlw	50	;'2'
   910  063C  3439               	retlw	57	;'9'
   911  063D  3400               	retlw	0
   912                           
   913                           	psect	stringtext5
   914  0649                     __pstringtext5:	
   915  0649                     STR_2:	
   916  0649  3441               	retlw	65	;'A'
   917  064A  3444               	retlw	68	;'D'
   918  064B  3443               	retlw	67	;'C'
   919  064C  3433               	retlw	51	;'3'
   920  064D  3400               	retlw	0
   921                           
   922                           	psect	stringtext6
   923  064E                     __pstringtext6:	
   924  064E                     STR_3:	
   925  064E  3441               	retlw	65	;'A'
   926  064F  3444               	retlw	68	;'D'
   927  0650  3443               	retlw	67	;'C'
   928  0651  3437               	retlw	55	;'7'
   929  0652  3400               	retlw	0
   930                           
   931                           	psect	stringtext7
   932  0653                     __pstringtext7:	
   933  0653                     STR_6:	
   934  0653  3442               	retlw	66	;'B'
   935  0654  344F               	retlw	79	;'O'
   936  0655  344F               	retlw	79	;'O'
   937  0656  3454               	retlw	84	;'T'
   938  0657  3400               	retlw	0
   939                           
   940                           	psect	stringtext8
   941  0658                     __pstringtext8:	
   942  0658                     STR_7:	
   943  0658  3441               	retlw	65	;'A'
   944  0659  3443               	retlw	67	;'C'
   945  065A  344B               	retlw	75	;'K'
   946  065B  3400               	retlw	0
   947                           
   948                           	psect	stringtext9
   949  065C                     __pstringtext9:	
   950  065C                     STR_1:	
   951  065C  3444               	retlw	68	;'D'
   952  065D  3442               	retlw	66	;'B'
   953  065E  3447               	retlw	71	;'G'
   954  065F  3400               	retlw	0
   955                           
   956                           	psect	stringtext10
   957  0000                     __pstringtext10:	
   958                           
   959                           ; #config settings
   960  0000                     
   961                           	psect	cinit
   962  0013                     start_initialization:	
   963  0013                     __initialization:	
   964                           
   965                           ; Initialize objects allocated to BANK0
   966  0013  2660               	fcall	__pidataBANK0	;fetch initializer
   967  0014  00E8               	movwf	__pdataBANK0& (0+127)
   968  0015  2661               	fcall	__pidataBANK0+1	;fetch initializer
   969  0016  00E9               	movwf	(__pdataBANK0+1)& (0+127)
   970                           
   971                           ; Clear objects allocated to BANK0
   972  0017  304C               	movlw	low __pbssBANK0
   973  0018  0084               	movwf	4
   974  0019  3000               	movlw	high __pbssBANK0
   975  001A  0085               	movwf	5
   976  001B  301C               	movlw	28
   977  001C  263E               	fcall	clear_ram0
   978                           
   979                           ; Clear objects allocated to BANK1
   980  001D  30A0               	movlw	low __pbssBANK1
   981  001E  0084               	movwf	4
   982  001F  3000               	movlw	high __pbssBANK1
   983  0020  0085               	movwf	5
   984  0021  3018               	movlw	24
   985  0022  263E               	fcall	clear_ram0
   986  0023                     end_of_initialization:	
   987                           ;End of C runtime variable initialization code
   988                           
   989  0023                     __end_of__initialization:	
   990  0023  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   991  0024  0020               	movlb	0
   992  0025  2B36               	ljmp	_main	;jump to C main() function
   993                           
   994                           	psect	bssBANK0
   995  004C                     __pbssBANK0:	
   996  004C                     _counter:	
   997  004C                     	ds	2
   998  004E                     _sleepLoop:	
   999  004E                     	ds	1
  1000  004F                     _nrf24l01:	
  1001  004F                     	ds	1
  1002  0050                     _nrf24l01RXTopic:	
  1003  0050                     	ds	8
  1004  0058                     _nrf24l01TXValue:	
  1005  0058                     	ds	8
  1006  0060                     _nrf24l01TXTopic:	
  1007  0060                     	ds	8
  1008                           
  1009                           	psect	dataBANK0
  1010  0068                     __pdataBANK0:	
  1011  0068                     _mode:	
  1012  0068                     	ds	1
  1013  0069                     _nextMode:	
  1014  0069                     	ds	1
  1015                           
  1016                           	psect	bssBANK1
  1017  00A0                     __pbssBANK1:	
  1018  00A0                     _nrf24l01Name:	
  1019  00A0                     	ds	16
  1020  00B0                     _nrf24l01RXValue:	
  1021  00B0                     	ds	8
  1022                           
  1023                           	psect	clrtext
  1024  063E                     clear_ram0:	
  1025                           ;	Called with FSR0 containing the base address, and
  1026                           ;	WREG with the size to clear
  1027                           
  1028  063E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1029  063F                     clrloop0:	
  1030  063F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1031  0640  3101               	addfsr 0,1
  1032  0641  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1033  0642  2E3F               	goto	clrloop0	;have we reached the end yet?
  1034  0643  3400               	retlw	0	;all done for this memory range, return
  1035                           
  1036                           	psect	cstackCOMMON
  1037  0070                     __pcstackCOMMON:	
  1038  0070                     ?_nrf24l01ISR:	
  1039  0070                     ?_nrf24l01SetRXMode:	
  1040                           ; 1 bytes @ 0x0
  1041                           
  1042  0070                     ?_nrf24l01SendString:	
  1043                           ; 1 bytes @ 0x0
  1044                           
  1045  0070                     ?_nrf24l01Init:	
  1046                           ; 1 bytes @ 0x0
  1047                           
  1048  0070                     ?_nrf24l01InterfaceInit:	
  1049                           ; 1 bytes @ 0x0
  1050                           
  1051  0070                     ?_nrf24l01SPISend:	
  1052                           ; 1 bytes @ 0x0
  1053                           
  1054  0070                     ??_nrf24l01SPISend:	
  1055                           ; 1 bytes @ 0x0
  1056                           
  1057  0070                     ?_nrf24l01SPIStart:	
  1058                           ; 1 bytes @ 0x0
  1059                           
  1060  0070                     ??_nrf24l01SPIStart:	
  1061                           ; 1 bytes @ 0x0
  1062                           
  1063  0070                     ?_nrf24l01SPIEnd:	
  1064                           ; 1 bytes @ 0x0
  1065                           
  1066  0070                     ??_nrf24l01SPIEnd:	
  1067                           ; 1 bytes @ 0x0
  1068                           
  1069  0070                     ?_enableInterrupts:	
  1070                           ; 1 bytes @ 0x0
  1071                           
  1072  0070                     ??_enableInterrupts:	
  1073                           ; 1 bytes @ 0x0
  1074                           
  1075  0070                     ?_ISR:	
  1076                           ; 1 bytes @ 0x0
  1077                           
  1078  0070                     ?_sleep:	
  1079                           ; 1 bytes @ 0x0
  1080                           
  1081  0070                     ?_checkRxData:	
  1082                           ; 1 bytes @ 0x0
  1083                           
  1084  0070                     ?_loop:	
  1085                           ; 1 bytes @ 0x0
  1086                           
  1087  0070                     ?_main:	
  1088                           ; 1 bytes @ 0x0
  1089                           
  1090  0070                     ?_nrf24l01HandleRX:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0070                     ?_nrf24l01InitRegisters:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096  0070                     ?_strcmp:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099  0070                     nrf24l01SPISend@data:	
  1100                           ; 2 bytes @ 0x0
  1101                           
  1102  0070                     enableInterrupts@enable:	
  1103                           ; 1 bytes @ 0x0
  1104                           
  1105  0070                     strcmp@s2:	
  1106                           ; 1 bytes @ 0x0
  1107                           
  1108                           
  1109                           ; 2 bytes @ 0x0
  1110  0070                     	ds	1
  1111  0071                     ??_nrf24l01Send:	
  1112                           
  1113                           ; 1 bytes @ 0x1
  1114  0071                     	ds	1
  1115  0072                     ??_strcmp:	
  1116  0072                     nrf24l01Send@command:	
  1117                           ; 1 bytes @ 0x2
  1118                           
  1119                           
  1120                           ; 1 bytes @ 0x2
  1121  0072                     	ds	1
  1122  0073                     ??_nrf24l01SetRXMode:	
  1123  0073                     strcmp@r:	
  1124                           ; 1 bytes @ 0x3
  1125                           
  1126                           
  1127                           ; 1 bytes @ 0x3
  1128  0073                     	ds	1
  1129  0074                     nrf24l01SetRXMode@rxMode:	
  1130  0074                     strcmp@s1:	
  1131                           ; 1 bytes @ 0x4
  1132                           
  1133                           
  1134                           ; 1 bytes @ 0x4
  1135  0074                     	ds	1
  1136  0075                     nrf24l01SetRXMode@config:	
  1137                           
  1138                           ; 1 bytes @ 0x5
  1139  0075                     	ds	1
  1140  0076                     ??_nrf24l01HandleRX:	
  1141                           
  1142                           ; 1 bytes @ 0x6
  1143  0076                     	ds	3
  1144  0079                     nrf24l01HandleRX@width:	
  1145                           
  1146                           ; 1 bytes @ 0x9
  1147  0079                     	ds	1
  1148  007A                     nrf24l01HandleRX@offset:	
  1149                           
  1150                           ; 1 bytes @ 0xA
  1151  007A                     	ds	1
  1152  007B                     nrf24l01HandleRX@byte:	
  1153                           
  1154                           ; 1 bytes @ 0xB
  1155  007B                     	ds	1
  1156  007C                     nrf24l01HandleRX@i:	
  1157                           
  1158                           ; 1 bytes @ 0xC
  1159  007C                     	ds	1
  1160  007D                     ??_nrf24l01ISR:	
  1161                           
  1162                           ; 1 bytes @ 0xD
  1163  007D                     	ds	1
  1164                           
  1165                           	psect	cstackBANK0
  1166  0020                     __pcstackBANK0:	
  1167  0020                     ?_nrf24l01Send:	
  1168  0020                     nrf24l01Send@data:	
  1169                           ; 1 bytes @ 0x0
  1170                           
  1171                           
  1172                           ; 1 bytes @ 0x0
  1173  0020                     	ds	1
  1174  0021                     nrf24l01ISR@status:	
  1175                           
  1176                           ; 1 bytes @ 0x1
  1177  0021                     	ds	1
  1178  0022                     ??_ISR:	
  1179                           
  1180                           ; 1 bytes @ 0x2
  1181  0022                     	ds	1
  1182  0023                     ?_strcpy:	
  1183  0023                     ??_nrf24l01SendString:	
  1184                           ; 1 bytes @ 0x3
  1185                           
  1186  0023                     ??_nrf24l01InterfaceInit:	
  1187                           ; 1 bytes @ 0x3
  1188                           
  1189  0023                     ??_sleep:	
  1190                           ; 1 bytes @ 0x3
  1191                           
  1192  0023                     ??_checkRxData:	
  1193                           ; 1 bytes @ 0x3
  1194                           
  1195  0023                     ??_nrf24l01InitRegisters:	
  1196                           ; 1 bytes @ 0x3
  1197                           
  1198  0023                     ?_read_flashmem:	
  1199                           ; 1 bytes @ 0x3
  1200                           
  1201  0023                     ?___lwdiv:	
  1202                           ; 2 bytes @ 0x3
  1203                           
  1204  0023                     ?___lwmod:	
  1205                           ; 2 bytes @ 0x3
  1206                           
  1207  0023                     ?___lmul:	
  1208                           ; 2 bytes @ 0x3
  1209                           
  1210  0023                     ?___lldiv:	
  1211                           ; 4 bytes @ 0x3
  1212                           
  1213  0023                     read_flashmem@offset:	
  1214                           ; 4 bytes @ 0x3
  1215                           
  1216  0023                     ___lwdiv@divisor:	
  1217                           ; 2 bytes @ 0x3
  1218                           
  1219  0023                     ___lwmod@divisor:	
  1220                           ; 2 bytes @ 0x3
  1221                           
  1222  0023                     strcpy@from:	
  1223                           ; 2 bytes @ 0x3
  1224                           
  1225  0023                     ___lmul@multiplier:	
  1226                           ; 2 bytes @ 0x3
  1227                           
  1228  0023                     ___lldiv@divisor:	
  1229                           ; 4 bytes @ 0x3
  1230                           
  1231                           
  1232                           ; 4 bytes @ 0x3
  1233  0023                     	ds	1
  1234  0024                     nrf24l01SendString@waitForAck:	
  1235  0024                     nrf24l01InitRegisters@setupAW:	
  1236                           ; 1 bytes @ 0x4
  1237                           
  1238                           
  1239                           ; 1 bytes @ 0x4
  1240  0024                     	ds	1
  1241  0025                     ??_strcpy:	
  1242  0025                     ??_read_flashmem:	
  1243                           ; 1 bytes @ 0x5
  1244                           
  1245  0025                     nrf24l01SendString@i:	
  1246                           ; 1 bytes @ 0x5
  1247                           
  1248  0025                     nrf24l01InitRegisters@rfSetup:	
  1249                           ; 1 bytes @ 0x5
  1250                           
  1251  0025                     ___lwdiv@dividend:	
  1252                           ; 1 bytes @ 0x5
  1253                           
  1254  0025                     ___lwmod@dividend:	
  1255                           ; 2 bytes @ 0x5
  1256                           
  1257                           
  1258                           ; 2 bytes @ 0x5
  1259  0025                     	ds	1
  1260  0026                     nrf24l01InitRegisters@feature:	
  1261  0026                     strcpy@cp:	
  1262                           ; 1 bytes @ 0x6
  1263                           
  1264                           
  1265                           ; 1 bytes @ 0x6
  1266  0026                     	ds	1
  1267  0027                     ??___lwdiv:	
  1268  0027                     ??___lwmod:	
  1269                           ; 1 bytes @ 0x7
  1270                           
  1271  0027                     nrf24l01InitRegisters@status:	
  1272                           ; 1 bytes @ 0x7
  1273                           
  1274  0027                     strcpy@to:	
  1275                           ; 1 bytes @ 0x7
  1276                           
  1277  0027                     ___lmul@multiplicand:	
  1278                           ; 1 bytes @ 0x7
  1279                           
  1280  0027                     ___lldiv@dividend:	
  1281                           ; 4 bytes @ 0x7
  1282                           
  1283                           
  1284                           ; 4 bytes @ 0x7
  1285  0027                     	ds	1
  1286  0028                     nrf24l01InitRegisters@enRXAddr:	
  1287  0028                     ___lwmod@counter:	
  1288                           ; 1 bytes @ 0x8
  1289                           
  1290  0028                     read_flashmem@result:	
  1291                           ; 1 bytes @ 0x8
  1292                           
  1293  0028                     ___lwdiv@quotient:	
  1294                           ; 2 bytes @ 0x8
  1295                           
  1296                           
  1297                           ; 2 bytes @ 0x8
  1298  0028                     	ds	1
  1299  0029                     nrf24l01InitRegisters@enAA:	
  1300                           
  1301                           ; 1 bytes @ 0x9
  1302  0029                     	ds	1
  1303  002A                     nrf24l01InitRegisters@DynPD:	
  1304  002A                     ___lwdiv@counter:	
  1305                           ; 1 bytes @ 0xA
  1306                           
  1307  002A                     read_flashmem@address:	
  1308                           ; 1 bytes @ 0xA
  1309                           
  1310                           
  1311                           ; 2 bytes @ 0xA
  1312  002A                     	ds	1
  1313  002B                     ??___lmul:	
  1314  002B                     ??___lldiv:	
  1315                           ; 1 bytes @ 0xB
  1316                           
  1317  002B                     nrf24l01InitRegisters@config:	
  1318                           ; 1 bytes @ 0xB
  1319                           
  1320  002B                     ___lmul@product:	
  1321                           ; 1 bytes @ 0xB
  1322                           
  1323                           
  1324                           ; 4 bytes @ 0xB
  1325  002B                     	ds	1
  1326  002C                     ??_nrf24l01Init:	
  1327  002C                     ___lldiv@quotient:	
  1328                           ; 1 bytes @ 0xC
  1329                           
  1330                           
  1331                           ; 4 bytes @ 0xC
  1332  002C                     	ds	4
  1333  0030                     ___lldiv@counter:	
  1334                           
  1335                           ; 1 bytes @ 0x10
  1336  0030                     	ds	1
  1337  0031                     ?_getADCValue:	
  1338  0031                     getADCValue@divider:	
  1339                           ; 4 bytes @ 0x11
  1340                           
  1341                           
  1342                           ; 4 bytes @ 0x11
  1343  0031                     	ds	4
  1344  0035                     ??_getADCValue:	
  1345                           
  1346                           ; 1 bytes @ 0x15
  1347  0035                     	ds	4
  1348  0039                     getADCValue@channel:	
  1349                           
  1350                           ; 1 bytes @ 0x19
  1351  0039                     	ds	1
  1352  003A                     getADCValue@adcLoop:	
  1353                           
  1354                           ; 1 bytes @ 0x1A
  1355  003A                     	ds	1
  1356  003B                     getADCValue@adcSum:	
  1357                           
  1358                           ; 4 bytes @ 0x1B
  1359  003B                     	ds	4
  1360  003F                     ?_utoa:	
  1361  003F                     utoa@val:	
  1362                           ; 1 bytes @ 0x1F
  1363                           
  1364                           
  1365                           ; 2 bytes @ 0x1F
  1366  003F                     	ds	2
  1367  0041                     utoa@base:	
  1368                           
  1369                           ; 2 bytes @ 0x21
  1370  0041                     	ds	2
  1371  0043                     ??_utoa:	
  1372                           
  1373                           ; 1 bytes @ 0x23
  1374  0043                     	ds	1
  1375  0044                     utoa@v:	
  1376                           
  1377                           ; 2 bytes @ 0x24
  1378  0044                     	ds	2
  1379  0046                     utoa@c:	
  1380                           
  1381                           ; 1 bytes @ 0x26
  1382  0046                     	ds	1
  1383  0047                     utoa@buf:	
  1384                           
  1385                           ; 1 bytes @ 0x27
  1386  0047                     	ds	1
  1387  0048                     ??_loop:	
  1388  0048                     ??_main:	
  1389                           ; 1 bytes @ 0x28
  1390                           
  1391                           
  1392                           ; 1 bytes @ 0x28
  1393  0048                     	ds	3
  1394  004B                     main@i:	
  1395                           
  1396                           ; 1 bytes @ 0x2B
  1397  004B                     	ds	1
  1398                           
  1399                           	psect	maintext
  1400  0336                     __pmaintext:	
  1401 ;;
  1402 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1403 ;;
  1404 ;; *************** function _main *****************
  1405 ;; Defined at:
  1406 ;;		line 124 in file "main.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;		None
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  i               1   43[BANK0 ] unsigned char 
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1415 ;; Tracked objects:
  1416 ;;		On entry : B1F/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMMON   BANK0   BANK1
  1420 ;;      Params:         0       0       0
  1421 ;;      Locals:         0       1       0
  1422 ;;      Temps:          0       3       0
  1423 ;;      Totals:         0       4       0
  1424 ;;Total ram usage:        4 bytes
  1425 ;; Hardware stack levels required when called:   11
  1426 ;; This function calls:
  1427 ;;		_loop
  1428 ;;		_nrf24l01Init
  1429 ;;		_nrf24l01SendString
  1430 ;;		_read_flashmem
  1431 ;;		_sleep
  1432 ;;		_strcpy
  1433 ;;		_utoa
  1434 ;; This function is called by:
  1435 ;;		Startup code after reset
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           
  1439                           
  1440                           ;psect for function _main
  1441  0336                     _main:	
  1442                           
  1443                           ;main.c: 127: ANSELA = 0x00;
  1444                           
  1445                           ;incstack = 0
  1446                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1447  0336  0023               	movlb	3	; select bank3
  1448  0337  018C               	clrf	12	;volatile
  1449                           
  1450                           ;main.c: 128: ANSELC = 0x00;
  1451  0338  018E               	clrf	14	;volatile
  1452                           
  1453                           ;main.c: 134: INTCONbits.PEIE = 0;
  1454  0339  130B               	bcf	11,6	;volatile
  1455                           
  1456                           ;main.c: 135: INTCONbits.GIE = 0;
  1457  033A  138B               	bcf	11,7	;volatile
  1458                           
  1459                           ;main.c: 137: OSCCONbits.IRCF = 0b1111;
  1460  033B  3078               	movlw	120
  1461  033C  0021               	movlb	1	; select bank1
  1462  033D  0499               	iorwf	25,f	;volatile
  1463                           
  1464                           ;main.c: 138: OSCCONbits.SCS = 0b10;
  1465  033E  0819               	movf	25,w	;volatile
  1466  033F  39FC               	andlw	-4
  1467  0340  3802               	iorlw	2
  1468  0341  0099               	movwf	25	;volatile
  1469                           
  1470                           ;main.c: 140: _delay((unsigned long)((10)*(16000000/4000.0)));
  1471  0342  3034               	movlw	52
  1472  0343  0020               	movlb	0	; select bank0
  1473  0344  00C8               	movwf	??_main
  1474  0345  30F1               	movlw	241
  1475  0346                     u1537:	
  1476  0346  0B89               	decfsz	9,f
  1477  0347  2B46               	goto	u1537
  1478  0348  0BC8               	decfsz	??_main,f
  1479  0349  2B46               	goto	u1537
  1480  034A  3200               	nop2
  1481                           
  1482                           ;main.c: 142: nrf24l01Init();
  1483  034B  25C7               	fcall	_nrf24l01Init
  1484                           
  1485                           ;main.c: 144: for (unsigned char i = 0; i < sizeof(nrf24l01Name); i++){
  1486  034C  0020               	movlb	0	; select bank0
  1487  034D  01CB               	clrf	main@i
  1488  034E  3010               	movlw	16
  1489  034F  024B               	subwf	main@i,w
  1490  0350  1803               	btfsc	3,0
  1491  0351  2B6B               	goto	l177
  1492  0352                     l2013:	
  1493                           
  1494                           ;main.c: 145: nrf24l01Name[i] = read_flashmem((unsigned) 0 + i);
  1495  0352  084B               	movf	main@i,w
  1496  0353  00C8               	movwf	??_main
  1497  0354  01C9               	clrf	??_main+1
  1498  0355  0848               	movf	??_main,w
  1499  0356  00A3               	movwf	read_flashmem@offset
  1500  0357  0849               	movf	??_main+1,w
  1501  0358  00A4               	movwf	read_flashmem@offset+1
  1502  0359  24D2               	fcall	_read_flashmem
  1503  035A  0020               	movlb	0	; select bank0
  1504  035B  0823               	movf	?_read_flashmem,w
  1505  035C  00CA               	movwf	??_main+2
  1506  035D  084B               	movf	main@i,w
  1507  035E  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  1508  035F  0086               	movwf	6
  1509  0360  0187               	clrf	7
  1510  0361  084A               	movf	??_main+2,w
  1511  0362  0081               	movwf	1
  1512  0363  3001               	movlw	1
  1513  0364  00C8               	movwf	??_main
  1514  0365  0848               	movf	??_main,w
  1515  0366  07CB               	addwf	main@i,f
  1516  0367  3010               	movlw	16
  1517  0368  024B               	subwf	main@i,w
  1518  0369  1C03               	skipc
  1519  036A  2B52               	goto	l2013
  1520  036B                     l177:	
  1521                           
  1522                           ;main.c: 146: }
  1523                           ;main.c: 148: OPTION_REGbits.nWPUEN = 0;
  1524  036B  0021               	movlb	1	; select bank1
  1525  036C  1395               	bcf	21,7	;volatile
  1526                           
  1527                           ;main.c: 151: FVRCONbits.FVREN = 0;
  1528  036D  0022               	movlb	2	; select bank2
  1529  036E  1397               	bcf	23,7	;volatile
  1530                           
  1531                           ;main.c: 152: FVRCONbits.ADFVR = 1;
  1532  036F  0817               	movf	23,w	;volatile
  1533  0370  39FC               	andlw	-4
  1534  0371  3801               	iorlw	1
  1535  0372  0097               	movwf	23	;volatile
  1536                           
  1537                           ;main.c: 153: FVRCONbits.FVREN = 1;
  1538  0373  1797               	bsf	23,7	;volatile
  1539                           
  1540                           ;main.c: 156: FVRCONbits.TSEN = 0;
  1541  0374  1297               	bcf	23,5	;volatile
  1542                           
  1543                           ;main.c: 157: FVRCONbits.TSRNG = 0;
  1544  0375  1217               	bcf	23,4	;volatile
  1545                           
  1546                           ;main.c: 158: FVRCONbits.TSEN = 1;
  1547  0376  1697               	bsf	23,5	;volatile
  1548                           
  1549                           ;main.c: 161: ADCON0bits.ADON = 0;
  1550  0377  0021               	movlb	1	; select bank1
  1551  0378  101D               	bcf	29,0	;volatile
  1552                           
  1553                           ;main.c: 163: ANSELAbits.ANSA4 = 1;
  1554  0379  0023               	movlb	3	; select bank3
  1555  037A  160C               	bsf	12,4	;volatile
  1556                           
  1557                           ;main.c: 164: TRISAbits.TRISA4 = 1;
  1558  037B  0021               	movlb	1	; select bank1
  1559  037C  160C               	bsf	12,4	;volatile
  1560                           
  1561                           ;main.c: 165: WPUAbits.WPUA4 = 0;
  1562  037D  0024               	movlb	4	; select bank4
  1563  037E  120C               	bcf	12,4	;volatile
  1564                           
  1565                           ;main.c: 167: ANSELCbits.ANSC3 = 1;
  1566  037F  0023               	movlb	3	; select bank3
  1567  0380  158E               	bsf	14,3	;volatile
  1568                           
  1569                           ;main.c: 168: TRISCbits.TRISC3 = 1;
  1570  0381  0021               	movlb	1	; select bank1
  1571  0382  158E               	bsf	14,3	;volatile
  1572                           
  1573                           ;main.c: 170: ADCON1bits.ADCS = 0b111;
  1574  0383  3070               	movlw	112
  1575  0384  049E               	iorwf	30,f	;volatile
  1576                           
  1577                           ;main.c: 171: ADCON1bits.ADFM = 1;
  1578  0385  179E               	bsf	30,7	;volatile
  1579                           
  1580                           ;main.c: 172: ADCON1bits.ADPREF = 0b00;
  1581  0386  30FC               	movlw	-4
  1582  0387  059E               	andwf	30,f	;volatile
  1583                           
  1584                           ;main.c: 174: ADCON0bits.CHS = 3;
  1585  0388  081D               	movf	29,w	;volatile
  1586  0389  3983               	andlw	-125
  1587  038A  380C               	iorlw	12
  1588  038B  009D               	movwf	29	;volatile
  1589                           
  1590                           ;main.c: 175: ADCON0bits.ADON = 1;
  1591  038C  141D               	bsf	29,0	;volatile
  1592                           
  1593                           ;main.c: 179: TRISAbits.TRISA2 = 1;
  1594  038D  150C               	bsf	12,2	;volatile
  1595                           
  1596                           ;main.c: 180: INTCONbits.INTE = 1;
  1597  038E  160B               	bsf	11,4	;volatile
  1598                           
  1599                           ;main.c: 181: OPTION_REGbits.INTEDG = 0;
  1600  038F  1315               	bcf	21,6	;volatile
  1601                           
  1602                           ;main.c: 185: WDTCONbits.WDTPS = 11;
  1603  0390  0817               	movf	23,w	;volatile
  1604  0391  39C1               	andlw	-63
  1605  0392  3816               	iorlw	22
  1606  0393  0097               	movwf	23	;volatile
  1607                           
  1608                           ;main.c: 188: TRISAbits.TRISA5 = 0;
  1609  0394  128C               	bcf	12,5	;volatile
  1610                           
  1611                           ;main.c: 189: PORTAbits.RA5 = 0;
  1612  0395  0020               	movlb	0	; select bank0
  1613  0396  128C               	bcf	12,5	;volatile
  1614                           
  1615                           ;main.c: 192: INTCONbits.PEIE = 1;
  1616  0397  170B               	bsf	11,6	;volatile
  1617                           
  1618                           ;main.c: 193: INTCONbits.GIE = 1;
  1619  0398  178B               	bsf	11,7	;volatile
  1620                           
  1621                           ;main.c: 195: strcpy(nrf24l01TXTopic, "BOOT");
  1622  0399  3053               	movlw	low (STR_6| (0+32768))
  1623  039A  00A3               	movwf	strcpy@from
  1624  039B  3086               	movlw	high (STR_6| (0+32768))
  1625  039C  00A4               	movwf	strcpy@from+1
  1626  039D  3060               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  1627  039E  25AC               	fcall	_strcpy
  1628                           
  1629                           ;main.c: 196: utoa(nrf24l01TXValue, read_flashmem(0 + 16), 10);
  1630  039F  3010               	movlw	16
  1631  03A0  0020               	movlb	0	; select bank0
  1632  03A1  00A3               	movwf	read_flashmem@offset
  1633  03A2  3000               	movlw	0
  1634  03A3  00A4               	movwf	read_flashmem@offset+1
  1635  03A4  24D2               	fcall	_read_flashmem
  1636  03A5  0020               	movlb	0	; select bank0
  1637  03A6  0824               	movf	?_read_flashmem+1,w
  1638  03A7  00C0               	movwf	utoa@val+1
  1639  03A8  0823               	movf	?_read_flashmem,w
  1640  03A9  00BF               	movwf	utoa@val
  1641  03AA  300A               	movlw	10
  1642  03AB  00C1               	movwf	utoa@base
  1643  03AC  3000               	movlw	0
  1644  03AD  00C2               	movwf	utoa@base+1
  1645  03AE  3058               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  1646  03AF  23B5               	fcall	_utoa
  1647                           
  1648                           ;main.c: 197: nrf24l01SendString(0);
  1649  03B0  3000               	movlw	0
  1650  03B1  2227               	fcall	_nrf24l01SendString
  1651                           
  1652                           ;main.c: 198: sleep();
  1653  03B2  2614               	fcall	_sleep
  1654  03B3                     l2067:	
  1655                           ;main.c: 200: while(1){
  1656                           
  1657                           
  1658                           ;main.c: 201: loop();
  1659  03B3  2104               	fcall	_loop
  1660  03B4  2BB3               	goto	l2067
  1661  03B5                     __end_of_main:	
  1662                           ;main.c: 202: }
  1663                           ;main.c: 204: return;
  1664                           
  1665                           
  1666                           	psect	text1
  1667  04D2                     __ptext1:	
  1668 ;; *************** function _read_flashmem *****************
  1669 ;; Defined at:
  1670 ;;		line 59 in file "flash.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;  offset          2    3[BANK0 ] unsigned int 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;  address         2   10[BANK0 ] unsigned int 
  1675 ;;  result          2    8[BANK0 ] unsigned int 
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  2    3[BANK0 ] unsigned int 
  1678 ;; Registers used:
  1679 ;;		wreg, status,2, status,0
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMMON   BANK0   BANK1
  1685 ;;      Params:         0       2       0
  1686 ;;      Locals:         0       4       0
  1687 ;;      Temps:          0       3       0
  1688 ;;      Totals:         0       9       0
  1689 ;;Total ram usage:        9 bytes
  1690 ;; Hardware stack levels used:    1
  1691 ;; Hardware stack levels required when called:    6
  1692 ;; This function calls:
  1693 ;;		Nothing
  1694 ;; This function is called by:
  1695 ;;		_main
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           
  1700                           ;psect for function _read_flashmem
  1701  04D2                     _read_flashmem:	
  1702                           
  1703                           ;flash.c: 61: unsigned int address;
  1704                           ;flash.c: 63: INTCONbits.GIE = 0;
  1705                           
  1706                           ;incstack = 0
  1707                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  1708  04D2  138B               	bcf	11,7	;volatile
  1709                           
  1710                           ;flash.c: 65: PMCON1 = 0x00;
  1711  04D3  0023               	movlb	3	; select bank3
  1712  04D4  0195               	clrf	21	;volatile
  1713                           
  1714                           ;flash.c: 67: address = (0x800U-32) + offset;
  1715  04D5  0020               	movlb	0	; select bank0
  1716  04D6  0823               	movf	read_flashmem@offset,w
  1717  04D7  3EE0               	addlw	224
  1718  04D8  00AA               	movwf	read_flashmem@address
  1719  04D9  3007               	movlw	7
  1720  04DA  3D24               	addwfc	read_flashmem@offset+1,w
  1721  04DB  00AB               	movwf	read_flashmem@address+1
  1722                           
  1723                           ;flash.c: 68: PMADRL = (char) (address >> 0);
  1724  04DC  082A               	movf	read_flashmem@address,w
  1725  04DD  0023               	movlb	3	; select bank3
  1726  04DE  0091               	movwf	17	;volatile
  1727                           
  1728                           ;flash.c: 69: PMADRH = (char) (address >> 8);
  1729  04DF  0020               	movlb	0	; select bank0
  1730  04E0  082B               	movf	read_flashmem@address+1,w
  1731  04E1  0023               	movlb	3	; select bank3
  1732  04E2  0092               	movwf	18	;volatile
  1733                           
  1734                           ;flash.c: 71: PMCON1bits.RD = 1;
  1735  04E3  1415               	bsf	21,0	;volatile
  1736                           
  1737                           ;flash.c: 73: __nop();
  1738  04E4  0000               	nop
  1739                           
  1740                           ;flash.c: 74: __nop();
  1741  04E5  0000               	nop
  1742                           
  1743                           ;flash.c: 76: unsigned int result = 0;
  1744  04E6  0020               	movlb	0	; select bank0
  1745  04E7  01A8               	clrf	read_flashmem@result
  1746  04E8  01A9               	clrf	read_flashmem@result+1
  1747                           
  1748                           ;flash.c: 77: result = PMDATL;
  1749  04E9  0023               	movlb	3	; select bank3
  1750  04EA  0813               	movf	19,w	;volatile
  1751  04EB  0020               	movlb	0	; select bank0
  1752  04EC  00A5               	movwf	??_read_flashmem
  1753  04ED  01A6               	clrf	??_read_flashmem+1
  1754  04EE  0825               	movf	??_read_flashmem,w
  1755  04EF  00A8               	movwf	read_flashmem@result
  1756  04F0  0826               	movf	??_read_flashmem+1,w
  1757  04F1  00A9               	movwf	read_flashmem@result+1
  1758                           
  1759                           ;flash.c: 78: result|= ( (unsigned) (PMDATH) << 8);
  1760  04F2  0023               	movlb	3	; select bank3
  1761  04F3  0814               	movf	20,w	;volatile
  1762  04F4  0020               	movlb	0	; select bank0
  1763  04F5  00A5               	movwf	??_read_flashmem
  1764  04F6  01A6               	clrf	??_read_flashmem+1
  1765  04F7  0825               	movf	??_read_flashmem,w
  1766  04F8  00A6               	movwf	??_read_flashmem+1
  1767  04F9  01A5               	clrf	??_read_flashmem
  1768  04FA  0825               	movf	??_read_flashmem,w
  1769  04FB  04A8               	iorwf	read_flashmem@result,f
  1770  04FC  0826               	movf	??_read_flashmem+1,w
  1771  04FD  04A9               	iorwf	read_flashmem@result+1,f
  1772                           
  1773                           ;flash.c: 80: INTCONbits.GIE = 1;
  1774  04FE  178B               	bsf	11,7	;volatile
  1775                           
  1776                           ;flash.c: 82: return result;
  1777  04FF  0829               	movf	read_flashmem@result+1,w
  1778  0500  00A4               	movwf	?_read_flashmem+1
  1779  0501  0828               	movf	read_flashmem@result,w
  1780  0502  00A3               	movwf	?_read_flashmem
  1781  0503  0008               	return
  1782  0504                     __end_of_read_flashmem:	
  1783                           
  1784                           	psect	text2
  1785  05C7                     __ptext2:	
  1786 ;; *************** function _nrf24l01Init *****************
  1787 ;; Defined at:
  1788 ;;		line 327 in file "nrf24l01.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      void 
  1795 ;; Registers used:
  1796 ;;		wreg, status,2, status,0, pclath, cstack
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMMON   BANK0   BANK1
  1802 ;;      Params:         0       0       0
  1803 ;;      Locals:         0       0       0
  1804 ;;      Temps:          0       1       0
  1805 ;;      Totals:         0       1       0
  1806 ;;Total ram usage:        1 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    9
  1809 ;; This function calls:
  1810 ;;		_nrf24l01InitRegisters
  1811 ;;		_nrf24l01InterfaceInit
  1812 ;; This function is called by:
  1813 ;;		_main
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           
  1818                           ;psect for function _nrf24l01Init
  1819  05C7                     _nrf24l01Init:	
  1820                           
  1821                           ;nrf24l01.c: 330: nrf24l01InterfaceInit();
  1822                           
  1823                           ;incstack = 0
  1824                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1825  05C7  25F0               	fcall	_nrf24l01InterfaceInit
  1826                           
  1827                           ;nrf24l01.c: 334: PORTAbits.RA0 = 0;
  1828  05C8  0020               	movlb	0	; select bank0
  1829  05C9  100C               	bcf	12,0	;volatile
  1830                           
  1831                           ;nrf24l01.c: 336: _delay((unsigned long)((11)*(16000000/4000.0)));
  1832  05CA  303A               	movlw	58
  1833  05CB  0020               	movlb	0	; select bank0
  1834  05CC  00AC               	movwf	??_nrf24l01Init
  1835  05CD  3023               	movlw	35
  1836  05CE                     u1547:	
  1837  05CE  0B89               	decfsz	9,f
  1838  05CF  2DCE               	goto	u1547
  1839  05D0  0BAC               	decfsz	??_nrf24l01Init,f
  1840  05D1  2DCE               	goto	u1547
  1841                           
  1842                           ;nrf24l01.c: 338: nrf24l01InitRegisters();
  1843  05D2  219D               	fcall	_nrf24l01InitRegisters
  1844                           
  1845                           ;nrf24l01.c: 340: _delay((unsigned long)((2)*(16000000/4000.0)));
  1846  05D3  300B               	movlw	11
  1847  05D4  0020               	movlb	0	; select bank0
  1848  05D5  00AC               	movwf	??_nrf24l01Init
  1849  05D6  3062               	movlw	98
  1850  05D7                     u1557:	
  1851  05D7  0B89               	decfsz	9,f
  1852  05D8  2DD7               	goto	u1557
  1853  05D9  0BAC               	decfsz	??_nrf24l01Init,f
  1854  05DA  2DD7               	goto	u1557
  1855  05DB  0000               	nop
  1856  05DC  0008               	return
  1857  05DD                     __end_of_nrf24l01Init:	
  1858                           
  1859                           	psect	text3
  1860  05F0                     __ptext3:	
  1861 ;; *************** function _nrf24l01InterfaceInit *****************
  1862 ;; Defined at:
  1863 ;;		line 7 in file "interface.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;		None
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;		None
  1868 ;; Return value:  Size  Location     Type
  1869 ;;                  1    wreg      void 
  1870 ;; Registers used:
  1871 ;;		wreg, status,2, status,0
  1872 ;; Tracked objects:
  1873 ;;		On entry : 0/0
  1874 ;;		On exit  : 0/0
  1875 ;;		Unchanged: 0/0
  1876 ;; Data sizes:     COMMON   BANK0   BANK1
  1877 ;;      Params:         0       0       0
  1878 ;;      Locals:         0       0       0
  1879 ;;      Temps:          0       0       0
  1880 ;;      Totals:         0       0       0
  1881 ;;Total ram usage:        0 bytes
  1882 ;; Hardware stack levels used:    1
  1883 ;; Hardware stack levels required when called:    6
  1884 ;; This function calls:
  1885 ;;		Nothing
  1886 ;; This function is called by:
  1887 ;;		_nrf24l01Init
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           
  1892                           ;psect for function _nrf24l01InterfaceInit
  1893  05F0                     _nrf24l01InterfaceInit:	
  1894                           
  1895                           ;interface.c: 9: TRISAbits.TRISA0 = 0;
  1896                           
  1897                           ;incstack = 0
  1898                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  1899  05F0  0021               	movlb	1	; select bank1
  1900  05F1  100C               	bcf	12,0	;volatile
  1901                           
  1902                           ;interface.c: 10: TRISAbits.TRISA1 = 0;
  1903  05F2  108C               	bcf	12,1	;volatile
  1904                           
  1905                           ;interface.c: 12: TRISCbits.TRISC1 = 1;
  1906  05F3  148E               	bsf	14,1	;volatile
  1907                           
  1908                           ;interface.c: 13: TRISCbits.TRISC2 = 0;
  1909  05F4  110E               	bcf	14,2	;volatile
  1910                           
  1911                           ;interface.c: 14: TRISCbits.TRISC0 = 0;
  1912  05F5  100E               	bcf	14,0	;volatile
  1913                           
  1914                           ;interface.c: 16: SSPCON1bits.SSPEN = 0;
  1915  05F6  0024               	movlb	4	; select bank4
  1916  05F7  1295               	bcf	21,5	;volatile
  1917                           
  1918                           ;interface.c: 17: SSPCON1bits.CKP = 0;
  1919  05F8  1215               	bcf	21,4	;volatile
  1920                           
  1921                           ;interface.c: 18: SSP1STATbits.CKE = 1;
  1922  05F9  1714               	bsf	20,6	;volatile
  1923                           
  1924                           ;interface.c: 19: SSPCON1bits.SSPM = 0b0000;
  1925  05FA  30F0               	movlw	-16
  1926  05FB  0595               	andwf	21,f	;volatile
  1927                           
  1928                           ;interface.c: 21: SSPCON1bits.SSPEN = 1;
  1929  05FC  1695               	bsf	21,5	;volatile
  1930  05FD  0008               	return
  1931  05FE                     __end_of_nrf24l01InterfaceInit:	
  1932                           
  1933                           	psect	text4
  1934  019D                     __ptext4:	
  1935 ;; *************** function _nrf24l01InitRegisters *****************
  1936 ;; Defined at:
  1937 ;;		line 242 in file "nrf24l01.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;		None
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;  config          1   11[BANK0 ] struct .
  1942 ;;  DynPD           1   10[BANK0 ] struct .
  1943 ;;  enAA            1    9[BANK0 ] struct .
  1944 ;;  enRXAddr        1    8[BANK0 ] struct .
  1945 ;;  status          1    7[BANK0 ] struct .
  1946 ;;  feature         1    6[BANK0 ] struct .
  1947 ;;  rfSetup         1    5[BANK0 ] struct .
  1948 ;;  setupAW         1    4[BANK0 ] struct .
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      void 
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0, pclath, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMMON   BANK0   BANK1
  1958 ;;      Params:         0       0       0
  1959 ;;      Locals:         0       8       0
  1960 ;;      Temps:          0       1       0
  1961 ;;      Totals:         0       9       0
  1962 ;;Total ram usage:        9 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    8
  1965 ;; This function calls:
  1966 ;;		_nrf24l01Send
  1967 ;; This function is called by:
  1968 ;;		_nrf24l01Init
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           
  1973                           ;psect for function _nrf24l01InitRegisters
  1974  019D                     _nrf24l01InitRegisters:	
  1975                           
  1976                           ;nrf24l01.c: 244: n_CONFIG_t config;
  1977                           ;nrf24l01.c: 246: config.PWR_UP = 0;
  1978                           
  1979                           ;incstack = 0
  1980                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  1981  019D  0020               	movlb	0	; select bank0
  1982  019E  10AB               	bcf	nrf24l01InitRegisters@config,1
  1983                           
  1984                           ;nrf24l01.c: 247: nrf24l01Send(0b00100000 | 0x00, config.byte);
  1985  019F  082B               	movf	nrf24l01InitRegisters@config,w
  1986  01A0  00A3               	movwf	??_nrf24l01InitRegisters
  1987  01A1  0823               	movf	??_nrf24l01InitRegisters,w
  1988  01A2  00A0               	movwf	nrf24l01Send@data
  1989  01A3  3020               	movlw	32
  1990  01A4  25DD               	fcall	_nrf24l01Send
  1991                           
  1992                           ;nrf24l01.c: 249: _delay((unsigned long)((10000)*(16000000/4000000.0)));
  1993  01A5  3034               	movlw	52
  1994  01A6  0020               	movlb	0	; select bank0
  1995  01A7  00A3               	movwf	??_nrf24l01InitRegisters
  1996  01A8  30F1               	movlw	241
  1997  01A9                     u1567:	
  1998  01A9  0B89               	decfsz	9,f
  1999  01AA  29A9               	goto	u1567
  2000  01AB  0BA3               	decfsz	??_nrf24l01InitRegisters,f
  2001  01AC  29A9               	goto	u1567
  2002  01AD  3200               	nop2
  2003                           
  2004                           ;nrf24l01.c: 251: n_SETUP_AW_t setupAW;
  2005                           ;nrf24l01.c: 252: setupAW.byte = 0x00;
  2006  01AE  0020               	movlb	0	; select bank0
  2007  01AF  01A4               	clrf	nrf24l01InitRegisters@setupAW
  2008                           
  2009                           ;nrf24l01.c: 253: setupAW.AW = 3;
  2010  01B0  3003               	movlw	3
  2011  01B1  04A4               	iorwf	nrf24l01InitRegisters@setupAW,f
  2012                           
  2013                           ;nrf24l01.c: 254: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  2014  01B2  0824               	movf	nrf24l01InitRegisters@setupAW,w
  2015  01B3  00A3               	movwf	??_nrf24l01InitRegisters
  2016  01B4  0823               	movf	??_nrf24l01InitRegisters,w
  2017  01B5  00A0               	movwf	nrf24l01Send@data
  2018  01B6  3022               	movlw	34
  2019  01B7  25DD               	fcall	_nrf24l01Send
  2020                           
  2021                           ;nrf24l01.c: 262: n_RF_SETUP_t rfSetup;
  2022                           ;nrf24l01.c: 263: rfSetup.RF_DR_LOW = 0;
  2023  01B8  0020               	movlb	0	; select bank0
  2024  01B9  12A5               	bcf	nrf24l01InitRegisters@rfSetup,5
  2025                           
  2026                           ;nrf24l01.c: 264: rfSetup.RF_DR_HIGH = 1;
  2027  01BA  15A5               	bsf	nrf24l01InitRegisters@rfSetup,3
  2028                           
  2029                           ;nrf24l01.c: 265: rfSetup.RF_PWR = 3;
  2030  01BB  3006               	movlw	6
  2031  01BC  04A5               	iorwf	nrf24l01InitRegisters@rfSetup,f
  2032                           
  2033                           ;nrf24l01.c: 266: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  2034  01BD  0825               	movf	nrf24l01InitRegisters@rfSetup,w
  2035  01BE  00A3               	movwf	??_nrf24l01InitRegisters
  2036  01BF  0823               	movf	??_nrf24l01InitRegisters,w
  2037  01C0  00A0               	movwf	nrf24l01Send@data
  2038  01C1  3026               	movlw	38
  2039  01C2  25DD               	fcall	_nrf24l01Send
  2040                           
  2041                           ;nrf24l01.c: 269: n_EN_RXADDR_t enRXAddr;
  2042                           ;nrf24l01.c: 270: enRXAddr.ERX_P0 = 1;
  2043  01C3  0020               	movlb	0	; select bank0
  2044  01C4  1428               	bsf	nrf24l01InitRegisters@enRXAddr,0
  2045                           
  2046                           ;nrf24l01.c: 271: enRXAddr.ERX_P1 = 1;
  2047  01C5  14A8               	bsf	nrf24l01InitRegisters@enRXAddr,1
  2048                           
  2049                           ;nrf24l01.c: 272: enRXAddr.ERX_P2 = 1;
  2050  01C6  1528               	bsf	nrf24l01InitRegisters@enRXAddr,2
  2051                           
  2052                           ;nrf24l01.c: 273: enRXAddr.ERX_P3 = 1;
  2053  01C7  15A8               	bsf	nrf24l01InitRegisters@enRXAddr,3
  2054                           
  2055                           ;nrf24l01.c: 274: enRXAddr.ERX_P4 = 1;
  2056  01C8  1628               	bsf	nrf24l01InitRegisters@enRXAddr,4
  2057                           
  2058                           ;nrf24l01.c: 275: enRXAddr.ERX_P5 = 1;
  2059  01C9  16A8               	bsf	nrf24l01InitRegisters@enRXAddr,5
  2060                           
  2061                           ;nrf24l01.c: 276: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  2062  01CA  0828               	movf	nrf24l01InitRegisters@enRXAddr,w
  2063  01CB  00A3               	movwf	??_nrf24l01InitRegisters
  2064  01CC  0823               	movf	??_nrf24l01InitRegisters,w
  2065  01CD  00A0               	movwf	nrf24l01Send@data
  2066  01CE  3022               	movlw	34
  2067  01CF  25DD               	fcall	_nrf24l01Send
  2068                           
  2069                           ;nrf24l01.c: 279: n_EN_AA_t enAA;
  2070                           ;nrf24l01.c: 280: enAA.byte = nrf24l01Send(0b00000000 | 0x01, 0);
  2071  01D0  0020               	movlb	0	; select bank0
  2072  01D1  01A0               	clrf	nrf24l01Send@data
  2073  01D2  3001               	movlw	1
  2074  01D3  25DD               	fcall	_nrf24l01Send
  2075  01D4  0020               	movlb	0	; select bank0
  2076  01D5  00A3               	movwf	??_nrf24l01InitRegisters
  2077  01D6  0823               	movf	??_nrf24l01InitRegisters,w
  2078  01D7  00A9               	movwf	nrf24l01InitRegisters@enAA
  2079                           
  2080                           ;nrf24l01.c: 281: enAA.ENAA_P0 = 0;
  2081  01D8  1029               	bcf	nrf24l01InitRegisters@enAA,0
  2082                           
  2083                           ;nrf24l01.c: 282: enAA.ENAA_P1 = 0;
  2084  01D9  10A9               	bcf	nrf24l01InitRegisters@enAA,1
  2085                           
  2086                           ;nrf24l01.c: 283: enAA.ENAA_P2 = 0;
  2087  01DA  1129               	bcf	nrf24l01InitRegisters@enAA,2
  2088                           
  2089                           ;nrf24l01.c: 284: enAA.ENAA_P3 = 0;
  2090  01DB  11A9               	bcf	nrf24l01InitRegisters@enAA,3
  2091                           
  2092                           ;nrf24l01.c: 285: enAA.ENAA_P4 = 0;
  2093  01DC  1229               	bcf	nrf24l01InitRegisters@enAA,4
  2094                           
  2095                           ;nrf24l01.c: 286: enAA.ENAA_P5 = 0;
  2096  01DD  12A9               	bcf	nrf24l01InitRegisters@enAA,5
  2097                           
  2098                           ;nrf24l01.c: 287: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  2099  01DE  0829               	movf	nrf24l01InitRegisters@enAA,w
  2100  01DF  00A3               	movwf	??_nrf24l01InitRegisters
  2101  01E0  0823               	movf	??_nrf24l01InitRegisters,w
  2102  01E1  00A0               	movwf	nrf24l01Send@data
  2103  01E2  3021               	movlw	33
  2104  01E3  25DD               	fcall	_nrf24l01Send
  2105                           
  2106                           ;nrf24l01.c: 291: n_FEATURE_t feature;
  2107                           ;nrf24l01.c: 292: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  2108  01E4  0020               	movlb	0	; select bank0
  2109  01E5  01A0               	clrf	nrf24l01Send@data
  2110  01E6  301D               	movlw	29
  2111  01E7  25DD               	fcall	_nrf24l01Send
  2112  01E8  0020               	movlb	0	; select bank0
  2113  01E9  00A3               	movwf	??_nrf24l01InitRegisters
  2114  01EA  0823               	movf	??_nrf24l01InitRegisters,w
  2115  01EB  00A6               	movwf	nrf24l01InitRegisters@feature
  2116                           
  2117                           ;nrf24l01.c: 293: feature.EN_DPL = 1;
  2118  01EC  1526               	bsf	nrf24l01InitRegisters@feature,2
  2119                           
  2120                           ;nrf24l01.c: 294: feature.EN_DYN_ACK = 1;
  2121  01ED  1426               	bsf	nrf24l01InitRegisters@feature,0
  2122                           
  2123                           ;nrf24l01.c: 295: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  2124  01EE  0826               	movf	nrf24l01InitRegisters@feature,w
  2125  01EF  00A3               	movwf	??_nrf24l01InitRegisters
  2126  01F0  0823               	movf	??_nrf24l01InitRegisters,w
  2127  01F1  00A0               	movwf	nrf24l01Send@data
  2128  01F2  303D               	movlw	61
  2129  01F3  25DD               	fcall	_nrf24l01Send
  2130                           
  2131                           ;nrf24l01.c: 297: n_DYNPD_t DynPD;
  2132                           ;nrf24l01.c: 298: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  2133  01F4  0020               	movlb	0	; select bank0
  2134  01F5  01A0               	clrf	nrf24l01Send@data
  2135  01F6  301C               	movlw	28
  2136  01F7  25DD               	fcall	_nrf24l01Send
  2137  01F8  0020               	movlb	0	; select bank0
  2138  01F9  00A3               	movwf	??_nrf24l01InitRegisters
  2139  01FA  0823               	movf	??_nrf24l01InitRegisters,w
  2140  01FB  00AA               	movwf	nrf24l01InitRegisters@DynPD
  2141                           
  2142                           ;nrf24l01.c: 299: DynPD.DPL_P0 = 1;
  2143  01FC  142A               	bsf	nrf24l01InitRegisters@DynPD,0
  2144                           
  2145                           ;nrf24l01.c: 300: DynPD.DPL_P1 = 1;
  2146  01FD  14AA               	bsf	nrf24l01InitRegisters@DynPD,1
  2147                           
  2148                           ;nrf24l01.c: 301: DynPD.DPL_P2 = 1;
  2149  01FE  152A               	bsf	nrf24l01InitRegisters@DynPD,2
  2150                           
  2151                           ;nrf24l01.c: 302: DynPD.DPL_P3 = 1;
  2152  01FF  15AA               	bsf	nrf24l01InitRegisters@DynPD,3
  2153                           
  2154                           ;nrf24l01.c: 303: DynPD.DPL_P4 = 1;
  2155  0200  162A               	bsf	nrf24l01InitRegisters@DynPD,4
  2156                           
  2157                           ;nrf24l01.c: 304: DynPD.DPL_P5 = 1;
  2158  0201  16AA               	bsf	nrf24l01InitRegisters@DynPD,5
  2159                           
  2160                           ;nrf24l01.c: 305: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  2161  0202  082A               	movf	nrf24l01InitRegisters@DynPD,w
  2162  0203  00A3               	movwf	??_nrf24l01InitRegisters
  2163  0204  0823               	movf	??_nrf24l01InitRegisters,w
  2164  0205  00A0               	movwf	nrf24l01Send@data
  2165  0206  303C               	movlw	60
  2166  0207  25DD               	fcall	_nrf24l01Send
  2167                           
  2168                           ;nrf24l01.c: 308: n_STATUS_t status;
  2169                           ;nrf24l01.c: 309: status.byte = 0x00;
  2170  0208  0020               	movlb	0	; select bank0
  2171  0209  01A7               	clrf	nrf24l01InitRegisters@status
  2172                           
  2173                           ;nrf24l01.c: 310: status.RX_DR = 1;
  2174  020A  1727               	bsf	nrf24l01InitRegisters@status,6
  2175                           
  2176                           ;nrf24l01.c: 311: status.TX_DS = 1;
  2177  020B  16A7               	bsf	nrf24l01InitRegisters@status,5
  2178                           
  2179                           ;nrf24l01.c: 312: status.MAX_RT = 1;
  2180  020C  1627               	bsf	nrf24l01InitRegisters@status,4
  2181                           
  2182                           ;nrf24l01.c: 313: nrf24l01Send(0b00100000 | 0x07, status.byte);
  2183  020D  0827               	movf	nrf24l01InitRegisters@status,w
  2184  020E  00A3               	movwf	??_nrf24l01InitRegisters
  2185  020F  0823               	movf	??_nrf24l01InitRegisters,w
  2186  0210  00A0               	movwf	nrf24l01Send@data
  2187  0211  3027               	movlw	39
  2188  0212  25DD               	fcall	_nrf24l01Send
  2189                           
  2190                           ;nrf24l01.c: 316: nrf24l01Send(0b11100001, 0);
  2191  0213  0020               	movlb	0	; select bank0
  2192  0214  01A0               	clrf	nrf24l01Send@data
  2193  0215  30E1               	movlw	225
  2194  0216  25DD               	fcall	_nrf24l01Send
  2195                           
  2196                           ;nrf24l01.c: 317: nrf24l01Send(0b11100010, 0);
  2197  0217  0020               	movlb	0	; select bank0
  2198  0218  01A0               	clrf	nrf24l01Send@data
  2199  0219  30E2               	movlw	226
  2200  021A  25DD               	fcall	_nrf24l01Send
  2201                           
  2202                           ;nrf24l01.c: 320: config.PRIM_RX = 1;
  2203  021B  0020               	movlb	0	; select bank0
  2204  021C  142B               	bsf	nrf24l01InitRegisters@config,0
  2205                           
  2206                           ;nrf24l01.c: 321: config.EN_CRC = 1;
  2207  021D  15AB               	bsf	nrf24l01InitRegisters@config,3
  2208                           
  2209                           ;nrf24l01.c: 322: config.CRCO = 1;
  2210  021E  152B               	bsf	nrf24l01InitRegisters@config,2
  2211                           
  2212                           ;nrf24l01.c: 323: config.PWR_UP = 1;
  2213  021F  14AB               	bsf	nrf24l01InitRegisters@config,1
  2214                           
  2215                           ;nrf24l01.c: 324: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2216  0220  082B               	movf	nrf24l01InitRegisters@config,w
  2217  0221  00A3               	movwf	??_nrf24l01InitRegisters
  2218  0222  0823               	movf	??_nrf24l01InitRegisters,w
  2219  0223  00A0               	movwf	nrf24l01Send@data
  2220  0224  3020               	movlw	32
  2221  0225  25DD               	fcall	_nrf24l01Send
  2222  0226  0008               	return
  2223  0227                     __end_of_nrf24l01InitRegisters:	
  2224                           
  2225                           	psect	text5
  2226  0104                     __ptext5:	
  2227 ;; *************** function _loop *****************
  2228 ;; Defined at:
  2229 ;;		line 92 in file "main.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;		None
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;		None
  2234 ;; Return value:  Size  Location     Type
  2235 ;;                  1    wreg      void 
  2236 ;; Registers used:
  2237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2238 ;; Tracked objects:
  2239 ;;		On entry : 0/0
  2240 ;;		On exit  : 0/0
  2241 ;;		Unchanged: 0/0
  2242 ;; Data sizes:     COMMON   BANK0   BANK1
  2243 ;;      Params:         0       0       0
  2244 ;;      Locals:         0       0       0
  2245 ;;      Temps:          0       0       0
  2246 ;;      Totals:         0       0       0
  2247 ;;Total ram usage:        0 bytes
  2248 ;; Hardware stack levels used:    1
  2249 ;; Hardware stack levels required when called:   10
  2250 ;; This function calls:
  2251 ;;		_checkRxData
  2252 ;;		_getADCValue
  2253 ;;		_nrf24l01SendString
  2254 ;;		_sleep
  2255 ;;		_strcpy
  2256 ;;		_utoa
  2257 ;; This function is called by:
  2258 ;;		_main
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           
  2263                           ;psect for function _loop
  2264  0104                     _loop:	
  2265                           
  2266                           ;main.c: 96: strcpy(nrf24l01TXTopic, "DBG");
  2267                           
  2268                           ;incstack = 0
  2269                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2270  0104  305C               	movlw	low (STR_1| (0+32768))
  2271  0105  0020               	movlb	0	; select bank0
  2272  0106  00A3               	movwf	strcpy@from
  2273  0107  3086               	movlw	high (STR_1| (0+32768))
  2274  0108  00A4               	movwf	strcpy@from+1
  2275  0109  3060               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2276  010A  25AC               	fcall	_strcpy
  2277                           
  2278                           ;main.c: 97: utoa(nrf24l01TXValue, counter, 10);
  2279  010B  0020               	movlb	0	; select bank0
  2280  010C  084D               	movf	_counter+1,w
  2281  010D  00C0               	movwf	utoa@val+1
  2282  010E  084C               	movf	_counter,w
  2283  010F  00BF               	movwf	utoa@val
  2284  0110  300A               	movlw	10
  2285  0111  00C1               	movwf	utoa@base
  2286  0112  3000               	movlw	0
  2287  0113  00C2               	movwf	utoa@base+1
  2288  0114  3058               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2289  0115  23B5               	fcall	_utoa
  2290                           
  2291                           ;main.c: 98: nrf24l01SendString(0);
  2292  0116  3000               	movlw	0
  2293  0117  2227               	fcall	_nrf24l01SendString
  2294                           
  2295                           ;main.c: 99: sleep();
  2296  0118  2614               	fcall	_sleep
  2297                           
  2298                           ;main.c: 101: strcpy(nrf24l01TXTopic, "ADC3");
  2299  0119  3049               	movlw	low (STR_2| (0+32768))
  2300  011A  0020               	movlb	0	; select bank0
  2301  011B  00A3               	movwf	strcpy@from
  2302  011C  3086               	movlw	high (STR_2| (0+32768))
  2303  011D  00A4               	movwf	strcpy@from+1
  2304  011E  3060               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2305  011F  25AC               	fcall	_strcpy
  2306                           
  2307                           ;main.c: 102: utoa(nrf24l01TXValue, getADCValue(3, 2505), 10);
  2308  0120  3000               	movlw	0
  2309  0121  0020               	movlb	0	; select bank0
  2310  0122  00B4               	movwf	getADCValue@divider+3
  2311  0123  3000               	movlw	0
  2312  0124  00B3               	movwf	getADCValue@divider+2
  2313  0125  3009               	movlw	9
  2314  0126  00B2               	movwf	getADCValue@divider+1
  2315  0127  30C9               	movlw	201
  2316  0128  00B1               	movwf	getADCValue@divider
  2317  0129  3003               	movlw	3
  2318  012A  22B1               	fcall	_getADCValue
  2319  012B  0020               	movlb	0	; select bank0
  2320  012C  0832               	movf	?_getADCValue+1,w
  2321  012D  00C0               	movwf	utoa@val+1
  2322  012E  0831               	movf	?_getADCValue,w
  2323  012F  00BF               	movwf	utoa@val
  2324  0130  300A               	movlw	10
  2325  0131  00C1               	movwf	utoa@base
  2326  0132  3000               	movlw	0
  2327  0133  00C2               	movwf	utoa@base+1
  2328  0134  3058               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2329  0135  23B5               	fcall	_utoa
  2330                           
  2331                           ;main.c: 103: nrf24l01SendString(1);
  2332  0136  3001               	movlw	1
  2333  0137  2227               	fcall	_nrf24l01SendString
  2334                           
  2335                           ;main.c: 104: sleep();
  2336  0138  2614               	fcall	_sleep
  2337                           
  2338                           ;main.c: 106: strcpy(nrf24l01TXTopic, "ADC7");
  2339  0139  304E               	movlw	low (STR_3| (0+32768))
  2340  013A  0020               	movlb	0	; select bank0
  2341  013B  00A3               	movwf	strcpy@from
  2342  013C  3086               	movlw	high (STR_3| (0+32768))
  2343  013D  00A4               	movwf	strcpy@from+1
  2344  013E  3060               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2345  013F  25AC               	fcall	_strcpy
  2346                           
  2347                           ;main.c: 107: utoa(nrf24l01TXValue, getADCValue(7, 2500), 10);
  2348  0140  3000               	movlw	0
  2349  0141  0020               	movlb	0	; select bank0
  2350  0142  00B4               	movwf	getADCValue@divider+3
  2351  0143  3000               	movlw	0
  2352  0144  00B3               	movwf	getADCValue@divider+2
  2353  0145  3009               	movlw	9
  2354  0146  00B2               	movwf	getADCValue@divider+1
  2355  0147  30C4               	movlw	196
  2356  0148  00B1               	movwf	getADCValue@divider
  2357  0149  3007               	movlw	7
  2358  014A  22B1               	fcall	_getADCValue
  2359  014B  0020               	movlb	0	; select bank0
  2360  014C  0832               	movf	?_getADCValue+1,w
  2361  014D  00C0               	movwf	utoa@val+1
  2362  014E  0831               	movf	?_getADCValue,w
  2363  014F  00BF               	movwf	utoa@val
  2364  0150  300A               	movlw	10
  2365  0151  00C1               	movwf	utoa@base
  2366  0152  3000               	movlw	0
  2367  0153  00C2               	movwf	utoa@base+1
  2368  0154  3058               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2369  0155  23B5               	fcall	_utoa
  2370                           
  2371                           ;main.c: 108: nrf24l01SendString(1);
  2372  0156  3001               	movlw	1
  2373  0157  2227               	fcall	_nrf24l01SendString
  2374                           
  2375                           ;main.c: 109: sleep();
  2376  0158  2614               	fcall	_sleep
  2377                           
  2378                           ;main.c: 111: strcpy(nrf24l01TXTopic, "ADC29");
  2379  0159  3038               	movlw	low (STR_4| (0+32768))
  2380  015A  0020               	movlb	0	; select bank0
  2381  015B  00A3               	movwf	strcpy@from
  2382  015C  3086               	movlw	high (STR_4| (0+32768))
  2383  015D  00A4               	movwf	strcpy@from+1
  2384  015E  3060               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2385  015F  25AC               	fcall	_strcpy
  2386                           
  2387                           ;main.c: 112: utoa(nrf24l01TXValue, getADCValue(29, 208900) - 40, 10);
  2388  0160  3000               	movlw	0
  2389  0161  0020               	movlb	0	; select bank0
  2390  0162  00B4               	movwf	getADCValue@divider+3
  2391  0163  3003               	movlw	3
  2392  0164  00B3               	movwf	getADCValue@divider+2
  2393  0165  3030               	movlw	48
  2394  0166  00B2               	movwf	getADCValue@divider+1
  2395  0167  3004               	movlw	4
  2396  0168  00B1               	movwf	getADCValue@divider
  2397  0169  301D               	movlw	29
  2398  016A  22B1               	fcall	_getADCValue
  2399  016B  0020               	movlb	0	; select bank0
  2400  016C  0831               	movf	?_getADCValue,w
  2401  016D  3ED8               	addlw	216
  2402  016E  00BF               	movwf	utoa@val
  2403  016F  30FF               	movlw	255
  2404  0170  3D32               	addwfc	?_getADCValue+1,w
  2405  0171  00C0               	movwf	utoa@val+1
  2406  0172  300A               	movlw	10
  2407  0173  00C1               	movwf	utoa@base
  2408  0174  3000               	movlw	0
  2409  0175  00C2               	movwf	utoa@base+1
  2410  0176  3058               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2411  0177  23B5               	fcall	_utoa
  2412                           
  2413                           ;main.c: 113: nrf24l01SendString(1);
  2414  0178  3001               	movlw	1
  2415  0179  2227               	fcall	_nrf24l01SendString
  2416                           
  2417                           ;main.c: 114: sleep();
  2418  017A  2614               	fcall	_sleep
  2419                           
  2420                           ;main.c: 116: strcpy(nrf24l01TXTopic, "ADC31");
  2421  017B  3032               	movlw	low (STR_5| (0+32768))
  2422  017C  0020               	movlb	0	; select bank0
  2423  017D  00A3               	movwf	strcpy@from
  2424  017E  3086               	movlw	high (STR_5| (0+32768))
  2425  017F  00A4               	movwf	strcpy@from+1
  2426  0180  3060               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2427  0181  25AC               	fcall	_strcpy
  2428                           
  2429                           ;main.c: 117: utoa(nrf24l01TXValue, getADCValue(31, 2475), 10);
  2430  0182  3000               	movlw	0
  2431  0183  0020               	movlb	0	; select bank0
  2432  0184  00B4               	movwf	getADCValue@divider+3
  2433  0185  3000               	movlw	0
  2434  0186  00B3               	movwf	getADCValue@divider+2
  2435  0187  3009               	movlw	9
  2436  0188  00B2               	movwf	getADCValue@divider+1
  2437  0189  30AB               	movlw	171
  2438  018A  00B1               	movwf	getADCValue@divider
  2439  018B  301F               	movlw	31
  2440  018C  22B1               	fcall	_getADCValue
  2441  018D  0020               	movlb	0	; select bank0
  2442  018E  0832               	movf	?_getADCValue+1,w
  2443  018F  00C0               	movwf	utoa@val+1
  2444  0190  0831               	movf	?_getADCValue,w
  2445  0191  00BF               	movwf	utoa@val
  2446  0192  300A               	movlw	10
  2447  0193  00C1               	movwf	utoa@base
  2448  0194  3000               	movlw	0
  2449  0195  00C2               	movwf	utoa@base+1
  2450  0196  3058               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2451  0197  23B5               	fcall	_utoa
  2452                           
  2453                           ;main.c: 118: nrf24l01SendString(1);
  2454  0198  3001               	movlw	1
  2455  0199  2227               	fcall	_nrf24l01SendString
  2456                           
  2457                           ;main.c: 119: sleep();
  2458  019A  2614               	fcall	_sleep
  2459                           
  2460                           ;main.c: 121: checkRxData();
  2461  019B  25FE               	fcall	_checkRxData
  2462  019C  0008               	return
  2463  019D                     __end_of_loop:	
  2464                           
  2465                           	psect	text6
  2466  03B5                     __ptext6:	
  2467 ;; *************** function _utoa *****************
  2468 ;; Defined at:
  2469 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  2470 ;; Parameters:    Size  Location     Type
  2471 ;;  buf             1    wreg     PTR unsigned char 
  2472 ;;		 -> nrf24l01TXValue(8), 
  2473 ;;  val             2   31[BANK0 ] unsigned int 
  2474 ;;  base            2   33[BANK0 ] int 
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;  buf             1   39[BANK0 ] PTR unsigned char 
  2477 ;;		 -> nrf24l01TXValue(8), 
  2478 ;;  v               2   36[BANK0 ] unsigned int 
  2479 ;;  c               1   38[BANK0 ] unsigned char 
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      PTR unsigned char 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMMON   BANK0   BANK1
  2489 ;;      Params:         0       4       0
  2490 ;;      Locals:         0       4       0
  2491 ;;      Temps:          0       1       0
  2492 ;;      Totals:         0       9       0
  2493 ;;Total ram usage:        9 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    7
  2496 ;; This function calls:
  2497 ;;		___lwdiv
  2498 ;;		___lwmod
  2499 ;; This function is called by:
  2500 ;;		_loop
  2501 ;;		_main
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           
  2506                           ;psect for function _utoa
  2507  03B5                     _utoa:	
  2508                           
  2509                           ;incstack = 0
  2510                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2511                           ;utoa@buf stored from wreg
  2512  03B5  0020               	movlb	0	; select bank0
  2513  03B6  00C7               	movwf	utoa@buf
  2514  03B7  0840               	movf	utoa@val+1,w
  2515  03B8  00C5               	movwf	utoa@v+1
  2516  03B9  083F               	movf	utoa@val,w
  2517  03BA  00C4               	movwf	utoa@v
  2518  03BB                     l1611:	
  2519  03BB  0842               	movf	utoa@base+1,w
  2520  03BC  00A4               	movwf	___lwdiv@divisor+1
  2521  03BD  0841               	movf	utoa@base,w
  2522  03BE  00A3               	movwf	___lwdiv@divisor
  2523  03BF  0845               	movf	utoa@v+1,w
  2524  03C0  00A6               	movwf	___lwdiv@dividend+1
  2525  03C1  0844               	movf	utoa@v,w
  2526  03C2  00A5               	movwf	___lwdiv@dividend
  2527  03C3  249D               	fcall	___lwdiv
  2528  03C4  0020               	movlb	0	; select bank0
  2529  03C5  0824               	movf	?___lwdiv+1,w
  2530  03C6  00C5               	movwf	utoa@v+1
  2531  03C7  0823               	movf	?___lwdiv,w
  2532  03C8  00C4               	movwf	utoa@v
  2533  03C9  3001               	movlw	1
  2534  03CA  00C3               	movwf	??_utoa
  2535  03CB  0843               	movf	??_utoa,w
  2536  03CC  07C7               	addwf	utoa@buf,f
  2537  03CD  0844               	movf	utoa@v,w
  2538  03CE  0445               	iorwf	utoa@v+1,w
  2539  03CF  1D03               	btfss	3,2
  2540  03D0  2BBB               	goto	l1611
  2541  03D1  0847               	movf	utoa@buf,w
  2542  03D2  0086               	movwf	6
  2543  03D3  0187               	clrf	7
  2544  03D4  0181               	clrf	1
  2545  03D5  3001               	movlw	1
  2546  03D6  02C7               	subwf	utoa@buf,f
  2547  03D7                     l1621:	
  2548  03D7  0842               	movf	utoa@base+1,w
  2549  03D8  00A4               	movwf	___lwmod@divisor+1
  2550  03D9  0841               	movf	utoa@base,w
  2551  03DA  00A3               	movwf	___lwmod@divisor
  2552  03DB  0840               	movf	utoa@val+1,w
  2553  03DC  00A6               	movwf	___lwmod@dividend+1
  2554  03DD  083F               	movf	utoa@val,w
  2555  03DE  00A5               	movwf	___lwmod@dividend
  2556  03DF  2534               	fcall	___lwmod
  2557  03E0  0020               	movlb	0	; select bank0
  2558  03E1  0823               	movf	?___lwmod,w
  2559  03E2  00C3               	movwf	??_utoa
  2560  03E3  0843               	movf	??_utoa,w
  2561  03E4  00C6               	movwf	utoa@c
  2562  03E5  0842               	movf	utoa@base+1,w
  2563  03E6  00A4               	movwf	___lwdiv@divisor+1
  2564  03E7  0841               	movf	utoa@base,w
  2565  03E8  00A3               	movwf	___lwdiv@divisor
  2566  03E9  0840               	movf	utoa@val+1,w
  2567  03EA  00A6               	movwf	___lwdiv@dividend+1
  2568  03EB  083F               	movf	utoa@val,w
  2569  03EC  00A5               	movwf	___lwdiv@dividend
  2570  03ED  249D               	fcall	___lwdiv
  2571  03EE  0020               	movlb	0	; select bank0
  2572  03EF  0824               	movf	?___lwdiv+1,w
  2573  03F0  00C0               	movwf	utoa@val+1
  2574  03F1  0823               	movf	?___lwdiv,w
  2575  03F2  00BF               	movwf	utoa@val
  2576  03F3  300A               	movlw	10
  2577  03F4  0246               	subwf	utoa@c,w
  2578  03F5  1C03               	skipc
  2579  03F6  2BFB               	goto	l566
  2580  03F7  3007               	movlw	7
  2581  03F8  00C3               	movwf	??_utoa
  2582  03F9  0843               	movf	??_utoa,w
  2583  03FA  07C6               	addwf	utoa@c,f
  2584  03FB                     l566:	
  2585  03FB  3030               	movlw	48
  2586  03FC  00C3               	movwf	??_utoa
  2587  03FD  0843               	movf	??_utoa,w
  2588  03FE  07C6               	addwf	utoa@c,f
  2589  03FF  0846               	movf	utoa@c,w
  2590  0400  00C3               	movwf	??_utoa
  2591  0401  0847               	movf	utoa@buf,w
  2592  0402  0086               	movwf	6
  2593  0403  0187               	clrf	7
  2594  0404  0843               	movf	??_utoa,w
  2595  0405  0081               	movwf	1
  2596  0406  3001               	movlw	1
  2597  0407  02C7               	subwf	utoa@buf,f
  2598  0408  083F               	movf	utoa@val,w
  2599  0409  0440               	iorwf	utoa@val+1,w
  2600  040A  1D03               	btfss	3,2
  2601  040B  2BD7               	goto	l1621
  2602                           
  2603                           ;	Return value of _utoa is never used
  2604  040C  3001               	movlw	1
  2605  040D  00C3               	movwf	??_utoa
  2606  040E  0843               	movf	??_utoa,w
  2607  040F  07C7               	addwf	utoa@buf,f
  2608  0410  0008               	return
  2609  0411                     __end_of_utoa:	
  2610                           
  2611                           	psect	text7
  2612  0534                     __ptext7:	
  2613 ;; *************** function ___lwmod *****************
  2614 ;; Defined at:
  2615 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;  divisor         2    3[BANK0 ] unsigned int 
  2618 ;;  dividend        2    5[BANK0 ] unsigned int 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  counter         1    8[BANK0 ] unsigned char 
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  2    3[BANK0 ] unsigned int 
  2623 ;; Registers used:
  2624 ;;		wreg, status,2, status,0
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMMON   BANK0   BANK1
  2630 ;;      Params:         0       4       0
  2631 ;;      Locals:         0       1       0
  2632 ;;      Temps:          0       1       0
  2633 ;;      Totals:         0       6       0
  2634 ;;Total ram usage:        6 bytes
  2635 ;; Hardware stack levels used:    1
  2636 ;; Hardware stack levels required when called:    6
  2637 ;; This function calls:
  2638 ;;		Nothing
  2639 ;; This function is called by:
  2640 ;;		_utoa
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           
  2645                           ;psect for function ___lwmod
  2646  0534                     ___lwmod:	
  2647                           
  2648                           ;incstack = 0
  2649                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2650  0534  0020               	movlb	0	; select bank0
  2651  0535  0823               	movf	___lwmod@divisor,w
  2652  0536  0424               	iorwf	___lwmod@divisor+1,w
  2653  0537  1903               	btfsc	3,2
  2654  0538  2D5C               	goto	l1565
  2655  0539  01A8               	clrf	___lwmod@counter
  2656  053A  0AA8               	incf	___lwmod@counter,f
  2657  053B                     l1555:	
  2658  053B  1BA4               	btfsc	___lwmod@divisor+1,7
  2659  053C  2D47               	goto	l1557
  2660  053D  3001               	movlw	1
  2661  053E                     u1065:	
  2662  053E  35A3               	lslf	___lwmod@divisor,f
  2663  053F  0DA4               	rlf	___lwmod@divisor+1,f
  2664  0540  0B89               	decfsz	9,f
  2665  0541  2D3E               	goto	u1065
  2666  0542  3001               	movlw	1
  2667  0543  00A7               	movwf	??___lwmod
  2668  0544  0827               	movf	??___lwmod,w
  2669  0545  07A8               	addwf	___lwmod@counter,f
  2670  0546  2D3B               	goto	l1555
  2671  0547                     l1557:	
  2672  0547  0824               	movf	___lwmod@divisor+1,w
  2673  0548  0226               	subwf	___lwmod@dividend+1,w
  2674  0549  1D03               	skipz
  2675  054A  2D4D               	goto	u1085
  2676  054B  0823               	movf	___lwmod@divisor,w
  2677  054C  0225               	subwf	___lwmod@dividend,w
  2678  054D                     u1085:	
  2679  054D  1C03               	skipc
  2680  054E  2D53               	goto	l1561
  2681  054F  0823               	movf	___lwmod@divisor,w
  2682  0550  02A5               	subwf	___lwmod@dividend,f
  2683  0551  0824               	movf	___lwmod@divisor+1,w
  2684  0552  3BA6               	subwfb	___lwmod@dividend+1,f
  2685  0553                     l1561:	
  2686  0553  3001               	movlw	1
  2687  0554                     u1095:	
  2688  0554  36A4               	lsrf	___lwmod@divisor+1,f
  2689  0555  0CA3               	rrf	___lwmod@divisor,f
  2690  0556  0B89               	decfsz	9,f
  2691  0557  2D54               	goto	u1095
  2692  0558  3001               	movlw	1
  2693  0559  02A8               	subwf	___lwmod@counter,f
  2694  055A  1D03               	btfss	3,2
  2695  055B  2D47               	goto	l1557
  2696  055C                     l1565:	
  2697  055C  0826               	movf	___lwmod@dividend+1,w
  2698  055D  00A4               	movwf	?___lwmod+1
  2699  055E  0825               	movf	___lwmod@dividend,w
  2700  055F  00A3               	movwf	?___lwmod
  2701  0560  0008               	return
  2702  0561                     __end_of___lwmod:	
  2703                           
  2704                           	psect	text8
  2705  049D                     __ptext8:	
  2706 ;; *************** function ___lwdiv *****************
  2707 ;; Defined at:
  2708 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  divisor         2    3[BANK0 ] unsigned int 
  2711 ;;  dividend        2    5[BANK0 ] unsigned int 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;  quotient        2    8[BANK0 ] unsigned int 
  2714 ;;  counter         1   10[BANK0 ] unsigned char 
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  2    3[BANK0 ] unsigned int 
  2717 ;; Registers used:
  2718 ;;		wreg, status,2, status,0
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMMON   BANK0   BANK1
  2724 ;;      Params:         0       4       0
  2725 ;;      Locals:         0       3       0
  2726 ;;      Temps:          0       1       0
  2727 ;;      Totals:         0       8       0
  2728 ;;Total ram usage:        8 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    6
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_utoa
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           
  2739                           ;psect for function ___lwdiv
  2740  049D                     ___lwdiv:	
  2741                           
  2742                           ;incstack = 0
  2743                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2744  049D  0020               	movlb	0	; select bank0
  2745  049E  01A8               	clrf	___lwdiv@quotient
  2746  049F  01A9               	clrf	___lwdiv@quotient+1
  2747  04A0  0823               	movf	___lwdiv@divisor,w
  2748  04A1  0424               	iorwf	___lwdiv@divisor+1,w
  2749  04A2  1903               	btfsc	3,2
  2750  04A3  2CCD               	goto	l1543
  2751  04A4  01AA               	clrf	___lwdiv@counter
  2752  04A5  0AAA               	incf	___lwdiv@counter,f
  2753  04A6                     l1531:	
  2754  04A6  1BA4               	btfsc	___lwdiv@divisor+1,7
  2755  04A7  2CB2               	goto	l1533
  2756  04A8  3001               	movlw	1
  2757  04A9                     u995:	
  2758  04A9  35A3               	lslf	___lwdiv@divisor,f
  2759  04AA  0DA4               	rlf	___lwdiv@divisor+1,f
  2760  04AB  0B89               	decfsz	9,f
  2761  04AC  2CA9               	goto	u995
  2762  04AD  3001               	movlw	1
  2763  04AE  00A7               	movwf	??___lwdiv
  2764  04AF  0827               	movf	??___lwdiv,w
  2765  04B0  07AA               	addwf	___lwdiv@counter,f
  2766  04B1  2CA6               	goto	l1531
  2767  04B2                     l1533:	
  2768  04B2  3001               	movlw	1
  2769  04B3                     u1015:	
  2770  04B3  35A8               	lslf	___lwdiv@quotient,f
  2771  04B4  0DA9               	rlf	___lwdiv@quotient+1,f
  2772  04B5  0B89               	decfsz	9,f
  2773  04B6  2CB3               	goto	u1015
  2774  04B7  0824               	movf	___lwdiv@divisor+1,w
  2775  04B8  0226               	subwf	___lwdiv@dividend+1,w
  2776  04B9  1D03               	skipz
  2777  04BA  2CBD               	goto	u1025
  2778  04BB  0823               	movf	___lwdiv@divisor,w
  2779  04BC  0225               	subwf	___lwdiv@dividend,w
  2780  04BD                     u1025:	
  2781  04BD  1C03               	skipc
  2782  04BE  2CC4               	goto	l1539
  2783  04BF  0823               	movf	___lwdiv@divisor,w
  2784  04C0  02A5               	subwf	___lwdiv@dividend,f
  2785  04C1  0824               	movf	___lwdiv@divisor+1,w
  2786  04C2  3BA6               	subwfb	___lwdiv@dividend+1,f
  2787  04C3  1428               	bsf	___lwdiv@quotient,0
  2788  04C4                     l1539:	
  2789  04C4  3001               	movlw	1
  2790  04C5                     u1035:	
  2791  04C5  36A4               	lsrf	___lwdiv@divisor+1,f
  2792  04C6  0CA3               	rrf	___lwdiv@divisor,f
  2793  04C7  0B89               	decfsz	9,f
  2794  04C8  2CC5               	goto	u1035
  2795  04C9  3001               	movlw	1
  2796  04CA  02AA               	subwf	___lwdiv@counter,f
  2797  04CB  1D03               	btfss	3,2
  2798  04CC  2CB2               	goto	l1533
  2799  04CD                     l1543:	
  2800  04CD  0829               	movf	___lwdiv@quotient+1,w
  2801  04CE  00A4               	movwf	?___lwdiv+1
  2802  04CF  0828               	movf	___lwdiv@quotient,w
  2803  04D0  00A3               	movwf	?___lwdiv
  2804  04D1  0008               	return
  2805  04D2                     __end_of___lwdiv:	
  2806                           
  2807                           	psect	text9
  2808  05AC                     __ptext9:	
  2809 ;; *************** function _strcpy *****************
  2810 ;; Defined at:
  2811 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  to              1    wreg     PTR unsigned char 
  2814 ;;		 -> nrf24l01TXTopic(8), 
  2815 ;;  from            2    3[BANK0 ] PTR const unsigned char 
  2816 ;;		 -> STR_6(5), STR_5(6), STR_4(6), STR_3(5), 
  2817 ;;		 -> STR_2(5), STR_1(4), 
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;  to              1    7[BANK0 ] PTR unsigned char 
  2820 ;;		 -> nrf24l01TXTopic(8), 
  2821 ;;  cp              1    6[BANK0 ] PTR unsigned char 
  2822 ;;		 -> nrf24l01TXTopic(8), 
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  1    wreg      PTR unsigned char 
  2825 ;; Registers used:
  2826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMMON   BANK0   BANK1
  2832 ;;      Params:         0       2       0
  2833 ;;      Locals:         0       2       0
  2834 ;;      Temps:          0       1       0
  2835 ;;      Totals:         0       5       0
  2836 ;;Total ram usage:        5 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    6
  2839 ;; This function calls:
  2840 ;;		Nothing
  2841 ;; This function is called by:
  2842 ;;		_loop
  2843 ;;		_main
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           
  2848                           ;psect for function _strcpy
  2849  05AC                     _strcpy:	
  2850                           
  2851                           ;incstack = 0
  2852                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  2853                           ;strcpy@to stored from wreg
  2854  05AC  0020               	movlb	0	; select bank0
  2855  05AD  00A7               	movwf	strcpy@to
  2856  05AE  0827               	movf	strcpy@to,w
  2857  05AF  00A5               	movwf	??_strcpy
  2858  05B0  0825               	movf	??_strcpy,w
  2859  05B1  00A6               	movwf	strcpy@cp
  2860  05B2                     l1607:	
  2861  05B2  0826               	movf	strcpy@cp,w
  2862  05B3  0086               	movwf	6
  2863  05B4  0187               	clrf	7
  2864  05B5  0823               	movf	strcpy@from,w
  2865  05B6  0084               	movwf	4
  2866  05B7  0824               	movf	strcpy@from+1,w
  2867  05B8  0085               	movwf	5
  2868  05B9  0800               	movf	0,w	;code access
  2869  05BA  3FC0               	movwi [0]fsr1
  2870  05BB  0889               	movf	9,f
  2871  05BC  1903               	btfsc	3,2
  2872  05BD  0008               	return
  2873  05BE  3001               	movlw	1
  2874  05BF  00A5               	movwf	??_strcpy
  2875  05C0  0825               	movf	??_strcpy,w
  2876  05C1  07A6               	addwf	strcpy@cp,f
  2877  05C2  3001               	movlw	1
  2878  05C3  07A3               	addwf	strcpy@from,f
  2879  05C4  3000               	movlw	0
  2880  05C5  3DA4               	addwfc	strcpy@from+1,f
  2881  05C6  2DB2               	goto	l1607
  2882  05C7                     __end_of_strcpy:	
  2883                           ;	Return value of _strcpy is never used
  2884                           
  2885                           
  2886                           	psect	text10
  2887  0227                     __ptext10:	
  2888 ;; *************** function _nrf24l01SendString *****************
  2889 ;; Defined at:
  2890 ;;		line 162 in file "nrf24l01.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  waitForAck      1    wreg     unsigned char 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  waitForAck      1    4[BANK0 ] unsigned char 
  2895 ;;  i               1    5[BANK0 ] unsigned char 
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  1    wreg      void 
  2898 ;; Registers used:
  2899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMMON   BANK0   BANK1
  2905 ;;      Params:         0       0       0
  2906 ;;      Locals:         0       2       0
  2907 ;;      Temps:          0       1       0
  2908 ;;      Totals:         0       3       0
  2909 ;;Total ram usage:        3 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    9
  2912 ;; This function calls:
  2913 ;;		_enableInterrupts
  2914 ;;		_nrf24l01SPIEnd
  2915 ;;		_nrf24l01SPISend
  2916 ;;		_nrf24l01SPIStart
  2917 ;;		_nrf24l01SetRXMode
  2918 ;; This function is called by:
  2919 ;;		_loop
  2920 ;;		_main
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           
  2925                           ;psect for function _nrf24l01SendString
  2926  0227                     _nrf24l01SendString:	
  2927                           
  2928                           ;incstack = 0
  2929                           ; Regs used in _nrf24l01SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2930                           ;nrf24l01SendString@waitForAck stored from wreg
  2931  0227  0020               	movlb	0	; select bank0
  2932  0228  00A4               	movwf	nrf24l01SendString@waitForAck
  2933                           
  2934                           ;nrf24l01.c: 165: unsigned char i;
  2935                           ;nrf24l01.c: 169: nrf24l01.waitForTXACK = waitForAck;
  2936  0229  0824               	movf	nrf24l01SendString@waitForAck,w
  2937  022A  3901               	andlw	1
  2938  022B  104F               	bcf	_nrf24l01,0	;volatile
  2939  022C  1D03               	skipz
  2940  022D  144F               	bsf	_nrf24l01,0	;volatile
  2941  022E                     l1641:	
  2942                           ;nrf24l01.c: 172: RESEND:
  2943                           
  2944                           
  2945                           ;nrf24l01.c: 175: i = 0xFF;
  2946  022E  30FF               	movlw	255
  2947  022F  00A3               	movwf	??_nrf24l01SendString
  2948  0230  0823               	movf	??_nrf24l01SendString,w
  2949  0231  00A5               	movwf	nrf24l01SendString@i
  2950  0232                     l1649:	
  2951                           ;nrf24l01.c: 176: while (nrf24l01.TXBusy){
  2952                           
  2953  0232  0020               	movlb	0	; select bank0
  2954  0233  1CCF               	btfss	_nrf24l01,1	;volatile
  2955  0234  2A3E               	goto	l269
  2956                           
  2957                           ;nrf24l01.c: 177: if (!--i) {
  2958  0235  3001               	movlw	1
  2959  0236  02A5               	subwf	nrf24l01SendString@i,f
  2960  0237  1903               	btfsc	3,2
  2961  0238  2A2E               	goto	l1641
  2962                           
  2963                           ;nrf24l01.c: 179: }
  2964                           ;nrf24l01.c: 180: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2965                           
  2966                           ;nrf24l01.c: 178: goto RESEND;
  2967  0239  3085               	movlw	133
  2968  023A                     u1577:	
  2969  023A  0B89               	decfsz	9,f
  2970  023B  2A3A               	goto	u1577
  2971  023C  0000               	nop
  2972  023D  2A32               	goto	l1649
  2973  023E                     l269:	
  2974                           
  2975                           ;nrf24l01.c: 181: }
  2976                           ;nrf24l01.c: 185: nrf24l01.TXBusy = 1;
  2977  023E  14CF               	bsf	_nrf24l01,1	;volatile
  2978                           
  2979                           ;nrf24l01.c: 188: enableInterrupts(0);
  2980  023F  3000               	movlw	0
  2981  0240  262B               	fcall	_enableInterrupts
  2982                           
  2983                           ;nrf24l01.c: 191: nrf24l01SetRXMode(0);
  2984  0241  3000               	movlw	0
  2985  0242  2464               	fcall	_nrf24l01SetRXMode
  2986                           
  2987                           ;nrf24l01.c: 194: nrf24l01SPIStart();
  2988  0243  261D               	fcall	_nrf24l01SPIStart
  2989                           
  2990                           ;nrf24l01.c: 197: nrf24l01SPISend(0b10110000);
  2991  0244  30B0               	movlw	176
  2992  0245  2609               	fcall	_nrf24l01SPISend
  2993                           
  2994                           ;nrf24l01.c: 200: for (i = 0; (nrf24l01Name[i] != '\0') && (i < sizeof(nrf24l01Name)); i
      +                          ++){
  2995  0246  0020               	movlb	0	; select bank0
  2996  0247  01A5               	clrf	nrf24l01SendString@i
  2997  0248  2A54               	goto	l1659
  2998  0249                     l1655:	
  2999                           
  3000                           ;nrf24l01.c: 201: nrf24l01SPISend(nrf24l01Name[i]);
  3001  0249  0825               	movf	nrf24l01SendString@i,w
  3002  024A  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  3003  024B  0086               	movwf	6
  3004  024C  0187               	clrf	7
  3005  024D  0801               	movf	1,w
  3006  024E  2609               	fcall	_nrf24l01SPISend
  3007  024F  3001               	movlw	1
  3008  0250  0020               	movlb	0	; select bank0
  3009  0251  00A3               	movwf	??_nrf24l01SendString
  3010  0252  0823               	movf	??_nrf24l01SendString,w
  3011  0253  07A5               	addwf	nrf24l01SendString@i,f
  3012  0254                     l1659:	
  3013  0254  0825               	movf	nrf24l01SendString@i,w
  3014  0255  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  3015  0256  0086               	movwf	6
  3016  0257  0187               	clrf	7
  3017  0258  0801               	movf	1,w
  3018  0259  1903               	btfsc	3,2
  3019  025A  2A5F               	goto	l1663
  3020  025B  3010               	movlw	16
  3021  025C  0225               	subwf	nrf24l01SendString@i,w
  3022  025D  1C03               	skipc
  3023  025E  2A49               	goto	l1655
  3024  025F                     l1663:	
  3025                           
  3026                           ;nrf24l01.c: 202: }
  3027                           ;nrf24l01.c: 205: nrf24l01SPISend('/');
  3028  025F  302F               	movlw	47
  3029  0260  2609               	fcall	_nrf24l01SPISend
  3030                           
  3031                           ;nrf24l01.c: 208: for (i = 0; (nrf24l01TXTopic[i] != '\0') && (i < sizeof(nrf24l01TXTopi
      +                          c)); i++){
  3032  0261  0020               	movlb	0	; select bank0
  3033  0262  01A5               	clrf	nrf24l01SendString@i
  3034  0263  2A6F               	goto	l1671
  3035  0264                     l1667:	
  3036                           
  3037                           ;nrf24l01.c: 209: nrf24l01SPISend(nrf24l01TXTopic[i]);
  3038  0264  0825               	movf	nrf24l01SendString@i,w
  3039  0265  3E60               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3040  0266  0086               	movwf	6
  3041  0267  0187               	clrf	7
  3042  0268  0801               	movf	1,w
  3043  0269  2609               	fcall	_nrf24l01SPISend
  3044  026A  3001               	movlw	1
  3045  026B  0020               	movlb	0	; select bank0
  3046  026C  00A3               	movwf	??_nrf24l01SendString
  3047  026D  0823               	movf	??_nrf24l01SendString,w
  3048  026E  07A5               	addwf	nrf24l01SendString@i,f
  3049  026F                     l1671:	
  3050  026F  0825               	movf	nrf24l01SendString@i,w
  3051  0270  3E60               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3052  0271  0086               	movwf	6
  3053  0272  0187               	clrf	7
  3054  0273  0801               	movf	1,w
  3055  0274  1903               	btfsc	3,2
  3056  0275  2A7A               	goto	l1675
  3057  0276  3008               	movlw	8
  3058  0277  0225               	subwf	nrf24l01SendString@i,w
  3059  0278  1C03               	skipc
  3060  0279  2A64               	goto	l1667
  3061  027A                     l1675:	
  3062                           
  3063                           ;nrf24l01.c: 210: }
  3064                           ;nrf24l01.c: 213: nrf24l01SPISend('/');
  3065  027A  302F               	movlw	47
  3066  027B  2609               	fcall	_nrf24l01SPISend
  3067                           
  3068                           ;nrf24l01.c: 216: for (i = 0; (nrf24l01TXValue[i] != '\0') && (i < sizeof(nrf24l01TXValu
      +                          e)); i++){
  3069  027C  0020               	movlb	0	; select bank0
  3070  027D  01A5               	clrf	nrf24l01SendString@i
  3071  027E  2A8A               	goto	l1683
  3072  027F                     l1679:	
  3073                           
  3074                           ;nrf24l01.c: 217: nrf24l01SPISend(nrf24l01TXValue[i]);
  3075  027F  0825               	movf	nrf24l01SendString@i,w
  3076  0280  3E58               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3077  0281  0086               	movwf	6
  3078  0282  0187               	clrf	7
  3079  0283  0801               	movf	1,w
  3080  0284  2609               	fcall	_nrf24l01SPISend
  3081  0285  3001               	movlw	1
  3082  0286  0020               	movlb	0	; select bank0
  3083  0287  00A3               	movwf	??_nrf24l01SendString
  3084  0288  0823               	movf	??_nrf24l01SendString,w
  3085  0289  07A5               	addwf	nrf24l01SendString@i,f
  3086  028A                     l1683:	
  3087  028A  0825               	movf	nrf24l01SendString@i,w
  3088  028B  3E58               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3089  028C  0086               	movwf	6
  3090  028D  0187               	clrf	7
  3091  028E  0801               	movf	1,w
  3092  028F  1903               	btfsc	3,2
  3093  0290  2A95               	goto	l1687
  3094  0291  3008               	movlw	8
  3095  0292  0225               	subwf	nrf24l01SendString@i,w
  3096  0293  1C03               	skipc
  3097  0294  2A7F               	goto	l1679
  3098  0295                     l1687:	
  3099                           
  3100                           ;nrf24l01.c: 218: }
  3101                           ;nrf24l01.c: 221: nrf24l01SPIEnd();
  3102  0295  2624               	fcall	_nrf24l01SPIEnd
  3103                           
  3104                           ;nrf24l01.c: 224: PORTAbits.RA0 = 1;
  3105  0296  0020               	movlb	0	; select bank0
  3106  0297  140C               	bsf	12,0	;volatile
  3107                           
  3108                           ;nrf24l01.c: 225: _delay((unsigned long)((20)*(16000000/4000000.0)));
  3109  0298  301A               	movlw	26
  3110  0299                     u1587:	
  3111  0299  0B89               	decfsz	9,f
  3112  029A  2A99               	goto	u1587
  3113  029B  3200               	nop2
  3114                           
  3115                           ;nrf24l01.c: 226: PORTAbits.RA0 = 0;
  3116  029C  0020               	movlb	0	; select bank0
  3117  029D  100C               	bcf	12,0	;volatile
  3118                           
  3119                           ;nrf24l01.c: 229: enableInterrupts(1);
  3120  029E  3001               	movlw	1
  3121  029F  262B               	fcall	_enableInterrupts
  3122                           
  3123                           ;nrf24l01.c: 232: i = 0xFF;
  3124  02A0  30FF               	movlw	255
  3125  02A1  0020               	movlb	0	; select bank0
  3126  02A2  00A3               	movwf	??_nrf24l01SendString
  3127  02A3  0823               	movf	??_nrf24l01SendString,w
  3128  02A4  00A5               	movwf	nrf24l01SendString@i
  3129  02A5                     l1703:	
  3130                           ;nrf24l01.c: 233: while (nrf24l01.waitForTXACK){
  3131                           
  3132  02A5  0020               	movlb	0	; select bank0
  3133  02A6  1C4F               	btfss	_nrf24l01,0	;volatile
  3134  02A7  0008               	return
  3135                           
  3136                           ;nrf24l01.c: 234: if (!--i) {
  3137  02A8  3001               	movlw	1
  3138  02A9  02A5               	subwf	nrf24l01SendString@i,f
  3139  02AA  1903               	btfsc	3,2
  3140  02AB  2A2E               	goto	l1641
  3141                           
  3142                           ;nrf24l01.c: 236: }
  3143                           ;nrf24l01.c: 237: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3144                           
  3145                           ;nrf24l01.c: 235: goto RESEND;
  3146  02AC  3085               	movlw	133
  3147  02AD                     u1597:	
  3148  02AD  0B89               	decfsz	9,f
  3149  02AE  2AAD               	goto	u1597
  3150  02AF  0000               	nop
  3151  02B0  2AA5               	goto	l1703
  3152  02B1                     __end_of_nrf24l01SendString:	
  3153                           
  3154                           	psect	text11
  3155  02B1                     __ptext11:	
  3156 ;; *************** function _getADCValue *****************
  3157 ;; Defined at:
  3158 ;;		line 41 in file "main.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;  channel         1    wreg     unsigned char 
  3161 ;;  divider         4   17[BANK0 ] unsigned long 
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;  channel         1   25[BANK0 ] unsigned char 
  3164 ;;  adcSum          4   27[BANK0 ] unsigned long 
  3165 ;;  adcLoop         1   26[BANK0 ] unsigned char 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  4   17[BANK0 ] unsigned long 
  3168 ;; Registers used:
  3169 ;;		wreg, status,2, status,0, pclath, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMMON   BANK0   BANK1
  3175 ;;      Params:         0       4       0
  3176 ;;      Locals:         0       6       0
  3177 ;;      Temps:          0       4       0
  3178 ;;      Totals:         0      14       0
  3179 ;;Total ram usage:       14 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    7
  3182 ;; This function calls:
  3183 ;;		___lldiv
  3184 ;;		___lmul
  3185 ;; This function is called by:
  3186 ;;		_loop
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           
  3191                           ;psect for function _getADCValue
  3192  02B1                     _getADCValue:	
  3193                           
  3194                           ;incstack = 0
  3195                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  3196                           ;getADCValue@channel stored from wreg
  3197  02B1  0020               	movlb	0	; select bank0
  3198  02B2  00B9               	movwf	getADCValue@channel
  3199                           
  3200                           ;main.c: 43: unsigned long adcSum = 0;
  3201  02B3  3000               	movlw	0
  3202  02B4  00BE               	movwf	getADCValue@adcSum+3
  3203  02B5  3000               	movlw	0
  3204  02B6  00BD               	movwf	getADCValue@adcSum+2
  3205  02B7  3000               	movlw	0
  3206  02B8  00BC               	movwf	getADCValue@adcSum+1
  3207  02B9  3000               	movlw	0
  3208  02BA  00BB               	movwf	getADCValue@adcSum
  3209                           
  3210                           ;main.c: 44: unsigned char adcLoop = 255;
  3211  02BB  30FF               	movlw	255
  3212  02BC  00B5               	movwf	??_getADCValue
  3213  02BD  0835               	movf	??_getADCValue,w
  3214  02BE  00BA               	movwf	getADCValue@adcLoop
  3215                           
  3216                           ;main.c: 46: ADCON0bits.CHS = channel;
  3217  02BF  0839               	movf	getADCValue@channel,w
  3218  02C0  00B5               	movwf	??_getADCValue
  3219  02C1  0DB5               	rlf	??_getADCValue,f
  3220  02C2  0DB5               	rlf	??_getADCValue,f
  3221  02C3  0021               	movlb	1	; select bank1
  3222  02C4  081D               	movf	29,w	;volatile
  3223  02C5  0020               	movlb	0	; select bank0
  3224  02C6  0635               	xorwf	??_getADCValue,w
  3225  02C7  3983               	andlw	-125
  3226  02C8  0635               	xorwf	??_getADCValue,w
  3227  02C9  0021               	movlb	1	; select bank1
  3228  02CA  009D               	movwf	29	;volatile
  3229                           
  3230                           ;main.c: 47: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3231  02CB  30A0               	movlw	160
  3232  02CC                     u1607:	
  3233  02CC  3200               	nop2
  3234  02CD  0B89               	decfsz	9,f
  3235  02CE  2ACC               	goto	u1607
  3236  02CF                     l1583:	
  3237                           ;main.c: 49: while (--adcLoop){
  3238                           
  3239  02CF  3001               	movlw	1
  3240  02D0  0020               	movlb	0	; select bank0
  3241  02D1  02BA               	subwf	getADCValue@adcLoop,f
  3242  02D2  1903               	btfsc	3,2
  3243  02D3  2AF9               	goto	l1585
  3244                           
  3245                           ;main.c: 51: ADCON0bits.ADGO = 1;
  3246  02D4  0021               	movlb	1	; select bank1
  3247  02D5  149D               	bsf	29,1	;volatile
  3248  02D6                     l153:	
  3249                           ;main.c: 52: while (ADCON0bits.ADGO){
  3250                           
  3251  02D6  0021               	movlb	1	; select bank1
  3252  02D7  1C9D               	btfss	29,1	;volatile
  3253  02D8  2ADB               	goto	l1581
  3254                           
  3255                           ;main.c: 53: __nop();
  3256  02D9  0000               	nop
  3257  02DA  2AD6               	goto	l153
  3258  02DB                     l1581:	
  3259                           
  3260                           ;main.c: 54: }
  3261                           ;main.c: 56: adcSum+= ADRESL;
  3262  02DB  081B               	movf	27,w	;volatile
  3263  02DC  0020               	movlb	0	; select bank0
  3264  02DD  00B5               	movwf	??_getADCValue
  3265  02DE  01B6               	clrf	??_getADCValue+1
  3266  02DF  01B7               	clrf	??_getADCValue+2
  3267  02E0  01B8               	clrf	??_getADCValue+3
  3268  02E1  0835               	movf	??_getADCValue,w
  3269  02E2  07BB               	addwf	getADCValue@adcSum,f
  3270  02E3  0836               	movf	??_getADCValue+1,w
  3271  02E4  3DBC               	addwfc	getADCValue@adcSum+1,f
  3272  02E5  0837               	movf	??_getADCValue+2,w
  3273  02E6  3DBD               	addwfc	getADCValue@adcSum+2,f
  3274  02E7  0838               	movf	??_getADCValue+3,w
  3275  02E8  3DBE               	addwfc	getADCValue@adcSum+3,f
  3276                           
  3277                           ;main.c: 57: adcSum+= (unsigned) (ADRESH << 8);
  3278  02E9  0021               	movlb	1	; select bank1
  3279  02EA  081C               	movf	28,w	;volatile
  3280  02EB  0020               	movlb	0	; select bank0
  3281  02EC  00B5               	movwf	??_getADCValue
  3282  02ED  01B6               	clrf	??_getADCValue+1
  3283  02EE  0835               	movf	??_getADCValue,w
  3284  02EF  00B6               	movwf	??_getADCValue+1
  3285  02F0  01B5               	clrf	??_getADCValue
  3286  02F1  0835               	movf	??_getADCValue,w
  3287  02F2  07BB               	addwf	getADCValue@adcSum,f
  3288  02F3  0836               	movf	??_getADCValue+1,w
  3289  02F4  3DBC               	addwfc	getADCValue@adcSum+1,f
  3290  02F5  3000               	movlw	0
  3291  02F6  3DBD               	addwfc	getADCValue@adcSum+2,f
  3292  02F7  3DBE               	addwfc	getADCValue@adcSum+3,f
  3293  02F8  2ACF               	goto	l1583
  3294  02F9                     l1585:	
  3295                           
  3296                           ;main.c: 58: }
  3297                           ;main.c: 60: adcSum*= 100;
  3298  02F9  3000               	movlw	0
  3299  02FA  00A6               	movwf	___lmul@multiplier+3
  3300  02FB  3000               	movlw	0
  3301  02FC  00A5               	movwf	___lmul@multiplier+2
  3302  02FD  3000               	movlw	0
  3303  02FE  00A4               	movwf	___lmul@multiplier+1
  3304  02FF  3064               	movlw	100
  3305  0300  00A3               	movwf	___lmul@multiplier
  3306  0301  083E               	movf	getADCValue@adcSum+3,w
  3307  0302  00AA               	movwf	___lmul@multiplicand+3
  3308  0303  083D               	movf	getADCValue@adcSum+2,w
  3309  0304  00A9               	movwf	___lmul@multiplicand+2
  3310  0305  083C               	movf	getADCValue@adcSum+1,w
  3311  0306  00A8               	movwf	___lmul@multiplicand+1
  3312  0307  083B               	movf	getADCValue@adcSum,w
  3313  0308  00A7               	movwf	___lmul@multiplicand
  3314  0309  2504               	fcall	___lmul
  3315  030A  0020               	movlb	0	; select bank0
  3316  030B  0826               	movf	?___lmul+3,w
  3317  030C  00BE               	movwf	getADCValue@adcSum+3
  3318  030D  0825               	movf	?___lmul+2,w
  3319  030E  00BD               	movwf	getADCValue@adcSum+2
  3320  030F  0824               	movf	?___lmul+1,w
  3321  0310  00BC               	movwf	getADCValue@adcSum+1
  3322  0311  0823               	movf	?___lmul,w
  3323  0312  00BB               	movwf	getADCValue@adcSum
  3324                           
  3325                           ;main.c: 61: adcSum/= divider;
  3326  0313  0834               	movf	getADCValue@divider+3,w
  3327  0314  00A6               	movwf	___lldiv@divisor+3
  3328  0315  0833               	movf	getADCValue@divider+2,w
  3329  0316  00A5               	movwf	___lldiv@divisor+2
  3330  0317  0832               	movf	getADCValue@divider+1,w
  3331  0318  00A4               	movwf	___lldiv@divisor+1
  3332  0319  0831               	movf	getADCValue@divider,w
  3333  031A  00A3               	movwf	___lldiv@divisor
  3334  031B  083E               	movf	getADCValue@adcSum+3,w
  3335  031C  00AA               	movwf	___lldiv@dividend+3
  3336  031D  083D               	movf	getADCValue@adcSum+2,w
  3337  031E  00A9               	movwf	___lldiv@dividend+2
  3338  031F  083C               	movf	getADCValue@adcSum+1,w
  3339  0320  00A8               	movwf	___lldiv@dividend+1
  3340  0321  083B               	movf	getADCValue@adcSum,w
  3341  0322  00A7               	movwf	___lldiv@dividend
  3342  0323  2411               	fcall	___lldiv
  3343  0324  0020               	movlb	0	; select bank0
  3344  0325  0826               	movf	?___lldiv+3,w
  3345  0326  00BE               	movwf	getADCValue@adcSum+3
  3346  0327  0825               	movf	?___lldiv+2,w
  3347  0328  00BD               	movwf	getADCValue@adcSum+2
  3348  0329  0824               	movf	?___lldiv+1,w
  3349  032A  00BC               	movwf	getADCValue@adcSum+1
  3350  032B  0823               	movf	?___lldiv,w
  3351  032C  00BB               	movwf	getADCValue@adcSum
  3352                           
  3353                           ;main.c: 63: return adcSum;
  3354  032D  083E               	movf	getADCValue@adcSum+3,w
  3355  032E  00B4               	movwf	?_getADCValue+3
  3356  032F  083D               	movf	getADCValue@adcSum+2,w
  3357  0330  00B3               	movwf	?_getADCValue+2
  3358  0331  083C               	movf	getADCValue@adcSum+1,w
  3359  0332  00B2               	movwf	?_getADCValue+1
  3360  0333  083B               	movf	getADCValue@adcSum,w
  3361  0334  00B1               	movwf	?_getADCValue
  3362  0335  0008               	return
  3363  0336                     __end_of_getADCValue:	
  3364                           
  3365                           	psect	text12
  3366  0504                     __ptext12:	
  3367 ;; *************** function ___lmul *****************
  3368 ;; Defined at:
  3369 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;  multiplier      4    3[BANK0 ] unsigned long 
  3372 ;;  multiplicand    4    7[BANK0 ] unsigned long 
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;  product         4   11[BANK0 ] unsigned long 
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  4    3[BANK0 ] unsigned long 
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, status,0
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMMON   BANK0   BANK1
  3384 ;;      Params:         0       8       0
  3385 ;;      Locals:         0       4       0
  3386 ;;      Temps:          0       0       0
  3387 ;;      Totals:         0      12       0
  3388 ;;Total ram usage:       12 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; Hardware stack levels required when called:    6
  3391 ;; This function calls:
  3392 ;;		Nothing
  3393 ;; This function is called by:
  3394 ;;		_getADCValue
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           
  3399                           ;psect for function ___lmul
  3400  0504                     ___lmul:	
  3401                           
  3402                           ;incstack = 0
  3403                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3404  0504  3000               	movlw	0
  3405  0505  0020               	movlb	0	; select bank0
  3406  0506  00AE               	movwf	___lmul@product+3
  3407  0507  3000               	movlw	0
  3408  0508  00AD               	movwf	___lmul@product+2
  3409  0509  3000               	movlw	0
  3410  050A  00AC               	movwf	___lmul@product+1
  3411  050B  3000               	movlw	0
  3412  050C  00AB               	movwf	___lmul@product
  3413  050D                     l1485:	
  3414  050D  1C23               	btfss	___lmul@multiplier,0
  3415  050E  2D17               	goto	l1489
  3416  050F  0827               	movf	___lmul@multiplicand,w
  3417  0510  07AB               	addwf	___lmul@product,f
  3418  0511  0828               	movf	___lmul@multiplicand+1,w
  3419  0512  3DAC               	addwfc	___lmul@product+1,f
  3420  0513  0829               	movf	___lmul@multiplicand+2,w
  3421  0514  3DAD               	addwfc	___lmul@product+2,f
  3422  0515  082A               	movf	___lmul@multiplicand+3,w
  3423  0516  3DAE               	addwfc	___lmul@product+3,f
  3424  0517                     l1489:	
  3425  0517  3001               	movlw	1
  3426  0518                     u885:	
  3427  0518  35A7               	lslf	___lmul@multiplicand,f
  3428  0519  0DA8               	rlf	___lmul@multiplicand+1,f
  3429  051A  0DA9               	rlf	___lmul@multiplicand+2,f
  3430  051B  0DAA               	rlf	___lmul@multiplicand+3,f
  3431  051C  0B89               	decfsz	9,f
  3432  051D  2D18               	goto	u885
  3433  051E  3001               	movlw	1
  3434  051F                     u895:	
  3435  051F  36A6               	lsrf	___lmul@multiplier+3,f
  3436  0520  0CA5               	rrf	___lmul@multiplier+2,f
  3437  0521  0CA4               	rrf	___lmul@multiplier+1,f
  3438  0522  0CA3               	rrf	___lmul@multiplier,f
  3439  0523  0B89               	decfsz	9,f
  3440  0524  2D1F               	goto	u895
  3441  0525  0826               	movf	___lmul@multiplier+3,w
  3442  0526  0425               	iorwf	___lmul@multiplier+2,w
  3443  0527  0424               	iorwf	___lmul@multiplier+1,w
  3444  0528  0423               	iorwf	___lmul@multiplier,w
  3445  0529  1D03               	skipz
  3446  052A  2D0D               	goto	l1485
  3447  052B  082E               	movf	___lmul@product+3,w
  3448  052C  00A6               	movwf	?___lmul+3
  3449  052D  082D               	movf	___lmul@product+2,w
  3450  052E  00A5               	movwf	?___lmul+2
  3451  052F  082C               	movf	___lmul@product+1,w
  3452  0530  00A4               	movwf	?___lmul+1
  3453  0531  082B               	movf	___lmul@product,w
  3454  0532  00A3               	movwf	?___lmul
  3455  0533  0008               	return
  3456  0534                     __end_of___lmul:	
  3457                           
  3458                           	psect	text13
  3459  0411                     __ptext13:	
  3460 ;; *************** function ___lldiv *****************
  3461 ;; Defined at:
  3462 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  divisor         4    3[BANK0 ] unsigned long 
  3465 ;;  dividend        4    7[BANK0 ] unsigned long 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  quotient        4   12[BANK0 ] unsigned long 
  3468 ;;  counter         1   16[BANK0 ] unsigned char 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  4    3[BANK0 ] unsigned long 
  3471 ;; Registers used:
  3472 ;;		wreg, status,2, status,0
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMMON   BANK0   BANK1
  3478 ;;      Params:         0       8       0
  3479 ;;      Locals:         0       5       0
  3480 ;;      Temps:          0       1       0
  3481 ;;      Totals:         0      14       0
  3482 ;;Total ram usage:       14 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    6
  3485 ;; This function calls:
  3486 ;;		Nothing
  3487 ;; This function is called by:
  3488 ;;		_getADCValue
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           
  3493                           ;psect for function ___lldiv
  3494  0411                     ___lldiv:	
  3495                           
  3496                           ;incstack = 0
  3497                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3498  0411  3000               	movlw	0
  3499  0412  0020               	movlb	0	; select bank0
  3500  0413  00AF               	movwf	___lldiv@quotient+3
  3501  0414  3000               	movlw	0
  3502  0415  00AE               	movwf	___lldiv@quotient+2
  3503  0416  3000               	movlw	0
  3504  0417  00AD               	movwf	___lldiv@quotient+1
  3505  0418  3000               	movlw	0
  3506  0419  00AC               	movwf	___lldiv@quotient
  3507  041A  0826               	movf	___lldiv@divisor+3,w
  3508  041B  0425               	iorwf	___lldiv@divisor+2,w
  3509  041C  0424               	iorwf	___lldiv@divisor+1,w
  3510  041D  0423               	iorwf	___lldiv@divisor,w
  3511  041E  1903               	skipnz
  3512  041F  2C5B               	goto	l1517
  3513  0420  01B0               	clrf	___lldiv@counter
  3514  0421  0AB0               	incf	___lldiv@counter,f
  3515  0422                     l1503:	
  3516  0422  1BA6               	btfsc	___lldiv@divisor+3,7
  3517  0423  2C30               	goto	l1505
  3518  0424  3001               	movlw	1
  3519  0425                     u925:	
  3520  0425  35A3               	lslf	___lldiv@divisor,f
  3521  0426  0DA4               	rlf	___lldiv@divisor+1,f
  3522  0427  0DA5               	rlf	___lldiv@divisor+2,f
  3523  0428  0DA6               	rlf	___lldiv@divisor+3,f
  3524  0429  0B89               	decfsz	9,f
  3525  042A  2C25               	goto	u925
  3526  042B  3001               	movlw	1
  3527  042C  00AB               	movwf	??___lldiv
  3528  042D  082B               	movf	??___lldiv,w
  3529  042E  07B0               	addwf	___lldiv@counter,f
  3530  042F  2C22               	goto	l1503
  3531  0430                     l1505:	
  3532  0430  3001               	movlw	1
  3533  0431                     u945:	
  3534  0431  35AC               	lslf	___lldiv@quotient,f
  3535  0432  0DAD               	rlf	___lldiv@quotient+1,f
  3536  0433  0DAE               	rlf	___lldiv@quotient+2,f
  3537  0434  0DAF               	rlf	___lldiv@quotient+3,f
  3538  0435  0B89               	decfsz	9,f
  3539  0436  2C31               	goto	u945
  3540  0437  0826               	movf	___lldiv@divisor+3,w
  3541  0438  022A               	subwf	___lldiv@dividend+3,w
  3542  0439  1D03               	skipz
  3543  043A  2C45               	goto	u955
  3544  043B  0825               	movf	___lldiv@divisor+2,w
  3545  043C  0229               	subwf	___lldiv@dividend+2,w
  3546  043D  1D03               	skipz
  3547  043E  2C45               	goto	u955
  3548  043F  0824               	movf	___lldiv@divisor+1,w
  3549  0440  0228               	subwf	___lldiv@dividend+1,w
  3550  0441  1D03               	skipz
  3551  0442  2C45               	goto	u955
  3552  0443  0823               	movf	___lldiv@divisor,w
  3553  0444  0227               	subwf	___lldiv@dividend,w
  3554  0445                     u955:	
  3555  0445  1C03               	skipc
  3556  0446  2C50               	goto	l1513
  3557  0447  0823               	movf	___lldiv@divisor,w
  3558  0448  02A7               	subwf	___lldiv@dividend,f
  3559  0449  0824               	movf	___lldiv@divisor+1,w
  3560  044A  3BA8               	subwfb	___lldiv@dividend+1,f
  3561  044B  0825               	movf	___lldiv@divisor+2,w
  3562  044C  3BA9               	subwfb	___lldiv@dividend+2,f
  3563  044D  0826               	movf	___lldiv@divisor+3,w
  3564  044E  3BAA               	subwfb	___lldiv@dividend+3,f
  3565  044F  142C               	bsf	___lldiv@quotient,0
  3566  0450                     l1513:	
  3567  0450  3001               	movlw	1
  3568  0451                     u965:	
  3569  0451  36A6               	lsrf	___lldiv@divisor+3,f
  3570  0452  0CA5               	rrf	___lldiv@divisor+2,f
  3571  0453  0CA4               	rrf	___lldiv@divisor+1,f
  3572  0454  0CA3               	rrf	___lldiv@divisor,f
  3573  0455  0B89               	decfsz	9,f
  3574  0456  2C51               	goto	u965
  3575  0457  3001               	movlw	1
  3576  0458  02B0               	subwf	___lldiv@counter,f
  3577  0459  1D03               	btfss	3,2
  3578  045A  2C30               	goto	l1505
  3579  045B                     l1517:	
  3580  045B  082F               	movf	___lldiv@quotient+3,w
  3581  045C  00A6               	movwf	?___lldiv+3
  3582  045D  082E               	movf	___lldiv@quotient+2,w
  3583  045E  00A5               	movwf	?___lldiv+2
  3584  045F  082D               	movf	___lldiv@quotient+1,w
  3585  0460  00A4               	movwf	?___lldiv+1
  3586  0461  082C               	movf	___lldiv@quotient,w
  3587  0462  00A3               	movwf	?___lldiv
  3588  0463  0008               	return
  3589  0464                     __end_of___lldiv:	
  3590                           
  3591                           	psect	text14
  3592  05FE                     __ptext14:	
  3593 ;; *************** function _checkRxData *****************
  3594 ;; Defined at:
  3595 ;;		line 79 in file "main.c"
  3596 ;; Parameters:    Size  Location     Type
  3597 ;;		None
  3598 ;; Auto vars:     Size  Location     Type
  3599 ;;		None
  3600 ;; Return value:  Size  Location     Type
  3601 ;;                  1    wreg      void 
  3602 ;; Registers used:
  3603 ;;		wreg, status,2, status,0, pclath, cstack
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMMON   BANK0   BANK1
  3609 ;;      Params:         0       0       0
  3610 ;;      Locals:         0       0       0
  3611 ;;      Temps:          0       0       0
  3612 ;;      Totals:         0       0       0
  3613 ;;Total ram usage:        0 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    9
  3616 ;; This function calls:
  3617 ;;		_nrf24l01SetRXMode
  3618 ;;		_sleep
  3619 ;; This function is called by:
  3620 ;;		_loop
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           
  3625                           ;psect for function _checkRxData
  3626  05FE                     _checkRxData:	
  3627                           
  3628                           ;main.c: 81: nrf24l01SetRXMode(1);
  3629                           
  3630                           ;incstack = 0
  3631                           ; Regs used in _checkRxData: [wreg+status,2+status,0+pclath+cstack]
  3632  05FE  3001               	movlw	1
  3633  05FF  2464               	fcall	_nrf24l01SetRXMode
  3634                           
  3635                           ;main.c: 83: sleep();
  3636  0600  2614               	fcall	_sleep
  3637                           
  3638                           ;main.c: 85: if (!nrf24l01.RXPending){
  3639  0601  0020               	movlb	0	; select bank0
  3640  0602  1D4F               	btfss	_nrf24l01,2	;volatile
  3641  0603  0008               	return
  3642                           
  3643                           ;main.c: 87: }
  3644                           ;main.c: 89: counter++;
  3645                           
  3646                           ;main.c: 86: return;
  3647  0604  3001               	movlw	1
  3648  0605  07CC               	addwf	_counter,f
  3649  0606  3000               	movlw	0
  3650  0607  3DCD               	addwfc	_counter+1,f
  3651  0608  0008               	return
  3652  0609                     __end_of_checkRxData:	
  3653                           
  3654                           	psect	text15
  3655  0614                     __ptext15:	
  3656 ;; *************** function _sleep *****************
  3657 ;; Defined at:
  3658 ;;		line 66 in file "main.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;		None
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      void 
  3665 ;; Registers used:
  3666 ;;		None
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMMON   BANK0   BANK1
  3672 ;;      Params:         0       0       0
  3673 ;;      Locals:         0       0       0
  3674 ;;      Temps:          0       0       0
  3675 ;;      Totals:         0       0       0
  3676 ;;Total ram usage:        0 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; Hardware stack levels required when called:    6
  3679 ;; This function calls:
  3680 ;;		Nothing
  3681 ;; This function is called by:
  3682 ;;		_checkRxData
  3683 ;;		_loop
  3684 ;;		_main
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           
  3689                           ;psect for function _sleep
  3690  0614                     _sleep:	
  3691  0614                     l160:	
  3692                           ;incstack = 0
  3693                           ; Regs used in _sleep: []
  3694                           ;main.c: 67: while (1){
  3695                           
  3696  0614  0063               	sleep	;# 
  3697                           
  3698                           ;main.c: 70: __nop();
  3699  0615  0000               	nop
  3700                           
  3701                           ;main.c: 71: __nop();
  3702  0616  0000               	nop
  3703                           
  3704                           ;main.c: 73: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  3705  0617  0020               	movlb	0	; select bank0
  3706  0618  1A03               	btfsc	3,4	;volatile
  3707  0619  2E14               	goto	l160
  3708  061A  1D83               	btfss	3,3	;volatile
  3709  061B  0008               	return
  3710  061C  2E14               	goto	l160
  3711  061D                     __end_of_sleep:	
  3712                           ;main.c: 74: return;
  3713                           
  3714                           
  3715                           	psect	intentry
  3716  0004                     __pintentry:	
  3717 ;; *************** function _ISR *****************
  3718 ;; Defined at:
  3719 ;;		line 34 in file "main.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;		None
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;		None
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  1    wreg      void 
  3726 ;; Registers used:
  3727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMMON   BANK0   BANK1
  3733 ;;      Params:         0       0       0
  3734 ;;      Locals:         0       0       0
  3735 ;;      Temps:          0       1       0
  3736 ;;      Totals:         0       1       0
  3737 ;;Total ram usage:        1 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; Hardware stack levels required when called:    5
  3740 ;; This function calls:
  3741 ;;		_nrf24l01ISR
  3742 ;; This function is called by:
  3743 ;;		Interrupt level 1
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747  0004                     _ISR:	
  3748                           
  3749                           ;incstack = 0
  3750  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3751                           
  3752                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3753  0005  3180               	pagesel	$
  3754  0006  0020               	movlb	0	; select bank0
  3755  0007  087F               	movf	127,w
  3756  0008  00A2               	movwf	??_ISR
  3757                           
  3758                           ;main.c: 35: if (INTCONbits.INTF){
  3759  0009  1C8B               	btfss	11,1	;volatile
  3760  000A  280D               	goto	i1l148
  3761                           
  3762                           ;main.c: 36: nrf24l01ISR();
  3763  000B  2588               	fcall	_nrf24l01ISR
  3764                           
  3765                           ;main.c: 37: INTCONbits.INTF = 0;
  3766  000C  108B               	bcf	11,1	;volatile
  3767  000D                     i1l148:	
  3768  000D  0020               	movlb	0	; select bank0
  3769  000E  0822               	movf	??_ISR,w
  3770  000F  00FF               	movwf	127
  3771  0010  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3772  0011  0009               	retfie
  3773  0012                     __end_of_ISR:	
  3774                           
  3775                           	psect	text17
  3776  0588                     __ptext17:	
  3777 ;; *************** function _nrf24l01ISR *****************
  3778 ;; Defined at:
  3779 ;;		line 119 in file "nrf24l01.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;		None
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;  status          1    1[BANK0 ] struct .
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  1    wreg      void 
  3786 ;; Registers used:
  3787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMMON   BANK0   BANK1
  3793 ;;      Params:         0       0       0
  3794 ;;      Locals:         0       1       0
  3795 ;;      Temps:          1       0       0
  3796 ;;      Totals:         1       1       0
  3797 ;;Total ram usage:        2 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; Hardware stack levels required when called:    4
  3800 ;; This function calls:
  3801 ;;		_nrf24l01HandleRX
  3802 ;;		_nrf24l01Send
  3803 ;;		_nrf24l01SetRXMode
  3804 ;; This function is called by:
  3805 ;;		_ISR
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           
  3810                           ;psect for function _nrf24l01ISR
  3811  0588                     _nrf24l01ISR:	
  3812                           
  3813                           ;nrf24l01.c: 121: n_STATUS_t status;
  3814                           ;nrf24l01.c: 122: status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  3815                           
  3816                           ;incstack = 0
  3817                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3818  0588  0020               	movlb	0	; select bank0
  3819  0589  01A0               	clrf	nrf24l01Send@data
  3820  058A  3007               	movlw	7
  3821  058B  25DD               	fcall	_nrf24l01Send
  3822  058C  00FD               	movwf	??_nrf24l01ISR
  3823  058D  087D               	movf	??_nrf24l01ISR,w
  3824  058E  0020               	movlb	0	; select bank0
  3825  058F  00A1               	movwf	nrf24l01ISR@status
  3826                           
  3827                           ;nrf24l01.c: 126: if (status.byte == 0x00){
  3828  0590  0821               	movf	nrf24l01ISR@status,w
  3829  0591  1903               	btfsc	3,2
  3830  0592  0001               	reset	;# 
  3831                           
  3832                           ;nrf24l01.c: 129: }
  3833                           ;nrf24l01.c: 132: if (status.byte == 0xFF){
  3834  0593  0020               	movlb	0	; select bank0
  3835  0594  0A21               	incf	nrf24l01ISR@status,w
  3836  0595  1903               	btfsc	3,2
  3837  0596  0001               	reset	;# 
  3838                           
  3839                           ;nrf24l01.c: 135: }
  3840                           ;nrf24l01.c: 137: if (status.TX_DS){
  3841  0597  0020               	movlb	0	; select bank0
  3842  0598  1EA1               	btfss	nrf24l01ISR@status,5
  3843  0599  2DA0               	goto	i1l1937
  3844                           
  3845                           ;nrf24l01.c: 140: nrf24l01.TXBusy = 0;
  3846  059A  10CF               	bcf	_nrf24l01,1	;volatile
  3847                           
  3848                           ;nrf24l01.c: 143: if (!nrf24l01.RXMode){
  3849  059B  1DCF               	btfss	_nrf24l01,3	;volatile
  3850                           
  3851                           ;nrf24l01.c: 144: if (nrf24l01.waitForTXACK){
  3852  059C  1C4F               	btfss	_nrf24l01,0	;volatile
  3853  059D  2DA0               	goto	i1l1937
  3854                           
  3855                           ;nrf24l01.c: 146: nrf24l01SetRXMode(1);
  3856  059E  3001               	movlw	1
  3857  059F  2464               	fcall	_nrf24l01SetRXMode
  3858  05A0                     i1l1937:	
  3859                           
  3860                           ;nrf24l01.c: 147: }
  3861                           ;nrf24l01.c: 148: }
  3862                           ;nrf24l01.c: 149: }
  3863                           ;nrf24l01.c: 152: if (status.RX_DR){
  3864  05A0  0020               	movlb	0	; select bank0
  3865  05A1  1F21               	btfss	nrf24l01ISR@status,6
  3866  05A2  2DA4               	goto	i1l1941
  3867                           
  3868                           ;nrf24l01.c: 154: nrf24l01HandleRX();
  3869  05A3  2026               	fcall	_nrf24l01HandleRX
  3870  05A4                     i1l1941:	
  3871                           
  3872                           ;nrf24l01.c: 155: }
  3873                           ;nrf24l01.c: 158: nrf24l01Send(0b00100000 | 0x07, status.byte);
  3874  05A4  0020               	movlb	0	; select bank0
  3875  05A5  0821               	movf	nrf24l01ISR@status,w
  3876  05A6  00FD               	movwf	??_nrf24l01ISR
  3877  05A7  087D               	movf	??_nrf24l01ISR,w
  3878  05A8  00A0               	movwf	nrf24l01Send@data
  3879  05A9  3027               	movlw	39
  3880  05AA  25DD               	fcall	_nrf24l01Send
  3881  05AB  0008               	return
  3882  05AC                     __end_of_nrf24l01ISR:	
  3883                           
  3884                           	psect	text18
  3885  0026                     __ptext18:	
  3886 ;; *************** function _nrf24l01HandleRX *****************
  3887 ;; Defined at:
  3888 ;;		line 50 in file "nrf24l01.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;		None
  3891 ;; Auto vars:     Size  Location     Type
  3892 ;;  i               1   12[COMMON] unsigned char 
  3893 ;;  byte            1   11[COMMON] unsigned char 
  3894 ;;  offset          1   10[COMMON] unsigned char 
  3895 ;;  width           1    9[COMMON] unsigned char 
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  1    wreg      void 
  3898 ;; Registers used:
  3899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMMON   BANK0   BANK1
  3905 ;;      Params:         0       0       0
  3906 ;;      Locals:         4       0       0
  3907 ;;      Temps:          3       0       0
  3908 ;;      Totals:         7       0       0
  3909 ;;Total ram usage:        7 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    3
  3912 ;; This function calls:
  3913 ;;		_nrf24l01SPIEnd
  3914 ;;		_nrf24l01SPISend
  3915 ;;		_nrf24l01SPIStart
  3916 ;;		_nrf24l01Send
  3917 ;;		_nrf24l01SetRXMode
  3918 ;;		_strcmp
  3919 ;; This function is called by:
  3920 ;;		_nrf24l01ISR
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           
  3925                           ;psect for function _nrf24l01HandleRX
  3926  0026                     _nrf24l01HandleRX:	
  3927                           
  3928                           ;nrf24l01.c: 53: unsigned char byte;
  3929                           ;nrf24l01.c: 54: unsigned char i;
  3930                           ;nrf24l01.c: 55: unsigned char offset = 0;
  3931                           
  3932                           ;incstack = 0
  3933                           ; Regs used in _nrf24l01HandleRX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3934  0026  01FA               	clrf	nrf24l01HandleRX@offset
  3935                           
  3936                           ;nrf24l01.c: 57: nrf24l01.RXPending = 1;
  3937  0027  0020               	movlb	0	; select bank0
  3938  0028  154F               	bsf	_nrf24l01,2	;volatile
  3939                           
  3940                           ;nrf24l01.c: 59: for (i = 0; i < sizeof(nrf24l01RXTopic); i++){
  3941  0029  01FC               	clrf	nrf24l01HandleRX@i
  3942  002A  3008               	movlw	8
  3943  002B  027C               	subwf	nrf24l01HandleRX@i,w
  3944  002C  1803               	btfsc	3,0
  3945  002D  283B               	goto	i1l1719
  3946  002E                     i1l1713:	
  3947                           
  3948                           ;nrf24l01.c: 60: nrf24l01RXTopic[i] = '\0';
  3949  002E  087C               	movf	nrf24l01HandleRX@i,w
  3950  002F  3E50               	addlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  3951  0030  0086               	movwf	6
  3952  0031  0187               	clrf	7
  3953  0032  0181               	clrf	1
  3954  0033  3001               	movlw	1
  3955  0034  00F6               	movwf	??_nrf24l01HandleRX
  3956  0035  0876               	movf	??_nrf24l01HandleRX,w
  3957  0036  07FC               	addwf	nrf24l01HandleRX@i,f
  3958  0037  3008               	movlw	8
  3959  0038  027C               	subwf	nrf24l01HandleRX@i,w
  3960  0039  1C03               	skipc
  3961  003A  282E               	goto	i1l1713
  3962  003B                     i1l1719:	
  3963                           
  3964                           ;nrf24l01.c: 61: }
  3965                           ;nrf24l01.c: 62: for (i = 0; i < sizeof(nrf24l01RXValue); i++){
  3966  003B  01FC               	clrf	nrf24l01HandleRX@i
  3967  003C  3008               	movlw	8
  3968  003D  027C               	subwf	nrf24l01HandleRX@i,w
  3969  003E  1803               	btfsc	3,0
  3970  003F  284D               	goto	i1l1731
  3971  0040                     i1l1725:	
  3972                           
  3973                           ;nrf24l01.c: 63: nrf24l01RXValue[i] = '\0';
  3974  0040  087C               	movf	nrf24l01HandleRX@i,w
  3975  0041  3EB0               	addlw	(low (_nrf24l01RXValue| 0))& (0+255)
  3976  0042  0086               	movwf	6
  3977  0043  0187               	clrf	7
  3978  0044  0181               	clrf	1
  3979  0045  3001               	movlw	1
  3980  0046  00F6               	movwf	??_nrf24l01HandleRX
  3981  0047  0876               	movf	??_nrf24l01HandleRX,w
  3982  0048  07FC               	addwf	nrf24l01HandleRX@i,f
  3983  0049  3008               	movlw	8
  3984  004A  027C               	subwf	nrf24l01HandleRX@i,w
  3985  004B  1C03               	skipc
  3986  004C  2840               	goto	i1l1725
  3987  004D                     i1l1731:	
  3988                           
  3989                           ;nrf24l01.c: 64: }
  3990                           ;nrf24l01.c: 66: unsigned char width = nrf24l01Send(0b01100000, 0);
  3991  004D  0020               	movlb	0	; select bank0
  3992  004E  01A0               	clrf	nrf24l01Send@data
  3993  004F  3060               	movlw	96
  3994  0050  25DD               	fcall	_nrf24l01Send
  3995  0051  00F6               	movwf	??_nrf24l01HandleRX
  3996  0052  0876               	movf	??_nrf24l01HandleRX,w
  3997  0053  00F9               	movwf	nrf24l01HandleRX@width
  3998                           
  3999                           ;nrf24l01.c: 68: PORTAbits.RA0 = 0;
  4000  0054  0020               	movlb	0	; select bank0
  4001  0055  100C               	bcf	12,0	;volatile
  4002                           
  4003                           ;nrf24l01.c: 70: nrf24l01SPIStart();
  4004  0056  261D               	fcall	_nrf24l01SPIStart
  4005                           
  4006                           ;nrf24l01.c: 72: nrf24l01SPISend(0b01100001);
  4007  0057  3061               	movlw	97
  4008  0058  2609               	fcall	_nrf24l01SPISend
  4009                           
  4010                           ;nrf24l01.c: 74: for (i = 0; (i < sizeof(nrf24l01Name)) && (offset + i < width) ; i++){
  4011  0059  01FC               	clrf	nrf24l01HandleRX@i
  4012  005A  2877               	goto	i1l1749
  4013  005B                     i1l1737:	
  4014                           
  4015                           ;nrf24l01.c: 76: byte = nrf24l01SPISend(0);
  4016  005B  3000               	movlw	0
  4017  005C  2609               	fcall	_nrf24l01SPISend
  4018  005D  00F6               	movwf	??_nrf24l01HandleRX
  4019  005E  0876               	movf	??_nrf24l01HandleRX,w
  4020  005F  00FB               	movwf	nrf24l01HandleRX@byte
  4021                           
  4022                           ;nrf24l01.c: 78: if (byte == '/'){
  4023  0060  302F               	movlw	47
  4024  0061  067B               	xorwf	nrf24l01HandleRX@byte,w
  4025  0062  1D03               	btfss	3,2
  4026  0063  2869               	goto	i1l1743
  4027                           
  4028                           ;nrf24l01.c: 79: offset++;
  4029  0064  3001               	movlw	1
  4030  0065  00F6               	movwf	??_nrf24l01HandleRX
  4031  0066  0876               	movf	??_nrf24l01HandleRX,w
  4032  0067  07FA               	addwf	nrf24l01HandleRX@offset,f
  4033                           
  4034                           ;nrf24l01.c: 80: break;
  4035  0068  288B               	goto	i1l1753
  4036  0069                     i1l1743:	
  4037                           
  4038                           ;nrf24l01.c: 81: }
  4039                           ;nrf24l01.c: 83: if (nrf24l01Name[i] != byte){
  4040  0069  087C               	movf	nrf24l01HandleRX@i,w
  4041  006A  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  4042  006B  0086               	movwf	6
  4043  006C  0187               	clrf	7
  4044  006D  0801               	movf	1,w
  4045  006E  067B               	xorwf	nrf24l01HandleRX@byte,w
  4046  006F  1903               	skipnz
  4047  0070  2873               	goto	i1l1747
  4048                           
  4049                           ;nrf24l01.c: 84: nrf24l01.RXPending = 0;
  4050  0071  0020               	movlb	0	; select bank0
  4051  0072  114F               	bcf	_nrf24l01,2	;volatile
  4052  0073                     i1l1747:	
  4053  0073  3001               	movlw	1
  4054  0074  00F6               	movwf	??_nrf24l01HandleRX
  4055  0075  0876               	movf	??_nrf24l01HandleRX,w
  4056  0076  07FC               	addwf	nrf24l01HandleRX@i,f
  4057  0077                     i1l1749:	
  4058  0077  3010               	movlw	16
  4059  0078  027C               	subwf	nrf24l01HandleRX@i,w
  4060  0079  1803               	skipnc
  4061  007A  288B               	goto	i1l1753
  4062  007B  087A               	movf	nrf24l01HandleRX@offset,w
  4063  007C  077C               	addwf	nrf24l01HandleRX@i,w
  4064  007D  00F6               	movwf	??_nrf24l01HandleRX
  4065  007E  01F7               	clrf	??_nrf24l01HandleRX+1
  4066  007F  0DF7               	rlf	??_nrf24l01HandleRX+1,f
  4067  0080  0877               	movf	??_nrf24l01HandleRX+1,w
  4068  0081  3A80               	xorlw	128
  4069  0082  00F8               	movwf	??_nrf24l01HandleRX+2
  4070  0083  3080               	movlw	128
  4071  0084  0278               	subwf	??_nrf24l01HandleRX+2,w
  4072  0085  1D03               	skipz
  4073  0086  2889               	goto	u135_25
  4074  0087  0879               	movf	nrf24l01HandleRX@width,w
  4075  0088  0276               	subwf	??_nrf24l01HandleRX,w
  4076  0089                     u135_25:	
  4077  0089  1C03               	skipc
  4078  008A  285B               	goto	i1l1737
  4079  008B                     i1l1753:	
  4080                           
  4081                           ;nrf24l01.c: 85: }
  4082                           ;nrf24l01.c: 86: }
  4083                           ;nrf24l01.c: 87: offset+= i;
  4084  008B  087C               	movf	nrf24l01HandleRX@i,w
  4085  008C  00F6               	movwf	??_nrf24l01HandleRX
  4086  008D  0876               	movf	??_nrf24l01HandleRX,w
  4087  008E  07FA               	addwf	nrf24l01HandleRX@offset,f
  4088                           
  4089                           ;nrf24l01.c: 89: for (i = 0; (i < sizeof(nrf24l01RXTopic)) && (offset + i < width) ; i++
      +                          ){
  4090  008F  01FC               	clrf	nrf24l01HandleRX@i
  4091  0090  28AB               	goto	i1l1767
  4092  0091                     i1l1757:	
  4093                           
  4094                           ;nrf24l01.c: 91: byte = nrf24l01SPISend(0);
  4095  0091  3000               	movlw	0
  4096  0092  2609               	fcall	_nrf24l01SPISend
  4097  0093  00F6               	movwf	??_nrf24l01HandleRX
  4098  0094  0876               	movf	??_nrf24l01HandleRX,w
  4099  0095  00FB               	movwf	nrf24l01HandleRX@byte
  4100                           
  4101                           ;nrf24l01.c: 92: if (byte == '/'){
  4102  0096  302F               	movlw	47
  4103  0097  067B               	xorwf	nrf24l01HandleRX@byte,w
  4104  0098  1D03               	btfss	3,2
  4105  0099  289F               	goto	i1l1763
  4106                           
  4107                           ;nrf24l01.c: 93: offset++;
  4108  009A  3001               	movlw	1
  4109  009B  00F6               	movwf	??_nrf24l01HandleRX
  4110  009C  0876               	movf	??_nrf24l01HandleRX,w
  4111  009D  07FA               	addwf	nrf24l01HandleRX@offset,f
  4112                           
  4113                           ;nrf24l01.c: 94: break;
  4114  009E  28BF               	goto	i1l1771
  4115  009F                     i1l1763:	
  4116                           
  4117                           ;nrf24l01.c: 95: }
  4118                           ;nrf24l01.c: 97: nrf24l01RXTopic[i] = byte;
  4119  009F  087B               	movf	nrf24l01HandleRX@byte,w
  4120  00A0  00F6               	movwf	??_nrf24l01HandleRX
  4121  00A1  087C               	movf	nrf24l01HandleRX@i,w
  4122  00A2  3E50               	addlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  4123  00A3  0086               	movwf	6
  4124  00A4  0187               	clrf	7
  4125  00A5  0876               	movf	??_nrf24l01HandleRX,w
  4126  00A6  0081               	movwf	1
  4127  00A7  3001               	movlw	1
  4128  00A8  00F6               	movwf	??_nrf24l01HandleRX
  4129  00A9  0876               	movf	??_nrf24l01HandleRX,w
  4130  00AA  07FC               	addwf	nrf24l01HandleRX@i,f
  4131  00AB                     i1l1767:	
  4132  00AB  3008               	movlw	8
  4133  00AC  027C               	subwf	nrf24l01HandleRX@i,w
  4134  00AD  1803               	skipnc
  4135  00AE  28BF               	goto	i1l1771
  4136  00AF  087A               	movf	nrf24l01HandleRX@offset,w
  4137  00B0  077C               	addwf	nrf24l01HandleRX@i,w
  4138  00B1  00F6               	movwf	??_nrf24l01HandleRX
  4139  00B2  01F7               	clrf	??_nrf24l01HandleRX+1
  4140  00B3  0DF7               	rlf	??_nrf24l01HandleRX+1,f
  4141  00B4  0877               	movf	??_nrf24l01HandleRX+1,w
  4142  00B5  3A80               	xorlw	128
  4143  00B6  00F8               	movwf	??_nrf24l01HandleRX+2
  4144  00B7  3080               	movlw	128
  4145  00B8  0278               	subwf	??_nrf24l01HandleRX+2,w
  4146  00B9  1D03               	skipz
  4147  00BA  28BD               	goto	u138_25
  4148  00BB  0879               	movf	nrf24l01HandleRX@width,w
  4149  00BC  0276               	subwf	??_nrf24l01HandleRX,w
  4150  00BD                     u138_25:	
  4151  00BD  1C03               	skipc
  4152  00BE  2891               	goto	i1l1757
  4153  00BF                     i1l1771:	
  4154                           
  4155                           ;nrf24l01.c: 98: }
  4156                           ;nrf24l01.c: 99: offset+= i;
  4157  00BF  087C               	movf	nrf24l01HandleRX@i,w
  4158  00C0  00F6               	movwf	??_nrf24l01HandleRX
  4159  00C1  0876               	movf	??_nrf24l01HandleRX,w
  4160  00C2  07FA               	addwf	nrf24l01HandleRX@offset,f
  4161                           
  4162                           ;nrf24l01.c: 102: for (i = 0; (i < sizeof(nrf24l01RXValue)) && (offset + i < width) ; i+
      +                          +){
  4163  00C3  01FC               	clrf	nrf24l01HandleRX@i
  4164  00C4  28D2               	goto	i1l1779
  4165  00C5                     i1l1775:	
  4166                           
  4167                           ;nrf24l01.c: 103: nrf24l01RXValue[i] = nrf24l01SPISend(0);
  4168  00C5  3000               	movlw	0
  4169  00C6  2609               	fcall	_nrf24l01SPISend
  4170  00C7  00F6               	movwf	??_nrf24l01HandleRX
  4171  00C8  087C               	movf	nrf24l01HandleRX@i,w
  4172  00C9  3EB0               	addlw	(low (_nrf24l01RXValue| 0))& (0+255)
  4173  00CA  0086               	movwf	6
  4174  00CB  0187               	clrf	7
  4175  00CC  0876               	movf	??_nrf24l01HandleRX,w
  4176  00CD  0081               	movwf	1
  4177  00CE  3001               	movlw	1
  4178  00CF  00F6               	movwf	??_nrf24l01HandleRX
  4179  00D0  0876               	movf	??_nrf24l01HandleRX,w
  4180  00D1  07FC               	addwf	nrf24l01HandleRX@i,f
  4181  00D2                     i1l1779:	
  4182  00D2  3008               	movlw	8
  4183  00D3  027C               	subwf	nrf24l01HandleRX@i,w
  4184  00D4  1803               	skipnc
  4185  00D5  28E6               	goto	i1l1783
  4186  00D6  087A               	movf	nrf24l01HandleRX@offset,w
  4187  00D7  077C               	addwf	nrf24l01HandleRX@i,w
  4188  00D8  00F6               	movwf	??_nrf24l01HandleRX
  4189  00D9  01F7               	clrf	??_nrf24l01HandleRX+1
  4190  00DA  0DF7               	rlf	??_nrf24l01HandleRX+1,f
  4191  00DB  0877               	movf	??_nrf24l01HandleRX+1,w
  4192  00DC  3A80               	xorlw	128
  4193  00DD  00F8               	movwf	??_nrf24l01HandleRX+2
  4194  00DE  3080               	movlw	128
  4195  00DF  0278               	subwf	??_nrf24l01HandleRX+2,w
  4196  00E0  1D03               	skipz
  4197  00E1  28E4               	goto	u140_25
  4198  00E2  0879               	movf	nrf24l01HandleRX@width,w
  4199  00E3  0276               	subwf	??_nrf24l01HandleRX,w
  4200  00E4                     u140_25:	
  4201  00E4  1C03               	skipc
  4202  00E5  28C5               	goto	i1l1775
  4203  00E6                     i1l1783:	
  4204                           
  4205                           ;nrf24l01.c: 104: }
  4206                           ;nrf24l01.c: 106: nrf24l01SPIEnd();
  4207  00E6  2624               	fcall	_nrf24l01SPIEnd
  4208                           
  4209                           ;nrf24l01.c: 108: if (nrf24l01.waitForTXACK){
  4210  00E7  0020               	movlb	0	; select bank0
  4211  00E8  1C4F               	btfss	_nrf24l01,0	;volatile
  4212  00E9  0008               	return
  4213                           
  4214                           ;nrf24l01.c: 109: if (strcmp(nrf24l01RXTopic, nrf24l01TXTopic) == 0){
  4215  00EA  3060               	movlw	low _nrf24l01TXTopic
  4216  00EB  00F0               	movwf	strcmp@s2
  4217  00EC  3000               	movlw	high _nrf24l01TXTopic
  4218  00ED  00F1               	movwf	strcmp@s2+1
  4219  00EE  3050               	movlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  4220  00EF  2561               	fcall	_strcmp
  4221  00F0  0870               	movf	?_strcmp,w
  4222  00F1  0471               	iorwf	?_strcmp+1,w
  4223  00F2  1D03               	btfss	3,2
  4224  00F3  0008               	return
  4225                           
  4226                           ;nrf24l01.c: 110: if (strcmp(nrf24l01RXValue, "ACK") == 0){
  4227  00F4  3058               	movlw	low (STR_7| (0+32768))
  4228  00F5  00F0               	movwf	strcmp@s2
  4229  00F6  3086               	movlw	high (STR_7| (0+32768))
  4230  00F7  00F1               	movwf	strcmp@s2+1
  4231  00F8  30B0               	movlw	(low (_nrf24l01RXValue| 0))& (0+255)
  4232  00F9  2561               	fcall	_strcmp
  4233  00FA  0870               	movf	?_strcmp,w
  4234  00FB  0471               	iorwf	?_strcmp+1,w
  4235  00FC  1D03               	btfss	3,2
  4236  00FD  0008               	return
  4237                           
  4238                           ;nrf24l01.c: 111: nrf24l01.waitForTXACK = 0;
  4239  00FE  0020               	movlb	0	; select bank0
  4240  00FF  104F               	bcf	_nrf24l01,0	;volatile
  4241                           
  4242                           ;nrf24l01.c: 112: nrf24l01.RXPending = 0;
  4243  0100  114F               	bcf	_nrf24l01,2	;volatile
  4244                           
  4245                           ;nrf24l01.c: 113: nrf24l01SetRXMode(0);
  4246  0101  3000               	movlw	0
  4247  0102  2464               	fcall	_nrf24l01SetRXMode
  4248  0103  0008               	return
  4249  0104                     __end_of_nrf24l01HandleRX:	
  4250                           
  4251                           	psect	text19
  4252  0561                     __ptext19:	
  4253 ;; *************** function _strcmp *****************
  4254 ;; Defined at:
  4255 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;  s1              1    wreg     PTR const unsigned char 
  4258 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), 
  4259 ;;  s2              2    0[COMMON] PTR const unsigned char 
  4260 ;;		 -> STR_7(4), nrf24l01TXTopic(8), 
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  s1              1    4[COMMON] PTR const unsigned char 
  4263 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), 
  4264 ;;  r               1    3[COMMON] char 
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  2    0[COMMON] int 
  4267 ;; Registers used:
  4268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMMON   BANK0   BANK1
  4274 ;;      Params:         2       0       0
  4275 ;;      Locals:         2       0       0
  4276 ;;      Temps:          1       0       0
  4277 ;;      Totals:         5       0       0
  4278 ;;Total ram usage:        5 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; This function calls:
  4281 ;;		Nothing
  4282 ;; This function is called by:
  4283 ;;		_nrf24l01HandleRX
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           
  4288                           ;psect for function _strcmp
  4289  0561                     _strcmp:	
  4290                           
  4291                           ;incstack = 0
  4292                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  4293                           ;strcmp@s1 stored from wreg
  4294  0561  00F4               	movwf	strcmp@s1
  4295  0562  2D6B               	goto	i1l1475
  4296  0563                     i1l1473:	
  4297  0563  3001               	movlw	1
  4298  0564  00F2               	movwf	??_strcmp
  4299  0565  0872               	movf	??_strcmp,w
  4300  0566  07F4               	addwf	strcmp@s1,f
  4301  0567  3001               	movlw	1
  4302  0568  07F0               	addwf	strcmp@s2,f
  4303  0569  3000               	movlw	0
  4304  056A  3DF1               	addwfc	strcmp@s2+1,f
  4305  056B                     i1l1475:	
  4306  056B  0874               	movf	strcmp@s1,w
  4307  056C  0086               	movwf	6
  4308  056D  0187               	clrf	7
  4309  056E  0870               	movf	strcmp@s2,w
  4310  056F  0084               	movwf	4
  4311  0570  0871               	movf	strcmp@s2+1,w
  4312  0571  0085               	movwf	5
  4313  0572  0800               	movf	0,w	;code access
  4314  0573  3AFF               	xorlw	255
  4315  0574  3E01               	addlw	1
  4316  0575  0701               	addwf	1,w
  4317  0576  00F2               	movwf	??_strcmp
  4318  0577  0872               	movf	??_strcmp,w
  4319  0578  00F3               	movwf	strcmp@r
  4320  0579  0873               	movf	strcmp@r,w
  4321  057A  1D03               	btfss	3,2
  4322  057B  2D82               	goto	i1l1479
  4323  057C  0874               	movf	strcmp@s1,w
  4324  057D  0086               	movwf	6
  4325  057E  0187               	clrf	7
  4326  057F  0801               	movf	1,w
  4327  0580  1D03               	btfss	3,2
  4328  0581  2D63               	goto	i1l1473
  4329  0582                     i1l1479:	
  4330  0582  0873               	movf	strcmp@r,w
  4331  0583  00F0               	movwf	?_strcmp
  4332  0584  01F1               	clrf	?_strcmp+1
  4333  0585  1BF0               	btfsc	?_strcmp,7
  4334  0586  03F1               	decf	?_strcmp+1,f
  4335  0587  0008               	return
  4336  0588                     __end_of_strcmp:	
  4337                           
  4338                           	psect	text20
  4339  0464                     __ptext20:	
  4340 ;; *************** function _nrf24l01SetRXMode *****************
  4341 ;; Defined at:
  4342 ;;		line 27 in file "nrf24l01.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;  rxMode          1    wreg     unsigned char 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  rxMode          1    4[COMMON] unsigned char 
  4347 ;;  config          1    5[COMMON] struct .
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  1    wreg      void 
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0, pclath, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMMON   BANK0   BANK1
  4357 ;;      Params:         0       0       0
  4358 ;;      Locals:         0       0       0
  4359 ;;      Temps:          0       0       0
  4360 ;;      Totals:         0       0       0
  4361 ;;Total ram usage:        0 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    8
  4364 ;; This function calls:
  4365 ;;		_nrf24l01Send
  4366 ;; This function is called by:
  4367 ;;		_checkRxData
  4368 ;;		_nrf24l01HandleRX
  4369 ;;		_nrf24l01ISR
  4370 ;;		_nrf24l01SendString
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           
  4375                           ;psect for function _nrf24l01SetRXMode
  4376  0464                     _nrf24l01SetRXMode:	
  4377                           
  4378                           ;incstack = 0
  4379                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  4380                           ;nrf24l01SetRXMode@rxMode stored from wreg
  4381  0464  00F4               	movwf	nrf24l01SetRXMode@rxMode
  4382                           
  4383                           ;nrf24l01.c: 28: n_CONFIG_t config;
  4384                           ;nrf24l01.c: 29: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  4385  0465  0020               	movlb	0	; select bank0
  4386  0466  01A0               	clrf	nrf24l01Send@data
  4387  0467  3000               	movlw	0
  4388  0468  25DD               	fcall	_nrf24l01Send
  4389  0469  00F3               	movwf	??_nrf24l01SetRXMode
  4390  046A  0873               	movf	??_nrf24l01SetRXMode,w
  4391  046B  00F5               	movwf	nrf24l01SetRXMode@config
  4392                           
  4393                           ;nrf24l01.c: 31: nrf24l01.RXMode = rxMode;
  4394  046C  0874               	movf	nrf24l01SetRXMode@rxMode,w
  4395  046D  3901               	andlw	1
  4396  046E  0020               	movlb	0	; select bank0
  4397  046F  11CF               	bcf	_nrf24l01,3	;volatile
  4398  0470  1D03               	skipz
  4399  0471  15CF               	bsf	_nrf24l01,3	;volatile
  4400                           
  4401                           ;nrf24l01.c: 33: if (config.PRIM_RX != nrf24l01.RXMode){
  4402  0472  1DCF               	btfss	_nrf24l01,3	;volatile
  4403  0473  2C76               	goto	u80_20
  4404  0474  3001               	movlw	1
  4405  0475  2C77               	goto	u80_22
  4406  0476                     u80_20:	
  4407  0476  3000               	movlw	0
  4408  0477                     u80_22:	
  4409  0477  00F3               	movwf	??_nrf24l01SetRXMode
  4410  0478  1C75               	btfss	nrf24l01SetRXMode@config,0
  4411  0479  2C7C               	goto	u81_20
  4412  047A  3001               	movlw	1
  4413  047B  2C7D               	goto	u81_22
  4414  047C                     u81_20:	
  4415  047C  3000               	movlw	0
  4416  047D                     u81_22:	
  4417  047D  0673               	xorwf	??_nrf24l01SetRXMode,w
  4418  047E  1903               	skipnz
  4419  047F  0008               	return
  4420                           
  4421                           ;nrf24l01.c: 35: PORTAbits.RA0 = 0;
  4422  0480  100C               	bcf	12,0	;volatile
  4423                           
  4424                           ;nrf24l01.c: 36: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4425  0481  30A0               	movlw	160
  4426  0482                     u161_27:	
  4427  0482  3200               	nop2
  4428  0483  0B89               	decfsz	9,f
  4429  0484  2C82               	goto	u161_27
  4430                           
  4431                           ;nrf24l01.c: 38: config.PRIM_RX = nrf24l01.RXMode;
  4432  0485  1075               	bcf	nrf24l01SetRXMode@config,0
  4433  0486  0020               	movlb	0	; select bank0
  4434  0487  19CF               	btfsc	_nrf24l01,3	;volatile
  4435  0488  1475               	bsf	nrf24l01SetRXMode@config,0
  4436                           
  4437                           ;nrf24l01.c: 39: nrf24l01Send(0b00100000 | 0x00, config.byte);
  4438  0489  0875               	movf	nrf24l01SetRXMode@config,w
  4439  048A  00F3               	movwf	??_nrf24l01SetRXMode
  4440  048B  0873               	movf	??_nrf24l01SetRXMode,w
  4441  048C  0020               	movlb	0	; select bank0
  4442  048D  00A0               	movwf	nrf24l01Send@data
  4443  048E  3020               	movlw	32
  4444  048F  25DD               	fcall	_nrf24l01Send
  4445                           
  4446                           ;nrf24l01.c: 40: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4447  0490  30A0               	movlw	160
  4448  0491                     u162_27:	
  4449  0491  3200               	nop2
  4450  0492  0B89               	decfsz	9,f
  4451  0493  2C91               	goto	u162_27
  4452                           
  4453                           ;nrf24l01.c: 42: if (nrf24l01.RXMode){
  4454  0494  0020               	movlb	0	; select bank0
  4455  0495  1DCF               	btfss	_nrf24l01,3	;volatile
  4456  0496  0008               	return
  4457                           
  4458                           ;nrf24l01.c: 43: PORTAbits.RA0 = 1;
  4459  0497  140C               	bsf	12,0	;volatile
  4460                           
  4461                           ;nrf24l01.c: 44: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4462  0498  30A0               	movlw	160
  4463  0499                     u163_27:	
  4464  0499  3200               	nop2
  4465  049A  0B89               	decfsz	9,f
  4466  049B  2C99               	goto	u163_27
  4467  049C  0008               	return
  4468  049D                     __end_of_nrf24l01SetRXMode:	
  4469                           
  4470                           	psect	text21
  4471  05DD                     __ptext21:	
  4472 ;; *************** function _nrf24l01Send *****************
  4473 ;; Defined at:
  4474 ;;		line 10 in file "nrf24l01.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  command         1    wreg     unsigned char 
  4477 ;;  data            1    0[BANK0 ] unsigned char 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;  command         1    2[COMMON] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  1    wreg      unsigned char 
  4482 ;; Registers used:
  4483 ;;		wreg, status,2, status,0, pclath, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1
  4489 ;;      Params:         0       0       0
  4490 ;;      Locals:         0       0       0
  4491 ;;      Temps:          0       0       0
  4492 ;;      Totals:         0       0       0
  4493 ;;Total ram usage:        0 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    7
  4496 ;; This function calls:
  4497 ;;		_enableInterrupts
  4498 ;;		_nrf24l01SPIEnd
  4499 ;;		_nrf24l01SPISend
  4500 ;;		_nrf24l01SPIStart
  4501 ;; This function is called by:
  4502 ;;		_nrf24l01SetRXMode
  4503 ;;		_nrf24l01HandleRX
  4504 ;;		_nrf24l01ISR
  4505 ;;		_nrf24l01InitRegisters
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           
  4510                           ;psect for function _nrf24l01Send
  4511  05DD                     _nrf24l01Send:	
  4512                           
  4513                           ;incstack = 0
  4514                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  4515                           ;nrf24l01Send@command stored from wreg
  4516  05DD  00F2               	movwf	nrf24l01Send@command
  4517                           
  4518                           ;nrf24l01.c: 12: enableInterrupts(0);
  4519  05DE  3000               	movlw	0
  4520  05DF  262B               	fcall	_enableInterrupts
  4521                           
  4522                           ;nrf24l01.c: 14: nrf24l01SPIStart();
  4523  05E0  261D               	fcall	_nrf24l01SPIStart
  4524                           
  4525                           ;nrf24l01.c: 16: nrf24l01SPISend(command);
  4526  05E1  0872               	movf	nrf24l01Send@command,w
  4527  05E2  2609               	fcall	_nrf24l01SPISend
  4528                           
  4529                           ;nrf24l01.c: 17: data = nrf24l01SPISend(data);
  4530  05E3  0020               	movlb	0	; select bank0
  4531  05E4  0820               	movf	nrf24l01Send@data,w
  4532  05E5  2609               	fcall	_nrf24l01SPISend
  4533  05E6  00F1               	movwf	??_nrf24l01Send
  4534  05E7  0871               	movf	??_nrf24l01Send,w
  4535  05E8  0020               	movlb	0	; select bank0
  4536  05E9  00A0               	movwf	nrf24l01Send@data
  4537                           
  4538                           ;nrf24l01.c: 19: nrf24l01SPIEnd();
  4539  05EA  2624               	fcall	_nrf24l01SPIEnd
  4540                           
  4541                           ;nrf24l01.c: 21: enableInterrupts(1);
  4542  05EB  3001               	movlw	1
  4543  05EC  262B               	fcall	_enableInterrupts
  4544                           
  4545                           ;nrf24l01.c: 23: return data;
  4546  05ED  0020               	movlb	0	; select bank0
  4547  05EE  0820               	movf	nrf24l01Send@data,w
  4548  05EF  0008               	return
  4549  05F0                     __end_of_nrf24l01Send:	
  4550                           
  4551                           	psect	text22
  4552  061D                     __ptext22:	
  4553 ;; *************** function _nrf24l01SPIStart *****************
  4554 ;; Defined at:
  4555 ;;		line 37 in file "interface.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;		None
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;		None
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  1    wreg      void 
  4562 ;; Registers used:
  4563 ;;		wreg
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMMON   BANK0   BANK1
  4569 ;;      Params:         0       0       0
  4570 ;;      Locals:         0       0       0
  4571 ;;      Temps:          0       0       0
  4572 ;;      Totals:         0       0       0
  4573 ;;Total ram usage:        0 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:    6
  4576 ;; This function calls:
  4577 ;;		Nothing
  4578 ;; This function is called by:
  4579 ;;		_nrf24l01Send
  4580 ;;		_nrf24l01HandleRX
  4581 ;;		_nrf24l01SendString
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           
  4586                           ;psect for function _nrf24l01SPIStart
  4587  061D                     _nrf24l01SPIStart:	
  4588                           
  4589                           ;interface.c: 38: PORTAbits.RA1 = 0;
  4590                           
  4591                           ;incstack = 0
  4592                           ; Regs used in _nrf24l01SPIStart: [wreg]
  4593  061D  0020               	movlb	0	; select bank0
  4594  061E  108C               	bcf	12,1	;volatile
  4595                           
  4596                           ;interface.c: 39: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4597  061F  300D               	movlw	13
  4598  0620                     u164_27:	
  4599  0620  0B89               	decfsz	9,f
  4600  0621  2E20               	goto	u164_27
  4601  0622  0000               	nop
  4602  0623  0008               	return
  4603  0624                     __end_of_nrf24l01SPIStart:	
  4604                           
  4605                           	psect	text23
  4606  0609                     __ptext23:	
  4607 ;; *************** function _nrf24l01SPISend *****************
  4608 ;; Defined at:
  4609 ;;		line 26 in file "interface.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  data            1    wreg     unsigned char 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  data            1    0[COMMON] unsigned char 
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      unsigned char 
  4616 ;; Registers used:
  4617 ;;		wreg
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMMON   BANK0   BANK1
  4623 ;;      Params:         0       0       0
  4624 ;;      Locals:         0       0       0
  4625 ;;      Temps:          0       0       0
  4626 ;;      Totals:         0       0       0
  4627 ;;Total ram usage:        0 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    6
  4630 ;; This function calls:
  4631 ;;		Nothing
  4632 ;; This function is called by:
  4633 ;;		_nrf24l01Send
  4634 ;;		_nrf24l01HandleRX
  4635 ;;		_nrf24l01SendString
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           
  4640                           ;psect for function _nrf24l01SPISend
  4641  0609                     _nrf24l01SPISend:	
  4642                           
  4643                           ;incstack = 0
  4644                           ; Regs used in _nrf24l01SPISend: [wreg]
  4645                           ;nrf24l01SPISend@data stored from wreg
  4646  0609  00F0               	movwf	nrf24l01SPISend@data
  4647                           
  4648                           ;interface.c: 27: SSP1BUF = data;
  4649  060A  0870               	movf	nrf24l01SPISend@data,w
  4650  060B  0024               	movlb	4	; select bank4
  4651  060C  0091               	movwf	17	;volatile
  4652  060D                     i1l50:	
  4653                           ;interface.c: 29: while (!SSP1STATbits.BF){
  4654                           
  4655  060D  0024               	movlb	4	; select bank4
  4656  060E  1814               	btfsc	20,0	;volatile
  4657  060F  2E12               	goto	i1l1419
  4658                           
  4659                           ;interface.c: 30: __nop();
  4660  0610  0000               	nop
  4661  0611  2E0D               	goto	i1l50
  4662  0612                     i1l1419:	
  4663                           
  4664                           ;interface.c: 31: }
  4665                           ;interface.c: 33: return SSP1BUF;
  4666  0612  0811               	movf	17,w	;volatile
  4667  0613  0008               	return
  4668  0614                     __end_of_nrf24l01SPISend:	
  4669                           
  4670                           	psect	text24
  4671  0624                     __ptext24:	
  4672 ;; *************** function _nrf24l01SPIEnd *****************
  4673 ;; Defined at:
  4674 ;;		line 43 in file "interface.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;		None
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;		None
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  1    wreg      void 
  4681 ;; Registers used:
  4682 ;;		wreg
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMMON   BANK0   BANK1
  4688 ;;      Params:         0       0       0
  4689 ;;      Locals:         0       0       0
  4690 ;;      Temps:          0       0       0
  4691 ;;      Totals:         0       0       0
  4692 ;;Total ram usage:        0 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    6
  4695 ;; This function calls:
  4696 ;;		Nothing
  4697 ;; This function is called by:
  4698 ;;		_nrf24l01Send
  4699 ;;		_nrf24l01HandleRX
  4700 ;;		_nrf24l01SendString
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           
  4705                           ;psect for function _nrf24l01SPIEnd
  4706  0624                     _nrf24l01SPIEnd:	
  4707                           
  4708                           ;interface.c: 44: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4709                           
  4710                           ;incstack = 0
  4711                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  4712  0624  300D               	movlw	13
  4713  0625                     u165_27:	
  4714  0625  0B89               	decfsz	9,f
  4715  0626  2E25               	goto	u165_27
  4716  0627  0000               	nop
  4717                           
  4718                           ;interface.c: 45: PORTAbits.RA1 = 1;
  4719  0628  0020               	movlb	0	; select bank0
  4720  0629  148C               	bsf	12,1	;volatile
  4721  062A  0008               	return
  4722  062B                     __end_of_nrf24l01SPIEnd:	
  4723                           
  4724                           	psect	text25
  4725  062B                     __ptext25:	
  4726 ;; *************** function _enableInterrupts *****************
  4727 ;; Defined at:
  4728 ;;		line 49 in file "interface.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;  enable          1    wreg     unsigned char 
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  enable          1    0[COMMON] unsigned char 
  4733 ;; Return value:  Size  Location     Type
  4734 ;;                  1    wreg      void 
  4735 ;; Registers used:
  4736 ;;		wreg, status,0
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMMON   BANK0   BANK1
  4742 ;;      Params:         0       0       0
  4743 ;;      Locals:         0       0       0
  4744 ;;      Temps:          0       0       0
  4745 ;;      Totals:         0       0       0
  4746 ;;Total ram usage:        0 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:    6
  4749 ;; This function calls:
  4750 ;;		Nothing
  4751 ;; This function is called by:
  4752 ;;		_nrf24l01Send
  4753 ;;		_nrf24l01SendString
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           
  4758                           ;psect for function _enableInterrupts
  4759  062B                     _enableInterrupts:	
  4760                           
  4761                           ;incstack = 0
  4762                           ; Regs used in _enableInterrupts: [wreg+status,0]
  4763                           ;enableInterrupts@enable stored from wreg
  4764  062B  00F0               	movwf	enableInterrupts@enable
  4765                           
  4766                           ;interface.c: 50: INTCONbits.INTE = enable;
  4767  062C  0C70               	rrf	enableInterrupts@enable,w
  4768  062D  1C03               	skipc
  4769  062E  120B               	bcf	11,4	;volatile
  4770  062F  1803               	skipnc
  4771  0630  160B               	bsf	11,4	;volatile
  4772  0631  0008               	return
  4773  0632                     __end_of_enableInterrupts:	
  4774  007E                     btemp	set	126	;btemp
  4775  007E                     int$flags	set	126
  4776  007E                     wtemp0	set	126


Data Sizes:
    Strings     35
    Constant    6
    Data        2
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     44      74
    BANK1            32      0      24

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[5]), STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXTopic(BANK0[8]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXTopic(BANK0[8]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[4]), nrf24l01TXTopic(BANK0[8]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 8
		 -> nrf24l01RXValue(BANK1[8]), nrf24l01RXTopic(BANK0[8]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXTopic(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01HandleRX

Critical Paths under _main in BANK0

    _main->_utoa
    _nrf24l01Init->_nrf24l01InitRegisters
    _loop->_utoa
    _utoa->_getADCValue
    _getADCValue->___lldiv

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   13045
                                             40 BANK0      4     4      0
                               _loop
                       _nrf24l01Init
                 _nrf24l01SendString
                      _read_flashmem
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _read_flashmem                                        9     7      2     220
                                              3 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1562
                                             12 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    1562
                                              3 BANK0      9     9      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0    6736
                        _checkRxData
                        _getADCValue
                 _nrf24l01SendString
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _utoa                                                 9     5      4    2087
                                             31 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
                        _getADCValue (ARG)
                      _read_flashmem (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              3 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              3 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     639
                                              3 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendString                                   3     3      0    1711
                                              3 BANK0      3     3      0
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4     904
                                             17 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     220
                                              3 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              3 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _checkRxData                                          0     0      0    1395
                  _nrf24l01SetRXMode
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _nrf24l01SetRXMode                                    3     3      0    1395
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (9) _nrf24l01Send                                         3     2      1    1327
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  1     1      0    6468
                                              2 BANK0      1     1      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          2     2      0    6468
                                             13 COMMON     1     1      0
                                              1 BANK0      1     1      0
                   _nrf24l01HandleRX
                       _nrf24l01Send
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (8) _nrf24l01HandleRX                                     7     7      0    3635
                                              6 COMMON     7     7      0
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (9) _strcmp                                               5     3      2     279
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (8) _nrf24l01SetRXMode                                    3     3      0    1395
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (9) _nrf24l01Send                                         3     2      1    1327
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     _checkRxData
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _sleep
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01SendString
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
     _sleep
     _strcpy
     _utoa
       ___lwdiv
       ___lwmod
       _getADCValue (ARG)
         ___lldiv
         ___lmul
       _read_flashmem (ARG)
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SendString
     _enableInterrupts
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
     _nrf24l01SetRXMode
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
   _read_flashmem
   _sleep
   _strcpy
   _utoa
     ___lwdiv
     ___lwmod
     _getADCValue (ARG)
       ___lldiv
       ___lmul
     _read_flashmem (ARG)

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01HandleRX
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _strcmp
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01SetRXMode
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      70       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2C      4A       6       92.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      18       8       75.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      70       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
<<<<<<< HEAD
<<<<<<< HEAD
Symbol Table                                                                                   Tue Jun 19 20:55:38 2018
=======
Symbol Table                                                                                   Wed Jun 20 12:19:00 2018
>>>>>>> d3b061564ec233887182288815f9c857f16f8cdf
=======
Symbol Table                                                                                   Tue Jun 19 17:39:04 2018
>>>>>>> parent of b709a45... old

                   __CFG_CP$OFF 0000             nrf24l01Send@command 0072                     __CFG_LVP$ON 0000  
                           l160 0614                             l153 02D6                             l177 036B  
                           l269 023E                             l566 03FB                             _ISR 0004  
                           u925 0425                             u945 0431                             u955 0445  
                           u965 0451                             u885 0518                             u895 051F  
                           u995 04A9    nrf24l01SendString@waitForAck 0024                    __CFG_BORV$LO 0000  
                           wreg 0009                            ?_ISR 0070                  ??_nrf24l01Init 002C  
                          l2013 0352                            l1503 0422                            l1513 0450  
                          l1505 0430                            l1531 04A6                            l1611 03BB  
                          l2067 03B3                            l1517 045B                            l1533 04B2  
                          l1621 03D7                            l1703 02A5                            l1607 05B2  
                          l1543 04CD                            l1641 022E                            l1561 0553  
                          l1539 04C4                            l1555 053B                            l1485 050D  
                          l1581 02DB                            l1557 0547                            l1565 055C  
                          l1583 02CF                            l1671 026F                            l1663 025F  
                          l1655 0249                            l1489 0517                            l1585 02F9  
                          l1649 0232                  ??_nrf24l01Send 0071                            l1683 028A  
                          l1675 027A                            l1667 0264                            l1659 0254  
                          l1687 0295                            l1679 027F                            STR_1 065C  
                  __CFG_WDTE$ON 0000                            STR_2 0649                            STR_3 064E  
                          STR_4 0638                            STR_5 0632                            STR_6 0653  
                          STR_7 0658                            u1015 04B3                            u1025 04BD  
                          u1035 04C5                            u1065 053E                            u1085 054D  
                          u1095 0554                            u1607 02CC                            u1537 0346  
                          u1547 05CE                            u1557 05D7                            u1567 01A9  
                          u1577 023A                            u1587 0299                            u1597 02AD  
                          i1l50 060D  __size_of_nrf24l01InterfaceInit 000E                    __CFG_WRT$OFF 0000  
 __end_of_nrf24l01InterfaceInit 05FE                   __p_NVMEM_text 07E0                            _main 0336  
                          _mode 0068                            _loop 0104                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          indf1 0001                            fsr1l 0006                            btemp 007E  
                          _utoa 03B5                            start 0012                   __CFG_MCLRE$ON 0000  
                         ??_ISR 0022             nrf24l01SendString@i 0025            __size_of_getADCValue 0085  
   __size_of_nrf24l01SendString 008A                           ?_main 0070                           ?_loop 0070  
               __end_of___lldiv 0464                           ?_utoa 003F                 __end_of___lwdiv 04D2  
                         i1l148 000D                 __end_of___lwmod 0561                           _NVMEM 07E0  
                         u80_20 0476                           u80_22 0477                           u81_20 047C  
                         u81_22 047D          enableInterrupts@enable 0070            __size_of_checkRxData 000B  
           ___lmul@multiplicand 0027                   __CFG_PWRTE$ON 0000                           _sleep 0614  
                         main@i 004B                  __CFG_BOREN$OFF 0000                _enableInterrupts 062B  
                         utoa@c 0046                           utoa@v 0044                           status 0003  
                         wtemp0 007E               getADCValue@adcSum 003B                _nrf24l01SPIStart 061D  
               __initialization 0013                    __end_of_main 03B5                    __end_of_loop 019D  
                  __end_of_utoa 0411                  __CFG_LPBOR$OFF 0000                _nrf24l01HandleRX 0026  
                        ??_main 0048                          ??_loop 0048                          ??_utoa 0043  
              ??_nrf24l01SPIEnd 0070          nrf24l01HandleRX@offset 007A        __size_of_nrf24l01SPISend 000B  
                        _ADRESH 009C                          _ADRESL 009B                          ?_sleep 0070  
                        _ANSELA 018C                          _ANSELC 018E                          i1l1419 0612  
                        i1l1473 0563                          i1l1713 002E                          i1l1475 056B  
                        i1l1731 004D                          i1l1725 0040                          i1l1479 0582  
                        i1l1743 0069                          i1l1719 003B                          i1l1753 008B  
                        i1l1737 005B                          i1l1771 00BF                          i1l1763 009F  
                        i1l1747 0073                          i1l1757 0091                          i1l1749 0077  
                        i1l1941 05A4                          i1l1783 00E6                          i1l1775 00C5  
                        i1l1767 00AB                          i1l1937 05A0                          i1l1779 00D2  
                        u140_25 00E4                          u135_25 0089                          u161_27 0482  
                        u138_25 00BD                          u162_27 0491                          u163_27 0499  
                        u164_27 0620                          u165_27 0625                          _PMADRH 0192  
                        _PMADRL 0191                          _PMDATH 0194                          _PMDATL 0193  
                        _PMCON1 0195                          _PMCON2 0196            __size_of_nrf24l01ISR 0024  
       nrf24l01SetRXMode@config 0075                          ___lmul 0504         nrf24l01SetRXMode@rxMode 0074  
                __CFG_STVREN$ON 0000                       ??___lldiv 002B                       ??___lwdiv 0027  
                     ??___lwmod 0027            __end_of_nrf24l01Init 05DD            __end_of_nrf24l01Send 05F0  
         _nrf24l01InitRegisters 019D                          _strcmp 0561                          _strcpy 05AC  
        __size_of_read_flashmem 0032              getADCValue@adcLoop 003A         __end_of__initialization 0023  
            getADCValue@channel 0039                   __end_of_NVMEM 0800              getADCValue@divider 0031  
                __pcstackCOMMON 0070                    __pidataBANK0 0660                   __end_of_sleep 061D  
          nrf24l01HandleRX@byte 007B   nrf24l01InitRegisters@enRXAddr 0028                  _OPTION_REGbits 0095  
                       ??_sleep 0023                      __pbssBANK0 004C                      __pbssBANK1 00A0  
             ??_nrf24l01SPISend 0070                   _read_flashmem 04D2                      __pmaintext 0336  
                       ?___lmul 0023               _nrf24l01SetRXMode 0464          ?_nrf24l01InitRegisters 0070  
                    __pintentry 0004             nrf24l01SPISend@data 0070                  ___lmul@product 002B  
            ?_nrf24l01SetRXMode 0070        __end_of_enableInterrupts 0632                         ?_strcmp 0070  
                       ?_strcpy 0023           __end_of_n_ADDRESS_MUL 0663             ??_nrf24l01SetRXMode 0073  
      __end_of_nrf24l01SPIStart 0624                         _SSP1BUF 0211        __end_of_nrf24l01HandleRX 0104  
         _nrf24l01InterfaceInit 05F0                  ?_read_flashmem 0023                   ??_getADCValue 0035  
         __size_of_nrf24l01Init 0016           __size_of_nrf24l01Send 0013       __end_of_nrf24l01SetRXMode 049D  
    __end_of_nrf24l01SendString 02B1                 __size_of___lmul 0030                         ___lldiv 0411  
                       ___lwdiv 049D                         ___lwmod 0534                   ??_checkRxData 0023  
                       __ptext1 04D2                         __ptext2 05C7                         __ptext3 05F0  
                       __ptext4 019D                         __ptext5 0104                         __ptext6 03B5  
                       __ptext7 0534                         __ptext8 049D                         __ptext9 05AC  
               __size_of_strcmp 0027                 __size_of_strcpy 001B                    __size_of_ISR 000E  
                       _counter 004C                         clrloop0 063F            end_of_initialization 0023  
                  _nrf24l01Name 00A0                    _nrf24l01Init 05C7                    _nrf24l01Send 05DD  
               ___lldiv@divisor 0023                 ___lldiv@counter 0030                         utoa@buf 0047  
                       utoa@val 003F                         strcmp@r 0073             __end_of_getADCValue 0336  
                     _PORTAbits 000C                __CFG_FOSC$INTOSC 0000                       _TRISAbits 008C  
                     _TRISCbits 008E                nrf24l01Send@data 0020             __end_of_checkRxData 0609  
                 ??_nrf24l01ISR 007D          ?_nrf24l01InterfaceInit 0070                 ??_read_flashmem 0025  
    __size_of_nrf24l01SetRXMode 0039                  __end_of___lmul 0534                  __end_of_strcmp 0588  
                __end_of_strcpy 05C7             start_initialization 0013                 _nrf24l01SPISend 0609  
                   __end_of_ISR 0012                 _nrf24l01RXValue 00B0                 _nrf24l01RXTopic 0050  
               _nrf24l01TXValue 0058                 _nrf24l01TXTopic 0060           nrf24l01HandleRX@width 0079  
       __size_of_nrf24l01SPIEnd 0007         ??_nrf24l01InitRegisters 0023                     _getADCValue 02B1  
                      ??___lmul 002B             __end_of_nrf24l01ISR 05AC                     __pdataBANK0 0068  
             ?_enableInterrupts 0070                     _checkRxData 05FE                        ??_strcmp 0072  
                      ??_strcpy 0025              ??_enableInterrupts 0070                       ___latbits 0000  
                 __pcstackBANK0 0020               ?_nrf24l01SPIStart 0070              ??_nrf24l01SPIStart 0070  
             ?_nrf24l01HandleRX 0070              ??_nrf24l01HandleRX 0076                ___lwdiv@dividend 0025  
                      ?___lldiv 0023                        ?___lwdiv 0023                        ?___lwmod 0023  
          __end_of_n_ADDRESS_P0 0649         __end_of_nrf24l01SPISend 0614                   _NVMEM_absaddr 07E0  
     nrf24l01InitRegisters@enAA 0029              _nrf24l01SendString 0227                ___lwdiv@quotient 0028  
                __size_of_sleep 0009             ?_nrf24l01SendString 0070                     _nrf24l01ISR 0588  
                     clear_ram0 063E                       _sleepLoop 004E            ??_nrf24l01SendString 0023  
                    _ADCON0bits 009D                      _ADCON1bits 009E                        _WPUAbits 020C  
             ___lmul@multiplier 0023         ??_nrf24l01InterfaceInit 0023               nrf24l01ISR@status 0021  
                _nrf24l01SPIEnd 0624            read_flashmem@address 002A                __size_of___lldiv 0053  
              __size_of___lwdiv 0035                __size_of___lwmod 002D                ?_nrf24l01SPISend 0070  
                    _ANSELAbits 018C                      _ANSELCbits 018E                   _n_ADDRESS_MUL 0662  
               ___lwdiv@divisor 0023                 ___lwdiv@counter 002A                        __ptext10 0227  
                      __ptext11 02B1                        __ptext20 0464                        __ptext12 0504  
                      __ptext21 05DD                        __ptext13 0411                        __ptext22 061D  
                      __ptext14 05FE                        __ptext23 0609                        __ptext15 0614  
                      __ptext24 0624                        __ptext25 062B                        __ptext17 0588  
                      __ptext18 0026                        __ptext19 0561          __end_of_nrf24l01SPIEnd 062B  
                      _nrf24l01 004F                      strcpy@from 0023                   __size_of_main 007F  
                 __size_of_loop 0099                   __size_of_utoa 005C    nrf24l01InitRegisters@feature 0026  
                      _nextMode 0069           __end_of_read_flashmem 0504    nrf24l01InitRegisters@rfSetup 0025  
                  ?_getADCValue 0031  __size_of_nrf24l01InitRegisters 008A   __end_of_nrf24l01InitRegisters 0227  
                      int$flags 007E    nrf24l01InitRegisters@setupAW 0024                    _SSP1STATbits 0214  
                  ?_checkRxData 0070                      _INTCONbits 000B                      _FVRCONbits 0117  
                __pstringtext10 0000                 ?_nrf24l01SPIEnd 0070               nrf24l01HandleRX@i 007C  
                      intlevel1 0000             read_flashmem@offset 0023                    _n_ADDRESS_P0 0644  
           read_flashmem@result 0028       __size_of_enableInterrupts 0007                      _PMCON1bits 0195  
              ___lwmod@dividend 0025                ___lldiv@dividend 0027               __CFG_CLKOUTEN$OFF 0000  
   nrf24l01InitRegisters@config 002B                      _OSCCONbits 0099       __size_of_nrf24l01SPIStart 0007  
   nrf24l01InitRegisters@status 0027       __size_of_nrf24l01HandleRX 00DE                   __pstringtext1 0644  
                 __pstringtext2 0662                   __pstringtext3 0632                   __pstringtext4 0638  
                 __pstringtext5 0649                   __pstringtext6 064E                   __pstringtext7 0653  
                 __pstringtext8 0658                   __pstringtext9 065C                        utoa@base 0041  
    nrf24l01InitRegisters@DynPD 002A                        strcmp@s1 0074                        strcmp@s2 0070  
              ___lldiv@quotient 002C                 ___lwmod@divisor 0023                        strcpy@cp 0026  
                      strcpy@to 0027                 ___lwmod@counter 0028                     _SSPCON1bits 0215  
                    _WDTCONbits 0097                   ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020  
                    _STATUSbits 0003                    ?_nrf24l01ISR 0070  
