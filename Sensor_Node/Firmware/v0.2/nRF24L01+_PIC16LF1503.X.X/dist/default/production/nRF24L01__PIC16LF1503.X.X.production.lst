

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jun 16 14:20:04 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	_NVMEM_text,global,class=CODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     
    49                           ; Version 1.45
    50                           ; Generated 16/11/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC16LF1503 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0008                     	;# 
    92  0009                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  000E                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  008C                     	;# 
   110  008E                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  010C                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011D                     	;# 
   137  018C                     	;# 
   138  018E                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  020C                     	;# 
   148  0211                     	;# 
   149  0211                     	;# 
   150  0212                     	;# 
   151  0212                     	;# 
   152  0213                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0214                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0216                     	;# 
   160  0216                     	;# 
   161  0217                     	;# 
   162  0217                     	;# 
   163  0391                     	;# 
   164  0392                     	;# 
   165  0393                     	;# 
   166  0498                     	;# 
   167  0498                     	;# 
   168  0499                     	;# 
   169  049A                     	;# 
   170  049B                     	;# 
   171  049B                     	;# 
   172  049C                     	;# 
   173  049D                     	;# 
   174  049E                     	;# 
   175  049F                     	;# 
   176  0611                     	;# 
   177  0612                     	;# 
   178  0613                     	;# 
   179  0613                     	;# 
   180  0614                     	;# 
   181  0615                     	;# 
   182  0616                     	;# 
   183  0616                     	;# 
   184  0617                     	;# 
   185  0618                     	;# 
   186  0619                     	;# 
   187  0619                     	;# 
   188  061A                     	;# 
   189  061B                     	;# 
   190  061C                     	;# 
   191  061C                     	;# 
   192  0691                     	;# 
   193  0692                     	;# 
   194  0693                     	;# 
   195  0694                     	;# 
   196  0695                     	;# 
   197  0F0F                     	;# 
   198  0F10                     	;# 
   199  0F11                     	;# 
   200  0F12                     	;# 
   201  0F13                     	;# 
   202  0F14                     	;# 
   203  0F15                     	;# 
   204  0F16                     	;# 
   205  0F17                     	;# 
   206  0F18                     	;# 
   207  0F19                     	;# 
   208  0F1A                     	;# 
   209  0F1B                     	;# 
   210  0F1C                     	;# 
   211  0F1D                     	;# 
   212  0F1E                     	;# 
   213  0F1F                     	;# 
   214  0FE3                     	;# 
   215  0FE4                     	;# 
   216  0FE5                     	;# 
   217  0FE6                     	;# 
   218  0FE7                     	;# 
   219  0FE8                     	;# 
   220  0FE9                     	;# 
   221  0FEA                     	;# 
   222  0FEB                     	;# 
   223  0FED                     	;# 
   224  0FEE                     	;# 
   225  0FEF                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000E                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  008C                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0095                     	;# 
   258  0096                     	;# 
   259  0097                     	;# 
   260  0099                     	;# 
   261  009A                     	;# 
   262  009B                     	;# 
   263  009B                     	;# 
   264  009C                     	;# 
   265  009D                     	;# 
   266  009E                     	;# 
   267  009F                     	;# 
   268  010C                     	;# 
   269  010E                     	;# 
   270  0111                     	;# 
   271  0112                     	;# 
   272  0113                     	;# 
   273  0114                     	;# 
   274  0115                     	;# 
   275  0116                     	;# 
   276  0117                     	;# 
   277  0118                     	;# 
   278  0119                     	;# 
   279  011D                     	;# 
   280  018C                     	;# 
   281  018E                     	;# 
   282  0191                     	;# 
   283  0191                     	;# 
   284  0192                     	;# 
   285  0193                     	;# 
   286  0193                     	;# 
   287  0194                     	;# 
   288  0195                     	;# 
   289  0196                     	;# 
   290  020C                     	;# 
   291  0211                     	;# 
   292  0211                     	;# 
   293  0212                     	;# 
   294  0212                     	;# 
   295  0213                     	;# 
   296  0213                     	;# 
   297  0214                     	;# 
   298  0214                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0216                     	;# 
   303  0216                     	;# 
   304  0217                     	;# 
   305  0217                     	;# 
   306  0391                     	;# 
   307  0392                     	;# 
   308  0393                     	;# 
   309  0498                     	;# 
   310  0498                     	;# 
   311  0499                     	;# 
   312  049A                     	;# 
   313  049B                     	;# 
   314  049B                     	;# 
   315  049C                     	;# 
   316  049D                     	;# 
   317  049E                     	;# 
   318  049F                     	;# 
   319  0611                     	;# 
   320  0612                     	;# 
   321  0613                     	;# 
   322  0613                     	;# 
   323  0614                     	;# 
   324  0615                     	;# 
   325  0616                     	;# 
   326  0616                     	;# 
   327  0617                     	;# 
   328  0618                     	;# 
   329  0619                     	;# 
   330  0619                     	;# 
   331  061A                     	;# 
   332  061B                     	;# 
   333  061C                     	;# 
   334  061C                     	;# 
   335  0691                     	;# 
   336  0692                     	;# 
   337  0693                     	;# 
   338  0694                     	;# 
   339  0695                     	;# 
   340  0F0F                     	;# 
   341  0F10                     	;# 
   342  0F11                     	;# 
   343  0F12                     	;# 
   344  0F13                     	;# 
   345  0F14                     	;# 
   346  0F15                     	;# 
   347  0F16                     	;# 
   348  0F17                     	;# 
   349  0F18                     	;# 
   350  0F19                     	;# 
   351  0F1A                     	;# 
   352  0F1B                     	;# 
   353  0F1C                     	;# 
   354  0F1D                     	;# 
   355  0F1E                     	;# 
   356  0F1F                     	;# 
   357  0FE3                     	;# 
   358  0FE4                     	;# 
   359  0FE5                     	;# 
   360  0FE6                     	;# 
   361  0FE7                     	;# 
   362  0FE8                     	;# 
   363  0FE9                     	;# 
   364  0FEA                     	;# 
   365  0FEB                     	;# 
   366  0FED                     	;# 
   367  0FEE                     	;# 
   368  0FEF                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000E                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0015                     	;# 
   387  0016                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001C                     	;# 
   395  008C                     	;# 
   396  008E                     	;# 
   397  0091                     	;# 
   398  0092                     	;# 
   399  0093                     	;# 
   400  0095                     	;# 
   401  0096                     	;# 
   402  0097                     	;# 
   403  0099                     	;# 
   404  009A                     	;# 
   405  009B                     	;# 
   406  009B                     	;# 
   407  009C                     	;# 
   408  009D                     	;# 
   409  009E                     	;# 
   410  009F                     	;# 
   411  010C                     	;# 
   412  010E                     	;# 
   413  0111                     	;# 
   414  0112                     	;# 
   415  0113                     	;# 
   416  0114                     	;# 
   417  0115                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  0118                     	;# 
   421  0119                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018E                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  020C                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0391                     	;# 
   450  0392                     	;# 
   451  0393                     	;# 
   452  0498                     	;# 
   453  0498                     	;# 
   454  0499                     	;# 
   455  049A                     	;# 
   456  049B                     	;# 
   457  049B                     	;# 
   458  049C                     	;# 
   459  049D                     	;# 
   460  049E                     	;# 
   461  049F                     	;# 
   462  0611                     	;# 
   463  0612                     	;# 
   464  0613                     	;# 
   465  0613                     	;# 
   466  0614                     	;# 
   467  0615                     	;# 
   468  0616                     	;# 
   469  0616                     	;# 
   470  0617                     	;# 
   471  0618                     	;# 
   472  0619                     	;# 
   473  0619                     	;# 
   474  061A                     	;# 
   475  061B                     	;# 
   476  061C                     	;# 
   477  061C                     	;# 
   478  0691                     	;# 
   479  0692                     	;# 
   480  0693                     	;# 
   481  0694                     	;# 
   482  0695                     	;# 
   483  0F0F                     	;# 
   484  0F10                     	;# 
   485  0F11                     	;# 
   486  0F12                     	;# 
   487  0F13                     	;# 
   488  0F14                     	;# 
   489  0F15                     	;# 
   490  0F16                     	;# 
   491  0F17                     	;# 
   492  0F18                     	;# 
   493  0F19                     	;# 
   494  0F1A                     	;# 
   495  0F1B                     	;# 
   496  0F1C                     	;# 
   497  0F1D                     	;# 
   498  0F1E                     	;# 
   499  0F1F                     	;# 
   500  0FE3                     	;# 
   501  0FE4                     	;# 
   502  0FE5                     	;# 
   503  0FE6                     	;# 
   504  0FE7                     	;# 
   505  0FE8                     	;# 
   506  0FE9                     	;# 
   507  0FEA                     	;# 
   508  0FEB                     	;# 
   509  0FED                     	;# 
   510  0FEE                     	;# 
   511  0FEF                     	;# 
   512  0000                     	;# 
   513  0001                     	;# 
   514  0002                     	;# 
   515  0003                     	;# 
   516  0004                     	;# 
   517  0005                     	;# 
   518  0006                     	;# 
   519  0007                     	;# 
   520  0008                     	;# 
   521  0009                     	;# 
   522  000A                     	;# 
   523  000B                     	;# 
   524  000C                     	;# 
   525  000E                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0013                     	;# 
   529  0015                     	;# 
   530  0016                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001C                     	;# 
   538  008C                     	;# 
   539  008E                     	;# 
   540  0091                     	;# 
   541  0092                     	;# 
   542  0093                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  009F                     	;# 
   554  010C                     	;# 
   555  010E                     	;# 
   556  0111                     	;# 
   557  0112                     	;# 
   558  0113                     	;# 
   559  0114                     	;# 
   560  0115                     	;# 
   561  0116                     	;# 
   562  0117                     	;# 
   563  0118                     	;# 
   564  0119                     	;# 
   565  011D                     	;# 
   566  018C                     	;# 
   567  018E                     	;# 
   568  0191                     	;# 
   569  0191                     	;# 
   570  0192                     	;# 
   571  0193                     	;# 
   572  0193                     	;# 
   573  0194                     	;# 
   574  0195                     	;# 
   575  0196                     	;# 
   576  020C                     	;# 
   577  0211                     	;# 
   578  0211                     	;# 
   579  0212                     	;# 
   580  0212                     	;# 
   581  0213                     	;# 
   582  0213                     	;# 
   583  0214                     	;# 
   584  0214                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0216                     	;# 
   589  0216                     	;# 
   590  0217                     	;# 
   591  0217                     	;# 
   592  0391                     	;# 
   593  0392                     	;# 
   594  0393                     	;# 
   595  0498                     	;# 
   596  0498                     	;# 
   597  0499                     	;# 
   598  049A                     	;# 
   599  049B                     	;# 
   600  049B                     	;# 
   601  049C                     	;# 
   602  049D                     	;# 
   603  049E                     	;# 
   604  049F                     	;# 
   605  0611                     	;# 
   606  0612                     	;# 
   607  0613                     	;# 
   608  0613                     	;# 
   609  0614                     	;# 
   610  0615                     	;# 
   611  0616                     	;# 
   612  0616                     	;# 
   613  0617                     	;# 
   614  0618                     	;# 
   615  0619                     	;# 
   616  0619                     	;# 
   617  061A                     	;# 
   618  061B                     	;# 
   619  061C                     	;# 
   620  061C                     	;# 
   621  0691                     	;# 
   622  0692                     	;# 
   623  0693                     	;# 
   624  0694                     	;# 
   625  0695                     	;# 
   626  0F0F                     	;# 
   627  0F10                     	;# 
   628  0F11                     	;# 
   629  0F12                     	;# 
   630  0F13                     	;# 
   631  0F14                     	;# 
   632  0F15                     	;# 
   633  0F16                     	;# 
   634  0F17                     	;# 
   635  0F18                     	;# 
   636  0F19                     	;# 
   637  0F1A                     	;# 
   638  0F1B                     	;# 
   639  0F1C                     	;# 
   640  0F1D                     	;# 
   641  0F1E                     	;# 
   642  0F1F                     	;# 
   643  0FE3                     	;# 
   644  0FE4                     	;# 
   645  0FE5                     	;# 
   646  0FE6                     	;# 
   647  0FE7                     	;# 
   648  0FE8                     	;# 
   649  0FE9                     	;# 
   650  0FEA                     	;# 
   651  0FEB                     	;# 
   652  0FED                     	;# 
   653  0FEE                     	;# 
   654  0FEF                     	;# 
   655  0000                     	;# 
   656  0001                     	;# 
   657  0002                     	;# 
   658  0003                     	;# 
   659  0004                     	;# 
   660  0005                     	;# 
   661  0006                     	;# 
   662  0007                     	;# 
   663  0008                     	;# 
   664  0009                     	;# 
   665  000A                     	;# 
   666  000B                     	;# 
   667  000C                     	;# 
   668  000E                     	;# 
   669  0011                     	;# 
   670  0012                     	;# 
   671  0013                     	;# 
   672  0015                     	;# 
   673  0016                     	;# 
   674  0016                     	;# 
   675  0017                     	;# 
   676  0018                     	;# 
   677  0019                     	;# 
   678  001A                     	;# 
   679  001B                     	;# 
   680  001C                     	;# 
   681  008C                     	;# 
   682  008E                     	;# 
   683  0091                     	;# 
   684  0092                     	;# 
   685  0093                     	;# 
   686  0095                     	;# 
   687  0096                     	;# 
   688  0097                     	;# 
   689  0099                     	;# 
   690  009A                     	;# 
   691  009B                     	;# 
   692  009B                     	;# 
   693  009C                     	;# 
   694  009D                     	;# 
   695  009E                     	;# 
   696  009F                     	;# 
   697  010C                     	;# 
   698  010E                     	;# 
   699  0111                     	;# 
   700  0112                     	;# 
   701  0113                     	;# 
   702  0114                     	;# 
   703  0115                     	;# 
   704  0116                     	;# 
   705  0117                     	;# 
   706  0118                     	;# 
   707  0119                     	;# 
   708  011D                     	;# 
   709  018C                     	;# 
   710  018E                     	;# 
   711  0191                     	;# 
   712  0191                     	;# 
   713  0192                     	;# 
   714  0193                     	;# 
   715  0193                     	;# 
   716  0194                     	;# 
   717  0195                     	;# 
   718  0196                     	;# 
   719  020C                     	;# 
   720  0211                     	;# 
   721  0211                     	;# 
   722  0212                     	;# 
   723  0212                     	;# 
   724  0213                     	;# 
   725  0213                     	;# 
   726  0214                     	;# 
   727  0214                     	;# 
   728  0215                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0216                     	;# 
   732  0216                     	;# 
   733  0217                     	;# 
   734  0217                     	;# 
   735  0391                     	;# 
   736  0392                     	;# 
   737  0393                     	;# 
   738  0498                     	;# 
   739  0498                     	;# 
   740  0499                     	;# 
   741  049A                     	;# 
   742  049B                     	;# 
   743  049B                     	;# 
   744  049C                     	;# 
   745  049D                     	;# 
   746  049E                     	;# 
   747  049F                     	;# 
   748  0611                     	;# 
   749  0612                     	;# 
   750  0613                     	;# 
   751  0613                     	;# 
   752  0614                     	;# 
   753  0615                     	;# 
   754  0616                     	;# 
   755  0616                     	;# 
   756  0617                     	;# 
   757  0618                     	;# 
   758  0619                     	;# 
   759  0619                     	;# 
   760  061A                     	;# 
   761  061B                     	;# 
   762  061C                     	;# 
   763  061C                     	;# 
   764  0691                     	;# 
   765  0692                     	;# 
   766  0693                     	;# 
   767  0694                     	;# 
   768  0695                     	;# 
   769  0F0F                     	;# 
   770  0F10                     	;# 
   771  0F11                     	;# 
   772  0F12                     	;# 
   773  0F13                     	;# 
   774  0F14                     	;# 
   775  0F15                     	;# 
   776  0F16                     	;# 
   777  0F17                     	;# 
   778  0F18                     	;# 
   779  0F19                     	;# 
   780  0F1A                     	;# 
   781  0F1B                     	;# 
   782  0F1C                     	;# 
   783  0F1D                     	;# 
   784  0F1E                     	;# 
   785  0F1F                     	;# 
   786  0FE3                     	;# 
   787  0FE4                     	;# 
   788  0FE5                     	;# 
   789  0FE6                     	;# 
   790  0FE7                     	;# 
   791  0FE8                     	;# 
   792  0FE9                     	;# 
   793  0FEA                     	;# 
   794  0FEB                     	;# 
   795  0FED                     	;# 
   796  0FEE                     	;# 
   797  0FEF                     	;# 
   798                           
   799                           	psect	idataBANK0
   800  0749                     __pidataBANK0:	
   801                           
   802                           ;initializer for _mode
   803  0749  340A               	retlw	10
   804                           
   805                           ;initializer for _nextMode
   806  074A  340A               	retlw	10
   807  07E0                     _NVMEM_absaddr	set	2016
   808                           
   809                           	psect	stringtext1
   810  073B                     __pstringtext1:	
   811  073B                     _n_ADDRESS_P0:	
   812  073B  34AD               	retlw	173
   813  073C  3487               	retlw	135
   814  073D  3466               	retlw	102
   815  073E  34BC               	retlw	188
   816  073F  34BB               	retlw	187
   817  0740                     __end_of_n_ADDRESS_P0:	
   818                           
   819                           	psect	stringtext2
   820  074B                     __pstringtext2:	
   821  074B                     _n_ADDRESS_MUL:	
   822  074B  3421               	retlw	33
   823  074C                     __end_of_n_ADDRESS_MUL:	
   824  07E0                     _NVMEM_absaddr	set	2016
   825                           
   826                           	psect	_NVMEM_text
   827  07E0                     __p_NVMEM_text:	
   828  07E0                     _NVMEM:	
   829  07E0  3455               	retlw	85
   830  07E1  346E               	retlw	110
   831  07E2  3463               	retlw	99
   832  07E3  346F               	retlw	111
   833  07E4  346E               	retlw	110
   834  07E5  3466               	retlw	102
   835  07E6  3469               	retlw	105
   836  07E7  3467               	retlw	103
   837  07E8  3475               	retlw	117
   838  07E9  3472               	retlw	114
   839  07EA  3465               	retlw	101
   840  07EB  3464               	retlw	100
   841  07EC  3400               	retlw	0
   842  07ED  3400               	retlw	0
   843  07EE  3400               	retlw	0
   844  07EF  3400               	retlw	0
   845  07F0  3400               	retlw	0
   846  07F1  3400               	retlw	0
   847  07F2  3400               	retlw	0
   848  07F3  3400               	retlw	0
   849  07F4  3400               	retlw	0
   850  07F5  3400               	retlw	0
   851  07F6  3400               	retlw	0
   852  07F7  3400               	retlw	0
   853  07F8  3400               	retlw	0
   854  07F9  3400               	retlw	0
   855  07FA  3400               	retlw	0
   856  07FB  3400               	retlw	0
   857  07FC  3400               	retlw	0
   858  07FD  3400               	retlw	0
   859  07FE  3400               	retlw	0
   860  07FF  3400               	retlw	0
   861  0800                     __end_of_NVMEM:	
   862  0003                     _STATUSbits	set	3
   863  0011                     _PIR1bits	set	17
   864  000C                     _PORTAbits	set	12
   865  000B                     _INTCONbits	set	11
   866  0097                     _WDTCONbits	set	151
   867  0091                     _PIE1bits	set	145
   868  009E                     _ADCON1bits	set	158
   869  0095                     _OPTION_REGbits	set	149
   870  0099                     _OSCCONbits	set	153
   871  009D                     _ADCON0bits	set	157
   872  009C                     _ADRESH	set	156
   873  009B                     _ADRESL	set	155
   874  008E                     _TRISCbits	set	142
   875  008C                     _TRISAbits	set	140
   876  0117                     _FVRCONbits	set	279
   877  018E                     _ANSELCbits	set	398
   878  018C                     _ANSELAbits	set	396
   879  018E                     _ANSELC	set	398
   880  018C                     _ANSELA	set	396
   881  0194                     _PMDATH	set	404
   882  0193                     _PMDATL	set	403
   883  0196                     _PMCON2	set	406
   884  0195                     _PMCON1bits	set	405
   885  0192                     _PMADRH	set	402
   886  0191                     _PMADRL	set	401
   887  0195                     _PMCON1	set	405
   888  020C                     _WPUAbits	set	524
   889  0211                     _SSP1BUF	set	529
   890  0214                     _SSP1STATbits	set	532
   891  0215                     _SSPCON1bits	set	533
   892                           
   893                           	psect	stringtext3
   894  072F                     __pstringtext3:	
   895  072F                     STR_2:	
   896  072F  3443               	retlw	67	;'C'
   897  0730  344F               	retlw	79	;'O'
   898  0731  3455               	retlw	85	;'U'
   899  0732  344E               	retlw	78	;'N'
   900  0733  3454               	retlw	84	;'T'
   901  0734  3400               	retlw	0
   902                           
   903                           	psect	stringtext4
   904  0740                     __pstringtext4:	
   905  0740                     STR_1:	
   906  0740  3442               	retlw	66	;'B'
   907  0741  344F               	retlw	79	;'O'
   908  0742  344F               	retlw	79	;'O'
   909  0743  3454               	retlw	84	;'T'
   910  0744  3400               	retlw	0
   911                           
   912                           	psect	stringtext5
   913  0745                     __pstringtext5:	
   914  0745                     STR_3:	
   915  0745  3441               	retlw	65	;'A'
   916  0746  3444               	retlw	68	;'D'
   917  0747  3443               	retlw	67	;'C'
   918  0748  3400               	retlw	0
   919                           
   920                           	psect	stringtext6
   921  0000                     __pstringtext6:	
   922                           
   923                           ; #config settings
   924  0000                     
   925                           	psect	cinit
   926  0045                     start_initialization:	
   927  0045                     __initialization:	
   928                           
   929                           ; Initialize objects allocated to BANK0
   930  0045  2749               	fcall	__pidataBANK0	;fetch initializer
   931  0046  00E9               	movwf	__pdataBANK0& (0+127)
   932  0047  274A               	fcall	__pidataBANK0+1	;fetch initializer
   933  0048  00EA               	movwf	(__pdataBANK0+1)& (0+127)
   934                           
   935                           ; Clear objects allocated to BANK0
   936  0049  3020               	movlw	low __pbssBANK0
   937  004A  0084               	movwf	4
   938  004B  3000               	movlw	high __pbssBANK0
   939  004C  0085               	movwf	5
   940  004D  3027               	movlw	39
   941  004E  2735               	fcall	clear_ram0
   942  004F                     end_of_initialization:	
   943                           ;End of C runtime variable initialization code
   944                           
   945  004F                     __end_of__initialization:	
   946  004F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   947  0050  0020               	movlb	0
   948  0051  2C19               	ljmp	_main	;jump to C main() function
   949                           
   950                           	psect	bssBANK0
   951  0020                     __pbssBANK0:	
   952  0020                     _adcSum:	
   953  0020                     	ds	4
   954  0024                     _counter:	
   955  0024                     	ds	2
   956  0026                     _sleepLoop:	
   957  0026                     	ds	1
   958  0027                     _adcLoop:	
   959  0027                     	ds	1
   960  0028                     _nrf24l01:	
   961  0028                     	ds	31
   962                           
   963                           	psect	dataBANK0
   964  0069                     __pdataBANK0:	
   965  0069                     _mode:	
   966  0069                     	ds	1
   967  006A                     _nextMode:	
   968  006A                     	ds	1
   969                           
   970                           	psect	clrtext
   971  0735                     clear_ram0:	
   972                           ;	Called with FSR0 containing the base address, and
   973                           ;	WREG with the size to clear
   974                           
   975  0735  0064               	clrwdt	;clear the watchdog before getting into this loop
   976  0736                     clrloop0:	
   977  0736  0180               	clrf	0	;clear RAM location pointed to by FSR
   978  0737  3101               	addfsr 0,1
   979  0738  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   980  0739  2F36               	goto	clrloop0	;have we reached the end yet?
   981  073A  3400               	retlw	0	;all done for this memory range, return
   982                           
   983                           	psect	cstackBANK1
   984  00A0                     __pcstackBANK1:	
   985  00A0                     ??_loop:	
   986                           
   987                           ; 1 bytes @ 0x0
   988  00A0                     	ds	4
   989                           
   990                           	psect	cstackCOMMON
   991  0070                     __pcstackCOMMON:	
   992  0070                     ?_nrf24l01ISR:	
   993  0070                     ?_nrf24l01SendString:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0070                     ?_nrf24l01Init:	
   997                           ; 1 bytes @ 0x0
   998                           
   999  0070                     ?_nrf24l01InterfaceInit:	
  1000                           ; 1 bytes @ 0x0
  1001                           
  1002  0070                     ?_nrf24l01SPISend:	
  1003                           ; 1 bytes @ 0x0
  1004                           
  1005  0070                     ??_nrf24l01SPISend:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0070                     ?_nrf24l01SPIStart:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011  0070                     ??_nrf24l01SPIStart:	
  1012                           ; 1 bytes @ 0x0
  1013                           
  1014  0070                     ?_nrf24l01SPIEnd:	
  1015                           ; 1 bytes @ 0x0
  1016                           
  1017  0070                     ??_nrf24l01SPIEnd:	
  1018                           ; 1 bytes @ 0x0
  1019                           
  1020  0070                     ?_enableInterrupts:	
  1021                           ; 1 bytes @ 0x0
  1022                           
  1023  0070                     ??_enableInterrupts:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0070                     ?_ISR:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0070                     ?_startADC:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ?_loop:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     ?_main:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ?_nrf24l01SetRXMode:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ?_nrf24l01HandleRX:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ?_nrf24l01InitRegisters:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047  0070                     ?i1_write_flashmem:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050  0070                     nrf24l01SPISend@data:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     enableInterrupts@enable:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0070                     i1write_flashmem@offset:	
  1057                           ; 1 bytes @ 0x0
  1058                           
  1059                           
  1060                           ; 2 bytes @ 0x0
  1061  0070                     	ds	1
  1062  0071                     ??_nrf24l01Send:	
  1063                           
  1064                           ; 1 bytes @ 0x1
  1065  0071                     	ds	1
  1066  0072                     nrf24l01Send@command:	
  1067  0072                     i1write_flashmem@data:	
  1068                           ; 1 bytes @ 0x2
  1069                           
  1070                           
  1071                           ; 2 bytes @ 0x2
  1072  0072                     	ds	1
  1073  0073                     ??_nrf24l01SetRXMode:	
  1074  0073                     ??_nrf24l01HandleRX:	
  1075                           ; 1 bytes @ 0x3
  1076                           
  1077                           
  1078                           ; 1 bytes @ 0x3
  1079  0073                     	ds	1
  1080  0074                     ??i1_write_flashmem:	
  1081  0074                     nrf24l01SetRXMode@rxMode:	
  1082                           ; 1 bytes @ 0x4
  1083                           
  1084  0074                     nrf24l01HandleRX@byte:	
  1085                           ; 1 bytes @ 0x4
  1086                           
  1087  0074                     i1write_flashmem@address:	
  1088                           ; 1 bytes @ 0x4
  1089                           
  1090                           
  1091                           ; 2 bytes @ 0x4
  1092  0074                     	ds	1
  1093  0075                     nrf24l01SetRXMode@config:	
  1094  0075                     nrf24l01HandleRX@width:	
  1095                           ; 1 bytes @ 0x5
  1096                           
  1097                           
  1098                           ; 1 bytes @ 0x5
  1099  0075                     	ds	1
  1100  0076                     nrf24l01HandleRX@i:	
  1101                           
  1102                           ; 1 bytes @ 0x6
  1103  0076                     	ds	1
  1104  0077                     ??_nrf24l01ISR:	
  1105                           
  1106                           ; 1 bytes @ 0x7
  1107  0077                     	ds	1
  1108  0078                     nrf24l01ISR@tempStatus:	
  1109                           
  1110                           ; 1 bytes @ 0x8
  1111  0078                     	ds	1
  1112  0079                     ??_ISR:	
  1113                           
  1114                           ; 1 bytes @ 0x9
  1115  0079                     	ds	4
  1116                           
  1117                           	psect	cstackBANK0
  1118  0047                     __pcstackBANK0:	
  1119  0047                     ?_nrf24l01Send:	
  1120  0047                     nrf24l01Send@data:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123                           
  1124                           ; 1 bytes @ 0x0
  1125  0047                     	ds	1
  1126  0048                     ISR@result:	
  1127                           
  1128                           ; 2 bytes @ 0x1
  1129  0048                     	ds	2
  1130  004A                     ?_strcpy:	
  1131  004A                     ?_write_flashmem:	
  1132                           ; 1 bytes @ 0x3
  1133                           
  1134  004A                     ??_nrf24l01InterfaceInit:	
  1135                           ; 1 bytes @ 0x3
  1136                           
  1137  004A                     ??_startADC:	
  1138                           ; 1 bytes @ 0x3
  1139                           
  1140  004A                     ??_nrf24l01InitRegisters:	
  1141                           ; 1 bytes @ 0x3
  1142                           
  1143  004A                     ?_strlen:	
  1144                           ; 1 bytes @ 0x3
  1145                           
  1146  004A                     ?_read_flashmem:	
  1147                           ; 2 bytes @ 0x3
  1148                           
  1149  004A                     ?___lwdiv:	
  1150                           ; 2 bytes @ 0x3
  1151                           
  1152  004A                     ?___lwmod:	
  1153                           ; 2 bytes @ 0x3
  1154                           
  1155  004A                     ?___lmul:	
  1156                           ; 2 bytes @ 0x3
  1157                           
  1158  004A                     ?___lldiv:	
  1159                           ; 4 bytes @ 0x3
  1160                           
  1161  004A                     write_flashmem@offset:	
  1162                           ; 4 bytes @ 0x3
  1163                           
  1164  004A                     read_flashmem@offset:	
  1165                           ; 2 bytes @ 0x3
  1166                           
  1167  004A                     ___lwdiv@divisor:	
  1168                           ; 2 bytes @ 0x3
  1169                           
  1170  004A                     ___lwmod@divisor:	
  1171                           ; 2 bytes @ 0x3
  1172                           
  1173  004A                     strcpy@from:	
  1174                           ; 2 bytes @ 0x3
  1175                           
  1176  004A                     ___lmul@multiplier:	
  1177                           ; 2 bytes @ 0x3
  1178                           
  1179  004A                     ___lldiv@divisor:	
  1180                           ; 4 bytes @ 0x3
  1181                           
  1182                           
  1183                           ; 4 bytes @ 0x3
  1184  004A                     	ds	1
  1185  004B                     startADC@channel:	
  1186  004B                     nrf24l01InitRegisters@feature:	
  1187                           ; 1 bytes @ 0x4
  1188                           
  1189                           
  1190                           ; 1 bytes @ 0x4
  1191  004B                     	ds	1
  1192  004C                     ??_strcpy:	
  1193  004C                     ??_strlen:	
  1194                           ; 1 bytes @ 0x5
  1195                           
  1196  004C                     ??_read_flashmem:	
  1197                           ; 1 bytes @ 0x5
  1198                           
  1199  004C                     nrf24l01InitRegisters@status:	
  1200                           ; 1 bytes @ 0x5
  1201                           
  1202  004C                     write_flashmem@data:	
  1203                           ; 1 bytes @ 0x5
  1204                           
  1205  004C                     ___lwdiv@dividend:	
  1206                           ; 2 bytes @ 0x5
  1207                           
  1208  004C                     ___lwmod@dividend:	
  1209                           ; 2 bytes @ 0x5
  1210                           
  1211                           
  1212                           ; 2 bytes @ 0x5
  1213  004C                     	ds	1
  1214  004D                     nrf24l01InitRegisters@enRXAddr:	
  1215  004D                     strcpy@cp:	
  1216                           ; 1 bytes @ 0x6
  1217                           
  1218                           
  1219                           ; 1 bytes @ 0x6
  1220  004D                     	ds	1
  1221  004E                     ??_write_flashmem:	
  1222  004E                     ??___lwdiv:	
  1223                           ; 1 bytes @ 0x7
  1224                           
  1225  004E                     ??___lwmod:	
  1226                           ; 1 bytes @ 0x7
  1227                           
  1228  004E                     nrf24l01InitRegisters@enAA:	
  1229                           ; 1 bytes @ 0x7
  1230                           
  1231  004E                     strcpy@to:	
  1232                           ; 1 bytes @ 0x7
  1233                           
  1234  004E                     write_flashmem@address:	
  1235                           ; 1 bytes @ 0x7
  1236                           
  1237  004E                     ___lmul@multiplicand:	
  1238                           ; 2 bytes @ 0x7
  1239                           
  1240  004E                     ___lldiv@dividend:	
  1241                           ; 4 bytes @ 0x7
  1242                           
  1243                           
  1244                           ; 4 bytes @ 0x7
  1245  004E                     	ds	1
  1246  004F                     nrf24l01InitRegisters@DynPD:	
  1247  004F                     ___lwmod@counter:	
  1248                           ; 1 bytes @ 0x8
  1249                           
  1250  004F                     read_flashmem@result:	
  1251                           ; 1 bytes @ 0x8
  1252                           
  1253  004F                     ___lwdiv@quotient:	
  1254                           ; 2 bytes @ 0x8
  1255                           
  1256                           
  1257                           ; 2 bytes @ 0x8
  1258  004F                     	ds	1
  1259  0050                     nrf24l01InitRegisters@config:	
  1260  0050                     strlen@s:	
  1261                           ; 1 bytes @ 0x9
  1262                           
  1263                           
  1264                           ; 1 bytes @ 0x9
  1265  0050                     	ds	1
  1266  0051                     ??_nrf24l01Init:	
  1267  0051                     ___lwdiv@counter:	
  1268                           ; 1 bytes @ 0xA
  1269                           
  1270  0051                     strlen@cp:	
  1271                           ; 1 bytes @ 0xA
  1272                           
  1273  0051                     read_flashmem@address:	
  1274                           ; 1 bytes @ 0xA
  1275                           
  1276                           
  1277                           ; 2 bytes @ 0xA
  1278  0051                     	ds	1
  1279  0052                     ?_utoa:	
  1280  0052                     ??___lmul:	
  1281                           ; 1 bytes @ 0xB
  1282                           
  1283  0052                     ??___lldiv:	
  1284                           ; 1 bytes @ 0xB
  1285                           
  1286  0052                     utoa@val:	
  1287                           ; 1 bytes @ 0xB
  1288                           
  1289  0052                     ___lmul@product:	
  1290                           ; 2 bytes @ 0xB
  1291                           
  1292                           
  1293                           ; 4 bytes @ 0xB
  1294  0052                     	ds	1
  1295  0053                     ??_nrf24l01SendString:	
  1296  0053                     ___lldiv@quotient:	
  1297                           ; 1 bytes @ 0xC
  1298                           
  1299                           
  1300                           ; 4 bytes @ 0xC
  1301  0053                     	ds	1
  1302  0054                     utoa@base:	
  1303                           
  1304                           ; 2 bytes @ 0xD
  1305  0054                     	ds	2
  1306  0056                     ??_utoa:	
  1307  0056                     nrf24l01SendString@waitForAck:	
  1308                           ; 1 bytes @ 0xF
  1309                           
  1310                           
  1311                           ; 1 bytes @ 0xF
  1312  0056                     	ds	1
  1313  0057                     nrf24l01SendString@btye:	
  1314  0057                     ___lldiv@counter:	
  1315                           ; 1 bytes @ 0x10
  1316                           
  1317  0057                     utoa@v:	
  1318                           ; 1 bytes @ 0x10
  1319                           
  1320                           
  1321                           ; 2 bytes @ 0x10
  1322  0057                     	ds	1
  1323  0058                     nrf24l01SendString@i:	
  1324                           
  1325                           ; 1 bytes @ 0x11
  1326  0058                     	ds	1
  1327  0059                     utoa@c:	
  1328                           
  1329                           ; 1 bytes @ 0x12
  1330  0059                     	ds	1
  1331  005A                     utoa@buf:	
  1332                           
  1333                           ; 1 bytes @ 0x13
  1334  005A                     	ds	1
  1335  005B                     ?_itoa:	
  1336  005B                     itoa@val:	
  1337                           ; 1 bytes @ 0x14
  1338                           
  1339                           
  1340                           ; 2 bytes @ 0x14
  1341  005B                     	ds	2
  1342  005D                     itoa@base:	
  1343                           
  1344                           ; 2 bytes @ 0x16
  1345  005D                     	ds	2
  1346  005F                     ??_itoa:	
  1347                           
  1348                           ; 1 bytes @ 0x18
  1349  005F                     	ds	1
  1350  0060                     itoa@cp:	
  1351                           
  1352                           ; 1 bytes @ 0x19
  1353  0060                     	ds	1
  1354  0061                     itoa@buf:	
  1355                           
  1356                           ; 1 bytes @ 0x1A
  1357  0061                     	ds	1
  1358  0062                     ?__itoa:	
  1359  0062                     __itoa@number:	
  1360                           ; 1 bytes @ 0x1B
  1361                           
  1362                           
  1363                           ; 2 bytes @ 0x1B
  1364  0062                     	ds	2
  1365  0064                     __itoa@base:	
  1366                           
  1367                           ; 1 bytes @ 0x1D
  1368  0064                     	ds	1
  1369  0065                     ??__itoa:	
  1370                           
  1371                           ; 1 bytes @ 0x1E
  1372  0065                     	ds	2
  1373  0067                     __itoa@buffer:	
  1374                           
  1375                           ; 1 bytes @ 0x20
  1376  0067                     	ds	1
  1377  0068                     ??_main:	
  1378                           
  1379                           ; 1 bytes @ 0x21
  1380  0068                     	ds	1
  1381                           
  1382                           	psect	maintext
  1383  0419                     __pmaintext:	
  1384 ;;
  1385 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1386 ;;
  1387 ;; *************** function _main *****************
  1388 ;; Defined at:
  1389 ;;		line 192 in file "main.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;		None
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;		None
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1398 ;; Tracked objects:
  1399 ;;		On entry : B1F/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMMON   BANK0   BANK1
  1403 ;;      Params:         0       0       0
  1404 ;;      Locals:         0       0       0
  1405 ;;      Temps:          0       1       0
  1406 ;;      Totals:         0       1       0
  1407 ;;Total ram usage:        1 bytes
  1408 ;; Hardware stack levels required when called:   10
  1409 ;; This function calls:
  1410 ;;		_loop
  1411 ;;		_nrf24l01Init
  1412 ;; This function is called by:
  1413 ;;		Startup code after reset
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           
  1418                           ;psect for function _main
  1419  0419                     _main:	
  1420                           
  1421                           ;main.c: 195: ANSELA = 0x00;
  1422                           
  1423                           ;incstack = 0
  1424                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1425  0419  0023               	movlb	3	; select bank3
  1426  041A  018C               	clrf	12	;volatile
  1427                           
  1428                           ;main.c: 196: ANSELC = 0x00;
  1429  041B  018E               	clrf	14	;volatile
  1430                           
  1431                           ;main.c: 202: INTCONbits.PEIE = 0;
  1432  041C  130B               	bcf	11,6	;volatile
  1433                           
  1434                           ;main.c: 203: INTCONbits.GIE = 0;
  1435  041D  138B               	bcf	11,7	;volatile
  1436                           
  1437                           ;main.c: 205: OSCCONbits.IRCF = 0b1111;
  1438  041E  3078               	movlw	120
  1439  041F  0021               	movlb	1	; select bank1
  1440  0420  0499               	iorwf	25,f	;volatile
  1441                           
  1442                           ;main.c: 206: OSCCONbits.SCS = 0b10;
  1443  0421  0819               	movf	25,w	;volatile
  1444  0422  39FC               	andlw	-4
  1445  0423  3802               	iorlw	2
  1446  0424  0099               	movwf	25	;volatile
  1447                           
  1448                           ;main.c: 208: _delay((unsigned long)((10)*(16000000/4000.0)));
  1449  0425  3034               	movlw	52
  1450  0426  0020               	movlb	0	; select bank0
  1451  0427  00E8               	movwf	??_main
  1452  0428  30F1               	movlw	241
  1453  0429                     u1237:	
  1454  0429  0B89               	decfsz	9,f
  1455  042A  2C29               	goto	u1237
  1456  042B  0BE8               	decfsz	??_main,f
  1457  042C  2C29               	goto	u1237
  1458  042D  3200               	nop2
  1459                           
  1460                           ;main.c: 210: nrf24l01Init();
  1461  042E  26A5               	fcall	_nrf24l01Init
  1462                           
  1463                           ;main.c: 212: OPTION_REGbits.nWPUEN = 0;
  1464  042F  0021               	movlb	1	; select bank1
  1465  0430  1395               	bcf	21,7	;volatile
  1466                           
  1467                           ;main.c: 215: FVRCONbits.FVREN = 0;
  1468  0431  0022               	movlb	2	; select bank2
  1469  0432  1397               	bcf	23,7	;volatile
  1470                           
  1471                           ;main.c: 216: FVRCONbits.ADFVR = 1;
  1472  0433  0817               	movf	23,w	;volatile
  1473  0434  39FC               	andlw	-4
  1474  0435  3801               	iorlw	1
  1475  0436  0097               	movwf	23	;volatile
  1476                           
  1477                           ;main.c: 217: FVRCONbits.FVREN = 1;
  1478  0437  1797               	bsf	23,7	;volatile
  1479                           
  1480                           ;main.c: 220: FVRCONbits.TSEN = 0;
  1481  0438  1297               	bcf	23,5	;volatile
  1482                           
  1483                           ;main.c: 221: FVRCONbits.TSRNG = 0;
  1484  0439  1217               	bcf	23,4	;volatile
  1485                           
  1486                           ;main.c: 222: FVRCONbits.TSEN = 1;
  1487  043A  1697               	bsf	23,5	;volatile
  1488                           
  1489                           ;main.c: 225: ADCON0bits.ADON = 0;
  1490  043B  0021               	movlb	1	; select bank1
  1491  043C  101D               	bcf	29,0	;volatile
  1492                           
  1493                           ;main.c: 227: ANSELAbits.ANSA4 = 1;
  1494  043D  0023               	movlb	3	; select bank3
  1495  043E  160C               	bsf	12,4	;volatile
  1496                           
  1497                           ;main.c: 228: TRISAbits.TRISA4 = 1;
  1498  043F  0021               	movlb	1	; select bank1
  1499  0440  160C               	bsf	12,4	;volatile
  1500                           
  1501                           ;main.c: 229: WPUAbits.WPUA4 = 0;
  1502  0441  0024               	movlb	4	; select bank4
  1503  0442  120C               	bcf	12,4	;volatile
  1504                           
  1505                           ;main.c: 231: ANSELCbits.ANSC3 = 1;
  1506  0443  0023               	movlb	3	; select bank3
  1507  0444  158E               	bsf	14,3	;volatile
  1508                           
  1509                           ;main.c: 232: TRISCbits.TRISC3 = 1;
  1510  0445  0021               	movlb	1	; select bank1
  1511  0446  158E               	bsf	14,3	;volatile
  1512                           
  1513                           ;main.c: 234: ADCON1bits.ADCS = 0b111;
  1514  0447  3070               	movlw	112
  1515  0448  049E               	iorwf	30,f	;volatile
  1516                           
  1517                           ;main.c: 235: ADCON1bits.ADFM = 1;
  1518  0449  179E               	bsf	30,7	;volatile
  1519                           
  1520                           ;main.c: 236: ADCON1bits.ADPREF = 0b00;
  1521  044A  30FC               	movlw	-4
  1522  044B  059E               	andwf	30,f	;volatile
  1523                           
  1524                           ;main.c: 238: PIE1bits.ADIE = 1;
  1525  044C  1711               	bsf	17,6	;volatile
  1526                           
  1527                           ;main.c: 240: ADCON0bits.CHS = 3;
  1528  044D  081D               	movf	29,w	;volatile
  1529  044E  3983               	andlw	-125
  1530  044F  380C               	iorlw	12
  1531  0450  009D               	movwf	29	;volatile
  1532                           
  1533                           ;main.c: 241: ADCON0bits.ADON = 1;
  1534  0451  141D               	bsf	29,0	;volatile
  1535                           
  1536                           ;main.c: 245: TRISAbits.TRISA2 = 1;
  1537  0452  150C               	bsf	12,2	;volatile
  1538                           
  1539                           ;main.c: 246: INTCONbits.INTE = 1;
  1540  0453  160B               	bsf	11,4	;volatile
  1541                           
  1542                           ;main.c: 247: OPTION_REGbits.INTEDG = 0;
  1543  0454  1315               	bcf	21,6	;volatile
  1544                           
  1545                           ;main.c: 251: WDTCONbits.WDTPS = 10 ;
  1546  0455  0817               	movf	23,w	;volatile
  1547  0456  39C1               	andlw	-63
  1548  0457  3814               	iorlw	20
  1549  0458  0097               	movwf	23	;volatile
  1550                           
  1551                           ;main.c: 254: TRISAbits.TRISA5 = 0;
  1552  0459  128C               	bcf	12,5	;volatile
  1553                           
  1554                           ;main.c: 255: PORTAbits.RA5 = 0;
  1555  045A  0020               	movlb	0	; select bank0
  1556  045B  128C               	bcf	12,5	;volatile
  1557                           
  1558                           ;main.c: 258: INTCONbits.PEIE = 1;
  1559  045C  170B               	bsf	11,6	;volatile
  1560                           
  1561                           ;main.c: 259: INTCONbits.GIE = 1;
  1562  045D  178B               	bsf	11,7	;volatile
  1563  045E                     l2356:	
  1564                           ;main.c: 261: while(1){
  1565                           
  1566                           
  1567                           ;main.c: 262: loop();
  1568  045E  2052               	fcall	_loop
  1569  045F  2C5E               	goto	l2356
  1570  0460                     __end_of_main:	
  1571                           ;main.c: 263: }
  1572                           ;main.c: 265: return;
  1573                           
  1574                           
  1575                           	psect	text1
  1576  06A5                     __ptext1:	
  1577 ;; *************** function _nrf24l01Init *****************
  1578 ;; Defined at:
  1579 ;;		line 331 in file "nrf24l01.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;		None
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;		None
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      void 
  1586 ;; Registers used:
  1587 ;;		wreg, status,2, status,0, pclath, cstack
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMMON   BANK0   BANK1
  1593 ;;      Params:         0       0       0
  1594 ;;      Locals:         0       0       0
  1595 ;;      Temps:          0       1       0
  1596 ;;      Totals:         0       1       0
  1597 ;;Total ram usage:        1 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; Hardware stack levels required when called:    8
  1600 ;; This function calls:
  1601 ;;		_nrf24l01InitRegisters
  1602 ;;		_nrf24l01InterfaceInit
  1603 ;;		_nrf24l01Send
  1604 ;; This function is called by:
  1605 ;;		_main
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609                           
  1610                           ;psect for function _nrf24l01Init
  1611  06A5                     _nrf24l01Init:	
  1612                           
  1613                           ;nrf24l01.c: 334: nrf24l01InterfaceInit();
  1614                           
  1615                           ;incstack = 0
  1616                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1617  06A5  2701               	fcall	_nrf24l01InterfaceInit
  1618                           
  1619                           ;nrf24l01.c: 338: PORTAbits.RA0 = 0;
  1620  06A6  0020               	movlb	0	; select bank0
  1621  06A7  100C               	bcf	12,0	;volatile
  1622                           
  1623                           ;nrf24l01.c: 340: _delay((unsigned long)((11)*(16000000/4000.0)));
  1624  06A8  303A               	movlw	58
  1625  06A9  0020               	movlb	0	; select bank0
  1626  06AA  00D1               	movwf	??_nrf24l01Init
  1627  06AB  3023               	movlw	35
  1628  06AC                     u1247:	
  1629  06AC  0B89               	decfsz	9,f
  1630  06AD  2EAC               	goto	u1247
  1631  06AE  0BD1               	decfsz	??_nrf24l01Init,f
  1632  06AF  2EAC               	goto	u1247
  1633                           
  1634                           ;nrf24l01.c: 342: nrf24l01InitRegisters();
  1635  06B0  22F5               	fcall	_nrf24l01InitRegisters
  1636                           
  1637                           ;nrf24l01.c: 344: _delay((unsigned long)((2)*(16000000/4000.0)));
  1638  06B1  300B               	movlw	11
  1639  06B2  0020               	movlb	0	; select bank0
  1640  06B3  00D1               	movwf	??_nrf24l01Init
  1641  06B4  3062               	movlw	98
  1642  06B5                     u1257:	
  1643  06B5  0B89               	decfsz	9,f
  1644  06B6  2EB5               	goto	u1257
  1645  06B7  0BD1               	decfsz	??_nrf24l01Init,f
  1646  06B8  2EB5               	goto	u1257
  1647  06B9  0000               	nop
  1648                           
  1649                           ;nrf24l01.c: 346: nrf24l01.status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  1650  06BA  0020               	movlb	0	; select bank0
  1651  06BB  01C7               	clrf	nrf24l01Send@data
  1652  06BC  3007               	movlw	7
  1653  06BD  26DE               	fcall	_nrf24l01Send
  1654  06BE  0020               	movlb	0	; select bank0
  1655  06BF  00D1               	movwf	??_nrf24l01Init
  1656  06C0  0851               	movf	??_nrf24l01Init,w
  1657  06C1  00A8               	movwf	_nrf24l01	;volatile
  1658  06C2  0008               	return
  1659  06C3                     __end_of_nrf24l01Init:	
  1660                           
  1661                           	psect	text2
  1662  0701                     __ptext2:	
  1663 ;; *************** function _nrf24l01InterfaceInit *****************
  1664 ;; Defined at:
  1665 ;;		line 8 in file "interface.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;		None
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;		None
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg, status,2, status,0
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMMON   BANK0   BANK1
  1679 ;;      Params:         0       0       0
  1680 ;;      Locals:         0       0       0
  1681 ;;      Temps:          0       0       0
  1682 ;;      Totals:         0       0       0
  1683 ;;Total ram usage:        0 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    5
  1686 ;; This function calls:
  1687 ;;		Nothing
  1688 ;; This function is called by:
  1689 ;;		_nrf24l01Init
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           
  1694                           ;psect for function _nrf24l01InterfaceInit
  1695  0701                     _nrf24l01InterfaceInit:	
  1696                           
  1697                           ;interface.c: 10: TRISAbits.TRISA0 = 0;
  1698                           
  1699                           ;incstack = 0
  1700                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  1701  0701  0021               	movlb	1	; select bank1
  1702  0702  100C               	bcf	12,0	;volatile
  1703                           
  1704                           ;interface.c: 11: TRISAbits.TRISA1 = 0;
  1705  0703  108C               	bcf	12,1	;volatile
  1706                           
  1707                           ;interface.c: 13: TRISCbits.TRISC1 = 1;
  1708  0704  148E               	bsf	14,1	;volatile
  1709                           
  1710                           ;interface.c: 14: TRISCbits.TRISC2 = 0;
  1711  0705  110E               	bcf	14,2	;volatile
  1712                           
  1713                           ;interface.c: 15: TRISCbits.TRISC0 = 0;
  1714  0706  100E               	bcf	14,0	;volatile
  1715                           
  1716                           ;interface.c: 17: SSPCON1bits.SSPEN = 0;
  1717  0707  0024               	movlb	4	; select bank4
  1718  0708  1295               	bcf	21,5	;volatile
  1719                           
  1720                           ;interface.c: 18: SSPCON1bits.CKP = 0;
  1721  0709  1215               	bcf	21,4	;volatile
  1722                           
  1723                           ;interface.c: 19: SSP1STATbits.CKE = 1;
  1724  070A  1714               	bsf	20,6	;volatile
  1725                           
  1726                           ;interface.c: 20: SSPCON1bits.SSPM = 0b0000;
  1727  070B  30F0               	movlw	-16
  1728  070C  0595               	andwf	21,f	;volatile
  1729                           
  1730                           ;interface.c: 22: SSPCON1bits.SSPEN = 1;
  1731  070D  1695               	bsf	21,5	;volatile
  1732  070E  0008               	return
  1733  070F                     __end_of_nrf24l01InterfaceInit:	
  1734                           
  1735                           	psect	text3
  1736  02F5                     __ptext3:	
  1737 ;; *************** function _nrf24l01InitRegisters *****************
  1738 ;; Defined at:
  1739 ;;		line 239 in file "nrf24l01.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;  config          1    9[BANK0 ] struct .
  1744 ;;  DynPD           1    8[BANK0 ] struct .
  1745 ;;  enAA            1    7[BANK0 ] struct .
  1746 ;;  enRXAddr        1    6[BANK0 ] struct .
  1747 ;;  status          1    5[BANK0 ] struct .
  1748 ;;  feature         1    4[BANK0 ] struct .
  1749 ;; Return value:  Size  Location     Type
  1750 ;;                  1    wreg      void 
  1751 ;; Registers used:
  1752 ;;		wreg, status,2, status,0, pclath, cstack
  1753 ;; Tracked objects:
  1754 ;;		On entry : 0/0
  1755 ;;		On exit  : 0/0
  1756 ;;		Unchanged: 0/0
  1757 ;; Data sizes:     COMMON   BANK0   BANK1
  1758 ;;      Params:         0       0       0
  1759 ;;      Locals:         0       6       0
  1760 ;;      Temps:          0       1       0
  1761 ;;      Totals:         0       7       0
  1762 ;;Total ram usage:        7 bytes
  1763 ;; Hardware stack levels used:    1
  1764 ;; Hardware stack levels required when called:    7
  1765 ;; This function calls:
  1766 ;;		_nrf24l01Send
  1767 ;; This function is called by:
  1768 ;;		_nrf24l01Init
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           
  1773                           ;psect for function _nrf24l01InitRegisters
  1774  02F5                     _nrf24l01InitRegisters:	
  1775                           
  1776                           ;nrf24l01.c: 242: n_CONFIG_t config;
  1777                           ;nrf24l01.c: 244: config.PWR_UP = 0;
  1778                           
  1779                           ;incstack = 0
  1780                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  1781  02F5  0020               	movlb	0	; select bank0
  1782  02F6  10D0               	bcf	nrf24l01InitRegisters@config,1
  1783                           
  1784                           ;nrf24l01.c: 245: nrf24l01Send(0b00100000 | 0x00, config.byte);
  1785  02F7  0850               	movf	nrf24l01InitRegisters@config,w
  1786  02F8  00CA               	movwf	??_nrf24l01InitRegisters
  1787  02F9  084A               	movf	??_nrf24l01InitRegisters,w
  1788  02FA  00C7               	movwf	nrf24l01Send@data
  1789  02FB  3020               	movlw	32
  1790  02FC  26DE               	fcall	_nrf24l01Send
  1791                           
  1792                           ;nrf24l01.c: 247: _delay((unsigned long)((10000)*(16000000/4000000.0)));
  1793  02FD  3034               	movlw	52
  1794  02FE  0020               	movlb	0	; select bank0
  1795  02FF  00CA               	movwf	??_nrf24l01InitRegisters
  1796  0300  30F1               	movlw	241
  1797  0301                     u1267:	
  1798  0301  0B89               	decfsz	9,f
  1799  0302  2B01               	goto	u1267
  1800  0303  0BCA               	decfsz	??_nrf24l01InitRegisters,f
  1801  0304  2B01               	goto	u1267
  1802  0305  3200               	nop2
  1803                           
  1804                           ;nrf24l01.c: 273: n_EN_RXADDR_t enRXAddr;
  1805                           ;nrf24l01.c: 274: enRXAddr.ERX_P0 = 1;
  1806  0306  0020               	movlb	0	; select bank0
  1807  0307  144D               	bsf	nrf24l01InitRegisters@enRXAddr,0
  1808                           
  1809                           ;nrf24l01.c: 275: enRXAddr.ERX_P1 = 1;
  1810  0308  14CD               	bsf	nrf24l01InitRegisters@enRXAddr,1
  1811                           
  1812                           ;nrf24l01.c: 276: enRXAddr.ERX_P2 = 1;
  1813  0309  154D               	bsf	nrf24l01InitRegisters@enRXAddr,2
  1814                           
  1815                           ;nrf24l01.c: 277: enRXAddr.ERX_P3 = 1;
  1816  030A  15CD               	bsf	nrf24l01InitRegisters@enRXAddr,3
  1817                           
  1818                           ;nrf24l01.c: 278: enRXAddr.ERX_P4 = 1;
  1819  030B  164D               	bsf	nrf24l01InitRegisters@enRXAddr,4
  1820                           
  1821                           ;nrf24l01.c: 279: enRXAddr.ERX_P5 = 1;
  1822  030C  16CD               	bsf	nrf24l01InitRegisters@enRXAddr,5
  1823                           
  1824                           ;nrf24l01.c: 280: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  1825  030D  084D               	movf	nrf24l01InitRegisters@enRXAddr,w
  1826  030E  00CA               	movwf	??_nrf24l01InitRegisters
  1827  030F  084A               	movf	??_nrf24l01InitRegisters,w
  1828  0310  00C7               	movwf	nrf24l01Send@data
  1829  0311  3022               	movlw	34
  1830  0312  26DE               	fcall	_nrf24l01Send
  1831                           
  1832                           ;nrf24l01.c: 283: n_EN_AA_t enAA;
  1833                           ;nrf24l01.c: 284: enAA.byte = nrf24l01Send(0b00000000 | 0x01, 0);
  1834  0313  0020               	movlb	0	; select bank0
  1835  0314  01C7               	clrf	nrf24l01Send@data
  1836  0315  3001               	movlw	1
  1837  0316  26DE               	fcall	_nrf24l01Send
  1838  0317  0020               	movlb	0	; select bank0
  1839  0318  00CA               	movwf	??_nrf24l01InitRegisters
  1840  0319  084A               	movf	??_nrf24l01InitRegisters,w
  1841  031A  00CE               	movwf	nrf24l01InitRegisters@enAA
  1842                           
  1843                           ;nrf24l01.c: 285: enAA.ENAA_P0 = 0;
  1844  031B  104E               	bcf	nrf24l01InitRegisters@enAA,0
  1845                           
  1846                           ;nrf24l01.c: 286: enAA.ENAA_P1 = 0;
  1847  031C  10CE               	bcf	nrf24l01InitRegisters@enAA,1
  1848                           
  1849                           ;nrf24l01.c: 287: enAA.ENAA_P2 = 0;
  1850  031D  114E               	bcf	nrf24l01InitRegisters@enAA,2
  1851                           
  1852                           ;nrf24l01.c: 288: enAA.ENAA_P3 = 0;
  1853  031E  11CE               	bcf	nrf24l01InitRegisters@enAA,3
  1854                           
  1855                           ;nrf24l01.c: 289: enAA.ENAA_P4 = 0;
  1856  031F  124E               	bcf	nrf24l01InitRegisters@enAA,4
  1857                           
  1858                           ;nrf24l01.c: 290: enAA.ENAA_P5 = 0;
  1859  0320  12CE               	bcf	nrf24l01InitRegisters@enAA,5
  1860                           
  1861                           ;nrf24l01.c: 291: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  1862  0321  084E               	movf	nrf24l01InitRegisters@enAA,w
  1863  0322  00CA               	movwf	??_nrf24l01InitRegisters
  1864  0323  084A               	movf	??_nrf24l01InitRegisters,w
  1865  0324  00C7               	movwf	nrf24l01Send@data
  1866  0325  3021               	movlw	33
  1867  0326  26DE               	fcall	_nrf24l01Send
  1868                           
  1869                           ;nrf24l01.c: 295: n_FEATURE_t feature;
  1870                           ;nrf24l01.c: 296: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  1871  0327  0020               	movlb	0	; select bank0
  1872  0328  01C7               	clrf	nrf24l01Send@data
  1873  0329  301D               	movlw	29
  1874  032A  26DE               	fcall	_nrf24l01Send
  1875  032B  0020               	movlb	0	; select bank0
  1876  032C  00CA               	movwf	??_nrf24l01InitRegisters
  1877  032D  084A               	movf	??_nrf24l01InitRegisters,w
  1878  032E  00CB               	movwf	nrf24l01InitRegisters@feature
  1879                           
  1880                           ;nrf24l01.c: 297: feature.EN_DPL = 1;
  1881  032F  154B               	bsf	nrf24l01InitRegisters@feature,2
  1882                           
  1883                           ;nrf24l01.c: 298: feature.EN_DYN_ACK = 1;
  1884  0330  144B               	bsf	nrf24l01InitRegisters@feature,0
  1885                           
  1886                           ;nrf24l01.c: 299: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  1887  0331  084B               	movf	nrf24l01InitRegisters@feature,w
  1888  0332  00CA               	movwf	??_nrf24l01InitRegisters
  1889  0333  084A               	movf	??_nrf24l01InitRegisters,w
  1890  0334  00C7               	movwf	nrf24l01Send@data
  1891  0335  303D               	movlw	61
  1892  0336  26DE               	fcall	_nrf24l01Send
  1893                           
  1894                           ;nrf24l01.c: 301: n_DYNPD_t DynPD;
  1895                           ;nrf24l01.c: 302: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  1896  0337  0020               	movlb	0	; select bank0
  1897  0338  01C7               	clrf	nrf24l01Send@data
  1898  0339  301C               	movlw	28
  1899  033A  26DE               	fcall	_nrf24l01Send
  1900  033B  0020               	movlb	0	; select bank0
  1901  033C  00CA               	movwf	??_nrf24l01InitRegisters
  1902  033D  084A               	movf	??_nrf24l01InitRegisters,w
  1903  033E  00CF               	movwf	nrf24l01InitRegisters@DynPD
  1904                           
  1905                           ;nrf24l01.c: 303: DynPD.DPL_P0 = 1;
  1906  033F  144F               	bsf	nrf24l01InitRegisters@DynPD,0
  1907                           
  1908                           ;nrf24l01.c: 304: DynPD.DPL_P1 = 1;
  1909  0340  14CF               	bsf	nrf24l01InitRegisters@DynPD,1
  1910                           
  1911                           ;nrf24l01.c: 305: DynPD.DPL_P2 = 1;
  1912  0341  154F               	bsf	nrf24l01InitRegisters@DynPD,2
  1913                           
  1914                           ;nrf24l01.c: 306: DynPD.DPL_P3 = 1;
  1915  0342  15CF               	bsf	nrf24l01InitRegisters@DynPD,3
  1916                           
  1917                           ;nrf24l01.c: 307: DynPD.DPL_P4 = 1;
  1918  0343  164F               	bsf	nrf24l01InitRegisters@DynPD,4
  1919                           
  1920                           ;nrf24l01.c: 308: DynPD.DPL_P5 = 1;
  1921  0344  16CF               	bsf	nrf24l01InitRegisters@DynPD,5
  1922                           
  1923                           ;nrf24l01.c: 309: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  1924  0345  084F               	movf	nrf24l01InitRegisters@DynPD,w
  1925  0346  00CA               	movwf	??_nrf24l01InitRegisters
  1926  0347  084A               	movf	??_nrf24l01InitRegisters,w
  1927  0348  00C7               	movwf	nrf24l01Send@data
  1928  0349  303C               	movlw	60
  1929  034A  26DE               	fcall	_nrf24l01Send
  1930                           
  1931                           ;nrf24l01.c: 312: n_STATUS_t status;
  1932                           ;nrf24l01.c: 313: status.byte = 0x00;
  1933  034B  0020               	movlb	0	; select bank0
  1934  034C  01CC               	clrf	nrf24l01InitRegisters@status
  1935                           
  1936                           ;nrf24l01.c: 314: status.RX_DR = 1;
  1937  034D  174C               	bsf	nrf24l01InitRegisters@status,6
  1938                           
  1939                           ;nrf24l01.c: 315: status.TX_DS = 1;
  1940  034E  16CC               	bsf	nrf24l01InitRegisters@status,5
  1941                           
  1942                           ;nrf24l01.c: 316: status.MAX_RT = 1;
  1943  034F  164C               	bsf	nrf24l01InitRegisters@status,4
  1944                           
  1945                           ;nrf24l01.c: 317: nrf24l01Send(0b00100000 | 0x07, status.byte);
  1946  0350  084C               	movf	nrf24l01InitRegisters@status,w
  1947  0351  00CA               	movwf	??_nrf24l01InitRegisters
  1948  0352  084A               	movf	??_nrf24l01InitRegisters,w
  1949  0353  00C7               	movwf	nrf24l01Send@data
  1950  0354  3027               	movlw	39
  1951  0355  26DE               	fcall	_nrf24l01Send
  1952                           
  1953                           ;nrf24l01.c: 320: nrf24l01Send(0b11100001, 0);
  1954  0356  0020               	movlb	0	; select bank0
  1955  0357  01C7               	clrf	nrf24l01Send@data
  1956  0358  30E1               	movlw	225
  1957  0359  26DE               	fcall	_nrf24l01Send
  1958                           
  1959                           ;nrf24l01.c: 321: nrf24l01Send(0b11100010, 0);
  1960  035A  0020               	movlb	0	; select bank0
  1961  035B  01C7               	clrf	nrf24l01Send@data
  1962  035C  30E2               	movlw	226
  1963  035D  26DE               	fcall	_nrf24l01Send
  1964                           
  1965                           ;nrf24l01.c: 324: config.PRIM_RX = 1;
  1966  035E  0020               	movlb	0	; select bank0
  1967  035F  1450               	bsf	nrf24l01InitRegisters@config,0
  1968                           
  1969                           ;nrf24l01.c: 325: config.EN_CRC = 1;
  1970  0360  15D0               	bsf	nrf24l01InitRegisters@config,3
  1971                           
  1972                           ;nrf24l01.c: 326: config.CRCO = 1;
  1973  0361  1550               	bsf	nrf24l01InitRegisters@config,2
  1974                           
  1975                           ;nrf24l01.c: 327: config.PWR_UP = 1;
  1976  0362  14D0               	bsf	nrf24l01InitRegisters@config,1
  1977                           
  1978                           ;nrf24l01.c: 328: nrf24l01Send(0b00100000 | 0x00, config.byte);
  1979  0363  0850               	movf	nrf24l01InitRegisters@config,w
  1980  0364  00CA               	movwf	??_nrf24l01InitRegisters
  1981  0365  084A               	movf	??_nrf24l01InitRegisters,w
  1982  0366  00C7               	movwf	nrf24l01Send@data
  1983  0367  3020               	movlw	32
  1984  0368  26DE               	fcall	_nrf24l01Send
  1985  0369  0008               	return
  1986  036A                     __end_of_nrf24l01InitRegisters:	
  1987                           
  1988                           	psect	text4
  1989  0052                     __ptext4:	
  1990 ;; *************** function _loop *****************
  1991 ;; Defined at:
  1992 ;;		line 74 in file "main.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;		None
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;		None
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  1    wreg      void 
  1999 ;; Registers used:
  2000 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMMON   BANK0   BANK1
  2006 ;;      Params:         0       0       0
  2007 ;;      Locals:         0       0       0
  2008 ;;      Temps:          0       0       4
  2009 ;;      Totals:         0       0       4
  2010 ;;Total ram usage:        4 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    9
  2013 ;; This function calls:
  2014 ;;		___lldiv
  2015 ;;		___lmul
  2016 ;;		__itoa
  2017 ;;		_nrf24l01SendString
  2018 ;;		_read_flashmem
  2019 ;;		_startADC
  2020 ;;		_strcpy
  2021 ;;		_strlen
  2022 ;;		_write_flashmem
  2023 ;; This function is called by:
  2024 ;;		_main
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           
  2029                           ;psect for function _loop
  2030  0052                     _loop:	
  2031                           
  2032                           ;main.c: 76: if (mode != 1) {
  2033                           
  2034                           ;incstack = 0
  2035                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2036  0052  0020               	movlb	0	; select bank0
  2037  0053  0369               	decf	_mode,w
  2038  0054  1903               	btfsc	3,2
  2039  0055  29E7               	goto	l2286
  2040  0056  0064               	clrwdt	;# 
  2041                           
  2042                           ;main.c: 78: }
  2043                           ;main.c: 80: switch (mode){
  2044  0057  29E7               	goto	l2286
  2045  0058                     l166:	
  2046                           ;main.c: 82: case 1:
  2047                           
  2048  0058  0063               	sleep	;# 
  2049                           
  2050                           ;main.c: 85: __nop();
  2051  0059  0000               	nop
  2052                           
  2053                           ;main.c: 86: __nop();
  2054  005A  0000               	nop
  2055                           
  2056                           ;main.c: 88: if (!STATUSbits.nTO && !STATUSbits.nPD){
  2057  005B  0020               	movlb	0	; select bank0
  2058  005C  1E03               	btfss	3,4	;volatile
  2059  005D  1983               	btfsc	3,3	;volatile
  2060  005E  2866               	goto	l2220
  2061                           
  2062                           ;main.c: 89: mode = nextMode;
  2063  005F  086A               	movf	_nextMode,w
  2064  0060  0021               	movlb	1	; select bank1
  2065  0061  00A0               	movwf	??_loop^(0+128)
  2066  0062  0820               	movf	??_loop^(0+128),w
  2067  0063  0020               	movlb	0	; select bank0
  2068  0064  00E9               	movwf	_mode
  2069                           
  2070                           ;main.c: 90: sleepLoop = 0;
  2071  0065  01A6               	clrf	_sleepLoop
  2072  0066                     l2220:	
  2073                           
  2074                           ;main.c: 91: }
  2075                           ;main.c: 93: if (sleepLoop++ > 5){
  2076  0066  0826               	movf	_sleepLoop,w
  2077  0067  0AA6               	incf	_sleepLoop,f
  2078  0068  0021               	movlb	1	; select bank1
  2079  0069  00A0               	movwf	??_loop^(0+128)
  2080  006A  3006               	movlw	6
  2081  006B  0220               	subwf	??_loop^(0+128),w
  2082  006C  1C03               	skipc
  2083  006D  0008               	return
  2084                           
  2085                           ;main.c: 94: write_flashmem(16, 1001);
  2086  006E  3010               	movlw	16
  2087  006F  0020               	movlb	0	; select bank0
  2088  0070  00CA               	movwf	write_flashmem@offset
  2089  0071  3000               	movlw	0
  2090  0072  00CB               	movwf	write_flashmem@offset+1
  2091  0073  30E9               	movlw	233
  2092  0074  00CC               	movwf	write_flashmem@data
  2093  0075  3003               	movlw	3
  2094  0076  00CD               	movwf	write_flashmem@data+1
  2095  0077  24A7               	fcall	_write_flashmem
  2096  0078  0001               	reset	;# 
  2097                           
  2098                           ;main.c: 96: }
  2099                           ;main.c: 97: break;
  2100  0079  0008               	return
  2101  007A                     l2224:	
  2102                           ;main.c: 99: case 10:
  2103                           
  2104                           
  2105                           ;main.c: 101: strcpy((char *)nrf24l01.txTopic, "BOOT");
  2106  007A  3040               	movlw	low (STR_1| (0+32768))
  2107  007B  0020               	movlb	0	; select bank0
  2108  007C  00CA               	movwf	strcpy@from
  2109  007D  3087               	movlw	high (STR_1| (0+32768))
  2110  007E  00CB               	movwf	strcpy@from+1
  2111  007F  302B               	movlw	(low ((_nrf24l01| 0+3)))& (0+255)
  2112  0080  26C3               	fcall	_strcpy
  2113                           
  2114                           ;main.c: 102: _itoa((char *)nrf24l01.txValue, read_flashmem(16), 10);
  2115  0081  3010               	movlw	16
  2116  0082  0020               	movlb	0	; select bank0
  2117  0083  00CA               	movwf	read_flashmem@offset
  2118  0084  3000               	movlw	0
  2119  0085  00CB               	movwf	read_flashmem@offset+1
  2120  0086  2551               	fcall	_read_flashmem
  2121  0087  0020               	movlb	0	; select bank0
  2122  0088  084B               	movf	?_read_flashmem+1,w
  2123  0089  00E3               	movwf	__itoa@number+1
  2124  008A  084A               	movf	?_read_flashmem,w
  2125  008B  00E2               	movwf	__itoa@number
  2126  008C  300A               	movlw	10
  2127  008D  0021               	movlb	1	; select bank1
  2128  008E  00A0               	movwf	??_loop^(0+128)
  2129  008F  0820               	movf	??_loop^(0+128),w
  2130  0090  0020               	movlb	0	; select bank0
  2131  0091  00E4               	movwf	__itoa@base
  2132  0092  3031               	movlw	(low ((_nrf24l01| 0+9)))& (0+255)
  2133  0093  26F1               	fcall	__itoa
  2134                           
  2135                           ;main.c: 103: nrf24l01SendString(0);
  2136  0094  3000               	movlw	0
  2137  0095  2206               	fcall	_nrf24l01SendString
  2138                           
  2139                           ;main.c: 104: mode = 11;
  2140  0096  300B               	movlw	11
  2141  0097  0021               	movlb	1	; select bank1
  2142  0098  00A0               	movwf	??_loop^(0+128)
  2143  0099  0820               	movf	??_loop^(0+128),w
  2144  009A  0020               	movlb	0	; select bank0
  2145  009B  00E9               	movwf	_mode
  2146                           
  2147                           ;main.c: 105: break;
  2148  009C  0008               	return
  2149  009D                     l171:	
  2150                           ;main.c: 107: case 11:
  2151                           
  2152                           
  2153                           ;main.c: 108: mode = 1;
  2154  009D  01E9               	clrf	_mode
  2155  009E  0AE9               	incf	_mode,f
  2156                           
  2157                           ;main.c: 109: nextMode = 4;
  2158  009F  3004               	movlw	4
  2159  00A0  0021               	movlb	1	; select bank1
  2160  00A1  00A0               	movwf	??_loop^(0+128)
  2161  00A2  0820               	movf	??_loop^(0+128),w
  2162  00A3  0020               	movlb	0	; select bank0
  2163  00A4  00EA               	movwf	_nextMode
  2164                           
  2165                           ;main.c: 110: break;
  2166  00A5  0008               	return
  2167  00A6                     l2234:	
  2168                           ;main.c: 112: case 4:
  2169                           
  2170                           
  2171                           ;main.c: 113: strcpy((char *)nrf24l01.txTopic, "COUNT");
  2172  00A6  302F               	movlw	low (STR_2| (0+32768))
  2173  00A7  00CA               	movwf	strcpy@from
  2174  00A8  3087               	movlw	high (STR_2| (0+32768))
  2175  00A9  00CB               	movwf	strcpy@from+1
  2176  00AA  302B               	movlw	(low ((_nrf24l01| 0+3)))& (0+255)
  2177  00AB  26C3               	fcall	_strcpy
  2178                           
  2179                           ;main.c: 114: _itoa((char *)nrf24l01.txValue, counter, 10);
  2180  00AC  0020               	movlb	0	; select bank0
  2181  00AD  0825               	movf	_counter+1,w
  2182  00AE  00E3               	movwf	__itoa@number+1
  2183  00AF  0824               	movf	_counter,w
  2184  00B0  00E2               	movwf	__itoa@number
  2185  00B1  300A               	movlw	10
  2186  00B2  0021               	movlb	1	; select bank1
  2187  00B3  00A0               	movwf	??_loop^(0+128)
  2188  00B4  0820               	movf	??_loop^(0+128),w
  2189  00B5  0020               	movlb	0	; select bank0
  2190  00B6  00E4               	movwf	__itoa@base
  2191  00B7  3031               	movlw	(low ((_nrf24l01| 0+9)))& (0+255)
  2192  00B8  26F1               	fcall	__itoa
  2193                           
  2194                           ;main.c: 115: nrf24l01SendString(0);
  2195  00B9  3000               	movlw	0
  2196  00BA  2206               	fcall	_nrf24l01SendString
  2197                           
  2198                           ;main.c: 116: mode = 12;
  2199  00BB  300C               	movlw	12
  2200  00BC  0021               	movlb	1	; select bank1
  2201  00BD  00A0               	movwf	??_loop^(0+128)
  2202  00BE  0820               	movf	??_loop^(0+128),w
  2203  00BF  0020               	movlb	0	; select bank0
  2204  00C0  00E9               	movwf	_mode
  2205                           
  2206                           ;main.c: 117: break;
  2207  00C1  0008               	return
  2208  00C2                     l2242:	
  2209                           ;main.c: 119: case 12:
  2210                           
  2211                           
  2212                           ;main.c: 120: startADC(3);
  2213  00C2  3003               	movlw	3
  2214  00C3  25E3               	fcall	_startADC
  2215                           
  2216                           ;main.c: 129: nextMode = 13;
  2217  00C4  300D               	movlw	13
  2218  00C5  0021               	movlb	1	; select bank1
  2219  00C6  00A0               	movwf	??_loop^(0+128)
  2220  00C7  0820               	movf	??_loop^(0+128),w
  2221  00C8  0020               	movlb	0	; select bank0
  2222  00C9  00EA               	movwf	_nextMode
  2223                           
  2224                           ;main.c: 130: break;
  2225  00CA  0008               	return
  2226  00CB                     l2246:	
  2227                           ;main.c: 132: case 13:
  2228                           
  2229                           
  2230                           ;main.c: 133: startADC(7);
  2231  00CB  3007               	movlw	7
  2232  00CC  25E3               	fcall	_startADC
  2233                           
  2234                           ;main.c: 134: nextMode = 15;
  2235  00CD  300F               	movlw	15
  2236  00CE  0021               	movlb	1	; select bank1
  2237  00CF  00A0               	movwf	??_loop^(0+128)
  2238  00D0  0820               	movf	??_loop^(0+128),w
  2239  00D1  0020               	movlb	0	; select bank0
  2240  00D2  00EA               	movwf	_nextMode
  2241                           
  2242                           ;main.c: 135: break;
  2243  00D3  0008               	return
  2244  00D4                     l2250:	
  2245                           ;main.c: 137: case 15:
  2246                           
  2247                           
  2248                           ;main.c: 138: startADC(29);
  2249  00D4  301D               	movlw	29
  2250  00D5  25E3               	fcall	_startADC
  2251                           
  2252                           ;main.c: 139: nextMode = 14;
  2253  00D6  300E               	movlw	14
  2254  00D7  0021               	movlb	1	; select bank1
  2255  00D8  00A0               	movwf	??_loop^(0+128)
  2256  00D9  0820               	movf	??_loop^(0+128),w
  2257  00DA  0020               	movlb	0	; select bank0
  2258  00DB  00EA               	movwf	_nextMode
  2259                           
  2260                           ;main.c: 140: break;
  2261  00DC  0008               	return
  2262  00DD                     l2254:	
  2263                           ;main.c: 142: case 14:
  2264                           
  2265                           
  2266                           ;main.c: 143: startADC(31);
  2267  00DD  301F               	movlw	31
  2268  00DE  25E3               	fcall	_startADC
  2269                           
  2270                           ;main.c: 144: nextMode = 11;
  2271  00DF  300B               	movlw	11
  2272  00E0  0021               	movlb	1	; select bank1
  2273  00E1  00A0               	movwf	??_loop^(0+128)
  2274  00E2  0820               	movf	??_loop^(0+128),w
  2275  00E3  0020               	movlb	0	; select bank0
  2276  00E4  00EA               	movwf	_nextMode
  2277                           
  2278                           ;main.c: 145: break;
  2279  00E5  0008               	return
  2280  00E6                     l2258:	
  2281                           ;main.c: 150: case 3:
  2282                           
  2283                           ;main.c: 149: switch (ADCON0bits.CHS){
  2284                           
  2285                           ;main.c: 147: case 3:
  2286                           
  2287                           
  2288                           ;main.c: 151: adcSum*= 100;
  2289  00E6  3000               	movlw	0
  2290  00E7  0020               	movlb	0	; select bank0
  2291  00E8  00CD               	movwf	___lmul@multiplier+3
  2292  00E9  3000               	movlw	0
  2293  00EA  00CC               	movwf	___lmul@multiplier+2
  2294  00EB  3000               	movlw	0
  2295  00EC  00CB               	movwf	___lmul@multiplier+1
  2296  00ED  3064               	movlw	100
  2297  00EE  00CA               	movwf	___lmul@multiplier
  2298  00EF  0823               	movf	_adcSum+3,w
  2299  00F0  00D1               	movwf	___lmul@multiplicand+3
  2300  00F1  0822               	movf	_adcSum+2,w
  2301  00F2  00D0               	movwf	___lmul@multiplicand+2
  2302  00F3  0821               	movf	_adcSum+1,w
  2303  00F4  00CF               	movwf	___lmul@multiplicand+1
  2304  00F5  0820               	movf	_adcSum,w
  2305  00F6  00CE               	movwf	___lmul@multiplicand
  2306  00F7  2583               	fcall	___lmul
  2307  00F8  0020               	movlb	0	; select bank0
  2308  00F9  084D               	movf	?___lmul+3,w
  2309  00FA  00A3               	movwf	_adcSum+3
  2310  00FB  084C               	movf	?___lmul+2,w
  2311  00FC  00A2               	movwf	_adcSum+2
  2312  00FD  084B               	movf	?___lmul+1,w
  2313  00FE  00A1               	movwf	_adcSum+1
  2314  00FF  084A               	movf	?___lmul,w
  2315  0100  00A0               	movwf	_adcSum
  2316                           
  2317                           ;main.c: 152: adcSum/= 2505;
  2318  0101  3000               	movlw	0
  2319  0102  00CD               	movwf	___lldiv@divisor+3
  2320  0103  3000               	movlw	0
  2321  0104  00CC               	movwf	___lldiv@divisor+2
  2322  0105  3009               	movlw	9
  2323  0106  00CB               	movwf	___lldiv@divisor+1
  2324  0107  30C9               	movlw	201
  2325  0108  298B               	goto	L4
  2326  0109                     l2260:	
  2327                           ;main.c: 155: case 7:
  2328                           
  2329                           ;main.c: 153: break;
  2330                           
  2331                           
  2332                           ;main.c: 156: adcSum*= 100;
  2333  0109  3000               	movlw	0
  2334  010A  0020               	movlb	0	; select bank0
  2335  010B  00CD               	movwf	___lmul@multiplier+3
  2336  010C  3000               	movlw	0
  2337  010D  00CC               	movwf	___lmul@multiplier+2
  2338  010E  3000               	movlw	0
  2339  010F  00CB               	movwf	___lmul@multiplier+1
  2340  0110  3064               	movlw	100
  2341  0111  00CA               	movwf	___lmul@multiplier
  2342  0112  0823               	movf	_adcSum+3,w
  2343  0113  00D1               	movwf	___lmul@multiplicand+3
  2344  0114  0822               	movf	_adcSum+2,w
  2345  0115  00D0               	movwf	___lmul@multiplicand+2
  2346  0116  0821               	movf	_adcSum+1,w
  2347  0117  00CF               	movwf	___lmul@multiplicand+1
  2348  0118  0820               	movf	_adcSum,w
  2349  0119  00CE               	movwf	___lmul@multiplicand
  2350  011A  2583               	fcall	___lmul
  2351  011B  0020               	movlb	0	; select bank0
  2352  011C  084D               	movf	?___lmul+3,w
  2353  011D  00A3               	movwf	_adcSum+3
  2354  011E  084C               	movf	?___lmul+2,w
  2355  011F  00A2               	movwf	_adcSum+2
  2356  0120  084B               	movf	?___lmul+1,w
  2357  0121  00A1               	movwf	_adcSum+1
  2358  0122  084A               	movf	?___lmul,w
  2359  0123  00A0               	movwf	_adcSum
  2360                           
  2361                           ;main.c: 157: adcSum/= 2500;
  2362  0124  3000               	movlw	0
  2363  0125  00CD               	movwf	___lldiv@divisor+3
  2364  0126  3000               	movlw	0
  2365  0127  00CC               	movwf	___lldiv@divisor+2
  2366  0128  3009               	movlw	9
  2367  0129  00CB               	movwf	___lldiv@divisor+1
  2368  012A  30C4               	movlw	196
  2369  012B  298B               	goto	L4
  2370  012C                     l2262:	
  2371                           ;main.c: 160: case 31:
  2372                           
  2373                           ;main.c: 158: break;
  2374                           
  2375                           
  2376                           ;main.c: 161: adcSum*= 100;
  2377  012C  3000               	movlw	0
  2378  012D  0020               	movlb	0	; select bank0
  2379  012E  00CD               	movwf	___lmul@multiplier+3
  2380  012F  3000               	movlw	0
  2381  0130  00CC               	movwf	___lmul@multiplier+2
  2382  0131  3000               	movlw	0
  2383  0132  00CB               	movwf	___lmul@multiplier+1
  2384  0133  3064               	movlw	100
  2385  0134  00CA               	movwf	___lmul@multiplier
  2386  0135  0823               	movf	_adcSum+3,w
  2387  0136  00D1               	movwf	___lmul@multiplicand+3
  2388  0137  0822               	movf	_adcSum+2,w
  2389  0138  00D0               	movwf	___lmul@multiplicand+2
  2390  0139  0821               	movf	_adcSum+1,w
  2391  013A  00CF               	movwf	___lmul@multiplicand+1
  2392  013B  0820               	movf	_adcSum,w
  2393  013C  00CE               	movwf	___lmul@multiplicand
  2394  013D  2583               	fcall	___lmul
  2395  013E  0020               	movlb	0	; select bank0
  2396  013F  084D               	movf	?___lmul+3,w
  2397  0140  00A3               	movwf	_adcSum+3
  2398  0141  084C               	movf	?___lmul+2,w
  2399  0142  00A2               	movwf	_adcSum+2
  2400  0143  084B               	movf	?___lmul+1,w
  2401  0144  00A1               	movwf	_adcSum+1
  2402  0145  084A               	movf	?___lmul,w
  2403  0146  00A0               	movwf	_adcSum
  2404                           
  2405                           ;main.c: 162: adcSum/= 2475;
  2406  0147  3000               	movlw	0
  2407  0148  00CD               	movwf	___lldiv@divisor+3
  2408  0149  3000               	movlw	0
  2409  014A  00CC               	movwf	___lldiv@divisor+2
  2410  014B  3009               	movlw	9
  2411  014C  00CB               	movwf	___lldiv@divisor+1
  2412  014D  30AB               	movlw	171
  2413  014E  298B               	goto	L4
  2414  014F                     l2264:	
  2415                           ;main.c: 165: case 29:
  2416                           
  2417                           ;main.c: 163: break;
  2418                           
  2419                           
  2420                           ;main.c: 166: adcSum/= 2089;
  2421  014F  3000               	movlw	0
  2422  0150  0020               	movlb	0	; select bank0
  2423  0151  00CD               	movwf	___lldiv@divisor+3
  2424  0152  3000               	movlw	0
  2425  0153  00CC               	movwf	___lldiv@divisor+2
  2426  0154  3008               	movlw	8
  2427  0155  00CB               	movwf	___lldiv@divisor+1
  2428  0156  3029               	movlw	41
  2429  0157  00CA               	movwf	___lldiv@divisor
  2430  0158  0823               	movf	_adcSum+3,w
  2431  0159  00D1               	movwf	___lldiv@dividend+3
  2432  015A  0822               	movf	_adcSum+2,w
  2433  015B  00D0               	movwf	___lldiv@dividend+2
  2434  015C  0821               	movf	_adcSum+1,w
  2435  015D  00CF               	movwf	___lldiv@dividend+1
  2436  015E  0820               	movf	_adcSum,w
  2437  015F  00CE               	movwf	___lldiv@dividend
  2438  0160  23C6               	fcall	___lldiv
  2439  0161  0020               	movlb	0	; select bank0
  2440  0162  084D               	movf	?___lldiv+3,w
  2441  0163  00A3               	movwf	_adcSum+3
  2442  0164  084C               	movf	?___lldiv+2,w
  2443  0165  00A2               	movwf	_adcSum+2
  2444  0166  084B               	movf	?___lldiv+1,w
  2445  0167  00A1               	movwf	_adcSum+1
  2446  0168  084A               	movf	?___lldiv,w
  2447  0169  00A0               	movwf	_adcSum
  2448                           
  2449                           ;main.c: 167: adcSum-= 40;
  2450  016A  3028               	movlw	40
  2451  016B  0021               	movlb	1	; select bank1
  2452  016C  00A0               	movwf	??_loop^(0+128)
  2453  016D  3000               	movlw	0
  2454  016E  00A1               	movwf	(??_loop^(0+128)+1)
  2455  016F  3000               	movlw	0
  2456  0170  00A2               	movwf	(??_loop^(0+128)+2)
  2457  0171  3000               	movlw	0
  2458  0172  00A3               	movwf	(??_loop^(0+128)+3)
  2459  0173  0820               	movf	??_loop^(0+128),w
  2460  0174  0020               	movlb	0	; select bank0
  2461  0175  02A0               	subwf	_adcSum,f
  2462  0176  0021               	movlb	1	; select bank1
  2463  0177  0821               	movf	(??_loop+1)^(0+128),w
  2464  0178  0020               	movlb	0	; select bank0
  2465  0179  3BA1               	subwfb	_adcSum+1,f
  2466  017A  0021               	movlb	1	; select bank1
  2467  017B  0822               	movf	(??_loop+2)^(0+128),w
  2468  017C  0020               	movlb	0	; select bank0
  2469  017D  3BA2               	subwfb	_adcSum+2,f
  2470  017E  0021               	movlb	1	; select bank1
  2471  017F  0823               	movf	(??_loop+3)^(0+128),w
  2472  0180  0020               	movlb	0	; select bank0
  2473  0181  3BA3               	subwfb	_adcSum+3,f
  2474                           
  2475                           ;main.c: 168: break;
  2476  0182  29B0               	goto	l2274
  2477  0183                     l2268:	
  2478                           ;main.c: 170: default:
  2479                           
  2480                           
  2481                           ;main.c: 171: adcSum/= 255;
  2482  0183  3000               	movlw	0
  2483  0184  0020               	movlb	0	; select bank0
  2484  0185  00CD               	movwf	___lldiv@divisor+3
  2485  0186  3000               	movlw	0
  2486  0187  00CC               	movwf	___lldiv@divisor+2
  2487  0188  3000               	movlw	0
  2488  0189  00CB               	movwf	___lldiv@divisor+1
  2489  018A  30FF               	movlw	255
  2490  018B                     L4:	
  2491  018B  00CA               	movwf	___lldiv@divisor
  2492  018C  0823               	movf	_adcSum+3,w
  2493  018D  00D1               	movwf	___lldiv@dividend+3
  2494  018E  0822               	movf	_adcSum+2,w
  2495  018F  00D0               	movwf	___lldiv@dividend+2
  2496  0190  0821               	movf	_adcSum+1,w
  2497  0191  00CF               	movwf	___lldiv@dividend+1
  2498  0192  0820               	movf	_adcSum,w
  2499  0193  00CE               	movwf	___lldiv@dividend
  2500  0194  23C6               	fcall	___lldiv
  2501  0195  0020               	movlb	0	; select bank0
  2502  0196  084D               	movf	?___lldiv+3,w
  2503  0197  00A3               	movwf	_adcSum+3
  2504  0198  084C               	movf	?___lldiv+2,w
  2505  0199  00A2               	movwf	_adcSum+2
  2506  019A  084B               	movf	?___lldiv+1,w
  2507  019B  00A1               	movwf	_adcSum+1
  2508  019C  084A               	movf	?___lldiv,w
  2509  019D  00A0               	movwf	_adcSum
  2510                           
  2511                           ;main.c: 173: }
  2512                           
  2513                           ;main.c: 172: break;
  2514  019E  29B0               	goto	l2274
  2515  019F                     l2272:	
  2516  019F  0021               	movlb	1	; select bank1
  2517  01A0  0C1D               	rrf	29,w	;volatile
  2518  01A1  0C89               	rrf	9,f
  2519  01A2  391F               	andlw	31
  2520                           
  2521                           ; Switch size 1, requested type "space"
  2522                           ; Number of cases is 4, Range of values is 3 to 31
  2523                           ; switch strategies available:
  2524                           ; Name         Instructions Cycles
  2525                           ; simple_byte           13     7 (average)
  2526                           ; direct_byte           67     9 (fixed)
  2527                           ; jumptable            263     9 (fixed)
  2528                           ;	Chosen strategy is simple_byte
  2529  01A3  3A03               	xorlw	3	; case 3
  2530  01A4  1903               	skipnz
  2531  01A5  28E6               	goto	l2258
  2532  01A6  3A04               	xorlw	4	; case 7
  2533  01A7  1903               	skipnz
  2534  01A8  2909               	goto	l2260
  2535  01A9  3A1A               	xorlw	26	; case 29
  2536  01AA  1903               	skipnz
  2537  01AB  294F               	goto	l2264
  2538  01AC  3A02               	xorlw	2	; case 31
  2539  01AD  1903               	skipnz
  2540  01AE  292C               	goto	l2262
  2541  01AF  2983               	goto	l2268
  2542  01B0                     l2274:	
  2543                           
  2544                           ;main.c: 175: strcpy((char *)nrf24l01.txTopic, "ADC");
  2545  01B0  3045               	movlw	low (STR_3| (0+32768))
  2546  01B1  0020               	movlb	0	; select bank0
  2547  01B2  00CA               	movwf	strcpy@from
  2548  01B3  3087               	movlw	high (STR_3| (0+32768))
  2549  01B4  00CB               	movwf	strcpy@from+1
  2550  01B5  302B               	movlw	(low ((_nrf24l01| 0+3)))& (0+255)
  2551  01B6  26C3               	fcall	_strcpy
  2552                           
  2553                           ;main.c: 176: _itoa((char *)nrf24l01.txTopic + strlen((char *)nrf24l01.txTopic), ADCON0b
      +                          its.CHS, 10);
  2554  01B7  0021               	movlb	1	; select bank1
  2555  01B8  0C1D               	rrf	29,w	;volatile
  2556  01B9  0C89               	rrf	9,f
  2557  01BA  391F               	andlw	31
  2558  01BB  00A0               	movwf	??_loop^(0+128)
  2559  01BC  01A1               	clrf	(??_loop^(0+128)+1)
  2560  01BD  0820               	movf	??_loop^(0+128),w
  2561  01BE  0020               	movlb	0	; select bank0
  2562  01BF  00E2               	movwf	__itoa@number
  2563  01C0  0021               	movlb	1	; select bank1
  2564  01C1  0821               	movf	(??_loop+1)^(0+128),w
  2565  01C2  0020               	movlb	0	; select bank0
  2566  01C3  00E3               	movwf	__itoa@number+1
  2567  01C4  300A               	movlw	10
  2568  01C5  0021               	movlb	1	; select bank1
  2569  01C6  00A2               	movwf	(??_loop+2)^(0+128)
  2570  01C7  0822               	movf	(??_loop+2)^(0+128),w
  2571  01C8  0020               	movlb	0	; select bank0
  2572  01C9  00E4               	movwf	__itoa@base
  2573  01CA  302B               	movlw	(low ((_nrf24l01| 0+3)))& (0+255)
  2574  01CB  263E               	fcall	_strlen
  2575  01CC  0020               	movlb	0	; select bank0
  2576  01CD  084A               	movf	?_strlen,w
  2577  01CE  3E2B               	addlw	(low ((_nrf24l01| 0+3)))& (0+255)
  2578  01CF  26F1               	fcall	__itoa
  2579                           
  2580                           ;main.c: 178: _itoa((char *)nrf24l01.txValue, adcSum, 10);
  2581  01D0  0020               	movlb	0	; select bank0
  2582  01D1  0821               	movf	_adcSum+1,w
  2583  01D2  00E3               	movwf	__itoa@number+1
  2584  01D3  0820               	movf	_adcSum,w
  2585  01D4  00E2               	movwf	__itoa@number
  2586  01D5  300A               	movlw	10
  2587  01D6  0021               	movlb	1	; select bank1
  2588  01D7  00A0               	movwf	??_loop^(0+128)
  2589  01D8  0820               	movf	??_loop^(0+128),w
  2590  01D9  0020               	movlb	0	; select bank0
  2591  01DA  00E4               	movwf	__itoa@base
  2592  01DB  3031               	movlw	(low ((_nrf24l01| 0+9)))& (0+255)
  2593  01DC  26F1               	fcall	__itoa
  2594                           
  2595                           ;main.c: 180: nrf24l01SendString(0);
  2596  01DD  3000               	movlw	0
  2597  01DE  2206               	fcall	_nrf24l01SendString
  2598                           
  2599                           ;main.c: 183: mode = nextMode;
  2600  01DF  0020               	movlb	0	; select bank0
  2601  01E0  086A               	movf	_nextMode,w
  2602  01E1  0021               	movlb	1	; select bank1
  2603  01E2  00A0               	movwf	??_loop^(0+128)
  2604  01E3  0820               	movf	??_loop^(0+128),w
  2605  01E4  0020               	movlb	0	; select bank0
  2606  01E5  00E9               	movwf	_mode
  2607                           
  2608                           ;main.c: 186: }
  2609                           
  2610                           ;main.c: 184: break;
  2611  01E6  0008               	return
  2612  01E7                     l2286:	
  2613  01E7  0020               	movlb	0	; select bank0
  2614  01E8  0869               	movf	_mode,w
  2615                           
  2616                           ; Switch size 1, requested type "space"
  2617                           ; Number of cases is 9, Range of values is 1 to 15
  2618                           ; switch strategies available:
  2619                           ; Name         Instructions Cycles
  2620                           ; simple_byte           28    15 (average)
  2621                           ; direct_byte           39     9 (fixed)
  2622                           ; jumptable            263     9 (fixed)
  2623                           ;	Chosen strategy is simple_byte
  2624  01E9  3A01               	xorlw	1	; case 1
  2625  01EA  1903               	skipnz
  2626  01EB  2858               	goto	l166
  2627  01EC  3A02               	xorlw	2	; case 3
  2628  01ED  1903               	skipnz
  2629  01EE  299F               	goto	l2272
  2630  01EF  3A07               	xorlw	7	; case 4
  2631  01F0  1903               	skipnz
  2632  01F1  28A6               	goto	l2234
  2633  01F2  3A0E               	xorlw	14	; case 10
  2634  01F3  1903               	skipnz
  2635  01F4  287A               	goto	l2224
  2636  01F5  3A01               	xorlw	1	; case 11
  2637  01F6  1903               	skipnz
  2638  01F7  289D               	goto	l171
  2639  01F8  3A07               	xorlw	7	; case 12
  2640  01F9  1903               	skipnz
  2641  01FA  28C2               	goto	l2242
  2642  01FB  3A01               	xorlw	1	; case 13
  2643  01FC  1903               	skipnz
  2644  01FD  28CB               	goto	l2246
  2645  01FE  3A03               	xorlw	3	; case 14
  2646  01FF  1903               	skipnz
  2647  0200  28DD               	goto	l2254
  2648  0201  3A01               	xorlw	1	; case 15
  2649  0202  1903               	skipnz
  2650  0203  28D4               	goto	l2250
  2651  0204  2A05               	goto	l185
  2652  0205                     l185:	
  2653  0205  0008               	return
  2654  0206                     __end_of_loop:	
  2655                           
  2656                           	psect	text5
  2657  063E                     __ptext5:	
  2658 ;; *************** function _strlen *****************
  2659 ;; Defined at:
  2660 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;  s               1    wreg     PTR const unsigned char 
  2663 ;;		 -> nrf24l01.txTopic(6), nrf24l01(31), 
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;  s               1    9[BANK0 ] PTR const unsigned char 
  2666 ;;		 -> nrf24l01.txTopic(6), nrf24l01(31), 
  2667 ;;  cp              1   10[BANK0 ] PTR const unsigned char 
  2668 ;;		 -> nrf24l01.txTopic(6), nrf24l01(31), 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  2    3[BANK0 ] unsigned int 
  2671 ;; Registers used:
  2672 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMMON   BANK0   BANK1
  2678 ;;      Params:         0       2       0
  2679 ;;      Locals:         0       2       0
  2680 ;;      Temps:          0       4       0
  2681 ;;      Totals:         0       8       0
  2682 ;;Total ram usage:        8 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    5
  2685 ;; This function calls:
  2686 ;;		Nothing
  2687 ;; This function is called by:
  2688 ;;		_loop
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           
  2693                           ;psect for function _strlen
  2694  063E                     _strlen:	
  2695                           
  2696                           ;incstack = 0
  2697                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  2698                           ;strlen@s stored from wreg
  2699  063E  0020               	movlb	0	; select bank0
  2700  063F  00D0               	movwf	strlen@s
  2701  0640  0850               	movf	strlen@s,w
  2702  0641  00CC               	movwf	??_strlen
  2703  0642  084C               	movf	??_strlen,w
  2704  0643  00D1               	movwf	strlen@cp
  2705  0644                     l1760:	
  2706  0644  0851               	movf	strlen@cp,w
  2707  0645  0086               	movwf	6
  2708  0646  0187               	clrf	7
  2709  0647  0801               	movf	1,w
  2710  0648  1903               	btfsc	3,2
  2711  0649  2E4F               	goto	l1762
  2712  064A  3001               	movlw	1
  2713  064B  00CC               	movwf	??_strlen
  2714  064C  084C               	movf	??_strlen,w
  2715  064D  07D1               	addwf	strlen@cp,f
  2716  064E  2E44               	goto	l1760
  2717  064F                     l1762:	
  2718  064F  0850               	movf	strlen@s,w
  2719  0650  00CC               	movwf	??_strlen
  2720  0651  3000               	movlw	0
  2721  0652  00CD               	movwf	??_strlen+1
  2722  0653  09CC               	comf	??_strlen,f
  2723  0654  09CD               	comf	??_strlen+1,f
  2724  0655  0ACC               	incf	??_strlen,f
  2725  0656  1903               	skipnz
  2726  0657  0ACD               	incf	??_strlen+1,f
  2727  0658  0851               	movf	strlen@cp,w
  2728  0659  00CE               	movwf	??_strlen+2
  2729  065A  3000               	movlw	0
  2730  065B  00CF               	movwf	??_strlen+3
  2731  065C  084C               	movf	??_strlen,w
  2732  065D  074E               	addwf	??_strlen+2,w
  2733  065E  00CA               	movwf	?_strlen
  2734  065F  084D               	movf	??_strlen+1,w
  2735  0660  3D4F               	addwfc	??_strlen+3,w
  2736  0661  00CB               	movwf	?_strlen+1
  2737  0662  0008               	return
  2738  0663                     __end_of_strlen:	
  2739                           
  2740                           	psect	text6
  2741  06C3                     __ptext6:	
  2742 ;; *************** function _strcpy *****************
  2743 ;; Defined at:
  2744 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2745 ;; Parameters:    Size  Location     Type
  2746 ;;  to              1    wreg     PTR unsigned char 
  2747 ;;		 -> nrf24l01.txTopic(6), nrf24l01(31), 
  2748 ;;  from            2    3[BANK0 ] PTR const unsigned char 
  2749 ;;		 -> STR_3(4), STR_2(6), STR_1(5), 
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;  to              1    7[BANK0 ] PTR unsigned char 
  2752 ;;		 -> nrf24l01.txTopic(6), nrf24l01(31), 
  2753 ;;  cp              1    6[BANK0 ] PTR unsigned char 
  2754 ;;		 -> nrf24l01.txTopic(6), nrf24l01(31), 
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  1    wreg      PTR unsigned char 
  2757 ;; Registers used:
  2758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMMON   BANK0   BANK1
  2764 ;;      Params:         0       2       0
  2765 ;;      Locals:         0       2       0
  2766 ;;      Temps:          0       1       0
  2767 ;;      Totals:         0       5       0
  2768 ;;Total ram usage:        5 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; Hardware stack levels required when called:    5
  2771 ;; This function calls:
  2772 ;;		Nothing
  2773 ;; This function is called by:
  2774 ;;		_loop
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           
  2779                           ;psect for function _strcpy
  2780  06C3                     _strcpy:	
  2781                           
  2782                           ;incstack = 0
  2783                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  2784                           ;strcpy@to stored from wreg
  2785  06C3  0020               	movlb	0	; select bank0
  2786  06C4  00CE               	movwf	strcpy@to
  2787  06C5  084E               	movf	strcpy@to,w
  2788  06C6  00CC               	movwf	??_strcpy
  2789  06C7  084C               	movf	??_strcpy,w
  2790  06C8  00CD               	movwf	strcpy@cp
  2791  06C9                     l1682:	
  2792  06C9  084D               	movf	strcpy@cp,w
  2793  06CA  0086               	movwf	6
  2794  06CB  0187               	clrf	7
  2795  06CC  084A               	movf	strcpy@from,w
  2796  06CD  0084               	movwf	4
  2797  06CE  084B               	movf	strcpy@from+1,w
  2798  06CF  0085               	movwf	5
  2799  06D0  0800               	movf	0,w	;code access
  2800  06D1  3FC0               	movwi [0]fsr1
  2801  06D2  0889               	movf	9,f
  2802  06D3  1903               	btfsc	3,2
  2803  06D4  0008               	return
  2804  06D5  3001               	movlw	1
  2805  06D6  00CC               	movwf	??_strcpy
  2806  06D7  084C               	movf	??_strcpy,w
  2807  06D8  07CD               	addwf	strcpy@cp,f
  2808  06D9  3001               	movlw	1
  2809  06DA  07CA               	addwf	strcpy@from,f
  2810  06DB  3000               	movlw	0
  2811  06DC  3DCB               	addwfc	strcpy@from+1,f
  2812  06DD  2EC9               	goto	l1682
  2813  06DE                     __end_of_strcpy:	
  2814                           ;	Return value of _strcpy is never used
  2815                           
  2816                           
  2817                           	psect	text7
  2818  05E3                     __ptext7:	
  2819 ;; *************** function _startADC *****************
  2820 ;; Defined at:
  2821 ;;		line 62 in file "main.c"
  2822 ;; Parameters:    Size  Location     Type
  2823 ;;  channel         1    wreg     unsigned char 
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;  channel         1    4[BANK0 ] unsigned char 
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  1    wreg      void 
  2828 ;; Registers used:
  2829 ;;		wreg, status,2, status,0
  2830 ;; Tracked objects:
  2831 ;;		On entry : 0/0
  2832 ;;		On exit  : 0/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMMON   BANK0   BANK1
  2835 ;;      Params:         0       0       0
  2836 ;;      Locals:         0       1       0
  2837 ;;      Temps:          0       1       0
  2838 ;;      Totals:         0       2       0
  2839 ;;Total ram usage:        2 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:    5
  2842 ;; This function calls:
  2843 ;;		Nothing
  2844 ;; This function is called by:
  2845 ;;		_loop
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           
  2850                           ;psect for function _startADC
  2851  05E3                     _startADC:	
  2852                           
  2853                           ;incstack = 0
  2854                           ; Regs used in _startADC: [wreg+status,2+status,0]
  2855                           ;startADC@channel stored from wreg
  2856  05E3  0020               	movlb	0	; select bank0
  2857  05E4  00CB               	movwf	startADC@channel
  2858                           
  2859                           ;main.c: 63: adcSum = 0;
  2860  05E5  3000               	movlw	0
  2861  05E6  00A3               	movwf	_adcSum+3
  2862  05E7  3000               	movlw	0
  2863  05E8  00A2               	movwf	_adcSum+2
  2864  05E9  3000               	movlw	0
  2865  05EA  00A1               	movwf	_adcSum+1
  2866  05EB  3000               	movlw	0
  2867  05EC  00A0               	movwf	_adcSum
  2868                           
  2869                           ;main.c: 64: adcLoop = 255;
  2870  05ED  30FF               	movlw	255
  2871  05EE  00CA               	movwf	??_startADC
  2872  05EF  084A               	movf	??_startADC,w
  2873  05F0  00A7               	movwf	_adcLoop
  2874                           
  2875                           ;main.c: 66: if (ADCON0bits.CHS != channel) {
  2876  05F1  0021               	movlb	1	; select bank1
  2877  05F2  0C1D               	rrf	29,w	;volatile
  2878  05F3  0C89               	rrf	9,f
  2879  05F4  391F               	andlw	31
  2880  05F5  0020               	movlb	0	; select bank0
  2881  05F6  064B               	xorwf	startADC@channel,w
  2882  05F7  1903               	skipnz
  2883  05F8  2E09               	goto	l1672
  2884                           
  2885                           ;main.c: 67: ADCON0bits.CHS = channel;
  2886  05F9  084B               	movf	startADC@channel,w
  2887  05FA  00CA               	movwf	??_startADC
  2888  05FB  0DCA               	rlf	??_startADC,f
  2889  05FC  0DCA               	rlf	??_startADC,f
  2890  05FD  0021               	movlb	1	; select bank1
  2891  05FE  081D               	movf	29,w	;volatile
  2892  05FF  0020               	movlb	0	; select bank0
  2893  0600  064A               	xorwf	??_startADC,w
  2894  0601  3983               	andlw	-125
  2895  0602  064A               	xorwf	??_startADC,w
  2896  0603  0021               	movlb	1	; select bank1
  2897  0604  009D               	movwf	29	;volatile
  2898                           
  2899                           ;main.c: 68: _delay((unsigned long)((200)*(16000000/4000000.0)));
  2900  0605  30A0               	movlw	160
  2901  0606                     u1277:	
  2902  0606  3200               	nop2
  2903  0607  0B89               	decfsz	9,f
  2904  0608  2E06               	goto	u1277
  2905  0609                     l1672:	
  2906                           
  2907                           ;main.c: 69: }
  2908                           ;main.c: 71: ADCON0bits.ADGO = 1;
  2909  0609  0021               	movlb	1	; select bank1
  2910  060A  149D               	bsf	29,1	;volatile
  2911                           
  2912                           ;main.c: 72: mode = 2;
  2913  060B  3002               	movlw	2
  2914  060C  0020               	movlb	0	; select bank0
  2915  060D  00CA               	movwf	??_startADC
  2916  060E  084A               	movf	??_startADC,w
  2917  060F  00E9               	movwf	_mode
  2918  0610  0008               	return
  2919  0611                     __end_of_startADC:	
  2920                           
  2921                           	psect	text8
  2922  0206                     __ptext8:	
  2923 ;; *************** function _nrf24l01SendString *****************
  2924 ;; Defined at:
  2925 ;;		line 162 in file "nrf24l01.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;  waitForAck      1    wreg     unsigned char 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  waitForAck      1   15[BANK0 ] unsigned char 
  2930 ;;  i               1   17[BANK0 ] unsigned char 
  2931 ;;  btye            1   16[BANK0 ] unsigned char 
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  1    wreg      void 
  2934 ;; Registers used:
  2935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMMON   BANK0   BANK1
  2941 ;;      Params:         0       0       0
  2942 ;;      Locals:         0       3       0
  2943 ;;      Temps:          0       3       0
  2944 ;;      Totals:         0       6       0
  2945 ;;Total ram usage:        6 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    8
  2948 ;; This function calls:
  2949 ;;		_enableInterrupts
  2950 ;;		_nrf24l01SPIEnd
  2951 ;;		_nrf24l01SPISend
  2952 ;;		_nrf24l01SPIStart
  2953 ;;		_nrf24l01SetRXMode
  2954 ;;		_read_flashmem
  2955 ;;		_write_flashmem
  2956 ;; This function is called by:
  2957 ;;		_loop
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           
  2962                           ;psect for function _nrf24l01SendString
  2963  0206                     _nrf24l01SendString:	
  2964                           
  2965                           ;incstack = 0
  2966                           ; Regs used in _nrf24l01SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2967                           ;nrf24l01SendString@waitForAck stored from wreg
  2968  0206  0020               	movlb	0	; select bank0
  2969  0207  00D6               	movwf	nrf24l01SendString@waitForAck
  2970                           
  2971                           ;nrf24l01.c: 164: if (!waitForAck){
  2972  0208  0856               	movf	nrf24l01SendString@waitForAck,w
  2973  0209  1D03               	btfss	3,2
  2974  020A  2A3F               	goto	l1688
  2975                           
  2976                           ;nrf24l01.c: 165: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  2977  020B  3002               	movlw	2
  2978  020C  0020               	movlb	0	; select bank0
  2979  020D  00D4               	movwf	??_nrf24l01SendString+1
  2980  020E  3004               	movlw	4
  2981  020F  00D3               	movwf	??_nrf24l01SendString
  2982  0210  30BA               	movlw	186
  2983  0211                     u1287:	
  2984  0211  0B89               	decfsz	9,f
  2985  0212  2A11               	goto	u1287
  2986  0213  0BD3               	decfsz	??_nrf24l01SendString,f
  2987  0214  2A11               	goto	u1287
  2988  0215  0BD4               	decfsz	??_nrf24l01SendString+1,f
  2989  0216  2A11               	goto	u1287
  2990  0217  0000               	nop
  2991                           
  2992                           ;nrf24l01.c: 166: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  2993  0218  3002               	movlw	2
  2994  0219  0020               	movlb	0	; select bank0
  2995  021A  00D4               	movwf	??_nrf24l01SendString+1
  2996  021B  3004               	movlw	4
  2997  021C  00D3               	movwf	??_nrf24l01SendString
  2998  021D  30BA               	movlw	186
  2999  021E                     u1297:	
  3000  021E  0B89               	decfsz	9,f
  3001  021F  2A1E               	goto	u1297
  3002  0220  0BD3               	decfsz	??_nrf24l01SendString,f
  3003  0221  2A1E               	goto	u1297
  3004  0222  0BD4               	decfsz	??_nrf24l01SendString+1,f
  3005  0223  2A1E               	goto	u1297
  3006  0224  0000               	nop
  3007                           
  3008                           ;nrf24l01.c: 167: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3009  0225  3002               	movlw	2
  3010  0226  0020               	movlb	0	; select bank0
  3011  0227  00D4               	movwf	??_nrf24l01SendString+1
  3012  0228  3004               	movlw	4
  3013  0229  00D3               	movwf	??_nrf24l01SendString
  3014  022A  30BA               	movlw	186
  3015  022B                     u1307:	
  3016  022B  0B89               	decfsz	9,f
  3017  022C  2A2B               	goto	u1307
  3018  022D  0BD3               	decfsz	??_nrf24l01SendString,f
  3019  022E  2A2B               	goto	u1307
  3020  022F  0BD4               	decfsz	??_nrf24l01SendString+1,f
  3021  0230  2A2B               	goto	u1307
  3022  0231  0000               	nop
  3023                           
  3024                           ;nrf24l01.c: 168: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3025  0232  3002               	movlw	2
  3026  0233  0020               	movlb	0	; select bank0
  3027  0234  00D4               	movwf	??_nrf24l01SendString+1
  3028  0235  3004               	movlw	4
  3029  0236  00D3               	movwf	??_nrf24l01SendString
  3030  0237  30BA               	movlw	186
  3031  0238                     u1317:	
  3032  0238  0B89               	decfsz	9,f
  3033  0239  2A38               	goto	u1317
  3034  023A  0BD3               	decfsz	??_nrf24l01SendString,f
  3035  023B  2A38               	goto	u1317
  3036  023C  0BD4               	decfsz	??_nrf24l01SendString+1,f
  3037  023D  2A38               	goto	u1317
  3038  023E  0000               	nop
  3039  023F                     l1688:	
  3040                           
  3041                           ;nrf24l01.c: 169: }
  3042                           ;nrf24l01.c: 171: nrf24l01.TXBusyCount = 0;
  3043  023F  30F0               	movlw	-16
  3044  0240  0020               	movlb	0	; select bank0
  3045  0241  05AA               	andwf	_nrf24l01+2,f	;volatile
  3046  0242                     l1696:	
  3047                           ;nrf24l01.c: 172: while (nrf24l01.TXBusy){
  3048                           
  3049  0242  0020               	movlb	0	; select bank0
  3050  0243  1EA9               	btfss	_nrf24l01+1,5	;volatile
  3051  0244  2A6B               	goto	l1698
  3052                           
  3053                           ;nrf24l01.c: 173: if (++nrf24l01.TXBusyCount == 15) {
  3054  0245  082A               	movf	_nrf24l01+2,w	;volatile
  3055  0246  390F               	andlw	15
  3056  0247  00D3               	movwf	??_nrf24l01SendString
  3057  0248  0AD3               	incf	??_nrf24l01SendString,f
  3058  0249  082A               	movf	_nrf24l01+2,w	;volatile
  3059  024A  0653               	xorwf	??_nrf24l01SendString,w
  3060  024B  39F0               	andlw	-16
  3061  024C  0653               	xorwf	??_nrf24l01SendString,w
  3062  024D  00AA               	movwf	_nrf24l01+2	;volatile
  3063  024E  082A               	movf	_nrf24l01+2,w	;volatile
  3064  024F  390F               	andlw	15
  3065  0250  3A0F               	xorlw	15
  3066  0251  1D03               	skipz
  3067  0252  2A5D               	goto	l1694
  3068                           
  3069                           ;nrf24l01.c: 174: write_flashmem(16, 2001);
  3070  0253  3010               	movlw	16
  3071  0254  00CA               	movwf	write_flashmem@offset
  3072  0255  3000               	movlw	0
  3073  0256  00CB               	movwf	write_flashmem@offset+1
  3074  0257  30D1               	movlw	209
  3075  0258  00CC               	movwf	write_flashmem@data
  3076  0259  3007               	movlw	7
  3077  025A  00CD               	movwf	write_flashmem@data+1
  3078  025B  24A7               	fcall	_write_flashmem
  3079  025C  0001               	reset	;# 
  3080  025D                     l1694:	
  3081                           
  3082                           ;nrf24l01.c: 176: }
  3083                           ;nrf24l01.c: 177: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  3084  025D  3002               	movlw	2
  3085  025E  0020               	movlb	0	; select bank0
  3086  025F  00D4               	movwf	??_nrf24l01SendString+1
  3087  0260  3004               	movlw	4
  3088  0261  00D3               	movwf	??_nrf24l01SendString
  3089  0262  30BA               	movlw	186
  3090  0263                     u1327:	
  3091  0263  0B89               	decfsz	9,f
  3092  0264  2A63               	goto	u1327
  3093  0265  0BD3               	decfsz	??_nrf24l01SendString,f
  3094  0266  2A63               	goto	u1327
  3095  0267  0BD4               	decfsz	??_nrf24l01SendString+1,f
  3096  0268  2A63               	goto	u1327
  3097  0269  0000               	nop
  3098  026A  2A42               	goto	l1696
  3099  026B                     l1698:	
  3100                           
  3101                           ;nrf24l01.c: 178: }
  3102                           ;nrf24l01.c: 180: nrf24l01.waitForTXACKCount = 0;
  3103  026B  30E1               	movlw	-31
  3104  026C  05A9               	andwf	_nrf24l01+1,f	;volatile
  3105  026D                     l1706:	
  3106                           ;nrf24l01.c: 181: while (nrf24l01.waitForTXACK){
  3107                           
  3108  026D  0020               	movlb	0	; select bank0
  3109  026E  1C29               	btfss	_nrf24l01+1,0	;volatile
  3110  026F  2A93               	goto	l1708
  3111                           
  3112                           ;nrf24l01.c: 182: if (++nrf24l01.waitForTXACKCount == 15) {
  3113  0270  0C29               	rrf	_nrf24l01+1,w	;volatile
  3114  0271  390F               	andlw	15
  3115  0272  00D3               	movwf	??_nrf24l01SendString
  3116  0273  0AD3               	incf	??_nrf24l01SendString,f
  3117  0274  0DD3               	rlf	??_nrf24l01SendString,f
  3118  0275  0829               	movf	_nrf24l01+1,w	;volatile
  3119  0276  0653               	xorwf	??_nrf24l01SendString,w
  3120  0277  39E1               	andlw	-31
  3121  0278  0653               	xorwf	??_nrf24l01SendString,w
  3122  0279  00A9               	movwf	_nrf24l01+1	;volatile
  3123  027A  0C29               	rrf	_nrf24l01+1,w	;volatile
  3124  027B  390F               	andlw	15
  3125  027C  3A0F               	xorlw	15
  3126  027D  1D03               	skipz
  3127  027E  2A89               	goto	l1704
  3128                           
  3129                           ;nrf24l01.c: 183: write_flashmem(16, 2002);
  3130  027F  3010               	movlw	16
  3131  0280  00CA               	movwf	write_flashmem@offset
  3132  0281  3000               	movlw	0
  3133  0282  00CB               	movwf	write_flashmem@offset+1
  3134  0283  30D2               	movlw	210
  3135  0284  00CC               	movwf	write_flashmem@data
  3136  0285  3007               	movlw	7
  3137  0286  00CD               	movwf	write_flashmem@data+1
  3138  0287  24A7               	fcall	_write_flashmem
  3139  0288  0001               	reset	;# 
  3140  0289                     l1704:	
  3141                           
  3142                           ;nrf24l01.c: 185: }
  3143                           ;nrf24l01.c: 186: _delay((unsigned long)((1000)*(16000000/4000000.0)));
  3144  0289  3006               	movlw	6
  3145  028A  0020               	movlb	0	; select bank0
  3146  028B  00D3               	movwf	??_nrf24l01SendString
  3147  028C  3030               	movlw	48
  3148  028D                     u1337:	
  3149  028D  0B89               	decfsz	9,f
  3150  028E  2A8D               	goto	u1337
  3151  028F  0BD3               	decfsz	??_nrf24l01SendString,f
  3152  0290  2A8D               	goto	u1337
  3153  0291  0000               	nop
  3154  0292  2A6D               	goto	l1706
  3155  0293                     l1708:	
  3156                           
  3157                           ;nrf24l01.c: 187: }
  3158                           ;nrf24l01.c: 189: enableInterrupts(0);
  3159  0293  3000               	movlw	0
  3160  0294  2728               	fcall	_enableInterrupts
  3161                           
  3162                           ;nrf24l01.c: 191: unsigned char btye;
  3163                           ;nrf24l01.c: 192: unsigned char i;
  3164                           ;nrf24l01.c: 194: nrf24l01SetRXMode(0);
  3165  0295  3000               	movlw	0
  3166  0296  24E3               	fcall	_nrf24l01SetRXMode
  3167                           
  3168                           ;nrf24l01.c: 196: nrf24l01.TXBusy = 1;
  3169  0297  0020               	movlb	0	; select bank0
  3170  0298  16A9               	bsf	_nrf24l01+1,5	;volatile
  3171                           
  3172                           ;nrf24l01.c: 197: nrf24l01.waitForTXACK = waitForAck;
  3173  0299  0C56               	rrf	nrf24l01SendString@waitForAck,w
  3174  029A  1C03               	skipc
  3175  029B  1029               	bcf	_nrf24l01+1,0	;volatile
  3176  029C  1803               	skipnc
  3177  029D  1429               	bsf	_nrf24l01+1,0	;volatile
  3178                           
  3179                           ;nrf24l01.c: 199: nrf24l01SPIStart();
  3180  029E  271A               	fcall	_nrf24l01SPIStart
  3181                           
  3182                           ;nrf24l01.c: 201: nrf24l01SPISend(0b10110000);
  3183  029F  30B0               	movlw	176
  3184  02A0  270F               	fcall	_nrf24l01SPISend
  3185                           
  3186                           ;nrf24l01.c: 203: i = 0;
  3187  02A1  0020               	movlb	0	; select bank0
  3188  02A2  01D8               	clrf	nrf24l01SendString@i
  3189  02A3                     l1720:	
  3190                           ;nrf24l01.c: 204: while (1){
  3191                           
  3192                           
  3193                           ;nrf24l01.c: 205: btye = read_flashmem((unsigned) 0 + i++);
  3194  02A3  0020               	movlb	0	; select bank0
  3195  02A4  0858               	movf	nrf24l01SendString@i,w
  3196  02A5  00D3               	movwf	??_nrf24l01SendString
  3197  02A6  01D4               	clrf	??_nrf24l01SendString+1
  3198  02A7  0853               	movf	??_nrf24l01SendString,w
  3199  02A8  00CA               	movwf	read_flashmem@offset
  3200  02A9  0854               	movf	??_nrf24l01SendString+1,w
  3201  02AA  00CB               	movwf	read_flashmem@offset+1
  3202  02AB  2551               	fcall	_read_flashmem
  3203  02AC  0020               	movlb	0	; select bank0
  3204  02AD  084A               	movf	?_read_flashmem,w
  3205  02AE  00D5               	movwf	??_nrf24l01SendString+2
  3206  02AF  0855               	movf	??_nrf24l01SendString+2,w
  3207  02B0  00D7               	movwf	nrf24l01SendString@btye
  3208  02B1  3001               	movlw	1
  3209  02B2  00D3               	movwf	??_nrf24l01SendString
  3210  02B3  0853               	movf	??_nrf24l01SendString,w
  3211  02B4  07D8               	addwf	nrf24l01SendString@i,f
  3212                           
  3213                           ;nrf24l01.c: 207: if (btye == '\0'){
  3214  02B5  0857               	movf	nrf24l01SendString@btye,w
  3215  02B6  1903               	btfsc	3,2
  3216  02B7  2ABB               	goto	l1726
  3217                           
  3218                           ;nrf24l01.c: 209: }
  3219                           ;nrf24l01.c: 211: nrf24l01SPISend(btye);
  3220                           
  3221                           ;nrf24l01.c: 208: break;
  3222  02B8  0857               	movf	nrf24l01SendString@btye,w
  3223  02B9  270F               	fcall	_nrf24l01SPISend
  3224  02BA  2AA3               	goto	l1720
  3225  02BB                     l1726:	
  3226                           
  3227                           ;nrf24l01.c: 212: }
  3228                           ;nrf24l01.c: 214: nrf24l01SPISend('/');
  3229  02BB  302F               	movlw	47
  3230  02BC  270F               	fcall	_nrf24l01SPISend
  3231                           
  3232                           ;nrf24l01.c: 216: for (i = 0; nrf24l01.txTopic[i] != '\0'; i++){
  3233  02BD  0020               	movlb	0	; select bank0
  3234  02BE  01D8               	clrf	nrf24l01SendString@i
  3235  02BF                     l1734:	
  3236  02BF  0858               	movf	nrf24l01SendString@i,w
  3237  02C0  3E2B               	addlw	(low ((_nrf24l01| 0+3)))& (0+255)
  3238  02C1  0086               	movwf	6
  3239  02C2  0187               	clrf	7
  3240  02C3  0801               	movf	1,w
  3241  02C4  1903               	btfsc	3,2
  3242  02C5  2AD2               	goto	l1736
  3243                           
  3244                           ;nrf24l01.c: 217: nrf24l01SPISend(nrf24l01.txTopic[i]);
  3245  02C6  0858               	movf	nrf24l01SendString@i,w
  3246  02C7  3E2B               	addlw	(low ((_nrf24l01| 0+3)))& (0+255)
  3247  02C8  0086               	movwf	6
  3248  02C9  0187               	clrf	7
  3249  02CA  0801               	movf	1,w
  3250  02CB  270F               	fcall	_nrf24l01SPISend
  3251  02CC  3001               	movlw	1
  3252  02CD  0020               	movlb	0	; select bank0
  3253  02CE  00D3               	movwf	??_nrf24l01SendString
  3254  02CF  0853               	movf	??_nrf24l01SendString,w
  3255  02D0  07D8               	addwf	nrf24l01SendString@i,f
  3256  02D1  2ABF               	goto	l1734
  3257  02D2                     l1736:	
  3258                           
  3259                           ;nrf24l01.c: 218: }
  3260                           ;nrf24l01.c: 220: nrf24l01SPISend('/');
  3261  02D2  302F               	movlw	47
  3262  02D3  270F               	fcall	_nrf24l01SPISend
  3263                           
  3264                           ;nrf24l01.c: 222: for (i = 0; nrf24l01.txValue[i] != '\0'; i++){
  3265  02D4  0020               	movlb	0	; select bank0
  3266  02D5  01D8               	clrf	nrf24l01SendString@i
  3267  02D6                     l1744:	
  3268  02D6  0858               	movf	nrf24l01SendString@i,w
  3269  02D7  3E31               	addlw	(low ((_nrf24l01| 0+9)))& (0+255)
  3270  02D8  0086               	movwf	6
  3271  02D9  0187               	clrf	7
  3272  02DA  0801               	movf	1,w
  3273  02DB  1903               	btfsc	3,2
  3274  02DC  2AE9               	goto	l1746
  3275                           
  3276                           ;nrf24l01.c: 223: nrf24l01SPISend(nrf24l01.txValue[i]);
  3277  02DD  0858               	movf	nrf24l01SendString@i,w
  3278  02DE  3E31               	addlw	(low ((_nrf24l01| 0+9)))& (0+255)
  3279  02DF  0086               	movwf	6
  3280  02E0  0187               	clrf	7
  3281  02E1  0801               	movf	1,w
  3282  02E2  270F               	fcall	_nrf24l01SPISend
  3283  02E3  3001               	movlw	1
  3284  02E4  0020               	movlb	0	; select bank0
  3285  02E5  00D3               	movwf	??_nrf24l01SendString
  3286  02E6  0853               	movf	??_nrf24l01SendString,w
  3287  02E7  07D8               	addwf	nrf24l01SendString@i,f
  3288  02E8  2AD6               	goto	l1744
  3289  02E9                     l1746:	
  3290                           
  3291                           ;nrf24l01.c: 224: }
  3292                           ;nrf24l01.c: 227: nrf24l01SPIEnd();
  3293  02E9  2721               	fcall	_nrf24l01SPIEnd
  3294                           
  3295                           ;nrf24l01.c: 229: PORTAbits.RA0 = 1;
  3296  02EA  0020               	movlb	0	; select bank0
  3297  02EB  140C               	bsf	12,0	;volatile
  3298                           
  3299                           ;nrf24l01.c: 231: _delay((unsigned long)((20)*(16000000/4000000.0)));
  3300  02EC  301A               	movlw	26
  3301  02ED                     u1347:	
  3302  02ED  0B89               	decfsz	9,f
  3303  02EE  2AED               	goto	u1347
  3304  02EF  3200               	nop2
  3305                           
  3306                           ;nrf24l01.c: 233: PORTAbits.RA0 = 0;
  3307  02F0  0020               	movlb	0	; select bank0
  3308  02F1  100C               	bcf	12,0	;volatile
  3309                           
  3310                           ;nrf24l01.c: 235: enableInterrupts(1);
  3311  02F2  3001               	movlw	1
  3312  02F3  2728               	fcall	_enableInterrupts
  3313  02F4  0008               	return
  3314  02F5                     __end_of_nrf24l01SendString:	
  3315                           
  3316                           	psect	text9
  3317  04A7                     __ptext9:	
  3318 ;; *************** function _write_flashmem *****************
  3319 ;; Defined at:
  3320 ;;		line 3 in file "flash.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;  offset          2    3[BANK0 ] unsigned int 
  3323 ;;  data            2    5[BANK0 ] unsigned int 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  address         2    7[BANK0 ] unsigned int 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  1    wreg      void 
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMMON   BANK0   BANK1
  3335 ;;      Params:         0       4       0
  3336 ;;      Locals:         0       2       0
  3337 ;;      Temps:          0       0       0
  3338 ;;      Totals:         0       6       0
  3339 ;;Total ram usage:        6 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    5
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_loop
  3346 ;;		_nrf24l01SendString
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           
  3351                           ;psect for function _write_flashmem
  3352  04A7                     _write_flashmem:	
  3353                           
  3354                           ;flash.c: 5: unsigned int address;
  3355                           ;flash.c: 7: INTCONbits.GIE = 0;
  3356                           
  3357                           ;incstack = 0
  3358                           ; Regs used in _write_flashmem: [wreg+status,2+status,0]
  3359  04A7  138B               	bcf	11,7	;volatile
  3360                           
  3361                           ;flash.c: 10: PMCON1 = 0x00;
  3362  04A8  0023               	movlb	3	; select bank3
  3363  04A9  0195               	clrf	21	;volatile
  3364                           
  3365                           ;flash.c: 12: address = (0x800U-32) + offset;
  3366  04AA  0020               	movlb	0	; select bank0
  3367  04AB  084A               	movf	write_flashmem@offset,w
  3368  04AC  3EE0               	addlw	224
  3369  04AD  00CE               	movwf	write_flashmem@address
  3370  04AE  3007               	movlw	7
  3371  04AF  3D4B               	addwfc	write_flashmem@offset+1,w
  3372  04B0  00CF               	movwf	write_flashmem@address+1
  3373                           
  3374                           ;flash.c: 13: PMADRL = (char) (address >> 0);
  3375  04B1  084E               	movf	write_flashmem@address,w
  3376  04B2  0023               	movlb	3	; select bank3
  3377  04B3  0091               	movwf	17	;volatile
  3378                           
  3379                           ;flash.c: 14: PMADRH = (char) (address >> 8);
  3380  04B4  0020               	movlb	0	; select bank0
  3381  04B5  084F               	movf	write_flashmem@address+1,w
  3382  04B6  0023               	movlb	3	; select bank3
  3383  04B7  0092               	movwf	18	;volatile
  3384                           
  3385                           ;flash.c: 16: PMCON1bits.FREE = 1;
  3386  04B8  1615               	bsf	21,4	;volatile
  3387                           
  3388                           ;flash.c: 17: PMCON1bits.WREN = 1;
  3389  04B9  1515               	bsf	21,2	;volatile
  3390                           
  3391                           ;flash.c: 19: PMCON2 = 0x55;
  3392  04BA  3055               	movlw	85
  3393  04BB  0096               	movwf	22	;volsfr
  3394                           
  3395                           ;flash.c: 20: PMCON2 = 0xAA;
  3396  04BC  30AA               	movlw	170
  3397  04BD  0096               	movwf	22	;volsfr
  3398                           
  3399                           ;flash.c: 22: PMCON1bits.WR = 1;
  3400  04BE  1495               	bsf	21,1	;volatile
  3401                           
  3402                           ;flash.c: 24: __nop();
  3403  04BF  0000               	nop
  3404                           
  3405                           ;flash.c: 25: __nop();
  3406  04C0  0000               	nop
  3407                           
  3408                           ;flash.c: 27: PMCON1bits.WREN = 0;
  3409  04C1  0023               	movlb	3	; select bank3
  3410  04C2  1115               	bcf	21,2	;volatile
  3411                           
  3412                           ;flash.c: 31: PMCON1 = 0x00;
  3413  04C3  0195               	clrf	21	;volatile
  3414                           
  3415                           ;flash.c: 33: PMADRL = (char) (address >> 0);
  3416  04C4  0020               	movlb	0	; select bank0
  3417  04C5  084E               	movf	write_flashmem@address,w
  3418  04C6  0023               	movlb	3	; select bank3
  3419  04C7  0091               	movwf	17	;volatile
  3420                           
  3421                           ;flash.c: 34: PMADRH = (char) (address >> 8);
  3422  04C8  0020               	movlb	0	; select bank0
  3423  04C9  084F               	movf	write_flashmem@address+1,w
  3424  04CA  0023               	movlb	3	; select bank3
  3425  04CB  0092               	movwf	18	;volatile
  3426                           
  3427                           ;flash.c: 36: PMCON1bits.FREE = 0;
  3428  04CC  1215               	bcf	21,4	;volatile
  3429                           
  3430                           ;flash.c: 37: PMCON1bits.LWLO = 1;
  3431  04CD  1695               	bsf	21,5	;volatile
  3432                           
  3433                           ;flash.c: 38: PMCON1bits.WREN = 1;
  3434  04CE  1515               	bsf	21,2	;volatile
  3435                           
  3436                           ;flash.c: 40: PMDATL = (data >> 0);
  3437  04CF  0020               	movlb	0	; select bank0
  3438  04D0  084C               	movf	write_flashmem@data,w
  3439  04D1  0023               	movlb	3	; select bank3
  3440  04D2  0093               	movwf	19	;volatile
  3441                           
  3442                           ;flash.c: 41: PMDATH = (data >> 8);
  3443  04D3  0020               	movlb	0	; select bank0
  3444  04D4  084D               	movf	write_flashmem@data+1,w
  3445  04D5  0023               	movlb	3	; select bank3
  3446  04D6  0094               	movwf	20	;volatile
  3447                           
  3448                           ;flash.c: 43: PMCON1bits.LWLO = 0;
  3449  04D7  1295               	bcf	21,5	;volatile
  3450                           
  3451                           ;flash.c: 45: PMCON2 = 0x55;
  3452  04D8  3055               	movlw	85
  3453  04D9  0096               	movwf	22	;volsfr
  3454                           
  3455                           ;flash.c: 46: PMCON2 = 0xAA;
  3456  04DA  30AA               	movlw	170
  3457  04DB  0096               	movwf	22	;volsfr
  3458                           
  3459                           ;flash.c: 48: PMCON1bits.WR = 1;
  3460  04DC  1495               	bsf	21,1	;volatile
  3461                           
  3462                           ;flash.c: 50: __nop();
  3463  04DD  0000               	nop
  3464                           
  3465                           ;flash.c: 51: __nop();
  3466  04DE  0000               	nop
  3467                           
  3468                           ;flash.c: 53: PMCON1bits.WREN = 0;
  3469  04DF  0023               	movlb	3	; select bank3
  3470  04E0  1115               	bcf	21,2	;volatile
  3471                           
  3472                           ;flash.c: 56: INTCONbits.GIE = 1;
  3473  04E1  178B               	bsf	11,7	;volatile
  3474  04E2  0008               	return
  3475  04E3                     __end_of_write_flashmem:	
  3476                           
  3477                           	psect	text10
  3478  0551                     __ptext10:	
  3479 ;; *************** function _read_flashmem *****************
  3480 ;; Defined at:
  3481 ;;		line 59 in file "flash.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  offset          2    3[BANK0 ] unsigned int 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  address         2   10[BANK0 ] unsigned int 
  3486 ;;  result          2    8[BANK0 ] unsigned int 
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  2    3[BANK0 ] unsigned int 
  3489 ;; Registers used:
  3490 ;;		wreg, status,2, status,0
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMMON   BANK0   BANK1
  3496 ;;      Params:         0       2       0
  3497 ;;      Locals:         0       4       0
  3498 ;;      Temps:          0       3       0
  3499 ;;      Totals:         0       9       0
  3500 ;;Total ram usage:        9 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    5
  3503 ;; This function calls:
  3504 ;;		Nothing
  3505 ;; This function is called by:
  3506 ;;		_loop
  3507 ;;		_nrf24l01SendString
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           
  3512                           ;psect for function _read_flashmem
  3513  0551                     _read_flashmem:	
  3514                           
  3515                           ;flash.c: 61: unsigned int address;
  3516                           ;flash.c: 63: INTCONbits.GIE = 0;
  3517                           
  3518                           ;incstack = 0
  3519                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  3520  0551  138B               	bcf	11,7	;volatile
  3521                           
  3522                           ;flash.c: 65: PMCON1 = 0x00;
  3523  0552  0023               	movlb	3	; select bank3
  3524  0553  0195               	clrf	21	;volatile
  3525                           
  3526                           ;flash.c: 67: address = (0x800U-32) + offset;
  3527  0554  0020               	movlb	0	; select bank0
  3528  0555  084A               	movf	read_flashmem@offset,w
  3529  0556  3EE0               	addlw	224
  3530  0557  00D1               	movwf	read_flashmem@address
  3531  0558  3007               	movlw	7
  3532  0559  3D4B               	addwfc	read_flashmem@offset+1,w
  3533  055A  00D2               	movwf	read_flashmem@address+1
  3534                           
  3535                           ;flash.c: 68: PMADRL = (char) (address >> 0);
  3536  055B  0851               	movf	read_flashmem@address,w
  3537  055C  0023               	movlb	3	; select bank3
  3538  055D  0091               	movwf	17	;volatile
  3539                           
  3540                           ;flash.c: 69: PMADRH = (char) (address >> 8);
  3541  055E  0020               	movlb	0	; select bank0
  3542  055F  0852               	movf	read_flashmem@address+1,w
  3543  0560  0023               	movlb	3	; select bank3
  3544  0561  0092               	movwf	18	;volatile
  3545                           
  3546                           ;flash.c: 71: PMCON1bits.RD = 1;
  3547  0562  1415               	bsf	21,0	;volatile
  3548                           
  3549                           ;flash.c: 73: __nop();
  3550  0563  0000               	nop
  3551                           
  3552                           ;flash.c: 74: __nop();
  3553  0564  0000               	nop
  3554                           
  3555                           ;flash.c: 76: unsigned int result = 0;
  3556  0565  0020               	movlb	0	; select bank0
  3557  0566  01CF               	clrf	read_flashmem@result
  3558  0567  01D0               	clrf	read_flashmem@result+1
  3559                           
  3560                           ;flash.c: 77: result = PMDATL;
  3561  0568  0023               	movlb	3	; select bank3
  3562  0569  0813               	movf	19,w	;volatile
  3563  056A  0020               	movlb	0	; select bank0
  3564  056B  00CC               	movwf	??_read_flashmem
  3565  056C  01CD               	clrf	??_read_flashmem+1
  3566  056D  084C               	movf	??_read_flashmem,w
  3567  056E  00CF               	movwf	read_flashmem@result
  3568  056F  084D               	movf	??_read_flashmem+1,w
  3569  0570  00D0               	movwf	read_flashmem@result+1
  3570                           
  3571                           ;flash.c: 78: result|= ( (unsigned) (PMDATH) << 8);
  3572  0571  0023               	movlb	3	; select bank3
  3573  0572  0814               	movf	20,w	;volatile
  3574  0573  0020               	movlb	0	; select bank0
  3575  0574  00CC               	movwf	??_read_flashmem
  3576  0575  01CD               	clrf	??_read_flashmem+1
  3577  0576  084C               	movf	??_read_flashmem,w
  3578  0577  00CD               	movwf	??_read_flashmem+1
  3579  0578  01CC               	clrf	??_read_flashmem
  3580  0579  084C               	movf	??_read_flashmem,w
  3581  057A  04CF               	iorwf	read_flashmem@result,f
  3582  057B  084D               	movf	??_read_flashmem+1,w
  3583  057C  04D0               	iorwf	read_flashmem@result+1,f
  3584                           
  3585                           ;flash.c: 80: INTCONbits.GIE = 1;
  3586  057D  178B               	bsf	11,7	;volatile
  3587                           
  3588                           ;flash.c: 82: return result;
  3589  057E  0850               	movf	read_flashmem@result+1,w
  3590  057F  00CB               	movwf	?_read_flashmem+1
  3591  0580  084F               	movf	read_flashmem@result,w
  3592  0581  00CA               	movwf	?_read_flashmem
  3593  0582  0008               	return
  3594  0583                     __end_of_read_flashmem:	
  3595                           
  3596                           	psect	text11
  3597  06F1                     __ptext11:	
  3598 ;; *************** function __itoa *****************
  3599 ;; Defined at:
  3600 ;;		line 55 in file "interface.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;  buffer          1    wreg     PTR unsigned char 
  3603 ;;		 -> nrf24l01.txValue(8), nrf24l01.txTopic(6), nrf24l01(31), 
  3604 ;;  number          2   27[BANK0 ] unsigned int 
  3605 ;;  base            1   29[BANK0 ] unsigned char 
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;  buffer          1   32[BANK0 ] PTR unsigned char 
  3608 ;;		 -> nrf24l01.txValue(8), nrf24l01.txTopic(6), nrf24l01(31), 
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  1    wreg      void 
  3611 ;; Registers used:
  3612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMMON   BANK0   BANK1
  3618 ;;      Params:         0       3       0
  3619 ;;      Locals:         0       1       0
  3620 ;;      Temps:          0       2       0
  3621 ;;      Totals:         0       6       0
  3622 ;;Total ram usage:        6 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    8
  3625 ;; This function calls:
  3626 ;;		_itoa
  3627 ;; This function is called by:
  3628 ;;		_loop
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           
  3633                           ;psect for function __itoa
  3634  06F1                     __itoa:	
  3635                           
  3636                           ;incstack = 0
  3637                           ; Regs used in __itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3638                           ;__itoa@buffer stored from wreg
  3639  06F1  0020               	movlb	0	; select bank0
  3640  06F2  00E7               	movwf	__itoa@buffer
  3641                           
  3642                           ;interface.c: 56: itoa(buffer, number, base);
  3643  06F3  0863               	movf	__itoa@number+1,w
  3644  06F4  00DC               	movwf	itoa@val+1
  3645  06F5  0862               	movf	__itoa@number,w
  3646  06F6  00DB               	movwf	itoa@val
  3647  06F7  0864               	movf	__itoa@base,w
  3648  06F8  00E5               	movwf	??__itoa
  3649  06F9  01E6               	clrf	??__itoa+1
  3650  06FA  0865               	movf	??__itoa,w
  3651  06FB  00DD               	movwf	itoa@base
  3652  06FC  0866               	movf	??__itoa+1,w
  3653  06FD  00DE               	movwf	itoa@base+1
  3654  06FE  0867               	movf	__itoa@buffer,w
  3655  06FF  2663               	fcall	_itoa
  3656  0700  0008               	return
  3657  0701                     __end_of__itoa:	
  3658                           
  3659                           	psect	text12
  3660  0663                     __ptext12:	
  3661 ;; *************** function _itoa *****************
  3662 ;; Defined at:
  3663 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  buf             1    wreg     PTR unsigned char 
  3666 ;;		 -> nrf24l01.txValue(8), nrf24l01.txTopic(6), nrf24l01(31), 
  3667 ;;  val             2   20[BANK0 ] int 
  3668 ;;  base            2   22[BANK0 ] int 
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;  buf             1   26[BANK0 ] PTR unsigned char 
  3671 ;;		 -> nrf24l01.txValue(8), nrf24l01.txTopic(6), nrf24l01(31), 
  3672 ;;  cp              1   25[BANK0 ] PTR unsigned char 
  3673 ;;		 -> nrf24l01.txValue(8), nrf24l01.txTopic(6), nrf24l01(31), 
  3674 ;; Return value:  Size  Location     Type
  3675 ;;                  1    wreg      PTR unsigned char 
  3676 ;; Registers used:
  3677 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3678 ;; Tracked objects:
  3679 ;;		On entry : 0/0
  3680 ;;		On exit  : 0/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMMON   BANK0   BANK1
  3683 ;;      Params:         0       4       0
  3684 ;;      Locals:         0       2       0
  3685 ;;      Temps:          0       1       0
  3686 ;;      Totals:         0       7       0
  3687 ;;Total ram usage:        7 bytes
  3688 ;; Hardware stack levels used:    1
  3689 ;; Hardware stack levels required when called:    7
  3690 ;; This function calls:
  3691 ;;		_utoa
  3692 ;; This function is called by:
  3693 ;;		__itoa
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           
  3698                           ;psect for function _itoa
  3699  0663                     _itoa:	
  3700                           
  3701                           ;incstack = 0
  3702                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3703                           ;itoa@buf stored from wreg
  3704  0663  0020               	movlb	0	; select bank0
  3705  0664  00E1               	movwf	itoa@buf
  3706  0665  0861               	movf	itoa@buf,w
  3707  0666  00DF               	movwf	??_itoa
  3708  0667  085F               	movf	??_itoa,w
  3709  0668  00E0               	movwf	itoa@cp
  3710  0669  1FDC               	btfss	itoa@val+1,7
  3711  066A  2E7B               	goto	l1640
  3712  066B  302D               	movlw	45
  3713  066C  00DF               	movwf	??_itoa
  3714  066D  0861               	movf	itoa@buf,w
  3715  066E  0086               	movwf	6
  3716  066F  0187               	clrf	7
  3717  0670  085F               	movf	??_itoa,w
  3718  0671  0081               	movwf	1
  3719  0672  3001               	movlw	1
  3720  0673  00DF               	movwf	??_itoa
  3721  0674  085F               	movf	??_itoa,w
  3722  0675  07E1               	addwf	itoa@buf,f
  3723  0676  09DB               	comf	itoa@val,f
  3724  0677  09DC               	comf	itoa@val+1,f
  3725  0678  0ADB               	incf	itoa@val,f
  3726  0679  1903               	skipnz
  3727  067A  0ADC               	incf	itoa@val+1,f
  3728  067B                     l1640:	
  3729  067B  085C               	movf	itoa@val+1,w
  3730  067C  00D3               	movwf	utoa@val+1
  3731  067D  085B               	movf	itoa@val,w
  3732  067E  00D2               	movwf	utoa@val
  3733  067F  085E               	movf	itoa@base+1,w
  3734  0680  00D5               	movwf	utoa@base+1
  3735  0681  085D               	movf	itoa@base,w
  3736  0682  00D4               	movwf	utoa@base
  3737  0683  0861               	movf	itoa@buf,w
  3738  0684  236A               	fcall	_utoa
  3739  0685  0008               	return
  3740  0686                     __end_of_itoa:	
  3741                           ;	Return value of _itoa is never used
  3742                           
  3743                           
  3744                           	psect	text13
  3745  036A                     __ptext13:	
  3746 ;; *************** function _utoa *****************
  3747 ;; Defined at:
  3748 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;  buf             1    wreg     PTR unsigned char 
  3751 ;;		 -> nrf24l01.txValue(8), nrf24l01.txTopic(6), nrf24l01(31), 
  3752 ;;  val             2   11[BANK0 ] unsigned int 
  3753 ;;  base            2   13[BANK0 ] int 
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;  buf             1   19[BANK0 ] PTR unsigned char 
  3756 ;;		 -> nrf24l01.txValue(8), nrf24l01.txTopic(6), nrf24l01(31), 
  3757 ;;  v               2   16[BANK0 ] unsigned int 
  3758 ;;  c               1   18[BANK0 ] unsigned char 
  3759 ;; Return value:  Size  Location     Type
  3760 ;;                  1    wreg      PTR unsigned char 
  3761 ;; Registers used:
  3762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3763 ;; Tracked objects:
  3764 ;;		On entry : 0/0
  3765 ;;		On exit  : 0/0
  3766 ;;		Unchanged: 0/0
  3767 ;; Data sizes:     COMMON   BANK0   BANK1
  3768 ;;      Params:         0       4       0
  3769 ;;      Locals:         0       4       0
  3770 ;;      Temps:          0       1       0
  3771 ;;      Totals:         0       9       0
  3772 ;;Total ram usage:        9 bytes
  3773 ;; Hardware stack levels used:    1
  3774 ;; Hardware stack levels required when called:    6
  3775 ;; This function calls:
  3776 ;;		___lwdiv
  3777 ;;		___lwmod
  3778 ;; This function is called by:
  3779 ;;		_itoa
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           
  3784                           ;psect for function _utoa
  3785  036A                     _utoa:	
  3786                           
  3787                           ;incstack = 0
  3788                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3789                           ;utoa@buf stored from wreg
  3790  036A  0020               	movlb	0	; select bank0
  3791  036B  00DA               	movwf	utoa@buf
  3792  036C  0853               	movf	utoa@val+1,w
  3793  036D  00D8               	movwf	utoa@v+1
  3794  036E  0852               	movf	utoa@val,w
  3795  036F  00D7               	movwf	utoa@v
  3796  0370                     l1516:	
  3797  0370  0855               	movf	utoa@base+1,w
  3798  0371  00CB               	movwf	___lwdiv@divisor+1
  3799  0372  0854               	movf	utoa@base,w
  3800  0373  00CA               	movwf	___lwdiv@divisor
  3801  0374  0858               	movf	utoa@v+1,w
  3802  0375  00CD               	movwf	___lwdiv@dividend+1
  3803  0376  0857               	movf	utoa@v,w
  3804  0377  00CC               	movwf	___lwdiv@dividend
  3805  0378  251C               	fcall	___lwdiv
  3806  0379  0020               	movlb	0	; select bank0
  3807  037A  084B               	movf	?___lwdiv+1,w
  3808  037B  00D8               	movwf	utoa@v+1
  3809  037C  084A               	movf	?___lwdiv,w
  3810  037D  00D7               	movwf	utoa@v
  3811  037E  3001               	movlw	1
  3812  037F  00D6               	movwf	??_utoa
  3813  0380  0856               	movf	??_utoa,w
  3814  0381  07DA               	addwf	utoa@buf,f
  3815  0382  0857               	movf	utoa@v,w
  3816  0383  0458               	iorwf	utoa@v+1,w
  3817  0384  1D03               	btfss	3,2
  3818  0385  2B70               	goto	l1516
  3819  0386  085A               	movf	utoa@buf,w
  3820  0387  0086               	movwf	6
  3821  0388  0187               	clrf	7
  3822  0389  0181               	clrf	1
  3823  038A  3001               	movlw	1
  3824  038B  02DA               	subwf	utoa@buf,f
  3825  038C                     l1526:	
  3826  038C  0855               	movf	utoa@base+1,w
  3827  038D  00CB               	movwf	___lwmod@divisor+1
  3828  038E  0854               	movf	utoa@base,w
  3829  038F  00CA               	movwf	___lwmod@divisor
  3830  0390  0853               	movf	utoa@val+1,w
  3831  0391  00CD               	movwf	___lwmod@dividend+1
  3832  0392  0852               	movf	utoa@val,w
  3833  0393  00CC               	movwf	___lwmod@dividend
  3834  0394  2611               	fcall	___lwmod
  3835  0395  0020               	movlb	0	; select bank0
  3836  0396  084A               	movf	?___lwmod,w
  3837  0397  00D6               	movwf	??_utoa
  3838  0398  0856               	movf	??_utoa,w
  3839  0399  00D9               	movwf	utoa@c
  3840  039A  0855               	movf	utoa@base+1,w
  3841  039B  00CB               	movwf	___lwdiv@divisor+1
  3842  039C  0854               	movf	utoa@base,w
  3843  039D  00CA               	movwf	___lwdiv@divisor
  3844  039E  0853               	movf	utoa@val+1,w
  3845  039F  00CD               	movwf	___lwdiv@dividend+1
  3846  03A0  0852               	movf	utoa@val,w
  3847  03A1  00CC               	movwf	___lwdiv@dividend
  3848  03A2  251C               	fcall	___lwdiv
  3849  03A3  0020               	movlb	0	; select bank0
  3850  03A4  084B               	movf	?___lwdiv+1,w
  3851  03A5  00D3               	movwf	utoa@val+1
  3852  03A6  084A               	movf	?___lwdiv,w
  3853  03A7  00D2               	movwf	utoa@val
  3854  03A8  300A               	movlw	10
  3855  03A9  0259               	subwf	utoa@c,w
  3856  03AA  1C03               	skipc
  3857  03AB  2BB0               	goto	l545
  3858  03AC  3007               	movlw	7
  3859  03AD  00D6               	movwf	??_utoa
  3860  03AE  0856               	movf	??_utoa,w
  3861  03AF  07D9               	addwf	utoa@c,f
  3862  03B0                     l545:	
  3863  03B0  3030               	movlw	48
  3864  03B1  00D6               	movwf	??_utoa
  3865  03B2  0856               	movf	??_utoa,w
  3866  03B3  07D9               	addwf	utoa@c,f
  3867  03B4  0859               	movf	utoa@c,w
  3868  03B5  00D6               	movwf	??_utoa
  3869  03B6  085A               	movf	utoa@buf,w
  3870  03B7  0086               	movwf	6
  3871  03B8  0187               	clrf	7
  3872  03B9  0856               	movf	??_utoa,w
  3873  03BA  0081               	movwf	1
  3874  03BB  3001               	movlw	1
  3875  03BC  02DA               	subwf	utoa@buf,f
  3876  03BD  0852               	movf	utoa@val,w
  3877  03BE  0453               	iorwf	utoa@val+1,w
  3878  03BF  1D03               	btfss	3,2
  3879  03C0  2B8C               	goto	l1526
  3880                           
  3881                           ;	Return value of _utoa is never used
  3882  03C1  3001               	movlw	1
  3883  03C2  00D6               	movwf	??_utoa
  3884  03C3  0856               	movf	??_utoa,w
  3885  03C4  07DA               	addwf	utoa@buf,f
  3886  03C5  0008               	return
  3887  03C6                     __end_of_utoa:	
  3888                           
  3889                           	psect	text14
  3890  0611                     __ptext14:	
  3891 ;; *************** function ___lwmod *****************
  3892 ;; Defined at:
  3893 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;  divisor         2    3[BANK0 ] unsigned int 
  3896 ;;  dividend        2    5[BANK0 ] unsigned int 
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;  counter         1    8[BANK0 ] unsigned char 
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  2    3[BANK0 ] unsigned int 
  3901 ;; Registers used:
  3902 ;;		wreg, status,2, status,0
  3903 ;; Tracked objects:
  3904 ;;		On entry : 0/0
  3905 ;;		On exit  : 0/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMMON   BANK0   BANK1
  3908 ;;      Params:         0       4       0
  3909 ;;      Locals:         0       1       0
  3910 ;;      Temps:          0       1       0
  3911 ;;      Totals:         0       6       0
  3912 ;;Total ram usage:        6 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:    5
  3915 ;; This function calls:
  3916 ;;		Nothing
  3917 ;; This function is called by:
  3918 ;;		_utoa
  3919 ;; This function uses a non-reentrant model
  3920 ;;
  3921                           
  3922                           
  3923                           ;psect for function ___lwmod
  3924  0611                     ___lwmod:	
  3925                           
  3926                           ;incstack = 0
  3927                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3928  0611  0020               	movlb	0	; select bank0
  3929  0612  084A               	movf	___lwmod@divisor,w
  3930  0613  044B               	iorwf	___lwmod@divisor+1,w
  3931  0614  1903               	btfsc	3,2
  3932  0615  2E39               	goto	l1494
  3933  0616  01CF               	clrf	___lwmod@counter
  3934  0617  0ACF               	incf	___lwmod@counter,f
  3935  0618                     l1484:	
  3936  0618  1BCB               	btfsc	___lwmod@divisor+1,7
  3937  0619  2E24               	goto	l1486
  3938  061A  3001               	movlw	1
  3939  061B                     u685:	
  3940  061B  35CA               	lslf	___lwmod@divisor,f
  3941  061C  0DCB               	rlf	___lwmod@divisor+1,f
  3942  061D  0B89               	decfsz	9,f
  3943  061E  2E1B               	goto	u685
  3944  061F  3001               	movlw	1
  3945  0620  00CE               	movwf	??___lwmod
  3946  0621  084E               	movf	??___lwmod,w
  3947  0622  07CF               	addwf	___lwmod@counter,f
  3948  0623  2E18               	goto	l1484
  3949  0624                     l1486:	
  3950  0624  084B               	movf	___lwmod@divisor+1,w
  3951  0625  024D               	subwf	___lwmod@dividend+1,w
  3952  0626  1D03               	skipz
  3953  0627  2E2A               	goto	u705
  3954  0628  084A               	movf	___lwmod@divisor,w
  3955  0629  024C               	subwf	___lwmod@dividend,w
  3956  062A                     u705:	
  3957  062A  1C03               	skipc
  3958  062B  2E30               	goto	l1490
  3959  062C  084A               	movf	___lwmod@divisor,w
  3960  062D  02CC               	subwf	___lwmod@dividend,f
  3961  062E  084B               	movf	___lwmod@divisor+1,w
  3962  062F  3BCD               	subwfb	___lwmod@dividend+1,f
  3963  0630                     l1490:	
  3964  0630  3001               	movlw	1
  3965  0631                     u715:	
  3966  0631  36CB               	lsrf	___lwmod@divisor+1,f
  3967  0632  0CCA               	rrf	___lwmod@divisor,f
  3968  0633  0B89               	decfsz	9,f
  3969  0634  2E31               	goto	u715
  3970  0635  3001               	movlw	1
  3971  0636  02CF               	subwf	___lwmod@counter,f
  3972  0637  1D03               	btfss	3,2
  3973  0638  2E24               	goto	l1486
  3974  0639                     l1494:	
  3975  0639  084D               	movf	___lwmod@dividend+1,w
  3976  063A  00CB               	movwf	?___lwmod+1
  3977  063B  084C               	movf	___lwmod@dividend,w
  3978  063C  00CA               	movwf	?___lwmod
  3979  063D  0008               	return
  3980  063E                     __end_of___lwmod:	
  3981                           
  3982                           	psect	text15
  3983  051C                     __ptext15:	
  3984 ;; *************** function ___lwdiv *****************
  3985 ;; Defined at:
  3986 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3987 ;; Parameters:    Size  Location     Type
  3988 ;;  divisor         2    3[BANK0 ] unsigned int 
  3989 ;;  dividend        2    5[BANK0 ] unsigned int 
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;  quotient        2    8[BANK0 ] unsigned int 
  3992 ;;  counter         1   10[BANK0 ] unsigned char 
  3993 ;; Return value:  Size  Location     Type
  3994 ;;                  2    3[BANK0 ] unsigned int 
  3995 ;; Registers used:
  3996 ;;		wreg, status,2, status,0
  3997 ;; Tracked objects:
  3998 ;;		On entry : 0/0
  3999 ;;		On exit  : 0/0
  4000 ;;		Unchanged: 0/0
  4001 ;; Data sizes:     COMMON   BANK0   BANK1
  4002 ;;      Params:         0       4       0
  4003 ;;      Locals:         0       3       0
  4004 ;;      Temps:          0       1       0
  4005 ;;      Totals:         0       8       0
  4006 ;;Total ram usage:        8 bytes
  4007 ;; Hardware stack levels used:    1
  4008 ;; Hardware stack levels required when called:    5
  4009 ;; This function calls:
  4010 ;;		Nothing
  4011 ;; This function is called by:
  4012 ;;		_utoa
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016                           
  4017                           ;psect for function ___lwdiv
  4018  051C                     ___lwdiv:	
  4019                           
  4020                           ;incstack = 0
  4021                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4022  051C  0020               	movlb	0	; select bank0
  4023  051D  01CF               	clrf	___lwdiv@quotient
  4024  051E  01D0               	clrf	___lwdiv@quotient+1
  4025  051F  084A               	movf	___lwdiv@divisor,w
  4026  0520  044B               	iorwf	___lwdiv@divisor+1,w
  4027  0521  1903               	btfsc	3,2
  4028  0522  2D4C               	goto	l1472
  4029  0523  01D1               	clrf	___lwdiv@counter
  4030  0524  0AD1               	incf	___lwdiv@counter,f
  4031  0525                     l1460:	
  4032  0525  1BCB               	btfsc	___lwdiv@divisor+1,7
  4033  0526  2D31               	goto	l1462
  4034  0527  3001               	movlw	1
  4035  0528                     u615:	
  4036  0528  35CA               	lslf	___lwdiv@divisor,f
  4037  0529  0DCB               	rlf	___lwdiv@divisor+1,f
  4038  052A  0B89               	decfsz	9,f
  4039  052B  2D28               	goto	u615
  4040  052C  3001               	movlw	1
  4041  052D  00CE               	movwf	??___lwdiv
  4042  052E  084E               	movf	??___lwdiv,w
  4043  052F  07D1               	addwf	___lwdiv@counter,f
  4044  0530  2D25               	goto	l1460
  4045  0531                     l1462:	
  4046  0531  3001               	movlw	1
  4047  0532                     u635:	
  4048  0532  35CF               	lslf	___lwdiv@quotient,f
  4049  0533  0DD0               	rlf	___lwdiv@quotient+1,f
  4050  0534  0B89               	decfsz	9,f
  4051  0535  2D32               	goto	u635
  4052  0536  084B               	movf	___lwdiv@divisor+1,w
  4053  0537  024D               	subwf	___lwdiv@dividend+1,w
  4054  0538  1D03               	skipz
  4055  0539  2D3C               	goto	u645
  4056  053A  084A               	movf	___lwdiv@divisor,w
  4057  053B  024C               	subwf	___lwdiv@dividend,w
  4058  053C                     u645:	
  4059  053C  1C03               	skipc
  4060  053D  2D43               	goto	l1468
  4061  053E  084A               	movf	___lwdiv@divisor,w
  4062  053F  02CC               	subwf	___lwdiv@dividend,f
  4063  0540  084B               	movf	___lwdiv@divisor+1,w
  4064  0541  3BCD               	subwfb	___lwdiv@dividend+1,f
  4065  0542  144F               	bsf	___lwdiv@quotient,0
  4066  0543                     l1468:	
  4067  0543  3001               	movlw	1
  4068  0544                     u655:	
  4069  0544  36CB               	lsrf	___lwdiv@divisor+1,f
  4070  0545  0CCA               	rrf	___lwdiv@divisor,f
  4071  0546  0B89               	decfsz	9,f
  4072  0547  2D44               	goto	u655
  4073  0548  3001               	movlw	1
  4074  0549  02D1               	subwf	___lwdiv@counter,f
  4075  054A  1D03               	btfss	3,2
  4076  054B  2D31               	goto	l1462
  4077  054C                     l1472:	
  4078  054C  0850               	movf	___lwdiv@quotient+1,w
  4079  054D  00CB               	movwf	?___lwdiv+1
  4080  054E  084F               	movf	___lwdiv@quotient,w
  4081  054F  00CA               	movwf	?___lwdiv
  4082  0550  0008               	return
  4083  0551                     __end_of___lwdiv:	
  4084                           
  4085                           	psect	text16
  4086  0583                     __ptext16:	
  4087 ;; *************** function ___lmul *****************
  4088 ;; Defined at:
  4089 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;  multiplier      4    3[BANK0 ] unsigned long 
  4092 ;;  multiplicand    4    7[BANK0 ] unsigned long 
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;  product         4   11[BANK0 ] unsigned long 
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  4    3[BANK0 ] unsigned long 
  4097 ;; Registers used:
  4098 ;;		wreg, status,2, status,0
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMMON   BANK0   BANK1
  4104 ;;      Params:         0       8       0
  4105 ;;      Locals:         0       4       0
  4106 ;;      Temps:          0       0       0
  4107 ;;      Totals:         0      12       0
  4108 ;;Total ram usage:       12 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    5
  4111 ;; This function calls:
  4112 ;;		Nothing
  4113 ;; This function is called by:
  4114 ;;		_loop
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           
  4119                           ;psect for function ___lmul
  4120  0583                     ___lmul:	
  4121                           
  4122                           ;incstack = 0
  4123                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4124  0583  3000               	movlw	0
  4125  0584  0020               	movlb	0	; select bank0
  4126  0585  00D5               	movwf	___lmul@product+3
  4127  0586  3000               	movlw	0
  4128  0587  00D4               	movwf	___lmul@product+2
  4129  0588  3000               	movlw	0
  4130  0589  00D3               	movwf	___lmul@product+1
  4131  058A  3000               	movlw	0
  4132  058B  00D2               	movwf	___lmul@product
  4133  058C                     l1890:	
  4134  058C  1C4A               	btfss	___lmul@multiplier,0
  4135  058D  2D96               	goto	l1894
  4136  058E  084E               	movf	___lmul@multiplicand,w
  4137  058F  07D2               	addwf	___lmul@product,f
  4138  0590  084F               	movf	___lmul@multiplicand+1,w
  4139  0591  3DD3               	addwfc	___lmul@product+1,f
  4140  0592  0850               	movf	___lmul@multiplicand+2,w
  4141  0593  3DD4               	addwfc	___lmul@product+2,f
  4142  0594  0851               	movf	___lmul@multiplicand+3,w
  4143  0595  3DD5               	addwfc	___lmul@product+3,f
  4144  0596                     l1894:	
  4145  0596  3001               	movlw	1
  4146  0597                     u965:	
  4147  0597  35CE               	lslf	___lmul@multiplicand,f
  4148  0598  0DCF               	rlf	___lmul@multiplicand+1,f
  4149  0599  0DD0               	rlf	___lmul@multiplicand+2,f
  4150  059A  0DD1               	rlf	___lmul@multiplicand+3,f
  4151  059B  0B89               	decfsz	9,f
  4152  059C  2D97               	goto	u965
  4153  059D  3001               	movlw	1
  4154  059E                     u975:	
  4155  059E  36CD               	lsrf	___lmul@multiplier+3,f
  4156  059F  0CCC               	rrf	___lmul@multiplier+2,f
  4157  05A0  0CCB               	rrf	___lmul@multiplier+1,f
  4158  05A1  0CCA               	rrf	___lmul@multiplier,f
  4159  05A2  0B89               	decfsz	9,f
  4160  05A3  2D9E               	goto	u975
  4161  05A4  084D               	movf	___lmul@multiplier+3,w
  4162  05A5  044C               	iorwf	___lmul@multiplier+2,w
  4163  05A6  044B               	iorwf	___lmul@multiplier+1,w
  4164  05A7  044A               	iorwf	___lmul@multiplier,w
  4165  05A8  1D03               	skipz
  4166  05A9  2D8C               	goto	l1890
  4167  05AA  0855               	movf	___lmul@product+3,w
  4168  05AB  00CD               	movwf	?___lmul+3
  4169  05AC  0854               	movf	___lmul@product+2,w
  4170  05AD  00CC               	movwf	?___lmul+2
  4171  05AE  0853               	movf	___lmul@product+1,w
  4172  05AF  00CB               	movwf	?___lmul+1
  4173  05B0  0852               	movf	___lmul@product,w
  4174  05B1  00CA               	movwf	?___lmul
  4175  05B2  0008               	return
  4176  05B3                     __end_of___lmul:	
  4177                           
  4178                           	psect	text17
  4179  03C6                     __ptext17:	
  4180 ;; *************** function ___lldiv *****************
  4181 ;; Defined at:
  4182 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;  divisor         4    3[BANK0 ] unsigned long 
  4185 ;;  dividend        4    7[BANK0 ] unsigned long 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;  quotient        4   12[BANK0 ] unsigned long 
  4188 ;;  counter         1   16[BANK0 ] unsigned char 
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  4    3[BANK0 ] unsigned long 
  4191 ;; Registers used:
  4192 ;;		wreg, status,2, status,0
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMMON   BANK0   BANK1
  4198 ;;      Params:         0       8       0
  4199 ;;      Locals:         0       5       0
  4200 ;;      Temps:          0       1       0
  4201 ;;      Totals:         0      14       0
  4202 ;;Total ram usage:       14 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; Hardware stack levels required when called:    5
  4205 ;; This function calls:
  4206 ;;		Nothing
  4207 ;; This function is called by:
  4208 ;;		_loop
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211                           
  4212                           
  4213                           ;psect for function ___lldiv
  4214  03C6                     ___lldiv:	
  4215                           
  4216                           ;incstack = 0
  4217                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4218  03C6  3000               	movlw	0
  4219  03C7  0020               	movlb	0	; select bank0
  4220  03C8  00D6               	movwf	___lldiv@quotient+3
  4221  03C9  3000               	movlw	0
  4222  03CA  00D5               	movwf	___lldiv@quotient+2
  4223  03CB  3000               	movlw	0
  4224  03CC  00D4               	movwf	___lldiv@quotient+1
  4225  03CD  3000               	movlw	0
  4226  03CE  00D3               	movwf	___lldiv@quotient
  4227  03CF  084D               	movf	___lldiv@divisor+3,w
  4228  03D0  044C               	iorwf	___lldiv@divisor+2,w
  4229  03D1  044B               	iorwf	___lldiv@divisor+1,w
  4230  03D2  044A               	iorwf	___lldiv@divisor,w
  4231  03D3  1903               	skipnz
  4232  03D4  2C10               	goto	l1922
  4233  03D5  01D7               	clrf	___lldiv@counter
  4234  03D6  0AD7               	incf	___lldiv@counter,f
  4235  03D7                     l1908:	
  4236  03D7  1BCD               	btfsc	___lldiv@divisor+3,7
  4237  03D8  2BE5               	goto	l1910
  4238  03D9  3001               	movlw	1
  4239  03DA                     u1005:	
  4240  03DA  35CA               	lslf	___lldiv@divisor,f
  4241  03DB  0DCB               	rlf	___lldiv@divisor+1,f
  4242  03DC  0DCC               	rlf	___lldiv@divisor+2,f
  4243  03DD  0DCD               	rlf	___lldiv@divisor+3,f
  4244  03DE  0B89               	decfsz	9,f
  4245  03DF  2BDA               	goto	u1005
  4246  03E0  3001               	movlw	1
  4247  03E1  00D2               	movwf	??___lldiv
  4248  03E2  0852               	movf	??___lldiv,w
  4249  03E3  07D7               	addwf	___lldiv@counter,f
  4250  03E4  2BD7               	goto	l1908
  4251  03E5                     l1910:	
  4252  03E5  3001               	movlw	1
  4253  03E6                     u1025:	
  4254  03E6  35D3               	lslf	___lldiv@quotient,f
  4255  03E7  0DD4               	rlf	___lldiv@quotient+1,f
  4256  03E8  0DD5               	rlf	___lldiv@quotient+2,f
  4257  03E9  0DD6               	rlf	___lldiv@quotient+3,f
  4258  03EA  0B89               	decfsz	9,f
  4259  03EB  2BE6               	goto	u1025
  4260  03EC  084D               	movf	___lldiv@divisor+3,w
  4261  03ED  0251               	subwf	___lldiv@dividend+3,w
  4262  03EE  1D03               	skipz
  4263  03EF  2BFA               	goto	u1035
  4264  03F0  084C               	movf	___lldiv@divisor+2,w
  4265  03F1  0250               	subwf	___lldiv@dividend+2,w
  4266  03F2  1D03               	skipz
  4267  03F3  2BFA               	goto	u1035
  4268  03F4  084B               	movf	___lldiv@divisor+1,w
  4269  03F5  024F               	subwf	___lldiv@dividend+1,w
  4270  03F6  1D03               	skipz
  4271  03F7  2BFA               	goto	u1035
  4272  03F8  084A               	movf	___lldiv@divisor,w
  4273  03F9  024E               	subwf	___lldiv@dividend,w
  4274  03FA                     u1035:	
  4275  03FA  1C03               	skipc
  4276  03FB  2C05               	goto	l1918
  4277  03FC  084A               	movf	___lldiv@divisor,w
  4278  03FD  02CE               	subwf	___lldiv@dividend,f
  4279  03FE  084B               	movf	___lldiv@divisor+1,w
  4280  03FF  3BCF               	subwfb	___lldiv@dividend+1,f
  4281  0400  084C               	movf	___lldiv@divisor+2,w
  4282  0401  3BD0               	subwfb	___lldiv@dividend+2,f
  4283  0402  084D               	movf	___lldiv@divisor+3,w
  4284  0403  3BD1               	subwfb	___lldiv@dividend+3,f
  4285  0404  1453               	bsf	___lldiv@quotient,0
  4286  0405                     l1918:	
  4287  0405  3001               	movlw	1
  4288  0406                     u1045:	
  4289  0406  36CD               	lsrf	___lldiv@divisor+3,f
  4290  0407  0CCC               	rrf	___lldiv@divisor+2,f
  4291  0408  0CCB               	rrf	___lldiv@divisor+1,f
  4292  0409  0CCA               	rrf	___lldiv@divisor,f
  4293  040A  0B89               	decfsz	9,f
  4294  040B  2C06               	goto	u1045
  4295  040C  3001               	movlw	1
  4296  040D  02D7               	subwf	___lldiv@counter,f
  4297  040E  1D03               	btfss	3,2
  4298  040F  2BE5               	goto	l1910
  4299  0410                     l1922:	
  4300  0410  0856               	movf	___lldiv@quotient+3,w
  4301  0411  00CD               	movwf	?___lldiv+3
  4302  0412  0855               	movf	___lldiv@quotient+2,w
  4303  0413  00CC               	movwf	?___lldiv+2
  4304  0414  0854               	movf	___lldiv@quotient+1,w
  4305  0415  00CB               	movwf	?___lldiv+1
  4306  0416  0853               	movf	___lldiv@quotient,w
  4307  0417  00CA               	movwf	?___lldiv
  4308  0418  0008               	return
  4309  0419                     __end_of___lldiv:	
  4310                           
  4311                           	psect	intentry
  4312  0004                     __pintentry:	
  4313 ;; *************** function _ISR *****************
  4314 ;; Defined at:
  4315 ;;		line 31 in file "main.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  result          2    1[BANK0 ] int 
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg, status,2, status,0, pclath, cstack
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1
  4329 ;;      Params:         0       0       0
  4330 ;;      Locals:         0       2       0
  4331 ;;      Temps:          4       0       0
  4332 ;;      Totals:         4       2       0
  4333 ;;Total ram usage:        6 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    4
  4336 ;; This function calls:
  4337 ;;		_nrf24l01ISR
  4338 ;; This function is called by:
  4339 ;;		Interrupt level 1
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343  0004                     _ISR:	
  4344                           
  4345                           ;incstack = 0
  4346  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4347                           
  4348                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  4349  0005  3180               	pagesel	$
  4350  0006  0020               	movlb	0	; select bank0
  4351  0007  087F               	movf	127,w
  4352  0008  00FC               	movwf	??_ISR+3
  4353                           
  4354                           ;main.c: 32: if (PIR1bits.ADIF){
  4355  0009  1F11               	btfss	17,6	;volatile
  4356  000A  283B               	goto	i1l2130
  4357                           
  4358                           ;main.c: 34: if (mode == 2) {
  4359  000B  3002               	movlw	2
  4360  000C  0669               	xorwf	_mode,w
  4361  000D  1D03               	btfss	3,2
  4362  000E  283A               	goto	i1l2128
  4363                           
  4364                           ;main.c: 36: int result = 0x00;
  4365  000F  01C8               	clrf	ISR@result
  4366  0010  01C9               	clrf	ISR@result+1
  4367                           
  4368                           ;main.c: 37: result = ADRESL;
  4369  0011  0021               	movlb	1	; select bank1
  4370  0012  081B               	movf	27,w	;volatile
  4371  0013  00F9               	movwf	??_ISR
  4372  0014  01FA               	clrf	??_ISR+1
  4373  0015  0879               	movf	??_ISR,w
  4374  0016  0020               	movlb	0	; select bank0
  4375  0017  00C8               	movwf	ISR@result
  4376  0018  087A               	movf	??_ISR+1,w
  4377  0019  00C9               	movwf	ISR@result+1
  4378                           
  4379                           ;main.c: 38: result|= (ADRESH << 8);
  4380  001A  0021               	movlb	1	; select bank1
  4381  001B  081C               	movf	28,w	;volatile
  4382  001C  00F9               	movwf	??_ISR
  4383  001D  01FA               	clrf	??_ISR+1
  4384  001E  0879               	movf	??_ISR,w
  4385  001F  00FA               	movwf	??_ISR+1
  4386  0020  01F9               	clrf	??_ISR
  4387  0021  0879               	movf	??_ISR,w
  4388  0022  0020               	movlb	0	; select bank0
  4389  0023  04C8               	iorwf	ISR@result,f
  4390  0024  087A               	movf	??_ISR+1,w
  4391  0025  04C9               	iorwf	ISR@result+1,f
  4392                           
  4393                           ;main.c: 40: adcSum+= (unsigned) result;
  4394  0026  0848               	movf	ISR@result,w
  4395  0027  07A0               	addwf	_adcSum,f
  4396  0028  0849               	movf	ISR@result+1,w
  4397  0029  3DA1               	addwfc	_adcSum+1,f
  4398  002A  3000               	movlw	0
  4399  002B  3DA2               	addwfc	_adcSum+2,f
  4400  002C  3DA3               	addwfc	_adcSum+3,f
  4401                           
  4402                           ;main.c: 42: if (!adcLoop){
  4403  002D  0827               	movf	_adcLoop,w
  4404  002E  1D03               	btfss	3,2
  4405  002F  2835               	goto	i1l154
  4406                           
  4407                           ;main.c: 43: mode = 3;
  4408  0030  3003               	movlw	3
  4409  0031  00F9               	movwf	??_ISR
  4410  0032  0879               	movf	??_ISR,w
  4411  0033  00E9               	movwf	_mode
  4412                           
  4413                           ;main.c: 44: }else{
  4414  0034  2837               	goto	i1l2126
  4415  0035                     i1l154:	
  4416                           
  4417                           ;main.c: 46: ADCON0bits.ADGO = 1;
  4418  0035  0021               	movlb	1	; select bank1
  4419  0036  149D               	bsf	29,1	;volatile
  4420  0037                     i1l2126:	
  4421                           
  4422                           ;main.c: 47: }
  4423                           ;main.c: 49: adcLoop--;
  4424  0037  3001               	movlw	1
  4425  0038  0020               	movlb	0	; select bank0
  4426  0039  02A7               	subwf	_adcLoop,f
  4427  003A                     i1l2128:	
  4428                           
  4429                           ;main.c: 50: }
  4430                           ;main.c: 53: PIR1bits.ADIF = 0;
  4431  003A  1311               	bcf	17,6	;volatile
  4432  003B                     i1l2130:	
  4433                           
  4434                           ;main.c: 54: }
  4435                           ;main.c: 56: if (INTCONbits.INTF){
  4436  003B  1C8B               	btfss	11,1	;volatile
  4437  003C  283F               	goto	i1l157
  4438                           
  4439                           ;main.c: 57: nrf24l01ISR();
  4440  003D  2460               	fcall	_nrf24l01ISR
  4441                           
  4442                           ;main.c: 58: INTCONbits.INTF = 0;
  4443  003E  108B               	bcf	11,1	;volatile
  4444  003F                     i1l157:	
  4445  003F  087C               	movf	??_ISR+3,w
  4446  0040  0020               	movlb	0	; select bank0
  4447  0041  00FF               	movwf	127
  4448  0042  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4449  0043  0009               	retfie
  4450  0044                     __end_of_ISR:	
  4451                           
  4452                           	psect	text19
  4453  0460                     __ptext19:	
  4454 ;; *************** function _nrf24l01ISR *****************
  4455 ;; Defined at:
  4456 ;;		line 103 in file "nrf24l01.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;		None
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;  tempStatus      1    8[COMMON] struct .
  4461 ;; Return value:  Size  Location     Type
  4462 ;;                  1    wreg      void 
  4463 ;; Registers used:
  4464 ;;		wreg, status,2, status,0, pclath, cstack
  4465 ;; Tracked objects:
  4466 ;;		On entry : 0/0
  4467 ;;		On exit  : 0/0
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMMON   BANK0   BANK1
  4470 ;;      Params:         0       0       0
  4471 ;;      Locals:         1       0       0
  4472 ;;      Temps:          1       0       0
  4473 ;;      Totals:         2       0       0
  4474 ;;Total ram usage:        2 bytes
  4475 ;; Hardware stack levels used:    1
  4476 ;; Hardware stack levels required when called:    3
  4477 ;; This function calls:
  4478 ;;		_nrf24l01HandleRX
  4479 ;;		_nrf24l01Send
  4480 ;;		_nrf24l01SetRXMode
  4481 ;;		i1_write_flashmem
  4482 ;; This function is called by:
  4483 ;;		_ISR
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           
  4488                           ;psect for function _nrf24l01ISR
  4489  0460                     _nrf24l01ISR:	
  4490                           
  4491                           ;nrf24l01.c: 105: n_STATUS_t tempStatus;
  4492                           ;nrf24l01.c: 106: nrf24l01.status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  4493                           
  4494                           ;incstack = 0
  4495                           ; Regs used in _nrf24l01ISR: [wreg+status,2+status,0+pclath+cstack]
  4496  0460  0020               	movlb	0	; select bank0
  4497  0461  01C7               	clrf	nrf24l01Send@data
  4498  0462  3007               	movlw	7
  4499  0463  26DE               	fcall	_nrf24l01Send
  4500  0464  00F7               	movwf	??_nrf24l01ISR
  4501  0465  0877               	movf	??_nrf24l01ISR,w
  4502  0466  0020               	movlb	0	; select bank0
  4503  0467  00A8               	movwf	_nrf24l01	;volatile
  4504                           
  4505                           ;nrf24l01.c: 109: if (nrf24l01.status.byte == 0x00){
  4506  0468  0828               	movf	_nrf24l01,w	;volatile
  4507  0469  1D03               	btfss	3,2
  4508  046A  2C75               	goto	i1l1990
  4509                           
  4510                           ;nrf24l01.c: 110: write_flashmem(16, 2003);
  4511  046B  3010               	movlw	16
  4512  046C  00F0               	movwf	i1write_flashmem@offset
  4513  046D  3000               	movlw	0
  4514  046E  00F1               	movwf	i1write_flashmem@offset+1
  4515  046F  30D3               	movlw	211
  4516  0470  00F2               	movwf	i1write_flashmem@data
  4517  0471  3007               	movlw	7
  4518  0472  00F3               	movwf	i1write_flashmem@data+1
  4519  0473  25B3               	fcall	i1_write_flashmem
  4520  0474  0001               	reset	;# 
  4521  0475                     i1l1990:	
  4522                           
  4523                           ;nrf24l01.c: 112: }
  4524                           ;nrf24l01.c: 115: if (nrf24l01.status.byte == 0xFF){
  4525  0475  0020               	movlb	0	; select bank0
  4526  0476  0A28               	incf	_nrf24l01,w	;volatile
  4527  0477  1D03               	btfss	3,2
  4528  0478  2C83               	goto	i1l1994
  4529                           
  4530                           ;nrf24l01.c: 116: write_flashmem(16, 2004);
  4531  0479  3010               	movlw	16
  4532  047A  00F0               	movwf	i1write_flashmem@offset
  4533  047B  3000               	movlw	0
  4534  047C  00F1               	movwf	i1write_flashmem@offset+1
  4535  047D  30D4               	movlw	212
  4536  047E  00F2               	movwf	i1write_flashmem@data
  4537  047F  3007               	movlw	7
  4538  0480  00F3               	movwf	i1write_flashmem@data+1
  4539  0481  25B3               	fcall	i1_write_flashmem
  4540  0482  0001               	reset	;# 
  4541  0483                     i1l1994:	
  4542                           
  4543                           ;nrf24l01.c: 118: }
  4544                           ;nrf24l01.c: 121: if (nrf24l01.status.RX_DR){
  4545  0483  0020               	movlb	0	; select bank0
  4546  0484  1F28               	btfss	_nrf24l01,6	;volatile
  4547  0485  2C95               	goto	i1l2008
  4548                           
  4549                           ;nrf24l01.c: 123: nrf24l01.waitForTXACK = 0;
  4550  0486  1029               	bcf	_nrf24l01+1,0	;volatile
  4551                           
  4552                           ;nrf24l01.c: 126: tempStatus.byte = 0x00;
  4553  0487  01F8               	clrf	nrf24l01ISR@tempStatus
  4554                           
  4555                           ;nrf24l01.c: 127: tempStatus.RX_DR = 1;
  4556  0488  1778               	bsf	nrf24l01ISR@tempStatus,6
  4557                           
  4558                           ;nrf24l01.c: 128: nrf24l01Send(0b00100000 | 0x07, tempStatus.byte);
  4559  0489  0878               	movf	nrf24l01ISR@tempStatus,w
  4560  048A  00F7               	movwf	??_nrf24l01ISR
  4561  048B  0877               	movf	??_nrf24l01ISR,w
  4562  048C  00C7               	movwf	nrf24l01Send@data
  4563  048D  3027               	movlw	39
  4564  048E  26DE               	fcall	_nrf24l01Send
  4565                           
  4566                           ;nrf24l01.c: 130: counter++;
  4567  048F  3001               	movlw	1
  4568  0490  0020               	movlb	0	; select bank0
  4569  0491  07A4               	addwf	_counter,f
  4570  0492  3000               	movlw	0
  4571  0493  3DA5               	addwfc	_counter+1,f
  4572                           
  4573                           ;nrf24l01.c: 133: nrf24l01HandleRX();
  4574  0494  2686               	fcall	_nrf24l01HandleRX
  4575  0495                     i1l2008:	
  4576                           
  4577                           ;nrf24l01.c: 137: }
  4578                           ;nrf24l01.c: 141: if (nrf24l01.status.TX_DS){
  4579  0495  0020               	movlb	0	; select bank0
  4580  0496  1EA8               	btfss	_nrf24l01,5	;volatile
  4581  0497  0008               	return
  4582                           
  4583                           ;nrf24l01.c: 144: tempStatus.byte = 0x00;
  4584  0498  01F8               	clrf	nrf24l01ISR@tempStatus
  4585                           
  4586                           ;nrf24l01.c: 145: tempStatus.TX_DS = 1;
  4587  0499  16F8               	bsf	nrf24l01ISR@tempStatus,5
  4588                           
  4589                           ;nrf24l01.c: 146: nrf24l01Send(0b00100000 | 0x07, tempStatus.byte);
  4590  049A  0878               	movf	nrf24l01ISR@tempStatus,w
  4591  049B  00F7               	movwf	??_nrf24l01ISR
  4592  049C  0877               	movf	??_nrf24l01ISR,w
  4593  049D  00C7               	movwf	nrf24l01Send@data
  4594  049E  3027               	movlw	39
  4595  049F  26DE               	fcall	_nrf24l01Send
  4596                           
  4597                           ;nrf24l01.c: 149: nrf24l01.TXBusy = 0;
  4598  04A0  0020               	movlb	0	; select bank0
  4599  04A1  12A9               	bcf	_nrf24l01+1,5	;volatile
  4600                           
  4601                           ;nrf24l01.c: 152: if (nrf24l01.RXMode == 0){
  4602  04A2  1AAA               	btfsc	_nrf24l01+2,5	;volatile
  4603  04A3  0008               	return
  4604                           
  4605                           ;nrf24l01.c: 155: nrf24l01SetRXMode(1);
  4606  04A4  3001               	movlw	1
  4607  04A5  24E3               	fcall	_nrf24l01SetRXMode
  4608  04A6  0008               	return
  4609  04A7                     __end_of_nrf24l01ISR:	
  4610                           
  4611                           	psect	text20
  4612  05B3                     __ptext20:	
  4613 ;; *************** function i1_write_flashmem *****************
  4614 ;; Defined at:
  4615 ;;		line 3 in file "flash.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;  offset          2    0[COMMON] unsigned int 
  4618 ;;  data            2    2[COMMON] unsigned int 
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;  write_flashm    2    4[COMMON] unsigned int 
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      void 
  4623 ;; Registers used:
  4624 ;;		wreg, status,2, status,0
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMMON   BANK0   BANK1
  4630 ;;      Params:         4       0       0
  4631 ;;      Locals:         2       0       0
  4632 ;;      Temps:          0       0       0
  4633 ;;      Totals:         6       0       0
  4634 ;;Total ram usage:        6 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; This function calls:
  4637 ;;		Nothing
  4638 ;; This function is called by:
  4639 ;;		_nrf24l01ISR
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           
  4644                           ;psect for function i1_write_flashmem
  4645  05B3                     i1_write_flashmem:	
  4646                           
  4647                           ;flash.c: 5: unsigned int address;
  4648                           ;flash.c: 7: INTCONbits.GIE = 0;
  4649                           
  4650                           ;incstack = 0
  4651                           ; Regs used in i1_write_flashmem: [wreg+status,2+status,0]
  4652  05B3  138B               	bcf	11,7	;volatile
  4653                           
  4654                           ;flash.c: 10: PMCON1 = 0x00;
  4655  05B4  0023               	movlb	3	; select bank3
  4656  05B5  0195               	clrf	21	;volatile
  4657                           
  4658                           ;flash.c: 12: address = (0x800U-32) + offset;
  4659  05B6  0870               	movf	i1write_flashmem@offset,w
  4660  05B7  3EE0               	addlw	224
  4661  05B8  00F4               	movwf	i1write_flashmem@address
  4662  05B9  3007               	movlw	7
  4663  05BA  3D71               	addwfc	i1write_flashmem@offset+1,w
  4664  05BB  00F5               	movwf	i1write_flashmem@address+1
  4665                           
  4666                           ;flash.c: 13: PMADRL = (char) (address >> 0);
  4667  05BC  0874               	movf	i1write_flashmem@address,w
  4668  05BD  0091               	movwf	17	;volatile
  4669                           
  4670                           ;flash.c: 14: PMADRH = (char) (address >> 8);
  4671  05BE  0875               	movf	i1write_flashmem@address+1,w
  4672  05BF  0092               	movwf	18	;volatile
  4673                           
  4674                           ;flash.c: 16: PMCON1bits.FREE = 1;
  4675  05C0  1615               	bsf	21,4	;volatile
  4676                           
  4677                           ;flash.c: 17: PMCON1bits.WREN = 1;
  4678  05C1  1515               	bsf	21,2	;volatile
  4679                           
  4680                           ;flash.c: 19: PMCON2 = 0x55;
  4681  05C2  3055               	movlw	85
  4682  05C3  0096               	movwf	22	;volsfr
  4683                           
  4684                           ;flash.c: 20: PMCON2 = 0xAA;
  4685  05C4  30AA               	movlw	170
  4686  05C5  0096               	movwf	22	;volsfr
  4687                           
  4688                           ;flash.c: 22: PMCON1bits.WR = 1;
  4689  05C6  1495               	bsf	21,1	;volatile
  4690                           
  4691                           ;flash.c: 24: __nop();
  4692  05C7  0000               	nop
  4693                           
  4694                           ;flash.c: 25: __nop();
  4695  05C8  0000               	nop
  4696                           
  4697                           ;flash.c: 27: PMCON1bits.WREN = 0;
  4698  05C9  0023               	movlb	3	; select bank3
  4699  05CA  1115               	bcf	21,2	;volatile
  4700                           
  4701                           ;flash.c: 31: PMCON1 = 0x00;
  4702  05CB  0195               	clrf	21	;volatile
  4703                           
  4704                           ;flash.c: 33: PMADRL = (char) (address >> 0);
  4705  05CC  0874               	movf	i1write_flashmem@address,w
  4706  05CD  0091               	movwf	17	;volatile
  4707                           
  4708                           ;flash.c: 34: PMADRH = (char) (address >> 8);
  4709  05CE  0875               	movf	i1write_flashmem@address+1,w
  4710  05CF  0092               	movwf	18	;volatile
  4711                           
  4712                           ;flash.c: 36: PMCON1bits.FREE = 0;
  4713  05D0  1215               	bcf	21,4	;volatile
  4714                           
  4715                           ;flash.c: 37: PMCON1bits.LWLO = 1;
  4716  05D1  1695               	bsf	21,5	;volatile
  4717                           
  4718                           ;flash.c: 38: PMCON1bits.WREN = 1;
  4719  05D2  1515               	bsf	21,2	;volatile
  4720                           
  4721                           ;flash.c: 40: PMDATL = (data >> 0);
  4722  05D3  0872               	movf	i1write_flashmem@data,w
  4723  05D4  0093               	movwf	19	;volatile
  4724                           
  4725                           ;flash.c: 41: PMDATH = (data >> 8);
  4726  05D5  0873               	movf	i1write_flashmem@data+1,w
  4727  05D6  0094               	movwf	20	;volatile
  4728                           
  4729                           ;flash.c: 43: PMCON1bits.LWLO = 0;
  4730  05D7  1295               	bcf	21,5	;volatile
  4731                           
  4732                           ;flash.c: 45: PMCON2 = 0x55;
  4733  05D8  3055               	movlw	85
  4734  05D9  0096               	movwf	22	;volsfr
  4735                           
  4736                           ;flash.c: 46: PMCON2 = 0xAA;
  4737  05DA  30AA               	movlw	170
  4738  05DB  0096               	movwf	22	;volsfr
  4739                           
  4740                           ;flash.c: 48: PMCON1bits.WR = 1;
  4741  05DC  1495               	bsf	21,1	;volatile
  4742                           
  4743                           ;flash.c: 50: __nop();
  4744  05DD  0000               	nop
  4745                           
  4746                           ;flash.c: 51: __nop();
  4747  05DE  0000               	nop
  4748                           
  4749                           ;flash.c: 53: PMCON1bits.WREN = 0;
  4750  05DF  0023               	movlb	3	; select bank3
  4751  05E0  1115               	bcf	21,2	;volatile
  4752                           
  4753                           ;flash.c: 56: INTCONbits.GIE = 1;
  4754  05E1  178B               	bsf	11,7	;volatile
  4755  05E2  0008               	return
  4756  05E3                     __end_ofi1_write_flashmem:	
  4757                           
  4758                           	psect	text21
  4759  04E3                     __ptext21:	
  4760 ;; *************** function _nrf24l01SetRXMode *****************
  4761 ;; Defined at:
  4762 ;;		line 25 in file "nrf24l01.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;  rxMode          1    wreg     unsigned char 
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;  rxMode          1    4[COMMON] unsigned char 
  4767 ;;  config          1    5[COMMON] struct .
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      void 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2, status,0, pclath, cstack
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMMON   BANK0   BANK1
  4777 ;;      Params:         0       0       0
  4778 ;;      Locals:         0       0       0
  4779 ;;      Temps:          0       0       0
  4780 ;;      Totals:         0       0       0
  4781 ;;Total ram usage:        0 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    7
  4784 ;; This function calls:
  4785 ;;		_nrf24l01Send
  4786 ;; This function is called by:
  4787 ;;		_nrf24l01ISR
  4788 ;;		_nrf24l01SendString
  4789 ;;		_nrf24l01CheckACK
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           
  4794                           ;psect for function _nrf24l01SetRXMode
  4795  04E3                     _nrf24l01SetRXMode:	
  4796                           
  4797                           ;incstack = 0
  4798                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  4799                           ;nrf24l01SetRXMode@rxMode stored from wreg
  4800  04E3  00F4               	movwf	nrf24l01SetRXMode@rxMode
  4801                           
  4802                           ;nrf24l01.c: 26: n_CONFIG_t config;
  4803                           ;nrf24l01.c: 27: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  4804  04E4  0020               	movlb	0	; select bank0
  4805  04E5  01C7               	clrf	nrf24l01Send@data
  4806  04E6  3000               	movlw	0
  4807  04E7  26DE               	fcall	_nrf24l01Send
  4808  04E8  00F3               	movwf	??_nrf24l01SetRXMode
  4809  04E9  0873               	movf	??_nrf24l01SetRXMode,w
  4810  04EA  00F5               	movwf	nrf24l01SetRXMode@config
  4811                           
  4812                           ;nrf24l01.c: 29: nrf24l01.RXMode = rxMode;
  4813  04EB  0C74               	rrf	nrf24l01SetRXMode@rxMode,w
  4814  04EC  0020               	movlb	0	; select bank0
  4815  04ED  1C03               	skipc
  4816  04EE  12AA               	bcf	_nrf24l01+2,5	;volatile
  4817  04EF  1803               	skipnc
  4818  04F0  16AA               	bsf	_nrf24l01+2,5	;volatile
  4819                           
  4820                           ;nrf24l01.c: 31: if (config.PRIM_RX != nrf24l01.RXMode){
  4821  04F1  1EAA               	btfss	_nrf24l01+2,5	;volatile
  4822  04F2  2CF5               	goto	u89_20
  4823  04F3  3001               	movlw	1
  4824  04F4  2CF6               	goto	u89_22
  4825  04F5                     u89_20:	
  4826  04F5  3000               	movlw	0
  4827  04F6                     u89_22:	
  4828  04F6  00F3               	movwf	??_nrf24l01SetRXMode
  4829  04F7  1C75               	btfss	nrf24l01SetRXMode@config,0
  4830  04F8  2CFB               	goto	u90_20
  4831  04F9  3001               	movlw	1
  4832  04FA  2CFC               	goto	u90_22
  4833  04FB                     u90_20:	
  4834  04FB  3000               	movlw	0
  4835  04FC                     u90_22:	
  4836  04FC  0673               	xorwf	??_nrf24l01SetRXMode,w
  4837  04FD  1903               	skipnz
  4838  04FE  0008               	return
  4839                           
  4840                           ;nrf24l01.c: 33: PORTAbits.RA0 = 0;
  4841  04FF  100C               	bcf	12,0	;volatile
  4842                           
  4843                           ;nrf24l01.c: 34: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4844  0500  30A0               	movlw	160
  4845  0501                     u135_27:	
  4846  0501  3200               	nop2
  4847  0502  0B89               	decfsz	9,f
  4848  0503  2D01               	goto	u135_27
  4849                           
  4850                           ;nrf24l01.c: 36: config.PRIM_RX = nrf24l01.RXMode;
  4851  0504  1075               	bcf	nrf24l01SetRXMode@config,0
  4852  0505  0020               	movlb	0	; select bank0
  4853  0506  1AAA               	btfsc	_nrf24l01+2,5	;volatile
  4854  0507  1475               	bsf	nrf24l01SetRXMode@config,0
  4855                           
  4856                           ;nrf24l01.c: 37: nrf24l01Send(0b00100000 | 0x00, config.byte);
  4857  0508  0875               	movf	nrf24l01SetRXMode@config,w
  4858  0509  00F3               	movwf	??_nrf24l01SetRXMode
  4859  050A  0873               	movf	??_nrf24l01SetRXMode,w
  4860  050B  0020               	movlb	0	; select bank0
  4861  050C  00C7               	movwf	nrf24l01Send@data
  4862  050D  3020               	movlw	32
  4863  050E  26DE               	fcall	_nrf24l01Send
  4864                           
  4865                           ;nrf24l01.c: 38: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4866  050F  30A0               	movlw	160
  4867  0510                     u136_27:	
  4868  0510  3200               	nop2
  4869  0511  0B89               	decfsz	9,f
  4870  0512  2D10               	goto	u136_27
  4871                           
  4872                           ;nrf24l01.c: 40: if (nrf24l01.RXMode){
  4873  0513  0020               	movlb	0	; select bank0
  4874  0514  1EAA               	btfss	_nrf24l01+2,5	;volatile
  4875  0515  0008               	return
  4876                           
  4877                           ;nrf24l01.c: 41: PORTAbits.RA0 = 1;
  4878  0516  140C               	bsf	12,0	;volatile
  4879                           
  4880                           ;nrf24l01.c: 42: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4881  0517  30A0               	movlw	160
  4882  0518                     u137_27:	
  4883  0518  3200               	nop2
  4884  0519  0B89               	decfsz	9,f
  4885  051A  2D18               	goto	u137_27
  4886  051B  0008               	return
  4887  051C                     __end_of_nrf24l01SetRXMode:	
  4888                           
  4889                           	psect	text22
  4890  0686                     __ptext22:	
  4891 ;; *************** function _nrf24l01HandleRX *****************
  4892 ;; Defined at:
  4893 ;;		line 48 in file "nrf24l01.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;  i               1    6[COMMON] unsigned char 
  4898 ;;  width           1    5[COMMON] unsigned char 
  4899 ;;  byte            1    4[COMMON] unsigned char 
  4900 ;; Return value:  Size  Location     Type
  4901 ;;                  1    wreg      void 
  4902 ;; Registers used:
  4903 ;;		wreg, status,2, status,0, pclath, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMMON   BANK0   BANK1
  4909 ;;      Params:         0       0       0
  4910 ;;      Locals:         3       0       0
  4911 ;;      Temps:          1       0       0
  4912 ;;      Totals:         4       0       0
  4913 ;;Total ram usage:        4 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; Hardware stack levels required when called:    2
  4916 ;; This function calls:
  4917 ;;		_nrf24l01SPIEnd
  4918 ;;		_nrf24l01SPISend
  4919 ;;		_nrf24l01SPIStart
  4920 ;;		_nrf24l01Send
  4921 ;; This function is called by:
  4922 ;;		_nrf24l01ISR
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           
  4927                           ;psect for function _nrf24l01HandleRX
  4928  0686                     _nrf24l01HandleRX:	
  4929                           
  4930                           ;nrf24l01.c: 51: unsigned char byte;
  4931                           ;nrf24l01.c: 52: unsigned char i;
  4932                           ;nrf24l01.c: 54: unsigned char width = nrf24l01Send(0b01100000, 0);
  4933                           
  4934                           ;incstack = 0
  4935                           ; Regs used in _nrf24l01HandleRX: [wreg+status,2+status,0+pclath+cstack]
  4936  0686  0020               	movlb	0	; select bank0
  4937  0687  01C7               	clrf	nrf24l01Send@data
  4938  0688  3060               	movlw	96
  4939  0689  26DE               	fcall	_nrf24l01Send
  4940  068A  00F3               	movwf	??_nrf24l01HandleRX
  4941  068B  0873               	movf	??_nrf24l01HandleRX,w
  4942  068C  00F5               	movwf	nrf24l01HandleRX@width
  4943                           
  4944                           ;nrf24l01.c: 56: PORTAbits.RA0 = 0;
  4945  068D  0020               	movlb	0	; select bank0
  4946  068E  100C               	bcf	12,0	;volatile
  4947                           
  4948                           ;nrf24l01.c: 58: nrf24l01SPIStart();
  4949  068F  271A               	fcall	_nrf24l01SPIStart
  4950                           
  4951                           ;nrf24l01.c: 60: nrf24l01SPISend(0b01100001);
  4952  0690  3061               	movlw	97
  4953  0691  270F               	fcall	_nrf24l01SPISend
  4954                           
  4955                           ;nrf24l01.c: 62: i = 0;
  4956  0692  01F6               	clrf	nrf24l01HandleRX@i
  4957  0693                     i1l1798:	
  4958                           ;nrf24l01.c: 63: while (i < width){
  4959                           
  4960  0693  0875               	movf	nrf24l01HandleRX@width,w
  4961  0694  0276               	subwf	nrf24l01HandleRX@i,w
  4962  0695  1803               	btfsc	3,0
  4963  0696  2EA1               	goto	i1l1800
  4964                           
  4965                           ;nrf24l01.c: 64: byte = nrf24l01SPISend(0);
  4966  0697  3000               	movlw	0
  4967  0698  270F               	fcall	_nrf24l01SPISend
  4968  0699  00F3               	movwf	??_nrf24l01HandleRX
  4969  069A  0873               	movf	??_nrf24l01HandleRX,w
  4970  069B  00F4               	movwf	nrf24l01HandleRX@byte
  4971                           
  4972                           ;nrf24l01.c: 75: i++;
  4973  069C  3001               	movlw	1
  4974  069D  00F3               	movwf	??_nrf24l01HandleRX
  4975  069E  0873               	movf	??_nrf24l01HandleRX,w
  4976  069F  07F6               	addwf	nrf24l01HandleRX@i,f
  4977  06A0  2E93               	goto	i1l1798
  4978  06A1                     i1l1800:	
  4979                           
  4980                           ;nrf24l01.c: 76: }
  4981                           ;nrf24l01.c: 78: nrf24l01SPIEnd();
  4982  06A1  2721               	fcall	_nrf24l01SPIEnd
  4983                           
  4984                           ;nrf24l01.c: 86: nrf24l01.RXPending = 1;
  4985  06A2  0020               	movlb	0	; select bank0
  4986  06A3  162A               	bsf	_nrf24l01+2,4	;volatile
  4987  06A4  0008               	return
  4988  06A5                     __end_of_nrf24l01HandleRX:	
  4989                           
  4990                           	psect	text23
  4991  06DE                     __ptext23:	
  4992 ;; *************** function _nrf24l01Send *****************
  4993 ;; Defined at:
  4994 ;;		line 8 in file "nrf24l01.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  command         1    wreg     unsigned char 
  4997 ;;  data            1    0[BANK0 ] unsigned char 
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  command         1    2[COMMON] unsigned char 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      unsigned char 
  5002 ;; Registers used:
  5003 ;;		wreg, status,2, status,0, pclath, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMMON   BANK0   BANK1
  5009 ;;      Params:         0       0       0
  5010 ;;      Locals:         0       0       0
  5011 ;;      Temps:          0       0       0
  5012 ;;      Totals:         0       0       0
  5013 ;;Total ram usage:        0 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    6
  5016 ;; This function calls:
  5017 ;;		_enableInterrupts
  5018 ;;		_nrf24l01SPIEnd
  5019 ;;		_nrf24l01SPISend
  5020 ;;		_nrf24l01SPIStart
  5021 ;; This function is called by:
  5022 ;;		_nrf24l01SetRXMode
  5023 ;;		_nrf24l01HandleRX
  5024 ;;		_nrf24l01ISR
  5025 ;;		_nrf24l01InitRegisters
  5026 ;;		_nrf24l01Init
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           
  5031                           ;psect for function _nrf24l01Send
  5032  06DE                     _nrf24l01Send:	
  5033                           
  5034                           ;incstack = 0
  5035                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  5036                           ;nrf24l01Send@command stored from wreg
  5037  06DE  00F2               	movwf	nrf24l01Send@command
  5038                           
  5039                           ;nrf24l01.c: 10: enableInterrupts(0);
  5040  06DF  3000               	movlw	0
  5041  06E0  2728               	fcall	_enableInterrupts
  5042                           
  5043                           ;nrf24l01.c: 12: nrf24l01SPIStart();
  5044  06E1  271A               	fcall	_nrf24l01SPIStart
  5045                           
  5046                           ;nrf24l01.c: 14: nrf24l01SPISend(command);
  5047  06E2  0872               	movf	nrf24l01Send@command,w
  5048  06E3  270F               	fcall	_nrf24l01SPISend
  5049                           
  5050                           ;nrf24l01.c: 15: data = nrf24l01SPISend(data);
  5051  06E4  0020               	movlb	0	; select bank0
  5052  06E5  0847               	movf	nrf24l01Send@data,w
  5053  06E6  270F               	fcall	_nrf24l01SPISend
  5054  06E7  00F1               	movwf	??_nrf24l01Send
  5055  06E8  0871               	movf	??_nrf24l01Send,w
  5056  06E9  0020               	movlb	0	; select bank0
  5057  06EA  00C7               	movwf	nrf24l01Send@data
  5058                           
  5059                           ;nrf24l01.c: 17: nrf24l01SPIEnd();
  5060  06EB  2721               	fcall	_nrf24l01SPIEnd
  5061                           
  5062                           ;nrf24l01.c: 19: enableInterrupts(1);
  5063  06EC  3001               	movlw	1
  5064  06ED  2728               	fcall	_enableInterrupts
  5065                           
  5066                           ;nrf24l01.c: 21: return data;
  5067  06EE  0020               	movlb	0	; select bank0
  5068  06EF  0847               	movf	nrf24l01Send@data,w
  5069  06F0  0008               	return
  5070  06F1                     __end_of_nrf24l01Send:	
  5071                           
  5072                           	psect	text24
  5073  071A                     __ptext24:	
  5074 ;; *************** function _nrf24l01SPIStart *****************
  5075 ;; Defined at:
  5076 ;;		line 38 in file "interface.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;		None
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;		None
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  1    wreg      void 
  5083 ;; Registers used:
  5084 ;;		wreg
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMMON   BANK0   BANK1
  5090 ;;      Params:         0       0       0
  5091 ;;      Locals:         0       0       0
  5092 ;;      Temps:          0       0       0
  5093 ;;      Totals:         0       0       0
  5094 ;;Total ram usage:        0 bytes
  5095 ;; Hardware stack levels used:    1
  5096 ;; Hardware stack levels required when called:    5
  5097 ;; This function calls:
  5098 ;;		Nothing
  5099 ;; This function is called by:
  5100 ;;		_nrf24l01Send
  5101 ;;		_nrf24l01HandleRX
  5102 ;;		_nrf24l01SendString
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           
  5107                           ;psect for function _nrf24l01SPIStart
  5108  071A                     _nrf24l01SPIStart:	
  5109                           
  5110                           ;interface.c: 39: PORTAbits.RA1 = 0;
  5111                           
  5112                           ;incstack = 0
  5113                           ; Regs used in _nrf24l01SPIStart: [wreg]
  5114  071A  0020               	movlb	0	; select bank0
  5115  071B  108C               	bcf	12,1	;volatile
  5116                           
  5117                           ;interface.c: 40: _delay((unsigned long)((10)*(16000000/4000000.0)));
  5118  071C  300D               	movlw	13
  5119  071D                     u138_27:	
  5120  071D  0B89               	decfsz	9,f
  5121  071E  2F1D               	goto	u138_27
  5122  071F  0000               	nop
  5123  0720  0008               	return
  5124  0721                     __end_of_nrf24l01SPIStart:	
  5125                           
  5126                           	psect	text25
  5127  070F                     __ptext25:	
  5128 ;; *************** function _nrf24l01SPISend *****************
  5129 ;; Defined at:
  5130 ;;		line 27 in file "interface.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  data            1    wreg     unsigned char 
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;  data            1    0[COMMON] unsigned char 
  5135 ;; Return value:  Size  Location     Type
  5136 ;;                  1    wreg      unsigned char 
  5137 ;; Registers used:
  5138 ;;		wreg
  5139 ;; Tracked objects:
  5140 ;;		On entry : 0/0
  5141 ;;		On exit  : 0/0
  5142 ;;		Unchanged: 0/0
  5143 ;; Data sizes:     COMMON   BANK0   BANK1
  5144 ;;      Params:         0       0       0
  5145 ;;      Locals:         0       0       0
  5146 ;;      Temps:          0       0       0
  5147 ;;      Totals:         0       0       0
  5148 ;;Total ram usage:        0 bytes
  5149 ;; Hardware stack levels used:    1
  5150 ;; Hardware stack levels required when called:    5
  5151 ;; This function calls:
  5152 ;;		Nothing
  5153 ;; This function is called by:
  5154 ;;		_nrf24l01Send
  5155 ;;		_nrf24l01HandleRX
  5156 ;;		_nrf24l01SendString
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           
  5161                           ;psect for function _nrf24l01SPISend
  5162  070F                     _nrf24l01SPISend:	
  5163                           
  5164                           ;incstack = 0
  5165                           ; Regs used in _nrf24l01SPISend: [wreg]
  5166                           ;nrf24l01SPISend@data stored from wreg
  5167  070F  00F0               	movwf	nrf24l01SPISend@data
  5168                           
  5169                           ;interface.c: 28: SSP1BUF = data;
  5170  0710  0870               	movf	nrf24l01SPISend@data,w
  5171  0711  0024               	movlb	4	; select bank4
  5172  0712  0091               	movwf	17	;volatile
  5173  0713                     i1l52:	
  5174                           ;interface.c: 30: while (!SSP1STATbits.BF){
  5175                           
  5176  0713  0024               	movlb	4	; select bank4
  5177  0714  1814               	btfsc	20,0	;volatile
  5178  0715  2F18               	goto	i1l1500
  5179                           
  5180                           ;interface.c: 31: __nop();
  5181  0716  0000               	nop
  5182  0717  2F13               	goto	i1l52
  5183  0718                     i1l1500:	
  5184                           
  5185                           ;interface.c: 32: }
  5186                           ;interface.c: 34: return SSP1BUF;
  5187  0718  0811               	movf	17,w	;volatile
  5188  0719  0008               	return
  5189  071A                     __end_of_nrf24l01SPISend:	
  5190                           
  5191                           	psect	text26
  5192  0721                     __ptext26:	
  5193 ;; *************** function _nrf24l01SPIEnd *****************
  5194 ;; Defined at:
  5195 ;;		line 44 in file "interface.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;		None
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;		None
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  1    wreg      void 
  5202 ;; Registers used:
  5203 ;;		wreg
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMMON   BANK0   BANK1
  5209 ;;      Params:         0       0       0
  5210 ;;      Locals:         0       0       0
  5211 ;;      Temps:          0       0       0
  5212 ;;      Totals:         0       0       0
  5213 ;;Total ram usage:        0 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:    5
  5216 ;; This function calls:
  5217 ;;		Nothing
  5218 ;; This function is called by:
  5219 ;;		_nrf24l01Send
  5220 ;;		_nrf24l01HandleRX
  5221 ;;		_nrf24l01SendString
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           
  5226                           ;psect for function _nrf24l01SPIEnd
  5227  0721                     _nrf24l01SPIEnd:	
  5228                           
  5229                           ;interface.c: 45: _delay((unsigned long)((10)*(16000000/4000000.0)));
  5230                           
  5231                           ;incstack = 0
  5232                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  5233  0721  300D               	movlw	13
  5234  0722                     u139_27:	
  5235  0722  0B89               	decfsz	9,f
  5236  0723  2F22               	goto	u139_27
  5237  0724  0000               	nop
  5238                           
  5239                           ;interface.c: 46: PORTAbits.RA1 = 1;
  5240  0725  0020               	movlb	0	; select bank0
  5241  0726  148C               	bsf	12,1	;volatile
  5242  0727  0008               	return
  5243  0728                     __end_of_nrf24l01SPIEnd:	
  5244                           
  5245                           	psect	text27
  5246  0728                     __ptext27:	
  5247 ;; *************** function _enableInterrupts *****************
  5248 ;; Defined at:
  5249 ;;		line 50 in file "interface.c"
  5250 ;; Parameters:    Size  Location     Type
  5251 ;;  enable          1    wreg     unsigned char 
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  enable          1    0[COMMON] unsigned char 
  5254 ;; Return value:  Size  Location     Type
  5255 ;;                  1    wreg      void 
  5256 ;; Registers used:
  5257 ;;		wreg, status,0
  5258 ;; Tracked objects:
  5259 ;;		On entry : 0/0
  5260 ;;		On exit  : 0/0
  5261 ;;		Unchanged: 0/0
  5262 ;; Data sizes:     COMMON   BANK0   BANK1
  5263 ;;      Params:         0       0       0
  5264 ;;      Locals:         0       0       0
  5265 ;;      Temps:          0       0       0
  5266 ;;      Totals:         0       0       0
  5267 ;;Total ram usage:        0 bytes
  5268 ;; Hardware stack levels used:    1
  5269 ;; Hardware stack levels required when called:    5
  5270 ;; This function calls:
  5271 ;;		Nothing
  5272 ;; This function is called by:
  5273 ;;		_nrf24l01Send
  5274 ;;		_nrf24l01SendString
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           
  5279                           ;psect for function _enableInterrupts
  5280  0728                     _enableInterrupts:	
  5281                           
  5282                           ;incstack = 0
  5283                           ; Regs used in _enableInterrupts: [wreg+status,0]
  5284                           ;enableInterrupts@enable stored from wreg
  5285  0728  00F0               	movwf	enableInterrupts@enable
  5286                           
  5287                           ;interface.c: 51: INTCONbits.INTE = enable;
  5288  0729  0C70               	rrf	enableInterrupts@enable,w
  5289  072A  1C03               	skipc
  5290  072B  120B               	bcf	11,4	;volatile
  5291  072C  1803               	skipnc
  5292  072D  160B               	bsf	11,4	;volatile
  5293  072E  0008               	return
  5294  072F                     __end_of_enableInterrupts:	
  5295  007E                     btemp	set	126	;btemp
  5296  007E                     int$flags	set	126
  5297  007E                     wtemp0	set	126


Data Sizes:
    Strings     15
    Constant    6
    Data        2
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     34      75
    BANK1            32      4       4

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 31
		 -> nrf24l01.txTopic(BANK0[6]), nrf24l01(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 31
		 -> nrf24l01.txTopic(BANK0[6]), nrf24l01(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[4]), STR_2(CODE[6]), STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 31
		 -> nrf24l01.txTopic(BANK0[6]), nrf24l01(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 31
		 -> nrf24l01.txTopic(BANK0[6]), nrf24l01(BANK0[31]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 31
		 -> nrf24l01.txValue(BANK0[8]), nrf24l01.txTopic(BANK0[6]), nrf24l01(BANK0[31]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 31
		 -> nrf24l01.txValue(BANK0[8]), nrf24l01.txTopic(BANK0[6]), nrf24l01(BANK0[31]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 31
		 -> nrf24l01.txValue(BANK0[8]), nrf24l01.txTopic(BANK0[6]), nrf24l01(BANK0[31]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 31
		 -> nrf24l01.txValue(BANK0[8]), nrf24l01.txTopic(BANK0[6]), nrf24l01(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 31
		 -> nrf24l01.txTopic(BANK0[6]), nrf24l01(BANK0[31]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 31
		 -> nrf24l01.txValue(BANK0[8]), nrf24l01.txTopic(BANK0[6]), nrf24l01(BANK0[31]), 

    _itoa@buffer	PTR unsigned char  size(1) Largest target is 31
		 -> nrf24l01.txValue(BANK0[8]), nrf24l01.txTopic(BANK0[6]), nrf24l01(BANK0[31]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01HandleRX

Critical Paths under _main in BANK0

    _nrf24l01Init->_nrf24l01InitRegisters
    _loop->__itoa
    _nrf24l01SendString->_read_flashmem
    __itoa->_itoa
    _itoa->_utoa
    _utoa->___lwdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_loop

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   10289
                                             33 BANK0      1     1      0
                               _loop
                       _nrf24l01Init
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    2840
                                             10 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                7     7      0    1513
                                              3 BANK0      7     7      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 4     4      0    7449
                                              0 BANK1      4     4      0
                            ___lldiv
                             ___lmul
                              __itoa
                 _nrf24l01SendString
                      _read_flashmem
                           _startADC
                             _strcpy
                             _strlen
                     _write_flashmem
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     120
                                              3 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               5     3      2     357
                                              3 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _startADC                                             2     2      0      44
                                              3 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendString                                   6     6      0    2555
                                             12 BANK0      6     6      0
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
                      _read_flashmem
                     _write_flashmem
 ---------------------------------------------------------------------------------
 (2) _write_flashmem                                       6     2      4     691
                                              3 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _read_flashmem                                        9     7      2     220
                                              3 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (8) _nrf24l01SetRXMode                                    3     3      0    1395
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (9) _nrf24l01Send                                         3     2      1    1327
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 (2) __itoa                                                6     3      3    2184
                                             27 BANK0      6     3      3
                               _itoa
                      _read_flashmem (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 7     3      4    1486
                                             20 BANK0      7     3      4
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     5      4    1165
                                             11 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     287
                                              3 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     418
                                              3 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     476
                                              3 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     802
                                              3 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  6     6      0    4451
                                              9 COMMON     4     4      0
                                              1 BANK0      2     2      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          2     2      0    4426
                                              7 COMMON     2     2      0
                   _nrf24l01HandleRX
                       _nrf24l01Send
                  _nrf24l01SetRXMode
                   i1_write_flashmem
 ---------------------------------------------------------------------------------
 (8) i1_write_flashmem                                     6     2      4     259
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) _nrf24l01SetRXMode                                    3     3      0    1395
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01HandleRX                                     4     4      0    1397
                                              3 COMMON     4     4      0
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (9) _nrf24l01Send                                         3     2      1    1327
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___lldiv
     ___lmul
     __itoa
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _read_flashmem (ARG)
       _strlen (ARG)
     _nrf24l01SendString
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _read_flashmem
       _write_flashmem
     _read_flashmem
     _startADC
     _strcpy
     _strlen
     _write_flashmem
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01HandleRX
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01SetRXMode
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     i1_write_flashmem

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     22      4B       6       93.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      4       4       8       12.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5C       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jun 16 14:20:04 2018

                   __CFG_CP$OFF 0000             nrf24l01Send@command 0072                     __CFG_LVP$ON 0000  
                           l171 009D                             l166 0058                             l185 0205  
                           l545 03B0                             _ISR 0004                             u615 0528  
                           u705 062A                             u635 0532                             u715 0631  
                           u645 053C                             u655 0544                             u685 061B  
                           u965 0597                             u975 059E    nrf24l01SendString@waitForAck 0056  
                  __CFG_BORV$LO 0000                             wreg 0009                            ?_ISR 0070  
                ??_nrf24l01Init 0051                            l2220 0066                            l2224 007A  
                          l2250 00D4                            l2242 00C2                            l2234 00A6  
                          l1460 0525                            l1516 0370                            l2260 0109  
                          l1462 0531                            l1526 038C                            l2262 012C  
                          l2254 00DD                            l2246 00CB                            l1472 054C  
                          l1640 067B                            l1720 02A3                            l1704 0289  
                          l2264 014F                            l2272 019F                            l1490 0630  
                          l1706 026D                            l2274 01B0                            l2258 00E6  
                          l1468 0543                            l1484 0618                            l1708 0293  
                          l2268 0183                            l2356 045E                            l1910 03E5  
                          l1486 0624                            l1494 0639                            l1734 02BF  
                          l1726 02BB                            l2286 01E7                            l1744 02D6  
                          l1736 02D2                            l1672 0609                            l1760 0644  
                ??_nrf24l01Send 0071                            l1922 0410                            l1746 02E9  
                          l1682 06C9                            l1762 064F                            l1908 03D7  
                          l1918 0405                            l1694 025D                            l1696 0242  
                          l1688 023F                            l1890 058C                            l1698 026B  
                          l1894 0596                            STR_1 0740                    __CFG_WDTE$ON 0000  
                          STR_2 072F                            STR_3 0745                            u1005 03DA  
                          u1025 03E6                            u1035 03FA                            u1045 0406  
                          u1307 022B                            u1317 0238                            u1237 0429  
                          u1327 0263                            u1247 06AC                            u1337 028D  
                          u1257 06B5                            u1347 02ED                            u1267 0301  
                          u1277 0606                            u1287 0211                            u1297 021E  
                          i1l52 0713  __size_of_nrf24l01InterfaceInit 000E                    __CFG_WRT$OFF 0000  
 __end_of_nrf24l01InterfaceInit 070F                   __p_NVMEM_text 07E0                            _main 0419  
                          _mode 0069                            _itoa 0663                            _loop 0052  
                          fsr0h 0005                            fsr1h 0007                            indf0 0000  
                          fsr0l 0004                            indf1 0001                            fsr1l 0006  
                          btemp 007E                            _utoa 036A                            start 0044  
                 __CFG_MCLRE$ON 0000                           ??_ISR 0079             nrf24l01SendString@i 0058  
              i1_write_flashmem 05B3     __size_of_nrf24l01SendString 00EF                           ?_main 0070  
                         ?_itoa 005B                           ?_loop 0070                 __end_of___lldiv 0419  
                         ?_utoa 0052                 __end_of___lwdiv 0551                           i1l154 0035  
                         i1l157 003F                 __end_of___lwmod 063E                           _NVMEM 07E0  
                         u90_20 04FB                           u90_22 04FC          enableInterrupts@enable 0070  
                         u89_20 04F5                           u89_22 04F6             ___lmul@multiplicand 004E  
                 __CFG_PWRTE$ON 0000                           __itoa 06F1                  __CFG_BOREN$OFF 0000  
              _enableInterrupts 0728                           utoa@c 0059                           utoa@v 0057  
                         status 0003                           wtemp0 007E                _nrf24l01SPIStart 071A  
               __initialization 0045                    __end_of_main 0460                    __end_of_itoa 0686  
                  __end_of_loop 0206                    __end_of_utoa 03C6                  __CFG_LPBOR$OFF 0000  
              _nrf24l01HandleRX 0686                          ??_main 0068                          ??_itoa 005F  
        i1write_flashmem@offset 0070                          ??_loop 00A0                          ??_utoa 0056  
              ??_write_flashmem 004E                ??_nrf24l01SPIEnd 0070        __size_of_nrf24l01SPISend 000B  
                        ?__itoa 0062                          _ADRESH 009C                          _ADRESL 009B  
                        _ANSELA 018C                          _ANSELC 018E                          i1l2008 0495  
                        i1l2130 003B                          i1l1500 0718                          i1l2126 0037  
                        i1l2128 003A                          i1l1800 06A1                          i1l1798 0693  
                        i1l1990 0475                          i1l1994 0483                          u135_27 0501  
                        u136_27 0510                          u137_27 0518                          u138_27 071D  
                        u139_27 0722                          _PMADRH 0192                          _PMADRL 0191  
                        _PMDATH 0194                          _PMDATL 0193                          _PMCON1 0195  
                        _PMCON2 0196            __size_of_nrf24l01ISR 0047         nrf24l01SetRXMode@config 0075  
                        _adcSum 0020                          ___lmul 0583         nrf24l01SetRXMode@rxMode 0074  
                __CFG_STVREN$ON 0000                       ??___lldiv 0052                       ??___lwdiv 004E  
                     ??___lwmod 004E            __end_of_nrf24l01Init 06C3            __end_of_nrf24l01Send 06F1  
         _nrf24l01InitRegisters 02F5                          _strcpy 06C3                          _strlen 063E  
          write_flashmem@offset 004A                          itoa@cp 0060                __end_of_startADC 0611  
        __size_of_read_flashmem 0032         __end_of__initialization 004F                    __itoa@buffer 0067  
                 __end_of_NVMEM 0800                    __itoa@number 0062                  __pcstackCOMMON 0070  
                  __pidataBANK0 0749                   __end_of__itoa 0701            i1write_flashmem@data 0072  
          nrf24l01HandleRX@byte 0074   nrf24l01InitRegisters@enRXAddr 004D         i1write_flashmem@address 0074  
                _OPTION_REGbits 0095                         ??__itoa 0065        __end_ofi1_write_flashmem 05E3  
                    __pbssBANK0 0020                      __itoa@base 0064               ??_nrf24l01SPISend 0070  
                     ISR@result 0048                   _read_flashmem 0551                      __pmaintext 0419  
                       ?___lmul 004A               _nrf24l01SetRXMode 04E3          ?_nrf24l01InitRegisters 0070  
                    __pintentry 0004             nrf24l01SPISend@data 0070                  ___lmul@product 0052  
            ?_nrf24l01SetRXMode 0070        __end_of_enableInterrupts 072F                         ?_strcpy 004A  
                       ?_strlen 004A           __end_of_n_ADDRESS_MUL 074C             ??_nrf24l01SetRXMode 0073  
      __end_of_nrf24l01SPIStart 0721                         _SSP1BUF 0211           nrf24l01ISR@tempStatus 0078  
      __end_of_nrf24l01HandleRX 06A5           _nrf24l01InterfaceInit 0701                  ?_read_flashmem 004A  
         __size_of_nrf24l01Init 001E           __size_of_nrf24l01Send 0013       __end_of_nrf24l01SetRXMode 051C  
    __end_of_nrf24l01SendString 02F5                 __size_of___lmul 0030                         _adcLoop 0027  
                     ?_startADC 0070                         ___lldiv 03C6                         ___lwdiv 051C  
                       ___lwmod 0611                         __ptext1 06A5                         __ptext2 0701  
                       __ptext3 02F5                         __ptext4 0052                         __ptext5 063E  
                       __ptext6 06C3                         __ptext7 05E3                         __ptext8 0206  
                       __ptext9 04A7                 __size_of_strcpy 001B                 __size_of_strlen 0025  
                  __size_of_ISR 0040                         _counter 0024           write_flashmem@address 004E  
                       clrloop0 0736            end_of_initialization 004F                    _nrf24l01Init 06A5  
                  _nrf24l01Send 06DE                         itoa@buf 0061                         itoa@val 005B  
               ___lldiv@divisor 004A                 ___lldiv@counter 0057                      ??_startADC 004A  
                       utoa@buf 005A                         utoa@val 0052                         strlen@s 0050  
                     _PORTAbits 000C                __CFG_FOSC$INTOSC 0000                       _TRISAbits 008C  
                     _TRISCbits 008E                nrf24l01Send@data 0047                   ??_nrf24l01ISR 0077  
        ?_nrf24l01InterfaceInit 0070                 ??_read_flashmem 004C      __size_of_nrf24l01SetRXMode 0039  
                __end_of___lmul 05B3              write_flashmem@data 004C                  __end_of_strcpy 06DE  
                __end_of_strlen 0663             start_initialization 0045                 _nrf24l01SPISend 070F  
                   __end_of_ISR 0044               ?i1_write_flashmem 0070         __size_of_write_flashmem 003C  
         nrf24l01HandleRX@width 0075         __size_of_nrf24l01SPIEnd 0007              ??i1_write_flashmem 0074  
        nrf24l01SendString@btye 0057         ??_nrf24l01InitRegisters 004A                        ??___lmul 0052  
           __end_of_nrf24l01ISR 04A7                     __pdataBANK0 0069               ?_enableInterrupts 0070  
                      ??_strcpy 004C                        ??_strlen 004C              ??_enableInterrupts 0070  
                     ___latbits 0000                   __pcstackBANK0 0047                   __pcstackBANK1 00A0  
             ?_nrf24l01SPIStart 0070              ??_nrf24l01SPIStart 0070               ?_nrf24l01HandleRX 0070  
            ??_nrf24l01HandleRX 0073                ___lwdiv@dividend 004C                        ?___lldiv 004A  
                      ?___lwdiv 004A                        ?___lwmod 004A            __end_of_n_ADDRESS_P0 0740  
       __end_of_nrf24l01SPISend 071A                   _NVMEM_absaddr 07E0               __size_of_startADC 002E  
     nrf24l01InitRegisters@enAA 004E              _nrf24l01SendString 0206                ___lwdiv@quotient 004F  
                __size_of__itoa 0010             ?_nrf24l01SendString 0070                     _nrf24l01ISR 0460  
                     clear_ram0 0735                        _PIE1bits 0091                        _PIR1bits 0011  
                     _sleepLoop 0026            ??_nrf24l01SendString 0053                      _ADCON0bits 009D  
                    _ADCON1bits 009E                        _WPUAbits 020C               ___lmul@multiplier 004A  
       ??_nrf24l01InterfaceInit 004A                  _write_flashmem 04A7                  _nrf24l01SPIEnd 0721  
               startADC@channel 004B            read_flashmem@address 0051                __size_of___lldiv 0053  
              __size_of___lwdiv 0035                __size_of___lwmod 002D                ?_nrf24l01SPISend 0070  
                    _ANSELAbits 018C                      _ANSELCbits 018E                   _n_ADDRESS_MUL 074B  
               ___lwdiv@divisor 004A                 ___lwdiv@counter 0051                        __ptext10 0551  
                      __ptext11 06F1                        __ptext20 05B3                        __ptext12 0663  
                      __ptext21 04E3                        __ptext13 036A                        __ptext22 0686  
                      __ptext14 0611                        __ptext23 06DE                        __ptext15 051C  
                      __ptext24 071A                        __ptext16 0583          __end_of_write_flashmem 04E3  
                      __ptext25 070F                        __ptext17 03C6                        __ptext26 0721  
                      __ptext27 0728                        __ptext19 0460          __end_of_nrf24l01SPIEnd 0728  
                      _nrf24l01 0028                      strcpy@from 004A                   __size_of_main 0047  
                 __size_of_itoa 0023                   __size_of_loop 01B4                   __size_of_utoa 005C  
  nrf24l01InitRegisters@feature 004B                        _nextMode 006A           __end_of_read_flashmem 0583  
__size_of_nrf24l01InitRegisters 0075   __end_of_nrf24l01InitRegisters 036A                        int$flags 007E  
                      _startADC 05E3       __size_ofi1_write_flashmem 0030                    _SSP1STATbits 0214  
                    _INTCONbits 000B                      _FVRCONbits 0117                        itoa@base 005D  
               ?_write_flashmem 004A                 ?_nrf24l01SPIEnd 0070               nrf24l01HandleRX@i 0076  
                      intlevel1 0000             read_flashmem@offset 004A                    _n_ADDRESS_P0 073B  
           read_flashmem@result 004F       __size_of_enableInterrupts 0007                      _PMCON1bits 0195  
              ___lwmod@dividend 004C                ___lldiv@dividend 004E               __CFG_CLKOUTEN$OFF 0000  
   nrf24l01InitRegisters@config 0050                      _OSCCONbits 0099       __size_of_nrf24l01SPIStart 0007  
   nrf24l01InitRegisters@status 004C       __size_of_nrf24l01HandleRX 001F                   __pstringtext1 073B  
                 __pstringtext2 074B                   __pstringtext3 072F                   __pstringtext4 0740  
                 __pstringtext5 0745                   __pstringtext6 0000                        utoa@base 0054  
    nrf24l01InitRegisters@DynPD 004F                ___lldiv@quotient 0053                 ___lwmod@divisor 004A  
                      strcpy@cp 004D                        strlen@cp 0051                        strcpy@to 004E  
               ___lwmod@counter 004F                     _SSPCON1bits 0215                      _WDTCONbits 0097  
                 ?_nrf24l01Init 0070                   ?_nrf24l01Send 0047                      _STATUSbits 0003  
                  ?_nrf24l01ISR 0070  
