

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 11 13:01:46 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	_NVMEM_text,global,class=CODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC16LF1503 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  0007                     	;# 
    96  0008                     	;# 
    97  0009                     	;# 
    98  000A                     	;# 
    99  000B                     	;# 
   100  000C                     	;# 
   101  000E                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0016                     	;# 
   108  0017                     	;# 
   109  0018                     	;# 
   110  0019                     	;# 
   111  001A                     	;# 
   112  001B                     	;# 
   113  001C                     	;# 
   114  008C                     	;# 
   115  008E                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0093                     	;# 
   119  0095                     	;# 
   120  0096                     	;# 
   121  0097                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  010C                     	;# 
   131  010E                     	;# 
   132  0111                     	;# 
   133  0112                     	;# 
   134  0113                     	;# 
   135  0114                     	;# 
   136  0115                     	;# 
   137  0116                     	;# 
   138  0117                     	;# 
   139  0118                     	;# 
   140  0119                     	;# 
   141  011D                     	;# 
   142  018C                     	;# 
   143  018E                     	;# 
   144  0191                     	;# 
   145  0191                     	;# 
   146  0192                     	;# 
   147  0193                     	;# 
   148  0193                     	;# 
   149  0194                     	;# 
   150  0195                     	;# 
   151  0196                     	;# 
   152  020C                     	;# 
   153  0211                     	;# 
   154  0211                     	;# 
   155  0212                     	;# 
   156  0212                     	;# 
   157  0213                     	;# 
   158  0213                     	;# 
   159  0214                     	;# 
   160  0214                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0216                     	;# 
   165  0216                     	;# 
   166  0217                     	;# 
   167  0217                     	;# 
   168  0391                     	;# 
   169  0392                     	;# 
   170  0393                     	;# 
   171  0498                     	;# 
   172  0498                     	;# 
   173  0499                     	;# 
   174  049A                     	;# 
   175  049B                     	;# 
   176  049B                     	;# 
   177  049C                     	;# 
   178  049D                     	;# 
   179  049E                     	;# 
   180  049F                     	;# 
   181  0611                     	;# 
   182  0612                     	;# 
   183  0613                     	;# 
   184  0613                     	;# 
   185  0614                     	;# 
   186  0615                     	;# 
   187  0616                     	;# 
   188  0616                     	;# 
   189  0617                     	;# 
   190  0618                     	;# 
   191  0619                     	;# 
   192  0619                     	;# 
   193  061A                     	;# 
   194  061B                     	;# 
   195  061C                     	;# 
   196  061C                     	;# 
   197  0691                     	;# 
   198  0692                     	;# 
   199  0693                     	;# 
   200  0694                     	;# 
   201  0695                     	;# 
   202  0F0F                     	;# 
   203  0F10                     	;# 
   204  0F11                     	;# 
   205  0F12                     	;# 
   206  0F13                     	;# 
   207  0F14                     	;# 
   208  0F15                     	;# 
   209  0F16                     	;# 
   210  0F17                     	;# 
   211  0F18                     	;# 
   212  0F19                     	;# 
   213  0F1A                     	;# 
   214  0F1B                     	;# 
   215  0F1C                     	;# 
   216  0F1D                     	;# 
   217  0F1E                     	;# 
   218  0F1F                     	;# 
   219  0FE3                     	;# 
   220  0FE4                     	;# 
   221  0FE5                     	;# 
   222  0FE6                     	;# 
   223  0FE7                     	;# 
   224  0FE8                     	;# 
   225  0FE9                     	;# 
   226  0FEA                     	;# 
   227  0FEB                     	;# 
   228  0FED                     	;# 
   229  0FEE                     	;# 
   230  0FEF                     	;# 
   231  0000                     	;# 
   232  0001                     	;# 
   233  0002                     	;# 
   234  0003                     	;# 
   235  0004                     	;# 
   236  0005                     	;# 
   237  0006                     	;# 
   238  0007                     	;# 
   239  0008                     	;# 
   240  0009                     	;# 
   241  000A                     	;# 
   242  000B                     	;# 
   243  000C                     	;# 
   244  000E                     	;# 
   245  0011                     	;# 
   246  0012                     	;# 
   247  0013                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001C                     	;# 
   257  008C                     	;# 
   258  008E                     	;# 
   259  0091                     	;# 
   260  0092                     	;# 
   261  0093                     	;# 
   262  0095                     	;# 
   263  0096                     	;# 
   264  0097                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009B                     	;# 
   269  009C                     	;# 
   270  009D                     	;# 
   271  009E                     	;# 
   272  009F                     	;# 
   273  010C                     	;# 
   274  010E                     	;# 
   275  0111                     	;# 
   276  0112                     	;# 
   277  0113                     	;# 
   278  0114                     	;# 
   279  0115                     	;# 
   280  0116                     	;# 
   281  0117                     	;# 
   282  0118                     	;# 
   283  0119                     	;# 
   284  011D                     	;# 
   285  018C                     	;# 
   286  018E                     	;# 
   287  0191                     	;# 
   288  0191                     	;# 
   289  0192                     	;# 
   290  0193                     	;# 
   291  0193                     	;# 
   292  0194                     	;# 
   293  0195                     	;# 
   294  0196                     	;# 
   295  020C                     	;# 
   296  0211                     	;# 
   297  0211                     	;# 
   298  0212                     	;# 
   299  0212                     	;# 
   300  0213                     	;# 
   301  0213                     	;# 
   302  0214                     	;# 
   303  0214                     	;# 
   304  0215                     	;# 
   305  0215                     	;# 
   306  0215                     	;# 
   307  0216                     	;# 
   308  0216                     	;# 
   309  0217                     	;# 
   310  0217                     	;# 
   311  0391                     	;# 
   312  0392                     	;# 
   313  0393                     	;# 
   314  0498                     	;# 
   315  0498                     	;# 
   316  0499                     	;# 
   317  049A                     	;# 
   318  049B                     	;# 
   319  049B                     	;# 
   320  049C                     	;# 
   321  049D                     	;# 
   322  049E                     	;# 
   323  049F                     	;# 
   324  0611                     	;# 
   325  0612                     	;# 
   326  0613                     	;# 
   327  0613                     	;# 
   328  0614                     	;# 
   329  0615                     	;# 
   330  0616                     	;# 
   331  0616                     	;# 
   332  0617                     	;# 
   333  0618                     	;# 
   334  0619                     	;# 
   335  0619                     	;# 
   336  061A                     	;# 
   337  061B                     	;# 
   338  061C                     	;# 
   339  061C                     	;# 
   340  0691                     	;# 
   341  0692                     	;# 
   342  0693                     	;# 
   343  0694                     	;# 
   344  0695                     	;# 
   345  0F0F                     	;# 
   346  0F10                     	;# 
   347  0F11                     	;# 
   348  0F12                     	;# 
   349  0F13                     	;# 
   350  0F14                     	;# 
   351  0F15                     	;# 
   352  0F16                     	;# 
   353  0F17                     	;# 
   354  0F18                     	;# 
   355  0F19                     	;# 
   356  0F1A                     	;# 
   357  0F1B                     	;# 
   358  0F1C                     	;# 
   359  0F1D                     	;# 
   360  0F1E                     	;# 
   361  0F1F                     	;# 
   362  0FE3                     	;# 
   363  0FE4                     	;# 
   364  0FE5                     	;# 
   365  0FE6                     	;# 
   366  0FE7                     	;# 
   367  0FE8                     	;# 
   368  0FE9                     	;# 
   369  0FEA                     	;# 
   370  0FEB                     	;# 
   371  0FED                     	;# 
   372  0FEE                     	;# 
   373  0FEF                     	;# 
   374  0000                     	;# 
   375  0001                     	;# 
   376  0002                     	;# 
   377  0003                     	;# 
   378  0004                     	;# 
   379  0005                     	;# 
   380  0006                     	;# 
   381  0007                     	;# 
   382  0008                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000E                     	;# 
   388  0011                     	;# 
   389  0012                     	;# 
   390  0013                     	;# 
   391  0015                     	;# 
   392  0016                     	;# 
   393  0016                     	;# 
   394  0017                     	;# 
   395  0018                     	;# 
   396  0019                     	;# 
   397  001A                     	;# 
   398  001B                     	;# 
   399  001C                     	;# 
   400  008C                     	;# 
   401  008E                     	;# 
   402  0091                     	;# 
   403  0092                     	;# 
   404  0093                     	;# 
   405  0095                     	;# 
   406  0096                     	;# 
   407  0097                     	;# 
   408  0099                     	;# 
   409  009A                     	;# 
   410  009B                     	;# 
   411  009B                     	;# 
   412  009C                     	;# 
   413  009D                     	;# 
   414  009E                     	;# 
   415  009F                     	;# 
   416  010C                     	;# 
   417  010E                     	;# 
   418  0111                     	;# 
   419  0112                     	;# 
   420  0113                     	;# 
   421  0114                     	;# 
   422  0115                     	;# 
   423  0116                     	;# 
   424  0117                     	;# 
   425  0118                     	;# 
   426  0119                     	;# 
   427  011D                     	;# 
   428  018C                     	;# 
   429  018E                     	;# 
   430  0191                     	;# 
   431  0191                     	;# 
   432  0192                     	;# 
   433  0193                     	;# 
   434  0193                     	;# 
   435  0194                     	;# 
   436  0195                     	;# 
   437  0196                     	;# 
   438  020C                     	;# 
   439  0211                     	;# 
   440  0211                     	;# 
   441  0212                     	;# 
   442  0212                     	;# 
   443  0213                     	;# 
   444  0213                     	;# 
   445  0214                     	;# 
   446  0214                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0216                     	;# 
   451  0216                     	;# 
   452  0217                     	;# 
   453  0217                     	;# 
   454  0391                     	;# 
   455  0392                     	;# 
   456  0393                     	;# 
   457  0498                     	;# 
   458  0498                     	;# 
   459  0499                     	;# 
   460  049A                     	;# 
   461  049B                     	;# 
   462  049B                     	;# 
   463  049C                     	;# 
   464  049D                     	;# 
   465  049E                     	;# 
   466  049F                     	;# 
   467  0611                     	;# 
   468  0612                     	;# 
   469  0613                     	;# 
   470  0613                     	;# 
   471  0614                     	;# 
   472  0615                     	;# 
   473  0616                     	;# 
   474  0616                     	;# 
   475  0617                     	;# 
   476  0618                     	;# 
   477  0619                     	;# 
   478  0619                     	;# 
   479  061A                     	;# 
   480  061B                     	;# 
   481  061C                     	;# 
   482  061C                     	;# 
   483  0691                     	;# 
   484  0692                     	;# 
   485  0693                     	;# 
   486  0694                     	;# 
   487  0695                     	;# 
   488  0F0F                     	;# 
   489  0F10                     	;# 
   490  0F11                     	;# 
   491  0F12                     	;# 
   492  0F13                     	;# 
   493  0F14                     	;# 
   494  0F15                     	;# 
   495  0F16                     	;# 
   496  0F17                     	;# 
   497  0F18                     	;# 
   498  0F19                     	;# 
   499  0F1A                     	;# 
   500  0F1B                     	;# 
   501  0F1C                     	;# 
   502  0F1D                     	;# 
   503  0F1E                     	;# 
   504  0F1F                     	;# 
   505  0FE3                     	;# 
   506  0FE4                     	;# 
   507  0FE5                     	;# 
   508  0FE6                     	;# 
   509  0FE7                     	;# 
   510  0FE8                     	;# 
   511  0FE9                     	;# 
   512  0FEA                     	;# 
   513  0FEB                     	;# 
   514  0FED                     	;# 
   515  0FEE                     	;# 
   516  0FEF                     	;# 
   517  0000                     	;# 
   518  0001                     	;# 
   519  0002                     	;# 
   520  0003                     	;# 
   521  0004                     	;# 
   522  0005                     	;# 
   523  0006                     	;# 
   524  0007                     	;# 
   525  0008                     	;# 
   526  0009                     	;# 
   527  000A                     	;# 
   528  000B                     	;# 
   529  000C                     	;# 
   530  000E                     	;# 
   531  0011                     	;# 
   532  0012                     	;# 
   533  0013                     	;# 
   534  0015                     	;# 
   535  0016                     	;# 
   536  0016                     	;# 
   537  0017                     	;# 
   538  0018                     	;# 
   539  0019                     	;# 
   540  001A                     	;# 
   541  001B                     	;# 
   542  001C                     	;# 
   543  008C                     	;# 
   544  008E                     	;# 
   545  0091                     	;# 
   546  0092                     	;# 
   547  0093                     	;# 
   548  0095                     	;# 
   549  0096                     	;# 
   550  0097                     	;# 
   551  0099                     	;# 
   552  009A                     	;# 
   553  009B                     	;# 
   554  009B                     	;# 
   555  009C                     	;# 
   556  009D                     	;# 
   557  009E                     	;# 
   558  009F                     	;# 
   559  010C                     	;# 
   560  010E                     	;# 
   561  0111                     	;# 
   562  0112                     	;# 
   563  0113                     	;# 
   564  0114                     	;# 
   565  0115                     	;# 
   566  0116                     	;# 
   567  0117                     	;# 
   568  0118                     	;# 
   569  0119                     	;# 
   570  011D                     	;# 
   571  018C                     	;# 
   572  018E                     	;# 
   573  0191                     	;# 
   574  0191                     	;# 
   575  0192                     	;# 
   576  0193                     	;# 
   577  0193                     	;# 
   578  0194                     	;# 
   579  0195                     	;# 
   580  0196                     	;# 
   581  020C                     	;# 
   582  0211                     	;# 
   583  0211                     	;# 
   584  0212                     	;# 
   585  0212                     	;# 
   586  0213                     	;# 
   587  0213                     	;# 
   588  0214                     	;# 
   589  0214                     	;# 
   590  0215                     	;# 
   591  0215                     	;# 
   592  0215                     	;# 
   593  0216                     	;# 
   594  0216                     	;# 
   595  0217                     	;# 
   596  0217                     	;# 
   597  0391                     	;# 
   598  0392                     	;# 
   599  0393                     	;# 
   600  0498                     	;# 
   601  0498                     	;# 
   602  0499                     	;# 
   603  049A                     	;# 
   604  049B                     	;# 
   605  049B                     	;# 
   606  049C                     	;# 
   607  049D                     	;# 
   608  049E                     	;# 
   609  049F                     	;# 
   610  0611                     	;# 
   611  0612                     	;# 
   612  0613                     	;# 
   613  0613                     	;# 
   614  0614                     	;# 
   615  0615                     	;# 
   616  0616                     	;# 
   617  0616                     	;# 
   618  0617                     	;# 
   619  0618                     	;# 
   620  0619                     	;# 
   621  0619                     	;# 
   622  061A                     	;# 
   623  061B                     	;# 
   624  061C                     	;# 
   625  061C                     	;# 
   626  0691                     	;# 
   627  0692                     	;# 
   628  0693                     	;# 
   629  0694                     	;# 
   630  0695                     	;# 
   631  0F0F                     	;# 
   632  0F10                     	;# 
   633  0F11                     	;# 
   634  0F12                     	;# 
   635  0F13                     	;# 
   636  0F14                     	;# 
   637  0F15                     	;# 
   638  0F16                     	;# 
   639  0F17                     	;# 
   640  0F18                     	;# 
   641  0F19                     	;# 
   642  0F1A                     	;# 
   643  0F1B                     	;# 
   644  0F1C                     	;# 
   645  0F1D                     	;# 
   646  0F1E                     	;# 
   647  0F1F                     	;# 
   648  0FE3                     	;# 
   649  0FE4                     	;# 
   650  0FE5                     	;# 
   651  0FE6                     	;# 
   652  0FE7                     	;# 
   653  0FE8                     	;# 
   654  0FE9                     	;# 
   655  0FEA                     	;# 
   656  0FEB                     	;# 
   657  0FED                     	;# 
   658  0FEE                     	;# 
   659  0FEF                     	;# 
   660  0000                     	;# 
   661  0001                     	;# 
   662  0002                     	;# 
   663  0003                     	;# 
   664  0004                     	;# 
   665  0005                     	;# 
   666  0006                     	;# 
   667  0007                     	;# 
   668  0008                     	;# 
   669  0009                     	;# 
   670  000A                     	;# 
   671  000B                     	;# 
   672  000C                     	;# 
   673  000E                     	;# 
   674  0011                     	;# 
   675  0012                     	;# 
   676  0013                     	;# 
   677  0015                     	;# 
   678  0016                     	;# 
   679  0016                     	;# 
   680  0017                     	;# 
   681  0018                     	;# 
   682  0019                     	;# 
   683  001A                     	;# 
   684  001B                     	;# 
   685  001C                     	;# 
   686  008C                     	;# 
   687  008E                     	;# 
   688  0091                     	;# 
   689  0092                     	;# 
   690  0093                     	;# 
   691  0095                     	;# 
   692  0096                     	;# 
   693  0097                     	;# 
   694  0099                     	;# 
   695  009A                     	;# 
   696  009B                     	;# 
   697  009B                     	;# 
   698  009C                     	;# 
   699  009D                     	;# 
   700  009E                     	;# 
   701  009F                     	;# 
   702  010C                     	;# 
   703  010E                     	;# 
   704  0111                     	;# 
   705  0112                     	;# 
   706  0113                     	;# 
   707  0114                     	;# 
   708  0115                     	;# 
   709  0116                     	;# 
   710  0117                     	;# 
   711  0118                     	;# 
   712  0119                     	;# 
   713  011D                     	;# 
   714  018C                     	;# 
   715  018E                     	;# 
   716  0191                     	;# 
   717  0191                     	;# 
   718  0192                     	;# 
   719  0193                     	;# 
   720  0193                     	;# 
   721  0194                     	;# 
   722  0195                     	;# 
   723  0196                     	;# 
   724  020C                     	;# 
   725  0211                     	;# 
   726  0211                     	;# 
   727  0212                     	;# 
   728  0212                     	;# 
   729  0213                     	;# 
   730  0213                     	;# 
   731  0214                     	;# 
   732  0214                     	;# 
   733  0215                     	;# 
   734  0215                     	;# 
   735  0215                     	;# 
   736  0216                     	;# 
   737  0216                     	;# 
   738  0217                     	;# 
   739  0217                     	;# 
   740  0391                     	;# 
   741  0392                     	;# 
   742  0393                     	;# 
   743  0498                     	;# 
   744  0498                     	;# 
   745  0499                     	;# 
   746  049A                     	;# 
   747  049B                     	;# 
   748  049B                     	;# 
   749  049C                     	;# 
   750  049D                     	;# 
   751  049E                     	;# 
   752  049F                     	;# 
   753  0611                     	;# 
   754  0612                     	;# 
   755  0613                     	;# 
   756  0613                     	;# 
   757  0614                     	;# 
   758  0615                     	;# 
   759  0616                     	;# 
   760  0616                     	;# 
   761  0617                     	;# 
   762  0618                     	;# 
   763  0619                     	;# 
   764  0619                     	;# 
   765  061A                     	;# 
   766  061B                     	;# 
   767  061C                     	;# 
   768  061C                     	;# 
   769  0691                     	;# 
   770  0692                     	;# 
   771  0693                     	;# 
   772  0694                     	;# 
   773  0695                     	;# 
   774  0F0F                     	;# 
   775  0F10                     	;# 
   776  0F11                     	;# 
   777  0F12                     	;# 
   778  0F13                     	;# 
   779  0F14                     	;# 
   780  0F15                     	;# 
   781  0F16                     	;# 
   782  0F17                     	;# 
   783  0F18                     	;# 
   784  0F19                     	;# 
   785  0F1A                     	;# 
   786  0F1B                     	;# 
   787  0F1C                     	;# 
   788  0F1D                     	;# 
   789  0F1E                     	;# 
   790  0F1F                     	;# 
   791  0FE3                     	;# 
   792  0FE4                     	;# 
   793  0FE5                     	;# 
   794  0FE6                     	;# 
   795  0FE7                     	;# 
   796  0FE8                     	;# 
   797  0FE9                     	;# 
   798  0FEA                     	;# 
   799  0FEB                     	;# 
   800  0FED                     	;# 
   801  0FEE                     	;# 
   802  0FEF                     	;# 
   803                           
   804                           	psect	idataCOMMON
   805  070B                     __pidataCOMMON:	
   806                           
   807                           ;initializer for _mode
   808  070B  340A               	retlw	10
   809                           
   810                           	psect	idataBANK0
   811  070C                     __pidataBANK0:	
   812                           
   813                           ;initializer for _nextMode
   814  070C  340A               	retlw	10
   815  07E0                     _NVMEM_absaddr	set	2016
   816                           
   817                           	psect	stringtext1
   818  06FD                     __pstringtext1:	
   819  06FD                     _n_ADDRESS_P0:	
   820  06FD  34AD               	retlw	173
   821  06FE  3487               	retlw	135
   822  06FF  3466               	retlw	102
   823  0700  34BC               	retlw	188
   824  0701  34BB               	retlw	187
   825  0702                     __end_of_n_ADDRESS_P0:	
   826                           
   827                           	psect	stringtext2
   828  070D                     __pstringtext2:	
   829  070D                     _n_ADDRESS_MUL:	
   830  070D  3421               	retlw	33
   831  070E                     __end_of_n_ADDRESS_MUL:	
   832  07E0                     _NVMEM_absaddr	set	2016
   833                           
   834                           	psect	_NVMEM_text
   835  07E0                     __p_NVMEM_text:	
   836  07E0                     _NVMEM:	
   837  07E0  3455               	retlw	85
   838  07E1  346E               	retlw	110
   839  07E2  3463               	retlw	99
   840  07E3  346F               	retlw	111
   841  07E4  346E               	retlw	110
   842  07E5  3466               	retlw	102
   843  07E6  3469               	retlw	105
   844  07E7  3467               	retlw	103
   845  07E8  3475               	retlw	117
   846  07E9  3472               	retlw	114
   847  07EA  3465               	retlw	101
   848  07EB  3464               	retlw	100
   849  07EC  3431               	retlw	49
   850  07ED  3400               	retlw	0
   851  07EE  3400               	retlw	0
   852  07EF  3400               	retlw	0
   853  07F0  3400               	retlw	0
   854  07F1  3400               	retlw	0
   855  07F2  3400               	retlw	0
   856  07F3  3400               	retlw	0
   857  07F4  3400               	retlw	0
   858  07F5  3400               	retlw	0
   859  07F6  3400               	retlw	0
   860  07F7  3400               	retlw	0
   861  07F8  3400               	retlw	0
   862  07F9  3400               	retlw	0
   863  07FA  3400               	retlw	0
   864  07FB  3400               	retlw	0
   865  07FC  3400               	retlw	0
   866  07FD  3400               	retlw	0
   867  07FE  3400               	retlw	0
   868  07FF  3400               	retlw	0
   869  0800                     __end_of_NVMEM:	
   870  0003                     _STATUSbits	set	3
   871  0011                     _PIR1bits	set	17
   872  000C                     _PORTAbits	set	12
   873  000B                     _INTCONbits	set	11
   874  0097                     _WDTCONbits	set	151
   875  0091                     _PIE1bits	set	145
   876  009E                     _ADCON1bits	set	158
   877  0095                     _OPTION_REGbits	set	149
   878  0099                     _OSCCONbits	set	153
   879  009D                     _ADCON0bits	set	157
   880  009C                     _ADRESH	set	156
   881  009B                     _ADRESL	set	155
   882  008E                     _TRISCbits	set	142
   883  008C                     _TRISAbits	set	140
   884  0117                     _FVRCONbits	set	279
   885  018E                     _ANSELCbits	set	398
   886  018C                     _ANSELAbits	set	396
   887  018E                     _ANSELC	set	398
   888  018C                     _ANSELA	set	396
   889  0194                     _PMDATH	set	404
   890  0193                     _PMDATL	set	403
   891  0196                     _PMCON2	set	406
   892  0195                     _PMCON1bits	set	405
   893  0192                     _PMADRH	set	402
   894  0191                     _PMADRL	set	401
   895  0195                     _PMCON1	set	405
   896  020C                     _WPUAbits	set	524
   897  0211                     _SSP1BUF	set	529
   898  0214                     _SSP1STATbits	set	532
   899  0215                     _SSPCON1bits	set	533
   900                           
   901                           	psect	stringtext3
   902  06DA                     __pstringtext3:	
   903  06DA                     STR_2:	
   904  06DA  342F               	retlw	47	;'/'
   905  06DB  3443               	retlw	67	;'C'
   906  06DC  344F               	retlw	79	;'O'
   907  06DD  3455               	retlw	85	;'U'
   908  06DE  344E               	retlw	78	;'N'
   909  06DF  3454               	retlw	84	;'T'
   910  06E0  342F               	retlw	47	;'/'
   911  06E1  3400               	retlw	0
   912                           
   913                           	psect	stringtext4
   914  06E2                     __pstringtext4:	
   915  06E2                     STR_1:	
   916  06E2  342F               	retlw	47	;'/'
   917  06E3  3442               	retlw	66	;'B'
   918  06E4  344F               	retlw	79	;'O'
   919  06E5  344F               	retlw	79	;'O'
   920  06E6  3454               	retlw	84	;'T'
   921  06E7  342F               	retlw	47	;'/'
   922  06E8  3400               	retlw	0
   923                           
   924                           	psect	stringtext5
   925  0702                     __pstringtext5:	
   926  0702                     STR_3:	
   927  0702  342F               	retlw	47	;'/'
   928  0703  3441               	retlw	65	;'A'
   929  0704  3444               	retlw	68	;'D'
   930  0705  3443               	retlw	67	;'C'
   931  0706  3400               	retlw	0
   932                           
   933                           	psect	stringtext6
   934  0707                     __pstringtext6:	
   935  0707                     STR_5:	
   936  0707  3441               	retlw	65	;'A'
   937  0708  3443               	retlw	67	;'C'
   938  0709  344B               	retlw	75	;'K'
   939  070A  3400               	retlw	0
   940                           
   941                           	psect	stringtext7
   942  0000                     __pstringtext7:	
   943  06E0                     
   944                           ; #config settings
   945  0000                     
   946                           	psect	cinit
   947  0043                     start_initialization:	
   948  0043                     __initialization:	
   949                           
   950                           ; Initialize objects allocated to COMMON
   951  0043  270B               	fcall	__pidataCOMMON	;fetch initializer
   952  0044  00FC               	movwf	__pdataCOMMON& (0+127)
   953                           
   954                           ; Initialize objects allocated to BANK0
   955  0045  270C               	fcall	__pidataBANK0	;fetch initializer
   956  0046  00DE               	movwf	__pdataBANK0& (0+127)
   957                           
   958                           ; Clear objects allocated to COMMON
   959  0047  01FB               	clrf	__pbssCOMMON& (0+127)
   960                           
   961                           ; Clear objects allocated to BANK0
   962  0048  3045               	movlw	low __pbssBANK0
   963  0049  0084               	movwf	4
   964  004A  3000               	movlw	high __pbssBANK0
   965  004B  0085               	movwf	5
   966  004C  3019               	movlw	25
   967  004D  26F7               	fcall	clear_ram0
   968  004E                     end_of_initialization:	
   969                           ;End of C runtime variable initialization code
   970                           
   971  004E                     __end_of__initialization:	
   972  004E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   973  004F  0020               	movlb	0
   974  0050  2A9D               	ljmp	_main	;jump to C main() function
   975                           
   976                           	psect	bssCOMMON
   977  007B                     __pbssCOMMON:	
   978  007B                     _adcLoop:	
   979  007B                     	ds	1
   980                           
   981                           	psect	dataCOMMON
   982  007C                     __pdataCOMMON:	
   983  007C                     _mode:	
   984  007C                     	ds	1
   985                           
   986                           	psect	bssBANK0
   987  0045                     __pbssBANK0:	
   988  0045                     _adcSum:	
   989  0045                     	ds	4
   990  0049                     _nrf24l01Status:	
   991  0049                     	ds	2
   992  004B                     _counter:	
   993  004B                     	ds	2
   994  004D                     _sleepLoop:	
   995  004D                     	ds	1
   996  004E                     _string:	
   997  004E                     	ds	16
   998                           
   999                           	psect	dataBANK0
  1000  005E                     __pdataBANK0:	
  1001  005E                     _nextMode:	
  1002  005E                     	ds	1
  1003                           
  1004                           	psect	clrtext
  1005  06F7                     clear_ram0:	
  1006                           ;	Called with FSR0 containing the base address, and
  1007                           ;	WREG with the size to clear
  1008                           
  1009  06F7  0064               	clrwdt	;clear the watchdog before getting into this loop
  1010  06F8                     clrloop0:	
  1011  06F8  0180               	clrf	0	;clear RAM location pointed to by FSR
  1012  06F9  3101               	addfsr 0,1
  1013  06FA  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1014  06FB  2EF8               	goto	clrloop0	;have we reached the end yet?
  1015  06FC  3400               	retlw	0	;all done for this memory range, return
  1016                           
  1017                           	psect	cstackCOMMON
  1018  0070                     __pcstackCOMMON:	
  1019  0070                     ?_nrf24l01ISR:	
  1020  0070                     ?_nrf24l01Service:	
  1021                           ; 1 bytes @ 0x0
  1022                           
  1023  0070                     ?_nrf24l01SetRecieveMode:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0070                     ?_nrf24l01Init:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0070                     ?_nrf24l01InterfaceInit:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ?_nrf24l01SPISend:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     ??_nrf24l01SPISend:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ?_nrf24l01SPIStart:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ??_nrf24l01SPIStart:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ?_nrf24l01SPIEnd:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047  0070                     ??_nrf24l01SPIEnd:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050  0070                     ?_ISR:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     ?_startADC:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0070                     ?_loop:	
  1057                           ; 1 bytes @ 0x0
  1058                           
  1059  0070                     ?_main:	
  1060                           ; 1 bytes @ 0x0
  1061                           
  1062  0070                     ?_nrf24l01SetTransmitMode:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065  0070                     ?_nrf24l01HandleRX:	
  1066                           ; 1 bytes @ 0x0
  1067                           
  1068  0070                     ?_nrf24l01IsACK:	
  1069                           ; 1 bytes @ 0x0
  1070                           
  1071  0070                     ?_nrf24l01InitRegisters:	
  1072                           ; 1 bytes @ 0x0
  1073                           
  1074  0070                     nrf24l01SPISend@data:	
  1075                           ; 1 bytes @ 0x0
  1076                           
  1077                           
  1078                           ; 1 bytes @ 0x0
  1079  0070                     	ds	1
  1080  0071                     ?_nrf24l01Send:	
  1081  0071                     nrf24l01Send@data:	
  1082                           ; 1 bytes @ 0x1
  1083                           
  1084                           
  1085                           ; 1 bytes @ 0x1
  1086  0071                     	ds	1
  1087  0072                     ??_nrf24l01Send:	
  1088                           
  1089                           ; 1 bytes @ 0x2
  1090  0072                     	ds	1
  1091  0073                     nrf24l01Send@command:	
  1092                           
  1093                           ; 1 bytes @ 0x3
  1094  0073                     	ds	1
  1095  0074                     ??_nrf24l01ISR:	
  1096                           
  1097                           ; 1 bytes @ 0x4
  1098  0074                     	ds	1
  1099  0075                     ??_ISR:	
  1100                           
  1101                           ; 1 bytes @ 0x5
  1102  0075                     	ds	4
  1103  0079                     ISR@result:	
  1104                           
  1105                           ; 2 bytes @ 0x9
  1106  0079                     	ds	2
  1107                           
  1108                           	psect	cstackBANK0
  1109  0020                     __pcstackBANK0:	
  1110  0020                     ??_nrf24l01SetRecieveMode:	
  1111  0020                     ?_write_flashmem:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114  0020                     ??_nrf24l01InterfaceInit:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0020                     ??_startADC:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0020                     ??_nrf24l01SetTransmitMode:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0020                     ??_nrf24l01InitRegisters:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0020                     ?_strlen:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0020                     ?_strcmp:	
  1130                           ; 2 bytes @ 0x0
  1131                           
  1132  0020                     ?_read_flashmem:	
  1133                           ; 2 bytes @ 0x0
  1134                           
  1135  0020                     ?___lwdiv:	
  1136                           ; 2 bytes @ 0x0
  1137                           
  1138  0020                     ?___lwmod:	
  1139                           ; 2 bytes @ 0x0
  1140                           
  1141  0020                     ?___lmul:	
  1142                           ; 2 bytes @ 0x0
  1143                           
  1144  0020                     ?___lldiv:	
  1145                           ; 4 bytes @ 0x0
  1146                           
  1147  0020                     write_flashmem@offset:	
  1148                           ; 4 bytes @ 0x0
  1149                           
  1150  0020                     read_flashmem@offset:	
  1151                           ; 2 bytes @ 0x0
  1152                           
  1153  0020                     ___lwdiv@divisor:	
  1154                           ; 2 bytes @ 0x0
  1155                           
  1156  0020                     ___lwmod@divisor:	
  1157                           ; 2 bytes @ 0x0
  1158                           
  1159  0020                     strcmp@s2:	
  1160                           ; 2 bytes @ 0x0
  1161                           
  1162  0020                     ___lmul@multiplier:	
  1163                           ; 2 bytes @ 0x0
  1164                           
  1165  0020                     ___lldiv@divisor:	
  1166                           ; 4 bytes @ 0x0
  1167                           
  1168                           
  1169                           ; 4 bytes @ 0x0
  1170  0020                     	ds	1
  1171  0021                     startADC@channel:	
  1172  0021                     nrf24l01SetTransmitMode@config:	
  1173                           ; 1 bytes @ 0x1
  1174                           
  1175  0021                     nrf24l01SetRecieveMode@config:	
  1176                           ; 1 bytes @ 0x1
  1177                           
  1178  0021                     nrf24l01InitRegisters@channel:	
  1179                           ; 1 bytes @ 0x1
  1180                           
  1181                           
  1182                           ; 1 bytes @ 0x1
  1183  0021                     	ds	1
  1184  0022                     ??_strlen:	
  1185  0022                     ??_strcmp:	
  1186                           ; 1 bytes @ 0x2
  1187                           
  1188  0022                     ??_read_flashmem:	
  1189                           ; 1 bytes @ 0x2
  1190                           
  1191  0022                     nrf24l01InitRegisters@setupAW:	
  1192                           ; 1 bytes @ 0x2
  1193                           
  1194  0022                     write_flashmem@data:	
  1195                           ; 1 bytes @ 0x2
  1196                           
  1197  0022                     ___lwdiv@dividend:	
  1198                           ; 2 bytes @ 0x2
  1199                           
  1200  0022                     ___lwmod@dividend:	
  1201                           ; 2 bytes @ 0x2
  1202                           
  1203                           
  1204                           ; 2 bytes @ 0x2
  1205  0022                     	ds	1
  1206  0023                     nrf24l01InitRegisters@feature:	
  1207  0023                     strcmp@r:	
  1208                           ; 1 bytes @ 0x3
  1209                           
  1210                           
  1211                           ; 1 bytes @ 0x3
  1212  0023                     	ds	1
  1213  0024                     ??_write_flashmem:	
  1214  0024                     ??___lwdiv:	
  1215                           ; 1 bytes @ 0x4
  1216                           
  1217  0024                     ??___lwmod:	
  1218                           ; 1 bytes @ 0x4
  1219                           
  1220  0024                     nrf24l01InitRegisters@rfSetup:	
  1221                           ; 1 bytes @ 0x4
  1222                           
  1223  0024                     strcmp@s1:	
  1224                           ; 1 bytes @ 0x4
  1225                           
  1226  0024                     write_flashmem@address:	
  1227                           ; 1 bytes @ 0x4
  1228                           
  1229  0024                     ___lmul@multiplicand:	
  1230                           ; 2 bytes @ 0x4
  1231                           
  1232  0024                     ___lldiv@dividend:	
  1233                           ; 4 bytes @ 0x4
  1234                           
  1235                           
  1236                           ; 4 bytes @ 0x4
  1237  0024                     	ds	1
  1238  0025                     ??_nrf24l01IsACK:	
  1239  0025                     nrf24l01InitRegisters@config:	
  1240                           ; 1 bytes @ 0x5
  1241                           
  1242  0025                     ___lwmod@counter:	
  1243                           ; 1 bytes @ 0x5
  1244                           
  1245  0025                     read_flashmem@result:	
  1246                           ; 1 bytes @ 0x5
  1247                           
  1248  0025                     ___lwdiv@quotient:	
  1249                           ; 2 bytes @ 0x5
  1250                           
  1251                           
  1252                           ; 2 bytes @ 0x5
  1253  0025                     	ds	1
  1254  0026                     nrf24l01InitRegisters@status:	
  1255  0026                     strlen@cp:	
  1256                           ; 1 bytes @ 0x6
  1257                           
  1258                           
  1259                           ; 1 bytes @ 0x6
  1260  0026                     	ds	1
  1261  0027                     nrf24l01InitRegisters@enRXAddr:	
  1262  0027                     ___lwdiv@counter:	
  1263                           ; 1 bytes @ 0x7
  1264                           
  1265  0027                     strlen@s:	
  1266                           ; 1 bytes @ 0x7
  1267                           
  1268  0027                     read_flashmem@address:	
  1269                           ; 1 bytes @ 0x7
  1270                           
  1271                           
  1272                           ; 2 bytes @ 0x7
  1273  0027                     	ds	1
  1274  0028                     ?_strcpy:	
  1275  0028                     ?_utoa:	
  1276                           ; 1 bytes @ 0x8
  1277                           
  1278  0028                     ??___lmul:	
  1279                           ; 1 bytes @ 0x8
  1280                           
  1281  0028                     ??___lldiv:	
  1282                           ; 1 bytes @ 0x8
  1283                           
  1284  0028                     nrf24l01InitRegisters@enAA:	
  1285                           ; 1 bytes @ 0x8
  1286                           
  1287  0028                     utoa@val:	
  1288                           ; 1 bytes @ 0x8
  1289                           
  1290  0028                     strcpy@from:	
  1291                           ; 2 bytes @ 0x8
  1292                           
  1293  0028                     ___lmul@product:	
  1294                           ; 2 bytes @ 0x8
  1295                           
  1296                           
  1297                           ; 4 bytes @ 0x8
  1298  0028                     	ds	1
  1299  0029                     ?_nrf24l01SendString:	
  1300  0029                     ??_nrf24l01HandleRX:	
  1301                           ; 1 bytes @ 0x9
  1302                           
  1303  0029                     nrf24l01SendString@waitForAck:	
  1304                           ; 1 bytes @ 0x9
  1305                           
  1306  0029                     nrf24l01InitRegisters@DynPD:	
  1307                           ; 1 bytes @ 0x9
  1308                           
  1309  0029                     ___lldiv@quotient:	
  1310                           ; 1 bytes @ 0x9
  1311                           
  1312                           
  1313                           ; 4 bytes @ 0x9
  1314  0029                     	ds	1
  1315  002A                     ??_strcpy:	
  1316  002A                     ??_nrf24l01SendString:	
  1317                           ; 1 bytes @ 0xA
  1318                           
  1319  002A                     ??_nrf24l01Init:	
  1320                           ; 1 bytes @ 0xA
  1321                           
  1322  002A                     utoa@base:	
  1323                           ; 1 bytes @ 0xA
  1324                           
  1325                           
  1326                           ; 2 bytes @ 0xA
  1327  002A                     	ds	1
  1328  002B                     strcpy@cp:	
  1329                           
  1330                           ; 1 bytes @ 0xB
  1331  002B                     	ds	1
  1332  002C                     ??_utoa:	
  1333  002C                     strcpy@to:	
  1334                           ; 1 bytes @ 0xC
  1335                           
  1336                           
  1337                           ; 1 bytes @ 0xC
  1338  002C                     	ds	1
  1339  002D                     nrf24l01HandleRX@width:	
  1340  002D                     nrf24l01SendString@btye:	
  1341                           ; 1 bytes @ 0xD
  1342                           
  1343  002D                     ___lldiv@counter:	
  1344                           ; 1 bytes @ 0xD
  1345                           
  1346  002D                     utoa@v:	
  1347                           ; 1 bytes @ 0xD
  1348                           
  1349                           
  1350                           ; 2 bytes @ 0xD
  1351  002D                     	ds	1
  1352  002E                     nrf24l01HandleRX@byte:	
  1353  002E                     nrf24l01SendString@string:	
  1354                           ; 1 bytes @ 0xE
  1355                           
  1356                           
  1357                           ; 1 bytes @ 0xE
  1358  002E                     	ds	1
  1359  002F                     nrf24l01HandleRX@i:	
  1360  002F                     nrf24l01SendString@i:	
  1361                           ; 1 bytes @ 0xF
  1362                           
  1363  002F                     utoa@c:	
  1364                           ; 1 bytes @ 0xF
  1365                           
  1366                           
  1367                           ; 1 bytes @ 0xF
  1368  002F                     	ds	1
  1369  0030                     ??_nrf24l01Service:	
  1370  0030                     utoa@buf:	
  1371                           ; 1 bytes @ 0x10
  1372                           
  1373                           
  1374                           ; 1 bytes @ 0x10
  1375  0030                     	ds	1
  1376  0031                     ?_itoa:	
  1377  0031                     itoa@val:	
  1378                           ; 1 bytes @ 0x11
  1379                           
  1380                           
  1381                           ; 2 bytes @ 0x11
  1382  0031                     	ds	2
  1383  0033                     itoa@base:	
  1384                           
  1385                           ; 2 bytes @ 0x13
  1386  0033                     	ds	2
  1387  0035                     ??_itoa:	
  1388                           
  1389                           ; 1 bytes @ 0x15
  1390  0035                     	ds	1
  1391  0036                     itoa@cp:	
  1392                           
  1393                           ; 1 bytes @ 0x16
  1394  0036                     	ds	1
  1395  0037                     itoa@buf:	
  1396                           
  1397                           ; 1 bytes @ 0x17
  1398  0037                     	ds	1
  1399  0038                     ?__itoa:	
  1400  0038                     __itoa@number:	
  1401                           ; 1 bytes @ 0x18
  1402                           
  1403                           
  1404                           ; 2 bytes @ 0x18
  1405  0038                     	ds	2
  1406  003A                     __itoa@base:	
  1407                           
  1408                           ; 1 bytes @ 0x1A
  1409  003A                     	ds	1
  1410  003B                     ??__itoa:	
  1411                           
  1412                           ; 1 bytes @ 0x1B
  1413  003B                     	ds	2
  1414  003D                     __itoa@buffer:	
  1415                           
  1416                           ; 1 bytes @ 0x1D
  1417  003D                     	ds	1
  1418  003E                     ??_loop:	
  1419                           
  1420                           ; 1 bytes @ 0x1E
  1421  003E                     	ds	4
  1422  0042                     ??_main:	
  1423                           
  1424                           ; 1 bytes @ 0x22
  1425  0042                     	ds	1
  1426  0043                     main@bootCount:	
  1427                           
  1428                           ; 2 bytes @ 0x23
  1429  0043                     	ds	2
  1430                           
  1431                           	psect	maintext
  1432  029D                     __pmaintext:	
  1433 ;;
  1434 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1435 ;;
  1436 ;; *************** function _main *****************
  1437 ;; Defined at:
  1438 ;;		line 210 in file "main.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;  bootCount       2   35[BANK0 ] unsigned int 
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1447 ;; Tracked objects:
  1448 ;;		On entry : B1F/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMMON   BANK0   BANK1
  1452 ;;      Params:         0       0       0
  1453 ;;      Locals:         0       2       0
  1454 ;;      Temps:          0       1       0
  1455 ;;      Totals:         0       3       0
  1456 ;;Total ram usage:        3 bytes
  1457 ;; Hardware stack levels required when called:    9
  1458 ;; This function calls:
  1459 ;;		_loop
  1460 ;;		_nrf24l01Init
  1461 ;;		_read_flashmem
  1462 ;;		_write_flashmem
  1463 ;; This function is called by:
  1464 ;;		Startup code after reset
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468                           
  1469                           ;psect for function _main
  1470  029D                     _main:	
  1471                           
  1472                           ;main.c: 213: ANSELA = 0x00;
  1473                           
  1474                           ;incstack = 0
  1475                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1476  029D  0023               	movlb	3	; select bank3
  1477  029E  018C               	clrf	12	;volatile
  1478                           
  1479                           ;main.c: 214: ANSELC = 0x00;
  1480  029F  018E               	clrf	14	;volatile
  1481                           
  1482                           ;main.c: 220: INTCONbits.PEIE = 0;
  1483  02A0  130B               	bcf	11,6	;volatile
  1484                           
  1485                           ;main.c: 221: INTCONbits.GIE = 0;
  1486  02A1  138B               	bcf	11,7	;volatile
  1487                           
  1488                           ;main.c: 223: OSCCONbits.IRCF = 0b1111;
  1489  02A2  3078               	movlw	120
  1490  02A3  0021               	movlb	1	; select bank1
  1491  02A4  0499               	iorwf	25,f	;volatile
  1492                           
  1493                           ;main.c: 224: OSCCONbits.SCS = 0b10;
  1494  02A5  0819               	movf	25,w	;volatile
  1495  02A6  39FC               	andlw	-4
  1496  02A7  3802               	iorlw	2
  1497  02A8  0099               	movwf	25	;volatile
  1498                           
  1499                           ;main.c: 226: _delay((unsigned long)((10)*(16000000/4000.0)));
  1500  02A9  3034               	movlw	52
  1501  02AA  0020               	movlb	0	; select bank0
  1502  02AB  00C2               	movwf	??_main
  1503  02AC  30F1               	movlw	241
  1504  02AD                     u1317:	
  1505  02AD  0B89               	decfsz	9,f
  1506  02AE  2AAD               	goto	u1317
  1507  02AF  0BC2               	decfsz	??_main,f
  1508  02B0  2AAD               	goto	u1317
  1509  02B1  3200               	nop2
  1510                           
  1511                           ;main.c: 228: nrf24l01Init();
  1512  02B2  2674               	fcall	_nrf24l01Init
  1513                           
  1514                           ;main.c: 230: OPTION_REGbits.nWPUEN = 0;
  1515  02B3  0021               	movlb	1	; select bank1
  1516  02B4  1395               	bcf	21,7	;volatile
  1517                           
  1518                           ;main.c: 233: FVRCONbits.FVREN = 0;
  1519  02B5  0022               	movlb	2	; select bank2
  1520  02B6  1397               	bcf	23,7	;volatile
  1521                           
  1522                           ;main.c: 234: FVRCONbits.ADFVR = 1;
  1523  02B7  0817               	movf	23,w	;volatile
  1524  02B8  39FC               	andlw	-4
  1525  02B9  3801               	iorlw	1
  1526  02BA  0097               	movwf	23	;volatile
  1527                           
  1528                           ;main.c: 235: FVRCONbits.FVREN = 1;
  1529  02BB  1797               	bsf	23,7	;volatile
  1530                           
  1531                           ;main.c: 238: FVRCONbits.TSEN = 0;
  1532  02BC  1297               	bcf	23,5	;volatile
  1533                           
  1534                           ;main.c: 239: FVRCONbits.TSRNG = 0;
  1535  02BD  1217               	bcf	23,4	;volatile
  1536                           
  1537                           ;main.c: 240: FVRCONbits.TSEN = 1;
  1538  02BE  1697               	bsf	23,5	;volatile
  1539                           
  1540                           ;main.c: 243: ADCON0bits.ADON = 0;
  1541  02BF  0021               	movlb	1	; select bank1
  1542  02C0  101D               	bcf	29,0	;volatile
  1543                           
  1544                           ;main.c: 245: ANSELAbits.ANSA4 = 1;
  1545  02C1  0023               	movlb	3	; select bank3
  1546  02C2  160C               	bsf	12,4	;volatile
  1547                           
  1548                           ;main.c: 246: TRISAbits.TRISA4 = 1;
  1549  02C3  0021               	movlb	1	; select bank1
  1550  02C4  160C               	bsf	12,4	;volatile
  1551                           
  1552                           ;main.c: 247: WPUAbits.WPUA4 = 0;
  1553  02C5  0024               	movlb	4	; select bank4
  1554  02C6  120C               	bcf	12,4	;volatile
  1555                           
  1556                           ;main.c: 249: ANSELCbits.ANSC3 = 1;
  1557  02C7  0023               	movlb	3	; select bank3
  1558  02C8  158E               	bsf	14,3	;volatile
  1559                           
  1560                           ;main.c: 250: TRISCbits.TRISC3 = 1;
  1561  02C9  0021               	movlb	1	; select bank1
  1562  02CA  158E               	bsf	14,3	;volatile
  1563                           
  1564                           ;main.c: 252: ADCON1bits.ADCS = 0b111;
  1565  02CB  3070               	movlw	112
  1566  02CC  049E               	iorwf	30,f	;volatile
  1567                           
  1568                           ;main.c: 253: ADCON1bits.ADFM = 1;
  1569  02CD  179E               	bsf	30,7	;volatile
  1570                           
  1571                           ;main.c: 254: ADCON1bits.ADPREF = 0b00;
  1572  02CE  30FC               	movlw	-4
  1573  02CF  059E               	andwf	30,f	;volatile
  1574                           
  1575                           ;main.c: 256: PIE1bits.ADIE = 1;
  1576  02D0  1711               	bsf	17,6	;volatile
  1577                           
  1578                           ;main.c: 258: ADCON0bits.CHS = 3;
  1579  02D1  081D               	movf	29,w	;volatile
  1580  02D2  3983               	andlw	-125
  1581  02D3  380C               	iorlw	12
  1582  02D4  009D               	movwf	29	;volatile
  1583                           
  1584                           ;main.c: 259: ADCON0bits.ADON = 1;
  1585  02D5  141D               	bsf	29,0	;volatile
  1586                           
  1587                           ;main.c: 263: TRISAbits.TRISA2 = 1;
  1588  02D6  150C               	bsf	12,2	;volatile
  1589                           
  1590                           ;main.c: 264: INTCONbits.INTE = 1;
  1591  02D7  160B               	bsf	11,4	;volatile
  1592                           
  1593                           ;main.c: 265: OPTION_REGbits.INTEDG = 0;
  1594  02D8  1315               	bcf	21,6	;volatile
  1595                           
  1596                           ;main.c: 269: WDTCONbits.WDTPS = 12;
  1597  02D9  0817               	movf	23,w	;volatile
  1598  02DA  39C1               	andlw	-63
  1599  02DB  3818               	iorlw	24
  1600  02DC  0097               	movwf	23	;volatile
  1601                           
  1602                           ;main.c: 274: TRISAbits.TRISA5 = 0;
  1603  02DD  128C               	bcf	12,5	;volatile
  1604                           
  1605                           ;main.c: 275: PORTAbits.RA5 = 0;
  1606  02DE  0020               	movlb	0	; select bank0
  1607  02DF  128C               	bcf	12,5	;volatile
  1608                           
  1609                           ;main.c: 280: INTCONbits.PEIE = 1;
  1610  02E0  170B               	bsf	11,6	;volatile
  1611                           
  1612                           ;main.c: 281: INTCONbits.GIE = 1;
  1613  02E1  178B               	bsf	11,7	;volatile
  1614                           
  1615                           ;main.c: 283: unsigned int bootCount = read_flashmem(16);
  1616  02E2  3010               	movlw	16
  1617  02E3  00A0               	movwf	read_flashmem@offset
  1618  02E4  3000               	movlw	0
  1619  02E5  00A1               	movwf	read_flashmem@offset+1
  1620  02E6  24F2               	fcall	_read_flashmem
  1621  02E7  0020               	movlb	0	; select bank0
  1622  02E8  0821               	movf	?_read_flashmem+1,w
  1623  02E9  00C4               	movwf	main@bootCount+1
  1624  02EA  0820               	movf	?_read_flashmem,w
  1625  02EB  00C3               	movwf	main@bootCount
  1626                           
  1627                           ;main.c: 284: if (bootCount == 13313){
  1628  02EC  0343               	decf	main@bootCount,w
  1629  02ED  3034               	movlw	52
  1630  02EE  1903               	skipnz
  1631  02EF  0644               	xorwf	main@bootCount+1,w
  1632  02F0  1D03               	btfss	3,2
  1633  02F1  2AF6               	goto	l194
  1634                           
  1635                           ;main.c: 285: bootCount = 1;
  1636  02F2  3001               	movlw	1
  1637  02F3  00C3               	movwf	main@bootCount
  1638  02F4  3000               	movlw	0
  1639  02F5  00C4               	movwf	main@bootCount+1
  1640  02F6                     l194:	
  1641                           
  1642                           ;main.c: 286: }
  1643                           ;main.c: 287: bootCount++;
  1644  02F6  3001               	movlw	1
  1645  02F7  07C3               	addwf	main@bootCount,f
  1646  02F8  3000               	movlw	0
  1647  02F9  3DC4               	addwfc	main@bootCount+1,f
  1648                           
  1649                           ;main.c: 288: write_flashmem(16, bootCount);
  1650  02FA  3010               	movlw	16
  1651  02FB  00A0               	movwf	write_flashmem@offset
  1652  02FC  3000               	movlw	0
  1653  02FD  00A1               	movwf	write_flashmem@offset+1
  1654  02FE  0844               	movf	main@bootCount+1,w
  1655  02FF  00A3               	movwf	write_flashmem@data+1
  1656  0300  0843               	movf	main@bootCount,w
  1657  0301  00A2               	movwf	write_flashmem@data
  1658  0302  2446               	fcall	_write_flashmem
  1659  0303                     l2172:	
  1660                           ;main.c: 290: while(1){
  1661                           
  1662                           
  1663                           ;main.c: 291: loop();
  1664  0303  2051               	fcall	_loop
  1665  0304  2B03               	goto	l2172
  1666  0305                     __end_of_main:	
  1667                           ;main.c: 292: }
  1668                           ;main.c: 294: return;
  1669                           
  1670                           
  1671                           	psect	text1
  1672  0446                     __ptext1:	
  1673 ;; *************** function _write_flashmem *****************
  1674 ;; Defined at:
  1675 ;;		line 4 in file "flash.c"
  1676 ;; Parameters:    Size  Location     Type
  1677 ;;  offset          2    0[BANK0 ] unsigned int 
  1678 ;;  data            2    2[BANK0 ] unsigned int 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  address         2    4[BANK0 ] unsigned int 
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, status,2, status,0
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMMON   BANK0   BANK1
  1690 ;;      Params:         0       4       0
  1691 ;;      Locals:         0       2       0
  1692 ;;      Temps:          0       0       0
  1693 ;;      Totals:         0       6       0
  1694 ;;Total ram usage:        6 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    4
  1697 ;; This function calls:
  1698 ;;		Nothing
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           
  1705                           ;psect for function _write_flashmem
  1706  0446                     _write_flashmem:	
  1707                           
  1708                           ;flash.c: 6: unsigned int address;
  1709                           ;flash.c: 8: INTCONbits.GIE = 0;
  1710                           
  1711                           ;incstack = 0
  1712                           ; Regs used in _write_flashmem: [wreg+status,2+status,0]
  1713  0446  138B               	bcf	11,7	;volatile
  1714                           
  1715                           ;flash.c: 11: PMCON1 = 0x00;
  1716  0447  0023               	movlb	3	; select bank3
  1717  0448  0195               	clrf	21	;volatile
  1718                           
  1719                           ;flash.c: 13: address = (0x800U-32) + offset;
  1720  0449  0020               	movlb	0	; select bank0
  1721  044A  0820               	movf	write_flashmem@offset,w
  1722  044B  3EE0               	addlw	224
  1723  044C  00A4               	movwf	write_flashmem@address
  1724  044D  3007               	movlw	7
  1725  044E  3D21               	addwfc	write_flashmem@offset+1,w
  1726  044F  00A5               	movwf	write_flashmem@address+1
  1727                           
  1728                           ;flash.c: 14: PMADRL = (char) (address >> 0);
  1729  0450  0824               	movf	write_flashmem@address,w
  1730  0451  0023               	movlb	3	; select bank3
  1731  0452  0091               	movwf	17	;volatile
  1732                           
  1733                           ;flash.c: 15: PMADRH = (char) (address >> 8);
  1734  0453  0020               	movlb	0	; select bank0
  1735  0454  0825               	movf	write_flashmem@address+1,w
  1736  0455  0023               	movlb	3	; select bank3
  1737  0456  0092               	movwf	18	;volatile
  1738                           
  1739                           ;flash.c: 17: PMCON1bits.FREE = 1;
  1740  0457  1615               	bsf	21,4	;volatile
  1741                           
  1742                           ;flash.c: 18: PMCON1bits.WREN = 1;
  1743  0458  1515               	bsf	21,2	;volatile
  1744                           
  1745                           ;flash.c: 20: PMCON2 = 0x55;
  1746  0459  3055               	movlw	85
  1747  045A  0096               	movwf	22	;volsfr
  1748                           
  1749                           ;flash.c: 21: PMCON2 = 0xAA;
  1750  045B  30AA               	movlw	170
  1751  045C  0096               	movwf	22	;volsfr
  1752                           
  1753                           ;flash.c: 23: PMCON1bits.WR = 1;
  1754  045D  1495               	bsf	21,1	;volatile
  1755                           
  1756                           ;flash.c: 25: __nop();
  1757  045E  0000               	nop
  1758                           
  1759                           ;flash.c: 26: __nop();
  1760  045F  0000               	nop
  1761                           
  1762                           ;flash.c: 28: PMCON1bits.WREN = 0;
  1763  0460  0023               	movlb	3	; select bank3
  1764  0461  1115               	bcf	21,2	;volatile
  1765                           
  1766                           ;flash.c: 32: PMCON1 = 0x00;
  1767  0462  0195               	clrf	21	;volatile
  1768                           
  1769                           ;flash.c: 34: PMADRL = (char) (address >> 0);
  1770  0463  0020               	movlb	0	; select bank0
  1771  0464  0824               	movf	write_flashmem@address,w
  1772  0465  0023               	movlb	3	; select bank3
  1773  0466  0091               	movwf	17	;volatile
  1774                           
  1775                           ;flash.c: 35: PMADRH = (char) (address >> 8);
  1776  0467  0020               	movlb	0	; select bank0
  1777  0468  0825               	movf	write_flashmem@address+1,w
  1778  0469  0023               	movlb	3	; select bank3
  1779  046A  0092               	movwf	18	;volatile
  1780                           
  1781                           ;flash.c: 37: PMCON1bits.FREE = 0;
  1782  046B  1215               	bcf	21,4	;volatile
  1783                           
  1784                           ;flash.c: 38: PMCON1bits.LWLO = 1;
  1785  046C  1695               	bsf	21,5	;volatile
  1786                           
  1787                           ;flash.c: 39: PMCON1bits.WREN = 1;
  1788  046D  1515               	bsf	21,2	;volatile
  1789                           
  1790                           ;flash.c: 41: PMDATL = (data >> 0);
  1791  046E  0020               	movlb	0	; select bank0
  1792  046F  0822               	movf	write_flashmem@data,w
  1793  0470  0023               	movlb	3	; select bank3
  1794  0471  0093               	movwf	19	;volatile
  1795                           
  1796                           ;flash.c: 42: PMDATH = (data >> 8);
  1797  0472  0020               	movlb	0	; select bank0
  1798  0473  0823               	movf	write_flashmem@data+1,w
  1799  0474  0023               	movlb	3	; select bank3
  1800  0475  0094               	movwf	20	;volatile
  1801                           
  1802                           ;flash.c: 44: PMCON1bits.LWLO = 0;
  1803  0476  1295               	bcf	21,5	;volatile
  1804                           
  1805                           ;flash.c: 46: PMCON2 = 0x55;
  1806  0477  3055               	movlw	85
  1807  0478  0096               	movwf	22	;volsfr
  1808                           
  1809                           ;flash.c: 47: PMCON2 = 0xAA;
  1810  0479  30AA               	movlw	170
  1811  047A  0096               	movwf	22	;volsfr
  1812                           
  1813                           ;flash.c: 49: PMCON1bits.WR = 1;
  1814  047B  1495               	bsf	21,1	;volatile
  1815                           
  1816                           ;flash.c: 51: __nop();
  1817  047C  0000               	nop
  1818                           
  1819                           ;flash.c: 52: __nop();
  1820  047D  0000               	nop
  1821                           
  1822                           ;flash.c: 54: PMCON1bits.WREN = 0;
  1823  047E  0023               	movlb	3	; select bank3
  1824  047F  1115               	bcf	21,2	;volatile
  1825                           
  1826                           ;flash.c: 57: INTCONbits.GIE = 1;
  1827  0480  178B               	bsf	11,7	;volatile
  1828  0481  0008               	return
  1829  0482                     __end_of_write_flashmem:	
  1830                           
  1831                           	psect	text2
  1832  0674                     __ptext2:	
  1833 ;; *************** function _nrf24l01Init *****************
  1834 ;; Defined at:
  1835 ;;		line 286 in file "nrf24l01.c"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;		None
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;		None
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  1    wreg      void 
  1842 ;; Registers used:
  1843 ;;		wreg, status,2, status,0, pclath, cstack
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMMON   BANK0   BANK1
  1849 ;;      Params:         0       0       0
  1850 ;;      Locals:         0       0       0
  1851 ;;      Temps:          0       1       0
  1852 ;;      Totals:         0       1       0
  1853 ;;Total ram usage:        1 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; Hardware stack levels required when called:    7
  1856 ;; This function calls:
  1857 ;;		_nrf24l01InitRegisters
  1858 ;;		_nrf24l01InterfaceInit
  1859 ;; This function is called by:
  1860 ;;		_main
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           
  1865                           ;psect for function _nrf24l01Init
  1866  0674                     _nrf24l01Init:	
  1867                           
  1868                           ;nrf24l01.c: 289: nrf24l01InterfaceInit();
  1869                           
  1870                           ;incstack = 0
  1871                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1872  0674  26AA               	fcall	_nrf24l01InterfaceInit
  1873                           
  1874                           ;nrf24l01.c: 293: PORTAbits.RA0 = 0;
  1875  0675  0020               	movlb	0	; select bank0
  1876  0676  100C               	bcf	12,0	;volatile
  1877                           
  1878                           ;nrf24l01.c: 295: _delay((unsigned long)((11)*(16000000/4000.0)));
  1879  0677  303A               	movlw	58
  1880  0678  0020               	movlb	0	; select bank0
  1881  0679  00AA               	movwf	??_nrf24l01Init
  1882  067A  3023               	movlw	35
  1883  067B                     u1327:	
  1884  067B  0B89               	decfsz	9,f
  1885  067C  2E7B               	goto	u1327
  1886  067D  0BAA               	decfsz	??_nrf24l01Init,f
  1887  067E  2E7B               	goto	u1327
  1888                           
  1889                           ;nrf24l01.c: 297: nrf24l01InitRegisters();
  1890  067F  2213               	fcall	_nrf24l01InitRegisters
  1891                           
  1892                           ;nrf24l01.c: 299: _delay((unsigned long)((2)*(16000000/4000.0)));
  1893  0680  300B               	movlw	11
  1894  0681  0020               	movlb	0	; select bank0
  1895  0682  00AA               	movwf	??_nrf24l01Init
  1896  0683  3062               	movlw	98
  1897  0684                     u1337:	
  1898  0684  0B89               	decfsz	9,f
  1899  0685  2E84               	goto	u1337
  1900  0686  0BAA               	decfsz	??_nrf24l01Init,f
  1901  0687  2E84               	goto	u1337
  1902  0688  0000               	nop
  1903  0689  0008               	return
  1904  068A                     __end_of_nrf24l01Init:	
  1905                           
  1906                           	psect	text3
  1907  06AA                     __ptext3:	
  1908 ;; *************** function _nrf24l01InterfaceInit *****************
  1909 ;; Defined at:
  1910 ;;		line 9 in file "interface.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;		None
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  1    wreg      void 
  1917 ;; Registers used:
  1918 ;;		wreg, status,2, status,0
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMMON   BANK0   BANK1
  1924 ;;      Params:         0       0       0
  1925 ;;      Locals:         0       0       0
  1926 ;;      Temps:          0       0       0
  1927 ;;      Totals:         0       0       0
  1928 ;;Total ram usage:        0 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:    4
  1931 ;; This function calls:
  1932 ;;		Nothing
  1933 ;; This function is called by:
  1934 ;;		_nrf24l01Init
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           
  1939                           ;psect for function _nrf24l01InterfaceInit
  1940  06AA                     _nrf24l01InterfaceInit:	
  1941                           
  1942                           ;interface.c: 11: TRISAbits.TRISA0 = 0;
  1943                           
  1944                           ;incstack = 0
  1945                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  1946  06AA  0021               	movlb	1	; select bank1
  1947  06AB  100C               	bcf	12,0	;volatile
  1948                           
  1949                           ;interface.c: 12: TRISAbits.TRISA1 = 0;
  1950  06AC  108C               	bcf	12,1	;volatile
  1951                           
  1952                           ;interface.c: 14: TRISCbits.TRISC1 = 1;
  1953  06AD  148E               	bsf	14,1	;volatile
  1954                           
  1955                           ;interface.c: 15: TRISCbits.TRISC2 = 0;
  1956  06AE  110E               	bcf	14,2	;volatile
  1957                           
  1958                           ;interface.c: 16: TRISCbits.TRISC0 = 0;
  1959  06AF  100E               	bcf	14,0	;volatile
  1960                           
  1961                           ;interface.c: 18: SSPCON1bits.SSPEN = 0;
  1962  06B0  0024               	movlb	4	; select bank4
  1963  06B1  1295               	bcf	21,5	;volatile
  1964                           
  1965                           ;interface.c: 19: SSPCON1bits.CKP = 0;
  1966  06B2  1215               	bcf	21,4	;volatile
  1967                           
  1968                           ;interface.c: 20: SSP1STATbits.CKE = 1;
  1969  06B3  1714               	bsf	20,6	;volatile
  1970                           
  1971                           ;interface.c: 21: SSPCON1bits.SSPM = 0b0000;
  1972  06B4  30F0               	movlw	-16
  1973  06B5  0595               	andwf	21,f	;volatile
  1974                           
  1975                           ;interface.c: 23: SSPCON1bits.SSPEN = 1;
  1976  06B6  1695               	bsf	21,5	;volatile
  1977  06B7  0008               	return
  1978  06B8                     __end_of_nrf24l01InterfaceInit:	
  1979                           
  1980                           	psect	text4
  1981  0213                     __ptext4:	
  1982 ;; *************** function _nrf24l01InitRegisters *****************
  1983 ;; Defined at:
  1984 ;;		line 198 in file "nrf24l01.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;		None
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;  DynPD           1    9[BANK0 ] struct .
  1989 ;;  enAA            1    8[BANK0 ] struct .
  1990 ;;  enRXAddr        1    7[BANK0 ] struct .
  1991 ;;  status          1    6[BANK0 ] struct .
  1992 ;;  config          1    5[BANK0 ] struct .
  1993 ;;  rfSetup         1    4[BANK0 ] struct .
  1994 ;;  feature         1    3[BANK0 ] struct .
  1995 ;;  setupAW         1    2[BANK0 ] struct .
  1996 ;;  channel         1    1[BANK0 ] struct .
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  1    wreg      void 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2, status,0, pclath, cstack
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMMON   BANK0   BANK1
  2006 ;;      Params:         0       0       0
  2007 ;;      Locals:         0       9       0
  2008 ;;      Temps:          0       1       0
  2009 ;;      Totals:         0      10       0
  2010 ;;Total ram usage:       10 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    6
  2013 ;; This function calls:
  2014 ;;		_nrf24l01Send
  2015 ;; This function is called by:
  2016 ;;		_nrf24l01Init
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           
  2021                           ;psect for function _nrf24l01InitRegisters
  2022  0213                     _nrf24l01InitRegisters:	
  2023                           
  2024                           ;nrf24l01.c: 200: nrf24l01Send(0b00100000 | 0x00, 0x00);
  2025                           
  2026                           ;incstack = 0
  2027                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  2028  0213  01F1               	clrf	nrf24l01Send@data
  2029  0214  3020               	movlw	32
  2030  0215  26B8               	fcall	_nrf24l01Send
  2031                           
  2032                           ;nrf24l01.c: 202: _delay((unsigned long)((10)*(16000000/4000.0)));
  2033  0216  3034               	movlw	52
  2034  0217  0020               	movlb	0	; select bank0
  2035  0218  00A0               	movwf	??_nrf24l01InitRegisters
  2036  0219  30F1               	movlw	241
  2037  021A                     u1347:	
  2038  021A  0B89               	decfsz	9,f
  2039  021B  2A1A               	goto	u1347
  2040  021C  0BA0               	decfsz	??_nrf24l01InitRegisters,f
  2041  021D  2A1A               	goto	u1347
  2042  021E  3200               	nop2
  2043                           
  2044                           ;nrf24l01.c: 204: n_SETUP_AW_t setupAW;
  2045                           ;nrf24l01.c: 205: setupAW.byte = 0x00;
  2046  021F  0020               	movlb	0	; select bank0
  2047  0220  01A2               	clrf	nrf24l01InitRegisters@setupAW
  2048                           
  2049                           ;nrf24l01.c: 206: setupAW.AW = 3;
  2050  0221  3003               	movlw	3
  2051  0222  04A2               	iorwf	nrf24l01InitRegisters@setupAW,f
  2052                           
  2053                           ;nrf24l01.c: 207: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  2054  0223  0822               	movf	nrf24l01InitRegisters@setupAW,w
  2055  0224  00A0               	movwf	??_nrf24l01InitRegisters
  2056  0225  0820               	movf	??_nrf24l01InitRegisters,w
  2057  0226  00F1               	movwf	nrf24l01Send@data
  2058  0227  3022               	movlw	34
  2059  0228  26B8               	fcall	_nrf24l01Send
  2060                           
  2061                           ;nrf24l01.c: 216: n_RF_CH_t channel;
  2062                           ;nrf24l01.c: 217: channel.RF_CH = 83;
  2063  0229  0020               	movlb	0	; select bank0
  2064  022A  0821               	movf	nrf24l01InitRegisters@channel,w
  2065  022B  3980               	andlw	-128
  2066  022C  3853               	iorlw	83
  2067  022D  00A1               	movwf	nrf24l01InitRegisters@channel
  2068                           
  2069                           ;nrf24l01.c: 218: nrf24l01Send(0b00100000 | 0x05, channel.byte);
  2070  022E  0821               	movf	nrf24l01InitRegisters@channel,w
  2071  022F  00A0               	movwf	??_nrf24l01InitRegisters
  2072  0230  0820               	movf	??_nrf24l01InitRegisters,w
  2073  0231  00F1               	movwf	nrf24l01Send@data
  2074  0232  3025               	movlw	37
  2075  0233  26B8               	fcall	_nrf24l01Send
  2076                           
  2077                           ;nrf24l01.c: 221: n_RF_SETUP_t rfSetup;
  2078                           ;nrf24l01.c: 222: rfSetup.RF_DR_LOW = 0;
  2079  0234  0020               	movlb	0	; select bank0
  2080  0235  12A4               	bcf	nrf24l01InitRegisters@rfSetup,5
  2081                           
  2082                           ;nrf24l01.c: 223: rfSetup.RF_DR_HIGH = 1;
  2083  0236  15A4               	bsf	nrf24l01InitRegisters@rfSetup,3
  2084                           
  2085                           ;nrf24l01.c: 224: rfSetup.RF_PWR = 3;
  2086  0237  3006               	movlw	6
  2087  0238  04A4               	iorwf	nrf24l01InitRegisters@rfSetup,f
  2088                           
  2089                           ;nrf24l01.c: 225: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  2090  0239  0824               	movf	nrf24l01InitRegisters@rfSetup,w
  2091  023A  00A0               	movwf	??_nrf24l01InitRegisters
  2092  023B  0820               	movf	??_nrf24l01InitRegisters,w
  2093  023C  00F1               	movwf	nrf24l01Send@data
  2094  023D  3026               	movlw	38
  2095  023E  26B8               	fcall	_nrf24l01Send
  2096                           
  2097                           ;nrf24l01.c: 228: n_CONFIG_t config;
  2098                           ;nrf24l01.c: 229: config.PRIM_RX = 1;
  2099  023F  0020               	movlb	0	; select bank0
  2100  0240  1425               	bsf	nrf24l01InitRegisters@config,0
  2101                           
  2102                           ;nrf24l01.c: 230: config.EN_CRC = 1;
  2103  0241  15A5               	bsf	nrf24l01InitRegisters@config,3
  2104                           
  2105                           ;nrf24l01.c: 231: config.CRCO = 1;
  2106  0242  1525               	bsf	nrf24l01InitRegisters@config,2
  2107                           
  2108                           ;nrf24l01.c: 232: config.PWR_UP = 1;
  2109  0243  14A5               	bsf	nrf24l01InitRegisters@config,1
  2110                           
  2111                           ;nrf24l01.c: 233: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2112  0244  0825               	movf	nrf24l01InitRegisters@config,w
  2113  0245  00A0               	movwf	??_nrf24l01InitRegisters
  2114  0246  0820               	movf	??_nrf24l01InitRegisters,w
  2115  0247  00F1               	movwf	nrf24l01Send@data
  2116  0248  3020               	movlw	32
  2117  0249  26B8               	fcall	_nrf24l01Send
  2118                           
  2119                           ;nrf24l01.c: 236: n_EN_RXADDR_t enRXAddr;
  2120                           ;nrf24l01.c: 237: enRXAddr.ERX_P0 = 1;
  2121  024A  0020               	movlb	0	; select bank0
  2122  024B  1427               	bsf	nrf24l01InitRegisters@enRXAddr,0
  2123                           
  2124                           ;nrf24l01.c: 238: enRXAddr.ERX_P1 = 1;
  2125  024C  14A7               	bsf	nrf24l01InitRegisters@enRXAddr,1
  2126                           
  2127                           ;nrf24l01.c: 239: enRXAddr.ERX_P2 = 1;
  2128  024D  1527               	bsf	nrf24l01InitRegisters@enRXAddr,2
  2129                           
  2130                           ;nrf24l01.c: 240: enRXAddr.ERX_P3 = 1;
  2131  024E  15A7               	bsf	nrf24l01InitRegisters@enRXAddr,3
  2132                           
  2133                           ;nrf24l01.c: 241: enRXAddr.ERX_P4 = 1;
  2134  024F  1627               	bsf	nrf24l01InitRegisters@enRXAddr,4
  2135                           
  2136                           ;nrf24l01.c: 242: enRXAddr.ERX_P5 = 1;
  2137  0250  16A7               	bsf	nrf24l01InitRegisters@enRXAddr,5
  2138                           
  2139                           ;nrf24l01.c: 243: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  2140  0251  0827               	movf	nrf24l01InitRegisters@enRXAddr,w
  2141  0252  00A0               	movwf	??_nrf24l01InitRegisters
  2142  0253  0820               	movf	??_nrf24l01InitRegisters,w
  2143  0254  00F1               	movwf	nrf24l01Send@data
  2144  0255  3022               	movlw	34
  2145  0256  26B8               	fcall	_nrf24l01Send
  2146                           
  2147                           ;nrf24l01.c: 246: n_EN_AA_t enAA;
  2148                           ;nrf24l01.c: 247: enAA.byte = nrf24l01Send(0b00000000 | 0x01, 0);
  2149  0257  01F1               	clrf	nrf24l01Send@data
  2150  0258  3001               	movlw	1
  2151  0259  26B8               	fcall	_nrf24l01Send
  2152  025A  0020               	movlb	0	; select bank0
  2153  025B  00A0               	movwf	??_nrf24l01InitRegisters
  2154  025C  0820               	movf	??_nrf24l01InitRegisters,w
  2155  025D  00A8               	movwf	nrf24l01InitRegisters@enAA
  2156                           
  2157                           ;nrf24l01.c: 248: enAA.ENAA_P0 = 0;
  2158  025E  1028               	bcf	nrf24l01InitRegisters@enAA,0
  2159                           
  2160                           ;nrf24l01.c: 249: enAA.ENAA_P1 = 0;
  2161  025F  10A8               	bcf	nrf24l01InitRegisters@enAA,1
  2162                           
  2163                           ;nrf24l01.c: 250: enAA.ENAA_P2 = 0;
  2164  0260  1128               	bcf	nrf24l01InitRegisters@enAA,2
  2165                           
  2166                           ;nrf24l01.c: 251: enAA.ENAA_P3 = 0;
  2167  0261  11A8               	bcf	nrf24l01InitRegisters@enAA,3
  2168                           
  2169                           ;nrf24l01.c: 252: enAA.ENAA_P4 = 0;
  2170  0262  1228               	bcf	nrf24l01InitRegisters@enAA,4
  2171                           
  2172                           ;nrf24l01.c: 253: enAA.ENAA_P5 = 0;
  2173  0263  12A8               	bcf	nrf24l01InitRegisters@enAA,5
  2174                           
  2175                           ;nrf24l01.c: 254: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  2176  0264  0828               	movf	nrf24l01InitRegisters@enAA,w
  2177  0265  00A0               	movwf	??_nrf24l01InitRegisters
  2178  0266  0820               	movf	??_nrf24l01InitRegisters,w
  2179  0267  00F1               	movwf	nrf24l01Send@data
  2180  0268  3021               	movlw	33
  2181  0269  26B8               	fcall	_nrf24l01Send
  2182                           
  2183                           ;nrf24l01.c: 258: n_FEATURE_t feature;
  2184                           ;nrf24l01.c: 259: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  2185  026A  01F1               	clrf	nrf24l01Send@data
  2186  026B  301D               	movlw	29
  2187  026C  26B8               	fcall	_nrf24l01Send
  2188  026D  0020               	movlb	0	; select bank0
  2189  026E  00A0               	movwf	??_nrf24l01InitRegisters
  2190  026F  0820               	movf	??_nrf24l01InitRegisters,w
  2191  0270  00A3               	movwf	nrf24l01InitRegisters@feature
  2192                           
  2193                           ;nrf24l01.c: 260: feature.EN_DPL = 1;
  2194  0271  1523               	bsf	nrf24l01InitRegisters@feature,2
  2195                           
  2196                           ;nrf24l01.c: 261: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  2197  0272  0823               	movf	nrf24l01InitRegisters@feature,w
  2198  0273  00A0               	movwf	??_nrf24l01InitRegisters
  2199  0274  0820               	movf	??_nrf24l01InitRegisters,w
  2200  0275  00F1               	movwf	nrf24l01Send@data
  2201  0276  303D               	movlw	61
  2202  0277  26B8               	fcall	_nrf24l01Send
  2203                           
  2204                           ;nrf24l01.c: 263: n_DYNPD_t DynPD;
  2205                           ;nrf24l01.c: 264: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  2206  0278  01F1               	clrf	nrf24l01Send@data
  2207  0279  301C               	movlw	28
  2208  027A  26B8               	fcall	_nrf24l01Send
  2209  027B  0020               	movlb	0	; select bank0
  2210  027C  00A0               	movwf	??_nrf24l01InitRegisters
  2211  027D  0820               	movf	??_nrf24l01InitRegisters,w
  2212  027E  00A9               	movwf	nrf24l01InitRegisters@DynPD
  2213                           
  2214                           ;nrf24l01.c: 265: DynPD.DPL_P0 = 1;
  2215  027F  1429               	bsf	nrf24l01InitRegisters@DynPD,0
  2216                           
  2217                           ;nrf24l01.c: 266: DynPD.DPL_P1 = 1;
  2218  0280  14A9               	bsf	nrf24l01InitRegisters@DynPD,1
  2219                           
  2220                           ;nrf24l01.c: 267: DynPD.DPL_P2 = 1;
  2221  0281  1529               	bsf	nrf24l01InitRegisters@DynPD,2
  2222                           
  2223                           ;nrf24l01.c: 268: DynPD.DPL_P3 = 1;
  2224  0282  15A9               	bsf	nrf24l01InitRegisters@DynPD,3
  2225                           
  2226                           ;nrf24l01.c: 269: DynPD.DPL_P4 = 1;
  2227  0283  1629               	bsf	nrf24l01InitRegisters@DynPD,4
  2228                           
  2229                           ;nrf24l01.c: 270: DynPD.DPL_P5 = 1;
  2230  0284  16A9               	bsf	nrf24l01InitRegisters@DynPD,5
  2231                           
  2232                           ;nrf24l01.c: 271: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  2233  0285  0829               	movf	nrf24l01InitRegisters@DynPD,w
  2234  0286  00A0               	movwf	??_nrf24l01InitRegisters
  2235  0287  0820               	movf	??_nrf24l01InitRegisters,w
  2236  0288  00F1               	movwf	nrf24l01Send@data
  2237  0289  303C               	movlw	60
  2238  028A  26B8               	fcall	_nrf24l01Send
  2239                           
  2240                           ;nrf24l01.c: 274: n_STATUS_t status;
  2241                           ;nrf24l01.c: 275: status.byte = 0x00;
  2242  028B  0020               	movlb	0	; select bank0
  2243  028C  01A6               	clrf	nrf24l01InitRegisters@status
  2244                           
  2245                           ;nrf24l01.c: 276: status.RX_DR = 1;
  2246  028D  1726               	bsf	nrf24l01InitRegisters@status,6
  2247                           
  2248                           ;nrf24l01.c: 277: status.TX_DS = 1;
  2249  028E  16A6               	bsf	nrf24l01InitRegisters@status,5
  2250                           
  2251                           ;nrf24l01.c: 278: status.MAX_RT = 1;
  2252  028F  1626               	bsf	nrf24l01InitRegisters@status,4
  2253                           
  2254                           ;nrf24l01.c: 279: nrf24l01Send(0b00100000 | 0x07, status.byte);
  2255  0290  0826               	movf	nrf24l01InitRegisters@status,w
  2256  0291  00A0               	movwf	??_nrf24l01InitRegisters
  2257  0292  0820               	movf	??_nrf24l01InitRegisters,w
  2258  0293  00F1               	movwf	nrf24l01Send@data
  2259  0294  3027               	movlw	39
  2260  0295  26B8               	fcall	_nrf24l01Send
  2261                           
  2262                           ;nrf24l01.c: 282: nrf24l01Send(0b11100001, 0);
  2263  0296  01F1               	clrf	nrf24l01Send@data
  2264  0297  30E1               	movlw	225
  2265  0298  26B8               	fcall	_nrf24l01Send
  2266                           
  2267                           ;nrf24l01.c: 283: nrf24l01Send(0b11100010, 0);
  2268  0299  01F1               	clrf	nrf24l01Send@data
  2269  029A  30E2               	movlw	226
  2270  029B  26B8               	fcall	_nrf24l01Send
  2271  029C  0008               	return
  2272  029D                     __end_of_nrf24l01InitRegisters:	
  2273                           
  2274                           	psect	text5
  2275  0051                     __ptext5:	
  2276 ;; *************** function _loop *****************
  2277 ;; Defined at:
  2278 ;;		line 75 in file "main.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;		None
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;		None
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  1    wreg      void 
  2285 ;; Registers used:
  2286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMMON   BANK0   BANK1
  2292 ;;      Params:         0       0       0
  2293 ;;      Locals:         0       0       0
  2294 ;;      Temps:          0       4       0
  2295 ;;      Totals:         0       4       0
  2296 ;;Total ram usage:        4 bytes
  2297 ;; Hardware stack levels used:    1
  2298 ;; Hardware stack levels required when called:    8
  2299 ;; This function calls:
  2300 ;;		___lldiv
  2301 ;;		___lmul
  2302 ;;		__itoa
  2303 ;;		_nrf24l01SendString
  2304 ;;		_nrf24l01Service
  2305 ;;		_nrf24l01SetRecieveMode
  2306 ;;		_read_flashmem
  2307 ;;		_startADC
  2308 ;;		_strcpy
  2309 ;;		_strlen
  2310 ;; This function is called by:
  2311 ;;		_main
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           
  2316                           ;psect for function _loop
  2317  0051                     _loop:	
  2318  0051                     l1972:	
  2319                           ;main.c: 78: while (nrf24l01Service()){
  2320                           
  2321                           ;incstack = 0
  2322                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2323                           
  2324  0051  2482               	fcall	_nrf24l01Service
  2325  0052  3A00               	xorlw	0
  2326  0053  1903               	btfsc	3,2
  2327  0054  2859               	goto	l1974
  2328  0055  0063               	sleep	;# 
  2329                           
  2330                           ;main.c: 80: __nop();
  2331  0056  0000               	nop
  2332                           
  2333                           ;main.c: 81: __nop();
  2334  0057  0000               	nop
  2335  0058  2851               	goto	l1972
  2336  0059                     l1974:	
  2337                           
  2338                           ;main.c: 82: }
  2339                           ;main.c: 85: if (mode != 1) {
  2340  0059  037C               	decf	_mode,w
  2341  005A  1903               	btfsc	3,2
  2342  005B  29F5               	goto	l2060
  2343  005C  0064               	clrwdt	;# 
  2344                           
  2345                           ;main.c: 87: }
  2346                           ;main.c: 89: switch (mode){
  2347  005D  29F5               	goto	l2060
  2348  005E                     l1978:	
  2349                           ;main.c: 91: case 1:
  2350                           
  2351                           
  2352                           ;main.c: 92: nrf24l01SetRecieveMode();
  2353  005E  261F               	fcall	_nrf24l01SetRecieveMode
  2354                           
  2355                           ;main.c: 94: PORTAbits.RA5 = (unsigned) !PORTAbits.RA5;
  2356  005F  1003               	clrc
  2357  0060  0020               	movlb	0	; select bank0
  2358  0061  1E8C               	btfss	12,5	;volatile
  2359  0062  1403               	setc
  2360  0063  1C03               	btfss	3,0
  2361  0064  2868               	goto	u1210
  2362  0065  0020               	movlb	0	; select bank0
  2363  0066  168C               	bsf	12,5	;volatile
  2364  0067  286A               	goto	u1224
  2365  0068                     u1210:	
  2366  0068  0020               	movlb	0	; select bank0
  2367  0069  128C               	bcf	12,5	;volatile
  2368  006A                     u1224:	
  2369  006A  0063               	sleep	;# 
  2370                           
  2371                           ;main.c: 97: __nop();
  2372  006B  0000               	nop
  2373                           
  2374                           ;main.c: 98: __nop();
  2375  006C  0000               	nop
  2376                           
  2377                           ;main.c: 99: if (!STATUSbits.nTO && !STATUSbits.nPD){
  2378  006D  0020               	movlb	0	; select bank0
  2379  006E  1E03               	btfss	3,4	;volatile
  2380  006F  1983               	btfsc	3,3	;volatile
  2381  0070  2876               	goto	l1994
  2382                           
  2383                           ;main.c: 100: mode = nextMode;
  2384  0071  085E               	movf	_nextMode,w
  2385  0072  00BE               	movwf	??_loop
  2386  0073  083E               	movf	??_loop,w
  2387  0074  00FC               	movwf	_mode
  2388                           
  2389                           ;main.c: 101: sleepLoop = 0;
  2390  0075  01CD               	clrf	_sleepLoop
  2391  0076                     l1994:	
  2392                           
  2393                           ;main.c: 102: }
  2394                           ;main.c: 104: if (sleepLoop++ > 5){
  2395  0076  084D               	movf	_sleepLoop,w
  2396  0077  0ACD               	incf	_sleepLoop,f
  2397  0078  00BE               	movwf	??_loop
  2398  0079  3006               	movlw	6
  2399  007A  023E               	subwf	??_loop,w
  2400  007B  1C03               	skipc
  2401  007C  0008               	return
  2402  007D  0001               	reset	;# 
  2403                           
  2404                           ;main.c: 106: }
  2405                           ;main.c: 107: break;
  2406  007E  0008               	return
  2407  007F                     l1998:	
  2408                           ;main.c: 109: case 10:
  2409                           
  2410                           
  2411                           ;main.c: 113: strcpy(string, "/BOOT/");
  2412  007F  30E2               	movlw	low (STR_1| (0+32768))
  2413  0080  0020               	movlb	0	; select bank0
  2414  0081  00A8               	movwf	strcpy@from
  2415  0082  3086               	movlw	high (STR_1| (0+32768))
  2416  0083  00A9               	movwf	strcpy@from+1
  2417  0084  304E               	movlw	(low (_string| 0))& (0+255)
  2418  0085  2659               	fcall	_strcpy
  2419                           
  2420                           ;main.c: 114: _itoa(string + strlen(string), read_flashmem(16), 10);
  2421  0086  3010               	movlw	16
  2422  0087  0020               	movlb	0	; select bank0
  2423  0088  00A0               	movwf	read_flashmem@offset
  2424  0089  3000               	movlw	0
  2425  008A  00A1               	movwf	read_flashmem@offset+1
  2426  008B  24F2               	fcall	_read_flashmem
  2427  008C  0020               	movlb	0	; select bank0
  2428  008D  0821               	movf	?_read_flashmem+1,w
  2429  008E  00B9               	movwf	__itoa@number+1
  2430  008F  0820               	movf	?_read_flashmem,w
  2431  0090  00B8               	movwf	__itoa@number
  2432  0091  300A               	movlw	10
  2433  0092  00BE               	movwf	??_loop
  2434  0093  083E               	movf	??_loop,w
  2435  0094  00BA               	movwf	__itoa@base
  2436  0095  304E               	movlw	(low (_string| 0))& (0+255)
  2437  0096  25D7               	fcall	_strlen
  2438  0097  0020               	movlb	0	; select bank0
  2439  0098  0820               	movf	?_strlen,w
  2440  0099  3E4E               	addlw	(low (_string| 0))& (0+255)
  2441  009A  269A               	fcall	__itoa
  2442                           
  2443                           ;main.c: 116: nrf24l01SendString(string, 0);
  2444  009B  0020               	movlb	0	; select bank0
  2445  009C  01A9               	clrf	nrf24l01SendString@waitForAck
  2446  009D  304E               	movlw	(low (_string| 0))& (0+255)
  2447  009E  23FD               	fcall	_nrf24l01SendString
  2448                           
  2449                           ;main.c: 118: mode = 11;
  2450  009F  300B               	movlw	11
  2451  00A0  0020               	movlb	0	; select bank0
  2452  00A1  00BE               	movwf	??_loop
  2453  00A2  083E               	movf	??_loop,w
  2454  00A3  00FC               	movwf	_mode
  2455                           
  2456                           ;main.c: 119: break;
  2457  00A4  0008               	return
  2458  00A5                     l175:	
  2459                           ;main.c: 122: case 11:
  2460                           
  2461                           
  2462                           ;main.c: 123: mode = 1;
  2463  00A5  01FC               	clrf	_mode
  2464  00A6  0AFC               	incf	_mode,f
  2465                           
  2466                           ;main.c: 124: nextMode = 4;
  2467  00A7  3004               	movlw	4
  2468  00A8  0020               	movlb	0	; select bank0
  2469  00A9  00BE               	movwf	??_loop
  2470  00AA  083E               	movf	??_loop,w
  2471  00AB  00DE               	movwf	_nextMode
  2472                           
  2473                           ;main.c: 126: break;
  2474  00AC  0008               	return
  2475  00AD                     l2008:	
  2476                           ;main.c: 128: case 4:
  2477                           
  2478                           
  2479                           ;main.c: 130: strcpy(string, "/COUNT/");
  2480  00AD  30DA               	movlw	low (STR_2| (0+32768))
  2481  00AE  0020               	movlb	0	; select bank0
  2482  00AF  00A8               	movwf	strcpy@from
  2483  00B0  3086               	movlw	high (STR_2| (0+32768))
  2484  00B1  00A9               	movwf	strcpy@from+1
  2485  00B2  304E               	movlw	(low (_string| 0))& (0+255)
  2486  00B3  2659               	fcall	_strcpy
  2487                           
  2488                           ;main.c: 131: _itoa(string + strlen(string), counter++, 10);
  2489  00B4  0020               	movlb	0	; select bank0
  2490  00B5  084C               	movf	_counter+1,w
  2491  00B6  00B9               	movwf	__itoa@number+1
  2492  00B7  084B               	movf	_counter,w
  2493  00B8  00B8               	movwf	__itoa@number
  2494  00B9  300A               	movlw	10
  2495  00BA  00BE               	movwf	??_loop
  2496  00BB  083E               	movf	??_loop,w
  2497  00BC  00BA               	movwf	__itoa@base
  2498  00BD  304E               	movlw	(low (_string| 0))& (0+255)
  2499  00BE  25D7               	fcall	_strlen
  2500  00BF  0020               	movlb	0	; select bank0
  2501  00C0  0820               	movf	?_strlen,w
  2502  00C1  3E4E               	addlw	(low (_string| 0))& (0+255)
  2503  00C2  269A               	fcall	__itoa
  2504  00C3  3001               	movlw	1
  2505  00C4  0020               	movlb	0	; select bank0
  2506  00C5  07CB               	addwf	_counter,f
  2507  00C6  3000               	movlw	0
  2508  00C7  3DCC               	addwfc	_counter+1,f
  2509                           
  2510                           ;main.c: 133: nrf24l01SendString(string, 1);
  2511  00C8  01A9               	clrf	nrf24l01SendString@waitForAck
  2512  00C9  0AA9               	incf	nrf24l01SendString@waitForAck,f
  2513  00CA  304E               	movlw	(low (_string| 0))& (0+255)
  2514  00CB  23FD               	fcall	_nrf24l01SendString
  2515                           
  2516                           ;main.c: 135: mode = 12;
  2517  00CC  300C               	movlw	12
  2518  00CD  0020               	movlb	0	; select bank0
  2519  00CE  00BE               	movwf	??_loop
  2520  00CF  083E               	movf	??_loop,w
  2521  00D0  00FC               	movwf	_mode
  2522                           
  2523                           ;main.c: 136: break;
  2524  00D1  0008               	return
  2525  00D2                     l2018:	
  2526                           ;main.c: 138: case 12:
  2527                           
  2528                           
  2529                           ;main.c: 139: startADC(3);
  2530  00D2  3003               	movlw	3
  2531  00D3  2554               	fcall	_startADC
  2532                           
  2533                           ;main.c: 148: nextMode = 13;
  2534  00D4  300D               	movlw	13
  2535  00D5  0020               	movlb	0	; select bank0
  2536  00D6  00BE               	movwf	??_loop
  2537  00D7  083E               	movf	??_loop,w
  2538  00D8  00DE               	movwf	_nextMode
  2539                           
  2540                           ;main.c: 149: break;
  2541  00D9  0008               	return
  2542  00DA                     l2022:	
  2543                           ;main.c: 151: case 13:
  2544                           
  2545                           
  2546                           ;main.c: 152: startADC(7);
  2547  00DA  3007               	movlw	7
  2548  00DB  2554               	fcall	_startADC
  2549                           
  2550                           ;main.c: 153: nextMode = 15;
  2551  00DC  300F               	movlw	15
  2552  00DD  0020               	movlb	0	; select bank0
  2553  00DE  00BE               	movwf	??_loop
  2554  00DF  083E               	movf	??_loop,w
  2555  00E0  00DE               	movwf	_nextMode
  2556                           
  2557                           ;main.c: 154: break;
  2558  00E1  0008               	return
  2559  00E2                     l2026:	
  2560                           ;main.c: 156: case 15:
  2561                           
  2562                           
  2563                           ;main.c: 157: startADC(29);
  2564  00E2  301D               	movlw	29
  2565  00E3  2554               	fcall	_startADC
  2566                           
  2567                           ;main.c: 158: nextMode = 14;
  2568  00E4  300E               	movlw	14
  2569  00E5  0020               	movlb	0	; select bank0
  2570  00E6  00BE               	movwf	??_loop
  2571  00E7  083E               	movf	??_loop,w
  2572  00E8  00DE               	movwf	_nextMode
  2573                           
  2574                           ;main.c: 159: break;
  2575  00E9  0008               	return
  2576  00EA                     l2030:	
  2577                           ;main.c: 161: case 14:
  2578                           
  2579                           
  2580                           ;main.c: 162: startADC(31);
  2581  00EA  301F               	movlw	31
  2582  00EB  2554               	fcall	_startADC
  2583                           
  2584                           ;main.c: 163: nextMode = 11;
  2585  00EC  300B               	movlw	11
  2586  00ED  0020               	movlb	0	; select bank0
  2587  00EE  00BE               	movwf	??_loop
  2588  00EF  083E               	movf	??_loop,w
  2589  00F0  00DE               	movwf	_nextMode
  2590                           
  2591                           ;main.c: 164: break;
  2592  00F1  0008               	return
  2593  00F2                     l2034:	
  2594                           ;main.c: 169: case 3:
  2595                           
  2596                           ;main.c: 168: switch (ADCON0bits.CHS){
  2597                           
  2598                           ;main.c: 166: case 3:
  2599                           
  2600                           
  2601                           ;main.c: 170: adcSum*= 100;
  2602  00F2  3000               	movlw	0
  2603  00F3  0020               	movlb	0	; select bank0
  2604  00F4  00A3               	movwf	___lmul@multiplier+3
  2605  00F5  3000               	movlw	0
  2606  00F6  00A2               	movwf	___lmul@multiplier+2
  2607  00F7  3000               	movlw	0
  2608  00F8  00A1               	movwf	___lmul@multiplier+1
  2609  00F9  3064               	movlw	100
  2610  00FA  00A0               	movwf	___lmul@multiplier
  2611  00FB  0848               	movf	_adcSum+3,w
  2612  00FC  00A7               	movwf	___lmul@multiplicand+3
  2613  00FD  0847               	movf	_adcSum+2,w
  2614  00FE  00A6               	movwf	___lmul@multiplicand+2
  2615  00FF  0846               	movf	_adcSum+1,w
  2616  0100  00A5               	movwf	___lmul@multiplicand+1
  2617  0101  0845               	movf	_adcSum,w
  2618  0102  00A4               	movwf	___lmul@multiplicand
  2619  0103  2524               	fcall	___lmul
  2620  0104  0020               	movlb	0	; select bank0
  2621  0105  0823               	movf	?___lmul+3,w
  2622  0106  00C8               	movwf	_adcSum+3
  2623  0107  0822               	movf	?___lmul+2,w
  2624  0108  00C7               	movwf	_adcSum+2
  2625  0109  0821               	movf	?___lmul+1,w
  2626  010A  00C6               	movwf	_adcSum+1
  2627  010B  0820               	movf	?___lmul,w
  2628  010C  00C5               	movwf	_adcSum
  2629                           
  2630                           ;main.c: 171: adcSum/= 2505;
  2631  010D  3000               	movlw	0
  2632  010E  00A3               	movwf	___lldiv@divisor+3
  2633  010F  3000               	movlw	0
  2634  0110  00A2               	movwf	___lldiv@divisor+2
  2635  0111  3009               	movlw	9
  2636  0112  00A1               	movwf	___lldiv@divisor+1
  2637  0113  30C9               	movlw	201
  2638  0114  298F               	goto	L4
  2639  0115                     l2036:	
  2640                           ;main.c: 174: case 7:
  2641                           
  2642                           ;main.c: 172: break;
  2643                           
  2644                           
  2645                           ;main.c: 175: adcSum*= 100;
  2646  0115  3000               	movlw	0
  2647  0116  0020               	movlb	0	; select bank0
  2648  0117  00A3               	movwf	___lmul@multiplier+3
  2649  0118  3000               	movlw	0
  2650  0119  00A2               	movwf	___lmul@multiplier+2
  2651  011A  3000               	movlw	0
  2652  011B  00A1               	movwf	___lmul@multiplier+1
  2653  011C  3064               	movlw	100
  2654  011D  00A0               	movwf	___lmul@multiplier
  2655  011E  0848               	movf	_adcSum+3,w
  2656  011F  00A7               	movwf	___lmul@multiplicand+3
  2657  0120  0847               	movf	_adcSum+2,w
  2658  0121  00A6               	movwf	___lmul@multiplicand+2
  2659  0122  0846               	movf	_adcSum+1,w
  2660  0123  00A5               	movwf	___lmul@multiplicand+1
  2661  0124  0845               	movf	_adcSum,w
  2662  0125  00A4               	movwf	___lmul@multiplicand
  2663  0126  2524               	fcall	___lmul
  2664  0127  0020               	movlb	0	; select bank0
  2665  0128  0823               	movf	?___lmul+3,w
  2666  0129  00C8               	movwf	_adcSum+3
  2667  012A  0822               	movf	?___lmul+2,w
  2668  012B  00C7               	movwf	_adcSum+2
  2669  012C  0821               	movf	?___lmul+1,w
  2670  012D  00C6               	movwf	_adcSum+1
  2671  012E  0820               	movf	?___lmul,w
  2672  012F  00C5               	movwf	_adcSum
  2673                           
  2674                           ;main.c: 176: adcSum/= 2500;
  2675  0130  3000               	movlw	0
  2676  0131  00A3               	movwf	___lldiv@divisor+3
  2677  0132  3000               	movlw	0
  2678  0133  00A2               	movwf	___lldiv@divisor+2
  2679  0134  3009               	movlw	9
  2680  0135  00A1               	movwf	___lldiv@divisor+1
  2681  0136  30C4               	movlw	196
  2682  0137  298F               	goto	L4
  2683  0138                     l2038:	
  2684                           ;main.c: 179: case 31:
  2685                           
  2686                           ;main.c: 177: break;
  2687                           
  2688                           
  2689                           ;main.c: 180: adcSum*= 100;
  2690  0138  3000               	movlw	0
  2691  0139  0020               	movlb	0	; select bank0
  2692  013A  00A3               	movwf	___lmul@multiplier+3
  2693  013B  3000               	movlw	0
  2694  013C  00A2               	movwf	___lmul@multiplier+2
  2695  013D  3000               	movlw	0
  2696  013E  00A1               	movwf	___lmul@multiplier+1
  2697  013F  3064               	movlw	100
  2698  0140  00A0               	movwf	___lmul@multiplier
  2699  0141  0848               	movf	_adcSum+3,w
  2700  0142  00A7               	movwf	___lmul@multiplicand+3
  2701  0143  0847               	movf	_adcSum+2,w
  2702  0144  00A6               	movwf	___lmul@multiplicand+2
  2703  0145  0846               	movf	_adcSum+1,w
  2704  0146  00A5               	movwf	___lmul@multiplicand+1
  2705  0147  0845               	movf	_adcSum,w
  2706  0148  00A4               	movwf	___lmul@multiplicand
  2707  0149  2524               	fcall	___lmul
  2708  014A  0020               	movlb	0	; select bank0
  2709  014B  0823               	movf	?___lmul+3,w
  2710  014C  00C8               	movwf	_adcSum+3
  2711  014D  0822               	movf	?___lmul+2,w
  2712  014E  00C7               	movwf	_adcSum+2
  2713  014F  0821               	movf	?___lmul+1,w
  2714  0150  00C6               	movwf	_adcSum+1
  2715  0151  0820               	movf	?___lmul,w
  2716  0152  00C5               	movwf	_adcSum
  2717                           
  2718                           ;main.c: 181: adcSum/= 2475;
  2719  0153  3000               	movlw	0
  2720  0154  00A3               	movwf	___lldiv@divisor+3
  2721  0155  3000               	movlw	0
  2722  0156  00A2               	movwf	___lldiv@divisor+2
  2723  0157  3009               	movlw	9
  2724  0158  00A1               	movwf	___lldiv@divisor+1
  2725  0159  30AB               	movlw	171
  2726  015A  298F               	goto	L4
  2727  015B                     l2040:	
  2728                           ;main.c: 184: case 29:
  2729                           
  2730                           ;main.c: 182: break;
  2731                           
  2732                           
  2733                           ;main.c: 185: adcSum/= 2089;
  2734  015B  3000               	movlw	0
  2735  015C  0020               	movlb	0	; select bank0
  2736  015D  00A3               	movwf	___lldiv@divisor+3
  2737  015E  3000               	movlw	0
  2738  015F  00A2               	movwf	___lldiv@divisor+2
  2739  0160  3008               	movlw	8
  2740  0161  00A1               	movwf	___lldiv@divisor+1
  2741  0162  3029               	movlw	41
  2742  0163  00A0               	movwf	___lldiv@divisor
  2743  0164  0848               	movf	_adcSum+3,w
  2744  0165  00A7               	movwf	___lldiv@dividend+3
  2745  0166  0847               	movf	_adcSum+2,w
  2746  0167  00A6               	movwf	___lldiv@dividend+2
  2747  0168  0846               	movf	_adcSum+1,w
  2748  0169  00A5               	movwf	___lldiv@dividend+1
  2749  016A  0845               	movf	_adcSum,w
  2750  016B  00A4               	movwf	___lldiv@dividend
  2751  016C  2361               	fcall	___lldiv
  2752  016D  0020               	movlb	0	; select bank0
  2753  016E  0823               	movf	?___lldiv+3,w
  2754  016F  00C8               	movwf	_adcSum+3
  2755  0170  0822               	movf	?___lldiv+2,w
  2756  0171  00C7               	movwf	_adcSum+2
  2757  0172  0821               	movf	?___lldiv+1,w
  2758  0173  00C6               	movwf	_adcSum+1
  2759  0174  0820               	movf	?___lldiv,w
  2760  0175  00C5               	movwf	_adcSum
  2761                           
  2762                           ;main.c: 186: adcSum-= 40;
  2763  0176  3028               	movlw	40
  2764  0177  00BE               	movwf	??_loop
  2765  0178  3000               	movlw	0
  2766  0179  00BF               	movwf	??_loop+1
  2767  017A  3000               	movlw	0
  2768  017B  00C0               	movwf	??_loop+2
  2769  017C  3000               	movlw	0
  2770  017D  00C1               	movwf	??_loop+3
  2771  017E  083E               	movf	??_loop,w
  2772  017F  02C5               	subwf	_adcSum,f
  2773  0180  083F               	movf	??_loop+1,w
  2774  0181  3BC6               	subwfb	_adcSum+1,f
  2775  0182  0840               	movf	??_loop+2,w
  2776  0183  3BC7               	subwfb	_adcSum+2,f
  2777  0184  0841               	movf	??_loop+3,w
  2778  0185  3BC8               	subwfb	_adcSum+3,f
  2779                           
  2780                           ;main.c: 187: break;
  2781  0186  29B4               	goto	l2050
  2782  0187                     l2044:	
  2783                           ;main.c: 189: default:
  2784                           
  2785                           
  2786                           ;main.c: 190: adcSum/= 255;
  2787  0187  3000               	movlw	0
  2788  0188  0020               	movlb	0	; select bank0
  2789  0189  00A3               	movwf	___lldiv@divisor+3
  2790  018A  3000               	movlw	0
  2791  018B  00A2               	movwf	___lldiv@divisor+2
  2792  018C  3000               	movlw	0
  2793  018D  00A1               	movwf	___lldiv@divisor+1
  2794  018E  30FF               	movlw	255
  2795  018F                     L4:	
  2796  018F  00A0               	movwf	___lldiv@divisor
  2797  0190  0848               	movf	_adcSum+3,w
  2798  0191  00A7               	movwf	___lldiv@dividend+3
  2799  0192  0847               	movf	_adcSum+2,w
  2800  0193  00A6               	movwf	___lldiv@dividend+2
  2801  0194  0846               	movf	_adcSum+1,w
  2802  0195  00A5               	movwf	___lldiv@dividend+1
  2803  0196  0845               	movf	_adcSum,w
  2804  0197  00A4               	movwf	___lldiv@dividend
  2805  0198  2361               	fcall	___lldiv
  2806  0199  0020               	movlb	0	; select bank0
  2807  019A  0823               	movf	?___lldiv+3,w
  2808  019B  00C8               	movwf	_adcSum+3
  2809  019C  0822               	movf	?___lldiv+2,w
  2810  019D  00C7               	movwf	_adcSum+2
  2811  019E  0821               	movf	?___lldiv+1,w
  2812  019F  00C6               	movwf	_adcSum+1
  2813  01A0  0820               	movf	?___lldiv,w
  2814  01A1  00C5               	movwf	_adcSum
  2815                           
  2816                           ;main.c: 192: }
  2817                           
  2818                           ;main.c: 191: break;
  2819  01A2  29B4               	goto	l2050
  2820  01A3                     l2048:	
  2821  01A3  0021               	movlb	1	; select bank1
  2822  01A4  0C1D               	rrf	29,w	;volatile
  2823  01A5  0C89               	rrf	9,f
  2824  01A6  391F               	andlw	31
  2825                           
  2826                           ; Switch size 1, requested type "space"
  2827                           ; Number of cases is 4, Range of values is 3 to 31
  2828                           ; switch strategies available:
  2829                           ; Name         Instructions Cycles
  2830                           ; simple_byte           13     7 (average)
  2831                           ; direct_byte           67     9 (fixed)
  2832                           ; jumptable            263     9 (fixed)
  2833                           ;	Chosen strategy is simple_byte
  2834  01A7  3A03               	xorlw	3	; case 3
  2835  01A8  1903               	skipnz
  2836  01A9  28F2               	goto	l2034
  2837  01AA  3A04               	xorlw	4	; case 7
  2838  01AB  1903               	skipnz
  2839  01AC  2915               	goto	l2036
  2840  01AD  3A1A               	xorlw	26	; case 29
  2841  01AE  1903               	skipnz
  2842  01AF  295B               	goto	l2040
  2843  01B0  3A02               	xorlw	2	; case 31
  2844  01B1  1903               	skipnz
  2845  01B2  2938               	goto	l2038
  2846  01B3  2987               	goto	l2044
  2847  01B4                     l2050:	
  2848                           
  2849                           ;main.c: 194: strcpy(string, "/ADC");
  2850  01B4  3002               	movlw	low (STR_3| (0+32768))
  2851  01B5  0020               	movlb	0	; select bank0
  2852  01B6  00A8               	movwf	strcpy@from
  2853  01B7  3087               	movlw	high (STR_3| (0+32768))
  2854  01B8  00A9               	movwf	strcpy@from+1
  2855  01B9  304E               	movlw	(low (_string| 0))& (0+255)
  2856  01BA  2659               	fcall	_strcpy
  2857                           
  2858                           ;main.c: 195: _itoa(string + strlen(string), ADCON0bits.CHS, 10);
  2859  01BB  0021               	movlb	1	; select bank1
  2860  01BC  0C1D               	rrf	29,w	;volatile
  2861  01BD  0C89               	rrf	9,f
  2862  01BE  391F               	andlw	31
  2863  01BF  0020               	movlb	0	; select bank0
  2864  01C0  00BE               	movwf	??_loop
  2865  01C1  01BF               	clrf	??_loop+1
  2866  01C2  083E               	movf	??_loop,w
  2867  01C3  00B8               	movwf	__itoa@number
  2868  01C4  083F               	movf	??_loop+1,w
  2869  01C5  00B9               	movwf	__itoa@number+1
  2870  01C6  300A               	movlw	10
  2871  01C7  00C0               	movwf	??_loop+2
  2872  01C8  0840               	movf	??_loop+2,w
  2873  01C9  00BA               	movwf	__itoa@base
  2874  01CA  304E               	movlw	(low (_string| 0))& (0+255)
  2875  01CB  25D7               	fcall	_strlen
  2876  01CC  0020               	movlb	0	; select bank0
  2877  01CD  0820               	movf	?_strlen,w
  2878  01CE  3E4E               	addlw	(low (_string| 0))& (0+255)
  2879  01CF  269A               	fcall	__itoa
  2880                           
  2881                           ;main.c: 196: strcpy(string + strlen(string), "/");
  2882  01D0  30E0               	movlw	low ((STR_2+6)| (0+32768))
  2883  01D1  0020               	movlb	0	; select bank0
  2884  01D2  00A8               	movwf	strcpy@from
  2885  01D3  3086               	movlw	high ((STR_2+6)| (0+32768))
  2886  01D4  00A9               	movwf	strcpy@from+1
  2887  01D5  304E               	movlw	(low (_string| 0))& (0+255)
  2888  01D6  25D7               	fcall	_strlen
  2889  01D7  0020               	movlb	0	; select bank0
  2890  01D8  0820               	movf	?_strlen,w
  2891  01D9  3E4E               	addlw	(low (_string| 0))& (0+255)
  2892  01DA  2659               	fcall	_strcpy
  2893                           
  2894                           ;main.c: 197: _itoa(string + strlen(string), adcSum, 10);
  2895  01DB  0020               	movlb	0	; select bank0
  2896  01DC  0846               	movf	_adcSum+1,w
  2897  01DD  00B9               	movwf	__itoa@number+1
  2898  01DE  0845               	movf	_adcSum,w
  2899  01DF  00B8               	movwf	__itoa@number
  2900  01E0  300A               	movlw	10
  2901  01E1  00BE               	movwf	??_loop
  2902  01E2  083E               	movf	??_loop,w
  2903  01E3  00BA               	movwf	__itoa@base
  2904  01E4  304E               	movlw	(low (_string| 0))& (0+255)
  2905  01E5  25D7               	fcall	_strlen
  2906  01E6  0020               	movlb	0	; select bank0
  2907  01E7  0820               	movf	?_strlen,w
  2908  01E8  3E4E               	addlw	(low (_string| 0))& (0+255)
  2909  01E9  269A               	fcall	__itoa
  2910                           
  2911                           ;main.c: 199: nrf24l01SendString(string, 1);
  2912  01EA  0020               	movlb	0	; select bank0
  2913  01EB  01A9               	clrf	nrf24l01SendString@waitForAck
  2914  01EC  0AA9               	incf	nrf24l01SendString@waitForAck,f
  2915  01ED  304E               	movlw	(low (_string| 0))& (0+255)
  2916  01EE  23FD               	fcall	_nrf24l01SendString
  2917                           
  2918                           ;main.c: 201: mode = nextMode;
  2919  01EF  0020               	movlb	0	; select bank0
  2920  01F0  085E               	movf	_nextMode,w
  2921  01F1  00BE               	movwf	??_loop
  2922  01F2  083E               	movf	??_loop,w
  2923  01F3  00FC               	movwf	_mode
  2924                           
  2925                           ;main.c: 204: }
  2926                           
  2927                           ;main.c: 202: break;
  2928  01F4  0008               	return
  2929  01F5                     l2060:	
  2930  01F5  087C               	movf	_mode,w
  2931                           
  2932                           ; Switch size 1, requested type "space"
  2933                           ; Number of cases is 9, Range of values is 1 to 15
  2934                           ; switch strategies available:
  2935                           ; Name         Instructions Cycles
  2936                           ; simple_byte           28    15 (average)
  2937                           ; direct_byte           39     9 (fixed)
  2938                           ; jumptable            263     9 (fixed)
  2939                           ;	Chosen strategy is simple_byte
  2940  01F6  3A01               	xorlw	1	; case 1
  2941  01F7  1903               	skipnz
  2942  01F8  285E               	goto	l1978
  2943  01F9  3A02               	xorlw	2	; case 3
  2944  01FA  1903               	skipnz
  2945  01FB  29A3               	goto	l2048
  2946  01FC  3A07               	xorlw	7	; case 4
  2947  01FD  1903               	skipnz
  2948  01FE  28AD               	goto	l2008
  2949  01FF  3A0E               	xorlw	14	; case 10
  2950  0200  1903               	skipnz
  2951  0201  287F               	goto	l1998
  2952  0202  3A01               	xorlw	1	; case 11
  2953  0203  1903               	skipnz
  2954  0204  28A5               	goto	l175
  2955  0205  3A07               	xorlw	7	; case 12
  2956  0206  1903               	skipnz
  2957  0207  28D2               	goto	l2018
  2958  0208  3A01               	xorlw	1	; case 13
  2959  0209  1903               	skipnz
  2960  020A  28DA               	goto	l2022
  2961  020B  3A03               	xorlw	3	; case 14
  2962  020C  1903               	skipnz
  2963  020D  28EA               	goto	l2030
  2964  020E  3A01               	xorlw	1	; case 15
  2965  020F  1903               	skipnz
  2966  0210  28E2               	goto	l2026
  2967  0211  2A12               	goto	l189
  2968  0212                     l189:	
  2969  0212  0008               	return
  2970  0213                     __end_of_loop:	
  2971                           
  2972                           	psect	text6
  2973  0659                     __ptext6:	
  2974 ;; *************** function _strcpy *****************
  2975 ;; Defined at:
  2976 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;  to              1    wreg     PTR unsigned char 
  2979 ;;		 -> string(16), 
  2980 ;;  from            2    8[BANK0 ] PTR const unsigned char 
  2981 ;;		 -> STR_4(2), STR_3(5), STR_2(8), STR_1(7), 
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;  to              1   12[BANK0 ] PTR unsigned char 
  2984 ;;		 -> string(16), 
  2985 ;;  cp              1   11[BANK0 ] PTR unsigned char 
  2986 ;;		 -> string(16), 
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  1    wreg      PTR unsigned char 
  2989 ;; Registers used:
  2990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMMON   BANK0   BANK1
  2996 ;;      Params:         0       2       0
  2997 ;;      Locals:         0       2       0
  2998 ;;      Temps:          0       1       0
  2999 ;;      Totals:         0       5       0
  3000 ;;Total ram usage:        5 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:    4
  3003 ;; This function calls:
  3004 ;;		Nothing
  3005 ;; This function is called by:
  3006 ;;		_loop
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           
  3011                           ;psect for function _strcpy
  3012  0659                     _strcpy:	
  3013                           
  3014                           ;incstack = 0
  3015                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  3016                           ;strcpy@to stored from wreg
  3017  0659  0020               	movlb	0	; select bank0
  3018  065A  00AC               	movwf	strcpy@to
  3019  065B  082C               	movf	strcpy@to,w
  3020  065C  00AA               	movwf	??_strcpy
  3021  065D  082A               	movf	??_strcpy,w
  3022  065E  00AB               	movwf	strcpy@cp
  3023  065F                     l1724:	
  3024  065F  082B               	movf	strcpy@cp,w
  3025  0660  0086               	movwf	6
  3026  0661  0187               	clrf	7
  3027  0662  0828               	movf	strcpy@from,w
  3028  0663  0084               	movwf	4
  3029  0664  0829               	movf	strcpy@from+1,w
  3030  0665  0085               	movwf	5
  3031  0666  0800               	movf	0,w	;code access
  3032  0667  3FC0               	movwi [0]fsr1
  3033  0668  0889               	movf	9,f
  3034  0669  1903               	btfsc	3,2
  3035  066A  0008               	return
  3036  066B  3001               	movlw	1
  3037  066C  00AA               	movwf	??_strcpy
  3038  066D  082A               	movf	??_strcpy,w
  3039  066E  07AB               	addwf	strcpy@cp,f
  3040  066F  3001               	movlw	1
  3041  0670  07A8               	addwf	strcpy@from,f
  3042  0671  3000               	movlw	0
  3043  0672  3DA9               	addwfc	strcpy@from+1,f
  3044  0673  2E5F               	goto	l1724
  3045  0674                     __end_of_strcpy:	
  3046                           ;	Return value of _strcpy is never used
  3047                           
  3048                           
  3049                           	psect	text7
  3050  0554                     __ptext7:	
  3051 ;; *************** function _startADC *****************
  3052 ;; Defined at:
  3053 ;;		line 63 in file "main.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;  channel         1    wreg     unsigned char 
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;  channel         1    1[BANK0 ] unsigned char 
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  1    wreg      void 
  3060 ;; Registers used:
  3061 ;;		wreg, status,2, status,0
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMMON   BANK0   BANK1
  3067 ;;      Params:         0       0       0
  3068 ;;      Locals:         0       1       0
  3069 ;;      Temps:          0       1       0
  3070 ;;      Totals:         0       2       0
  3071 ;;Total ram usage:        2 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    4
  3074 ;; This function calls:
  3075 ;;		Nothing
  3076 ;; This function is called by:
  3077 ;;		_loop
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           
  3082                           ;psect for function _startADC
  3083  0554                     _startADC:	
  3084                           
  3085                           ;incstack = 0
  3086                           ; Regs used in _startADC: [wreg+status,2+status,0]
  3087                           ;startADC@channel stored from wreg
  3088  0554  0020               	movlb	0	; select bank0
  3089  0555  00A1               	movwf	startADC@channel
  3090                           
  3091                           ;main.c: 64: adcSum = 0;
  3092  0556  3000               	movlw	0
  3093  0557  00C8               	movwf	_adcSum+3
  3094  0558  3000               	movlw	0
  3095  0559  00C7               	movwf	_adcSum+2
  3096  055A  3000               	movlw	0
  3097  055B  00C6               	movwf	_adcSum+1
  3098  055C  3000               	movlw	0
  3099  055D  00C5               	movwf	_adcSum
  3100                           
  3101                           ;main.c: 65: adcLoop = 255;
  3102  055E  30FF               	movlw	255
  3103  055F  00A0               	movwf	??_startADC
  3104  0560  0820               	movf	??_startADC,w
  3105  0561  00FB               	movwf	_adcLoop
  3106                           
  3107                           ;main.c: 67: if (ADCON0bits.CHS != channel) {
  3108  0562  0021               	movlb	1	; select bank1
  3109  0563  0C1D               	rrf	29,w	;volatile
  3110  0564  0C89               	rrf	9,f
  3111  0565  391F               	andlw	31
  3112  0566  0020               	movlb	0	; select bank0
  3113  0567  0621               	xorwf	startADC@channel,w
  3114  0568  1903               	skipnz
  3115  0569  2D7A               	goto	l1680
  3116                           
  3117                           ;main.c: 68: ADCON0bits.CHS = channel;
  3118  056A  0821               	movf	startADC@channel,w
  3119  056B  00A0               	movwf	??_startADC
  3120  056C  0DA0               	rlf	??_startADC,f
  3121  056D  0DA0               	rlf	??_startADC,f
  3122  056E  0021               	movlb	1	; select bank1
  3123  056F  081D               	movf	29,w	;volatile
  3124  0570  0020               	movlb	0	; select bank0
  3125  0571  0620               	xorwf	??_startADC,w
  3126  0572  3983               	andlw	-125
  3127  0573  0620               	xorwf	??_startADC,w
  3128  0574  0021               	movlb	1	; select bank1
  3129  0575  009D               	movwf	29	;volatile
  3130                           
  3131                           ;main.c: 69: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3132  0576  30A0               	movlw	160
  3133  0577                     u1357:	
  3134  0577  3200               	nop2
  3135  0578  0B89               	decfsz	9,f
  3136  0579  2D77               	goto	u1357
  3137  057A                     l1680:	
  3138                           
  3139                           ;main.c: 70: }
  3140                           ;main.c: 72: ADCON0bits.ADGO = 1;
  3141  057A  0021               	movlb	1	; select bank1
  3142  057B  149D               	bsf	29,1	;volatile
  3143                           
  3144                           ;main.c: 73: mode = 2;
  3145  057C  3002               	movlw	2
  3146  057D  0020               	movlb	0	; select bank0
  3147  057E  00A0               	movwf	??_startADC
  3148  057F  0820               	movf	??_startADC,w
  3149  0580  00FC               	movwf	_mode
  3150  0581  0008               	return
  3151  0582                     __end_of_startADC:	
  3152                           
  3153                           	psect	text8
  3154  0482                     __ptext8:	
  3155 ;; *************** function _nrf24l01Service *****************
  3156 ;; Defined at:
  3157 ;;		line 107 in file "nrf24l01.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;		None
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;		None
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  1    wreg      unsigned char 
  3164 ;; Registers used:
  3165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMMON   BANK0   BANK1
  3171 ;;      Params:         0       0       0
  3172 ;;      Locals:         0       0       0
  3173 ;;      Temps:          0       1       0
  3174 ;;      Totals:         0       1       0
  3175 ;;Total ram usage:        1 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    7
  3178 ;; This function calls:
  3179 ;;		_nrf24l01HandleRX
  3180 ;;		_nrf24l01IsACK
  3181 ;;		_nrf24l01Send
  3182 ;;		_nrf24l01SetRecieveMode
  3183 ;; This function is called by:
  3184 ;;		_loop
  3185 ;; This function uses a non-reentrant model
  3186 ;;
  3187                           
  3188                           
  3189                           ;psect for function _nrf24l01Service
  3190  0482                     _nrf24l01Service:	
  3191                           
  3192                           ;nrf24l01.c: 110: if (nrf24l01Status.waitForTXACK){
  3193                           
  3194                           ;incstack = 0
  3195                           ; Regs used in _nrf24l01Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3196  0482  0020               	movlb	0	; select bank0
  3197  0483  1C4A               	btfss	_nrf24l01Status+1,0
  3198  0484  2C94               	goto	l260
  3199                           
  3200                           ;nrf24l01.c: 111: if (nrf24l01Status.waitForTXACKCount++ == 15){
  3201  0485  0C4A               	rrf	_nrf24l01Status+1,w
  3202  0486  390F               	andlw	15
  3203  0487  00B0               	movwf	??_nrf24l01Service
  3204  0488  0AB0               	incf	??_nrf24l01Service,f
  3205  0489  0DB0               	rlf	??_nrf24l01Service,f
  3206  048A  084A               	movf	_nrf24l01Status+1,w
  3207  048B  0630               	xorwf	??_nrf24l01Service,w
  3208  048C  39E1               	andlw	-31
  3209  048D  0630               	xorwf	??_nrf24l01Service,w
  3210  048E  00CA               	movwf	_nrf24l01Status+1
  3211  048F  0C4A               	rrf	_nrf24l01Status+1,w
  3212  0490  390F               	andlw	15
  3213  0491  3A10               	xorlw	16
  3214  0492  1903               	btfsc	3,2
  3215  0493  0001               	reset	;# 
  3216  0494                     l260:	
  3217                           
  3218                           ;nrf24l01.c: 113: }
  3219                           ;nrf24l01.c: 114: }
  3220                           ;nrf24l01.c: 117: if (nrf24l01Status.radio.TX_DS){
  3221  0494  0020               	movlb	0	; select bank0
  3222  0495  1EC9               	btfss	_nrf24l01Status,5
  3223  0496  2CA5               	goto	l1700
  3224                           
  3225                           ;nrf24l01.c: 120: if (nrf24l01Status.waitForTXACK){
  3226  0497  1C4A               	btfss	_nrf24l01Status+1,0
  3227  0498  2C9C               	goto	l1696
  3228                           
  3229                           ;nrf24l01.c: 121: nrf24l01Status.waitForTXACKCount = 0;
  3230  0499  30E1               	movlw	-31
  3231  049A  05CA               	andwf	_nrf24l01Status+1,f
  3232                           
  3233                           ;nrf24l01.c: 122: nrf24l01SetRecieveMode();
  3234  049B  261F               	fcall	_nrf24l01SetRecieveMode
  3235  049C                     l1696:	
  3236                           
  3237                           ;nrf24l01.c: 123: }
  3238                           ;nrf24l01.c: 126: nrf24l01Send(0b00100000 | 0x07, nrf24l01Status.radio.byte);
  3239  049C  0020               	movlb	0	; select bank0
  3240  049D  0849               	movf	_nrf24l01Status,w
  3241  049E  00B0               	movwf	??_nrf24l01Service
  3242  049F  0830               	movf	??_nrf24l01Service,w
  3243  04A0  00F1               	movwf	nrf24l01Send@data
  3244  04A1  3027               	movlw	39
  3245  04A2  26B8               	fcall	_nrf24l01Send
  3246                           
  3247                           ;nrf24l01.c: 127: nrf24l01Status.radio.TX_DS = 0;
  3248  04A3  0020               	movlb	0	; select bank0
  3249  04A4  12C9               	bcf	_nrf24l01Status,5
  3250  04A5                     l1700:	
  3251                           
  3252                           ;nrf24l01.c: 128: }
  3253                           ;nrf24l01.c: 132: if (nrf24l01Status.radio.RX_DR){
  3254  04A5  1F49               	btfss	_nrf24l01Status,6
  3255  04A6  2CB9               	goto	l1714
  3256                           
  3257                           ;nrf24l01.c: 135: nrf24l01HandleRX();
  3258  04A7  23B4               	fcall	_nrf24l01HandleRX
  3259                           
  3260                           ;nrf24l01.c: 138: nrf24l01Send(0b00100000 | 0x07, nrf24l01Status.radio.byte);
  3261  04A8  0020               	movlb	0	; select bank0
  3262  04A9  0849               	movf	_nrf24l01Status,w
  3263  04AA  00B0               	movwf	??_nrf24l01Service
  3264  04AB  0830               	movf	??_nrf24l01Service,w
  3265  04AC  00F1               	movwf	nrf24l01Send@data
  3266  04AD  3027               	movlw	39
  3267  04AE  26B8               	fcall	_nrf24l01Send
  3268                           
  3269                           ;nrf24l01.c: 139: nrf24l01Status.radio.RX_DR = 0;
  3270  04AF  0020               	movlb	0	; select bank0
  3271  04B0  1349               	bcf	_nrf24l01Status,6
  3272                           
  3273                           ;nrf24l01.c: 142: if (nrf24l01Status.waitForTXACK){
  3274  04B1  1C4A               	btfss	_nrf24l01Status+1,0
  3275  04B2  2CB9               	goto	l1714
  3276                           
  3277                           ;nrf24l01.c: 145: if (nrf24l01IsACK()){
  3278  04B3  268A               	fcall	_nrf24l01IsACK
  3279  04B4  3A00               	xorlw	0
  3280  04B5  1903               	skipnz
  3281  04B6  2CB9               	goto	l1714
  3282                           
  3283                           ;nrf24l01.c: 146: nrf24l01Status.waitForTXACK = 0;
  3284  04B7  0020               	movlb	0	; select bank0
  3285  04B8  104A               	bcf	_nrf24l01Status+1,0
  3286  04B9                     l1714:	
  3287                           
  3288                           ;nrf24l01.c: 147: }
  3289                           ;nrf24l01.c: 148: }
  3290                           ;nrf24l01.c: 149: }
  3291                           ;nrf24l01.c: 152: return nrf24l01Status.waitForTXACK;
  3292  04B9  0020               	movlb	0	; select bank0
  3293  04BA  084A               	movf	_nrf24l01Status+1,w
  3294  04BB  3901               	andlw	1
  3295  04BC  0008               	return
  3296  04BD                     __end_of_nrf24l01Service:	
  3297                           
  3298                           	psect	text9
  3299  061F                     __ptext9:	
  3300 ;; *************** function _nrf24l01SetRecieveMode *****************
  3301 ;; Defined at:
  3302 ;;		line 45 in file "nrf24l01.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;		None
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;  config          1    1[BANK0 ] struct .
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      void 
  3309 ;; Registers used:
  3310 ;;		wreg, status,2, status,0, pclath, cstack
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMMON   BANK0   BANK1
  3316 ;;      Params:         0       0       0
  3317 ;;      Locals:         0       1       0
  3318 ;;      Temps:          0       1       0
  3319 ;;      Totals:         0       2       0
  3320 ;;Total ram usage:        2 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    6
  3323 ;; This function calls:
  3324 ;;		_nrf24l01Send
  3325 ;; This function is called by:
  3326 ;;		_loop
  3327 ;;		_nrf24l01Service
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function _nrf24l01SetRecieveMode
  3333  061F                     _nrf24l01SetRecieveMode:	
  3334                           
  3335                           ;nrf24l01.c: 47: PORTAbits.RA0 = 0;
  3336                           
  3337                           ;incstack = 0
  3338                           ; Regs used in _nrf24l01SetRecieveMode: [wreg+status,2+status,0+pclath+cstack]
  3339  061F  0020               	movlb	0	; select bank0
  3340  0620  100C               	bcf	12,0	;volatile
  3341                           
  3342                           ;nrf24l01.c: 49: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3343  0621  30A0               	movlw	160
  3344  0622                     u1367:	
  3345  0622  3200               	nop2
  3346  0623  0B89               	decfsz	9,f
  3347  0624  2E22               	goto	u1367
  3348                           
  3349                           ;nrf24l01.c: 51: n_CONFIG_t config;
  3350                           ;nrf24l01.c: 52: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  3351  0625  01F1               	clrf	nrf24l01Send@data
  3352  0626  3000               	movlw	0
  3353  0627  26B8               	fcall	_nrf24l01Send
  3354  0628  0020               	movlb	0	; select bank0
  3355  0629  00A0               	movwf	??_nrf24l01SetRecieveMode
  3356  062A  0820               	movf	??_nrf24l01SetRecieveMode,w
  3357  062B  00A1               	movwf	nrf24l01SetRecieveMode@config
  3358                           
  3359                           ;nrf24l01.c: 53: if (config.PRIM_RX == 0){
  3360  062C  1821               	btfsc	nrf24l01SetRecieveMode@config,0
  3361  062D  0008               	return
  3362                           
  3363                           ;nrf24l01.c: 54: config.PRIM_RX = 1;
  3364  062E  1421               	bsf	nrf24l01SetRecieveMode@config,0
  3365                           
  3366                           ;nrf24l01.c: 55: nrf24l01Send(0b00100000 | 0x00, config.byte);
  3367  062F  0821               	movf	nrf24l01SetRecieveMode@config,w
  3368  0630  00A0               	movwf	??_nrf24l01SetRecieveMode
  3369  0631  0820               	movf	??_nrf24l01SetRecieveMode,w
  3370  0632  00F1               	movwf	nrf24l01Send@data
  3371  0633  3020               	movlw	32
  3372  0634  26B8               	fcall	_nrf24l01Send
  3373                           
  3374                           ;nrf24l01.c: 56: PORTAbits.RA0 = 1;
  3375  0635  0020               	movlb	0	; select bank0
  3376  0636  140C               	bsf	12,0	;volatile
  3377                           
  3378                           ;nrf24l01.c: 57: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3379  0637  30A0               	movlw	160
  3380  0638                     u1377:	
  3381  0638  3200               	nop2
  3382  0639  0B89               	decfsz	9,f
  3383  063A  2E38               	goto	u1377
  3384  063B  0008               	return
  3385  063C                     __end_of_nrf24l01SetRecieveMode:	
  3386                           
  3387                           	psect	text10
  3388  068A                     __ptext10:	
  3389 ;; *************** function _nrf24l01IsACK *****************
  3390 ;; Defined at:
  3391 ;;		line 92 in file "nrf24l01.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      unsigned char 
  3398 ;; Registers used:
  3399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMMON   BANK0   BANK1
  3405 ;;      Params:         0       0       0
  3406 ;;      Locals:         0       0       0
  3407 ;;      Temps:          0       0       0
  3408 ;;      Totals:         0       0       0
  3409 ;;Total ram usage:        0 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    5
  3412 ;; This function calls:
  3413 ;;		_strcmp
  3414 ;; This function is called by:
  3415 ;;		_nrf24l01Service
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           
  3420                           ;psect for function _nrf24l01IsACK
  3421  068A                     _nrf24l01IsACK:	
  3422                           
  3423                           ;nrf24l01.c: 93: if (strcmp(string, "ACK") == 0){
  3424                           
  3425                           ;incstack = 0
  3426                           ; Regs used in _nrf24l01IsACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3427  068A  3007               	movlw	low (STR_5| (0+32768))
  3428  068B  0020               	movlb	0	; select bank0
  3429  068C  00A0               	movwf	strcmp@s2
  3430  068D  3087               	movlw	high (STR_5| (0+32768))
  3431  068E  00A1               	movwf	strcmp@s2+1
  3432  068F  304E               	movlw	(low (_string| 0))& (0+255)
  3433  0690  25AF               	fcall	_strcmp
  3434  0691  0020               	movlb	0	; select bank0
  3435  0692  0820               	movf	?_strcmp,w
  3436  0693  0421               	iorwf	?_strcmp+1,w
  3437  0694  1D03               	btfss	3,2
  3438  0695  2E98               	goto	l1660
  3439                           
  3440                           ;nrf24l01.c: 94: return 1;
  3441  0696  3001               	movlw	1
  3442  0697  0008               	return
  3443  0698                     l1660:	
  3444                           
  3445                           ;nrf24l01.c: 95: }
  3446                           ;nrf24l01.c: 97: return 0;
  3447  0698  3000               	movlw	0
  3448  0699  0008               	return
  3449  069A                     __end_of_nrf24l01IsACK:	
  3450                           
  3451                           	psect	text11
  3452  05AF                     __ptext11:	
  3453 ;; *************** function _strcmp *****************
  3454 ;; Defined at:
  3455 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  s1              1    wreg     PTR const unsigned char 
  3458 ;;		 -> string(16), 
  3459 ;;  s2              2    0[BANK0 ] PTR const unsigned char 
  3460 ;;		 -> STR_5(4), 
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;  s1              1    4[BANK0 ] PTR const unsigned char 
  3463 ;;		 -> string(16), 
  3464 ;;  r               1    3[BANK0 ] char 
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  2    0[BANK0 ] int 
  3467 ;; Registers used:
  3468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMMON   BANK0   BANK1
  3474 ;;      Params:         0       2       0
  3475 ;;      Locals:         0       2       0
  3476 ;;      Temps:          0       1       0
  3477 ;;      Totals:         0       5       0
  3478 ;;Total ram usage:        5 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    4
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_nrf24l01IsACK
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           
  3489                           ;psect for function _strcmp
  3490  05AF                     _strcmp:	
  3491                           
  3492                           ;incstack = 0
  3493                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  3494                           ;strcmp@s1 stored from wreg
  3495  05AF  0020               	movlb	0	; select bank0
  3496  05B0  00A4               	movwf	strcmp@s1
  3497  05B1  2DBA               	goto	l1530
  3498  05B2                     l1528:	
  3499  05B2  3001               	movlw	1
  3500  05B3  00A2               	movwf	??_strcmp
  3501  05B4  0822               	movf	??_strcmp,w
  3502  05B5  07A4               	addwf	strcmp@s1,f
  3503  05B6  3001               	movlw	1
  3504  05B7  07A0               	addwf	strcmp@s2,f
  3505  05B8  3000               	movlw	0
  3506  05B9  3DA1               	addwfc	strcmp@s2+1,f
  3507  05BA                     l1530:	
  3508  05BA  0824               	movf	strcmp@s1,w
  3509  05BB  0086               	movwf	6
  3510  05BC  0187               	clrf	7
  3511  05BD  0820               	movf	strcmp@s2,w
  3512  05BE  0084               	movwf	4
  3513  05BF  0821               	movf	strcmp@s2+1,w
  3514  05C0  0085               	movwf	5
  3515  05C1  0800               	movf	0,w	;code access
  3516  05C2  3AFF               	xorlw	255
  3517  05C3  3E01               	addlw	1
  3518  05C4  0701               	addwf	1,w
  3519  05C5  00A2               	movwf	??_strcmp
  3520  05C6  0822               	movf	??_strcmp,w
  3521  05C7  00A3               	movwf	strcmp@r
  3522  05C8  0823               	movf	strcmp@r,w
  3523  05C9  1D03               	btfss	3,2
  3524  05CA  2DD1               	goto	l1534
  3525  05CB  0824               	movf	strcmp@s1,w
  3526  05CC  0086               	movwf	6
  3527  05CD  0187               	clrf	7
  3528  05CE  0801               	movf	1,w
  3529  05CF  1D03               	btfss	3,2
  3530  05D0  2DB2               	goto	l1528
  3531  05D1                     l1534:	
  3532  05D1  0823               	movf	strcmp@r,w
  3533  05D2  00A0               	movwf	?_strcmp
  3534  05D3  01A1               	clrf	?_strcmp+1
  3535  05D4  1BA0               	btfsc	?_strcmp,7
  3536  05D5  03A1               	decf	?_strcmp+1,f
  3537  05D6  0008               	return
  3538  05D7                     __end_of_strcmp:	
  3539                           
  3540                           	psect	text12
  3541  03B4                     __ptext12:	
  3542 ;; *************** function _nrf24l01HandleRX *****************
  3543 ;; Defined at:
  3544 ;;		line 62 in file "nrf24l01.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  i               1   15[BANK0 ] unsigned char 
  3549 ;;  byte            1   14[BANK0 ] unsigned char 
  3550 ;;  width           1   13[BANK0 ] unsigned char 
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  1    wreg      void 
  3553 ;; Registers used:
  3554 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMMON   BANK0   BANK1
  3560 ;;      Params:         0       0       0
  3561 ;;      Locals:         0       3       0
  3562 ;;      Temps:          0       4       0
  3563 ;;      Totals:         0       7       0
  3564 ;;Total ram usage:        7 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:    6
  3567 ;; This function calls:
  3568 ;;		_nrf24l01SPISend
  3569 ;;		_nrf24l01Send
  3570 ;;		_read_flashmem
  3571 ;;		_strlen
  3572 ;; This function is called by:
  3573 ;;		_nrf24l01Service
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           
  3578                           ;psect for function _nrf24l01HandleRX
  3579  03B4                     _nrf24l01HandleRX:	
  3580                           
  3581                           ;nrf24l01.c: 65: unsigned char byte;
  3582                           ;nrf24l01.c: 66: unsigned char i;
  3583                           ;nrf24l01.c: 68: unsigned char width = nrf24l01Send(0b01100000, 0);
  3584                           
  3585                           ;incstack = 0
  3586                           ; Regs used in _nrf24l01HandleRX: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3587  03B4  01F1               	clrf	nrf24l01Send@data
  3588  03B5  3060               	movlw	96
  3589  03B6  26B8               	fcall	_nrf24l01Send
  3590  03B7  0020               	movlb	0	; select bank0
  3591  03B8  00A9               	movwf	??_nrf24l01HandleRX
  3592  03B9  0829               	movf	??_nrf24l01HandleRX,w
  3593  03BA  00AD               	movwf	nrf24l01HandleRX@width
  3594                           
  3595                           ;nrf24l01.c: 70: i = 0;
  3596  03BB  01AF               	clrf	nrf24l01HandleRX@i
  3597  03BC                     l1644:	
  3598                           ;nrf24l01.c: 71: while (i < width){
  3599                           
  3600  03BC  082D               	movf	nrf24l01HandleRX@width,w
  3601  03BD  022F               	subwf	nrf24l01HandleRX@i,w
  3602  03BE  1803               	btfsc	3,0
  3603  03BF  2BF8               	goto	l1652
  3604                           
  3605                           ;nrf24l01.c: 72: byte = nrf24l01SPISend(0);
  3606  03C0  3000               	movlw	0
  3607  03C1  26CF               	fcall	_nrf24l01SPISend
  3608  03C2  0020               	movlb	0	; select bank0
  3609  03C3  00A9               	movwf	??_nrf24l01HandleRX
  3610  03C4  0829               	movf	??_nrf24l01HandleRX,w
  3611  03C5  00AE               	movwf	nrf24l01HandleRX@byte
  3612                           
  3613                           ;nrf24l01.c: 74: if (byte == '/'){
  3614  03C6  302F               	movlw	47
  3615  03C7  062E               	xorwf	nrf24l01HandleRX@byte,w
  3616  03C8  1903               	btfsc	3,2
  3617  03C9  2BF8               	goto	l1652
  3618                           
  3619                           ;nrf24l01.c: 76: }
  3620                           ;nrf24l01.c: 78: if (byte != read_flashmem( (unsigned) 0 + i)){
  3621                           
  3622                           ;nrf24l01.c: 75: break;
  3623  03CA  082F               	movf	nrf24l01HandleRX@i,w
  3624  03CB  00A9               	movwf	??_nrf24l01HandleRX
  3625  03CC  01AA               	clrf	??_nrf24l01HandleRX+1
  3626  03CD  0829               	movf	??_nrf24l01HandleRX,w
  3627  03CE  00A0               	movwf	read_flashmem@offset
  3628  03CF  082A               	movf	??_nrf24l01HandleRX+1,w
  3629  03D0  00A1               	movwf	read_flashmem@offset+1
  3630  03D1  24F2               	fcall	_read_flashmem
  3631  03D2  0020               	movlb	0	; select bank0
  3632  03D3  082E               	movf	nrf24l01HandleRX@byte,w
  3633  03D4  00AB               	movwf	??_nrf24l01HandleRX+2
  3634  03D5  01AC               	clrf	??_nrf24l01HandleRX+3
  3635  03D6  0821               	movf	?_read_flashmem+1,w
  3636  03D7  062C               	xorwf	??_nrf24l01HandleRX+3,w
  3637  03D8  1D03               	skipz
  3638  03D9  2BDC               	goto	u915
  3639  03DA  0820               	movf	?_read_flashmem,w
  3640  03DB  062B               	xorwf	??_nrf24l01HandleRX+2,w
  3641  03DC                     u915:	
  3642  03DC  1D03               	btfss	3,2
  3643  03DD  0008               	return
  3644                           
  3645                           ;nrf24l01.c: 80: }
  3646                           ;nrf24l01.c: 82: i++;
  3647                           
  3648                           ;nrf24l01.c: 79: return;
  3649  03DE  3001               	movlw	1
  3650  03DF  00A9               	movwf	??_nrf24l01HandleRX
  3651  03E0  0829               	movf	??_nrf24l01HandleRX,w
  3652  03E1  07AF               	addwf	nrf24l01HandleRX@i,f
  3653  03E2  2BBC               	goto	l1644
  3654  03E3                     l1646:	
  3655                           ;nrf24l01.c: 83: }
  3656                           ;nrf24l01.c: 85: while (i < width){
  3657                           
  3658                           
  3659                           ;nrf24l01.c: 86: byte = nrf24l01SPISend(0);
  3660  03E3  3000               	movlw	0
  3661  03E4  26CF               	fcall	_nrf24l01SPISend
  3662  03E5  0020               	movlb	0	; select bank0
  3663  03E6  00A9               	movwf	??_nrf24l01HandleRX
  3664  03E7  0829               	movf	??_nrf24l01HandleRX,w
  3665  03E8  00AE               	movwf	nrf24l01HandleRX@byte
  3666                           
  3667                           ;nrf24l01.c: 87: string[strlen(string)] = byte;
  3668  03E9  082E               	movf	nrf24l01HandleRX@byte,w
  3669  03EA  00A9               	movwf	??_nrf24l01HandleRX
  3670  03EB  304E               	movlw	(low (_string| 0))& (0+255)
  3671  03EC  25D7               	fcall	_strlen
  3672  03ED  0020               	movlb	0	; select bank0
  3673  03EE  0820               	movf	?_strlen,w
  3674  03EF  3E4E               	addlw	(low (_string| 0))& (0+255)
  3675  03F0  0086               	movwf	6
  3676  03F1  0187               	clrf	7
  3677  03F2  0829               	movf	??_nrf24l01HandleRX,w
  3678  03F3  0081               	movwf	1
  3679                           
  3680                           ;nrf24l01.c: 88: i++;
  3681  03F4  3001               	movlw	1
  3682  03F5  00A9               	movwf	??_nrf24l01HandleRX
  3683  03F6  0829               	movf	??_nrf24l01HandleRX,w
  3684  03F7  07AF               	addwf	nrf24l01HandleRX@i,f
  3685  03F8                     l1652:	
  3686  03F8  082D               	movf	nrf24l01HandleRX@width,w
  3687  03F9  022F               	subwf	nrf24l01HandleRX@i,w
  3688  03FA  1803               	btfsc	3,0
  3689  03FB  0008               	return
  3690  03FC  2BE3               	goto	l1646
  3691  03FD                     __end_of_nrf24l01HandleRX:	
  3692                           
  3693                           	psect	text13
  3694  05D7                     __ptext13:	
  3695 ;; *************** function _strlen *****************
  3696 ;; Defined at:
  3697 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  s               1    wreg     PTR const unsigned char 
  3700 ;;		 -> string(16), 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  3703 ;;		 -> string(16), 
  3704 ;;  cp              1    6[BANK0 ] PTR const unsigned char 
  3705 ;;		 -> string(16), 
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  2    0[BANK0 ] unsigned int 
  3708 ;; Registers used:
  3709 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMMON   BANK0   BANK1
  3715 ;;      Params:         0       2       0
  3716 ;;      Locals:         0       2       0
  3717 ;;      Temps:          0       4       0
  3718 ;;      Totals:         0       8       0
  3719 ;;Total ram usage:        8 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    4
  3722 ;; This function calls:
  3723 ;;		Nothing
  3724 ;; This function is called by:
  3725 ;;		_loop
  3726 ;;		_nrf24l01HandleRX
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           
  3731                           ;psect for function _strlen
  3732  05D7                     _strlen:	
  3733                           
  3734                           ;incstack = 0
  3735                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  3736                           ;strlen@s stored from wreg
  3737  05D7  0020               	movlb	0	; select bank0
  3738  05D8  00A7               	movwf	strlen@s
  3739  05D9  0827               	movf	strlen@s,w
  3740  05DA  00A2               	movwf	??_strlen
  3741  05DB  0822               	movf	??_strlen,w
  3742  05DC  00A6               	movwf	strlen@cp
  3743  05DD                     l1520:	
  3744  05DD  0826               	movf	strlen@cp,w
  3745  05DE  0086               	movwf	6
  3746  05DF  0187               	clrf	7
  3747  05E0  0801               	movf	1,w
  3748  05E1  1903               	btfsc	3,2
  3749  05E2  2DE8               	goto	l1522
  3750  05E3  3001               	movlw	1
  3751  05E4  00A2               	movwf	??_strlen
  3752  05E5  0822               	movf	??_strlen,w
  3753  05E6  07A6               	addwf	strlen@cp,f
  3754  05E7  2DDD               	goto	l1520
  3755  05E8                     l1522:	
  3756  05E8  0827               	movf	strlen@s,w
  3757  05E9  00A2               	movwf	??_strlen
  3758  05EA  3000               	movlw	0
  3759  05EB  00A3               	movwf	??_strlen+1
  3760  05EC  09A2               	comf	??_strlen,f
  3761  05ED  09A3               	comf	??_strlen+1,f
  3762  05EE  0AA2               	incf	??_strlen,f
  3763  05EF  1903               	skipnz
  3764  05F0  0AA3               	incf	??_strlen+1,f
  3765  05F1  0826               	movf	strlen@cp,w
  3766  05F2  00A4               	movwf	??_strlen+2
  3767  05F3  3000               	movlw	0
  3768  05F4  00A5               	movwf	??_strlen+3
  3769  05F5  0822               	movf	??_strlen,w
  3770  05F6  0724               	addwf	??_strlen+2,w
  3771  05F7  00A0               	movwf	?_strlen
  3772  05F8  0823               	movf	??_strlen+1,w
  3773  05F9  3D25               	addwfc	??_strlen+3,w
  3774  05FA  00A1               	movwf	?_strlen+1
  3775  05FB  0008               	return
  3776  05FC                     __end_of_strlen:	
  3777                           
  3778                           	psect	text14
  3779  03FD                     __ptext14:	
  3780 ;; *************** function _nrf24l01SendString *****************
  3781 ;; Defined at:
  3782 ;;		line 156 in file "nrf24l01.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  string          1    wreg     PTR unsigned char 
  3785 ;;		 -> string(16), 
  3786 ;;  waitForAck      1    9[BANK0 ] unsigned char 
  3787 ;; Auto vars:     Size  Location     Type
  3788 ;;  string          1   14[BANK0 ] PTR unsigned char 
  3789 ;;		 -> string(16), 
  3790 ;;  i               1   15[BANK0 ] unsigned char 
  3791 ;;  btye            1   13[BANK0 ] unsigned char 
  3792 ;; Return value:  Size  Location     Type
  3793 ;;                  1    wreg      void 
  3794 ;; Registers used:
  3795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3796 ;; Tracked objects:
  3797 ;;		On entry : 0/0
  3798 ;;		On exit  : 0/0
  3799 ;;		Unchanged: 0/0
  3800 ;; Data sizes:     COMMON   BANK0   BANK1
  3801 ;;      Params:         0       1       0
  3802 ;;      Locals:         0       3       0
  3803 ;;      Temps:          0       3       0
  3804 ;;      Totals:         0       7       0
  3805 ;;Total ram usage:        7 bytes
  3806 ;; Hardware stack levels used:    1
  3807 ;; Hardware stack levels required when called:    7
  3808 ;; This function calls:
  3809 ;;		_nrf24l01SPIEnd
  3810 ;;		_nrf24l01SPISend
  3811 ;;		_nrf24l01SPIStart
  3812 ;;		_nrf24l01SetTransmitMode
  3813 ;;		_read_flashmem
  3814 ;; This function is called by:
  3815 ;;		_loop
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           
  3820                           ;psect for function _nrf24l01SendString
  3821  03FD                     _nrf24l01SendString:	
  3822                           
  3823                           ;incstack = 0
  3824                           ; Regs used in _nrf24l01SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3825                           ;nrf24l01SendString@string stored from wreg
  3826  03FD  0020               	movlb	0	; select bank0
  3827  03FE  00AE               	movwf	nrf24l01SendString@string
  3828                           
  3829                           ;nrf24l01.c: 158: if (nrf24l01Status.waitForTXACK){
  3830  03FF  184A               	btfsc	_nrf24l01Status+1,0
  3831  0400  0008               	return
  3832                           
  3833                           ;nrf24l01.c: 160: }
  3834                           ;nrf24l01.c: 162: unsigned char btye;
  3835                           ;nrf24l01.c: 163: unsigned char i;
  3836                           ;nrf24l01.c: 165: nrf24l01SetTransmitMode();
  3837                           
  3838                           ;nrf24l01.c: 159: return;
  3839  0401  263C               	fcall	_nrf24l01SetTransmitMode
  3840                           
  3841                           ;nrf24l01.c: 167: nrf24l01SPIStart();
  3842  0402  26E9               	fcall	_nrf24l01SPIStart
  3843                           
  3844                           ;nrf24l01.c: 169: nrf24l01SPISend(0b10100000);
  3845  0403  30A0               	movlw	160
  3846  0404  26CF               	fcall	_nrf24l01SPISend
  3847                           
  3848                           ;nrf24l01.c: 171: i = 0;
  3849  0405  0020               	movlb	0	; select bank0
  3850  0406  01AF               	clrf	nrf24l01SendString@i
  3851  0407                     l1734:	
  3852                           ;nrf24l01.c: 172: while (1){
  3853                           
  3854                           
  3855                           ;nrf24l01.c: 173: btye = read_flashmem((unsigned) 0 + i++);
  3856  0407  0020               	movlb	0	; select bank0
  3857  0408  082F               	movf	nrf24l01SendString@i,w
  3858  0409  00AA               	movwf	??_nrf24l01SendString
  3859  040A  01AB               	clrf	??_nrf24l01SendString+1
  3860  040B  082A               	movf	??_nrf24l01SendString,w
  3861  040C  00A0               	movwf	read_flashmem@offset
  3862  040D  082B               	movf	??_nrf24l01SendString+1,w
  3863  040E  00A1               	movwf	read_flashmem@offset+1
  3864  040F  24F2               	fcall	_read_flashmem
  3865  0410  0020               	movlb	0	; select bank0
  3866  0411  0820               	movf	?_read_flashmem,w
  3867  0412  00AC               	movwf	??_nrf24l01SendString+2
  3868  0413  082C               	movf	??_nrf24l01SendString+2,w
  3869  0414  00AD               	movwf	nrf24l01SendString@btye
  3870  0415  3001               	movlw	1
  3871  0416  00AA               	movwf	??_nrf24l01SendString
  3872  0417  082A               	movf	??_nrf24l01SendString,w
  3873  0418  07AF               	addwf	nrf24l01SendString@i,f
  3874                           
  3875                           ;nrf24l01.c: 175: if (btye == '\0'){
  3876  0419  082D               	movf	nrf24l01SendString@btye,w
  3877  041A  1903               	btfsc	3,2
  3878  041B  2C1F               	goto	l1744
  3879                           
  3880                           ;nrf24l01.c: 177: }
  3881                           ;nrf24l01.c: 179: nrf24l01SPISend(btye);
  3882                           
  3883                           ;nrf24l01.c: 176: break;
  3884  041C  082D               	movf	nrf24l01SendString@btye,w
  3885  041D  26CF               	fcall	_nrf24l01SPISend
  3886  041E  2C07               	goto	l1734
  3887  041F                     l1744:	
  3888                           
  3889                           ;nrf24l01.c: 180: }
  3890                           ;nrf24l01.c: 182: for (i = 0; string[i] != '\0'; i++){
  3891  041F  0020               	movlb	0	; select bank0
  3892  0420  01AF               	clrf	nrf24l01SendString@i
  3893  0421                     l1750:	
  3894  0421  082F               	movf	nrf24l01SendString@i,w
  3895  0422  072E               	addwf	nrf24l01SendString@string,w
  3896  0423  00AA               	movwf	??_nrf24l01SendString
  3897  0424  082A               	movf	??_nrf24l01SendString,w
  3898  0425  0086               	movwf	6
  3899  0426  0187               	clrf	7
  3900  0427  0801               	movf	1,w
  3901  0428  1903               	btfsc	3,2
  3902  0429  2C38               	goto	l1752
  3903                           
  3904                           ;nrf24l01.c: 183: nrf24l01SPISend(string[i]);
  3905  042A  082F               	movf	nrf24l01SendString@i,w
  3906  042B  072E               	addwf	nrf24l01SendString@string,w
  3907  042C  00AA               	movwf	??_nrf24l01SendString
  3908  042D  082A               	movf	??_nrf24l01SendString,w
  3909  042E  0086               	movwf	6
  3910  042F  0187               	clrf	7
  3911  0430  0801               	movf	1,w
  3912  0431  26CF               	fcall	_nrf24l01SPISend
  3913  0432  3001               	movlw	1
  3914  0433  0020               	movlb	0	; select bank0
  3915  0434  00AA               	movwf	??_nrf24l01SendString
  3916  0435  082A               	movf	??_nrf24l01SendString,w
  3917  0436  07AF               	addwf	nrf24l01SendString@i,f
  3918  0437  2C21               	goto	l1750
  3919  0438                     l1752:	
  3920                           
  3921                           ;nrf24l01.c: 184: }
  3922                           ;nrf24l01.c: 186: nrf24l01SPIEnd();
  3923  0438  26F0               	fcall	_nrf24l01SPIEnd
  3924                           
  3925                           ;nrf24l01.c: 188: PORTAbits.RA0 = 1;
  3926  0439  0020               	movlb	0	; select bank0
  3927  043A  140C               	bsf	12,0	;volatile
  3928                           
  3929                           ;nrf24l01.c: 190: _delay((unsigned long)((15)*(16000000/4000000.0)));
  3930  043B  3014               	movlw	20
  3931  043C                     u1387:	
  3932  043C  0B89               	decfsz	9,f
  3933  043D  2C3C               	goto	u1387
  3934                           
  3935                           ;nrf24l01.c: 192: PORTAbits.RA0 = 0;
  3936  043E  0020               	movlb	0	; select bank0
  3937  043F  100C               	bcf	12,0	;volatile
  3938                           
  3939                           ;nrf24l01.c: 194: nrf24l01Status.waitForTXACK = waitForAck;
  3940  0440  0829               	movf	nrf24l01SendString@waitForAck,w
  3941  0441  3901               	andlw	1
  3942  0442  104A               	bcf	_nrf24l01Status+1,0
  3943  0443  1D03               	skipz
  3944  0444  144A               	bsf	_nrf24l01Status+1,0
  3945  0445  0008               	return
  3946  0446                     __end_of_nrf24l01SendString:	
  3947                           
  3948                           	psect	text15
  3949  04F2                     __ptext15:	
  3950 ;; *************** function _read_flashmem *****************
  3951 ;; Defined at:
  3952 ;;		line 61 in file "flash.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;  offset          2    0[BANK0 ] unsigned int 
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  address         2    7[BANK0 ] unsigned int 
  3957 ;;  result          2    5[BANK0 ] unsigned int 
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  2    0[BANK0 ] unsigned int 
  3960 ;; Registers used:
  3961 ;;		wreg, status,2, status,0
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMMON   BANK0   BANK1
  3967 ;;      Params:         0       2       0
  3968 ;;      Locals:         0       4       0
  3969 ;;      Temps:          0       3       0
  3970 ;;      Totals:         0       9       0
  3971 ;;Total ram usage:        9 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; Hardware stack levels required when called:    4
  3974 ;; This function calls:
  3975 ;;		Nothing
  3976 ;; This function is called by:
  3977 ;;		_loop
  3978 ;;		_main
  3979 ;;		_nrf24l01HandleRX
  3980 ;;		_nrf24l01SendString
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           
  3985                           ;psect for function _read_flashmem
  3986  04F2                     _read_flashmem:	
  3987                           
  3988                           ;flash.c: 63: unsigned int address;
  3989                           ;flash.c: 65: INTCONbits.GIE = 0;
  3990                           
  3991                           ;incstack = 0
  3992                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  3993  04F2  138B               	bcf	11,7	;volatile
  3994                           
  3995                           ;flash.c: 67: PMCON1 = 0x00;
  3996  04F3  0023               	movlb	3	; select bank3
  3997  04F4  0195               	clrf	21	;volatile
  3998                           
  3999                           ;flash.c: 69: address = (0x800U-32) + offset;
  4000  04F5  0020               	movlb	0	; select bank0
  4001  04F6  0820               	movf	read_flashmem@offset,w
  4002  04F7  3EE0               	addlw	224
  4003  04F8  00A7               	movwf	read_flashmem@address
  4004  04F9  3007               	movlw	7
  4005  04FA  3D21               	addwfc	read_flashmem@offset+1,w
  4006  04FB  00A8               	movwf	read_flashmem@address+1
  4007                           
  4008                           ;flash.c: 70: PMADRL = (char) (address >> 0);
  4009  04FC  0827               	movf	read_flashmem@address,w
  4010  04FD  0023               	movlb	3	; select bank3
  4011  04FE  0091               	movwf	17	;volatile
  4012                           
  4013                           ;flash.c: 71: PMADRH = (char) (address >> 8);
  4014  04FF  0020               	movlb	0	; select bank0
  4015  0500  0828               	movf	read_flashmem@address+1,w
  4016  0501  0023               	movlb	3	; select bank3
  4017  0502  0092               	movwf	18	;volatile
  4018                           
  4019                           ;flash.c: 73: PMCON1bits.RD = 1;
  4020  0503  1415               	bsf	21,0	;volatile
  4021                           
  4022                           ;flash.c: 75: __nop();
  4023  0504  0000               	nop
  4024                           
  4025                           ;flash.c: 76: __nop();
  4026  0505  0000               	nop
  4027                           
  4028                           ;flash.c: 78: unsigned int result = 0;
  4029  0506  0020               	movlb	0	; select bank0
  4030  0507  01A5               	clrf	read_flashmem@result
  4031  0508  01A6               	clrf	read_flashmem@result+1
  4032                           
  4033                           ;flash.c: 79: result = PMDATL;
  4034  0509  0023               	movlb	3	; select bank3
  4035  050A  0813               	movf	19,w	;volatile
  4036  050B  0020               	movlb	0	; select bank0
  4037  050C  00A2               	movwf	??_read_flashmem
  4038  050D  01A3               	clrf	??_read_flashmem+1
  4039  050E  0822               	movf	??_read_flashmem,w
  4040  050F  00A5               	movwf	read_flashmem@result
  4041  0510  0823               	movf	??_read_flashmem+1,w
  4042  0511  00A6               	movwf	read_flashmem@result+1
  4043                           
  4044                           ;flash.c: 80: result|= ( (unsigned) (PMDATH) << 8);
  4045  0512  0023               	movlb	3	; select bank3
  4046  0513  0814               	movf	20,w	;volatile
  4047  0514  0020               	movlb	0	; select bank0
  4048  0515  00A2               	movwf	??_read_flashmem
  4049  0516  01A3               	clrf	??_read_flashmem+1
  4050  0517  0822               	movf	??_read_flashmem,w
  4051  0518  00A3               	movwf	??_read_flashmem+1
  4052  0519  01A2               	clrf	??_read_flashmem
  4053  051A  0822               	movf	??_read_flashmem,w
  4054  051B  04A5               	iorwf	read_flashmem@result,f
  4055  051C  0823               	movf	??_read_flashmem+1,w
  4056  051D  04A6               	iorwf	read_flashmem@result+1,f
  4057                           
  4058                           ;flash.c: 82: INTCONbits.GIE = 1;
  4059  051E  178B               	bsf	11,7	;volatile
  4060                           
  4061                           ;flash.c: 84: return result;
  4062  051F  0826               	movf	read_flashmem@result+1,w
  4063  0520  00A1               	movwf	?_read_flashmem+1
  4064  0521  0825               	movf	read_flashmem@result,w
  4065  0522  00A0               	movwf	?_read_flashmem
  4066  0523  0008               	return
  4067  0524                     __end_of_read_flashmem:	
  4068                           
  4069                           	psect	text16
  4070  063C                     __ptext16:	
  4071 ;; *************** function _nrf24l01SetTransmitMode *****************
  4072 ;; Defined at:
  4073 ;;		line 24 in file "nrf24l01.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;		None
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  config          1    1[BANK0 ] struct .
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0, pclath, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1
  4087 ;;      Params:         0       0       0
  4088 ;;      Locals:         0       1       0
  4089 ;;      Temps:          0       1       0
  4090 ;;      Totals:         0       2       0
  4091 ;;Total ram usage:        2 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    6
  4094 ;; This function calls:
  4095 ;;		_nrf24l01Send
  4096 ;; This function is called by:
  4097 ;;		_nrf24l01SendString
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           
  4102                           ;psect for function _nrf24l01SetTransmitMode
  4103  063C                     _nrf24l01SetTransmitMode:	
  4104                           
  4105                           ;nrf24l01.c: 27: if (nrf24l01Status.waitForTXACK){
  4106                           
  4107                           ;incstack = 0
  4108                           ; Regs used in _nrf24l01SetTransmitMode: [wreg+status,2+status,0+pclath+cstack]
  4109  063C  0020               	movlb	0	; select bank0
  4110  063D  184A               	btfsc	_nrf24l01Status+1,0
  4111  063E  0008               	return
  4112                           
  4113                           ;nrf24l01.c: 29: }
  4114                           ;nrf24l01.c: 31: PORTAbits.RA0 = 0;
  4115                           
  4116                           ;nrf24l01.c: 28: return;
  4117  063F  100C               	bcf	12,0	;volatile
  4118                           
  4119                           ;nrf24l01.c: 33: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4120  0640  30A0               	movlw	160
  4121  0641                     u1397:	
  4122  0641  3200               	nop2
  4123  0642  0B89               	decfsz	9,f
  4124  0643  2E41               	goto	u1397
  4125                           
  4126                           ;nrf24l01.c: 35: n_CONFIG_t config;
  4127                           ;nrf24l01.c: 36: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  4128  0644  01F1               	clrf	nrf24l01Send@data
  4129  0645  3000               	movlw	0
  4130  0646  26B8               	fcall	_nrf24l01Send
  4131  0647  0020               	movlb	0	; select bank0
  4132  0648  00A0               	movwf	??_nrf24l01SetTransmitMode
  4133  0649  0820               	movf	??_nrf24l01SetTransmitMode,w
  4134  064A  00A1               	movwf	nrf24l01SetTransmitMode@config
  4135                           
  4136                           ;nrf24l01.c: 37: if (config.PRIM_RX == 1){
  4137  064B  1C21               	btfss	nrf24l01SetTransmitMode@config,0
  4138  064C  0008               	return
  4139                           
  4140                           ;nrf24l01.c: 38: config.PRIM_RX = 0;
  4141  064D  1021               	bcf	nrf24l01SetTransmitMode@config,0
  4142                           
  4143                           ;nrf24l01.c: 39: nrf24l01Send(0b00100000 | 0x00, config.byte);
  4144  064E  0821               	movf	nrf24l01SetTransmitMode@config,w
  4145  064F  00A0               	movwf	??_nrf24l01SetTransmitMode
  4146  0650  0820               	movf	??_nrf24l01SetTransmitMode,w
  4147  0651  00F1               	movwf	nrf24l01Send@data
  4148  0652  3020               	movlw	32
  4149  0653  26B8               	fcall	_nrf24l01Send
  4150                           
  4151                           ;nrf24l01.c: 40: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4152  0654  30A0               	movlw	160
  4153  0655                     u1407:	
  4154  0655  3200               	nop2
  4155  0656  0B89               	decfsz	9,f
  4156  0657  2E55               	goto	u1407
  4157  0658  0008               	return
  4158  0659                     __end_of_nrf24l01SetTransmitMode:	
  4159                           
  4160                           	psect	text17
  4161  069A                     __ptext17:	
  4162 ;; *************** function __itoa *****************
  4163 ;; Defined at:
  4164 ;;		line 51 in file "interface.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  buffer          1    wreg     PTR unsigned char 
  4167 ;;		 -> string(16), 
  4168 ;;  number          2   24[BANK0 ] unsigned int 
  4169 ;;  base            1   26[BANK0 ] unsigned char 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  buffer          1   29[BANK0 ] PTR unsigned char 
  4172 ;;		 -> string(16), 
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  1    wreg      void 
  4175 ;; Registers used:
  4176 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMMON   BANK0   BANK1
  4182 ;;      Params:         0       3       0
  4183 ;;      Locals:         0       1       0
  4184 ;;      Temps:          0       2       0
  4185 ;;      Totals:         0       6       0
  4186 ;;Total ram usage:        6 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; Hardware stack levels required when called:    7
  4189 ;; This function calls:
  4190 ;;		_itoa
  4191 ;; This function is called by:
  4192 ;;		_loop
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           
  4197                           ;psect for function __itoa
  4198  069A                     __itoa:	
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in __itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4202                           ;__itoa@buffer stored from wreg
  4203  069A  0020               	movlb	0	; select bank0
  4204  069B  00BD               	movwf	__itoa@buffer
  4205                           
  4206                           ;interface.c: 52: itoa(buffer, number, base);
  4207  069C  0839               	movf	__itoa@number+1,w
  4208  069D  00B2               	movwf	itoa@val+1
  4209  069E  0838               	movf	__itoa@number,w
  4210  069F  00B1               	movwf	itoa@val
  4211  06A0  083A               	movf	__itoa@base,w
  4212  06A1  00BB               	movwf	??__itoa
  4213  06A2  01BC               	clrf	??__itoa+1
  4214  06A3  083B               	movf	??__itoa,w
  4215  06A4  00B3               	movwf	itoa@base
  4216  06A5  083C               	movf	??__itoa+1,w
  4217  06A6  00B4               	movwf	itoa@base+1
  4218  06A7  083D               	movf	__itoa@buffer,w
  4219  06A8  25FC               	fcall	_itoa
  4220  06A9  0008               	return
  4221  06AA                     __end_of__itoa:	
  4222                           
  4223                           	psect	text18
  4224  05FC                     __ptext18:	
  4225 ;; *************** function _itoa *****************
  4226 ;; Defined at:
  4227 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;  buf             1    wreg     PTR unsigned char 
  4230 ;;		 -> string(16), 
  4231 ;;  val             2   17[BANK0 ] int 
  4232 ;;  base            2   19[BANK0 ] int 
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;  buf             1   23[BANK0 ] PTR unsigned char 
  4235 ;;		 -> string(16), 
  4236 ;;  cp              1   22[BANK0 ] PTR unsigned char 
  4237 ;;		 -> string(16), 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      PTR unsigned char 
  4240 ;; Registers used:
  4241 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1
  4247 ;;      Params:         0       4       0
  4248 ;;      Locals:         0       2       0
  4249 ;;      Temps:          0       1       0
  4250 ;;      Totals:         0       7       0
  4251 ;;Total ram usage:        7 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    6
  4254 ;; This function calls:
  4255 ;;		_utoa
  4256 ;; This function is called by:
  4257 ;;		__itoa
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function _itoa
  4263  05FC                     _itoa:	
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4267                           ;itoa@buf stored from wreg
  4268  05FC  0020               	movlb	0	; select bank0
  4269  05FD  00B7               	movwf	itoa@buf
  4270  05FE  0837               	movf	itoa@buf,w
  4271  05FF  00B5               	movwf	??_itoa
  4272  0600  0835               	movf	??_itoa,w
  4273  0601  00B6               	movwf	itoa@cp
  4274  0602  1FB2               	btfss	itoa@val+1,7
  4275  0603  2E14               	goto	l1592
  4276  0604  302D               	movlw	45
  4277  0605  00B5               	movwf	??_itoa
  4278  0606  0837               	movf	itoa@buf,w
  4279  0607  0086               	movwf	6
  4280  0608  0187               	clrf	7
  4281  0609  0835               	movf	??_itoa,w
  4282  060A  0081               	movwf	1
  4283  060B  3001               	movlw	1
  4284  060C  00B5               	movwf	??_itoa
  4285  060D  0835               	movf	??_itoa,w
  4286  060E  07B7               	addwf	itoa@buf,f
  4287  060F  09B1               	comf	itoa@val,f
  4288  0610  09B2               	comf	itoa@val+1,f
  4289  0611  0AB1               	incf	itoa@val,f
  4290  0612  1903               	skipnz
  4291  0613  0AB2               	incf	itoa@val+1,f
  4292  0614                     l1592:	
  4293  0614  0832               	movf	itoa@val+1,w
  4294  0615  00A9               	movwf	utoa@val+1
  4295  0616  0831               	movf	itoa@val,w
  4296  0617  00A8               	movwf	utoa@val
  4297  0618  0834               	movf	itoa@base+1,w
  4298  0619  00AB               	movwf	utoa@base+1
  4299  061A  0833               	movf	itoa@base,w
  4300  061B  00AA               	movwf	utoa@base
  4301  061C  0837               	movf	itoa@buf,w
  4302  061D  2305               	fcall	_utoa
  4303  061E  0008               	return
  4304  061F                     __end_of_itoa:	
  4305                           ;	Return value of _itoa is never used
  4306                           
  4307                           
  4308                           	psect	text19
  4309  0305                     __ptext19:	
  4310 ;; *************** function _utoa *****************
  4311 ;; Defined at:
  4312 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;  buf             1    wreg     PTR unsigned char 
  4315 ;;		 -> string(16), 
  4316 ;;  val             2    8[BANK0 ] unsigned int 
  4317 ;;  base            2   10[BANK0 ] int 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  4320 ;;		 -> string(16), 
  4321 ;;  v               2   13[BANK0 ] unsigned int 
  4322 ;;  c               1   15[BANK0 ] unsigned char 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  1    wreg      PTR unsigned char 
  4325 ;; Registers used:
  4326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMMON   BANK0   BANK1
  4332 ;;      Params:         0       4       0
  4333 ;;      Locals:         0       4       0
  4334 ;;      Temps:          0       1       0
  4335 ;;      Totals:         0       9       0
  4336 ;;Total ram usage:        9 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    5
  4339 ;; This function calls:
  4340 ;;		___lwdiv
  4341 ;;		___lwmod
  4342 ;; This function is called by:
  4343 ;;		_itoa
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           
  4348                           ;psect for function _utoa
  4349  0305                     _utoa:	
  4350                           
  4351                           ;incstack = 0
  4352                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4353                           ;utoa@buf stored from wreg
  4354  0305  0020               	movlb	0	; select bank0
  4355  0306  00B0               	movwf	utoa@buf
  4356  0307  0829               	movf	utoa@val+1,w
  4357  0308  00AE               	movwf	utoa@v+1
  4358  0309  0828               	movf	utoa@val,w
  4359  030A  00AD               	movwf	utoa@v
  4360  030B                     l1540:	
  4361  030B  082B               	movf	utoa@base+1,w
  4362  030C  00A1               	movwf	___lwdiv@divisor+1
  4363  030D  082A               	movf	utoa@base,w
  4364  030E  00A0               	movwf	___lwdiv@divisor
  4365  030F  082E               	movf	utoa@v+1,w
  4366  0310  00A3               	movwf	___lwdiv@dividend+1
  4367  0311  082D               	movf	utoa@v,w
  4368  0312  00A2               	movwf	___lwdiv@dividend
  4369  0313  24BD               	fcall	___lwdiv
  4370  0314  0020               	movlb	0	; select bank0
  4371  0315  0821               	movf	?___lwdiv+1,w
  4372  0316  00AE               	movwf	utoa@v+1
  4373  0317  0820               	movf	?___lwdiv,w
  4374  0318  00AD               	movwf	utoa@v
  4375  0319  3001               	movlw	1
  4376  031A  00AC               	movwf	??_utoa
  4377  031B  082C               	movf	??_utoa,w
  4378  031C  07B0               	addwf	utoa@buf,f
  4379  031D  082D               	movf	utoa@v,w
  4380  031E  042E               	iorwf	utoa@v+1,w
  4381  031F  1D03               	btfss	3,2
  4382  0320  2B0B               	goto	l1540
  4383  0321  0830               	movf	utoa@buf,w
  4384  0322  0086               	movwf	6
  4385  0323  0187               	clrf	7
  4386  0324  0181               	clrf	1
  4387  0325  3001               	movlw	1
  4388  0326  02B0               	subwf	utoa@buf,f
  4389  0327                     l1550:	
  4390  0327  082B               	movf	utoa@base+1,w
  4391  0328  00A1               	movwf	___lwmod@divisor+1
  4392  0329  082A               	movf	utoa@base,w
  4393  032A  00A0               	movwf	___lwmod@divisor
  4394  032B  0829               	movf	utoa@val+1,w
  4395  032C  00A3               	movwf	___lwmod@dividend+1
  4396  032D  0828               	movf	utoa@val,w
  4397  032E  00A2               	movwf	___lwmod@dividend
  4398  032F  2582               	fcall	___lwmod
  4399  0330  0020               	movlb	0	; select bank0
  4400  0331  0820               	movf	?___lwmod,w
  4401  0332  00AC               	movwf	??_utoa
  4402  0333  082C               	movf	??_utoa,w
  4403  0334  00AF               	movwf	utoa@c
  4404  0335  082B               	movf	utoa@base+1,w
  4405  0336  00A1               	movwf	___lwdiv@divisor+1
  4406  0337  082A               	movf	utoa@base,w
  4407  0338  00A0               	movwf	___lwdiv@divisor
  4408  0339  0829               	movf	utoa@val+1,w
  4409  033A  00A3               	movwf	___lwdiv@dividend+1
  4410  033B  0828               	movf	utoa@val,w
  4411  033C  00A2               	movwf	___lwdiv@dividend
  4412  033D  24BD               	fcall	___lwdiv
  4413  033E  0020               	movlb	0	; select bank0
  4414  033F  0821               	movf	?___lwdiv+1,w
  4415  0340  00A9               	movwf	utoa@val+1
  4416  0341  0820               	movf	?___lwdiv,w
  4417  0342  00A8               	movwf	utoa@val
  4418  0343  300A               	movlw	10
  4419  0344  022F               	subwf	utoa@c,w
  4420  0345  1C03               	skipc
  4421  0346  2B4B               	goto	l555
  4422  0347  3007               	movlw	7
  4423  0348  00AC               	movwf	??_utoa
  4424  0349  082C               	movf	??_utoa,w
  4425  034A  07AF               	addwf	utoa@c,f
  4426  034B                     l555:	
  4427  034B  3030               	movlw	48
  4428  034C  00AC               	movwf	??_utoa
  4429  034D  082C               	movf	??_utoa,w
  4430  034E  07AF               	addwf	utoa@c,f
  4431  034F  082F               	movf	utoa@c,w
  4432  0350  00AC               	movwf	??_utoa
  4433  0351  0830               	movf	utoa@buf,w
  4434  0352  0086               	movwf	6
  4435  0353  0187               	clrf	7
  4436  0354  082C               	movf	??_utoa,w
  4437  0355  0081               	movwf	1
  4438  0356  3001               	movlw	1
  4439  0357  02B0               	subwf	utoa@buf,f
  4440  0358  0828               	movf	utoa@val,w
  4441  0359  0429               	iorwf	utoa@val+1,w
  4442  035A  1D03               	btfss	3,2
  4443  035B  2B27               	goto	l1550
  4444                           
  4445                           ;	Return value of _utoa is never used
  4446  035C  3001               	movlw	1
  4447  035D  00AC               	movwf	??_utoa
  4448  035E  082C               	movf	??_utoa,w
  4449  035F  07B0               	addwf	utoa@buf,f
  4450  0360  0008               	return
  4451  0361                     __end_of_utoa:	
  4452                           
  4453                           	psect	text20
  4454  0582                     __ptext20:	
  4455 ;; *************** function ___lwmod *****************
  4456 ;; Defined at:
  4457 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  divisor         2    0[BANK0 ] unsigned int 
  4460 ;;  dividend        2    2[BANK0 ] unsigned int 
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;  counter         1    5[BANK0 ] unsigned char 
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  2    0[BANK0 ] unsigned int 
  4465 ;; Registers used:
  4466 ;;		wreg, status,2, status,0
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMMON   BANK0   BANK1
  4472 ;;      Params:         0       4       0
  4473 ;;      Locals:         0       1       0
  4474 ;;      Temps:          0       1       0
  4475 ;;      Totals:         0       6       0
  4476 ;;Total ram usage:        6 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    4
  4479 ;; This function calls:
  4480 ;;		Nothing
  4481 ;; This function is called by:
  4482 ;;		_utoa
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           
  4487                           ;psect for function ___lwmod
  4488  0582                     ___lwmod:	
  4489                           
  4490                           ;incstack = 0
  4491                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4492  0582  0020               	movlb	0	; select bank0
  4493  0583  0820               	movf	___lwmod@divisor,w
  4494  0584  0421               	iorwf	___lwmod@divisor+1,w
  4495  0585  1903               	btfsc	3,2
  4496  0586  2DAA               	goto	l1484
  4497  0587  01A5               	clrf	___lwmod@counter
  4498  0588  0AA5               	incf	___lwmod@counter,f
  4499  0589                     l1474:	
  4500  0589  1BA1               	btfsc	___lwmod@divisor+1,7
  4501  058A  2D95               	goto	l1476
  4502  058B  3001               	movlw	1
  4503  058C                     u745:	
  4504  058C  35A0               	lslf	___lwmod@divisor,f
  4505  058D  0DA1               	rlf	___lwmod@divisor+1,f
  4506  058E  0B89               	decfsz	9,f
  4507  058F  2D8C               	goto	u745
  4508  0590  3001               	movlw	1
  4509  0591  00A4               	movwf	??___lwmod
  4510  0592  0824               	movf	??___lwmod,w
  4511  0593  07A5               	addwf	___lwmod@counter,f
  4512  0594  2D89               	goto	l1474
  4513  0595                     l1476:	
  4514  0595  0821               	movf	___lwmod@divisor+1,w
  4515  0596  0223               	subwf	___lwmod@dividend+1,w
  4516  0597  1D03               	skipz
  4517  0598  2D9B               	goto	u765
  4518  0599  0820               	movf	___lwmod@divisor,w
  4519  059A  0222               	subwf	___lwmod@dividend,w
  4520  059B                     u765:	
  4521  059B  1C03               	skipc
  4522  059C  2DA1               	goto	l1480
  4523  059D  0820               	movf	___lwmod@divisor,w
  4524  059E  02A2               	subwf	___lwmod@dividend,f
  4525  059F  0821               	movf	___lwmod@divisor+1,w
  4526  05A0  3BA3               	subwfb	___lwmod@dividend+1,f
  4527  05A1                     l1480:	
  4528  05A1  3001               	movlw	1
  4529  05A2                     u775:	
  4530  05A2  36A1               	lsrf	___lwmod@divisor+1,f
  4531  05A3  0CA0               	rrf	___lwmod@divisor,f
  4532  05A4  0B89               	decfsz	9,f
  4533  05A5  2DA2               	goto	u775
  4534  05A6  3001               	movlw	1
  4535  05A7  02A5               	subwf	___lwmod@counter,f
  4536  05A8  1D03               	btfss	3,2
  4537  05A9  2D95               	goto	l1476
  4538  05AA                     l1484:	
  4539  05AA  0823               	movf	___lwmod@dividend+1,w
  4540  05AB  00A1               	movwf	?___lwmod+1
  4541  05AC  0822               	movf	___lwmod@dividend,w
  4542  05AD  00A0               	movwf	?___lwmod
  4543  05AE  0008               	return
  4544  05AF                     __end_of___lwmod:	
  4545                           
  4546                           	psect	text21
  4547  04BD                     __ptext21:	
  4548 ;; *************** function ___lwdiv *****************
  4549 ;; Defined at:
  4550 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  divisor         2    0[BANK0 ] unsigned int 
  4553 ;;  dividend        2    2[BANK0 ] unsigned int 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;  quotient        2    5[BANK0 ] unsigned int 
  4556 ;;  counter         1    7[BANK0 ] unsigned char 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  2    0[BANK0 ] unsigned int 
  4559 ;; Registers used:
  4560 ;;		wreg, status,2, status,0
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMMON   BANK0   BANK1
  4566 ;;      Params:         0       4       0
  4567 ;;      Locals:         0       3       0
  4568 ;;      Temps:          0       1       0
  4569 ;;      Totals:         0       8       0
  4570 ;;Total ram usage:        8 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    4
  4573 ;; This function calls:
  4574 ;;		Nothing
  4575 ;; This function is called by:
  4576 ;;		_utoa
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           
  4581                           ;psect for function ___lwdiv
  4582  04BD                     ___lwdiv:	
  4583                           
  4584                           ;incstack = 0
  4585                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4586  04BD  0020               	movlb	0	; select bank0
  4587  04BE  01A5               	clrf	___lwdiv@quotient
  4588  04BF  01A6               	clrf	___lwdiv@quotient+1
  4589  04C0  0820               	movf	___lwdiv@divisor,w
  4590  04C1  0421               	iorwf	___lwdiv@divisor+1,w
  4591  04C2  1903               	btfsc	3,2
  4592  04C3  2CED               	goto	l1462
  4593  04C4  01A7               	clrf	___lwdiv@counter
  4594  04C5  0AA7               	incf	___lwdiv@counter,f
  4595  04C6                     l1450:	
  4596  04C6  1BA1               	btfsc	___lwdiv@divisor+1,7
  4597  04C7  2CD2               	goto	l1452
  4598  04C8  3001               	movlw	1
  4599  04C9                     u675:	
  4600  04C9  35A0               	lslf	___lwdiv@divisor,f
  4601  04CA  0DA1               	rlf	___lwdiv@divisor+1,f
  4602  04CB  0B89               	decfsz	9,f
  4603  04CC  2CC9               	goto	u675
  4604  04CD  3001               	movlw	1
  4605  04CE  00A4               	movwf	??___lwdiv
  4606  04CF  0824               	movf	??___lwdiv,w
  4607  04D0  07A7               	addwf	___lwdiv@counter,f
  4608  04D1  2CC6               	goto	l1450
  4609  04D2                     l1452:	
  4610  04D2  3001               	movlw	1
  4611  04D3                     u695:	
  4612  04D3  35A5               	lslf	___lwdiv@quotient,f
  4613  04D4  0DA6               	rlf	___lwdiv@quotient+1,f
  4614  04D5  0B89               	decfsz	9,f
  4615  04D6  2CD3               	goto	u695
  4616  04D7  0821               	movf	___lwdiv@divisor+1,w
  4617  04D8  0223               	subwf	___lwdiv@dividend+1,w
  4618  04D9  1D03               	skipz
  4619  04DA  2CDD               	goto	u705
  4620  04DB  0820               	movf	___lwdiv@divisor,w
  4621  04DC  0222               	subwf	___lwdiv@dividend,w
  4622  04DD                     u705:	
  4623  04DD  1C03               	skipc
  4624  04DE  2CE4               	goto	l1458
  4625  04DF  0820               	movf	___lwdiv@divisor,w
  4626  04E0  02A2               	subwf	___lwdiv@dividend,f
  4627  04E1  0821               	movf	___lwdiv@divisor+1,w
  4628  04E2  3BA3               	subwfb	___lwdiv@dividend+1,f
  4629  04E3  1425               	bsf	___lwdiv@quotient,0
  4630  04E4                     l1458:	
  4631  04E4  3001               	movlw	1
  4632  04E5                     u715:	
  4633  04E5  36A1               	lsrf	___lwdiv@divisor+1,f
  4634  04E6  0CA0               	rrf	___lwdiv@divisor,f
  4635  04E7  0B89               	decfsz	9,f
  4636  04E8  2CE5               	goto	u715
  4637  04E9  3001               	movlw	1
  4638  04EA  02A7               	subwf	___lwdiv@counter,f
  4639  04EB  1D03               	btfss	3,2
  4640  04EC  2CD2               	goto	l1452
  4641  04ED                     l1462:	
  4642  04ED  0826               	movf	___lwdiv@quotient+1,w
  4643  04EE  00A1               	movwf	?___lwdiv+1
  4644  04EF  0825               	movf	___lwdiv@quotient,w
  4645  04F0  00A0               	movwf	?___lwdiv
  4646  04F1  0008               	return
  4647  04F2                     __end_of___lwdiv:	
  4648                           
  4649                           	psect	text22
  4650  0524                     __ptext22:	
  4651 ;; *************** function ___lmul *****************
  4652 ;; Defined at:
  4653 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  4654 ;; Parameters:    Size  Location     Type
  4655 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4656 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4657 ;; Auto vars:     Size  Location     Type
  4658 ;;  product         4    8[BANK0 ] unsigned long 
  4659 ;; Return value:  Size  Location     Type
  4660 ;;                  4    0[BANK0 ] unsigned long 
  4661 ;; Registers used:
  4662 ;;		wreg, status,2, status,0
  4663 ;; Tracked objects:
  4664 ;;		On entry : 0/0
  4665 ;;		On exit  : 0/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMMON   BANK0   BANK1
  4668 ;;      Params:         0       8       0
  4669 ;;      Locals:         0       4       0
  4670 ;;      Temps:          0       0       0
  4671 ;;      Totals:         0      12       0
  4672 ;;Total ram usage:       12 bytes
  4673 ;; Hardware stack levels used:    1
  4674 ;; Hardware stack levels required when called:    4
  4675 ;; This function calls:
  4676 ;;		Nothing
  4677 ;; This function is called by:
  4678 ;;		_loop
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           
  4683                           ;psect for function ___lmul
  4684  0524                     ___lmul:	
  4685                           
  4686                           ;incstack = 0
  4687                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4688  0524  3000               	movlw	0
  4689  0525  0020               	movlb	0	; select bank0
  4690  0526  00AB               	movwf	___lmul@product+3
  4691  0527  3000               	movlw	0
  4692  0528  00AA               	movwf	___lmul@product+2
  4693  0529  3000               	movlw	0
  4694  052A  00A9               	movwf	___lmul@product+1
  4695  052B  3000               	movlw	0
  4696  052C  00A8               	movwf	___lmul@product
  4697  052D                     l1872:	
  4698  052D  1C20               	btfss	___lmul@multiplier,0
  4699  052E  2D37               	goto	l1876
  4700  052F  0824               	movf	___lmul@multiplicand,w
  4701  0530  07A8               	addwf	___lmul@product,f
  4702  0531  0825               	movf	___lmul@multiplicand+1,w
  4703  0532  3DA9               	addwfc	___lmul@product+1,f
  4704  0533  0826               	movf	___lmul@multiplicand+2,w
  4705  0534  3DAA               	addwfc	___lmul@product+2,f
  4706  0535  0827               	movf	___lmul@multiplicand+3,w
  4707  0536  3DAB               	addwfc	___lmul@product+3,f
  4708  0537                     l1876:	
  4709  0537  3001               	movlw	1
  4710  0538                     u1085:	
  4711  0538  35A4               	lslf	___lmul@multiplicand,f
  4712  0539  0DA5               	rlf	___lmul@multiplicand+1,f
  4713  053A  0DA6               	rlf	___lmul@multiplicand+2,f
  4714  053B  0DA7               	rlf	___lmul@multiplicand+3,f
  4715  053C  0B89               	decfsz	9,f
  4716  053D  2D38               	goto	u1085
  4717  053E  3001               	movlw	1
  4718  053F                     u1095:	
  4719  053F  36A3               	lsrf	___lmul@multiplier+3,f
  4720  0540  0CA2               	rrf	___lmul@multiplier+2,f
  4721  0541  0CA1               	rrf	___lmul@multiplier+1,f
  4722  0542  0CA0               	rrf	___lmul@multiplier,f
  4723  0543  0B89               	decfsz	9,f
  4724  0544  2D3F               	goto	u1095
  4725  0545  0823               	movf	___lmul@multiplier+3,w
  4726  0546  0422               	iorwf	___lmul@multiplier+2,w
  4727  0547  0421               	iorwf	___lmul@multiplier+1,w
  4728  0548  0420               	iorwf	___lmul@multiplier,w
  4729  0549  1D03               	skipz
  4730  054A  2D2D               	goto	l1872
  4731  054B  082B               	movf	___lmul@product+3,w
  4732  054C  00A3               	movwf	?___lmul+3
  4733  054D  082A               	movf	___lmul@product+2,w
  4734  054E  00A2               	movwf	?___lmul+2
  4735  054F  0829               	movf	___lmul@product+1,w
  4736  0550  00A1               	movwf	?___lmul+1
  4737  0551  0828               	movf	___lmul@product,w
  4738  0552  00A0               	movwf	?___lmul
  4739  0553  0008               	return
  4740  0554                     __end_of___lmul:	
  4741                           
  4742                           	psect	text23
  4743  0361                     __ptext23:	
  4744 ;; *************** function ___lldiv *****************
  4745 ;; Defined at:
  4746 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  divisor         4    0[BANK0 ] unsigned long 
  4749 ;;  dividend        4    4[BANK0 ] unsigned long 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;  quotient        4    9[BANK0 ] unsigned long 
  4752 ;;  counter         1   13[BANK0 ] unsigned char 
  4753 ;; Return value:  Size  Location     Type
  4754 ;;                  4    0[BANK0 ] unsigned long 
  4755 ;; Registers used:
  4756 ;;		wreg, status,2, status,0
  4757 ;; Tracked objects:
  4758 ;;		On entry : 0/0
  4759 ;;		On exit  : 0/0
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:     COMMON   BANK0   BANK1
  4762 ;;      Params:         0       8       0
  4763 ;;      Locals:         0       5       0
  4764 ;;      Temps:          0       1       0
  4765 ;;      Totals:         0      14       0
  4766 ;;Total ram usage:       14 bytes
  4767 ;; Hardware stack levels used:    1
  4768 ;; Hardware stack levels required when called:    4
  4769 ;; This function calls:
  4770 ;;		Nothing
  4771 ;; This function is called by:
  4772 ;;		_loop
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           
  4777                           ;psect for function ___lldiv
  4778  0361                     ___lldiv:	
  4779                           
  4780                           ;incstack = 0
  4781                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4782  0361  3000               	movlw	0
  4783  0362  0020               	movlb	0	; select bank0
  4784  0363  00AC               	movwf	___lldiv@quotient+3
  4785  0364  3000               	movlw	0
  4786  0365  00AB               	movwf	___lldiv@quotient+2
  4787  0366  3000               	movlw	0
  4788  0367  00AA               	movwf	___lldiv@quotient+1
  4789  0368  3000               	movlw	0
  4790  0369  00A9               	movwf	___lldiv@quotient
  4791  036A  0823               	movf	___lldiv@divisor+3,w
  4792  036B  0422               	iorwf	___lldiv@divisor+2,w
  4793  036C  0421               	iorwf	___lldiv@divisor+1,w
  4794  036D  0420               	iorwf	___lldiv@divisor,w
  4795  036E  1903               	skipnz
  4796  036F  2BAB               	goto	l1904
  4797  0370  01AD               	clrf	___lldiv@counter
  4798  0371  0AAD               	incf	___lldiv@counter,f
  4799  0372                     l1890:	
  4800  0372  1BA3               	btfsc	___lldiv@divisor+3,7
  4801  0373  2B80               	goto	l1892
  4802  0374  3001               	movlw	1
  4803  0375                     u1125:	
  4804  0375  35A0               	lslf	___lldiv@divisor,f
  4805  0376  0DA1               	rlf	___lldiv@divisor+1,f
  4806  0377  0DA2               	rlf	___lldiv@divisor+2,f
  4807  0378  0DA3               	rlf	___lldiv@divisor+3,f
  4808  0379  0B89               	decfsz	9,f
  4809  037A  2B75               	goto	u1125
  4810  037B  3001               	movlw	1
  4811  037C  00A8               	movwf	??___lldiv
  4812  037D  0828               	movf	??___lldiv,w
  4813  037E  07AD               	addwf	___lldiv@counter,f
  4814  037F  2B72               	goto	l1890
  4815  0380                     l1892:	
  4816  0380  3001               	movlw	1
  4817  0381                     u1145:	
  4818  0381  35A9               	lslf	___lldiv@quotient,f
  4819  0382  0DAA               	rlf	___lldiv@quotient+1,f
  4820  0383  0DAB               	rlf	___lldiv@quotient+2,f
  4821  0384  0DAC               	rlf	___lldiv@quotient+3,f
  4822  0385  0B89               	decfsz	9,f
  4823  0386  2B81               	goto	u1145
  4824  0387  0823               	movf	___lldiv@divisor+3,w
  4825  0388  0227               	subwf	___lldiv@dividend+3,w
  4826  0389  1D03               	skipz
  4827  038A  2B95               	goto	u1155
  4828  038B  0822               	movf	___lldiv@divisor+2,w
  4829  038C  0226               	subwf	___lldiv@dividend+2,w
  4830  038D  1D03               	skipz
  4831  038E  2B95               	goto	u1155
  4832  038F  0821               	movf	___lldiv@divisor+1,w
  4833  0390  0225               	subwf	___lldiv@dividend+1,w
  4834  0391  1D03               	skipz
  4835  0392  2B95               	goto	u1155
  4836  0393  0820               	movf	___lldiv@divisor,w
  4837  0394  0224               	subwf	___lldiv@dividend,w
  4838  0395                     u1155:	
  4839  0395  1C03               	skipc
  4840  0396  2BA0               	goto	l1900
  4841  0397  0820               	movf	___lldiv@divisor,w
  4842  0398  02A4               	subwf	___lldiv@dividend,f
  4843  0399  0821               	movf	___lldiv@divisor+1,w
  4844  039A  3BA5               	subwfb	___lldiv@dividend+1,f
  4845  039B  0822               	movf	___lldiv@divisor+2,w
  4846  039C  3BA6               	subwfb	___lldiv@dividend+2,f
  4847  039D  0823               	movf	___lldiv@divisor+3,w
  4848  039E  3BA7               	subwfb	___lldiv@dividend+3,f
  4849  039F  1429               	bsf	___lldiv@quotient,0
  4850  03A0                     l1900:	
  4851  03A0  3001               	movlw	1
  4852  03A1                     u1165:	
  4853  03A1  36A3               	lsrf	___lldiv@divisor+3,f
  4854  03A2  0CA2               	rrf	___lldiv@divisor+2,f
  4855  03A3  0CA1               	rrf	___lldiv@divisor+1,f
  4856  03A4  0CA0               	rrf	___lldiv@divisor,f
  4857  03A5  0B89               	decfsz	9,f
  4858  03A6  2BA1               	goto	u1165
  4859  03A7  3001               	movlw	1
  4860  03A8  02AD               	subwf	___lldiv@counter,f
  4861  03A9  1D03               	btfss	3,2
  4862  03AA  2B80               	goto	l1892
  4863  03AB                     l1904:	
  4864  03AB  082C               	movf	___lldiv@quotient+3,w
  4865  03AC  00A3               	movwf	?___lldiv+3
  4866  03AD  082B               	movf	___lldiv@quotient+2,w
  4867  03AE  00A2               	movwf	?___lldiv+2
  4868  03AF  082A               	movf	___lldiv@quotient+1,w
  4869  03B0  00A1               	movwf	?___lldiv+1
  4870  03B1  0829               	movf	___lldiv@quotient,w
  4871  03B2  00A0               	movwf	?___lldiv
  4872  03B3  0008               	return
  4873  03B4                     __end_of___lldiv:	
  4874                           
  4875                           	psect	intentry
  4876  0004                     __pintentry:	
  4877 ;; *************** function _ISR *****************
  4878 ;; Defined at:
  4879 ;;		line 32 in file "main.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;		None
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;  result          2    9[COMMON] int 
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  1    wreg      void 
  4886 ;; Registers used:
  4887 ;;		wreg, status,2, status,0, pclath, cstack
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/0
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMMON   BANK0   BANK1
  4893 ;;      Params:         0       0       0
  4894 ;;      Locals:         2       0       0
  4895 ;;      Temps:          4       0       0
  4896 ;;      Totals:         6       0       0
  4897 ;;Total ram usage:        6 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; Hardware stack levels required when called:    3
  4900 ;; This function calls:
  4901 ;;		_nrf24l01ISR
  4902 ;; This function is called by:
  4903 ;;		Interrupt level 1
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907  0004                     _ISR:	
  4908                           
  4909                           ;incstack = 0
  4910  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4911                           
  4912                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  4913  0005  3180               	pagesel	$
  4914  0006  0020               	movlb	0	; select bank0
  4915  0007  087F               	movf	127,w
  4916  0008  00F8               	movwf	??_ISR+3
  4917                           
  4918                           ;main.c: 33: if (PIR1bits.ADIF){
  4919  0009  1F11               	btfss	17,6	;volatile
  4920  000A  2839               	goto	i1l2090
  4921                           
  4922                           ;main.c: 35: if (mode == 2) {
  4923  000B  3002               	movlw	2
  4924  000C  067C               	xorwf	_mode,w
  4925  000D  1D03               	btfss	3,2
  4926  000E  2837               	goto	i1l2088
  4927                           
  4928                           ;main.c: 37: int result = 0x00;
  4929  000F  01F9               	clrf	ISR@result
  4930  0010  01FA               	clrf	ISR@result+1
  4931                           
  4932                           ;main.c: 38: result = ADRESL;
  4933  0011  0021               	movlb	1	; select bank1
  4934  0012  081B               	movf	27,w	;volatile
  4935  0013  00F5               	movwf	??_ISR
  4936  0014  01F6               	clrf	??_ISR+1
  4937  0015  0875               	movf	??_ISR,w
  4938  0016  00F9               	movwf	ISR@result
  4939  0017  0876               	movf	??_ISR+1,w
  4940  0018  00FA               	movwf	ISR@result+1
  4941                           
  4942                           ;main.c: 39: result|= (ADRESH << 8);
  4943  0019  081C               	movf	28,w	;volatile
  4944  001A  00F5               	movwf	??_ISR
  4945  001B  01F6               	clrf	??_ISR+1
  4946  001C  0875               	movf	??_ISR,w
  4947  001D  00F6               	movwf	??_ISR+1
  4948  001E  01F5               	clrf	??_ISR
  4949  001F  0875               	movf	??_ISR,w
  4950  0020  04F9               	iorwf	ISR@result,f
  4951  0021  0876               	movf	??_ISR+1,w
  4952  0022  04FA               	iorwf	ISR@result+1,f
  4953                           
  4954                           ;main.c: 41: adcSum+= (unsigned) result;
  4955  0023  0879               	movf	ISR@result,w
  4956  0024  0020               	movlb	0	; select bank0
  4957  0025  07C5               	addwf	_adcSum,f
  4958  0026  087A               	movf	ISR@result+1,w
  4959  0027  3DC6               	addwfc	_adcSum+1,f
  4960  0028  3000               	movlw	0
  4961  0029  3DC7               	addwfc	_adcSum+2,f
  4962  002A  3DC8               	addwfc	_adcSum+3,f
  4963                           
  4964                           ;main.c: 43: if (!adcLoop){
  4965  002B  087B               	movf	_adcLoop,w
  4966  002C  1D03               	btfss	3,2
  4967  002D  2833               	goto	i1l155
  4968                           
  4969                           ;main.c: 44: mode = 3;
  4970  002E  3003               	movlw	3
  4971  002F  00F5               	movwf	??_ISR
  4972  0030  0875               	movf	??_ISR,w
  4973  0031  00FC               	movwf	_mode
  4974                           
  4975                           ;main.c: 45: }else{
  4976  0032  2835               	goto	i1l2086
  4977  0033                     i1l155:	
  4978                           
  4979                           ;main.c: 47: ADCON0bits.ADGO = 1;
  4980  0033  0021               	movlb	1	; select bank1
  4981  0034  149D               	bsf	29,1	;volatile
  4982  0035                     i1l2086:	
  4983                           
  4984                           ;main.c: 48: }
  4985                           ;main.c: 50: adcLoop--;
  4986  0035  3001               	movlw	1
  4987  0036  02FB               	subwf	_adcLoop,f
  4988  0037                     i1l2088:	
  4989                           
  4990                           ;main.c: 51: }
  4991                           ;main.c: 54: PIR1bits.ADIF = 0;
  4992  0037  0020               	movlb	0	; select bank0
  4993  0038  1311               	bcf	17,6	;volatile
  4994  0039                     i1l2090:	
  4995                           
  4996                           ;main.c: 55: }
  4997                           ;main.c: 57: if (INTCONbits.INTF){
  4998  0039  1C8B               	btfss	11,1	;volatile
  4999  003A  283D               	goto	i1l158
  5000                           
  5001                           ;main.c: 58: nrf24l01ISR();
  5002  003B  26C4               	fcall	_nrf24l01ISR
  5003                           
  5004                           ;main.c: 59: INTCONbits.INTF = 0;
  5005  003C  108B               	bcf	11,1	;volatile
  5006  003D                     i1l158:	
  5007  003D  0878               	movf	??_ISR+3,w
  5008  003E  0020               	movlb	0	; select bank0
  5009  003F  00FF               	movwf	127
  5010  0040  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5011  0041  0009               	retfie
  5012  0042                     __end_of_ISR:	
  5013                           
  5014                           	psect	text25
  5015  06C4                     __ptext25:	
  5016 ;; *************** function _nrf24l01ISR *****************
  5017 ;; Defined at:
  5018 ;;		line 100 in file "nrf24l01.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;		None
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;		None
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  1    wreg      void 
  5025 ;; Registers used:
  5026 ;;		wreg, status,2, status,0, pclath, cstack
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMMON   BANK0   BANK1
  5032 ;;      Params:         0       0       0
  5033 ;;      Locals:         0       0       0
  5034 ;;      Temps:          1       0       0
  5035 ;;      Totals:         1       0       0
  5036 ;;Total ram usage:        1 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    2
  5039 ;; This function calls:
  5040 ;;		_nrf24l01Send
  5041 ;; This function is called by:
  5042 ;;		_ISR
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           
  5047                           ;psect for function _nrf24l01ISR
  5048  06C4                     _nrf24l01ISR:	
  5049                           
  5050                           ;nrf24l01.c: 102: if (nrf24l01Status.waitForTXACK){
  5051                           
  5052                           ;incstack = 0
  5053                           ; Regs used in _nrf24l01ISR: [wreg+status,2+status,0+pclath+cstack]
  5054  06C4  0020               	movlb	0	; select bank0
  5055  06C5  1C4A               	btfss	_nrf24l01Status+1,0
  5056  06C6  0008               	return
  5057                           
  5058                           ;nrf24l01.c: 103: nrf24l01Status.radio.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  5059  06C7  01F1               	clrf	nrf24l01Send@data
  5060  06C8  3007               	movlw	7
  5061  06C9  26B8               	fcall	_nrf24l01Send
  5062  06CA  00F4               	movwf	??_nrf24l01ISR
  5063  06CB  0874               	movf	??_nrf24l01ISR,w
  5064  06CC  0020               	movlb	0	; select bank0
  5065  06CD  00C9               	movwf	_nrf24l01Status
  5066  06CE  0008               	return
  5067  06CF                     __end_of_nrf24l01ISR:	
  5068                           
  5069                           	psect	text26
  5070  06B8                     __ptext26:	
  5071 ;; *************** function _nrf24l01Send *****************
  5072 ;; Defined at:
  5073 ;;		line 10 in file "nrf24l01.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;  command         1    wreg     unsigned char 
  5076 ;;  data            1    1[COMMON] unsigned char 
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;  command         1    3[COMMON] unsigned char 
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      unsigned char 
  5081 ;; Registers used:
  5082 ;;		wreg, status,2, status,0, pclath, cstack
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMMON   BANK0   BANK1
  5088 ;;      Params:         0       0       0
  5089 ;;      Locals:         0       0       0
  5090 ;;      Temps:          0       0       0
  5091 ;;      Totals:         0       0       0
  5092 ;;Total ram usage:        0 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:    5
  5095 ;; This function calls:
  5096 ;;		_nrf24l01SPIEnd
  5097 ;;		_nrf24l01SPISend
  5098 ;;		_nrf24l01SPIStart
  5099 ;; This function is called by:
  5100 ;;		_nrf24l01SetTransmitMode
  5101 ;;		_nrf24l01SetRecieveMode
  5102 ;;		_nrf24l01HandleRX
  5103 ;;		_nrf24l01ISR
  5104 ;;		_nrf24l01Service
  5105 ;;		_nrf24l01InitRegisters
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           
  5110                           ;psect for function _nrf24l01Send
  5111  06B8                     _nrf24l01Send:	
  5112                           
  5113                           ;incstack = 0
  5114                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  5115                           ;nrf24l01Send@command stored from wreg
  5116  06B8  00F3               	movwf	nrf24l01Send@command
  5117                           
  5118                           ;nrf24l01.c: 12: nrf24l01SPIStart();
  5119  06B9  26E9               	fcall	_nrf24l01SPIStart
  5120                           
  5121                           ;nrf24l01.c: 14: nrf24l01SPISend(command);
  5122  06BA  0873               	movf	nrf24l01Send@command,w
  5123  06BB  26CF               	fcall	_nrf24l01SPISend
  5124                           
  5125                           ;nrf24l01.c: 15: data = nrf24l01SPISend(data);
  5126  06BC  0871               	movf	nrf24l01Send@data,w
  5127  06BD  26CF               	fcall	_nrf24l01SPISend
  5128  06BE  00F2               	movwf	??_nrf24l01Send
  5129  06BF  0872               	movf	??_nrf24l01Send,w
  5130  06C0  00F1               	movwf	nrf24l01Send@data
  5131                           
  5132                           ;nrf24l01.c: 17: nrf24l01SPIEnd();
  5133  06C1  26F0               	fcall	_nrf24l01SPIEnd
  5134                           
  5135                           ;nrf24l01.c: 19: return data;
  5136  06C2  0871               	movf	nrf24l01Send@data,w
  5137  06C3  0008               	return
  5138  06C4                     __end_of_nrf24l01Send:	
  5139                           
  5140                           	psect	text27
  5141  06E9                     __ptext27:	
  5142 ;; *************** function _nrf24l01SPIStart *****************
  5143 ;; Defined at:
  5144 ;;		line 39 in file "interface.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;		None
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;		None
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  1    wreg      void 
  5151 ;; Registers used:
  5152 ;;		wreg
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMMON   BANK0   BANK1
  5158 ;;      Params:         0       0       0
  5159 ;;      Locals:         0       0       0
  5160 ;;      Temps:          0       0       0
  5161 ;;      Totals:         0       0       0
  5162 ;;Total ram usage:        0 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:    4
  5165 ;; This function calls:
  5166 ;;		Nothing
  5167 ;; This function is called by:
  5168 ;;		_nrf24l01Send
  5169 ;;		_nrf24l01SendString
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           
  5174                           ;psect for function _nrf24l01SPIStart
  5175  06E9                     _nrf24l01SPIStart:	
  5176                           
  5177                           ;interface.c: 40: PORTAbits.RA1 = 0;
  5178                           
  5179                           ;incstack = 0
  5180                           ; Regs used in _nrf24l01SPIStart: [wreg]
  5181  06E9  0020               	movlb	0	; select bank0
  5182  06EA  108C               	bcf	12,1	;volatile
  5183                           
  5184                           ;interface.c: 41: _delay((unsigned long)((10)*(16000000/4000000.0)));
  5185  06EB  300D               	movlw	13
  5186  06EC                     u141_27:	
  5187  06EC  0B89               	decfsz	9,f
  5188  06ED  2EEC               	goto	u141_27
  5189  06EE  0000               	nop
  5190  06EF  0008               	return
  5191  06F0                     __end_of_nrf24l01SPIStart:	
  5192                           
  5193                           	psect	text28
  5194  06CF                     __ptext28:	
  5195 ;; *************** function _nrf24l01SPISend *****************
  5196 ;; Defined at:
  5197 ;;		line 28 in file "interface.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;  data            1    wreg     unsigned char 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  data            1    0[COMMON] unsigned char 
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      unsigned char 
  5204 ;; Registers used:
  5205 ;;		wreg
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMMON   BANK0   BANK1
  5211 ;;      Params:         0       0       0
  5212 ;;      Locals:         0       0       0
  5213 ;;      Temps:          0       0       0
  5214 ;;      Totals:         0       0       0
  5215 ;;Total ram usage:        0 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    4
  5218 ;; This function calls:
  5219 ;;		Nothing
  5220 ;; This function is called by:
  5221 ;;		_nrf24l01Send
  5222 ;;		_nrf24l01HandleRX
  5223 ;;		_nrf24l01SendString
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           
  5228                           ;psect for function _nrf24l01SPISend
  5229  06CF                     _nrf24l01SPISend:	
  5230                           
  5231                           ;incstack = 0
  5232                           ; Regs used in _nrf24l01SPISend: [wreg]
  5233                           ;nrf24l01SPISend@data stored from wreg
  5234  06CF  00F0               	movwf	nrf24l01SPISend@data
  5235                           
  5236                           ;interface.c: 29: SSP1BUF = data;
  5237  06D0  0870               	movf	nrf24l01SPISend@data,w
  5238  06D1  0024               	movlb	4	; select bank4
  5239  06D2  0091               	movwf	17	;volatile
  5240  06D3                     i1l52:	
  5241                           ;interface.c: 31: while (!SSP1STATbits.BF){
  5242                           
  5243  06D3  0024               	movlb	4	; select bank4
  5244  06D4  1814               	btfsc	20,0	;volatile
  5245  06D5  2ED8               	goto	i1l1570
  5246                           
  5247                           ;interface.c: 32: __nop();
  5248  06D6  0000               	nop
  5249  06D7  2ED3               	goto	i1l52
  5250  06D8                     i1l1570:	
  5251                           
  5252                           ;interface.c: 33: }
  5253                           ;interface.c: 35: return SSP1BUF;
  5254  06D8  0811               	movf	17,w	;volatile
  5255  06D9  0008               	return
  5256  06DA                     __end_of_nrf24l01SPISend:	
  5257                           
  5258                           	psect	text29
  5259  06F0                     __ptext29:	
  5260 ;; *************** function _nrf24l01SPIEnd *****************
  5261 ;; Defined at:
  5262 ;;		line 45 in file "interface.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;		None
  5265 ;; Auto vars:     Size  Location     Type
  5266 ;;		None
  5267 ;; Return value:  Size  Location     Type
  5268 ;;                  1    wreg      void 
  5269 ;; Registers used:
  5270 ;;		wreg
  5271 ;; Tracked objects:
  5272 ;;		On entry : 0/0
  5273 ;;		On exit  : 0/0
  5274 ;;		Unchanged: 0/0
  5275 ;; Data sizes:     COMMON   BANK0   BANK1
  5276 ;;      Params:         0       0       0
  5277 ;;      Locals:         0       0       0
  5278 ;;      Temps:          0       0       0
  5279 ;;      Totals:         0       0       0
  5280 ;;Total ram usage:        0 bytes
  5281 ;; Hardware stack levels used:    1
  5282 ;; Hardware stack levels required when called:    4
  5283 ;; This function calls:
  5284 ;;		Nothing
  5285 ;; This function is called by:
  5286 ;;		_nrf24l01Send
  5287 ;;		_nrf24l01SendString
  5288 ;; This function uses a non-reentrant model
  5289 ;;
  5290                           
  5291                           
  5292                           ;psect for function _nrf24l01SPIEnd
  5293  06F0                     _nrf24l01SPIEnd:	
  5294                           
  5295                           ;interface.c: 46: _delay((unsigned long)((10)*(16000000/4000000.0)));
  5296                           
  5297                           ;incstack = 0
  5298                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  5299  06F0  300D               	movlw	13
  5300  06F1                     u142_27:	
  5301  06F1  0B89               	decfsz	9,f
  5302  06F2  2EF1               	goto	u142_27
  5303  06F3  0000               	nop
  5304                           
  5305                           ;interface.c: 47: PORTAbits.RA1 = 1;
  5306  06F4  0020               	movlb	0	; select bank0
  5307  06F5  148C               	bsf	12,1	;volatile
  5308  06F6  0008               	return
  5309  06F7                     __end_of_nrf24l01SPIEnd:	
  5310  007E                     btemp	set	126	;btemp
  5311  007E                     int$flags	set	126
  5312  007E                     wtemp0	set	126


Data Sizes:
    Strings     24
    Constant    6
    Data        2
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      13
    BANK0            80     37      63
    BANK1            32      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_4(CODE[2]), STR_3(CODE[5]), STR_2(CODE[8]), STR_1(CODE[7]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    nrf24l01SendString@string	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 

    _itoa@buffer	PTR unsigned char  size(1) Largest target is 16
		 -> string(BANK0[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK0

    _main->_loop
    _nrf24l01Init->_nrf24l01InitRegisters
    _loop->__itoa
    _strcpy->_strlen
    _nrf24l01Service->_nrf24l01HandleRX
    _nrf24l01IsACK->_strcmp
    _nrf24l01HandleRX->_read_flashmem
    _nrf24l01SendString->_read_flashmem
    __itoa->_itoa
    _itoa->_utoa
    _utoa->___lwdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   16831
                                             34 BANK0      3     3      0
                               _loop
                       _nrf24l01Init
                      _read_flashmem
                     _write_flashmem
 ---------------------------------------------------------------------------------
 (1) _write_flashmem                                       6     2      4     283
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         1     1      0    1795
                                             10 BANK0      1     1      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                               10    10      0    1795
                                              0 BANK0     10    10      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 4     4      0   14358
                                             30 BANK0      4     4      0
                            ___lldiv
                             ___lmul
                              __itoa
                 _nrf24l01SendString
                    _nrf24l01Service
             _nrf24l01SetRecieveMode
                      _read_flashmem
                           _startADC
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               5     3      2     451
                                              8 BANK0      5     3      2
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _startADC                                             2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01Service                                      1     1      0    5736
                                             16 BANK0      1     1      0
                   _nrf24l01HandleRX
                      _nrf24l01IsACK
                       _nrf24l01Send
             _nrf24l01SetRecieveMode
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SetRecieveMode                               2     2      0    1607
                                              0 BANK0      2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (3) _nrf24l01IsACK                                        0     0      0     185
                             _strcmp
 ---------------------------------------------------------------------------------
 (4) _strcmp                                               5     3      2     185
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _nrf24l01HandleRX                                     7     7      0    2383
                                              9 BANK0      7     7      0
                    _nrf24l01SPISend
                       _nrf24l01Send
                      _read_flashmem
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     270
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _nrf24l01SendString                                   7     6      1    2440
                                              9 BANK0      7     6      1
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
            _nrf24l01SetTransmitMode
                      _read_flashmem
 ---------------------------------------------------------------------------------
 (1) _read_flashmem                                        9     7      2     348
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (3) _nrf24l01SetTransmitMode                              2     2      0    1607
                                              0 BANK0      2     2      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1561
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      22
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __itoa                                                6     3      3    2184
                                             24 BANK0      6     3      3
                               _itoa
                      _read_flashmem (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 7     3      4    1486
                                             17 BANK0      7     3      4
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     5      4    1165
                                              8 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     287
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     476
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     802
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  6     6      0    1586
                                              5 COMMON     6     6      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          1     1      0    1561
                                              4 COMMON     1     1      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (8) _nrf24l01Send                                         3     2      1    1561
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPISend                                      1     1      0      22
 ---------------------------------------------------------------------------------
 (9) _nrf24l01SPIEnd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___lldiv
     ___lmul
     __itoa
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _read_flashmem (ARG)
       _strlen (ARG)
     _nrf24l01SendString
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetTransmitMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _read_flashmem
     _nrf24l01Service
       _nrf24l01HandleRX
         _nrf24l01SPISend
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
         _read_flashmem
         _strlen
       _nrf24l01IsACK
         _strcmp
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRecieveMode
         _nrf24l01Send
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
     _nrf24l01SetRecieveMode
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _read_flashmem
     _startADC
     _strcpy
       _strlen (ARG)
     _strlen
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _read_flashmem
   _write_flashmem

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01Send
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     25      3F       6       78.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      4C       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 11 13:01:46 2018

                     __CFG_CP$OFF 0000               nrf24l01Send@command 0073   __size_of_nrf24l01SetRecieveMode 001D  
                     __CFG_LVP$ON 0000                               l260 0494                               l175 00A5  
                             l194 02F6                               l189 0212                               l555 034B  
                             _ISR 0004                               u705 04DD                               u715 04E5  
                             u745 058C                               u675 04C9                               u915 03DC  
                             u765 059B                               u695 04D3                               u775 05A2  
    nrf24l01SendString@waitForAck 0029                      __CFG_BORV$LO 0000                               wreg 0009  
                            ?_ISR 0070                    ??_nrf24l01Init 002A                              l2030 00EA  
                            l2022 00DA                              l2040 015B                              l2008 00AD  
                            l2050 01B4                              l2034 00F2                              l2026 00E2  
                            l2018 00D2                              l2044 0187                              l2036 0115  
                            l2060 01F5                              l2038 0138                              l1520 05DD  
                            l2048 01A3                              l1450 04C6                              l1522 05E8  
                            l1530 05BA                              l1452 04D2                              l1540 030B  
                            l1700 04A5                              l2172 0303                              l1462 04ED  
                            l1550 0327                              l1534 05D1                              l1480 05A1  
                            l1528 05B2                              l1458 04E4                              l1474 0589  
                            l1714 04B9                              l1900 03A0                              l1476 0595  
                            l1484 05AA                              l1652 03F8                              l1644 03BC  
                            l1660 0698                              l1724 065F                              l1750 0421  
                            l1734 0407                              l1646 03E3                              l1904 03AB  
                            l1592 0614                              l1752 0438                              l1744 041F  
                            l1680 057A                    ??_nrf24l01Send 0072                              l1872 052D  
                            l1696 049C                              l1890 0372                              l1892 0380  
                            l1876 0537                              l1972 0051                              l1974 0059  
                            l1994 0076                              l1978 005E                              l1998 007F  
                            STR_1 06E2                      __CFG_WDTE$ON 0000                              STR_2 06DA  
                            STR_3 0702                              STR_4 06E0                              STR_5 0707  
                            u1210 0068                              u1125 0375                              u1224 006A  
                            u1145 0381                              u1155 0395                              u1165 03A1  
                            u1085 0538                              u1317 02AD                              u1095 053F  
                            u1407 0655                              u1327 067B                              u1337 0684  
                            u1347 021A                              u1357 0577                              u1367 0622  
                            u1377 0638                              u1387 043C                              u1397 0641  
                            i1l52 06D3    __size_of_nrf24l01InterfaceInit 000E                      __CFG_WRT$OFF 0000  
   __end_of_nrf24l01InterfaceInit 06B8                     __p_NVMEM_text 07E0                              _main 029D  
                            _mode 007C                              _itoa 05FC                              _loop 0051  
                            fsr0h 0005                              fsr1h 0007                              indf0 0000  
                            fsr0l 0004                              indf1 0001                              fsr1l 0006  
                            btemp 007E                              _utoa 0305                              start 0042  
        ?_nrf24l01SetTransmitMode 0070                     __CFG_MCLRE$ON 0000                             ??_ISR 0075  
             nrf24l01SendString@i 002F                   ??_nrf24l01IsACK 0025       __size_of_nrf24l01SendString 0049  
                           ?_main 0070                             ?_itoa 0031                             ?_loop 0070  
                 __end_of___lldiv 03B4                             ?_utoa 0028                   __end_of___lwdiv 04F2  
                           i1l155 0033                             i1l158 003D                   __end_of___lwmod 05AF  
                           _NVMEM 07E0               ___lmul@multiplicand 0024                     __CFG_PWRTE$ON 0000  
                           __itoa 069A                    __CFG_BOREN$OFF 0000            _nrf24l01SetRecieveMode 061F  
                           utoa@c 002F                             utoa@v 002D                             status 0003  
                           wtemp0 007E                  _nrf24l01SPIStart 06E9                   __initialization 0043  
                    __end_of_main 0305                      __end_of_itoa 061F                      __end_of_loop 0213  
                    __end_of_utoa 0361                    __CFG_LPBOR$OFF 0000                  _nrf24l01HandleRX 03B4  
                          ??_main 0042                            ??_itoa 0035                            ??_loop 003E  
                          ??_utoa 002C                  ??_write_flashmem 0024                  ??_nrf24l01SPIEnd 0070  
                   main@bootCount 0043          __size_of_nrf24l01SPISend 000B                            ?__itoa 0038  
                          _ADRESH 009C                            _ADRESL 009B                            _ANSELA 018C  
                          _ANSELC 018E                            i1l2090 0039                            i1l2086 0035  
                          i1l2088 0037                            i1l1570 06D8                            u141_27 06EC  
                          u142_27 06F1                            _PMADRH 0192                            _PMADRL 0191  
                          _PMDATH 0194                            _PMDATL 0193                            _PMCON1 0195  
                          _PMCON2 0196          __size_of_nrf24l01Service 003B              __size_of_nrf24l01ISR 000B  
                          _adcSum 0045                            ___lmul 0524                    __CFG_STVREN$ON 0000  
                       ??___lldiv 0028                         ??___lwdiv 0024                         ??___lwmod 0024  
            __end_of_nrf24l01Init 068A              __end_of_nrf24l01Send 06C4             _nrf24l01InitRegisters 0213  
                          _strcmp 05AF                            _strcpy 0659                            _string 004E  
                          _strlen 05D7              write_flashmem@offset 0020                            itoa@cp 0036  
                    __pdataCOMMON 007C                  __end_of_startADC 0582            __size_of_read_flashmem 0032  
         __end_of__initialization 004E                      __itoa@buffer 003D                     __end_of_NVMEM 0800  
                    __itoa@number 0038                    __pcstackCOMMON 0070                      __pidataBANK0 070C  
                   __end_of__itoa 06AA              nrf24l01HandleRX@byte 002E     nrf24l01InitRegisters@enRXAddr 0027  
                  _OPTION_REGbits 0095                           ??__itoa 003B                        __pbssBANK0 0045  
                      __itoa@base 003A                 ??_nrf24l01SPISend 0070                         ISR@result 0079  
                   _read_flashmem 04F2                        __pmaintext 029D                           ?___lmul 0020  
          ?_nrf24l01InitRegisters 0070                        __pintentry 0004               nrf24l01SPISend@data 0070  
               ??_nrf24l01Service 0030                    ___lmul@product 0028                           ?_strcmp 0020  
                         ?_strcpy 0028                           ?_strlen 0020             __end_of_n_ADDRESS_MUL 070E  
__size_of_nrf24l01SetTransmitMode 001D          __end_of_nrf24l01SPIStart 06F0                           _SSP1BUF 0211  
         ?_nrf24l01SetRecieveMode 0070          nrf24l01SendString@string 002E          __end_of_nrf24l01HandleRX 03FD  
           _nrf24l01InterfaceInit 06AA                    ?_read_flashmem 0020             __size_of_nrf24l01Init 0016  
           __size_of_nrf24l01Send 000C        __end_of_nrf24l01SendString 0446                   __size_of___lmul 0030  
                         _adcLoop 007B                         ?_startADC 0070                           ___lldiv 0361  
                         ___lwdiv 04BD                           ___lwmod 0582                           __ptext1 0446  
                         __ptext2 0674                           __ptext3 06AA                           __ptext4 0213  
                         __ptext5 0051                           __ptext6 0659                           __ptext7 0554  
                         __ptext8 0482                           __ptext9 061F             __end_of_nrf24l01IsACK 069A  
                 __size_of_strcmp 0028                   __size_of_strcpy 001B                   __size_of_strlen 0025  
                    __size_of_ISR 003E                           _counter 004B    __end_of_nrf24l01SetRecieveMode 063C  
           write_flashmem@address 0024                           clrloop0 06F8              end_of_initialization 004E  
                    _nrf24l01Init 0674                      _nrf24l01Send 06B8                           itoa@buf 0037  
                         itoa@val 0031                   ___lldiv@divisor 0020                   ___lldiv@counter 002D  
                      ??_startADC 0020                           utoa@buf 0030                           utoa@val 0028  
                         strcmp@r 0023                           strlen@s 0027                         _PORTAbits 000C  
                __CFG_FOSC$INTOSC 0000                         _TRISAbits 008C                         _TRISCbits 008E  
                nrf24l01Send@data 0071                     ??_nrf24l01ISR 0074            ?_nrf24l01InterfaceInit 0070  
                 ??_read_flashmem 0022                    __end_of___lmul 0554     nrf24l01SetTransmitMode@config 0021  
                   __pidataCOMMON 070B           _nrf24l01SetTransmitMode 063C                write_flashmem@data 0022  
                  __end_of_strcmp 05D7                    __end_of_strcpy 0674                    __end_of_strlen 05FC  
             start_initialization 0043                   _nrf24l01SPISend 06CF                       __end_of_ISR 0042  
         __size_of_write_flashmem 003C             nrf24l01HandleRX@width 002D           __size_of_nrf24l01SPIEnd 0007  
                 _nrf24l01Service 0482            nrf24l01SendString@btye 002D           ??_nrf24l01InitRegisters 0020  
                        ??___lmul 0028               __end_of_nrf24l01ISR 06CF                       __pdataBANK0 005E  
                        ??_strcmp 0022                          ??_strcpy 002A                          ??_strlen 0022  
                     __pbssCOMMON 007B                         ___latbits 0000                     __pcstackBANK0 0020  
               ?_nrf24l01SPIStart 0070                ??_nrf24l01SPIStart 0070                 ?_nrf24l01HandleRX 0070  
              ??_nrf24l01HandleRX 0029                  ___lwdiv@dividend 0022                          ?___lldiv 0020  
                        ?___lwdiv 0020         ??_nrf24l01SetTransmitMode 0020                          ?___lwmod 0020  
            __end_of_n_ADDRESS_P0 0702           __end_of_nrf24l01SPISend 06DA                     _NVMEM_absaddr 07E0  
               __size_of_startADC 002E         nrf24l01InitRegisters@enAA 0028                _nrf24l01SendString 03FD  
                ___lwdiv@quotient 0025                    __size_of__itoa 0010           __end_of_nrf24l01Service 04BD  
             ?_nrf24l01SendString 0029                       _nrf24l01ISR 06C4                         clear_ram0 06F7  
                        _PIE1bits 0091                          _PIR1bits 0011                         _sleepLoop 004D  
            ??_nrf24l01SendString 002A                        _ADCON0bits 009D                        _ADCON1bits 009E  
                        _WPUAbits 020C   __end_of_nrf24l01SetTransmitMode 0659                 ___lmul@multiplier 0020  
         ??_nrf24l01InterfaceInit 0020                    _write_flashmem 0446                    _nrf24l01SPIEnd 06F0  
          __size_of_nrf24l01IsACK 0010                    _nrf24l01Status 0049                   startADC@channel 0021  
            read_flashmem@address 0027                  __size_of___lldiv 0053                  __size_of___lwdiv 0035  
                __size_of___lwmod 002D                  ?_nrf24l01SPISend 0070                        _ANSELAbits 018C  
                      _ANSELCbits 018E                     _n_ADDRESS_MUL 070D                   ___lwdiv@divisor 0020  
                 ___lwdiv@counter 0027                          __ptext10 068A                          __ptext11 05AF  
                        __ptext20 0582                          __ptext12 03B4                          __ptext21 04BD  
                        __ptext13 05D7                          __ptext22 0524                          __ptext14 03FD  
                        __ptext23 0361                          __ptext15 04F2                          __ptext16 063C  
          __end_of_write_flashmem 0482                          __ptext25 06C4                          __ptext17 069A  
                        __ptext26 06B8                          __ptext18 05FC                          __ptext27 06E9  
                        __ptext19 0305                          __ptext28 06CF                          __ptext29 06F0  
          __end_of_nrf24l01SPIEnd 06F7                  ?_nrf24l01Service 0070                        strcpy@from 0028  
                   __size_of_main 0068                     __size_of_itoa 0023                     __size_of_loop 01C2  
    nrf24l01InitRegisters@channel 0021                     __size_of_utoa 005C      nrf24l01InitRegisters@feature 0023  
                        _nextMode 005E             __end_of_read_flashmem 0524      nrf24l01InitRegisters@rfSetup 0024  
  __size_of_nrf24l01InitRegisters 008A     __end_of_nrf24l01InitRegisters 029D                          int$flags 007E  
                        _startADC 0554      nrf24l01InitRegisters@setupAW 0022                      _SSP1STATbits 0214  
        ??_nrf24l01SetRecieveMode 0020                     _nrf24l01IsACK 068A                        _INTCONbits 000B  
                      _FVRCONbits 0117                          itoa@base 0033                   ?_write_flashmem 0020  
                 ?_nrf24l01SPIEnd 0070                 nrf24l01HandleRX@i 002F                          intlevel1 0000  
             read_flashmem@offset 0020                      _n_ADDRESS_P0 06FD               read_flashmem@result 0025  
                      _PMCON1bits 0195                  ___lwmod@dividend 0022                  ___lldiv@dividend 0024  
               __CFG_CLKOUTEN$OFF 0000       nrf24l01InitRegisters@config 0025                        _OSCCONbits 0099  
       __size_of_nrf24l01SPIStart 0007      nrf24l01SetRecieveMode@config 0021       nrf24l01InitRegisters@status 0026  
       __size_of_nrf24l01HandleRX 0049                     __pstringtext1 06FD                     __pstringtext2 070D  
                   __pstringtext3 06DA                     __pstringtext4 06E2                     __pstringtext5 0702  
                   __pstringtext6 0707                     __pstringtext7 0000                          utoa@base 002A  
                  ?_nrf24l01IsACK 0070        nrf24l01InitRegisters@DynPD 0029                          strcmp@s1 0024  
                        strcmp@s2 0020                  ___lldiv@quotient 0029                   ___lwmod@divisor 0020  
                        strcpy@cp 002B                          strlen@cp 0026                          strcpy@to 002C  
                 ___lwmod@counter 0025                       _SSPCON1bits 0215                        _WDTCONbits 0097  
                   ?_nrf24l01Init 0070                     ?_nrf24l01Send 0071                        _STATUSbits 0003  
                    ?_nrf24l01ISR 0070  
