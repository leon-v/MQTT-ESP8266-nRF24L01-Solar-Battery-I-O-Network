

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jun 19 20:55:38 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	_NVMEM_text,global,class=CODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16LF1503 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  0006                     	;# 
    91  0007                     	;# 
    92  0008                     	;# 
    93  0009                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000E                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001C                     	;# 
   110  008C                     	;# 
   111  008E                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0095                     	;# 
   116  0096                     	;# 
   117  0097                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009B                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126  010C                     	;# 
   127  010E                     	;# 
   128  0111                     	;# 
   129  0112                     	;# 
   130  0113                     	;# 
   131  0114                     	;# 
   132  0115                     	;# 
   133  0116                     	;# 
   134  0117                     	;# 
   135  0118                     	;# 
   136  0119                     	;# 
   137  011D                     	;# 
   138  018C                     	;# 
   139  018E                     	;# 
   140  0191                     	;# 
   141  0191                     	;# 
   142  0192                     	;# 
   143  0193                     	;# 
   144  0193                     	;# 
   145  0194                     	;# 
   146  0195                     	;# 
   147  0196                     	;# 
   148  020C                     	;# 
   149  0211                     	;# 
   150  0211                     	;# 
   151  0212                     	;# 
   152  0212                     	;# 
   153  0213                     	;# 
   154  0213                     	;# 
   155  0214                     	;# 
   156  0214                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0215                     	;# 
   160  0216                     	;# 
   161  0216                     	;# 
   162  0217                     	;# 
   163  0217                     	;# 
   164  0391                     	;# 
   165  0392                     	;# 
   166  0393                     	;# 
   167  0498                     	;# 
   168  0498                     	;# 
   169  0499                     	;# 
   170  049A                     	;# 
   171  049B                     	;# 
   172  049B                     	;# 
   173  049C                     	;# 
   174  049D                     	;# 
   175  049E                     	;# 
   176  049F                     	;# 
   177  0611                     	;# 
   178  0612                     	;# 
   179  0613                     	;# 
   180  0613                     	;# 
   181  0614                     	;# 
   182  0615                     	;# 
   183  0616                     	;# 
   184  0616                     	;# 
   185  0617                     	;# 
   186  0618                     	;# 
   187  0619                     	;# 
   188  0619                     	;# 
   189  061A                     	;# 
   190  061B                     	;# 
   191  061C                     	;# 
   192  061C                     	;# 
   193  0691                     	;# 
   194  0692                     	;# 
   195  0693                     	;# 
   196  0694                     	;# 
   197  0695                     	;# 
   198  0F0F                     	;# 
   199  0F10                     	;# 
   200  0F11                     	;# 
   201  0F12                     	;# 
   202  0F13                     	;# 
   203  0F14                     	;# 
   204  0F15                     	;# 
   205  0F16                     	;# 
   206  0F17                     	;# 
   207  0F18                     	;# 
   208  0F19                     	;# 
   209  0F1A                     	;# 
   210  0F1B                     	;# 
   211  0F1C                     	;# 
   212  0F1D                     	;# 
   213  0F1E                     	;# 
   214  0F1F                     	;# 
   215  0FE3                     	;# 
   216  0FE4                     	;# 
   217  0FE5                     	;# 
   218  0FE6                     	;# 
   219  0FE7                     	;# 
   220  0FE8                     	;# 
   221  0FE9                     	;# 
   222  0FEA                     	;# 
   223  0FEB                     	;# 
   224  0FED                     	;# 
   225  0FEE                     	;# 
   226  0FEF                     	;# 
   227  0000                     	;# 
   228  0001                     	;# 
   229  0002                     	;# 
   230  0003                     	;# 
   231  0004                     	;# 
   232  0005                     	;# 
   233  0006                     	;# 
   234  0007                     	;# 
   235  0008                     	;# 
   236  0009                     	;# 
   237  000A                     	;# 
   238  000B                     	;# 
   239  000C                     	;# 
   240  000E                     	;# 
   241  0011                     	;# 
   242  0012                     	;# 
   243  0013                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  008C                     	;# 
   254  008E                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0095                     	;# 
   259  0096                     	;# 
   260  0097                     	;# 
   261  0099                     	;# 
   262  009A                     	;# 
   263  009B                     	;# 
   264  009B                     	;# 
   265  009C                     	;# 
   266  009D                     	;# 
   267  009E                     	;# 
   268  009F                     	;# 
   269  010C                     	;# 
   270  010E                     	;# 
   271  0111                     	;# 
   272  0112                     	;# 
   273  0113                     	;# 
   274  0114                     	;# 
   275  0115                     	;# 
   276  0116                     	;# 
   277  0117                     	;# 
   278  0118                     	;# 
   279  0119                     	;# 
   280  011D                     	;# 
   281  018C                     	;# 
   282  018E                     	;# 
   283  0191                     	;# 
   284  0191                     	;# 
   285  0192                     	;# 
   286  0193                     	;# 
   287  0193                     	;# 
   288  0194                     	;# 
   289  0195                     	;# 
   290  0196                     	;# 
   291  020C                     	;# 
   292  0211                     	;# 
   293  0211                     	;# 
   294  0212                     	;# 
   295  0212                     	;# 
   296  0213                     	;# 
   297  0213                     	;# 
   298  0214                     	;# 
   299  0214                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0215                     	;# 
   303  0216                     	;# 
   304  0216                     	;# 
   305  0217                     	;# 
   306  0217                     	;# 
   307  0391                     	;# 
   308  0392                     	;# 
   309  0393                     	;# 
   310  0498                     	;# 
   311  0498                     	;# 
   312  0499                     	;# 
   313  049A                     	;# 
   314  049B                     	;# 
   315  049B                     	;# 
   316  049C                     	;# 
   317  049D                     	;# 
   318  049E                     	;# 
   319  049F                     	;# 
   320  0611                     	;# 
   321  0612                     	;# 
   322  0613                     	;# 
   323  0613                     	;# 
   324  0614                     	;# 
   325  0615                     	;# 
   326  0616                     	;# 
   327  0616                     	;# 
   328  0617                     	;# 
   329  0618                     	;# 
   330  0619                     	;# 
   331  0619                     	;# 
   332  061A                     	;# 
   333  061B                     	;# 
   334  061C                     	;# 
   335  061C                     	;# 
   336  0691                     	;# 
   337  0692                     	;# 
   338  0693                     	;# 
   339  0694                     	;# 
   340  0695                     	;# 
   341  0F0F                     	;# 
   342  0F10                     	;# 
   343  0F11                     	;# 
   344  0F12                     	;# 
   345  0F13                     	;# 
   346  0F14                     	;# 
   347  0F15                     	;# 
   348  0F16                     	;# 
   349  0F17                     	;# 
   350  0F18                     	;# 
   351  0F19                     	;# 
   352  0F1A                     	;# 
   353  0F1B                     	;# 
   354  0F1C                     	;# 
   355  0F1D                     	;# 
   356  0F1E                     	;# 
   357  0F1F                     	;# 
   358  0FE3                     	;# 
   359  0FE4                     	;# 
   360  0FE5                     	;# 
   361  0FE6                     	;# 
   362  0FE7                     	;# 
   363  0FE8                     	;# 
   364  0FE9                     	;# 
   365  0FEA                     	;# 
   366  0FEB                     	;# 
   367  0FED                     	;# 
   368  0FEE                     	;# 
   369  0FEF                     	;# 
   370  0000                     	;# 
   371  0001                     	;# 
   372  0002                     	;# 
   373  0003                     	;# 
   374  0004                     	;# 
   375  0005                     	;# 
   376  0006                     	;# 
   377  0007                     	;# 
   378  0008                     	;# 
   379  0009                     	;# 
   380  000A                     	;# 
   381  000B                     	;# 
   382  000C                     	;# 
   383  000E                     	;# 
   384  0011                     	;# 
   385  0012                     	;# 
   386  0013                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  008C                     	;# 
   397  008E                     	;# 
   398  0091                     	;# 
   399  0092                     	;# 
   400  0093                     	;# 
   401  0095                     	;# 
   402  0096                     	;# 
   403  0097                     	;# 
   404  0099                     	;# 
   405  009A                     	;# 
   406  009B                     	;# 
   407  009B                     	;# 
   408  009C                     	;# 
   409  009D                     	;# 
   410  009E                     	;# 
   411  009F                     	;# 
   412  010C                     	;# 
   413  010E                     	;# 
   414  0111                     	;# 
   415  0112                     	;# 
   416  0113                     	;# 
   417  0114                     	;# 
   418  0115                     	;# 
   419  0116                     	;# 
   420  0117                     	;# 
   421  0118                     	;# 
   422  0119                     	;# 
   423  011D                     	;# 
   424  018C                     	;# 
   425  018E                     	;# 
   426  0191                     	;# 
   427  0191                     	;# 
   428  0192                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0194                     	;# 
   432  0195                     	;# 
   433  0196                     	;# 
   434  020C                     	;# 
   435  0211                     	;# 
   436  0211                     	;# 
   437  0212                     	;# 
   438  0212                     	;# 
   439  0213                     	;# 
   440  0213                     	;# 
   441  0214                     	;# 
   442  0214                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0215                     	;# 
   446  0216                     	;# 
   447  0216                     	;# 
   448  0217                     	;# 
   449  0217                     	;# 
   450  0391                     	;# 
   451  0392                     	;# 
   452  0393                     	;# 
   453  0498                     	;# 
   454  0498                     	;# 
   455  0499                     	;# 
   456  049A                     	;# 
   457  049B                     	;# 
   458  049B                     	;# 
   459  049C                     	;# 
   460  049D                     	;# 
   461  049E                     	;# 
   462  049F                     	;# 
   463  0611                     	;# 
   464  0612                     	;# 
   465  0613                     	;# 
   466  0613                     	;# 
   467  0614                     	;# 
   468  0615                     	;# 
   469  0616                     	;# 
   470  0616                     	;# 
   471  0617                     	;# 
   472  0618                     	;# 
   473  0619                     	;# 
   474  0619                     	;# 
   475  061A                     	;# 
   476  061B                     	;# 
   477  061C                     	;# 
   478  061C                     	;# 
   479  0691                     	;# 
   480  0692                     	;# 
   481  0693                     	;# 
   482  0694                     	;# 
   483  0695                     	;# 
   484  0F0F                     	;# 
   485  0F10                     	;# 
   486  0F11                     	;# 
   487  0F12                     	;# 
   488  0F13                     	;# 
   489  0F14                     	;# 
   490  0F15                     	;# 
   491  0F16                     	;# 
   492  0F17                     	;# 
   493  0F18                     	;# 
   494  0F19                     	;# 
   495  0F1A                     	;# 
   496  0F1B                     	;# 
   497  0F1C                     	;# 
   498  0F1D                     	;# 
   499  0F1E                     	;# 
   500  0F1F                     	;# 
   501  0FE3                     	;# 
   502  0FE4                     	;# 
   503  0FE5                     	;# 
   504  0FE6                     	;# 
   505  0FE7                     	;# 
   506  0FE8                     	;# 
   507  0FE9                     	;# 
   508  0FEA                     	;# 
   509  0FEB                     	;# 
   510  0FED                     	;# 
   511  0FEE                     	;# 
   512  0FEF                     	;# 
   513  0000                     	;# 
   514  0001                     	;# 
   515  0002                     	;# 
   516  0003                     	;# 
   517  0004                     	;# 
   518  0005                     	;# 
   519  0006                     	;# 
   520  0007                     	;# 
   521  0008                     	;# 
   522  0009                     	;# 
   523  000A                     	;# 
   524  000B                     	;# 
   525  000C                     	;# 
   526  000E                     	;# 
   527  0011                     	;# 
   528  0012                     	;# 
   529  0013                     	;# 
   530  0015                     	;# 
   531  0016                     	;# 
   532  0016                     	;# 
   533  0017                     	;# 
   534  0018                     	;# 
   535  0019                     	;# 
   536  001A                     	;# 
   537  001B                     	;# 
   538  001C                     	;# 
   539  008C                     	;# 
   540  008E                     	;# 
   541  0091                     	;# 
   542  0092                     	;# 
   543  0093                     	;# 
   544  0095                     	;# 
   545  0096                     	;# 
   546  0097                     	;# 
   547  0099                     	;# 
   548  009A                     	;# 
   549  009B                     	;# 
   550  009B                     	;# 
   551  009C                     	;# 
   552  009D                     	;# 
   553  009E                     	;# 
   554  009F                     	;# 
   555  010C                     	;# 
   556  010E                     	;# 
   557  0111                     	;# 
   558  0112                     	;# 
   559  0113                     	;# 
   560  0114                     	;# 
   561  0115                     	;# 
   562  0116                     	;# 
   563  0117                     	;# 
   564  0118                     	;# 
   565  0119                     	;# 
   566  011D                     	;# 
   567  018C                     	;# 
   568  018E                     	;# 
   569  0191                     	;# 
   570  0191                     	;# 
   571  0192                     	;# 
   572  0193                     	;# 
   573  0193                     	;# 
   574  0194                     	;# 
   575  0195                     	;# 
   576  0196                     	;# 
   577  020C                     	;# 
   578  0211                     	;# 
   579  0211                     	;# 
   580  0212                     	;# 
   581  0212                     	;# 
   582  0213                     	;# 
   583  0213                     	;# 
   584  0214                     	;# 
   585  0214                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0215                     	;# 
   589  0216                     	;# 
   590  0216                     	;# 
   591  0217                     	;# 
   592  0217                     	;# 
   593  0391                     	;# 
   594  0392                     	;# 
   595  0393                     	;# 
   596  0498                     	;# 
   597  0498                     	;# 
   598  0499                     	;# 
   599  049A                     	;# 
   600  049B                     	;# 
   601  049B                     	;# 
   602  049C                     	;# 
   603  049D                     	;# 
   604  049E                     	;# 
   605  049F                     	;# 
   606  0611                     	;# 
   607  0612                     	;# 
   608  0613                     	;# 
   609  0613                     	;# 
   610  0614                     	;# 
   611  0615                     	;# 
   612  0616                     	;# 
   613  0616                     	;# 
   614  0617                     	;# 
   615  0618                     	;# 
   616  0619                     	;# 
   617  0619                     	;# 
   618  061A                     	;# 
   619  061B                     	;# 
   620  061C                     	;# 
   621  061C                     	;# 
   622  0691                     	;# 
   623  0692                     	;# 
   624  0693                     	;# 
   625  0694                     	;# 
   626  0695                     	;# 
   627  0F0F                     	;# 
   628  0F10                     	;# 
   629  0F11                     	;# 
   630  0F12                     	;# 
   631  0F13                     	;# 
   632  0F14                     	;# 
   633  0F15                     	;# 
   634  0F16                     	;# 
   635  0F17                     	;# 
   636  0F18                     	;# 
   637  0F19                     	;# 
   638  0F1A                     	;# 
   639  0F1B                     	;# 
   640  0F1C                     	;# 
   641  0F1D                     	;# 
   642  0F1E                     	;# 
   643  0F1F                     	;# 
   644  0FE3                     	;# 
   645  0FE4                     	;# 
   646  0FE5                     	;# 
   647  0FE6                     	;# 
   648  0FE7                     	;# 
   649  0FE8                     	;# 
   650  0FE9                     	;# 
   651  0FEA                     	;# 
   652  0FEB                     	;# 
   653  0FED                     	;# 
   654  0FEE                     	;# 
   655  0FEF                     	;# 
   656  0000                     	;# 
   657  0001                     	;# 
   658  0002                     	;# 
   659  0003                     	;# 
   660  0004                     	;# 
   661  0005                     	;# 
   662  0006                     	;# 
   663  0007                     	;# 
   664  0008                     	;# 
   665  0009                     	;# 
   666  000A                     	;# 
   667  000B                     	;# 
   668  000C                     	;# 
   669  000E                     	;# 
   670  0011                     	;# 
   671  0012                     	;# 
   672  0013                     	;# 
   673  0015                     	;# 
   674  0016                     	;# 
   675  0016                     	;# 
   676  0017                     	;# 
   677  0018                     	;# 
   678  0019                     	;# 
   679  001A                     	;# 
   680  001B                     	;# 
   681  001C                     	;# 
   682  008C                     	;# 
   683  008E                     	;# 
   684  0091                     	;# 
   685  0092                     	;# 
   686  0093                     	;# 
   687  0095                     	;# 
   688  0096                     	;# 
   689  0097                     	;# 
   690  0099                     	;# 
   691  009A                     	;# 
   692  009B                     	;# 
   693  009B                     	;# 
   694  009C                     	;# 
   695  009D                     	;# 
   696  009E                     	;# 
   697  009F                     	;# 
   698  010C                     	;# 
   699  010E                     	;# 
   700  0111                     	;# 
   701  0112                     	;# 
   702  0113                     	;# 
   703  0114                     	;# 
   704  0115                     	;# 
   705  0116                     	;# 
   706  0117                     	;# 
   707  0118                     	;# 
   708  0119                     	;# 
   709  011D                     	;# 
   710  018C                     	;# 
   711  018E                     	;# 
   712  0191                     	;# 
   713  0191                     	;# 
   714  0192                     	;# 
   715  0193                     	;# 
   716  0193                     	;# 
   717  0194                     	;# 
   718  0195                     	;# 
   719  0196                     	;# 
   720  020C                     	;# 
   721  0211                     	;# 
   722  0211                     	;# 
   723  0212                     	;# 
   724  0212                     	;# 
   725  0213                     	;# 
   726  0213                     	;# 
   727  0214                     	;# 
   728  0214                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0215                     	;# 
   732  0216                     	;# 
   733  0216                     	;# 
   734  0217                     	;# 
   735  0217                     	;# 
   736  0391                     	;# 
   737  0392                     	;# 
   738  0393                     	;# 
   739  0498                     	;# 
   740  0498                     	;# 
   741  0499                     	;# 
   742  049A                     	;# 
   743  049B                     	;# 
   744  049B                     	;# 
   745  049C                     	;# 
   746  049D                     	;# 
   747  049E                     	;# 
   748  049F                     	;# 
   749  0611                     	;# 
   750  0612                     	;# 
   751  0613                     	;# 
   752  0613                     	;# 
   753  0614                     	;# 
   754  0615                     	;# 
   755  0616                     	;# 
   756  0616                     	;# 
   757  0617                     	;# 
   758  0618                     	;# 
   759  0619                     	;# 
   760  0619                     	;# 
   761  061A                     	;# 
   762  061B                     	;# 
   763  061C                     	;# 
   764  061C                     	;# 
   765  0691                     	;# 
   766  0692                     	;# 
   767  0693                     	;# 
   768  0694                     	;# 
   769  0695                     	;# 
   770  0F0F                     	;# 
   771  0F10                     	;# 
   772  0F11                     	;# 
   773  0F12                     	;# 
   774  0F13                     	;# 
   775  0F14                     	;# 
   776  0F15                     	;# 
   777  0F16                     	;# 
   778  0F17                     	;# 
   779  0F18                     	;# 
   780  0F19                     	;# 
   781  0F1A                     	;# 
   782  0F1B                     	;# 
   783  0F1C                     	;# 
   784  0F1D                     	;# 
   785  0F1E                     	;# 
   786  0F1F                     	;# 
   787  0FE3                     	;# 
   788  0FE4                     	;# 
   789  0FE5                     	;# 
   790  0FE6                     	;# 
   791  0FE7                     	;# 
   792  0FE8                     	;# 
   793  0FE9                     	;# 
   794  0FEA                     	;# 
   795  0FEB                     	;# 
   796  0FED                     	;# 
   797  0FEE                     	;# 
   798  0FEF                     	;# 
   799  07E0                     _NVMEM_absaddr	set	2016
   800                           
   801                           	psect	stringtext1
   802  064E                     __pstringtext1:	
   803  064E                     _n_ADDRESS_P0:	
   804  064E  34AD               	retlw	173
   805  064F  3487               	retlw	135
   806  0650  3466               	retlw	102
   807  0651  34BC               	retlw	188
   808  0652  34BB               	retlw	187
   809  0653                     __end_of_n_ADDRESS_P0:	
   810                           
   811                           	psect	stringtext2
   812  066E                     __pstringtext2:	
   813  066E                     _n_ADDRESS_MUL:	
   814  066E  3421               	retlw	33
   815  066F                     __end_of_n_ADDRESS_MUL:	
   816  07E0                     _NVMEM_absaddr	set	2016
   817                           
   818                           	psect	_NVMEM_text
   819  07E0                     __p_NVMEM_text:	
   820  07E0                     _NVMEM:	
   821  07E0  3455               	retlw	85
   822  07E1  346E               	retlw	110
   823  07E2  3463               	retlw	99
   824  07E3  346F               	retlw	111
   825  07E4  346E               	retlw	110
   826  07E5  3466               	retlw	102
   827  07E6  3469               	retlw	105
   828  07E7  3467               	retlw	103
   829  07E8  3475               	retlw	117
   830  07E9  3472               	retlw	114
   831  07EA  3465               	retlw	101
   832  07EB  3464               	retlw	100
   833  07EC  3400               	retlw	0
   834  07ED  3400               	retlw	0
   835  07EE  3400               	retlw	0
   836  07EF  3400               	retlw	0
   837  07F0  3400               	retlw	0
   838  07F1  3400               	retlw	0
   839  07F2  3400               	retlw	0
   840  07F3  3400               	retlw	0
   841  07F4  3400               	retlw	0
   842  07F5  3400               	retlw	0
   843  07F6  3400               	retlw	0
   844  07F7  3400               	retlw	0
   845  07F8  3400               	retlw	0
   846  07F9  3400               	retlw	0
   847  07FA  3400               	retlw	0
   848  07FB  3400               	retlw	0
   849  07FC  3400               	retlw	0
   850  07FD  3400               	retlw	0
   851  07FE  3400               	retlw	0
   852  07FF  3400               	retlw	0
   853  0800                     __end_of_NVMEM:	
   854  0003                     _STATUSbits	set	3
   855  000C                     _PORTAbits	set	12
   856  000B                     _INTCONbits	set	11
   857  0097                     _WDTCONbits	set	151
   858  009E                     _ADCON1bits	set	158
   859  0095                     _OPTION_REGbits	set	149
   860  0099                     _OSCCONbits	set	153
   861  009C                     _ADRESH	set	156
   862  009B                     _ADRESL	set	155
   863  009D                     _ADCON0bits	set	157
   864  008E                     _TRISCbits	set	142
   865  008C                     _TRISAbits	set	140
   866  0117                     _FVRCONbits	set	279
   867  018E                     _ANSELCbits	set	398
   868  018C                     _ANSELAbits	set	396
   869  018E                     _ANSELC	set	398
   870  018C                     _ANSELA	set	396
   871  0194                     _PMDATH	set	404
   872  0193                     _PMDATL	set	403
   873  0196                     _PMCON2	set	406
   874  0195                     _PMCON1bits	set	405
   875  0192                     _PMADRH	set	402
   876  0191                     _PMADRL	set	401
   877  0195                     _PMCON1	set	405
   878  020C                     _WPUAbits	set	524
   879  0211                     _SSP1BUF	set	529
   880  0214                     _SSP1STATbits	set	532
   881  0215                     _SSPCON1bits	set	533
   882                           
   883                           	psect	stringtext3
   884  063C                     __pstringtext3:	
   885  063C                     STR_5:	
   886  063C  3441               	retlw	65	;'A'
   887  063D  3444               	retlw	68	;'D'
   888  063E  3443               	retlw	67	;'C'
   889  063F  3433               	retlw	51	;'3'
   890  0640  3431               	retlw	49	;'1'
   891  0641  3400               	retlw	0
   892                           
   893                           	psect	stringtext4
   894  0642                     __pstringtext4:	
   895  0642                     STR_4:	
   896  0642  3441               	retlw	65	;'A'
   897  0643  3444               	retlw	68	;'D'
   898  0644  3443               	retlw	67	;'C'
   899  0645  3432               	retlw	50	;'2'
   900  0646  3439               	retlw	57	;'9'
   901  0647  3400               	retlw	0
   902                           
   903                           	psect	stringtext5
   904  0653                     __pstringtext5:	
   905  0653                     STR_2:	
   906  0653  3441               	retlw	65	;'A'
   907  0654  3444               	retlw	68	;'D'
   908  0655  3443               	retlw	67	;'C'
   909  0656  3433               	retlw	51	;'3'
   910  0657  3400               	retlw	0
   911                           
   912                           	psect	stringtext6
   913  0658                     __pstringtext6:	
   914  0658                     STR_3:	
   915  0658  3441               	retlw	65	;'A'
   916  0659  3444               	retlw	68	;'D'
   917  065A  3443               	retlw	67	;'C'
   918  065B  3437               	retlw	55	;'7'
   919  065C  3400               	retlw	0
   920                           
   921                           	psect	stringtext7
   922  065D                     __pstringtext7:	
   923  065D                     STR_6:	
   924  065D  3442               	retlw	66	;'B'
   925  065E  344F               	retlw	79	;'O'
   926  065F  344F               	retlw	79	;'O'
   927  0660  3454               	retlw	84	;'T'
   928  0661  3400               	retlw	0
   929                           
   930                           	psect	stringtext8
   931  0662                     __pstringtext8:	
   932  0662                     STR_7:	
   933  0662  3441               	retlw	65	;'A'
   934  0663  3443               	retlw	67	;'C'
   935  0664  344B               	retlw	75	;'K'
   936  0665  3400               	retlw	0
   937                           
   938                           	psect	stringtext9
   939  0666                     __pstringtext9:	
   940  0666                     STR_1:	
   941  0666  3444               	retlw	68	;'D'
   942  0667  3442               	retlw	66	;'B'
   943  0668  3447               	retlw	71	;'G'
   944  0669  3400               	retlw	0
   945                           
   946                           	psect	stringtext10
   947  0000                     __pstringtext10:	
   948                           
   949                           ; #config settings
   950  0000                     
   951                           	psect	cinit
   952  0013                     start_initialization:	
   953  0013                     __initialization:	
   954                           
   955                           ; Clear objects allocated to BANK0
   956  0013  3049               	movlw	low __pbssBANK0
   957  0014  0084               	movwf	4
   958  0015  3000               	movlw	high __pbssBANK0
   959  0016  0085               	movwf	5
   960  0017  3024               	movlw	36
   961  0018  2648               	fcall	clear_ram0
   962                           
   963                           ; Clear objects allocated to BANK1
   964  0019  30A0               	movlw	low __pbssBANK1
   965  001A  0084               	movwf	4
   966  001B  3000               	movlw	high __pbssBANK1
   967  001C  0085               	movwf	5
   968  001D  3010               	movlw	16
   969  001E  2648               	fcall	clear_ram0
   970  001F                     end_of_initialization:	
   971                           ;End of C runtime variable initialization code
   972                           
   973  001F                     __end_of__initialization:	
   974  001F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   975  0020  0020               	movlb	0
   976  0021  2AB9               	ljmp	_main	;jump to C main() function
   977                           
   978                           	psect	bssBANK0
   979  0049                     __pbssBANK0:	
   980  0049                     _counter:	
   981  0049                     	ds	2
   982  004B                     _sleepLoop:	
   983  004B                     	ds	1
   984  004C                     _nrf24l01:	
   985  004C                     	ds	1
   986  004D                     _nrf24l01RXValue:	
   987  004D                     	ds	8
   988  0055                     _nrf24l01RXTopic:	
   989  0055                     	ds	8
   990  005D                     _nrf24l01TXValue:	
   991  005D                     	ds	8
   992  0065                     _nrf24l01TXTopic:	
   993  0065                     	ds	8
   994                           
   995                           	psect	bssBANK1
   996  00A0                     __pbssBANK1:	
   997  00A0                     _nrf24l01Name:	
   998  00A0                     	ds	16
   999                           
  1000                           	psect	clrtext
  1001  0648                     clear_ram0:	
  1002                           ;	Called with FSR0 containing the base address, and
  1003                           ;	WREG with the size to clear
  1004                           
  1005  0648  0064               	clrwdt	;clear the watchdog before getting into this loop
  1006  0649                     clrloop0:	
  1007  0649  0180               	clrf	0	;clear RAM location pointed to by FSR
  1008  064A  3101               	addfsr 0,1
  1009  064B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1010  064C  2E49               	goto	clrloop0	;have we reached the end yet?
  1011  064D  3400               	retlw	0	;all done for this memory range, return
  1012                           
  1013                           	psect	cstackBANK1
  1014  00B0                     __pcstackBANK1:	
  1015  00B0                     ??_main:	
  1016                           
  1017                           ; 1 bytes @ 0x0
  1018  00B0                     	ds	3
  1019                           
  1020                           	psect	cstackCOMMON
  1021  0070                     __pcstackCOMMON:	
  1022  0070                     ?_nrf24l01ISR:	
  1023  0070                     ?_nrf24l01SetRXMode:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0070                     ?_nrf24l01SendString:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0070                     ?_nrf24l01Init:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ?_nrf24l01InterfaceInit:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     ?_nrf24l01SPISend:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ??_nrf24l01SPISend:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ?_nrf24l01SPIStart:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ??_nrf24l01SPIStart:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047  0070                     ?_nrf24l01SPIEnd:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050  0070                     ??_nrf24l01SPIEnd:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     ?_enableInterrupts:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0070                     ??_enableInterrupts:	
  1057                           ; 1 bytes @ 0x0
  1058                           
  1059  0070                     ?_ISR:	
  1060                           ; 1 bytes @ 0x0
  1061                           
  1062  0070                     ?_sleep:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065  0070                     ?_checkRxData:	
  1066                           ; 1 bytes @ 0x0
  1067                           
  1068  0070                     ?_loop:	
  1069                           ; 1 bytes @ 0x0
  1070                           
  1071  0070                     ?_main:	
  1072                           ; 1 bytes @ 0x0
  1073                           
  1074  0070                     ?_nrf24l01HandleRX:	
  1075                           ; 1 bytes @ 0x0
  1076                           
  1077  0070                     ?_nrf24l01InitRegisters:	
  1078                           ; 1 bytes @ 0x0
  1079                           
  1080  0070                     ?_strcmp:	
  1081                           ; 1 bytes @ 0x0
  1082                           
  1083  0070                     nrf24l01SPISend@data:	
  1084                           ; 2 bytes @ 0x0
  1085                           
  1086  0070                     enableInterrupts@enable:	
  1087                           ; 1 bytes @ 0x0
  1088                           
  1089  0070                     strcmp@s2:	
  1090                           ; 1 bytes @ 0x0
  1091                           
  1092                           
  1093                           ; 2 bytes @ 0x0
  1094  0070                     	ds	1
  1095  0071                     ??_nrf24l01Send:	
  1096                           
  1097                           ; 1 bytes @ 0x1
  1098  0071                     	ds	1
  1099  0072                     ??_strcmp:	
  1100  0072                     nrf24l01Send@command:	
  1101                           ; 1 bytes @ 0x2
  1102                           
  1103                           
  1104                           ; 1 bytes @ 0x2
  1105  0072                     	ds	1
  1106  0073                     ??_nrf24l01SetRXMode:	
  1107  0073                     strcmp@r:	
  1108                           ; 1 bytes @ 0x3
  1109                           
  1110                           
  1111                           ; 1 bytes @ 0x3
  1112  0073                     	ds	1
  1113  0074                     nrf24l01SetRXMode@rxMode:	
  1114  0074                     strcmp@s1:	
  1115                           ; 1 bytes @ 0x4
  1116                           
  1117                           
  1118                           ; 1 bytes @ 0x4
  1119  0074                     	ds	1
  1120  0075                     nrf24l01SetRXMode@config:	
  1121                           
  1122                           ; 1 bytes @ 0x5
  1123  0075                     	ds	1
  1124  0076                     ??_nrf24l01HandleRX:	
  1125                           
  1126                           ; 1 bytes @ 0x6
  1127  0076                     	ds	3
  1128  0079                     nrf24l01HandleRX@width:	
  1129                           
  1130                           ; 1 bytes @ 0x9
  1131  0079                     	ds	1
  1132  007A                     nrf24l01HandleRX@offset:	
  1133                           
  1134                           ; 1 bytes @ 0xA
  1135  007A                     	ds	1
  1136  007B                     nrf24l01HandleRX@byte:	
  1137                           
  1138                           ; 1 bytes @ 0xB
  1139  007B                     	ds	1
  1140  007C                     nrf24l01HandleRX@i:	
  1141                           
  1142                           ; 1 bytes @ 0xC
  1143  007C                     	ds	1
  1144  007D                     ??_nrf24l01ISR:	
  1145                           
  1146                           ; 1 bytes @ 0xD
  1147  007D                     	ds	1
  1148                           
  1149                           	psect	cstackBANK0
  1150  0020                     __pcstackBANK0:	
  1151  0020                     ?_nrf24l01Send:	
  1152  0020                     nrf24l01Send@data:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155                           
  1156                           ; 1 bytes @ 0x0
  1157  0020                     	ds	1
  1158  0021                     nrf24l01ISR@status:	
  1159                           
  1160                           ; 1 bytes @ 0x1
  1161  0021                     	ds	1
  1162  0022                     ??_ISR:	
  1163                           
  1164                           ; 1 bytes @ 0x2
  1165  0022                     	ds	1
  1166  0023                     ?_strcpy:	
  1167  0023                     ??_nrf24l01SendString:	
  1168                           ; 1 bytes @ 0x3
  1169                           
  1170  0023                     ??_nrf24l01InterfaceInit:	
  1171                           ; 1 bytes @ 0x3
  1172                           
  1173  0023                     ??_sleep:	
  1174                           ; 1 bytes @ 0x3
  1175                           
  1176  0023                     ??_checkRxData:	
  1177                           ; 1 bytes @ 0x3
  1178                           
  1179  0023                     ??_nrf24l01InitRegisters:	
  1180                           ; 1 bytes @ 0x3
  1181                           
  1182  0023                     ?_read_flashmem:	
  1183                           ; 1 bytes @ 0x3
  1184                           
  1185  0023                     ?___lwdiv:	
  1186                           ; 2 bytes @ 0x3
  1187                           
  1188  0023                     ?___lwmod:	
  1189                           ; 2 bytes @ 0x3
  1190                           
  1191  0023                     ?___lmul:	
  1192                           ; 2 bytes @ 0x3
  1193                           
  1194  0023                     ?___lldiv:	
  1195                           ; 4 bytes @ 0x3
  1196                           
  1197  0023                     read_flashmem@offset:	
  1198                           ; 4 bytes @ 0x3
  1199                           
  1200  0023                     ___lwdiv@divisor:	
  1201                           ; 2 bytes @ 0x3
  1202                           
  1203  0023                     ___lwmod@divisor:	
  1204                           ; 2 bytes @ 0x3
  1205                           
  1206  0023                     strcpy@from:	
  1207                           ; 2 bytes @ 0x3
  1208                           
  1209  0023                     ___lmul@multiplier:	
  1210                           ; 2 bytes @ 0x3
  1211                           
  1212  0023                     ___lldiv@divisor:	
  1213                           ; 4 bytes @ 0x3
  1214                           
  1215                           
  1216                           ; 4 bytes @ 0x3
  1217  0023                     	ds	1
  1218  0024                     nrf24l01SendString@waitForAck:	
  1219  0024                     nrf24l01InitRegisters@setupAW:	
  1220                           ; 1 bytes @ 0x4
  1221                           
  1222                           
  1223                           ; 1 bytes @ 0x4
  1224  0024                     	ds	1
  1225  0025                     ??_strcpy:	
  1226  0025                     ??_read_flashmem:	
  1227                           ; 1 bytes @ 0x5
  1228                           
  1229  0025                     nrf24l01SendString@i:	
  1230                           ; 1 bytes @ 0x5
  1231                           
  1232  0025                     nrf24l01InitRegisters@rfSetup:	
  1233                           ; 1 bytes @ 0x5
  1234                           
  1235  0025                     ___lwdiv@dividend:	
  1236                           ; 1 bytes @ 0x5
  1237                           
  1238  0025                     ___lwmod@dividend:	
  1239                           ; 2 bytes @ 0x5
  1240                           
  1241                           
  1242                           ; 2 bytes @ 0x5
  1243  0025                     	ds	1
  1244  0026                     nrf24l01InitRegisters@feature:	
  1245  0026                     strcpy@cp:	
  1246                           ; 1 bytes @ 0x6
  1247                           
  1248                           
  1249                           ; 1 bytes @ 0x6
  1250  0026                     	ds	1
  1251  0027                     ??___lwdiv:	
  1252  0027                     ??___lwmod:	
  1253                           ; 1 bytes @ 0x7
  1254                           
  1255  0027                     nrf24l01InitRegisters@status:	
  1256                           ; 1 bytes @ 0x7
  1257                           
  1258  0027                     strcpy@to:	
  1259                           ; 1 bytes @ 0x7
  1260                           
  1261  0027                     ___lmul@multiplicand:	
  1262                           ; 1 bytes @ 0x7
  1263                           
  1264  0027                     ___lldiv@dividend:	
  1265                           ; 4 bytes @ 0x7
  1266                           
  1267                           
  1268                           ; 4 bytes @ 0x7
  1269  0027                     	ds	1
  1270  0028                     nrf24l01InitRegisters@enRXAddr:	
  1271  0028                     ___lwmod@counter:	
  1272                           ; 1 bytes @ 0x8
  1273                           
  1274  0028                     read_flashmem@result:	
  1275                           ; 1 bytes @ 0x8
  1276                           
  1277  0028                     ___lwdiv@quotient:	
  1278                           ; 2 bytes @ 0x8
  1279                           
  1280                           
  1281                           ; 2 bytes @ 0x8
  1282  0028                     	ds	1
  1283  0029                     nrf24l01InitRegisters@enAA:	
  1284                           
  1285                           ; 1 bytes @ 0x9
  1286  0029                     	ds	1
  1287  002A                     nrf24l01InitRegisters@DynPD:	
  1288  002A                     ___lwdiv@counter:	
  1289                           ; 1 bytes @ 0xA
  1290                           
  1291  002A                     read_flashmem@address:	
  1292                           ; 1 bytes @ 0xA
  1293                           
  1294                           
  1295                           ; 2 bytes @ 0xA
  1296  002A                     	ds	1
  1297  002B                     ??___lmul:	
  1298  002B                     ??___lldiv:	
  1299                           ; 1 bytes @ 0xB
  1300                           
  1301  002B                     nrf24l01InitRegisters@config:	
  1302                           ; 1 bytes @ 0xB
  1303                           
  1304  002B                     ___lmul@product:	
  1305                           ; 1 bytes @ 0xB
  1306                           
  1307                           
  1308                           ; 4 bytes @ 0xB
  1309  002B                     	ds	1
  1310  002C                     ??_nrf24l01Init:	
  1311  002C                     ___lldiv@quotient:	
  1312                           ; 1 bytes @ 0xC
  1313                           
  1314                           
  1315                           ; 4 bytes @ 0xC
  1316  002C                     	ds	4
  1317  0030                     ___lldiv@counter:	
  1318                           
  1319                           ; 1 bytes @ 0x10
  1320  0030                     	ds	1
  1321  0031                     ?_getADCValue:	
  1322  0031                     getADCValue@divider:	
  1323                           ; 4 bytes @ 0x11
  1324                           
  1325                           
  1326                           ; 4 bytes @ 0x11
  1327  0031                     	ds	4
  1328  0035                     ??_getADCValue:	
  1329                           
  1330                           ; 1 bytes @ 0x15
  1331  0035                     	ds	4
  1332  0039                     getADCValue@channel:	
  1333                           
  1334                           ; 1 bytes @ 0x19
  1335  0039                     	ds	1
  1336  003A                     getADCValue@adcLoop:	
  1337                           
  1338                           ; 1 bytes @ 0x1A
  1339  003A                     	ds	1
  1340  003B                     getADCValue@adcSum:	
  1341                           
  1342                           ; 4 bytes @ 0x1B
  1343  003B                     	ds	4
  1344  003F                     ?_utoa:	
  1345  003F                     utoa@val:	
  1346                           ; 1 bytes @ 0x1F
  1347                           
  1348                           
  1349                           ; 2 bytes @ 0x1F
  1350  003F                     	ds	2
  1351  0041                     utoa@base:	
  1352                           
  1353                           ; 2 bytes @ 0x21
  1354  0041                     	ds	2
  1355  0043                     ??_utoa:	
  1356                           
  1357                           ; 1 bytes @ 0x23
  1358  0043                     	ds	1
  1359  0044                     utoa@v:	
  1360                           
  1361                           ; 2 bytes @ 0x24
  1362  0044                     	ds	2
  1363  0046                     utoa@c:	
  1364                           
  1365                           ; 1 bytes @ 0x26
  1366  0046                     	ds	1
  1367  0047                     utoa@buf:	
  1368                           
  1369                           ; 1 bytes @ 0x27
  1370  0047                     	ds	1
  1371  0048                     ??_loop:	
  1372  0048                     main@i:	
  1373                           ; 1 bytes @ 0x28
  1374                           
  1375                           
  1376                           ; 1 bytes @ 0x28
  1377  0048                     	ds	1
  1378                           
  1379                           	psect	maintext
  1380  02B9                     __pmaintext:	
  1381 ;;
  1382 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1383 ;;
  1384 ;; *************** function _main *****************
  1385 ;; Defined at:
  1386 ;;		line 106 in file "main.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;		None
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;  i               1   40[BANK0 ] unsigned char 
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  1    wreg      void 
  1393 ;; Registers used:
  1394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1395 ;; Tracked objects:
  1396 ;;		On entry : B1F/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMMON   BANK0   BANK1
  1400 ;;      Params:         0       0       0
  1401 ;;      Locals:         0       1       0
  1402 ;;      Temps:          0       0       3
  1403 ;;      Totals:         0       1       3
  1404 ;;Total ram usage:        4 bytes
  1405 ;; Hardware stack levels required when called:   11
  1406 ;; This function calls:
  1407 ;;		_loop
  1408 ;;		_nrf24l01Init
  1409 ;;		_nrf24l01SendString
  1410 ;;		_read_flashmem
  1411 ;;		_sleep
  1412 ;;		_strcpy
  1413 ;;		_utoa
  1414 ;; This function is called by:
  1415 ;;		Startup code after reset
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           
  1420                           ;psect for function _main
  1421  02B9                     _main:	
  1422                           
  1423                           ;main.c: 109: ANSELA = 0x00;
  1424                           
  1425                           ;incstack = 0
  1426                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1427  02B9  0023               	movlb	3	; select bank3
  1428  02BA  018C               	clrf	12	;volatile
  1429                           
  1430                           ;main.c: 110: ANSELC = 0x00;
  1431  02BB  018E               	clrf	14	;volatile
  1432                           
  1433                           ;main.c: 116: INTCONbits.PEIE = 0;
  1434  02BC  130B               	bcf	11,6	;volatile
  1435                           
  1436                           ;main.c: 117: INTCONbits.GIE = 0;
  1437  02BD  138B               	bcf	11,7	;volatile
  1438                           
  1439                           ;main.c: 119: OSCCONbits.IRCF = 0b1111;
  1440  02BE  3078               	movlw	120
  1441  02BF  0021               	movlb	1	; select bank1
  1442  02C0  0499               	iorwf	25,f	;volatile
  1443                           
  1444                           ;main.c: 120: OSCCONbits.SCS = 0b10;
  1445  02C1  0819               	movf	25,w	;volatile
  1446  02C2  39FC               	andlw	-4
  1447  02C3  3802               	iorlw	2
  1448  02C4  0099               	movwf	25	;volatile
  1449                           
  1450                           ;main.c: 122: _delay((unsigned long)((10)*(16000000/4000.0)));
  1451  02C5  3034               	movlw	52
  1452  02C6  0021               	movlb	1	; select bank1
  1453  02C7  00B0               	movwf	??_main^(0+128)
  1454  02C8  30F1               	movlw	241
  1455  02C9                     u1557:	
  1456  02C9  0B89               	decfsz	9,f
  1457  02CA  2AC9               	goto	u1557
  1458  02CB  0BB0               	decfsz	??_main^(0+128),f
  1459  02CC  2AC9               	goto	u1557
  1460  02CD  3200               	nop2
  1461                           
  1462                           ;main.c: 124: nrf24l01Init();
  1463  02CE  25BC               	fcall	_nrf24l01Init
  1464                           
  1465                           ;main.c: 126: for (unsigned char i = 0; i < sizeof(nrf24l01Name); i++){
  1466  02CF  0020               	movlb	0	; select bank0
  1467  02D0  01C8               	clrf	main@i
  1468  02D1  3010               	movlw	16
  1469  02D2  0248               	subwf	main@i,w
  1470  02D3  1803               	btfsc	3,0
  1471  02D4  2AF6               	goto	l173
  1472  02D5                     l2086:	
  1473                           
  1474                           ;main.c: 127: nrf24l01Name[i] = read_flashmem((unsigned) 0 + i);
  1475  02D5  0848               	movf	main@i,w
  1476  02D6  0021               	movlb	1	; select bank1
  1477  02D7  00B0               	movwf	??_main^(0+128)
  1478  02D8  01B1               	clrf	(??_main^(0+128)+1)
  1479  02D9  0830               	movf	??_main^(0+128),w
  1480  02DA  0020               	movlb	0	; select bank0
  1481  02DB  00A3               	movwf	read_flashmem@offset
  1482  02DC  0021               	movlb	1	; select bank1
  1483  02DD  0831               	movf	(??_main+1)^(0+128),w
  1484  02DE  0020               	movlb	0	; select bank0
  1485  02DF  00A4               	movwf	read_flashmem@offset+1
  1486  02E0  24E2               	fcall	_read_flashmem
  1487  02E1  0020               	movlb	0	; select bank0
  1488  02E2  0823               	movf	?_read_flashmem,w
  1489  02E3  0021               	movlb	1	; select bank1
  1490  02E4  00B2               	movwf	(??_main+2)^(0+128)
  1491  02E5  0020               	movlb	0	; select bank0
  1492  02E6  0848               	movf	main@i,w
  1493  02E7  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  1494  02E8  0086               	movwf	6
  1495  02E9  0187               	clrf	7
  1496  02EA  0021               	movlb	1	; select bank1
  1497  02EB  0832               	movf	(??_main+2)^(0+128),w
  1498  02EC  0081               	movwf	1
  1499  02ED  3001               	movlw	1
  1500  02EE  00B0               	movwf	??_main^(0+128)
  1501  02EF  0830               	movf	??_main^(0+128),w
  1502  02F0  0020               	movlb	0	; select bank0
  1503  02F1  07C8               	addwf	main@i,f
  1504  02F2  3010               	movlw	16
  1505  02F3  0248               	subwf	main@i,w
  1506  02F4  1C03               	skipc
  1507  02F5  2AD5               	goto	l2086
  1508  02F6                     l173:	
  1509                           
  1510                           ;main.c: 128: }
  1511                           ;main.c: 130: OPTION_REGbits.nWPUEN = 0;
  1512  02F6  0021               	movlb	1	; select bank1
  1513  02F7  1395               	bcf	21,7	;volatile
  1514                           
  1515                           ;main.c: 133: FVRCONbits.FVREN = 0;
  1516  02F8  0022               	movlb	2	; select bank2
  1517  02F9  1397               	bcf	23,7	;volatile
  1518                           
  1519                           ;main.c: 134: FVRCONbits.ADFVR = 1;
  1520  02FA  0817               	movf	23,w	;volatile
  1521  02FB  39FC               	andlw	-4
  1522  02FC  3801               	iorlw	1
  1523  02FD  0097               	movwf	23	;volatile
  1524                           
  1525                           ;main.c: 135: FVRCONbits.FVREN = 1;
  1526  02FE  1797               	bsf	23,7	;volatile
  1527                           
  1528                           ;main.c: 138: FVRCONbits.TSEN = 0;
  1529  02FF  1297               	bcf	23,5	;volatile
  1530                           
  1531                           ;main.c: 139: FVRCONbits.TSRNG = 0;
  1532  0300  1217               	bcf	23,4	;volatile
  1533                           
  1534                           ;main.c: 140: FVRCONbits.TSEN = 1;
  1535  0301  1697               	bsf	23,5	;volatile
  1536                           
  1537                           ;main.c: 143: ADCON0bits.ADON = 0;
  1538  0302  0021               	movlb	1	; select bank1
  1539  0303  101D               	bcf	29,0	;volatile
  1540                           
  1541                           ;main.c: 145: ANSELAbits.ANSA4 = 1;
  1542  0304  0023               	movlb	3	; select bank3
  1543  0305  160C               	bsf	12,4	;volatile
  1544                           
  1545                           ;main.c: 146: TRISAbits.TRISA4 = 1;
  1546  0306  0021               	movlb	1	; select bank1
  1547  0307  160C               	bsf	12,4	;volatile
  1548                           
  1549                           ;main.c: 147: WPUAbits.WPUA4 = 0;
  1550  0308  0024               	movlb	4	; select bank4
  1551  0309  120C               	bcf	12,4	;volatile
  1552                           
  1553                           ;main.c: 149: ANSELCbits.ANSC3 = 1;
  1554  030A  0023               	movlb	3	; select bank3
  1555  030B  158E               	bsf	14,3	;volatile
  1556                           
  1557                           ;main.c: 150: TRISCbits.TRISC3 = 1;
  1558  030C  0021               	movlb	1	; select bank1
  1559  030D  158E               	bsf	14,3	;volatile
  1560                           
  1561                           ;main.c: 152: ADCON1bits.ADCS = 0b111;
  1562  030E  3070               	movlw	112
  1563  030F  049E               	iorwf	30,f	;volatile
  1564                           
  1565                           ;main.c: 153: ADCON1bits.ADFM = 1;
  1566  0310  179E               	bsf	30,7	;volatile
  1567                           
  1568                           ;main.c: 154: ADCON1bits.ADPREF = 0b00;
  1569  0311  30FC               	movlw	-4
  1570  0312  059E               	andwf	30,f	;volatile
  1571                           
  1572                           ;main.c: 156: ADCON0bits.CHS = 3;
  1573  0313  081D               	movf	29,w	;volatile
  1574  0314  3983               	andlw	-125
  1575  0315  380C               	iorlw	12
  1576  0316  009D               	movwf	29	;volatile
  1577                           
  1578                           ;main.c: 157: ADCON0bits.ADON = 1;
  1579  0317  141D               	bsf	29,0	;volatile
  1580                           
  1581                           ;main.c: 161: TRISAbits.TRISA2 = 1;
  1582  0318  150C               	bsf	12,2	;volatile
  1583                           
  1584                           ;main.c: 162: INTCONbits.INTE = 1;
  1585  0319  160B               	bsf	11,4	;volatile
  1586                           
  1587                           ;main.c: 163: OPTION_REGbits.INTEDG = 0;
  1588  031A  1315               	bcf	21,6	;volatile
  1589                           
  1590                           ;main.c: 167: WDTCONbits.WDTPS = 11;
  1591  031B  0817               	movf	23,w	;volatile
  1592  031C  39C1               	andlw	-63
  1593  031D  3816               	iorlw	22
  1594  031E  0097               	movwf	23	;volatile
  1595                           
  1596                           ;main.c: 170: TRISAbits.TRISA5 = 0;
  1597  031F  128C               	bcf	12,5	;volatile
  1598                           
  1599                           ;main.c: 171: PORTAbits.RA5 = 0;
  1600  0320  0020               	movlb	0	; select bank0
  1601  0321  128C               	bcf	12,5	;volatile
  1602                           
  1603                           ;main.c: 174: INTCONbits.PEIE = 1;
  1604  0322  170B               	bsf	11,6	;volatile
  1605                           
  1606                           ;main.c: 175: INTCONbits.GIE = 1;
  1607  0323  178B               	bsf	11,7	;volatile
  1608                           
  1609                           ;main.c: 177: strcpy(nrf24l01TXTopic, "BOOT");
  1610  0324  305D               	movlw	low (STR_6| (0+32768))
  1611  0325  00A3               	movwf	strcpy@from
  1612  0326  3086               	movlw	high (STR_6| (0+32768))
  1613  0327  00A4               	movwf	strcpy@from+1
  1614  0328  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  1615  0329  25D7               	fcall	_strcpy
  1616                           
  1617                           ;main.c: 178: utoa(nrf24l01TXValue, read_flashmem(0 + 16), 10);
  1618  032A  3010               	movlw	16
  1619  032B  0020               	movlb	0	; select bank0
  1620  032C  00A3               	movwf	read_flashmem@offset
  1621  032D  3000               	movlw	0
  1622  032E  00A4               	movwf	read_flashmem@offset+1
  1623  032F  24E2               	fcall	_read_flashmem
  1624  0330  0020               	movlb	0	; select bank0
  1625  0331  0824               	movf	?_read_flashmem+1,w
  1626  0332  00C0               	movwf	utoa@val+1
  1627  0333  0823               	movf	?_read_flashmem,w
  1628  0334  00BF               	movwf	utoa@val
  1629  0335  300A               	movlw	10
  1630  0336  00C1               	movwf	utoa@base
  1631  0337  3000               	movlw	0
  1632  0338  00C2               	movwf	utoa@base+1
  1633  0339  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  1634  033A  23C5               	fcall	_utoa
  1635                           
  1636                           ;main.c: 179: nrf24l01SendString(0);
  1637  033B  3000               	movlw	0
  1638  033C  2199               	fcall	_nrf24l01SendString
  1639                           
  1640                           ;main.c: 180: sleep();
  1641  033D  261E               	fcall	_sleep
  1642  033E                     l2140:	
  1643                           ;main.c: 182: while(1){
  1644                           
  1645                           
  1646                           ;main.c: 183: loop();
  1647  033E  2100               	fcall	_loop
  1648  033F  2B3E               	goto	l2140
  1649  0340                     __end_of_main:	
  1650                           ;main.c: 184: }
  1651                           ;main.c: 186: return;
  1652                           
  1653                           
  1654                           	psect	text1
  1655  04E2                     __ptext1:	
  1656 ;; *************** function _read_flashmem *****************
  1657 ;; Defined at:
  1658 ;;		line 59 in file "flash.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;  offset          2    3[BANK0 ] unsigned int 
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;  address         2   10[BANK0 ] unsigned int 
  1663 ;;  result          2    8[BANK0 ] unsigned int 
  1664 ;; Return value:  Size  Location     Type
  1665 ;;                  2    3[BANK0 ] unsigned int 
  1666 ;; Registers used:
  1667 ;;		wreg, status,2, status,0
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMMON   BANK0   BANK1
  1673 ;;      Params:         0       2       0
  1674 ;;      Locals:         0       4       0
  1675 ;;      Temps:          0       3       0
  1676 ;;      Totals:         0       9       0
  1677 ;;Total ram usage:        9 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; Hardware stack levels required when called:    6
  1680 ;; This function calls:
  1681 ;;		Nothing
  1682 ;; This function is called by:
  1683 ;;		_main
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           
  1688                           ;psect for function _read_flashmem
  1689  04E2                     _read_flashmem:	
  1690                           
  1691                           ;flash.c: 61: unsigned int address;
  1692                           ;flash.c: 63: INTCONbits.GIE = 0;
  1693                           
  1694                           ;incstack = 0
  1695                           ; Regs used in _read_flashmem: [wreg+status,2+status,0]
  1696  04E2  138B               	bcf	11,7	;volatile
  1697                           
  1698                           ;flash.c: 65: PMCON1 = 0x00;
  1699  04E3  0023               	movlb	3	; select bank3
  1700  04E4  0195               	clrf	21	;volatile
  1701                           
  1702                           ;flash.c: 67: address = (0x800U-32) + offset;
  1703  04E5  0020               	movlb	0	; select bank0
  1704  04E6  0823               	movf	read_flashmem@offset,w
  1705  04E7  3EE0               	addlw	224
  1706  04E8  00AA               	movwf	read_flashmem@address
  1707  04E9  3007               	movlw	7
  1708  04EA  3D24               	addwfc	read_flashmem@offset+1,w
  1709  04EB  00AB               	movwf	read_flashmem@address+1
  1710                           
  1711                           ;flash.c: 68: PMADRL = (char) (address >> 0);
  1712  04EC  082A               	movf	read_flashmem@address,w
  1713  04ED  0023               	movlb	3	; select bank3
  1714  04EE  0091               	movwf	17	;volatile
  1715                           
  1716                           ;flash.c: 69: PMADRH = (char) (address >> 8);
  1717  04EF  0020               	movlb	0	; select bank0
  1718  04F0  082B               	movf	read_flashmem@address+1,w
  1719  04F1  0023               	movlb	3	; select bank3
  1720  04F2  0092               	movwf	18	;volatile
  1721                           
  1722                           ;flash.c: 71: PMCON1bits.RD = 1;
  1723  04F3  1415               	bsf	21,0	;volatile
  1724                           
  1725                           ;flash.c: 73: __nop();
  1726  04F4  0000               	nop
  1727                           
  1728                           ;flash.c: 74: __nop();
  1729  04F5  0000               	nop
  1730                           
  1731                           ;flash.c: 76: unsigned int result = 0;
  1732  04F6  0020               	movlb	0	; select bank0
  1733  04F7  01A8               	clrf	read_flashmem@result
  1734  04F8  01A9               	clrf	read_flashmem@result+1
  1735                           
  1736                           ;flash.c: 77: result = PMDATL;
  1737  04F9  0023               	movlb	3	; select bank3
  1738  04FA  0813               	movf	19,w	;volatile
  1739  04FB  0020               	movlb	0	; select bank0
  1740  04FC  00A5               	movwf	??_read_flashmem
  1741  04FD  01A6               	clrf	??_read_flashmem+1
  1742  04FE  0825               	movf	??_read_flashmem,w
  1743  04FF  00A8               	movwf	read_flashmem@result
  1744  0500  0826               	movf	??_read_flashmem+1,w
  1745  0501  00A9               	movwf	read_flashmem@result+1
  1746                           
  1747                           ;flash.c: 78: result|= ( (unsigned) (PMDATH) << 8);
  1748  0502  0023               	movlb	3	; select bank3
  1749  0503  0814               	movf	20,w	;volatile
  1750  0504  0020               	movlb	0	; select bank0
  1751  0505  00A5               	movwf	??_read_flashmem
  1752  0506  01A6               	clrf	??_read_flashmem+1
  1753  0507  0825               	movf	??_read_flashmem,w
  1754  0508  00A6               	movwf	??_read_flashmem+1
  1755  0509  01A5               	clrf	??_read_flashmem
  1756  050A  0825               	movf	??_read_flashmem,w
  1757  050B  04A8               	iorwf	read_flashmem@result,f
  1758  050C  0826               	movf	??_read_flashmem+1,w
  1759  050D  04A9               	iorwf	read_flashmem@result+1,f
  1760                           
  1761                           ;flash.c: 80: INTCONbits.GIE = 1;
  1762  050E  178B               	bsf	11,7	;volatile
  1763                           
  1764                           ;flash.c: 82: return result;
  1765  050F  0829               	movf	read_flashmem@result+1,w
  1766  0510  00A4               	movwf	?_read_flashmem+1
  1767  0511  0828               	movf	read_flashmem@result,w
  1768  0512  00A3               	movwf	?_read_flashmem
  1769  0513  0008               	return
  1770  0514                     __end_of_read_flashmem:	
  1771                           
  1772                           	psect	text2
  1773  05BC                     __ptext2:	
  1774 ;; *************** function _nrf24l01Init *****************
  1775 ;; Defined at:
  1776 ;;		line 332 in file "nrf24l01.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, status,2, status,0, pclath, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMMON   BANK0   BANK1
  1790 ;;      Params:         0       0       0
  1791 ;;      Locals:         0       0       0
  1792 ;;      Temps:          0       2       0
  1793 ;;      Totals:         0       2       0
  1794 ;;Total ram usage:        2 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    9
  1797 ;; This function calls:
  1798 ;;		_nrf24l01InitRegisters
  1799 ;;		_nrf24l01InterfaceInit
  1800 ;; This function is called by:
  1801 ;;		_main
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           
  1806                           ;psect for function _nrf24l01Init
  1807  05BC                     _nrf24l01Init:	
  1808                           
  1809                           ;nrf24l01.c: 335: nrf24l01InterfaceInit();
  1810                           
  1811                           ;incstack = 0
  1812                           ; Regs used in _nrf24l01Init: [wreg+status,2+status,0+pclath+cstack]
  1813  05BC  2605               	fcall	_nrf24l01InterfaceInit
  1814                           
  1815                           ;nrf24l01.c: 339: PORTAbits.RA0 = 0;
  1816  05BD  0020               	movlb	0	; select bank0
  1817  05BE  100C               	bcf	12,0	;volatile
  1818                           
  1819                           ;nrf24l01.c: 341: _delay((unsigned long)((50000)*(16000000/4000000.0)));
  1820  05BF  3002               	movlw	2
  1821  05C0  0020               	movlb	0	; select bank0
  1822  05C1  00AD               	movwf	??_nrf24l01Init+1
  1823  05C2  3004               	movlw	4
  1824  05C3  00AC               	movwf	??_nrf24l01Init
  1825  05C4  30BA               	movlw	186
  1826  05C5                     u1567:	
  1827  05C5  0B89               	decfsz	9,f
  1828  05C6  2DC5               	goto	u1567
  1829  05C7  0BAC               	decfsz	??_nrf24l01Init,f
  1830  05C8  2DC5               	goto	u1567
  1831  05C9  0BAD               	decfsz	??_nrf24l01Init+1,f
  1832  05CA  2DC5               	goto	u1567
  1833  05CB  0000               	nop
  1834                           
  1835                           ;nrf24l01.c: 343: nrf24l01InitRegisters();
  1836  05CC  222F               	fcall	_nrf24l01InitRegisters
  1837                           
  1838                           ;nrf24l01.c: 345: _delay((unsigned long)((1000)*(16000000/4000000.0)));
  1839  05CD  3006               	movlw	6
  1840  05CE  0020               	movlb	0	; select bank0
  1841  05CF  00AC               	movwf	??_nrf24l01Init
  1842  05D0  3030               	movlw	48
  1843  05D1                     u1577:	
  1844  05D1  0B89               	decfsz	9,f
  1845  05D2  2DD1               	goto	u1577
  1846  05D3  0BAC               	decfsz	??_nrf24l01Init,f
  1847  05D4  2DD1               	goto	u1577
  1848  05D5  0000               	nop
  1849  05D6  0008               	return
  1850  05D7                     __end_of_nrf24l01Init:	
  1851                           
  1852                           	psect	text3
  1853  0605                     __ptext3:	
  1854 ;; *************** function _nrf24l01InterfaceInit *****************
  1855 ;; Defined at:
  1856 ;;		line 7 in file "interface.c"
  1857 ;; Parameters:    Size  Location     Type
  1858 ;;		None
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;		None
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  1    wreg      void 
  1863 ;; Registers used:
  1864 ;;		wreg, status,2, status,0
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMMON   BANK0   BANK1
  1870 ;;      Params:         0       0       0
  1871 ;;      Locals:         0       0       0
  1872 ;;      Temps:          0       0       0
  1873 ;;      Totals:         0       0       0
  1874 ;;Total ram usage:        0 bytes
  1875 ;; Hardware stack levels used:    1
  1876 ;; Hardware stack levels required when called:    6
  1877 ;; This function calls:
  1878 ;;		Nothing
  1879 ;; This function is called by:
  1880 ;;		_nrf24l01Init
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884                           
  1885                           ;psect for function _nrf24l01InterfaceInit
  1886  0605                     _nrf24l01InterfaceInit:	
  1887                           
  1888                           ;interface.c: 9: TRISAbits.TRISA0 = 0;
  1889                           
  1890                           ;incstack = 0
  1891                           ; Regs used in _nrf24l01InterfaceInit: [wreg+status,2+status,0]
  1892  0605  0021               	movlb	1	; select bank1
  1893  0606  100C               	bcf	12,0	;volatile
  1894                           
  1895                           ;interface.c: 10: TRISAbits.TRISA1 = 0;
  1896  0607  108C               	bcf	12,1	;volatile
  1897                           
  1898                           ;interface.c: 12: TRISCbits.TRISC1 = 1;
  1899  0608  148E               	bsf	14,1	;volatile
  1900                           
  1901                           ;interface.c: 13: TRISCbits.TRISC2 = 0;
  1902  0609  110E               	bcf	14,2	;volatile
  1903                           
  1904                           ;interface.c: 14: TRISCbits.TRISC0 = 0;
  1905  060A  100E               	bcf	14,0	;volatile
  1906                           
  1907                           ;interface.c: 16: SSPCON1bits.SSPEN = 0;
  1908  060B  0024               	movlb	4	; select bank4
  1909  060C  1295               	bcf	21,5	;volatile
  1910                           
  1911                           ;interface.c: 17: SSPCON1bits.CKP = 0;
  1912  060D  1215               	bcf	21,4	;volatile
  1913                           
  1914                           ;interface.c: 18: SSP1STATbits.CKE = 1;
  1915  060E  1714               	bsf	20,6	;volatile
  1916                           
  1917                           ;interface.c: 19: SSPCON1bits.SSPM = 0b0000;
  1918  060F  30F0               	movlw	-16
  1919  0610  0595               	andwf	21,f	;volatile
  1920                           
  1921                           ;interface.c: 21: SSPCON1bits.SSPEN = 1;
  1922  0611  1695               	bsf	21,5	;volatile
  1923  0612  0008               	return
  1924  0613                     __end_of_nrf24l01InterfaceInit:	
  1925                           
  1926                           	psect	text4
  1927  022F                     __ptext4:	
  1928 ;; *************** function _nrf24l01InitRegisters *****************
  1929 ;; Defined at:
  1930 ;;		line 248 in file "nrf24l01.c"
  1931 ;; Parameters:    Size  Location     Type
  1932 ;;		None
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;  config          1   11[BANK0 ] struct .
  1935 ;;  DynPD           1   10[BANK0 ] struct .
  1936 ;;  enAA            1    9[BANK0 ] struct .
  1937 ;;  enRXAddr        1    8[BANK0 ] struct .
  1938 ;;  status          1    7[BANK0 ] struct .
  1939 ;;  feature         1    6[BANK0 ] struct .
  1940 ;;  rfSetup         1    5[BANK0 ] struct .
  1941 ;;  setupAW         1    4[BANK0 ] struct .
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  1    wreg      void 
  1944 ;; Registers used:
  1945 ;;		wreg, status,2, status,0, pclath, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMMON   BANK0   BANK1
  1951 ;;      Params:         0       0       0
  1952 ;;      Locals:         0       8       0
  1953 ;;      Temps:          0       1       0
  1954 ;;      Totals:         0       9       0
  1955 ;;Total ram usage:        9 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    8
  1958 ;; This function calls:
  1959 ;;		_nrf24l01Send
  1960 ;; This function is called by:
  1961 ;;		_nrf24l01Init
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           
  1966                           ;psect for function _nrf24l01InitRegisters
  1967  022F                     _nrf24l01InitRegisters:	
  1968                           
  1969                           ;nrf24l01.c: 250: n_CONFIG_t config;
  1970                           ;nrf24l01.c: 251: config.PWR_UP = 0;
  1971                           
  1972                           ;incstack = 0
  1973                           ; Regs used in _nrf24l01InitRegisters: [wreg+status,2+status,0+pclath+cstack]
  1974  022F  0020               	movlb	0	; select bank0
  1975  0230  10AB               	bcf	nrf24l01InitRegisters@config,1
  1976                           
  1977                           ;nrf24l01.c: 252: nrf24l01Send(0b00100000 | 0x00, config.byte);
  1978  0231  082B               	movf	nrf24l01InitRegisters@config,w
  1979  0232  00A3               	movwf	??_nrf24l01InitRegisters
  1980  0233  0823               	movf	??_nrf24l01InitRegisters,w
  1981  0234  00A0               	movwf	nrf24l01Send@data
  1982  0235  3020               	movlw	32
  1983  0236  25F2               	fcall	_nrf24l01Send
  1984                           
  1985                           ;nrf24l01.c: 254: _delay((unsigned long)((10000)*(16000000/4000000.0)));
  1986  0237  3034               	movlw	52
  1987  0238  0020               	movlb	0	; select bank0
  1988  0239  00A3               	movwf	??_nrf24l01InitRegisters
  1989  023A  30F1               	movlw	241
  1990  023B                     u1587:	
  1991  023B  0B89               	decfsz	9,f
  1992  023C  2A3B               	goto	u1587
  1993  023D  0BA3               	decfsz	??_nrf24l01InitRegisters,f
  1994  023E  2A3B               	goto	u1587
  1995  023F  3200               	nop2
  1996                           
  1997                           ;nrf24l01.c: 256: n_SETUP_AW_t setupAW;
  1998                           ;nrf24l01.c: 257: setupAW.byte = 0x00;
  1999  0240  0020               	movlb	0	; select bank0
  2000  0241  01A4               	clrf	nrf24l01InitRegisters@setupAW
  2001                           
  2002                           ;nrf24l01.c: 258: setupAW.AW = 3;
  2003  0242  3003               	movlw	3
  2004  0243  04A4               	iorwf	nrf24l01InitRegisters@setupAW,f
  2005                           
  2006                           ;nrf24l01.c: 259: nrf24l01Send(0b00100000 | 0x02, setupAW.byte);
  2007  0244  0824               	movf	nrf24l01InitRegisters@setupAW,w
  2008  0245  00A3               	movwf	??_nrf24l01InitRegisters
  2009  0246  0823               	movf	??_nrf24l01InitRegisters,w
  2010  0247  00A0               	movwf	nrf24l01Send@data
  2011  0248  3022               	movlw	34
  2012  0249  25F2               	fcall	_nrf24l01Send
  2013                           
  2014                           ;nrf24l01.c: 267: n_RF_SETUP_t rfSetup;
  2015                           ;nrf24l01.c: 268: rfSetup.RF_DR_LOW = 0;
  2016  024A  0020               	movlb	0	; select bank0
  2017  024B  12A5               	bcf	nrf24l01InitRegisters@rfSetup,5
  2018                           
  2019                           ;nrf24l01.c: 269: rfSetup.RF_DR_HIGH = 1;
  2020  024C  15A5               	bsf	nrf24l01InitRegisters@rfSetup,3
  2021                           
  2022                           ;nrf24l01.c: 270: rfSetup.RF_PWR = 3;
  2023  024D  3006               	movlw	6
  2024  024E  04A5               	iorwf	nrf24l01InitRegisters@rfSetup,f
  2025                           
  2026                           ;nrf24l01.c: 271: nrf24l01Send(0b00100000 | 0x06, rfSetup.byte);
  2027  024F  0825               	movf	nrf24l01InitRegisters@rfSetup,w
  2028  0250  00A3               	movwf	??_nrf24l01InitRegisters
  2029  0251  0823               	movf	??_nrf24l01InitRegisters,w
  2030  0252  00A0               	movwf	nrf24l01Send@data
  2031  0253  3026               	movlw	38
  2032  0254  25F2               	fcall	_nrf24l01Send
  2033                           
  2034                           ;nrf24l01.c: 274: n_EN_RXADDR_t enRXAddr;
  2035                           ;nrf24l01.c: 275: enRXAddr.ERX_P0 = 1;
  2036  0255  0020               	movlb	0	; select bank0
  2037  0256  1428               	bsf	nrf24l01InitRegisters@enRXAddr,0
  2038                           
  2039                           ;nrf24l01.c: 276: enRXAddr.ERX_P1 = 1;
  2040  0257  14A8               	bsf	nrf24l01InitRegisters@enRXAddr,1
  2041                           
  2042                           ;nrf24l01.c: 277: enRXAddr.ERX_P2 = 1;
  2043  0258  1528               	bsf	nrf24l01InitRegisters@enRXAddr,2
  2044                           
  2045                           ;nrf24l01.c: 278: enRXAddr.ERX_P3 = 1;
  2046  0259  15A8               	bsf	nrf24l01InitRegisters@enRXAddr,3
  2047                           
  2048                           ;nrf24l01.c: 279: enRXAddr.ERX_P4 = 1;
  2049  025A  1628               	bsf	nrf24l01InitRegisters@enRXAddr,4
  2050                           
  2051                           ;nrf24l01.c: 280: enRXAddr.ERX_P5 = 1;
  2052  025B  16A8               	bsf	nrf24l01InitRegisters@enRXAddr,5
  2053                           
  2054                           ;nrf24l01.c: 281: nrf24l01Send(0b00100000 | 0x02, enRXAddr.byte);
  2055  025C  0828               	movf	nrf24l01InitRegisters@enRXAddr,w
  2056  025D  00A3               	movwf	??_nrf24l01InitRegisters
  2057  025E  0823               	movf	??_nrf24l01InitRegisters,w
  2058  025F  00A0               	movwf	nrf24l01Send@data
  2059  0260  3022               	movlw	34
  2060  0261  25F2               	fcall	_nrf24l01Send
  2061                           
  2062                           ;nrf24l01.c: 284: n_EN_AA_t enAA;
  2063                           ;nrf24l01.c: 285: enAA.byte = nrf24l01Send(0b00000000 | 0x01, 0);
  2064  0262  0020               	movlb	0	; select bank0
  2065  0263  01A0               	clrf	nrf24l01Send@data
  2066  0264  3001               	movlw	1
  2067  0265  25F2               	fcall	_nrf24l01Send
  2068  0266  0020               	movlb	0	; select bank0
  2069  0267  00A3               	movwf	??_nrf24l01InitRegisters
  2070  0268  0823               	movf	??_nrf24l01InitRegisters,w
  2071  0269  00A9               	movwf	nrf24l01InitRegisters@enAA
  2072                           
  2073                           ;nrf24l01.c: 286: enAA.ENAA_P0 = 0;
  2074  026A  1029               	bcf	nrf24l01InitRegisters@enAA,0
  2075                           
  2076                           ;nrf24l01.c: 287: enAA.ENAA_P1 = 0;
  2077  026B  10A9               	bcf	nrf24l01InitRegisters@enAA,1
  2078                           
  2079                           ;nrf24l01.c: 288: enAA.ENAA_P2 = 0;
  2080  026C  1129               	bcf	nrf24l01InitRegisters@enAA,2
  2081                           
  2082                           ;nrf24l01.c: 289: enAA.ENAA_P3 = 0;
  2083  026D  11A9               	bcf	nrf24l01InitRegisters@enAA,3
  2084                           
  2085                           ;nrf24l01.c: 290: enAA.ENAA_P4 = 0;
  2086  026E  1229               	bcf	nrf24l01InitRegisters@enAA,4
  2087                           
  2088                           ;nrf24l01.c: 291: enAA.ENAA_P5 = 0;
  2089  026F  12A9               	bcf	nrf24l01InitRegisters@enAA,5
  2090                           
  2091                           ;nrf24l01.c: 292: nrf24l01Send(0b00100000 | 0x01, enAA.byte);
  2092  0270  0829               	movf	nrf24l01InitRegisters@enAA,w
  2093  0271  00A3               	movwf	??_nrf24l01InitRegisters
  2094  0272  0823               	movf	??_nrf24l01InitRegisters,w
  2095  0273  00A0               	movwf	nrf24l01Send@data
  2096  0274  3021               	movlw	33
  2097  0275  25F2               	fcall	_nrf24l01Send
  2098                           
  2099                           ;nrf24l01.c: 296: n_FEATURE_t feature;
  2100                           ;nrf24l01.c: 297: feature.byte = nrf24l01Send(0b00000000 | 0x1D, 0);
  2101  0276  0020               	movlb	0	; select bank0
  2102  0277  01A0               	clrf	nrf24l01Send@data
  2103  0278  301D               	movlw	29
  2104  0279  25F2               	fcall	_nrf24l01Send
  2105  027A  0020               	movlb	0	; select bank0
  2106  027B  00A3               	movwf	??_nrf24l01InitRegisters
  2107  027C  0823               	movf	??_nrf24l01InitRegisters,w
  2108  027D  00A6               	movwf	nrf24l01InitRegisters@feature
  2109                           
  2110                           ;nrf24l01.c: 298: feature.EN_DPL = 1;
  2111  027E  1526               	bsf	nrf24l01InitRegisters@feature,2
  2112                           
  2113                           ;nrf24l01.c: 299: feature.EN_DYN_ACK = 1;
  2114  027F  1426               	bsf	nrf24l01InitRegisters@feature,0
  2115                           
  2116                           ;nrf24l01.c: 300: nrf24l01Send(0b00100000 | 0x1D, feature.byte);
  2117  0280  0826               	movf	nrf24l01InitRegisters@feature,w
  2118  0281  00A3               	movwf	??_nrf24l01InitRegisters
  2119  0282  0823               	movf	??_nrf24l01InitRegisters,w
  2120  0283  00A0               	movwf	nrf24l01Send@data
  2121  0284  303D               	movlw	61
  2122  0285  25F2               	fcall	_nrf24l01Send
  2123                           
  2124                           ;nrf24l01.c: 302: n_DYNPD_t DynPD;
  2125                           ;nrf24l01.c: 303: DynPD.byte = nrf24l01Send(0b00000000 | 0x1C, 0);
  2126  0286  0020               	movlb	0	; select bank0
  2127  0287  01A0               	clrf	nrf24l01Send@data
  2128  0288  301C               	movlw	28
  2129  0289  25F2               	fcall	_nrf24l01Send
  2130  028A  0020               	movlb	0	; select bank0
  2131  028B  00A3               	movwf	??_nrf24l01InitRegisters
  2132  028C  0823               	movf	??_nrf24l01InitRegisters,w
  2133  028D  00AA               	movwf	nrf24l01InitRegisters@DynPD
  2134                           
  2135                           ;nrf24l01.c: 304: DynPD.DPL_P0 = 1;
  2136  028E  142A               	bsf	nrf24l01InitRegisters@DynPD,0
  2137                           
  2138                           ;nrf24l01.c: 305: DynPD.DPL_P1 = 1;
  2139  028F  14AA               	bsf	nrf24l01InitRegisters@DynPD,1
  2140                           
  2141                           ;nrf24l01.c: 306: DynPD.DPL_P2 = 1;
  2142  0290  152A               	bsf	nrf24l01InitRegisters@DynPD,2
  2143                           
  2144                           ;nrf24l01.c: 307: DynPD.DPL_P3 = 1;
  2145  0291  15AA               	bsf	nrf24l01InitRegisters@DynPD,3
  2146                           
  2147                           ;nrf24l01.c: 308: DynPD.DPL_P4 = 1;
  2148  0292  162A               	bsf	nrf24l01InitRegisters@DynPD,4
  2149                           
  2150                           ;nrf24l01.c: 309: DynPD.DPL_P5 = 1;
  2151  0293  16AA               	bsf	nrf24l01InitRegisters@DynPD,5
  2152                           
  2153                           ;nrf24l01.c: 310: nrf24l01Send(0b00100000 | 0x1C, DynPD.byte);
  2154  0294  082A               	movf	nrf24l01InitRegisters@DynPD,w
  2155  0295  00A3               	movwf	??_nrf24l01InitRegisters
  2156  0296  0823               	movf	??_nrf24l01InitRegisters,w
  2157  0297  00A0               	movwf	nrf24l01Send@data
  2158  0298  303C               	movlw	60
  2159  0299  25F2               	fcall	_nrf24l01Send
  2160                           
  2161                           ;nrf24l01.c: 313: n_STATUS_t status;
  2162                           ;nrf24l01.c: 314: status.byte = 0x00;
  2163  029A  0020               	movlb	0	; select bank0
  2164  029B  01A7               	clrf	nrf24l01InitRegisters@status
  2165                           
  2166                           ;nrf24l01.c: 315: status.RX_DR = 1;
  2167  029C  1727               	bsf	nrf24l01InitRegisters@status,6
  2168                           
  2169                           ;nrf24l01.c: 316: status.TX_DS = 1;
  2170  029D  16A7               	bsf	nrf24l01InitRegisters@status,5
  2171                           
  2172                           ;nrf24l01.c: 317: status.MAX_RT = 1;
  2173  029E  1627               	bsf	nrf24l01InitRegisters@status,4
  2174                           
  2175                           ;nrf24l01.c: 318: nrf24l01Send(0b00100000 | 0x07, status.byte);
  2176  029F  0827               	movf	nrf24l01InitRegisters@status,w
  2177  02A0  00A3               	movwf	??_nrf24l01InitRegisters
  2178  02A1  0823               	movf	??_nrf24l01InitRegisters,w
  2179  02A2  00A0               	movwf	nrf24l01Send@data
  2180  02A3  3027               	movlw	39
  2181  02A4  25F2               	fcall	_nrf24l01Send
  2182                           
  2183                           ;nrf24l01.c: 321: nrf24l01Send(0b11100001, 0);
  2184  02A5  0020               	movlb	0	; select bank0
  2185  02A6  01A0               	clrf	nrf24l01Send@data
  2186  02A7  30E1               	movlw	225
  2187  02A8  25F2               	fcall	_nrf24l01Send
  2188                           
  2189                           ;nrf24l01.c: 322: nrf24l01Send(0b11100010, 0);
  2190  02A9  0020               	movlb	0	; select bank0
  2191  02AA  01A0               	clrf	nrf24l01Send@data
  2192  02AB  30E2               	movlw	226
  2193  02AC  25F2               	fcall	_nrf24l01Send
  2194                           
  2195                           ;nrf24l01.c: 325: config.PRIM_RX = 1;
  2196  02AD  0020               	movlb	0	; select bank0
  2197  02AE  142B               	bsf	nrf24l01InitRegisters@config,0
  2198                           
  2199                           ;nrf24l01.c: 326: config.EN_CRC = 1;
  2200  02AF  15AB               	bsf	nrf24l01InitRegisters@config,3
  2201                           
  2202                           ;nrf24l01.c: 327: config.CRCO = 1;
  2203  02B0  152B               	bsf	nrf24l01InitRegisters@config,2
  2204                           
  2205                           ;nrf24l01.c: 328: config.PWR_UP = 1;
  2206  02B1  14AB               	bsf	nrf24l01InitRegisters@config,1
  2207                           
  2208                           ;nrf24l01.c: 329: nrf24l01Send(0b00100000 | 0x00, config.byte);
  2209  02B2  082B               	movf	nrf24l01InitRegisters@config,w
  2210  02B3  00A3               	movwf	??_nrf24l01InitRegisters
  2211  02B4  0823               	movf	??_nrf24l01InitRegisters,w
  2212  02B5  00A0               	movwf	nrf24l01Send@data
  2213  02B6  3020               	movlw	32
  2214  02B7  25F2               	fcall	_nrf24l01Send
  2215  02B8  0008               	return
  2216  02B9                     __end_of_nrf24l01InitRegisters:	
  2217                           
  2218                           	psect	text5
  2219  0100                     __ptext5:	
  2220 ;; *************** function _loop *****************
  2221 ;; Defined at:
  2222 ;;		line 74 in file "main.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;		None
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;		None
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  1    wreg      void 
  2229 ;; Registers used:
  2230 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMMON   BANK0   BANK1
  2236 ;;      Params:         0       0       0
  2237 ;;      Locals:         0       0       0
  2238 ;;      Temps:          0       0       0
  2239 ;;      Totals:         0       0       0
  2240 ;;Total ram usage:        0 bytes
  2241 ;; Hardware stack levels used:    1
  2242 ;; Hardware stack levels required when called:   10
  2243 ;; This function calls:
  2244 ;;		_checkRxData
  2245 ;;		_getADCValue
  2246 ;;		_nrf24l01SendString
  2247 ;;		_sleep
  2248 ;;		_strcpy
  2249 ;;		_utoa
  2250 ;; This function is called by:
  2251 ;;		_main
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255                           
  2256                           ;psect for function _loop
  2257  0100                     _loop:	
  2258                           
  2259                           ;main.c: 78: strcpy(nrf24l01TXTopic, "DBG");
  2260                           
  2261                           ;incstack = 0
  2262                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2263  0100  3066               	movlw	low (STR_1| (0+32768))
  2264  0101  0020               	movlb	0	; select bank0
  2265  0102  00A3               	movwf	strcpy@from
  2266  0103  3086               	movlw	high (STR_1| (0+32768))
  2267  0104  00A4               	movwf	strcpy@from+1
  2268  0105  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2269  0106  25D7               	fcall	_strcpy
  2270                           
  2271                           ;main.c: 79: utoa(nrf24l01TXValue, counter, 10);
  2272  0107  0020               	movlb	0	; select bank0
  2273  0108  084A               	movf	_counter+1,w
  2274  0109  00C0               	movwf	utoa@val+1
  2275  010A  0849               	movf	_counter,w
  2276  010B  00BF               	movwf	utoa@val
  2277  010C  300A               	movlw	10
  2278  010D  00C1               	movwf	utoa@base
  2279  010E  3000               	movlw	0
  2280  010F  00C2               	movwf	utoa@base+1
  2281  0110  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2282  0111  23C5               	fcall	_utoa
  2283                           
  2284                           ;main.c: 80: nrf24l01SendString(0);
  2285  0112  3000               	movlw	0
  2286  0113  2199               	fcall	_nrf24l01SendString
  2287                           
  2288                           ;main.c: 81: sleep();
  2289  0114  261E               	fcall	_sleep
  2290                           
  2291                           ;main.c: 83: strcpy(nrf24l01TXTopic, "ADC3");
  2292  0115  3053               	movlw	low (STR_2| (0+32768))
  2293  0116  0020               	movlb	0	; select bank0
  2294  0117  00A3               	movwf	strcpy@from
  2295  0118  3086               	movlw	high (STR_2| (0+32768))
  2296  0119  00A4               	movwf	strcpy@from+1
  2297  011A  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2298  011B  25D7               	fcall	_strcpy
  2299                           
  2300                           ;main.c: 84: utoa(nrf24l01TXValue, getADCValue(3, 2505), 10);
  2301  011C  3000               	movlw	0
  2302  011D  0020               	movlb	0	; select bank0
  2303  011E  00B4               	movwf	getADCValue@divider+3
  2304  011F  3000               	movlw	0
  2305  0120  00B3               	movwf	getADCValue@divider+2
  2306  0121  3009               	movlw	9
  2307  0122  00B2               	movwf	getADCValue@divider+1
  2308  0123  30C9               	movlw	201
  2309  0124  00B1               	movwf	getADCValue@divider
  2310  0125  3003               	movlw	3
  2311  0126  2340               	fcall	_getADCValue
  2312  0127  0020               	movlb	0	; select bank0
  2313  0128  0832               	movf	?_getADCValue+1,w
  2314  0129  00C0               	movwf	utoa@val+1
  2315  012A  0831               	movf	?_getADCValue,w
  2316  012B  00BF               	movwf	utoa@val
  2317  012C  300A               	movlw	10
  2318  012D  00C1               	movwf	utoa@base
  2319  012E  3000               	movlw	0
  2320  012F  00C2               	movwf	utoa@base+1
  2321  0130  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2322  0131  23C5               	fcall	_utoa
  2323                           
  2324                           ;main.c: 85: nrf24l01SendString(1);
  2325  0132  3001               	movlw	1
  2326  0133  2199               	fcall	_nrf24l01SendString
  2327                           
  2328                           ;main.c: 86: sleep();
  2329  0134  261E               	fcall	_sleep
  2330                           
  2331                           ;main.c: 88: strcpy(nrf24l01TXTopic, "ADC7");
  2332  0135  3058               	movlw	low (STR_3| (0+32768))
  2333  0136  0020               	movlb	0	; select bank0
  2334  0137  00A3               	movwf	strcpy@from
  2335  0138  3086               	movlw	high (STR_3| (0+32768))
  2336  0139  00A4               	movwf	strcpy@from+1
  2337  013A  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2338  013B  25D7               	fcall	_strcpy
  2339                           
  2340                           ;main.c: 89: utoa(nrf24l01TXValue, getADCValue(7, 2500), 10);
  2341  013C  3000               	movlw	0
  2342  013D  0020               	movlb	0	; select bank0
  2343  013E  00B4               	movwf	getADCValue@divider+3
  2344  013F  3000               	movlw	0
  2345  0140  00B3               	movwf	getADCValue@divider+2
  2346  0141  3009               	movlw	9
  2347  0142  00B2               	movwf	getADCValue@divider+1
  2348  0143  30C4               	movlw	196
  2349  0144  00B1               	movwf	getADCValue@divider
  2350  0145  3007               	movlw	7
  2351  0146  2340               	fcall	_getADCValue
  2352  0147  0020               	movlb	0	; select bank0
  2353  0148  0832               	movf	?_getADCValue+1,w
  2354  0149  00C0               	movwf	utoa@val+1
  2355  014A  0831               	movf	?_getADCValue,w
  2356  014B  00BF               	movwf	utoa@val
  2357  014C  300A               	movlw	10
  2358  014D  00C1               	movwf	utoa@base
  2359  014E  3000               	movlw	0
  2360  014F  00C2               	movwf	utoa@base+1
  2361  0150  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2362  0151  23C5               	fcall	_utoa
  2363                           
  2364                           ;main.c: 90: nrf24l01SendString(1);
  2365  0152  3001               	movlw	1
  2366  0153  2199               	fcall	_nrf24l01SendString
  2367                           
  2368                           ;main.c: 91: sleep();
  2369  0154  261E               	fcall	_sleep
  2370                           
  2371                           ;main.c: 93: strcpy(nrf24l01TXTopic, "ADC29");
  2372  0155  3042               	movlw	low (STR_4| (0+32768))
  2373  0156  0020               	movlb	0	; select bank0
  2374  0157  00A3               	movwf	strcpy@from
  2375  0158  3086               	movlw	high (STR_4| (0+32768))
  2376  0159  00A4               	movwf	strcpy@from+1
  2377  015A  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2378  015B  25D7               	fcall	_strcpy
  2379                           
  2380                           ;main.c: 94: utoa(nrf24l01TXValue, getADCValue(29, 208900) - 40, 10);
  2381  015C  3000               	movlw	0
  2382  015D  0020               	movlb	0	; select bank0
  2383  015E  00B4               	movwf	getADCValue@divider+3
  2384  015F  3003               	movlw	3
  2385  0160  00B3               	movwf	getADCValue@divider+2
  2386  0161  3030               	movlw	48
  2387  0162  00B2               	movwf	getADCValue@divider+1
  2388  0163  3004               	movlw	4
  2389  0164  00B1               	movwf	getADCValue@divider
  2390  0165  301D               	movlw	29
  2391  0166  2340               	fcall	_getADCValue
  2392  0167  0020               	movlb	0	; select bank0
  2393  0168  0831               	movf	?_getADCValue,w
  2394  0169  3ED8               	addlw	216
  2395  016A  00BF               	movwf	utoa@val
  2396  016B  30FF               	movlw	255
  2397  016C  3D32               	addwfc	?_getADCValue+1,w
  2398  016D  00C0               	movwf	utoa@val+1
  2399  016E  300A               	movlw	10
  2400  016F  00C1               	movwf	utoa@base
  2401  0170  3000               	movlw	0
  2402  0171  00C2               	movwf	utoa@base+1
  2403  0172  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2404  0173  23C5               	fcall	_utoa
  2405                           
  2406                           ;main.c: 95: nrf24l01SendString(1);
  2407  0174  3001               	movlw	1
  2408  0175  2199               	fcall	_nrf24l01SendString
  2409                           
  2410                           ;main.c: 96: sleep();
  2411  0176  261E               	fcall	_sleep
  2412                           
  2413                           ;main.c: 98: strcpy(nrf24l01TXTopic, "ADC31");
  2414  0177  303C               	movlw	low (STR_5| (0+32768))
  2415  0178  0020               	movlb	0	; select bank0
  2416  0179  00A3               	movwf	strcpy@from
  2417  017A  3086               	movlw	high (STR_5| (0+32768))
  2418  017B  00A4               	movwf	strcpy@from+1
  2419  017C  3065               	movlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  2420  017D  25D7               	fcall	_strcpy
  2421                           
  2422                           ;main.c: 99: utoa(nrf24l01TXValue, getADCValue(31, 2475), 10);
  2423  017E  3000               	movlw	0
  2424  017F  0020               	movlb	0	; select bank0
  2425  0180  00B4               	movwf	getADCValue@divider+3
  2426  0181  3000               	movlw	0
  2427  0182  00B3               	movwf	getADCValue@divider+2
  2428  0183  3009               	movlw	9
  2429  0184  00B2               	movwf	getADCValue@divider+1
  2430  0185  30AB               	movlw	171
  2431  0186  00B1               	movwf	getADCValue@divider
  2432  0187  301F               	movlw	31
  2433  0188  2340               	fcall	_getADCValue
  2434  0189  0020               	movlb	0	; select bank0
  2435  018A  0832               	movf	?_getADCValue+1,w
  2436  018B  00C0               	movwf	utoa@val+1
  2437  018C  0831               	movf	?_getADCValue,w
  2438  018D  00BF               	movwf	utoa@val
  2439  018E  300A               	movlw	10
  2440  018F  00C1               	movwf	utoa@base
  2441  0190  3000               	movlw	0
  2442  0191  00C2               	movwf	utoa@base+1
  2443  0192  305D               	movlw	(low (_nrf24l01TXValue| 0))& (0+255)
  2444  0193  23C5               	fcall	_utoa
  2445                           
  2446                           ;main.c: 100: nrf24l01SendString(1);
  2447  0194  3001               	movlw	1
  2448  0195  2199               	fcall	_nrf24l01SendString
  2449                           
  2450                           ;main.c: 101: sleep();
  2451  0196  261E               	fcall	_sleep
  2452                           
  2453                           ;main.c: 103: checkRxData();
  2454  0197  266A               	fcall	_checkRxData
  2455  0198  0008               	return
  2456  0199                     __end_of_loop:	
  2457                           
  2458                           	psect	text6
  2459  03C5                     __ptext6:	
  2460 ;; *************** function _utoa *****************
  2461 ;; Defined at:
  2462 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  buf             1    wreg     PTR unsigned char 
  2465 ;;		 -> nrf24l01TXValue(8), 
  2466 ;;  val             2   31[BANK0 ] unsigned int 
  2467 ;;  base            2   33[BANK0 ] int 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  buf             1   39[BANK0 ] PTR unsigned char 
  2470 ;;		 -> nrf24l01TXValue(8), 
  2471 ;;  v               2   36[BANK0 ] unsigned int 
  2472 ;;  c               1   38[BANK0 ] unsigned char 
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  1    wreg      PTR unsigned char 
  2475 ;; Registers used:
  2476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2477 ;; Tracked objects:
  2478 ;;		On entry : 0/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMMON   BANK0   BANK1
  2482 ;;      Params:         0       4       0
  2483 ;;      Locals:         0       4       0
  2484 ;;      Temps:          0       1       0
  2485 ;;      Totals:         0       9       0
  2486 ;;Total ram usage:        9 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; Hardware stack levels required when called:    7
  2489 ;; This function calls:
  2490 ;;		___lwdiv
  2491 ;;		___lwmod
  2492 ;; This function is called by:
  2493 ;;		_loop
  2494 ;;		_main
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498                           
  2499                           ;psect for function _utoa
  2500  03C5                     _utoa:	
  2501                           
  2502                           ;incstack = 0
  2503                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2504                           ;utoa@buf stored from wreg
  2505  03C5  0020               	movlb	0	; select bank0
  2506  03C6  00C7               	movwf	utoa@buf
  2507  03C7  0840               	movf	utoa@val+1,w
  2508  03C8  00C5               	movwf	utoa@v+1
  2509  03C9  083F               	movf	utoa@val,w
  2510  03CA  00C4               	movwf	utoa@v
  2511  03CB                     l1606:	
  2512  03CB  0842               	movf	utoa@base+1,w
  2513  03CC  00A4               	movwf	___lwdiv@divisor+1
  2514  03CD  0841               	movf	utoa@base,w
  2515  03CE  00A3               	movwf	___lwdiv@divisor
  2516  03CF  0845               	movf	utoa@v+1,w
  2517  03D0  00A6               	movwf	___lwdiv@dividend+1
  2518  03D1  0844               	movf	utoa@v,w
  2519  03D2  00A5               	movwf	___lwdiv@dividend
  2520  03D3  24AD               	fcall	___lwdiv
  2521  03D4  0020               	movlb	0	; select bank0
  2522  03D5  0824               	movf	?___lwdiv+1,w
  2523  03D6  00C5               	movwf	utoa@v+1
  2524  03D7  0823               	movf	?___lwdiv,w
  2525  03D8  00C4               	movwf	utoa@v
  2526  03D9  3001               	movlw	1
  2527  03DA  00C3               	movwf	??_utoa
  2528  03DB  0843               	movf	??_utoa,w
  2529  03DC  07C7               	addwf	utoa@buf,f
  2530  03DD  0844               	movf	utoa@v,w
  2531  03DE  0445               	iorwf	utoa@v+1,w
  2532  03DF  1D03               	btfss	3,2
  2533  03E0  2BCB               	goto	l1606
  2534  03E1  0847               	movf	utoa@buf,w
  2535  03E2  0086               	movwf	6
  2536  03E3  0187               	clrf	7
  2537  03E4  0181               	clrf	1
  2538  03E5  3001               	movlw	1
  2539  03E6  02C7               	subwf	utoa@buf,f
  2540  03E7                     l1616:	
  2541  03E7  0842               	movf	utoa@base+1,w
  2542  03E8  00A4               	movwf	___lwmod@divisor+1
  2543  03E9  0841               	movf	utoa@base,w
  2544  03EA  00A3               	movwf	___lwmod@divisor
  2545  03EB  0840               	movf	utoa@val+1,w
  2546  03EC  00A6               	movwf	___lwmod@dividend+1
  2547  03ED  083F               	movf	utoa@val,w
  2548  03EE  00A5               	movwf	___lwmod@dividend
  2549  03EF  2544               	fcall	___lwmod
  2550  03F0  0020               	movlb	0	; select bank0
  2551  03F1  0823               	movf	?___lwmod,w
  2552  03F2  00C3               	movwf	??_utoa
  2553  03F3  0843               	movf	??_utoa,w
  2554  03F4  00C6               	movwf	utoa@c
  2555  03F5  0842               	movf	utoa@base+1,w
  2556  03F6  00A4               	movwf	___lwdiv@divisor+1
  2557  03F7  0841               	movf	utoa@base,w
  2558  03F8  00A3               	movwf	___lwdiv@divisor
  2559  03F9  0840               	movf	utoa@val+1,w
  2560  03FA  00A6               	movwf	___lwdiv@dividend+1
  2561  03FB  083F               	movf	utoa@val,w
  2562  03FC  00A5               	movwf	___lwdiv@dividend
  2563  03FD  24AD               	fcall	___lwdiv
  2564  03FE  0020               	movlb	0	; select bank0
  2565  03FF  0824               	movf	?___lwdiv+1,w
  2566  0400  00C0               	movwf	utoa@val+1
  2567  0401  0823               	movf	?___lwdiv,w
  2568  0402  00BF               	movwf	utoa@val
  2569  0403  300A               	movlw	10
  2570  0404  0246               	subwf	utoa@c,w
  2571  0405  1C03               	skipc
  2572  0406  2C0B               	goto	l563
  2573  0407  3007               	movlw	7
  2574  0408  00C3               	movwf	??_utoa
  2575  0409  0843               	movf	??_utoa,w
  2576  040A  07C6               	addwf	utoa@c,f
  2577  040B                     l563:	
  2578  040B  3030               	movlw	48
  2579  040C  00C3               	movwf	??_utoa
  2580  040D  0843               	movf	??_utoa,w
  2581  040E  07C6               	addwf	utoa@c,f
  2582  040F  0846               	movf	utoa@c,w
  2583  0410  00C3               	movwf	??_utoa
  2584  0411  0847               	movf	utoa@buf,w
  2585  0412  0086               	movwf	6
  2586  0413  0187               	clrf	7
  2587  0414  0843               	movf	??_utoa,w
  2588  0415  0081               	movwf	1
  2589  0416  3001               	movlw	1
  2590  0417  02C7               	subwf	utoa@buf,f
  2591  0418  083F               	movf	utoa@val,w
  2592  0419  0440               	iorwf	utoa@val+1,w
  2593  041A  1D03               	btfss	3,2
  2594  041B  2BE7               	goto	l1616
  2595                           
  2596                           ;	Return value of _utoa is never used
  2597  041C  3001               	movlw	1
  2598  041D  00C3               	movwf	??_utoa
  2599  041E  0843               	movf	??_utoa,w
  2600  041F  07C7               	addwf	utoa@buf,f
  2601  0420  0008               	return
  2602  0421                     __end_of_utoa:	
  2603                           
  2604                           	psect	text7
  2605  0544                     __ptext7:	
  2606 ;; *************** function ___lwmod *****************
  2607 ;; Defined at:
  2608 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  divisor         2    3[BANK0 ] unsigned int 
  2611 ;;  dividend        2    5[BANK0 ] unsigned int 
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;  counter         1    8[BANK0 ] unsigned char 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  2    3[BANK0 ] unsigned int 
  2616 ;; Registers used:
  2617 ;;		wreg, status,2, status,0
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMMON   BANK0   BANK1
  2623 ;;      Params:         0       4       0
  2624 ;;      Locals:         0       1       0
  2625 ;;      Temps:          0       1       0
  2626 ;;      Totals:         0       6       0
  2627 ;;Total ram usage:        6 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    6
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_utoa
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           
  2638                           ;psect for function ___lwmod
  2639  0544                     ___lwmod:	
  2640                           
  2641                           ;incstack = 0
  2642                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2643  0544  0020               	movlb	0	; select bank0
  2644  0545  0823               	movf	___lwmod@divisor,w
  2645  0546  0424               	iorwf	___lwmod@divisor+1,w
  2646  0547  1903               	btfsc	3,2
  2647  0548  2D6C               	goto	l1562
  2648  0549  01A8               	clrf	___lwmod@counter
  2649  054A  0AA8               	incf	___lwmod@counter,f
  2650  054B                     l1552:	
  2651  054B  1BA4               	btfsc	___lwmod@divisor+1,7
  2652  054C  2D57               	goto	l1554
  2653  054D  3001               	movlw	1
  2654  054E                     u1065:	
  2655  054E  35A3               	lslf	___lwmod@divisor,f
  2656  054F  0DA4               	rlf	___lwmod@divisor+1,f
  2657  0550  0B89               	decfsz	9,f
  2658  0551  2D4E               	goto	u1065
  2659  0552  3001               	movlw	1
  2660  0553  00A7               	movwf	??___lwmod
  2661  0554  0827               	movf	??___lwmod,w
  2662  0555  07A8               	addwf	___lwmod@counter,f
  2663  0556  2D4B               	goto	l1552
  2664  0557                     l1554:	
  2665  0557  0824               	movf	___lwmod@divisor+1,w
  2666  0558  0226               	subwf	___lwmod@dividend+1,w
  2667  0559  1D03               	skipz
  2668  055A  2D5D               	goto	u1085
  2669  055B  0823               	movf	___lwmod@divisor,w
  2670  055C  0225               	subwf	___lwmod@dividend,w
  2671  055D                     u1085:	
  2672  055D  1C03               	skipc
  2673  055E  2D63               	goto	l1558
  2674  055F  0823               	movf	___lwmod@divisor,w
  2675  0560  02A5               	subwf	___lwmod@dividend,f
  2676  0561  0824               	movf	___lwmod@divisor+1,w
  2677  0562  3BA6               	subwfb	___lwmod@dividend+1,f
  2678  0563                     l1558:	
  2679  0563  3001               	movlw	1
  2680  0564                     u1095:	
  2681  0564  36A4               	lsrf	___lwmod@divisor+1,f
  2682  0565  0CA3               	rrf	___lwmod@divisor,f
  2683  0566  0B89               	decfsz	9,f
  2684  0567  2D64               	goto	u1095
  2685  0568  3001               	movlw	1
  2686  0569  02A8               	subwf	___lwmod@counter,f
  2687  056A  1D03               	btfss	3,2
  2688  056B  2D57               	goto	l1554
  2689  056C                     l1562:	
  2690  056C  0826               	movf	___lwmod@dividend+1,w
  2691  056D  00A4               	movwf	?___lwmod+1
  2692  056E  0825               	movf	___lwmod@dividend,w
  2693  056F  00A3               	movwf	?___lwmod
  2694  0570  0008               	return
  2695  0571                     __end_of___lwmod:	
  2696                           
  2697                           	psect	text8
  2698  04AD                     __ptext8:	
  2699 ;; *************** function ___lwdiv *****************
  2700 ;; Defined at:
  2701 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  divisor         2    3[BANK0 ] unsigned int 
  2704 ;;  dividend        2    5[BANK0 ] unsigned int 
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;  quotient        2    8[BANK0 ] unsigned int 
  2707 ;;  counter         1   10[BANK0 ] unsigned char 
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  2    3[BANK0 ] unsigned int 
  2710 ;; Registers used:
  2711 ;;		wreg, status,2, status,0
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMMON   BANK0   BANK1
  2717 ;;      Params:         0       4       0
  2718 ;;      Locals:         0       3       0
  2719 ;;      Temps:          0       1       0
  2720 ;;      Totals:         0       8       0
  2721 ;;Total ram usage:        8 bytes
  2722 ;; Hardware stack levels used:    1
  2723 ;; Hardware stack levels required when called:    6
  2724 ;; This function calls:
  2725 ;;		Nothing
  2726 ;; This function is called by:
  2727 ;;		_utoa
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           
  2732                           ;psect for function ___lwdiv
  2733  04AD                     ___lwdiv:	
  2734                           
  2735                           ;incstack = 0
  2736                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2737  04AD  0020               	movlb	0	; select bank0
  2738  04AE  01A8               	clrf	___lwdiv@quotient
  2739  04AF  01A9               	clrf	___lwdiv@quotient+1
  2740  04B0  0823               	movf	___lwdiv@divisor,w
  2741  04B1  0424               	iorwf	___lwdiv@divisor+1,w
  2742  04B2  1903               	btfsc	3,2
  2743  04B3  2CDD               	goto	l1540
  2744  04B4  01AA               	clrf	___lwdiv@counter
  2745  04B5  0AAA               	incf	___lwdiv@counter,f
  2746  04B6                     l1528:	
  2747  04B6  1BA4               	btfsc	___lwdiv@divisor+1,7
  2748  04B7  2CC2               	goto	l1530
  2749  04B8  3001               	movlw	1
  2750  04B9                     u995:	
  2751  04B9  35A3               	lslf	___lwdiv@divisor,f
  2752  04BA  0DA4               	rlf	___lwdiv@divisor+1,f
  2753  04BB  0B89               	decfsz	9,f
  2754  04BC  2CB9               	goto	u995
  2755  04BD  3001               	movlw	1
  2756  04BE  00A7               	movwf	??___lwdiv
  2757  04BF  0827               	movf	??___lwdiv,w
  2758  04C0  07AA               	addwf	___lwdiv@counter,f
  2759  04C1  2CB6               	goto	l1528
  2760  04C2                     l1530:	
  2761  04C2  3001               	movlw	1
  2762  04C3                     u1015:	
  2763  04C3  35A8               	lslf	___lwdiv@quotient,f
  2764  04C4  0DA9               	rlf	___lwdiv@quotient+1,f
  2765  04C5  0B89               	decfsz	9,f
  2766  04C6  2CC3               	goto	u1015
  2767  04C7  0824               	movf	___lwdiv@divisor+1,w
  2768  04C8  0226               	subwf	___lwdiv@dividend+1,w
  2769  04C9  1D03               	skipz
  2770  04CA  2CCD               	goto	u1025
  2771  04CB  0823               	movf	___lwdiv@divisor,w
  2772  04CC  0225               	subwf	___lwdiv@dividend,w
  2773  04CD                     u1025:	
  2774  04CD  1C03               	skipc
  2775  04CE  2CD4               	goto	l1536
  2776  04CF  0823               	movf	___lwdiv@divisor,w
  2777  04D0  02A5               	subwf	___lwdiv@dividend,f
  2778  04D1  0824               	movf	___lwdiv@divisor+1,w
  2779  04D2  3BA6               	subwfb	___lwdiv@dividend+1,f
  2780  04D3  1428               	bsf	___lwdiv@quotient,0
  2781  04D4                     l1536:	
  2782  04D4  3001               	movlw	1
  2783  04D5                     u1035:	
  2784  04D5  36A4               	lsrf	___lwdiv@divisor+1,f
  2785  04D6  0CA3               	rrf	___lwdiv@divisor,f
  2786  04D7  0B89               	decfsz	9,f
  2787  04D8  2CD5               	goto	u1035
  2788  04D9  3001               	movlw	1
  2789  04DA  02AA               	subwf	___lwdiv@counter,f
  2790  04DB  1D03               	btfss	3,2
  2791  04DC  2CC2               	goto	l1530
  2792  04DD                     l1540:	
  2793  04DD  0829               	movf	___lwdiv@quotient+1,w
  2794  04DE  00A4               	movwf	?___lwdiv+1
  2795  04DF  0828               	movf	___lwdiv@quotient,w
  2796  04E0  00A3               	movwf	?___lwdiv
  2797  04E1  0008               	return
  2798  04E2                     __end_of___lwdiv:	
  2799                           
  2800                           	psect	text9
  2801  05D7                     __ptext9:	
  2802 ;; *************** function _strcpy *****************
  2803 ;; Defined at:
  2804 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  to              1    wreg     PTR unsigned char 
  2807 ;;		 -> nrf24l01TXTopic(8), 
  2808 ;;  from            2    3[BANK0 ] PTR const unsigned char 
  2809 ;;		 -> STR_6(5), STR_5(6), STR_4(6), STR_3(5), 
  2810 ;;		 -> STR_2(5), STR_1(4), 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  to              1    7[BANK0 ] PTR unsigned char 
  2813 ;;		 -> nrf24l01TXTopic(8), 
  2814 ;;  cp              1    6[BANK0 ] PTR unsigned char 
  2815 ;;		 -> nrf24l01TXTopic(8), 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      PTR unsigned char 
  2818 ;; Registers used:
  2819 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMMON   BANK0   BANK1
  2825 ;;      Params:         0       2       0
  2826 ;;      Locals:         0       2       0
  2827 ;;      Temps:          0       1       0
  2828 ;;      Totals:         0       5       0
  2829 ;;Total ram usage:        5 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    6
  2832 ;; This function calls:
  2833 ;;		Nothing
  2834 ;; This function is called by:
  2835 ;;		_loop
  2836 ;;		_main
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           
  2841                           ;psect for function _strcpy
  2842  05D7                     _strcpy:	
  2843                           
  2844                           ;incstack = 0
  2845                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  2846                           ;strcpy@to stored from wreg
  2847  05D7  0020               	movlb	0	; select bank0
  2848  05D8  00A7               	movwf	strcpy@to
  2849  05D9  0827               	movf	strcpy@to,w
  2850  05DA  00A5               	movwf	??_strcpy
  2851  05DB  0825               	movf	??_strcpy,w
  2852  05DC  00A6               	movwf	strcpy@cp
  2853  05DD                     l1602:	
  2854  05DD  0826               	movf	strcpy@cp,w
  2855  05DE  0086               	movwf	6
  2856  05DF  0187               	clrf	7
  2857  05E0  0823               	movf	strcpy@from,w
  2858  05E1  0084               	movwf	4
  2859  05E2  0824               	movf	strcpy@from+1,w
  2860  05E3  0085               	movwf	5
  2861  05E4  0800               	movf	0,w	;code access
  2862  05E5  3FC0               	movwi [0]fsr1
  2863  05E6  0889               	movf	9,f
  2864  05E7  1903               	btfsc	3,2
  2865  05E8  0008               	return
  2866  05E9  3001               	movlw	1
  2867  05EA  00A5               	movwf	??_strcpy
  2868  05EB  0825               	movf	??_strcpy,w
  2869  05EC  07A6               	addwf	strcpy@cp,f
  2870  05ED  3001               	movlw	1
  2871  05EE  07A3               	addwf	strcpy@from,f
  2872  05EF  3000               	movlw	0
  2873  05F0  3DA4               	addwfc	strcpy@from+1,f
  2874  05F1  2DDD               	goto	l1602
  2875  05F2                     __end_of_strcpy:	
  2876                           ;	Return value of _strcpy is never used
  2877                           
  2878                           
  2879                           	psect	text10
  2880  0199                     __ptext10:	
  2881 ;; *************** function _nrf24l01SendString *****************
  2882 ;; Defined at:
  2883 ;;		line 162 in file "nrf24l01.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  waitForAck      1    wreg     unsigned char 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;  waitForAck      1    4[BANK0 ] unsigned char 
  2888 ;;  i               1    5[BANK0 ] unsigned char 
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  1    wreg      void 
  2891 ;; Registers used:
  2892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMMON   BANK0   BANK1
  2898 ;;      Params:         0       0       0
  2899 ;;      Locals:         0       2       0
  2900 ;;      Temps:          0       1       0
  2901 ;;      Totals:         0       3       0
  2902 ;;Total ram usage:        3 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    9
  2905 ;; This function calls:
  2906 ;;		_enableInterrupts
  2907 ;;		_nrf24l01SPIEnd
  2908 ;;		_nrf24l01SPISend
  2909 ;;		_nrf24l01SPIStart
  2910 ;;		_nrf24l01SetRXMode
  2911 ;; This function is called by:
  2912 ;;		_loop
  2913 ;;		_main
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           
  2918                           ;psect for function _nrf24l01SendString
  2919  0199                     _nrf24l01SendString:	
  2920                           
  2921                           ;incstack = 0
  2922                           ; Regs used in _nrf24l01SendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2923                           ;nrf24l01SendString@waitForAck stored from wreg
  2924  0199  0020               	movlb	0	; select bank0
  2925  019A  00A4               	movwf	nrf24l01SendString@waitForAck
  2926                           
  2927                           ;nrf24l01.c: 165: unsigned char i;
  2928                           ;nrf24l01.c: 169: nrf24l01.waitForTXACK = waitForAck;
  2929  019B  0824               	movf	nrf24l01SendString@waitForAck,w
  2930  019C  3901               	andlw	1
  2931  019D  104C               	bcf	_nrf24l01,0	;volatile
  2932  019E  1D03               	skipz
  2933  019F  144C               	bsf	_nrf24l01,0	;volatile
  2934                           
  2935                           ;nrf24l01.c: 171: if (counter){
  2936  01A0  0849               	movf	_counter,w
  2937  01A1  044A               	iorwf	_counter+1,w
  2938  01A2  1903               	btfsc	3,2
  2939  01A3  29A8               	goto	l262
  2940                           
  2941                           ;nrf24l01.c: 172: counter--;
  2942  01A4  3001               	movlw	1
  2943  01A5  02C9               	subwf	_counter,f
  2944  01A6  3000               	movlw	0
  2945  01A7  3BCA               	subwfb	_counter+1,f
  2946  01A8                     l262:	
  2947                           ;nrf24l01.c: 173: }
  2948                           ;nrf24l01.c: 176: RESEND:
  2949                           
  2950                           
  2951                           ;nrf24l01.c: 178: counter++;
  2952  01A8  3001               	movlw	1
  2953  01A9  07C9               	addwf	_counter,f
  2954  01AA  3000               	movlw	0
  2955  01AB  3DCA               	addwfc	_counter+1,f
  2956                           
  2957                           ;nrf24l01.c: 181: i = 0xFF;
  2958  01AC  30FF               	movlw	255
  2959  01AD  00A3               	movwf	??_nrf24l01SendString
  2960  01AE  0823               	movf	??_nrf24l01SendString,w
  2961  01AF  00A5               	movwf	nrf24l01SendString@i
  2962  01B0                     l1646:	
  2963                           ;nrf24l01.c: 182: while (nrf24l01.TXBusy){
  2964                           
  2965  01B0  0020               	movlb	0	; select bank0
  2966  01B1  1CCC               	btfss	_nrf24l01,1	;volatile
  2967  01B2  29BC               	goto	l266
  2968                           
  2969                           ;nrf24l01.c: 183: if (!--i) {
  2970  01B3  3001               	movlw	1
  2971  01B4  02A5               	subwf	nrf24l01SendString@i,f
  2972  01B5  1903               	btfsc	3,2
  2973  01B6  29A8               	goto	l262
  2974                           
  2975                           ;nrf24l01.c: 185: }
  2976                           ;nrf24l01.c: 186: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2977                           
  2978                           ;nrf24l01.c: 184: goto RESEND;
  2979  01B7  3085               	movlw	133
  2980  01B8                     u1597:	
  2981  01B8  0B89               	decfsz	9,f
  2982  01B9  29B8               	goto	u1597
  2983  01BA  0000               	nop
  2984  01BB  29B0               	goto	l1646
  2985  01BC                     l266:	
  2986                           
  2987                           ;nrf24l01.c: 187: }
  2988                           ;nrf24l01.c: 191: nrf24l01.TXBusy = 1;
  2989  01BC  14CC               	bsf	_nrf24l01,1	;volatile
  2990                           
  2991                           ;nrf24l01.c: 194: enableInterrupts(0);
  2992  01BD  3000               	movlw	0
  2993  01BE  2635               	fcall	_enableInterrupts
  2994                           
  2995                           ;nrf24l01.c: 197: nrf24l01SetRXMode(0);
  2996  01BF  3000               	movlw	0
  2997  01C0  2474               	fcall	_nrf24l01SetRXMode
  2998                           
  2999                           ;nrf24l01.c: 200: nrf24l01SPIStart();
  3000  01C1  2627               	fcall	_nrf24l01SPIStart
  3001                           
  3002                           ;nrf24l01.c: 203: nrf24l01SPISend(0b10110000);
  3003  01C2  30B0               	movlw	176
  3004  01C3  2613               	fcall	_nrf24l01SPISend
  3005                           
  3006                           ;nrf24l01.c: 206: for (i = 0; (nrf24l01Name[i] != '\0') && (i < sizeof(nrf24l01Name)); i
      +                          ++){
  3007  01C4  0020               	movlb	0	; select bank0
  3008  01C5  01A5               	clrf	nrf24l01SendString@i
  3009  01C6  29D2               	goto	l1656
  3010  01C7                     l1652:	
  3011                           
  3012                           ;nrf24l01.c: 207: nrf24l01SPISend(nrf24l01Name[i]);
  3013  01C7  0825               	movf	nrf24l01SendString@i,w
  3014  01C8  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  3015  01C9  0086               	movwf	6
  3016  01CA  0187               	clrf	7
  3017  01CB  0801               	movf	1,w
  3018  01CC  2613               	fcall	_nrf24l01SPISend
  3019  01CD  3001               	movlw	1
  3020  01CE  0020               	movlb	0	; select bank0
  3021  01CF  00A3               	movwf	??_nrf24l01SendString
  3022  01D0  0823               	movf	??_nrf24l01SendString,w
  3023  01D1  07A5               	addwf	nrf24l01SendString@i,f
  3024  01D2                     l1656:	
  3025  01D2  0825               	movf	nrf24l01SendString@i,w
  3026  01D3  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  3027  01D4  0086               	movwf	6
  3028  01D5  0187               	clrf	7
  3029  01D6  0801               	movf	1,w
  3030  01D7  1903               	btfsc	3,2
  3031  01D8  29DD               	goto	l1660
  3032  01D9  3010               	movlw	16
  3033  01DA  0225               	subwf	nrf24l01SendString@i,w
  3034  01DB  1C03               	skipc
  3035  01DC  29C7               	goto	l1652
  3036  01DD                     l1660:	
  3037                           
  3038                           ;nrf24l01.c: 208: }
  3039                           ;nrf24l01.c: 211: nrf24l01SPISend('/');
  3040  01DD  302F               	movlw	47
  3041  01DE  2613               	fcall	_nrf24l01SPISend
  3042                           
  3043                           ;nrf24l01.c: 214: for (i = 0; (nrf24l01TXTopic[i] != '\0') && (i < sizeof(nrf24l01TXTopi
      +                          c)); i++){
  3044  01DF  0020               	movlb	0	; select bank0
  3045  01E0  01A5               	clrf	nrf24l01SendString@i
  3046  01E1  29ED               	goto	l1668
  3047  01E2                     l1664:	
  3048                           
  3049                           ;nrf24l01.c: 215: nrf24l01SPISend(nrf24l01TXTopic[i]);
  3050  01E2  0825               	movf	nrf24l01SendString@i,w
  3051  01E3  3E65               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3052  01E4  0086               	movwf	6
  3053  01E5  0187               	clrf	7
  3054  01E6  0801               	movf	1,w
  3055  01E7  2613               	fcall	_nrf24l01SPISend
  3056  01E8  3001               	movlw	1
  3057  01E9  0020               	movlb	0	; select bank0
  3058  01EA  00A3               	movwf	??_nrf24l01SendString
  3059  01EB  0823               	movf	??_nrf24l01SendString,w
  3060  01EC  07A5               	addwf	nrf24l01SendString@i,f
  3061  01ED                     l1668:	
  3062  01ED  0825               	movf	nrf24l01SendString@i,w
  3063  01EE  3E65               	addlw	(low (_nrf24l01TXTopic| 0))& (0+255)
  3064  01EF  0086               	movwf	6
  3065  01F0  0187               	clrf	7
  3066  01F1  0801               	movf	1,w
  3067  01F2  1903               	btfsc	3,2
  3068  01F3  29F8               	goto	l1672
  3069  01F4  3008               	movlw	8
  3070  01F5  0225               	subwf	nrf24l01SendString@i,w
  3071  01F6  1C03               	skipc
  3072  01F7  29E2               	goto	l1664
  3073  01F8                     l1672:	
  3074                           
  3075                           ;nrf24l01.c: 216: }
  3076                           ;nrf24l01.c: 219: nrf24l01SPISend('/');
  3077  01F8  302F               	movlw	47
  3078  01F9  2613               	fcall	_nrf24l01SPISend
  3079                           
  3080                           ;nrf24l01.c: 222: for (i = 0; (nrf24l01TXValue[i] != '\0') && (i < sizeof(nrf24l01TXValu
      +                          e)); i++){
  3081  01FA  0020               	movlb	0	; select bank0
  3082  01FB  01A5               	clrf	nrf24l01SendString@i
  3083  01FC  2A08               	goto	l1680
  3084  01FD                     l1676:	
  3085                           
  3086                           ;nrf24l01.c: 223: nrf24l01SPISend(nrf24l01TXValue[i]);
  3087  01FD  0825               	movf	nrf24l01SendString@i,w
  3088  01FE  3E5D               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3089  01FF  0086               	movwf	6
  3090  0200  0187               	clrf	7
  3091  0201  0801               	movf	1,w
  3092  0202  2613               	fcall	_nrf24l01SPISend
  3093  0203  3001               	movlw	1
  3094  0204  0020               	movlb	0	; select bank0
  3095  0205  00A3               	movwf	??_nrf24l01SendString
  3096  0206  0823               	movf	??_nrf24l01SendString,w
  3097  0207  07A5               	addwf	nrf24l01SendString@i,f
  3098  0208                     l1680:	
  3099  0208  0825               	movf	nrf24l01SendString@i,w
  3100  0209  3E5D               	addlw	(low (_nrf24l01TXValue| 0))& (0+255)
  3101  020A  0086               	movwf	6
  3102  020B  0187               	clrf	7
  3103  020C  0801               	movf	1,w
  3104  020D  1903               	btfsc	3,2
  3105  020E  2A13               	goto	l1684
  3106  020F  3008               	movlw	8
  3107  0210  0225               	subwf	nrf24l01SendString@i,w
  3108  0211  1C03               	skipc
  3109  0212  29FD               	goto	l1676
  3110  0213                     l1684:	
  3111                           
  3112                           ;nrf24l01.c: 224: }
  3113                           ;nrf24l01.c: 227: nrf24l01SPIEnd();
  3114  0213  262E               	fcall	_nrf24l01SPIEnd
  3115                           
  3116                           ;nrf24l01.c: 230: PORTAbits.RA0 = 1;
  3117  0214  0020               	movlb	0	; select bank0
  3118  0215  140C               	bsf	12,0	;volatile
  3119                           
  3120                           ;nrf24l01.c: 231: _delay((unsigned long)((20)*(16000000/4000000.0)));
  3121  0216  301A               	movlw	26
  3122  0217                     u1607:	
  3123  0217  0B89               	decfsz	9,f
  3124  0218  2A17               	goto	u1607
  3125  0219  3200               	nop2
  3126                           
  3127                           ;nrf24l01.c: 232: PORTAbits.RA0 = 0;
  3128  021A  0020               	movlb	0	; select bank0
  3129  021B  100C               	bcf	12,0	;volatile
  3130                           
  3131                           ;nrf24l01.c: 235: enableInterrupts(1);
  3132  021C  3001               	movlw	1
  3133  021D  2635               	fcall	_enableInterrupts
  3134                           
  3135                           ;nrf24l01.c: 238: i = 0xFF;
  3136  021E  30FF               	movlw	255
  3137  021F  0020               	movlb	0	; select bank0
  3138  0220  00A3               	movwf	??_nrf24l01SendString
  3139  0221  0823               	movf	??_nrf24l01SendString,w
  3140  0222  00A5               	movwf	nrf24l01SendString@i
  3141  0223                     l1700:	
  3142                           ;nrf24l01.c: 239: while (nrf24l01.waitForTXACK){
  3143                           
  3144  0223  0020               	movlb	0	; select bank0
  3145  0224  1C4C               	btfss	_nrf24l01,0	;volatile
  3146  0225  0008               	return
  3147                           
  3148                           ;nrf24l01.c: 240: if (!--i) {
  3149  0226  3001               	movlw	1
  3150  0227  02A5               	subwf	nrf24l01SendString@i,f
  3151  0228  1903               	btfsc	3,2
  3152  0229  29A8               	goto	l262
  3153                           
  3154                           ;nrf24l01.c: 242: }
  3155                           ;nrf24l01.c: 243: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3156                           
  3157                           ;nrf24l01.c: 241: goto RESEND;
  3158  022A  3085               	movlw	133
  3159  022B                     u1617:	
  3160  022B  0B89               	decfsz	9,f
  3161  022C  2A2B               	goto	u1617
  3162  022D  0000               	nop
  3163  022E  2A23               	goto	l1700
  3164  022F                     __end_of_nrf24l01SendString:	
  3165                           
  3166                           	psect	text11
  3167  0340                     __ptext11:	
  3168 ;; *************** function _getADCValue *****************
  3169 ;; Defined at:
  3170 ;;		line 24 in file "main.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;  channel         1    wreg     unsigned char 
  3173 ;;  divider         4   17[BANK0 ] unsigned long 
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  channel         1   25[BANK0 ] unsigned char 
  3176 ;;  adcSum          4   27[BANK0 ] unsigned long 
  3177 ;;  adcLoop         1   26[BANK0 ] unsigned char 
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  4   17[BANK0 ] unsigned long 
  3180 ;; Registers used:
  3181 ;;		wreg, status,2, status,0, pclath, cstack
  3182 ;; Tracked objects:
  3183 ;;		On entry : 0/0
  3184 ;;		On exit  : 0/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMMON   BANK0   BANK1
  3187 ;;      Params:         0       4       0
  3188 ;;      Locals:         0       6       0
  3189 ;;      Temps:          0       4       0
  3190 ;;      Totals:         0      14       0
  3191 ;;Total ram usage:       14 bytes
  3192 ;; Hardware stack levels used:    1
  3193 ;; Hardware stack levels required when called:    7
  3194 ;; This function calls:
  3195 ;;		___lldiv
  3196 ;;		___lmul
  3197 ;; This function is called by:
  3198 ;;		_loop
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           
  3203                           ;psect for function _getADCValue
  3204  0340                     _getADCValue:	
  3205                           
  3206                           ;incstack = 0
  3207                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  3208                           ;getADCValue@channel stored from wreg
  3209  0340  0020               	movlb	0	; select bank0
  3210  0341  00B9               	movwf	getADCValue@channel
  3211                           
  3212                           ;main.c: 26: unsigned long adcSum = 0;
  3213  0342  3000               	movlw	0
  3214  0343  00BE               	movwf	getADCValue@adcSum+3
  3215  0344  3000               	movlw	0
  3216  0345  00BD               	movwf	getADCValue@adcSum+2
  3217  0346  3000               	movlw	0
  3218  0347  00BC               	movwf	getADCValue@adcSum+1
  3219  0348  3000               	movlw	0
  3220  0349  00BB               	movwf	getADCValue@adcSum
  3221                           
  3222                           ;main.c: 27: unsigned char adcLoop = 255;
  3223  034A  30FF               	movlw	255
  3224  034B  00B5               	movwf	??_getADCValue
  3225  034C  0835               	movf	??_getADCValue,w
  3226  034D  00BA               	movwf	getADCValue@adcLoop
  3227                           
  3228                           ;main.c: 29: ADCON0bits.CHS = channel;
  3229  034E  0839               	movf	getADCValue@channel,w
  3230  034F  00B5               	movwf	??_getADCValue
  3231  0350  0DB5               	rlf	??_getADCValue,f
  3232  0351  0DB5               	rlf	??_getADCValue,f
  3233  0352  0021               	movlb	1	; select bank1
  3234  0353  081D               	movf	29,w	;volatile
  3235  0354  0020               	movlb	0	; select bank0
  3236  0355  0635               	xorwf	??_getADCValue,w
  3237  0356  3983               	andlw	-125
  3238  0357  0635               	xorwf	??_getADCValue,w
  3239  0358  0021               	movlb	1	; select bank1
  3240  0359  009D               	movwf	29	;volatile
  3241                           
  3242                           ;main.c: 30: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3243  035A  30A0               	movlw	160
  3244  035B                     u1627:	
  3245  035B  3200               	nop2
  3246  035C  0B89               	decfsz	9,f
  3247  035D  2B5B               	goto	u1627
  3248  035E                     l1580:	
  3249                           ;main.c: 32: while (--adcLoop){
  3250                           
  3251  035E  3001               	movlw	1
  3252  035F  0020               	movlb	0	; select bank0
  3253  0360  02BA               	subwf	getADCValue@adcLoop,f
  3254  0361  1903               	btfsc	3,2
  3255  0362  2B88               	goto	l1582
  3256                           
  3257                           ;main.c: 34: ADCON0bits.ADGO = 1;
  3258  0363  0021               	movlb	1	; select bank1
  3259  0364  149D               	bsf	29,1	;volatile
  3260  0365                     l149:	
  3261                           ;main.c: 35: while (ADCON0bits.ADGO){
  3262                           
  3263  0365  0021               	movlb	1	; select bank1
  3264  0366  1C9D               	btfss	29,1	;volatile
  3265  0367  2B6A               	goto	l1578
  3266                           
  3267                           ;main.c: 36: __nop();
  3268  0368  0000               	nop
  3269  0369  2B65               	goto	l149
  3270  036A                     l1578:	
  3271                           
  3272                           ;main.c: 37: }
  3273                           ;main.c: 39: adcSum+= ADRESL;
  3274  036A  081B               	movf	27,w	;volatile
  3275  036B  0020               	movlb	0	; select bank0
  3276  036C  00B5               	movwf	??_getADCValue
  3277  036D  01B6               	clrf	??_getADCValue+1
  3278  036E  01B7               	clrf	??_getADCValue+2
  3279  036F  01B8               	clrf	??_getADCValue+3
  3280  0370  0835               	movf	??_getADCValue,w
  3281  0371  07BB               	addwf	getADCValue@adcSum,f
  3282  0372  0836               	movf	??_getADCValue+1,w
  3283  0373  3DBC               	addwfc	getADCValue@adcSum+1,f
  3284  0374  0837               	movf	??_getADCValue+2,w
  3285  0375  3DBD               	addwfc	getADCValue@adcSum+2,f
  3286  0376  0838               	movf	??_getADCValue+3,w
  3287  0377  3DBE               	addwfc	getADCValue@adcSum+3,f
  3288                           
  3289                           ;main.c: 40: adcSum+= (unsigned) (ADRESH << 8);
  3290  0378  0021               	movlb	1	; select bank1
  3291  0379  081C               	movf	28,w	;volatile
  3292  037A  0020               	movlb	0	; select bank0
  3293  037B  00B5               	movwf	??_getADCValue
  3294  037C  01B6               	clrf	??_getADCValue+1
  3295  037D  0835               	movf	??_getADCValue,w
  3296  037E  00B6               	movwf	??_getADCValue+1
  3297  037F  01B5               	clrf	??_getADCValue
  3298  0380  0835               	movf	??_getADCValue,w
  3299  0381  07BB               	addwf	getADCValue@adcSum,f
  3300  0382  0836               	movf	??_getADCValue+1,w
  3301  0383  3DBC               	addwfc	getADCValue@adcSum+1,f
  3302  0384  3000               	movlw	0
  3303  0385  3DBD               	addwfc	getADCValue@adcSum+2,f
  3304  0386  3DBE               	addwfc	getADCValue@adcSum+3,f
  3305  0387  2B5E               	goto	l1580
  3306  0388                     l1582:	
  3307                           
  3308                           ;main.c: 41: }
  3309                           ;main.c: 43: adcSum*= 100;
  3310  0388  3000               	movlw	0
  3311  0389  00A6               	movwf	___lmul@multiplier+3
  3312  038A  3000               	movlw	0
  3313  038B  00A5               	movwf	___lmul@multiplier+2
  3314  038C  3000               	movlw	0
  3315  038D  00A4               	movwf	___lmul@multiplier+1
  3316  038E  3064               	movlw	100
  3317  038F  00A3               	movwf	___lmul@multiplier
  3318  0390  083E               	movf	getADCValue@adcSum+3,w
  3319  0391  00AA               	movwf	___lmul@multiplicand+3
  3320  0392  083D               	movf	getADCValue@adcSum+2,w
  3321  0393  00A9               	movwf	___lmul@multiplicand+2
  3322  0394  083C               	movf	getADCValue@adcSum+1,w
  3323  0395  00A8               	movwf	___lmul@multiplicand+1
  3324  0396  083B               	movf	getADCValue@adcSum,w
  3325  0397  00A7               	movwf	___lmul@multiplicand
  3326  0398  2514               	fcall	___lmul
  3327  0399  0020               	movlb	0	; select bank0
  3328  039A  0826               	movf	?___lmul+3,w
  3329  039B  00BE               	movwf	getADCValue@adcSum+3
  3330  039C  0825               	movf	?___lmul+2,w
  3331  039D  00BD               	movwf	getADCValue@adcSum+2
  3332  039E  0824               	movf	?___lmul+1,w
  3333  039F  00BC               	movwf	getADCValue@adcSum+1
  3334  03A0  0823               	movf	?___lmul,w
  3335  03A1  00BB               	movwf	getADCValue@adcSum
  3336                           
  3337                           ;main.c: 44: adcSum/= divider;
  3338  03A2  0834               	movf	getADCValue@divider+3,w
  3339  03A3  00A6               	movwf	___lldiv@divisor+3
  3340  03A4  0833               	movf	getADCValue@divider+2,w
  3341  03A5  00A5               	movwf	___lldiv@divisor+2
  3342  03A6  0832               	movf	getADCValue@divider+1,w
  3343  03A7  00A4               	movwf	___lldiv@divisor+1
  3344  03A8  0831               	movf	getADCValue@divider,w
  3345  03A9  00A3               	movwf	___lldiv@divisor
  3346  03AA  083E               	movf	getADCValue@adcSum+3,w
  3347  03AB  00AA               	movwf	___lldiv@dividend+3
  3348  03AC  083D               	movf	getADCValue@adcSum+2,w
  3349  03AD  00A9               	movwf	___lldiv@dividend+2
  3350  03AE  083C               	movf	getADCValue@adcSum+1,w
  3351  03AF  00A8               	movwf	___lldiv@dividend+1
  3352  03B0  083B               	movf	getADCValue@adcSum,w
  3353  03B1  00A7               	movwf	___lldiv@dividend
  3354  03B2  2421               	fcall	___lldiv
  3355  03B3  0020               	movlb	0	; select bank0
  3356  03B4  0826               	movf	?___lldiv+3,w
  3357  03B5  00BE               	movwf	getADCValue@adcSum+3
  3358  03B6  0825               	movf	?___lldiv+2,w
  3359  03B7  00BD               	movwf	getADCValue@adcSum+2
  3360  03B8  0824               	movf	?___lldiv+1,w
  3361  03B9  00BC               	movwf	getADCValue@adcSum+1
  3362  03BA  0823               	movf	?___lldiv,w
  3363  03BB  00BB               	movwf	getADCValue@adcSum
  3364                           
  3365                           ;main.c: 46: return adcSum;
  3366  03BC  083E               	movf	getADCValue@adcSum+3,w
  3367  03BD  00B4               	movwf	?_getADCValue+3
  3368  03BE  083D               	movf	getADCValue@adcSum+2,w
  3369  03BF  00B3               	movwf	?_getADCValue+2
  3370  03C0  083C               	movf	getADCValue@adcSum+1,w
  3371  03C1  00B2               	movwf	?_getADCValue+1
  3372  03C2  083B               	movf	getADCValue@adcSum,w
  3373  03C3  00B1               	movwf	?_getADCValue
  3374  03C4  0008               	return
  3375  03C5                     __end_of_getADCValue:	
  3376                           
  3377                           	psect	text12
  3378  0514                     __ptext12:	
  3379 ;; *************** function ___lmul *****************
  3380 ;; Defined at:
  3381 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;  multiplier      4    3[BANK0 ] unsigned long 
  3384 ;;  multiplicand    4    7[BANK0 ] unsigned long 
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;  product         4   11[BANK0 ] unsigned long 
  3387 ;; Return value:  Size  Location     Type
  3388 ;;                  4    3[BANK0 ] unsigned long 
  3389 ;; Registers used:
  3390 ;;		wreg, status,2, status,0
  3391 ;; Tracked objects:
  3392 ;;		On entry : 0/0
  3393 ;;		On exit  : 0/0
  3394 ;;		Unchanged: 0/0
  3395 ;; Data sizes:     COMMON   BANK0   BANK1
  3396 ;;      Params:         0       8       0
  3397 ;;      Locals:         0       4       0
  3398 ;;      Temps:          0       0       0
  3399 ;;      Totals:         0      12       0
  3400 ;;Total ram usage:       12 bytes
  3401 ;; Hardware stack levels used:    1
  3402 ;; Hardware stack levels required when called:    6
  3403 ;; This function calls:
  3404 ;;		Nothing
  3405 ;; This function is called by:
  3406 ;;		_getADCValue
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           
  3411                           ;psect for function ___lmul
  3412  0514                     ___lmul:	
  3413                           
  3414                           ;incstack = 0
  3415                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3416  0514  3000               	movlw	0
  3417  0515  0020               	movlb	0	; select bank0
  3418  0516  00AE               	movwf	___lmul@product+3
  3419  0517  3000               	movlw	0
  3420  0518  00AD               	movwf	___lmul@product+2
  3421  0519  3000               	movlw	0
  3422  051A  00AC               	movwf	___lmul@product+1
  3423  051B  3000               	movlw	0
  3424  051C  00AB               	movwf	___lmul@product
  3425  051D                     l1482:	
  3426  051D  1C23               	btfss	___lmul@multiplier,0
  3427  051E  2D27               	goto	l1486
  3428  051F  0827               	movf	___lmul@multiplicand,w
  3429  0520  07AB               	addwf	___lmul@product,f
  3430  0521  0828               	movf	___lmul@multiplicand+1,w
  3431  0522  3DAC               	addwfc	___lmul@product+1,f
  3432  0523  0829               	movf	___lmul@multiplicand+2,w
  3433  0524  3DAD               	addwfc	___lmul@product+2,f
  3434  0525  082A               	movf	___lmul@multiplicand+3,w
  3435  0526  3DAE               	addwfc	___lmul@product+3,f
  3436  0527                     l1486:	
  3437  0527  3001               	movlw	1
  3438  0528                     u885:	
  3439  0528  35A7               	lslf	___lmul@multiplicand,f
  3440  0529  0DA8               	rlf	___lmul@multiplicand+1,f
  3441  052A  0DA9               	rlf	___lmul@multiplicand+2,f
  3442  052B  0DAA               	rlf	___lmul@multiplicand+3,f
  3443  052C  0B89               	decfsz	9,f
  3444  052D  2D28               	goto	u885
  3445  052E  3001               	movlw	1
  3446  052F                     u895:	
  3447  052F  36A6               	lsrf	___lmul@multiplier+3,f
  3448  0530  0CA5               	rrf	___lmul@multiplier+2,f
  3449  0531  0CA4               	rrf	___lmul@multiplier+1,f
  3450  0532  0CA3               	rrf	___lmul@multiplier,f
  3451  0533  0B89               	decfsz	9,f
  3452  0534  2D2F               	goto	u895
  3453  0535  0826               	movf	___lmul@multiplier+3,w
  3454  0536  0425               	iorwf	___lmul@multiplier+2,w
  3455  0537  0424               	iorwf	___lmul@multiplier+1,w
  3456  0538  0423               	iorwf	___lmul@multiplier,w
  3457  0539  1D03               	skipz
  3458  053A  2D1D               	goto	l1482
  3459  053B  082E               	movf	___lmul@product+3,w
  3460  053C  00A6               	movwf	?___lmul+3
  3461  053D  082D               	movf	___lmul@product+2,w
  3462  053E  00A5               	movwf	?___lmul+2
  3463  053F  082C               	movf	___lmul@product+1,w
  3464  0540  00A4               	movwf	?___lmul+1
  3465  0541  082B               	movf	___lmul@product,w
  3466  0542  00A3               	movwf	?___lmul
  3467  0543  0008               	return
  3468  0544                     __end_of___lmul:	
  3469                           
  3470                           	psect	text13
  3471  0421                     __ptext13:	
  3472 ;; *************** function ___lldiv *****************
  3473 ;; Defined at:
  3474 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;  divisor         4    3[BANK0 ] unsigned long 
  3477 ;;  dividend        4    7[BANK0 ] unsigned long 
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;  quotient        4   12[BANK0 ] unsigned long 
  3480 ;;  counter         1   16[BANK0 ] unsigned char 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  4    3[BANK0 ] unsigned long 
  3483 ;; Registers used:
  3484 ;;		wreg, status,2, status,0
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMMON   BANK0   BANK1
  3490 ;;      Params:         0       8       0
  3491 ;;      Locals:         0       5       0
  3492 ;;      Temps:          0       1       0
  3493 ;;      Totals:         0      14       0
  3494 ;;Total ram usage:       14 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    6
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_getADCValue
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           
  3505                           ;psect for function ___lldiv
  3506  0421                     ___lldiv:	
  3507                           
  3508                           ;incstack = 0
  3509                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3510  0421  3000               	movlw	0
  3511  0422  0020               	movlb	0	; select bank0
  3512  0423  00AF               	movwf	___lldiv@quotient+3
  3513  0424  3000               	movlw	0
  3514  0425  00AE               	movwf	___lldiv@quotient+2
  3515  0426  3000               	movlw	0
  3516  0427  00AD               	movwf	___lldiv@quotient+1
  3517  0428  3000               	movlw	0
  3518  0429  00AC               	movwf	___lldiv@quotient
  3519  042A  0826               	movf	___lldiv@divisor+3,w
  3520  042B  0425               	iorwf	___lldiv@divisor+2,w
  3521  042C  0424               	iorwf	___lldiv@divisor+1,w
  3522  042D  0423               	iorwf	___lldiv@divisor,w
  3523  042E  1903               	skipnz
  3524  042F  2C6B               	goto	l1514
  3525  0430  01B0               	clrf	___lldiv@counter
  3526  0431  0AB0               	incf	___lldiv@counter,f
  3527  0432                     l1500:	
  3528  0432  1BA6               	btfsc	___lldiv@divisor+3,7
  3529  0433  2C40               	goto	l1502
  3530  0434  3001               	movlw	1
  3531  0435                     u925:	
  3532  0435  35A3               	lslf	___lldiv@divisor,f
  3533  0436  0DA4               	rlf	___lldiv@divisor+1,f
  3534  0437  0DA5               	rlf	___lldiv@divisor+2,f
  3535  0438  0DA6               	rlf	___lldiv@divisor+3,f
  3536  0439  0B89               	decfsz	9,f
  3537  043A  2C35               	goto	u925
  3538  043B  3001               	movlw	1
  3539  043C  00AB               	movwf	??___lldiv
  3540  043D  082B               	movf	??___lldiv,w
  3541  043E  07B0               	addwf	___lldiv@counter,f
  3542  043F  2C32               	goto	l1500
  3543  0440                     l1502:	
  3544  0440  3001               	movlw	1
  3545  0441                     u945:	
  3546  0441  35AC               	lslf	___lldiv@quotient,f
  3547  0442  0DAD               	rlf	___lldiv@quotient+1,f
  3548  0443  0DAE               	rlf	___lldiv@quotient+2,f
  3549  0444  0DAF               	rlf	___lldiv@quotient+3,f
  3550  0445  0B89               	decfsz	9,f
  3551  0446  2C41               	goto	u945
  3552  0447  0826               	movf	___lldiv@divisor+3,w
  3553  0448  022A               	subwf	___lldiv@dividend+3,w
  3554  0449  1D03               	skipz
  3555  044A  2C55               	goto	u955
  3556  044B  0825               	movf	___lldiv@divisor+2,w
  3557  044C  0229               	subwf	___lldiv@dividend+2,w
  3558  044D  1D03               	skipz
  3559  044E  2C55               	goto	u955
  3560  044F  0824               	movf	___lldiv@divisor+1,w
  3561  0450  0228               	subwf	___lldiv@dividend+1,w
  3562  0451  1D03               	skipz
  3563  0452  2C55               	goto	u955
  3564  0453  0823               	movf	___lldiv@divisor,w
  3565  0454  0227               	subwf	___lldiv@dividend,w
  3566  0455                     u955:	
  3567  0455  1C03               	skipc
  3568  0456  2C60               	goto	l1510
  3569  0457  0823               	movf	___lldiv@divisor,w
  3570  0458  02A7               	subwf	___lldiv@dividend,f
  3571  0459  0824               	movf	___lldiv@divisor+1,w
  3572  045A  3BA8               	subwfb	___lldiv@dividend+1,f
  3573  045B  0825               	movf	___lldiv@divisor+2,w
  3574  045C  3BA9               	subwfb	___lldiv@dividend+2,f
  3575  045D  0826               	movf	___lldiv@divisor+3,w
  3576  045E  3BAA               	subwfb	___lldiv@dividend+3,f
  3577  045F  142C               	bsf	___lldiv@quotient,0
  3578  0460                     l1510:	
  3579  0460  3001               	movlw	1
  3580  0461                     u965:	
  3581  0461  36A6               	lsrf	___lldiv@divisor+3,f
  3582  0462  0CA5               	rrf	___lldiv@divisor+2,f
  3583  0463  0CA4               	rrf	___lldiv@divisor+1,f
  3584  0464  0CA3               	rrf	___lldiv@divisor,f
  3585  0465  0B89               	decfsz	9,f
  3586  0466  2C61               	goto	u965
  3587  0467  3001               	movlw	1
  3588  0468  02B0               	subwf	___lldiv@counter,f
  3589  0469  1D03               	btfss	3,2
  3590  046A  2C40               	goto	l1502
  3591  046B                     l1514:	
  3592  046B  082F               	movf	___lldiv@quotient+3,w
  3593  046C  00A6               	movwf	?___lldiv+3
  3594  046D  082E               	movf	___lldiv@quotient+2,w
  3595  046E  00A5               	movwf	?___lldiv+2
  3596  046F  082D               	movf	___lldiv@quotient+1,w
  3597  0470  00A4               	movwf	?___lldiv+1
  3598  0471  082C               	movf	___lldiv@quotient,w
  3599  0472  00A3               	movwf	?___lldiv
  3600  0473  0008               	return
  3601  0474                     __end_of___lldiv:	
  3602                           
  3603                           	psect	text14
  3604  066A                     __ptext14:	
  3605 ;; *************** function _checkRxData *****************
  3606 ;; Defined at:
  3607 ;;		line 62 in file "main.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;		None
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;		None
  3612 ;; Return value:  Size  Location     Type
  3613 ;;                  1    wreg      void 
  3614 ;; Registers used:
  3615 ;;		wreg, status,2, status,0, pclath, cstack
  3616 ;; Tracked objects:
  3617 ;;		On entry : 0/0
  3618 ;;		On exit  : 0/0
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMMON   BANK0   BANK1
  3621 ;;      Params:         0       0       0
  3622 ;;      Locals:         0       0       0
  3623 ;;      Temps:          0       0       0
  3624 ;;      Totals:         0       0       0
  3625 ;;Total ram usage:        0 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; Hardware stack levels required when called:    9
  3628 ;; This function calls:
  3629 ;;		_nrf24l01SetRXMode
  3630 ;;		_sleep
  3631 ;; This function is called by:
  3632 ;;		_loop
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           
  3637                           ;psect for function _checkRxData
  3638  066A                     _checkRxData:	
  3639                           
  3640                           ;main.c: 64: nrf24l01SetRXMode(1);
  3641                           
  3642                           ;incstack = 0
  3643                           ; Regs used in _checkRxData: [wreg+status,2+status,0+pclath+cstack]
  3644  066A  3001               	movlw	1
  3645  066B  2474               	fcall	_nrf24l01SetRXMode
  3646                           
  3647                           ;main.c: 66: sleep();
  3648  066C  261E               	fcall	_sleep
  3649                           
  3650                           ;main.c: 69: return;
  3651  066D  0008               	return
  3652  066E                     __end_of_checkRxData:	
  3653                           
  3654                           	psect	text15
  3655  061E                     __ptext15:	
  3656 ;; *************** function _sleep *****************
  3657 ;; Defined at:
  3658 ;;		line 49 in file "main.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;		None
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      void 
  3665 ;; Registers used:
  3666 ;;		None
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMMON   BANK0   BANK1
  3672 ;;      Params:         0       0       0
  3673 ;;      Locals:         0       0       0
  3674 ;;      Temps:          0       0       0
  3675 ;;      Totals:         0       0       0
  3676 ;;Total ram usage:        0 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; Hardware stack levels required when called:    6
  3679 ;; This function calls:
  3680 ;;		Nothing
  3681 ;; This function is called by:
  3682 ;;		_checkRxData
  3683 ;;		_loop
  3684 ;;		_main
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           
  3689                           ;psect for function _sleep
  3690  061E                     _sleep:	
  3691  061E                     l156:	
  3692                           ;incstack = 0
  3693                           ; Regs used in _sleep: []
  3694                           ;main.c: 50: while (1){
  3695                           
  3696  061E  0063               	sleep	;# 
  3697                           
  3698                           ;main.c: 53: __nop();
  3699  061F  0000               	nop
  3700                           
  3701                           ;main.c: 54: __nop();
  3702  0620  0000               	nop
  3703                           
  3704                           ;main.c: 56: if (!STATUSbits.nTO && !STATUSbits.nPD) {
  3705  0621  0020               	movlb	0	; select bank0
  3706  0622  1A03               	btfsc	3,4	;volatile
  3707  0623  2E1E               	goto	l156
  3708  0624  1D83               	btfss	3,3	;volatile
  3709  0625  0008               	return
  3710  0626  2E1E               	goto	l156
  3711  0627                     __end_of_sleep:	
  3712                           ;main.c: 57: return;
  3713                           
  3714                           
  3715                           	psect	intentry
  3716  0004                     __pintentry:	
  3717 ;; *************** function _ISR *****************
  3718 ;; Defined at:
  3719 ;;		line 17 in file "main.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;		None
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;		None
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  1    wreg      void 
  3726 ;; Registers used:
  3727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMMON   BANK0   BANK1
  3733 ;;      Params:         0       0       0
  3734 ;;      Locals:         0       0       0
  3735 ;;      Temps:          0       1       0
  3736 ;;      Totals:         0       1       0
  3737 ;;Total ram usage:        1 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; Hardware stack levels required when called:    5
  3740 ;; This function calls:
  3741 ;;		_nrf24l01ISR
  3742 ;; This function is called by:
  3743 ;;		Interrupt level 1
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747  0004                     _ISR:	
  3748                           
  3749                           ;incstack = 0
  3750  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3751                           
  3752                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3753  0005  3180               	pagesel	$
  3754  0006  0020               	movlb	0	; select bank0
  3755  0007  087F               	movf	127,w
  3756  0008  00A2               	movwf	??_ISR
  3757                           
  3758                           ;main.c: 18: if (INTCONbits.INTF){
  3759  0009  1C8B               	btfss	11,1	;volatile
  3760  000A  280D               	goto	i1l144
  3761                           
  3762                           ;main.c: 19: nrf24l01ISR();
  3763  000B  2598               	fcall	_nrf24l01ISR
  3764                           
  3765                           ;main.c: 20: INTCONbits.INTF = 0;
  3766  000C  108B               	bcf	11,1	;volatile
  3767  000D                     i1l144:	
  3768  000D  0020               	movlb	0	; select bank0
  3769  000E  0822               	movf	??_ISR,w
  3770  000F  00FF               	movwf	127
  3771  0010  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3772  0011  0009               	retfie
  3773  0012                     __end_of_ISR:	
  3774                           
  3775                           	psect	text17
  3776  0598                     __ptext17:	
  3777 ;; *************** function _nrf24l01ISR *****************
  3778 ;; Defined at:
  3779 ;;		line 119 in file "nrf24l01.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;		None
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;  status          1    1[BANK0 ] struct .
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  1    wreg      void 
  3786 ;; Registers used:
  3787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMMON   BANK0   BANK1
  3793 ;;      Params:         0       0       0
  3794 ;;      Locals:         0       1       0
  3795 ;;      Temps:          1       0       0
  3796 ;;      Totals:         1       1       0
  3797 ;;Total ram usage:        2 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; Hardware stack levels required when called:    4
  3800 ;; This function calls:
  3801 ;;		_nrf24l01HandleRX
  3802 ;;		_nrf24l01Send
  3803 ;;		_nrf24l01SetRXMode
  3804 ;; This function is called by:
  3805 ;;		_ISR
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           
  3810                           ;psect for function _nrf24l01ISR
  3811  0598                     _nrf24l01ISR:	
  3812                           
  3813                           ;nrf24l01.c: 121: n_STATUS_t status;
  3814                           ;nrf24l01.c: 122: status.byte = nrf24l01Send(0b00000000 | 0x07, 0);
  3815                           
  3816                           ;incstack = 0
  3817                           ; Regs used in _nrf24l01ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3818  0598  0020               	movlb	0	; select bank0
  3819  0599  01A0               	clrf	nrf24l01Send@data
  3820  059A  3007               	movlw	7
  3821  059B  25F2               	fcall	_nrf24l01Send
  3822  059C  00FD               	movwf	??_nrf24l01ISR
  3823  059D  087D               	movf	??_nrf24l01ISR,w
  3824  059E  0020               	movlb	0	; select bank0
  3825  059F  00A1               	movwf	nrf24l01ISR@status
  3826                           
  3827                           ;nrf24l01.c: 126: if (status.byte == 0x00){
  3828  05A0  0821               	movf	nrf24l01ISR@status,w
  3829  05A1  1903               	btfsc	3,2
  3830  05A2  0001               	reset	;# 
  3831                           
  3832                           ;nrf24l01.c: 129: }
  3833                           ;nrf24l01.c: 132: if (status.byte == 0xFF){
  3834  05A3  0020               	movlb	0	; select bank0
  3835  05A4  0A21               	incf	nrf24l01ISR@status,w
  3836  05A5  1903               	btfsc	3,2
  3837  05A6  0001               	reset	;# 
  3838                           
  3839                           ;nrf24l01.c: 135: }
  3840                           ;nrf24l01.c: 137: if (status.TX_DS){
  3841  05A7  0020               	movlb	0	; select bank0
  3842  05A8  1EA1               	btfss	nrf24l01ISR@status,5
  3843  05A9  2DB0               	goto	i1l1934
  3844                           
  3845                           ;nrf24l01.c: 140: nrf24l01.TXBusy = 0;
  3846  05AA  10CC               	bcf	_nrf24l01,1	;volatile
  3847                           
  3848                           ;nrf24l01.c: 143: if (!nrf24l01.RXMode){
  3849  05AB  1DCC               	btfss	_nrf24l01,3	;volatile
  3850                           
  3851                           ;nrf24l01.c: 144: if (nrf24l01.waitForTXACK){
  3852  05AC  1C4C               	btfss	_nrf24l01,0	;volatile
  3853  05AD  2DB0               	goto	i1l1934
  3854                           
  3855                           ;nrf24l01.c: 146: nrf24l01SetRXMode(1);
  3856  05AE  3001               	movlw	1
  3857  05AF  2474               	fcall	_nrf24l01SetRXMode
  3858  05B0                     i1l1934:	
  3859                           
  3860                           ;nrf24l01.c: 147: }
  3861                           ;nrf24l01.c: 148: }
  3862                           ;nrf24l01.c: 149: }
  3863                           ;nrf24l01.c: 152: if (status.RX_DR){
  3864  05B0  0020               	movlb	0	; select bank0
  3865  05B1  1F21               	btfss	nrf24l01ISR@status,6
  3866  05B2  2DB4               	goto	i1l1938
  3867                           
  3868                           ;nrf24l01.c: 154: nrf24l01HandleRX();
  3869  05B3  2022               	fcall	_nrf24l01HandleRX
  3870  05B4                     i1l1938:	
  3871                           
  3872                           ;nrf24l01.c: 155: }
  3873                           ;nrf24l01.c: 158: nrf24l01Send(0b00100000 | 0x07, status.byte);
  3874  05B4  0020               	movlb	0	; select bank0
  3875  05B5  0821               	movf	nrf24l01ISR@status,w
  3876  05B6  00FD               	movwf	??_nrf24l01ISR
  3877  05B7  087D               	movf	??_nrf24l01ISR,w
  3878  05B8  00A0               	movwf	nrf24l01Send@data
  3879  05B9  3027               	movlw	39
  3880  05BA  25F2               	fcall	_nrf24l01Send
  3881  05BB  0008               	return
  3882  05BC                     __end_of_nrf24l01ISR:	
  3883                           
  3884                           	psect	text18
  3885  0022                     __ptext18:	
  3886 ;; *************** function _nrf24l01HandleRX *****************
  3887 ;; Defined at:
  3888 ;;		line 50 in file "nrf24l01.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;		None
  3891 ;; Auto vars:     Size  Location     Type
  3892 ;;  i               1   12[COMMON] unsigned char 
  3893 ;;  byte            1   11[COMMON] unsigned char 
  3894 ;;  offset          1   10[COMMON] unsigned char 
  3895 ;;  width           1    9[COMMON] unsigned char 
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  1    wreg      void 
  3898 ;; Registers used:
  3899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMMON   BANK0   BANK1
  3905 ;;      Params:         0       0       0
  3906 ;;      Locals:         4       0       0
  3907 ;;      Temps:          3       0       0
  3908 ;;      Totals:         7       0       0
  3909 ;;Total ram usage:        7 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    3
  3912 ;; This function calls:
  3913 ;;		_nrf24l01SPIEnd
  3914 ;;		_nrf24l01SPISend
  3915 ;;		_nrf24l01SPIStart
  3916 ;;		_nrf24l01Send
  3917 ;;		_nrf24l01SetRXMode
  3918 ;;		_strcmp
  3919 ;; This function is called by:
  3920 ;;		_nrf24l01ISR
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           
  3925                           ;psect for function _nrf24l01HandleRX
  3926  0022                     _nrf24l01HandleRX:	
  3927                           
  3928                           ;nrf24l01.c: 53: unsigned char byte;
  3929                           ;nrf24l01.c: 54: unsigned char i;
  3930                           ;nrf24l01.c: 55: unsigned char offset = 0;
  3931                           
  3932                           ;incstack = 0
  3933                           ; Regs used in _nrf24l01HandleRX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3934  0022  01FA               	clrf	nrf24l01HandleRX@offset
  3935                           
  3936                           ;nrf24l01.c: 57: nrf24l01.RXPending = 1;
  3937  0023  0020               	movlb	0	; select bank0
  3938  0024  154C               	bsf	_nrf24l01,2	;volatile
  3939                           
  3940                           ;nrf24l01.c: 59: for (i = 0; i < sizeof(nrf24l01RXTopic); i++){
  3941  0025  01FC               	clrf	nrf24l01HandleRX@i
  3942  0026  3008               	movlw	8
  3943  0027  027C               	subwf	nrf24l01HandleRX@i,w
  3944  0028  1803               	btfsc	3,0
  3945  0029  2837               	goto	i1l1716
  3946  002A                     i1l1710:	
  3947                           
  3948                           ;nrf24l01.c: 60: nrf24l01RXTopic[i] = '\0';
  3949  002A  087C               	movf	nrf24l01HandleRX@i,w
  3950  002B  3E55               	addlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  3951  002C  0086               	movwf	6
  3952  002D  0187               	clrf	7
  3953  002E  0181               	clrf	1
  3954  002F  3001               	movlw	1
  3955  0030  00F6               	movwf	??_nrf24l01HandleRX
  3956  0031  0876               	movf	??_nrf24l01HandleRX,w
  3957  0032  07FC               	addwf	nrf24l01HandleRX@i,f
  3958  0033  3008               	movlw	8
  3959  0034  027C               	subwf	nrf24l01HandleRX@i,w
  3960  0035  1C03               	skipc
  3961  0036  282A               	goto	i1l1710
  3962  0037                     i1l1716:	
  3963                           
  3964                           ;nrf24l01.c: 61: }
  3965                           ;nrf24l01.c: 62: for (i = 0; i < sizeof(nrf24l01RXValue); i++){
  3966  0037  01FC               	clrf	nrf24l01HandleRX@i
  3967  0038  3008               	movlw	8
  3968  0039  027C               	subwf	nrf24l01HandleRX@i,w
  3969  003A  1803               	btfsc	3,0
  3970  003B  2849               	goto	i1l1728
  3971  003C                     i1l1722:	
  3972                           
  3973                           ;nrf24l01.c: 63: nrf24l01RXValue[i] = '\0';
  3974  003C  087C               	movf	nrf24l01HandleRX@i,w
  3975  003D  3E4D               	addlw	(low (_nrf24l01RXValue| 0))& (0+255)
  3976  003E  0086               	movwf	6
  3977  003F  0187               	clrf	7
  3978  0040  0181               	clrf	1
  3979  0041  3001               	movlw	1
  3980  0042  00F6               	movwf	??_nrf24l01HandleRX
  3981  0043  0876               	movf	??_nrf24l01HandleRX,w
  3982  0044  07FC               	addwf	nrf24l01HandleRX@i,f
  3983  0045  3008               	movlw	8
  3984  0046  027C               	subwf	nrf24l01HandleRX@i,w
  3985  0047  1C03               	skipc
  3986  0048  283C               	goto	i1l1722
  3987  0049                     i1l1728:	
  3988                           
  3989                           ;nrf24l01.c: 64: }
  3990                           ;nrf24l01.c: 66: unsigned char width = nrf24l01Send(0b01100000, 0);
  3991  0049  0020               	movlb	0	; select bank0
  3992  004A  01A0               	clrf	nrf24l01Send@data
  3993  004B  3060               	movlw	96
  3994  004C  25F2               	fcall	_nrf24l01Send
  3995  004D  00F6               	movwf	??_nrf24l01HandleRX
  3996  004E  0876               	movf	??_nrf24l01HandleRX,w
  3997  004F  00F9               	movwf	nrf24l01HandleRX@width
  3998                           
  3999                           ;nrf24l01.c: 68: PORTAbits.RA0 = 0;
  4000  0050  0020               	movlb	0	; select bank0
  4001  0051  100C               	bcf	12,0	;volatile
  4002                           
  4003                           ;nrf24l01.c: 70: nrf24l01SPIStart();
  4004  0052  2627               	fcall	_nrf24l01SPIStart
  4005                           
  4006                           ;nrf24l01.c: 72: nrf24l01SPISend(0b01100001);
  4007  0053  3061               	movlw	97
  4008  0054  2613               	fcall	_nrf24l01SPISend
  4009                           
  4010                           ;nrf24l01.c: 74: for (i = 0; (i < sizeof(nrf24l01Name)) && (offset + i < width) ; i++){
  4011  0055  01FC               	clrf	nrf24l01HandleRX@i
  4012  0056  2873               	goto	i1l1746
  4013  0057                     i1l1734:	
  4014                           
  4015                           ;nrf24l01.c: 76: byte = nrf24l01SPISend(0);
  4016  0057  3000               	movlw	0
  4017  0058  2613               	fcall	_nrf24l01SPISend
  4018  0059  00F6               	movwf	??_nrf24l01HandleRX
  4019  005A  0876               	movf	??_nrf24l01HandleRX,w
  4020  005B  00FB               	movwf	nrf24l01HandleRX@byte
  4021                           
  4022                           ;nrf24l01.c: 78: if (byte == '/'){
  4023  005C  302F               	movlw	47
  4024  005D  067B               	xorwf	nrf24l01HandleRX@byte,w
  4025  005E  1D03               	btfss	3,2
  4026  005F  2865               	goto	i1l1740
  4027                           
  4028                           ;nrf24l01.c: 79: offset++;
  4029  0060  3001               	movlw	1
  4030  0061  00F6               	movwf	??_nrf24l01HandleRX
  4031  0062  0876               	movf	??_nrf24l01HandleRX,w
  4032  0063  07FA               	addwf	nrf24l01HandleRX@offset,f
  4033                           
  4034                           ;nrf24l01.c: 80: break;
  4035  0064  2887               	goto	i1l1750
  4036  0065                     i1l1740:	
  4037                           
  4038                           ;nrf24l01.c: 81: }
  4039                           ;nrf24l01.c: 83: if (nrf24l01Name[i] != byte){
  4040  0065  087C               	movf	nrf24l01HandleRX@i,w
  4041  0066  3EA0               	addlw	(low (_nrf24l01Name| 0))& (0+255)
  4042  0067  0086               	movwf	6
  4043  0068  0187               	clrf	7
  4044  0069  0801               	movf	1,w
  4045  006A  067B               	xorwf	nrf24l01HandleRX@byte,w
  4046  006B  1903               	skipnz
  4047  006C  286F               	goto	i1l1744
  4048                           
  4049                           ;nrf24l01.c: 84: nrf24l01.RXPending = 0;
  4050  006D  0020               	movlb	0	; select bank0
  4051  006E  114C               	bcf	_nrf24l01,2	;volatile
  4052  006F                     i1l1744:	
  4053  006F  3001               	movlw	1
  4054  0070  00F6               	movwf	??_nrf24l01HandleRX
  4055  0071  0876               	movf	??_nrf24l01HandleRX,w
  4056  0072  07FC               	addwf	nrf24l01HandleRX@i,f
  4057  0073                     i1l1746:	
  4058  0073  3010               	movlw	16
  4059  0074  027C               	subwf	nrf24l01HandleRX@i,w
  4060  0075  1803               	skipnc
  4061  0076  2887               	goto	i1l1750
  4062  0077  087A               	movf	nrf24l01HandleRX@offset,w
  4063  0078  077C               	addwf	nrf24l01HandleRX@i,w
  4064  0079  00F6               	movwf	??_nrf24l01HandleRX
  4065  007A  01F7               	clrf	??_nrf24l01HandleRX+1
  4066  007B  0DF7               	rlf	??_nrf24l01HandleRX+1,f
  4067  007C  0877               	movf	??_nrf24l01HandleRX+1,w
  4068  007D  3A80               	xorlw	128
  4069  007E  00F8               	movwf	??_nrf24l01HandleRX+2
  4070  007F  3080               	movlw	128
  4071  0080  0278               	subwf	??_nrf24l01HandleRX+2,w
  4072  0081  1D03               	skipz
  4073  0082  2885               	goto	u135_25
  4074  0083  0879               	movf	nrf24l01HandleRX@width,w
  4075  0084  0276               	subwf	??_nrf24l01HandleRX,w
  4076  0085                     u135_25:	
  4077  0085  1C03               	skipc
  4078  0086  2857               	goto	i1l1734
  4079  0087                     i1l1750:	
  4080                           
  4081                           ;nrf24l01.c: 85: }
  4082                           ;nrf24l01.c: 86: }
  4083                           ;nrf24l01.c: 87: offset+= i;
  4084  0087  087C               	movf	nrf24l01HandleRX@i,w
  4085  0088  00F6               	movwf	??_nrf24l01HandleRX
  4086  0089  0876               	movf	??_nrf24l01HandleRX,w
  4087  008A  07FA               	addwf	nrf24l01HandleRX@offset,f
  4088                           
  4089                           ;nrf24l01.c: 89: for (i = 0; (i < sizeof(nrf24l01RXTopic)) && (offset + i < width) ; i++
      +                          ){
  4090  008B  01FC               	clrf	nrf24l01HandleRX@i
  4091  008C  28A7               	goto	i1l1764
  4092  008D                     i1l1754:	
  4093                           
  4094                           ;nrf24l01.c: 91: byte = nrf24l01SPISend(0);
  4095  008D  3000               	movlw	0
  4096  008E  2613               	fcall	_nrf24l01SPISend
  4097  008F  00F6               	movwf	??_nrf24l01HandleRX
  4098  0090  0876               	movf	??_nrf24l01HandleRX,w
  4099  0091  00FB               	movwf	nrf24l01HandleRX@byte
  4100                           
  4101                           ;nrf24l01.c: 92: if (byte == '/'){
  4102  0092  302F               	movlw	47
  4103  0093  067B               	xorwf	nrf24l01HandleRX@byte,w
  4104  0094  1D03               	btfss	3,2
  4105  0095  289B               	goto	i1l1760
  4106                           
  4107                           ;nrf24l01.c: 93: offset++;
  4108  0096  3001               	movlw	1
  4109  0097  00F6               	movwf	??_nrf24l01HandleRX
  4110  0098  0876               	movf	??_nrf24l01HandleRX,w
  4111  0099  07FA               	addwf	nrf24l01HandleRX@offset,f
  4112                           
  4113                           ;nrf24l01.c: 94: break;
  4114  009A  28BB               	goto	i1l1768
  4115  009B                     i1l1760:	
  4116                           
  4117                           ;nrf24l01.c: 95: }
  4118                           ;nrf24l01.c: 97: nrf24l01RXTopic[i] = byte;
  4119  009B  087B               	movf	nrf24l01HandleRX@byte,w
  4120  009C  00F6               	movwf	??_nrf24l01HandleRX
  4121  009D  087C               	movf	nrf24l01HandleRX@i,w
  4122  009E  3E55               	addlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  4123  009F  0086               	movwf	6
  4124  00A0  0187               	clrf	7
  4125  00A1  0876               	movf	??_nrf24l01HandleRX,w
  4126  00A2  0081               	movwf	1
  4127  00A3  3001               	movlw	1
  4128  00A4  00F6               	movwf	??_nrf24l01HandleRX
  4129  00A5  0876               	movf	??_nrf24l01HandleRX,w
  4130  00A6  07FC               	addwf	nrf24l01HandleRX@i,f
  4131  00A7                     i1l1764:	
  4132  00A7  3008               	movlw	8
  4133  00A8  027C               	subwf	nrf24l01HandleRX@i,w
  4134  00A9  1803               	skipnc
  4135  00AA  28BB               	goto	i1l1768
  4136  00AB  087A               	movf	nrf24l01HandleRX@offset,w
  4137  00AC  077C               	addwf	nrf24l01HandleRX@i,w
  4138  00AD  00F6               	movwf	??_nrf24l01HandleRX
  4139  00AE  01F7               	clrf	??_nrf24l01HandleRX+1
  4140  00AF  0DF7               	rlf	??_nrf24l01HandleRX+1,f
  4141  00B0  0877               	movf	??_nrf24l01HandleRX+1,w
  4142  00B1  3A80               	xorlw	128
  4143  00B2  00F8               	movwf	??_nrf24l01HandleRX+2
  4144  00B3  3080               	movlw	128
  4145  00B4  0278               	subwf	??_nrf24l01HandleRX+2,w
  4146  00B5  1D03               	skipz
  4147  00B6  28B9               	goto	u138_25
  4148  00B7  0879               	movf	nrf24l01HandleRX@width,w
  4149  00B8  0276               	subwf	??_nrf24l01HandleRX,w
  4150  00B9                     u138_25:	
  4151  00B9  1C03               	skipc
  4152  00BA  288D               	goto	i1l1754
  4153  00BB                     i1l1768:	
  4154                           
  4155                           ;nrf24l01.c: 98: }
  4156                           ;nrf24l01.c: 99: offset+= i;
  4157  00BB  087C               	movf	nrf24l01HandleRX@i,w
  4158  00BC  00F6               	movwf	??_nrf24l01HandleRX
  4159  00BD  0876               	movf	??_nrf24l01HandleRX,w
  4160  00BE  07FA               	addwf	nrf24l01HandleRX@offset,f
  4161                           
  4162                           ;nrf24l01.c: 102: for (i = 0; (i < sizeof(nrf24l01RXValue)) && (offset + i < width) ; i+
      +                          +){
  4163  00BF  01FC               	clrf	nrf24l01HandleRX@i
  4164  00C0  28CE               	goto	i1l1776
  4165  00C1                     i1l1772:	
  4166                           
  4167                           ;nrf24l01.c: 103: nrf24l01RXValue[i] = nrf24l01SPISend(0);
  4168  00C1  3000               	movlw	0
  4169  00C2  2613               	fcall	_nrf24l01SPISend
  4170  00C3  00F6               	movwf	??_nrf24l01HandleRX
  4171  00C4  087C               	movf	nrf24l01HandleRX@i,w
  4172  00C5  3E4D               	addlw	(low (_nrf24l01RXValue| 0))& (0+255)
  4173  00C6  0086               	movwf	6
  4174  00C7  0187               	clrf	7
  4175  00C8  0876               	movf	??_nrf24l01HandleRX,w
  4176  00C9  0081               	movwf	1
  4177  00CA  3001               	movlw	1
  4178  00CB  00F6               	movwf	??_nrf24l01HandleRX
  4179  00CC  0876               	movf	??_nrf24l01HandleRX,w
  4180  00CD  07FC               	addwf	nrf24l01HandleRX@i,f
  4181  00CE                     i1l1776:	
  4182  00CE  3008               	movlw	8
  4183  00CF  027C               	subwf	nrf24l01HandleRX@i,w
  4184  00D0  1803               	skipnc
  4185  00D1  28E2               	goto	i1l1780
  4186  00D2  087A               	movf	nrf24l01HandleRX@offset,w
  4187  00D3  077C               	addwf	nrf24l01HandleRX@i,w
  4188  00D4  00F6               	movwf	??_nrf24l01HandleRX
  4189  00D5  01F7               	clrf	??_nrf24l01HandleRX+1
  4190  00D6  0DF7               	rlf	??_nrf24l01HandleRX+1,f
  4191  00D7  0877               	movf	??_nrf24l01HandleRX+1,w
  4192  00D8  3A80               	xorlw	128
  4193  00D9  00F8               	movwf	??_nrf24l01HandleRX+2
  4194  00DA  3080               	movlw	128
  4195  00DB  0278               	subwf	??_nrf24l01HandleRX+2,w
  4196  00DC  1D03               	skipz
  4197  00DD  28E0               	goto	u140_25
  4198  00DE  0879               	movf	nrf24l01HandleRX@width,w
  4199  00DF  0276               	subwf	??_nrf24l01HandleRX,w
  4200  00E0                     u140_25:	
  4201  00E0  1C03               	skipc
  4202  00E1  28C1               	goto	i1l1772
  4203  00E2                     i1l1780:	
  4204                           
  4205                           ;nrf24l01.c: 104: }
  4206                           ;nrf24l01.c: 106: nrf24l01SPIEnd();
  4207  00E2  262E               	fcall	_nrf24l01SPIEnd
  4208                           
  4209                           ;nrf24l01.c: 108: if (nrf24l01.waitForTXACK){
  4210  00E3  0020               	movlb	0	; select bank0
  4211  00E4  1C4C               	btfss	_nrf24l01,0	;volatile
  4212  00E5  0008               	return
  4213                           
  4214                           ;nrf24l01.c: 109: if (strcmp(nrf24l01RXTopic, nrf24l01TXTopic) == 0){
  4215  00E6  3065               	movlw	low _nrf24l01TXTopic
  4216  00E7  00F0               	movwf	strcmp@s2
  4217  00E8  3000               	movlw	high _nrf24l01TXTopic
  4218  00E9  00F1               	movwf	strcmp@s2+1
  4219  00EA  3055               	movlw	(low (_nrf24l01RXTopic| 0))& (0+255)
  4220  00EB  2571               	fcall	_strcmp
  4221  00EC  0870               	movf	?_strcmp,w
  4222  00ED  0471               	iorwf	?_strcmp+1,w
  4223  00EE  1D03               	btfss	3,2
  4224  00EF  0008               	return
  4225                           
  4226                           ;nrf24l01.c: 110: if (strcmp(nrf24l01RXValue, "ACK") == 0){
  4227  00F0  3062               	movlw	low (STR_7| (0+32768))
  4228  00F1  00F0               	movwf	strcmp@s2
  4229  00F2  3086               	movlw	high (STR_7| (0+32768))
  4230  00F3  00F1               	movwf	strcmp@s2+1
  4231  00F4  304D               	movlw	(low (_nrf24l01RXValue| 0))& (0+255)
  4232  00F5  2571               	fcall	_strcmp
  4233  00F6  0870               	movf	?_strcmp,w
  4234  00F7  0471               	iorwf	?_strcmp+1,w
  4235  00F8  1D03               	btfss	3,2
  4236  00F9  0008               	return
  4237                           
  4238                           ;nrf24l01.c: 111: nrf24l01.waitForTXACK = 0;
  4239  00FA  0020               	movlb	0	; select bank0
  4240  00FB  104C               	bcf	_nrf24l01,0	;volatile
  4241                           
  4242                           ;nrf24l01.c: 112: nrf24l01.RXPending = 0;
  4243  00FC  114C               	bcf	_nrf24l01,2	;volatile
  4244                           
  4245                           ;nrf24l01.c: 113: nrf24l01SetRXMode(0);
  4246  00FD  3000               	movlw	0
  4247  00FE  2474               	fcall	_nrf24l01SetRXMode
  4248  00FF  0008               	return
  4249  0100                     __end_of_nrf24l01HandleRX:	
  4250                           
  4251                           	psect	text19
  4252  0571                     __ptext19:	
  4253 ;; *************** function _strcmp *****************
  4254 ;; Defined at:
  4255 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;  s1              1    wreg     PTR const unsigned char 
  4258 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), 
  4259 ;;  s2              2    0[COMMON] PTR const unsigned char 
  4260 ;;		 -> STR_7(4), nrf24l01TXTopic(8), 
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  s1              1    4[COMMON] PTR const unsigned char 
  4263 ;;		 -> nrf24l01RXValue(8), nrf24l01RXTopic(8), 
  4264 ;;  r               1    3[COMMON] char 
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  2    0[COMMON] int 
  4267 ;; Registers used:
  4268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMMON   BANK0   BANK1
  4274 ;;      Params:         2       0       0
  4275 ;;      Locals:         2       0       0
  4276 ;;      Temps:          1       0       0
  4277 ;;      Totals:         5       0       0
  4278 ;;Total ram usage:        5 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; This function calls:
  4281 ;;		Nothing
  4282 ;; This function is called by:
  4283 ;;		_nrf24l01HandleRX
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           
  4288                           ;psect for function _strcmp
  4289  0571                     _strcmp:	
  4290                           
  4291                           ;incstack = 0
  4292                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  4293                           ;strcmp@s1 stored from wreg
  4294  0571  00F4               	movwf	strcmp@s1
  4295  0572  2D7B               	goto	i1l1472
  4296  0573                     i1l1470:	
  4297  0573  3001               	movlw	1
  4298  0574  00F2               	movwf	??_strcmp
  4299  0575  0872               	movf	??_strcmp,w
  4300  0576  07F4               	addwf	strcmp@s1,f
  4301  0577  3001               	movlw	1
  4302  0578  07F0               	addwf	strcmp@s2,f
  4303  0579  3000               	movlw	0
  4304  057A  3DF1               	addwfc	strcmp@s2+1,f
  4305  057B                     i1l1472:	
  4306  057B  0874               	movf	strcmp@s1,w
  4307  057C  0086               	movwf	6
  4308  057D  0187               	clrf	7
  4309  057E  0870               	movf	strcmp@s2,w
  4310  057F  0084               	movwf	4
  4311  0580  0871               	movf	strcmp@s2+1,w
  4312  0581  0085               	movwf	5
  4313  0582  0800               	movf	0,w	;code access
  4314  0583  3AFF               	xorlw	255
  4315  0584  3E01               	addlw	1
  4316  0585  0701               	addwf	1,w
  4317  0586  00F2               	movwf	??_strcmp
  4318  0587  0872               	movf	??_strcmp,w
  4319  0588  00F3               	movwf	strcmp@r
  4320  0589  0873               	movf	strcmp@r,w
  4321  058A  1D03               	btfss	3,2
  4322  058B  2D92               	goto	i1l1476
  4323  058C  0874               	movf	strcmp@s1,w
  4324  058D  0086               	movwf	6
  4325  058E  0187               	clrf	7
  4326  058F  0801               	movf	1,w
  4327  0590  1D03               	btfss	3,2
  4328  0591  2D73               	goto	i1l1470
  4329  0592                     i1l1476:	
  4330  0592  0873               	movf	strcmp@r,w
  4331  0593  00F0               	movwf	?_strcmp
  4332  0594  01F1               	clrf	?_strcmp+1
  4333  0595  1BF0               	btfsc	?_strcmp,7
  4334  0596  03F1               	decf	?_strcmp+1,f
  4335  0597  0008               	return
  4336  0598                     __end_of_strcmp:	
  4337                           
  4338                           	psect	text20
  4339  0474                     __ptext20:	
  4340 ;; *************** function _nrf24l01SetRXMode *****************
  4341 ;; Defined at:
  4342 ;;		line 27 in file "nrf24l01.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;  rxMode          1    wreg     unsigned char 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  rxMode          1    4[COMMON] unsigned char 
  4347 ;;  config          1    5[COMMON] struct .
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  1    wreg      void 
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0, pclath, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMMON   BANK0   BANK1
  4357 ;;      Params:         0       0       0
  4358 ;;      Locals:         0       0       0
  4359 ;;      Temps:          0       0       0
  4360 ;;      Totals:         0       0       0
  4361 ;;Total ram usage:        0 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    8
  4364 ;; This function calls:
  4365 ;;		_nrf24l01Send
  4366 ;; This function is called by:
  4367 ;;		_checkRxData
  4368 ;;		_nrf24l01HandleRX
  4369 ;;		_nrf24l01ISR
  4370 ;;		_nrf24l01SendString
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           
  4375                           ;psect for function _nrf24l01SetRXMode
  4376  0474                     _nrf24l01SetRXMode:	
  4377                           
  4378                           ;incstack = 0
  4379                           ; Regs used in _nrf24l01SetRXMode: [wreg+status,2+status,0+pclath+cstack]
  4380                           ;nrf24l01SetRXMode@rxMode stored from wreg
  4381  0474  00F4               	movwf	nrf24l01SetRXMode@rxMode
  4382                           
  4383                           ;nrf24l01.c: 28: n_CONFIG_t config;
  4384                           ;nrf24l01.c: 29: config.byte = nrf24l01Send(0b00000000 | 0x00, 0);
  4385  0475  0020               	movlb	0	; select bank0
  4386  0476  01A0               	clrf	nrf24l01Send@data
  4387  0477  3000               	movlw	0
  4388  0478  25F2               	fcall	_nrf24l01Send
  4389  0479  00F3               	movwf	??_nrf24l01SetRXMode
  4390  047A  0873               	movf	??_nrf24l01SetRXMode,w
  4391  047B  00F5               	movwf	nrf24l01SetRXMode@config
  4392                           
  4393                           ;nrf24l01.c: 31: nrf24l01.RXMode = rxMode;
  4394  047C  0874               	movf	nrf24l01SetRXMode@rxMode,w
  4395  047D  3901               	andlw	1
  4396  047E  0020               	movlb	0	; select bank0
  4397  047F  11CC               	bcf	_nrf24l01,3	;volatile
  4398  0480  1D03               	skipz
  4399  0481  15CC               	bsf	_nrf24l01,3	;volatile
  4400                           
  4401                           ;nrf24l01.c: 33: if (config.PRIM_RX != nrf24l01.RXMode){
  4402  0482  1DCC               	btfss	_nrf24l01,3	;volatile
  4403  0483  2C86               	goto	u80_20
  4404  0484  3001               	movlw	1
  4405  0485  2C87               	goto	u80_22
  4406  0486                     u80_20:	
  4407  0486  3000               	movlw	0
  4408  0487                     u80_22:	
  4409  0487  00F3               	movwf	??_nrf24l01SetRXMode
  4410  0488  1C75               	btfss	nrf24l01SetRXMode@config,0
  4411  0489  2C8C               	goto	u81_20
  4412  048A  3001               	movlw	1
  4413  048B  2C8D               	goto	u81_22
  4414  048C                     u81_20:	
  4415  048C  3000               	movlw	0
  4416  048D                     u81_22:	
  4417  048D  0673               	xorwf	??_nrf24l01SetRXMode,w
  4418  048E  1903               	skipnz
  4419  048F  0008               	return
  4420                           
  4421                           ;nrf24l01.c: 35: PORTAbits.RA0 = 0;
  4422  0490  100C               	bcf	12,0	;volatile
  4423                           
  4424                           ;nrf24l01.c: 36: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4425  0491  30A0               	movlw	160
  4426  0492                     u163_27:	
  4427  0492  3200               	nop2
  4428  0493  0B89               	decfsz	9,f
  4429  0494  2C92               	goto	u163_27
  4430                           
  4431                           ;nrf24l01.c: 38: config.PRIM_RX = nrf24l01.RXMode;
  4432  0495  1075               	bcf	nrf24l01SetRXMode@config,0
  4433  0496  0020               	movlb	0	; select bank0
  4434  0497  19CC               	btfsc	_nrf24l01,3	;volatile
  4435  0498  1475               	bsf	nrf24l01SetRXMode@config,0
  4436                           
  4437                           ;nrf24l01.c: 39: nrf24l01Send(0b00100000 | 0x00, config.byte);
  4438  0499  0875               	movf	nrf24l01SetRXMode@config,w
  4439  049A  00F3               	movwf	??_nrf24l01SetRXMode
  4440  049B  0873               	movf	??_nrf24l01SetRXMode,w
  4441  049C  0020               	movlb	0	; select bank0
  4442  049D  00A0               	movwf	nrf24l01Send@data
  4443  049E  3020               	movlw	32
  4444  049F  25F2               	fcall	_nrf24l01Send
  4445                           
  4446                           ;nrf24l01.c: 40: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4447  04A0  30A0               	movlw	160
  4448  04A1                     u164_27:	
  4449  04A1  3200               	nop2
  4450  04A2  0B89               	decfsz	9,f
  4451  04A3  2CA1               	goto	u164_27
  4452                           
  4453                           ;nrf24l01.c: 42: if (nrf24l01.RXMode){
  4454  04A4  0020               	movlb	0	; select bank0
  4455  04A5  1DCC               	btfss	_nrf24l01,3	;volatile
  4456  04A6  0008               	return
  4457                           
  4458                           ;nrf24l01.c: 43: PORTAbits.RA0 = 1;
  4459  04A7  140C               	bsf	12,0	;volatile
  4460                           
  4461                           ;nrf24l01.c: 44: _delay((unsigned long)((200)*(16000000/4000000.0)));
  4462  04A8  30A0               	movlw	160
  4463  04A9                     u165_27:	
  4464  04A9  3200               	nop2
  4465  04AA  0B89               	decfsz	9,f
  4466  04AB  2CA9               	goto	u165_27
  4467  04AC  0008               	return
  4468  04AD                     __end_of_nrf24l01SetRXMode:	
  4469                           
  4470                           	psect	text21
  4471  05F2                     __ptext21:	
  4472 ;; *************** function _nrf24l01Send *****************
  4473 ;; Defined at:
  4474 ;;		line 10 in file "nrf24l01.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  command         1    wreg     unsigned char 
  4477 ;;  data            1    0[BANK0 ] unsigned char 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;  command         1    2[COMMON] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  1    wreg      unsigned char 
  4482 ;; Registers used:
  4483 ;;		wreg, status,2, status,0, pclath, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1
  4489 ;;      Params:         0       0       0
  4490 ;;      Locals:         0       0       0
  4491 ;;      Temps:          0       0       0
  4492 ;;      Totals:         0       0       0
  4493 ;;Total ram usage:        0 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    7
  4496 ;; This function calls:
  4497 ;;		_enableInterrupts
  4498 ;;		_nrf24l01SPIEnd
  4499 ;;		_nrf24l01SPISend
  4500 ;;		_nrf24l01SPIStart
  4501 ;; This function is called by:
  4502 ;;		_nrf24l01SetRXMode
  4503 ;;		_nrf24l01HandleRX
  4504 ;;		_nrf24l01ISR
  4505 ;;		_nrf24l01InitRegisters
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           
  4510                           ;psect for function _nrf24l01Send
  4511  05F2                     _nrf24l01Send:	
  4512                           
  4513                           ;incstack = 0
  4514                           ; Regs used in _nrf24l01Send: [wreg+status,2+status,0+pclath+cstack]
  4515                           ;nrf24l01Send@command stored from wreg
  4516  05F2  00F2               	movwf	nrf24l01Send@command
  4517                           
  4518                           ;nrf24l01.c: 12: enableInterrupts(0);
  4519  05F3  3000               	movlw	0
  4520  05F4  2635               	fcall	_enableInterrupts
  4521                           
  4522                           ;nrf24l01.c: 14: nrf24l01SPIStart();
  4523  05F5  2627               	fcall	_nrf24l01SPIStart
  4524                           
  4525                           ;nrf24l01.c: 16: nrf24l01SPISend(command);
  4526  05F6  0872               	movf	nrf24l01Send@command,w
  4527  05F7  2613               	fcall	_nrf24l01SPISend
  4528                           
  4529                           ;nrf24l01.c: 17: data = nrf24l01SPISend(data);
  4530  05F8  0020               	movlb	0	; select bank0
  4531  05F9  0820               	movf	nrf24l01Send@data,w
  4532  05FA  2613               	fcall	_nrf24l01SPISend
  4533  05FB  00F1               	movwf	??_nrf24l01Send
  4534  05FC  0871               	movf	??_nrf24l01Send,w
  4535  05FD  0020               	movlb	0	; select bank0
  4536  05FE  00A0               	movwf	nrf24l01Send@data
  4537                           
  4538                           ;nrf24l01.c: 19: nrf24l01SPIEnd();
  4539  05FF  262E               	fcall	_nrf24l01SPIEnd
  4540                           
  4541                           ;nrf24l01.c: 21: enableInterrupts(1);
  4542  0600  3001               	movlw	1
  4543  0601  2635               	fcall	_enableInterrupts
  4544                           
  4545                           ;nrf24l01.c: 23: return data;
  4546  0602  0020               	movlb	0	; select bank0
  4547  0603  0820               	movf	nrf24l01Send@data,w
  4548  0604  0008               	return
  4549  0605                     __end_of_nrf24l01Send:	
  4550                           
  4551                           	psect	text22
  4552  0627                     __ptext22:	
  4553 ;; *************** function _nrf24l01SPIStart *****************
  4554 ;; Defined at:
  4555 ;;		line 37 in file "interface.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;		None
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;		None
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  1    wreg      void 
  4562 ;; Registers used:
  4563 ;;		wreg
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMMON   BANK0   BANK1
  4569 ;;      Params:         0       0       0
  4570 ;;      Locals:         0       0       0
  4571 ;;      Temps:          0       0       0
  4572 ;;      Totals:         0       0       0
  4573 ;;Total ram usage:        0 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:    6
  4576 ;; This function calls:
  4577 ;;		Nothing
  4578 ;; This function is called by:
  4579 ;;		_nrf24l01Send
  4580 ;;		_nrf24l01HandleRX
  4581 ;;		_nrf24l01SendString
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           
  4586                           ;psect for function _nrf24l01SPIStart
  4587  0627                     _nrf24l01SPIStart:	
  4588                           
  4589                           ;interface.c: 38: PORTAbits.RA1 = 0;
  4590                           
  4591                           ;incstack = 0
  4592                           ; Regs used in _nrf24l01SPIStart: [wreg]
  4593  0627  0020               	movlb	0	; select bank0
  4594  0628  108C               	bcf	12,1	;volatile
  4595                           
  4596                           ;interface.c: 39: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4597  0629  300D               	movlw	13
  4598  062A                     u166_27:	
  4599  062A  0B89               	decfsz	9,f
  4600  062B  2E2A               	goto	u166_27
  4601  062C  0000               	nop
  4602  062D  0008               	return
  4603  062E                     __end_of_nrf24l01SPIStart:	
  4604                           
  4605                           	psect	text23
  4606  0613                     __ptext23:	
  4607 ;; *************** function _nrf24l01SPISend *****************
  4608 ;; Defined at:
  4609 ;;		line 26 in file "interface.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  data            1    wreg     unsigned char 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  data            1    0[COMMON] unsigned char 
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      unsigned char 
  4616 ;; Registers used:
  4617 ;;		wreg
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMMON   BANK0   BANK1
  4623 ;;      Params:         0       0       0
  4624 ;;      Locals:         0       0       0
  4625 ;;      Temps:          0       0       0
  4626 ;;      Totals:         0       0       0
  4627 ;;Total ram usage:        0 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    6
  4630 ;; This function calls:
  4631 ;;		Nothing
  4632 ;; This function is called by:
  4633 ;;		_nrf24l01Send
  4634 ;;		_nrf24l01HandleRX
  4635 ;;		_nrf24l01SendString
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           
  4640                           ;psect for function _nrf24l01SPISend
  4641  0613                     _nrf24l01SPISend:	
  4642                           
  4643                           ;incstack = 0
  4644                           ; Regs used in _nrf24l01SPISend: [wreg]
  4645                           ;nrf24l01SPISend@data stored from wreg
  4646  0613  00F0               	movwf	nrf24l01SPISend@data
  4647                           
  4648                           ;interface.c: 27: SSP1BUF = data;
  4649  0614  0870               	movf	nrf24l01SPISend@data,w
  4650  0615  0024               	movlb	4	; select bank4
  4651  0616  0091               	movwf	17	;volatile
  4652  0617                     i1l50:	
  4653                           ;interface.c: 29: while (!SSP1STATbits.BF){
  4654                           
  4655  0617  0024               	movlb	4	; select bank4
  4656  0618  1814               	btfsc	20,0	;volatile
  4657  0619  2E1C               	goto	i1l1416
  4658                           
  4659                           ;interface.c: 30: __nop();
  4660  061A  0000               	nop
  4661  061B  2E17               	goto	i1l50
  4662  061C                     i1l1416:	
  4663                           
  4664                           ;interface.c: 31: }
  4665                           ;interface.c: 33: return SSP1BUF;
  4666  061C  0811               	movf	17,w	;volatile
  4667  061D  0008               	return
  4668  061E                     __end_of_nrf24l01SPISend:	
  4669                           
  4670                           	psect	text24
  4671  062E                     __ptext24:	
  4672 ;; *************** function _nrf24l01SPIEnd *****************
  4673 ;; Defined at:
  4674 ;;		line 43 in file "interface.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;		None
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;		None
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  1    wreg      void 
  4681 ;; Registers used:
  4682 ;;		wreg
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMMON   BANK0   BANK1
  4688 ;;      Params:         0       0       0
  4689 ;;      Locals:         0       0       0
  4690 ;;      Temps:          0       0       0
  4691 ;;      Totals:         0       0       0
  4692 ;;Total ram usage:        0 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    6
  4695 ;; This function calls:
  4696 ;;		Nothing
  4697 ;; This function is called by:
  4698 ;;		_nrf24l01Send
  4699 ;;		_nrf24l01HandleRX
  4700 ;;		_nrf24l01SendString
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           
  4705                           ;psect for function _nrf24l01SPIEnd
  4706  062E                     _nrf24l01SPIEnd:	
  4707                           
  4708                           ;interface.c: 44: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4709                           
  4710                           ;incstack = 0
  4711                           ; Regs used in _nrf24l01SPIEnd: [wreg]
  4712  062E  300D               	movlw	13
  4713  062F                     u167_27:	
  4714  062F  0B89               	decfsz	9,f
  4715  0630  2E2F               	goto	u167_27
  4716  0631  0000               	nop
  4717                           
  4718                           ;interface.c: 45: PORTAbits.RA1 = 1;
  4719  0632  0020               	movlb	0	; select bank0
  4720  0633  148C               	bsf	12,1	;volatile
  4721  0634  0008               	return
  4722  0635                     __end_of_nrf24l01SPIEnd:	
  4723                           
  4724                           	psect	text25
  4725  0635                     __ptext25:	
  4726 ;; *************** function _enableInterrupts *****************
  4727 ;; Defined at:
  4728 ;;		line 49 in file "interface.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;  enable          1    wreg     unsigned char 
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  enable          1    0[COMMON] unsigned char 
  4733 ;; Return value:  Size  Location     Type
  4734 ;;                  1    wreg      void 
  4735 ;; Registers used:
  4736 ;;		wreg, status,0
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMMON   BANK0   BANK1
  4742 ;;      Params:         0       0       0
  4743 ;;      Locals:         0       0       0
  4744 ;;      Temps:          0       0       0
  4745 ;;      Totals:         0       0       0
  4746 ;;Total ram usage:        0 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:    6
  4749 ;; This function calls:
  4750 ;;		Nothing
  4751 ;; This function is called by:
  4752 ;;		_nrf24l01Send
  4753 ;;		_nrf24l01SendString
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           
  4758                           ;psect for function _enableInterrupts
  4759  0635                     _enableInterrupts:	
  4760                           
  4761                           ;incstack = 0
  4762                           ; Regs used in _enableInterrupts: [wreg+status,0]
  4763                           ;enableInterrupts@enable stored from wreg
  4764  0635  00F0               	movwf	enableInterrupts@enable
  4765                           
  4766                           ;interface.c: 50: INTCONbits.INTE = enable;
  4767  0636  0C70               	rrf	enableInterrupts@enable,w
  4768  0637  1C03               	skipc
  4769  0638  120B               	bcf	11,4	;volatile
  4770  0639  1803               	skipnc
  4771  063A  160B               	bsf	11,4	;volatile
  4772  063B  0008               	return
  4773  063C                     __end_of_enableInterrupts:	
  4774  007E                     btemp	set	126	;btemp
  4775  007E                     int$flags	set	126
  4776  007E                     wtemp0	set	126


Data Sizes:
    Strings     35
    Constant    6
    Data        0
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     41      77
    BANK1            32      3      19

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[5]), STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXTopic(BANK0[8]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXTopic(BANK0[8]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[4]), nrf24l01TXTopic(BANK0[8]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 8
		 -> nrf24l01RXValue(BANK0[8]), nrf24l01RXTopic(BANK0[8]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXValue(BANK0[8]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 8
		 -> nrf24l01TXTopic(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_nrf24l01ISR
    _nrf24l01ISR->_nrf24l01HandleRX

Critical Paths under _main in BANK0

    _main->_utoa
    _nrf24l01Init->_nrf24l01InitRegisters
    _loop->_utoa
    _utoa->_getADCValue
    _getADCValue->___lldiv

Critical Paths under _ISR in BANK0

    _ISR->_nrf24l01ISR

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   13085
                                             40 BANK0      1     1      0
                                              0 BANK1      3     3      0
                               _loop
                       _nrf24l01Init
                 _nrf24l01SendString
                      _read_flashmem
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _read_flashmem                                        9     7      2     220
                                              3 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01Init                                         2     2      0    1562
                                             12 BANK0      2     2      0
              _nrf24l01InitRegisters
              _nrf24l01InterfaceInit
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InterfaceInit                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nrf24l01InitRegisters                                9     9      0    1562
                                              3 BANK0      9     9      0
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0    6736
                        _checkRxData
                        _getADCValue
                 _nrf24l01SendString
                              _sleep
                             _strcpy
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _utoa                                                 9     5      4    2087
                                             31 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
                        _getADCValue (ARG)
                      _read_flashmem (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              3 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              3 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     639
                                              3 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nrf24l01SendString                                   3     3      0    1711
                                              3 BANK0      3     3      0
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (2) _getADCValue                                         14    10      4     904
                                             17 BANK0     14    10      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     220
                                              3 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              3 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _checkRxData                                          0     0      0    1395
                  _nrf24l01SetRXMode
                              _sleep
 ---------------------------------------------------------------------------------
 (1) _sleep                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _nrf24l01SetRXMode                                    3     3      0    1395
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (9) _nrf24l01Send                                         3     2      1    1327
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  1     1      0    6468
                                              2 BANK0      1     1      0
                        _nrf24l01ISR
 ---------------------------------------------------------------------------------
 (7) _nrf24l01ISR                                          2     2      0    6468
                                             13 COMMON     1     1      0
                                              1 BANK0      1     1      0
                   _nrf24l01HandleRX
                       _nrf24l01Send
                  _nrf24l01SetRXMode
 ---------------------------------------------------------------------------------
 (8) _nrf24l01HandleRX                                     7     7      0    3635
                                              6 COMMON     7     7      0
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
                       _nrf24l01Send
                  _nrf24l01SetRXMode
                             _strcmp
 ---------------------------------------------------------------------------------
 (9) _strcmp                                               5     3      2     279
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (8) _nrf24l01SetRXMode                                    3     3      0    1395
                       _nrf24l01Send
 ---------------------------------------------------------------------------------
 (9) _nrf24l01Send                                         3     2      1    1327
                   _enableInterrupts
                     _nrf24l01SPIEnd
                    _nrf24l01SPISend
                   _nrf24l01SPIStart
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIStart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPISend                                     1     1      0      22
 ---------------------------------------------------------------------------------
 (10) _nrf24l01SPIEnd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _enableInterrupts                                    1     1      0      22
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     _checkRxData
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _sleep
     _getADCValue
       ___lldiv
       ___lmul
     _nrf24l01SendString
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
     _sleep
     _strcpy
     _utoa
       ___lwdiv
       ___lwmod
       _getADCValue (ARG)
         ___lldiv
         ___lmul
       _read_flashmem (ARG)
   _nrf24l01Init
     _nrf24l01InitRegisters
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
     _nrf24l01InterfaceInit
   _nrf24l01SendString
     _enableInterrupts
     _nrf24l01SPIEnd
     _nrf24l01SPISend
     _nrf24l01SPIStart
     _nrf24l01SetRXMode
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
   _read_flashmem
   _sleep
   _strcpy
   _utoa
     ___lwdiv
     ___lwmod
     _getADCValue (ARG)
       ___lldiv
       ___lmul
     _read_flashmem (ARG)

 _ISR (ROOT)
   _nrf24l01ISR
     _nrf24l01HandleRX
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart
       _nrf24l01SetRXMode
         _nrf24l01Send
           _enableInterrupts
           _nrf24l01SPIEnd
           _nrf24l01SPISend
           _nrf24l01SPIStart
       _strcmp
     _nrf24l01Send
       _enableInterrupts
       _nrf24l01SPIEnd
       _nrf24l01SPISend
       _nrf24l01SPIStart
     _nrf24l01SetRXMode
       _nrf24l01Send
         _enableInterrupts
         _nrf24l01SPIEnd
         _nrf24l01SPISend
         _nrf24l01SPIStart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      3      13       8       59.4%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      6E       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jun 19 20:55:38 2018

                   __CFG_CP$OFF 0000             nrf24l01Send@command 0072                     __CFG_LVP$ON 0000  
                           l156 061E                             l149 0365                             l173 02F6  
                           l262 01A8                             l266 01BC                             l563 040B  
                           _ISR 0004                             u925 0435                             u945 0441  
                           u955 0455                             u965 0461                             u885 0528  
                           u895 052F                             u995 04B9    nrf24l01SendString@waitForAck 0024  
                  __CFG_BORV$LO 0000                             wreg 0009                            ?_ISR 0070  
                ??_nrf24l01Init 002C                            l1500 0432                            l2140 033E  
                          l1510 0460                            l1502 0440                            l1514 046B  
                          l1602 05DD                            l1530 04C2                            l1700 0223  
                          l1540 04DD                            l1606 03CB                            l2086 02D5  
                          l1536 04D4                            l1528 04B6                            l1552 054B  
                          l1616 03E7                            l1482 051D                            l1554 0557  
                          l1562 056C                            l1580 035E                            l1660 01DD  
                          l1652 01C7                            l1486 0527                            l1582 0388  
                          l1646 01B0                            l1558 0563                            l1680 0208  
                          l1672 01F8                            l1664 01E2                            l1656 01D2  
                ??_nrf24l01Send 0071                            l1578 036A                            l1684 0213  
                          l1676 01FD                            l1668 01ED                            STR_1 0666  
                  __CFG_WDTE$ON 0000                            STR_2 0653                            STR_3 0658  
                          STR_4 0642                            STR_5 063C                            STR_6 065D  
                          STR_7 0662                            u1015 04C3                            u1025 04CD  
                          u1035 04D5                            u1065 054E                            u1085 055D  
                          u1095 0564                            u1607 0217                            u1617 022B  
                          u1627 035B                            u1557 02C9                            u1567 05C5  
                          u1577 05D1                            u1587 023B                            u1597 01B8  
                          i1l50 0617  __size_of_nrf24l01InterfaceInit 000E                    __CFG_WRT$OFF 0000  
 __end_of_nrf24l01InterfaceInit 0613                   __p_NVMEM_text 07E0                            _main 02B9  
                          _loop 0100                            fsr0h 0005                            fsr1h 0007  
                          indf0 0000                            fsr0l 0004                            indf1 0001  
                          fsr1l 0006                            btemp 007E                            _utoa 03C5  
                          start 0012                   __CFG_MCLRE$ON 0000                           ??_ISR 0022  
           nrf24l01SendString@i 0025            __size_of_getADCValue 0085     __size_of_nrf24l01SendString 0096  
                         ?_main 0070                           ?_loop 0070                 __end_of___lldiv 0474  
                         ?_utoa 003F                 __end_of___lwdiv 04E2                           i1l144 000D  
               __end_of___lwmod 0571                           _NVMEM 07E0                           u80_20 0486  
                         u80_22 0487                           u81_20 048C                           u81_22 048D  
        enableInterrupts@enable 0070            __size_of_checkRxData 0004             ___lmul@multiplicand 0027  
                 __CFG_PWRTE$ON 0000                           _sleep 061E                           main@i 0048  
                __CFG_BOREN$OFF 0000                _enableInterrupts 0635                           utoa@c 0046  
                         utoa@v 0044                           status 0003                           wtemp0 007E  
             getADCValue@adcSum 003B                _nrf24l01SPIStart 0627                 __initialization 0013  
                  __end_of_main 0340                    __end_of_loop 0199                    __end_of_utoa 0421  
                __CFG_LPBOR$OFF 0000                _nrf24l01HandleRX 0022                          ??_main 00B0  
                        ??_loop 0048                          ??_utoa 0043                ??_nrf24l01SPIEnd 0070  
        nrf24l01HandleRX@offset 007A        __size_of_nrf24l01SPISend 000B                          _ADRESH 009C  
                        _ADRESL 009B                          ?_sleep 0070                          _ANSELA 018C  
                        _ANSELC 018E                          i1l1416 061C                          i1l1470 0573  
                        i1l1710 002A                          i1l1472 057B                          i1l1722 003C  
                        i1l1476 0592                          i1l1740 0065                          i1l1716 0037  
                        i1l1750 0087                          i1l1734 0057                          i1l1760 009B  
                        i1l1744 006F                          i1l1728 0049                          i1l1754 008D  
                        i1l1746 0073                          i1l1780 00E2                          i1l1772 00C1  
                        i1l1764 00A7                          i1l1934 05B0                          i1l1776 00CE  
                        i1l1768 00BB                          i1l1938 05B4                          u140_25 00E0  
                        u135_25 0085                          u138_25 00B9                          u163_27 0492  
                        u164_27 04A1                          u165_27 04A9                          u166_27 062A  
                        u167_27 062F                          _PMADRH 0192                          _PMADRL 0191  
                        _PMDATH 0194                          _PMDATL 0193                          _PMCON1 0195  
                        _PMCON2 0196            __size_of_nrf24l01ISR 0024         nrf24l01SetRXMode@config 0075  
                        ___lmul 0514         nrf24l01SetRXMode@rxMode 0074                  __CFG_STVREN$ON 0000  
                     ??___lldiv 002B                       ??___lwdiv 0027                       ??___lwmod 0027  
          __end_of_nrf24l01Init 05D7            __end_of_nrf24l01Send 0605           _nrf24l01InitRegisters 022F  
                        _strcmp 0571                          _strcpy 05D7          __size_of_read_flashmem 0032  
            getADCValue@adcLoop 003A         __end_of__initialization 001F              getADCValue@channel 0039  
                 __end_of_NVMEM 0800              getADCValue@divider 0031                  __pcstackCOMMON 0070  
                 __end_of_sleep 0627            nrf24l01HandleRX@byte 007B   nrf24l01InitRegisters@enRXAddr 0028  
                _OPTION_REGbits 0095                         ??_sleep 0023                      __pbssBANK0 0049  
                    __pbssBANK1 00A0               ??_nrf24l01SPISend 0070                   _read_flashmem 04E2  
                    __pmaintext 02B9                         ?___lmul 0023               _nrf24l01SetRXMode 0474  
        ?_nrf24l01InitRegisters 0070                      __pintentry 0004             nrf24l01SPISend@data 0070  
                ___lmul@product 002B              ?_nrf24l01SetRXMode 0070        __end_of_enableInterrupts 063C  
                       ?_strcmp 0070                         ?_strcpy 0023           __end_of_n_ADDRESS_MUL 066F  
           ??_nrf24l01SetRXMode 0073        __end_of_nrf24l01SPIStart 062E                         _SSP1BUF 0211  
      __end_of_nrf24l01HandleRX 0100           _nrf24l01InterfaceInit 0605                  ?_read_flashmem 0023  
                 ??_getADCValue 0035           __size_of_nrf24l01Init 001B           __size_of_nrf24l01Send 0013  
     __end_of_nrf24l01SetRXMode 04AD      __end_of_nrf24l01SendString 022F                 __size_of___lmul 0030  
                       ___lldiv 0421                         ___lwdiv 04AD                         ___lwmod 0544  
                 ??_checkRxData 0023                         __ptext1 04E2                         __ptext2 05BC  
                       __ptext3 0605                         __ptext4 022F                         __ptext5 0100  
                       __ptext6 03C5                         __ptext7 0544                         __ptext8 04AD  
                       __ptext9 05D7                 __size_of_strcmp 0027                 __size_of_strcpy 001B  
                  __size_of_ISR 000E                         _counter 0049                         clrloop0 0649  
          end_of_initialization 001F                    _nrf24l01Name 00A0                    _nrf24l01Init 05BC  
                  _nrf24l01Send 05F2                 ___lldiv@divisor 0023                 ___lldiv@counter 0030  
                       utoa@buf 0047                         utoa@val 003F                         strcmp@r 0073  
           __end_of_getADCValue 03C5                       _PORTAbits 000C                __CFG_FOSC$INTOSC 0000  
                     _TRISAbits 008C                       _TRISCbits 008E                nrf24l01Send@data 0020  
           __end_of_checkRxData 066E                   ??_nrf24l01ISR 007D          ?_nrf24l01InterfaceInit 0070  
               ??_read_flashmem 0025      __size_of_nrf24l01SetRXMode 0039                  __end_of___lmul 0544  
                __end_of_strcmp 0598                  __end_of_strcpy 05F2             start_initialization 0013  
               _nrf24l01SPISend 0613                     __end_of_ISR 0012                 _nrf24l01RXValue 004D  
               _nrf24l01RXTopic 0055                 _nrf24l01TXValue 005D                 _nrf24l01TXTopic 0065  
         nrf24l01HandleRX@width 0079         __size_of_nrf24l01SPIEnd 0007         ??_nrf24l01InitRegisters 0023  
                   _getADCValue 0340                        ??___lmul 002B             __end_of_nrf24l01ISR 05BC  
             ?_enableInterrupts 0070                     _checkRxData 066A                        ??_strcmp 0072  
                      ??_strcpy 0025              ??_enableInterrupts 0070                       ___latbits 0000  
                 __pcstackBANK0 0020                   __pcstackBANK1 00B0               ?_nrf24l01SPIStart 0070  
            ??_nrf24l01SPIStart 0070               ?_nrf24l01HandleRX 0070              ??_nrf24l01HandleRX 0076  
              ___lwdiv@dividend 0025                        ?___lldiv 0023                        ?___lwdiv 0023  
                      ?___lwmod 0023            __end_of_n_ADDRESS_P0 0653         __end_of_nrf24l01SPISend 061E  
                 _NVMEM_absaddr 07E0       nrf24l01InitRegisters@enAA 0029              _nrf24l01SendString 0199  
              ___lwdiv@quotient 0028                  __size_of_sleep 0009             ?_nrf24l01SendString 0070  
                   _nrf24l01ISR 0598                       clear_ram0 0648                       _sleepLoop 004B  
          ??_nrf24l01SendString 0023                      _ADCON0bits 009D                      _ADCON1bits 009E  
                      _WPUAbits 020C               ___lmul@multiplier 0023         ??_nrf24l01InterfaceInit 0023  
             nrf24l01ISR@status 0021                  _nrf24l01SPIEnd 062E            read_flashmem@address 002A  
              __size_of___lldiv 0053                __size_of___lwdiv 0035                __size_of___lwmod 002D  
              ?_nrf24l01SPISend 0070                      _ANSELAbits 018C                      _ANSELCbits 018E  
                 _n_ADDRESS_MUL 066E                 ___lwdiv@divisor 0023                 ___lwdiv@counter 002A  
                      __ptext10 0199                        __ptext11 0340                        __ptext20 0474  
                      __ptext12 0514                        __ptext21 05F2                        __ptext13 0421  
                      __ptext22 0627                        __ptext14 066A                        __ptext23 0613  
                      __ptext15 061E                        __ptext24 062E                        __ptext25 0635  
                      __ptext17 0598                        __ptext18 0022                        __ptext19 0571  
        __end_of_nrf24l01SPIEnd 0635                        _nrf24l01 004C                      strcpy@from 0023  
                 __size_of_main 0087                   __size_of_loop 0099                   __size_of_utoa 005C  
  nrf24l01InitRegisters@feature 0026           __end_of_read_flashmem 0514    nrf24l01InitRegisters@rfSetup 0025  
                  ?_getADCValue 0031  __size_of_nrf24l01InitRegisters 008A   __end_of_nrf24l01InitRegisters 02B9  
                      int$flags 007E    nrf24l01InitRegisters@setupAW 0024                    _SSP1STATbits 0214  
                  ?_checkRxData 0070                      _INTCONbits 000B                      _FVRCONbits 0117  
                __pstringtext10 0000                 ?_nrf24l01SPIEnd 0070               nrf24l01HandleRX@i 007C  
                      intlevel1 0000             read_flashmem@offset 0023                    _n_ADDRESS_P0 064E  
           read_flashmem@result 0028       __size_of_enableInterrupts 0007                      _PMCON1bits 0195  
              ___lwmod@dividend 0025                ___lldiv@dividend 0027               __CFG_CLKOUTEN$OFF 0000  
   nrf24l01InitRegisters@config 002B                      _OSCCONbits 0099       __size_of_nrf24l01SPIStart 0007  
   nrf24l01InitRegisters@status 0027       __size_of_nrf24l01HandleRX 00DE                   __pstringtext1 064E  
                 __pstringtext2 066E                   __pstringtext3 063C                   __pstringtext4 0642  
                 __pstringtext5 0653                   __pstringtext6 0658                   __pstringtext7 065D  
                 __pstringtext8 0662                   __pstringtext9 0666                        utoa@base 0041  
    nrf24l01InitRegisters@DynPD 002A                        strcmp@s1 0074                        strcmp@s2 0070  
              ___lldiv@quotient 002C                 ___lwmod@divisor 0023                        strcpy@cp 0026  
                      strcpy@to 0027                 ___lwmod@counter 0028                     _SSPCON1bits 0215  
                    _WDTCONbits 0097                   ?_nrf24l01Init 0070                   ?_nrf24l01Send 0020  
                    _STATUSbits 0003                    ?_nrf24l01ISR 0070  
